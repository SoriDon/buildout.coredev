Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-12-06T10:45:01+05:30
Author: newbazz (newbazz) <krutamhathi14@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3fb2e9c4ce6772ce05623cf3b85e18a76d13dae2

Drops "type" from "script", "link" and "style" tags

Closes https://github.com/plone/Products.CMFPlone/issues/1078

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/styles.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index edec03552..2910dcc14 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -76,3 +76,5 @@ Bug Fixes:
   Completly removed ``came_from`` on ``@@register`` link.
   It does not make much sense anyway and we test nowhere if there is a came_from on that link.
   [jensens]
+
+- Remove depricated ``type`` attribute from ``script`` and ``link`` tags.
diff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt
index 14508188d..e9f7e6c0f 100644
--- a/Products/CMFPlone/resources/browser/scripts.pt
+++ b/Products/CMFPlone/resources/browser/scripts.pt
@@ -1,6 +1,6 @@
-<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
+<script tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
 <tal:scripts repeat="script view/scripts"><tal:block define="condcomment script/conditionalcomment; resetrjs script/resetrjs|nothing"><tal:if condition="resetrjs">
-  <tal:openreset content='structure string:&lt;script type="text/javascript"&gt;'/>
+  <tal:openreset content='structure string:&lt;script&gt;'/>
       /* reset requirejs definitions so that people who put requirejs in legacy compilation do not get errors */
       var _old_define = define;
       var _old_require = require;
@@ -10,11 +10,11 @@
 </tal:if><tal:if condition="condcomment">
     <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />
 </tal:if>
-  <script type="text/javascript" tal:attributes="src script/src; data-bundle script/bundle"></script>
+  <script tal:attributes="src script/src; data-bundle script/bundle"></script>
 <tal:if condition="condcomment">
   <tal:closecc tal:condition="condcomment" tal:replace="structure string:&lt;![endif]--&gt;" />
 </tal:if><tal:if condition="resetrjs">
-  <tal:openredefine content='structure string:&lt;script type="text/javascript"&gt;'/>
+  <tal:openredefine content='structure string:&lt;script&gt;'/>
       define = _old_define;
       require = _old_require;
   <tal:endredefine content='structure string:&lt;/script&gt;'/>
diff --git a/Products/CMFPlone/resources/browser/styles.pt b/Products/CMFPlone/resources/browser/styles.pt
index b9996785c..8efe67741 100644
--- a/Products/CMFPlone/resources/browser/styles.pt
+++ b/Products/CMFPlone/resources/browser/styles.pt
@@ -4,7 +4,6 @@
         <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />
     </tal:wcondcomment
     ><link rel="style"
-          type="text/css"
           tal:attributes="href style/src;
                           rel style/rel;
                           data-bundle style/bundle;" /><tal:wcondcomment tal:condition="condcomment">


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-03-02T11:53:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/e7ec46c99d8284aaa77f15e78be4b982fe0514e9

Merge branch 'master' into type

Files changed:
A Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py
A Products/CMFPlone/controlpanel/tests/test_controlpanel_installer.py
A Products/CMFPlone/controlpanel/tests/test_upgrades1.zcml
A Products/CMFPlone/controlpanel/tests/test_upgrades2.zcml
M CHANGES.rst
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/QuickInstallerTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/browser/templates/mail_password_template.pt
M Products/CMFPlone/controlpanel/browser/quickinstaller.pt
M Products/CMFPlone/controlpanel/browser/quickinstaller.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/overrides.zcml
M Products/CMFPlone/resources/browser/mixins.py
M Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
M Products/CMFPlone/tests/robot/test_linkintegrity.robot
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/test_safe_formatter.py
M Products/CMFPlone/tests/test_zmi.py
M Products/CMFPlone/tests/using_format_zope3_page_template.pt
M Products/CMFPlone/utils.py
M setup.py
D Products/CMFPlone/_scripts/generate_gruntfile.py
D Products/CMFPlone/tests/testQuickInstallerTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2910dcc14..5ab8569bd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -22,6 +22,12 @@ Breaking changes:
 - Render exceptions using an exception view instead of standard_error_message.
   [davisagli]
 
+- Remove old PlacelessTranslationService.
+  [jensens, ksuess]
+
+- Remove ``plone-generate-gruntfile`` (it is all available through ``plone-compile-resources``).
+  [jensens]
+
 New Features:
 
 - Fix imports to work with Python 3.
@@ -32,6 +38,34 @@ New Features:
 
 Bug Fixes:
 
+- Removed extra methods and tests for CMFQuickInstallerTool.
+  Moved those to the Products.CMFQuickInstallerTool package.
+  [maurits]
+
+- Added tests for add-ons control panel.
+  Add a link to the Site Setup.
+  Let ``get_product_version`` work when you call it with ``CMFPlacefulWorkflow`` too.
+  [maurits]
+
+- Fix bad domain for translating password reset mails.
+  [allusa]
+
+- Ignore invalid ``sort_on`` parameters in catalog ``searchResults``.
+  Otherwise you get a ``CatalogError``.
+  I get crazy sort_ons like '194' or 'null'.
+  [maurits]
+
+- Register the ``ExceptionView`` for the unspecific ``zope.interface.Interface`` for easier overloading.
+  Fixes a problem, where plone.rest couldn't overload the ExceptionView with an adapter bound to ``plone.rest.interfaces.IAPIRequest``.
+  [thet]
+
+- Fixed linkintegrity robot tests.  [maurits]
+
+- Fixed flaky actions controlpanel tests by waiting longer.  [maurits]
+
+- Require AccessControl 4.0b1 so ``guarded_getitem`` is used.
+  Part of PloneHotfix20171128.  [maurits]
+
 - Improved isURLInPortal according to PloneHotfix20171128.
   Accept only http/https, and doubly check escaped urls.  [maurits]
 
diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py
index cce0a34f7..8c39d0dc8 100644
--- a/Products/CMFPlone/CatalogTool.py
+++ b/Products/CMFPlone/CatalogTool.py
@@ -458,6 +458,11 @@ def searchResults(self, query=None, **kw):
         if not show_inactive and not self.allow_inactive(kw):
             kw['effectiveRange'] = DateTime()
 
+        sort_on = kw.get('sort_on')
+        if sort_on and sort_on not in self.indexes():
+            # I get crazy sort_ons like '194' or 'null'.
+            kw.pop('sort_on')
+
         return ZCatalog.searchResults(self, query, **kw)
 
     __call__ = searchResults
diff --git a/Products/CMFPlone/QuickInstallerTool.py b/Products/CMFPlone/QuickInstallerTool.py
index fcf69b12c..aee3a8039 100644
--- a/Products/CMFPlone/QuickInstallerTool.py
+++ b/Products/CMFPlone/QuickInstallerTool.py
@@ -1,114 +1,28 @@
 # -*- coding: utf-8 -*-
-from AccessControl import ClassSecurityInfo
-from App.class_init import InitializeClass
-from Products.CMFCore.permissions import ManagePortal
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import registerToolInterface
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
-from Products.CMFQuickInstallerTool.QuickInstallerTool \
-    import QuickInstallerTool as BaseTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
 import pkg_resources
 
 
-class QuickInstallerTool(PloneBaseTool, BaseTool):
-    """ A tool to ease installing/uninstalling all sorts of products """
+# *IF* the base tool is still there, it seems nice to inherit from it.
+try:
+    pkg_resources.get_distribution('Products.CMFQuickInstallerTool')
+except pkg_resources.DistributionNotFound:
+    class QuickInstallerTool(PloneBaseTool):
+        """ A tool to ease installing/uninstalling all sorts of products
 
-    meta_type = 'Plone QuickInstaller Tool'
-    security = ClassSecurityInfo()
-    toolicon = 'skins/plone_images/product_icon.png'
+        In Plone 5.2 the extra methods were moved to
+        Products.CMFQuickInstallerTool.
 
-    security.declareProtected(ManagePortal, 'upgradeInfo')
+        This tool is no longer used in Plone 6, but we will
+        keep the class so we can cleanly uninstall and remove this.
 
-    def upgradeInfo(self, pid):
-        # Returns a dict with two booleans values, stating if an upgrade
-        # required and available.
-        available = self.isProductAvailable(pid)
-        if not available:
-            return False
-        # Product version as per version.txt or fallback on metadata file
-        product_version = str(self.getProductVersion(pid))
-        installed_product_version = self._getOb(pid).getInstalledVersion()
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No GS profile, simple case as before, we can always upgrade
-            return dict(
-                required=product_version != installed_product_version,
-                available=True,
-                hasProfile=False,
-                installedVersion=installed_product_version,
-                newVersion=product_version,
-            )
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = str(setup.getVersionForProfile(profile_id))
-        if profile_version == 'latest':
-            profile_version = self.getLatestUpgradeStep(profile_id)
-        if profile_version == 'unknown':
-            # If a profile doesn't have a metadata.xml use product version
-            profile_version = product_version
-        installed_profile_version = setup.getLastVersionForProfile(profile_id)
-        # getLastVersionForProfile returns the version as a tuple or unknown.
-        if installed_profile_version != 'unknown':
-            installed_profile_version = str(
-                '.'.join(installed_profile_version))
-        return dict(
-            required=profile_version != installed_profile_version,
-            available=len(setup.listUpgrades(profile_id)) > 0,
-            hasProfile=True,
-            installedVersion=installed_profile_version,
-            newVersion=profile_version,
-        )
+        Remove this file in Plone 7.
+        """
+        pass
+else:
+    from Products.CMFQuickInstallerTool.QuickInstallerTool \
+        import QuickInstallerTool as BaseTool
 
-    security.declareProtected(ManagePortal, 'getLatestUpgradeStep')
-
-    def getLatestUpgradeStep(self, profile_id):
-        '''
-        Get the highest ordered upgrade step available to
-        a specific profile.
-
-        If anything errors out then go back to "old way"
-        by returning 'unknown'
-        '''
-        setup = getToolByName(self, 'portal_setup')
-        profile_version = 'unknown'
-        try:
-            available = setup.listUpgrades(profile_id, True)
-            if available:  # could return empty sequence
-                latest = available[-1]
-                profile_version = max(latest['dest'],
-                                      key=pkg_resources.parse_version)
-        except Exception:
-            pass
-
-        return profile_version
-
-    security.declareProtected(ManagePortal, 'upgradeProduct')
-
-    def upgradeProduct(self, pid):
-        profile = self.getInstallProfile(pid)
-        if profile is None:
-            # No upgrade profiles
-            return self.reinstallProducts(products=[pid])
-        profile_id = profile['id']
-        setup = getToolByName(self, 'portal_setup')
-        upgrades = setup.listUpgrades(profile_id)
-        for upgrade in upgrades:
-            # An upgrade may be a single step (for a bare upgradeStep)
-            # or a list of steps (for upgradeSteps containing upgradeStep
-            # directives).
-            if not type(upgrade) is list:
-                upgrade = [upgrade]
-            for upgradestep in upgrade:
-                step = upgradestep['step']
-                step.doStep(setup)
-        version = str(profile['version'])
-        if version == 'latest':
-            version = self.getLatestUpgradeStep(profile_id)
-        setup.setLastVersionForProfile(profile_id, version)
-
-
-QuickInstallerTool.__doc__ = BaseTool.__doc__
-
-InitializeClass(QuickInstallerTool)
-registerToolInterface('portal_quickinstaller', IQuickInstallerTool)
+    class QuickInstallerTool(PloneBaseTool, BaseTool):
+        pass
+    QuickInstallerTool.__doc__ = BaseTool.__doc__
diff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py
index 481f2e9e5..d200ff111 100644
--- a/Products/CMFPlone/__init__.py
+++ b/Products/CMFPlone/__init__.py
@@ -30,7 +30,6 @@ def initialize(context):
     from AccessControl import ModuleSecurityInfo
     from AccessControl import allow_class
     from AccessControl import allow_module
-    from AccessControl import allow_type
 
     # protect OFS.ObjectManager
     ModuleSecurityInfo('OFS.ObjectManager').setDefaultAccess(0)
@@ -116,18 +115,6 @@ def initialize(context):
     # Make cgi.escape available TTW
     ModuleSecurityInfo('cgi').declarePublic('escape')
 
-    # We want to allow all methods on string type except 'format'.
-    # That one needs special handling to avoid access to attributes.
-    from Products.CMFPlone.utils import _safe_format
-    rules = dict([(m, True) for m in dir(str) if not m.startswith('_')])
-    rules['format'] = _safe_format
-    allow_type(str, rules)
-
-    # Same for unicode instead of str.
-    rules = dict([(m, True) for m in dir(unicode) if not m.startswith('_')])
-    rules['format'] = _safe_format
-    allow_type(unicode, rules)
-
     # Apply monkey patches
     from Products.CMFPlone import patches  # noqa
 
diff --git a/Products/CMFPlone/_scripts/generate_gruntfile.py b/Products/CMFPlone/_scripts/generate_gruntfile.py
deleted file mode 100644
index a7bde2534..000000000
--- a/Products/CMFPlone/_scripts/generate_gruntfile.py
+++ /dev/null
@@ -1,44 +0,0 @@
-# -*- coding: utf-8 -*-
-# DEPRECATED
-# This is more of a script runner for the _generate_gruntfile.py
-# script. Just a wrapper so that script can be simply called
-# from the bin directory
-from Products.CMFPlone._scripts.compile_resources import generate_gruntfile
-import argparse
-import os
-import sys
-
-parser = argparse.ArgumentParser(
-    description='Generate Gruntfile.js from a Plone site configuration')
-parser.add_argument('--site-id', dest='site_id',
-                    default='Plone', help='ID for the plone site id')
-parser.add_argument('--instance', dest='instance',
-                    help='path to instance executable. If not provided, '
-                         'will look in bin this was executed from for '
-                         'instance or client1')
-parser.add_argument('--compile-dir', dest='compile_dir', default='',
-                    help='Output directory for the compiled bundle files.')
-
-
-def main(argv=sys.argv):
-    print ('-' * 80)
-    print(
-        'DEPRECATED: {0}\n'
-        'Use "bin/plone-compile-resources -IC [other params]" instead.\n'
-        'For more information use "bin/plone-compile-resources --help"'.format(
-            argv[0]
-        )
-    )
-    print ('-' * 80)
-    args, _ = parser.parse_known_args()
-    # XXX is this a good way to do it?
-    base_path = os.path.sep.join(
-        os.path.abspath(sys.argv[0]).split(os.path.sep)[:-2])
-
-    generate_gruntfile(
-        base_path,
-        args.instance,
-        args.site_id,
-        args.compile_dir
-    )
-    print('DONE DEPRECATED {0} (see above)'.format(argv[0]))
diff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml
index de4ced57f..2383aae72 100644
--- a/Products/CMFPlone/browser/configure.zcml
+++ b/Products/CMFPlone/browser/configure.zcml
@@ -283,6 +283,7 @@
       class=".exceptions.ExceptionView"
       template="templates/error_message.pt"
       permission="zope.Public"
+      layer="zope.interface.Interface"
       />
 
 </configure>
diff --git a/Products/CMFPlone/browser/templates/mail_password_template.pt b/Products/CMFPlone/browser/templates/mail_password_template.pt
index 63aded2ff..646740709 100644
--- a/Products/CMFPlone/browser/templates/mail_password_template.pt
+++ b/Products/CMFPlone/browser/templates/mail_password_template.pt
@@ -16,12 +16,12 @@ The site administrator asks you to reset your password for '<span i18n:name="use
           tal:content="member/id" />' userid. Your old password doesn't work anymore.
 </tal:i18n>
 
-<tal:i18n i18n:domain="passwordresettool"
-     i18n:translate="mailtemplate_text_linkreset">
+<tal:i18n i18n:translate="mailtemplate_text_linkreset">
 The following link will take you to a page where you can reset your password for <tal:i18n i18n:name="site_name"
           tal:content="portal_state/navigation_root_title" /> site:
 
-<tal:i18n tal:content="python:view.construct_url(reset['randomstring'])" i18n:name="reset_url" /></tal:i18n>
+<tal:i18n tal:content="python:view.construct_url(reset['randomstring'])" i18n:name="reset_url" />
+</tal:i18n>
 
 <tal:i18n
      i18n:translate="mailtemplate_text_expirationdate_linkreset">
diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.pt b/Products/CMFPlone/controlpanel/browser/quickinstaller.pt
index f1488bcad..d94896bce 100644
--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.pt
+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.pt
@@ -10,6 +10,12 @@
 
 <metal:main metal:fill-slot="prefs_configlet_main" i18n:domain="plone">
 
+    <a id="setup-link" class="link-parent"
+       tal:attributes="href string:$portal_url/@@overview-controlpanel"
+       i18n:translate="">
+        Site Setup
+    </a>
+
     <h1 class="documentFirstHeading"
         i18n:translate="">Add-ons</h1>
 
diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.py b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
index e5b109b97..d975f8ff3 100644
--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.py
+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.py
@@ -302,16 +302,10 @@ def get_product_version(self, product_id):
             dist = pkg_resources.get_distribution(product_id)
             return dist.version
         except pkg_resources.DistributionNotFound:
-            return ''
-
-        # TODO: check if extra Products check is needed after all.
-        # if "." not in product_id:
-        #     try:
-        #         dist = pkg_resources.get_distribution(
-        #             "Products." + product_id)
-        #         return dist.version
-        #     except pkg_resources.DistributionNotFound:
-        #         pass
+            if '.' in product_id:
+                return ''
+        # For CMFPlacefulWorkflow we need to try Products.CMFPlacefulWorkflow.
+        return self.get_product_version('Products.' + product_id)
 
     def get_latest_upgrade_step(self, profile_id):
         """Get highest ordered upgrade step for profile.
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py
new file mode 100644
index 000000000..b87bbb828
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.testing.z2 import Browser
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from zope.component import getMultiAdapter
+
+import unittest
+
+
+class AddonsControlPanelFunctionalTest(unittest.TestCase):
+    """Test that the add-ons control panel works nicely."""
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.browser = Browser(self.app)
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+        )
+
+    def test_addons_controlpanel_link(self):
+        self.browser.open(
+            '%s/@@overview-controlpanel' % self.portal_url)
+        self.browser.getLink('Add-ons').click()
+
+    def test_addons_controlpanel_backlink(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        self.assertTrue('General' in self.browser.contents)
+
+    def test_addons_controlpanel_sidebar(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        self.browser.getLink('Site Setup').click()
+        self.assertTrue(
+            self.browser.url.endswith('/plone/@@overview-controlpanel')
+        )
+
+    def test_addons_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name='prefs_install_products_form')
+        self.assertTrue(view())
+
+    def test_addons_controlpanel_no_upgrades(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        self.assertIn('No upgrades in this corner', self.browser.contents)
+
+    def test_addons_controlpanel_installable(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        # We expect a few standard add-ons.
+        self.assertIn('Workflow Policy Support', self.browser.contents)
+        self.assertIn('Multilingual Support', self.browser.contents)
+        self.assertIn('plone.session', self.browser.contents)
+
+    def test_addons_controlpanel_not_installable(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        # We do not expect some other add-ons.
+        self.assertNotIn('plone.app.upgrade', self.browser.contents)
+        self.assertNotIn('Products.CMFPlone', self.browser.contents)
+
+    def test_addons_controlpanel_install_and_uninstall_all(self):
+        self.browser.open(
+            '%s/prefs_install_products_form' % self.portal_url)
+        self.assertNotIn('Installed', self.browser.contents)
+        self.assertNotIn('Uninstalled', self.browser.contents)
+        # It is hard to determine which exact product will be installed
+        # by clicking on a button, because they are all called 'Install'.
+        # We install all available products.
+        for buttons in range(12):
+            try:
+                self.browser.getControl('Install', index=buttons)
+            except LookupError:
+                break
+        else:
+            # Either our test logic is off, or the code that determines
+            # which products are installable is actually wrong.
+            raise AssertionError('Too many Install buttons.')
+        # Click all install buttons.
+        for button in range(buttons):
+            # Always install the first.
+            self.browser.getControl('Install', index=0).click()
+            self.assertIn('Installed', self.browser.contents)
+        # There are no more install buttons.
+        with self.assertRaises(LookupError):
+            self.browser.getControl('Install', index=0)
+        # There should now be just as many Uninstall buttons.
+        self.browser.getControl('Uninstall', index=buttons - 1)
+        for button in range(buttons):
+            # Always uninstall the first.
+            self.browser.getControl('Uninstall', index=0).click()
+            self.assertIn('Uninstalled', self.browser.contents)
+        # There are no more uninstall buttons.
+        with self.assertRaises(LookupError):
+            self.browser.getControl('Uninstall', index=0)
+        # Instead, we could install all again if we want.
+        self.browser.getControl('Install', index=buttons - 1)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
index b0e29890d..c3c168500 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
@@ -98,7 +98,7 @@ def testControlPanelOverview(self):
         # make sure we can view the Site Setup page,
         # at both old and new URLs
         res = self.publish(
-            '/plone/@@overview-controlpanel', 'siteadmin:secret')
+            '/plone/plone_control_panel', 'siteadmin:secret')
         self.assertEqual(200, res.status)
         res = self.publish(
             '/plone/@@overview-controlpanel', 'siteadmin:secret'
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_installer.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_installer.py
new file mode 100644
index 000000000..152961563
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_installer.py
@@ -0,0 +1,388 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.controlpanel import tests
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from Products.CMFPlone.utils import get_installer
+from Products.GenericSetup.tool import UNKNOWN
+from zope.component import getMultiAdapter
+from zope.configuration import xmlconfig
+
+import unittest
+
+
+class AddonsIntegrationTest(unittest.TestCase):
+    """Test that the addons control panel is working nicely."""
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.installer = get_installer(self.portal, self.request)
+
+    def test_addons_controlpanel_view(self):
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="prefs_install_products_form")
+        self.assertTrue(view())
+
+    def test_addons_in_controlpanel(self):
+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")
+        self.assertIn('QuickInstaller', [
+            a.getAction(self)['id']
+            for a in self.controlpanel.listActions()
+        ])
+
+    def test_installer_view(self):
+        from Products.CMFPlone.controlpanel.browser.quickinstaller import \
+            InstallerView
+        view = getMultiAdapter((self.portal, self.portal.REQUEST),
+                               name="installer")
+        self.assertTrue(isinstance(view, InstallerView))
+        self.assertTrue(isinstance(self.installer, InstallerView))
+
+    def _test_install_uninstall(self, product):
+        self.assertTrue(self.installer.is_product_installable(product))
+        self.assertFalse(self.installer.is_product_installed(product))
+        # Install the product.
+        self.assertTrue(self.installer.install_product(product))
+        # Even after install this is still installable,
+        # because that simply means it has an install profile.
+        self.assertTrue(self.installer.is_product_installable(product))
+        self.assertTrue(self.installer.is_product_installed(product))
+        # Uninstall the product.
+        self.assertTrue(self.installer.uninstall_product(product))
+        self.assertTrue(self.installer.is_product_installable(product))
+        self.assertFalse(self.installer.is_product_installed(product))
+
+    def test_install_uninstall_cmfplacefulworkflow_without_products(self):
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        self._test_install_uninstall('CMFPlacefulWorkflow')
+
+    def test_install_uninstall_cmfplacefulworkflow_with_products(self):
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        self._test_install_uninstall('Products.CMFPlacefulWorkflow')
+
+    def test_install_uninstall_package(self):
+        try:
+            import plone.session
+            plone.session  # pyflakes
+        except ImportError:
+            return
+        self._test_install_uninstall('plone.session')
+
+    def test_unknown_package(self):
+        product = 'no.product'
+        self.assertFalse(self.installer.is_product_installable(product))
+        self.assertFalse(self.installer.is_product_installed(product))
+        # Install the product.
+        self.assertFalse(self.installer.install_product(product))
+        self.assertFalse(self.installer.is_product_installable(product))
+        self.assertFalse(self.installer.is_product_installed(product))
+        # Uninstall the product.
+        self.assertFalse(self.installer.uninstall_product(product))
+        self.assertFalse(self.installer.is_product_installable(product))
+        self.assertFalse(self.installer.is_product_installed(product))
+
+    def test_plone_app_upgrade_not_installable(self):
+        installable = self.installer.is_product_installable
+        # Test a few current and future plone.app.upgrade versions.
+        self.assertFalse(installable('plone.app.upgrade'))
+        self.assertFalse(installable('plone.app.upgrade.v30'))
+        self.assertFalse(installable('plone.app.upgrade.v40'))
+        self.assertFalse(installable('plone.app.upgrade.v50'))
+        self.assertFalse(installable('plone.app.upgrade.v51'))
+        self.assertFalse(installable('plone.app.upgrade.v52'))
+        self.assertFalse(installable('plone.app.upgrade.v53'))
+        self.assertFalse(installable('plone.app.upgrade.v60'))
+        self.assertFalse(installable('plone.app.upgrade.v61'))
+        self.assertFalse(installable('plone.app.upgrade.v62'))
+        self.assertFalse(installable('plone.app.upgrade.v63'))
+        self.assertFalse(installable('plone.app.upgrade.v70'))
+
+    def test_latest_upgrade_profiles3(self):
+        xmlconfig.file(
+            'test_upgrades1.zcml',
+            package=tests,
+            context=self.layer['configurationContext']
+        )
+        latest = self.installer.get_latest_upgrade_step(
+            'Products.CMFPlone:testfixture1')
+        self.assertEqual(latest, '3')
+
+    def test_latest_upgrade_profiles2(self):
+        # make sure strings don't break things
+        # note that pkg_resources interprets 1 as
+        # ''00000001', which is > 'banana'
+        xmlconfig.file(
+            'test_upgrades2.zcml',
+            package=tests,
+            context=self.layer['configurationContext']
+        )
+        latest = self.installer.get_latest_upgrade_step(
+            'Products.CMFPlone:testfixture2')
+        self.assertEqual(latest, '3')
+
+    def test_latest_upgrade_profiles_unknown(self):
+        latest = self.installer.get_latest_upgrade_step('no.profile')
+        self.assertEqual(latest, UNKNOWN)
+
+    def test_is_profile_installed(self):
+        self.assertFalse(self.installer.is_profile_installed('foo:default'))
+        self.assertTrue(self.installer.is_profile_installed(
+            'plone.app.dexterity:default'))
+        self.assertTrue(self.installer.is_profile_installed(
+            'profile-plone.app.dexterity:default'))
+
+    def test_is_product_installed(self):
+        self.assertFalse(self.installer.is_product_installed('foo'))
+        self.assertFalse(self.installer.is_product_installed('plone.session'))
+        self.assertTrue(self.installer.is_product_installed(
+            'plone.app.dexterity'))
+
+    def test_get_install_profiles(self):
+        # Note: this method name is a bit of a misnomer.
+        # It lists *all* extension profiles.
+        # The method seems unneeded.
+        self.assertEqual(self.installer.get_install_profiles('foo'), [])
+        self.assertEqual(
+            self.installer.get_install_profiles('plone.session'),
+            ['plone.session:default', 'plone.session:uninstall'])
+        self.assertEqual(
+            self.installer.get_install_profiles('plone.app.dexterity'),
+            ['plone.app.dexterity:default', 'plone.app.dexterity:testing'])
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        self.assertEqual(
+            self.installer.get_install_profiles('CMFPlacefulWorkflow'),
+            ['Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow',
+             'Products.CMFPlacefulWorkflow:base',
+             'Products.CMFPlacefulWorkflow:uninstall'])
+        self.assertEqual(
+            self.installer.get_install_profiles(
+                'Products.CMFPlacefulWorkflow'),
+            ['Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow',
+             'Products.CMFPlacefulWorkflow:base',
+             'Products.CMFPlacefulWorkflow:uninstall'])
+
+    def test_get_install_profile(self):
+        self.assertIsNone(self.installer.get_install_profile('foo'))
+        profile = self.installer.get_install_profile('plone.session')
+        self.assertEqual(profile['id'], 'plone.session:default')
+        profile = self.installer.get_install_profile('plone.app.dexterity')
+        self.assertEqual(profile['id'], 'plone.app.dexterity:default')
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        profile = self.installer.get_install_profile('CMFPlacefulWorkflow')
+        self.assertEqual(
+            profile['id'], 'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow')
+        profile = self.installer.get_install_profile(
+            'Products.CMFPlacefulWorkflow')
+        self.assertEqual(
+            profile['id'], 'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow')
+
+    def test_get_uninstall_profile(self):
+        self.assertIsNone(self.installer.get_uninstall_profile('foo'))
+        profile = self.installer.get_uninstall_profile('plone.session')
+        self.assertEqual(profile['id'], 'plone.session:uninstall')
+        profile = self.installer.get_uninstall_profile('plone.app.dexterity')
+        self.assertIsNone(profile)
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        profile = self.installer.get_uninstall_profile('CMFPlacefulWorkflow')
+        self.assertEqual(
+            profile['id'], 'Products.CMFPlacefulWorkflow:uninstall')
+        profile = self.installer.get_uninstall_profile(
+            'Products.CMFPlacefulWorkflow')
+        self.assertEqual(
+            profile['id'], 'Products.CMFPlacefulWorkflow:uninstall')
+
+    def test_get_product_version(self):
+        self.assertFalse(self.installer.get_product_version('foo'))
+        version = self.installer.get_product_version('plone.session')
+        self.assertIn('.', version)
+        version = self.installer.get_product_version('plone.app.dexterity')
+        self.assertIn('.', version)
+        try:
+            import Products.CMFPlacefulWorkflow
+            Products.CMFPlacefulWorkflow  # pyflakes
+        except ImportError:
+            return
+        version = self.installer.get_product_version('CMFPlacefulWorkflow')
+        self.assertIn('.', version)
+        version = self.installer.get_product_version(
+            'Products.CMFPlacefulWorkflow')
+        self.assertIn('.', version)
+
+    def test_upgrade_info(self):
+        # an unknown product
+        self.assertEqual(self.installer.upgrade_info('foo'), {})
+        # an uninstalled product
+        info = self.installer.upgrade_info('plone.session')
+        self.assertFalse(info['available'])
+        self.assertTrue(info['required'])
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+        # an installed product
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertFalse(info['available'])
+        self.assertFalse(info['required'])
+        self.assertNotEqual(info['installedVersion'], UNKNOWN)
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+        # fake an earlier version
+        ps = self.portal.portal_setup
+        ps.setLastVersionForProfile('plone.app.dexterity:default', '2002')
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertTrue(info['available'])
+        self.assertTrue(info['required'])
+        self.assertEqual(info['installedVersion'], '2002')
+        # upgrade the product
+        self.assertTrue(self.installer.upgrade_product('plone.app.dexterity'))
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertFalse(info['available'])
+        self.assertFalse(info['required'])
+        self.assertNotEqual(info['installedVersion'], UNKNOWN)
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+
+    def test_upgrade_product(self):
+        # an unknown product
+        self.assertFalse(self.installer.upgrade_product('foo'))
+
+        # We do not complain about an uninstalled product.
+        self.assertTrue(self.installer.upgrade_product('plone.session'))
+        info = self.installer.upgrade_info('plone.session')
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+
+        # We do not complain about an up to date product.
+        self.assertTrue(self.installer.upgrade_product('plone.app.dexterity'))
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertNotEqual(info['installedVersion'], UNKNOWN)
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+        # fake an earlier version
+        ps = self.portal.portal_setup
+        ps.setLastVersionForProfile('plone.app.dexterity:default', '2002')
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertEqual(info['installedVersion'], '2002')
+        # upgrade the product
+        self.assertTrue(self.installer.upgrade_product('plone.app.dexterity'))
+        info = self.installer.upgrade_info('plone.app.dexterity')
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+
+        # Try a Product too.
+        info = self.installer.upgrade_info('Products.CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+        self.assertTrue(self.installer.upgrade_product(
+            'Products.CMFPlacefulWorkflow'))
+        info = self.installer.upgrade_info('Products.CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+        info = self.installer.upgrade_info('CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+        self.assertTrue(self.installer.upgrade_product('CMFPlacefulWorkflow'))
+        info = self.installer.upgrade_info('CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], UNKNOWN)
+        # fake a version
+        ps = self.portal.portal_setup
+        ps.setLastVersionForProfile(
+            'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow', '0.0')
+        info = self.installer.upgrade_info('Products.CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], '0.0')
+        info = self.installer.upgrade_info('CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], '0.0')
+        # upgrade the product
+        self.assertTrue(self.installer.upgrade_product('CMFPlacefulWorkflow'))
+        info = self.installer.upgrade_info('CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+        info = self.installer.upgrade_info('Products.CMFPlacefulWorkflow')
+        self.assertEqual(info['installedVersion'], info['newVersion'])
+
+    def test_install_product(self):
+        # an unknown product
+        self.assertFalse(self.installer.install_product('foo'))
+
+        # an uninstalled product
+        self.assertFalse(self.installer.is_product_installed('plone.session'))
+        self.assertTrue(self.installer.install_product('plone.session'))
+        self.assertTrue(self.installer.is_product_installed('plone.session'))
+
+        # We complain a bit when installing an already installed product.
+        self.assertTrue(
+            self.installer.is_product_installed('plone.app.dexterity'))
+        self.assertFalse(self.installer.install_product('plone.app.dexterity'))
+        self.assertTrue(
+            self.installer.is_product_installed('plone.app.dexterity'))
+
+        # Try a Product too.
+        self.assertFalse(
+            self.installer.is_product_installed('CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.install_product('CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.is_product_installed(
+            'CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.is_product_installed(
+            'Products.CMFPlacefulWorkflow'))
+        # undo
+        self.assertTrue(self.installer.uninstall_product(
+            'CMFPlacefulWorkflow'))
+        self.assertFalse(self.installer.is_product_installed(
+            'Products.CMFPlacefulWorkflow'))
+        # redo with 'Products.'
+        self.assertTrue(self.installer.install_product(
+            'Products.CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.is_product_installed(
+            'CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.is_product_installed(
+            'Products.CMFPlacefulWorkflow'))
+
+    def test_uninstall_product(self):
+        # an unknown product
+        self.assertFalse(self.installer.uninstall_product('foo'))
+
+        # We do not complain about an already uninstalled product.
+        self.assertFalse(self.installer.is_product_installed('plone.session'))
+        self.assertTrue(self.installer.uninstall_product('plone.session'))
+        self.assertFalse(self.installer.is_product_installed('plone.session'))
+
+        # We do complain about an installed product without uninstall profile.
+        # Dexterity cannot be uninstalled.
+        self.assertTrue(
+            self.installer.is_product_installed('plone.app.dexterity'))
+        self.assertFalse(self.installer.uninstall_product(
+            'plone.app.dexterity'))
+        self.assertTrue(
+            self.installer.is_product_installed('plone.app.dexterity'))
+
+        # Try a Product too.
+        self.assertTrue(self.installer.install_product('CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.uninstall_product(
+            'CMFPlacefulWorkflow'))
+        self.assertFalse(self.installer.is_product_installed(
+            'CMFPlacefulWorkflow'))
+        self.assertFalse(self.installer.is_product_installed(
+            'Products.CMFPlacefulWorkflow'))
+        # Again with 'Products.'
+        self.assertTrue(self.installer.install_product(
+            'Products.CMFPlacefulWorkflow'))
+        self.assertTrue(self.installer.uninstall_product(
+            'Products.CMFPlacefulWorkflow'))
+        self.assertFalse(self.installer.is_product_installed(
+            'CMFPlacefulWorkflow'))
+        self.assertFalse(self.installer.is_product_installed(
+            'Products.CMFPlacefulWorkflow'))
+
+
+def dummy_handler():
+    pass
diff --git a/Products/CMFPlone/controlpanel/tests/test_upgrades1.zcml b/Products/CMFPlone/controlpanel/tests/test_upgrades1.zcml
new file mode 100644
index 000000000..a33635e92
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_upgrades1.zcml
@@ -0,0 +1,41 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
+    i18n_domain="plone">
+
+  <genericsetup:registerProfile
+      name="testfixture1"
+      title="Plone Test Fixture 1"
+      directory="profiles/testfixture"
+      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      />
+
+  <genericsetup:upgradeStep
+      source="*"
+      destination="1"
+      title="Null upgrade step"
+      description=""
+      profile="Products.CMFPlone:testfixture1"
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      />
+
+  <genericsetup:upgradeStep
+      source="2"
+      destination="3"
+      title="Add pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture1"
+      />
+
+  <genericsetup:upgradeStep
+      source="1"
+      destination="2"
+      title="Remove pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture1"
+      />
+
+</configure>
diff --git a/Products/CMFPlone/controlpanel/tests/test_upgrades2.zcml b/Products/CMFPlone/controlpanel/tests/test_upgrades2.zcml
new file mode 100644
index 000000000..0a6fcb4c4
--- /dev/null
+++ b/Products/CMFPlone/controlpanel/tests/test_upgrades2.zcml
@@ -0,0 +1,59 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
+    i18n_domain="plone">
+
+  <genericsetup:registerProfile
+      name="testfixture2"
+      title="Plone Test Fixture 2"
+      directory="profiles/testfixture"
+      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"
+      provides="Products.GenericSetup.interfaces.EXTENSION"
+      />
+
+  <genericsetup:upgradeStep
+      source="*"
+      destination="1"
+      title="Null upgrade step"
+      description=""
+      profile="Products.CMFPlone:testfixture2"
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      />
+
+  <genericsetup:upgradeStep
+      source="2"
+      destination="3"
+      title="Add pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture2"
+      />
+
+  <genericsetup:upgradeStep
+      source="1"
+      destination="2"
+      title="Remove pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture2"
+      />
+
+  <genericsetup:upgradeStep
+      source="apples"
+      destination="banana"
+      title="Add pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture2"
+      />
+
+  <genericsetup:upgradeStep
+      source="cumquats"
+      destination="dandelions"
+      title="Remove pants"
+      description=""
+      handler="Products.CMFPlone.controlpanel.tests.test_controlpanel_installer.dummy_handler"
+      profile="Products.CMFPlone:testfixture2"
+      />
+
+</configure>
diff --git a/Products/CMFPlone/overrides.zcml b/Products/CMFPlone/overrides.zcml
index af88b7514..b607ef576 100644
--- a/Products/CMFPlone/overrides.zcml
+++ b/Products/CMFPlone/overrides.zcml
@@ -4,7 +4,7 @@
            i18n_domain="plone">
 
     <include package="Products.CMFCore" file="overrides.zcml" />
-    <include package="Products.PlacelessTranslationService" file="overrides.zcml" />
+    <include package="plone.i18n" file="overrides.zcml" />
     <include package="plone.app.portlets" file="overrides.zcml" />
 
     <utility
diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 254695372..78ec3075f 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
+from AccessControl.safe_formatter import SafeFormatter
 from plone.registry.interfaces import IRegistry
 from six.moves.urllib.parse import urlparse
 from Products.CMFPlone.interfaces import IResourceRegistry
-from Products.CMFPlone.utils import SafeFormatter
 from Products.Five.browser import BrowserView
 from zope.component import getMultiAdapter
 from zope.component import getUtility
diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
index d6a8157e9..1cd2e5f3f 100644
--- a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
+++ b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
@@ -18,34 +18,40 @@ Scenario: Modify an existing action in Actions Control Panel
   Given a logged-in administrator
     and the actions control panel
    When I modify an action title
+   Sleep  1
    Then anonymous users can see the new action title
 
 Scenario: Reorder in Actions Control Panel
   Given a logged-in administrator
     and the actions control panel
    When I change the actions order
+   Sleep  1
    Then anonymous users can see the actions new ordering
 
 Scenario: Create a new action in Actions Control Panel
   Given a logged-in administrator
     and the actions control panel
    When I add a new action
+   Sleep  1
    Then logged-in users can see the new action
 
 Scenario: Hide/show an action in Actions Control Panel
   Given a logged-in administrator
     and the actions control panel
    When I hide an action
+   Sleep  1
    Then anonymous users cannot see the action anymore
   Given a logged-in administrator
     and the actions control panel
    When I unhide the action
+   Sleep  1
    Then anonymous users can see the action again
 
 Scenario: Delete an action in Actions Control Panel
   Given a logged-in administrator
     and the actions control panel
    When I delete an action
+   Sleep  1
    Then anonymous users cannot see the action anymore
 
 *** Keywords *****************************************************************
diff --git a/Products/CMFPlone/tests/robot/test_linkintegrity.robot b/Products/CMFPlone/tests/robot/test_linkintegrity.robot
index 6b6b6090d..38f916f68 100644
--- a/Products/CMFPlone/tests/robot/test_linkintegrity.robot
+++ b/Products/CMFPlone/tests/robot/test_linkintegrity.robot
@@ -25,8 +25,6 @@ Test Teardown  Run keywords  Plone Test Teardown
 *** Test Cases ***************************************************************
 
 Scenario: When page is linked show warning
-  [Tags]  unstable
-  [Documentation]  This sometimes fails with: StaleElementReferenceException: Message: Element not found in the cache.
   Given a logged-in site administrator
     and a page to link to
     and a page to edit
@@ -35,8 +33,6 @@ Scenario: When page is linked show warning
 
 
 Scenario: After you fix linked page no longer show warning
-  [Tags]  unstable
-  [Documentation]  This sometimes fails with: StaleElementReferenceException: Message: Element not found in the cache.
   Given a logged-in site administrator
   a page to link to
     and a page to edit
@@ -47,9 +43,6 @@ Scenario: After you fix linked page no longer show warning
 
 
 Scenario: Show warning when deleting linked item from folder_contents
-  [Tags]  unstable
-  [Documentation]  This sometimes fails with: StaleElementReferenceException: Message: Element not found in the cache.
-  ...              This one seems to fail more often than the others.
   Given a logged-in site administrator
   a page to link to
     and a page to edit
@@ -86,6 +79,8 @@ a link in rich text
   Given patterns are loaded
   Wait until element is visible  css=.pat-relateditems .select2-input.select2-default
   Click Element  css=.pat-relateditems .select2-input.select2-default
+  Wait until element is visible  xpath=(//span[contains(., 'One level up')])
+  Click Element  xpath=(//span[contains(., 'One level up')])
   Wait until element is visible  xpath=(//span[contains(., 'Foo')])
   Click Element  xpath=(//span[contains(., 'Foo')])
   Wait until page contains  Foo
diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index a9559b760..c64e08ff4 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -528,6 +528,16 @@ def afterSetUp(self):
         self.folder.doc5.reindexObject()
         self.folder.doc6.reindexObject()
 
+    def testUnknownSortOnIsIgnored(self):
+        # You should not get a CatalogError when an invalid sort_on is passed.
+        # I get crazy sort_ons like '194' or 'null'.
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='194')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='null')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='relevance')) > 0)
+
     def testSortTitleReturnsProperOrderForNumbers(self):
         # Documents should be returned in proper numeric order
         results = self.catalog(SearchableText='foo', sort_on='sortable_title')
diff --git a/Products/CMFPlone/tests/testQuickInstallerTool.py b/Products/CMFPlone/tests/testQuickInstallerTool.py
deleted file mode 100644
index 31bf71b34..000000000
--- a/Products/CMFPlone/tests/testQuickInstallerTool.py
+++ /dev/null
@@ -1,60 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone import tests
-from zope.configuration import xmlconfig
-
-
-class TestQuickInstallerTool(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-
-    def _installed(self):
-        return [p['id'] for p in self.qi.listInstalledProducts()]
-
-    def _available(self):
-        return [p['id'] for p in self.qi.listInstallableProducts()]
-
-    def testInstallUninstallProduct(self):
-        try:
-            import Products.CMFPlacefulWorkflow
-            Products.CMFPlacefulWorkflow  # pyflakes
-        except ImportError:
-            return
-        # CMFPlacefulWorkflow should be uninstalled, we install it and
-        # it should not show up as installable
-        self.setRoles(('Manager',))
-        self.qi.installProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._installed())
-        self.assertFalse('CMFPlacefulWorkflow' in self._available())
-        self.qi.uninstallProducts(['CMFPlacefulWorkflow', ])
-        self.assertTrue('CMFPlacefulWorkflow' in self._available())
-        self.assertFalse('CMFPlacefulWorkflow' in self._installed())
-
-    def testUpgradeProfilesNotShown(self):
-        self.assertFalse('plone.app.upgrade.v30' in self._available())
-
-    def testLatestUpgradeProfiles(self):
-        xmlconfig.file(
-            'test_upgrades1.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-    def testLatestUpgradeProfiles2(self):
-        # make sure strings don't break things
-        # note that pkg_resources interprets 1 as
-        # ''00000001', which is > 'banana'
-        xmlconfig.file(
-            'test_upgrades2.zcml',
-            package=tests,
-            context=self.layer['configurationContext']
-        )
-        latest = self.qi.getLatestUpgradeStep('Products.CMFPlone:testfixture')
-        self.assertTrue(latest == '3')
-
-
-def dummy_handler():
-    pass
diff --git a/Products/CMFPlone/tests/test_safe_formatter.py b/Products/CMFPlone/tests/test_safe_formatter.py
index 07753718e..4db89b21e 100644
--- a/Products/CMFPlone/tests/test_safe_formatter.py
+++ b/Products/CMFPlone/tests/test_safe_formatter.py
@@ -1,3 +1,4 @@
+from AccessControl.ZopeGuards import guarded_getattr
 from plone.app.testing import login
 from plone.app.testing import logout
 from plone.app.testing import setRoles
@@ -7,14 +8,33 @@
 from zExceptions import Unauthorized
 
 
-BAD_STR = """
+BAD_ATTR_STR = """
 <p tal:content="python:'class of {0} is {0.__class__}'.format(context)" />
 """
-BAD_UNICODE = """
+BAD_ATTR_UNICODE = """
 <p tal:content="python:u'class of {0} is {0.__class__}'.format(context)" />
 """
+BAD_KEY_STR = """
+<p tal:content="python:'access by key: {0[secret]}'.format(context)" />
+"""
+BAD_KEY_UNICODE = """
+<p tal:content="python:u'access by key: {0[secret]}'.format(context)" />
+"""
+BAD_ITEM_STR = """
+<p tal:content="python:'access by item: {0[0]}'.format(context)" />
+"""
+BAD_ITEM_UNICODE = """
+<p tal:content="python:u'access by item: {0[0]}'.format(context)" />
+"""
 GOOD_STR = '<p tal:content="python:(\'%s\' % context).lower()" />'
 GOOD_UNICODE = '<p tal:content="python:(\'%s\' % context).lower()" />'
+# Attribute access is not completely forbidden, it is simply checked.
+GOOD_FORMAT_ATTR_STR = """
+<p tal:content="python:'title of {0} is {0.title}'.format(context)" />
+"""
+GOOD_FORMAT_ATTR_UNICODE = """
+<p tal:content="python:u'title of {0} is {0.title}'.format(context)" />
+"""
 AQ_TEST = """
 <p tal:content="python:\'parent of {0} is {0.aq_parent}\'.format(context)" />
 """
@@ -32,95 +52,204 @@ def hack_pt(pt, context=None):
     pt.context = context
 
 
+def create_private_document(portal, _id):
+    setRoles(portal, TEST_USER_ID, ['Manager'])
+    login(portal, TEST_USER_NAME)
+    wf_tool = portal.portal_workflow
+    wf_tool.setChainForPortalTypes(
+        ['Document'], 'simple_publication_workflow')
+    portal.invokeFactory('Document', _id)
+    setRoles(portal, TEST_USER_ID, ['Member'])
+    logout()
+    return getattr(portal, _id)
+
+
+class UnauthorizedSecurityPolicy:
+    """Policy which denies every access."""
+
+    def validate(self, *args, **kw):
+        from AccessControl.unauthorized import Unauthorized
+        raise Unauthorized('Nothing is allowed!')
+
+
 class TestSafeFormatter(PloneTestCase):
     """The the safe formatter.
 
-    This is from PloneHotfix20170117.
+    This is from PloneHotfix20170117 and PloneHotfix20171128.
     """
 
-    def test_cook_zope2_page_templates_bad_str(self):
+    def test_cook_zope2_page_templates_bad_attr_str(self):
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
-        pt = ZopePageTemplate('mytemplate', BAD_STR)
+        pt = ZopePageTemplate('mytemplate', BAD_ATTR_STR)
         hack_pt(pt)
         self.assertRaises(Unauthorized, pt.pt_render)
+        hack_pt(pt, context=self.portal)
+        self.assertRaises(Unauthorized, pt.pt_render)
 
-    def test_cook_zope2_page_templates_bad_unicode(self):
+    def test_cook_zope2_page_templates_bad_attr_unicode(self):
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
-        pt = ZopePageTemplate('mytemplate', BAD_UNICODE)
+        pt = ZopePageTemplate('mytemplate', BAD_ATTR_UNICODE)
         hack_pt(pt)
         self.assertRaises(Unauthorized, pt.pt_render)
+        hack_pt(pt, context=self.portal)
+        self.assertRaises(Unauthorized, pt.pt_render)
 
     def test_cook_zope2_page_templates_good_str(self):
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
         pt = ZopePageTemplate('mytemplate', GOOD_STR)
         hack_pt(pt)
         self.assertEqual(pt.pt_render().strip(), '<p>none</p>')
+        hack_pt(pt, context=self.portal)
+        self.assertEqual(
+            pt.pt_render().strip(), '<p>&lt;plonesite at plone&gt;</p>')
 
     def test_cook_zope2_page_templates_good_unicode(self):
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
         pt = ZopePageTemplate('mytemplate', unicode(GOOD_UNICODE))
         hack_pt(pt)
         self.assertEqual(pt.pt_render().strip(), '<p>none</p>')
+        hack_pt(pt, self.portal)
+        self.assertEqual(
+            pt.pt_render().strip(), '<p>&lt;plonesite at plone&gt;</p>')
 
-    def test_cook_zope2_page_templates_aq_parent(self):
-        # Accessing aq_parent should be allowed normally.
+    def test_cook_zope2_page_templates_good_format_attr_str(self):
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
-        pt = ZopePageTemplate('mytemplate', AQ_TEST)
-        hack_pt(pt, context=self.portal)
+        pt = ZopePageTemplate('mytemplate', GOOD_FORMAT_ATTR_STR)
+        hack_pt(pt, self.portal)
+        self.assertEqual(
+            pt.pt_render().strip(),
+            '<p>title of &lt;PloneSite at plone&gt; is Plone site</p>')
+
+    def test_cook_zope2_page_templates_good_format_attr_unicode(self):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        pt = ZopePageTemplate('mytemplate', GOOD_FORMAT_ATTR_UNICODE)
+        hack_pt(pt, self.portal)
         self.assertEqual(
             pt.pt_render().strip(),
-            u'<p>parent of &lt;PloneSite at plone&gt; is '
-            u'&lt;Application at &gt;</p>')
+            '<p>title of &lt;PloneSite at plone&gt; is Plone site</p>')
 
     def test_access_to_private_content_not_allowed_via_rich_text(self):
         try:
-            # This is only available for tests if we have plone.app.dexterity,
-            # which in tests is by default only the case for Plone 5.
             from plone.app.textfield.value import RichTextValue
         except ImportError:
             return
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
-        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        foobar = create_private_document(self.portal, 'foobar')
         login(self.portal, TEST_USER_NAME)
-        wf_tool = self.portal.portal_workflow
-        wf_tool.setChainForPortalTypes(
-            ['Document'], 'simple_publication_workflow')
-        self.portal.invokeFactory('Document', 'foobar')
-        foobar = self.portal.foobar
         foobar.text = RichTextValue(u'Secret.', 'text/plain', 'text/html')
         self.assertEqual(
             self.portal.portal_workflow.getInfoFor(foobar, 'review_state'),
             'private')
+
+        # Check that guarded_getattr is happy for the current user.
+        self.assertEqual(guarded_getattr(self.portal, 'foobar'), foobar)
+        self.assertEqual(
+            guarded_getattr(self.portal.foobar, 'text'), foobar.text)
+        # Access to text.output may be more restricted than access to the
+        # text object itself, but this makes no sense, so we switch that
+        # off in this test.
+        # self.assertRaises(
+        #     Unauthorized, guarded_getattr, self.portal.foobar.text, 'output')
+        self.portal.foobar.text.__allow_access_to_unprotected_subobjects__ = 1
+        self.assertEqual(
+            guarded_getattr(self.portal.foobar.text, 'output'),
+            '<p>Secret.</p>')
+        TEMPLATE = '<p tal:content="structure python:%s" />'
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "'access {0.foobar.text.output}'.format(context)")
+        hack_pt(pt, context=self.portal)
+        self.assertEqual(pt.pt_render(), '<p>access <p>Secret.</p></p>')
+
+        # Check the same for anonymous.
         logout()
-        pt = ZopePageTemplate('mytemplate', '''
-<p tal:content="structure python:'access {0.foobar.text.output}'.format(context).lower()" />
-''')  # noqa
+        self.assertRaises(
+            Unauthorized, guarded_getattr, self.portal, 'foobar')
+        self.assertRaises(
+            Unauthorized, guarded_getattr, self.portal.foobar, 'text')
+        # *If* somehow anonymous can access the text, then we have allowed
+        # access to the output as well.
+        self.assertEqual(
+            guarded_getattr(self.portal.foobar.text, 'output'),
+            '<p>Secret.</p>')
+        # But for the template anonymous would need access to everything,
+        # which rightly fails.
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+        # Test the simpler access without str.format for the current user.
+        login(self.portal, TEST_USER_NAME)
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "context.foobar.text.output")
         hack_pt(pt, context=self.portal)
+        self.assertEqual(pt.pt_render(), '<p><p>Secret.</p></p>')
+
+        # and for anonymous
+        logout()
         self.assertRaises(Unauthorized, pt.pt_render)
 
-    def test_access_to_private_content_not_allowed_via_any_attribute(self):
+    def test_access_to_private_content_not_allowed_in_any_way(self):
         # This is a more general version of the rich text one.
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
-        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        foobar = create_private_document(self.portal, 'foobar')
         login(self.portal, TEST_USER_NAME)
-        wf_tool = self.portal.portal_workflow
-        wf_tool.setChainForPortalTypes(
-            ['Document'], 'simple_publication_workflow')
-        self.portal.invokeFactory('Document', 'foobar')
-        foobar = self.portal.foobar
         self.assertEqual(
             self.portal.portal_workflow.getInfoFor(foobar, 'review_state'),
             'private')
-        logout()
+        TEMPLATE = '<p tal:content="structure python:%s" />'
+
+        # attribute access
         # If access to context.foobar.Title was allowed, it would still only
         # say 'bound method ATDocument.Title', without giving the actual title,
         # but there may be other attributes that give worse info.
-        pt = ZopePageTemplate('mytemplate', '''
-<p tal:content="structure python:'access {0.foobar.Title}'.format(context)" />
-''')
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "'access {0.foobar.Title}'.format(context)")
         hack_pt(pt, context=self.portal)
+        login(self.portal, TEST_USER_NAME)
+        # We replace ATDocument with Document to make the tests pass
+        # with ATContentTypes and plone.app.contenttypes.
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p>access <bound method Document.Title of '
+            '<Document at /plone/foobar>></p>')
+        logout()
         self.assertRaises(Unauthorized, pt.pt_render)
 
+        # key access
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "'{0[foobar]}'.format(context)")
+        hack_pt(pt, context=self.portal)
+        login(self.portal, TEST_USER_NAME)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p><Document at foobar></p>')
+        logout()
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+        # Prepare a list so we can test item access.
+        self.portal.testlist = [foobar]
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "'{0.testlist}'.format(context)")
+        hack_pt(pt, context=self.portal)
+        # If you have such a list, you *can* see an id.
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            u'<p>[<Document at /plone/foobar>]</p>')
+        # But you cannot access an item.
+        pt = ZopePageTemplate(
+            'mytemplate', TEMPLATE %
+            "'{0.testlist[0]}'.format(context)")
+        hack_pt(pt, context=self.portal)
+        self.assertRaises(Unauthorized, pt.pt_render)
+        # except as authenticated user
+        login(self.portal, TEST_USER_NAME)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p><Document at foobar></p>')
+
     # Zope 3 templates are always file system templates.  So we actually have
     # no problems allowing str.format there.
 
@@ -148,7 +277,33 @@ def test_cook_zope3_page_templates_using_format(self):
             u"<p>class of &lt;plonesite at plone&gt; is "
             u"&lt;class 'products.cmfplone.portal.plonesite'&gt;</p>\n"
             u"<p>CLASS OF &lt;PLONESITE AT PLONE&gt; IS "
-            u"&lt;CLASS 'PRODUCTS.CMFPLONE.PORTAL.PLONESITE'&gt;</p>")
+            u"&lt;CLASS 'PRODUCTS.CMFPLONE.PORTAL.PLONESITE'&gt;</p>\n"
+            u"<p>{'foo': 42} has foo=42</p>\n"
+            u"<p>{'foo': 42} has foo=42</p>\n"
+            u"<p>['ni'] has first item ni</p>\n"
+            u"<p>['ni'] has first item ni</p>"
+        )
+
+
+class TestFunctionalSafeFormatter(PloneTestCase):
+    """Functional tests for the safe formatter.
+
+    This is from PloneHotfix20170117 and PloneHotfix20171128.
+    """
+
+    def test_safe_format_properly_applied(self):
+        from AccessControl.SimpleObjectPolicies import ContainerAssertions
+        import types
+        ca = ContainerAssertions
+        self.assertTrue(str in ca)
+        self.assertTrue(isinstance(ca[str], dict))
+        self.assertTrue('format' in ca[str])
+        string_rule = ca[str]['format']
+        self.assertTrue(isinstance(string_rule, types.FunctionType))
+        # Take less steps for unicode.
+        unicode_rule = ca[unicode]['format']
+        self.assertTrue(isinstance(unicode_rule, types.FunctionType))
+        self.assertEqual(string_rule, unicode_rule)
 
     def test_standard_error_message(self):
         # In Plone 5.0 standard_error_message.py has:
@@ -157,6 +312,7 @@ def test_standard_error_message(self):
         #
         # So if there is an error and the request does not accept html, then
         # str.format is used.  We don't want this to fail with an Unauthorized.
+        # For good measure we check this in Plone 4.3 too.
 
         response = self.publish(
             '/plone/standard_error_message',
@@ -191,26 +347,80 @@ def format(self, *args, **kwargs):
             self.assertFalse(
                 'Products.CMFPlone.Portal.PloneSite' in output.body)
 
-    def test_positional_argument_regression(self):
-        """
-        to test http://bugs.python.org/issue13598 issue
-        """
-        from Products.CMFPlone.utils import SafeFormatter
+    def test_cook_zope2_page_templates_bad_key_str(self):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        pt = ZopePageTemplate('mytemplate', BAD_KEY_STR)
+        hack_pt(pt, self.portal)
+        create_private_document(self.portal, 'secret')
+        login(self.portal, TEST_USER_NAME)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p>access by key: &lt;Document at secret&gt;</p>')
+        logout()
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+    def test_cook_zope2_page_templates_bad_key_unicode(self):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        pt = ZopePageTemplate('mytemplate', BAD_KEY_UNICODE)
+        hack_pt(pt, self.portal)
+        create_private_document(self.portal, 'secret')
+        login(self.portal, TEST_USER_NAME)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p>access by key: &lt;Document at secret&gt;</p>')
+        logout()
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+    def test_cook_zope2_page_templates_bad_item_str(self):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        secret = create_private_document(self.portal, 'secret')
+        login(self.portal, TEST_USER_NAME)
+        self.portal.testlist = [secret]
+        pt = ZopePageTemplate('mytemplate', BAD_ITEM_STR)
+        hack_pt(pt, self.portal.testlist)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p>access by item: &lt;Document at secret&gt;</p>')
+        logout()
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+    def test_cook_zope2_page_templates_bad_item_unicode(self):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        secret = create_private_document(self.portal, 'secret')
+        login(self.portal, TEST_USER_NAME)
+        self.portal.testlist = [secret]
+        pt = ZopePageTemplate('mytemplate', BAD_ITEM_UNICODE)
+        hack_pt(pt, self.portal.testlist)
+        self.assertEqual(
+            pt.pt_render().replace('ATDocument', 'Document'),
+            '<p>access by item: &lt;Document at secret&gt;</p>')
+        logout()
+        self.assertRaises(Unauthorized, pt.pt_render)
+
+    def assert_is_checked_via_security_manager(self, pt_content):
+        from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
+        from AccessControl.SecurityManager import setSecurityPolicy
+        from AccessControl.SecurityManagement import noSecurityManager
+
+        pt = ZopePageTemplate('mytemplate', pt_content)
+        noSecurityManager()
+        old_security_policy = setSecurityPolicy(UnauthorizedSecurityPolicy())
         try:
-            self.assertEquals(
-                SafeFormatter('{} {}').safe_format('foo', 'bar'),
-                'foo bar'
-            )
-        except ValueError:
-            # On Python 2.6 you get:
-            # ValueError: zero length field name in format
-            pass
-
-        self.assertEquals(
-            SafeFormatter('{0} {1}').safe_format('foo', 'bar'),
-            'foo bar'
+            hack_pt(pt, context=self.portal)
+            self.assertRaises(Unauthorized, pt.pt_render)
+        finally:
+            setSecurityPolicy(old_security_policy)
+
+    def test_getattr_access_is_checked_via_security_manager(self):
+        self.assert_is_checked_via_security_manager(
+            """<p tal:content="python:'{0.acl_users}'.format(context)" />""")
+
+    def test_getitem_access_is_checked_via_security_manager(self):
+        self.assert_is_checked_via_security_manager(
+            """<p tal:content="python:'{c[acl_users]}'.format(c=context)" />"""
         )
-        self.assertEquals(
-            SafeFormatter('{1} {0}').safe_format('foo', 'bar'),
-            'bar foo'
+
+    def test_key_access_is_checked_via_security_manager(self):
+        self.assert_is_checked_via_security_manager(
+            """<p tal:content="python:'{c[0]}'.format(c=[context])" />"""
         )
diff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py
index a80ab01b3..b754ad725 100644
--- a/Products/CMFPlone/tests/test_zmi.py
+++ b/Products/CMFPlone/tests/test_zmi.py
@@ -146,11 +146,6 @@ def test_portal_purgepolicy(self):
         view = self.portal.restrictedTraverse(url)
         self.assertTrue(view(), msg='{0} is broken'.format(url))
 
-    def test_portal_quickinstaller(self):
-        url = 'portal_quickinstaller/manage_installProductsForm'
-        view = self.portal.restrictedTraverse(url)
-        self.assertTrue(view(), msg='{0} is broken'.format(url))
-
     def test_portal_referencefactories(self):
         url = 'portal_referencefactories/manage_main'
         view = self.portal.restrictedTraverse(url)
diff --git a/Products/CMFPlone/tests/using_format_zope3_page_template.pt b/Products/CMFPlone/tests/using_format_zope3_page_template.pt
index 1e6508c25..4b0658a6a 100644
--- a/Products/CMFPlone/tests/using_format_zope3_page_template.pt
+++ b/Products/CMFPlone/tests/using_format_zope3_page_template.pt
@@ -1,2 +1,6 @@
 <p tal:content="python:'class of {0} is {0.__class__}'.format(context).lower()" />
 <p tal:content="python:u'class of {0} is {0.__class__}'.format(context).upper()" />
+<p tal:content="python:'{0} has foo={0[foo]}'.format({'foo': 42})" />
+<p tal:content="python:u'{0} has foo={0[foo]}'.format({'foo': 42})" />
+<p tal:content="python:'{0} has first item {0[0]}'.format(['ni'])" />
+<p tal:content="python:'{0} has first item {0[0]}'.format(['ni'])" />
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 881d1cec3..3ed5228b0 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -3,7 +3,7 @@
 from AccessControl import getSecurityManager
 from AccessControl import ModuleSecurityInfo
 from AccessControl import Unauthorized
-from AccessControl.ZopeGuards import guarded_getattr
+from AccessControl.safe_formatter import SafeFormatter
 from Acquisition import aq_base
 from Acquisition import aq_get
 from Acquisition import aq_inner
@@ -12,7 +12,6 @@
 from App.Dialogs import MessageDialog
 from App.ImageFile import ImageFile
 from cgi import escape
-from collections import Mapping
 from DateTime import DateTime
 from DateTime.interfaces import DateTimeError
 from OFS.CopySupport import CopyError
@@ -49,7 +48,6 @@
 import OFS
 import pkg_resources
 import re
-import string
 import sys
 import transaction
 import warnings
@@ -793,70 +791,6 @@ def get_top_site_from_url(context, request):
     return site
 
 
-class _MagicFormatMapping(Mapping):
-    """
-    Pulled from Jinja2
-
-    This class implements a dummy wrapper to fix a bug in the Python
-    standard library for string formatting.
-
-    See http://bugs.python.org/issue13598 for information about why
-    this is necessary.
-    """
-
-    def __init__(self, args, kwargs):
-        self._args = args
-        self._kwargs = kwargs
-        self._last_index = 0
-
-    def __getitem__(self, key):
-        if key == '':
-            idx = self._last_index
-            self._last_index += 1
-            try:
-                return self._args[idx]
-            except LookupError:
-                pass
-            key = str(idx)
-        return self._kwargs[key]
-
-    def __iter__(self):
-        return iter(self._kwargs)
-
-    def __len__(self):
-        return len(self._kwargs)
-
-
-class SafeFormatter(string.Formatter):
-
-    def __init__(self, value):
-        self.value = value
-        super(SafeFormatter, self).__init__()
-
-    def get_field(self, field_name, args, kwargs):
-        """
-        Here we're overridding so we can use guarded_getattr instead of
-        regular getattr
-        """
-        first, rest = field_name._formatter_field_name_split()
-
-        obj = self.get_value(first, args, kwargs)
-
-        # loop through the rest of the field_name, doing
-        #  getattr or getitem as needed
-        for is_attr, i in rest:
-            if is_attr:
-                obj = guarded_getattr(obj, i)
-            else:
-                obj = obj[i]
-
-        return obj, first
-
-    def safe_format(self, *args, **kwargs):
-        kwargs = _MagicFormatMapping(args, kwargs)
-        return self.vformat(self.value, args, kwargs)
-
-
 def _safe_format(inst, method):
     """Use our SafeFormatter that uses guarded_getattr for attribute access.
 
diff --git a/setup.py b/setup.py
index 3c3f79100..c148e4f3a 100644
--- a/setup.py
+++ b/setup.py
@@ -14,7 +14,7 @@
         "Framework :: Plone",
         "Framework :: Plone :: 5.1",
         "Framework :: Zope2",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
         "Operating System :: OS Independent",
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.7",
@@ -45,6 +45,7 @@
     ),
     install_requires=[
         'setuptools',
+        'AccessControl >= 4.0b1',
         'Acquisition',
         'DateTime',
         'ExtensionClass',
@@ -61,7 +62,6 @@
         'Products.ExternalEditor',
         'Products.GenericSetup >= 1.8.2',
         'Products.MimetypesRegistry',
-        'Products.PlacelessTranslationService',
         # 'Products.PloneLanguageTool',
         'Products.PlonePAS',
         'Products.PluggableAuthService',
@@ -150,7 +150,6 @@
     ],
     entry_points="""\
       [console_scripts]
-      plone-generate-gruntfile = Products.CMFPlone._scripts.generate_gruntfile:main
       plone-compile-resources = Products.CMFPlone._scripts.compile_resources:main
       """
 )


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-03-02T11:54:52+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1c4940f457c24f2237e1f7f237acdbfbe9313528

add github committer name to changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 5ab8569bd..a5ad4c496 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -112,3 +112,4 @@ Bug Fixes:
   [jensens]
 
 - Remove depricated ``type`` attribute from ``script`` and ``link`` tags.
+  [newbazz]


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-03-02T22:33:09+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/aef2a44845ae13f4b182a32e852caacaf3c6f02b

Merge branch 'master' into type

Files changed:
M CHANGES.rst
M Products/CMFPlone/browser/exceptions.py
M Products/CMFPlone/browser/templates/error_message.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index a5ad4c496..5c32a569f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -38,6 +38,12 @@ New Features:
 
 Bug Fixes:
 
+- Fix Exception-View when main_template can't be rendered. Fixes #2325.
+  [pbauer]
+
+- Render exceptions as text, not html to fix format of infos after traceback.
+  [pbauer]
+
 - Removed extra methods and tests for CMFQuickInstallerTool.
   Moved those to the Products.CMFQuickInstallerTool package.
   [maurits]
diff --git a/Products/CMFPlone/browser/exceptions.py b/Products/CMFPlone/browser/exceptions.py
index 581543cd2..7a1a712f6 100644
--- a/Products/CMFPlone/browser/exceptions.py
+++ b/Products/CMFPlone/browser/exceptions.py
@@ -3,7 +3,6 @@
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from zExceptions.ExceptionFormatter import format_exception
-from zope.component.hooks import getSite
 
 import json
 import sys
@@ -24,7 +23,7 @@ def __call__(self):
         error_type = exception.__class__.__name__
         exc_type, value, traceback = sys.exc_info()
         error_tb = ''.join(
-            format_exception(exc_type, value, traceback, as_html=True))
+            format_exception(exc_type, value, traceback, as_html=False))
         request.response.setStatus(exc_type)
 
         # Indicate exception as JSON
@@ -34,24 +33,16 @@ def __call__(self):
                 'error_type': error_type,
             })
 
-        if getSite() is None:
-            # We cannot get the site, so we cannot render our nice template
-            template = self.basic_template
-        else:
-            # Use a simplified template if main_template is not available
-            try:
-                self.context.unrestrictedTraverse('main_template')
-            except:
-                template = self.basic_template
-            else:
-                template = self.index
-
         # Render page with user-facing error notice
         request.set('disable_border', True)
         request.set('disable_plone.leftcolumn', True)
         request.set('disable_plone.rightcolumn', True)
 
-        return template(
-            error_type=error_type,
-            error_tb=error_tb,
-        )
+        try:
+            return self.index(
+                error_type=error_type,
+                error_tb=error_tb)
+        except:
+            return self.basic_template(
+                error_type=error_type,
+                error_tb=error_tb)
diff --git a/Products/CMFPlone/browser/templates/error_message.pt b/Products/CMFPlone/browser/templates/error_message.pt
index 7d09b29c5..d73e88d70 100644
--- a/Products/CMFPlone/browser/templates/error_message.pt
+++ b/Products/CMFPlone/browser/templates/error_message.pt
@@ -103,7 +103,7 @@
                    Here is the full error message:
                    </p>
 
-                   <div tal:replace="structure err_tb"/>
+                   <pre tal:content="err_tb"/>
                 </div>
 
                 <tal:noentry condition="not:isManager">


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-03-02T22:33:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/7eadb2006e8732eec2246f9be1f29eaf6777d51e

Merge pull request #2239 from newbazz/type

Drops "type" from "script", "link" and "style" tags

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/styles.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index dc6532bfa..5c32a569f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -116,3 +116,6 @@ Bug Fixes:
   Completly removed ``came_from`` on ``@@register`` link.
   It does not make much sense anyway and we test nowhere if there is a came_from on that link.
   [jensens]
+
+- Remove depricated ``type`` attribute from ``script`` and ``link`` tags.
+  [newbazz]
diff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt
index 14508188d..e9f7e6c0f 100644
--- a/Products/CMFPlone/resources/browser/scripts.pt
+++ b/Products/CMFPlone/resources/browser/scripts.pt
@@ -1,6 +1,6 @@
-<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
+<script tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
 <tal:scripts repeat="script view/scripts"><tal:block define="condcomment script/conditionalcomment; resetrjs script/resetrjs|nothing"><tal:if condition="resetrjs">
-  <tal:openreset content='structure string:&lt;script type="text/javascript"&gt;'/>
+  <tal:openreset content='structure string:&lt;script&gt;'/>
       /* reset requirejs definitions so that people who put requirejs in legacy compilation do not get errors */
       var _old_define = define;
       var _old_require = require;
@@ -10,11 +10,11 @@
 </tal:if><tal:if condition="condcomment">
     <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />
 </tal:if>
-  <script type="text/javascript" tal:attributes="src script/src; data-bundle script/bundle"></script>
+  <script tal:attributes="src script/src; data-bundle script/bundle"></script>
 <tal:if condition="condcomment">
   <tal:closecc tal:condition="condcomment" tal:replace="structure string:&lt;![endif]--&gt;" />
 </tal:if><tal:if condition="resetrjs">
-  <tal:openredefine content='structure string:&lt;script type="text/javascript"&gt;'/>
+  <tal:openredefine content='structure string:&lt;script&gt;'/>
       define = _old_define;
       require = _old_require;
   <tal:endredefine content='structure string:&lt;/script&gt;'/>
diff --git a/Products/CMFPlone/resources/browser/styles.pt b/Products/CMFPlone/resources/browser/styles.pt
index b9996785c..8efe67741 100644
--- a/Products/CMFPlone/resources/browser/styles.pt
+++ b/Products/CMFPlone/resources/browser/styles.pt
@@ -4,7 +4,6 @@
         <tal:opencc tal:replace="structure string:&lt;!--[if ${condcomment}]&gt;" />
     </tal:wcondcomment
     ><link rel="style"
-          type="text/css"
           tal:attributes="href style/src;
                           rel style/rel;
                           data-bundle style/bundle;" /><tal:wcondcomment tal:condition="condcomment">


