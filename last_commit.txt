Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T16:44:52+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/e885a6a32bd6ad6ecd9eff3f62a250be0c4f30f8

isort

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/testing.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_svg.py
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/svg_utils.py
M setup.cfg

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex f7a1fe3..4e7cbc1 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -1,12 +1,13 @@\n-import logging\n-import re\n-\n-from plone.namedfile.interfaces import IAvailableSizes\n+from bs4 import BeautifulSoup\n from plone.app.uuid.utils import uuidToObject\n+from plone.namedfile.interfaces import IAvailableSizes\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from zope.component import queryUtility\n-from bs4 import BeautifulSoup\n+\n+import logging\n+import re\n+\n \n try:\n     from plone.base.interfaces import IImagingSchema\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 5459c6e..03fb1db 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -4,14 +4,15 @@\n from DateTime import DateTime\n from io import BytesIO\n from plone.memoize import ram\n-from plone.protect import PostOnly\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IStableImageScale\n+from plone.namedfile.picture import get_picture_variants\n+from plone.namedfile.picture import Img2PictureTag\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n-from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n+from plone.protect import PostOnly\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IImageScaleFactory\n from plone.scale.interfaces import IScaledImageQuality\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex a1c3885..56137d8 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -2,7 +2,6 @@\n from plone.testing import Layer\n from plone.testing import publisher\n from plone.testing import zca\n-\n from plone.testing import zope\n from zope.configuration import xmlconfig\n \ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 643793c..0c78c79 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -3,9 +3,9 @@\n \n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n-from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from zope.interface.verify import verifyClass\n \n import unittest\ndiff --git a/plone/namedfile/tests/test_svg.py b/plone/namedfile/tests/test_svg.py\nindex 7d3f430..2b3f7fe 100644\n--- a/plone/namedfile/tests/test_svg.py\n+++ b/plone/namedfile/tests/test_svg.py\n@@ -1,13 +1,13 @@\n # -*- coding: utf-8 -*-\n \n-import unittest\n-\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n from plone.namedfile.utils.svg_utils import dimension_int\n from plone.namedfile.utils.svg_utils import process_svg\n \n+import unittest\n+\n \n class TestSvg(unittest.TestCase):\n \ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 01db7f6..b50acce 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -8,10 +8,10 @@\n from plone.registry.interfaces import IRegistry\n from six import BytesIO\n from six.moves import urllib\n-from ZPublisher.Iterators import IStreamIterator\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n from zope.interface import implementer\n+from ZPublisher.Iterators import IStreamIterator\n \n import mimetypes\n import os.path\n@@ -19,6 +19,8 @@\n import PIL.Image\n import six\n import struct\n+\n+\n if six.PY3:  # pragma: no cover\n     from collections.abc import Iterable\n else:  # pragma: no cover\ndiff --git a/plone/namedfile/utils/svg_utils.py b/plone/namedfile/utils/svg_utils.py\nindex 0177bfc..26e8e48 100644\n--- a/plone/namedfile/utils/svg_utils.py\n+++ b/plone/namedfile/utils/svg_utils.py\n@@ -1,10 +1,12 @@\n # -*- coding: utf-8 -*-\n \n-import re\n-import xml.etree.cElementTree as et\n from io import BytesIO\n from logging import getLogger\n \n+import re\n+import xml.etree.cElementTree as et\n+\n+\n log = getLogger(__name__)\n \n \ndiff --git a/setup.cfg b/setup.cfg\nindex c95c6f1..a4eb26a 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -6,3 +6,10 @@ ignore =\n   requirements-*.txt\n   sources-*.ini\n   tox.ini\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T16:45:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/84861928761ca86de3ef5640f7825f30001ec964

pyupgrade --py36-plus

Files changed:
M plone/__init__.py
M plone/namedfile/__init__.py
M plone/namedfile/browser.py
M plone/namedfile/copy.py
M plone/namedfile/editor.py
M plone/namedfile/field.py
M plone/namedfile/file.py
M plone/namedfile/handler.py
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_display_file.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/tests/test_svg.py
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M plone/namedfile/utils/svg_utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/namedfile/__init__.py b/plone/namedfile/__init__.py\nindex 79905d7..e708de8 100644\n--- a/plone/namedfile/__init__.py\n+++ b/plone/namedfile/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.file import NamedBlobFile  # noqa\n from plone.namedfile.file import NamedBlobImage  # noqa\n from plone.namedfile.file import NamedFile  # noqa\ndiff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex daaa769..69d02b2 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_getattr\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n@@ -77,7 +76,7 @@ class Download(BrowserView):\n     """\n \n     def __init__(self, context, request):\n-        super(Download, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.fieldname = None\n         self.filename = None\n \n@@ -116,7 +115,7 @@ def handle_request_range(self, file):\n                     self.request.response.setHeader(\'Content-Length\', size)\n                     self.request.response.setHeader(\n                         \'Content-Range\',\n-                        \'bytes {0}-{1}/{2}\'.format(start, end - 1, length))\n+                        f\'bytes {start}-{end - 1}/{length}\')\n                     self.request.response.setStatus(206)  # Partial content\n                     return dict(start=start, end=end)\n                 except ValueError:\n@@ -175,10 +174,10 @@ def set_headers(self, file):\n             if self.use_denylist:\n                 if mimetype in self.disallowed_inline_mimetypes:\n                     # Let the Download view handle this.\n-                    return super(DisplayFile, self).set_headers(file)\n+                    return super().set_headers(file)\n             else:\n                 # Use the allowlist\n                 if mimetype not in self.allowed_inline_mimetypes:\n                     # Let the Download view handle this.\n-                    return super(DisplayFile, self).set_headers(file)\n+                    return super().set_headers(file)\n         set_headers(file, self.request.response)\ndiff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py\nindex d189c39..582efa9 100644\n--- a/plone/namedfile/copy.py\n+++ b/plone/namedfile/copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Copy hook for proper copying blob data\n \n This file was borrowed from z3c.blobfile and is licensed under the terms of\n@@ -16,7 +15,7 @@\n \n @implementer(ICopyHook)\n @adapter(INamedBlobFile)\n-class BlobFileCopyHook(object):\n+class BlobFileCopyHook:\n     """A copy hook that fixes the blob after copying"""\n \n     def __init__(self, context):\ndiff --git a/plone/namedfile/editor.py b/plone/namedfile/editor.py\nindex 6b09c82..d6153ea 100644\n--- a/plone/namedfile/editor.py\n+++ b/plone/namedfile/editor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import field\n from plone.namedfile import interfaces\n from plone.schemaeditor.fields import FieldFactory\n@@ -37,8 +36,8 @@ class INamedImageField(interfaces.INamedImageField):\n         required=False)\n \n \n-NamedFileFactory = FieldFactory(field.NamedFile, _(u\'File Upload\'))\n-NamedImageFactory = FieldFactory(field.NamedImage, _(u\'Image\'))\n+NamedFileFactory = FieldFactory(field.NamedFile, _(\'File Upload\'))\n+NamedImageFactory = FieldFactory(field.NamedImage, _(\'Image\'))\n \n \n class INamedBlobFileField(interfaces.INamedBlobFileField):\n@@ -73,5 +72,5 @@ class INamedBlobImageField(interfaces.INamedBlobImageField):\n         required=False)\n \n \n-NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _(u\'File Upload\'))\n-NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _(u\'Image\'))\n+NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _(\'File Upload\'))\n+NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _(\'Image\'))\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 37bcc13..1895253 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.file import NamedBlobFile as BlobFileValueType\n from plone.namedfile.file import NamedBlobImage as BlobImageValueType\n from plone.namedfile.file import NamedFile as FileValueType\n@@ -28,7 +27,7 @@\n \n @implementer(IPluggableImageFieldValidation)\n @adapter(INamedImageField, Interface)\n-class ImageContenttypeValidator(object):\n+class ImageContenttypeValidator:\n \n     def __init__(self, field, value):\n         self.field = field\n@@ -44,7 +43,7 @@ def __call__(self):\n \n class InvalidImageFile(ValidationError):\n     """Exception for invalid image file"""\n-    __doc__ = _(u\'Invalid image file\')\n+    __doc__ = _(\'Invalid image file\')\n \n \n def validate_binary_field(interface, field, value):\n@@ -71,10 +70,10 @@ class NamedFile(Object):\n     def __init__(self, **kw):\n         if \'schema\' in kw:\n             self.schema = kw.pop(\'schema\')\n-        super(NamedFile, self).__init__(schema=self.schema, **kw)\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedFile, self)._validate(value)\n+        super()._validate(value)\n         validate_file_field(self, value)\n \n \n@@ -89,10 +88,10 @@ class NamedImage(Object):\n     def __init__(self, **kw):\n         if \'schema\' in kw:\n             self.schema = kw.pop(\'schema\')\n-        super(NamedImage, self).__init__(schema=self.schema, **kw)\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedImage, self)._validate(value)\n+        super()._validate(value)\n         validate_image_field(self, value)\n \n \n@@ -107,10 +106,10 @@ class NamedBlobFile(Object):\n     def __init__(self, **kw):\n         if \'schema\' in kw:\n             self.schema = kw.pop(\'schema\')\n-        super(NamedBlobFile, self).__init__(schema=self.schema, **kw)\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobFile, self)._validate(value)\n+        super()._validate(value)\n         validate_file_field(self, value)\n \n \n@@ -125,8 +124,8 @@ class NamedBlobImage(Object):\n     def __init__(self, **kw):\n         if \'schema\' in kw:\n             self.schema = kw.pop(\'schema\')\n-        super(NamedBlobImage, self).__init__(schema=self.schema, **kw)\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobImage, self)._validate(value)\n+        super()._validate(value)\n         validate_image_field(self, value)\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 6d0bf52..30c3a50 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # The implementations in this file are largely borrowed\n # from zope.app.file and z3c.blobfile\n # and are licensed under the ZPL.\n@@ -60,10 +59,7 @@ def _get_contents(self):\n \n         return b\'\'.join(result)\n \n-    if six.PY2:\n-        __str__ = _get_contents\n-    else:\n-        __bytes__ = _get_contents\n+    __bytes__ = _get_contents\n \n \n FILECHUNK_CLASSES = [FileChunk]\n@@ -186,10 +182,10 @@ def _getData(self):\n     def _setData(self, data):\n \n         # Handle case when data is a string\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode(\'UTF-8\')\n \n-        if isinstance(data, six.binary_type):\n+        if isinstance(data, bytes):\n             self._data, self._size = FileChunk(data), len(data)\n             return\n \n@@ -299,7 +295,7 @@ def __init__(self, data=b\'\', contentType=\'\', filename=None):\n             self.exif_data = exif_data\n \n     def _setData(self, data):\n-        super(NamedImage, self)._setData(data)\n+        super()._setData(data)\n \n         contentType, self._width, self._height = getImageInfo(self._data)\n         if contentType:\n@@ -379,7 +375,7 @@ class NamedBlobImage(NamedBlobFile):\n     """\n \n     def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        super(NamedBlobImage, self).__init__(data,\n+        super().__init__(data,\n                                              contentType=contentType,\n                                              filename=filename)\n \n@@ -406,7 +402,7 @@ def __init__(self, data=b\'\', contentType=\'\', filename=None):\n                 self.exif = exif_data\n \n     def _setData(self, data):\n-        super(NamedBlobImage, self)._setData(data)\n+        super()._setData(data)\n         firstbytes = self.getFirstBytes()\n         res = getImageInfo(firstbytes)\n         if res == (\'image/jpeg\', -1, -1) or res == (\'image/tiff\', -1, -1):\ndiff --git a/plone/namedfile/handler.py b/plone/namedfile/handler.py\nindex 6b12398..a5ed77d 100644\n--- a/plone/namedfile/handler.py\n+++ b/plone/namedfile/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import field\n from plone.supermodel.exportimport import ObjectHandler\n \ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 2266ccf..65f4871 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n from zope.schema.interfaces import IObject\n@@ -10,16 +9,16 @@\n class IFile(Interface):\n \n     contentType = schema.NativeStringLine(\n-        title=u\'Content Type\',\n-        description=u\'The content type identifies the type of data.\',\n+        title=\'Content Type\',\n+        description=\'The content type identifies the type of data.\',\n         default=\'\',\n         required=False,\n         missing_value=\'\'\n     )\n \n     data = schema.Bytes(\n-        title=u\'Data\',\n-        description=u\'The actual content of the object.\',\n+        title=\'Data\',\n+        description=\'The actual content of the object.\',\n         default=b\'\',\n         missing_value=\'\',\n         required=False,\n@@ -85,7 +84,7 @@ class INamed(Interface):\n     """An item with a filename\n     """\n \n-    filename = schema.TextLine(title=u\'Filename\', required=False, default=None)\n+    filename = schema.TextLine(title=\'Filename\', required=False, default=None)\n \n \n class INamedFile(INamed, IFile):\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 6e5c64e..9f8bdc7 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import NamedBlobFile\n from plone.namedfile import NamedBlobImage\n from plone.namedfile import NamedFile\n@@ -50,7 +49,7 @@ def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n-        if not isinstance(value.contentType, six.text_type):\n+        if not isinstance(value.contentType, str):\n             return value.contentType.decode(\'utf8\')\n         return value.contentType\n \ndiff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 4e7cbc1..1bc5ebc 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -36,7 +36,7 @@ def get_picture_variants():\n     return getattr(settings, "picture_variants", {})\n \n \n-class Img2PictureTag(object):\n+class Img2PictureTag:\n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n         return parts and parts[0] or ""\n@@ -91,7 +91,7 @@ def create_picture_tag(\n                     # scale_url = scale_obj.url\n                     scale_url = self.update_src_scale(src=src, scale=scale)\n                 scale_width = self.get_scale_width(scale)\n-                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+                source_srcset.append(f"{scale_url} {scale_width}w")\n             source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n             if media:\n                 source_tag["media"] = media\n@@ -137,8 +137,8 @@ def update_src_scale(self, src, scale):\n         parts = src.split("/")\n         if "." in parts[-1]:\n             field_name = parts[-1].split("-")[0]\n-            src_scale = "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            src_scale = "/".join(parts[:-1]) + f"/{field_name}/{scale}"\n             src_scale\n         else:\n-            src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n+            src_scale = "/".join(parts[:-1]) + f"/{scale}"\n         return src_scale\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 03fb1db..66e7514 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_getattr\n from Acquisition import aq_base\n from DateTime import DateTime\n@@ -69,8 +68,8 @@ def __init__(self, context, request, **info):\n             name = info["uid"]\n         else:\n             name = info["fieldname"]\n-        self.__name__ = "{0}.{1}".format(name, extension)\n-        self.url = "{0}/@@images/{1}".format(url, self.__name__)\n+        self.__name__ = f"{name}.{extension}"\n+        self.url = f"{url}/@@images/{self.__name__}"\n         self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n@@ -81,7 +80,7 @@ def srcset_attribute(self):\n         extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n             _srcset_attr.append(\n-                "{0}/@@images/{1}.{2} {3}x".format(\n+                "{}/@@images/{}.{} {}x".format(\n                     self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n                 )\n             )\n@@ -129,9 +128,9 @@ def tag(\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n-            elif isinstance(v, six.binary_type):\n-                v = six.text_type(v, "utf8")\n-            parts.append("{0}={1}".format(k, quoteattr(v)))\n+            elif isinstance(v, bytes):\n+                v = str(v, "utf8")\n+            parts.append(f"{k}={quoteattr(v)}")\n         parts.append("/>")\n \n         return " ".join(parts)\n@@ -170,7 +169,7 @@ def HEAD(self, REQUEST, RESPONSE=None):\n \n \n @implementer(ITraversable)\n-class ImmutableTraverser(object):\n+class ImmutableTraverser:\n     def __init__(self, scale):\n         self.scale = scale\n \n@@ -185,7 +184,7 @@ def traverse(self, name, furtherPath):\n \n \n @implementer(IImageScaleFactory)\n-class DefaultImageScalingFactory(object):\n+class DefaultImageScalingFactory:\n     def __init__(self, context):\n         self.context = context\n         # fieldname will be set for real in the __call__ method.\n@@ -261,7 +260,7 @@ def handle_image(\n         if getattr(orig_value, "contentType", "") == "image/svg+xml":\n             # No need to scale, we can simply use the original data,\n             # but report a different width and height.\n-            if isinstance(orig_data, (six.text_type)):\n+            if isinstance(orig_data, (str)):\n                 orig_data = safe_encode(orig_data)\n             if isinstance(orig_data, (bytes)):\n                 orig_data = BytesIO(orig_data)\n@@ -275,7 +274,7 @@ def handle_image(\n             raise\n         except Exception:\n             logger.exception(\n-                \'Could not scale "{0!r}" of {1!r}\'.format(\n+                \'Could not scale "{!r}" of {!r}\'.format(\n                     orig_value,\n                     self.url(),\n                 ),\n@@ -345,7 +344,7 @@ def __call__(\n         # Note: the format may differ from the original.\n         # For example a TIFF may have been turned into a PNG.\n         data, format_, dimensions = result\n-        mimetype = "image/{0}".format(format_.lower())\n+        mimetype = f"image/{format_.lower()}"\n         value = orig_value.__class__(\n             data,\n             contentType=mimetype,\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 4091d1a..1e5d366 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n from OFS.Image import Pdata\n@@ -16,10 +15,10 @@\n \n \n @implementer(IStorage)\n-class BytesStorable(object):\n+class BytesStorable:\n \n     def store(self, data, blob):\n-        if not isinstance(data, six.binary_type):\n+        if not isinstance(data, bytes):\n             raise NotStorable(\'Could not store data (not of bytes type).\')\n \n         with blob.open(\'w\') as fp:\n@@ -30,7 +29,7 @@ def store(self, data, blob):\n class TextStorable(BytesStorable):\n \n     def store(self, data, blob):\n-        if not isinstance(data, six.text_type):\n+        if not isinstance(data, str):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n         data = data.encode(\'UTF-8\')\n@@ -48,7 +47,7 @@ class StringStorable(BytesStorable):\n \n \n @implementer(IStorage)\n-class FileChunkStorable(object):\n+class FileChunkStorable:\n \n     def store(self, data, blob):\n         if not isinstance(data, FileChunk):\n@@ -62,7 +61,7 @@ def store(self, data, blob):\n \n \n @implementer(IStorage)\n-class FileDescriptorStorable(object):\n+class FileDescriptorStorable:\n \n     def store(self, data, blob):\n         if not isinstance(data, io.IOBase):\n@@ -74,7 +73,7 @@ def store(self, data, blob):\n             return\n \n \n-class BufferedReaderStorable(object):\n+class BufferedReaderStorable:\n \n     def store(self, data, blob):\n         raw = data.raw\n@@ -88,7 +87,7 @@ def store(self, data, blob):\n \n \n @implementer(IStorage)\n-class FileUploadStorable(object):\n+class FileUploadStorable:\n \n     def store(self, data, blob):\n         if not isinstance(data, FileUpload):\n@@ -104,7 +103,7 @@ def store(self, data, blob):\n \n \n @implementer(IStorage)\n-class PDataStorable(object):\n+class PDataStorable:\n     def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 56137d8..ca5369e 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n from plone.testing import zca\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex f8dadbb..9852ef5 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import os\n \n \ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex 1949038..baa7224 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n \n@@ -115,7 +114,7 @@ def setUp(self):\n     def testCopyBlobs(self):\n         from zope.copy import copy\n         file = NamedBlobFile()\n-        file.data = u\'hello, world\'\n+        file.data = \'hello, world\'\n         image = NamedBlobImage()\n         image.data = \'some image bytes\'\n         transaction.commit()\ndiff --git a/plone/namedfile/tests/test_display_file.py b/plone/namedfile/tests/test_display_file.py\nindex 2414bf9..86251a8 100644\n--- a/plone/namedfile/tests/test_display_file.py\n+++ b/plone/namedfile/tests/test_display_file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -63,7 +62,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \n@@ -78,7 +77,7 @@ def _named_file(self, name):\n \n     def assert_download_works(self, base_url):\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@download/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@download/{self.field_name}")\n         header = get_disposition_header(browser)\n         self.assertIsNotNone(header)\n         self.assertIn("attachment", header)\n@@ -87,13 +86,13 @@ def assert_download_works(self, base_url):\n     def assert_display_inline_works(self, base_url):\n         # Test that displaying this file inline works.\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@display-file/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@display-file/{self.field_name}")\n         self.assertIsNone(get_disposition_header(browser))\n \n     def assert_display_inline_is_download(self, base_url):\n         # Test that displaying this file inline turns into a download.\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@display-file/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@display-file/{self.field_name}")\n         header = get_disposition_header(browser)\n         self.assertIsNotNone(header)\n         self.assertIn("attachment", header)\n@@ -127,7 +126,7 @@ def test_filename_none(self):\n     def test_filename_empty(self):\n         # An empty filename is probably no problem, but let\'s check.\n         data = self._named_file("image.svg")\n-        data.filename = u""\n+        data.filename = ""\n         setattr(self.item, self.field_name, self._named_file("image.svg"))\n         transaction.commit()\n         base_url = self.item.absolute_url()\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex eb85b9c..7e09d5e 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -27,8 +26,7 @@ def check_output(self, want, got, optionflags):\n             got = got.replace(\n                 "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n \n-        if six.PY3:\n-            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 0c78c79..aa70034 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file is borrowed from zope.app.file and licensed ZPL.\n \n from plone.namedfile.file import NamedImage\n@@ -73,17 +72,17 @@ def test_get_contenttype(self):\n             get_contenttype(\n                 NamedImage(\n                     getFile(\'image.gif\'),\n-                    filename=u\'image.gif\')),\n+                    filename=\'image.gif\')),\n             \'image/gif\')\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n                     getFile(\'image.tif\'),\n-                    filename=u\'image.tif\')),\n+                    filename=\'image.tif\')),\n             \'image/tiff\')\n         self.assertEqual(get_contenttype(\n             NamedImage(getFile(\'notimage.doc\'),\n-                       filename=u\'notimage.doc\')),\n+                       filename=\'notimage.doc\')),\n             \'application/msword\')\n \n \n@@ -101,7 +100,7 @@ def testImageValidation(self):\n         from zope.interface import implementer\n \n         @implementer(INamedImageField)\n-        class FakeField(object):\n+        class FakeField:\n             __name__ = \'logo\'\n \n         # field is empty\n@@ -120,7 +119,7 @@ class FakeField(object):\n         validate_image_field(FakeField(), image)\n \n         notimage = NamedImage(getFile(\'notimage.doc\'),\n-                              filename=u\'notimage.doc\')\n+                              filename=\'notimage.doc\')\n         self.assertRaises(\n             InvalidImageFile,\n             validate_image_field,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex f5501ae..d7fe9ae 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from contextlib import contextmanager\n from DateTime import DateTime\n from doctest import _ellipsis_match\n@@ -133,7 +132,7 @@ def UID(self):\n \n @implementer(IPrimaryFieldInfo)\n @adapter(DummyContent)\n-class PrimaryFieldInfo(object):\n+class PrimaryFieldInfo:\n     def __init__(self, context):\n         self.context = context\n         self.fieldname = "image"\n@@ -149,7 +148,7 @@ class MockNamedImage(NamedImage):\n \n \n @implementer(IScaledImageQuality)\n-class DummyQualitySupplier(object):\n+class DummyQualitySupplier:\n     """fake utility for plone.app.imaging\'s scaling quality"""\n \n     def getQuality(self):\n@@ -393,7 +392,7 @@ def testGetScaleByName(self):\n         self.assertEqual(foo.height, 60)\n         assertImage(self, foo.data.data, "PNG", (60, 60))\n         expected_url = re.compile(\n-            r"http://nohost/item/@@images/{0}.png".format(PAT_UID_SCALE)\n+            fr"http://nohost/item/@@images/{PAT_UID_SCALE}.png"\n         )\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n@@ -401,7 +400,7 @@ def testGetScaleByName(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -427,11 +426,11 @@ def testGetHighPixelDensityScaleByName(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            fr\'<img src="{base}\'\n+            + fr"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -455,11 +454,11 @@ def testGetRetinaScaleByWidthAndHeight(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            fr\'<img src="{base}\'\n+            + fr"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -482,11 +481,11 @@ def testGetRetinaScaleByWidthOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            fr\'<img src="{base}\'\n+            + fr"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -509,11 +508,11 @@ def testGetRetinaScaleByHeightOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            fr\'<img src="{base}\'\n+            + fr"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -684,7 +683,7 @@ def testGetOriginalScaleTag(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -696,7 +695,7 @@ def testScaleOnItemWithNonASCIITitle(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -708,7 +707,7 @@ def testScaleOnItemWithUnicodeTitle(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 40d7f22..b3c684a 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import TEST_USER_NAME\n@@ -50,7 +49,7 @@ def setUp(self):\n             raise unittest.SkipTest("Disabled in py2 for now.")\n         data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, "image/png", u"image.png")\n+        item.image = NamedImage(data, "image/png", "image.png")\n         self.layer["app"]._setOb("item", item)\n         self.item = self.layer["app"].item\n         self.view = self.item.unrestrictedTraverse("@@images")\n@@ -184,7 +183,7 @@ def testGuardedAccess(self):\n         transaction.commit()\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0:s}:{1:s}".format(TEST_USER_NAME, TEST_USER_PASSWORD),\n+            f"Basic {TEST_USER_NAME:s}:{TEST_USER_PASSWORD:s}",\n         )\n         from zExceptions import Unauthorized\n \n@@ -199,7 +198,7 @@ def testSVGPublishThumbViaName(self):\n \n         data = getFile("image.svg")\n         svg = DummyContent()\n-        svg.image = NamedImage(data, "image/svg+xml", u"image.svg")\n+        svg.image = NamedImage(data, "image/svg+xml", "image.svg")\n         self.layer["app"]._setOb("svg", svg)\n         svg = self.layer["app"].svg\n \ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex 504b206..56a0f48 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n \n@@ -33,16 +32,16 @@ class TestStorable(unittest.TestCase):\n \n     def test_pdata_storable(self):\n         pdata = Pdata(getFile(\'image.gif\'))\n-        fi = NamedBlobImage(pdata, filename=u\'image.gif\')\n+        fi = NamedBlobImage(pdata, filename=\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\'), filename=u\'image.gif\')\n+        fi = NamedBlobImage(getFile(\'image.gif\'), filename=\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n         fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n-                            filename=u\'image.gif\')\n+                            filename=\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_opened_file_storable(self):\n@@ -53,7 +52,7 @@ def test_opened_file_storable(self):\n             f.write(data)\n             f.close()\n             with open(path, \'rb\') as f:\n-                fi = NamedBlobImage(f, filename=u\'image.gif\')\n+                fi = NamedBlobImage(f, filename=\'image.gif\')\n         finally:\n             if os.path.exists(path):\n                 os.remove(path)\ndiff --git a/plone/namedfile/tests/test_svg.py b/plone/namedfile/tests/test_svg.py\nindex 2b3f7fe..ff341ad 100644\n--- a/plone/namedfile/tests/test_svg.py\n+++ b/plone/namedfile/tests/test_svg.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex b50acce..6ddd8e5 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from io import FileIO\n from logging import getLogger\n from plone.namedfile.interfaces import IBlobby\n@@ -21,10 +20,7 @@\n import struct\n \n \n-if six.PY3:  # pragma: no cover\n-    from collections.abc import Iterable\n-else:  # pragma: no cover\n-    from collections import Iterable\n+from collections.abc import Iterable\n \n \n log = getLogger(__name__)\n@@ -123,12 +119,12 @@ def set_headers(file, response, filename=None):\n     response.setHeader(\'Accept-Ranges\', \'bytes\')\n \n     if filename is not None:\n-        if not isinstance(filename, six.text_type):\n-            filename = six.text_type(filename, \'utf-8\', errors=\'ignore\')\n+        if not isinstance(filename, str):\n+            filename = str(filename, \'utf-8\', errors=\'ignore\')\n         filename = urllib.parse.quote(filename.encode(\'utf8\'))\n         response.setHeader(\n             \'Content-Disposition\',\n-            \'attachment; filename*=UTF-8\\\'\\\'{0}\'.format(filename)\n+            f\'attachment; filename*=UTF-8\\\'\\\'{filename}\'\n         )\n \n \ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 31037c3..1ae6271 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from logging import getLogger\n from six import BytesIO\n \ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex 172402c..e1a7829 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from logging import getLogger\n \n import struct\ndiff --git a/plone/namedfile/utils/svg_utils.py b/plone/namedfile/utils/svg_utils.py\nindex 26e8e48..004dedc 100644\n--- a/plone/namedfile/utils/svg_utils.py\n+++ b/plone/namedfile/utils/svg_utils.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n-\n from io import BytesIO\n from logging import getLogger\n \n import re\n-import xml.etree.cElementTree as et\n+import xml.etree.ElementTree as et\n \n \n log = getLogger(__name__)\ndiff --git a/setup.py b/setup.py\nindex 1dd8934..e6f45e2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T16:45:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/0bf18ffc501659cc64dbd3932b80cb899ba86294

black

Files changed:
M plone/__init__.py
M plone/namedfile/__init__.py
M plone/namedfile/browser.py
M plone/namedfile/copy.py
M plone/namedfile/editor.py
M plone/namedfile/field.py
M plone/namedfile/file.py
M plone/namedfile/handler.py
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/tests/test_svg.py
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/namedfile/__init__.py b/plone/namedfile/__init__.py\nindex e708de8..5a5af5d 100644\n--- a/plone/namedfile/__init__.py\n+++ b/plone/namedfile/__init__.py\n@@ -2,4 +2,3 @@\n from plone.namedfile.file import NamedBlobImage  # noqa\n from plone.namedfile.file import NamedFile  # noqa\n from plone.namedfile.file import NamedImage  # noqa\n-\ndiff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex 69d02b2..7310daa 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -54,7 +54,10 @@\n # We give integrators the option to choose the denylist via an environment variable.\n try:\n     # Look for sane name, and fall back to very specific name of hotfix.\n-    USE_DENYLIST = os.environ.get("NAMEDFILE_USE_DENYLIST", os.environ.get("PLONEHOTFIX20210518_NAMEDFILE_USE_DENYLIST", 0))\n+    USE_DENYLIST = os.environ.get(\n+        "NAMEDFILE_USE_DENYLIST",\n+        os.environ.get("PLONEHOTFIX20210518_NAMEDFILE_USE_DENYLIST", 0),\n+    )\n     USE_DENYLIST = bool(int(USE_DENYLIST))\n except (ValueError, TypeError, AttributeError):\n     USE_DENYLIST = False\n@@ -98,8 +101,8 @@ def __call__(self):\n     def handle_request_range(self, file):\n         # check if we have a range in the request\n         ranges = None\n-        header_range = self.request.getHeader(\'Range\', None)\n-        if_range = self.request.getHeader(\'If-Range\', None)\n+        header_range = self.request.getHeader("Range", None)\n+        if_range = self.request.getHeader("If-Range", None)\n         if header_range is not None:\n             ranges = parseRange(header_range)\n             if if_range is not None:\n@@ -112,10 +115,10 @@ def handle_request_range(self, file):\n                     length = file.getSize()\n                     [(start, end)] = expandRanges(ranges, length)\n                     size = end - start\n-                    self.request.response.setHeader(\'Content-Length\', size)\n+                    self.request.response.setHeader("Content-Length", size)\n                     self.request.response.setHeader(\n-                        \'Content-Range\',\n-                        f\'bytes {start}-{end - 1}/{length}\')\n+                        "Content-Range", f"bytes {start}-{end - 1}/{length}"\n+                    )\n                     self.request.response.setStatus(206)  # Partial content\n                     return dict(start=start, end=end)\n                 except ValueError:\n@@ -137,7 +140,7 @@ def _getFile(self):\n             info = IPrimaryFieldInfo(self.context, None)\n             if info is None:\n                 # Ensure that we have at least a fieldname\n-                raise NotFound(self, \'\', self.request)\n+                raise NotFound(self, "", self.request)\n             self.fieldname = info.fieldname\n \n             # respect field level security as defined in plone.autoform\n@@ -146,7 +149,7 @@ def _getFile(self):\n \n             file = info.value\n         else:\n-            context = getattr(self.context, \'aq_explicit\', self.context)\n+            context = getattr(self.context, "aq_explicit", self.context)\n             file = guarded_getattr(context, self.fieldname, None)\n \n         if file is None:\ndiff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py\nindex 582efa9..113b347 100644\n--- a/plone/namedfile/copy.py\n+++ b/plone/namedfile/copy.py\n@@ -28,8 +28,8 @@ def __call__(self, toplevel, register):\n     def _copyBlob(self, translate):\n         target = translate(self.context)\n         target._blob = Blob()\n-        fsrc = self.context._blob.open(\'r\')\n-        fdst = target._blob.open(\'w\')\n+        fsrc = self.context._blob.open("r")\n+        fdst = target._blob.open("w")\n         shutil.copyfileobj(fsrc, fdst)\n         fdst.close()\n         fsrc.close()\ndiff --git a/plone/namedfile/editor.py b/plone/namedfile/editor.py\nindex d6153ea..72c9c39 100644\n--- a/plone/namedfile/editor.py\n+++ b/plone/namedfile/editor.py\n@@ -4,73 +4,72 @@\n from zope.i18nmessageid.message import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class INamedFileField(interfaces.INamedFileField):\n \n     default = field.NamedFile(\n-        title=interfaces.INamedFileField[\'default\'].title,\n-        description=interfaces.INamedFileField[\'default\'].description,\n-        required=False)\n+        title=interfaces.INamedFileField["default"].title,\n+        description=interfaces.INamedFileField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedFile(\n-        title=interfaces.INamedFileField[\'missing_value\'].title,\n-        description=interfaces.INamedFileField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedFileField["missing_value"].title,\n+        description=interfaces.INamedFileField["missing_value"].description,\n+        required=False,\n+    )\n \n \n class INamedImageField(interfaces.INamedImageField):\n \n     default = field.NamedImage(\n-        title=interfaces.INamedImageField[\'default\'].title,\n-        description=interfaces.INamedImageField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedImageField["default"].title,\n+        description=interfaces.INamedImageField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedImage(\n-        title=interfaces.INamedImageField[\'missing_value\'].title,\n-        description=interfaces.INamedImageField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedImageField["missing_value"].title,\n+        description=interfaces.INamedImageField["missing_value"].description,\n+        required=False,\n+    )\n \n \n-NamedFileFactory = FieldFactory(field.NamedFile, _(\'File Upload\'))\n-NamedImageFactory = FieldFactory(field.NamedImage, _(\'Image\'))\n+NamedFileFactory = FieldFactory(field.NamedFile, _("File Upload"))\n+NamedImageFactory = FieldFactory(field.NamedImage, _("Image"))\n \n \n class INamedBlobFileField(interfaces.INamedBlobFileField):\n \n     default = field.NamedBlobFile(\n-        title=interfaces.INamedBlobFileField[\'default\'].title,\n-        description=interfaces.INamedBlobFileField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobFileField["default"].title,\n+        description=interfaces.INamedBlobFileField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedBlobFile(\n-        title=interfaces.INamedBlobFileField[\n-            \'missing_value\'].title,\n-        description=interfaces.INamedBlobFileField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobFileField["missing_value"].title,\n+        description=interfaces.INamedBlobFileField["missing_value"].description,\n+        required=False,\n+    )\n \n \n class INamedBlobImageField(interfaces.INamedBlobImageField):\n \n     default = field.NamedBlobImage(\n-        title=interfaces.INamedBlobImageField[\'default\'].title,\n-        description=interfaces.INamedBlobImageField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobImageField["default"].title,\n+        description=interfaces.INamedBlobImageField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedBlobImage(\n-        title=interfaces.INamedBlobImageField[\n-            \'missing_value\'].title,\n-        description=interfaces.INamedBlobImageField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobImageField["missing_value"].title,\n+        description=interfaces.INamedBlobImageField["missing_value"].description,\n+        required=False,\n+    )\n \n \n-NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _(\'File Upload\'))\n-NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _(\'Image\'))\n+NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _("File Upload"))\n+NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _("Image"))\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 1895253..12dc789 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -22,13 +22,12 @@\n from zope.schema import ValidationError\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @implementer(IPluggableImageFieldValidation)\n @adapter(INamedImageField, Interface)\n class ImageContenttypeValidator:\n-\n     def __init__(self, field, value):\n         self.field = field\n         self.value = value\n@@ -37,13 +36,14 @@ def __call__(self):\n         if self.value is None:\n             return\n         mimetype = get_contenttype(self.value)\n-        if mimetype.split(\'/\')[0] != \'image\':\n+        if mimetype.split("/")[0] != "image":\n             raise InvalidImageFile(mimetype, self.field.__name__)\n \n \n class InvalidImageFile(ValidationError):\n     """Exception for invalid image file"""\n-    __doc__ = _(\'Invalid image file\')\n+\n+    __doc__ = _("Invalid image file")\n \n \n def validate_binary_field(interface, field, value):\n@@ -61,15 +61,14 @@ def validate_file_field(field, value):\n \n @implementer(INamedFileField)\n class NamedFile(Object):\n-    """A NamedFile field\n-    """\n+    """A NamedFile field"""\n \n     _type = FileValueType\n     schema = INamedFile\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n@@ -79,15 +78,14 @@ def _validate(self, value):\n \n @implementer(INamedImageField)\n class NamedImage(Object):\n-    """A NamedImage field\n-    """\n+    """A NamedImage field"""\n \n     _type = ImageValueType\n     schema = INamedImage\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n@@ -97,15 +95,14 @@ def _validate(self, value):\n \n @implementer(INamedBlobFileField)\n class NamedBlobFile(Object):\n-    """A NamedBlobFile field\n-    """\n+    """A NamedBlobFile field"""\n \n     _type = BlobFileValueType\n     schema = INamedBlobFile\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n@@ -115,15 +112,14 @@ def _validate(self, value):\n \n @implementer(INamedBlobImageField)\n class NamedBlobImage(Object):\n-    """A NamedBlobImage field\n-    """\n+    """A NamedBlobImage field"""\n \n     _type = BlobImageValueType\n     schema = INamedBlobImage\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 30c3a50..5d68d36 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -57,7 +57,7 @@ def _get_contents(self):\n             result.append(self._data)\n             next = self.next\n \n-        return b\'\'.join(result)\n+        return b"".join(result)\n \n     __bytes__ = _get_contents\n \n@@ -65,6 +65,7 @@ def _get_contents(self):\n FILECHUNK_CLASSES = [FileChunk]\n try:\n     from zope.app.file.file import FileChunk as zafFileChunk\n+\n     FILECHUNK_CLASSES.append(zafFileChunk)\n except ImportError:\n     pass\n@@ -161,13 +162,10 @@ class NamedFile(Persistent):\n     True\n     """\n \n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        if (\n-            filename is not None and\n-            contentType in (\'\', \'application/octet-stream\')\n-        ):\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        if filename is not None and contentType in ("", "application/octet-stream"):\n             contentType = get_contenttype(filename=filename)\n         self.data = data\n         self.contentType = contentType\n@@ -183,7 +181,7 @@ def _setData(self, data):\n \n         # Handle case when data is a string\n         if isinstance(data, str):\n-            data = data.encode(\'UTF-8\')\n+            data = data.encode("UTF-8")\n \n         if isinstance(data, bytes):\n             self._data, self._size = FileChunk(data), len(data)\n@@ -191,7 +189,7 @@ def _setData(self, data):\n \n         # Handle case when data is None\n         if data is None:\n-            raise TypeError(\'Cannot set None data on a file.\')\n+            raise TypeError("Cannot set None data on a file.")\n \n         # Handle case when data is already a FileChunk\n         if isinstance(data, tuple(FILECHUNK_CLASSES)):\n@@ -261,7 +259,7 @@ def _setData(self, data):\n         return\n \n     def getSize(self):\n-        \'\'\'See `IFile`\'\'\'\n+        """See `IFile`"""\n         return self._size\n \n     # See IFile.\n@@ -270,11 +268,11 @@ def getSize(self):\n \n @implementer(INamedImage)\n class NamedImage(NamedFile):\n-    """An non-BLOB image with a filename\n-    """\n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    """An non-BLOB image with a filename"""\n+\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b"", contentType="", filename=None):\n         self.contentType, self._width, self._height = getImageInfo(data)\n         self.filename = filename\n         self._setData(data)\n@@ -285,13 +283,17 @@ def __init__(self, data=b\'\', contentType=\'\', filename=None):\n \n         exif_data = get_exif(data)\n         if exif_data is not None:\n-            log.debug(\'Image contains Exif Informations. \'\n-                      \'Test for Image Orientation and Rotate if necessary.\'\n-                      \'Exif Data: %s\', exif_data)\n-            orientation = exif_data[\'0th\'].get(piexif.ImageIFD.Orientation, 1)\n+            log.debug(\n+                "Image contains Exif Informations. "\n+                "Test for Image Orientation and Rotate if necessary."\n+                "Exif Data: %s",\n+                exif_data,\n+            )\n+            orientation = exif_data["0th"].get(piexif.ImageIFD.Orientation, 1)\n             if 1 < orientation <= 8:\n                 self.data, self._width, self._height, self.exif = rotate_image(\n-                    self.data)\n+                    self.data\n+                )\n             self.exif_data = exif_data\n \n     def _setData(self, data):\n@@ -302,7 +304,7 @@ def _setData(self, data):\n             self.contentType = contentType\n \n     def getImageSize(self):\n-        \'\'\'See interface `IImage`\'\'\'\n+        """See interface `IImage`"""\n         return (self._width, self._height)\n \n     data = property(NamedFile._getData, _setData)\n@@ -312,42 +314,38 @@ def getImageSize(self):\n class NamedBlobFile(Persistent):\n     """A file stored in a ZODB BLOB, with a filename"""\n \n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        if (\n-            filename is not None and\n-            contentType in (\'\', \'application/octet-stream\')\n-        ):\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        if filename is not None and contentType in ("", "application/octet-stream"):\n             contentType = get_contenttype(filename=filename)\n         self.contentType = contentType\n         self._blob = Blob()\n-        f = self._blob.open(\'w\')\n-        f.write(b\'\')\n+        f = self._blob.open("w")\n+        f.write(b"")\n         f.close()\n         self._setData(data)\n         self.filename = filename\n \n-    def open(self, mode=\'r\'):\n-        if mode != \'r\' and \'size\' in self.__dict__:\n-            del self.__dict__[\'size\']\n+    def open(self, mode="r"):\n+        if mode != "r" and "size" in self.__dict__:\n+            del self.__dict__["size"]\n         return self._blob.open(mode)\n \n     def openDetached(self):\n-        return open(self._blob.committed(), \'rb\')\n+        return open(self._blob.committed(), "rb")\n \n     def _setData(self, data):\n-        if \'size\' in self.__dict__:\n-            del self.__dict__[\'size\']\n+        if "size" in self.__dict__:\n+            del self.__dict__["size"]\n         # Search for a storable that is able to store the data\n-        dottedName = \'.\'.join((data.__class__.__module__,\n-                               data.__class__.__name__))\n-        log.debug(\'Storage selected for data: %s\', dottedName)\n+        dottedName = ".".join((data.__class__.__module__, data.__class__.__name__))\n+        log.debug("Storage selected for data: %s", dottedName)\n         storable = getUtility(IStorage, name=dottedName)\n         storable.store(data, self._blob)\n \n     def _getData(self):\n-        fp = self._blob.open(\'r\')\n+        fp = self._blob.open("r")\n         data = fp.read()\n         fp.close()\n         return data\n@@ -357,12 +355,12 @@ def _getData(self):\n \n     @property\n     def size(self):\n-        if \'size\' in self.__dict__:\n-            return self.__dict__[\'size\']\n+        if "size" in self.__dict__:\n+            return self.__dict__["size"]\n         with self._blob.open() as reader:\n             reader.seek(0, 2)\n             size = int(reader.tell())\n-        self.__dict__[\'size\'] = size\n+        self.__dict__["size"] = size\n         return size\n \n     def getSize(self):\n@@ -371,33 +369,36 @@ def getSize(self):\n \n @implementer(INamedBlobImage)\n class NamedBlobImage(NamedBlobFile):\n-    """An image stored in a ZODB BLOB with a filename\n-    """\n+    """An image stored in a ZODB BLOB with a filename"""\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        super().__init__(data,\n-                                             contentType=contentType,\n-                                             filename=filename)\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        super().__init__(data, contentType=contentType, filename=filename)\n \n         # Allow override of the image sniffer\n         if contentType:\n             self.contentType = contentType\n         exif_data = get_exif(self.data)\n         if exif_data is not None:\n-            log.debug(\'Image contains Exif Informations. \'\n-                      \'Test for Image Orientation and Rotate if necessary.\'\n-                      \'Exif Data: %s\', exif_data)\n-            orientation = exif_data[\'0th\'].get(piexif.ImageIFD.Orientation, 1)\n+            log.debug(\n+                "Image contains Exif Informations. "\n+                "Test for Image Orientation and Rotate if necessary."\n+                "Exif Data: %s",\n+                exif_data,\n+            )\n+            orientation = exif_data["0th"].get(piexif.ImageIFD.Orientation, 1)\n             if 1 < orientation <= 8:\n                 try:\n-                    self.data, self._width, self._height, self.exif = \\\n-                        rotate_image(self.data)\n+                    self.data, self._width, self._height, self.exif = rotate_image(\n+                        self.data\n+                    )\n                 except KeyboardInterrupt:\n                     raise\n                 except Exception:\n                     log.warning(\n-                        \'Error rotating image %s based on exif data.\',\n-                        filename, exc_info=1)\n+                        "Error rotating image %s based on exif data.",\n+                        filename,\n+                        exc_info=1,\n+                    )\n             else:\n                 self.exif = exif_data\n \n@@ -405,7 +406,7 @@ def _setData(self, data):\n         super()._setData(data)\n         firstbytes = self.getFirstBytes()\n         res = getImageInfo(firstbytes)\n-        if res == (\'image/jpeg\', -1, -1) or res == (\'image/tiff\', -1, -1):\n+        if res == ("image/jpeg", -1, -1) or res == ("image/tiff", -1, -1):\n             # header was longer than firstbytes\n             start = len(firstbytes)\n             length = max(0, MAX_INFO_BYTES - start)\n@@ -422,7 +423,7 @@ def getFirstBytes(self, start=0, length=IMAGE_INFO_BYTES):\n \n         Returns an amount which is sufficient to determine the image type.\n         """\n-        with self.open(\'r\') as fp:\n+        with self.open("r") as fp:\n             fp.seek(start)\n             firstbytes = fp.read(length)\n         return firstbytes\ndiff --git a/plone/namedfile/handler.py b/plone/namedfile/handler.py\nindex a5ed77d..cebe318 100644\n--- a/plone/namedfile/handler.py\n+++ b/plone/namedfile/handler.py\n@@ -4,11 +4,7 @@\n \n class FileFieldHandler(ObjectHandler):\n     filteredAttributes = ObjectHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\n-        \'default\': \'rw\',\n-        \'missing_value\': \'rw\',\n-        \'schema\': \'rw\'\n-    })\n+    filteredAttributes.update({"default": "rw", "missing_value": "rw", "schema": "rw"})\n \n \n NamedFileHandler = FileFieldHandler(field.NamedFile)\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 65f4871..49bf946 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -9,18 +9,18 @@\n class IFile(Interface):\n \n     contentType = schema.NativeStringLine(\n-        title=\'Content Type\',\n-        description=\'The content type identifies the type of data.\',\n-        default=\'\',\n+        title="Content Type",\n+        description="The content type identifies the type of data.",\n+        default="",\n         required=False,\n-        missing_value=\'\'\n+        missing_value="",\n     )\n \n     data = schema.Bytes(\n-        title=\'Data\',\n-        description=\'The actual content of the object.\',\n-        default=b\'\',\n-        missing_value=\'\',\n+        title="Data",\n+        description="The actual content of the object.",\n+        default=b"",\n+        missing_value="",\n         required=False,\n     )\n \n@@ -29,8 +29,7 @@ def getSize():\n \n \n class IImage(IFile):\n-    """This interface defines an Image that can be displayed.\n-    """\n+    """This interface defines an Image that can be displayed."""\n \n     def getImageSize():\n         """Return a tuple (x, y) that describes the dimensions of\n@@ -45,21 +44,20 @@ class IImageScaleTraversable(Interface):\n \n \n class IAvailableSizes(Interface):\n-    """A callable returning a dictionary of scale name => (width, height)\n-    """\n+    """A callable returning a dictionary of scale name => (width, height)"""\n \n \n try:\n     from plone.app.imaging.interfaces import IStableImageScale\n except ImportError:\n+\n     class IStableImageScale(Interface):\n-        """ Marker for image scales when accessed with a UID-based URL.\n+        """Marker for image scales when accessed with a UID-based URL.\n         These can be cached forever using the plone.stableResource ruleset.\n         """\n \n \n class IPluggableBinaryFieldValidation(Interface):\n-\n     def __call__(field, value):\n         """validates field and value.\n \n@@ -69,54 +67,47 @@ def __call__(field, value):\n \n \n class IPluggableFileFieldValidation(IPluggableBinaryFieldValidation):\n-    """pluggable validation for binary File fields\n-    """\n+    """pluggable validation for binary File fields"""\n \n \n class IPluggableImageFieldValidation(IPluggableBinaryFieldValidation):\n-    """pluggable validation for binary Image fields\n-    """\n+    """pluggable validation for binary Image fields"""\n \n \n # Values\n \n+\n class INamed(Interface):\n-    """An item with a filename\n-    """\n+    """An item with a filename"""\n \n-    filename = schema.TextLine(title=\'Filename\', required=False, default=None)\n+    filename = schema.TextLine(title="Filename", required=False, default=None)\n \n \n class INamedFile(INamed, IFile):\n-    """A non-BLOB file with a filename\n-    """\n+    """A non-BLOB file with a filename"""\n \n \n class INamedImage(INamed, IImage):\n-    """A non-BLOB image with a filename\n-    """\n+    """A non-BLOB image with a filename"""\n \n \n # Fields\n \n+\n class INamedField(IObject):\n-    """Base field type\n-    """\n+    """Base field type"""\n \n \n class INamedFileField(INamedField):\n-    """Field for storing INamedFile objects.\n-    """\n+    """Field for storing INamedFile objects."""\n \n \n class INamedImageField(INamedField):\n-    """Field for storing INamedImage objects.\n-    """\n+    """Field for storing INamedImage objects."""\n \n \n class IStorage(Interface):\n-    """Store file data\n-    """\n+    """Store file data"""\n \n     def store(data, blob):\n         """Store the data into the blob\n@@ -125,34 +116,30 @@ def store(data, blob):\n \n \n class NotStorable(Exception):\n-    """Data is not storable\n-    """\n+    """Data is not storable"""\n \n \n # Values\n \n+\n class IBlobby(Interface):\n-    """Marker interface for objects that support blobs.\n-    """\n+    """Marker interface for objects that support blobs."""\n \n \n class INamedBlobFile(INamedFile, IBlobby):\n-    """A BLOB file with a filename\n-    """\n+    """A BLOB file with a filename"""\n \n \n class INamedBlobImage(INamedImage, IBlobby):\n-    """A BLOB image with a filename\n-    """\n+    """A BLOB image with a filename"""\n \n \n # Fields\n \n+\n class INamedBlobFileField(INamedFileField):\n-    """Field for storing INamedBlobFile objects.\n-    """\n+    """Field for storing INamedBlobFile objects."""\n \n \n class INamedBlobImageField(INamedImageField):\n-    """Field for storing INamedBlobImage objects.\n-    """\n+    """Field for storing INamedBlobImage objects."""\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 9f8bdc7..f1d6936 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -21,12 +21,12 @@ class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     ascii = False\n     factory = None\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         # we only support encoding a file value in the body of a message,\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                \'File fields can only be marshaled as primary fields\',\n+                "File fields can only be marshaled as primary fields",\n             )\n         if value is None:\n             return None\n@@ -36,62 +36,61 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n         filename = None\n         if primary and message is not None:\n             filename = message.get_filename(None)\n-        return self.factory(value, contentType or \'\', filename)\n+        return self.factory(value, contentType or "", filename)\n \n     def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n         if not isinstance(value.contentType, str):\n-            return value.contentType.decode(\'utf8\')\n+            return value.contentType.decode("utf8")\n         return value.contentType\n \n     def postProcessMessage(self, message):\n-        """Encode message as base64 and set content disposition\n-        """\n+        """Encode message as base64 and set content disposition"""\n         value = self._query()\n         if value is not None:\n             filename = value.filename\n             if filename:\n-                message.add_header(\'Content-Disposition\', \'attachment\')\n+                message.add_header("Content-Disposition", "attachment")\n                 message.set_param(\n-                    \'filename\',\n-                    filename.encode(\'utf-8\') if six.PY2 else filename,\n-                    header=\'Content-Disposition\',\n-                    charset=\'utf-8\',\n+                    "filename",\n+                    filename.encode("utf-8") if six.PY2 else filename,\n+                    header="Content-Disposition",\n+                    charset="utf-8",\n                 )\n \n \n @adapter(Interface, INamedFileField)\n class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedFile field\n-    """\n+    """Marshaler for an INamedFile field"""\n+\n     factory = NamedFile\n \n \n @adapter(Interface, INamedImageField)\n class NamedImageFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedImage field\n-    """\n+    """Marshaler for an INamedImage field"""\n+\n     factory = NamedImage\n \n \n @adapter(Interface, INamedBlobFileField)\n class NamedBlobFileFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedBlobFile field\n-    """\n+    """Marshaler for an INamedBlobFile field"""\n+\n     factory = NamedBlobFile\n \n \n @adapter(Interface, INamedBlobImageField)\n class NamedBlobImageFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedBlobImage field\n-    """\n+    """Marshaler for an INamedBlobImage field"""\n+\n     factory = NamedBlobImage\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 66e7514..de308be 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -553,7 +553,7 @@ def scale(\n                     direction=direction,\n                     scale=scale,\n                     storage=storage,\n-                    **parameters\n+                    **parameters,\n                 )\n         if "fieldname" not in info:\n             info["fieldname"] = fieldname\n@@ -620,7 +620,7 @@ def picture(\n             logger.warning(\n                 "Could not find the given picture_variant %s, "\n                 "creating ordinary img tag instead!",\n-                picture_variant\n+                picture_variant,\n             )\n             if picture_variant in self.available_sizes:\n                 # We have a bit of luck: we have a scale with the same name\n@@ -652,7 +652,13 @@ def picture(\n             attributes["title"] = title\n         if alt:\n             attributes["alt"] = alt\n-        return img2picturetag.create_picture_tag(sourceset, attributes, resolve_urls=True, uid=scale.context.UID(), fieldname=fieldname).prettify()\n+        return img2picturetag.create_picture_tag(\n+            sourceset,\n+            attributes,\n+            resolve_urls=True,\n+            uid=scale.context.UID(),\n+            fieldname=fieldname,\n+        ).prettify()\n \n \n class NavigationRootScaling(ImageScaling):\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 1e5d366..06e502c 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -16,23 +16,21 @@\n \n @implementer(IStorage)\n class BytesStorable:\n-\n     def store(self, data, blob):\n         if not isinstance(data, bytes):\n-            raise NotStorable(\'Could not store data (not of bytes type).\')\n+            raise NotStorable("Could not store data (not of bytes type).")\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             fp.write(data)\n \n \n @implementer(IStorage)\n class TextStorable(BytesStorable):\n-\n     def store(self, data, blob):\n         if not isinstance(data, str):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n-        data = data.encode(\'UTF-8\')\n+        data = data.encode("UTF-8")\n         BytesStorable.store(self, data, blob)\n \n \n@@ -48,12 +46,13 @@ class StringStorable(BytesStorable):\n \n @implementer(IStorage)\n class FileChunkStorable:\n-\n     def store(self, data, blob):\n         if not isinstance(data, FileChunk):\n-            raise NotStorable(\'Could not store data (not a of "FileChunk" type).\')  # noqa\n+            raise NotStorable(\n+                \'Could not store data (not a of "FileChunk" type).\'\n+            )  # noqa\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             chunk = data\n             while chunk:\n                 fp.write(chunk._data)\n@@ -62,25 +61,23 @@ def store(self, data, blob):\n \n @implementer(IStorage)\n class FileDescriptorStorable:\n-\n     def store(self, data, blob):\n         if not isinstance(data, io.IOBase):\n             raise NotStorable(\'Could not store data: not of io.IOBase ("file").\')\n \n-        filename = getattr(data, \'name\', None)\n+        filename = getattr(data, "name", None)\n         if filename is not None:\n             blob.consumeFile(filename)\n             return\n \n \n class BufferedReaderStorable:\n-\n     def store(self, data, blob):\n         raw = data.raw\n         if not isinstance(raw, io.FileIO):\n             raise NotStorable(\'Could not store data (not of type "io.FileIO")\')\n \n-        filename = getattr(data.raw, \'name\', None)\n+        filename = getattr(data.raw, "name", None)\n         if filename is not None:\n             blob.consumeFile(filename)\n             return\n@@ -88,14 +85,13 @@ def store(self, data, blob):\n \n @implementer(IStorage)\n class FileUploadStorable:\n-\n     def store(self, data, blob):\n         if not isinstance(data, FileUpload):\n             raise NotStorable(\'Could not store data (not of "FileUpload").\')\n \n         data.seek(0)\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             block = data.read(MAXCHUNKSIZE)\n             while block:\n                 fp.write(block)\n@@ -107,6 +103,6 @@ class PDataStorable:\n     def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\n-        fp = blob.open(\'w\')\n+        fp = blob.open("w")\n         fp.write(bytes(pdata))\n         fp.close()\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex ca5369e..fd491ee 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -13,7 +13,8 @@ def setUp(self):\n         zca.pushGlobalRegistry()\n \n         import plone.namedfile\n-        xmlconfig.file(\'testing.zcml\', plone.namedfile)\n+\n+        xmlconfig.file("testing.zcml", plone.namedfile)\n \n     def tearDown(self):\n         # Zap the stacked zca context\n@@ -23,11 +24,11 @@ def tearDown(self):\n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n-    bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n+    bases=(PLONE_NAMEDFILE_FIXTURE,),\n+    name="plone.namedfile:NamedFileTestLayerIntegration",\n )\n \n PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n-    bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n+    bases=(PLONE_NAMEDFILE_FIXTURE,),\n+    name="plone.namedfile:NamedFileTestLayerFunctional",\n )\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 9852ef5..07f36b8 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -2,7 +2,7 @@\n \n \n def getFile(filename):\n-    """ return contents of the file with the given name """\n+    """return contents of the file with the given name"""\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    with open(filename, \'rb\') as data_file:\n+    with open(filename, "rb") as data_file:\n         return data_file.read()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex baa7224..d7df2fc 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -33,26 +33,12 @@\n \n \n def registerUtilities():\n+    provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")\n+    provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")\n     provideUtility(\n-        storages.StringStorable(),\n-        IStorage,\n-        name=\'__builtin__.str\'\n-    )\n-    provideUtility(\n-        storages.UnicodeStorable(),\n-        IStorage,\n-        name=\'__builtin__.unicode\'\n-    )\n-    provideUtility(\n-        storages.FileChunkStorable(),\n-        IStorage,\n-        name=\'plone.namedfile.file.FileChunk\'\n-    )\n-    provideUtility(\n-        storages.FileDescriptorStorable(),\n-        IStorage,\n-        name=\'__builtin__.file\'\n+        storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk"\n     )\n+    provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")\n \n \n class TestImage(unittest.TestCase):\n@@ -67,23 +53,23 @@ def _makeImage(self, *args, **kw):\n \n     def testEmpty(self):\n         file = self._makeImage()\n-        self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, b\'\')\n+        self.assertEqual(file.contentType, "")\n+        self.assertEqual(file.data, b"")\n \n     def testConstructor(self):\n-        file = self._makeImage(b\'Data\')\n-        self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, b\'Data\')\n+        file = self._makeImage(b"Data")\n+        self.assertEqual(file.contentType, "")\n+        self.assertEqual(file.data, b"Data")\n \n     def testMutators(self):\n         image = self._makeImage()\n \n-        image.contentType = \'image/jpeg\'\n-        self.assertEqual(image.contentType, \'image/jpeg\')\n+        image.contentType = "image/jpeg"\n+        self.assertEqual(image.contentType, "image/jpeg")\n \n         image._setData(zptlogo)\n         self.assertEqual(image.data, zptlogo)\n-        self.assertEqual(image.contentType, \'image/gif\')\n+        self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n     def testInterface(self):\n@@ -95,10 +81,14 @@ def testInterface(self):\n \n     def testDataMutatorWithLargeHeader(self):\n         from plone.namedfile.file import IMAGE_INFO_BYTES\n-        bogus_header_length = struct.pack(\'>H\', IMAGE_INFO_BYTES * 2)\n-        data = (b\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n-                b\'\\x00\' * IMAGE_INFO_BYTES * 2 +\n-                b\'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n+\n+        bogus_header_length = struct.pack(">H", IMAGE_INFO_BYTES * 2)\n+        data = (\n+            b"\\xff\\xd8\\xff\\xe0"\n+            + bogus_header_length\n+            + b"\\x00" * IMAGE_INFO_BYTES * 2\n+            + b"\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00"\n+        )\n         image = self._makeImage()\n         image._setData(data)\n         self.assertEqual(image.getImageSize(), (1024, 680))\n@@ -113,10 +103,11 @@ def setUp(self):\n \n     def testCopyBlobs(self):\n         from zope.copy import copy\n+\n         file = NamedBlobFile()\n-        file.data = \'hello, world\'\n+        file.data = "hello, world"\n         image = NamedBlobImage()\n-        image.data = \'some image bytes\'\n+        image.data = "some image bytes"\n         transaction.commit()\n \n         file_copy = copy(file)\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex 7e09d5e..35e76d2 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -8,10 +8,10 @@\n \n \n TEST_FILES = [\n-    \'usage.rst\',\n-    \'handler.rst\',\n-    \'marshaler.rst\',\n-    \'utils.rst\',\n+    "usage.rst",\n+    "handler.rst",\n+    "marshaler.rst",\n+    "utils.rst",\n ]\n \n \n@@ -19,12 +19,12 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n-            got = got.replace(\'bytearray(b\', \'bytearray(\')\n-            got = re.sub(\n-                "WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n+            got = re.sub("zExceptions.NotFound", "NotFound", got)\n+            got = got.replace("bytearray(b", "bytearray(")\n+            got = re.sub("WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n             got = got.replace(\n-                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n+                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt"\n+            )\n \n         got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n@@ -36,16 +36,16 @@ def test_suite():\n             layered(\n                 doctest.DocFileSuite(\n                     testfile,\n-                    package=\'plone.namedfile\',\n+                    package="plone.namedfile",\n                     checker=Py23DocChecker(),\n                     optionflags=doctest.ELLIPSIS,\n                 ),\n                 PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n-            ) for testfile in TEST_FILES\n+            )\n+            for testfile in TEST_FILES\n         ]\n-\n     )\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(defaultTest=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex aa70034..4629207 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -11,50 +11,49 @@\n \n \n zptlogo = (\n-    b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    b\'\\x00A\\x00;\'\n+    b"GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd"\n+    b"\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6"\n+    b"\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6"\n+    b"\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd"\n+    b"\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9"\n+    b"\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4"\n+    b"\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0"\n+    b"\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb"\n+    b"\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4"\n+    b"\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"\n+    b"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"\n+    b"\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04"\n+    b"\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4"\n+    b"\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{"\n+    b"\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c"\n+    b"\\x866#\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e\\"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb"\n+    b"\\x00A\\x00;"\n )\n \n \n class TestImage(unittest.TestCase):\n-\n     def _makeImage(self, *args, **kw):\n         return NamedImage(*args, **kw)\n \n     def testEmpty(self):\n         file_img = self._makeImage()\n-        self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(bytes(file_img.data), b\'\')\n+        self.assertEqual(file_img.contentType, "")\n+        self.assertEqual(bytes(file_img.data), b"")\n \n     def testConstructor(self):\n-        file_img = self._makeImage(b\'Data\')\n-        self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(bytes(file_img.data), b\'Data\')\n+        file_img = self._makeImage(b"Data")\n+        self.assertEqual(file_img.contentType, "")\n+        self.assertEqual(bytes(file_img.data), b"Data")\n \n     def testMutators(self):\n         image = self._makeImage()\n \n-        image.contentType = \'image/jpeg\'\n-        self.assertEqual(image.contentType, \'image/jpeg\')\n+        image.contentType = "image/jpeg"\n+        self.assertEqual(image.contentType, "image/jpeg")\n \n         image._setData(zptlogo)\n         self.assertEqual(image.data, zptlogo)\n-        self.assertEqual(image.contentType, \'image/gif\')\n+        self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n     def testInterface(self):\n@@ -63,27 +62,23 @@ def testInterface(self):\n \n     def test_get_contenttype(self):\n         self.assertEqual(\n-            get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.gif\'),\n-                    contentType=\'image/gif\')),\n-            \'image/gif\')\n+            get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\n+            "image/gif",\n+        )\n         self.assertEqual(\n-            get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.gif\'),\n-                    filename=\'image.gif\')),\n-            \'image/gif\')\n+            get_contenttype(NamedImage(getFile("image.gif"), filename="image.gif")),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(NamedImage(getFile("image.tif"), filename="image.tif")),\n+            "image/tiff",\n+        )\n         self.assertEqual(\n             get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.tif\'),\n-                    filename=\'image.tif\')),\n-            \'image/tiff\')\n-        self.assertEqual(get_contenttype(\n-            NamedImage(getFile(\'notimage.doc\'),\n-                       filename=\'notimage.doc\')),\n-            \'application/msword\')\n+                NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+            ),\n+            "application/msword",\n+        )\n \n \n class TestValidation(unittest.TestCase):\n@@ -101,27 +96,18 @@ def testImageValidation(self):\n \n         @implementer(INamedImageField)\n         class FakeField:\n-            __name__ = \'logo\'\n+            __name__ = "logo"\n \n         # field is empty\n         validate_image_field(FakeField(), None)\n \n         # field has an empty file\n         image = self._makeImage()\n-        self.assertRaises(\n-            InvalidImageFile,\n-            validate_image_field,\n-            FakeField(),\n-            image)\n+        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)\n \n         # field has an image file\n         image._setData(zptlogo)\n         validate_image_field(FakeField(), image)\n \n-        notimage = NamedImage(getFile(\'notimage.doc\'),\n-                              filename=\'notimage.doc\')\n-        self.assertRaises(\n-            InvalidImageFile,\n-            validate_image_field,\n-            FakeField(),\n-            notimage)\n+        notimage = NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex d7fe9ae..8afa10b 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -115,7 +115,6 @@ def patch_Img2PictureTag_allowed_scales():\n     }\n \n \n-\n @implementer(IAttributeAnnotatable, IHasImage)\n class DummyContent(SimpleItem):\n     image = None\n@@ -391,9 +390,7 @@ def testGetScaleByName(self):\n         self.assertEqual(foo.width, 60)\n         self.assertEqual(foo.height, 60)\n         assertImage(self, foo.data.data, "PNG", (60, 60))\n-        expected_url = re.compile(\n-            fr"http://nohost/item/@@images/{PAT_UID_SCALE}.png"\n-        )\n+        expected_url = re.compile(rf"http://nohost/item/@@images/{PAT_UID_SCALE}.png")\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n \n@@ -426,8 +423,8 @@ def testGetHighPixelDensityScaleByName(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            fr\'<img src="{base}\'\n-            + fr"/@@images/({PAT_UID_SCALE})"\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n             r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n@@ -454,8 +451,8 @@ def testGetRetinaScaleByWidthAndHeight(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            fr\'<img src="{base}\'\n-            + fr"/@@images/({PAT_UID_SCALE})"\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n             r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n@@ -481,8 +478,8 @@ def testGetRetinaScaleByWidthOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            fr\'<img src="{base}\'\n-            + fr"/@@images/({PAT_UID_SCALE})"\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n             r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n@@ -508,8 +505,8 @@ def testGetRetinaScaleByHeightOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            fr\'<img src="{base}\'\n-            + fr"/@@images/({PAT_UID_SCALE})"\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n             r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n@@ -531,9 +528,7 @@ def testGetRetinaScaleByHeightOnly(self):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagByName(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n@@ -560,9 +555,7 @@ def testGetPictureTagByName(self, mock_uuid_to_object):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n@@ -595,9 +588,7 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex 56a0f48..8e8309c 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -31,28 +31,27 @@ class TestStorable(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def test_pdata_storable(self):\n-        pdata = Pdata(getFile(\'image.gif\'))\n-        fi = NamedBlobImage(pdata, filename=\'image.gif\')\n+        pdata = Pdata(getFile("image.gif"))\n+        fi = NamedBlobImage(pdata, filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\'), filename=\'image.gif\')\n+        fi = NamedBlobImage(getFile("image.gif"), filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n-        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n-                            filename=\'image.gif\')\n+        fi = NamedBlobImage(FileChunk(getFile("image.gif")), filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_opened_file_storable(self):\n-        data = getFile(\'image.gif\')\n+        data = getFile("image.gif")\n         f = tempfile.NamedTemporaryFile(delete=False)\n         try:\n             path = f.name\n             f.write(data)\n             f.close()\n-            with open(path, \'rb\') as f:\n-                fi = NamedBlobImage(f, filename=\'image.gif\')\n+            with open(path, "rb") as f:\n+                fi = NamedBlobImage(f, filename="image.gif")\n         finally:\n             if os.path.exists(path):\n                 os.remove(path)\ndiff --git a/plone/namedfile/tests/test_svg.py b/plone/namedfile/tests/test_svg.py\nindex ff341ad..0619f6c 100644\n--- a/plone/namedfile/tests/test_svg.py\n+++ b/plone/namedfile/tests/test_svg.py\n@@ -8,18 +8,17 @@\n \n \n class TestSvg(unittest.TestCase):\n-\n     def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.svg\'),\n-                    contentType=\'image/svg+xml\')),\n-            \'image/svg+xml\')\n+                NamedImage(getFile("image.svg"), contentType="image/svg+xml")\n+            ),\n+            "image/svg+xml",\n+        )\n \n     def test_process_svg(self):\n \n-        content_type, width, height = process_svg(getFile(\'image.svg\'))\n+        content_type, width, height = process_svg(getFile("image.svg"))\n         self.assertEqual(content_type, "image/svg+xml")\n         self.assertEqual(width, 158)\n         self.assertEqual(height, 40)\n@@ -37,4 +36,4 @@ def test_dimension_int(self):\n         self.assertEqual(dimension_int(6.25), 6)\n         self.assertEqual(dimension_int({}), 0)\n         self.assertEqual(dimension_int([]), 0)\n-        self.assertEqual(dimension_int(getFile(\'image.svg\')), 0)\n+        self.assertEqual(dimension_int(getFile("image.svg")), 0)\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 6ddd8e5..54fcd13 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -29,7 +29,7 @@\n     from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n except ImportError:\n     IImagingSchema = None\n-    log.info(\'IImagingSchema for high pixel density scales not available.\')\n+    log.info("IImagingSchema for high pixel density scales not available.")\n \n \n @implementer(IStreamIterator)\n@@ -42,7 +42,9 @@ class filestream_range_iterator(Iterable):\n          as Iterators.filestream_iterator\n     """\n \n-    def __init__(self, name, mode=\'rb\', bufsize=-1, streamsize=1 << 16, start=0, end=None):\n+    def __init__(\n+        self, name, mode="rb", bufsize=-1, streamsize=1 << 16, start=0, end=None\n+    ):\n         self._io = FileIO(name, mode=mode)\n         self.streamsize = streamsize\n         self.start = start\n@@ -80,29 +82,28 @@ def safe_basename(filename):\n     """Get the basename of the given filename, regardless of which platform\n     (Windows or Unix) it originated from.\n     """\n-    fslice = max(\n-        filename.rfind(\'/\'),\n-        filename.rfind(\'\\\\\'),\n-        filename.rfind(\':\'),\n-    ) + 1\n+    fslice = (\n+        max(\n+            filename.rfind("/"),\n+            filename.rfind("\\\\"),\n+            filename.rfind(":"),\n+        )\n+        + 1\n+    )\n     return filename[fslice:]\n \n \n-def get_contenttype(\n-        file=None,\n-        filename=None,\n-        default=\'application/octet-stream\'):\n-    """Get the MIME content type of the given file and/or filename.\n-    """\n+def get_contenttype(file=None, filename=None, default="application/octet-stream"):\n+    """Get the MIME content type of the given file and/or filename."""\n \n-    file_type = getattr(file, \'contentType\', None)\n+    file_type = getattr(file, "contentType", None)\n     if file_type:\n         return file_type\n \n-    filename = getattr(file, \'filename\', filename)\n+    filename = getattr(file, "filename", filename)\n     if filename:\n         extension = os.path.splitext(filename)[1].lower()\n-        return mimetypes.types_map.get(extension, \'application/octet-stream\')\n+        return mimetypes.types_map.get(extension, "application/octet-stream")\n \n     return default\n \n@@ -114,33 +115,33 @@ def set_headers(file, response, filename=None):\n \n     contenttype = get_contenttype(file)\n \n-    response.setHeader(\'Content-Type\', contenttype)\n-    response.setHeader(\'Content-Length\', file.getSize())\n-    response.setHeader(\'Accept-Ranges\', \'bytes\')\n+    response.setHeader("Content-Type", contenttype)\n+    response.setHeader("Content-Length", file.getSize())\n+    response.setHeader("Accept-Ranges", "bytes")\n \n     if filename is not None:\n         if not isinstance(filename, str):\n-            filename = str(filename, \'utf-8\', errors=\'ignore\')\n-        filename = urllib.parse.quote(filename.encode(\'utf8\'))\n+            filename = str(filename, "utf-8", errors="ignore")\n+        filename = urllib.parse.quote(filename.encode("utf8"))\n         response.setHeader(\n-            \'Content-Disposition\',\n-            f\'attachment; filename*=UTF-8\\\'\\\'{filename}\'\n+            "Content-Disposition", f"attachment; filename*=UTF-8\'\'{filename}"\n         )\n \n \n def stream_data(file, start=0, end=None):\n-    """Return the given file as a stream if possible.\n-    """\n+    """Return the given file as a stream if possible."""\n     if IBlobby.providedBy(file):\n         if file._blob._p_blob_uncommitted:\n             return file.data[start:end]\n-        return filestream_range_iterator(file._blob.committed(), \'rb\', start=start, end=end)\n+        return filestream_range_iterator(\n+            file._blob.committed(), "rb", start=start, end=end\n+        )\n     return file.data[start:end]\n \n \n def _ensure_data(image):\n     data = None\n-    if getattr(image, \'read\', None):\n+    if getattr(image, "read", None):\n         data = image.read()\n         image.seek(0)\n     else:\n@@ -153,31 +154,31 @@ def getImageInfo(data):\n     size = len(data)\n     height = -1\n     width = -1\n-    content_type = \'\'\n+    content_type = ""\n \n-    if (size >= 10) and data[:6] in (b\'GIF87a\', b\'GIF89a\'):\n+    if (size >= 10) and data[:6] in (b"GIF87a", b"GIF89a"):\n         # handle GIFs\n-        content_type = \'image/gif\'\n-        w, h = struct.unpack(\'<HH\', data[6:10])\n+        content_type = "image/gif"\n+        w, h = struct.unpack("<HH", data[6:10])\n         width = int(w)\n         height = int(h)\n \n-    elif data[:8] == b\'\\211PNG\\r\\n\\032\\n\':\n+    elif data[:8] == b"\\211PNG\\r\\n\\032\\n":\n         # handle PNG\n         content_type, width, height = process_png(data)\n \n-    elif data[:2] == b\'\\377\\330\':\n+    elif data[:2] == b"\\377\\330":\n         # handle JPEGs\n         content_type, width, height = process_jpeg(data)\n \n-    elif (size >= 30) and data.startswith(b\'BM\'):\n+    elif (size >= 30) and data.startswith(b"BM"):\n         # handle BMPs\n-        kind = struct.unpack(\'<H\', data[14:16])[0]\n+        kind = struct.unpack("<H", data[14:16])[0]\n         if kind == 40:  # Windows 3.x bitmap\n-            content_type = \'image/x-ms-bmp\'\n-            width, height = struct.unpack(\'<LL\', data[18:26])\n+            content_type = "image/x-ms-bmp"\n+            width, height = struct.unpack("<LL", data[18:26])\n \n-    elif size and b\'http://www.w3.org/2000/svg\' in data:\n+    elif size and b"http://www.w3.org/2000/svg" in data:\n         # handle SVGs\n         content_type, width, height = process_svg(data)\n \n@@ -192,12 +193,13 @@ def getImageInfo(data):\n             # Should happen if data is to short --> first_bytes\n             # happens also if data is an svg or another special format.\n             log.warning(\n-                \'PIL can not recognize the image. \'\n-                \'Image is probably broken or of a non-supported format.\'\n+                "PIL can not recognize the image. "\n+                "Image is probably broken or of a non-supported format."\n             )\n \n-    log.debug(\'Image Info (Type: %s, Width: %s, Height: %s)\',\n-              content_type, width, height)\n+    log.debug(\n+        "Image Info (Type: %s, Width: %s, Height: %s)", content_type, width, height\n+    )\n     return content_type, width, height\n \n \n@@ -207,7 +209,7 @@ def get_exif(image):\n     image_data = _ensure_data(image)\n \n     content_type, width, height = getImageInfo(image_data)\n-    if content_type in [\'image/jpeg\', \'image/tiff\']:\n+    if content_type in ["image/jpeg", "image/tiff"]:\n         # Only this two Image Types could have Exif informations\n         # see http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf\n         try:\n@@ -217,7 +219,7 @@ def get_exif(image):\n             # Should happen if data is to short --> first_bytes\n             log.warn(e)\n             exif_data = exif_data = {\n-                \'0th\': {\n+                "0th": {\n                     piexif.ImageIFD.XResolution: (width, 1),\n                     piexif.ImageIFD.YResolution: (height, 1),\n                 }\n@@ -237,23 +239,24 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     img = PIL.Image.open(BytesIO(data))\n \n     exif_data = None\n-    if \'exif\' in img.info:\n+    if "exif" in img.info:\n         try:\n-            exif_data = piexif.load(img.info[\'exif\'])\n+            exif_data = piexif.load(img.info["exif"])\n         except ValueError:\n-            log.warn(\'Exif information currupt\')\n+            log.warn("Exif information currupt")\n             pass\n-        if exif_data and piexif.ImageIFD.Orientation in exif_data[\'0th\']:\n-            orientation = exif_data[\'0th\'][piexif.ImageIFD.Orientation]\n-        if exif_data and \\\n-                (not exif_data[\'0th\'].get(piexif.ImageIFD.XResolution) or\n-                 not exif_data[\'0th\'].get(piexif.ImageIFD.YResolution)):\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution] = (img.width, 1)\n-            exif_data[\'0th\'][piexif.ImageIFD.YResolution] = (img.height, 1)\n+        if exif_data and piexif.ImageIFD.Orientation in exif_data["0th"]:\n+            orientation = exif_data["0th"][piexif.ImageIFD.Orientation]\n+        if exif_data and (\n+            not exif_data["0th"].get(piexif.ImageIFD.XResolution)\n+            or not exif_data["0th"].get(piexif.ImageIFD.YResolution)\n+        ):\n+            exif_data["0th"][piexif.ImageIFD.XResolution] = (img.width, 1)\n+            exif_data["0th"][piexif.ImageIFD.YResolution] = (img.height, 1)\n     if exif_data is None:\n         width, height = img.size\n         exif_data = {\n-            \'0th\': {\n+            "0th": {\n                 piexif.ImageIFD.XResolution: (width, 1),\n                 piexif.ImageIFD.YResolution: (height, 1),\n             }\n@@ -262,7 +265,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     if method is not None:\n         orientation = method\n \n-    log.debug(\'Rotate image with input orientation: %s\', orientation)\n+    log.debug("Rotate image with input orientation: %s", orientation)\n \n     fmt = img.format\n     if orientation == 1:  # not transform necessary\n@@ -273,39 +276,42 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     elif orientation == 3:\n         img = img.transpose(PIL.Image.ROTATE_180)\n     elif orientation == 4:\n-        img = img.transpose(PIL.Image.ROTATE_180).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_180).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 5:\n-        img = img.transpose(PIL.Image.ROTATE_270).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_270).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 6:\n         img = img.transpose(PIL.Image.ROTATE_270)\n     elif orientation == 7:\n-        img = img.transpose(PIL.Image.ROTATE_90).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_90).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 8:\n         img = img.transpose(PIL.Image.ROTATE_90)\n \n     if orientation in [5, 6, 7, 8]:\n-        if exif_data[\'0th\'][piexif.ImageIFD.XResolution] and \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution]:\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution] = \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.XResolution]\n+        if (\n+            exif_data["0th"][piexif.ImageIFD.XResolution]\n+            and exif_data["0th"][piexif.ImageIFD.YResolution]\n+        ):\n+            (\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+            ) = (\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+            )\n         else:\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution] = \\\n-                (img.width, 1), (img.height, 1)\n+            (\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+            ) = (img.width, 1), (img.height, 1)\n \n     # set orientation to normal\n-    exif_data[\'0th\'][piexif.ImageIFD.Orientation] = 1\n+    exif_data["0th"][piexif.ImageIFD.Orientation] = 1\n \n     try:\n         exif_bytes = piexif.dump(exif_data)\n     except Exception as e:\n         log.warn(e)\n-        del(exif_data[\'Exif\'][piexif.ExifIFD.SceneType])\n+        del exif_data["Exif"][piexif.ExifIFD.SceneType]\n         # This Element piexif.ExifIFD.SceneType cause error on dump\n         exif_bytes = piexif.dump(exif_data)\n \n@@ -315,7 +321,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     return output_image_data.getvalue(), width, height, exif_data\n \n \n-@deprecate(\'use getHighPixelDensityScales instead\')\n+@deprecate("use getHighPixelDensityScales instead")\n def getRetinaScales():\n     return getHighPixelDensityScales()\n \n@@ -323,15 +329,14 @@ def getRetinaScales():\n def getHighPixelDensityScales():\n     registry = queryUtility(IRegistry)\n     if IImagingSchema and registry:\n-        settings = registry.forInterface(\n-            IImagingSchema, prefix=\'plone\', check=False)\n-        if settings.highpixeldensity_scales == \'2x\':\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        if settings.highpixeldensity_scales == "2x":\n             return [\n-                {\'scale\': 2, \'quality\': settings.quality_2x},\n+                {"scale": 2, "quality": settings.quality_2x},\n             ]\n-        elif settings.highpixeldensity_scales == \'3x\':\n+        elif settings.highpixeldensity_scales == "3x":\n             return [\n-                {\'scale\': 2, \'quality\': settings.quality_2x},\n-                {\'scale\': 3, \'quality\': settings.quality_3x},\n+                {"scale": 2, "quality": settings.quality_2x},\n+                {"scale": 3, "quality": settings.quality_3x},\n             ]\n     return []\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 1ae6271..cf8eb96 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -13,23 +13,23 @@ def process_jpeg(data):\n     h = -1\n     size = len(data)\n \n-    if (size >= 2) and data.startswith(b\'\\377\\330\'):  # handle JPEGs\n-        content_type = \'image/jpeg\'\n+    if (size >= 2) and data.startswith(b"\\377\\330"):  # handle JPEGs\n+        content_type = "image/jpeg"\n         jpeg = BytesIO(data)\n         jpeg.read(2)\n         b = jpeg.read(1)\n         try:\n-            while (b and ord(b) != 0xDA):\n-                while (ord(b) != 0xFF):\n+            while b and ord(b) != 0xDA:\n+                while ord(b) != 0xFF:\n                     b = jpeg.read(1)\n-                while (ord(b) == 0xFF):\n+                while ord(b) == 0xFF:\n                     b = jpeg.read(1)\n-                if (ord(b) >= 0xC0 and ord(b) <= 0xC3):\n+                if ord(b) >= 0xC0 and ord(b) <= 0xC3:\n                     jpeg.read(3)\n-                    h, w = struct.unpack(\'>HH\', jpeg.read(4))\n+                    h, w = struct.unpack(">HH", jpeg.read(4))\n                     break\n                 else:\n-                    jpeg.read(int(struct.unpack(\'>H\', jpeg.read(2))[0]) - 2)\n+                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0]) - 2)\n                 b = jpeg.read(1)\n         except struct.error:\n             pass\ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex e1a7829..49ed676 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -15,17 +15,18 @@ def process_png(data):\n     # Bytes 0-7 are below, 4-byte chunk length, then \'IHDR\'\n     # and finally the 4-byte width, height\n     if (\n-        (size >= 24) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\') and\n-        (data[12:16] == b\'IHDR\')\n+        (size >= 24)\n+        and data.startswith(b"\\211PNG\\r\\n\\032\\n")\n+        and (data[12:16] == b"IHDR")\n     ):\n-        content_type = \'image/png\'\n-        w, h = struct.unpack(\'>LL\', data[16:24])\n+        content_type = "image/png"\n+        w, h = struct.unpack(">LL", data[16:24])\n \n     # Maybe this is for an older PNG version.\n-    elif (size >= 16) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\'):\n+    elif (size >= 16) and data.startswith(b"\\211PNG\\r\\n\\032\\n"):\n         # Check to see if we have the right content type\n-        content_type = \'image/png\'\n-        w, h = struct.unpack(b\'>LL\', data[8:16])\n+        content_type = "image/png"\n+        w, h = struct.unpack(b">LL", data[8:16])\n \n     width = int(w)\n     height = int(h)\ndiff --git a/setup.py b/setup.py\nindex e6f45e2..ed1db77 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,19 +4,20 @@\n import os\n \n \n-version = \'6.0.0a5.dev0\'\n+version = "6.0.0a5.dev0"\n \n-description = \'File types and fields for images, files and blob files with \' \\\n-              \'filenames\'\n-long_description = (\'\\n\\n\'.join([\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n-    open(os.path.join("plone", "namedfile", "usage.rst")).read(),\n-]))\n+description = "File types and fields for images, files and blob files with " "filenames"\n+long_description = "\\n\\n".join(\n+    [\n+        open("README.rst").read(),\n+        open("CHANGES.rst").read(),\n+        open(os.path.join("plone", "namedfile", "usage.rst")).read(),\n+    ]\n+)\n \n \n setup(\n-    name=\'plone.namedfile\',\n+    name="plone.namedfile",\n     version=version,\n     description=description,\n     long_description=long_description,\n@@ -35,37 +36,37 @@\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'plone named file image blob\',\n-    author=\'Laurence Rowe, Martin Aspeli\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.namedfile\',\n-    license=\'BSD\',\n+    keywords="plone named file image blob",\n+    author="Laurence Rowe, Martin Aspeli",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.namedfile",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'persistent\',\n-        \'piexif\',\n-        \'plone.app.uuid\',\n-        \'plone.rfc822>=2.0.0\',\n-        \'plone.scale[storage] >=3.0\',\n-        \'plone.schemaeditor\',\n-        \'plone.supermodel\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.browserpage\',\n-        \'zope.component\',\n-        \'zope.copy\',\n-        \'zope.security\',\n-        \'zope.traversing\',\n+        "persistent",\n+        "piexif",\n+        "plone.app.uuid",\n+        "plone.rfc822>=2.0.0",\n+        "plone.scale[storage] >=3.0",\n+        "plone.schemaeditor",\n+        "plone.supermodel",\n+        "setuptools",\n+        "six",\n+        "zope.browserpage",\n+        "zope.component",\n+        "zope.copy",\n+        "zope.security",\n+        "zope.traversing",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'lxml\',\n-            \'Pillow\',\n-            \'plone.testing[z2]\',\n+        "test": [\n+            "plone.app.testing",\n+            "lxml",\n+            "Pillow",\n+            "plone.testing[z2]",\n         ],\n     },\n )\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T17:04:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/2fc94e14a653b48fe18998eea9ac96467fc9895c

utils.py: try to get IImagingSchema from plone.base.

Otherwise from CMFPlone, where it is always available:
we do not support Plone versions where this is not the case.

Files changed:
M plone/namedfile/utils/__init__.py

b'diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 54fcd13..3d8fa38 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -1,3 +1,4 @@\n+from collections.abc import Iterable\n from io import FileIO\n from logging import getLogger\n from plone.namedfile.interfaces import IBlobby\n@@ -20,16 +21,12 @@\n import struct\n \n \n-from collections.abc import Iterable\n-\n-\n log = getLogger(__name__)\n \n try:\n-    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+    from plone.base.interfaces.controlpanel import IImagingSchema\n except ImportError:\n-    IImagingSchema = None\n-    log.info("IImagingSchema for high pixel density scales not available.")\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n \n \n @implementer(IStreamIterator)\n@@ -328,15 +325,16 @@ def getRetinaScales():\n \n def getHighPixelDensityScales():\n     registry = queryUtility(IRegistry)\n-    if IImagingSchema and registry:\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        if settings.highpixeldensity_scales == "2x":\n-            return [\n-                {"scale": 2, "quality": settings.quality_2x},\n-            ]\n-        elif settings.highpixeldensity_scales == "3x":\n-            return [\n-                {"scale": 2, "quality": settings.quality_2x},\n-                {"scale": 3, "quality": settings.quality_3x},\n-            ]\n+    if not registry:\n+        return []\n+    settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+    if settings.highpixeldensity_scales == "2x":\n+        return [\n+            {"scale": 2, "quality": settings.quality_2x},\n+        ]\n+    if settings.highpixeldensity_scales == "3x":\n+        return [\n+            {"scale": 2, "quality": settings.quality_2x},\n+            {"scale": 3, "quality": settings.quality_3x},\n+        ]\n     return []\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T17:04:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/b1099aa9cd9217179d717acde008a0f67e4b0238

Restructure handle_request_range to return early when possible.

Makes it easier to read.

Files changed:
M plone/namedfile/browser.py

b'diff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex 7310daa..a764a0a 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -99,31 +99,32 @@ def __call__(self):\n         return stream_data(file, **request_range)\n \n     def handle_request_range(self, file):\n+        default = {}\n         # check if we have a range in the request\n-        ranges = None\n         header_range = self.request.getHeader("Range", None)\n+        if header_range is None:\n+            return default\n         if_range = self.request.getHeader("If-Range", None)\n-        if header_range is not None:\n-            ranges = parseRange(header_range)\n-            if if_range is not None:\n-                # We delete the ranges, which causes us to skip to the 200\n-                # response.\n-                return {}\n-            # XXX: multipart ranges not implemented\n-            if ranges and len(ranges) == 1:\n-                try:\n-                    length = file.getSize()\n-                    [(start, end)] = expandRanges(ranges, length)\n-                    size = end - start\n-                    self.request.response.setHeader("Content-Length", size)\n-                    self.request.response.setHeader(\n-                        "Content-Range", f"bytes {start}-{end - 1}/{length}"\n-                    )\n-                    self.request.response.setStatus(206)  # Partial content\n-                    return dict(start=start, end=end)\n-                except ValueError:\n-                    return {}\n-        return {}\n+        if if_range is not None:\n+            # We delete the ranges, which causes us to skip to the 200\n+            # response.\n+            return default\n+        ranges = parseRange(header_range)\n+        if not ranges or len(ranges) != 1:\n+            # TODO: multipart ranges not implemented\n+            return default\n+        try:\n+            length = file.getSize()\n+            [(start, end)] = expandRanges(ranges, length)\n+            size = end - start\n+            self.request.response.setHeader("Content-Length", size)\n+            self.request.response.setHeader(\n+                "Content-Range", f"bytes {start}-{end - 1}/{length}"\n+            )\n+            self.request.response.setStatus(206)  # Partial content\n+            return dict(start=start, end=end)\n+        except ValueError:\n+            return default\n \n     def set_headers(self, file):\n         # With filename None, set_headers will not add the download headers.\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T17:04:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/df599a19196bcffd675d735e16bd2d77e1688b45

Removed traces of plone.app.imaging.

Files changed:
M plone/namedfile/interfaces.py
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 49bf946..d7e86ae 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -47,14 +47,10 @@ class IAvailableSizes(Interface):\n     """A callable returning a dictionary of scale name => (width, height)"""\n \n \n-try:\n-    from plone.app.imaging.interfaces import IStableImageScale\n-except ImportError:\n-\n-    class IStableImageScale(Interface):\n-        """Marker for image scales when accessed with a UID-based URL.\n-        These can be cached forever using the plone.stableResource ruleset.\n-        """\n+class IStableImageScale(Interface):\n+    """Marker for image scales when accessed with a UID-based URL.\n+    These can be cached forever using the plone.stableResource ruleset.\n+    """\n \n \n class IPluggableBinaryFieldValidation(Interface):\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex de308be..4b444c2 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -233,7 +233,7 @@ def url(self):\n         return self.context.absolute_url()\n \n     def get_quality(self):\n-        """Get plone.app.imaging\'s quality setting"""\n+        """Get scaled image quality setting from imaging control panel."""\n         getScaledImageQuality = queryUtility(IScaledImageQuality)\n         if getScaledImageQuality is None:\n             return None\ndiff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml\nindex 3a4d58e..f90ac01 100644\n--- a/plone/namedfile/scaling.zcml\n+++ b/plone/namedfile/scaling.zcml\n@@ -46,19 +46,14 @@\n   />\n \n   <!-- In plone.app.caching, image scales are weakly cached.\n-       But stable (uid) image scales should be strongly cached.\n-       When plone.app.imaging is available, this is already done.\n-       Otherwise, we should do this ourselves.\n-       See https://github.com/plone/plone.namedfile/issues/100 -->\n-  <configure zcml:condition="not-installed plone.app.imaging">\n-    <configure zcml:condition="installed z3c.caching">\n-      <include package="z3c.caching" />\n-      <include package="z3c.caching" file="meta.zcml" />\n-      <cache:ruleset\n-          for=".interfaces.IStableImageScale"\n-          ruleset="plone.stableResource"\n-          />\n-    </configure>\n+       But stable (uid) image scales should be strongly cached. -->\n+  <configure zcml:condition="installed z3c.caching">\n+    <include package="z3c.caching" />\n+    <include package="z3c.caching" file="meta.zcml" />\n+    <cache:ruleset\n+        for=".interfaces.IStableImageScale"\n+        ruleset="plone.stableResource"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 8afa10b..2dd697f 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -148,7 +148,7 @@ class MockNamedImage(NamedImage):\n \n @implementer(IScaledImageQuality)\n class DummyQualitySupplier:\n-    """fake utility for plone.app.imaging\'s scaling quality"""\n+    """fake utility for image quality setting from imaging control panel."""\n \n     def getQuality(self):\n         return 1  # as bad as it gets\n@@ -707,7 +707,8 @@ def testScaleOnItemWithUnicodeTitle(self):\n \n     def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n-        Image quality not available for PNG images.\n+\n+        Image quality is not available for PNG images.\n         """\n         data = getFile("image.jpg")\n         item = DummyContent()\n@@ -717,7 +718,8 @@ def testScaledJpegImageQuality(self):\n         # scale an image, record its size\n         foo = scaling.scale("image", width=100, height=80)\n         size_foo = foo.data.getSize()\n-        # let\'s pretend p.a.imaging set the scaling quality to "really sloppy"\n+        # Let\'s pretend the imaging control panel sets the scaling quality to\n+        # "really sloppy"\n         gsm = getGlobalSiteManager()\n         qualitySupplier = DummyQualitySupplier()\n         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-13T17:14:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/641d9693c83c7b4657273dcf9f5d725f3d2a9fc6

Added news snippet.

Files changed:
A news/120.bugfix

b'diff --git a/news/120.bugfix b/news/120.bugfix\nnew file mode 100644\nindex 0000000..56b4cbb\n--- /dev/null\n+++ b/news/120.bugfix\n@@ -0,0 +1,2 @@\n+Cleanup: isort, black, pyupgrade, etc.\n+[maurits]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-15T15:20:48+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/96ca353db81a66b3cd1dfce1b9c16b9cbe3af667

Merge pull request #120 from plone/maurits-black-etc

Cleanup: isort, black, pyupgrade, etc

Files changed:
A news/120.bugfix
M plone/__init__.py
M plone/namedfile/__init__.py
M plone/namedfile/browser.py
M plone/namedfile/copy.py
M plone/namedfile/editor.py
M plone/namedfile/field.py
M plone/namedfile/file.py
M plone/namedfile/handler.py
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_display_file.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/tests/test_svg.py
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M plone/namedfile/utils/svg_utils.py
M setup.cfg
M setup.py

b'diff --git a/news/120.bugfix b/news/120.bugfix\nnew file mode 100644\nindex 0000000..56b4cbb\n--- /dev/null\n+++ b/news/120.bugfix\n@@ -0,0 +1,2 @@\n+Cleanup: isort, black, pyupgrade, etc.\n+[maurits]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/namedfile/__init__.py b/plone/namedfile/__init__.py\nindex 79905d7..5a5af5d 100644\n--- a/plone/namedfile/__init__.py\n+++ b/plone/namedfile/__init__.py\n@@ -1,6 +1,4 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.file import NamedBlobFile  # noqa\n from plone.namedfile.file import NamedBlobImage  # noqa\n from plone.namedfile.file import NamedFile  # noqa\n from plone.namedfile.file import NamedImage  # noqa\n-\ndiff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex daaa769..a764a0a 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_getattr\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n@@ -55,7 +54,10 @@\n # We give integrators the option to choose the denylist via an environment variable.\n try:\n     # Look for sane name, and fall back to very specific name of hotfix.\n-    USE_DENYLIST = os.environ.get("NAMEDFILE_USE_DENYLIST", os.environ.get("PLONEHOTFIX20210518_NAMEDFILE_USE_DENYLIST", 0))\n+    USE_DENYLIST = os.environ.get(\n+        "NAMEDFILE_USE_DENYLIST",\n+        os.environ.get("PLONEHOTFIX20210518_NAMEDFILE_USE_DENYLIST", 0),\n+    )\n     USE_DENYLIST = bool(int(USE_DENYLIST))\n except (ValueError, TypeError, AttributeError):\n     USE_DENYLIST = False\n@@ -77,7 +79,7 @@ class Download(BrowserView):\n     """\n \n     def __init__(self, context, request):\n-        super(Download, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.fieldname = None\n         self.filename = None\n \n@@ -97,31 +99,32 @@ def __call__(self):\n         return stream_data(file, **request_range)\n \n     def handle_request_range(self, file):\n+        default = {}\n         # check if we have a range in the request\n-        ranges = None\n-        header_range = self.request.getHeader(\'Range\', None)\n-        if_range = self.request.getHeader(\'If-Range\', None)\n-        if header_range is not None:\n-            ranges = parseRange(header_range)\n-            if if_range is not None:\n-                # We delete the ranges, which causes us to skip to the 200\n-                # response.\n-                return {}\n-            # XXX: multipart ranges not implemented\n-            if ranges and len(ranges) == 1:\n-                try:\n-                    length = file.getSize()\n-                    [(start, end)] = expandRanges(ranges, length)\n-                    size = end - start\n-                    self.request.response.setHeader(\'Content-Length\', size)\n-                    self.request.response.setHeader(\n-                        \'Content-Range\',\n-                        \'bytes {0}-{1}/{2}\'.format(start, end - 1, length))\n-                    self.request.response.setStatus(206)  # Partial content\n-                    return dict(start=start, end=end)\n-                except ValueError:\n-                    return {}\n-        return {}\n+        header_range = self.request.getHeader("Range", None)\n+        if header_range is None:\n+            return default\n+        if_range = self.request.getHeader("If-Range", None)\n+        if if_range is not None:\n+            # We delete the ranges, which causes us to skip to the 200\n+            # response.\n+            return default\n+        ranges = parseRange(header_range)\n+        if not ranges or len(ranges) != 1:\n+            # TODO: multipart ranges not implemented\n+            return default\n+        try:\n+            length = file.getSize()\n+            [(start, end)] = expandRanges(ranges, length)\n+            size = end - start\n+            self.request.response.setHeader("Content-Length", size)\n+            self.request.response.setHeader(\n+                "Content-Range", f"bytes {start}-{end - 1}/{length}"\n+            )\n+            self.request.response.setStatus(206)  # Partial content\n+            return dict(start=start, end=end)\n+        except ValueError:\n+            return default\n \n     def set_headers(self, file):\n         # With filename None, set_headers will not add the download headers.\n@@ -138,7 +141,7 @@ def _getFile(self):\n             info = IPrimaryFieldInfo(self.context, None)\n             if info is None:\n                 # Ensure that we have at least a fieldname\n-                raise NotFound(self, \'\', self.request)\n+                raise NotFound(self, "", self.request)\n             self.fieldname = info.fieldname\n \n             # respect field level security as defined in plone.autoform\n@@ -147,7 +150,7 @@ def _getFile(self):\n \n             file = info.value\n         else:\n-            context = getattr(self.context, \'aq_explicit\', self.context)\n+            context = getattr(self.context, "aq_explicit", self.context)\n             file = guarded_getattr(context, self.fieldname, None)\n \n         if file is None:\n@@ -175,10 +178,10 @@ def set_headers(self, file):\n             if self.use_denylist:\n                 if mimetype in self.disallowed_inline_mimetypes:\n                     # Let the Download view handle this.\n-                    return super(DisplayFile, self).set_headers(file)\n+                    return super().set_headers(file)\n             else:\n                 # Use the allowlist\n                 if mimetype not in self.allowed_inline_mimetypes:\n                     # Let the Download view handle this.\n-                    return super(DisplayFile, self).set_headers(file)\n+                    return super().set_headers(file)\n         set_headers(file, self.request.response)\ndiff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py\nindex d189c39..113b347 100644\n--- a/plone/namedfile/copy.py\n+++ b/plone/namedfile/copy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Copy hook for proper copying blob data\n \n This file was borrowed from z3c.blobfile and is licensed under the terms of\n@@ -16,7 +15,7 @@\n \n @implementer(ICopyHook)\n @adapter(INamedBlobFile)\n-class BlobFileCopyHook(object):\n+class BlobFileCopyHook:\n     """A copy hook that fixes the blob after copying"""\n \n     def __init__(self, context):\n@@ -29,8 +28,8 @@ def __call__(self, toplevel, register):\n     def _copyBlob(self, translate):\n         target = translate(self.context)\n         target._blob = Blob()\n-        fsrc = self.context._blob.open(\'r\')\n-        fdst = target._blob.open(\'w\')\n+        fsrc = self.context._blob.open("r")\n+        fdst = target._blob.open("w")\n         shutil.copyfileobj(fsrc, fdst)\n         fdst.close()\n         fsrc.close()\ndiff --git a/plone/namedfile/editor.py b/plone/namedfile/editor.py\nindex 6b09c82..72c9c39 100644\n--- a/plone/namedfile/editor.py\n+++ b/plone/namedfile/editor.py\n@@ -1,77 +1,75 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import field\n from plone.namedfile import interfaces\n from plone.schemaeditor.fields import FieldFactory\n from zope.i18nmessageid.message import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class INamedFileField(interfaces.INamedFileField):\n \n     default = field.NamedFile(\n-        title=interfaces.INamedFileField[\'default\'].title,\n-        description=interfaces.INamedFileField[\'default\'].description,\n-        required=False)\n+        title=interfaces.INamedFileField["default"].title,\n+        description=interfaces.INamedFileField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedFile(\n-        title=interfaces.INamedFileField[\'missing_value\'].title,\n-        description=interfaces.INamedFileField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedFileField["missing_value"].title,\n+        description=interfaces.INamedFileField["missing_value"].description,\n+        required=False,\n+    )\n \n \n class INamedImageField(interfaces.INamedImageField):\n \n     default = field.NamedImage(\n-        title=interfaces.INamedImageField[\'default\'].title,\n-        description=interfaces.INamedImageField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedImageField["default"].title,\n+        description=interfaces.INamedImageField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedImage(\n-        title=interfaces.INamedImageField[\'missing_value\'].title,\n-        description=interfaces.INamedImageField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedImageField["missing_value"].title,\n+        description=interfaces.INamedImageField["missing_value"].description,\n+        required=False,\n+    )\n \n \n-NamedFileFactory = FieldFactory(field.NamedFile, _(u\'File Upload\'))\n-NamedImageFactory = FieldFactory(field.NamedImage, _(u\'Image\'))\n+NamedFileFactory = FieldFactory(field.NamedFile, _("File Upload"))\n+NamedImageFactory = FieldFactory(field.NamedImage, _("Image"))\n \n \n class INamedBlobFileField(interfaces.INamedBlobFileField):\n \n     default = field.NamedBlobFile(\n-        title=interfaces.INamedBlobFileField[\'default\'].title,\n-        description=interfaces.INamedBlobFileField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobFileField["default"].title,\n+        description=interfaces.INamedBlobFileField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedBlobFile(\n-        title=interfaces.INamedBlobFileField[\n-            \'missing_value\'].title,\n-        description=interfaces.INamedBlobFileField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobFileField["missing_value"].title,\n+        description=interfaces.INamedBlobFileField["missing_value"].description,\n+        required=False,\n+    )\n \n \n class INamedBlobImageField(interfaces.INamedBlobImageField):\n \n     default = field.NamedBlobImage(\n-        title=interfaces.INamedBlobImageField[\'default\'].title,\n-        description=interfaces.INamedBlobImageField[\n-            \'default\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobImageField["default"].title,\n+        description=interfaces.INamedBlobImageField["default"].description,\n+        required=False,\n+    )\n \n     missing_value = field.NamedBlobImage(\n-        title=interfaces.INamedBlobImageField[\n-            \'missing_value\'].title,\n-        description=interfaces.INamedBlobImageField[\n-            \'missing_value\'].description,\n-        required=False)\n+        title=interfaces.INamedBlobImageField["missing_value"].title,\n+        description=interfaces.INamedBlobImageField["missing_value"].description,\n+        required=False,\n+    )\n \n \n-NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _(u\'File Upload\'))\n-NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _(u\'Image\'))\n+NamedBlobFileFactory = FieldFactory(field.NamedBlobFile, _("File Upload"))\n+NamedBlobImageFactory = FieldFactory(field.NamedBlobImage, _("Image"))\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 37bcc13..12dc789 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.file import NamedBlobFile as BlobFileValueType\n from plone.namedfile.file import NamedBlobImage as BlobImageValueType\n from plone.namedfile.file import NamedFile as FileValueType\n@@ -23,13 +22,12 @@\n from zope.schema import ValidationError\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @implementer(IPluggableImageFieldValidation)\n @adapter(INamedImageField, Interface)\n-class ImageContenttypeValidator(object):\n-\n+class ImageContenttypeValidator:\n     def __init__(self, field, value):\n         self.field = field\n         self.value = value\n@@ -38,13 +36,14 @@ def __call__(self):\n         if self.value is None:\n             return\n         mimetype = get_contenttype(self.value)\n-        if mimetype.split(\'/\')[0] != \'image\':\n+        if mimetype.split("/")[0] != "image":\n             raise InvalidImageFile(mimetype, self.field.__name__)\n \n \n class InvalidImageFile(ValidationError):\n     """Exception for invalid image file"""\n-    __doc__ = _(u\'Invalid image file\')\n+\n+    __doc__ = _("Invalid image file")\n \n \n def validate_binary_field(interface, field, value):\n@@ -62,71 +61,67 @@ def validate_file_field(field, value):\n \n @implementer(INamedFileField)\n class NamedFile(Object):\n-    """A NamedFile field\n-    """\n+    """A NamedFile field"""\n \n     _type = FileValueType\n     schema = INamedFile\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n-        super(NamedFile, self).__init__(schema=self.schema, **kw)\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedFile, self)._validate(value)\n+        super()._validate(value)\n         validate_file_field(self, value)\n \n \n @implementer(INamedImageField)\n class NamedImage(Object):\n-    """A NamedImage field\n-    """\n+    """A NamedImage field"""\n \n     _type = ImageValueType\n     schema = INamedImage\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n-        super(NamedImage, self).__init__(schema=self.schema, **kw)\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedImage, self)._validate(value)\n+        super()._validate(value)\n         validate_image_field(self, value)\n \n \n @implementer(INamedBlobFileField)\n class NamedBlobFile(Object):\n-    """A NamedBlobFile field\n-    """\n+    """A NamedBlobFile field"""\n \n     _type = BlobFileValueType\n     schema = INamedBlobFile\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n-        super(NamedBlobFile, self).__init__(schema=self.schema, **kw)\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobFile, self)._validate(value)\n+        super()._validate(value)\n         validate_file_field(self, value)\n \n \n @implementer(INamedBlobImageField)\n class NamedBlobImage(Object):\n-    """A NamedBlobImage field\n-    """\n+    """A NamedBlobImage field"""\n \n     _type = BlobImageValueType\n     schema = INamedBlobImage\n \n     def __init__(self, **kw):\n-        if \'schema\' in kw:\n-            self.schema = kw.pop(\'schema\')\n-        super(NamedBlobImage, self).__init__(schema=self.schema, **kw)\n+        if "schema" in kw:\n+            self.schema = kw.pop("schema")\n+        super().__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobImage, self)._validate(value)\n+        super()._validate(value)\n         validate_image_field(self, value)\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 6d0bf52..5d68d36 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # The implementations in this file are largely borrowed\n # from zope.app.file and z3c.blobfile\n # and are licensed under the ZPL.\n@@ -58,17 +57,15 @@ def _get_contents(self):\n             result.append(self._data)\n             next = self.next\n \n-        return b\'\'.join(result)\n+        return b"".join(result)\n \n-    if six.PY2:\n-        __str__ = _get_contents\n-    else:\n-        __bytes__ = _get_contents\n+    __bytes__ = _get_contents\n \n \n FILECHUNK_CLASSES = [FileChunk]\n try:\n     from zope.app.file.file import FileChunk as zafFileChunk\n+\n     FILECHUNK_CLASSES.append(zafFileChunk)\n except ImportError:\n     pass\n@@ -165,13 +162,10 @@ class NamedFile(Persistent):\n     True\n     """\n \n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        if (\n-            filename is not None and\n-            contentType in (\'\', \'application/octet-stream\')\n-        ):\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        if filename is not None and contentType in ("", "application/octet-stream"):\n             contentType = get_contenttype(filename=filename)\n         self.data = data\n         self.contentType = contentType\n@@ -186,16 +180,16 @@ def _getData(self):\n     def _setData(self, data):\n \n         # Handle case when data is a string\n-        if isinstance(data, six.text_type):\n-            data = data.encode(\'UTF-8\')\n+        if isinstance(data, str):\n+            data = data.encode("UTF-8")\n \n-        if isinstance(data, six.binary_type):\n+        if isinstance(data, bytes):\n             self._data, self._size = FileChunk(data), len(data)\n             return\n \n         # Handle case when data is None\n         if data is None:\n-            raise TypeError(\'Cannot set None data on a file.\')\n+            raise TypeError("Cannot set None data on a file.")\n \n         # Handle case when data is already a FileChunk\n         if isinstance(data, tuple(FILECHUNK_CLASSES)):\n@@ -265,7 +259,7 @@ def _setData(self, data):\n         return\n \n     def getSize(self):\n-        \'\'\'See `IFile`\'\'\'\n+        """See `IFile`"""\n         return self._size\n \n     # See IFile.\n@@ -274,11 +268,11 @@ def getSize(self):\n \n @implementer(INamedImage)\n class NamedImage(NamedFile):\n-    """An non-BLOB image with a filename\n-    """\n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    """An non-BLOB image with a filename"""\n+\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b"", contentType="", filename=None):\n         self.contentType, self._width, self._height = getImageInfo(data)\n         self.filename = filename\n         self._setData(data)\n@@ -289,24 +283,28 @@ def __init__(self, data=b\'\', contentType=\'\', filename=None):\n \n         exif_data = get_exif(data)\n         if exif_data is not None:\n-            log.debug(\'Image contains Exif Informations. \'\n-                      \'Test for Image Orientation and Rotate if necessary.\'\n-                      \'Exif Data: %s\', exif_data)\n-            orientation = exif_data[\'0th\'].get(piexif.ImageIFD.Orientation, 1)\n+            log.debug(\n+                "Image contains Exif Informations. "\n+                "Test for Image Orientation and Rotate if necessary."\n+                "Exif Data: %s",\n+                exif_data,\n+            )\n+            orientation = exif_data["0th"].get(piexif.ImageIFD.Orientation, 1)\n             if 1 < orientation <= 8:\n                 self.data, self._width, self._height, self.exif = rotate_image(\n-                    self.data)\n+                    self.data\n+                )\n             self.exif_data = exif_data\n \n     def _setData(self, data):\n-        super(NamedImage, self)._setData(data)\n+        super()._setData(data)\n \n         contentType, self._width, self._height = getImageInfo(self._data)\n         if contentType:\n             self.contentType = contentType\n \n     def getImageSize(self):\n-        \'\'\'See interface `IImage`\'\'\'\n+        """See interface `IImage`"""\n         return (self._width, self._height)\n \n     data = property(NamedFile._getData, _setData)\n@@ -316,42 +314,38 @@ def getImageSize(self):\n class NamedBlobFile(Persistent):\n     """A file stored in a ZODB BLOB, with a filename"""\n \n-    filename = FieldProperty(INamedFile[\'filename\'])\n+    filename = FieldProperty(INamedFile["filename"])\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        if (\n-            filename is not None and\n-            contentType in (\'\', \'application/octet-stream\')\n-        ):\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        if filename is not None and contentType in ("", "application/octet-stream"):\n             contentType = get_contenttype(filename=filename)\n         self.contentType = contentType\n         self._blob = Blob()\n-        f = self._blob.open(\'w\')\n-        f.write(b\'\')\n+        f = self._blob.open("w")\n+        f.write(b"")\n         f.close()\n         self._setData(data)\n         self.filename = filename\n \n-    def open(self, mode=\'r\'):\n-        if mode != \'r\' and \'size\' in self.__dict__:\n-            del self.__dict__[\'size\']\n+    def open(self, mode="r"):\n+        if mode != "r" and "size" in self.__dict__:\n+            del self.__dict__["size"]\n         return self._blob.open(mode)\n \n     def openDetached(self):\n-        return open(self._blob.committed(), \'rb\')\n+        return open(self._blob.committed(), "rb")\n \n     def _setData(self, data):\n-        if \'size\' in self.__dict__:\n-            del self.__dict__[\'size\']\n+        if "size" in self.__dict__:\n+            del self.__dict__["size"]\n         # Search for a storable that is able to store the data\n-        dottedName = \'.\'.join((data.__class__.__module__,\n-                               data.__class__.__name__))\n-        log.debug(\'Storage selected for data: %s\', dottedName)\n+        dottedName = ".".join((data.__class__.__module__, data.__class__.__name__))\n+        log.debug("Storage selected for data: %s", dottedName)\n         storable = getUtility(IStorage, name=dottedName)\n         storable.store(data, self._blob)\n \n     def _getData(self):\n-        fp = self._blob.open(\'r\')\n+        fp = self._blob.open("r")\n         data = fp.read()\n         fp.close()\n         return data\n@@ -361,12 +355,12 @@ def _getData(self):\n \n     @property\n     def size(self):\n-        if \'size\' in self.__dict__:\n-            return self.__dict__[\'size\']\n+        if "size" in self.__dict__:\n+            return self.__dict__["size"]\n         with self._blob.open() as reader:\n             reader.seek(0, 2)\n             size = int(reader.tell())\n-        self.__dict__[\'size\'] = size\n+        self.__dict__["size"] = size\n         return size\n \n     def getSize(self):\n@@ -375,41 +369,44 @@ def getSize(self):\n \n @implementer(INamedBlobImage)\n class NamedBlobImage(NamedBlobFile):\n-    """An image stored in a ZODB BLOB with a filename\n-    """\n+    """An image stored in a ZODB BLOB with a filename"""\n \n-    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n-        super(NamedBlobImage, self).__init__(data,\n-                                             contentType=contentType,\n-                                             filename=filename)\n+    def __init__(self, data=b"", contentType="", filename=None):\n+        super().__init__(data, contentType=contentType, filename=filename)\n \n         # Allow override of the image sniffer\n         if contentType:\n             self.contentType = contentType\n         exif_data = get_exif(self.data)\n         if exif_data is not None:\n-            log.debug(\'Image contains Exif Informations. \'\n-                      \'Test for Image Orientation and Rotate if necessary.\'\n-                      \'Exif Data: %s\', exif_data)\n-            orientation = exif_data[\'0th\'].get(piexif.ImageIFD.Orientation, 1)\n+            log.debug(\n+                "Image contains Exif Informations. "\n+                "Test for Image Orientation and Rotate if necessary."\n+                "Exif Data: %s",\n+                exif_data,\n+            )\n+            orientation = exif_data["0th"].get(piexif.ImageIFD.Orientation, 1)\n             if 1 < orientation <= 8:\n                 try:\n-                    self.data, self._width, self._height, self.exif = \\\n-                        rotate_image(self.data)\n+                    self.data, self._width, self._height, self.exif = rotate_image(\n+                        self.data\n+                    )\n                 except KeyboardInterrupt:\n                     raise\n                 except Exception:\n                     log.warning(\n-                        \'Error rotating image %s based on exif data.\',\n-                        filename, exc_info=1)\n+                        "Error rotating image %s based on exif data.",\n+                        filename,\n+                        exc_info=1,\n+                    )\n             else:\n                 self.exif = exif_data\n \n     def _setData(self, data):\n-        super(NamedBlobImage, self)._setData(data)\n+        super()._setData(data)\n         firstbytes = self.getFirstBytes()\n         res = getImageInfo(firstbytes)\n-        if res == (\'image/jpeg\', -1, -1) or res == (\'image/tiff\', -1, -1):\n+        if res == ("image/jpeg", -1, -1) or res == ("image/tiff", -1, -1):\n             # header was longer than firstbytes\n             start = len(firstbytes)\n             length = max(0, MAX_INFO_BYTES - start)\n@@ -426,7 +423,7 @@ def getFirstBytes(self, start=0, length=IMAGE_INFO_BYTES):\n \n         Returns an amount which is sufficient to determine the image type.\n         """\n-        with self.open(\'r\') as fp:\n+        with self.open("r") as fp:\n             fp.seek(start)\n             firstbytes = fp.read(length)\n         return firstbytes\ndiff --git a/plone/namedfile/handler.py b/plone/namedfile/handler.py\nindex 6b12398..cebe318 100644\n--- a/plone/namedfile/handler.py\n+++ b/plone/namedfile/handler.py\n@@ -1,15 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import field\n from plone.supermodel.exportimport import ObjectHandler\n \n \n class FileFieldHandler(ObjectHandler):\n     filteredAttributes = ObjectHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\n-        \'default\': \'rw\',\n-        \'missing_value\': \'rw\',\n-        \'schema\': \'rw\'\n-    })\n+    filteredAttributes.update({"default": "rw", "missing_value": "rw", "schema": "rw"})\n \n \n NamedFileHandler = FileFieldHandler(field.NamedFile)\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 2266ccf..d7e86ae 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n from zope.schema.interfaces import IObject\n@@ -10,18 +9,18 @@\n class IFile(Interface):\n \n     contentType = schema.NativeStringLine(\n-        title=u\'Content Type\',\n-        description=u\'The content type identifies the type of data.\',\n-        default=\'\',\n+        title="Content Type",\n+        description="The content type identifies the type of data.",\n+        default="",\n         required=False,\n-        missing_value=\'\'\n+        missing_value="",\n     )\n \n     data = schema.Bytes(\n-        title=u\'Data\',\n-        description=u\'The actual content of the object.\',\n-        default=b\'\',\n-        missing_value=\'\',\n+        title="Data",\n+        description="The actual content of the object.",\n+        default=b"",\n+        missing_value="",\n         required=False,\n     )\n \n@@ -30,8 +29,7 @@ def getSize():\n \n \n class IImage(IFile):\n-    """This interface defines an Image that can be displayed.\n-    """\n+    """This interface defines an Image that can be displayed."""\n \n     def getImageSize():\n         """Return a tuple (x, y) that describes the dimensions of\n@@ -46,21 +44,16 @@ class IImageScaleTraversable(Interface):\n \n \n class IAvailableSizes(Interface):\n-    """A callable returning a dictionary of scale name => (width, height)\n-    """\n+    """A callable returning a dictionary of scale name => (width, height)"""\n \n \n-try:\n-    from plone.app.imaging.interfaces import IStableImageScale\n-except ImportError:\n-    class IStableImageScale(Interface):\n-        """ Marker for image scales when accessed with a UID-based URL.\n-        These can be cached forever using the plone.stableResource ruleset.\n-        """\n+class IStableImageScale(Interface):\n+    """Marker for image scales when accessed with a UID-based URL.\n+    These can be cached forever using the plone.stableResource ruleset.\n+    """\n \n \n class IPluggableBinaryFieldValidation(Interface):\n-\n     def __call__(field, value):\n         """validates field and value.\n \n@@ -70,54 +63,47 @@ def __call__(field, value):\n \n \n class IPluggableFileFieldValidation(IPluggableBinaryFieldValidation):\n-    """pluggable validation for binary File fields\n-    """\n+    """pluggable validation for binary File fields"""\n \n \n class IPluggableImageFieldValidation(IPluggableBinaryFieldValidation):\n-    """pluggable validation for binary Image fields\n-    """\n+    """pluggable validation for binary Image fields"""\n \n \n # Values\n \n+\n class INamed(Interface):\n-    """An item with a filename\n-    """\n+    """An item with a filename"""\n \n-    filename = schema.TextLine(title=u\'Filename\', required=False, default=None)\n+    filename = schema.TextLine(title="Filename", required=False, default=None)\n \n \n class INamedFile(INamed, IFile):\n-    """A non-BLOB file with a filename\n-    """\n+    """A non-BLOB file with a filename"""\n \n \n class INamedImage(INamed, IImage):\n-    """A non-BLOB image with a filename\n-    """\n+    """A non-BLOB image with a filename"""\n \n \n # Fields\n \n+\n class INamedField(IObject):\n-    """Base field type\n-    """\n+    """Base field type"""\n \n \n class INamedFileField(INamedField):\n-    """Field for storing INamedFile objects.\n-    """\n+    """Field for storing INamedFile objects."""\n \n \n class INamedImageField(INamedField):\n-    """Field for storing INamedImage objects.\n-    """\n+    """Field for storing INamedImage objects."""\n \n \n class IStorage(Interface):\n-    """Store file data\n-    """\n+    """Store file data"""\n \n     def store(data, blob):\n         """Store the data into the blob\n@@ -126,34 +112,30 @@ def store(data, blob):\n \n \n class NotStorable(Exception):\n-    """Data is not storable\n-    """\n+    """Data is not storable"""\n \n \n # Values\n \n+\n class IBlobby(Interface):\n-    """Marker interface for objects that support blobs.\n-    """\n+    """Marker interface for objects that support blobs."""\n \n \n class INamedBlobFile(INamedFile, IBlobby):\n-    """A BLOB file with a filename\n-    """\n+    """A BLOB file with a filename"""\n \n \n class INamedBlobImage(INamedImage, IBlobby):\n-    """A BLOB image with a filename\n-    """\n+    """A BLOB image with a filename"""\n \n \n # Fields\n \n+\n class INamedBlobFileField(INamedFileField):\n-    """Field for storing INamedBlobFile objects.\n-    """\n+    """Field for storing INamedBlobFile objects."""\n \n \n class INamedBlobImageField(INamedImageField):\n-    """Field for storing INamedBlobImage objects.\n-    """\n+    """Field for storing INamedBlobImage objects."""\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 6e5c64e..f1d6936 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import NamedBlobFile\n from plone.namedfile import NamedBlobImage\n from plone.namedfile import NamedFile\n@@ -22,12 +21,12 @@ class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     ascii = False\n     factory = None\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         # we only support encoding a file value in the body of a message,\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                \'File fields can only be marshaled as primary fields\',\n+                "File fields can only be marshaled as primary fields",\n             )\n         if value is None:\n             return None\n@@ -37,62 +36,61 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n         filename = None\n         if primary and message is not None:\n             filename = message.get_filename(None)\n-        return self.factory(value, contentType or \'\', filename)\n+        return self.factory(value, contentType or "", filename)\n \n     def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n-        if not isinstance(value.contentType, six.text_type):\n-            return value.contentType.decode(\'utf8\')\n+        if not isinstance(value.contentType, str):\n+            return value.contentType.decode("utf8")\n         return value.contentType\n \n     def postProcessMessage(self, message):\n-        """Encode message as base64 and set content disposition\n-        """\n+        """Encode message as base64 and set content disposition"""\n         value = self._query()\n         if value is not None:\n             filename = value.filename\n             if filename:\n-                message.add_header(\'Content-Disposition\', \'attachment\')\n+                message.add_header("Content-Disposition", "attachment")\n                 message.set_param(\n-                    \'filename\',\n-                    filename.encode(\'utf-8\') if six.PY2 else filename,\n-                    header=\'Content-Disposition\',\n-                    charset=\'utf-8\',\n+                    "filename",\n+                    filename.encode("utf-8") if six.PY2 else filename,\n+                    header="Content-Disposition",\n+                    charset="utf-8",\n                 )\n \n \n @adapter(Interface, INamedFileField)\n class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedFile field\n-    """\n+    """Marshaler for an INamedFile field"""\n+\n     factory = NamedFile\n \n \n @adapter(Interface, INamedImageField)\n class NamedImageFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedImage field\n-    """\n+    """Marshaler for an INamedImage field"""\n+\n     factory = NamedImage\n \n \n @adapter(Interface, INamedBlobFileField)\n class NamedBlobFileFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedBlobFile field\n-    """\n+    """Marshaler for an INamedBlobFile field"""\n+\n     factory = NamedBlobFile\n \n \n @adapter(Interface, INamedBlobImageField)\n class NamedBlobImageFieldMarshaler(BaseNamedFileFieldMarshaler):\n-    """Marshaler for an INamedBlobImage field\n-    """\n+    """Marshaler for an INamedBlobImage field"""\n+\n     factory = NamedBlobImage\ndiff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex f7a1fe3..1bc5ebc 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -1,12 +1,13 @@\n-import logging\n-import re\n-\n-from plone.namedfile.interfaces import IAvailableSizes\n+from bs4 import BeautifulSoup\n from plone.app.uuid.utils import uuidToObject\n+from plone.namedfile.interfaces import IAvailableSizes\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from zope.component import queryUtility\n-from bs4 import BeautifulSoup\n+\n+import logging\n+import re\n+\n \n try:\n     from plone.base.interfaces import IImagingSchema\n@@ -35,7 +36,7 @@ def get_picture_variants():\n     return getattr(settings, "picture_variants", {})\n \n \n-class Img2PictureTag(object):\n+class Img2PictureTag:\n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n         return parts and parts[0] or ""\n@@ -90,7 +91,7 @@ def create_picture_tag(\n                     # scale_url = scale_obj.url\n                     scale_url = self.update_src_scale(src=src, scale=scale)\n                 scale_width = self.get_scale_width(scale)\n-                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+                source_srcset.append(f"{scale_url} {scale_width}w")\n             source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n             if media:\n                 source_tag["media"] = media\n@@ -136,8 +137,8 @@ def update_src_scale(self, src, scale):\n         parts = src.split("/")\n         if "." in parts[-1]:\n             field_name = parts[-1].split("-")[0]\n-            src_scale = "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            src_scale = "/".join(parts[:-1]) + f"/{field_name}/{scale}"\n             src_scale\n         else:\n-            src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n+            src_scale = "/".join(parts[:-1]) + f"/{scale}"\n         return src_scale\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 5459c6e..4b444c2 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -1,17 +1,17 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_getattr\n from Acquisition import aq_base\n from DateTime import DateTime\n from io import BytesIO\n from plone.memoize import ram\n-from plone.protect import PostOnly\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IStableImageScale\n+from plone.namedfile.picture import get_picture_variants\n+from plone.namedfile.picture import Img2PictureTag\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n-from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n+from plone.protect import PostOnly\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IImageScaleFactory\n from plone.scale.interfaces import IScaledImageQuality\n@@ -68,8 +68,8 @@ def __init__(self, context, request, **info):\n             name = info["uid"]\n         else:\n             name = info["fieldname"]\n-        self.__name__ = "{0}.{1}".format(name, extension)\n-        self.url = "{0}/@@images/{1}".format(url, self.__name__)\n+        self.__name__ = f"{name}.{extension}"\n+        self.url = f"{url}/@@images/{self.__name__}"\n         self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n@@ -80,7 +80,7 @@ def srcset_attribute(self):\n         extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n             _srcset_attr.append(\n-                "{0}/@@images/{1}.{2} {3}x".format(\n+                "{}/@@images/{}.{} {}x".format(\n                     self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n                 )\n             )\n@@ -128,9 +128,9 @@ def tag(\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n-            elif isinstance(v, six.binary_type):\n-                v = six.text_type(v, "utf8")\n-            parts.append("{0}={1}".format(k, quoteattr(v)))\n+            elif isinstance(v, bytes):\n+                v = str(v, "utf8")\n+            parts.append(f"{k}={quoteattr(v)}")\n         parts.append("/>")\n \n         return " ".join(parts)\n@@ -169,7 +169,7 @@ def HEAD(self, REQUEST, RESPONSE=None):\n \n \n @implementer(ITraversable)\n-class ImmutableTraverser(object):\n+class ImmutableTraverser:\n     def __init__(self, scale):\n         self.scale = scale\n \n@@ -184,7 +184,7 @@ def traverse(self, name, furtherPath):\n \n \n @implementer(IImageScaleFactory)\n-class DefaultImageScalingFactory(object):\n+class DefaultImageScalingFactory:\n     def __init__(self, context):\n         self.context = context\n         # fieldname will be set for real in the __call__ method.\n@@ -233,7 +233,7 @@ def url(self):\n         return self.context.absolute_url()\n \n     def get_quality(self):\n-        """Get plone.app.imaging\'s quality setting"""\n+        """Get scaled image quality setting from imaging control panel."""\n         getScaledImageQuality = queryUtility(IScaledImageQuality)\n         if getScaledImageQuality is None:\n             return None\n@@ -260,7 +260,7 @@ def handle_image(\n         if getattr(orig_value, "contentType", "") == "image/svg+xml":\n             # No need to scale, we can simply use the original data,\n             # but report a different width and height.\n-            if isinstance(orig_data, (six.text_type)):\n+            if isinstance(orig_data, (str)):\n                 orig_data = safe_encode(orig_data)\n             if isinstance(orig_data, (bytes)):\n                 orig_data = BytesIO(orig_data)\n@@ -274,7 +274,7 @@ def handle_image(\n             raise\n         except Exception:\n             logger.exception(\n-                \'Could not scale "{0!r}" of {1!r}\'.format(\n+                \'Could not scale "{!r}" of {!r}\'.format(\n                     orig_value,\n                     self.url(),\n                 ),\n@@ -344,7 +344,7 @@ def __call__(\n         # Note: the format may differ from the original.\n         # For example a TIFF may have been turned into a PNG.\n         data, format_, dimensions = result\n-        mimetype = "image/{0}".format(format_.lower())\n+        mimetype = f"image/{format_.lower()}"\n         value = orig_value.__class__(\n             data,\n             contentType=mimetype,\n@@ -553,7 +553,7 @@ def scale(\n                     direction=direction,\n                     scale=scale,\n                     storage=storage,\n-                    **parameters\n+                    **parameters,\n                 )\n         if "fieldname" not in info:\n             info["fieldname"] = fieldname\n@@ -620,7 +620,7 @@ def picture(\n             logger.warning(\n                 "Could not find the given picture_variant %s, "\n                 "creating ordinary img tag instead!",\n-                picture_variant\n+                picture_variant,\n             )\n             if picture_variant in self.available_sizes:\n                 # We have a bit of luck: we have a scale with the same name\n@@ -652,7 +652,13 @@ def picture(\n             attributes["title"] = title\n         if alt:\n             attributes["alt"] = alt\n-        return img2picturetag.create_picture_tag(sourceset, attributes, resolve_urls=True, uid=scale.context.UID(), fieldname=fieldname).prettify()\n+        return img2picturetag.create_picture_tag(\n+            sourceset,\n+            attributes,\n+            resolve_urls=True,\n+            uid=scale.context.UID(),\n+            fieldname=fieldname,\n+        ).prettify()\n \n \n class NavigationRootScaling(ImageScaling):\ndiff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml\nindex 3a4d58e..f90ac01 100644\n--- a/plone/namedfile/scaling.zcml\n+++ b/plone/namedfile/scaling.zcml\n@@ -46,19 +46,14 @@\n   />\n \n   <!-- In plone.app.caching, image scales are weakly cached.\n-       But stable (uid) image scales should be strongly cached.\n-       When plone.app.imaging is available, this is already done.\n-       Otherwise, we should do this ourselves.\n-       See https://github.com/plone/plone.namedfile/issues/100 -->\n-  <configure zcml:condition="not-installed plone.app.imaging">\n-    <configure zcml:condition="installed z3c.caching">\n-      <include package="z3c.caching" />\n-      <include package="z3c.caching" file="meta.zcml" />\n-      <cache:ruleset\n-          for=".interfaces.IStableImageScale"\n-          ruleset="plone.stableResource"\n-          />\n-    </configure>\n+       But stable (uid) image scales should be strongly cached. -->\n+  <configure zcml:condition="installed z3c.caching">\n+    <include package="z3c.caching" />\n+    <include package="z3c.caching" file="meta.zcml" />\n+    <cache:ruleset\n+        for=".interfaces.IStableImageScale"\n+        ruleset="plone.stableResource"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 4091d1a..06e502c 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n from OFS.Image import Pdata\n@@ -16,24 +15,22 @@\n \n \n @implementer(IStorage)\n-class BytesStorable(object):\n-\n+class BytesStorable:\n     def store(self, data, blob):\n-        if not isinstance(data, six.binary_type):\n-            raise NotStorable(\'Could not store data (not of bytes type).\')\n+        if not isinstance(data, bytes):\n+            raise NotStorable("Could not store data (not of bytes type).")\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             fp.write(data)\n \n \n @implementer(IStorage)\n class TextStorable(BytesStorable):\n-\n     def store(self, data, blob):\n-        if not isinstance(data, six.text_type):\n+        if not isinstance(data, str):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n-        data = data.encode(\'UTF-8\')\n+        data = data.encode("UTF-8")\n         BytesStorable.store(self, data, blob)\n \n \n@@ -48,13 +45,14 @@ class StringStorable(BytesStorable):\n \n \n @implementer(IStorage)\n-class FileChunkStorable(object):\n-\n+class FileChunkStorable:\n     def store(self, data, blob):\n         if not isinstance(data, FileChunk):\n-            raise NotStorable(\'Could not store data (not a of "FileChunk" type).\')  # noqa\n+            raise NotStorable(\n+                \'Could not store data (not a of "FileChunk" type).\'\n+            )  # noqa\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             chunk = data\n             while chunk:\n                 fp.write(chunk._data)\n@@ -62,41 +60,38 @@ def store(self, data, blob):\n \n \n @implementer(IStorage)\n-class FileDescriptorStorable(object):\n-\n+class FileDescriptorStorable:\n     def store(self, data, blob):\n         if not isinstance(data, io.IOBase):\n             raise NotStorable(\'Could not store data: not of io.IOBase ("file").\')\n \n-        filename = getattr(data, \'name\', None)\n+        filename = getattr(data, "name", None)\n         if filename is not None:\n             blob.consumeFile(filename)\n             return\n \n \n-class BufferedReaderStorable(object):\n-\n+class BufferedReaderStorable:\n     def store(self, data, blob):\n         raw = data.raw\n         if not isinstance(raw, io.FileIO):\n             raise NotStorable(\'Could not store data (not of type "io.FileIO")\')\n \n-        filename = getattr(data.raw, \'name\', None)\n+        filename = getattr(data.raw, "name", None)\n         if filename is not None:\n             blob.consumeFile(filename)\n             return\n \n \n @implementer(IStorage)\n-class FileUploadStorable(object):\n-\n+class FileUploadStorable:\n     def store(self, data, blob):\n         if not isinstance(data, FileUpload):\n             raise NotStorable(\'Could not store data (not of "FileUpload").\')\n \n         data.seek(0)\n \n-        with blob.open(\'w\') as fp:\n+        with blob.open("w") as fp:\n             block = data.read(MAXCHUNKSIZE)\n             while block:\n                 fp.write(block)\n@@ -104,10 +99,10 @@ def store(self, data, blob):\n \n \n @implementer(IStorage)\n-class PDataStorable(object):\n+class PDataStorable:\n     def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\n-        fp = blob.open(\'w\')\n+        fp = blob.open("w")\n         fp.write(bytes(pdata))\n         fp.close()\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex a1c3885..fd491ee 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,8 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n from plone.testing import zca\n-\n from plone.testing import zope\n from zope.configuration import xmlconfig\n \n@@ -15,7 +13,8 @@ def setUp(self):\n         zca.pushGlobalRegistry()\n \n         import plone.namedfile\n-        xmlconfig.file(\'testing.zcml\', plone.namedfile)\n+\n+        xmlconfig.file("testing.zcml", plone.namedfile)\n \n     def tearDown(self):\n         # Zap the stacked zca context\n@@ -25,11 +24,11 @@ def tearDown(self):\n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n-    bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n+    bases=(PLONE_NAMEDFILE_FIXTURE,),\n+    name="plone.namedfile:NamedFileTestLayerIntegration",\n )\n \n PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n-    bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n+    bases=(PLONE_NAMEDFILE_FIXTURE,),\n+    name="plone.namedfile:NamedFileTestLayerFunctional",\n )\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex f8dadbb..07f36b8 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n import os\n \n \n def getFile(filename):\n-    """ return contents of the file with the given name """\n+    """return contents of the file with the given name"""\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    with open(filename, \'rb\') as data_file:\n+    with open(filename, "rb") as data_file:\n         return data_file.read()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex 1949038..d7df2fc 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n \n@@ -34,26 +33,12 @@\n \n \n def registerUtilities():\n+    provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")\n+    provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")\n     provideUtility(\n-        storages.StringStorable(),\n-        IStorage,\n-        name=\'__builtin__.str\'\n-    )\n-    provideUtility(\n-        storages.UnicodeStorable(),\n-        IStorage,\n-        name=\'__builtin__.unicode\'\n-    )\n-    provideUtility(\n-        storages.FileChunkStorable(),\n-        IStorage,\n-        name=\'plone.namedfile.file.FileChunk\'\n-    )\n-    provideUtility(\n-        storages.FileDescriptorStorable(),\n-        IStorage,\n-        name=\'__builtin__.file\'\n+        storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk"\n     )\n+    provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")\n \n \n class TestImage(unittest.TestCase):\n@@ -68,23 +53,23 @@ def _makeImage(self, *args, **kw):\n \n     def testEmpty(self):\n         file = self._makeImage()\n-        self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, b\'\')\n+        self.assertEqual(file.contentType, "")\n+        self.assertEqual(file.data, b"")\n \n     def testConstructor(self):\n-        file = self._makeImage(b\'Data\')\n-        self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, b\'Data\')\n+        file = self._makeImage(b"Data")\n+        self.assertEqual(file.contentType, "")\n+        self.assertEqual(file.data, b"Data")\n \n     def testMutators(self):\n         image = self._makeImage()\n \n-        image.contentType = \'image/jpeg\'\n-        self.assertEqual(image.contentType, \'image/jpeg\')\n+        image.contentType = "image/jpeg"\n+        self.assertEqual(image.contentType, "image/jpeg")\n \n         image._setData(zptlogo)\n         self.assertEqual(image.data, zptlogo)\n-        self.assertEqual(image.contentType, \'image/gif\')\n+        self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n     def testInterface(self):\n@@ -96,10 +81,14 @@ def testInterface(self):\n \n     def testDataMutatorWithLargeHeader(self):\n         from plone.namedfile.file import IMAGE_INFO_BYTES\n-        bogus_header_length = struct.pack(\'>H\', IMAGE_INFO_BYTES * 2)\n-        data = (b\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n-                b\'\\x00\' * IMAGE_INFO_BYTES * 2 +\n-                b\'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n+\n+        bogus_header_length = struct.pack(">H", IMAGE_INFO_BYTES * 2)\n+        data = (\n+            b"\\xff\\xd8\\xff\\xe0"\n+            + bogus_header_length\n+            + b"\\x00" * IMAGE_INFO_BYTES * 2\n+            + b"\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00"\n+        )\n         image = self._makeImage()\n         image._setData(data)\n         self.assertEqual(image.getImageSize(), (1024, 680))\n@@ -114,10 +103,11 @@ def setUp(self):\n \n     def testCopyBlobs(self):\n         from zope.copy import copy\n+\n         file = NamedBlobFile()\n-        file.data = u\'hello, world\'\n+        file.data = "hello, world"\n         image = NamedBlobImage()\n-        image.data = \'some image bytes\'\n+        image.data = "some image bytes"\n         transaction.commit()\n \n         file_copy = copy(file)\ndiff --git a/plone/namedfile/tests/test_display_file.py b/plone/namedfile/tests/test_display_file.py\nindex 2414bf9..86251a8 100644\n--- a/plone/namedfile/tests/test_display_file.py\n+++ b/plone/namedfile/tests/test_display_file.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -63,7 +62,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \n@@ -78,7 +77,7 @@ def _named_file(self, name):\n \n     def assert_download_works(self, base_url):\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@download/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@download/{self.field_name}")\n         header = get_disposition_header(browser)\n         self.assertIsNotNone(header)\n         self.assertIn("attachment", header)\n@@ -87,13 +86,13 @@ def assert_download_works(self, base_url):\n     def assert_display_inline_works(self, base_url):\n         # Test that displaying this file inline works.\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@display-file/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@display-file/{self.field_name}")\n         self.assertIsNone(get_disposition_header(browser))\n \n     def assert_display_inline_is_download(self, base_url):\n         # Test that displaying this file inline turns into a download.\n         browser = self.get_anon_browser()\n-        browser.open(base_url + "/@@display-file/{0}".format(self.field_name))\n+        browser.open(base_url + f"/@@display-file/{self.field_name}")\n         header = get_disposition_header(browser)\n         self.assertIsNotNone(header)\n         self.assertIn("attachment", header)\n@@ -127,7 +126,7 @@ def test_filename_none(self):\n     def test_filename_empty(self):\n         # An empty filename is probably no problem, but let\'s check.\n         data = self._named_file("image.svg")\n-        data.filename = u""\n+        data.filename = ""\n         setattr(self.item, self.field_name, self._named_file("image.svg"))\n         transaction.commit()\n         base_url = self.item.absolute_url()\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex eb85b9c..35e76d2 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -9,10 +8,10 @@\n \n \n TEST_FILES = [\n-    \'usage.rst\',\n-    \'handler.rst\',\n-    \'marshaler.rst\',\n-    \'utils.rst\',\n+    "usage.rst",\n+    "handler.rst",\n+    "marshaler.rst",\n+    "utils.rst",\n ]\n \n \n@@ -20,15 +19,14 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n-            got = got.replace(\'bytearray(b\', \'bytearray(\')\n-            got = re.sub(\n-                "WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n+            got = re.sub("zExceptions.NotFound", "NotFound", got)\n+            got = got.replace("bytearray(b", "bytearray(")\n+            got = re.sub("WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n             got = got.replace(\n-                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n+                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt"\n+            )\n \n-        if six.PY3:\n-            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n@@ -38,16 +36,16 @@ def test_suite():\n             layered(\n                 doctest.DocFileSuite(\n                     testfile,\n-                    package=\'plone.namedfile\',\n+                    package="plone.namedfile",\n                     checker=Py23DocChecker(),\n                     optionflags=doctest.ELLIPSIS,\n                 ),\n                 PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n-            ) for testfile in TEST_FILES\n+            )\n+            for testfile in TEST_FILES\n         ]\n-\n     )\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(defaultTest=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 643793c..4629207 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,61 +1,59 @@\n-# -*- coding: utf-8 -*-\n # This file is borrowed from zope.app.file and licensed ZPL.\n \n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n-from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from zope.interface.verify import verifyClass\n \n import unittest\n \n \n zptlogo = (\n-    b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    b\'\\x00A\\x00;\'\n+    b"GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd"\n+    b"\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6"\n+    b"\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6"\n+    b"\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd"\n+    b"\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9"\n+    b"\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4"\n+    b"\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0"\n+    b"\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb"\n+    b"\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4"\n+    b"\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"\n+    b"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"\n+    b"\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04"\n+    b"\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4"\n+    b"\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{"\n+    b"\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c"\n+    b"\\x866#\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e\\"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb"\n+    b"\\x00A\\x00;"\n )\n \n \n class TestImage(unittest.TestCase):\n-\n     def _makeImage(self, *args, **kw):\n         return NamedImage(*args, **kw)\n \n     def testEmpty(self):\n         file_img = self._makeImage()\n-        self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(bytes(file_img.data), b\'\')\n+        self.assertEqual(file_img.contentType, "")\n+        self.assertEqual(bytes(file_img.data), b"")\n \n     def testConstructor(self):\n-        file_img = self._makeImage(b\'Data\')\n-        self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(bytes(file_img.data), b\'Data\')\n+        file_img = self._makeImage(b"Data")\n+        self.assertEqual(file_img.contentType, "")\n+        self.assertEqual(bytes(file_img.data), b"Data")\n \n     def testMutators(self):\n         image = self._makeImage()\n \n-        image.contentType = \'image/jpeg\'\n-        self.assertEqual(image.contentType, \'image/jpeg\')\n+        image.contentType = "image/jpeg"\n+        self.assertEqual(image.contentType, "image/jpeg")\n \n         image._setData(zptlogo)\n         self.assertEqual(image.data, zptlogo)\n-        self.assertEqual(image.contentType, \'image/gif\')\n+        self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n     def testInterface(self):\n@@ -64,27 +62,23 @@ def testInterface(self):\n \n     def test_get_contenttype(self):\n         self.assertEqual(\n-            get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.gif\'),\n-                    contentType=\'image/gif\')),\n-            \'image/gif\')\n+            get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\n+            "image/gif",\n+        )\n         self.assertEqual(\n-            get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.gif\'),\n-                    filename=u\'image.gif\')),\n-            \'image/gif\')\n+            get_contenttype(NamedImage(getFile("image.gif"), filename="image.gif")),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(NamedImage(getFile("image.tif"), filename="image.tif")),\n+            "image/tiff",\n+        )\n         self.assertEqual(\n             get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.tif\'),\n-                    filename=u\'image.tif\')),\n-            \'image/tiff\')\n-        self.assertEqual(get_contenttype(\n-            NamedImage(getFile(\'notimage.doc\'),\n-                       filename=u\'notimage.doc\')),\n-            \'application/msword\')\n+                NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+            ),\n+            "application/msword",\n+        )\n \n \n class TestValidation(unittest.TestCase):\n@@ -101,28 +95,19 @@ def testImageValidation(self):\n         from zope.interface import implementer\n \n         @implementer(INamedImageField)\n-        class FakeField(object):\n-            __name__ = \'logo\'\n+        class FakeField:\n+            __name__ = "logo"\n \n         # field is empty\n         validate_image_field(FakeField(), None)\n \n         # field has an empty file\n         image = self._makeImage()\n-        self.assertRaises(\n-            InvalidImageFile,\n-            validate_image_field,\n-            FakeField(),\n-            image)\n+        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)\n \n         # field has an image file\n         image._setData(zptlogo)\n         validate_image_field(FakeField(), image)\n \n-        notimage = NamedImage(getFile(\'notimage.doc\'),\n-                              filename=u\'notimage.doc\')\n-        self.assertRaises(\n-            InvalidImageFile,\n-            validate_image_field,\n-            FakeField(),\n-            notimage)\n+        notimage = NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex f5501ae..2dd697f 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from contextlib import contextmanager\n from DateTime import DateTime\n from doctest import _ellipsis_match\n@@ -116,7 +115,6 @@ def patch_Img2PictureTag_allowed_scales():\n     }\n \n \n-\n @implementer(IAttributeAnnotatable, IHasImage)\n class DummyContent(SimpleItem):\n     image = None\n@@ -133,7 +131,7 @@ def UID(self):\n \n @implementer(IPrimaryFieldInfo)\n @adapter(DummyContent)\n-class PrimaryFieldInfo(object):\n+class PrimaryFieldInfo:\n     def __init__(self, context):\n         self.context = context\n         self.fieldname = "image"\n@@ -149,8 +147,8 @@ class MockNamedImage(NamedImage):\n \n \n @implementer(IScaledImageQuality)\n-class DummyQualitySupplier(object):\n-    """fake utility for plone.app.imaging\'s scaling quality"""\n+class DummyQualitySupplier:\n+    """fake utility for image quality setting from imaging control panel."""\n \n     def getQuality(self):\n         return 1  # as bad as it gets\n@@ -392,16 +390,14 @@ def testGetScaleByName(self):\n         self.assertEqual(foo.width, 60)\n         self.assertEqual(foo.height, 60)\n         assertImage(self, foo.data.data, "PNG", (60, 60))\n-        expected_url = re.compile(\n-            r"http://nohost/item/@@images/{0}.png".format(PAT_UID_SCALE)\n-        )\n+        expected_url = re.compile(rf"http://nohost/item/@@images/{PAT_UID_SCALE}.png")\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -427,11 +423,11 @@ def testGetHighPixelDensityScaleByName(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -455,11 +451,11 @@ def testGetRetinaScaleByWidthAndHeight(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -482,11 +478,11 @@ def testGetRetinaScaleByWidthOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -509,11 +505,11 @@ def testGetRetinaScaleByHeightOnly(self):\n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base)\n-            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            rf\'<img src="{base}\'\n+            + rf"/@@images/({PAT_UID_SCALE})"\n             + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            r\'srcset="http://nohost/item/@@images/({})\'.format(PAT_UID_SCALE)\n             + r".(jpeg|gif|png)"\n             r\' 2x" />\'\n         )\n@@ -532,9 +528,7 @@ def testGetRetinaScaleByHeightOnly(self):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagByName(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n@@ -561,9 +555,7 @@ def testGetPictureTagByName(self, mock_uuid_to_object):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n@@ -596,9 +588,7 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         new=patch_Img2PictureTag_allowed_scales,\n         spec=True,\n     )\n-    @patch.object(\n-        plone.namedfile.picture, "uuidToObject", spec=True\n-    )\n+    @patch.object(plone.namedfile.picture, "uuidToObject", spec=True)\n     def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n         ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n         mock_uuid_to_object.return_value = self.item\n@@ -684,7 +674,7 @@ def testGetOriginalScaleTag(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -696,7 +686,7 @@ def testScaleOnItemWithNonASCIITitle(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -708,7 +698,7 @@ def testScaleOnItemWithUnicodeTitle(self):\n         tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n+            r\'<img src="{}/@@images/({}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n@@ -717,7 +707,8 @@ def testScaleOnItemWithUnicodeTitle(self):\n \n     def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n-        Image quality not available for PNG images.\n+\n+        Image quality is not available for PNG images.\n         """\n         data = getFile("image.jpg")\n         item = DummyContent()\n@@ -727,7 +718,8 @@ def testScaledJpegImageQuality(self):\n         # scale an image, record its size\n         foo = scaling.scale("image", width=100, height=80)\n         size_foo = foo.data.getSize()\n-        # let\'s pretend p.a.imaging set the scaling quality to "really sloppy"\n+        # Let\'s pretend the imaging control panel sets the scaling quality to\n+        # "really sloppy"\n         gsm = getGlobalSiteManager()\n         qualitySupplier = DummyQualitySupplier()\n         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 40d7f22..b3c684a 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from OFS.SimpleItem import SimpleItem\n from plone.app.testing import TEST_USER_NAME\n@@ -50,7 +49,7 @@ def setUp(self):\n             raise unittest.SkipTest("Disabled in py2 for now.")\n         data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, "image/png", u"image.png")\n+        item.image = NamedImage(data, "image/png", "image.png")\n         self.layer["app"]._setOb("item", item)\n         self.item = self.layer["app"].item\n         self.view = self.item.unrestrictedTraverse("@@images")\n@@ -184,7 +183,7 @@ def testGuardedAccess(self):\n         transaction.commit()\n         self.browser.addHeader(\n             "Authorization",\n-            "Basic {0:s}:{1:s}".format(TEST_USER_NAME, TEST_USER_PASSWORD),\n+            f"Basic {TEST_USER_NAME:s}:{TEST_USER_PASSWORD:s}",\n         )\n         from zExceptions import Unauthorized\n \n@@ -199,7 +198,7 @@ def testSVGPublishThumbViaName(self):\n \n         data = getFile("image.svg")\n         svg = DummyContent()\n-        svg.image = NamedImage(data, "image/svg+xml", u"image.svg")\n+        svg.image = NamedImage(data, "image/svg+xml", "image.svg")\n         self.layer["app"]._setOb("svg", svg)\n         svg = self.layer["app"].svg\n \ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex 504b206..8e8309c 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file was borrowed from z3c.blobfile and is licensed under the terms of\n # the ZPL.\n \n@@ -32,28 +31,27 @@ class TestStorable(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def test_pdata_storable(self):\n-        pdata = Pdata(getFile(\'image.gif\'))\n-        fi = NamedBlobImage(pdata, filename=u\'image.gif\')\n+        pdata = Pdata(getFile("image.gif"))\n+        fi = NamedBlobImage(pdata, filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\'), filename=u\'image.gif\')\n+        fi = NamedBlobImage(getFile("image.gif"), filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n-        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n-                            filename=u\'image.gif\')\n+        fi = NamedBlobImage(FileChunk(getFile("image.gif")), filename="image.gif")\n         self.assertEqual(303, fi.getSize())\n \n     def test_opened_file_storable(self):\n-        data = getFile(\'image.gif\')\n+        data = getFile("image.gif")\n         f = tempfile.NamedTemporaryFile(delete=False)\n         try:\n             path = f.name\n             f.write(data)\n             f.close()\n-            with open(path, \'rb\') as f:\n-                fi = NamedBlobImage(f, filename=u\'image.gif\')\n+            with open(path, "rb") as f:\n+                fi = NamedBlobImage(f, filename="image.gif")\n         finally:\n             if os.path.exists(path):\n                 os.remove(path)\ndiff --git a/plone/namedfile/tests/test_svg.py b/plone/namedfile/tests/test_svg.py\nindex 7d3f430..0619f6c 100644\n--- a/plone/namedfile/tests/test_svg.py\n+++ b/plone/namedfile/tests/test_svg.py\n@@ -1,27 +1,24 @@\n-# -*- coding: utf-8 -*-\n-\n-import unittest\n-\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n from plone.namedfile.utils.svg_utils import dimension_int\n from plone.namedfile.utils.svg_utils import process_svg\n \n+import unittest\n \n-class TestSvg(unittest.TestCase):\n \n+class TestSvg(unittest.TestCase):\n     def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(\n-                NamedImage(\n-                    getFile(\'image.svg\'),\n-                    contentType=\'image/svg+xml\')),\n-            \'image/svg+xml\')\n+                NamedImage(getFile("image.svg"), contentType="image/svg+xml")\n+            ),\n+            "image/svg+xml",\n+        )\n \n     def test_process_svg(self):\n \n-        content_type, width, height = process_svg(getFile(\'image.svg\'))\n+        content_type, width, height = process_svg(getFile("image.svg"))\n         self.assertEqual(content_type, "image/svg+xml")\n         self.assertEqual(width, 158)\n         self.assertEqual(height, 40)\n@@ -39,4 +36,4 @@ def test_dimension_int(self):\n         self.assertEqual(dimension_int(6.25), 6)\n         self.assertEqual(dimension_int({}), 0)\n         self.assertEqual(dimension_int([]), 0)\n-        self.assertEqual(dimension_int(getFile(\'image.svg\')), 0)\n+        self.assertEqual(dimension_int(getFile("image.svg")), 0)\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 01db7f6..3d8fa38 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+from collections.abc import Iterable\n from io import FileIO\n from logging import getLogger\n from plone.namedfile.interfaces import IBlobby\n@@ -8,10 +8,10 @@\n from plone.registry.interfaces import IRegistry\n from six import BytesIO\n from six.moves import urllib\n-from ZPublisher.Iterators import IStreamIterator\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n from zope.interface import implementer\n+from ZPublisher.Iterators import IStreamIterator\n \n import mimetypes\n import os.path\n@@ -19,19 +19,14 @@\n import PIL.Image\n import six\n import struct\n-if six.PY3:  # pragma: no cover\n-    from collections.abc import Iterable\n-else:  # pragma: no cover\n-    from collections import Iterable\n \n \n log = getLogger(__name__)\n \n try:\n-    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+    from plone.base.interfaces.controlpanel import IImagingSchema\n except ImportError:\n-    IImagingSchema = None\n-    log.info(\'IImagingSchema for high pixel density scales not available.\')\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n \n \n @implementer(IStreamIterator)\n@@ -44,7 +39,9 @@ class filestream_range_iterator(Iterable):\n          as Iterators.filestream_iterator\n     """\n \n-    def __init__(self, name, mode=\'rb\', bufsize=-1, streamsize=1 << 16, start=0, end=None):\n+    def __init__(\n+        self, name, mode="rb", bufsize=-1, streamsize=1 << 16, start=0, end=None\n+    ):\n         self._io = FileIO(name, mode=mode)\n         self.streamsize = streamsize\n         self.start = start\n@@ -82,29 +79,28 @@ def safe_basename(filename):\n     """Get the basename of the given filename, regardless of which platform\n     (Windows or Unix) it originated from.\n     """\n-    fslice = max(\n-        filename.rfind(\'/\'),\n-        filename.rfind(\'\\\\\'),\n-        filename.rfind(\':\'),\n-    ) + 1\n+    fslice = (\n+        max(\n+            filename.rfind("/"),\n+            filename.rfind("\\\\"),\n+            filename.rfind(":"),\n+        )\n+        + 1\n+    )\n     return filename[fslice:]\n \n \n-def get_contenttype(\n-        file=None,\n-        filename=None,\n-        default=\'application/octet-stream\'):\n-    """Get the MIME content type of the given file and/or filename.\n-    """\n+def get_contenttype(file=None, filename=None, default="application/octet-stream"):\n+    """Get the MIME content type of the given file and/or filename."""\n \n-    file_type = getattr(file, \'contentType\', None)\n+    file_type = getattr(file, "contentType", None)\n     if file_type:\n         return file_type\n \n-    filename = getattr(file, \'filename\', filename)\n+    filename = getattr(file, "filename", filename)\n     if filename:\n         extension = os.path.splitext(filename)[1].lower()\n-        return mimetypes.types_map.get(extension, \'application/octet-stream\')\n+        return mimetypes.types_map.get(extension, "application/octet-stream")\n \n     return default\n \n@@ -116,33 +112,33 @@ def set_headers(file, response, filename=None):\n \n     contenttype = get_contenttype(file)\n \n-    response.setHeader(\'Content-Type\', contenttype)\n-    response.setHeader(\'Content-Length\', file.getSize())\n-    response.setHeader(\'Accept-Ranges\', \'bytes\')\n+    response.setHeader("Content-Type", contenttype)\n+    response.setHeader("Content-Length", file.getSize())\n+    response.setHeader("Accept-Ranges", "bytes")\n \n     if filename is not None:\n-        if not isinstance(filename, six.text_type):\n-            filename = six.text_type(filename, \'utf-8\', errors=\'ignore\')\n-        filename = urllib.parse.quote(filename.encode(\'utf8\'))\n+        if not isinstance(filename, str):\n+            filename = str(filename, "utf-8", errors="ignore")\n+        filename = urllib.parse.quote(filename.encode("utf8"))\n         response.setHeader(\n-            \'Content-Disposition\',\n-            \'attachment; filename*=UTF-8\\\'\\\'{0}\'.format(filename)\n+            "Content-Disposition", f"attachment; filename*=UTF-8\'\'{filename}"\n         )\n \n \n def stream_data(file, start=0, end=None):\n-    """Return the given file as a stream if possible.\n-    """\n+    """Return the given file as a stream if possible."""\n     if IBlobby.providedBy(file):\n         if file._blob._p_blob_uncommitted:\n             return file.data[start:end]\n-        return filestream_range_iterator(file._blob.committed(), \'rb\', start=start, end=end)\n+        return filestream_range_iterator(\n+            file._blob.committed(), "rb", start=start, end=end\n+        )\n     return file.data[start:end]\n \n \n def _ensure_data(image):\n     data = None\n-    if getattr(image, \'read\', None):\n+    if getattr(image, "read", None):\n         data = image.read()\n         image.seek(0)\n     else:\n@@ -155,31 +151,31 @@ def getImageInfo(data):\n     size = len(data)\n     height = -1\n     width = -1\n-    content_type = \'\'\n+    content_type = ""\n \n-    if (size >= 10) and data[:6] in (b\'GIF87a\', b\'GIF89a\'):\n+    if (size >= 10) and data[:6] in (b"GIF87a", b"GIF89a"):\n         # handle GIFs\n-        content_type = \'image/gif\'\n-        w, h = struct.unpack(\'<HH\', data[6:10])\n+        content_type = "image/gif"\n+        w, h = struct.unpack("<HH", data[6:10])\n         width = int(w)\n         height = int(h)\n \n-    elif data[:8] == b\'\\211PNG\\r\\n\\032\\n\':\n+    elif data[:8] == b"\\211PNG\\r\\n\\032\\n":\n         # handle PNG\n         content_type, width, height = process_png(data)\n \n-    elif data[:2] == b\'\\377\\330\':\n+    elif data[:2] == b"\\377\\330":\n         # handle JPEGs\n         content_type, width, height = process_jpeg(data)\n \n-    elif (size >= 30) and data.startswith(b\'BM\'):\n+    elif (size >= 30) and data.startswith(b"BM"):\n         # handle BMPs\n-        kind = struct.unpack(\'<H\', data[14:16])[0]\n+        kind = struct.unpack("<H", data[14:16])[0]\n         if kind == 40:  # Windows 3.x bitmap\n-            content_type = \'image/x-ms-bmp\'\n-            width, height = struct.unpack(\'<LL\', data[18:26])\n+            content_type = "image/x-ms-bmp"\n+            width, height = struct.unpack("<LL", data[18:26])\n \n-    elif size and b\'http://www.w3.org/2000/svg\' in data:\n+    elif size and b"http://www.w3.org/2000/svg" in data:\n         # handle SVGs\n         content_type, width, height = process_svg(data)\n \n@@ -194,12 +190,13 @@ def getImageInfo(data):\n             # Should happen if data is to short --> first_bytes\n             # happens also if data is an svg or another special format.\n             log.warning(\n-                \'PIL can not recognize the image. \'\n-                \'Image is probably broken or of a non-supported format.\'\n+                "PIL can not recognize the image. "\n+                "Image is probably broken or of a non-supported format."\n             )\n \n-    log.debug(\'Image Info (Type: %s, Width: %s, Height: %s)\',\n-              content_type, width, height)\n+    log.debug(\n+        "Image Info (Type: %s, Width: %s, Height: %s)", content_type, width, height\n+    )\n     return content_type, width, height\n \n \n@@ -209,7 +206,7 @@ def get_exif(image):\n     image_data = _ensure_data(image)\n \n     content_type, width, height = getImageInfo(image_data)\n-    if content_type in [\'image/jpeg\', \'image/tiff\']:\n+    if content_type in ["image/jpeg", "image/tiff"]:\n         # Only this two Image Types could have Exif informations\n         # see http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf\n         try:\n@@ -219,7 +216,7 @@ def get_exif(image):\n             # Should happen if data is to short --> first_bytes\n             log.warn(e)\n             exif_data = exif_data = {\n-                \'0th\': {\n+                "0th": {\n                     piexif.ImageIFD.XResolution: (width, 1),\n                     piexif.ImageIFD.YResolution: (height, 1),\n                 }\n@@ -239,23 +236,24 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     img = PIL.Image.open(BytesIO(data))\n \n     exif_data = None\n-    if \'exif\' in img.info:\n+    if "exif" in img.info:\n         try:\n-            exif_data = piexif.load(img.info[\'exif\'])\n+            exif_data = piexif.load(img.info["exif"])\n         except ValueError:\n-            log.warn(\'Exif information currupt\')\n+            log.warn("Exif information currupt")\n             pass\n-        if exif_data and piexif.ImageIFD.Orientation in exif_data[\'0th\']:\n-            orientation = exif_data[\'0th\'][piexif.ImageIFD.Orientation]\n-        if exif_data and \\\n-                (not exif_data[\'0th\'].get(piexif.ImageIFD.XResolution) or\n-                 not exif_data[\'0th\'].get(piexif.ImageIFD.YResolution)):\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution] = (img.width, 1)\n-            exif_data[\'0th\'][piexif.ImageIFD.YResolution] = (img.height, 1)\n+        if exif_data and piexif.ImageIFD.Orientation in exif_data["0th"]:\n+            orientation = exif_data["0th"][piexif.ImageIFD.Orientation]\n+        if exif_data and (\n+            not exif_data["0th"].get(piexif.ImageIFD.XResolution)\n+            or not exif_data["0th"].get(piexif.ImageIFD.YResolution)\n+        ):\n+            exif_data["0th"][piexif.ImageIFD.XResolution] = (img.width, 1)\n+            exif_data["0th"][piexif.ImageIFD.YResolution] = (img.height, 1)\n     if exif_data is None:\n         width, height = img.size\n         exif_data = {\n-            \'0th\': {\n+            "0th": {\n                 piexif.ImageIFD.XResolution: (width, 1),\n                 piexif.ImageIFD.YResolution: (height, 1),\n             }\n@@ -264,7 +262,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     if method is not None:\n         orientation = method\n \n-    log.debug(\'Rotate image with input orientation: %s\', orientation)\n+    log.debug("Rotate image with input orientation: %s", orientation)\n \n     fmt = img.format\n     if orientation == 1:  # not transform necessary\n@@ -275,39 +273,42 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     elif orientation == 3:\n         img = img.transpose(PIL.Image.ROTATE_180)\n     elif orientation == 4:\n-        img = img.transpose(PIL.Image.ROTATE_180).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_180).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 5:\n-        img = img.transpose(PIL.Image.ROTATE_270).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_270).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 6:\n         img = img.transpose(PIL.Image.ROTATE_270)\n     elif orientation == 7:\n-        img = img.transpose(PIL.Image.ROTATE_90).transpose(\n-            PIL.Image.FLIP_LEFT_RIGHT)\n+        img = img.transpose(PIL.Image.ROTATE_90).transpose(PIL.Image.FLIP_LEFT_RIGHT)\n     elif orientation == 8:\n         img = img.transpose(PIL.Image.ROTATE_90)\n \n     if orientation in [5, 6, 7, 8]:\n-        if exif_data[\'0th\'][piexif.ImageIFD.XResolution] and \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution]:\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution] = \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.XResolution]\n+        if (\n+            exif_data["0th"][piexif.ImageIFD.XResolution]\n+            and exif_data["0th"][piexif.ImageIFD.YResolution]\n+        ):\n+            (\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+            ) = (\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+            )\n         else:\n-            exif_data[\'0th\'][piexif.ImageIFD.XResolution], \\\n-                exif_data[\'0th\'][piexif.ImageIFD.YResolution] = \\\n-                (img.width, 1), (img.height, 1)\n+            (\n+                exif_data["0th"][piexif.ImageIFD.XResolution],\n+                exif_data["0th"][piexif.ImageIFD.YResolution],\n+            ) = (img.width, 1), (img.height, 1)\n \n     # set orientation to normal\n-    exif_data[\'0th\'][piexif.ImageIFD.Orientation] = 1\n+    exif_data["0th"][piexif.ImageIFD.Orientation] = 1\n \n     try:\n         exif_bytes = piexif.dump(exif_data)\n     except Exception as e:\n         log.warn(e)\n-        del(exif_data[\'Exif\'][piexif.ExifIFD.SceneType])\n+        del exif_data["Exif"][piexif.ExifIFD.SceneType]\n         # This Element piexif.ExifIFD.SceneType cause error on dump\n         exif_bytes = piexif.dump(exif_data)\n \n@@ -317,23 +318,23 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     return output_image_data.getvalue(), width, height, exif_data\n \n \n-@deprecate(\'use getHighPixelDensityScales instead\')\n+@deprecate("use getHighPixelDensityScales instead")\n def getRetinaScales():\n     return getHighPixelDensityScales()\n \n \n def getHighPixelDensityScales():\n     registry = queryUtility(IRegistry)\n-    if IImagingSchema and registry:\n-        settings = registry.forInterface(\n-            IImagingSchema, prefix=\'plone\', check=False)\n-        if settings.highpixeldensity_scales == \'2x\':\n-            return [\n-                {\'scale\': 2, \'quality\': settings.quality_2x},\n-            ]\n-        elif settings.highpixeldensity_scales == \'3x\':\n-            return [\n-                {\'scale\': 2, \'quality\': settings.quality_2x},\n-                {\'scale\': 3, \'quality\': settings.quality_3x},\n-            ]\n+    if not registry:\n+        return []\n+    settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+    if settings.highpixeldensity_scales == "2x":\n+        return [\n+            {"scale": 2, "quality": settings.quality_2x},\n+        ]\n+    if settings.highpixeldensity_scales == "3x":\n+        return [\n+            {"scale": 2, "quality": settings.quality_2x},\n+            {"scale": 3, "quality": settings.quality_3x},\n+        ]\n     return []\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 31037c3..cf8eb96 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from logging import getLogger\n from six import BytesIO\n \n@@ -15,23 +13,23 @@ def process_jpeg(data):\n     h = -1\n     size = len(data)\n \n-    if (size >= 2) and data.startswith(b\'\\377\\330\'):  # handle JPEGs\n-        content_type = \'image/jpeg\'\n+    if (size >= 2) and data.startswith(b"\\377\\330"):  # handle JPEGs\n+        content_type = "image/jpeg"\n         jpeg = BytesIO(data)\n         jpeg.read(2)\n         b = jpeg.read(1)\n         try:\n-            while (b and ord(b) != 0xDA):\n-                while (ord(b) != 0xFF):\n+            while b and ord(b) != 0xDA:\n+                while ord(b) != 0xFF:\n                     b = jpeg.read(1)\n-                while (ord(b) == 0xFF):\n+                while ord(b) == 0xFF:\n                     b = jpeg.read(1)\n-                if (ord(b) >= 0xC0 and ord(b) <= 0xC3):\n+                if ord(b) >= 0xC0 and ord(b) <= 0xC3:\n                     jpeg.read(3)\n-                    h, w = struct.unpack(\'>HH\', jpeg.read(4))\n+                    h, w = struct.unpack(">HH", jpeg.read(4))\n                     break\n                 else:\n-                    jpeg.read(int(struct.unpack(\'>H\', jpeg.read(2))[0]) - 2)\n+                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0]) - 2)\n                 b = jpeg.read(1)\n         except struct.error:\n             pass\ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex 172402c..49ed676 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from logging import getLogger\n \n import struct\n@@ -17,17 +15,18 @@ def process_png(data):\n     # Bytes 0-7 are below, 4-byte chunk length, then \'IHDR\'\n     # and finally the 4-byte width, height\n     if (\n-        (size >= 24) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\') and\n-        (data[12:16] == b\'IHDR\')\n+        (size >= 24)\n+        and data.startswith(b"\\211PNG\\r\\n\\032\\n")\n+        and (data[12:16] == b"IHDR")\n     ):\n-        content_type = \'image/png\'\n-        w, h = struct.unpack(\'>LL\', data[16:24])\n+        content_type = "image/png"\n+        w, h = struct.unpack(">LL", data[16:24])\n \n     # Maybe this is for an older PNG version.\n-    elif (size >= 16) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\'):\n+    elif (size >= 16) and data.startswith(b"\\211PNG\\r\\n\\032\\n"):\n         # Check to see if we have the right content type\n-        content_type = \'image/png\'\n-        w, h = struct.unpack(b\'>LL\', data[8:16])\n+        content_type = "image/png"\n+        w, h = struct.unpack(b">LL", data[8:16])\n \n     width = int(w)\n     height = int(h)\ndiff --git a/plone/namedfile/utils/svg_utils.py b/plone/namedfile/utils/svg_utils.py\nindex 0177bfc..004dedc 100644\n--- a/plone/namedfile/utils/svg_utils.py\n+++ b/plone/namedfile/utils/svg_utils.py\n@@ -1,10 +1,10 @@\n-# -*- coding: utf-8 -*-\n-\n-import re\n-import xml.etree.cElementTree as et\n from io import BytesIO\n from logging import getLogger\n \n+import re\n+import xml.etree.ElementTree as et\n+\n+\n log = getLogger(__name__)\n \n \ndiff --git a/setup.cfg b/setup.cfg\nindex c95c6f1..a4eb26a 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -6,3 +6,10 @@ ignore =\n   requirements-*.txt\n   sources-*.ini\n   tox.ini\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 1dd8934..ed1db77 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,23 +1,23 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'6.0.0a5.dev0\'\n+version = "6.0.0a5.dev0"\n \n-description = \'File types and fields for images, files and blob files with \' \\\n-              \'filenames\'\n-long_description = (\'\\n\\n\'.join([\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read(),\n-    open(os.path.join("plone", "namedfile", "usage.rst")).read(),\n-]))\n+description = "File types and fields for images, files and blob files with " "filenames"\n+long_description = "\\n\\n".join(\n+    [\n+        open("README.rst").read(),\n+        open("CHANGES.rst").read(),\n+        open(os.path.join("plone", "namedfile", "usage.rst")).read(),\n+    ]\n+)\n \n \n setup(\n-    name=\'plone.namedfile\',\n+    name="plone.namedfile",\n     version=version,\n     description=description,\n     long_description=long_description,\n@@ -36,37 +36,37 @@\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'plone named file image blob\',\n-    author=\'Laurence Rowe, Martin Aspeli\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.namedfile\',\n-    license=\'BSD\',\n+    keywords="plone named file image blob",\n+    author="Laurence Rowe, Martin Aspeli",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.namedfile",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'persistent\',\n-        \'piexif\',\n-        \'plone.app.uuid\',\n-        \'plone.rfc822>=2.0.0\',\n-        \'plone.scale[storage] >=3.0\',\n-        \'plone.schemaeditor\',\n-        \'plone.supermodel\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.browserpage\',\n-        \'zope.component\',\n-        \'zope.copy\',\n-        \'zope.security\',\n-        \'zope.traversing\',\n+        "persistent",\n+        "piexif",\n+        "plone.app.uuid",\n+        "plone.rfc822>=2.0.0",\n+        "plone.scale[storage] >=3.0",\n+        "plone.schemaeditor",\n+        "plone.supermodel",\n+        "setuptools",\n+        "six",\n+        "zope.browserpage",\n+        "zope.component",\n+        "zope.copy",\n+        "zope.security",\n+        "zope.traversing",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'lxml\',\n-            \'Pillow\',\n-            \'plone.testing[z2]\',\n+        "test": [\n+            "plone.app.testing",\n+            "lxml",\n+            "Pillow",\n+            "plone.testing[z2]",\n         ],\n     },\n )\n'

