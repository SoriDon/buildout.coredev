Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-11-20T23:40:29+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/6900c9416517c7550403aba1a3c6c18c68113d5d

Remove all traces of Products.CMFQuickinstaller - its gone in 5.2 +

Files changed:
A news/1267.bugfix
M src/plone/restapi/services/addons/addons.py

b'diff --git a/news/1267.bugfix b/news/1267.bugfix\nnew file mode 100644\nindex 000000000..420cf33ae\n--- /dev/null\n+++ b/news/1267.bugfix\n@@ -0,0 +1,6 @@\n+Remove all traces of ``Products.CMFQuickInstaller``.\n+It was removed in Plone 5.2.\n+BBB code was in ``plone.app.upgrade`` only.\n+Plone with Restapi broke if ``plone.app.upgrade` was not available, like when dependening on ``Products.CMFPlone`` only.\n+[jensens]\n+\ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 678076a12..8f6a50846 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -2,9 +2,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import INonInstallable\n-from Products.CMFQuickInstallerTool.interfaces import (\n-    INonInstallable as QINonInstallable,\n-)\n from Products.GenericSetup import EXTENSION\n from Products.GenericSetup.tool import UNKNOWN\n from zope.component import getAllUtilitiesRegisteredFor\n@@ -54,11 +51,7 @@ def is_product_installed(self, product_id):\n         return self.is_profile_installed(profile["id"])\n \n     def _install_profile_info(self, product_id):\n-        """List extension profile infos of a given product.\n-\n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        _install_profile_info\n-        """\n+        """List extension profile infos of a given product."""\n         profiles = self.ps.listProfileInfo()\n         # We are only interested in extension profiles for the product.\n         # TODO Remove the manual Products.* check here. It is still needed.\n@@ -140,9 +133,6 @@ def _get_profile(self, product_id, name, strict=True, allow_hidden=False):\n     def get_install_profile(self, product_id, allow_hidden=False):\n         """Return the default install profile.\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        getInstallProfile\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :param allow_hidden: Allow getting otherwise hidden profile.\n@@ -169,9 +159,6 @@ def get_uninstall_profile(self, product_id):\n     def is_product_installable(self, product_id, allow_hidden=False):\n         """Does a product have an installation profile?\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        isProductInstallable (and the deprecated isProductAvailable)\n-\n         :param allow_hidden: Allow installing otherwise hidden products.\n             In the UI this will be False, but you can set it to True in\n             for example a call from plone.app.upgrade where you want to\n@@ -190,14 +177,6 @@ def is_product_installable(self, product_id, allow_hidden=False):\n                 not_installable.extend(gnip())\n             if product_id in not_installable:\n                 return False\n-            # BBB.  For backwards compatibility, we try the INonInstallable\n-            # from the old QI as well.\n-            not_installable = []\n-            utils = getAllUtilitiesRegisteredFor(QINonInstallable)\n-            for util in utils:\n-                not_installable.extend(util.getNonInstallableProducts())\n-            if product_id in not_installable:\n-                return False\n \n         profile = self.get_install_profile(product_id, allow_hidden=allow_hidden)\n         if profile is None:\n@@ -240,8 +219,6 @@ def is_product_installable(self, product_id, allow_hidden=False):\n     def get_product_version(self, product_id):\n         """Return the version of the product (package).\n \n-        From CMFQuickInstallerTool/QuickInstallerTool\n-        getProductVersion\n         That implementation used to fall back to getting the version.txt.\n         """\n         try:\n@@ -258,8 +235,6 @@ def get_latest_upgrade_step(self, profile_id):\n \n         If anything errors out then go back to "old way" by returning\n         \'unknown\'.\n-\n-        From CMFPlone/QuickInstallerTool.py getLatestUpgradeStep\n         """\n         profile_version = UNKNOWN\n         try:\n@@ -277,8 +252,6 @@ def upgrade_info(self, product_id):\n         This is a dict with among others two booleans values, stating if\n         an upgrade is required and available.\n \n-        From CMFPlone/QuickInstaller.py upgradeInfo\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :returns: dictionary with info about product\n@@ -327,8 +300,6 @@ def upgrade_product(self, product_id):\n     def install_product(self, product_id, allow_hidden=False):\n         """Install a product by name.\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py installProduct\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :param allow_hidden: Allow installing otherwise hidden products.\n@@ -474,8 +445,7 @@ def marshall_addons(self):\n \n     def get_addons(self, apply_filter=None, product_name=None):\n         """\n-        100% based on generic setup profiles now. Kinda.\n-        For products magic, use the zope quickinstaller I guess.\n+        Based on generic setup profiles.\n \n         @filter:= \'installed\': only products that are installed and not hidden\n                   \'upgrades\': only products with upgrades\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-11-22T09:33:57+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/a2d9937f0eaf3f2abddcaa6f5235f6ab2f2659e4

Merge pull request #1267 from plone/fix-missing-quickinstaller

Remove all traces of Products.CMFQuickInstaller

Files changed:
A news/1267.bugfix
M src/plone/restapi/services/addons/addons.py

b'diff --git a/news/1267.bugfix b/news/1267.bugfix\nnew file mode 100644\nindex 000000000..420cf33ae\n--- /dev/null\n+++ b/news/1267.bugfix\n@@ -0,0 +1,6 @@\n+Remove all traces of ``Products.CMFQuickInstaller``.\n+It was removed in Plone 5.2.\n+BBB code was in ``plone.app.upgrade`` only.\n+Plone with Restapi broke if ``plone.app.upgrade` was not available, like when dependening on ``Products.CMFPlone`` only.\n+[jensens]\n+\ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 678076a12..8f6a50846 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -2,9 +2,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import INonInstallable\n-from Products.CMFQuickInstallerTool.interfaces import (\n-    INonInstallable as QINonInstallable,\n-)\n from Products.GenericSetup import EXTENSION\n from Products.GenericSetup.tool import UNKNOWN\n from zope.component import getAllUtilitiesRegisteredFor\n@@ -54,11 +51,7 @@ def is_product_installed(self, product_id):\n         return self.is_profile_installed(profile["id"])\n \n     def _install_profile_info(self, product_id):\n-        """List extension profile infos of a given product.\n-\n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        _install_profile_info\n-        """\n+        """List extension profile infos of a given product."""\n         profiles = self.ps.listProfileInfo()\n         # We are only interested in extension profiles for the product.\n         # TODO Remove the manual Products.* check here. It is still needed.\n@@ -140,9 +133,6 @@ def _get_profile(self, product_id, name, strict=True, allow_hidden=False):\n     def get_install_profile(self, product_id, allow_hidden=False):\n         """Return the default install profile.\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        getInstallProfile\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :param allow_hidden: Allow getting otherwise hidden profile.\n@@ -169,9 +159,6 @@ def get_uninstall_profile(self, product_id):\n     def is_product_installable(self, product_id, allow_hidden=False):\n         """Does a product have an installation profile?\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py\n-        isProductInstallable (and the deprecated isProductAvailable)\n-\n         :param allow_hidden: Allow installing otherwise hidden products.\n             In the UI this will be False, but you can set it to True in\n             for example a call from plone.app.upgrade where you want to\n@@ -190,14 +177,6 @@ def is_product_installable(self, product_id, allow_hidden=False):\n                 not_installable.extend(gnip())\n             if product_id in not_installable:\n                 return False\n-            # BBB.  For backwards compatibility, we try the INonInstallable\n-            # from the old QI as well.\n-            not_installable = []\n-            utils = getAllUtilitiesRegisteredFor(QINonInstallable)\n-            for util in utils:\n-                not_installable.extend(util.getNonInstallableProducts())\n-            if product_id in not_installable:\n-                return False\n \n         profile = self.get_install_profile(product_id, allow_hidden=allow_hidden)\n         if profile is None:\n@@ -240,8 +219,6 @@ def is_product_installable(self, product_id, allow_hidden=False):\n     def get_product_version(self, product_id):\n         """Return the version of the product (package).\n \n-        From CMFQuickInstallerTool/QuickInstallerTool\n-        getProductVersion\n         That implementation used to fall back to getting the version.txt.\n         """\n         try:\n@@ -258,8 +235,6 @@ def get_latest_upgrade_step(self, profile_id):\n \n         If anything errors out then go back to "old way" by returning\n         \'unknown\'.\n-\n-        From CMFPlone/QuickInstallerTool.py getLatestUpgradeStep\n         """\n         profile_version = UNKNOWN\n         try:\n@@ -277,8 +252,6 @@ def upgrade_info(self, product_id):\n         This is a dict with among others two booleans values, stating if\n         an upgrade is required and available.\n \n-        From CMFPlone/QuickInstaller.py upgradeInfo\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :returns: dictionary with info about product\n@@ -327,8 +300,6 @@ def upgrade_product(self, product_id):\n     def install_product(self, product_id, allow_hidden=False):\n         """Install a product by name.\n \n-        From CMFQuickInstallerTool/QuickInstallerTool.py installProduct\n-\n         :param product_id: id of product/package\n         :type product_id: string\n         :param allow_hidden: Allow installing otherwise hidden products.\n@@ -474,8 +445,7 @@ def marshall_addons(self):\n \n     def get_addons(self, apply_filter=None, product_name=None):\n         """\n-        100% based on generic setup profiles now. Kinda.\n-        For products magic, use the zope quickinstaller I guess.\n+        Based on generic setup profiles.\n \n         @filter:= \'installed\': only products that are installed and not hidden\n                   \'upgrades\': only products with upgrades\n'

