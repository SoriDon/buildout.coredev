Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-23T15:45:21+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/b2f9c39a3ea2b2441e07fc863b36a99695fadf80

Factor out permission checks in @users endpoint.

Files changed:
A news/771.feature
M src/plone/restapi/services/users/get.py

b'diff --git a/news/771.feature b/news/771.feature\nnew file mode 100644\nindex 00000000..e861e620\n--- /dev/null\n+++ b/news/771.feature\n@@ -0,0 +1,3 @@\n+Factor out permission checks in @users endpoint\n+to make it more easily customizable.\n+[lgraf]\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 734bce7a..aac2aedb 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -48,14 +48,26 @@ def _get_filtered_users(self, query, limit):\n         results = acl_users.searchUsers(id=query, max_results=limit)\n         return [portal_membership.getMemberById(user["userid"]) for user in results]\n \n-    def reply(self):\n+    def has_permission_to_query(self):\n+        sm = getSecurityManager()\n+        return sm.checkPermission("Manage portal", self.context)\n+\n+    def has_permission_to_enumerate(self):\n         sm = getSecurityManager()\n+        return sm.checkPermission("Manage portal", self.context)\n+\n+    def has_permission_to_access_user_info(self):\n+        sm = getSecurityManager()\n+        return sm.checkPermission(\n+            "plone.restapi: Access Plone user information", self.context)\n+\n+    def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 # Someone is searching users, check if he is authorized\n-                if sm.checkPermission("Manage portal", self.context):\n+                if self.has_permission_to_query():\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n                     for user in users:\n@@ -72,7 +84,7 @@ def reply(self):\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if he is authorized\n-            if sm.checkPermission("Manage portal", self.context):\n+            if self.has_permission_to_enumerate():\n                 result = []\n                 for user in self._get_users():\n                     serializer = queryMultiAdapter(\n@@ -89,9 +101,8 @@ def reply(self):\n         mt = getToolByName(self.context, "portal_membership")\n         current_user_id = mt.getAuthenticatedMember().getId()\n \n-        if sm.checkPermission(\n-            "plone.restapi: Access Plone user information", self.context\n-        ) or (current_user_id and current_user_id == self._get_user_id):\n+        if self.has_permission_to_access_user_info() or (\n+                current_user_id and current_user_id == self._get_user_id):\n \n             # we retrieve the user on the user id not the username\n             user = self._get_user(self._get_user_id)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-24T07:58:18+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/c9ef2e4e019beb854ec0c0cf1749bbc74b058308

Merge pull request #772 from plone/refactor-users-endpoint

Factor out permission checks in @users endpoint.

Files changed:
A news/771.feature
M src/plone/restapi/services/users/get.py

b'diff --git a/news/771.feature b/news/771.feature\nnew file mode 100644\nindex 00000000..e861e620\n--- /dev/null\n+++ b/news/771.feature\n@@ -0,0 +1,3 @@\n+Factor out permission checks in @users endpoint\n+to make it more easily customizable.\n+[lgraf]\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 734bce7a..aac2aedb 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -48,14 +48,26 @@ def _get_filtered_users(self, query, limit):\n         results = acl_users.searchUsers(id=query, max_results=limit)\n         return [portal_membership.getMemberById(user["userid"]) for user in results]\n \n-    def reply(self):\n+    def has_permission_to_query(self):\n+        sm = getSecurityManager()\n+        return sm.checkPermission("Manage portal", self.context)\n+\n+    def has_permission_to_enumerate(self):\n         sm = getSecurityManager()\n+        return sm.checkPermission("Manage portal", self.context)\n+\n+    def has_permission_to_access_user_info(self):\n+        sm = getSecurityManager()\n+        return sm.checkPermission(\n+            "plone.restapi: Access Plone user information", self.context)\n+\n+    def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 # Someone is searching users, check if he is authorized\n-                if sm.checkPermission("Manage portal", self.context):\n+                if self.has_permission_to_query():\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n                     for user in users:\n@@ -72,7 +84,7 @@ def reply(self):\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if he is authorized\n-            if sm.checkPermission("Manage portal", self.context):\n+            if self.has_permission_to_enumerate():\n                 result = []\n                 for user in self._get_users():\n                     serializer = queryMultiAdapter(\n@@ -89,9 +101,8 @@ def reply(self):\n         mt = getToolByName(self.context, "portal_membership")\n         current_user_id = mt.getAuthenticatedMember().getId()\n \n-        if sm.checkPermission(\n-            "plone.restapi: Access Plone user information", self.context\n-        ) or (current_user_id and current_user_id == self._get_user_id):\n+        if self.has_permission_to_access_user_info() or (\n+                current_user_id and current_user_id == self._get_user_id):\n \n             # we retrieve the user on the user id not the username\n             user = self._get_user(self._get_user_id)\n'

