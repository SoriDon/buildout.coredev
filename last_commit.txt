Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-12-01T11:37:57+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/59ef15988defe9c26d07a681937f9f63f09453de

add css class to actions

Files changed:
M plone/app/portlets/portlets/actions.pt

b'diff --git a/plone/app/portlets/portlets/actions.pt b/plone/app/portlets/portlets/actions.pt\nindex 71026dd3..b5d4013c 100644\n--- a/plone/app/portlets/portlets/actions.pt\n+++ b/plone/app/portlets/portlets/actions.pt\n@@ -15,7 +15,7 @@\n   <div class="portletContent">\n     <ul tal:attributes="class string:actions-${view/category}">\n       <tal:loop tal:repeat="link view/actionLinks">\n-        <li class="portletItem"\n+        <li tal:attributes="class python: \'portletItem \' + link[\'id\']"\n             tal:define="icon nocall:link/icon">\n           <a href="#"\n              tal:define="modal link/modal|nothing"\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-12-01T11:41:35+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/3347c8b8e9e6da5179065913540828cf31914a33

add changenote

Files changed:
A news/127.bugfix

b'diff --git a/news/127.bugfix b/news/127.bugfix\nnew file mode 100644\nindex 00000000..fdae92ef\n--- /dev/null\n+++ b/news/127.bugfix\n@@ -0,0 +1,2 @@\n+Add css-class to better style actions.\n+[pbauer]\n\\ No newline at end of file\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2022-07-04T13:48:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/4095bb82d8a63631abeecccab4c811ebf1b9f889

Merge branch 'master' into add_css_class_to_actions

Files changed:
A plone/app/portlets/browser/templates/footer.pt
A plone/app/portlets/browser/templates/manage_portlets_fallback.pt
A plone/app/portlets/browser/viewlets.py
A plone/app/portlets/dashboard/__init__.py
A plone/app/portlets/dashboard/configure.zcml
A plone/app/portlets/dashboard/dashboard.pt
A plone/app/portlets/dashboard/dashboard.py
A plone/app/portlets/dashboard/user_actions.pt
A plone/app/portlets/dashboard/user_actions.py
A plone/app/portlets/tests/atom_feed_maurits.xml
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/portlets/__init__.py
M plone/app/portlets/assignable.py
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/configure.zcml
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/interfaces.py
M plone/app/portlets/browser/manage.py
M plone/app/portlets/browser/templates/edit-manager-contextual.pt
M plone/app/portlets/browser/templates/edit-manager-macros.pt
M plone/app/portlets/browser/templates/manage-contextual.pt
M plone/app/portlets/browser/templates/manage-dashboard.pt
M plone/app/portlets/browser/templates/manage-group-dashboard.pt
M plone/app/portlets/browser/templates/manage-group.pt
M plone/app/portlets/browser/templates/topbar-manage-portlets.pt
M plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt
M plone/app/portlets/browser/traversal.py
M plone/app/portlets/browser/utils.py
M plone/app/portlets/cache.py
M plone/app/portlets/checker.py
M plone/app/portlets/configure.zcml
M plone/app/portlets/exportimport/__init__.py
M plone/app/portlets/exportimport/interfaces.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/interfaces.py
M plone/app/portlets/manager.py
M plone/app/portlets/metaconfigure.py
M plone/app/portlets/metadirectives.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/__init__.py
M plone/app/portlets/portlets/actions.pt
M plone/app/portlets/portlets/actions.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/portlets/calendar.py
M plone/app/portlets/portlets/classic.py
M plone/app/portlets/portlets/events.py
M plone/app/portlets/portlets/language.pt
M plone/app/portlets/portlets/language.py
M plone/app/portlets/portlets/login.pt
M plone/app/portlets/portlets/login.py
M plone/app/portlets/portlets/navigation.pt
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/navigation_recurse.pt
M plone/app/portlets/portlets/news.pt
M plone/app/portlets/portlets/news.py
M plone/app/portlets/portlets/recent.pt
M plone/app/portlets/portlets/recent.py
M plone/app/portlets/portlets/review.pt
M plone/app/portlets/portlets/review.py
M plone/app/portlets/portlets/rss.pt
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/portlets/search.pt
M plone/app/portlets/portlets/search.py
M plone/app/portlets/storage.py
M plone/app/portlets/testing.py
M plone/app/portlets/tests/__init__.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_classic_portlet.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/tests/test_formextender.py
M plone/app/portlets/tests/test_login_portlet.py
M plone/app/portlets/tests/test_manage_views.py
M plone/app/portlets/tests/test_mapping.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_news_portlet.py
M plone/app/portlets/tests/test_recent_portlet.py
M plone/app/portlets/tests/test_redirects.py
M plone/app/portlets/tests/test_review_portlet.py
M plone/app/portlets/tests/test_rss_portlet.py
M plone/app/portlets/tests/test_setup.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
M plone/app/portlets/tests/utils.py
M plone/app/portlets/utils.py
M setup.cfg
M setup.py
D news/128.bugfix
D news/130.bugfix
D plone/app/portlets/browser/manage-portlets.js
D plone/app/portlets/dashboard.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex fc3ad6d1..7db62182 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,151 @@ Changelog\n \n .. towncrier release notes start\n \n+5.0.0b1 (2022-06-23)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Styling Links as Buttons in Portlet Management View\n+  [1letter] (#164)\n+\n+\n+5.0.0a10 (2022-04-08)\n+---------------------\n+\n+Bug fixes:\n+\n+\n+- Use @@iconresolver to display icons in navigation portlet.\n+  [pbauer] (#162)\n+\n+\n+5.0.0a9 (2022-04-04)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Remove manage-portlets.js, this is part of mockup now [MrTango] (#159)\n+\n+\n+5.0.0a8 (2022-03-23)\n+--------------------\n+\n+New features:\n+\n+\n+- Fixes for latest z3c.form\n+  [petschki] (#161)\n+\n+\n+5.0.0a7 (2021-11-23)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Move most (hard dependency) portlet related from `plone.app.layout`:\n+  Dashboard, Portlet related viewlets.\n+  A first step towards a Portlet-as-an-Addon story.\n+  [jensens] (#160)\n+\n+\n+5.0.0a6 (2021-10-16)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Add missing i18n:translate tags\n+  [erral] (#158)\n+\n+\n+5.0.0a5 (2021-09-15)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Remove cyclic dependency with Products.CMFPlone\n+  [ericof] (#155)\n+\n+\n+5.0.0a4 (2021-09-15)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Remove cyclic dependency with Products.CMFPlone, plone.app.layouts\n+  [ericof] (#152)\n+\n+\n+5.0.0a3 (2021-09-01)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Codestyle (black/isort/pycln), Pyupgrade, plus minor manual cleanup.\n+  [jensens] (#151)\n+\n+\n+5.0.0a2 (2021-06-30)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Only allow http and https urls in RSS portlet.\n+  From `Products.PloneHotfix20210518 <https://plone.org/security/hotfix/20210518/blind-ssrf-via-feedparser-accessing-an-internal-url>`_.\n+  [maurits] (#3274)\n+\n+\n+5.0.0a1 (2021-04-20)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Update dashboard for Plone 6 with Bootstrap markup\n+  [1letter] (#144)\n+\n+\n+4.4.6 (2020-09-28)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- fixes  index error in navigation portlet caused by unknown mimetypes without\n+  entry in mimetype registry\n+  https://github.com/plone/Products.CMFPlone/issues/2882) (cmfplone-2882)\n+- Fixed deprecation warning for ``zope.component.interfaces.IComponentRegistry``.\n+  [maurits] (#3130)\n+\n+\n+4.4.5 (2020-04-20)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Minor packaging updates. (#1)\n+\n+\n+4.4.4 (2019-12-02)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- - Remove role="navigation" from Navigation portlet.\n+    [ericof] (#128) (#128)\n+- Fix review portlet when show on the portal-root (#130)\n+\n+\n 4.4.3 (2019-10-21)\n ------------------\n \ndiff --git a/news/128.bugfix b/news/128.bugfix\ndeleted file mode 100644\nindex 0865e3e5..00000000\n--- a/news/128.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-- Remove role="navigation" from Navigation portlet.\n-  [ericof] (#128)\ndiff --git a/news/130.bugfix b/news/130.bugfix\ndeleted file mode 100644\nindex 9bc5db74..00000000\n--- a/news/130.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix review portlet when show on the portal-root\n\\ No newline at end of file\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef0..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef0..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/portlets/__init__.py b/plone/app/portlets/__init__.py\nindex f7774de1..febb48db 100644\n--- a/plone/app/portlets/__init__.py\n+++ b/plone/app/portlets/__init__.py\n@@ -1,12 +1,13 @@\n-# -*- coding: utf-8 -*-\n # Import PloneMessageFactory to create messages in the plone domain\n from zope.i18nmessageid import MessageFactory\n+\n import pkg_resources\n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+\n+PloneMessageFactory = MessageFactory("plone")\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.event\')\n+    pkg_resources.get_distribution("plone.app.event")\n except pkg_resources.DistributionNotFound:\n     HAS_PLONE_APP_EVENT = False\n else:\ndiff --git a/plone/app/portlets/assignable.py b/plone/app/portlets/assignable.py\nindex d94cadc2..902b34b8 100644\n--- a/plone/app/portlets/assignable.py\n+++ b/plone/app/portlets/assignable.py\n@@ -1,23 +1,18 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapter\n-from zope.annotation.interfaces import IAnnotations\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n-\n+from .storage import PortletAssignmentMapping\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n+from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n \n \n @adapter(ILocalPortletAssignable, IPortletManager)\n @implementer(IPortletAssignmentMapping)\n def localPortletAssignmentMappingAdapter(context, manager):\n-    """Zope 2 version of the localPortletAssignmentMappingAdapter factory.\n-    """\n+    """Zope 2 version of the localPortletAssignmentMappingAdapter factory."""\n     annotations = IAnnotations(context)\n     local = annotations.get(CONTEXT_ASSIGNMENT_KEY, {})\n     portlets = local.get(manager.__name__, None)\n@@ -26,15 +21,14 @@ def localPortletAssignmentMappingAdapter(context, manager):\n         # but pass along the context so it can be stored\n         # if an assignment is added.\n         portlets = PortletAssignmentMapping(\n-            manager=manager.__name__,\n-            category=CONTEXT_CATEGORY,\n-            context=context)\n+            manager=manager.__name__, category=CONTEXT_CATEGORY, context=context\n+        )\n \n     # XXX: For graceful migration\n-    if not getattr(portlets, \'__manager__\', \'\'):\n+    if not getattr(portlets, "__manager__", ""):\n         portlets.__manager__ = manager.__name__\n \n-    if not getattr(portlets, \'__category__\', \'\'):\n+    if not getattr(portlets, "__category__", ""):\n         portlets.__category__ = CONTEXT_CATEGORY\n \n     return portlets\ndiff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py\nindex b22fc695..656babe3 100644\n--- a/plone/app/portlets/browser/adding.py\n+++ b/plone/app/portlets/browser/adding.py\n@@ -1,18 +1,15 @@\n-# -*- coding: utf-8 -*-\n-from warnings import warn\n-\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Acquisition import aq_inner, aq_base, aq_parent\n+from ..interfaces import IPortletPermissionChecker\n+from .interfaces import IPortletAdding\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n-\n-from plone.app.portlets.browser.interfaces import IPortletAdding\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n+from warnings import warn\n+from zope.component import getMultiAdapter\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n @implementer(IPortletAdding)\n@@ -23,11 +20,10 @@ class PortletAdding(SimpleItem, BrowserView):\n \n     # This is necessary so that context.absolute_url() works properly on the\n     # add form, which in turn fixes the <base /> URL\n-    id = \'+\'\n+    id = "+"\n \n     def add(self, content):\n-        """Add the rule to the context\n-        """\n+        """Add the rule to the context"""\n         context = aq_inner(self.context)\n         manager = aq_base(context)\n \n@@ -38,21 +34,23 @@ def add(self, content):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         referer = self.referer\n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n-            referer = url + \'/@@manage-portlets\'\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+            referer = url + "/@@manage-portlets"\n         return referer\n \n     def renderAddButton(self):\n-        warn("The renderAddButton method is deprecated, use nameAllowed",\n-            DeprecationWarning, 2)\n+        warn(\n+            "The renderAddButton method is deprecated, use nameAllowed",\n+            DeprecationWarning,\n+            2,\n+        )\n \n     def namesAccepted(self):\n         return False\ndiff --git a/plone/app/portlets/browser/configure.zcml b/plone/app/portlets/browser/configure.zcml\nindex 8ba32160..653f3487 100644\n--- a/plone/app/portlets/browser/configure.zcml\n+++ b/plone/app/portlets/browser/configure.zcml\n@@ -213,12 +213,6 @@\n \n     </configure>\n \n-    <!-- Resources -->\n-    <browser:resource\n-        name="manage-portlets.js"\n-        file="manage-portlets.js"\n-        />\n-\n     <browser:page\n         for="*"\n         name="render-portlet"\n@@ -227,4 +221,23 @@\n         permission="zope2.View"\n         />\n \n+    <!-- Portlets Footer -->\n+    <browser:viewlet\n+        name="plone.footer"\n+        for="*"\n+        manager="plone.app.layout.viewlets.interfaces.IPortalFooter"\n+        class=".viewlets.FooterViewlet"\n+        permission="zope.Public"\n+        />\n+\n+    <!-- Manage portlets Fallback link -->\n+    <browser:viewlet\n+        name="plone.manage_portlets_fallback"\n+        for="plone.portlets.interfaces.ILocalPortletAssignable"\n+        view="plone.app.layout.globals.interfaces.IViewView"\n+        manager="plone.app.layout.viewlets.interfaces.IBelowContent"\n+        class=".viewlets.ManagePortletsFallbackViewlet"\n+        permission="zope2.View"\n+        />\n+\n </configure>\ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex 92f0d728..5e5842b2 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -1,46 +1,47 @@\n-# -*- coding: utf-8 -*-\n-import logging\n-\n+from ..interfaces import IDashboard\n+from ..interfaces import IPortletPermissionChecker\n+from .interfaces import IManageColumnPortletsView\n+from .interfaces import IManageContextualPortletsView\n+from .interfaces import IManageDashboardPortletsView\n+from AccessControl import Unauthorized\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition import Explicit\n+from Acquisition.interfaces import IAcquirer\n+from five.customerize.zpt import TTWViewTemplateRenderer\n from plone.memoize.view import memoize\n-\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.utils import hashPortletInfo\n-\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.PythonScripts.standard import url_quote\n+from Products.PythonScripts.standard import url_unquote\n+from zExceptions import NotFound\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryAdapter\n+from zope.component import queryMultiAdapter\n from zope.container import contained\n-from zope.interface import implementer, Interface\n-from zope.component import (\n-    adapts, getMultiAdapter, queryMultiAdapter, queryAdapter, getUtility)\n from zope.contentprovider.interfaces import UpdateNotCalled\n+from zope.interface import implementer\n+from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from five.customerize.zpt import TTWViewTemplateRenderer\n-\n-from Acquisition import Explicit, aq_parent, aq_inner\n-from Acquisition.interfaces import IAcquirer\n-\n-from AccessControl import Unauthorized\n-from zExceptions import NotFound\n \n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.PythonScripts.standard import url_quote, url_unquote\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-\n-from plone.app.portlets.browser.interfaces import IManageColumnPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n-from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n-from plone.app.portlets.interfaces import IDashboard, IPortletPermissionChecker\n-\n-from plone.portlets.interfaces import IPortletAssignmentSettings\n+import logging\n \n \n @implementer(IPortletManagerRenderer)\n+@adapter(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n class EditPortletManagerRenderer(Explicit):\n     """Render a portlet manager in edit mode.\n \n@@ -48,9 +49,8 @@ class EditPortletManagerRenderer(Explicit):\n     which assignments to display.\n \n     """\n-    adapts(Interface, IDefaultBrowserLayer, IManageColumnPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager.pt\')\n+    template = ViewPageTemplateFile("templates/edit-manager.pt")\n \n     def __init__(self, context, request, view, manager):\n         self.__parent__ = view\n@@ -82,27 +82,30 @@ def view_name(self):\n         if not name:\n             # try to fallback on the \'name\' attribute for\n             # TTW customized views, see #11409\n-            if \'TTWView\' in self.__parent__.__class__.__name__:\n+            if "TTWView" in self.__parent__.__class__.__name__:\n                 try:\n-                    path = self.request.get(\'PATH_INFO\')\n+                    path = self.request.get("PATH_INFO")\n                     template_renderer = self.request.traverse(path)\n-                    name = getattr(template_renderer.template, \'view_name\', None)\n-                except (AttributeError, KeyError, Unauthorized,):\n-                    logging.getLogger(\'plone.app.portlets.browser\').debug(\n-                        \'Cant get view name for TTV %s\' % self.__parent__\n+                    name = getattr(template_renderer.template, "view_name", None)\n+                except (\n+                    AttributeError,\n+                    KeyError,\n+                    Unauthorized,\n+                ):\n+                    logging.getLogger("plone.app.portlets.browser").debug(\n+                        "Cant get view name for TTV %s" % self.__parent__\n                     )\n         return name\n \n     def normalized_manager_name(self):\n-        return self.manager.__name__.replace(\'.\', \'-\')\n+        return self.manager.__name__.replace(".", "-")\n \n     def baseUrl(self):\n         return self.__parent__.getAssignmentMappingUrl(self.manager)\n \n     def portlets(self):\n         assignments = self._lazyLoadAssignments(self.manager)\n-        return self.portlets_for_assignments(\n-            assignments, self.manager, self.baseUrl())\n+        return self.portlets_for_assignments(assignments, self.manager, self.baseUrl())\n \n     def portlets_for_assignments(self, assignments, manager, base_url):\n         category = self.__parent__.category\n@@ -111,56 +114,69 @@ def portlets_for_assignments(self, assignments, manager, base_url):\n         data = []\n         for idx in range(len(assignments)):\n             name = assignments[idx].__name__\n-            if hasattr(assignments[idx], \'__Broken_state__\'):\n-                name = assignments[idx].__Broken_state__[\'__name__\']\n+            if hasattr(assignments[idx], "__Broken_state__"):\n+                name = assignments[idx].__Broken_state__["__name__"]\n \n             editview = queryMultiAdapter(\n-                (assignments[idx], self.request), name=\'edit\', default=None)\n+                (assignments[idx], self.request), name="edit", default=None\n+            )\n \n             if editview is None:\n-                editviewName = \'\'\n+                editviewName = ""\n             else:\n-                editviewName = \'%s/%s/edit\' % (base_url, name)\n+                editviewName = f"{base_url}/{name}/edit"\n \n             portlet_hash = hashPortletInfo(\n-                dict(manager=manager.__name__, category=category,\n-                     key=key, name=name,))\n+                dict(\n+                    manager=manager.__name__,\n+                    category=category,\n+                    key=key,\n+                    name=name,\n+                )\n+            )\n \n             try:\n                 settings = IPortletAssignmentSettings(assignments[idx])\n-                visible = settings.get(\'visible\', True)\n+                visible = settings.get("visible", True)\n             except TypeError:\n                 visible = False\n \n-            data.append({\n-                \'title\': assignments[idx].title,\n-                \'editview\': editviewName,\n-                \'hash\': portlet_hash,\n-                \'name\': name,\n-                \'up_url\': \'%s/@@move-portlet-up\' % (base_url),\n-                \'down_url\': \'%s/@@move-portlet-down\' % (base_url),\n-                \'delete_url\': \'%s/@@delete-portlet\' % (base_url),\n-                \'hide_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'show_url\': \'%s/@@toggle-visibility\' % (base_url),\n-                \'visible\': visible,\n-                })\n+            data.append(\n+                {\n+                    "title": assignments[idx].title,\n+                    "editview": editviewName,\n+                    "hash": portlet_hash,\n+                    "name": name,\n+                    "up_url": "%s/@@move-portlet-up" % (base_url),\n+                    "down_url": "%s/@@move-portlet-down" % (base_url),\n+                    "delete_url": "%s/@@delete-portlet" % (base_url),\n+                    "hide_url": "%s/@@toggle-visibility" % (base_url),\n+                    "show_url": "%s/@@toggle-visibility" % (base_url),\n+                    "visible": visible,\n+                }\n+            )\n         if len(data) > 0:\n-            data[0][\'up_url\'] = data[-1][\'down_url\'] = None\n+            data[0]["up_url"] = data[-1]["down_url"] = None\n \n         return data\n \n     def addable_portlets(self):\n         baseUrl = self.baseUrl()\n-        addviewbase = baseUrl.replace(self.context_url(), \'\')\n+        addviewbase = baseUrl.replace(self.context_url(), "")\n+\n         def sort_key(v):\n-            return v.get(\'title\')\n+            return v.get("title")\n+\n         def check_permission(p):\n             addview = p.addview\n             if not addview:\n                 return False\n \n-            addview = "%s/+/%s" % (addviewbase, addview,)\n-            if addview.startswith(\'/\'):\n+            addview = "{}/+/{}".format(\n+                addviewbase,\n+                addview,\n+            )\n+            if addview.startswith("/"):\n                 addview = addview[1:]\n             try:\n                 self.context.restrictedTraverse(str(addview))\n@@ -168,26 +184,30 @@ def check_permission(p):\n                 return False\n             return True\n \n-        portlets = [{\n-            \'title\': p.title,\n-            \'description\': p.description,\n-            \'addview\': \'%s/+/%s\' % (addviewbase, p.addview)\n-            } for p in self.manager.getAddablePortletTypes() if check_permission(p)]\n+        portlets = [\n+            {\n+                "title": p.title,\n+                "description": p.description,\n+                "addview": f"{addviewbase}/+/{p.addview}",\n+            }\n+            for p in self.manager.getAddablePortletTypes()\n+            if check_permission(p)\n+        ]\n \n         portlets.sort(key=sort_key)\n         return portlets\n \n     @memoize\n     def referer(self):\n-        view_name = self.request.get(\'viewname\', None)\n-        key = self.request.get(\'key\', None)\n-        base_url = self.request[\'ACTUAL_URL\']\n+        view_name = self.request.get("viewname", None)\n+        key = self.request.get("key", None)\n+        base_url = self.request["ACTUAL_URL"]\n \n         if view_name:\n-            base_url = self.context_url() + \'/\' + view_name\n+            base_url = self.context_url() + "/" + view_name\n \n         if key:\n-            base_url += \'?key=%s\' % key\n+            base_url += "?key=%s" % key\n \n         return base_url\n \n@@ -197,7 +217,7 @@ def url_quote_referer(self):\n \n     @memoize\n     def key(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # See note in plone.portlets.manager\n \n@@ -207,35 +227,49 @@ def _lazyLoadAssignments(self, manager):\n \n     @memoize\n     def context_url(self):\n-        return str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        return str(getMultiAdapter((self.context, self.request), name="absolute_url"))\n \n+\n+@adapter(\n+    Interface, IDefaultBrowserLayer, IManageContextualPortletsView, IPortletManager\n+)\n class ContextualEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for contextual portlets"""\n-    adapts(Interface, IDefaultBrowserLayer,\n-           IManageContextualPortletsView, IPortletManager)\n \n-    template = ViewPageTemplateFile(\'templates/edit-manager-contextual.pt\')\n+    template = ViewPageTemplateFile("templates/edit-manager-contextual.pt")\n \n     def __init__(self, context, request, view, manager):\n         EditPortletManagerRenderer.__init__(self, context, request, view, manager)\n \n     def blacklist_status_action(self):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return baseUrl + \'/@@set-portlet-blacklist-status\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return baseUrl + "/@@set-portlet-blacklist-status"\n \n     def manager_name(self):\n         return self.manager.__name__\n \n     def context_blacklist_status(self):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         return assignable.getBlacklistStatus(CONTEXT_CATEGORY)\n \n     def group_blacklist_status(self, check_parent=False):\n         # If check_parent is True and the blacklist status is None, it returns the\n         # parent status recursively.\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(GROUP_CATEGORY)\n \n         if check_parent and status is None:\n@@ -245,8 +279,13 @@ def group_blacklist_status(self, check_parent=False):\n         return status\n \n     def content_type_blacklist_status(self, check_parent=False):\n-        assignable = getMultiAdapter((self.context, self.manager,),\n-                                     ILocalPortletAssignmentManager)\n+        assignable = getMultiAdapter(\n+            (\n+                self.context,\n+                self.manager,\n+            ),\n+            ILocalPortletAssignmentManager,\n+        )\n         status = assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY)\n \n         if check_parent and status is None:\n@@ -266,8 +305,13 @@ def parent_blacklist_status(self, category):\n         current = pcontext.getParent()\n         currentpc = pcontext\n         while status is None and current is not None:\n-            assignable = getMultiAdapter((current, self.manager,),\n-                                         ILocalPortletAssignmentManager)\n+            assignable = getMultiAdapter(\n+                (\n+                    current,\n+                    self.manager,\n+                ),\n+                ILocalPortletAssignmentManager,\n+            )\n             status = assignable.getBlacklistStatus(category)\n \n             current = currentpc.getParent()\n@@ -290,7 +334,7 @@ def inherited_portlets(self):\n \n         def is_visible(a):\n             try:\n-                return IPortletAssignmentSettings(a).get(\'visible\', True)\n+                return IPortletAssignmentSettings(a).get("visible", True)\n             except TypeError:\n                 # Assignment is broken\n                 return False\n@@ -302,25 +346,32 @@ def is_visible(a):\n                 context = context.__parent__\n \n             # we get the contextual portlets view to access its utility methods\n-            view = queryMultiAdapter((context, self.request),\n-                                     name=self.__parent__.__name__)\n+            view = queryMultiAdapter(\n+                (context, self.request), name=self.__parent__.__name__\n+            )\n             if view is not None:\n                 assignments = view.getAssignmentsForManager(self.manager)\n                 assignments_to_show = [a for a in assignments if is_visible(a)]\n                 base_url = view.getAssignmentMappingUrl(self.manager)\n-                data.extend(self.portlets_for_assignments(assignments_to_show,\n-                                                          self.manager, base_url))\n-\n-            assignable = queryMultiAdapter((context, self.manager),\n-                                           ILocalPortletAssignmentManager)\n-            if assignable is not None and assignable.getBlacklistStatus(CONTEXT_CATEGORY):\n+                data.extend(\n+                    self.portlets_for_assignments(\n+                        assignments_to_show, self.manager, base_url\n+                    )\n+                )\n+\n+            assignable = queryMultiAdapter(\n+                (context, self.manager), ILocalPortletAssignmentManager\n+            )\n+            if assignable is not None and assignable.getBlacklistStatus(\n+                CONTEXT_CATEGORY\n+            ):\n                 # Current context has blocked inherited portlets, stop.\n                 break\n \n         return data\n \n     def global_portlets(self, category, prefix):\n-        """ Return the list of global portlets from a given category for the current context.\n+        """Return the list of global portlets from a given category for the current context.\n \n         Invisible (hidden) portlets are excluded.\n \n@@ -330,7 +381,9 @@ def global_portlets(self, category, prefix):\n         # get the portlet context\n         pcontext = IPortletContext(self.context)\n \n-        portal_state = getMultiAdapter((context, self.request), name=u\'plone_portal_state\')  # noqa\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name="plone_portal_state"\n+        )\n         base_url = portal_state.portal_url()\n \n         portlets = []\n@@ -339,44 +392,55 @@ def global_portlets(self, category, prefix):\n                 mapping = self.manager.get(category, None)\n                 assignments = []\n                 if mapping is not None:\n-                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\'visible\', True)  # noqa\n-                    assignments.extend([a for a in mapping.get(key, {}).values()\n-                                        if is_visible(a)])\n+                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\n+                        "visible", True\n+                    )\n+                    assignments.extend(\n+                        [a for a in mapping.get(key, {}).values() if is_visible(a)]\n+                    )\n                 if assignments:\n-                    edit_url = \'%s/++%s++%s+%s\' % (\n-                        base_url, prefix, self.manager.__name__, key)\n-                    portlets.extend(self.portlets_for_assignments(\n-                        assignments, self.manager, edit_url))\n+                    edit_url = "{}/++{}++{}+{}".format(\n+                        base_url,\n+                        prefix,\n+                        self.manager.__name__,\n+                        key,\n+                    )\n+                    portlets.extend(\n+                        self.portlets_for_assignments(\n+                            assignments, self.manager, edit_url\n+                        )\n+                    )\n \n         return portlets\n \n     def group_portlets(self):\n         """Return the list of global portlets from the group category for the\n-           current context."""\n-        return self.global_portlets(GROUP_CATEGORY, \'groupportlets\')\n+        current context."""\n+        return self.global_portlets(GROUP_CATEGORY, "groupportlets")\n \n     def content_type_portlets(self):\n         """Return the list of global portlets from the content type category for\n-           the current context."""\n-        return self.global_portlets(CONTENT_TYPE_CATEGORY, \'contenttypeportlets\')\n+        the current context."""\n+        return self.global_portlets(CONTENT_TYPE_CATEGORY, "contenttypeportlets")\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n class DashboardEditPortletManagerRenderer(EditPortletManagerRenderer):\n     """Render a portlet manager in edit mode for the dashboard"""\n-    adapts(Interface, IDefaultBrowserLayer, IManageDashboardPortletsView, IDashboard)\n \n \n class ManagePortletAssignments(BrowserView):\n     """Utility views for managing portlets for a particular column"""\n \n     def authorize(self):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n \n     def _render_column(self):\n-        view_name = self.request.form.get(\'viewname\')\n+        view_name = self.request.form.get("viewname")\n         obj = aq_inner(self.context.__parent__)\n         request = aq_inner(self.request)\n         view = getMultiAdapter((obj, request), name=view_name)\n@@ -385,17 +449,18 @@ def _render_column(self):\n             view = view._getView()\n \n         manager = getUtility(IPortletManager, name=self.context.__manager__)\n-        renderer = getMultiAdapter((obj, request, view, manager),\n-                                   IPortletManagerRenderer)\n+        renderer = getMultiAdapter(\n+            (obj, request, view, manager), IPortletManagerRenderer\n+        )\n         renderer.update()\n         return renderer.__of__(obj).render()\n \n     def finish_portlet_change(self):\n-        if self.request.form.get(\'ajax\', False):\n+        if self.request.form.get("ajax", False):\n             return self._render_column()\n         else:\n             self.request.response.redirect(self._nextUrl())\n-            return \'\'\n+            return ""\n \n     # view @@move-portlet-up\n     def move_portlet_up(self, name):\n@@ -407,7 +472,7 @@ def move_portlet_up(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx-1, name)\n+        keys.insert(idx - 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -421,7 +486,7 @@ def move_portlet_down(self, name):\n \n         idx = keys.index(name)\n         keys.remove(name)\n-        keys.insert(idx+1, name)\n+        keys.insert(idx + 1, name)\n         assignments.updateOrder(keys)\n         return self.finish_portlet_change()\n \n@@ -444,21 +509,21 @@ def delete_portlet(self, name):\n         return self.finish_portlet_change()\n \n     def _nextUrl(self):\n-        referer = self.request.get(\'referer\')\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        referer = self.request.get("referer")\n+        urltool = getToolByName(self.context, "portal_url")\n         if referer:\n             referer = url_unquote(referer)\n \n         if not referer or not urltool.isURLInPortal(referer):\n             context = aq_parent(aq_inner(self.context))\n-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))\n-            referer = \'%s/@@manage-portlets\' % (url,)\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n+            referer = f"{url}/@@manage-portlets"\n         return referer\n \n     def toggle_visibility(self, name):\n         self.authorize()\n         assignments = aq_inner(self.context)\n         settings = IPortletAssignmentSettings(assignments[name])\n-        visible = settings.get(\'visible\', True)\n-        settings[\'visible\'] = not visible\n+        visible = settings.get("visible", True)\n+        settings["visible"] = not visible\n         return self.finish_portlet_change()\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 4f98fc75..3a104c73 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -1,27 +1,25 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..browser.interfaces import IPortletAddForm\n+from ..browser.interfaces import IPortletEditForm\n+from ..interfaces import IPortletPermissionChecker\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from Acquisition.interfaces import IAcquirer\n+from plone.autoform.form import AutoExtensibleForm\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n from zope.component import getMultiAdapter\n from zope.interface import implementer\n+\n import zope.event\n import zope.lifecycleevent\n \n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n-from Acquisition.interfaces import IAcquirer\n-\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.browser.interfaces import IPortletAddForm\n-from plone.app.portlets.browser.interfaces import IPortletEditForm\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.autoform.form import AutoExtensibleForm\n-\n-from Products.statusmessages.interfaces import IStatusMessage\n-\n \n @implementer(IPortletAddForm)\n class AddForm(AutoExtensibleForm, form.AddForm):\n@@ -44,9 +42,9 @@ def create(self):\n             return MyAssignment()\n     """\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Configure portlet")\n+    label = _("Configure portlet")\n \n     def add(self, object):\n         ob = self.context.add(object)\n@@ -54,11 +52,11 @@ def add(self, object):\n         return ob\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(AddForm, self).__call__()\n+        return super().__call__()\n \n     def createAndAdd(self, data):\n         # Filter away data values that does not come from the \'core\' schema.\n@@ -69,8 +67,7 @@ def createAndAdd(self, data):\n         # Extender values are set by form.applyChanges below, via the usual\n         # z3cform adapter lookups.\n         schema_keys = field.Fields(self.schema).keys()\n-        unextended_data = {key: data[key]\n-                           for key in schema_keys if key in data}\n+        unextended_data = {key: data[key] for key in schema_keys if key in data}\n         obj = self.create(unextended_data)\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n@@ -88,25 +85,24 @@ def createAndAdd(self, data):\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         addview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(addview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             # At least in tests we can get a TypeError: "There isn\'t enough\n             # context to get URL information. This is probably due to a bug in\n             # setting up location information."\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'add\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="add")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -117,13 +113,12 @@ def handleAdd(self, action):\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\n \n \n class NullAddForm(BrowserView):\n@@ -143,25 +138,24 @@ def __call__(self):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         else:\n             addview = aq_parent(aq_inner(self.context))\n             context = aq_parent(aq_inner(addview))\n             try:\n-                url = str(getMultiAdapter((context, self.request),\n-                                          name=u"absolute_url"))\n+                url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n             except (TypeError, AttributeError):\n                 url = self.context.absolute_url()\n-            return url + \'/@@manage-portlets\'\n+            return url + "/@@manage-portlets"\n \n     def create(self):\n         raise NotImplementedError("concrete classes must implement create()")\n@@ -169,38 +163,36 @@ def create(self):\n \n @implementer(IPortletEditForm)\n class EditForm(AutoExtensibleForm, form.EditForm):\n-    """An edit form for portlets.\n-    """\n+    """An edit form for portlets."""\n \n-    template = ViewPageTemplateFile(\'templates/z3cform-portlets-pageform.pt\')\n+    template = ViewPageTemplateFile("templates/z3cform-portlets-pageform.pt")\n \n-    label = _(u"Modify portlet")\n+    label = _("Modify portlet")\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()\n-        return super(EditForm, self).__call__()\n+        return super().__call__()\n \n     @property\n     def referer(self):\n-        return self.request.get(\'referer\', \'\')\n+        return self.request.get("referer", "")\n \n     def nextURL(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n+        urltool = getToolByName(self.context, "portal_url")\n         if self.referer and urltool.isURLInPortal(self.referer):\n             return self.referer\n         editview = aq_parent(aq_inner(self.context))\n         context = aq_parent(aq_inner(editview))\n         try:\n-            url = str(getMultiAdapter((context, self.request),\n-                                      name=u"absolute_url"))\n+            url = str(getMultiAdapter((context, self.request), name="absolute_url"))\n         except (TypeError, AttributeError):\n             url = self.context.absolute_url()\n-        return url + \'/@@manage-portlets\'\n+        return url + "/@@manage-portlets"\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name=\'apply\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="apply")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -209,22 +201,19 @@ def handleSave(self, action):\n         changes = self.applyChanges(data)\n         if changes:\n             self.status = "Changes saved"\n-            IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_("Changes saved"), "info")\n         else:\n             self.status = "No changes"\n-            IStatusMessage(self.request).addStatusMessage(_(u"No changes"),\n-                                                          "info")\n+            IStatusMessage(self.request).addStatusMessage(_("No changes"), "info")\n \n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(self.nextURL())\n-        return \'\'\n+        return ""\n \n-    @button.buttonAndHandler(_(u"label_cancel", default=u"Cancel"),\n-                             name=\'cancel_add\')\n+    @button.buttonAndHandler(_("label_cancel", default="Cancel"), name="cancel_add")\n     def handleCancel(self, action):\n         nextURL = self.nextURL()\n         if nextURL:\n             self.request.response.redirect(nextURL)\n-        return \'\'\n+        return ""\ndiff --git a/plone/app/portlets/browser/interfaces.py b/plone/app/portlets/browser/interfaces.py\nindex fafa5ab4..6ce29538 100644\n--- a/plone/app/portlets/browser/interfaces.py\n+++ b/plone/app/portlets/browser/interfaces.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface, Attribute\n from zope.browser.interfaces import IAdding\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n \n class IPortletAdding(IAdding):\n     """Marker interface for the add view for portlet managers.\n@@ -8,41 +9,40 @@ class IPortletAdding(IAdding):\n     Portlet add views should be registered for this interface.\n     """\n \n+\n class IPortletForm(Interface):\n-    """Generic marker for form views that are used to create or edit portlets.\n-    """\n+    """Generic marker for form views that are used to create or edit portlets."""\n \n     def referer(self):\n         """Return the URL that the user came from before entering the form\n         for the first time.\n         """\n \n+\n class IPortletAddForm(IPortletForm):\n-    """Add form view for portlets\n-    """\n+    """Add form view for portlets"""\n+\n \n class IPortletEditForm(IPortletForm):\n-    """Edit form view for portlets\n-    """\n+    """Edit form view for portlets"""\n+\n \n class IManagePortletsView(Interface):\n-    """The screen used to manage portlets in a particular context.\n-    """\n+    """The screen used to manage portlets in a particular context."""\n \n     category = Attribute("The portlet category being managed")\n     key = Attribute("The key in the category under which portlets are assigned")\n \n     def getAssignmentMappingUrl(manager):\n-        """Given a portlet manager, get the URL to its assignment mapping.\n-        """\n+        """Given a portlet manager, get the URL to its assignment mapping."""\n \n     def getAssignmentsForManager(manager):\n-        """Get the assignments in the current context for the given manager.\n-        """\n+        """Get the assignments in the current context for the given manager."""\n+\n \n class IManageDashboardPortletsView(IManagePortletsView):\n-    """Marker for the manage dashboard portlets view\n-    """\n+    """Marker for the manage dashboard portlets view"""\n+\n \n class IManageColumnPortletsView(IManagePortletsView):\n     """Base class for views that should display the edit fuctionality\n@@ -52,18 +52,18 @@ class IManageColumnPortletsView(IManagePortletsView):\n     view that can apply to different categories of assignment.\n     """\n \n+\n class IManageContextualPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage contextual portlets view\n-    """\n+    """Marker for the manage contextual portlets view"""\n+\n \n class IManageUserPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage user portlets view\n-    """\n+    """Marker for the manage user portlets view"""\n+\n \n class IManageGroupPortletsView(IManageColumnPortletsView):\n-    """Marker for the manage group portlets view\n-    """\n+    """Marker for the manage group portlets view"""\n+\n \n class IManageContentTypePortletsView(IManageColumnPortletsView):\n-    """Marker for the manage content type portlets view\n-    """\n\\ No newline at end of file\n+    """Marker for the manage content type portlets view"""\ndiff --git a/plone/app/portlets/browser/manage-portlets.js b/plone/app/portlets/browser/manage-portlets.js\ndeleted file mode 100644\nindex 972e834a..00000000\n--- a/plone/app/portlets/browser/manage-portlets.js\n+++ /dev/null\n@@ -1,228 +0,0 @@\n-define([\n-  \'jquery\',\n-  \'pat-base\',\n-  \'mockup-utils\',\n-  \'mockup-patterns-modal\',\n-  \'translate\',\n-  \'pat-logger\',\n-  \'jquery.form\'\n-], function ($, Base, utils, Modal, _t, logger) {\n-  \'use strict\';\n-\n-  var log = logger.getLogger(\'pat-manage-portlets\');\n-\n-  var ManagePortlets = Base.extend({\n-    name: \'manage-portlets\',\n-    trigger: \'.pat-manage-portlets\',\n-    parser: \'mockup\',\n-    messageTimeout: 0,\n-    submitTimeout: 0,\n-    switchTimeout: 0,\n-    isModal: false,\n-    dirty: false,\n-    init: function(){\n-      var that = this;\n-      var $modal = that.$el.parents(\'.plone-modal\');\n-      if($modal.size() === 1){\n-        this.isModal = true;\n-        /* want to do something on exit from modal now */\n-        var modal = $modal.data(\'pattern-plone-modal\');\n-        modal.on(\'hide\', function(){\n-          if(that.dirty){\n-            window.location.reload();\n-          }\n-        });\n-        that.loading = modal.loading;\n-      }else{\n-        that.loading = utils.loading;\n-      }\n-      that.bind();\n-    },\n-    bind: function(){\n-      var that = this;\n-      that.setupAddDropdown();\n-      that.setupSwitchPortletManager();\n-      that.setupSavePortletsSettings();\n-      that.setupPortletEdit();\n-      if(that.isModal){\n-        /* if we\'re in a modal, it\'s possible we have a link to\n-           parent case, bind the link so we can reload modal */\n-        $(\'.portlets-link-to-parent\').off(\'click\').click(function(e){\n-          that.loading.show();\n-          var $el = $(this);\n-          e.preventDefault();\n-          $.ajax({\n-            url: $el.attr(\'href\'),\n-            data: {\n-              ajax_load: 1\n-            }\n-          }).done(function(html){\n-            var $body = $(utils.parseBodyTag(html));\n-            var $modal = $el.parents(\'.plone-modal-body\');\n-            $modal.empty();\n-            var $content = $(\'#content\', $body);\n-            var $h1 = $(\'h1\', $content);\n-            $(\'.plone-modal-header\', $modal.parent()).find(\'h2\').html($h1.html());\n-            $h1.remove();\n-            $modal.append($content);\n-            that.rebind($(\'.pat-manage-portlets\', $content), true);\n-            that.loading.hide();\n-          });\n-        });\n-      }\n-    },\n-    rebind: function($el, suppress){\n-      log.info(\'rebind\');\n-      if ($.contains(document, this.$el[0])) {\n-        // $el is not detached, replace it\n-        this.$el.replaceWith($el);\n-      }\n-      this.$el = $el;\n-      this.bind();\n-      if(!suppress){\n-        this.statusMessage();\n-      }\n-      this.dirty = true;\n-    },\n-    statusMessage: function(msg){\n-      if(msg === undefined){\n-        msg = _t("Portlet changes saved");\n-      }\n-      var that = this;\n-\n-      var $message = $(\'#portlet-message\');\n-      if($message.size() === 0){\n-        $message = $(\'<div class="portalMessage info" id="portlet-message" style="opacity: 0"></div>\');\n-        if(that.isModal){\n-          $(\'.plone-modal-body:visible\').prepend($message);\n-        }else{\n-          $(\'#content-core\').prepend($message);\n-        }\n-      }\n-      $message.html(\'<strong>\' + _t("Info") + \'</strong>\' + msg);\n-      clearTimeout(that.messageTimeout);\n-      $message.fadeTo(500, 1);\n-      that.messageTimeout = window.setTimeout(function(){\n-        $message.fadeTo(500, 0.6);\n-      }, 3000);\n-    },\n-    showEditPortlet: function(url){\n-      log.info(\'show edit portlet in modal\');\n-      var that = this;\n-      var $a = $(\'<a/>\');\n-      $(\'body\').append($a);\n-      var pattern = new Modal($a, {\n-        ajaxUrl: url,\n-        actionOptions: {\n-          displayInModal: false,\n-          reloadWindowOnClose: false,\n-          isForm: true,\n-          onSuccess: function(modal, html){\n-            pattern.hide();\n-            var $body = $(utils.parseBodyTag(html));\n-            that.rebind($(\'#\' + that.$el.attr(\'id\'), $body).eq(0));\n-            that.statusMessage(_t(\'Portlet added\'));\n-          }\n-        }\n-      });\n-      pattern.on(\'after-render\', function(){\n-        var $el = $(\'#\' + that.$el.attr(\'id\'), pattern.$raw);\n-        /* this is a check that the add form doesn\'t just automatically\n-           create the portlet without an actual form.\n-           If element is found here, we can short circuit and\n-           continue on. */\n-        if($el.size() === 1){\n-          /* hacky, trying to prevent modal parts from flickering here */\n-          $el = $el.clone();\n-          pattern.on(\'shown\', function(){\n-            pattern.hide();\n-          });\n-          that.rebind($el);\n-          that.statusMessage(_t(\'Portlet added\'));\n-        }\n-      });\n-      pattern.show();\n-    },\n-    setupPortletEdit: function(){\n-      var that = this;\n-      $(\'.managedPortlet .portletHeader > a\', that.$el).click(function(e){\n-        e.preventDefault();\n-        that.showEditPortlet($(this).attr(\'href\'));\n-      });\n-    },\n-    setupAddDropdown: function(){\n-      var that = this;\n-      $(\'.add-portlet\', that.$el).change(function(e){\n-        e.preventDefault();\n-        var $select = $(this);\n-        var $form = $select.parents(\'form\');\n-        var contextUrl = $select.attr(\'data-context-url\');\n-        var url = contextUrl + $select.val() +\n-          \'?_authenticator=\' + $(\'[name="_authenticator"]\').val() +\n-          \'&referer=\' + $(\'[name="referer"]\', $form).val();\n-        that.showEditPortlet(url);\n-      });\n-    },\n-    setupSavePortletsSettings: function(){\n-      var that = this;\n-      $(\'.portlets-settings, form.portlet-action\', that.$el).ajaxForm({\n-        beforeSubmit: function(){\n-          that.loading.show();\n-        },\n-        success: function(html){\n-          that.loading.hide();\n-          log.info(\'form submit\');\n-          var $body = $(utils.parseBodyTag(html));\n-          that.rebind($(\'#\' + that.$el.attr(\'id\'), $body).eq(0));\n-        }\n-      });\n-      // Block/unblock inherited portlets (parent, group and content type portlets)\n-      $(\'.portlets-settings select\', that.$el).change(function(){\n-        log.info(\'select change\');\n-        clearTimeout(that.submitTimeout);\n-        that.submitTimeout = window.setTimeout(function(){\n-          $(\'.portlets-settings\', that.$el).submit();\n-        }, 100);\n-      });\n-    },\n-    setupSwitchPortletManager: function(){\n-      var that = this;\n-      $(\'#main-container\').on(\'change\', \'.switch-portlet-manager\', function(e){\n-        e.stopImmediatePropagation();\n-        log.info(\'switch portlet manager\');\n-        var url_ = $(this).val();\n-        clearTimeout(that.switchTimeout);\n-        that.switchTimeout = window.setTimeout(function() {\n-          that._reloadPortletManager(url_);\n-        }, 100);\n-      });\n-      // Handle back/forward browser buttons\n-      $(window).on(\'popstate\', function(e) {\n-        e.stopImmediatePropagation();\n-        if (e && e.state === undefined) {\n-          var url_ = window.location.href;\n-          log.info("redirecting to: " + url_);\n-          that._reloadPortletManager(url_, true);\n-        }\n-      });\n-    },\n-    _reloadPortletManager: function(url_, is_popstate){\n-      var that = this;\n-      that.loading.show();\n-      $.get(url_, {ajax_load: 1}).done(function(html) {\n-        var $html = $(utils.parseBodyTag(html));\n-        var $content = (\'#content\', $html);\n-        $(\'#content\').html($content);\n-        that.rebind($(\'.pat-manage-portlets\', $content), true);\n-        if (!is_popstate) {\n-          window.history.pushState(null, null, url_);\n-        } else {\n-          window.history.replaceState(null, null, url_);\n-        }\n-        that.loading.hide();\n-      });\n-    }\n-  });\n-\n-  return ManagePortlets;\n-});\ndiff --git a/plone/app/portlets/browser/manage.py b/plone/app/portlets/browser/manage.py\nindex 823eaa5d..0face36a 100644\n--- a/plone/app/portlets/browser/manage.py\n+++ b/plone/app/portlets/browser/manage.py\n@@ -1,49 +1,40 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer_only\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter, getUtility\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n+from ..interfaces import IPortletPermissionChecker\n+from ..interfaces import ITopbarManagePortlets\n+from ..storage import GroupDashboardPortletAssignmentMapping\n+from ..storage import PortletAssignmentMapping\n+from ..storage import UserPortletAssignmentMapping\n+from .interfaces import IManageContentTypePortletsView\n+from .interfaces import IManageContextualPortletsView\n+from .interfaces import IManageDashboardPortletsView\n+from .interfaces import IManageGroupPortletsView\n+from .interfaces import IManagePortletsView\n from AccessControl import Unauthorized\n-from Acquisition import aq_inner\n from Acquisition import aq_base\n-from Products.Five import BrowserView\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.interfaces import ITopbarManagePortlets\n-\n-from plone.app.portlets.browser.interfaces import IManagePortletsView\n-from plone.app.portlets.browser.interfaces import IManageContextualPortletsView\n-from plone.app.portlets.browser.interfaces import IManageDashboardPortletsView\n-from plone.app.portlets.browser.interfaces import IManageGroupPortletsView\n-from plone.app.portlets.browser.interfaces import IManageContentTypePortletsView\n-\n+from Acquisition import aq_inner\n from plone.app.portlets import utils\n from plone.memoize.view import memoize\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from plone.protect.authenticator import createToken\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n+from zope.publisher.interfaces.browser import IBrowserView\n \n \n @implementer(IManageContextualPortletsView)\n class ManageContextualPortlets(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(ManageContextualPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -57,36 +48,44 @@ def category(self):\n \n     @property\n     def key(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++contextportlets++%s\' % (baseUrl, manager.__name__)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return f"{baseUrl}/++contextportlets++{manager.__name__}"\n \n     def getAssignmentsForManager(self, manager):\n-        assignments = getMultiAdapter((self.context, manager), IPortletAssignmentMapping)\n+        assignments = getMultiAdapter(\n+            (self.context, manager), IPortletAssignmentMapping\n+        )\n         return assignments.values()\n \n     # view @@manage-portlets\n \n     def has_legacy_portlets(self):\n-        left_slots = getattr(aq_base(self.context), \'left_slots\', [])\n-        right_slots = getattr(aq_base(self.context), \'right_slots\', [])\n+        left_slots = getattr(aq_base(self.context), "left_slots", [])\n+        right_slots = getattr(aq_base(self.context), "right_slots", [])\n \n-        return (left_slots or right_slots)\n+        return left_slots or right_slots\n \n     # view @@set-portlet-blacklist-status\n-    def set_blacklist_status(self, manager, group_status, content_type_status,\n-                             context_status):\n-        authenticator = getMultiAdapter((self.context, self.request),\n-                                        name=u"authenticator")\n+    def set_blacklist_status(\n+        self, manager, group_status, content_type_status, context_status\n+    ):\n+        authenticator = getMultiAdapter(\n+            (self.context, self.request), name="authenticator"\n+        )\n         if not authenticator.verify():\n             raise Unauthorized\n         portletManager = getUtility(IPortletManager, name=manager)\n-        assignable = getMultiAdapter((self.context, portletManager),\n-                                     ILocalPortletAssignmentManager)\n-        assignments = getMultiAdapter((self.context, portletManager),\n-                                      IPortletAssignmentMapping)\n+        assignable = getMultiAdapter(\n+            (self.context, portletManager), ILocalPortletAssignmentManager\n+        )\n+        assignments = getMultiAdapter(\n+            (self.context, portletManager), IPortletAssignmentMapping\n+        )\n \n         IPortletPermissionChecker(assignments.__of__(aq_inner(self.context)))()\n \n@@ -99,19 +98,24 @@ def int2status(status):\n                 return False\n \n         assignable.setBlacklistStatus(GROUP_CATEGORY, int2status(group_status))\n-        assignable.setBlacklistStatus(CONTENT_TYPE_CATEGORY,\n-                                      int2status(content_type_status))\n+        assignable.setBlacklistStatus(\n+            CONTENT_TYPE_CATEGORY, int2status(content_type_status)\n+        )\n         assignable.setBlacklistStatus(CONTEXT_CATEGORY, int2status(context_status))\n \n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        self.request.response.redirect(baseUrl + \'/@@manage-portlets\')\n-        return \'\'\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        self.request.response.redirect(baseUrl + "/@@manage-portlets")\n+        return ""\n \n     # view @@convert-legacy-portlets\n \n     def convert_legacy_portlets(self):\n         utils.convert_legacy_portlets(self.context)\n-        self.request.response.redirect(self.context.absolute_url() + \'/@@manage-portlets\')\n+        self.request.response.redirect(\n+            self.context.absolute_url() + "/@@manage-portlets"\n+        )\n \n \n @implementer(IManageDashboardPortletsView)\n@@ -136,9 +140,11 @@ def key(self):\n         return self._getUserId()\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n         userId = self._getUserId()\n-        return \'%s/++dashboard++%s+%s\' % (baseUrl, manager.__name__, userId)\n+        return f"{baseUrl}/++dashboard++{manager.__name__}+{userId}"\n \n     def getAssignmentsForManager(self, manager):\n         userId = self._getUserId()\n@@ -147,14 +153,16 @@ def getAssignmentsForManager(self, manager):\n         mapping = category.get(userId, None)\n         if mapping is None:\n             mapping = category[userId] = UserPortletAssignmentMapping(\n-                manager=manager.__name__, category=USER_CATEGORY, name=userId)\n+                manager=manager.__name__, category=USER_CATEGORY, name=userId\n+            )\n         return mapping.values()\n \n     def _getUserId(self):\n-        membership = getToolByName(aq_inner(self.context), \'portal_membership\', None)\n+        membership = getToolByName(aq_inner(self.context), "portal_membership", None)\n         if membership.isAnonymousUser():\n-            raise Unauthorized("Cannot get portlet assignments for anonymous "\n-                               "through this view")\n+            raise Unauthorized(\n+                "Cannot get portlet assignments for anonymous " "through this view"\n+            )\n \n         member = membership.getAuthenticatedMember()\n         memberId = member.getId()\n@@ -167,10 +175,9 @@ def _getUserId(self):\n \n @implementer(IManageDashboardPortletsView)\n class ManageGroupDashboardPortlets(BrowserView):\n-\n     @property\n     def group(self):\n-        return self.request.get(\'key\', None)\n+        return self.request.get("key", None)\n \n     # IManagePortletsView implementation\n \n@@ -187,18 +194,19 @@ def key(self):\n         return self.group\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        return \'%s/++groupdashboard++%s+%s\' % (baseUrl, manager.__name__, self.group)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        return f"{baseUrl}/++groupdashboard++{manager.__name__}+{self.group}"\n \n     def getAssignmentsForManager(self, manager):\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(self.group, None)\n         if mapping is None:\n-            mapping = category[self.group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=manager.__name__,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=self.group)\n+            mapping = category[self.group] = GroupDashboardPortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=self.group\n+            )\n         return mapping.values()\n \n \n@@ -217,40 +225,41 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def __init__(self, context, request):\n-        super(ManageGroupPortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        key = self.request[\'key\']\n-        return \'%s/++groupportlets++%s+%s\' % (baseUrl, manager.__name__, key)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        key = self.request["key"]\n+        return f"{baseUrl}/++groupportlets++{manager.__name__}+{key}"\n \n     def getAssignmentsForManager(self, manager):\n-        key = self.request[\'key\']\n+        key = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[GROUP_CATEGORY]\n         mapping = category.get(key, None)\n         if mapping is None:\n-            mapping = category[key] = PortletAssignmentMapping(manager=manager.__name__,\n-                                                               category=GROUP_CATEGORY,\n-                                                               name=key)\n+            mapping = category[key] = PortletAssignmentMapping(\n+                manager=manager.__name__, category=GROUP_CATEGORY, name=key\n+            )\n         return mapping.values()\n \n     # View attributes\n \n     def group(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n \n @implementer(IManageContentTypePortletsView)\n class ManageContentTypePortlets(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(ManageContentTypePortlets, self).__init__(context, request)\n-        self.request.set(\'disable_border\', True)\n+        super().__init__(context, request)\n+        self.request.set("disable_border", True)\n \n     # IManagePortletsView implementation\n \n@@ -264,21 +273,24 @@ def category(self):\n \n     @property\n     def key(self):\n-        return self.request[\'key\']\n+        return self.request["key"]\n \n     def getAssignmentMappingUrl(self, manager):\n-        baseUrl = str(getMultiAdapter((self.context, self.request), name=\'absolute_url\'))\n-        pt = self.request[\'key\']\n-        return \'%s/++contenttypeportlets++%s+%s\' % (baseUrl, manager.__name__, pt)\n+        baseUrl = str(\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n+        )\n+        pt = self.request["key"]\n+        return f"{baseUrl}/++contenttypeportlets++{manager.__name__}+{pt}"\n \n     def getAssignmentsForManager(self, manager):\n-        pt = self.request[\'key\']\n+        pt = self.request["key"]\n         column = getUtility(IPortletManager, name=manager.__name__)\n         category = column[CONTENT_TYPE_CATEGORY]\n         mapping = category.get(pt, None)\n         if mapping is None:\n             mapping = category[pt] = PortletAssignmentMapping(\n-                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=manager.__name__, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n         return mapping.values()\n \n     # View attributes\n@@ -288,13 +300,14 @@ def portal_type(self):\n \n     def portal_type_icon(self):\n         plone_layout = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_layout")\n+            (self.context, self.request), name="plone_layout"\n+        )\n         return plone_layout.getIcon(self.fti())\n \n     @memoize\n     def fti(self):\n-        portal_types = getToolByName(aq_inner(self.context), \'portal_types\')\n-        portal_type = self.request[\'key\']\n+        portal_types = getToolByName(aq_inner(self.context), "portal_types")\n+        portal_type = self.request["key"]\n         for fti in portal_types.listTypeInfo():\n             if fti.getId() == portal_type:\n                 return fti\n@@ -311,7 +324,7 @@ class ManagePortletsViewlet(BrowserView):\n     """\n \n     def __init__(self, context, request, view, manager):\n-        super(ManagePortletsViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\n@@ -333,9 +346,9 @@ def key(self):\n     def __getattribute__(self, name):\n         # Products.Five.viewlet.viewlet.SimpleViewletClass redefines __name__\n         # so a simple property or attribute does not work\n-        if name == \'__name__\':\n+        if name == "__name__":\n             return self.ultimate_parent().__name__\n-        return super(ManagePortletsViewlet, self).__getattribute__(name)\n+        return super().__getattribute__(name)\n \n     def getAssignmentMappingUrl(self, manager):\n         return self.ultimate_parent().getAssignmentMappingUrl(manager)\n@@ -347,8 +360,9 @@ def getAssignmentsForManager(self, manager):\n     def ultimate_parent(self):\n         # Walk the __parent__ chain to find the principal view\n         parent = self.__parent__\n-        while (hasattr(parent, \'__parent__\') and\n-                IBrowserView.providedBy(parent.__parent__)):\n+        while hasattr(parent, "__parent__") and IBrowserView.providedBy(\n+            parent.__parent__\n+        ):\n             parent = parent.__parent__\n         return parent\n \n@@ -380,15 +394,14 @@ class ManageContentTypePortletsViewlet(ManagePortletsViewlet):\n \n @implementer_only(ITopbarManagePortlets)\n class TopbarManagePortlets(ManageContextualPortlets):\n-\n     def __init__(self, context, request):\n-        super(TopbarManagePortlets, self).__init__(context, request)\n+        super().__init__(context, request)\n         # Disable the left and right columns\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         # Initialize the manager name in case there is nothing\n         # in the traversal path\n-        self.manager_name = \'plone.leftcolumn\'\n+        self.manager_name = "plone.leftcolumn"\n \n     def publishTraverse(self, request, name):\n         """Get the portlet manager via traversal so that we can re-use\n@@ -402,8 +415,9 @@ def render_edit_manager_portlets(self):\n         # Here we manually render the portlets instead of doing\n         # something like provider:${view/manager_name} in the template\n         manager_view = ManageContextualPortlets(self.context, self.request)\n-        manager_view.__name__ = \'manage-portlets\'\n+        manager_view.__name__ = "manage-portlets"\n         portlet_manager = getMultiAdapter(\n-            (self.context, self.request, manager_view), name=self.manager_name)\n+            (self.context, self.request, manager_view), name=self.manager_name\n+        )\n         portlet_manager.update()\n-        return portlet_manager.render()\n\\ No newline at end of file\n+        return portlet_manager.render()\ndiff --git a/plone/app/portlets/browser/templates/edit-manager-contextual.pt b/plone/app/portlets/browser/templates/edit-manager-contextual.pt\nindex 02f0345d..4e3ac302 100644\n--- a/plone/app/portlets/browser/templates/edit-manager-contextual.pt\n+++ b/plone/app/portlets/browser/templates/edit-manager-contextual.pt\n@@ -3,186 +3,191 @@\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       tal:omit-tag="">\n-<div class="portlets-manager pat-manage-portlets"\n+<div class="portlets-manager pat-manage-portlets row"\n      tal:attributes="id string:portletmanager-${view/normalized_manager_name};"\n      i18n:domain="plone">\n \n-  <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form" />\n+  <div class="container">\n+    <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form" />\n+  </div>\n \n   <div metal:use-macro="context/@@manage-portlets-macros/macros/current-portlets-list" />\n \n-  <div class="portletAssignments">\n+  <div class="container portletAssignments">\n \n-    <h4 i18n:translate="heading_un_block_portlets">\n+    <h5 i18n:translate="heading_un_block_portlets">\n         Block/unblock portlets\n-    </h4>\n+    </h5>\n \n     <form method="post" tal:attributes="action view/blacklist_status_action" class="portlets-settings">\n-      <span tal:replace="structure context/@@authenticator/authenticator" />\n-      <input type="hidden" name="manager" tal:attributes="value view/manager_name" />\n \n-      <div tal:define="status view/context_blacklist_status" class="portlet-group">\n+        <span tal:replace="structure context/@@authenticator/authenticator" />\n+        <input type="hidden" name="manager" tal:attributes="value view/manager_name" />\n+\n+        <div tal:define="status view/context_blacklist_status" class="mb-3 portlet-group">\n \n-        <span tal:omit-tag=""\n-              i18n:translate="label_portlets_parent_folders">\n-            Parent portlets:\n-        </span>\n+          <div class="mb-3">\n \n-        <select name="context_status:int" size="1">\n+            <label i18n:translate="label_portlets_parent_folders">Parent portlets:</label>\n \n-            <option value="1"\n-                    tal:attributes="selected python:status == True and \'selected\' or None"\n-                    i18n:translate="portlets_value_block">\n-                Block\n-            </option>\n+            <select name="context_status:int" size="1" class="form-select">\n \n-            <option value="-1"\n-                    tal:attributes="selected python:(status == False or status == None) and \'selected\' or None"\n-                    i18n:translate="portlets_value_show">\n-                Do not block\n-            </option>\n+                <option value="1"\n+                        tal:attributes="selected python:status == True and \'selected\' or None"\n+                        i18n:translate="portlets_value_block">\n+                    Block\n+                </option>\n \n-        </select>\n+                <option value="-1"\n+                        tal:attributes="selected python:(status == False or status == None) and \'selected\' or None"\n+                        i18n:translate="portlets_value_show">\n+                    Do not block\n+                </option>\n \n-        <tal:block define="portlets view/inherited_portlets;"\n-                   condition="portlets">\n+            </select>\n+\n+          </div>\n \n-          <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'" tal:repeat="portlet portlets">\n-            <div class="portletHeader">\n+          <tal:block define="portlets view/inherited_portlets;"\n+                    condition="portlets">\n \n-              <a tal:omit-tag="not:portlet/editview"\n-                tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                tal:content="portlet/title" />\n+            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet list-group\' or \'managedPortlet inheritedPortlet list-group\'" tal:repeat="portlet portlets">\n \n-              <span class="portletBlockedMessage hiddenStructure"\n-                tal:condition="status"\n-                title="Blocked"\n-                i18n:translate="label_portlet_blocked"\n-                i18n:attributes="title title_portlet_blocked;">\n-                (Blocked)\n-              </span>\n+              <div class="list-group-item">\n+\n+                <a tal:omit-tag="not:portlet/editview"\n+                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n+                  tal:content="portlet/title" />\n+\n+                <span class="portletBlockedMessage hiddenStructure"\n+                  tal:condition="status"\n+                  title="Blocked"\n+                  i18n:translate="label_portlet_blocked"\n+                  i18n:attributes="title title_portlet_blocked;">\n+                  (Blocked)\n+                </span>\n+              </div>\n \n             </div>\n-          </div>\n-        </tal:block>\n+          </tal:block>\n \n-      </div>\n+        </div>\n \n-      <div tal:define="status view/group_blacklist_status" class="portlet-group">\n+        <div tal:define="status view/group_blacklist_status" class="mb-3 portlet-group">\n \n-        <span tal:omit-tag=""\n-              i18n:translate="label_portlets_group_portlets">Group portlets:</span>\n+          <label i18n:translate="label_portlets_group_portlets">Group portlets:</label>\n \n-        <select name="group_status:int" size="1">\n+          <select name="group_status:int" size="1" class="form-select">\n \n-            <option value="0"\n-                    tal:attributes="selected python:status == None and \'selected\' or None"\n-                    i18n:translate="portlets_value_use_parent">\n-                Use parent settings\n-            </option>\n+              <option value="0"\n+                      tal:attributes="selected python:status == None and \'selected\' or None"\n+                      i18n:translate="portlets_value_use_parent">\n+                  Use parent settings\n+              </option>\n \n-            <option value="1"\n-                    tal:attributes="selected python:status == True and \'selected\' or None"\n-                    i18n:translate="portlets_value_block">\n-                Block\n-            </option>\n+              <option value="1"\n+                      tal:attributes="selected python:status == True and \'selected\' or None"\n+                      i18n:translate="portlets_value_block">\n+                  Block\n+              </option>\n \n-            <option value="-1"\n-                    tal:attributes="selected python:status == False and \'selected\' or None"\n-                    i18n:translate="portlets_value_show">\n-                Do not block\n-            </option>\n+              <option value="-1"\n+                      tal:attributes="selected python:status == False and \'selected\' or None"\n+                      i18n:translate="portlets_value_show">\n+                  Do not block\n+              </option>\n \n-        </select>\n+          </select>\n \n-        <tal:block define="portlets view/group_portlets;\n-                           status python:view.group_blacklist_status(check_parent=True)">\n+          <tal:block define="portlets view/group_portlets;\n+                            status python:view.group_blacklist_status(check_parent=True)">\n \n-          <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'" tal:repeat="portlet portlets">\n-            <div class="portletHeader">\n+            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'" tal:repeat="portlet portlets">\n \n-              <a tal:omit-tag="not:portlet/editview"\n-                tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                tal:content="portlet/title" />\n+              <div class="portletHeader">\n \n-              <span class="portletBlockedMessage hiddenStructure"\n-                tal:condition="status"\n-                title="Blocked"\n-                i18n:translate="label_portlet_blocked"\n-                i18n:attributes="title title_portlet_blocked;">\n-                (Blocked)\n-              </span>\n+                <a tal:omit-tag="not:portlet/editview"\n+                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n+                  tal:content="portlet/title" />\n+\n+                <span class="portletBlockedMessage hiddenStructure"\n+                  tal:condition="status"\n+                  title="Blocked"\n+                  i18n:translate="label_portlet_blocked"\n+                  i18n:attributes="title title_portlet_blocked;">\n+                  (Blocked)\n+                </span>\n+\n+              </div>\n \n             </div>\n-          </div>\n \n-        </tal:block>\n+          </tal:block>\n \n-      </div>\n+        </div>\n \n \n-      <div tal:define="status view/content_type_blacklist_status" class="portlet-group">\n+        <div tal:define="status view/content_type_blacklist_status" class="mb-3 portlet-group">\n \n-        <span tal:omit-tag=""\n-              i18n:translate="label_portlets_content_type_portlets">\n-            Content type portlets:\n-        </span>\n+          <label i18n:translate="label_portlets_content_type_portlets">Content type portlets:</label>\n \n-        <select name="content_type_status:int" size="1">\n+          <select name="content_type_status:int" size="1"  class="form-select">\n \n-            <option value="0"\n-                    tal:attributes="selected python:status == None and \'selected\' or None"\n-                    i18n:translate="portlets_value_use_parent">\n-                Use parent settings\n-            </option>\n+              <option value="0"\n+                      tal:attributes="selected python:status == None and \'selected\' or None"\n+                      i18n:translate="portlets_value_use_parent">\n+                  Use parent settings\n+              </option>\n \n-            <option value="1"\n-                    tal:attributes="selected python:status == True and \'selected\' or None"\n-                    i18n:translate="portlets_value_block">\n-                Block\n-            </option>\n+              <option value="1"\n+                      tal:attributes="selected python:status == True and \'selected\' or None"\n+                      i18n:translate="portlets_value_block">\n+                  Block\n+              </option>\n \n-            <option value="-1"\n-                    tal:attributes="selected python:status == False and \'selected\' or None"\n-                    i18n:translate="portlets_value_show">\n-                Do not block\n-            </option>\n-        </select>\n+              <option value="-1"\n+                      tal:attributes="selected python:status == False and \'selected\' or None"\n+                      i18n:translate="portlets_value_show">\n+                  Do not block\n+              </option>\n+          </select>\n \n-        <tal:block define="portlets view/content_type_portlets;\n-                   status python:view.content_type_blacklist_status(check_parent=True)">\n+          <tal:block define="portlets view/content_type_portlets;\n+                    status python:view.content_type_blacklist_status(check_parent=True)">\n \n-          <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'"\n-            tal:repeat="portlet portlets">\n-            <div class="portletHeader">\n-              <a tal:omit-tag="not:portlet/editview"\n-                tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                tal:content="portlet/title" />\n+            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'"\n+              tal:repeat="portlet portlets">\n+              <div class="portletHeader">\n+                <a tal:omit-tag="not:portlet/editview"\n+                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n+                  tal:content="portlet/title" />\n \n-              <span class="portletBlockedMessage hiddenStructure"\n-                tal:condition="status"\n-                title="Blocked"\n-                i18n:translate="label_portlet_blocked"\n-                i18n:attributes="title title_portlet_blocked;">\n-                (Blocked)\n-              </span>\n+                <span class="portletBlockedMessage hiddenStructure"\n+                  tal:condition="status"\n+                  title="Blocked"\n+                  i18n:translate="label_portlet_blocked"\n+                  i18n:attributes="title title_portlet_blocked;">\n+                  (Blocked)\n+                </span>\n \n+              </div>\n             </div>\n-          </div>\n-        </tal:block>\n+          </tal:block>\n+\n+        </div>\n \n-      </div>\n+        <noscript>\n+        <div class="formControls">\n+            <input class="btn btn-primary"\n+                  type="submit"\n+                  value="Save settings"\n+                  i18n:attributes="value label_save_settings"/>\n+        </div>\n+        </noscript>\n \n-      <noscript>\n-      <div class="formControls">\n-          <input class="context"\n-                 type="submit"\n-                 value="Save settings"\n-                 i18n:attributes="value label_save_settings"/>\n-      </div>\n-      </noscript>\n+      </form>\n \n-    </form>\n   </div>\n+\n </div>\n-</html>\n+</html>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/browser/templates/edit-manager-macros.pt b/plone/app/portlets/browser/templates/edit-manager-macros.pt\nindex 237f33b4..a4d0ac1a 100644\n--- a/plone/app/portlets/browser/templates/edit-manager-macros.pt\n+++ b/plone/app/portlets/browser/templates/edit-manager-macros.pt\n@@ -1,9 +1,10 @@\n-<div metal:define-macro="portlet-add-form" class="section" i18n:domain="plone">\n+<div metal:define-macro="portlet-add-form" class="section mb-4" i18n:domain="plone">\n \n     <form method="post" action="#"\n           tal:define="portlets view/addable_portlets"\n           tal:condition="portlets"\n           tal:attributes="action view/context_url">\n+\n         <input type="hidden" name="referer" tal:attributes="value view/referer" />\n \n         <label class="hiddenStructure"\n@@ -11,7 +12,7 @@\n             Add portlet\n         </label>\n \n-        <select name=":action" class="add-portlet"\n+        <select name=":action" class="add-portlet form-select"\n                 tal:attributes="data-context-url python: view.context_url()">\n             <option tal:attributes="value python:request[\'ACTUAL_URL\'].replace(view.context_url(), \'\')"\n                     i18n:translate="label_add_portlet_ellipsis">\n@@ -26,7 +27,7 @@\n         </select>\n \n         <noscript>\n-            <input class="standalone"\n+            <input class="btn btn-secondary"\n                    type="submit"\n                    value="Add portlet"\n                    i18n:attributes="value label_add_portlet;"/>\n@@ -35,83 +36,94 @@\n     </form>\n </div>\n \n-<div metal:define-macro="current-portlets-list" class="portletAssignments"\n+<div metal:define-macro="current-portlets-list" class="portletAssignment"\n     i18n:domain="plone"\n     tal:define="portlets view/portlets">\n \n-    <h4 i18n:translate="heading_portlets_assigned_here" tal:condition="portlets">\n+    <h5 i18n:translate="heading_portlets_assigned_here" tal:condition="portlets">\n         Portlets assigned here\n-    </h4>\n-\n-    <div>\n-        <tal:block repeat="portlet portlets">\n-            <div tal:define="hiddenPortletClass python:not portlet[\'visible\'] and \'blockedPortlet\' or \'\'"\n-                tal:attributes="class string:managedPortlet portlet ${hiddenPortletClass};\n-                                data-portlethash portlet/hash;\n-                                data-viewname view/view_name;">\n-\n-                <div class="portletHeader" tal:define="authenticator context/@@authenticator/authenticator">\n-                    <a tal:omit-tag="not:portlet/editview"\n-                       tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                       tal:content="portlet/title" />\n-                    <span class="managedPortletActions">\n-                      <form class="portlet-action up" method="POST" tal:attributes="action portlet/up_url"\n-                          tal:condition="not:repeat/portlet/start">\n-                        <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                        <input type="hidden" name="key" tal:attributes="value view/key" />\n-                        <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                        <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                        <span tal:replace="structure authenticator"/>\n-                        <button title="Move up" i18n:attributes="title" type="submit"\n-                          tal:attributes="name string:${portlet/name}-up">&#9650;</button>\n-                      </form>\n-\n-                      <form class="portlet-action down" method="POST" tal:attributes="action portlet/down_url"\n-                          tal:condition="not:repeat/portlet/end">\n-                        <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                        <input type="hidden" name="key" tal:attributes="value view/key" />\n-                        <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                        <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                        <span tal:replace="structure authenticator"/>\n-                        <button title="Move down" i18n:attributes="title" type="submit"\n-                          tal:attributes="name string:${portlet/name}-down">&#9660;</button>\n-                      </form>\n-\n-                      <form class="portlet-action" method="POST" tal:attributes="action portlet/show_url"\n-                          tal:condition="not: portlet/visible">\n-                        <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                        <input type="hidden" name="key" tal:attributes="value view/key" />\n-                        <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                        <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                        <span tal:replace="structure authenticator"/>\n-                        <button type="submit" i18n:translate="label_show_item"\n-                          tal:attributes="name string:${portlet/name}-show">Show</button>\n-                      </form>\n-\n-                      <form class="portlet-action" method="POST" tal:attributes="action portlet/hide_url"\n-                          tal:condition="portlet/visible">\n-                        <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                        <input type="hidden" name="key" tal:attributes="value view/key" />\n-                        <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                        <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                        <span tal:replace="structure authenticator"/>\n-                        <button type="submit" i18n:translate="label_hide_item"\n-                          tal:attributes="name string:${portlet/name}-hide">Hide</button>\n-                      </form>\n-\n-                      <form class="portlet-action delete" method="POST" tal:attributes="action portlet/delete_url">\n-                        <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                        <input type="hidden" name="key" tal:attributes="value view/key" />\n-                        <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                        <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                        <span tal:replace="structure authenticator"/>\n-                        <button i18n:attributes="title" title="Remove" type="submit"\n-                          tal:attributes="name string:${portlet/name}-remove">&times;</button>\n-                      </form>\n-                    </span>\n-                </div>\n-            </div>\n-        </tal:block>\n-    </div>\n+    </h5>\n+\n+    <tal:block repeat="portlet portlets">\n+    <div\n+        tal:define="\n+            hiddenPortletClass python:not portlet[\'visible\'] and \'blockedPortlet\' or \'\';\n+            authenticator context/@@authenticator/authenticator"\n+        tal:attributes="\n+            class string:managedPortlet card mb-3 ${hiddenPortletClass};\n+            data-portlethash portlet/hash;\n+            data-viewname view/view_name;">\n+\n+        <div class="card-header d-flex align-items-center justify-content-between">\n+\n+            <a tal:omit-tag="not:portlet/editview"\n+                tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n+                tal:content="portlet/title"></a>\n+        </div>\n+\n+        <div class="card-body managedPortletActions">\n+\n+            <form class="portlet-action up" method="POST"\n+                tal:attributes="action portlet/up_url"\n+                tal:condition="not:repeat/portlet/start">\n+                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n+                <input type="hidden" name="key" tal:attributes="value view/key" />\n+                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n+                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n+                <span tal:replace="structure authenticator"/>\n+                <button class="btn btn-outline-secondary btn-sm" title="Move up" i18n:attributes="title" type="submit"\n+                    tal:attributes="name string:${portlet/name}-up">&#9650;</button>\n+            </form>\n \n+            <form class="portlet-action down" method="POST"\n+                tal:attributes="action portlet/down_url"\n+                tal:condition="not:repeat/portlet/end">\n+                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n+                <input type="hidden" name="key" tal:attributes="value view/key" />\n+                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n+                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n+                <span tal:replace="structure authenticator"/>\n+                <button class="btn btn-outline-secondary btn-sm" title="Move down" i18n:attributes="title" type="submit"\n+                    tal:attributes="name string:${portlet/name}-down">&#9660;</button>\n+            </form>\n+\n+            <form class="portlet-action" method="POST"\n+                tal:attributes="action portlet/show_url"\n+                tal:condition="not: portlet/visible">\n+                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n+                <input type="hidden" name="key" tal:attributes="value view/key" />\n+                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n+                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n+                <span tal:replace="structure authenticator"/>\n+                <button class="btn btn-outline-secondary btn-sm" type="submit" i18n:translate="label_show_item"\n+                    tal:attributes="name string:${portlet/name}-show">Show</button>\n+            </form>\n+\n+            <form class="portlet-action" method="POST"\n+                tal:attributes="action portlet/hide_url"\n+                tal:condition="portlet/visible">\n+                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n+                <input type="hidden" name="key" tal:attributes="value view/key" />\n+                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n+                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n+                <span tal:replace="structure authenticator"/>\n+                <button class="btn btn-outline-secondary btn-sm" type="submit" i18n:translate="label_hide_item"\n+                    tal:attributes="name string:${portlet/name}-hide">Hide</button>\n+            </form>\n+\n+            <form class="portlet-action delete" method="POST"\n+                tal:attributes="action portlet/delete_url">\n+                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n+                <input type="hidden" name="key" tal:attributes="value view/key" />\n+                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n+                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n+                <span tal:replace="structure authenticator"/>\n+                <button class="btn btn-outline-secondary btn-sm" i18n:attributes="title" title="Remove" type="submit"\n+                    tal:attributes="name string:${portlet/name}-remove">&times;</button>\n+            </form>\n+\n+        </div>\n+\n+    </div>\n+    </tal:block>\n </div>\ndiff --git a/plone/app/portlets/browser/templates/footer.pt b/plone/app/portlets/browser/templates/footer.pt\nnew file mode 100644\nindex 00000000..df16ba9d\n--- /dev/null\n+++ b/plone/app/portlets/browser/templates/footer.pt\n@@ -0,0 +1,5 @@\n+<div class="row">\n+\t<div class="col-xs-12">\n+\t\t<div tal:on-error="nothing" tal:replace="structure view/render_footer_portlets" />\n+\t</div>\n+</div>\ndiff --git a/plone/app/portlets/browser/templates/manage-contextual.pt b/plone/app/portlets/browser/templates/manage-contextual.pt\nindex a186f8bf..1cf4829f 100644\n--- a/plone/app/portlets/browser/templates/manage-contextual.pt\n+++ b/plone/app/portlets/browser/templates/manage-contextual.pt\n@@ -8,46 +8,50 @@\n <body>\n <metal:main fill-slot="main" tal:define="plone_view context/@@plone">\n \n-  <h1 class="documentFirstHeading"\n-      i18n:translate="title_manage_contextual_portlets">\n-      Manage portlets for\n-      <q i18n:name="context_title" tal:content="context/Title">title</q>\n-  </h1>\n-\n-  <div id="content-core">\n-      <a href=""\n-           class="link-parent"\n-           tal:attributes="href string:${context/absolute_url}"\n-           i18n:translate="return_to_view">\n-        Return\n-      </a>\n+  <header>\n+    <h1 class="documentFirstHeading"\n+        i18n:translate="title_manage_contextual_portlets">\n+        Manage portlets for\n+        <q i18n:name="context_title" tal:content="context/Title">title</q>\n+    </h1>\n+    \n+    \n+    <a href=""\n+        class="link-parent d-inline-block mb-3"\n+        tal:attributes="href string:${context/absolute_url}"\n+        i18n:translate="return_to_view">\n+      Return\n+    </a>\n \n     <tal:block tal:define="is_portal_root context/@@plone_context_state/is_portal_root;"\n-               tal:condition="not:is_portal_root">\n-    -\n-    <a class="link-parent" tal:condition="plone_view/getParentObject|nothing"\n-       tal:attributes="href python:plone_view.getParentObject().absolute_url()+\'/@@manage-portlets\'"\n-       i18n:translate="">\n-       Go to parent folder\n+            tal:condition="not:is_portal_root">\n+    <a class="link-parent mb-3 ms-3" tal:condition="plone_view/getParentObject|nothing"\n+    tal:attributes="href python:plone_view.getParentObject().absolute_url()+\'/@@manage-portlets\'"\n+    i18n:translate="">\n+    Go to parent folder\n     </a>\n     </tal:block>\n+    \n \n-      <div class="portalMessage info"\n-           role="status"\n-           tal:condition="plone_view/isDefaultPageInFolder|nothing">\n-        <strong i18n:translate="">\n-            Info\n-        </strong>\n-        <span tal:omit-tag=""\n-            i18n:translate="label_manage_portlets_default_view_container">\n-            You are managing the portlets of the default view of a container. If\n-            you wanted to manage the portlets of the container itself,\n-            <a href=""\n-                i18n:name="go_here"\n-                i18n:translate="label_manage_portlets_default_view_container_go_here"\n-                tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@manage-portlets">go here</a>.\n-        </span>\n-      </div>\n+    <div class="alert alert-info"\n+        role="status"\n+        tal:condition="plone_view/isDefaultPageInFolder|nothing">\n+      <strong i18n:translate="">\n+          Info\n+      </strong>\n+      <span tal:omit-tag=""\n+          i18n:translate="label_manage_portlets_default_view_container">\n+          You are managing the portlets of the default view of a container. If\n+          you wanted to manage the portlets of the container itself,\n+          <a href=""\n+              i18n:name="go_here"\n+              i18n:translate="label_manage_portlets_default_view_container_go_here"\n+              tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@manage-portlets">go here</a>.\n+      </span>\n+    </div>\n+  </header>\n+\n+  <div id="content-core">\n \n       <p i18n:translate="description_manage_contextual_portlets">\n         The portlet columns will first display portlets\n@@ -75,7 +79,7 @@\n               tal:attributes="action string:${context/absolute_url}/@@convert-legacy-portlets">\n \n             <input type="submit"\n-                   class="context"\n+                   class="btn btn-primary"\n                    value="Convert portlets"\n                    i18n:attributes="value label_convert_portlets"\n                    name="convert" />\ndiff --git a/plone/app/portlets/browser/templates/manage-dashboard.pt b/plone/app/portlets/browser/templates/manage-dashboard.pt\nindex 2145916d..5c96ccde 100644\n--- a/plone/app/portlets/browser/templates/manage-dashboard.pt\n+++ b/plone/app/portlets/browser/templates/manage-dashboard.pt\n@@ -1,54 +1,60 @@\n-<html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      xml:lang="en" lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n+<html\n+    xmlns="http://www.w3.org/1999/xhtml"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    xmlns:metal="http://xml.zope.org/namespaces/metal"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    xml:lang="en"\n+    lang="en"\n+    metal:use-macro="context/main_template/macros/master"\n+    i18n:domain="plone">\n+\n+  <head>\n+    <metal:block\n+        fill-slot="top_slot"\n+        tal:define="dummy python:request.set(\'disable_border\',1);\n                              disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n                              disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-\n-<metal:b fill-slot="content-title">\n-  <h1 class="documentFirstHeading" i18n:translate="title_edit_dashboard">\n-      Edit your dashboard\n-  </h1>\n-</metal:b>\n-\n-<metal:b fill-slot="content-core">\n-\n-  <tal:main-macro metal:define-macro="main">\n-\n-    <div class="autotabs">\n-      <nav class="autotoc-nav">\n-        <a href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n-           i18n:translate="label_dashboard">Dashboard</a>\n-        <a class="active"\n-           href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n-           i18n:translate="label_edit">Edit</a>\n-      </nav>\n-\n-      <div id="dashboard">\n-          <div id="dashboard-portlets1"\n-            tal:content="structure provider:plone.dashboard1" />\n-          <div id="dashboard-portlets2"\n-            tal:content="structure provider:plone.dashboard2" />\n-          <div id="dashboard-portlets3"\n-            tal:content="structure provider:plone.dashboard3" />\n-          <div id="dashboard-portlets4"\n-            tal:content="structure provider:plone.dashboard4" />\n-      </div>\n-      <div class="visualClear"><!-- --></div>\n-    </div>\n-\n-  </tal:main-macro>\n-</metal:b>\n-\n-</body>\n+  </head>\n+\n+  <body>\n+\n+    <metal:b fill-slot="content-title">\n+      <h1\n+          class="documentFirstHeading"\n+          i18n:translate="title_edit_dashboard">\n+        Edit your dashboard\n+      </h1>\n+    </metal:b>\n+\n+    <metal:b fill-slot="content-core">\n+\n+      <tal:main-macro metal:define-macro="main">\n+\n+        <div class="autotabs">\n+          <nav class="autotoc-nav nav nav-tabs mb-3">\n+              <a class="nav-link"\n+                 href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n+                 i18n:translate="label_dashboard">Dashboard</a>\n+              <a class="active nav-link"\n+                 href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n+                 i18n:translate="label_edit">Edit</a>\n+          </nav>\n+\n+          <div id="dashboard"\n+              class="row row-cols-1 row-cols-md-2 gx-5 gy-5">\n+            <div id="dashboard-portlets1" class=""\n+              tal:content="structure provider:plone.dashboard1" />\n+            <div id="dashboard-portlets2"\n+              tal:content="structure provider:plone.dashboard2" />\n+            <div id="dashboard-portlets3"\n+              tal:content="structure provider:plone.dashboard3" />\n+            <div id="dashboard-portlets4"\n+              tal:content="structure provider:plone.dashboard4" />\n+          </div>\n+        </div>\n+\n+      </tal:main-macro>\n+    </metal:b>\n+\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/manage-group-dashboard.pt b/plone/app/portlets/browser/templates/manage-group-dashboard.pt\nindex e7bcba3e..e99baf91 100644\n--- a/plone/app/portlets/browser/templates/manage-group-dashboard.pt\n+++ b/plone/app/portlets/browser/templates/manage-group-dashboard.pt\n@@ -3,7 +3,7 @@\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xml:lang="en" lang="en"\n-      metal:use-macro="here/prefs_main_template/macros/master"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="plone">\n \n <head>\n@@ -13,36 +13,33 @@\n </head>\n \n <body>\n-<metal:b fill-slot="prefs_configlet_content">\n-  <div id="content" metal:define-macro="main">\n \n-    <a href="${portal_url}/@@usergroup-groupprefs"\n-       class="link-parent"\n-       i18n:translate="label_up_to_groups_overview">\n-        Up to Groups Overview\n-    </a>\n+<metal:b fill-slot="prefs_configlet_main">\n \n-    <h1 class="documentFirstHeading">Group: ${view/group}</h1>\n+    <header>\n+      <h1 class="documentFirstHeading" i18n:translate="">Group: <span i18n:name="groupname" tal:content="view/group" tal:omit-tag=""/></h1>\n+    </header>\n \n     <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n         Portal status message\n     </div>\n \n     <div id="content-core" tal:define="token context/@@authenticator/token">\n-      <div class="autotabs">        \n-        <nav class="autotoc-nav">\n-          <a href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n+      <div class="autotabs">\n+        <nav class="autotoc-nav nav nav-tabs mb-3">\n+          <a class="nav-link" href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n              i18n:translate="label_group_members">Group Members</a>\n-          <a href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n+          <a class="nav-link" href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n              i18n:translate="label_group_properties">Group Properties</a>\n-          <a href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n+          <a class="nav-link" href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n              i18n:translate="label_group_portlets">Group Portlets</a>\n-          <a class="active"\n+          <a class="active nav-link"\n              href="${portal_url}/@@manage-group-dashboard?key=${request/key}&_authenticator=${token}"\n              i18n:translate="label_group_dashboard">Group Dashboard</a>\n         </nav>\n \n-        <div id="dashboard">\n+        <div id="dashboard"\n+            class="row row-cols-1 row-cols-md-2 gx-5 gy-5">\n             <div id="dashboard-portlets1"\n               tal:content="structure provider:plone.dashboard1" />\n             <div id="dashboard-portlets2"\n@@ -56,7 +53,6 @@\n       </div>\n     </div>\n \n-  </div>\n </metal:b>\n \n </body>\ndiff --git a/plone/app/portlets/browser/templates/manage-group.pt b/plone/app/portlets/browser/templates/manage-group.pt\nindex 6abad3f9..5d5c7c3c 100644\n--- a/plone/app/portlets/browser/templates/manage-group.pt\n+++ b/plone/app/portlets/browser/templates/manage-group.pt\n@@ -21,13 +21,13 @@\n     Up to Groups Overview\n   </a>\n \n-  <h1 class="documentFirstHeading">Group: ${view/group}</h1>\n+  <h1 class="documentFirstHeading" i18n:translate="">Group: <span i18n:name="groupname" tal:content="view/group" tal:omit-tag=""/></h1>\n </metal:b>\n \n <metal:b fill-slot="content-core">\n   <metal:b metal:define-macro="props" tal:omit-tag="">\n \n-    <div class="autotabs" tal:define="token context/@@authenticator/token">        \n+    <div class="autotabs" tal:define="token context/@@authenticator/token">\n       <nav class="autotoc-nav">\n         <a href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n            i18n:translate="label_group_members">Group Members</a>\ndiff --git a/plone/app/portlets/browser/templates/manage_portlets_fallback.pt b/plone/app/portlets/browser/templates/manage_portlets_fallback.pt\nnew file mode 100644\nindex 00000000..ec5592d9\n--- /dev/null\n+++ b/plone/app/portlets/browser/templates/manage_portlets_fallback.pt\n@@ -0,0 +1,14 @@\n+<div tal:condition="view/available" class="row managePortlets-row">\n+\t<tal:comment tal:condition="nothing">\n+\t\t**********\n+\t\tNEEDED COL\n+\t\t**********\n+\t</tal:comment>\n+    <a class="managePortletsFallback"\n+        tal:attributes="href string:${view/object_url}/@@manage-portlets"\n+        i18n:domain="plone"\n+        i18n:translate="manage_portlets_link">\n+        Manage portlets\n+    </a>\n+\n+</div>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/browser/templates/topbar-manage-portlets.pt b/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\nindex 5b6f9e5a..11d9aaa0 100644\n--- a/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\n+++ b/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\n@@ -6,12 +6,12 @@\n       i18n:domain="plone">\n <body>\n \n-  <div metal:fill-slot="main" tal:define="plone_view context/@@plone">\n+  <metal:main fill-slot="main" tal:define="plone_view context/@@plone">\n \n     <div class="quicknav-wrapper">\n       <form method="post"\n           tal:attributes="action context/absolute_url">\n-        <select id="quicknav" class="switch-portlet-manager pull-right" name=":action"\n+        <select id="quicknav" class="switch-portlet-manager form-select w-auto ms-1 float-end" name=":action"\n             tal:define="portlet_menu context/@@view_get_menu/plone_contentmenu_portletmanager"\n             tal:attributes="data-context-url context/absolute_url">\n           <option tal:attributes="value python:request[\'ACTUAL_URL\']"\n@@ -28,39 +28,41 @@\n       </form>\n     </div>\n \n-    <h1 class="documentFirstHeading"\n-      i18n:translate="title_manage_contextual_portlets">\n-      Manage portlets for\n-      <q i18n:name="context_title" tal:content="context/Title">title</q>\n-    </h1>\n+    <header>\n+      <h1 class="documentFirstHeading"\n+        i18n:translate="title_manage_contextual_portlets">\n+        Manage portlets for\n+        <q i18n:name="context_title" tal:content="context/Title">title</q>\n+      </h1>\n+      \n+      <a class="link-parent d-inline-block mb-3"\n+          tal:attributes="href context/absolute_url"\n+          i18n:translate="return_to_view">\n+        Return\n+      </a>      \n \n-    <a class="link-parent"\n-        tal:attributes="href context/absolute_url"\n-        i18n:translate="return_to_view">\n-      Return\n-    </a>\n-\n-    <div class="portalMessage info"\n-         role="status"\n-         tal:condition="plone_view/isDefaultPageInFolder|nothing">\n-      <strong>\n-          Info\n-      </strong>\n-      <div i18n:translate="label_manage_portlets_default_view_container">\n-          You are managing the portlets of the default view of a container. If\n-          you wanted to manage the portlets of the container itself,\n-        <a href=""\n-            i18n:name="go_here"\n-            i18n:translate="label_manage_portlets_default_view_container_go_here"\n-            class="portlets-link-to-parent"\n-            tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@topbar-manage-portlets/${view/manager_name}">go here</a>.\n+      <div class="alert alert-info"\n+          role="status"\n+          tal:condition="plone_view/isDefaultPageInFolder|nothing">\n+        <strong i18n:translate="">\n+            Info\n+        </strong>\n+        <div i18n:translate="label_manage_portlets_default_view_container">\n+            You are managing the portlets of the default view of a container. If\n+            you wanted to manage the portlets of the container itself,\n+          <a href=""\n+              i18n:name="go_here"\n+              i18n:translate="label_manage_portlets_default_view_container_go_here"\n+              class="portlets-link-to-parent"\n+              tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@topbar-manage-portlets/${view/manager_name}">go here</a>.\n+        </div>\n       </div>\n-    </div>\n+    </header>\n \n     <h2 tal:content="view/manager_name"></h2>\n     <span tal:replace="structure view/render_edit_manager_portlets" />\n \n-  </div>\n+  </metal:main>\n \n </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt b/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\nindex c4ff81db..d376e420 100644\n--- a/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\n+++ b/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\n@@ -13,6 +13,8 @@\n     <metal:block fill-slot="main">\n \n         <h1 class="documentFirstHeading" tal:content="view/label | nothing" />\n+        \n+        <div class="text-muted" tal:condition="view/description | nothing" tal:content="view/description" />\n \n         <div id="content-core">\n             <metal:block use-macro="context/@@ploneform-macros/titlelessform" >\ndiff --git a/plone/app/portlets/browser/traversal.py b/plone/app/portlets/browser/traversal.py\nindex eb0cce64..310b3b8f 100644\n--- a/plone/app/portlets/browser/traversal.py\n+++ b/plone/app/portlets/browser/traversal.py\n@@ -1,29 +1,25 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, getUtility, getMultiAdapter\n-\n-from zope.traversing.interfaces import ITraversable\n-from zope.publisher.interfaces.http import IHTTPRequest\n-\n+from ..storage import GroupDashboardPortletAssignmentMapping\n+from ..storage import PortletAssignmentMapping\n+from ..storage import UserPortletAssignmentMapping\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignable\n-from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.interfaces import ISiteRoot\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.publisher.interfaces.http import IHTTPRequest\n+from zope.traversing.interfaces import ITraversable\n \n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n-from plone.app.portlets.storage import GroupDashboardPortletAssignmentMapping\n \n @implementer(ITraversable)\n-class ContextPortletNamespace(object):\n-    """Used to traverse to a contextual portlet assignable\n-    """\n-    adapts(ILocalPortletAssignable, IHTTPRequest)\n+@adapter(ILocalPortletAssignable, IHTTPRequest)\n+class ContextPortletNamespace:\n+    """Used to traverse to a contextual portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n@@ -31,116 +27,124 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n         column = getUtility(IPortletManager, name=name)\n-        manager = getMultiAdapter((self.context, column,), IPortletAssignmentMapping)\n+        manager = getMultiAdapter(\n+            (\n+                self.context,\n+                column,\n+            ),\n+            IPortletAssignmentMapping,\n+        )\n         return manager\n \n+\n @implementer(ITraversable)\n-class DashboardNamespace(object):\n+@adapter(ISiteRoot, IHTTPRequest)\n+class DashboardNamespace:\n     """Used to traverse to a portlet assignable for the current user for\n     the dashboard.\n     """\n-    adapts(ISiteRoot, IHTTPRequest)\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, user = name.split(\'+\')\n+        col, user = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[USER_CATEGORY]\n         manager = category.get(user, None)\n         if manager is None:\n             manager = category[user] = UserPortletAssignmentMapping(\n-                manager=col, category=USER_CATEGORY, name=user)\n+                manager=col, category=USER_CATEGORY, name=user\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = USER_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = user\n \n         return manager\n \n+\n @implementer(ITraversable)\n-class GroupDashboardNamespace(object):\n-    """Used to traverse to a portlet assignable for a group for the dashboard\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class GroupDashboardNamespace:\n+    """Used to traverse to a portlet assignable for a group for the dashboard"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = \\\n-                GroupDashboardPortletAssignmentMapping(manager=col,\n-                                                       category=GROUP_CATEGORY,\n-                                                       name=group)\n+            manager = category[group] = GroupDashboardPortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n         return manager\n \n+\n @implementer(ITraversable)\n-class GroupPortletNamespace(object):\n-    """Used to traverse to a group portlet assignable\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class GroupPortletNamespace:\n+    """Used to traverse to a group portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, group = name.split(\'+\')\n+        col, group = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[GROUP_CATEGORY]\n         manager = category.get(group, None)\n         if manager is None:\n-            manager = category[group] = PortletAssignmentMapping(manager=col,\n-                                                                 category=GROUP_CATEGORY,\n-                                                                 name=group)\n+            manager = category[group] = PortletAssignmentMapping(\n+                manager=col, category=GROUP_CATEGORY, name=group\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = GROUP_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = group\n \n         return manager\n \n+\n @implementer(ITraversable)\n-class ContentTypePortletNamespace(object):\n-    """Used to traverse to a content type portlet assignable\n-    """\n-    adapts(ISiteRoot, IHTTPRequest)\n+@adapter(ISiteRoot, IHTTPRequest)\n+class ContentTypePortletNamespace:\n+    """Used to traverse to a content type portlet assignable"""\n \n     def __init__(self, context, request=None):\n         self.context = context\n         self.request = request\n \n     def traverse(self, name, ignore):\n-        col, pt = name.split(\'+\')\n+        col, pt = name.split("+")\n         column = getUtility(IPortletManager, name=col)\n         category = column[CONTENT_TYPE_CATEGORY]\n         manager = category.get(pt, None)\n         if manager is None:\n             manager = category[pt] = PortletAssignmentMapping(\n-                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt)\n+                manager=col, category=CONTENT_TYPE_CATEGORY, name=pt\n+            )\n \n         # XXX: For graceful migration\n-        if not getattr(manager, \'__manager__\', None):\n+        if not getattr(manager, "__manager__", None):\n             manager.__manager__ = col\n-        if not getattr(manager, \'__category__\', None):\n+        if not getattr(manager, "__category__", None):\n             manager.__category__ = CONTENT_TYPE_CATEGORY\n-        if not getattr(manager, \'__name__\', None):\n+        if not getattr(manager, "__name__", None):\n             manager.__name__ = pt\n \n         return manager\ndiff --git a/plone/app/portlets/browser/utils.py b/plone/app/portlets/browser/utils.py\nindex 073f113a..d4a32dbd 100644\n--- a/plone/app/portlets/browser/utils.py\n+++ b/plone/app/portlets/browser/utils.py\n@@ -1,32 +1,30 @@\n-# -*- coding: utf-8 -*-\n-from Products.Five import BrowserView\n-from zope.component import getUtility, getMultiAdapter\n-\n+from ..interfaces import IDeferredPortletRenderer\n+from ..utils import assignment_from_key\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.utils import unhashPortletInfo\n-\n-from plone.app.portlets.interfaces import IDeferredPortletRenderer\n-from plone.app.portlets.utils import assignment_from_key\n+from Products.Five import BrowserView\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class PortletUtilities(BrowserView):\n-\n     def render_portlet(self, portlethash, **kw):\n         # Prepare the portlet and render the data\n         info = unhashPortletInfo(portlethash)\n-        manager = getUtility(IPortletManager, info[\'manager\'])\n+        manager = getUtility(IPortletManager, info["manager"])\n \n-        assignment = assignment_from_key(context=self.context,\n-                                         manager_name=info[\'manager\'],\n-                                         category=info[\'category\'],\n-                                         key=info[\'key\'],\n-                                         name=info[\'name\'])\n+        assignment = assignment_from_key(\n+            context=self.context,\n+            manager_name=info["manager"],\n+            category=info["category"],\n+            key=info["key"],\n+            name=info["name"],\n+        )\n         renderer = getMultiAdapter(\n-                (self.context, self.request, self,\n-                 manager, assignment.data),\n-                IPortletRenderer\n-            )\n+            (self.context, self.request, self, manager, assignment.data),\n+            IPortletRenderer,\n+        )\n \n         renderer.update()\n         if IDeferredPortletRenderer.providedBy(renderer):\ndiff --git a/plone/app/portlets/browser/viewlets.py b/plone/app/portlets/browser/viewlets.py\nnew file mode 100644\nindex 00000000..6a365f00\n--- /dev/null\n+++ b/plone/app/portlets/browser/viewlets.py\n@@ -0,0 +1,68 @@\n+from zope.component import getMultiAdapter\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from plone.app.layout.viewlets.common import ViewletBase\n+from AccessControl import getSecurityManager\n+from datetime import date\n+\n+\n+class ManagePortletsFallbackViewlet(ViewletBase):\n+    """Manage portlets fallback link that sits below content"""\n+\n+    index = ViewPageTemplateFile("templates/manage_portlets_fallback.pt")\n+\n+    def update(self):\n+        plonelayout = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_layout"\n+        )\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+\n+        self.portlet_assignable = context_state.portlet_assignable()\n+        self.sl = plonelayout.have_portlets("plone.leftcolumn", self.context)\n+        self.sr = plonelayout.have_portlets("plone.rightcolumn", self.context)\n+        self.object_url = context_state.object_url()\n+\n+    def available(self):\n+        secman = getSecurityManager()\n+        has_manage_portlets_permission = secman.checkPermission(\n+            "Portlets: Manage portlets", self.context\n+        )\n+        if not has_manage_portlets_permission:\n+            return False\n+        return bool(not self.sl and not self.sr and self.portlet_assignable)\n+\n+class FooterViewlet(ViewletBase):\n+    index = ViewPageTemplateFile("templates/footer.pt")\n+\n+    def update(self):\n+        super(FooterViewlet, self).update()\n+        self.year = date.today().year\n+\n+    def render_footer_portlets(self):\n+        """\n+        You might ask, why is this necessary. Well, let me tell you a story...\n+\n+        plone.app.portlets, in order to provide @@manage-portlets on a context,\n+        overrides the IPortletRenderer for the IManageContextualPortletsView\n+        view.\n+        See plone.portlets and plone.app.portlets\n+\n+        Seems fine right? Well, most of the time it is. Except, here.\n+        Previously, we were just using the syntax like\n+        `provider:plone.footerportlets` to render the footer portlets.\n+        Since this tal expression was inside a viewlet,\n+        the view is no longer IManageContextualPortletsView when\n+        visiting @@manage-portlets. Instead, it was IViewlet.\n+        See zope.contentprovider\n+\n+        In to fix this short coming, we render the portlet column by\n+        manually doing the multi adapter lookup and then manually\n+        doing the rendering for the content provider.\n+        See zope.contentprovider\n+        """\n+        portlet_manager = getMultiAdapter(\n+            (self.context, self.request, self.__parent__), name="plone.footerportlets"\n+        )\n+        portlet_manager.update()\n+        return portlet_manager.render()\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex 39f0e82d..56b42cb8 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -1,14 +1,12 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n from zope import component\n \n-import six\n-\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\n-        (context, request), name=u\'plone_portal_state\')\n+        (context, request), name="plone_portal_state"\n+    )\n     return portal_state.locale().getLocaleID()\n \n \n@@ -28,16 +26,19 @@ def render_cachekey(fun, self):\n \n     def add(brain):\n         path = brain.getPath()\n-        return "%s\\n%s\\n\\n" % (path, brain.modified)\n+        return f"{path}\\n{brain.modified}\\n\\n"\n \n     fingerprint = "".join(map(add, self._data()))\n \n-    anonymous = getToolByName(context, \'portal_membership\').isAnonymousUser()\n-\n-    return "".join((\n-        getToolByName(aq_inner(self.context), \'portal_url\')(),\n-        str(get_language(aq_inner(self.context), self.request)),\n-        str(anonymous),\n-        self.manager.__name__,\n-        self.data.__name__,\n-        fingerprint))\n+    anonymous = getToolByName(context, "portal_membership").isAnonymousUser()\n+\n+    return "".join(\n+        (\n+            getToolByName(aq_inner(self.context), "portal_url")(),\n+            str(get_language(aq_inner(self.context), self.request)),\n+            str(anonymous),\n+            self.manager.__name__,\n+            self.data.__name__,\n+            fingerprint,\n+        )\n+    )\ndiff --git a/plone/app/portlets/checker.py b/plone/app/portlets/checker.py\nindex 50a2e267..079a7055 100644\n--- a/plone/app/portlets/checker.py\n+++ b/plone/app/portlets/checker.py\n@@ -1,21 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n-from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n-from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n-from AccessControl import getSecurityManager, Unauthorized\n+from .interfaces import IGroupDashboardPortletAssignmentMapping\n+from .interfaces import IPortletPermissionChecker\n+from .interfaces import IUserPortletAssignmentMapping\n+from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n from Acquisition import aq_inner\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from zope.component import adapter\n+from zope.interface import implementer\n \n \n @implementer(IPortletPermissionChecker)\n-class DefaultPortletPermissionChecker(object):\n-    adapts(IPortletAssignmentMapping)\n-\n+@adapter(IPortletAssignmentMapping)\n+class DefaultPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \n@@ -30,9 +26,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class UserPortletPermissionChecker(object):\n-    adapts(IUserPortletAssignmentMapping)\n-\n+@adapter(IUserPortletAssignmentMapping)\n+class UserPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \n@@ -52,9 +47,8 @@ def __call__(self):\n \n \n @implementer(IPortletPermissionChecker)\n-class GroupDashboardPortletPermissionChecker(object):\n-    adapts(IGroupDashboardPortletAssignmentMapping)\n-\n+@adapter(IGroupDashboardPortletAssignmentMapping)\n+class GroupDashboardPortletPermissionChecker:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/portlets/configure.zcml b/plone/app/portlets/configure.zcml\nindex 5a153bce..b4b59569 100644\n--- a/plone/app/portlets/configure.zcml\n+++ b/plone/app/portlets/configure.zcml\n@@ -12,6 +12,7 @@\n     <include file="permissions.zcml" />\n \n     <include package=".browser" />\n+    <include package=".dashboard" />\n     <include package=".exportimport" />\n     <include package=".portlets" />\n \ndiff --git a/plone/app/portlets/dashboard.py b/plone/app/portlets/dashboard/__init__.py\nsimilarity index 55%\nrename from plone/app/portlets/dashboard.py\nrename to plone/app/portlets/dashboard/__init__.py\nindex 0bdc9db9..38c106b7 100644\n--- a/plone/app/portlets/dashboard.py\n+++ b/plone/app/portlets/dashboard/__init__.py\n@@ -1,23 +1,17 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer\n-from zope.component import adapts, queryUtility\n-\n-from zope.container.interfaces import INameChooser\n-\n-from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n-\n-from plone.portlets.interfaces import IPortletManager\n+from .. import portlets\n+from ..interfaces import IDefaultDashboard\n+from ..storage import UserPortletAssignmentMapping\n from plone.portlets.constants import USER_CATEGORY\n-\n-from plone.app.portlets.interfaces import IDefaultDashboard\n-from plone.app.portlets import portlets\n-\n-from plone.app.portlets.storage import UserPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from Products.PluggableAuthService.interfaces.authservice import IPropertiedUser\n+from zope.component import adapter\n+from zope.component import queryUtility\n+from zope.container.interfaces import INameChooser\n+from zope.interface import implementer\n \n \n def new_user(principal, event):\n-    """Initialise the dashboard for a new user\n-    """\n+    """Initialise the dashboard for a new user"""\n     defaults = IDefaultDashboard(principal, None)\n     if defaults is None:\n         return\n@@ -25,7 +19,12 @@ def new_user(principal, event):\n     userid = principal.getId()\n     portlets = defaults()\n \n-    for name in (\'plone.dashboard1\', \'plone.dashboard2\', \'plone.dashboard3\', \'plone.dashboard4\'):\n+    for name in (\n+        "plone.dashboard1",\n+        "plone.dashboard2",\n+        "plone.dashboard3",\n+        "plone.dashboard4",\n+    ):\n         assignments = portlets.get(name)\n         if assignments:\n             column = queryUtility(IPortletManager, name=name)\n@@ -34,27 +33,26 @@ def new_user(principal, event):\n                 if category is not None:\n                     manager = category.get(userid, None)\n                     if manager is None:\n-                        manager = category[userid] = UserPortletAssignmentMapping(manager=name,\n-                                                                                  category=USER_CATEGORY,\n-                                                                                  name=userid)\n+                        manager = category[userid] = UserPortletAssignmentMapping(\n+                            manager=name, category=USER_CATEGORY, name=userid\n+                        )\n                     chooser = INameChooser(manager)\n                     for assignment in assignments:\n                         manager[chooser.chooseName(None, assignment)] = assignment\n \n \n @implementer(IDefaultDashboard)\n-class DefaultDashboard(object):\n-    """The default default dashboard.\n-    """\n-    adapts(IPropertiedUser)\n+@adapter(IPropertiedUser)\n+class DefaultDashboard:\n+    """The default default dashboard."""\n \n     def __init__(self, principal):\n         self.principal = principal\n \n     def __call__(self):\n         return {\n-            \'plone.dashboard1\': (portlets.news.Assignment(), ),\n-            \'plone.dashboard2\': (portlets.recent.Assignment(), ),\n-            \'plone.dashboard3\': (),\n-            \'plone.dashboard4\': (portlets.review.Assignment(), ),\n+            "plone.dashboard1": (portlets.news.Assignment(),),\n+            "plone.dashboard2": (portlets.recent.Assignment(),),\n+            "plone.dashboard3": (),\n+            "plone.dashboard4": (portlets.review.Assignment(),),\n         }\ndiff --git a/plone/app/portlets/dashboard/configure.zcml b/plone/app/portlets/dashboard/configure.zcml\nnew file mode 100644\nindex 00000000..c206737c\n--- /dev/null\n+++ b/plone/app/portlets/dashboard/configure.zcml\n@@ -0,0 +1,22 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser">\n+\n+    <browser:page\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        name="dashboard"\n+        permission="plone.app.portlets.ViewDashboard"\n+        class=".dashboard.DashboardView"\n+        template="dashboard.pt"\n+        />\n+\n+    <!-- this view provides a not-js fallback for the user dropdown menu.\n+    It has been placed here to be near the personal bar code -->\n+    <browser:page\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        name="useractions"\n+        permission="zope2.View"\n+        class=".user_actions.UserActionsView"\n+        template="user_actions.pt"\n+        />\n+</configure>\ndiff --git a/plone/app/portlets/dashboard/dashboard.pt b/plone/app/portlets/dashboard/dashboard.pt\nnew file mode 100644\nindex 00000000..71de849a\n--- /dev/null\n+++ b/plone/app/portlets/dashboard/dashboard.pt\n@@ -0,0 +1,70 @@\n+<html\n+    xmlns="http://www.w3.org/1999/xhtml"\n+    xml:lang="en"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    xmlns:metal="http://xml.zope.org/namespaces/metal"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    lang="en"\n+    metal:use-macro="context/main_template/macros/master"\n+    i18n:domain="plone">\n+\n+  <body>\n+\n+    <metal:b fill-slot="content-title">\n+      <h1\n+          class="documentFirstHeading"\n+          i18n:translate="heading_dashboard"\n+          tal:define="memberinfo context/portal_membership/getMemberInfo;\n+                  member context/@@plone_portal_state/member;\n+                  name python:memberinfo[\'fullname\'] or member.getId() or member.getId()">\n+        <span\n+            tal:replace="name"\n+            i18n:name="user_name" />\n+        &#8217;s dashboard\n+      </h1>\n+    </metal:b>\n+\n+    <metal:b fill-slot="content-core">\n+      <tal:b metal:define-macro="content-core">\n+\n+        <div class="autotabs">\n+          <nav class="autotoc-nav nav nav-tabs mb-3">\n+            <span class="nav-item">\n+              <a\n+                  class="active nav-link"\n+                  href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n+                  i18n:translate="label_dashboard">Dashboard</a>\n+            </span>\n+            <span class="nav-item">\n+              <a\n+                  href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n+                  class="nav-link"\n+                  i18n:translate="label_edit">Edit</a>\n+            </span>\n+          </nav>\n+\n+\n+          <div\n+              id="dashboard"\n+              class="row row-cols-1 row-cols-md-2 gy-2">\n+            <div\n+                id="dashboard-portlets1"\n+                tal:content="structure provider:plone.dashboard1" />\n+            <div\n+                id="dashboard-portlets2"\n+                tal:content="structure provider:plone.dashboard2" />\n+            <div\n+                id="dashboard-portlets3"\n+                tal:content="structure provider:plone.dashboard3" />\n+            <div\n+                id="dashboard-portlets4"\n+                tal:content="structure provider:plone.dashboard4" />\n+          </div>\n+\n+        </div>\n+\n+      </tal:b>\n+    </metal:b>\n+\n+  </body>\n+</html>\ndiff --git a/plone/app/portlets/dashboard/dashboard.py b/plone/app/portlets/dashboard/dashboard.py\nnew file mode 100644\nindex 00000000..abc42837\n--- /dev/null\n+++ b/plone/app/portlets/dashboard/dashboard.py\n@@ -0,0 +1,72 @@\n+# -*- coding: utf-8 -*-\n+from AccessControl import getSecurityManager\n+from plone.memoize.instance import memoize\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletManager\n+from plone.protect.authenticator import createToken\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+class IDashboard(Interface):\n+    """the dashboard display columns of portlet to the loggedin user"""\n+\n+\n+@implementer(IDashboard)\n+class DashboardView(BrowserView):\n+    """Power the dashboard"""\n+\n+    def __call__(self):\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n+        if self.can_edit() and self.empty():\n+            message = _(\n+                u"info_empty_dashboard",\n+                default=u"Your dashboard is currently empty. Click the"\n+                " <em>edit</em> tab to assign some personal"\n+                " portlets.",\n+            )\n+            IStatusMessage(self.request).add(message)\n+        return self.index()\n+\n+    @property\n+    def auth_token(self):\n+        return createToken()\n+\n+    @memoize\n+    def can_edit(self):\n+        return bool(\n+            getSecurityManager().checkPermission(\n+                "Portlets: Manage own portlets", self.context\n+            )\n+        )\n+\n+    @memoize\n+    def empty(self):\n+        dashboards = [\n+            getUtility(IPortletManager, name=name)\n+            for name in [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n+            ]\n+        ]\n+\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        member = portal_membership.getAuthenticatedMember()\n+        userid = member.getId()\n+\n+        num_portlets = 0\n+        for dashboard in dashboards:\n+            num_portlets += len(dashboard.get(USER_CATEGORY, {}).get(userid, {}))\n+            for groupid in member.getGroups():\n+                num_portlets += len(dashboard.get(GROUP_CATEGORY, {}).get(groupid, {}))\n+        return num_portlets == 0\ndiff --git a/plone/app/portlets/dashboard/user_actions.pt b/plone/app/portlets/dashboard/user_actions.pt\nnew file mode 100644\nindex 00000000..ce532f1f\n--- /dev/null\n+++ b/plone/app/portlets/dashboard/user_actions.pt\n@@ -0,0 +1,35 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      metal:use-macro="context/main_template/macros/master"\n+      i18n:domain="plone">\n+\n+<head>\n+    <metal:block fill-slot="top_slot"\n+                 tal:define="dummy python:request.set(\'disable_border\',1);\n+                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+</head>\n+\n+<body>\n+\n+<metal:main fill-slot="main">\n+<h1 i18n:translate="" class="documentFirstHeading">User Actions</h1>\n+<ul id="user-actions">\n+    <li tal:repeat="action view/user_actions">\n+        <a href=""\n+           tal:attributes="href action/url;\n+                           target action/link_target|nothing;\n+                           id string:personaltoolspage-${action/id};"\n+           tal:content="action/title"\n+           i18n:translate="">\n+            action title\n+        </a>\n+    </li>\n+</ul>\n+</metal:main>\n+\n+</body>\n+</html>\ndiff --git a/plone/app/portlets/dashboard/user_actions.py b/plone/app/portlets/dashboard/user_actions.py\nnew file mode 100644\nindex 00000000..64e10f96\n--- /dev/null\n+++ b/plone/app/portlets/dashboard/user_actions.py\n@@ -0,0 +1,15 @@\n+# -*- coding: utf-8 -*-\n+from Products.Five.browser import BrowserView\n+from zope.component import getMultiAdapter\n+\n+\n+class UserActionsView(BrowserView):\n+    """Power the useraction fallback page"""\n+\n+    def user_actions(self):\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+\n+        actions = context_state.actions("user")\n+        return actions\ndiff --git a/plone/app/portlets/exportimport/__init__.py b/plone/app/portlets/exportimport/__init__.py\nindex ec51c5a2..e69de29b 100644\n--- a/plone/app/portlets/exportimport/__init__.py\n+++ b/plone/app/portlets/exportimport/__init__.py\n@@ -1,2 +0,0 @@\n-# -*- coding: utf-8 -*-\n-#\ndiff --git a/plone/app/portlets/exportimport/interfaces.py b/plone/app/portlets/exportimport/interfaces.py\nindex 351072ce..a2389449 100644\n--- a/plone/app/portlets/exportimport/interfaces.py\n+++ b/plone/app/portlets/exportimport/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 40975cac..6c404fac 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n In ``portlets.xml`` you can register various objects.\n \n@@ -75,13 +74,13 @@\n .. These docs are used in http://docs.plone.org/develop/addons/components/genericsetup.html\n .. original content from http://www.sixfeetup.com/company/technologies/plone-content-management-new/quick-reference-cards/swag/swag-images-files/generic_setup.pdf\n \n-"""  # noqa\n+"""\n \n+from ..interfaces import IDefaultPortletManager\n+from ..interfaces import IPortletTypeInterface\n+from ..utils import assignment_mapping_from_key\n+from .interfaces import IPortletAssignmentExportImportHandler\n from operator import attrgetter\n-from plone.app.portlets.exportimport.interfaces import IPortletAssignmentExportImportHandler\n-from plone.app.portlets.interfaces import IDefaultPortletManager\n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.utils import assignment_mapping_from_key\n from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n@@ -96,64 +95,55 @@\n from plone.portlets.registration import PortletType\n from plone.portlets.storage import PortletCategoryMapping\n from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n from Products.GenericSetup.interfaces import ISetupEnviron\n from Products.GenericSetup.utils import _getDottedName\n from Products.GenericSetup.utils import _resolveDottedName\n from Products.GenericSetup.utils import XMLAdapterBase\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getSiteManager\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n-from zope.component.interfaces import IComponentRegistry\n from zope.component.interfaces import IFactory\n from zope.container.interfaces import INameChooser\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.interface import providedBy\n+from zope.interface.interfaces import IComponentRegistry\n+from zope.schema import Bool\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IFromUnicode\n \n-import six\n-\n \n def dummyGetId():\n-    return \'\'\n-\n+    return ""\n \n-HAS_BLACKLIST = True\n-try:\n-    from Products.GenericSetup.interfaces import IComponentsHandlerBlacklist\n-except ImportError:\n-    HAS_BLACKLIST = False\n \n-if HAS_BLACKLIST:\n-\n-    @implementer(IComponentsHandlerBlacklist)\n-    class Blacklist(object):\n-\n-        def getExcludedInterfaces(self):\n-            return (_getDottedName(IPortletType),\n-                    _getDottedName(IPortletManager),\n-                    _getDottedName(IPortletManagerRenderer),\n-                    )\n+@implementer(IComponentsHandlerBlacklist)\n+class Blacklist:\n+    def getExcludedInterfaces(self):\n+        return (\n+            _getDottedName(IPortletType),\n+            _getDottedName(IPortletManager),\n+            _getDottedName(IPortletManagerRenderer),\n+        )\n \n \n @implementer(IPortletAssignmentExportImportHandler)\n-class PropertyPortletAssignmentExportImportHandler(object):\n-    """Import portlet assignment settings based on zope.schema properties\n-    """\n-    adapts(Interface)\n+@adapter(Interface)\n+class PropertyPortletAssignmentExportImportHandler:\n+    """Import portlet assignment settings based on zope.schema properties"""\n \n     def __init__(self, assignment):\n         self.assignment = assignment\n \n     def import_assignment(self, interface, node):\n         for child in node.childNodes:\n-            if child.nodeName == \'property\':\n+            if child.nodeName == "property":\n                 self.import_node(interface, child)\n \n     def export_assignment(self, interface, doc, node):\n@@ -169,9 +159,8 @@ def export_assignment(self, interface, doc, node):\n     # Helper methods\n \n     def import_node(self, interface, child):\n-        """Import a single <property /> node\n-        """\n-        property_name = child.getAttribute(\'name\')\n+        """Import a single <property /> node"""\n+        property_name = child.getAttribute("name")\n \n         __traceback_info__ = "Property name: " + property_name\n \n@@ -189,7 +178,7 @@ def import_node(self, interface, child):\n             value_type = field.value_type\n             value = []\n             for element in child.childNodes:\n-                if element.nodeName != \'element\':\n+                if element.nodeName != "element":\n                     continue\n                 element_value = self.extract_text(element)\n                 value.append(self.from_unicode(value_type, element_value))\n@@ -198,10 +187,10 @@ def import_node(self, interface, child):\n         # Otherwise, just get the value of the <property /> node\n         else:\n             value = self.extract_text(child)\n-            if not (field.getName() == \'root\' and value in [\'\', \'/\']):\n+            if not (field.getName() == "root" and value in ["", "/"]):\n                 value = self.from_unicode(field, value)\n \n-        if field.getName() == \'root\' and value in [\'\', \'/\']:\n+        if field.getName() == "root" and value in ["", "/"]:\n             # these valid values don\'t pass validation of SearchableTextSourceBinder\n             field.set(self.assignment, value)\n         else:\n@@ -209,49 +198,48 @@ def import_node(self, interface, child):\n             field.set(self.assignment, value)\n \n     def export_field(self, doc, field):\n-        """Turn a zope.schema field into a node and return it\n-        """\n+        """Turn a zope.schema field into a node and return it"""\n         field = field.bind(self.assignment)\n         value = field.get(self.assignment)\n \n-        child = doc.createElement(\'property\')\n-        child.setAttribute(\'name\', field.__name__)\n+        child = doc.createElement("property")\n+        child.setAttribute("name", field.__name__)\n \n         if value is not None:\n             if ICollection.providedBy(field):\n                 for e in value:\n-                    list_element = doc.createElement(\'element\')\n+                    list_element = doc.createElement("element")\n                     list_element.appendChild(doc.createTextNode(str(e)))\n                     child.appendChild(list_element)\n             else:\n-                child.appendChild(doc.createTextNode(six.text_type(value)))\n+                child.appendChild(doc.createTextNode(str(value)))\n \n         return child\n \n     def extract_text(self, node):\n         node.normalize()\n-        text = u""\n+        text = ""\n         for child in node.childNodes:\n-            if child.nodeType == node.TEXT_NODE or child.nodeType == node.CDATA_SECTION_NODE:\n+            if (\n+                child.nodeType == node.TEXT_NODE\n+                or child.nodeType == node.CDATA_SECTION_NODE\n+            ):\n                 text += child.nodeValue\n         return text\n \n     def from_unicode(self, field, value):\n-\n         # XXX: Bool incorrectly omits to declare that it implements\n         # IFromUnicode, even though it does.\n-        import zope.schema\n-        if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):\n+        if IFromUnicode.providedBy(field) or isinstance(field, Bool):\n             return field.fromUnicode(value)\n-        else:\n-            return self.field_typecast(field, value)\n+        return self.field_typecast(field, value)\n \n     def field_typecast(self, field, value):\n         # A slight hack to force sequence types to the right type\n-        typecast = getattr(field, \'_type\', None)\n+        typecast = getattr(field, "_type", None)\n         if typecast is not None:\n             if not isinstance(typecast, (list, tuple)):\n-                typecast = (typecast, )\n+                typecast = (typecast,)\n             for tc in reversed(typecast):\n                 if callable(tc):\n                     try:\n@@ -263,36 +251,33 @@ def field_typecast(self, field, value):\n \n \n @implementer(IBody)\n+@adapter(IComponentRegistry, ISetupEnviron)\n class PortletsXMLAdapter(XMLAdapterBase):\n-    """In- and exporter for a local portlet configuration\n-    """\n-    adapts(IComponentRegistry, ISetupEnviron)\n+    """In- and exporter for a local portlet configuration"""\n \n-    name = \'portlets\'\n-    _LOGGER_ID = \'portlets\'\n+    name = "portlets"\n+    _LOGGER_ID = "portlets"\n \n     #\n     # Main control flow\n     #\n \n     def _exportNode(self):\n-        """Export portlet managers and portlet types\n-        """\n-        node = self._doc.createElement(\'portlets\')\n+        """Export portlet managers and portlet types"""\n+        node = self._doc.createElement("portlets")\n         node.appendChild(self._extractPortlets())\n-        self._logger.info(\'Portlets exported\')\n+        self._logger.info("Portlets exported")\n         return node\n \n     def _importNode(self, node):\n-        """Import portlet managers, portlet types and portlet assignments\n-        """\n+        """Import portlet managers, portlet types and portlet assignments"""\n         self._initProvider(node)\n-        self._logger.info(\'Portlets imported\')\n+        self._logger.info("Portlets imported")\n \n     def _initProvider(self, node):\n         purge = self.environ.shouldPurge()\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n         if purge:\n             self._purgePortlets()\n         self._initPortlets(node)\n@@ -308,8 +293,11 @@ def _purgePortlets(self):\n \n         # Purge portlet types\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided == IPortletType]\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n         for name, portletType in getUtilitiesFor(IPortletType):\n             if name in registeredPortletTypes:\n@@ -319,7 +307,9 @@ def _purgePortlets(self):\n         site = self.environ.getSite()\n \n         for name, portletManager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, portletManager), IPortletAssignmentMapping)\n+            assignable = queryMultiAdapter(\n+                (site, portletManager), IPortletAssignmentMapping\n+            )\n             if assignable is not None:\n                 for key in list(assignable.keys()):\n                     del assignable[key]\n@@ -327,46 +317,47 @@ def _purgePortlets(self):\n         # Purge portlet manager registrations - this will also get rid of\n         # global portlet registrations, since these utilities disappear\n \n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n \n         for registration in portletManagerRegistrations:\n-            self.context.unregisterUtility(provided=registration.provided,\n-                                           name=registration.name)\n+            self.context.unregisterUtility(\n+                provided=registration.provided, name=registration.name\n+            )\n \n     #\n     # Importing\n     #\n \n     def _initPortlets(self, node):\n-        """Actually import portlet data\n-        """\n+        """Actually import portlet data"""\n         for child in node.childNodes:\n             # Portlet managers\n-            if child.nodeName.lower() == \'portletmanager\':\n+            if child.nodeName.lower() == "portletmanager":\n                 self._initPortletManagerNode(child)\n-            elif child.nodeName.lower() == \'portlet\':\n+            elif child.nodeName.lower() == "portlet":\n                 self._initPortletNode(child)\n             # Portlet assignments\n-            elif child.nodeName.lower() == \'assignment\':\n+            elif child.nodeName.lower() == "assignment":\n                 self._initAssignmentNode(child)\n             # Blacklisting (portlet blocking/unblocking)\n-            elif child.nodeName.lower() == \'blacklist\':\n+            elif child.nodeName.lower() == "blacklist":\n                 self._initBlacklistNode(child)\n \n     def _initPortletManagerNode(self, node):\n-        """Create a portlet manager from a node\n-        """\n-        name = str(node.getAttribute(\'name\'))\n+        """Create a portlet manager from a node"""\n+        name = str(node.getAttribute("name"))\n \n-        if node.hasAttribute(\'remove\'):\n-            if self._convertToBoolean(node.getAttribute(\'remove\')):\n-                self.context.unregisterUtility(provided=IPortletManager,\n-                                               name=name)\n+        if node.hasAttribute("remove"):\n+            if self._convertToBoolean(node.getAttribute("remove")):\n+                self.context.unregisterUtility(provided=IPortletManager, name=name)\n                 return\n \n-        if node.hasAttribute(\'purge\'):\n-            if self._convertToBoolean(node.getAttribute(\'purge\')):\n+        if node.hasAttribute("purge"):\n+            if self._convertToBoolean(node.getAttribute("purge")):\n                 manager = getUtility(IPortletManager, name=name)\n                 # remove global assignments\n                 for category in manager.keys():\n@@ -379,16 +370,19 @@ def _initPortletManagerNode(self, node):\n                     del mapping[portlet]\n                 return\n \n-        registeredPortletManagers = [r.name for r in self.context.registeredUtilities()\n-                                        if r.provided.isOrExtends(IPortletManager)]\n+        registeredPortletManagers = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name not in registeredPortletManagers:\n-            managerClass = node.getAttribute(\'class\')\n+            managerClass = node.getAttribute("class")\n             if managerClass:\n                 manager = _resolveDottedName(managerClass)()\n             else:\n                 manager = PortletManager()\n \n-            managerType = node.getAttribute(\'type\')\n+            managerType = node.getAttribute("type")\n             if managerType:\n                 alsoProvides(manager, _resolveDottedName(managerType))\n \n@@ -396,55 +390,55 @@ def _initPortletManagerNode(self, node):\n             manager[GROUP_CATEGORY] = PortletCategoryMapping()\n             manager[CONTENT_TYPE_CATEGORY] = PortletCategoryMapping()\n \n-            self.context.registerUtility(component=manager,\n-                                         provided=IPortletManager,\n-                                         name=name)\n+            self.context.registerUtility(\n+                component=manager, provided=IPortletManager, name=name\n+            )\n \n     def _initPortletNode(self, node):\n-        """Create a portlet type from a node\n-        """\n+        """Create a portlet type from a node"""\n         registeredPortletTypes = [\n-          r.name for r in self.context.registeredUtilities() \\\n-                          if r.provided == IPortletType]\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n \n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n \n-        #In certain cases, continue to the next node\n-        if node.hasAttribute(\'remove\'):\n+        # In certain cases, continue to the next node\n+        if node.hasAttribute("remove"):\n             self._removePortlet(name=addview)\n             return\n         if self._checkBasicPortletNodeErrors(node, registeredPortletTypes):\n             return\n \n-        #Retrieve or create the portlet type and determine the current list\n-        #of associated portlet manager interfaces (for_)\n+        # Retrieve or create the portlet type and determine the current list\n+        # of associated portlet manager interfaces (for_)\n         if extend:\n-            #To extend a portlet type that is registered, we modify the title\n-            #and description if provided by the profile.\n-            portlet = queryUtility(IPortletType, name = addview)\n-            if str(node.getAttribute(\'title\')):\n-                portlet.title = str(node.getAttribute(\'title\'))\n-            if str(node.getAttribute(\'description\')):\n-                portlet.description = str(node.getAttribute(\'description\'))\n+            # To extend a portlet type that is registered, we modify the title\n+            # and description if provided by the profile.\n+            portlet = queryUtility(IPortletType, name=addview)\n+            if str(node.getAttribute("title")):\n+                portlet.title = str(node.getAttribute("title"))\n+            if str(node.getAttribute("description")):\n+                portlet.description = str(node.getAttribute("description"))\n             for_ = portlet.for_\n             if for_ is None:\n                 for_ = []\n         else:\n-            #Otherwise, create a new portlet type with the correct attributes.\n+            # Otherwise, create a new portlet type with the correct attributes.\n             portlet = PortletType()\n-            portlet.title = str(node.getAttribute(\'title\'))\n-            portlet.description = str(node.getAttribute(\'description\'))\n+            portlet.title = str(node.getAttribute("title"))\n+            portlet.description = str(node.getAttribute("description"))\n             portlet.addview = addview\n             for_ = []\n \n-\n-        #Process the node\'s child "for" nodes to add or remove portlet\n-        #manager interface names to the for_ list\n+        # Process the node\'s child "for" nodes to add or remove portlet\n+        # manager interface names to the for_ list\n         for_ = self._modifyForList(node, for_)\n \n-        #Store the for_ attribute, with [IDefaultPortletManager] as the default\n+        # Store the for_ attribute, with [IDefaultPortletManager] as the default\n         if for_ == []:\n             for_ = [IDefaultPortletManager]\n         portlet.for_ = for_\n@@ -452,41 +446,38 @@ def _initPortletNode(self, node):\n         if purge:\n             self._removePortlet(addview)\n         if not extend:\n-            self.context.registerUtility(component=portlet,\n-                                         provided=IPortletType,\n-                                         name=addview)\n+            self.context.registerUtility(\n+                component=portlet, provided=IPortletType, name=addview\n+            )\n \n     def _initAssignmentNode(self, node):\n-        """Create an assignment from a node\n-        """\n+        """Create an assignment from a node"""\n         site = self.environ.getSite()\n \n         # 1. Determine the assignment mapping and the name\n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        key = node.getAttribute(\'key\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        key = node.getAttribute("key")\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n-        if six.PY2:\n-            key = key.encode()\n \n         purge = False\n-        if node.hasAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.hasAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n \n         mapping = assignment_mapping_from_key(site, manager, category, key, create=True)\n \n         # 2. Either find or create the assignment\n \n         assignment = None\n-        name = node.getAttribute(\'name\')\n+        name = node.getAttribute("name")\n         if name:\n             name = str(name)\n             assignment = mapping.get(name, None)\n \n         __traceback_info__ = "Assignment name: " + name\n \n-        if node.hasAttribute(\'remove\'):\n+        if node.hasAttribute("remove"):\n             if assignment is not None:\n                 del mapping[name]\n             return\n@@ -496,7 +487,7 @@ def _initAssignmentNode(self, node):\n                 del mapping[portlet]\n             return\n \n-        type_ = str(node.getAttribute(\'type\'))\n+        type_ = str(node.getAttribute("type"))\n \n         if assignment is None:\n             portlet_factory = getUtility(IFactory, name=type_)\n@@ -512,10 +503,10 @@ def _initAssignmentNode(self, node):\n         assignment = assignment.__of__(site)\n \n         # set visibility setting\n-        visible = node.getAttribute(\'visible\')\n+        visible = node.getAttribute("visible")\n         if visible:\n             settings = IPortletAssignmentSettings(assignment)\n-            settings[\'visible\'] = self._convertToBoolean(visible)\n+            settings["visible"] = self._convertToBoolean(visible)\n \n         # 3. Use an adapter to update the portlet settings\n \n@@ -525,7 +516,7 @@ def _initAssignmentNode(self, node):\n \n         # 4. Handle ordering\n \n-        insert_before = node.getAttribute(\'insert-before\')\n+        insert_before = node.getAttribute("insert-before")\n         if insert_before:\n             position = None\n             keys = list(mapping.keys())\n@@ -541,18 +532,17 @@ def _initAssignmentNode(self, node):\n                 mapping.updateOrder(keys)\n \n     def _initBlacklistNode(self, node):\n-        """Create a blacklisting from a node\n-        """\n+        """Create a blacklisting from a node"""\n         site = self.environ.getSite()\n \n-        manager = node.getAttribute(\'manager\')\n-        category = node.getAttribute(\'category\')\n-        location = str(node.getAttribute(\'location\'))\n-        status = node.getAttribute(\'status\')\n+        manager = node.getAttribute("manager")\n+        category = node.getAttribute("category")\n+        location = str(node.getAttribute("location"))\n+        status = node.getAttribute("status")\n \n         manager = getUtility(IPortletManager, name=manager)\n \n-        if location.startswith(\'/\'):\n+        if location.startswith("/"):\n             location = location[1:]\n \n         item = site.unrestrictedTraverse(location, None)\n@@ -561,34 +551,40 @@ def _initBlacklistNode(self, node):\n \n         assignable = queryMultiAdapter((item, manager), ILocalPortletAssignmentManager)\n \n-        if status.lower() == \'block\':\n+        if status.lower() == "block":\n             assignable.setBlacklistStatus(category, True)\n-        elif status.lower() == \'show\':\n+        elif status.lower() == "show":\n             assignable.setBlacklistStatus(category, False)\n-        elif status.lower() == \'acquire\':\n+        elif status.lower() == "acquire":\n             assignable.setBlacklistStatus(category, None)\n \n-\n     #\n     # Exporting\n     #\n \n     def _extractPortlets(self):\n-        """Write portlet managers and types to XML\n-        """\n+        """Write portlet managers and types to XML"""\n         fragment = self._doc.createDocumentFragment()\n         site = self.environ.getSite()\n \n-        registeredPortletTypes = [r.name for r in self.context.registeredUtilities()\n-                                            if r.provided == IPortletType]\n-        portletManagerRegistrations = [r for r in self.context.registeredUtilities()\n-                                            if r.provided.isOrExtends(IPortletManager)]\n-\n-        portletSchemata = dict([(iface, name) for name, iface in getUtilitiesFor(IPortletTypeInterface)])\n+        registeredPortletTypes = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == IPortletType\n+        ]\n+        portletManagerRegistrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n+\n+        portletSchemata = {\n+            iface: name for name, iface in getUtilitiesFor(IPortletTypeInterface)\n+        }\n \n         # Export portlet manager registrations\n \n-        for r in sorted(portletManagerRegistrations, key=attrgetter(\'name\')):\n+        for r in sorted(portletManagerRegistrations, key=attrgetter("name")):\n             fragment.appendChild(self._extractPortletManagerNode(r))\n \n         # Export portlet type registrations\n@@ -606,18 +602,18 @@ def extractMapping(manager_name, category, key, mapping):\n                         break\n \n                 if type_ is not None:\n-                    child = self._doc.createElement(\'assignment\')\n-                    child.setAttribute(\'manager\', manager_name)\n-                    child.setAttribute(\'category\', category)\n-                    child.setAttribute(\'key\', key)\n-                    child.setAttribute(\'type\', type_)\n-                    child.setAttribute(\'name\', name)\n+                    child = self._doc.createElement("assignment")\n+                    child.setAttribute("manager", manager_name)\n+                    child.setAttribute("category", category)\n+                    child.setAttribute("key", key)\n+                    child.setAttribute("type", type_)\n+                    child.setAttribute("name", name)\n \n                     assignment = assignment.__of__(mapping)\n \n                     settings = IPortletAssignmentSettings(assignment)\n-                    visible = settings.get(\'visible\', True)\n-                    child.setAttribute(\'visible\', repr(visible))\n+                    visible = settings.get("visible", True)\n+                    child.setAttribute("visible", repr(visible))\n \n                     handler = IPortletAssignmentExportImportHandler(assignment)\n                     handler.export_assignment(schema, self._doc, child)\n@@ -630,31 +626,37 @@ def extractMapping(manager_name, category, key, mapping):\n                     mapping = mapping.__of__(site)\n                     extractMapping(manager_name, category, key, mapping)\n \n-\n         # Export assignments at the root of the portal (only)\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n             mapping = queryMultiAdapter((site, manager), IPortletAssignmentMapping)\n             mapping = mapping.__of__(site)\n-            extractMapping(manager_name, CONTEXT_CATEGORY, u"/", mapping)\n+            extractMapping(manager_name, CONTEXT_CATEGORY, "/", mapping)\n \n         # Export blacklistings in the portal root\n         for manager_name, manager in getUtilitiesFor(IPortletManager):\n-            assignable = queryMultiAdapter((site, manager), ILocalPortletAssignmentManager)\n+            assignable = queryMultiAdapter(\n+                (site, manager), ILocalPortletAssignmentManager\n+            )\n             if assignable is None:\n                 continue\n-            for category in (USER_CATEGORY, GROUP_CATEGORY, CONTENT_TYPE_CATEGORY, CONTEXT_CATEGORY):\n-                child = self._doc.createElement(\'blacklist\')\n-                child.setAttribute(\'manager\', manager_name)\n-                child.setAttribute(\'category\', category)\n-                child.setAttribute(\'location\', u"/")\n+            for category in (\n+                USER_CATEGORY,\n+                GROUP_CATEGORY,\n+                CONTENT_TYPE_CATEGORY,\n+                CONTEXT_CATEGORY,\n+            ):\n+                child = self._doc.createElement("blacklist")\n+                child.setAttribute("manager", manager_name)\n+                child.setAttribute("category", category)\n+                child.setAttribute("location", "/")\n \n                 status = assignable.getBlacklistStatus(category)\n                 if status == True:\n-                    child.setAttribute(\'status\', u\'block\')\n+                    child.setAttribute("status", "block")\n                 elif status == False:\n-                    child.setAttribute(\'status\', u\'show\')\n+                    child.setAttribute("status", "show")\n                 else:\n-                    child.setAttribute(\'status\', u\'acquire\')\n+                    child.setAttribute("status", "acquire")\n \n                 fragment.appendChild(child)\n \n@@ -662,31 +664,31 @@ def extractMapping(manager_name, category, key, mapping):\n \n     def _extractPortletManagerNode(self, portletManagerRegistration):\n         r = portletManagerRegistration\n-        child = self._doc.createElement(\'portletmanager\')\n+        child = self._doc.createElement("portletmanager")\n         if r.component.__class__ is not PortletManager:\n-            child.setAttribute(\'class\', _getDottedName(r.component.__class__))\n-        child.setAttribute(\'name\', r.name)\n+            child.setAttribute("class", _getDottedName(r.component.__class__))\n+        child.setAttribute("name", r.name)\n \n         specificInterface = next(providedBy(r.component).flattened())\n         if specificInterface != IPortletManager:\n-            child.setAttribute(\'type\', _getDottedName(specificInterface))\n+            child.setAttribute("type", _getDottedName(specificInterface))\n \n         return child\n \n     def _extractPortletNode(self, name, portletType):\n-        child = self._doc.createElement(\'portlet\')\n-        child.setAttribute(\'addview\', portletType.addview)\n-        child.setAttribute(\'title\', portletType.title)\n-        child.setAttribute(\'description\', portletType.description)\n+        child = self._doc.createElement("portlet")\n+        child.setAttribute("addview", portletType.addview)\n+        child.setAttribute("title", portletType.title)\n+        child.setAttribute("description", portletType.description)\n \n         for_ = portletType.for_\n-        #BBB\n+        # BBB\n \n         # [Interface] is previous default value\n         if for_ and for_ not in ([IDefaultPortletManager], [Interface]):\n             for i in for_:\n-                subNode = self._doc.createElement(\'for\')\n-                subNode.setAttribute(\'interface\', _getDottedName(i))\n+                subNode = self._doc.createElement("for")\n+                subNode.setAttribute("interface", _getDottedName(i))\n                 child.appendChild(subNode)\n         return child\n \n@@ -695,22 +697,27 @@ def _extractPortletNode(self, name, portletType):\n     #\n \n     def _checkBasicPortletNodeErrors(self, node, registeredPortletTypes):\n-        addview = str(node.getAttribute(\'addview\'))\n-        extend = node.hasAttribute(\'extend\')\n-        purge = node.hasAttribute(\'purge\')\n+        addview = str(node.getAttribute("addview"))\n+        extend = node.hasAttribute("extend")\n+        purge = node.hasAttribute("purge")\n         exists = addview in registeredPortletTypes\n \n         if extend and purge:\n-            self._logger.warning(\'Cannot extend and purge the same \' \\\n-              \'portlet type %s!\' % addview)\n+            self._logger.warning(\n+                "Cannot extend and purge the same " "portlet type %s!" % addview\n+            )\n             return True\n         if extend and not exists:\n-            self._logger.warning(\'Cannot extend portlet type \' \\\n-              \'%s because it is not registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot extend portlet type "\n+                "%s because it is not registered." % addview\n+            )\n             return True\n         if exists and not purge and not extend:\n-            self._logger.warning(\'Cannot register portlet type \' \\\n-              \'%s because it is already registered.\' % addview)\n+            self._logger.warning(\n+                "Cannot register portlet type "\n+                "%s because it is already registered." % addview\n+            )\n             return True\n \n         return False\n@@ -720,8 +727,10 @@ def _removePortlet(self, name):\n             self.context.unregisterUtility(provided=IPortletType, name=name)\n             return True\n         else:\n-            self._logger.warning(\'Unable to unregister portlet type \' \\\n-              \'%s because it is not registered.\' % name)\n+            self._logger.warning(\n+                "Unable to unregister portlet type "\n+                "%s because it is not registered." % name\n+            )\n             return False\n \n     def _modifyForList(self, node, for_):\n@@ -731,9 +740,9 @@ def _modifyForList(self, node, for_):\n         modified_for = [_getDottedName(i) for i in for_]\n \n         for subNode in node.childNodes:\n-            if subNode.nodeName.lower() == \'for\':\n-                interface_name = str(subNode.getAttribute(\'interface\'))\n-                if subNode.hasAttribute(\'remove\'):\n+            if subNode.nodeName.lower() == "for":\n+                interface_name = str(subNode.getAttribute("interface"))\n+                if subNode.hasAttribute("remove"):\n                     if interface_name in modified_for:\n                         modified_for.remove(interface_name)\n                 elif interface_name not in modified_for:\n@@ -742,18 +751,20 @@ def _modifyForList(self, node, for_):\n         if node.hasAttribute("for"):\n             raise InvalidPortletForDefinition(node)\n \n-        modified_for = [_resolveDottedName(name) for name in modified_for \\\n-          if _resolveDottedName(name) is not None]\n+        modified_for = [\n+            _resolveDottedName(name)\n+            for name in modified_for\n+            if _resolveDottedName(name) is not None\n+        ]\n \n         return modified_for\n \n \n def importPortlets(context):\n-    """Import portlet managers and portlets\n-    """\n+    """Import portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n@@ -761,21 +772,20 @@ def importPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    importer = queryMultiAdapter((sm, context), IBody, name=\'plone.portlets\')\n+    importer = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if importer:\n-        filename = \'%s%s\' % (importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n-            importer.filename = filename # for error reporting\n+            importer.filename = filename  # for error reporting\n             importer.body = body\n \n \n def exportPortlets(context):\n-    """Export portlet managers and portlets\n-    """\n+    """Export portlet managers and portlets"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'portlets\')\n+        logger = context.getLogger("portlets")\n         logger.info("Nothing to export.")\n         return\n \n@@ -783,9 +793,9 @@ def exportPortlets(context):\n     # and slightly simplified. The main difference is the lookup of a named\n     # adapter to make it possible to have more than one handler for the same\n     # object, which in case of a component registry is crucial.\n-    exporter = queryMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+    exporter = queryMultiAdapter((sm, context), IBody, name="plone.portlets")\n     if exporter:\n-        filename = \'%s%s\' % (exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\n@@ -802,4 +812,6 @@ class InvalidPortletForDefinition(Exception):\n \n     def __init__(self, node):\n         node = node.toxml()\n-        self.args = [self.message % node, ]\n+        self.args = [\n+            self.message % node,\n+        ]\ndiff --git a/plone/app/portlets/interfaces.py b/plone/app/portlets/interfaces.py\nindex 47babe76..bde17c68 100644\n--- a/plone/app/portlets/interfaces.py\n+++ b/plone/app/portlets/interfaces.py\n@@ -1,10 +1,8 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPlacelessPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from zope.interface import Interface\n \n \n class IPortletTypeInterface(Interface):\n@@ -15,13 +13,11 @@ class IPortletTypeInterface(Interface):\n \n \n class IUserPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """A portlet assignment mapping that\'s user-specific\n-    """\n+    """A portlet assignment mapping that\'s user-specific"""\n \n \n class IGroupDashboardPortletAssignmentMapping(IPortletAssignmentMapping):\n-    """Group portlets storage. Has its own security checker.\n-    """\n+    """Group portlets storage. Has its own security checker."""\n \n \n class IPortletPermissionChecker(Interface):\n@@ -36,8 +32,7 @@ def __call__():\n \n \n class IDefaultPortletManager(IPortletManager):\n-    """Default registration for portlets\n-    """\n+    """Default registration for portlets"""\n \n \n class IColumn(IDefaultPortletManager):\n@@ -61,12 +56,14 @@ class IRightColumn(IColumn):\n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IFooter(IColumn):\n     """The footer\n \n     Normally, you will register portlets for IColumn instead.\n     """\n \n+\n class IDashboard(IDefaultPortletManager, IPlacelessPortletManager):\n     """Common base class for dashboard columns\n \n@@ -123,4 +120,4 @@ def __call__(self):\n \n \n class ITopbarManagePortlets(Interface):\n-    pass\n\\ No newline at end of file\n+    pass\ndiff --git a/plone/app/portlets/manager.py b/plone/app/portlets/manager.py\nindex 786cf8eb..90743b7d 100644\n--- a/plone/app/portlets/manager.py\n+++ b/plone/app/portlets/manager.py\n@@ -1,43 +1,51 @@\n-# -*- coding: utf-8 -*-\n-import logging\n-import sys\n-\n-from zope.component import adapts, getMultiAdapter\n+from .interfaces import IColumn\n+from .interfaces import IDashboard\n+from Acquisition import aq_acquire\n+from Acquisition import aq_inner\n+from Acquisition import Explicit\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from ZODB.POSException import ConflictError\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserView\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from Acquisition import Explicit, aq_inner, aq_acquire\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from ZODB.POSException import ConflictError\n+import logging\n+import sys\n \n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.manager import PortletManagerRenderer as BasePortletManagerRenderer\n-from plone.app.portlets.interfaces import IColumn\n-from plone.app.portlets.interfaces import IDashboard\n \n-logger = logging.getLogger(\'portlets\')\n+logger = logging.getLogger("portlets")\n \n \n class PortletManagerRenderer(BasePortletManagerRenderer, Explicit):\n-    """A Zope 2 implementation of the default PortletManagerRenderer\n-    """\n+    """A Zope 2 implementation of the default PortletManagerRenderer"""\n \n     def _dataToPortlet(self, data):\n         """Helper method to get the correct IPortletRenderer for the given\n         data object.\n         """\n-        portlet = getMultiAdapter((self.context, self.request, self.__parent__,\n-                                  self.manager, data, ), IPortletRenderer)\n+        portlet = getMultiAdapter(\n+            (\n+                self.context,\n+                self.request,\n+                self.__parent__,\n+                self.manager,\n+                data,\n+            ),\n+            IPortletRenderer,\n+        )\n         return portlet\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n class ColumnPortletManagerRenderer(PortletManagerRenderer):\n-    """A renderer for the column portlets\n-    """\n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IColumn)\n-    template = ViewPageTemplateFile(\'browser/templates/column.pt\')\n-    error_message = ViewPageTemplateFile(\'browser/templates/error_message.pt\')\n+    """A renderer for the column portlets"""\n+\n+    template = ViewPageTemplateFile("browser/templates/column.pt")\n+    error_message = ViewPageTemplateFile("browser/templates/error_message.pt")\n \n     def _context(self):\n         return aq_inner(self.context)\n@@ -46,8 +54,15 @@ def base_url(self):\n         """If context is a default-page, return URL of folder, else\n         return URL of context.\n         """\n-        return str(getMultiAdapter((self._context(), self.request, ),\n-                                   name=u\'absolute_url\'))\n+        return str(\n+            getMultiAdapter(\n+                (\n+                    self._context(),\n+                    self.request,\n+                ),\n+                name="absolute_url",\n+            )\n+        )\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -55,14 +70,13 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % self)\n-            aq_acquire(self, \'error_log\').raising(sys.exc_info())\n+            logger.exception("Error while rendering %r" % self)\n+            aq_acquire(self, "error_log").raising(sys.exc_info())\n             return self.error_message()\n \n \n+@adapter(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n class DashboardPortletManagerRenderer(ColumnPortletManagerRenderer):\n-    """Render a column of the dashboard\n-    """\n+    """Render a column of the dashboard"""\n \n-    adapts(Interface, IDefaultBrowserLayer, IBrowserView, IDashboard)\n-    template = ViewPageTemplateFile(\'browser/templates/dashboard-column.pt\')\n+    template = ViewPageTemplateFile("browser/templates/dashboard-column.pt")\ndiff --git a/plone/app/portlets/metaconfigure.py b/plone/app/portlets/metaconfigure.py\nindex a5de87c4..2dff5aae 100644\n--- a/plone/app/portlets/metaconfigure.py\n+++ b/plone/app/portlets/metaconfigure.py\n@@ -1,31 +1,35 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface, alsoProvides\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserView\n-\n+from .browser.interfaces import IPortletAdding\n+from .interfaces import IPortletTypeInterface\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.browser.interfaces import IPortletAdding\n-\n+from Products.Five.browser.metaconfigure import page\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component.factory import Factory\n+from zope.component.interfaces import IFactory\n from zope.component.zcml import adapter\n from zope.component.zcml import utility\n+from zope.interface import alsoProvides\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from zope.component.interfaces import IFactory\n-from zope.component.factory import Factory\n-\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.Five.browser.metaconfigure import page\n \n # Keep track of which renderers we\'ve registered so that we can artifically\n # subclass them in portletRendererDirective. Yes, this is evil.\n _default_renderers = {}\n \n \n-def portletDirective(_context, name, interface, assignment, renderer, addview,\n-        view_permission=u"zope2.View", edit_permission="plone.app.portlets.ManageOwnPortlets", editview=None):\n+def portletDirective(\n+    _context,\n+    name,\n+    interface,\n+    assignment,\n+    renderer,\n+    addview,\n+    view_permission="zope2.View",\n+    edit_permission="plone.app.portlets.ManageOwnPortlets",\n+    editview=None,\n+):\n     """Register a portlet assignment type using typical options.\n \n     Portlets that consist of a simple assignment class deriving form\n@@ -45,17 +49,11 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     # again (in the GS handler)\n \n     alsoProvides(interface, IPortletTypeInterface)\n-    utility(_context,\n-            provides=IPortletTypeInterface,\n-            name=name,\n-            component=interface)\n+    utility(_context, provides=IPortletTypeInterface, name=name, component=interface)\n \n     # Register a factory\n \n-    utility(_context,\n-            provides=IFactory,\n-            name=name,\n-            component=Factory(assignment))\n+    utility(_context, provides=IFactory, name=name, component=Factory(assignment))\n \n     # Set permissions on the assignment class\n \n@@ -81,8 +79,18 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   provides="plone.portlets.interfaces.IPortletRenderer"\n     #   />\n \n-    adapter(_context, (renderer, ), provides=IPortletRenderer,\n-            for_=(Interface, IDefaultBrowserLayer, IBrowserView, IPortletManager, interface))\n+    adapter(\n+        _context,\n+        (renderer,),\n+        provides=IPortletRenderer,\n+        for_=(\n+            Interface,\n+            IDefaultBrowserLayer,\n+            IBrowserView,\n+            IPortletManager,\n+            interface,\n+        ),\n+    )\n     _default_renderers[interface] = renderer\n \n     # Register the adding view\n@@ -94,11 +102,13 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   permission="[edit_permission]"\n     #   />\n \n-    page(_context,\n-         for_=IPortletAdding,\n-         name=name,\n-         class_=addview,\n-         permission=edit_permission)\n+    page(\n+        _context,\n+        for_=IPortletAdding,\n+        name=name,\n+        class_=addview,\n+        permission=edit_permission,\n+    )\n \n     # Register the edit view, if applicable\n \n@@ -110,17 +120,26 @@ def portletDirective(_context, name, interface, assignment, renderer, addview,\n     #   />\n \n     if editview is not None:\n-        page(_context,\n-             for_=interface,\n-             name="edit",\n-             class_=editview,\n-             permission=edit_permission)\n-\n-\n-def portletRendererDirective(_context, portlet, class_=None, template=None,\n-        for_=Interface, layer=IDefaultBrowserLayer, view=IBrowserView, manager=IPortletManager):\n-    """Register a custom/override portlet renderer\n-    """\n+        page(\n+            _context,\n+            for_=interface,\n+            name="edit",\n+            class_=editview,\n+            permission=edit_permission,\n+        )\n+\n+\n+def portletRendererDirective(\n+    _context,\n+    portlet,\n+    class_=None,\n+    template=None,\n+    for_=Interface,\n+    layer=IDefaultBrowserLayer,\n+    view=IBrowserView,\n+    manager=IPortletManager,\n+):\n+    """Register a custom/override portlet renderer"""\n \n     if class_ is None and template is None:\n         raise TypeError("Either \'template\' or \'class\' must be given")\n@@ -132,12 +151,22 @@ def portletRendererDirective(_context, portlet, class_=None, template=None,\n         # Look up the default renderer for this portlet\n         base_class = _default_renderers.get(portlet, None)\n         if base_class is None:\n-            raise TypeError("Can\'t find default renderer for %s. "\n-                            "Perhaps the portlet has not been registered yet?" % portlet.__identifier__)\n+            raise TypeError(\n+                "Can\'t find default renderer for %s. "\n+                "Perhaps the portlet has not been registered yet?"\n+                % portlet.__identifier__\n+            )\n \n         # Generate a subclass with \'renderer\' using this template\n-        class_ = type("PortletRenderer from %s" % template.encode(\'UTF-8\'),\n-                            (base_class, ), {\'render\': ViewPageTemplateFile(template)})\n-\n-    adapter(_context, (class_, ), provides=IPortletRenderer,\n-                for_=(for_, layer, view, manager, portlet))\n+        class_ = type(\n+            "PortletRenderer from %s" % template.encode("UTF-8"),\n+            (base_class,),\n+            {"render": ViewPageTemplateFile(template)},\n+        )\n+\n+    adapter(\n+        _context,\n+        (class_,),\n+        provides=IPortletRenderer,\n+        for_=(for_, layer, view, manager, portlet),\n+    )\ndiff --git a/plone/app/portlets/metadirectives.py b/plone/app/portlets/metadirectives.py\nindex 3885b0fa..c00664cb 100644\n--- a/plone/app/portlets/metadirectives.py\n+++ b/plone/app/portlets/metadirectives.py\n@@ -1,13 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Interface\n-\n+from . import PloneMessageFactory as _\n+from plone.portlets.interfaces import IPortletManager\n from zope import schema\n from zope.configuration import fields as configuration_fields\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer, IBrowserView\n-from plone.portlets.interfaces import IPortletManager\n-\n-from plone.app.portlets import PloneMessageFactory as _\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserView\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n \n class IPortletDirective(Interface):\n@@ -18,63 +15,66 @@ class IPortletDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title=_(u"Name"),\n-        description=_(u"A unique name for the portlet. Also used for its add view."),\n-        required=True)\n+        title=_("Name"),\n+        description=_("A unique name for the portlet. Also used for its add view."),\n+        required=True,\n+    )\n \n     interface = configuration_fields.GlobalInterface(\n-        title=_(u"Assignment type interface"),\n-        description=_(u"Should correspond to the public interface of the assignment"),\n-        required=True)\n+        title=_("Assignment type interface"),\n+        description=_("Should correspond to the public interface of the assignment"),\n+        required=True,\n+    )\n \n     assignment = configuration_fields.GlobalObject(\n-        title=_(u"Assignment class"),\n-        description=_(u"A persistent class storing the portlet assignment"),\n-        required=True)\n+        title=_("Assignment class"),\n+        description=_("A persistent class storing the portlet assignment"),\n+        required=True,\n+    )\n \n     view_permission = schema.TextLine(\n-        title=_(u"View permission"),\n-        description=_(u"Permission used for viewing the portlet."),\n+        title=_("View permission"),\n+        description=_("Permission used for viewing the portlet."),\n         required=False,\n-        default=u"zope2.View"\n-        )\n+        default="zope2.View",\n+    )\n \n     edit_permission = schema.TextLine(\n-        title=_(u"Edit permission"),\n-        description=_(u"Permission used for editing the portlet assignment."),\n+        title=_("Edit permission"),\n+        description=_("Permission used for editing the portlet assignment."),\n         required=False,\n-        default=u"plone.app.portlets.ManageOwnPortlets"\n-        )\n+        default="plone.app.portlets.ManageOwnPortlets",\n+    )\n \n     renderer = configuration_fields.GlobalObject(\n-        title=_(u"Renderer"),\n-        description=_(u"A class which renders the portlet data provider"),\n-        required=True\n-        )\n+        title=_("Renderer"),\n+        description=_("A class which renders the portlet data provider"),\n+        required=True,\n+    )\n \n     addview = configuration_fields.GlobalObject(\n-        title=_(u"Add view"),\n-        description=_(u"View used to add the assignment object"),\n-        required=True\n-        )\n+        title=_("Add view"),\n+        description=_("View used to add the assignment object"),\n+        required=True,\n+    )\n \n     editview = configuration_fields.GlobalObject(\n-        title=_(u"Edit view"),\n-        description=_(u"View used to edit the assignment object (if appropriate)"),\n-        required=False\n-        )\n+        title=_("Edit view"),\n+        description=_("View used to edit the assignment object (if appropriate)"),\n+        required=False,\n+    )\n \n \n class IPortletRendererDirective(Interface):\n-    """Register a portlet renderer, i.e. a different view of a portlet\n-    """\n+    """Register a portlet renderer, i.e. a different view of a portlet"""\n \n     # The portlet data provider type must be given\n \n     portlet = configuration_fields.GlobalObject(\n         title=_("Portlet data provider type for which this renderer is used"),\n         description=_("An interface or class"),\n-        required=True)\n+        required=True,\n+    )\n \n     # Use either class or template to specify the custom renderer\n \n@@ -82,13 +82,15 @@ class IPortletRendererDirective(Interface):\n         title=_("Class"),\n         description=_("A class acting as the renderer."),\n         required=False,\n-        )\n+    )\n \n     template = configuration_fields.Path(\n-        title=_(u"The name of a template that implements the renderer."),\n-        description=_(u"If given, the default renderer for this portlet will be used, but with this template"),\n-        required=False\n-        )\n+        title=_("The name of a template that implements the renderer."),\n+        description=_(\n+            "If given, the default renderer for this portlet will be used, but with this template"\n+        ),\n+        required=False,\n+    )\n \n     # Use these to discriminate the renderer.\n \n@@ -97,23 +99,25 @@ class IPortletRendererDirective(Interface):\n         description=_("""An interface or class"""),\n         required=False,\n         default=Interface,\n-        )\n+    )\n \n     layer = configuration_fields.GlobalObject(\n         title=_("Browser layer for which this renderer is used"),\n         description=_("""An interface or class"""),\n         required=False,\n         default=IDefaultBrowserLayer,\n-        )\n+    )\n \n     view = configuration_fields.GlobalObject(\n         title=_("Browser view type for this this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IBrowserView)\n+        default=IBrowserView,\n+    )\n \n     manager = configuration_fields.GlobalObject(\n         title=_("Portlet manager type for which this renderer is used"),\n         description=_("An interface or class"),\n         required=False,\n-        default=IPortletManager)\n+        default=IPortletManager,\n+    )\ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex f45ebe46..6528f0c5 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import implementer, Interface\n-from zope.component import adapts\n-\n-from Acquisition import aq_parent, aq_inner, aq_base\n-\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletContext\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-\n-from plone.portlets.interfaces import IPortletContext\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n-import six\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IPortletContext)\n-class ContentContext(object):\n+@adapter(Interface)\n+class ContentContext:\n     """A portlet context for regular content items.\n \n     Note - we register this for Interface so that it can also work for\n     tools and other non-content items. This may hijack the context in non-CMF\n     contexts, but that is doubtfully going to be an issue.\n     """\n-    adapts(Interface)\n \n     def __init__(self, context):\n         self.context = context\n \n     @property\n     def uid(self):\n-        return \'/\'.join(self.context.getPhysicalPath())\n+        return "/".join(self.context.getPhysicalPath())\n \n     def getParent(self):\n         return aq_parent(aq_inner(self.context))\n@@ -49,7 +46,7 @@ def globalPortletCategories(self, placeless=False):\n         return cats\n \n     def _getUserId(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None:\n             return None\n \n@@ -72,7 +69,7 @@ def _getUserId(self):\n         return memberId\n \n     def _getGroupIds(self):\n-        membership = getToolByName(self.context, \'portal_membership\', None)\n+        membership = getToolByName(self.context, "portal_membership", None)\n         if membership is None or membership.isAnonymousUser():\n             return ()\n \n@@ -80,34 +77,33 @@ def _getGroupIds(self):\n         if not member:\n             return ()\n \n-        groups = hasattr(member, \'getGroups\') and member.getGroups() or []\n+        groups = hasattr(member, "getGroups") and member.getGroups() or []\n \n         # Ensure we get the list of ids - getGroups() suffers some acquision\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if not isinstance(group, (six.text_type, six.binary_type)):\n+            if not isinstance(group, (str, bytes)):\n                 return ()\n \n         return sorted(groups)\n \n     def _getContentType(self):\n-        typeInfo = getattr(aq_base(self.context), \'getTypeInfo\', None)\n+        typeInfo = getattr(aq_base(self.context), "getTypeInfo", None)\n         if typeInfo is not None:\n             fti = typeInfo()\n             if fti is not None:\n                 return fti.getId()\n-        portal_type = getattr(aq_base(self.context), \'portal_type\', None)\n+        portal_type = getattr(aq_base(self.context), "portal_type", None)\n         if portal_type is not None:\n             return portal_type\n         return None\n \n \n @implementer(IPortletContext)\n+@adapter(ISiteRoot)\n class PortalRootContext(ContentContext):\n-    """A portlet context for the site root.\n-    """\n-    adapts(ISiteRoot)\n+    """A portlet context for the site root."""\n \n     def __init__(self, context):\n         self.context = context\ndiff --git a/plone/app/portlets/portlets/__init__.py b/plone/app/portlets/portlets/__init__.py\nindex 4aa11c79..e69de29b 100644\n--- a/plone/app/portlets/portlets/__init__.py\n+++ b/plone/app/portlets/portlets/__init__.py\n@@ -1,2 +0,0 @@\n-# -*- coding: utf-8 -*-\n-#\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/actions.pt b/plone/app/portlets/portlets/actions.pt\nindex b5d4013c..1c6eb538 100644\n--- a/plone/app/portlets/portlets/actions.pt\n+++ b/plone/app/portlets/portlets/actions.pt\n@@ -4,41 +4,41 @@\n       tal:omit-tag=""\n       i18n:domain="plone">\n \n-<aside class="portlet portletActions"\n-    tal:define="portal_url context/@@plone_portal_state/portal_url;">\n+  <div class="card portlet portletActions"\n+      tal:define="portal_url context/@@plone_portal_state/portal_url;">\n \n-  <div class="portletHeader" tal:condition="view/showTitle">\n-        <span tal:condition="view/title" tal:replace="view/title">\n-          Title\n-        </span>\n-  </div>\n-  <div class="portletContent">\n-    <ul tal:attributes="class string:actions-${view/category}">\n-      <tal:loop tal:repeat="link view/actionLinks">\n-        <li tal:attributes="class python: \'portletItem \' + link[\'id\']"\n+    <div class="card-header" tal:condition="view/showTitle">\n+      <span tal:condition="view/title" tal:replace="view/title">\n+        Title\n+      </span>\n+    </div>\n+\n+    <div class="card-body portletContent">\n+      <ul tal:attributes="class string:actions-${view/category}">\n+        <tal:loop tal:repeat="link view/actionLinks">\n+        <li class="portletItem ${python:link[\'id\']}"\n             tal:define="icon nocall:link/icon">\n           <a href="#"\n-             tal:define="modal link/modal|nothing"\n-             tal:attributes="href link/url;\n-                             class python:\'pat-plone-modal\' if modal else None;\n-                             data-pat-plone-modal python:modal if modal else None;">\n-\n+              tal:define="modal link/modal|nothing"\n+              tal:attributes="href link/url;\n+                              class python:\'pat-plone-modal\' if modal else None;\n+                              data-pat-plone-modal python:modal if modal else None;">\n             <span tal:condition="not:icon"\n-                  tal:content="link/title">\n+                tal:content="link/title">\n               Action\n             </span>\n-\n             <span tal:condition="icon"\n-                  tal:content="link/title"\n-                  tal:define="icon_url icon/absolute_url|icon"\n-                  tal:attributes="style string:background-image:url($icon_url);;">\n+                tal:content="link/title"\n+                tal:define="icon_url icon/absolute_url|icon"\n+                tal:attributes="style string:background-image:url($icon_url);;">\n               Action\n             </span>\n-\n           </a>\n         </li>\n-      </tal:loop>\n-    </ul>\n+        </tal:loop>\n+      </ul>\n+    </div>\n+\n   </div>\n-</aside>\n+\n </html>\ndiff --git a/plone/app/portlets/portlets/actions.py b/plone/app/portlets/portlets/actions.py\nindex 723bc6dd..7e8d3c14 100644\n--- a/plone/app/portlets/portlets/actions.py\n+++ b/plone/app/portlets/portlets/actions.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from Acquisition import aq_inner\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize import view as pm_view\n from plone.portlets.interfaces import IPortletDataProvider\n@@ -16,44 +15,45 @@ class IActionsPortlet(IPortletDataProvider):\n     """A portlet that shows an action category"""\n \n     ptitle = schema.TextLine(\n-        title=_(u\'label_title\',\n-                default=u"Title"),\n-        description=_(u\'help_title\',\n-                      default=u"Displayed title of this portlet"),\n-        default=u"",\n-        required=False)\n+        title=_("label_title", default="Title"),\n+        description=_("help_title", default="Displayed title of this portlet"),\n+        default="",\n+        required=False,\n+    )\n \n     show_title = schema.Bool(\n-        title=_(u\'label_show_title\',\n-                default=u"Show title"),\n-        description=_(u\'help_show_title\',\n-                      default=u"Show title of this portlet."),\n+        title=_("label_show_title", default="Show title"),\n+        description=_("help_show_title", default="Show title of this portlet."),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     category = schema.Choice(\n-        title=_(u\'label_actions_category\',\n-                default=u"Actions category"),\n-        description=_(u\'help_actions_category\',\n-                      default=u"Select an action category"),\n+        title=_("label_actions_category", default="Actions category"),\n+        description=_("help_actions_category", default="Select an action category"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.Actions\')\n+        vocabulary="plone.app.vocabularies.Actions",\n+    )\n \n     show_icons = schema.Bool(\n-        title=_(u\'label_show_icons\',\n-                default=u"Show icons"),\n-        description=_(u\'help_show_icons\',\n-                      default=u"Show icons or default icon for actions without icon."),\n+        title=_("label_show_icons", default="Show icons"),\n+        description=_(\n+            "help_show_icons",\n+            default="Show icons or default icon for actions without icon.",\n+        ),\n         required=True,\n-        default=True)\n+        default=True,\n+    )\n \n     default_icon = schema.ASCIILine(\n-        title=_(u\'label_default_icon\',\n-                default=u"Default icon"),\n-        description=_(u\'help_default_icon\',\n-                      default=u"What icon we should use for actions with no specific icons. A 16*16 pixels image."),\n+        title=_("label_default_icon", default="Default icon"),\n+        description=_(\n+            "help_default_icon",\n+            default="What icon we should use for actions with no specific icons. A 16*16 pixels image.",\n+        ),\n         required=False,\n-        default=\'action_icon.png\')\n+        default="action_icon.png",\n+    )\n \n \n @implementer(IActionsPortlet)\n@@ -63,13 +63,20 @@ class Assignment(base.Assignment):\n     with columns.\n     """\n \n-    ptitle = u""\n+    ptitle = ""\n     show_title = True\n-    category = u""\n+    category = ""\n     show_icons = True\n-    default_icon = \'action_icon.png\'\n-\n-    def __init__(self, ptitle=u"", show_title=True, category=u"", show_icons=True, default_icon=\'action_icon.png\'):\n+    default_icon = "action_icon.png"\n+\n+    def __init__(\n+        self,\n+        ptitle="",\n+        show_title=True,\n+        category="",\n+        show_icons=True,\n+        default_icon="action_icon.png",\n+    ):\n         self.ptitle = ptitle\n         self.show_title = show_title\n         self.category = category\n@@ -82,13 +89,13 @@ def title(self):\n         """This property is used to give the title of the portlet in the\n         "manage portlets" screen.\n         """\n-        return _(u"Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n+        return _("Actions portlet") + \' "%s"\' % (self.ptitle or self.category)\n \n \n class Renderer(base.Renderer):\n     """Actions portlet renderer."""\n \n-    render = ViewPageTemplateFile(\'actions.pt\')\n+    render = ViewPageTemplateFile("actions.pt")\n \n     @property\n     def available(self):\n@@ -107,8 +114,9 @@ def showTitle(self):\n \n     def actionLinks(self):\n         """Features of action links"""\n-        return self.cachedLinks(self.data.category, self.data.default_icon,\n-                                self.data.show_icons)\n+        return self.cachedLinks(\n+            self.data.category, self.data.default_icon, self.data.show_icons\n+        )\n \n     @property\n     def category(self):\n@@ -116,8 +124,9 @@ def category(self):\n \n     @pm_view.memoize\n     def cachedLinks(self, actions_category, default_icon, show_icons):\n-        context_state = getMultiAdapter((aq_inner(self.context), self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (aq_inner(self.context), self.request), name="plone_context_state"\n+        )\n         actions = context_state.actions(actions_category)\n \n         def render_icon(category, action_id, default):\n@@ -130,39 +139,40 @@ def render_icon(category, action_id, default):\n         if actions_category == "portal_tabs":\n             # Special case for portal_tabs (we rely on content in Plone root)\n             portal_tabs_view = getMultiAdapter(\n-                (self.context, self.context.REQUEST), name=\'portal_tabs_view\')\n+                (self.context, self.context.REQUEST), name="portal_tabs_view"\n+            )\n             actions = portal_tabs_view.topLevelTabs(actions=actions)\n             for action in actions:\n                 link = {\n-                    \'id\':action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'name\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon)\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["name"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                }\n                 result.append(link)\n         else:\n-            if actions_category == \'object_buttons\':\n-                actions_tool = getMultiAdapter((aq_inner(self.context), self.request), name=u\'plone_tools\').actions()\n-                actions = actions_tool.listActionInfos(object=aq_inner(self.context), categories=(actions_category,))\n+            if actions_category == "object_buttons":\n+                actions_tool = getMultiAdapter(\n+                    (aq_inner(self.context), self.request), name="plone_tools"\n+                ).actions()\n+                actions = actions_tool.listActionInfos(\n+                    object=aq_inner(self.context), categories=(actions_category,)\n+                )\n             for action in actions:\n-                if not (action[\'available\']\n-                        and action[\'visible\']\n-                        and action[\'allowed\']\n-                        and action[\'url\']):\n+                if not (\n+                    action["available"]\n+                    and action["visible"]\n+                    and action["allowed"]\n+                    and action["url"]\n+                ):\n                     continue\n                 link = {\n-                    \'id\': action[\'id\'],\n-                    \'url\': action[\'url\'],\n-                    \'title\': action[\'title\'],\n-                    \'icon\': render_icon(\n-                        actions_category,\n-                        action,\n-                        default=default_icon),\n-                    \'modal\': action.get(\'modal\'),\n-                    }\n+                    "id": action["id"],\n+                    "url": action["url"],\n+                    "title": action["title"],\n+                    "icon": render_icon(actions_category, action, default=default_icon),\n+                    "modal": action.get("modal"),\n+                }\n                 result.append(link)\n         return result\n \n@@ -173,11 +183,13 @@ class AddForm(base.AddForm):\n     plone.autoform which fields to display. The create() method actually\n     constructs the assignment that is being added.\n     """\n+\n     schema = IActionsPortlet\n-    label = _(u\'heading_add_actions_portlet\',\n-              default=u\'Add actions portlet\')\n-    description = _(u\'help_add_actions_portlet\',\n-                    default=u\'An action portlet displays actions from a category\')\n+    label = _("heading_add_actions_portlet", default="Add actions portlet")\n+    description = _(\n+        "help_add_actions_portlet",\n+        default="An action portlet displays actions from a category",\n+    )\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -189,4 +201,5 @@ class EditForm(base.EditForm):\n     This is registered with configure.zcml. The schema attribute tells\n     plone.autoform which fields to display.\n     """\n+\n     schema = IActionsPortlet\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex 12e5afe3..cfe507cb 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -1,4 +1,6 @@\n-# -*- coding: utf-8 -*-\n+from ..browser.formhelper import AddForm\n+from ..browser.formhelper import EditForm\n+from ..browser.formhelper import NullAddForm\n from OFS.SimpleItem import SimpleItem\n from plone.app.portlets.interfaces import IDeferredPortletRenderer\n from plone.portlets.interfaces import IPortletAssignment\n@@ -7,11 +9,6 @@\n from zope.container.contained import Contained\n from zope.interface import implementer\n \n-# Convenience imports\n-from plone.app.portlets.browser.formhelper import AddForm\n-from plone.app.portlets.browser.formhelper import NullAddForm\n-from plone.app.portlets.browser.formhelper import EditForm\n-\n \n @implementer(IPortletAssignment)\n class Assignment(SimpleItem, Contained):\n@@ -21,30 +18,28 @@ class Assignment(SimpleItem, Contained):\n     may\n     """\n \n-    __name__ = \'\'\n+    __name__ = ""\n \n     @property\n     def id(self):\n-        return getattr(self, \'__name__\', \'\')\n+        return getattr(self, "__name__", "")\n \n     @property\n     def title(self):\n         return self.id\n \n     def available(self, context, request):\n-        """By default, this portlet is always available\n-        """\n+        """By default, this portlet is always available"""\n         return True\n \n     @property\n     def data(self):\n-        """Make the assignment itself represent the data object that is being rendered.\n-        """\n+        """Make the assignment itself represent the data object that is being rendered."""\n         return self\n \n \n @implementer(IPortletRenderer)\n-class Renderer(object):\n+class Renderer:\n     """Base class for portlet renderers.\n \n     You must override render() to return a string to render. One way of\n@@ -70,13 +65,13 @@ def update(self):\n         pass\n \n     def render(self):\n-        raise NotImplementedError("You must implement \'render\' as a method "\n-                                  "or page template file attribute")\n+        raise NotImplementedError(\n+            "You must implement \'render\' as a method " "or page template file attribute"\n+        )\n \n     @property\n     def available(self):\n-        """By default, portlets are available\n-        """\n+        """By default, portlets are available"""\n         return True\n \n \n@@ -88,10 +83,12 @@ class DeferredRenderer(Renderer):\n \n     """\n \n-    render_preload = ViewPageTemplateFile(\'deferred_portlet.pt\')\n+    render_preload = ViewPageTemplateFile("deferred_portlet.pt")\n \n     def render_full(self):\n-        raise NotImplemented("You must implement \'render_full\' as a method or page template file attribute")\n+        raise NotImplemented(\n+            "You must implement \'render_full\' as a method or page template file attribute"\n+        )\n \n     def render(self):\n         """render the portlet\ndiff --git a/plone/app/portlets/portlets/calendar.py b/plone/app/portlets/portlets/calendar.py\nindex f8430c93..2d0e487f 100644\n--- a/plone/app/portlets/portlets/calendar.py\n+++ b/plone/app/portlets/portlets/calendar.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_calendar import Assignment\ndiff --git a/plone/app/portlets/portlets/classic.py b/plone/app/portlets/portlets/classic.py\nindex bd4b2229..9a1b1ea2 100644\n--- a/plone/app/portlets/portlets/classic.py\n+++ b/plone/app/portlets/portlets/classic.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n@@ -8,26 +7,27 @@\n \n \n class IClassicPortlet(IPortletDataProvider):\n-    """A portlet which can render a classic Plone portlet macro\n-    """\n+    """A portlet which can render a classic Plone portlet macro"""\n \n     template = schema.ASCIILine(\n-        title=_(u\'Template\'),\n-        description=_(u\'The template containing the portlet.\'),\n-        required=True)\n+        title=_("Template"),\n+        description=_("The template containing the portlet."),\n+        required=True,\n+    )\n \n     macro = schema.ASCIILine(\n-        title=_(u\'Macro\'),\n-        description=_(u"The macro containing the portlet. "\n-                      u"Leave blank if there is no macro."),\n-        default=\'portlet\',\n-        required=False)\n+        title=_("Macro"),\n+        description=_(\n+            "The macro containing the portlet. " "Leave blank if there is no macro."\n+        ),\n+        default="portlet",\n+        required=False,\n+    )\n \n \n @implementer(IClassicPortlet)\n class Assignment(base.Assignment):\n-\n-    def __init__(self, template=\'\', macro=\'\'):\n+    def __init__(self, template="", macro=""):\n         self.template = template\n         self.macro = macro\n \n@@ -37,37 +37,35 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         self.context = context\n         self.request = request\n         self.data = data\n \n-    render = ViewPageTemplateFile(\'classic.pt\')\n+    render = ViewPageTemplateFile("classic.pt")\n \n     def use_macro(self):\n         return bool(self.data.macro)\n \n     def path_expression(self):\n-        expr = \'context/%s\' % self.data.template\n+        expr = "context/%s" % self.data.template\n         if self.use_macro():\n-            expr += \'/macros/%s\' % self.data.macro\n+            expr += "/macros/%s" % self.data.macro\n         return expr\n \n \n class AddForm(base.AddForm):\n     schema = IClassicPortlet\n-    label = _(u"Add Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    label = _("Add Classic Portlet")\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\n \n     def create(self, data):\n-        return Assignment(template=data.get(\'template\', \'\'),\n-                          macro=data.get(\'macro\', \'\'))\n+        return Assignment(\n+            template=data.get("template", ""), macro=data.get("macro", "")\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = IClassicPortlet\n-    label = _(u"Edit Classic Portlet")\n-    description = _(u"A classic portlet allows you to use legacy portlet "\n-                    u"templates.")\n+    label = _("Edit Classic Portlet")\n+    description = _("A classic portlet allows you to use legacy portlet " "templates.")\ndiff --git a/plone/app/portlets/portlets/events.py b/plone/app/portlets/portlets/events.py\nindex 5e29c51a..f8eb93c6 100644\n--- a/plone/app/portlets/portlets/events.py\n+++ b/plone/app/portlets/portlets/events.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # avoid broken persistent object\n from plone.app.event.portlets.portlet_events import Assignment\ndiff --git a/plone/app/portlets/portlets/language.pt b/plone/app/portlets/portlets/language.pt\nindex 14ef4845..f79d7102 100644\n--- a/plone/app/portlets/portlets/language.pt\n+++ b/plone/app/portlets/portlets/language.pt\n@@ -1,36 +1,41 @@\n-<tal:block i18n:domain="plone">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag=""\n+      i18n:domain="plone">\n \n-<aside class="portlet portletLanguage">\n-    <header class="portletHeader">\n-        <span class="tile" i18n:translate="box_languages">Languages</span>\n-    </header>\n-    <div class="portletContent">\n-        <ul tal:define="showFlags view/showFlags">\n-            <li class="portletItem" tal:repeat="lang view/languages">\n-                <span tal:define="code lang/code;\n-                                  selected lang/selected"\n-                      tal:omit-tag="selected">\n+  <div class="card portlet portletLanguage">\n \n-                    <a href=""\n-                       tal:define="flag lang/flag;\n-                                   name lang/name"\n-                       tal:attributes="href string:${here/absolute_url}/switchLanguage?set_language=${code};\n-                                       title name">\n-                        <tal:flag condition="python:showFlags and flag">\n-                            <img width="14"\n-                                 height="11"\n-                                 alt=""\n-                                 tal:attributes="src string:${view/navigation_root_url}${flag};\n-                                                 title python: name;\n-                                                 class python: selected and \'currentItem\' or \'\';" />\n-                        </tal:flag>\n-                        <span tal:replace="lang/native|lang/name">Native language name</span>\n-                    </a>\n+    <div class="card-header">\n+      <span class="tile" i18n:translate="box_languages">Languages</span>\n+    </div>\n \n-                </span>\n-            </li>\n-        </ul>\n+    <div class="card-body">\n+      <ul tal:define="showFlags view/showFlags">\n+        <li class="portletItem" tal:repeat="lang view/languages">\n+          <span tal:define="code lang/code;\n+                            selected lang/selected"\n+              tal:omit-tag="selected">\n+            <a href=""\n+                tal:define="flag lang/flag;\n+                            name lang/name"\n+                tal:attributes="href string:${here/absolute_url}/switchLanguage?set_language=${code};\n+                                title name">\n+              <tal:flag condition="python:showFlags and flag">\n+                <img width="14"\n+                    height="11"\n+                    alt=""\n+                    tal:attributes="src string:${view/navigation_root_url}${flag};\n+                                    title python: name;\n+                                    class python: selected and \'currentItem\' or \'\';" />\n+              </tal:flag>\n+              <span tal:replace="lang/native|lang/name">Native language name</span>\n+            </a>\n+          </span>\n+        </li>\n+      </ul>\n     </div>\n \n-</aside>\n-</tal:block>\n+  </div>\n+\n+</html>\ndiff --git a/plone/app/portlets/portlets/language.py b/plone/app/portlets/portlets/language.py\nindex 38da5ed0..23906b7d 100644\n--- a/plone/app/portlets/portlets/language.py\n+++ b/plone/app/portlets/portlets/language.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getMultiAdapter\n@@ -9,18 +8,16 @@\n \n \n class ILanguagePortlet(IPortletDataProvider):\n-    """A portlet which shows the available portal languages.\n-    """\n+    """A portlet which shows the available portal languages."""\n \n \n @implementer(ILanguagePortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_languages\', default=u\'Languages\')\n+    title = _("label_languages", default="Languages")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n         self.selector = LanguageSelector(context, request, None, None)\n@@ -29,9 +26,9 @@ def __init__(self, context, request, view, manager, data):\n \n         def key(info):\n             return info.get("native", info["name"])\n+\n         self.languages.sort(key=key)\n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def show(self):\n@@ -47,10 +44,9 @@ def showFlags(self):\n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'language.pt\')\n+    render = ViewPageTemplateFile("language.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/login.pt b/plone/app/portlets/portlets/login.pt\nindex e24eb2bc..4fa808a4 100644\n--- a/plone/app/portlets/portlets/login.pt\n+++ b/plone/app/portlets/portlets/login.pt\n@@ -1,128 +1,126 @@\n-<tal:block condition="view/show"\n-           i18n:domain="plone">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      tal:omit-tag="">\n \n-<aside class="portlet portletLogin"\n-    tal:condition="view/available">\n+  <tal:block condition="view/show">\n \n-  <header class="portletHeader">\n-        <a href="#"\n-           class="tile"\n-           tal:attributes="href view/login_form"\n-           i18n:translate="box_sign_in">Log in</a>\n-  </header>\n-  <div class="portletContent">\n-    <div\n-        tal:define="ac_name view/login_name;\n-                    ac_password view/login_password">\n-        <form action="login_form"\n-              id="loginform"\n-              method="post"\n-              tal:attributes="action view/login_form">\n-\n-            <div>\n-                <input type="hidden" name="form.submitted" value="1" />\n-                <input type="hidden" name="came_from" value=""\n-                       tal:attributes="value context/@@plone_context_state/current_page_url" />\n-                <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-                <input type="hidden" name="login_name" id="login_name" value="" />\n-                <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-            </div>\n-\n-            <div class="field"\n-                 tal:define="use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];">\n-\n-              <tal:loginname condition="not:use_email_as_login">\n-                <label for=""\n-                       tal:attributes="for ac_name"\n-                       i18n:translate="label_login_name">Login Name</label>\n-                <br />\n-                <input type="text"\n-                       size="10"\n-                       tal:attributes="name ac_name; id ac_name;\n-                                       value python:request.get(ac_name, \'\');" />\n-              </tal:loginname>\n-              <tal:email condition="use_email_as_login">\n-                <label for=""\n-                       tal:attributes="for ac_name"\n-                       i18n:translate="label_email">Email</label>\n-                <br />\n-                <input type="text"\n-                       size="10"\n-                       tal:attributes="name ac_name; id ac_name;\n-                                       value python:request.get(ac_name, \'\');" />\n-              </tal:email>\n-            </div>\n-\n-            <div class="field">\n-                <label for=""\n-                       tal:attributes="for ac_password"\n-                       i18n:translate="label_password">Password</label>\n-                <br />\n-                <input type="password"\n-                       size="10"\n-                       tal:attributes="name ac_password; id ac_password;" />\n-            </div>\n+  <div class="card portlet portletLogin"\n+      tal:condition="view/available">\n \n-            <div class="cookiesMessage portalMessage warning"\n-                 style="display:none" role="alert">\n-                <strong i18n:translate="">\n-                  Warning\n-                </strong>\n-                <span i18n:translate="enable_cookies_message_before_login">\n-                  Cookies are not enabled. You must enable cookies before you\n-                  can log in.\n-                </span>\n-            </div>\n-\n-            <div class="formControls">\n+    <div class="card-header">\n+      <a href="#"\n+          class="tile"\n+          tal:attributes="href view/login_form"\n+          i18n:translate="box_sign_in">Log in</a>\n+    </div>\n \n-                <input class="context"\n-                       type="submit"\n-                       name="submit"\n-                       value="Log in"\n-                       title="Log in"\n-                       i18n:attributes="value label_log_in; title label_log_in;"/>\n-            </div>\n+    <div class="card-body">\n+      <div tal:define="ac_name view/login_name;\n+                        ac_password view/login_password">\n+        <form action="login_form"\n+            id="loginform"\n+            method="post"\n+            tal:attributes="action view/login_form">\n+          <div>\n+            <input type="hidden" name="form.submitted" value="1" />\n+            <input type="hidden" name="came_from" value=""\n+                tal:attributes="value context/@@plone_context_state/current_page_url" />\n+            <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n+            <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n+            <input type="hidden" name="login_name" id="login_name" value="" />\n+            <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n+          </div>\n+          <div class="field"\n+              tal:define="use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];">\n+            <tal:loginname condition="not:use_email_as_login">\n+              <label for=""\n+                  tal:attributes="for ac_name"\n+                  i18n:translate="label_login_name">Login Name</label>\n+              <br />\n+              <input type="text"\n+                  size="10"\n+                  tal:attributes="name ac_name; id ac_name;\n+                                  value python:request.get(ac_name, \'\');" />\n+            </tal:loginname>\n+            <tal:email condition="use_email_as_login">\n+              <label for=""\n+                  tal:attributes="for ac_name"\n+                  i18n:translate="label_email">Email</label>\n+              <br />\n+              <input type="text"\n+                  size="10"\n+                  tal:attributes="name ac_name; id ac_name;\n+                                  value python:request.get(ac_name, \'\');" />\n+            </tal:email>\n+          </div>\n+          <div class="field">\n+            <label for=""\n+                tal:attributes="for ac_password"\n+                i18n:translate="label_password">Password</label>\n+            <br />\n+            <input type="password"\n+                size="10"\n+                tal:attributes="name ac_password; id ac_password;" />\n+          </div>\n+          <div class="cookiesMessage alert alert-warning"\n+              style="display:none" role="alert">\n+            <strong i18n:translate="">Warning</strong>\n+            <span i18n:translate="enable_cookies_message_before_login">\n+              Cookies are not enabled. You must enable cookies before you\n+              can log in.\n+            </span>\n+          </div>\n+          <div class="formControls">\n+            <input class="btn btn-primary"\n+                type="submit"\n+                name="submit"\n+                value="Log in"\n+                title="Log in"\n+                i18n:attributes="value label_log_in; title label_log_in;"/>\n+          </div>\n         </form>\n       </div>\n-  </div>\n-  <footer class="portletFooter">\n-    <div tal:condition="view/can_request_password">\n-        <a href="mail_password_form"\n-           class="tile"\n-           tal:attributes="href view/mail_password_form">\n-           <tal:block replace="structure context/info_icon.png"/>\n-           <span tal:omit-tag="" i18n:translate="box_forgot_password_option">Forgot your password?</span>\n-        </a>\n     </div>\n \n-    <div tal:condition="view/can_register">\n+    <div class="card-footer">\n+      <div tal:condition="view/can_request_password">\n+        <a href="mail_password_form"\n+            class="tile"\n+            tal:attributes="href view/mail_password_form">\n+          <tal:block replace="structure context/info_icon.png"/>\n+          <span tal:omit-tag="" i18n:translate="box_forgot_password_option">Forgot your password?</span>\n+        </a>\n+      </div>\n+      <div tal:condition="view/can_register">\n         <a href=""\n-           class="tile"\n-           tal:attributes="href view/join_action">\n-            <tal:block replace="structure context/user.png"/>\n-            <span tal:omit-tag="" i18n:translate="box_new_user_option">New user?</span>\n+            class="tile"\n+            tal:attributes="href view/join_action">\n+          <tal:block replace="structure context/user.png"/>\n+          <span tal:omit-tag="" i18n:translate="box_new_user_option">New user?</span>\n         </a>\n+      </div>\n     </div>\n-  </footer>\n-</aside>\n+  </div>\n \n-<aside class="portlet portletLogin"\n-    tal:condition="not:view/available">\n+  <div class="card portlet portletLogin"\n+      tal:condition="not:view/available">\n \n-    <header class="portletHeader">\n-        <a href="#"\n-           class="tile"\n-           i18n:translate="box_sign_in">Log in</a>\n-    </header>\n+    <div class="card-header">\n+      <a href="#"\n+          class="tile"\n+          i18n:translate="box_sign_in">Log in</a>\n+    </div>\n \n-    <div class="portletContent"\n+    <div class="card-body"\n         i18n:translate="login_portlet_disabled">\n-        Cookie authentication is disabled.\n-        Login portlet not available.\n+      Cookie authentication is disabled.\n+      Login portlet not available.\n     </div>\n \n-</aside>\n+  </div>\n+\n+  </tal:block>\n \n-</tal:block>\n+</html>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/login.py b/plone/app/portlets/portlets/login.py\nindex 29a7aa08..3f6cc1ac 100644\n--- a/plone/app/portlets/portlets/login.py\n+++ b/plone/app/portlets/portlets/login.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.CMFCore.utils import getToolByName\n@@ -10,98 +9,97 @@\n \n \n class ILoginPortlet(IPortletDataProvider):\n-    """A portlet which can render a login form.\n-    """\n+    """A portlet which can render a login form."""\n \n \n @implementer(ILoginPortlet)\n class Assignment(base.Assignment):\n \n-    title = _(u\'label_log_in\', default=u\'Log in\')\n+    title = _("label_log_in", default="Log in")\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.membership = getToolByName(self.context, \'portal_membership\')\n+        self.membership = getToolByName(self.context, "portal_membership")\n \n         self.context_state = getMultiAdapter(\n-            (context, request), name=\'plone_context_state\')\n+            (context, request), name="plone_context_state"\n+        )\n         self.portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n-        self.pas_info = getMultiAdapter((context, request), name=\'pas_info\')\n+            (context, request), name="plone_portal_state"\n+        )\n+        self.pas_info = getMultiAdapter((context, request), name="pas_info")\n \n     def show(self):\n         if not self.portal_state.anonymous():\n             return False\n         if not self.pas_info.hasLoginPasswordExtractor():\n             return False\n-        page = self.request.get(\'URL\', \'\').split(\'/\')[-1]\n-        return page not in (\'login_form\', \'@@register\')\n+        page = self.request.get("URL", "").split("/")[-1]\n+        return page not in ("login_form", "@@register")\n \n     @property\n     def available(self):\n         return self.auth() is not None and self.show()\n \n     def login_form(self):\n-        return \'%s/login_form\' % self.portal_state.portal_url()\n+        return "%s/login_form" % self.portal_state.portal_url()\n \n     def mail_password_form(self):\n-        return \'%s/mail_password_form\' % self.portal_state.portal_url()\n+        return "%s/mail_password_form" % self.portal_state.portal_url()\n \n     def login_name(self):\n         auth = self.auth()\n         name = None\n         if auth is not None:\n-            name = getattr(auth, \'name_cookie\', None)\n+            name = getattr(auth, "name_cookie", None)\n         if not name:\n-            name = \'__ac_name\'\n+            name = "__ac_name"\n         return name\n \n     def login_password(self):\n         auth = self.auth()\n         passwd = None\n         if auth is not None:\n-            passwd = getattr(auth, \'pw_cookie\', None)\n+            passwd = getattr(auth, "pw_cookie", None)\n         if not passwd:\n-            passwd = \'__ac_password\'\n+            passwd = "__ac_password"\n         return passwd\n \n     def join_action(self):\n         context = self.context\n-        tool = getToolByName(context, \'portal_actions\')\n-        join = tool.listActionInfos(action_chain=\'user/join\', object=context)\n+        tool = getToolByName(context, "portal_actions")\n+        join = tool.listActionInfos(action_chain="user/join", object=context)\n         if len(join) > 0:\n-            return join[0][\'url\']\n+            return join[0]["url"]\n         return None\n \n     def can_register(self):\n-        if getToolByName(self.context, \'portal_registration\', None) is None \\\n-           or not self.join_action():\n+        if (\n+            getToolByName(self.context, "portal_registration", None) is None\n+            or not self.join_action()\n+        ):\n             return False\n-        return self.membership.checkPermission(\n-            \'Add portal member\', self.context)\n+        return self.membership.checkPermission("Add portal member", self.context)\n \n     def can_request_password(self):\n-        return self.membership.checkPermission(\n-            \'Mail forgotten password\', self.context)\n+        return self.membership.checkPermission("Mail forgotten password", self.context)\n \n     @memoize\n     def auth(self, _marker=None):\n         if _marker is None:\n             _marker = []\n-        acl_users = getToolByName(self.context, \'acl_users\')\n-        return getattr(acl_users, \'credentials_cookie_auth\', None)\n+        acl_users = getToolByName(self.context, "acl_users")\n+        return getattr(acl_users, "credentials_cookie_auth", None)\n \n     def update(self):\n         pass\n \n-    render = ViewPageTemplateFile(\'login.pt\')\n+    render = ViewPageTemplateFile("login.pt")\n \n \n class AddForm(base.NullAddForm):\n-\n     def create(self):\n         return Assignment()\ndiff --git a/plone/app/portlets/portlets/navigation.pt b/plone/app/portlets/portlets/navigation.pt\nindex 04648eb4..73555dcc 100644\n--- a/plone/app/portlets/portlets/navigation.pt\n+++ b/plone/app/portlets/portlets/navigation.pt\n@@ -1,45 +1,53 @@\n-<tal:block i18n:domain="plone">\n-<aside class="portlet portletNavigationTree"\n-    tal:define="root view/navigation_root">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      tal:omit-tag="">\n \n-    <header class="portletHeader"\n-        tal:attributes="class python:view.hasName() and \'portletHeader\' or \'portletHeader hiddenStructure\'">\n-        <a href="#"\n-           class="tile"\n-           tal:attributes="href string:${view/heading_link_target}"\n-           tal:content="view/title"\n-           i18n:translate="">Navigation</a>\n-    </header>\n+  <div class="card portlet portletNavigationTree"\n+      tal:define="root view/navigation_root"\n+      i18n:domain="plone">\n \n-    <nav class="portletContent lastItem">\n-        <ul class="navTree navTreeLevel0">\n-            <li tal:define="selectedClass view/root_item_class;\n-                            li_class python:selectedClass and \' navTreeCurrentNode\' or \'\';\n-                            normalizeString nocall:context/plone_utils/normalizeString;\n-                            section_title root/Title;\n-                            section python:normalizeString(section_title);"\n-                tal:condition="view/include_top"\n-                tal:attributes="class string:navTreeItem navTreeTopNode${li_class} nav-section-${section}">\n-                <div tal:define="rootIsPortal view/root_is_portal;\n-                                 root_type root/portal_type;\n-                                 root_type_class python:\'contenttype-\' + normalizeString(root_type);\n-                                 root_class python:rootIsPortal and \'contenttype-plone-site\' or root_type_class;">\n-                   <a tal:attributes="href root/absolute_url;\n-                                      title root/Description;\n-                                      class python:\' \'.join([root_class, selectedClass]).strip();">\n-                   <span tal:omit-tag=""\n-                         tal:condition="rootIsPortal"\n-                         i18n:translate="tabs_home">Home</span>\n-                   <span tal:condition="not:rootIsPortal"\n-                         tal:replace="root/Title">Root item title</span>\n-                   </a>\n-                </div>\n-            </li>\n-            <li tal:replace="structure view/createNavTree">\n-                SUBTREE\n-            </li>\n-        </ul>\n+    <div class="card-header"\n+        tal:attributes="class python:view.hasName() and \'card-header\' or \'card-header hiddenStructure\'">\n+      <a href="#"\n+          class="tile"\n+          tal:attributes="href string:${view/heading_link_target}"\n+          tal:content="view/title"\n+          i18n:translate="">Navigation</a>\n+    </div>\n+\n+    <nav class="card-body">\n+      <ul class="navTree navTreeLevel0">\n+        <li tal:define="selectedClass view/root_item_class;\n+                        li_class python:selectedClass and \' navTreeCurrentNode\' or \'\';\n+                        normalizeString nocall:context/plone_utils/normalizeString;\n+                        section_title root/Title;\n+                        section python:normalizeString(section_title);"\n+            tal:condition="view/include_top"\n+            tal:attributes="class string:navTreeItem navTreeTopNode${li_class} nav-section-${section}">\n+          <div tal:define="\n+                  rootIsPortal view/root_is_portal;\n+                  root_type root/portal_type;\n+                  root_type_class python:\'contenttype-\' + normalizeString(root_type);\n+                  root_class python:rootIsPortal and \'contenttype-plone-site\' or root_type_class;\n+              ">\n+            <a tal:attributes="href root/absolute_url;\n+                              title root/Description;\n+                              class python:\' \'.join([root_class, selectedClass]).strip();">\n+              <span tal:omit-tag=""\n+                  tal:condition="rootIsPortal"\n+                  i18n:translate="tabs_home">Home</span>\n+              <span tal:condition="not:rootIsPortal"\n+                  tal:replace="root/Title">Root item title</span>\n+            </a>\n+          </div>\n+        </li>\n+        <li tal:replace="structure view/createNavTree">\n+            SUBTREE\n+        </li>\n+      </ul>\n     </nav>\n-</aside>\n-</tal:block>\n \n+  </div>\n+\n+</html>\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex e29816aa..4d5c4f4c 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -1,4 +1,5 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -9,8 +10,6 @@\n from plone.app.layout.navigation.navtree import buildFolderTree\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n from plone.app.uuid.utils import uuidToObject\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n@@ -30,7 +29,7 @@\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zExceptions import NotFound\n from zope import schema\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -41,94 +40,111 @@\n \n \n class INavigationPortlet(IPortletDataProvider):\n-    """A portlet which can render the navigation tree\n-    """\n+    """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-            title=_(u"label_navigation_title", default=u"Title"),\n-            description=_(u"help_navigation_title",\n-                          default=u"The title of the navigation tree."),\n-            default=u"",\n-            required=False)\n+        title=_("label_navigation_title", default="Title"),\n+        description=_(\n+            "help_navigation_title", default="The title of the navigation tree."\n+        ),\n+        default="",\n+        required=False,\n+    )\n \n     root_uid = schema.Choice(\n-            title=_(u"label_navigation_root_path", default=u"Root node"),\n-            description=_(u\'help_navigation_root\',\n-                          default=u"You may search for and choose a folder "\n-                                    "to act as the root of the navigation tree. "\n-                                    "Leave blank to use the Plone site root."),\n-            required=False,\n-            source=CatalogSource(is_folderish=True),\n-            )\n+        title=_("label_navigation_root_path", default="Root node"),\n+        description=_(\n+            "help_navigation_root",\n+            default="You may search for and choose a folder "\n+            "to act as the root of the navigation tree. "\n+            "Leave blank to use the Plone site root.",\n+        ),\n+        required=False,\n+        source=CatalogSource(is_folderish=True),\n+    )\n \n     includeTop = schema.Bool(\n-            title=_(u"label_include_top_node", default=u"Include top node"),\n-            description=_(u"help_include_top_node",\n-                          default=u"Whether or not to show the top, or \'root\', "\n-                                   "node in the navigation tree. This is affected "\n-                                   "by the \'Start level\' setting."),\n-            default=False,\n-            required=False)\n+        title=_("label_include_top_node", default="Include top node"),\n+        description=_(\n+            "help_include_top_node",\n+            default="Whether or not to show the top, or \'root\', "\n+            "node in the navigation tree. This is affected "\n+            "by the \'Start level\' setting.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     currentFolderOnly = schema.Bool(\n-            title=_(u"label_current_folder_only",\n-                    default=u"Only show the contents of the current folder."),\n-            description=_(u"help_current_folder_only",\n-                          default=u"If selected, the navigation tree will "\n-                                   "only show the current folder and its "\n-                                   "children at all times."),\n-            default=False,\n-            required=False)\n+        title=_(\n+            "label_current_folder_only",\n+            default="Only show the contents of the current folder.",\n+        ),\n+        description=_(\n+            "help_current_folder_only",\n+            default="If selected, the navigation tree will "\n+            "only show the current folder and its "\n+            "children at all times.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n     topLevel = schema.Int(\n-            title=_(u"label_navigation_startlevel", default=u"Start level"),\n-            description=_(u"help_navigation_start_level",\n-                default=u"An integer value that specifies the number of folder "\n-                         "levels below the site root that must be exceeded "\n-                         "before the navigation tree will display. 0 means "\n-                         "that the navigation tree should be displayed "\n-                         "everywhere including pages in the root of the site. "\n-                         "1 means the tree only shows up inside folders "\n-                         "located in the root and downwards, never showing "\n-                         "at the top level."),\n-            default=1,\n-            required=False)\n+        title=_("label_navigation_startlevel", default="Start level"),\n+        description=_(\n+            "help_navigation_start_level",\n+            default="An integer value that specifies the number of folder "\n+            "levels below the site root that must be exceeded "\n+            "before the navigation tree will display. 0 means "\n+            "that the navigation tree should be displayed "\n+            "everywhere including pages in the root of the site. "\n+            "1 means the tree only shows up inside folders "\n+            "located in the root and downwards, never showing "\n+            "at the top level.",\n+        ),\n+        default=1,\n+        required=False,\n+    )\n \n     bottomLevel = schema.Int(\n-            title=_(u"label_navigation_tree_depth",\n-                    default=u"Navigation tree depth"),\n-            description=_(u"help_navigation_tree_depth",\n-                          default=u"How many folders should be included "\n-                                   "before the navigation tree stops. 0 "\n-                                   "means no limit. 1 only includes the "\n-                                   "root folder."),\n-            default=0,\n-            required=False)\n+        title=_("label_navigation_tree_depth", default="Navigation tree depth"),\n+        description=_(\n+            "help_navigation_tree_depth",\n+            default="How many folders should be included "\n+            "before the navigation tree stops. 0 "\n+            "means no limit. 1 only includes the "\n+            "root folder.",\n+        ),\n+        default=0,\n+        required=False,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n+        required=False,\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(INavigationPortlet)\n@@ -146,16 +162,16 @@ class Assignment(base.Assignment):\n     no_thumbs = False\n \n     def __init__(\n-            self,\n-            name="",\n-            root_uid=None,\n-            currentFolderOnly=False,\n-            includeTop=False,\n-            topLevel=1,\n-            bottomLevel=0,\n-            no_icons=False,\n-            thumb_scale=None,\n-            no_thumbs=False\n+        self,\n+        name="",\n+        root_uid=None,\n+        currentFolderOnly=False,\n+        includeTop=False,\n+        topLevel=1,\n+        bottomLevel=0,\n+        no_icons=False,\n+        thumb_scale=None,\n+        no_thumbs=False,\n     ):\n         self.name = name\n         self.root_uid = root_uid\n@@ -174,7 +190,7 @@ def title(self):\n         """\n         if self.name:\n             return self.name\n-        return _(u\'Navigation\')\n+        return _("Navigation")\n \n     def _root(self):\n         # This is only called if the instance doesn\'t have a root_uid\n@@ -183,22 +199,22 @@ def _root(self):\n         root = self.root\n         if not root:\n             return None\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         navroot = getNavigationRootObject(self, portal)\n         try:\n-            root = navroot.unrestrictedTraverse(root.lstrip(\'/\'))\n+            root = navroot.unrestrictedTraverse(root.lstrip("/"))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return root.UID()\n+\n     root_uid = ComputedAttribute(_root, 1)\n \n \n class Renderer(base.Renderer):\n-\n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        self.urltool = getToolByName(context, \'portal_url\')\n+        self.urltool = getToolByName(context, "portal_url")\n \n     def title(self):\n         return self.data.name or self.data.title\n@@ -216,10 +232,10 @@ def available(self):\n             return True\n \n         tree = self.getNavTree()\n-        return len(tree[\'children\']) > 0\n+        return len(tree["children"]) > 0\n \n     def include_top(self):\n-        return getattr(self.data, \'includeTop\', True)\n+        return getattr(self.data, "includeTop", True)\n \n     def navigation_root(self):\n         return self.getNavRoot()\n@@ -239,7 +255,9 @@ def heading_link_target(self):\n         if not self.data.root_uid and not self.data.currentFolderOnly:\n             # No particular root item assigned -> should get link to the\n             # navigation root sitemap of the current context acquisition chain\n-            portal_state = getMultiAdapter((self.context, self.request), name="plone_portal_state")\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            )\n             return portal_state.navigation_root_url() + "/sitemap"\n \n         nav_root = self.getNavRoot()\n@@ -263,11 +281,11 @@ def root_item_class(self):\n         context = aq_inner(self.context)\n         root = self.getNavRoot()\n         container = aq_parent(context)\n-        if (aq_base(root) is aq_base(context) or\n-                (aq_base(root) is aq_base(container) and\n-                is_default_page(container, context))):\n-            return \'navTreeCurrentItem\'\n-        return \'\'\n+        if aq_base(root) is aq_base(context) or (\n+            aq_base(root) is aq_base(container) and is_default_page(container, context)\n+        ):\n+            return "navTreeCurrentItem"\n+        return ""\n \n     def root_is_portal(self):\n         root = self.getNavRoot()\n@@ -283,16 +301,20 @@ def createNavTree(self):\n             # meaning that the admin does not want the listing to be displayed\n             return self.recurse([], level=1, bottomLevel=bottomLevel)\n         else:\n-            return self.recurse(children=data.get(\'children\', []), level=1, bottomLevel=bottomLevel)\n+            return self.recurse(\n+                children=data.get("children", []), level=1, bottomLevel=bottomLevel\n+            )\n \n     # Cached lookups\n \n     @memoize\n     def getNavRootPath(self):\n-        return getRootPath(self.context,\n-                           self.data.currentFolderOnly,\n-                           self.data.topLevel,\n-                           self.data.root_uid)\n+        return getRootPath(\n+            self.context,\n+            self.data.currentFolderOnly,\n+            self.data.topLevel,\n+            self.data.root_uid,\n+        )\n \n     @memoize\n     def getNavRoot(self, _marker=None):\n@@ -321,11 +343,12 @@ def getNavTree(self, _marker=None):\n         queryBuilder = getMultiAdapter((context, self.data), INavigationQueryBuilder)\n         strategy = getMultiAdapter((context, self.data), INavtreeStrategy)\n \n-        return buildFolderTree(context, obj=context, query=queryBuilder(), strategy=strategy)\n-\n+        return buildFolderTree(\n+            context, obj=context, query=queryBuilder(), strategy=strategy\n+        )\n \n-    _template = ViewPageTemplateFile(\'navigation.pt\')\n-    recurse = ViewPageTemplateFile(\'navigation_recurse.pt\')\n+    _template = ViewPageTemplateFile("navigation.pt")\n+    recurse = ViewPageTemplateFile("navigation_recurse.pt")\n \n     @memoize\n     def thumb_scale(self):\n@@ -333,37 +356,19 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n-            return \'none\'\n+            return "none"\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n-    def getMimeTypeIcon(self, node):\n-        try:\n-            if not node[\'normalized_portal_type\'] == \'file\':\n-                return None\n-            fileo = node[\'item\'].getObject().file\n-            portal_url = getNavigationRoot(self.context)\n-            mtt = getToolByName(self.context, \'mimetypes_registry\')\n-            if fileo.contentType:\n-                ctype = mtt.lookup(fileo.contentType)\n-                return os.path.join(\n-                    portal_url,\n-                    guess_icon_path(ctype[0])\n-                )\n-        except AttributeError:\n-            return None\n-        return None\n-\n     def update(self):\n         pass\n \n@@ -373,38 +378,42 @@ def render(self):\n \n class AddForm(base.AddForm):\n     schema = INavigationPortlet\n-    label = _(u"Add Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Add Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n \n     def create(self, data):\n-        return Assignment(name=data.get(\'name\', ""),\n-                          root_uid=data.get(\'root_uid\', ""),\n-                          currentFolderOnly=data.get(\'currentFolderOnly\', False),\n-                          includeTop=data.get(\'includeTop\', False),\n-                          topLevel=data.get(\'topLevel\', 0),\n-                          bottomLevel=data.get(\'bottomLevel\', 0))\n+        return Assignment(\n+            name=data.get("name", ""),\n+            root_uid=data.get("root_uid", ""),\n+            currentFolderOnly=data.get("currentFolderOnly", False),\n+            includeTop=data.get("includeTop", False),\n+            topLevel=data.get("topLevel", 0),\n+            bottomLevel=data.get("bottomLevel", 0),\n+        )\n+\n \n class EditForm(base.EditForm):\n     schema = INavigationPortlet\n-    label = _(u"Edit Navigation Portlet")\n-    description = _(u"This portlet displays a navigation tree.")\n+    label = _("Edit Navigation Portlet")\n+    description = _("This portlet displays a navigation tree.")\n+\n \n @implementer(INavigationQueryBuilder)\n-class QueryBuilder(object):\n+@adapter(Interface, INavigationPortlet)\n+class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\n-    adapts(Interface, INavigationPortlet)\n \n     def __init__(self, context, portlet):\n         self.context = context\n         self.portlet = portlet\n \n-        portal_properties = getToolByName(context, \'portal_properties\')\n-        navtree_properties = getattr(portal_properties, \'navtree_properties\')\n+        portal_properties = getToolByName(context, "portal_properties")\n+        navtree_properties = getattr(portal_properties, "navtree_properties")\n \n         # Acquire a custom nav query if available\n-        customQuery = getattr(context, \'getCustomNavQuery\', None)\n+        customQuery = getattr(context, "getCustomNavQuery", None)\n         if customQuery is not None and utils.safe_callable(customQuery):\n             query = customQuery()\n         else:\n@@ -413,46 +422,43 @@ def __init__(self, context, portlet):\n         # Construct the path query\n         root = uuidToObject(portlet.root_uid)\n         if root is not None:\n-            rootPath = \'/\'.join(root.getPhysicalPath())\n+            rootPath = "/".join(root.getPhysicalPath())\n         else:\n             rootPath = getNavigationRoot(context)\n-        currentPath = \'/\'.join(context.getPhysicalPath())\n+        currentPath = "/".join(context.getPhysicalPath())\n \n         # If we are above the navigation root, a navtree query would return\n         # nothing (since we explicitly start from the root always). Hence,\n         # use a regular depth-1 query in this case.\n \n-        if currentPath != rootPath and not currentPath.startswith(rootPath + \'/\'):\n-            query[\'path\'] = {\'query\': rootPath, \'depth\': 1}\n+        if currentPath != rootPath and not currentPath.startswith(rootPath + "/"):\n+            query["path"] = {"query": rootPath, "depth": 1}\n         else:\n-            query[\'path\'] = {\'query\': currentPath, \'navtree\': 1}\n+            query["path"] = {"query": currentPath, "navtree": 1}\n \n         topLevel = portlet.topLevel\n         if topLevel and topLevel > 0:\n-            query[\'path\'][\'navtree_start\'] = topLevel + 1\n+            query["path"]["navtree_start"] = topLevel + 1\n \n         # XXX: It\'d make sense to use \'depth\' for bottomLevel, but it doesn\'t\n         # seem to work with EPI.\n \n         # Only list the applicable types\n-        query[\'portal_type\'] = utils.typesToList(context)\n+        query["portal_type"] = utils.typesToList(context)\n \n         # Apply the desired sort\n-        sortAttribute = navtree_properties.getProperty(\'sortAttribute\', None)\n+        sortAttribute = navtree_properties.getProperty("sortAttribute", None)\n         if sortAttribute is not None:\n-            query[\'sort_on\'] = sortAttribute\n-            sortOrder = navtree_properties.getProperty(\'sortOrder\', None)\n+            query["sort_on"] = sortAttribute\n+            sortOrder = navtree_properties.getProperty("sortOrder", None)\n             if sortOrder is not None:\n-                query[\'sort_order\'] = sortOrder\n+                query["sort_order"] = sortOrder\n \n         # Filter on workflow states, if enabled\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         if navigation_settings.filter_on_workflow:\n-            query[\'review_state\'] = navigation_settings.workflow_states_to_show\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n         self.query = query\n \n@@ -461,10 +467,9 @@ def __call__(self):\n \n \n @implementer(INavtreeStrategy)\n+@adapter(Interface, INavigationPortlet)\n class NavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet\n-    """\n-    adapts(Interface, INavigationPortlet)\n+    """The navtree strategy used for the default navigation portlet"""\n \n     def __init__(self, context, portlet):\n         SitemapNavtreeStrategy.__init__(self, context, portlet)\n@@ -472,16 +477,15 @@ def __init__(self, context, portlet):\n         # XXX: We can\'t do this with a \'depth\' query to EPI...\n         self.bottomLevel = portlet.bottomLevel or 0\n \n-        self.rootPath = getRootPath(context,\n-                                    portlet.currentFolderOnly,\n-                                    portlet.topLevel,\n-                                    portlet.root_uid)\n+        self.rootPath = getRootPath(\n+            context, portlet.currentFolderOnly, portlet.topLevel, portlet.root_uid\n+        )\n \n     def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n         if sitemapDecision == False:\n             return False\n-        depth = node.get(\'depth\', 0)\n+        depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n         else:\n@@ -489,41 +493,41 @@ def subtreeFilter(self, node):\n \n \n def getRootPath(context, currentFolderOnly, topLevel, root):\n-    """Helper function to calculate the real root path\n-    """\n+    """Helper function to calculate the real root path"""\n     context = aq_inner(context)\n     if currentFolderOnly:\n-        folderish = getattr(aq_base(context), \'isPrincipiaFolderish\', False) and \\\n-                    not INonStructuralFolder.providedBy(context)\n+        folderish = getattr(\n+            aq_base(context), "isPrincipiaFolderish", False\n+        ) and not INonStructuralFolder.providedBy(context)\n         parent = aq_parent(context)\n \n         is_default_page = False\n         browser_default = IBrowserDefault(parent, None)\n         if browser_default is not None:\n-            is_default_page = (browser_default.getDefaultPage() == context.getId())\n+            is_default_page = browser_default.getDefaultPage() == context.getId()\n \n         if not folderish or is_default_page:\n-            return \'/\'.join(parent.getPhysicalPath())\n+            return "/".join(parent.getPhysicalPath())\n         else:\n-            return \'/\'.join(context.getPhysicalPath())\n+            return "/".join(context.getPhysicalPath())\n \n     root = uuidToObject(root)\n     if root is not None:\n-        rootPath = \'/\'.join(root.getPhysicalPath())\n+        rootPath = "/".join(root.getPhysicalPath())\n     else:\n         rootPath = getNavigationRoot(context)\n \n     # Adjust for topLevel\n     if topLevel > 0:\n-        contextPath = \'/\'.join(context.getPhysicalPath())\n+        contextPath = "/".join(context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n             return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1:]\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split(\'/\')\n+            contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n                 return None\n-            rootPath = rootPath + \'/\' + \'/\'.join(contextSubPathElements[:topLevel])\n+            rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n         else:\n             return None\n \ndiff --git a/plone/app/portlets/portlets/navigation_recurse.pt b/plone/app/portlets/portlets/navigation_recurse.pt\nindex 4bef550d..8b6a9d28 100644\n--- a/plone/app/portlets/portlets/navigation_recurse.pt\n+++ b/plone/app/portlets/portlets/navigation_recurse.pt\n@@ -3,7 +3,9 @@\n                     bottomLevel options/bottomLevel | nothing;\n                     supress_icon    view/data/no_icons;\n                     supress_thumb   view/data/no_thumbs;\n-                    thumb_scale view/thumb_scale"\n+                    thumb_scale view/thumb_scale;\n+                    icons nocall:context/@@iconresolver;\n+                    normalizeString nocall: context/plone_utils/normalizeString;"\n             i18n:domain="plone">\n \n <metal:main define-macro="nav_main"\n@@ -22,8 +24,7 @@\n                 is_in_path      node/currentParent;\n                 li_class        python:\' navTreeCurrentNode\' if is_current else \'\';\n                 li_extr_class   python:\' navTreeItemInPath\' if is_in_path else \'\';\n-                li_folder_class python:\' navTreeFolderish\' if show_children else \'\';\n-                normalizeString nocall: context/plone_utils/normalizeString;"\n+                li_folder_class python:\' navTreeFolderish\' if show_children else \'\';"\n     tal:condition="python:bottomLevel &lt;= 0 or level &lt;= bottomLevel"\n     tal:attributes="class string:navTreeItem visualNoMarker${li_class}${li_extr_class}${li_folder_class} section-${node/normalized_id}">\n \n@@ -35,12 +36,14 @@\n                            title node/Description;\n                            class string:${item_class}${li_class}${li_extr_class}${li_folder_class} ${item_type_class}">\n \n-             <img class="mime-icon" tal:condition="python:item_type ==\'File\' and not supress_icon"\n-                             tal:attributes="href node/getURL;\n-                                             src python:view.getMimeTypeIcon(node);">\n+            <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n+                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n+\n+            <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n+                      tal:replace="structure python:icons.tag(f\'mimetype-{item.mime_type}\')" />\n \n             <img tal:condition="python:has_thumb and thumb_scale"\n-                 tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale, css_class=\'pull-right thumb-\'+thumb_scale)">\n+                 tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)">\n \n             <span tal:replace="node/Title">Selected Item Title</span>\n         </a>\ndiff --git a/plone/app/portlets/portlets/news.pt b/plone/app/portlets/portlets/news.pt\nindex 33fa54ca..3b53a00b 100644\n--- a/plone/app/portlets/portlets/news.pt\n+++ b/plone/app/portlets/portlets/news.pt\n@@ -2,58 +2,57 @@\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       tal:omit-tag="">\n-<aside class="portlet portletNews"\n-    i18n:domain="plone">\n \n-  <header class="portletHeader">\n-        <a href="#"\n-           class="tile"\n-           tal:define="all_news_link view/all_news_link"\n-           tal:omit-tag="not:all_news_link"\n-           tal:attributes="href all_news_link"\n-           i18n:translate="box_news">News</a>\n-  </header>\n-  <div \n-      tal:define="thumb_scale view/thumb_scale;\n-                  supress_thumb view/data/no_thumbs;"\n-       class="portletContent">\n-    <ul>\n-      <tal:newsitems  tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                                  plone_layout context/@@plone_layout;\n-                                  portal context/@@plone_portal_state/portal;\n-                                  image_scale portal/@@image_scale;\n-                                  thumb_scale view/thumb_scale"\n-                      tal:repeat="obj view/published_news_items">\n-      <li tal:define="oddrow repeat/obj/odd;"\n-          tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n+  <div class="card portlet portletNews"\n+      i18n:domain="plone">\n \n-        <a  href=""\n-            class="tile"\n-            tal:attributes="href obj/getURL;\n-                            title obj/Description">\n-           <img tal:condition="python:obj.getIcon and thumb_scale"\n-                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'pull-right thumb-\'+thumb_scale)" />\n+    <div class="card-header">\n+      <a href="#"\n+          class="tile"\n+          tal:define="all_news_link view/all_news_link"\n+          tal:omit-tag="not:all_news_link"\n+          tal:attributes="href all_news_link"\n+          i18n:translate="box_news">News</a>\n+    </div>\n \n-           <span tal:replace="obj/pretty_title_or_id">\n-             Plone 5.1 announced!\n-           </span>\n-        </a>\n-           <time class="portletItemDetails"\n-                    tal:content="python:toLocalizedTime(obj.Date)">May 5</time>\n+    <div class="card-body"\n+        tal:define="thumb_scale view/thumb_scale;\n+                    supress_thumb view/data/no_thumbs;">\n+      <ul>\n+        <tal:newsitems\n+            tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n+                        plone_layout context/@@plone_layout;\n+                        portal context/@@plone_portal_state/portal;\n+                        image_scale portal/@@image_scale;\n+                        thumb_scale view/thumb_scale"\n+            tal:repeat="obj view/published_news_items">\n+        <li tal:define="oddrow repeat/obj/odd;"\n+            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n+          <a href=""\n+              class="tile"\n+              tal:attributes="href obj/getURL;\n+                              title obj/Description">\n+            <img tal:condition="python:obj.getIcon and thumb_scale"\n+                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n+            <span tal:replace="obj/pretty_title_or_id">Plone 5.1 announced!</span>\n+          </a>\n+          <time class="portletItemDetails"\n+              tal:content="python:toLocalizedTime(obj.Date)">May 5</time>\n+        </li>\n+        </tal:newsitems>\n+      </ul>\n+    </div>\n+\n+    <div class="card-footer portletFooter"\n+        tal:condition="view/all_news_link">\n+      <a href=""\n+          tal:attributes="href view/all_news_link"\n+          i18n:translate="box_more_news_link">\n+        More news&hellip;\n+      </a>\n+    </div>\n+    <div class="card-footer" tal:condition="not:view/all_news_link"></div>\n \n-      </li>\n-      </tal:newsitems>\n-    </ul>\n   </div>\n-  <footer class="portletFooter"\n-         tal:condition="view/all_news_link">\n-        <a href=""\n-           tal:attributes="href view/all_news_link"\n-           i18n:translate="box_more_news_link">\n-          More news&hellip;\n-        </a>\n-  </footer>\n-  <footer class="portletFooter" tal:condition="not:view/all_news_link">\n-  </footer>\n-</aside>\n-</html>\n+\n+</html>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/news.py b/plone/app/portlets/portlets/news.py\nindex 5f1341c0..0075ee9d 100644\n--- a/plone/app/portlets/portlets/news.py\n+++ b/plone/app/portlets/portlets/news.py\n@@ -1,60 +1,61 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..cache import render_cachekey\n+from ..portlets import base\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRootObject\n-from plone.app.portlets.cache import render_cachekey\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform.directives import widget\n-from plone.memoize.compress import xhtml_compress\n from plone.memoize import ram\n+from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope import schema\n from zope.interface import implementer\n \n \n class INewsPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     widget(state=SelectFieldWidget)\n     state = schema.Tuple(\n-        title=_(u"Workflow state"),\n-        description=_(u"Items in which workflow state to show."),\n-        default=(\'published\', ),\n-        required=True,\n-        value_type=schema.Choice(\n-            vocabulary="plone.app.vocabularies.WorkflowStates")\n-        )\n+        title=_("Workflow state"),\n+        description=_("Items in which workflow state to show."),\n+        default=("published",),\n+        required=False,\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs"),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs"),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(INewsPortlet)\n@@ -63,8 +64,9 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, count=5, state=(\'published\',),\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(\n+        self, count=5, state=("published",), thumb_scale=None, no_thumbs=False\n+    ):\n         self.count = count\n         self.state = state\n         self.thumb_scale = thumb_scale\n@@ -72,12 +74,12 @@ def __init__(self, count=5, state=(\'published\',),\n \n     @property\n     def title(self):\n-        return _(u"News")\n+        return _("News")\n \n \n class Renderer(base.Renderer):\n \n-    _template = ViewPageTemplateFile(\'news.pt\')\n+    _template = ViewPageTemplateFile("news.pt")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -96,42 +98,45 @@ def published_news_items(self):\n     def all_news_link(self):\n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         portal = portal_state.portal()\n-        if \'news\' in getNavigationRootObject(context, portal).objectIds():\n-            return \'%s/news\' % portal_state.navigation_root_url()\n+        if "news" in getNavigationRootObject(context, portal).objectIds():\n+            return "%s/news" % portal_state.navigation_root_url()\n         return None\n \n     @memoize\n     def _data(self):\n         context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         path = portal_state.navigation_root_path()\n         limit = self.data.count\n         state = self.data.state\n-        return catalog(portal_type=\'News Item\',\n-                       review_state=state,\n-                       path=path,\n-                       sort_on=\'Date\',\n-                       sort_order=\'reverse\',\n-                       sort_limit=limit)[:limit]\n+        return catalog(\n+            portal_type="News Item",\n+            review_state=state,\n+            path=path,\n+            sort_on="Date",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     def thumb_scale(self):\n         """Use override value or read thumb_scale from registry.\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n             return None\n         thumb_scale_portlet = settings.thumb_scale_portlet\n@@ -140,17 +145,17 @@ def thumb_scale(self):\n \n class AddForm(base.AddForm):\n     schema = INewsPortlet\n-    label = _(u"Add News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Add News Portlet")\n+    description = _("This portlet displays recent News Items.")\n \n     def create(self, data):\n         return Assignment(\n-            count=data.get(\'count\', 5),\n-            state=data.get(\'state\', (\'published\', )),\n-            )\n+            count=data.get("count", 5),\n+            state=data.get("state", ("published",)),\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = INewsPortlet\n-    label = _(u"Edit News Portlet")\n-    description = _(u"This portlet displays recent News Items.")\n+    label = _("Edit News Portlet")\n+    description = _("This portlet displays recent News Items.")\ndiff --git a/plone/app/portlets/portlets/recent.pt b/plone/app/portlets/portlets/recent.pt\nindex 6a5fe80b..d7ce3ed1 100644\n--- a/plone/app/portlets/portlets/recent.pt\n+++ b/plone/app/portlets/portlets/recent.pt\n@@ -1,74 +1,57 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n-<aside class="portlet portletRecent"\n-    i18n:domain="plone">\n+      tal:omit-tag=""\n+      i18n:domain="plone">\n \n-    <header class="portletHeader">\n-        <a href="#"\n-            tal:attributes="href view/recently_modified_link"\n-            i18n:translate=""\n-            tal:content="view/title" />\n-    </header>\n-    <div class="portletContent"\n-        tal:condition="view/recent_items"\n+  <div class="card portlet portletRecent">\n+\n+    <div class="card-header">\n+      <a href="#" tal:attributes="href view/recently_modified_link" i18n:translate="" tal:content="view/title" />\n+    </div>\n+\n+    <div class="card-body" tal:condition="view/recent_items"\n         tal:define="plone_layout context/@@plone_layout;\n                     portal context/@@plone_portal_state/portal;\n                     image_scale portal/@@image_scale;\n                     supress_icon view/data/no_icons;\n                     supress_thumb view/data/no_thumbs;\n-                    thumb_scale view/thumb_scale">\n+                    thumb_scale view/thumb_scale;\n+                    icons nocall:context/@@iconresolver;">\n       <ul>\n-        <tal:items tal:define="plone_view context/@@plone;\n-                           normalizeString nocall:plone_view/normalizeString;\n-                           toLocalizedTime nocall:plone_view/toLocalizedTime;"\n-               tal:repeat="obj view/recent_items">\n-\n-          <li class="portletItem"\n-            tal:define="oddrow repeat/obj/odd;\n+        <tal:items\n+            tal:define="plone_view context/@@plone;\n+                        normalizeString nocall:plone_view/normalizeString;\n+                        toLocalizedTime nocall:plone_view/toLocalizedTime;"\n+            tal:repeat="obj view/recent_items">\n+        <li tal:define="oddrow repeat/obj/odd;\n                         item_type obj/portal_type;\n                         item_wf_state obj/review_state;\n                         item_wf_state_class python:\'state-\' + normalizeString(item_wf_state);\n-                        item_class python:\'contenttype-\' + normalizeString(obj.portal_type) if not supress_icon else \'\';"\n-            tal:attributes="class python:oddrow and  \'portletItem even\' or \'portletItem odd\'">\n-            <a href=""\n-                tal:attributes="href string:${obj/getURL}/view;\n-                                title obj/Description;\n-                                class string:$item_wf_state_class tile $item_class">\n-                  <img class="mime-icon" tal:condition="python:item_type ==\'File\' and not supress_icon"\n-                             tal:attributes="href obj/getURL;\n-                                             src python:view.getMimeTypeIcon(obj);">\n-\n-           <img tal:condition="python:obj.getIcon and thumb_scale and not supress_thumb and image_scale"\n-                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'pull-right thumb-\'+thumb_scale)" />\n-\n-                  <span tal:content="obj/pretty_title_or_id">\n-                     Title\n-                 </span>\n-\n-             </a>\n-             <time class="portletItemDetails"\n-                       tal:content="python:toLocalizedTime(obj.ModificationDate)"\n-                       >May 5</time>\n-          </li>\n+                        item_class python:\'contenttype-\' + normalizeString(obj.portal_type) if not supress_icon else \'\';">\n+          <a href="" tal:attributes="href string:${obj/getURL}/view; title obj/Description; class string:$item_wf_state_class tile $item_class">\n+\n+            <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n+                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n+            <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n+                      tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')" />\n+\n+            <img tal:condition="python:obj.getIcon and thumb_scale and not supress_thumb and image_scale" tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n+            <span tal:content="obj/pretty_title_or_id">Title</span>\n+          </a>\n+          <time tal:content="python:toLocalizedTime(obj.ModificationDate)">May 5</time>\n+        </li>\n         </tal:items>\n       </ul>\n     </div>\n \n-    <div class="portletContent"\n-        tal:condition="not: view/recent_items">\n-        <p i18n:translate="box_recent_no_items">No items changed yet.</p>\n+    <div class="card-body" tal:condition="not: view/recent_items">\n+      <p i18n:translate="box_recent_no_items">No items changed yet.</p>\n     </div>\n \n-    <footer class="portletFooter">\n-        <a href="#"\n-           class="tile"\n-           tal:attributes="href view/recently_modified_link"\n-           i18n:translate="box_more_recently_changed">\n-           All recent changes&hellip;\n-        </a>\n-    </footer>\n+    <div class="card-footer">\n+      <a href="#" class="tile" tal:attributes="href view/recently_modified_link" i18n:translate="box_more_recently_changed">All recent changes&hellip;</a>\n+    </div>\n+  </div>\n \n-</aside>\n </html>\ndiff --git a/plone/app/portlets/portlets/recent.py b/plone/app/portlets/portlets/recent.py\nindex 637d01ab..1893c525 100644\n--- a/plone/app/portlets/portlets/recent.py\n+++ b/plone/app/portlets/portlets/recent.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..cache import render_cachekey\n+from ..portlets import base\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.cache import render_cachekey\n-from plone.app.portlets.portlets import base\n from plone.memoize import ram\n from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n@@ -23,36 +22,39 @@\n \n class IRecentPortlet(IPortletDataProvider):\n \n-    count = schema.Int(title=_(u\'Number of items to display\'),\n-                       description=_(u\'How many items to list.\'),\n-                       required=True,\n-                       default=5,\n-                       min=1)\n+    count = schema.Int(\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n+        required=True,\n+        default=5,\n+        min=1,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons "),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n-        required=True,\n-        default=False)\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n+        required=False,\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(IRecentPortlet)\n@@ -60,8 +62,7 @@ class Assignment(base.Assignment):\n     no_icons = False\n     thumb_scale = None\n \n-    def __init__(self, count=5, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, count=5, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.count = count\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n@@ -69,7 +70,7 @@ def __init__(self, count=5, no_icons=False,\n \n     @property\n     def title(self):\n-        return _(u"Recent items")\n+        return _("Recent items")\n \n \n def _render_cachekey(fun, self):\n@@ -79,26 +80,27 @@ def _render_cachekey(fun, self):\n \n \n class Renderer(base.Renderer):\n-    _template = ViewPageTemplateFile(\'recent.pt\')\n+    _template = ViewPageTemplateFile("recent.pt")\n \n-    title = _(\'box_recent_changes\', default=u"Recent Changes")\n+    title = _("box_recent_changes", default="Recent Changes")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n \n         context = aq_inner(self.context)\n         portal_state = getMultiAdapter(\n-            (context, self.request), name=\'plone_portal_state\')\n+            (context, self.request), name="plone_portal_state"\n+        )\n         self.anonymous = portal_state.anonymous()\n         self.navigation_root_url = portal_state.navigation_root_url()\n         self.typesToShow = portal_state.friendly_types()\n         self.navigation_root_path = portal_state.navigation_root_path()\n \n-        plone_tools = getMultiAdapter(\n-            (context, self.request), name=\'plone_tools\')\n+        plone_tools = getMultiAdapter((context, self.request), name="plone_tools")\n         self.catalog = plone_tools.catalog()\n \n     ram.cache(_render_cachekey)\n+\n     def render(self):\n         return xhtml_compress(self._template())\n \n@@ -110,17 +112,19 @@ def recent_items(self):\n         return self._data()\n \n     def recently_modified_link(self):\n-        return \'%s/recently_modified\' % self.navigation_root_url\n+        return "%s/recently_modified" % self.navigation_root_url\n \n     @memoize\n     def _data(self):\n         limit = self.data.count\n         path = self.navigation_root_path\n-        return self.catalog(portal_type=self.typesToShow,\n-                            path=path,\n-                            sort_on=\'modified\',\n-                            sort_order=\'reverse\',\n-                            sort_limit=limit)[:limit]\n+        return self.catalog(\n+            portal_type=self.typesToShow,\n+            path=path,\n+            sort_on="modified",\n+            sort_order="reverse",\n+            sort_limit=limit,\n+        )[:limit]\n \n     @memoize\n     def thumb_scale(self):\n@@ -128,41 +132,37 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', None)\n+        thsize = getattr(self.data, "thumb_scale", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n     def getMimeTypeIcon(self, obj):\n         fileo = obj.getObject().file\n         portal_url = getNavigationRoot(self.context)\n-        mtt = getToolByName(self.context, \'mimetypes_registry\')\n+        mtt = getToolByName(self.context, "mimetypes_registry")\n         if fileo.contentType:\n             ctype = mtt.lookup(fileo.contentType)\n-            return os.path.join(\n-                portal_url,\n-                guess_icon_path(ctype[0])\n-            )\n+            return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         return None\n \n \n class AddForm(base.AddForm):\n     schema = IRecentPortlet\n-    label = _(u"Add Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Add Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\n \n     def create(self, data):\n-        return Assignment(count=data.get(\'count\', 5))\n+        return Assignment(count=data.get("count", 5))\n \n \n class EditForm(base.EditForm):\n     schema = IRecentPortlet\n-    label = _(u"Edit Recent Portlet")\n-    description = _(u"This portlet displays recently modified content.")\n+    label = _("Edit Recent Portlet")\n+    description = _("This portlet displays recently modified content.")\ndiff --git a/plone/app/portlets/portlets/review.pt b/plone/app/portlets/portlets/review.pt\nindex 89611b0c..c3b16cf5 100644\n--- a/plone/app/portlets/portlets/review.pt\n+++ b/plone/app/portlets/portlets/review.pt\n@@ -2,63 +2,62 @@\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       tal:omit-tag="">\n-<aside class="portlet portletWorkflowReview"\n-    i18n:domain="plone">\n \n-  <header class="portletHeader">\n+  <div class="card portlet portletWorkflowReview"\n+      i18n:domain="plone">\n+\n+    <div class="card-header">\n       <a href="#"\n-           class="tile"\n-           tal:define="full_review_link view/full_review_link"\n-           tal:omit-tag="not:full_review_link"\n-           tal:attributes="href full_review_link"\n-           i18n:translate=""\n-           tal:content="view/title" />\n-  </header>\n-  <div class="portletContent"\n-       tal:define="supress_icon    view/data/no_icons;\n-                   supress_thumb   view/data/no_thumbs;\n-                   thumb_scale python:view.thumb_scale();\n-                   ">\n-    <ul>\n-      <tal:items tal:repeat="obj view/review_items">\n-          <li class="portletItem"\n-              tal:define="oddrow repeat/obj/odd;\n-                          review_state_class obj/review_state_class;\n-                          image obj/images;\n-                          hasImage obj/hasImage;\n-                          item_class python: obj[\'item_class\'] if not supress_icon else \'\';"\n-              tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n+          class="tile"\n+          tal:define="full_review_link view/full_review_link"\n+          tal:omit-tag="not:full_review_link"\n+          tal:attributes="href full_review_link"\n+          i18n:translate=""\n+          tal:content="view/title" />\n+    </div>\n \n-              <a href="#"\n-                 tal:attributes="href string:${obj/path}/view;\n-                                 title obj/description;\n-                                 class string:$review_state_class tile $item_class">\n+    <div class="card-body"\n+        tal:define="supress_icon    view/data/no_icons;\n+                    supress_thumb   view/data/no_thumbs;\n+                    thumb_scale python:view.thumb_scale();\n+                    ">\n+      <ul>\n+        <tal:items tal:repeat="obj view/review_items">\n+        <li class="portletItem"\n+            tal:define="oddrow repeat/obj/odd;\n+                        review_state_class obj/review_state_class;\n+                        image obj/images;\n+                        hasImage obj/hasImage;\n+                        item_class python: obj[\'item_class\'] if not supress_icon else \'\';"\n+            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n \n+          <a href="#"\n+              tal:attributes="href string:${obj/path}/view;\n+                              title obj/description;\n+                              class string:$review_state_class tile $item_class">\n             <img tal:condition="python:not supress_thumb and hasImage and thumb_scale"\n-                 tal:replace="structure python:image.scale(\'image\', scale=thumb_scale).tag(css_class=\'pull-right thumb-\'+thumb_scale)"/>\n+                tal:replace="structure python:image.scale(\'image\', scale=thumb_scale).tag(css_class=\'float-end thumb-\'+thumb_scale)"/>\n+            <span tal:replace="obj/title">Title</span>\n+          </a>\n+          <span class="portletItemDetails">\n+              <span tal:replace="obj/creator">Jim Smith</span> &mdash;\n+              <time tal:replace="obj/mod_date"> May 5</time>\n+          </span>\n \n-                  <span tal:replace="obj/title">\n-                      Title\n-                  </span>\n-              </a>\n+        </li>\n+        </tal:items>\n+      </ul>\n+    </div>\n \n-                  <span class="portletItemDetails">\n-                      <span tal:replace="obj/creator">Jim Smith</span> &mdash;\n-                      <time tal:replace="obj/mod_date"> May 5</time>\n-                  </span>\n+    <div class="card-footer"\n+        tal:define="full_review_link view/full_review_link"\n+        tal:condition="full_review_link">\n+      <a href="#"\n+          class="tile"\n+          tal:attributes="href full_review_link"\n+          i18n:translate="box_full_review_list">Full review list&hellip;</a>\n+    </div>\n \n-          </li>\n-      </tal:items>\n-    </ul>\n   </div>\n \n-  <footer class="portletFooter"\n-        tal:define="full_review_link view/full_review_link"\n-        tal:condition="full_review_link">\n-        <a href="#"\n-           class="tile"\n-           tal:attributes="href full_review_link"\n-           i18n:translate="box_full_review_list">Full review list&hellip;</a>\n-  </footer>\n-</aside>\n </html>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/review.py b/plone/app/portlets/portlets/review.py\nindex e8f4dfa0..cba8d97f 100644\n--- a/plone/app/portlets/portlets/review.py\n+++ b/plone/app/portlets/portlets/review.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..browser import formhelper\n+from ..portlets import base\n from Acquisition import aq_inner\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.browser import formhelper\n-from plone.app.portlets.portlets import base\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n@@ -21,29 +20,30 @@\n class IReviewPortlet(IPortletDataProvider):\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons "),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons"),\n-        required=True,\n-        default=False)\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons"),\n+        required=False,\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(IReviewPortlet)\n@@ -52,21 +52,21 @@ class Assignment(base.Assignment):\n     thumb_scale = None\n     no_thumbs = False\n \n-    def __init__(self, no_icons=False,\n-                 thumb_scale=None, no_thumbs=False):\n+    def __init__(self, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.no_icons = no_icons\n         self.thumb_scale = thumb_scale\n         self.no_thumbs = no_thumbs\n \n     @property\n     def title(self):\n-        return _(u"Review list")\n+        return _("Review list")\n+\n \n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'review.pt\')\n+    render = ViewPageTemplateFile("review.pt")\n \n-    title = _(\'box_review_list\', default=u"Review List")\n+    title = _("box_review_list", default="Review List")\n \n     def __init__(self, *args):\n         base.Renderer.__init__(self, *args)\n@@ -74,8 +74,9 @@ def __init__(self, *args):\n     @property\n     def anonymous(self):\n         context = aq_inner(self.context)\n-        portal_state = getMultiAdapter((context, self.request),\n-                                       name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter(\n+            (context, self.request), name="plone_portal_state"\n+        )\n         return portal_state.anonymous()\n \n     @property\n@@ -87,10 +88,10 @@ def review_items(self):\n \n     def full_review_link(self):\n         context = aq_inner(self.context)\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n         # check if user is allowed to Review Portal Content here\n-        if mtool.checkPermission(\'Review portal content\', context):\n-            return \'%s/full_review_list\' % context.absolute_url()\n+        if mtool.checkPermission("Review portal content", context):\n+            return "%s/full_review_list" % context.absolute_url()\n         else:\n             return None\n \n@@ -99,10 +100,10 @@ def _data(self):\n         if self.anonymous:\n             return []\n         context = aq_inner(self.context)\n-        workflow = getToolByName(context, \'portal_workflow\')\n+        workflow = getToolByName(context, "portal_workflow")\n \n-        plone_view = getMultiAdapter((context, self.request), name=\'plone\')\n-        getMember = getToolByName(context, \'portal_membership\').getMemberById\n+        plone_view = getMultiAdapter((context, self.request), name="plone")\n+        getMember = getToolByName(context, "portal_membership").getMemberById\n         toLocalizedTime = plone_view.toLocalizedTime\n \n         idnormalizer = queryUtility(IIDNormalizer)\n@@ -110,27 +111,29 @@ def _data(self):\n         objects = workflow.getWorklistsResults()\n         items = []\n         for obj in objects:\n-            review_state = workflow.getInfoFor(obj, \'review_state\')\n+            review_state = workflow.getInfoFor(obj, "review_state")\n             creator_id = obj.Creator()\n             creator = getMember(creator_id)\n             if creator:\n-                creator_name = creator.getProperty(\'fullname\', \'\') or creator_id\n+                creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            hasImage = True if getattr(obj, \'image\', None) else False\n-            images = obj.restrictedTraverse(\'@@images\') if hasImage else None\n-            items.append(dict(\n-                path=obj.absolute_url(),\n-                title=obj.pretty_title_or_id(),\n-                item_class = \'contenttype-\' + norm(obj.portal_type),\n-                description=obj.Description(),\n-                creator=creator_name,\n-                review_state=review_state,\n-                review_state_class=\'state-%s \' % norm(review_state),\n-                mod_date=toLocalizedTime(obj.ModificationDate()),\n-                hasImage=hasImage,\n-                images=images,\n-            ))\n+            hasImage = True if getattr(obj, "image", None) else False\n+            images = obj.restrictedTraverse("@@images") if hasImage else None\n+            items.append(\n+                dict(\n+                    path=obj.absolute_url(),\n+                    title=obj.pretty_title_or_id(),\n+                    item_class="contenttype-" + norm(obj.portal_type),\n+                    description=obj.Description(),\n+                    creator=creator_name,\n+                    review_state=review_state,\n+                    review_state_class="state-%s " % norm(review_state),\n+                    mod_date=toLocalizedTime(obj.ModificationDate()),\n+                    hasImage=hasImage,\n+                    images=images,\n+                )\n+            )\n         return items\n \n     @memoize\n@@ -139,30 +142,28 @@ def thumb_scale(self):\n         Image sizes must fit to value in allowed image sizes.\n         None will suppress thumb.\n         """\n-        if getattr(self.data, \'no_thumbs\', False):\n+        if getattr(self.data, "no_thumbs", False):\n             # Individual setting overrides ...\n             return None\n-        thsize = getattr(self.data, \'thumb_scale\', \'\')\n+        thsize = getattr(self.data, "thumb_scale", "")\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_scale_portlet = settings.thumb_scale_portlet\n         return thumb_scale_portlet\n \n \n class AddForm(formhelper.AddForm):\n     schema = IReviewPortlet\n-    label = _(u"Add Review Portlet")\n-    description = _(u"This portlet displays a queue of documents awaiting "\n-                    u"review.")\n+    label = _("Add Review Portlet")\n+    description = _("This portlet displays a queue of documents awaiting " "review.")\n \n     def create(self, data):\n         return Assignment(**data)\n \n+\n class EditForm(formhelper.EditForm):\n     schema = IReviewPortlet\n-    label = _(u"Edit Review Portlet")\n-    description = _(u"displays a queue of documents awaiting "\n-                    u"review.")\n+    label = _("Edit Review Portlet")\n+    description = _("displays a queue of documents awaiting " "review.")\ndiff --git a/plone/app/portlets/portlets/rss.pt b/plone/app/portlets/portlets/rss.pt\nindex 64d7f24e..66b9ec21 100644\n--- a/plone/app/portlets/portlets/rss.pt\n+++ b/plone/app/portlets/portlets/rss.pt\n@@ -2,50 +2,51 @@\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       tal:omit-tag="">\n-<aside class="portlet portletRss"\n-    i18n:domain="plone"\n-    tal:condition="view/enabled">\n \n-  <header class="portletHeader">\n-    <a href=""\n-           tal:attributes="href view/siteurl"\n-           tal:omit-tag="not:view/siteurl"\n-           tal:content="view/title"\n-           class="tile">\n-      Tags\n-    </a>\n-  </header>\n-  <div class="portletContent" >\n-    <ul tal:condition="view/feedAvailable">\n-      <tal:rss\n-                  tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime"\n-                  tal:repeat="item view/items">\n-          <li class="portletItem oddrow"\n-              tal:define="oddrow repeat/item/odd"\n-              tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n+  <div class="card portlet portletRss"\n+      i18n:domain="plone"\n+      tal:condition="view/enabled">\n+\n+    <div class="card-header">\n+      <a href=""\n+          tal:attributes="href view/siteurl"\n+          tal:omit-tag="not:view/siteurl"\n+          tal:content="view/title"\n+          class="tile">\n+        Tags\n+      </a>\n+    </div>\n+\n+    <div class="card-body" >\n+      <ul tal:condition="view/feedAvailable">\n+        <tal:rss tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime"\n+            tal:repeat="item view/items">\n+        <li class="portletItem oddrow"\n+            tal:define="oddrow repeat/item/odd"\n+            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n+          <a href="#"\n+              tal:attributes="href item/url"\n+              class="tile">\n+            <span tal:replace="item/title">Title</span>\n+          </a>\n+          <time class="portletItemDetails"\n+              tal:condition="exists:item/updated">\n+            <span tal:omit-tag="" tal:content="python:toLocalizedTime(item[\'updated\'])">19.02.2007</span>\n+          </time>\n+        </li>\n+        </tal:rss>\n+      </ul>\n+    </div>\n+\n+    <div class="card-footer" tal:condition="view/feedAvailable">\n+      <a href=""\n+          tal:condition="view/siteurl"\n+          tal:attributes="href view/siteurl">\n+        <span class="hiddenStructure"><span tal:replace="view/title" /> - </span>\n+        <span i18n:translate="box_morelink">More&hellip;</span>\n+      </a>\n+    </div>\n \n-              <a href="#"\n-                  tal:attributes="href item/url"\n-                  class="tile">\n-                  <span tal:replace="item/title">\n-                      Title\n-                  </span>\n-              </a>\n-              <time class="portletItemDetails"\n-                        tal:condition="exists:item/updated">\n-                <span tal:omit-tag="" tal:content="python:toLocalizedTime(item[\'updated\'])">19.02.2007</span>\n-              </time>\n-          </li>\n-      </tal:rss>\n-    </ul>\n   </div>\n-  <footer class="portletFooter" tal:condition="view/feedAvailable">\n-        <a href=""\n-           tal:condition="view/siteurl"\n-           tal:attributes="href view/siteurl">\n-           <span class="hiddenStructure"><span tal:replace="view/title" /> - </span>\n-           <span i18n:translate="box_morelink">More&hellip;</span>\n-        </a>\n-  </footer>\n-</aside>\n-</html>\n+\n+</html>\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex 9cdfe110..c53a37bd 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -1,20 +1,22 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from logging import getLogger\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile\n+from urllib.parse import urlparse\n from zope import schema\n-from zope.interface import implementer, Interface\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n import feedparser\n import time\n \n \n # Accept these bozo_exceptions encountered by feedparser when parsing\n # the feed:\n-ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride, )\n+ACCEPTED_FEEDPARSER_EXCEPTIONS = (feedparser.CharacterEncodingOverride,)\n \n # store the feeds here (which means in RAM)\n FEED_DATA = {}  # url: ({date, title, url, itemlist})\n@@ -23,10 +25,9 @@\n \n \n class IFeed(Interface):\n-\n     def __init__(url, timeout):\n         """initialize the feed with the given url. will not automatically load it\n-           timeout defines the time between updates in minutes\n+        timeout defines the time between updates in minutes\n         """\n \n     def loaded():\n@@ -55,7 +56,7 @@ def needs_update():\n \n     def update():\n         """update this feed. will automatically check failure state etc.\n-           returns True or False whether it succeeded or not\n+        returns True or False whether it succeeded or not\n         """\n \n     def update_failed():\n@@ -66,7 +67,7 @@ def ok():\n \n \n @implementer(IFeed)\n-class RSSFeed(object):\n+class RSSFeed:\n     """an RSS feed"""\n \n     def __init__(self, url, timeout):\n@@ -76,8 +77,8 @@ def __init__(self, url, timeout):\n         self._items = []\n         self._title = ""\n         self._siteurl = ""\n-        self._loaded = False    # is the feed loaded\n-        self._failed = False    # does it fail at the last update?\n+        self._loaded = False  # is the feed loaded\n+        self._failed = False  # does it fail at the last update?\n         self._last_update_time_in_minutes = 0  # when was the feed last updated?\n         self._last_update_time = None  # time as DateTime or Nonw\n         self._etag = None\n@@ -99,7 +100,7 @@ def update_failed(self):\n \n     @property\n     def ok(self):\n-        return (not self._failed and self._loaded)\n+        return not self._failed and self._loaded\n \n     @property\n     def loaded(self):\n@@ -128,20 +129,20 @@ def update(self):\n                 return self._retrieveFeed()\n         except:\n             self._failed = True\n-            logger.exception(\'failed to update RSS feed %s\', self.url)\n+            logger.exception("failed to update RSS feed %s", self.url)\n \n         return self.ok\n \n     def _buildItemDict(self, item):\n-        link = item.links[0][\'href\']\n+        link = item.links[0]["href"]\n         itemdict = {\n-            \'title\': item.title,\n-            \'url\': link,\n-            \'summary\': item.get(\'description\', \'\'),\n+            "title": item.title,\n+            "url": link,\n+            "summary": item.get("description", ""),\n         }\n         if hasattr(item, "updated"):\n             try:\n-                itemdict[\'updated\'] = DateTime(item.updated)\n+                itemdict["updated"] = DateTime(item.updated)\n             except DateTimeError:\n                 # It\'s okay to drop it because in the\n                 # template, this is checked with\n@@ -153,29 +154,37 @@ def _buildItemDict(self, item):\n     def _retrieveFeed(self):\n         """do the actual work and try to retrieve the feed"""\n         url = self.url\n-        if url != \'\':\n+        if url:\n+            if len(url.splitlines()) > 1:\n+                # More than one line in a url: probably a hacker.\n+                url = ""\n+            elif urlparse(url).scheme not in ("https", "http"):\n+                # Mostly: prevent loading local file: urls.\n+                url = ""\n+        if url != "":\n             self._last_update_time_in_minutes = time.time() / 60\n             self._last_update_time = DateTime()\n             kwargs = {}\n             if self._last_modified:\n-                kwargs[\'modified\'] = self._last_modified\n+                kwargs["modified"] = self._last_modified\n             if self._etag:\n-                kwargs[\'etag\'] = self._etag\n+                kwargs["etag"] = self._etag\n             d = feedparser.parse(url, **kwargs)\n-            if (getattr(d, \'bozo\', 0) == 1\n-                    and not isinstance(d.get(\'bozo_exception\'),\n-                                       ACCEPTED_FEEDPARSER_EXCEPTIONS)):\n+            if getattr(d, "bozo", 0) == 1 and not isinstance(\n+                d.get("bozo_exception"), ACCEPTED_FEEDPARSER_EXCEPTIONS\n+            ):\n                 self._loaded = True  # we tried at least but have a failed load\n                 self._failed = True\n-                logger.info(\'failed to update RSS feed %s\', \n-                            d.get(\'bozo_exception\', None))\n+                logger.info(\n+                    "failed to update RSS feed %s", d.get("bozo_exception", None)\n+                )\n                 return False\n-            \n+\n             #  If the response was 304, nothing changed!\n             #  Don\'t change anything...\n             if d.status != 304:\n-                self._etag = getattr(d, \'etag\', None)\n-                self._modified = getattr(d, \'modified\', None)\n+                self._etag = getattr(d, "etag", None)\n+                self._modified = getattr(d, "modified", None)\n \n                 try:\n                     self._title = d.feed.title\n@@ -185,14 +194,14 @@ def _retrieveFeed(self):\n                     self._siteurl = d.feed.link\n                 except AttributeError:\n                     self._siteurl = ""\n-            \n+\n                 self._items = []\n-                for item in d[\'items\']:\n+                for item in d["items"]:\n                     try:\n                         itemdict = self._buildItemDict(item)\n                     except AttributeError:\n                         continue\n-  \n+\n                     self._items.append(itemdict)\n \n             self._loaded = True\n@@ -228,47 +237,51 @@ def siteurl(self):\n class IRSSPortlet(IPortletDataProvider):\n \n     portlet_title = schema.TextLine(\n-        title=_(u\'Title\'),\n-        description=_(u\'Title of the portlet.  If omitted, the title of the \'\n-                      u\'feed will be used.\'),\n+        title=_("Title"),\n+        description=_(\n+            "Title of the portlet.  If omitted, the title of the " "feed will be used."\n+        ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     count = schema.Int(\n-        title=_(u\'Number of items to display\'),\n-        description=_(u\'How many items to list.\'),\n+        title=_("Number of items to display"),\n+        description=_("How many items to list."),\n         required=True,\n-        default=5)\n+        default=5,\n+    )\n \n     url = schema.TextLine(\n-        title=_(u\'URL of RSS feed\'),\n-        description=_(u\'Link of the RSS feed to display.\'),\n+        title=_("URL of RSS feed"),\n+        description=_("Link of the RSS feed to display."),\n         required=True,\n-        default=u\'\')\n+        default="",\n+    )\n \n     timeout = schema.Int(\n-        title=_(u\'Feed reload timeout\'),\n-        description=_(u\'Time in minutes after which the feed should be \'\n-                      u\'reloaded.\'),\n+        title=_("Feed reload timeout"),\n+        description=_("Time in minutes after which the feed should be " "reloaded."),\n         required=True,\n-        default=100)\n+        default=100,\n+    )\n \n \n @implementer(IRSSPortlet)\n class Assignment(base.Assignment):\n \n-    portlet_title = u\'\'\n+    portlet_title = ""\n \n     @property\n     def title(self):\n         """return the title with RSS feed title or from URL"""\n         feed = FEED_DATA.get(self.data.url, None)\n         if feed is None:\n-            return u\'RSS: \' + self.url[:20]\n+            return "RSS: " + self.url[:20]\n         else:\n-            return u\'RSS: \' + feed.title[:20]\n+            return "RSS: " + feed.title[:20]\n \n-    def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n+    def __init__(self, portlet_title="", count=5, url="", timeout=100):\n         self.portlet_title = portlet_title\n         self.count = count\n         self.url = url\n@@ -277,7 +290,7 @@ def __init__(self, portlet_title=u\'\', count=5, url=u"", timeout=100):\n \n class Renderer(base.DeferredRenderer):\n \n-    render_full = ZopeTwoPageTemplateFile(\'rss.pt\')\n+    render_full = ZopeTwoPageTemplateFile("rss.pt")\n \n     @property\n     def initializing(self):\n@@ -325,7 +338,7 @@ def feedlink(self):\n     @property\n     def title(self):\n         """return title of feed for portlet"""\n-        return getattr(self.data, \'portlet_title\', \'\') or self._getFeed().title\n+        return getattr(self.data, "portlet_title", "") or self._getFeed().title\n \n     @property\n     def feedAvailable(self):\n@@ -334,7 +347,7 @@ def feedAvailable(self):\n \n     @property\n     def items(self):\n-        return self._getFeed().items[:self.data.count]\n+        return self._getFeed().items[: self.data.count]\n \n     @property\n     def enabled(self):\n@@ -343,18 +356,19 @@ def enabled(self):\n \n class AddForm(base.AddForm):\n     schema = IRSSPortlet\n-    label = _(u"Add RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Add RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\n \n     def create(self, data):\n         return Assignment(\n-            portlet_title=data.get(\'portlet_title\', u\'\'),\n-            count=data.get(\'count\', 5),\n-            url=data.get(\'url\', \'\'),\n-            timeout=data.get(\'timeout\', 100))\n+            portlet_title=data.get("portlet_title", ""),\n+            count=data.get("count", 5),\n+            url=data.get("url", ""),\n+            timeout=data.get("timeout", 100),\n+        )\n \n \n class EditForm(base.EditForm):\n     schema = IRSSPortlet\n-    label = _(u"Edit RSS Portlet")\n-    description = _(u"This portlet displays an RSS feed.")\n+    label = _("Edit RSS Portlet")\n+    description = _("This portlet displays an RSS feed.")\ndiff --git a/plone/app/portlets/portlets/search.pt b/plone/app/portlets/portlets/search.pt\nindex 6d688799..7d1289f4 100644\n--- a/plone/app/portlets/portlets/search.pt\n+++ b/plone/app/portlets/portlets/search.pt\n@@ -1,61 +1,50 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n-<aside class="portlet portletSearch" role="search"\n-    i18n:domain="plone">\n+      tal:omit-tag=""\n+      i18n:domain="plone">\n \n-  <header class="portletHeader">\n-      <a class="tile"\n-         tal:attributes="href view/search_action">\n-        <tal:header\n-           condition="not:view/data/title|nothing"\n-           i18n:translate="box_search">Search</tal:header>\n-        <tal:header\n-           condition="view/data/title|nothing"\n-           tal:content="view/data/title">Search</tal:header>\n+  <div class="card portlet portletSearch">\n+\n+    <div class="card-header">\n+      <a class="tile" tal:attributes="href view/search_action">\n+        <tal:header condition="not:view/data/title|nothing" i18n:translate="box_search">Search</tal:header>\n+        <tal:header condition="view/data/title|nothing" tal:content="view/data/title">Search</tal:header>\n       </a>\n-  </header>\n+    </div>\n \n-  <div class="portletContent">\n+    <div class="card-body">\n       <form id="searchform" action="search"\n-            tal:define="livesearch view/enable_livesearch;"\n-            tal:attributes="action view/search_action;\n-                            data-action view/action;\n-                            class python: view.enable_livesearch() and \'pat-livesearch\' or None;\n-                            data-pat-livesearch python: view.enable_livesearch() and \'ajaxUrl:\' + view.navigation_root_url + \'/@@ajax-search\' or None;">\n+          style="min-width: auto;"\n+          tal:define="livesearch view/enable_livesearch;"\n+          tal:attributes="action view/search_action;\n+                          data-action view/action;\n+                          class python: view.enable_livesearch() and \'pat-livesearch\' or None;\n+                          data-pat-livesearch python: view.enable_livesearch() and \'ajaxUrl:\' + view.navigation_root_url + \'/@@ajax-search\' or None;">\n         <div class="LSBox">\n-          <input class="searchField"\n-              name="SearchableText"\n-              type="text"\n-              size="15"\n-              title="Search Site"\n-              placeholder="Search Site"\n-              i18n:attributes="title title_search_title;\n-                               placeholder title_search_site"\n-              tal:attributes="value request/SearchableText|nothing;\n-                              class python:livesearch and \'searchField portlet-search-gadget\' or \'searchField portlet-search-gadget-nols\'"\n-              /><input class="searchButton"\n-              type="submit"\n-              value="Search"\n-              i18n:attributes="value label_search;"/>\n-\n-          <div class="LSResult" style=""\n-               tal:condition="livesearch"\n-               tal:attributes="data-livesearch view/livesearch_action;">\n+          <div class="input-group">\n+            <input class="form-control"\n+                name="SearchableText"\n+                type="text"\n+                title="Search Site"\n+                placeholder="Search Site"\n+                i18n:attributes="title title_search_title; placeholder title_search_site"\n+                tal:attributes="value request/SearchableText|nothing; class python:livesearch and \'form-control portlet-search-gadget\' or \'form-control portlet-search-gadget-nols\'"/>\n+            <div class="input-group-append">\n+              <button type="submit" class="btn btn-primary" value="Search" i18n:attributes="value label_search" i18n:translate="label_submit">Submit</button>\n+            </div>\n+          </div>\n+          <div class="LSResult" style="" tal:condition="livesearch" tal:attributes="data-livesearch view/livesearch_action;">\n             <div class="LSShadow"></div>\n           </div>\n         </div>\n       </form>\n+    </div>\n+\n+    <div class="card-footer">\n+      <a href="#" tal:attributes="href view/search_action" i18n:translate="label_advanced_search">Advanced Search&hellip;</a>\n+    </div>\n+\n   </div>\n \n-    <footer class="portletFooter">\n-        <a href="#"\n-         class="tile"\n-         tal:attributes="href view/search_action"\n-         i18n:translate="label_advanced_search">\n-        Advanced Search&hellip;\n-        </a>\n-    </footer>\n-</aside>\n </html>\ndiff --git a/plone/app/portlets/portlets/search.py b/plone/app/portlets/portlets/search.py\nindex 8e9d735f..db7b3a68 100644\n--- a/plone/app/portlets/portlets/search.py\n+++ b/plone/app/portlets/portlets/search.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n+from ..portlets import base\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.app.portlets import PloneMessageFactory as _\n-from plone.app.portlets.portlets import base\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n@@ -10,47 +9,47 @@\n \n \n class ISearchPortlet(IPortletDataProvider):\n-    """ A portlet displaying a (live) search box\n-    """\n+    """A portlet displaying a (live) search box"""\n \n     enableLivesearch = schema.Bool(\n-        title=_(u"Enable LiveSearch"),\n-        description=_(u"Enables the LiveSearch feature, which shows "\n-                      u"live results if the browser supports "\n-                      u"JavaScript."),\n+        title=_("Enable LiveSearch"),\n+        description=_(\n+            "Enables the LiveSearch feature, which shows "\n+            "live results if the browser supports "\n+            "JavaScript."\n+        ),\n         default=True,\n-        required=False)\n+        required=False,\n+    )\n \n \n @implementer(ISearchPortlet)\n class Assignment(base.Assignment):\n-\n     def __init__(self, enableLivesearch=True):\n         self.enableLivesearch = enableLivesearch\n \n     @property\n     def title(self):\n-        return _(u"Search")\n+        return _("Search")\n \n \n class Renderer(base.Renderer):\n \n-    render = ViewPageTemplateFile(\'search.pt\')\n-    action = \'@@search\'\n-    livesearch_action = \'livesearch_reply\'\n+    render = ViewPageTemplateFile("search.pt")\n+    action = "@@search"\n+    livesearch_action = "livesearch_reply"\n \n     def __init__(self, context, request, view, manager, data):\n         base.Renderer.__init__(self, context, request, view, manager, data)\n \n-        portal_state = getMultiAdapter(\n-            (context, request), name=\'plone_portal_state\')\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.navigation_root_url = portal_state.navigation_root_url()\n \n     def enable_livesearch(self):\n         return self.data.enableLivesearch\n \n     def search_action(self):\n-        return \'{0}/{1}\'.format(self.navigation_root_url, self.action)\n+        return f"{self.navigation_root_url}/{self.action}"\n \n     def navigation_root_url(self):\n         return getNavigationRoot(self.context)\n@@ -58,8 +57,8 @@ def navigation_root_url(self):\n \n class AddForm(base.AddForm):\n     schema = ISearchPortlet\n-    label = _(u"Add Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Add Search Portlet")\n+    description = _("This portlet shows a search box.")\n \n     def create(self, data):\n         return Assignment()\n@@ -67,5 +66,5 @@ def create(self, data):\n \n class EditForm(base.EditForm):\n     schema = ISearchPortlet\n-    label = _(u"Edit Search Portlet")\n-    description = _(u"This portlet shows a search box.")\n+    label = _("Edit Search Portlet")\n+    description = _("This portlet shows a search box.")\ndiff --git a/plone/app/portlets/storage.py b/plone/app/portlets/storage.py\nindex 53f382b8..dca4820b 100644\n--- a/plone/app/portlets/storage.py\n+++ b/plone/app/portlets/storage.py\n@@ -1,46 +1,39 @@\n-# -*- coding: utf-8 -*-\n-from zope.annotation.interfaces import IAnnotations\n-from zope.interface import implementer\n-from zope.component import adapts\n-from zope.component import getUtility\n-\n-from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-\n-from zope.container.interfaces import INameChooser\n-from zope.container.contained import NameChooser\n-from zope.container.traversal import ItemTraverser\n-\n+from .interfaces import IGroupDashboardPortletAssignmentMapping\n+from .interfaces import IUserPortletAssignmentMapping\n from Acquisition import aq_base\n from BTrees.OOBTree import OOBTree\n from OFS.SimpleItem import SimpleItem\n-\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n-\n+from plone.portlets import constants\n from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets import constants\n from plone.portlets.storage import PortletAssignmentMapping as BaseMapping\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import getUtility\n+from zope.container.contained import NameChooser\n+from zope.container.interfaces import INameChooser\n+from zope.container.traversal import ItemTraverser\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n+from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-from plone.app.portlets.interfaces import IUserPortletAssignmentMapping\n-from plone.app.portlets.interfaces import IGroupDashboardPortletAssignmentMapping\n \n ATTEMPTS = 10000\n \n category_to_name = {\n-    constants.CONTEXT_CATEGORY: \'contextportlets\',\n-    constants.USER_CATEGORY: \'dashboard\',\n-    constants.GROUP_CATEGORY: \'groupportlets\',\n-    constants.CONTENT_TYPE_CATEGORY: \'contenttypeportlets\',\n+    constants.CONTEXT_CATEGORY: "contextportlets",\n+    constants.USER_CATEGORY: "dashboard",\n+    constants.GROUP_CATEGORY: "groupportlets",\n+    constants.CONTENT_TYPE_CATEGORY: "contenttypeportlets",\n }\n \n \n class PortletAssignmentMapping(BaseMapping, SimpleItem):\n-    """A Zope 2 version of the default assignment mapping storage.\n-    """\n+    """A Zope 2 version of the default assignment mapping storage."""\n \n-    def __init__(self, manager=u\'\', category=u\'\', name=u\'\', context=None):\n-        super(PortletAssignmentMapping, self).__init__(manager, category, name)\n+    def __init__(self, manager="", category="", name="", context=None):\n+        super().__init__(manager, category, name)\n         # Keep track of context so we can avoid storing anything\n         # until an assignment is actually added.\n         self._v_context = context\n@@ -55,16 +48,16 @@ def id(self):\n         suffix = manager\n \n         if category != constants.CONTEXT_CATEGORY and key:\n-            suffix = "%s+%s" % (manager, key)\n+            suffix = f"{manager}+{key}"\n \n-        return "++%s++%s" % (prefix, suffix)\n+        return f"++{prefix}++{suffix}"\n \n     def __getitem__(self, key):\n         return BaseMapping.__getitem__(self, key).__of__(self)\n \n     def __setitem__(self, key, assignment):\n         # add the assignment mapping to the object graph, if it\'s not there yet\n-        if getattr(self, \'_v_context\', None) is not None:\n+        if getattr(self, "_v_context", None) is not None:\n             annotations = IAnnotations(self._v_context)\n             assignments = annotations.get(CONTEXT_ASSIGNMENT_KEY, None)\n             if assignments is None:\n@@ -79,28 +72,25 @@ def __setitem__(self, key, assignment):\n \n @implementer(IUserPortletAssignmentMapping)\n class UserPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for user/dashboard portlets\n-    """\n+    """An assignment mapping for user/dashboard portlets"""\n \n \n @implementer(IGroupDashboardPortletAssignmentMapping)\n class GroupDashboardPortletAssignmentMapping(PortletAssignmentMapping):\n-    """An assignment mapping for group dashboard portlets\n-    """\n+    """An assignment mapping for group dashboard portlets"""\n \n     @property\n     def id(self):\n         manager = self.__manager__\n         key = self.__name__\n \n-        return "++groupdashboard++%s+%s" % (manager, key)\n+        return f"++groupdashboard++{manager}+{key}"\n \n \n @implementer(IBrowserPublisher)\n+@adapter(IPortletAssignmentMapping, IDefaultBrowserLayer)\n class PortletAssignmentMappingTraverser(ItemTraverser):\n-    """A traverser for portlet assignment mappings, that is acqusition-aware\n-    """\n-    adapts(IPortletAssignmentMapping, IDefaultBrowserLayer)\n+    """A traverser for portlet assignment mappings, that is acqusition-aware"""\n \n     def publishTraverse(self, request, name):\n         ob = ItemTraverser.publishTraverse(self, request, name)\n@@ -109,8 +99,7 @@ def publishTraverse(self, request, name):\n \n @implementer(INameChooser)\n class PortletsNameChooser(NameChooser):\n-    """A name chooser for portlets\n-    """\n+    """A name chooser for portlets"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -157,7 +146,7 @@ def chooseName(self, name, object):\n         container = self.context\n \n         if not name:\n-            name = getattr(object, \'title\', None)\n+            name = getattr(object, "title", None)\n \n         if not name:\n             name = object.__class__.__name__\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex 72f5b8b3..f37875e6 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,15 +1,14 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n+from plone.app.testing import login\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import applyProfile\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.testing import z2\n+from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n import doctest\n@@ -20,28 +19,29 @@ class PloneAppPortlets(PloneSandboxLayer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        z2.installProduct(app, \'plone.app.portlets\')\n+        z2.installProduct(app, "plone.app.portlets")\n \n         # Include testing profile\n         import plone.app.portlets\n-        xmlconfig.file(\'configure.zcml\',\n-                       plone.app.portlets.tests,\n-                       context=configurationContext)\n+\n+        xmlconfig.file(\n+            "configure.zcml", plone.app.portlets.tests, context=configurationContext\n+        )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n         # Prepare test content\n-        pw = getToolByName(portal, \'portal_workflow\')\n+        pw = getToolByName(portal, "portal_workflow")\n         pw.setDefaultChain("simple_publication_workflow")\n-        portal.invokeFactory("Folder", id=\'folder\', title=u"Test Folder")\n-        portal.invokeFactory("Folder", id=\'news\', title=u\'News\')\n-        portal.invokeFactory("Folder", id=\'users\', title=u\'Users\')\n-        portal.invokeFactory("Folder", id=\'events\', title=u\'Events\')\n-        pw.doActionFor(portal.news, \'publish\')\n+        portal.invokeFactory("Folder", id="folder", title="Test Folder")\n+        portal.invokeFactory("Folder", id="news", title="News")\n+        portal.invokeFactory("Folder", id="users", title="Users")\n+        portal.invokeFactory("Folder", id="events", title="Events")\n+        pw.doActionFor(portal.news, "publish")\n \n \n PLONE_APP_PORTLETS_FIXTURE = PloneAppPortlets()\ndiff --git a/plone/app/portlets/tests/__init__.py b/plone/app/portlets/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/portlets/tests/__init__.py\n+++ b/plone/app/portlets/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/portlets/tests/atom_feed_maurits.xml b/plone/app/portlets/tests/atom_feed_maurits.xml\nnew file mode 100644\nindex 00000000..7655d714\n--- /dev/null\n+++ b/plone/app/portlets/tests/atom_feed_maurits.xml\n@@ -0,0 +1,1520 @@\n+<?xml version="1.0" ?>\n+<?xml-stylesheet href="atom.css" type="text/css"?>\n+\n+<feed xmlns="http://www.w3.org/2005/Atom"\n+      xmlns:atom="http://www.w3.org/2005/Atom"\n+      xmlns:dc="http://purl.org/dc/elements/1.1/"\n+      xml:base="https://maurits.vanrees.org" xml:lang="en">\n+  <link rel="self"\n+        href="https://maurits.vanrees.org/weblog/topics/plone/@@atom.xml" />\n+  <div xmlns="http://www.w3.org/1999/xhtml">\n+    <a href="http://www.atomenabled.org/feedvalidator/check.cgi?url=https://maurits.vanrees.org/weblog/atom.xml">\n+      <img title="Validate my Atom feed" width="88"\n+           height="31"\n+           src="http://www.atomenabled.org/feedvalidator/images/valid-atom.png"\n+           alt="[Valid Atom]" border="0px" />\n+    </a>\n+    <p>\n+      <span>\n+        This is an Atom formatted XML site feed. It is intended to be viewed in\n+        a Newsreader or syndicated to another site. Please visit\n+      </span>\n+      <a href="http://www.atomenabled.org/">Atom Enabled</a>\n+      <span>\n+        for more info.\n+      </span>\n+    </p>\n+  </div>\n+\n+  <title type="html">Weblog</title>\n+\n+\n+  <updated>2021-01-05T10:33:42+00:00</updated>\n+\n+  <link href="https://maurits.vanrees.org/weblog"\n+        rel="alternate" type="text/html" />\n+\n+\n+\n+  <id>urn:syndication:3a1d81067fb16b9d671c9ee4a6efa204</id>\n+\n+  <generator uri="http://plone.org/products/fatsyndication/" version="0.1">fatsyndication</generator>\n+\n+\n+\n+    <entry>\n+\n+      <title>Philip Bauer: Growing Pains: PosKeyErrors and Other Malaises</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/philip-bauer-growing-pains-poskeyerrors-and-other-malaises" />\n+\n+\n+\n+      <id>urn:syndication:a2e343ca7c1c64182bc128b9a4f0be0b</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>This talk is about the issues that you face when your project grows, the code base grows, the database grows, the problems grow.\n+This is about the causes and some of the remedies.</p>\n+<div class="section" id="symptom-1-huge-database">\n+<h3><a name="symptom-1-huge-database">Symptom 1: huge database</a></h3>\n+<p>Cause 1: a huge number of revisions or versions.</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Remove all versions and pack the database. When you migrate to a new Plone version, and you ask your client, they will usually be okay with this.</li>\n+<li>Manage or limit revisions. Easiest is to use <a class="reference" href="https://github.com/collective/collective.revisionmanager">collective.revisionmanager</a> for this. Especially, revisions may have been left behind for content that no longer exists. You can easily remove it with this tool.</li>\n+<li>Disable versioning of Files. It is disabled by default, but maybe someone has switched it on.</li>\n+<li>Enable manual versioning instead of automatic. Then the editor needs to check a box when they make a major change that they want to be able to rollback.</li>\n+</ul>\n+<p>Cause 2: no packing.</p>\n+<p>Remedy: just pack it. Use the <tt class="docutils literal"><span class="pre">zeopack</span></tt> script, which part of <tt class="docutils literal"><span class="pre">plone.recipe.zeoserver</span></tt>. Add a cronjob for this, weekly seems best for most sites.</p>\n+<p>Cause 3: unused content.</p>\n+<p>Remedy: delete it. You have to find it first.\n+Of course no code can tell you which content is safe to delete.\n+You could use <tt class="docutils literal"><span class="pre">statistics.py</span></tt> from <a class="reference" href="https://github.com/collective/collective.migrationhelpers">collective.migrationhelpers</a> to get an idea of where which content is.</p>\n+<p>Cause 4: the SearchableText index is huge</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Use solr or elasticsearch and possibly remove the <tt class="docutils literal"><span class="pre">SearchableText</span></tt> index.</li>\n+<li>Don\'t index files. They are converted to text, but this may not be needed for your site.</li>\n+</ul>\n+<p>Cause 5: large blobs\n+For example, plone.de had a Linux <tt class="docutils literal"><span class="pre">iso</span></tt> image, which was huge.</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Limit the upload size. You could do this in nginx/apache. Archetypes had something, you can likely do this in Dexterity too.</li>\n+<li>Get stats and remove or replace too large items.</li>\n+</ul>\n+<p>Cause 6: aborted uploads (rare)</p>\n+<p>Remedy: check <tt class="docutils literal"><span class="pre">IAnnotations(portal).get(\'file_upload_map\')</span></tt>.</p>\n+</div>\n+<div class="section" id="symptom-2-slow-site">\n+<h3><a name="symptom-2-slow-site">Symptom 2: slow site</a></h3>\n+<p>Cause 1: unneeded full renders of content</p>\n+<p>Remedy: use Python in page templates.\n+By default, page templates use path expressions like this: <tt class="docutils literal"><span class="pre">tal:define=&quot;foo</span> <span class="pre">context/foo&quot;</span></tt>.\n+But this tries to render&nbsp; foo as html if possible.\n+Use <tt class="docutils literal"><span class="pre">foo</span> <span class="pre">python:context.foo</span></tt> instead.</p>\n+<p>Cause 2: wake up many objects</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Always try to use brains and metadata. The difference is huge, also with Dexterity.</li>\n+<li>Listing 3000 brains: 0.2 seconds</li>\n+<li>Listing 3000 objects: 2 seconds</li>\n+<li>Same is true for Volto when you use the search-endpoint with <tt class="docutils literal"><span class="pre">fullobjects</span></tt>.</li>\n+</ul>\n+<p>Of course most page templates in Plone will not list thousands of objects, but will be paginated.\n+Still: just use brains, they are so much tastier.</p>\n+<p>Cause 3: no caching</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Switch on the built-in caching</li>\n+<li>Add varnish</li>\n+<li>Manage the zeocache (that is a bit of science, ask the community)</li>\n+<li>Use <tt class="docutils literal"><span class="pre">memoize</span></tt> in your code.</li>\n+</ul>\n+<p>Cause 4: hardware</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Don\'t be cheap.</li>\n+<li>Buy enough ram to keep the database in memory.</li>\n+<li>Remember that your consulting time probably costs more than buying better hardware would.</li>\n+</ul>\n+<p>Cause 5: slow code</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Learn and use profiling. A very handy toy for that is <a class="reference" href="https://pypi.org/project/py-spy/">py-spy</a>. Sample use: <tt class="docutils literal"><span class="pre">sudo</span> <span class="pre">py-spy</span> <span class="pre">top</span> <span class="pre">--pid</span> <span class="pre">12345</span></tt></li>\n+<li>Do not call methods multiple times from templates. Call them once, store the result, and use this.</li>\n+</ul>\n+<p>Cause 6: slow data sources</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>decouple, for example using redis or celery</li>\n+<li>Use your choice of async implementations</li>\n+<li>Use lazyloading of images if they come from outside of your Plone site.</li>\n+</ul>\n+</div>\n+<div class="section" id="symptom-3-conflict-errors">\n+<h3><a name="symptom-3-conflict-errors">Symptom 3: conflict errors</a></h3>\n+<p>Conflict errors happen when two requests work at the same time and both change the same object.\n+This is complicated, but Zope and the ZODB have built-in conflict resolution.</p>\n+<p>Cause 1: conflict resolving is not enabled.\n+The zeoserver needs access to the same code that your zeoclient has, otherwise conflicts cannot be resolved and the transaction will be aborted.</p>\n+<p>Remedy: add all application code to the zeoserver:</p>\n+<pre class="literal-block">\n+[zeoserver]\n+eggs = ${buildout:eggs}\n+</pre>\n+<p>Cause 2: long running requests change data</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Prevent writes.</li>\n+<li>If it takes long, do intermediate commits when possible.</li>\n+<li>Prevent crossfire: disable cronjobs and editors when a long request needs to run.</li>\n+<li>Use async. Talk to Asko about that probably.</li>\n+</ul>\n+</div>\n+<div class="section" id="symptom-4-poskeyerrors">\n+<h3><a name="symptom-4-poskeyerrors">Symptom 4: PosKeyErrors</a></h3>\n+<p>Cause 1: missing blobs</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Copy all blobs of course.</li>\n+<li>Use <a class="reference" href="https://pypi.org/project/experimental.gracefulblobmissing/">experimental.gracefulblobmissing</a> in development to create dummy blobs where needed.</li>\n+<li>Find and delete afflicted content in a browser view.</li>\n+<li>There can be cases when you have two zeoclients and the syncing does not work well. Talk to Alessandro about that.</li>\n+</ul>\n+</div>\n+<div class="section" id="symptom-5-broken-data">\n+<h3><a name="symptom-5-broken-data">Symptom 5: broken data</a></h3>\n+<p>Now for the really interesting part.\n+These are errors like:</p>\n+<pre class="literal-block">\n+ModuleNotFoundError\n+AttributeError\n+ImportError\n+PostKeyError\n+BrokenObject\n+</pre>\n+<p>I could read you my whole blog post about <a class="reference" href="https://www.starzel.de/blog/zodb-debugging">zodb debugging</a>.</p>\n+<p>Cause 1: code to unpickle som data is missing</p>\n+<p>Remedies:</p>\n+<ul class="simple">\n+<li>Ignore the errors, if normal operation still works, and the site only has to stay up for a limited time, because <tt class="docutils literal"><span class="pre">zeopack</span></tt> probably also fails.</li>\n+<li>Fix it with a <a class="reference" href="https://github.com/zopefoundation/zodbupdate#id4">rename_dict</a>. See <a class="reference" href="https://github.com/zestsoftware/zest.zodbupdate">zest.zodbupdate</a> for some examples that are actually really useful. [Thanks! MvR]</li>\n+<li>Work around it with an <tt class="docutils literal"><span class="pre">alias_module</span></tt> patch, like <tt class="docutils literal"><span class="pre">plone.app.upgrade</span></tt> does in several cases. Then imports can work again.</li>\n+<li>Find out what and where broken objects are and then fix or remove them safely. Use <a class="reference" href="https://pypi.org/project/zodbverify/">zodbverify</a>.</li>\n+</ul>\n+<p>Steps for the last one:</p>\n+<ul class="simple">\n+<li>Call <tt class="docutils literal"><span class="pre">bin/zodbverify</span> <span class="pre">-f</span> <span class="pre">var/filestorage/Data.fs</span></tt> to get all broken objects.</li>\n+<li>Pick one error type at a time, with an oid (object id) that has a problem.</li>\n+<li>Call <tt class="docutils literal"><span class="pre">bin/zodbverify</span> <span class="pre">-f</span> <span class="pre">var/filestorage/Data.fs</span> <span class="pre">-o</span> <span class="pre">&lt;oid&gt;</span> <span class="pre">-D</span></tt> to inspect one object and find out where it is referenced.</li>\n+<li>For the extra options, you should use the branch from my <a class="reference" href="https://github.com/plone/zodbverify/pull/8">pull request</a>, which I still have not finished yet, but it runs fine.</li>\n+<li>Remove or fix the object.</li>\n+<li>Important: make notes, write upgrade steps, keep the terminal log, because you will forget it and need it again.</li>\n+</ul>\n+<p>To remove or fix the object, it helps to start the actual Plone site with some special zodbverify sauce:</p>\n+<pre class="literal-block">\n+./bin/instance zodbverify -f var/filestorage/Data.fs -o &lt;oid&gt; -D\n+</pre>\n+<p>Then you can use your debugging skills to try and fix things.\n+Note that after you fixed it, you need to commit the changes explicitly:</p>\n+<pre class="literal-block">\n+import transaction\n+transaction.commit()\n+</pre>\n+<p>Note that the bad object is still in the database, until you pack it.</p>\n+<p>Frequent culprits are IntIds and Relations, especially if you migrated from Archetypes to Dexterity.\n+Using <a class="reference" href="https://github.com/collective/collective.relationhelpers/blob/master/src/collective/relationhelpers/api.py">collective.relationhelpers</a> you can clean this up:</p>\n+<pre class="literal-block">\n+from collective.relationhelpers.api import cleanup_intids\n+from collective.relationhelpers.api import purge_relations\n+from collective.relationhelpers.api import restore_relations\n+from collective.relationhelpers.api import store_relations\n+# store all relations in a annotation on the portal\n+store_relations()\n+# empty the relation-catalog\n+purge_relations()\n+# remove all relationvalues and refs to broken objects from intid\n+cleanup_intids()\n+# recreate all relations from a annotation on the portal\n+restore_relations()\n+</pre>\n+</div>\n+<div class="section" id="symptom-6-bad-code">\n+<h3><a name="symptom-6-bad-code">Symptom 6: bad code</a></h3>\n+<p>Unreadable, untested, unused, undocumented, unmaintained, complicated, overly complex, too much code.\n+If you can convince a client to <em>not</em> want a feature because they will only use it once, that is a win.\n+Every line of code that is <em>not</em> written, is a good line of code.</p>\n+</div>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-11T17:08:38+00:00</published>\n+\n+      <updated>2021-01-05T10:33:42+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Maik Derstappen: Plone 6 Theming with Diazo</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/maik-derstappen-plone-6-theming-with-diazo" />\n+\n+\n+\n+      <id>urn:syndication:3ba6d872864981f8695780e8de6d246f</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>How does Plone theming look in classic UI?</p>\n+<ul class="simple">\n+<li>html5 theme plus a mapping configuration</li>\n+<li>deploying themes as ZIP-file for shared hosting is possible</li>\n+<li>With Diazo you can map any Plone html to a static theme layout.</li>\n+</ul>\n+<p>Separating frontend and backend theme.\n+Don\'t reinvent the backend views!\n+You could theme the backend, so for content editors and admins, but it looks fine, not needed.\n+You should focus on the frontend layout for visitors.\n+To use the default backend layout you can include <tt class="docutils literal"><span class="pre">backend.xml</span></tt> in your rules, with some conditions.</p>\n+<p>Diazo is not for everything!\n+If the backend markup differs from what you need, do not try to solve it with Diazo or XSLT.\n+Instead, fix the backend templates directly, most likely with a <tt class="docutils literal"><span class="pre">z3c.jbot</span></tt> override.</p>\n+<p>You can use <a class="reference" href="https://github.com/collective/collective.themefragments/">theme fragments</a> or browser views to add new templates.\n+The theme fragments can also be used as tiles in Mosaic.</p>\n+<p>I like using SASS mixins.\n+Say you have a <tt class="docutils literal"><span class="pre">&lt;div</span> <span class="pre">class=&quot;main-wrapper</span> <span class="pre">container&quot;&gt;</span></tt>.\n+Cleaner would be <tt class="docutils literal"><span class="pre">&lt;div</span> <span class="pre">class=&quot;main-wrapper&quot;&gt;</span></tt>.\n+You can do this with mixins with <tt class="docutils literal"><span class="pre">&#64;include</span></tt> in your selector.</p>\n+<p>For more information on Diazo, see <a class="reference" href="https://diazo.org">https://diazo.org</a>.</p>\n+<div class="section" id="new-features-in-plone-6">\n+<h3><a name="new-features-in-plone-6">New features in Plone 6</a></h3>\n+<p>From the backend we get Bootstrap 5 compatible html.\n+Result is that Bootstrap themes are easier to integrate in Plone 6.</p>\n+<p>You have custom CSS in the theming control panel, for small changes.\n+This actually sneaked into Plone 5.2.2 as well.</p>\n+<p>We have simplified Diazo rules.</p>\n+<p>Create a theme with plonecli:</p>\n+<ul class="simple">\n+<li>pip install plonecli</li>\n+<li>plonecli create addon plonetheme.yourtheme</li>\n+<li>cd plonetheme.yourtheme</li>\n+<li>plonecli add theme</li>\n+<li>plonecli build</li>\n+</ul>\n+<p>Theme from this presentation will be published as <a class="reference" href="https://github.com/collective/collective.bunapisicuto">collective.bunapisicuto</a> when it is ready for you to inspect.</p>\n+</div>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-10T22:16:11+00:00</published>\n+\n+      <updated>2020-12-10T22:16:11+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Stefan Antonelli: Plone 6 Theming from Scratch</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/stefan-antonelli-plone-6-theming-from-scratch" />\n+\n+\n+\n+      <id>urn:syndication:d1f0f9b0e055800492dbadd973f3290e</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>How to create a theme for Plone 6.\n+Quite easy, because the templates use Bootstrap 5 classes.\n+We build a theme from scratch, no Barceloneta, no Diazo.</p>\n+<p>First step is to create an empty plone_addon package with <tt class="docutils literal"><span class="pre">plonecli</span></tt> or <tt class="docutils literal"><span class="pre">mr.bob</span></tt>.\n+For the questions you can answer: use Plone 5.2.1. We will switch later.\n+My theme is <a class="reference" href="https://github.com/collective/plonetheme.munich">plonetheme.munich</a>.</p>\n+<p>I recommend to cleanup the standard package a bit.\n+I remove tests, constraints for Plone 4 and 5.\n+Check it out in the commits.</p>\n+<p>Now switch to <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/buildout.cfg">extend Plone 6</a> and run the buildout.</p>\n+<p>You can add theme structure with a bob template, but I prefer creating my own.</p>\n+<p>Some interesting files:</p>\n+<ul class="simple">\n+<li><a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/package.json">package.json</a> lists various tasks, especially the <tt class="docutils literal"><span class="pre">watch</span></tt> task.</li>\n+<li>In the theme <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/src/plonetheme/munich/theme/manifest.cfg">manifest.cfg</a> we more or less disable Diazo by emptying the <tt class="docutils literal"><span class="pre">rules</span></tt> line.</li>\n+<li>The compiled CSS and JavaScript are registered in <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/src/plonetheme/munich/profiles/default/registry/main.xml">registry.xml</a>.</li>\n+</ul>\n+<p>You can compile SASS to CSS using npm or yarn.\n+Do <tt class="docutils literal"><span class="pre">yarn</span> <span class="pre">install</span></tt> in the top of your package.\n+Later, with <tt class="docutils literal"><span class="pre">yarn</span> <span class="pre">dist</span></tt> you make it ready for production.</p>\n+<p>After these steps Plone is partially broken, or at least ugly.\n+I do some <a class="reference" href="https://github.com/collective/plonetheme.munich/commit/000717fb336849facec17b8fbd7b75686ec6146b">basic fixes</a> and it looks better.</p>\n+<p>For templates that you need to change you add <tt class="docutils literal"><span class="pre">z3c.jbot</span></tt> overrides.\n+Personally I always kick out the &quot;search in section&quot; checkbox.</p>\n+<p>I don\'t like columns, but for this example I kept them.\n+In most cases I need just one column.\n+Plus maybe a side bar for portlets, but portlets must die.</p>\n+<p>With <tt class="docutils literal"><span class="pre">plonetheme.tokyo</span></tt> everything is Bootstrap, no columns, so no portlets, really fully responsive.\n+This was the package where we built on Barceloneta Plone 5.2 and introduced lots of template overrides to put in Bootstrap.\n+For Plone 6 we can just remove the overrides.</p>\n+<p>What about the toolbar? Yes, we dropped it.\n+We bring editing features and navigation together.\n+This is now a few feature: <a class="reference" href="https://github.com/collective/collective.sidebar">collective.sidebar</a>.\n+It is only one template to override.\n+It works for Plone 5.2 at the moment, and I may work on it for Plone 6 during the sprints.</p>\n+<p>Question: is TTW still a viable path?</p>\n+<p>Answer: I like to concentrate on one path.\n+I am not an expert in TTW theming.\n+I switched to file system, except really small customizations.\n+For small CSS customizations there is a field in the theming control panel.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-10T17:08:30+00:00</published>\n+\n+      <updated>2020-12-10T17:08:30+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Stefan Antonelli and Peter Holzer: Modernize Plone\xe2\x80\x99s Classic UI</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/stefan-antonelli-and-peter-holzer-modernize-plone2019s-classic-ui" />\n+\n+\n+\n+      <id>urn:syndication:468faba6197c93edadf910d668dac1c1</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>What was new in Plone 5?\n+We had beautiful new theme: Barceloneta.\n+Diazo theming by default.\n+We switched to CSS compilation with <tt class="docutils literal"><span class="pre">less</span></tt>.</p>\n+<p>During the Tokyo conference Stefan thought up Tokyo Theme.\n+Clean responsive theme for Plone 5.\n+Tons of overrides to tackle problems in Plone 5.\n+Issue with navigation and editing on mobile we solved with collective.sidebar.</p>\n+<p>We had community discussions, especially during several Plone events.\n+Everyone tried to use Bootstrap (components).\n+First idea: map variables from Barceloneta to Bootstrap, because they have similar ideas using different terms.</p>\n+<p>We have PLIP to modernize markup in templates, and another PLIP to modernize the default theme: Barceloneta LTS.\n+Forms using z3c.form are already using the new classes.</p>\n+<p>Make things easier: UI, development.\n+Creating a modern UI for the web is complex.\n+You need to support different devices, responsiveness.\n+In Bootstrap there are patterns for most useful things.</p>\n+<p>Developer perspective: expect one way to do things.\n+Developers should not have to worry about design.\n+When busy in the backend, you should focus on Python, not on it looking nice and shiny.\n+Don\'t think about markup, just use components.\n+The good news: there is documentation. The Bootstrap documentation is our documentation.</p>\n+<p>What is new in Plone 6?</p>\n+<ul class="simple">\n+<li>Volto is the default UI.</li>\n+<li>There still is the Classic UI with Barceloneta look and feel, but updated.</li>\n+<li>No TTW (through the web) theming.</li>\n+<li>But there is a textarea to add some simple CSS (already in 5.2.3).</li>\n+<li>Some CSS variables may be changeable TTW.</li>\n+<li>Finally jQuery 3</li>\n+</ul>\n+<p>Bootstrap is still the most popular front-end framework.\n+Well documented, tested and maintained.\n+It is so easy to create stuff, I enjoy it a lot.</p>\n+<p>What is new in Bootstrap 5?</p>\n+<ul class="simple">\n+<li>Improved overall look and feel.</li>\n+<li>Updated and extended the color system</li>\n+<li>Custom properties: css variables</li>\n+<li>SVG Icon library</li>\n+<li>Pure javascript</li>\n+<li>Dropped IE10 and IE11 support</li>\n+<li>Bootstrap 5 is currently alpha 3.</li>\n+<li>See <a class="reference" href="https://v5.getbootstrap.com">https://v5.getbootstrap.com</a></li>\n+</ul>\n+<p>Features: what do we get from these changes?</p>\n+<ul class="simple">\n+<li>Core templates use Bootstrap 5 markup. Instead of overrides in <tt class="docutils literal"><span class="pre">plonetheme.tokyo</span></tt>, we have lots of branches for the actual packages.</li>\n+<li>All major templates have been touched already.</li>\n+<li>For the current state, see the unofficial demo at <a class="reference" href="https://classic.plone.de">https://classic.plone.de</a></li>\n+<li>The <a class="reference" href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">Bootstrap documentation</a> has lots of snippets than you can copy.</li>\n+<li>You don\'t need much more CSS on top of it if you paste most examples. We added a little for own components, like navigation.</li>\n+</ul>\n+<p>Barceloneta appearance is fully customizable.\n+It is basically on opinionated set of bootstrap variables.\n+Every aspect can be changed with variables: colors, fonts, sizes, spacings, grid gutters, etc.\n+There are overall properties, like shadowed, rounded, gradients. Just turn on or off.</p>\n+<p>Theming workflow.\n+<tt class="docutils literal"><span class="pre">plonetheme.barceloneta</span></tt> will also be published as <tt class="docutils literal"><span class="pre">npm</span></tt> package.\n+<tt class="docutils literal"><span class="pre">bobtemplates.plone</span></tt> will have a template for the new theming workflow.\n+You can do quick and dirty customizations through the CSS overrides field in the theme controlpanel.</p>\n+<p>Diazo will still be there, will work as before.\n+Some optimizations in the <tt class="docutils literal"><span class="pre">rules.xml</span></tt> to make content are customizations easier.</p>\n+<p>How to deal with icons?\n+What if you want to change the content type icons? Used to be hard.\n+Now we come up with the idea of an icon resolver.\n+We decided to use the <a class="reference" href="https://icons.getbootstrap.com">bootstrap icons</a>.\n+Icons are registered via GenericSetup, for example with a record name <tt class="docutils literal"><span class="pre">plone.icon.alarm</span></tt> pointing to an SVG.\n+You can then override this in your own GS profile.</p>\n+<p>Example icon use:</p>\n+<pre class="literal-block">\n+&lt;tal:icon replace=&quot;structure python:icons.tag(\'love\', tag_class=\'custom-class\', tag_alt=\'foobar\')&quot; /&gt;\n+</pre>\n+<p>You get get back an inline SVG or an image tag.</p>\n+<p>Note: all z3c form widgets in Plone are now in <tt class="docutils literal"><span class="pre">plone.app.z3cform</span></tt>, and not scattered over lots of packages.</p>\n+<p>We will restart our weekly Plone 6 Classic UI sprints, starting Januari 13 2021, 10:00 (UTC+1).</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-10T16:02:29+00:00</published>\n+\n+      <updated>2020-12-10T16:02:29+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Keynote: The User Experience - Editing Composite Pages in Plone 6 and Beyond</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/keynote-the-user-experience-editing-composite-pages-in-plone-6-and-beyond" />\n+\n+\n+\n+      <id>urn:syndication:e244a1928902dfa6b7ea77347437d2d9</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>It may be a surprise to non-technical people to learn that pages created in Volto are not currently interoperable with traditional Plone\'s page editing. If you think about it, the reason becomes obvious. Volto, like Mosaic, creates tiled layouts, and like Mosaic it stores page data in special fields for the individual blocks and their layout. Neither Volto nor Mosaic pages are editable in TinyMCE, which expects just one rich text field.</p>\n+<p>Is this divergence between sites created in Volto and sites created in traditional Plone a problem? It does make it harder to describe what Plone is, and it might mean that there is no way to mix both approaches - for instance when part of a larger site is available as a Volto-based sub-site. Would it be possible to have one tool and one representation for tiled layouts so that we can avoid this divergence? Is there some other solution? Is it even a problem? Will Plone 6 be backwards compatible with Plone 5 and include a smooth upgrade path?</p>\n+<p>We will tackle these questions in this strategic panel discussion, moderated by Sally Kleinfeldt. Panelists will include Paul Roeland, Philip Bauer, Timo Stollenwerk, Victor Fernandez de Alba, and Eric Steele.</p>\n+<p>First, Philip has a message from Max Jacob who is very ill with pancreatic cancer and may not survive this weekend. He wants to thank the Plone community for what they allowed him to do: like organize the German Plone Konferenz. Thanks for all the friendships. Such a pity that this is happening now, he wanted to jump into only doing Plone for the next few years, due to changes at his job, and looked forward to that.</p>\n+<div class="section" id="classic-mosaic-and-volto-pages">\n+<h3><a name="classic-mosaic-and-volto-pages">Classic, Mosaic and Volto Pages</a></h3>\n+<p>We have Classic, Mosaic and Volto Pages. They have different internal representations and are not compatible.\n+Is this a problem? Is there a solution?\n+Is one tool, one representation possible?\n+If we really need three, how to position?</p>\n+<p>Paul: for me as user this presents a problem. When do you switch over your site?\n+We would like to not write 700 pages from scratch, again, like we did for previous composite pages.</p>\n+<p>Timo: We migrated quite a few large projects from classic Plone to Volto.\n+One of those had collective.cover (other composite page system).\n+Problem in general with such systems, is that they are pretty specific.\n+They solve specific use cases and come from different eras.\n+After any migration, it will not look the same any more.\n+Whatever you do: the page will initially look ugly.\n+So you put a lot of effort into migration, but then have to put manual effort into every page anyway.\n+It <em>can</em> help: you at least have a start.\n+We created a system where we migrated overview pages, and editors could click to migrate other pages one at a time.</p>\n+<p>Philip: We have code to migrate from non-folderish to folderish content types.\n+There will be code to migrate to dexterity site root on Plone 6.\n+We <em>can</em> make sure to migrate any standard content types.\n+Mosaic is another story.\n+So for pages you would at least have the text available. Maybe only visible for editors to pick and choose from.\n+You may lose portlets, unless they get implemented in Volto.</p>\n+<p>Timo: When you go to Plone 6 and do a redesign at the same time, then you can jump on Volto.\n+Otherwise you could stay at Classic Plone for now.\n+There will be an overlap period.</p>\n+<p>Victor: For Mosaic you could dump all tiles into html and insert it in a block.</p>\n+</div>\n+<div class="section" id="how-to-have-a-big-classic-site-with-a-subsite-made-in-volto">\n+<h3><a name="how-to-have-a-big-classic-site-with-a-subsite-made-in-volto">How to have a big Classic site with a subsite made in Volto?</a></h3>\n+<p>Victor: Definitely doable, though we have not done this ourselves.</p>\n+<p>Sally: But what happens when an editor in Classic goes to the Volto subsite? The Volto page would not be editable then, right?</p>\n+<p>Philip: You should not offer this. I see no upside, no use case.\n+Split them into separate applications, with shared authentication maybe.</p>\n+<p>Paul: Use case: large site with several departments.\n+The marketing department may want snazzy new Volto things.</p>\n+<p>Timo: Just create another site then.</p>\n+</div>\n+<div class="section" id="cost-and-benefit-of-upgrading-big-classic-site-to-plone-6">\n+<h3><a name="cost-and-benefit-of-upgrading-big-classic-site-to-plone-6">Cost and benefit of upgrading big Classic Site to Plone 6</a></h3>\n+<p>So you just had a big migration to Plone5, and now what would you get for going to Plone 6.</p>\n+<p>Philip: We have this discussion every major upgrade.\n+Communicate every upgrade as a relaunch.\n+The relaunch is the reason for the upgrade.\n+&quot;There is a new version so you need to upgrade&quot; does not fly for my clients.</p>\n+<p>Timo: We became a very developer oriented community, and every develop understands the need and benefits.\n+We should really get back to giving more value at major releases, so clients really want to upgrade themselves.\n+Plone releases should sell themselves.</p>\n+<p>Eric: It looks like we think Plone 6 + Volto is a costly upgrade with lots of benefits.\n+For Classic 5 to Classic 6 the upgrade is not costly.</p>\n+</div>\n+<div class="section" id="alex-limi-s-vision-for-deco-are-we-there-yet">\n+<h3><a name="alex-limi-s-vision-for-deco-are-we-there-yet">Alex Limi\'s vision for Deco: are we there yet?</a></h3>\n+<p>Was this fulfilled by Mosaic? Volto? Something still needed?</p>\n+<p>Paul: Not quite, but slowly getting there.\n+For me it would be Volto, plus some power features that Eau de Web (EEA) adds.</p>\n+<p>Timo: I think we went beyond what Limi envisioned.</p>\n+<p>Eric and Victor: What we have seen from Volto, is pretty close to what Alex wanted.</p>\n+<p>Victor: We gave the users powerful tools, so beware of them.</p>\n+<p>Philip: Partly yes. Volto is close, and it is for normal users.</p>\n+<p>Now some questions from users.</p>\n+</div>\n+<div class="section" id="is-there-a-plan-for-volto-to-support-editing-the-existing-richtext-fields-of-documents-news-items">\n+<h3><a name="is-there-a-plan-for-volto-to-support-editing-the-existing-richtext-fields-of-documents-news-items">Is there a plan for Volto to support editing the existing Richtext fields of Documents, News Items?</a></h3>\n+<p>Philip: This should be doable.</p>\n+</div>\n+<div class="section" id="migrations">\n+<h3><a name="migrations">Migrations</a></h3>\n+<p>Philip: Plone 4 to 5.2 was three migrations in one.\n+Plone 6 is less of a problem.</p>\n+<p>Eric: 5.2 had a lot of backend migrations.\n+A split between backend and frontend with plone.restapi in between makes things easier.</p>\n+<p>[The question on multiple variations of Volto, especially editors, went a bit too fast for me to write intelligible notes down.]</p>\n+</div>\n+<div class="section" id="what-s-the-future-of-using-ct-s-behaviors-in-plone-to-design-information-architecture">\n+<h3><a name="what-s-the-future-of-using-ct-s-behaviors-in-plone-to-design-information-architecture">What\'s the future of using CT\'s/behaviors in Plone to design information architecture?</a></h3>\n+<blockquote>\n+With Volto the trend seems mixing/adding 40 different blocks for every page.</blockquote>\n+<p>Timo: Blocks are definitely the way to work.\n+But the underlying power of content types and behaviors still exists.</p>\n+<p>Philip: We need blocks that represent a field or a behavior. That is unavoidable.</p>\n+</div>\n+<div class="section" id="next-steps">\n+<h3><a name="next-steps">Next steps</a></h3>\n+<p>Timo: We plan to have an open space on page compositions and Volto, and want to sprint on it.</p>\n+<p>Paul: Good if there is a longer term vision.\n+I would rather have more power that a Site Admin can lock down, than having to choose between three different versions.\n+I don\'t want choice stress.</p>\n+</div>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-10T14:55:55+00:00</published>\n+\n+      <updated>2020-12-10T14:55:55+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Lightning Talks Wednesday</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/lightning-talks-wednesday" />\n+\n+\n+\n+      <id>urn:syndication:c478decef0cbf87b0b04ae96599134b3</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <div class="section" id="lukas-guziel-continuous-deployment">\n+<h3><a name="lukas-guziel-continuous-deployment">Lukas Guziel: Continuous Deployment</a></h3>\n+<p>CD means deploying code automatically.\n+It saves time, reduces human error.\n+It Gitlab you can add <tt class="docutils literal"><span class="pre">gitlib-ci.yml</span></tt> and configure it.\n+Include a base template that you use in multiple projects.\n+End result can be a site that the customer can test.</p>\n+</div>\n+<div class="section" id="erico-andrei-world-plone-day-2021">\n+<h3><a name="erico-andrei-world-plone-day-2021">Erico Andrei: World Plone Day 2021</a></h3>\n+<p>We are a global community.\n+Almost 300 people from 36 countries are at this online conference.\n+World Plone Day is an annual Plone event.\n+Next year of course online. April 28th 2021.</p>\n+<p>We want to stream 24 hours live on our YouTube channel.\n+Showcase Plone. Technical talk, use cases, interviews, demo.</p>\n+<p>It should not all be in English, please use your own language.\n+Talk to your local community.</p>\n+<p>Please help and join. See <a class="reference" href="https://plone.org/events/wpd">https://plone.org/events/wpd</a></p>\n+</div>\n+<div class="section" id="andreas-jung-collective-contentsync2">\n+<h3><a name="andreas-jung-collective-contentsync2">Andreas Jung: collective.contentsync2</a></h3>\n+<p>Syncing content between Plone sites through <tt class="docutils literal"><span class="pre">plone.restapi</span></tt>.\n+It is a behavior.\n+You have a source Plone site and one or more target Plone sites.\n+You need Plone 5.2 under Python 3.</p>\n+<ul class="simple">\n+<li>Create a dedicated user account with global role Editor.</li>\n+<li>Configure on the content sync control panel.</li>\n+<li>Automatically creates two content rules to sync content when added or modified.</li>\n+<li>You can enable it on all content types, also Folders.</li>\n+</ul>\n+<p>See <a class="reference" href="https://github.com/collective/collective.contentsync2">https://github.com/collective/collective.contentsync2</a></p>\n+</div>\n+<div class="section" id="philip-bauer-why-relations-are-weird">\n+<h3><a name="philip-bauer-why-relations-are-weird">Philip Bauer: Why relations are weird</a></h3>\n+<p>These packages have a part in relations:</p>\n+<ul class="simple">\n+<li>zc.relation: abstract relation catalog</li>\n+<li>z3c.relationfield: fields and values on objects</li>\n+<li>plone.app.relationfield: converters from field to widget and vv</li>\n+<li>plone.app.z3cform: widgets</li>\n+<li>mockup: actual widget UI</li>\n+</ul>\n+<p>In a schema use a RelationChoice field with vocabulary plone.app.vocabularies.Catalog, and set pattern directives.</p>\n+<p>It is not straightforward.\n+So I wrote <tt class="docutils literal"><span class="pre">collective.relationhelpers</span></tt>.</p>\n+<p>See <a class="reference" href="https://github.com/collective/collective.relationhelpers">https://github.com/collective/collective.relationhelpers</a></p>\n+<p>Maybe use uuid instead of all this code.</p>\n+<p>[About ten people in the chat want to merge this package into plone.api. Actually, see <a class="reference" href="https://github.com/plone/plone.api/issues/223">this issue</a>.]</p>\n+</div>\n+<div class="section" id="christopher-lozinski-simple-json-schema-guis">\n+<h3><a name="christopher-lozinski-simple-json-schema-guis">Christopher Lozinski: Simple JSON Schema GUIs</a></h3>\n+<p>Create a JSON schema, automatically generate the UI.\n+Search for basic JSON editor library.\n+He shows JSON in ZODB, so you can browse it, if I understood correctly.\xf0\x9f\x99\x82</p>\n+</div>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-09T18:21:14+00:00</published>\n+\n+      <updated>2020-12-09T18:21:14+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Eric Brehault: Second Guessing the Single-Page-App Pattern</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/eric-brehault-second-guessing-the-single-page-app-pattern" />\n+\n+\n+\n+      <id>urn:syndication:8b678f3acfa36bff175e085791de850d</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>SPA (Single Page App) is about providing an entire app by exposing a single physical web page containing an enormous javascript bundle. It breaks the original web paradigm in many ways. Surprisingly enough, we invest a lot of efforts to mimic the regular web behaviour.</p>\n+<p>Isn\xe2\x80\x99t it time for modern frontend to reconsider the SPA approach?</p>\n+<p>[Note: Eric presented by using a projector to show his slides on a black Plone conference T-shirt. :-)]</p>\n+<p>Why are we doing this? Originally we always requested a whole page and this was considered slow. But we have good bandwidth now. And if you don\'t have good bandwidth, the super big bundle is not good either.</p>\n+<p>With SPA we try very hard to bring back the original working of the page, especially the browser history, being able to browse and then share the link to the current page.</p>\n+<p>To mitigate problems, we created an enormous stack. And we deny the complexity.  New tools create new problems, even when their individual creators does not see the complexity.</p>\n+<p>&quot;SPA isn\'t stable or efficient.&quot;\n+But there is no way back. For example, you cannot create Google Docs  with server side rendered pages.\n+Web 2.0 is 15 years old. It is still about content.</p>\n+<p>SPA is separation of concern, which is a good principle. But we mix the browser layer (how you get and view the page) and the content layer (the page content).</p>\n+<p>It seems a take it or leave it situation: either use SPA or don\'t. What do we want? We want proportionate complexity. Do we need 100 percent SPA?</p>\n+<p>You can use micro components, see for example the demo of Maik Derstappen in the lightning talks on Monday, using Svelte.\n+Micro frontend is bigger than that.  It is a part of the application, that you develop separately. For example, you could do the Plone Sharing page like this.</p>\n+<p>Can we compile each page separately? Then each page is an app.</p>\n+<p>ES6 native support would be interesting. Combine with HTTP/2 and you need no bundles.\n+Bundling is the most brutal thing ever. Horrible. Get rid of it.</p>\n+<p>Respect the layers. SPAs are monolithic. Break them down.</p>\n+<p>We should have a generic browser layer, common to many different use cases, for example for logging in.\n+I don\'t want to code that, but plug it. Second step: push this layer to the browsers themselves.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-09T17:41:59+00:00</published>\n+\n+      <updated>2020-12-09T17:42:16+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Asko Soukka: Deploying Plone and Volto, the Hard Way</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/asko-soukka-deploying-plone-and-volto-the-hard-way" />\n+\n+\n+\n+      <id>urn:syndication:7d213d4114be2f1ef8ed20a2e1983ed3</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>Here are the <a class="reference" href="https://datakurre.github.io/ploneconf2020/deploying-plone-and-volto-hard-way.pdf">slides</a>.</p>\n+<p>How about building Plone without buildout? Running Plone on Python 3 without WSGI? Deploying Plone and Volto with containers without Docker? Building all this in re-usable and safe manner in sandbox with restricted network access with Nix? Welcome to hear about our hipster setup where we lock, build and configure Plone deployments with Nix, insist to keep ZServer running on Python 3 for the love\'s sake, build software deployments into standalone tarball archives, and run them with Nomad \xe2\x80\x93 the simple on-premises-friendly alternative for K8S.</p>\n+<ul class="simple">\n+<li>The easy, documented way: buildout, WSGI, Docker (if you need containers), Registry.</li>\n+<li>Our way: pip, TxZServer, Nomad, Nix</li>\n+</ul>\n+<p>When you use a container infrastructure, you have multiple containers for running a Plone site, for example zeo clients, zeo servers, load balancer. Nomad helps there, and is much simpler than Kubernetes.\n+We have one job file to rule them all: task groups, instance count, update policy, server resources, volumen mounts, tasks, consul services, vault secrets, environment variables, exec artifacts.</p>\n+<p>Nomad has &quot;isolated fork / exec driver&quot;. No docker image needed. We have a Nix-built artifact, a tarball that we extract in the root of the container.</p>\n+<p>With Nix, you get 100 percent reproducible artifacts. Production equals development. You have a full dependency graph. The result is a standalone tarball, perhaps 100 MB. Disadvantage is that there are no conventions, no metadata, no shared layers, no documentation. It needs learning and practice. Well, some documentation now: <a class="reference" href="https://nixos.org">https://nixos.org</a> and <a class="reference" href="https://nix.dev">https://nix.dev</a>, partially made by people that were using Plone previously.</p>\n+<p>Some ugly parts from Nix:</p>\n+<ul class="simple">\n+<li>Every language has their own Nix-conventions</li>\n+<li>dependency generator ecosystem is comples</li>\n+<li>cyclic dependencies are not supported</li>\n+<li>no storage device is big enough for <tt class="docutils literal"><span class="pre">/nix/store</span></tt></li>\n+</ul>\n+<p>Our (legacy) approach for Plone 5.2.1 without Buildout and with pip:</p>\n+<ul class="simple">\n+<li>generated requirements.txt with buildout</li>\n+<li>create Python env with pip and nix</li>\n+<li>use pip-branch of z3c.autoinclude</li>\n+<li>disabled <tt class="docutils literal"><span class="pre">&lt;includeDependencies</span> <span class="pre">/&gt;</span></tt></li>\n+<li>generate instance skeleton with nix</li>\n+<li>forked plone.recipe.zope2instance</li>\n+</ul>\n+<p>Plone 6 without Buildout should be pip-installable out of the box, but that is hear-say.</p>\n+<p>We use TxZServer in production, so ZServer using Twisted.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-09T16:22:15+00:00</published>\n+\n+      <updated>2020-12-09T16:22:15+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Nicola Zambello: Theming Volto without SemanticUI: Is It Possible?</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/nicola-zambello-theming-volto-without-semanticui-is-it-possible" />\n+\n+\n+\n+      <id>urn:syndication:d96309ed215a2fec3c67f7f3e4d97885</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>We will walk through the process of building a product for Italian Public Administrations using a bootstrap-based theme.\n+I\'m presenting io-comune, RedTurtle\'s first product based on Volto and the strategies we used.\n+We will see the possibilities in Volto for theming without SemanticUI, using bootstrap and sass and what are the next ideas we could work on.</p>\n+<p>Scenario:</p>\n+<ul class="simple">\n+<li>We wanted to adopt Volto in our new project.</li>\n+<li>We needed to include Bootstrap.</li>\n+<li>Volto uses SemanticUI instead.</li>\n+<li>Two such frameworks will conflict, for example fighting over the same selector.</li>\n+</ul>\n+<p>We tried. We tried harder.\n+A cheap approach did not seem possible, so we looked for a sane one.</p>\n+<p>A new theme: <tt class="docutils literal"><span class="pre">pastanaga-cms-ui</span></tt>. Load only the CSS needed for Volto admin UI, see <a class="reference" href="https://github.com/plone/volto/pull/970">Volto PR 970</a>.\n+And <tt class="docutils literal"><span class="pre">public-ui</span></tt> for public pages.\n+In your <tt class="docutils literal"><span class="pre">src/theme.js</span></tt> do not import the css/less from semantic-ui, but the <tt class="docutils literal"><span class="pre">pastanaga-cms-ui</span></tt>.\n+In theme theme.config also use pastanaga-cms-ui.\n+Also razzle-config.</p>\n+<p>You should normalize your base style, for example:</p>\n+<pre class="literal-block">\n+body.cms-ui {\n+  .public-ui {\n+    font-size: 18px;\n+  }\n+}\n+</pre>\n+<p>and wrap your components with <tt class="docutils literal"><span class="pre">.public-ui</span></tt>.</p>\n+<p>Building a product:</p>\n+<ul class="simple">\n+<li>Base common package for every customer: <a class="reference" href="https://github.com/RedTurtle/design-volto-theme">https://github.com/RedTurtle/design-volto-theme</a></li>\n+<li>New intermediate layer for SemanticUI</li>\n+<li>New config layer for razzle/customizations</li>\n+<li>Template for actual projects: <tt class="docutils literal"><span class="pre">design-volto-kit</span></tt>, with a Yeoman generator: <tt class="docutils literal"><span class="pre">create-italia-volto-app</span></tt></li>\n+</ul>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-09T14:22:41+00:00</published>\n+\n+      <updated>2020-12-09T14:22:41+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Alin Voinea: Volto Dexterity Schema and Layout Editor</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/alin-voinea-volto-dexterity-schema-and-layout-editor" />\n+\n+\n+\n+      <id>urn:syndication:e78a4c57d7c28e52be32a25b83f7c466</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>Through the Web Dexterity Content-Types with Schema Editor and Blocks Layout Editor</p>\n+<p>How do we define content types schemas in Plone?</p>\n+<ul class="simple">\n+<li>TTW schema editor</li>\n+<li>GenericSetup profile</li>\n+<li>Behaviors, schemas in Python</li>\n+</ul>\n+<p>Why do we need them, we have Volto blocks, right?\n+You still need metadata, a title, etcetera. Certainly for larger institutions you need a structure, a schema.\n+Volto itself has schema-based components.</p>\n+<p>Layout editor.\n+Blocks have properties, like a placeholder, a position.\n+You can type text in a block: &quot;Published on date by author&quot;.\n+Then select &quot;date&quot; and link this text to the published date metadata,\n+and select &quot;author&quot; and link it to the author.\n+Save this as a layout for a content type.\n+You can export this to a JSONField in a custom behavior, so you can save it in version control for production.</p>\n+<p>List of add-ons and other packages that make Volto awesome:\n+<a class="reference" href="https://github.com/collective/awesome-volto">https://github.com/collective/awesome-volto</a></p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-08T17:40:59+00:00</published>\n+\n+      <updated>2020-12-08T17:40:59+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Jens Klein: Performance, Profiling, Power-Consumption</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/jens-klein-performance-profiling-power-consumption" />\n+\n+\n+\n+      <id>urn:syndication:8c53225f93c004d147e18d907160144d</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>I want to focus on Python performance, so not caching or database performance.</p>\n+<p>Tools:</p>\n+<ul class="simple">\n+<li><tt class="docutils literal"><span class="pre">py-spy</span></tt>: Overall mix of the whole live application, top-like.</li>\n+<li><tt class="docutils literal"><span class="pre">repoze.profile</span></tt>: WSGI middleware, slows down application. Profile single request and analyse its call stack by count, call time, etc.</li>\n+<li><tt class="docutils literal"><span class="pre">dis</span></tt>: disassembler for Python at the bytecode level.</li>\n+</ul>\n+<p>Improvements Plone 5.2.0-5.2.3:</p>\n+<ul class="simple">\n+<li>Avoided early <tt class="docutils literal"><span class="pre">providedBy</span></tt> calls</li>\n+<li><tt class="docutils literal"><span class="pre">__getattr__</span></tt> early exit on common attributes</li>\n+<li><tt class="docutils literal"><span class="pre">zope.interface</span></tt>: some functions are called hundreds of thousands of times when you reindex an index, so a tiny improvement helps a lot. I found various places that could use improvements, and that landed in the package, together with memory improvements by Jason Madden.</li>\n+</ul>\n+<p>Live demo. I call <tt class="docutils literal"><span class="pre">py-spy</span></tt> with <tt class="docutils literal"><span class="pre">sudo</span></tt> because I need to connect to an existing process id.</p>\n+<p>Future Todo\'s:</p>\n+<ul class="simple">\n+<li><tt class="docutils literal"><span class="pre">plone.restapi</span></tt> has optimization potential, all navigation related, but currently it still supports even Plone 4.3. This will likely wait for a 5.2-only or Python3-only branch.</li>\n+<li><tt class="docutils literal"><span class="pre">plone.registry</span></tt> is called too often</li>\n+<li>Use <tt class="docutils literal"><span class="pre">python:</span></tt> expressions in all page templates. They are way faster than standard Tales expressions.</li>\n+<li>More introspection.</li>\n+<li>Move more logic from page templates to Python code</li>\n+</ul>\n+<p>Advice: start introspecting the performance of your application.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-08T16:27:53+00:00</published>\n+\n+      <updated>2020-12-08T16:27:53+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Alex Clark: The State of Pillow</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/alex-clark-the-state-of-pillow" />\n+\n+\n+\n+      <id>urn:syndication:e34819d893c83228742eda41c42063d6</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>The Plone Conference account tweeted that a State of Plone talk would be awesome and that the Plone community missed me. I miss the Plone community too, so I am here.</p>\n+<p>I will state it clearly: Pillow would not exist if not for Plone.</p>\n+<p>In July 2010 I announced Pillow as &quot;friendly&quot; fork of PIL. The <a class="reference" href="https://mail.python.org/pipermail/image-sig/2010-July/006423.html">mailing thread</a> and future answers are interesting to read.</p>\n+<p>Some history:</p>\n+<ul class="simple">\n+<li>1991: Python 0.9.1</li>\n+<li>1995: PIL started</li>\n+<li>1998: Zope</li>\n+<li>1999: Zope2</li>\n+<li>2000: Python 2.0 with distutils</li>\n+<li>2001: Plone</li>\n+<li>2005: Buildout</li>\n+<li>2006: I attended my first Plone Conference, in Washington</li>\n+<li>2006: setuptools was born</li>\n+</ul>\n+<p>PIL had an issue, or Plone had an issue with PIL:</p>\n+<ul class="simple">\n+<li>PIL used distutils.</li>\n+<li>Plone 3.2 used Buildout and setuptools</li>\n+<li>PIL was not installable in Buildout and setuptools</li>\n+<li>Specific problem: <tt class="docutils literal"><span class="pre">import</span> <span class="pre">Image</span></tt> could mean the Image module from PIL, or the Image module from Zope.</li>\n+</ul>\n+<p>Various ways of repackaging PIL started, for example <tt class="docutils literal"><span class="pre">PILwoTk</span></tt>. You can still find various PIL derivatives at <a class="reference" href="https://dist.plone.org/thirdparty/">https://dist.plone.org/thirdparty/</a></p>\n+<p>PIL 1.1.6 from 2006 is still the last version on <a class="reference" href="https://pypi.org/project/PIL/#history">PyPI</a>. I got maintainership of this page this year, actually.\n+Pillow 1.0 is basically the same, except that it uses <tt class="docutils literal"><span class="pre">setuptools</span></tt>.\n+This worked in buildout.\n+I was happy.</p>\n+<p>Couple years, nothing really interesting happened.\n+But some contributors came along.\n+Pillow 2.0.0 in March 2013 had Python 3 support.</p>\n+<p>An important milestone in 2015: we added release notes.</p>\n+<p>Release schedule: in the beginning of every quarter.</p>\n+<p>We get some money from Tidelift for maintenance.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-08T16:23:06+00:00</published>\n+\n+      <updated>2020-12-08T16:26:22+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Lightning talks Monday</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/lightning-talks-monday" />\n+\n+\n+\n+      <id>urn:syndication:73d847717e4336392db709c0738ec383</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <div class="section" id="alec-mitchell-wysiwyg-problems-be-gone">\n+<h3><a name="alec-mitchell-wysiwyg-problems-be-gone">Alec Mitchell: WYSIWYG problems be gone</a></h3>\n+<p>A new add-on to vastly* improve your content editing experience.</p>\n+<p>(* size of improvement may vary, no warranty implied. The following is (un)paid free software promotional content)</p>\n+<p>Adding images to a document is so hard! At least nine steps! (Difficulty be exaggerated for marketing purposes).\n+Why can\'t you drop an image in?\n+You can, with our new, super special add-on <a class="reference" href="https://pypi.org/project/kcrw.tinymce-imagedrop/">krcw.tinymce_imagedrop</a>.</p>\n+<p>Can you drop two?\n+Yes!</p>\n+<p>Can you drop more than two?\n+No, because browsers are weird.</p>\n+<p>But it fails gracefully.</p>\n+</div>\n+<div class="section" id="steve-piercy-deform-and-friends">\n+<h3><a name="steve-piercy-deform-and-friends">Steve Piercy: Deform and friends</a></h3>\n+<p>How I learned to stop worrying and love web forms.\n+We must have a good interface, data structure, validation, security.\n+Deform (form library), colander (de/serialization), peppercorn (data structure), bootstrap forms for design.\n+We have a looooong list of widgets.\n+In deform 3.0 we will use bootstrap 5.\n+See <a class="reference" href="https://github.com/pylons/deform">https://github.com/pylons/deform</a></p>\n+</div>\n+<div class="section" id="christopher-lozinski-forest-wiki">\n+<h3><a name="christopher-lozinski-forest-wiki">Christopher Lozinski: Forest Wiki</a></h3>\n+<p>The <a class="reference" href="https://forestwiki.com/">Forest Wiki</a> is a modern version of Zope 2.\n+Biggest difference: it uses Pyramid\'s security and views.\n+Modern JavaScript enabled ZMI: reorder, sort, rename, etc.\n+Both WYSIWYG and MarkDown pages.\n+Advanced types like JSON, CoffeeScript, pug. Pug is the leading template engine for Node.</p>\n+</div>\n+<div class="section" id="jens-klein-relstorage">\n+<h3><a name="jens-klein-relstorage">Jens Klein: RelStorage</a></h3>\n+<p>Plone relational database backend storage.\n+It is a drop-in replacement for FileStorage of ZEO.\n+You can use PostgreSQL, MySQL, Oracle, SQLite.\n+It has been around for about 13 years, grown old, but in recent years development has picked up, driven by Jason Madden, including Python 3 support. It is much more performant.\n+Latest release 3.4.0 is form October 2020.</p>\n+<p>PostgreSQL is the cloud database, kind of industry standard, well supported by all big cloud providers.\n+Easy to install in Docker.</p>\n+<p>Advantages of RelStorage: fast, parallel commits, better concurrency, shorter locks.\n+Optimized per process caching.\n+Blobs in database.\n+Optionally you can use it in history free mode. You lose the Undo functionality, but you don\'t need to pack so often.</p>\n+<p><tt class="docutils literal"><span class="pre">plone.recipe.zope2instance</span></tt> supports it with the <tt class="docutils literal"><span class="pre">rel-storage</span></tt> option.</p>\n+<p>You can use additional client side caches, shared between all threads of a process.</p>\n+<p>With the <tt class="docutils literal"><span class="pre">zodbconvert</span></tt> tool you convert from ZEO to RelStorage, or the other way around, including converting blobs if needed.</p>\n+<p>ZODB keeps old transactions, so packing is needed, even in history free mode. RelStorage has a fast <tt class="docutils literal"><span class="pre">zodbpack</span></tt>.</p>\n+<p>Blobs:</p>\n+<ul>\n+<li><p class="first">RelStorage 3.x is Python 3 only and runs with Plone 5.2+. Here, blobs should be stored in RelStorage.</p>\n+</li>\n+<li><p class="first">RelStorage 2.x is for Plone 5.0, 5.1, and blobs should <a href="#id1" name="id2"><span class="problematic" id="id2">**</span></a>not**&nbsp; be stored in the database, except for Oracle backends, otherwise you should still use a shared blobs filesystem directory.</p>\n+<div class="system-message" id="id1">\n+<p class="system-message-title">System Message: <a name="id1">WARNING/2</a> (<tt class="docutils">&lt;string&gt;</tt>, line 69); <em><a href="#id2">backlink</a></em></p>\n+<p>Inline strong start-string without end-string.</p>\n+</div>\n+</li>\n+</ul>\n+<p>I use RelStorage today for all my live deployments. I have used it since version 1.6 with Plone 4.3 and never had problems. Always blazing fast. Dev/ops and sysadmins love it: it is a standard solution, nothing special, just works.</p>\n+</div>\n+<div class="section" id="maik-derstappen-add-on-catalog-for-plone">\n+<h3><a name="maik-derstappen-add-on-catalog-for-plone">Maik Derstappen: Add-on catalog for Plone</a></h3>\n+<p>We want to bring back an add-on catalog for Plone. You can look on PyPI, but it is hard to find packages.</p>\n+<p>We worked on a tool for this. You can search on named, filter on Plone versions and add-on types.</p>\n+<p>Components:</p>\n+<ul class="simple">\n+<li>The <a class="reference" href="https://github.com/collective/pyf.aggregator">Python Package Filter Aggregator</a> (<tt class="docutils literal"><span class="pre">pyf.aggregator</span></tt>) aggregates the meta information of all Python packages in the PyPI.</li>\n+<li>an <a class="reference" href="https://github.com/collective/pyf.api">api</a> using elasticsearch</li>\n+<li>a <a class="reference" href="https://github.com/collective/pyf-svelte-gui">prototype in Svelte</a></li>\n+</ul>\n+<p>We only aggregate packages that have classifier <tt class="docutils literal"><span class="pre">Plone</span> <span class="pre">::</span> <span class="pre">Framework</span></tt>.\n+We will probably work on this during the sprints and are happy to onboard you.</p>\n+</div>\n+<div class="section" id="david-bain-plone-and-webflow">\n+<h3><a name="david-bain-plone-and-webflow">David Bain: Plone and Webflow</a></h3>\n+<p>Both platforms are for building websites, but they approach things in different ways.\n+I hope this may inspire.\n+Keep in mind the motivation of the two platforms, which may account for some strengths and weaknesses.</p>\n+<p>Webflow is visual web design, less content management. Strong design tools.\n+Designer friendly layout tools.\n+You can design a page with what you could call blocks.</p>\n+<p>Plone is enterprise content management, focus on security.\n+Linking to an attachment is standard, where it is tricky in Webflow.\n+Forms are way more flexible.</p>\n+<p>We have also built a website in Webflow and based it on Plone.</p>\n+</div>\n+<div class="section" id="steve-piercy-pyramid-project-in-pycharm-professional">\n+<h3><a name="steve-piercy-pyramid-project-in-pycharm-professional">Steve Piercy: Pyramid Project in PyCharm Professional</a></h3>\n+<p>It is easy to create a such a project. Demo.\n+See <a class="reference" href="https://stevepiercy.github.io/pppp/">https://stevepiercy.github.io/pppp/</a></p>\n+</div>\n+<div class="section" id="miu-razvan-volto-grid-block">\n+<h3><a name="miu-razvan-volto-grid-block">Miu Razvan: Volto grid block</a></h3>\n+<ul class="simple">\n+<li>Created by Eau de Web team</li>\n+<li>Dependencies: Volto blocks form</li>\n+<li>Similar component: Volto columns block</li>\n+<li>Use it to organize other blocks.</li>\n+<li>Demo showing lots of configuration options, including for different screen sizes</li>\n+<li>See <a class="reference" href="https://github.com/eea/volto-grid-block">https://github.com/eea/volto-grid-block</a></li>\n+</ul>\n+</div>\n+<div class="section" id="maik-derstappen-custom-elements">\n+<h3><a name="maik-derstappen-custom-elements">Maik Derstappen: Custom elements</a></h3>\n+<p>Custom elements are an extension to normal native html elements, for example <tt class="docutils literal"><span class="pre">&lt;flag-icon&gt;</span></tt>.</p>\n+<p>The promise of web components: write once, use anywhere.\n+See <a class="reference" href="https://custom-elements-everywhere.com/">https://custom-elements-everywhere.com/</a></p>\n+<p>How do you use this in Plone?\n+Use <tt class="docutils literal"><span class="pre">plonecli</span> <span class="pre">add</span> <span class="pre">svelte_app</span></tt> to create a small app. Run <tt class="docutils literal"><span class="pre">yarn</span></tt>. Install in Plone add-ons control panel.\n+Edit a page. Replace html source with <tt class="docutils literal"><span class="pre">&lt;my-svelte-app</span> <span class="pre">/&gt;</span></tt>.\n+And your component is there and working.\n+The size is less than five&nbsp; kilobytes.</p>\n+</div>\n+<div class="section" id="tiberiu-ichim-volto-slate">\n+<h3><a name="tiberiu-ichim-volto-slate">Tiberiu Ichim: volto-slate</a></h3>\n+<p><tt class="docutils literal"><span class="pre">volto-slate</span></tt> is a drop-in replacement for the standard rich text editor in Volto.\n+Volto turns an HTML document into a modern document.</p>\n+<p>Why another text editor instead of improving the existing one?</p>\n+<ul class="simple">\n+<li>With Slate we get a better plugin framework. Plugins are just wrappers around the editor. The standard Draft.js is meant to be integrated directly by an application, no concept of plugins out-of-the-box.</li>\n+<li>Slate has simple DOM-like storage for its values, making it easier to render the ersult.</li>\n+</ul>\n+<p>Current status:</p>\n+<ul class="simple">\n+<li>No migrations of any kind.</li>\n+<li>Right now not possible to completely remove or replace Draftjs out of Volto.</li>\n+</ul>\n+</div>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-08T11:53:56+00:00</published>\n+\n+      <updated>2020-12-09T10:19:52+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Fred van Dijk: collective.collectionfilter as a Light-weight Faceted Navigation or a \'compare\' Console</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/fred-van-dijk-collective-collectionfilter-as-a-light-weight-faceted-navigation-or-a-compare-console" />\n+\n+\n+\n+      <id>urn:syndication:0a9da3a3170511af38154da7691da92a</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>I want to talk about some categorisation and classification options in Plone, next to the folder structure.</p>\n+<p>Faceted navigation: drill down on \'facets\' when you search for items. It was popularized by online shopping. Facets in Plone for developers is: whatever is in the ZCatalog, and for users: what you can search on in Collections.\n+Gold standard is <a class="reference" href="https://github.com/eea/eea.facetednavigation">eea.facetednavigation</a>, developed for the European Environment Agency. Examples: <a class="reference" href="https://www.eea.europa.eu/highlights">EEA</a>,  and on two sites by Zest: <a class="reference" href="https://vaquums.eu/sensor-db">Vaquums</a> and <a class="reference" href="https://www.minaraad.be/zoeken">Minaraad</a>, where it replaces the standard search.</p>\n+<p>collective.collectionfilter is a much leaner, meaner, but also more limited version of faceted navigation. Demo with standard Plone News Items with some tags (also known as categories, also known as Subject). Add a Collection that filters on News Items. Now add collection filter portlets.</p>\n+<p>eea.facetednavigation takes over your complete page. In an action you enable or disable it.</p>\n+<p>Now a demo of collectionfilter in SGBP, a documentation website for water management planning in Belgium/Flanders. The customer wanted to take some graphs and compare them. We did that with collectionfilter and collective.classifiers. With the last one we added structured categories: one for water basins and one for parameters of the graphs. Now we use collectionfilter to query a parameter and show the graphs for all water basins.</p>\n+<p>You can adapt several things in the collectionfilter UI, for example change how search options are displayed. This is documented, but took me a while to get right.</p>\n+<p>Collectionfilter also works with Mosaic, because the portlets are also mapped to tiles.</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-07T21:10:20+00:00</published>\n+\n+      <updated>2020-12-07T21:10:20+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+\n+    <entry>\n+\n+      <title>Asko Soukka: Plone and Volto in a Jamstack project</title>\n+\n+      <link rel="alternate" type="text/html"\n+            href="https://maurits.vanrees.org/weblog/archive/2020/12/asko-soukka-plone-and-volto-in-a-jamstack-project" />\n+\n+\n+\n+      <id>urn:syndication:a2b3ebe0e81fdf7ce953cb80333b0919</id>\n+\n+\n+\n+\n+\n+\n+      <content type="html"\n+               xml:base="https://maurits.vanrees.org"\n+               xml:lang="en-US" xml:space="preserve">\n+          <![CDATA[\n+          <p>Here are the <a class="reference" href="https://datakurre.github.io/ploneconf2020/plone-and-volto-in-jamstack-project.pdf">slides</a>.</p>\n+<p>I am a software architect at University of Jyv\xc3\xa4skyl\xc3\xa4. I have been using Plone since 2004 and GatsbyJS since 2018.\n+The university wanted one student information management system to rule them all, but... every organisation shall do their own integrations, using granular REST API with deep JSON responses. And there should be branded study guides, which we crafted with GatsbyJS. But this was not enough for the Open University part. They really needed a CMS.</p>\n+<p>We use Plone 5.2, Volto, GatsbyJS, and have 6000 html pages, times two languages, out of which 760 are Volto pages.\n+With Plone we could extend content types without needing to do any coding, in the content types field editor. In volto we added auto-complete widgets with custom vocabularies. On the GatsbyJs side, we query the connected pages with GraphQL. We render Volto layouts with React components, rendering individual blocks.</p>\n+<p>Why did we choose GatsbyJs? It is a ReactJS-based site generator. Being static, it is very fast. You can use multiple sources as input, using a plugin architecture. Data lookup is done with GraphQL. It is easy to get started, with comprehensive documentation.</p>\n+<p>I mentored two Google Summer of Code projects for the <tt class="docutils literal"><span class="pre">gatsby-source-plone</span></tt> plugin. It supports default types and most TTW types, also Volto blocks. You can do incremental updates by modification date, so it is really fast.</p>\n+<p>Not everything is easy. The full &quot;GatsbyJs experience&quot; requires practice. You want to replace inline images and links with GatsbyJs images and links, replace file links with direct downloads.</p>\n+<p>Using <tt class="docutils literal"><span class="pre">&#64;plone/volto</span></tt> as dependency to render blocks seemed like a good idea, but it required webpack overrides to be impartable, and could not be used for images and links.</p>\n+<p>The ugly parts of GatsbyJs:</p>\n+<ul class="simple">\n+<li>The GraphQL source plugin cannot cache.</li>\n+<li>The build may take hours, and gigabytes of memory.</li>\n+<li>The build result in readonly.</li>\n+<li>For me it is hard to follow GatsbyJs development, especially individual plugins, because they use a monorepo.</li>\n+</ul>\n+<p>Editors can work on the site during the day, and then wee rebuild the result during the night</p>\n+\n+          ]]>\n+      </content>\n+\n+\n+\n+      <author>\n+        <name>Maurits van Rees</name>\n+      </author>\n+\n+      <published>2020-12-07T17:54:09+00:00</published>\n+\n+      <updated>2020-12-07T17:54:09+00:00</updated>\n+\n+\n+        <category term="plone" />\n+\n+\n+        <category term="ploneconf2020" />\n+\n+\n+    </entry>\n+\n+\n+\n+</feed>\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex 9a819eeb..f2a77356 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \n@@ -14,10 +13,10 @@ class PortletsTestCase(unittest.TestCase):\n     layer = PLONE_APP_PORTLETS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'folder\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["folder"]\n+        self.request = self.layer["request"]\n \n         self.afterSetUp()\n \ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex 5b45916c..c52d40bd 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,35 +1,20 @@\n-# -*- coding: utf-8 -*-\n+from doctest import DocFileSuite\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.testing import layered\n from unittest import TestSuite\n \n-import doctest\n-import re\n-import six\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub(\n-                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n-            )\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n \n def test_suite():\n     suite = TestSuite()\n     suite.addTest(\n         layered(\n-            doctest.DocFileSuite(\n-                \'testMemberDashboard.rst\',\n-                checker=Py23DocChecker(),\n-                package=\'plone.app.portlets.tests\',\n+            DocFileSuite(\n+                "testMemberDashboard.rst",\n+                package="plone.app.portlets.tests",\n                 optionflags=OPTIONFLAGS,\n             ),\n-            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING,\n         )\n     )\n     return suite\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex 20831a01..c9a2b605 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.portlets import actions\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n@@ -13,95 +12,98 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n-import six\n-\n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_portlet_type_registered(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        self.assertEquals(portlet.addview,\n-                          \'portlets.Actions\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        self.assertEquals(portlet.addview, "portlets.Actions")\n         return\n \n     def test_interfaces(self):\n-        portlet = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        portlet = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n         return\n \n     def test_invoke_add_view(self):\n-        portlet = getUtility(\n-            IPortletType,\n-            name=\'portlets.Actions\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Actions")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        data = {\n-            \'ptitle\': u"Actions",\n-            \'category\': u\'document\',\n-            \'show_icons\': True}\n+        data = {"ptitle": "Actions", "category": "document", "show_icons": True}\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n-        self.assertTrue(isinstance(mapping.values()[0],\n-                                   actions.Assignment))\n+        self.assertTrue(isinstance(mapping.values()[0], actions.Assignment))\n         return\n \n     def test_invoke_edit_view(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, actions.EditForm))\n         return\n \n     def test_obtain_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\',\n-                             context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n+        assignment = actions.Assignment(\n+            ptitle="actions", category="document", show_icons=True\n+        )\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, actions.Renderer))\n         return\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n \n-        assignment = assignment or actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True)\n-        return getMultiAdapter((context, request, view, manager, assignment),\n-                               IPortletRenderer)\n+        assignment = assignment or actions.Assignment(\n+            ptitle="actions", category="site_actions", show_icons=True\n+        )\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_render(self):\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n-        r = self.renderer(context=self.portal,\n-                          assignment=actions.Assignment(ptitle=u\'actions\', category=u\'site_actions\', show_icons=True))\n+        r = self.renderer(\n+            context=self.portal,\n+            assignment=actions.Assignment(\n+                ptitle="actions", category="site_actions", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n@@ -111,19 +113,21 @@ def test_render(self):\n             self.assertEqual(len(output), 4)\n \n         first = output[0]\n-        self.assertEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEqual(first[\'title\'], u"Site Map")\n+        self.assertEqual(first["url"], "http://nohost/plone/sitemap")\n+        self.assertEqual(first["title"], "Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'site_actions\', show_icons=False))\n+                ptitle="actions", category="site_actions", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n         first = output[0]\n-        self.assertTrue(first[\'icon\'] is None, "We should not have an icon")\n+        self.assertTrue(first["icon"] is None, "We should not have an icon")\n         return\n \n     def test_multiple_portlets(self):\n@@ -134,21 +138,28 @@ def test_multiple_portlets(self):\n         This test was written due to bug caused by caching actionLinks portlet\n         renderer\'s method\n         """\n-        migtool = getToolByName(self.portal, \'portal_migration\')\n+        migtool = getToolByName(self.portal, "portal_migration")\n \n         # let\'s create two different portlet renderers for the same context\n         # thus for the same REQUEST, plone memoize uses REQUEST to cache data\n-        r1 = self.renderer(assignment=actions.Assignment(\n-            ptitle=u\'tabs\', category=u\'portal_tabs\', show_icons=True))\n+        r1 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle="tabs", category="portal_tabs", show_icons=True\n+            )\n+        )\n         r1.update()\n         links1 = r1.actionLinks()\n-        r2 = self.renderer(assignment=actions.Assignment(ptitle=u\'site actions\', category=u\'site_actions\', show_icons=False))\n+        r2 = self.renderer(\n+            assignment=actions.Assignment(\n+                ptitle="site actions", category="site_actions", show_icons=False\n+            )\n+        )\n         r2.update()\n         links2 = r2.actionLinks()\n \n         # check the portal_tabs links (portal_tabs is somehow special)\n         self.assertEquals(len(links1), 5)\n-        self.assertEquals(links1[0][\'title\'], u\'Home\')\n+        self.assertEquals(links1[0]["title"], "Home")\n \n         # now check the site_actions links\n         # this was failing until the caching of actionLinks method was fixed\n@@ -156,9 +167,9 @@ def test_multiple_portlets(self):\n             self.assertEquals(len(links2), 3)\n         else:\n             self.assertEquals(len(links2), 4)\n-        self.assertEquals(links2[0][\'title\'], u\'Site Map\')\n-        self.assertEquals(links2[0][\'url\'], \'http://nohost/plone/sitemap\')\n-        self.assertEquals(links2[0][\'icon\'], None)\n+        self.assertEquals(links2[0]["title"], "Site Map")\n+        self.assertEquals(links2[0]["url"], "http://nohost/plone/sitemap")\n+        self.assertEquals(links2[0]["icon"], None)\n         return\n \n     def test_portal_tabs(self):\n@@ -168,56 +179,63 @@ def test_portal_tabs(self):\n         r = self.renderer(\n             context=self.portal,\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'portal_tabs\', show_icons=True))\n+                ptitle="actions", category="portal_tabs", show_icons=True\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Test Folder\', u\'Home\', u\'Users\', u\'News\', u\'Events\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Test Folder", "Home", "Users", "News", "Events"}\n+        got = {str(link["title"]) for link in output}\n         self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n-        """Special stuff for the object_buttons category\n-        """\n+        """Special stuff for the object_buttons category"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle="actions", category="object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\n \n     def test_category(self):\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=False))\n+                ptitle="actions", category="object_buttons", show_icons=False\n+            ),\n+        )\n         r.update()\n-        self.assertEqual(r.category, \'object_buttons\')\n+        self.assertEqual(r.category, "object_buttons")\n \n     def test_category_normalize(self):\n-        class DummyData(object):\n-            category = \'Complex Category\'\n+        class DummyData:\n+            category = "Complex Category"\n+\n         r = actions.Renderer(None, None, None, None, DummyData())\n-        self.assertEqual(r.category, \'complex-category\')\n+        self.assertEqual(r.category, "complex-category")\n \n     def test_object_buttons_with_icons(self):\n-        """Special stuff for the object_buttons category (bug in render_icons)\n-        """\n+        """Special stuff for the object_buttons category (bug in render_icons)"""\n         r = self.renderer(\n-            context=self.portal[\'news\'],\n+            context=self.portal["news"],\n             assignment=actions.Assignment(\n-                ptitle=u\'actions\', category=u\'object_buttons\', show_icons=True))\n+                ptitle="actions", category="object_buttons", show_icons=True\n+            ),\n+        )\n         r.update()\n         self.assertTrue(r.actionLinks)\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\n-        expected = set([u\'Cut\', u\'Copy\', u\'Rename\', u\'Delete\'])\n-        got = set([six.text_type(link[\'title\']) for link in output])\n+        expected = {"Cut", "Copy", "Rename", "Delete"}\n+        got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex 8e1de84f..f3ca0184 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.cache import render_cachekey\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n \n-class MockBrain(object):\n-\n+class MockBrain:\n     def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n@@ -14,15 +12,14 @@ def getPath(self):\n         return self.path\n \n \n-class MockLocation(object):\n-\n+class MockLocation:\n     def __init__(self, name):\n         self.__name__ = name\n \n \n-class MockRenderer(object):\n-    manager = MockLocation(\'some_manager\')\n-    data = MockLocation(\'some_assignment\')\n+class MockRenderer:\n+    manager = MockLocation("some_manager")\n+    data = MockLocation("some_assignment")\n     data_brains = [MockBrain(), MockBrain()]\n \n     def __init__(self, context, request):\n@@ -34,13 +31,12 @@ def _data(self):\n \n \n class TestCacheKey(PortletsTestCase):\n-\n     def testRenderCachekey(self):\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n \n         key1 = render_cachekey(None, renderer)\n-        renderer.manager.__name__ += \'__changed__\'\n+        renderer.manager.__name__ += "__changed__"\n         key2 = render_cachekey(None, renderer)\n \n         self.assertTrue(key1 != key2)\n@@ -59,13 +55,14 @@ def testNonASCIIPath(self):\n         # http://dev.plone.org/plone/ticket/7086\n         context = self.folder\n         renderer = MockRenderer(context, context.REQUEST)\n-        renderer.data_brains = [\n-            MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n+        renderer.data_brains = [MockBrain("Pr\\xc5\\xafvodce"), MockBrain("p\\xc5\\x99i")]\n         render_cachekey(None, renderer)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestCacheKey))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_classic_portlet.py b/plone/app/portlets/tests/test_classic_portlet.py\nindex cfd16956..cbe01e5a 100644\n--- a/plone/app/portlets/tests/test_classic_portlet.py\n+++ b/plone/app/portlets/tests/test_classic_portlet.py\n@@ -1,50 +1,49 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        self.assertEqual(portlet.addview, \'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        self.assertEqual(portlet.addview, "portlets.Classic")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n-        portlet = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n+        portlet = classic.Assignment(template="portlet_recent", macro="portlet")\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Classic\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Classic")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,51 +54,74 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = classic.Assignment(template="portlet_recent", macro="portlet")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, classic.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = classic.Assignment(template="portlet_recent", macro="portlet")\n+\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, classic.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or classic.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or classic.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testUseMacro(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n         self.assertEqual(True, r.use_macro())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n         self.assertEqual(False, r.use_macro())\n \n     def testPathExpression(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=\'portlet\'))\n-        self.assertEqual(\'context/portlet_recent/macros/portlet\', r.path_expression())\n-        r = self.renderer(assignment=classic.Assignment(template=\'portlet_recent\', macro=None))\n-        self.assertEqual(\'context/portlet_recent\', r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro="portlet")\n+        )\n+        self.assertEqual("context/portlet_recent/macros/portlet", r.path_expression())\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="portlet_recent", macro=None)\n+        )\n+        self.assertEqual("context/portlet_recent", r.path_expression())\n \n     def testRenderClassicPortlet(self):\n-        r = self.renderer(assignment=classic.Assignment(template=\'@@view\', macro=\'content-core\'))\n+        r = self.renderer(\n+            assignment=classic.Assignment(template="@@view", macro="content-core")\n+        )\n         r.render()\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex bfdbd8ea..a064e73b 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -1,69 +1,64 @@\n-# -*- coding: utf-8 -*-\n-\n-import time\n-\n-from zope.i18nmessageid import Message\n-from zope.interface import Interface\n-from zope.component import getUtility, queryUtility, getMultiAdapter\n-from zope.component import getSiteManager\n-from zope.component.interfaces import IFactory\n-\n+from plone.app.portlets.browser.adding import PortletAdding\n+from plone.app.portlets.exportimport.portlets import importPortlets\n+from plone.app.portlets.interfaces import IColumn\n+from plone.app.portlets.interfaces import IPortletTypeInterface\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from Products.Five.browser import BrowserView\n-\n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.context import TarballExportContext\n-from Products.GenericSetup.tests.common import DummyImportContext\n-\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentSettings\n-\n+from plone.app.portlets.utils import assignment_mapping_from_key\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n+from Products.Five.browser import BrowserView\n+from Products.GenericSetup.context import TarballExportContext\n+from Products.GenericSetup.interfaces import IBody\n+from Products.GenericSetup.tests.common import DummyImportContext\n+from zope.component import getMultiAdapter\n+from zope.component import getSiteManager\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.component.interfaces import IFactory\n+from zope.i18nmessageid import Message\n+from zope.interface import Interface\n \n-from plone.app.portlets.interfaces import IPortletTypeInterface\n-from plone.app.portlets.interfaces import IColumn\n-\n-from plone.app.portlets.browser.adding import PortletAdding\n-from plone.app.portlets.utils import assignment_mapping_from_key\n+import time\n \n-from plone.app.portlets.exportimport.portlets import importPortlets\n \n # BBB Zope 2.12\n try:\n-    from Zope2.App import zcml\n     from OFS import metaconfigure\n-    zcml # pyflakes\n+    from Zope2.App import zcml\n+\n+    zcml  # pyflakes\n     metaconfigure\n except ImportError:\n-    from Products.Five import zcml\n     from Products.Five import fiveconfigure as metaconfigure\n+    from Products.Five import zcml\n \n \n class DummyView(BrowserView):\n     pass\n \n-# A sample portlet\n \n-from zope.interface import implementer\n-from zope import schema\n+# A sample portlet\n \n-from plone.portlets.interfaces import IPortletDataProvider\n from plone.app.portlets.portlets import base\n+from plone.portlets.interfaces import IPortletDataProvider\n+from zope import schema\n+from zope.interface import implementer\n \n \n class ITestPortlet(IPortletDataProvider):\n-    test_text = schema.TextLine(title=u"Test")\n-    test_bool = schema.Bool(title=u"Test")\n-    test_tuple = schema.Tuple(title=u"Test",\n-                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))\n+    test_text = schema.TextLine(title="Test")\n+    test_bool = schema.Bool(title="Test")\n+    test_tuple = schema.Tuple(\n+        title="Test",\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"),\n+    )\n \n \n @implementer(ITestPortlet)\n@@ -77,24 +72,23 @@ class TestAssignment(base.Assignment):\n \n \n class TestRenderer(base.Renderer):\n-\n     def render(self):\n         return "Portlet for testing"\n \n \n class TestAddForm(base.AddForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n     def create(self, data):\n         a = TestAssignment()\n-        a.title = data.get(\'title\', u"")\n+        a.title = data.get("title", "")\n         return a\n \n \n class TestEditForm(base.EditForm):\n     schema = ITestPortlet\n-    label = u"Test portlet"\n+    label = "Test portlet"\n \n \n # A test portlet manager\n@@ -103,14 +97,14 @@ class TestEditForm(base.EditForm):\n class ITestColumn(IColumn):\n     pass\n \n-class TestZCML(PortletsTestCase):\n \n+class TestZCML(PortletsTestCase):\n     def testPortletTypeInterfaceRegistered(self):\n-        iface = getUtility(IPortletTypeInterface, name=u"portlets.test.Test")\n+        iface = getUtility(IPortletTypeInterface, name="portlets.test.Test")\n         self.assertEqual(ITestPortlet, iface)\n \n     def testFactoryRegistered(self):\n-        factory = getUtility(IFactory, name=u"portlets.test.Test")\n+        factory = getUtility(IFactory, name="portlets.test.Test")\n         self.assertEqual(TestAssignment, factory._callable)\n \n     def testRendererRegistered(self):\n@@ -120,98 +114,127 @@ def testRendererRegistered(self):\n         manager = PortletManager()\n         assignment = TestAssignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, TestRenderer))\n \n     def testAddViewRegistered(self):\n         request = self.portal.REQUEST\n         adding = PortletAdding(self.portal, request)\n \n-        addview = getMultiAdapter((adding, request), name=u"portlets.test.Test")\n+        addview = getMultiAdapter((adding, request), name="portlets.test.Test")\n         self.assertTrue(isinstance(addview, TestAddForm))\n \n     def testEditViewRegistered(self):\n         assignment = TestAssignment()\n         request = self.portal.REQUEST\n \n-        editview = getMultiAdapter((assignment, request), name=u"edit")\n+        editview = getMultiAdapter((assignment, request), name="edit")\n         self.assertTrue(isinstance(editview, TestEditForm))\n \n \n class TestGenericSetup(PortletsTestCase):\n-\n     def afterSetUp(self):\n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n     def testPortletManagerInstalled(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n         self.assertTrue(ITestColumn.providedBy(manager))\n \n     def disabled_testPortletTypeRegistered(self):\n-        portlet_type = getUtility(IPortletType, name=u"portlets.test.Test")\n-        self.assertEqual(\'portlets.test.Test\', portlet_type.addview)\n+        portlet_type = getUtility(IPortletType, name="portlets.test.Test")\n+        self.assertEqual("portlets.test.Test", portlet_type.addview)\n         self.assertEqual([Interface], portlet_type.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet_type.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet_type.description, Message),\n-                        "Portlet description should be a Message instance")\n-        self.assertEqual(u"title_test_portlet", portlet_type.title)\n-        self.assertEqual(u"description_test_portlet", portlet_type.description)\n-        self.assertEqual(u"Test portlet", portlet_type.title.default)\n-        self.assertEqual(u"A test portlet", portlet_type.description.default)\n-        self.assertEqual(u"plone", portlet_type.title.domain)\n-        self.assertEqual(u"plone", portlet_type.description.domain)\n+        self.assertTrue(\n+            isinstance(portlet_type.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet_type.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n+        self.assertEqual("title_test_portlet", portlet_type.title)\n+        self.assertEqual("description_test_portlet", portlet_type.description)\n+        self.assertEqual("Test portlet", portlet_type.title.default)\n+        self.assertEqual("A test portlet", portlet_type.description.default)\n+        self.assertEqual("plone", portlet_type.title.domain)\n+        self.assertEqual("plone", portlet_type.description.domain)\n \n     def testAssignmentCreatedAndOrdered(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n-        self.assertEqual([\'test.portlet3\', \'test.portlet2\', \'test.portlet1\'], list(mapping.keys()))\n+        self.assertEqual(\n+            ["test.portlet3", "test.portlet2", "test.portlet1"], list(mapping.keys())\n+        )\n \n     def testAssignmentPropertiesSet(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-\n-        assignment = mapping[\'test.portlet1\']\n-        self.assertEqual(u\'Test pr\\xf6p 1\', assignment.test_text)\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+\n+        assignment = mapping["test.portlet1"]\n+        self.assertEqual("Test pr\\xf6p 1", assignment.test_text)\n         self.assertEqual(False, assignment.test_bool)\n-        self.assertEqual((u\'published\', u\'private\'), assignment.test_tuple)\n+        self.assertEqual(("published", "private"), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet2\']\n-        self.assertEqual(\'Test prop 2\', assignment.test_text)\n+        assignment = mapping["test.portlet2"]\n+        self.assertEqual("Test prop 2", assignment.test_text)\n         self.assertEqual(True, assignment.test_bool)\n         self.assertEqual((), assignment.test_tuple)\n \n-        assignment = mapping[\'test.portlet3\']\n+        assignment = mapping["test.portlet3"]\n         self.assertEqual(None, assignment.test_text)\n         self.assertEqual(None, assignment.test_bool)\n         self.assertEqual(None, assignment.test_tuple)\n \n     def testAssignmentSettings(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n-        assignment = mapping[\'test.portlet1\']\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n+        assignment = mapping["test.portlet1"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertTrue(settings.get(\'visible\', True))\n+        self.assertTrue(settings.get("visible", True))\n \n-        assignment = mapping[\'test.portlet2\']\n+        assignment = mapping["test.portlet2"]\n         settings = IPortletAssignmentSettings(assignment)\n-        self.assertFalse(settings.get(\'visible\', True))\n+        self.assertFalse(settings.get("visible", True))\n \n     def testAssignmentRoot(self):\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # No assignment in /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -225,13 +248,21 @@ def testAssignmentRoot(self):\n         importPortlets(context)\n \n         # Still 3 portlets in the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         # but 1 extra in the /news subfolder\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/news")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/news",\n+        )\n         self.assertEqual(1, len(mapping))\n \n     def testAssignmentRemoval(self):\n@@ -239,38 +270,48 @@ def testAssignmentRemoval(self):\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n \n         # initally there should be no portlet7\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n         # now we add one\n-        portlet_factory = getUtility(IFactory, name=\'portlets.test.Test\')\n+        portlet_factory = getUtility(IFactory, name="portlets.test.Test")\n         assignment = portlet_factory()\n-        mapping[\'test.portlet7\'] = assignment\n+        mapping["test.portlet7"] = assignment\n \n         # make sure it\'s there\n-        self.assertNotEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertNotEqual(mapping.get("test.portlet7", None), None)\n \n         # wait a bit or we get duplicate ids on import\n         time.sleep(1)\n         # run the profile\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n         # and should have got rid of it again\n-        self.assertEqual(mapping.get(\'test.portlet7\', None), None)\n+        self.assertEqual(mapping.get("test.portlet7", None), None)\n \n     def testAssignmentPurging(self):\n         # initially there should be 3 assignments on the root\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(3, len(mapping))\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -283,18 +324,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # group assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(1, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -307,18 +358,28 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=GROUP_CATEGORY, key="Reviewers")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n         self.assertEqual(0, len(mapping))\n \n         # also content type assignments should still be there\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(2, len(mapping))\n \n         # and be purgable\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <assignment\n                     manager="test.testcolumn"\n@@ -331,55 +392,61 @@ def testAssignmentPurging(self):\n         importPortlets(context)\n \n         # now they should be gone\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testBlacklisting(self):\n-        manager = getUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = getUtility(IPortletManager, name="test.testcolumn")\n \n-        if \'news\' in self.portal.objectIds():\n-            news = self.portal[\'news\']\n+        if "news" in self.portal.objectIds():\n+            news = self.portal["news"]\n \n             assignable = getMultiAdapter(\n-                (news, manager), ILocalPortletAssignmentManager)\n+                (news, manager), ILocalPortletAssignmentManager\n+            )\n \n-            self.assertEqual(\n-                True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n-            self.assertEqual(\n-                False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n-            self.assertEqual(\n-                None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n+            self.assertEqual(True, assignable.getBlacklistStatus(CONTEXT_CATEGORY))\n+            self.assertEqual(False, assignable.getBlacklistStatus(GROUP_CATEGORY))\n+            self.assertEqual(None, assignable.getBlacklistStatus(CONTENT_TYPE_CATEGORY))\n \n     def testPurgeMethod(self):\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testPurge(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets purge="True">\n             </portlets>\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerRemove(self):\n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertNotEquals(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -389,12 +456,14 @@ def testManagerRemove(self):\n         """\n         importPortlets(context)\n \n-        manager = queryUtility(IPortletManager, name=u"test.testcolumn")\n+        manager = queryUtility(IPortletManager, name="test.testcolumn")\n         self.assertEqual(None, manager)\n \n     def testManagerPurge(self):\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files[\'portlets.xml\'] = """<?xml version="1.0"?>\n+        context._files[\n+            "portlets.xml"\n+        ] = """<?xml version="1.0"?>\n             <portlets>\n                 <portletmanager\n                     name="test.testcolumn"\n@@ -404,34 +473,46 @@ def testManagerPurge(self):\n         """\n         importPortlets(context)\n \n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=GROUP_CATEGORY, key="Reviewers")\n-\n-        self.assertRaises(KeyError,\n-                          assignment_mapping_from_key,\n-                          self.portal, manager_name=u"test.testcolumn",\n-                          category=CONTENT_TYPE_CATEGORY, key="Folder")\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=GROUP_CATEGORY,\n+            key="Reviewers",\n+        )\n+\n+        self.assertRaises(\n+            KeyError,\n+            assignment_mapping_from_key,\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTENT_TYPE_CATEGORY,\n+            key="Folder",\n+        )\n \n         # context assignment at the root are purged as well\n-        mapping = assignment_mapping_from_key(self.portal,\n-            manager_name=u"test.testcolumn", category=CONTEXT_CATEGORY, key="/")\n+        mapping = assignment_mapping_from_key(\n+            self.portal,\n+            manager_name="test.testcolumn",\n+            category=CONTEXT_CATEGORY,\n+            key="/",\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testExport(self):\n         self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n-        handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n+        handler = getMultiAdapter((sm, context), IBody, name="plone.portlets")\n         handler._purgePortlets()\n \n         time.sleep(1)\n \n         portal_setup = self.portal.portal_setup\n-        portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n+        portal_setup.runAllImportStepsFromProfile("profile-plone.app.portlets:testing")\n \n-        expected = u"""\\\n+        expected = """\\\n <?xml version="1.0" encoding="utf-8"?>\n <portlets>\n  <portletmanager name="test.testcolumn"\n@@ -511,11 +592,13 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'))\n+        self.assertEqual(expected.strip(), body.strip().decode("utf8"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestZCML))\n     suite.addTest(makeSuite(TestGenericSetup))\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex c5ccf569..c15b08cd 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -1,14 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-\n+from plone.app.testing import TEST_USER_ID\n from plone.portlets.interfaces import IPortletContext\n \n \n class TestBasicContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.folder)\n         self.assertTrue(ctx.getParent() is self.folder.aq_parent)\n@@ -17,51 +14,50 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Folder"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n class TestPortalRootContext(PortletsTestCase):\n-\n     def testParent(self):\n         ctx = IPortletContext(self.portal)\n         self.assertTrue(ctx.getParent() is None)\n@@ -70,51 +66,53 @@ def testGlobalsNoGroups(self):\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n-        group = self.portal.portal_groups.getGroupById(\'Administrators\')\n+        group = self.portal.portal_groups.getGroupById("Administrators")\n         group.addMember(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n-        self.assertEqual(g[2], (\'group\', \'Administrators\'))\n-        self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", TEST_USER_ID))\n+        self.assertEqual(g[2], ("group", "Administrators"))\n+        self.assertEqual(g[4], ("group", "Reviewers"))\n \n     def testAnonymous(self):\n         logout()\n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 2)\n-        self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', \'Anonymous User\'))\n+        self.assertEqual(g[0], ("content_type", "Plone Site"))\n+        self.assertEqual(g[1], ("user", "Anonymous User"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestBasicContext))\n     suite.addTest(makeSuite(TestPortalRootContext))\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex f8798eea..0d504f76 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n@@ -6,42 +5,39 @@\n from plone.portlets.interfaces import IPortletType\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from unittest import makeSuite\n+from unittest import TestSuite\n from zExceptions import Unauthorized\n-from zope.component import getUtility, getMultiAdapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.event import notify\n \n-import six\n-\n \n class TestDashboard(PortletsTestCase):\n-\n     def test_default_dashboard_created_for_new_user(self):\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         user_portlets = col[USER_CATEGORY]\n-        self.assertFalse(\'fakeuser\' in user_portlets)\n+        self.assertFalse("fakeuser" in user_portlets)\n \n         # This would normally happen when a user is created\n-        notify(PrincipalCreated(PropertiedUser(\'fakeuser\')))\n+        notify(PrincipalCreated(PropertiedUser("fakeuser")))\n \n         # We would expect some portlets to have been created after the\n         # event handler has finished processing\n \n-        self.assertTrue(\'fakeuser\' in user_portlets)\n-        self.assertTrue(len(user_portlets[\'fakeuser\']) > 0)\n+        self.assertTrue("fakeuser" in user_portlets)\n+        self.assertTrue(len(user_portlets["fakeuser"]) > 0)\n \n     def test_non_ascii_usernames_created(self):\n-        if six.PY2:\n-            user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n-        else:\n-            user1, pass1 = \'user1\\xa9\', \'pass1\'\n+        user1, pass1 = "user1\\xa9", "pass1"\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\n         # in dashboard.py\n-        uf.userFolderAddUser(user1, pass1, [\'Manager\'], [])\n+        uf.userFolderAddUser(user1, pass1, ["Manager"], [])\n \n-        col = getUtility(IPortletManager, name=\'plone.dashboard1\')\n+        col = getUtility(IPortletManager, name="plone.dashboard1")\n         retriever = getMultiAdapter((self.portal, col), IPortletRetriever)\n \n         # Bug #7860 - Would throw a unicode decode error when fetching\n@@ -50,7 +46,7 @@ def test_non_ascii_usernames_created(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestDashboard))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex ab4af6b2..545d53fa 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -1,5 +1,4 @@\n-# -*- coding: utf-8 -*-\n-\n+from io import StringIO\n from plone.app.portlets.exportimport.portlets import PortletsXMLAdapter\n from plone.app.portlets.interfaces import IColumn\n from plone.app.portlets.interfaces import IDashboard\n@@ -10,7 +9,6 @@\n from plone.portlets.interfaces import IPortletType\n from plone.portlets.manager import PortletManager\n from Products.GenericSetup.testing import DummySetupEnviron\n-from six import StringIO\n from xml.dom.minidom import parseString\n from zope.component import getSiteManager\n from zope.component import getUtility\n@@ -19,15 +17,16 @@\n \n \n class PortletsExportImportTestCase(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.sm = getSiteManager(self.portal)\n-        self.importer = self.exporter = PortletsXMLAdapter(self.sm,\n-          DummySetupEnviron())\n-\n-    def _searchPortletManagerRegistrations(self, name = None):\n-        results = [r for r in self.sm.registeredUtilities()\n-          if r.provided.isOrExtends(IPortletManager)]\n+        self.importer = self.exporter = PortletsXMLAdapter(self.sm, DummySetupEnviron())\n+\n+    def _searchPortletManagerRegistrations(self, name=None):\n+        results = [\n+            r\n+            for r in self.sm.registeredUtilities()\n+            if r.provided.isOrExtends(IPortletManager)\n+        ]\n         if name:\n             results = [r for r in results if r.name == name]\n         return results\n@@ -40,37 +39,36 @@ def _node_as_string(self, node):\n \n \n class TestImportPortlets(PortletsExportImportTestCase):\n-\n     def test_removePortlet(self):\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is not None)\n-        self.assertEqual(True,\n-          self.importer._removePortlet(\'portlets.News\'))\n-        self.assertTrue(queryUtility(IPortletType,\n-          name=\'portlets.News\') is None)\n-        self.assertEqual(False, self.importer._removePortlet(\'foo\'))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is not None)\n+        self.assertEqual(True, self.importer._removePortlet("portlets.News"))\n+        self.assertTrue(queryUtility(IPortletType, name="portlets.News") is None)\n+        self.assertEqual(False, self.importer._removePortlet("foo"))\n \n     def test_checkBasicPortletNodeErrors(self):\n         node = parseString(_XML_INVALID_EXTEND_AND_PURGE).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_EXTEND_NONEXISTS).documentElement\n-        self.assertEqual(True,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_INVALID_ADD_EXISTING).documentElement\n-        self.assertEqual(True,\n-            self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            True, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n         node = parseString(_XML_EXTEND_EXISTING).documentElement\n-        self.assertEqual(False,\n-          self.importer._checkBasicPortletNodeErrors(node, [\'portlets.Exists\']))\n+        self.assertEqual(\n+            False, self.importer._checkBasicPortletNodeErrors(node, ["portlets.Exists"])\n+        )\n \n     def test_modifyForList(self):\n         node = parseString(_XML_SWITCH_COLUMNS).documentElement\n-        self.assertEqual([IColumn],\n-          self.importer._modifyForList(node, [IDashboard]))\n+        self.assertEqual([IColumn], self.importer._modifyForList(node, [IDashboard]))\n \n     def test_initPortletNode_duplicateInterfaces(self):\n         node = parseString(_XML_DUPLICATE_INTERFACES).documentElement\n@@ -84,8 +82,8 @@ def test_initPortletNode_basic(self):\n         self.importer._initPortletNode(node)\n         portlet = queryUtility(IPortletType, name="portlets.New")\n         self.assertTrue(portlet is not None)\n-        self.assertEqual(\'Foo\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Foo", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n         self.assertEqual([IColumn], portlet.for_)\n \n     def disabled_test_initPortletNode_i18n(self):\n@@ -95,16 +93,20 @@ def disabled_test_initPortletNode_i18n(self):\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n         # XXX Missing i18n support in the exportimport code\n-        self.assertTrue(isinstance(portlet.title, Message),\n-                        "Portlet title should be a Message instance")\n-        self.assertTrue(isinstance(portlet.description, Message),\n-                        "Portlet description should be a Message instance")\n-        self.assertEqual(u"title_foo_portlet", portlet.title)\n-        self.assertEqual(u"description_foo_portlet", portlet.description)\n-        self.assertEqual(u"Foo", portlet.title.default)\n-        self.assertEqual(u"Bar", portlet.description.default)\n-        self.assertEqual(u"foodomain", portlet.title.domain)\n-        self.assertEqual(u"foodomain", portlet.description.domain)\n+        self.assertTrue(\n+            isinstance(portlet.title, Message),\n+            "Portlet title should be a Message instance",\n+        )\n+        self.assertTrue(\n+            isinstance(portlet.description, Message),\n+            "Portlet description should be a Message instance",\n+        )\n+        self.assertEqual("title_foo_portlet", portlet.title)\n+        self.assertEqual("description_foo_portlet", portlet.description)\n+        self.assertEqual("Foo", portlet.title.default)\n+        self.assertEqual("Bar", portlet.description.default)\n+        self.assertEqual("foodomain", portlet.title.domain)\n+        self.assertEqual("foodomain", portlet.description.domain)\n \n     def test_initPortletNode_multipleInterfaces(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\n@@ -132,8 +134,8 @@ def test_initPortletNode_extend(self):\n         portlet = queryUtility(IPortletType, name="portlets.ExtendMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IDashboard], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_purge(self):\n         node = parseString(_XML_PURGEME_SETUP).documentElement\n@@ -143,50 +145,54 @@ def test_initPortletNode_purge(self):\n         portlet = queryUtility(IPortletType, name="portlets.PurgeMe")\n         self.assertTrue(portlet is not None)\n         self.assertEqual([IColumn], portlet.for_)\n-        self.assertEqual(\'Bar\', portlet.title)\n-        self.assertEqual(\'Bar\', portlet.description)\n+        self.assertEqual("Bar", portlet.title)\n+        self.assertEqual("Bar", portlet.description)\n \n     def test_initPortletNode_remove(self):\n         node = parseString(_XML_REMOVEME_SETUP).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is not None)\n         node = parseString(_XML_REMOVEME_REMOVE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = queryUtility(IPortletType, name=\'portlets.RemoveMe\')\n+        portlet = queryUtility(IPortletType, name="portlets.RemoveMe")\n         self.assertTrue(portlet is None)\n \n \n class TestExportPortlets(PortletsExportImportTestCase):\n-\n     def test_extractPortletNode(self):\n         node = parseString(_XML_MULTIPLE_INTERFACES).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"><for interface="plone.app.portlets.interfaces.IColumn"/><for interface="plone.app.portlets.interfaces.IDashboard"/></portlet>""",\n+            file.read(),\n+        )\n \n     def test_extractPortletNode_defaultManagerInterface(self):\n         node = parseString(_XML_EXPLICIT_DEFAULT_INTERFACE).documentElement\n         self.importer._initPortletNode(node)\n-        portlet = getUtility(IPortletType, \'portlets.New\')\n-        node = self.exporter._extractPortletNode(\'portlets.New\', portlet)\n+        portlet = getUtility(IPortletType, "portlets.New")\n+        node = self.exporter._extractPortletNode("portlets.New", portlet)\n         file = StringIO()\n         node.writexml(file)\n         file.seek(0)\n-        self.assertEqual("""<portlet title="Foo" addview="portlets.New" description="Foo"/>""", file.read())\n+        self.assertEqual(\n+            """<portlet title="Foo" addview="portlets.New" description="Foo"/>""",\n+            file.read(),\n+        )\n \n \n class TestImportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_initPortletManagerNode_basic(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(PortletManager, manager.__class__)\n \n@@ -194,7 +200,7 @@ def test_initPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertTrue(IColumn.providedBy(manager))\n \n@@ -202,40 +208,49 @@ def test_initPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n \n-        manager = queryUtility(IPortletManager, name=\'plone.foo_column\')\n+        manager = queryUtility(IPortletManager, name="plone.foo_column")\n         self.assertTrue(manager is not None)\n         self.assertEqual(FooPortletManager, manager.__class__)\n \n \n class TestExportPortletManagers(PortletsExportImportTestCase):\n-\n     def test_extractPortletManagerNode_defaultTypeAndClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_BASIC).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"/>\', self._node_as_string(node)\n+        )\n \n     def test_extractPortletManagerNode_customType(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_TYPE).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  type="plone.app.portlets.interfaces.IColumn"/>\',\n+            self._node_as_string(node),\n+        )\n \n     def test_extractPortletManagerNode_customClass(self):\n         node = parseString(_XML_PORTLET_MANAGER_CUSTOM_CLASS).documentElement\n         self.importer._initPortletManagerNode(node)\n-        results = self._searchPortletManagerRegistrations(\'plone.foo_column\')\n+        results = self._searchPortletManagerRegistrations("plone.foo_column")\n         r = results[0]\n         node = self.exporter._extractPortletManagerNode(r)\n-        self.assertEqual(\'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\', self._node_as_string(node))\n+        self.assertEqual(\n+            \'<portletmanager name="plone.foo_column"  class="plone.app.portlets.tests.utils.FooPortletManager"/>\',\n+            self._node_as_string(node),\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestImportPortlets))\n     suite.addTest(makeSuite(TestExportPortlets))\n@@ -243,6 +258,7 @@ def test_suite():\n     suite.addTest(makeSuite(TestExportPortletManagers))\n     return suite\n \n+\n _XML_INVALID_EXTEND_AND_PURGE = """<?xml version="1.0"?>\n <portlet addview="portlets.Exists" extend="" purge="" />\n """\ndiff --git a/plone/app/portlets/tests/test_formextender.py b/plone/app/portlets/tests/test_formextender.py\nindex 86c74aaa..51fb7ada 100644\n--- a/plone/app/portlets/tests/test_formextender.py\n+++ b/plone/app/portlets/tests/test_formextender.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.portlets.browser.interfaces import IPortletAddForm\n from plone.app.portlets.browser.interfaces import IPortletEditForm\n from plone.app.portlets.portlets import news\n@@ -26,33 +24,29 @@\n # A sample schemaextender:\n \n \n-EXTENDER_PREFIX = \'portletcssclass\'\n+EXTENDER_PREFIX = "portletcssclass"\n \n \n class IPortletCssClass(Interface):\n-    """ Schema for portlet css class  """\n+    """Schema for portlet css class"""\n \n     # css_class is just an example.\n     # In real life a css_class implementation would be a\n     # Choice field with a vocabulary, editable in a controlpanel.\n-    css_class = schema.TextLine(\n-        title=u\'Portlet appearance\',\n-        required=False\n-    )\n+    css_class = schema.TextLine(title="Portlet appearance", required=False)\n \n \n class PortletCssClassFormExtender(FormExtender):\n-\n     def update(self):\n         self.add(IPortletCssClass, prefix=EXTENDER_PREFIX)\n \n \n @adapter(IPortletAssignment)\n @implementer(IPortletCssClass)\n-class PortletCssClassAdapter(object):\n+class PortletCssClassAdapter:\n     def __init__(self, context):\n         # avoid recursion\n-        self.__dict__[\'context\'] = context\n+        self.__dict__["context"] = context\n \n     def __setattr__(self, attr, value):\n         settings = IPortletAssignmentSettings(self.context)\n@@ -64,211 +58,209 @@ def __getattr__(self, attr):\n \n \n class TestSchemaExtender(PortletsTestCase):\n-\n     def test_addform_fields(self):\n-        schema_field_names = field.Fields(news.INewsPortlet).keys()\n+        schema_field_names = [k for k in field.Fields(news.INewsPortlet).keys()]\n \n         # We use the news portlet as a random example of a portlet\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n \n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview_field_names = addview.fields.keys()\n+        addview_field_names = [k for k in addview.fields.keys()]\n \n         # Our addview schema before we register our extender:\n         self.assertEqual(addview_field_names, schema_field_names)\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n-\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview_field_names = addview.fields.keys()\n+        addview_field_names = [k for k in addview.fields.keys()]\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our addview schema now includes our extended schema:\n-        self.assertEqual(addview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            addview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_add_form(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletAddForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.update()\n-        addview.createAndAdd(data={\'count\': 5,\n-                                   EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        addview.createAndAdd(\n+            data={"count": 5, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletAddForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletAddForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 5)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_editform_fields(self):\n \n-        schema_field_names = field.Fields(news.INewsPortlet).keys()\n+        schema_field_names = [k for k in field.Fields(news.INewsPortlet).keys()]\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview_field_names = editview.fields.keys()\n+        editview_field_names = [k for k in editview.fields.keys()]\n \n         # Our editview schema before we register our extender:\n         self.assertEqual(editview_field_names, schema_field_names)\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n \n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview_field_names = editview.fields.keys()\n+        editview_field_names = [k for k in editview.fields.keys()]\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         # Our editview schema now includes our extended schema:\n-        self.assertEqual(editview_field_names,\n-                         schema_field_names + [EXTENDER_PREFIX+\'.css_class\'])\n+        self.assertEqual(\n+            editview_field_names, schema_field_names + [EXTENDER_PREFIX + ".css_class"]\n+        )\n \n     def test_invoke_edit_form(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # We have not extended our storage adapter, so nothing gets saved:\n-        self.assertIsNone(settings.get(\'css_class\', None))\n+        self.assertIsNone(settings.get("css_class", None))\n \n         # Register our schemaextender\n         gsm = getGlobalSiteManager()\n-        gsm.registerAdapter(PortletCssClassAdapter,\n-                            (IPortletAssignment,))\n-        gsm.registerAdapter(PortletCssClassFormExtender,\n-                            (Interface,\n-                             IDefaultBrowserLayer,\n-                             IPortletEditForm),\n-                            IFormExtender,\n-                            \'portletcssclass.extender\')\n+        gsm.registerAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n+        gsm.registerAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         editview.update()\n-        editview.applyChanges(data={\'count\': 6,\n-                                    EXTENDER_PREFIX+\'.css_class\': \'my-class\'})\n+        editview.applyChanges(\n+            data={"count": 6, EXTENDER_PREFIX + ".css_class": "my-class"}\n+        )\n         portlet_assignment = mapping.values()[0]\n         settings = IPortletAssignmentSettings(portlet_assignment)\n \n-        gsm.unregisterAdapter(PortletCssClassFormExtender,\n-                              (Interface,\n-                               IDefaultBrowserLayer,\n-                               IPortletEditForm),\n-                              IFormExtender,\n-                              \'portletcssclass.extender\')\n-        gsm.unregisterAdapter(PortletCssClassAdapter,\n-                              (IPortletAssignment,))\n+        gsm.unregisterAdapter(\n+            PortletCssClassFormExtender,\n+            (Interface, IDefaultBrowserLayer, IPortletEditForm),\n+            IFormExtender,\n+            "portletcssclass.extender",\n+        )\n+        gsm.unregisterAdapter(PortletCssClassAdapter, (IPortletAssignment,))\n \n         self.assertEqual(portlet_assignment.count, 6)\n         # The prefix is used for the form field, not for the stored data:\n-        self.assertEqual(settings.get(\'css_class\'), \'my-class\')\n+        self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_renderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestSchemaExtender))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_login_portlet.py b/plone/app/portlets/tests/test_login_portlet.py\nindex 49ef3ab8..a3f3f810 100644\n--- a/plone/app/portlets/tests/test_login_portlet.py\n+++ b/plone/app/portlets/tests/test_login_portlet.py\n@@ -1,38 +1,34 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter, queryMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import login\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryMultiAdapter\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        self.assertEqual(portlet.addview, \'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        self.assertEqual(portlet.addview, "portlets.Login")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = login.Assignment()\n@@ -40,11 +36,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         # This is a NullAddForm - calling it does the work\n         addview()\n@@ -56,31 +52,42 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = login.Assignment()\n-        editview = queryMultiAdapter((mapping[\'foo\'], request), name=\'edit\', default=None)\n+        mapping["foo"] = login.Assignment()\n+        editview = queryMultiAdapter(\n+            (mapping["foo"], request), name="edit", default=None\n+        )\n         self.assertTrue(editview is None)\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = login.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, login.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or login.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def testAvailable(self):\n         request = self.folder.REQUEST\n@@ -90,7 +97,7 @@ def testAvailable(self):\n         del request.__annotations__\n         r = self.renderer()\n         self.assertEqual(True, r.available)\n-        self.portal.acl_users._delObject(\'credentials_cookie_auth\')\n+        self.portal.acl_users._delObject("credentials_cookie_auth")\n         r = self.renderer()\n         del request.__annotations__\n         self.assertEqual(False, r.available)\n@@ -107,34 +114,35 @@ def testShow(self):\n         self.assertEqual(True, r.show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/login_form\'\n+        request["URL"] = self.portal.absolute_url() + "/login_form"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n         del request.__annotations__\n-        request[\'URL\'] = self.portal.absolute_url() + \'/@@register\'\n+        request["URL"] = self.portal.absolute_url() + "/@@register"\n         self.assertEqual(False, self.renderer(request=request).show())\n \n     def testCanRegister(self):\n         r = self.renderer()\n         self.assertFalse(r.can_register())\n \n-        #Enable self-registration to ensure that the register link is shown\n-        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        # Enable self-registration to ensure that the register link is shown\n+        self.portal.manage_permission("Add portal member", roles=["Anonymous"])\n         logout()\n \n-        self.folder.REQUEST[\'_plone_ec_cache\'] = {}\n+        self.folder.REQUEST["_plone_ec_cache"] = {}\n         self.assertTrue(r.can_register())\n \n-        #Hiding the Register action hides the register link\n+        # Hiding the Register action hides the register link\n         self.portal.portal_actions.user.join.visible = False\n         self.assertFalse(r.can_register())\n \n-\n     # TODO: Add more detailed tests here\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_manage_views.py b/plone/app/portlets/tests/test_manage_views.py\nindex d2a886db..c78baf9c 100644\n--- a/plone/app/portlets/tests/test_manage_views.py\n+++ b/plone/app/portlets/tests/test_manage_views.py\n@@ -1,23 +1,22 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.tests.base import PortletsTestCase\n \n \n class TestManageAssignments(PortletsTestCase):\n-\n     def testMoveUp(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testMoveDown(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n     def testDelete(self):\n-        self.fail(\'Test missing\')\n+        self.fail("Test missing")\n \n \n def test_suite():\n     from unittest import TestSuite\n-    #from unittest import makeSuite\n+\n+    # from unittest import makeSuite\n     suite = TestSuite()\n     # TODO: Write tests that *pass*\n-    #suite.addTest(makeSuite(TestManageAssignments))\n+    # suite.addTest(makeSuite(TestManageAssignments))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_mapping.py b/plone/app/portlets/tests/test_mapping.py\nindex d7881ec4..b9170971 100644\n--- a/plone/app/portlets/tests/test_mapping.py\n+++ b/plone/app/portlets/tests/test_mapping.py\n@@ -1,24 +1,18 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.publisher.interfaces.browser import IBrowserPublisher\n-from zope.publisher.interfaces import NotFound\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.portlets.portlets import classic\n-\n from plone.app.portlets.browser.adding import PortletAdding\n-\n+from plone.app.portlets.portlets import classic\n+from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n+from zope.publisher.interfaces import NotFound\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n \n \n class TestNameChooser(PortletsTestCase):\n-\n     def testNameChooser(self):\n         mapping = PortletAssignmentMapping()\n         chooser = INameChooser(mapping)\n@@ -30,47 +24,57 @@ def testNameChooser(self):\n \n \n class TestContextMapping(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n \n     def testAdapting(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         self.assertEqual(0, len(mapping))\n \n     def testEquivalence(self):\n-        mapping = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n+        mapping["foo"] = c\n \n-        mapping2 = getMultiAdapter((self.folder, self.manager), IPortletAssignmentMapping)\n-        self.assertEqual(mapping2[\'foo\'], c)\n+        mapping2 = getMultiAdapter(\n+            (self.folder, self.manager), IPortletAssignmentMapping\n+        )\n+        self.assertEqual(mapping2["foo"], c)\n \n \n class TestTraverser(PortletsTestCase):\n-\n     def afterSetUp(self):\n         self.mapping = PortletAssignmentMapping()\n         c = classic.Assignment()\n-        self.mapping[\'foo\'] = c\n-        self.traverser = getMultiAdapter((self.mapping, self.folder.REQUEST), IBrowserPublisher)\n+        self.mapping["foo"] = c\n+        self.traverser = getMultiAdapter(\n+            (self.mapping, self.folder.REQUEST), IBrowserPublisher\n+        )\n \n     def testTraverseToName(self):\n-        obj = self.traverser.publishTraverse(self.folder.REQUEST, \'foo\')\n-        self.assertTrue(aq_base(obj) is aq_base(self.mapping[\'foo\']))\n+        obj = self.traverser.publishTraverse(self.folder.REQUEST, "foo")\n+        self.assertTrue(aq_base(obj) is aq_base(self.mapping["foo"]))\n         self.assertTrue(obj.aq_parent is self.mapping)\n \n     def testTraverseToView(self):\n-        view = self.traverser.publishTraverse(self.folder.REQUEST, \'+\')\n+        view = self.traverser.publishTraverse(self.folder.REQUEST, "+")\n         self.assertTrue(isinstance(view, PortletAdding))\n         self.assertTrue(view.aq_parent is self.mapping)\n \n     def testTraverseToNonExistent(self):\n-        self.assertRaises(NotFound, self.traverser.publishTraverse, self.folder.REQUEST, \'bar\')\n+        self.assertRaises(\n+            NotFound, self.traverser.publishTraverse, self.folder.REQUEST, "bar"\n+        )\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestContextMapping))\n     suite.addTest(makeSuite(TestTraverser))\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex 0cf7342a..b8ee6889 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -1,22 +1,23 @@\n-# -*- coding: utf-8 -*-\n-import unittest\n-import doctest\n-\n-from plone.testing import layered\n-from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n from plone.app.portlets.testing import OPTIONFLAGS\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n+from plone.testing import layered\n+\n+import doctest\n+import unittest\n \n \n def test_suite():\n \n     import plone.app.portlets.storage\n \n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocTestSuite(\n-                module=plone.app.portlets.storage,\n-                optionflags=OPTIONFLAGS,\n-            ),\n-            layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n-        )\n-    ])\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocTestSuite(\n+                    module=plone.app.portlets.storage,\n+                    optionflags=OPTIONFLAGS,\n+                ),\n+                layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n+            )\n+        ]\n+    )\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 605f9b74..7cfb2345 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -1,52 +1,43 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.interface import directlyProvides\n-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n-from zope.intid.interfaces import IIntIds\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.portlets.portlets import navigation\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INavigationSchema\n-\n from Products.CMFPlone.tests import dummy\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import directlyProvides\n+from zope.intid.interfaces import IIntIds\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        self.assertEqual(portlet.addview, \'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        self.assertEqual(portlet.addview, "portlets.Navigation")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n         self.assertEqual(\n-            [\'plone.app.portlets.interfaces.IColumn\'],\n-            registered_interfaces)\n+            ["plone.app.portlets.interfaces.IColumn"], registered_interfaces\n+        )\n \n     def testInterfaces(self):\n         portlet = navigation.Assignment()\n@@ -54,12 +45,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Navigation\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Navigation")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -70,81 +60,85 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = navigation.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = navigation.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, navigation.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = navigation.Assignment()\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, navigation.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        addUtility(\n-            self.portal, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+        addUtility(self.portal, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n         self.populateSite()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.request\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment or navigation.Assignment(topLevel=0)\n \n         return getMultiAdapter(\n-            (context, request, view, manager, assignment), IPortletRenderer)\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def populateSite(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.remoteUrl = \'http://plone.org\'\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Link", "link1")\n+        self.portal.link1.remoteUrl = "http://plone.org"\n         self.portal.link1.reindexObject()\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n-        folder2.invokeFactory(\'File\', \'file21\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n+        folder2.invokeFactory("File", "file21")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def testCreateNavTree(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n+        self.assertTrue("children" in tree)\n \n     def testCreateNavTreeCurrentItem(self):\n         # With the context set to folder2 it should return a dict with\n@@ -152,7 +146,7 @@ def testCreateNavTreeCurrentItem(self):\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'currentItem\'], True)\n+        self.assertEqual(tree["children"][-1]["currentItem"], True)\n \n     def testNavTreeExcludesItemsWithExcludeProperty(self):\n         # Make sure that items with the exclude_from_nav property set get\n@@ -162,8 +156,8 @@ def testNavTreeExcludesItemsWithExcludeProperty(self):\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 self.fail()\n \n     def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n@@ -175,338 +169,424 @@ def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         found = False\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n+        for c in tree["children"]:\n+            if c["item"].getPath() == "/plone/folder2":\n                 found = True\n                 break\n         self.assertTrue(found)\n \n     def testNavTreeExcludesDefaultPage(self):\n         # Make sure that items which are the default page are excluded\n-        self.portal.folder2.setDefaultPage(\'doc21\')\n+        self.portal.folder2.setDefaultPage("doc21")\n         view = self.renderer(self.portal.folder1.doc11)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Ensure that our \'doc21\' default page is not in the tree.\n         self.assertEqual(\n-            [c for c in tree[\'children\'][-1][\'children\']\n-             if c[\'item\'].getPath()[-5:] == \'doc21\'], [])\n+            [\n+                c\n+                for c in tree["children"][-1]["children"]\n+                if c["item"].getPath()[-5:] == "doc21"\n+            ],\n+            [],\n+        )\n \n     def testNavTreeMarksParentMetaTypesNotToQuery(self):\n         # Make sure that items whose ids are in the idsNotToList navTree\n         # property get no_display set to True\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], True)\n+        self.assertEqual(tree["children"][-1]["show_children"], True)\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n         view = self.renderer(self.portal.folder2.file21)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][-1][\'show_children\'], False)\n+        self.assertEqual(tree["children"][-1]["show_children"], False)\n \n     def testCreateNavTreeWithLink(self):\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as Creator, link1 should not use the remote Url\n-                self.assertFalse(child[\'useRemoteUrl\'])\n+                self.assertFalse(child["useRemoteUrl"])\n \n-        self.portal.link1.setCreators([\'some_other_user\'])\n+        self.portal.link1.setCreators(["some_other_user"])\n         self.portal.link1.reindexObject()\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'getRemoteUrl\'])\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(child[\'getRemoteUrl\'], \'http://plone.org\')\n+        for child in tree["children"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n                 # as non-Creator user, link1 should use the remote Url\n-                self.assertTrue(child[\'useRemoteUrl\'])\n+                self.assertTrue(child["useRemoteUrl"])\n \n     def testNonStructuralFolderHidesChildren(self):\n         # Make sure NonStructuralFolders act as if parent_types_not_to_query\n         # is set.\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.portal.folder1._setObject(\'ns_folder\', f)\n+        f = dummy.NonStructuralFolder("ns_folder")\n+        self.portal.folder1._setObject("ns_folder", f)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1.ns_folder)\n         self.portal.portal_catalog.reindexObject(self.portal.folder1)\n         view = self.renderer(self.portal.folder1.ns_folder)\n         tree = view.getNavTree()\n-        self.assertEqual(tree[\'children\'][3][\'children\'][3][\'item\'].getPath(),\n-                                \'/plone/folder1/ns_folder\')\n-        self.assertEqual(len(tree[\'children\'][3][\'children\'][3][\'children\']), 0)\n+        self.assertEqual(\n+            tree["children"][3]["children"][3]["item"].getPath(),\n+            "/plone/folder1/ns_folder",\n+        )\n+        self.assertEqual(len(tree["children"][3]["children"][3]["children"]), 0)\n \n     def testTopLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                topLevel=1))\n+            self.portal.folder2.file21, assignment=navigation.Assignment(topLevel=1)\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(\n+            tree["children"][-1]["item"].getPath(), "/plone/folder2/file21"\n+        )\n \n     def testTopLevelWithContextAboveLevel(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=1))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=1))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testTopLevelTooDeep(self):\n-        view = self.renderer(\n-            self.portal, assignment=navigation.Assignment(topLevel=5))\n+        view = self.renderer(self.portal, assignment=navigation.Assignment(topLevel=5))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testIncludeTopWithoutNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=0, root_uid=None, includeTop=True))\n+                topLevel=0, root_uid=None, includeTop=True\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         self.assertTrue(view.root_is_portal())\n-        self.assertEqual(len(tree[\'children\']), 6)\n-        self.assertEqual(view.getNavRootPath(), \'/plone\')\n+        self.assertEqual(len(tree["children"]), 6)\n+        self.assertEqual(view.getNavRootPath(), "/plone")\n \n     def testTopLevelWithNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n         view = self.renderer(\n             self.portal.folder2.folder21,\n             assignment=navigation.Assignment(\n-                topLevel=1, root_uid=self.portal.folder2.UID()))\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n+        self.assertEqual(len(tree["children"]), 1)\n         self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/folder21/doc211\')\n+            tree["children"][0]["item"].getPath(), "/plone/folder2/folder21/doc211"\n+        )\n \n     def testMultipleTopLevelWithNavigationRoot(self):\n         # See bug 9405\n         # http://dev.plone.org/plone/ticket/9405\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'abc\')\n-        self.portal.invokeFactory(\'Folder\', \'abcde\')\n-        self.portal.abc.invokeFactory(\'Folder\', \'down_abc\')\n-        self.portal.abcde.invokeFactory(\'Folder\', \'down_abcde\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "abc")\n+        self.portal.invokeFactory("Folder", "abcde")\n+        self.portal.abc.invokeFactory("Folder", "down_abc")\n+        self.portal.abcde.invokeFactory("Folder", "down_abcde")\n         view1 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abc, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abc,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree1[\'children\']), 1)\n-        self.assertEqual(len(tree2[\'children\']), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n         view1 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abc.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abc.UID()\n+            ),\n+        )\n         view2 = self.renderer(\n-            self.portal.abcde, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.abcde.UID()))\n+            self.portal.abcde,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.abcde.UID()\n+            ),\n+        )\n         tree1 = view1.getNavTree()\n         tree2 = view2.getNavTree()\n-        self.assertEqual(len(tree2[\'children\']), 1)\n-        self.assertEqual(len(tree1[\'children\']), 1)\n+        self.assertEqual(len(tree2["children"]), 1)\n+        self.assertEqual(len(tree1["children"]), 1)\n \n     def testShowAllParentsOverridesBottomLevel(self):\n         view = self.renderer(\n-            self.portal.folder2.file21, assignment=navigation.Assignment(\n-                bottomLevel=1, topLevel=0))\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n         # Note: showAllParents makes sure we actually return items on the,\n         # path to the context, but the portlet will not display anything\n         # below bottomLevel.\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/file21\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/file21",\n+        )\n \n     def testBottomLevelStopsAtFolder(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=1, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=1, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 0)\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n+        self.assertEqual(len(tree["children"][-1]["children"]), 0)\n \n     def testBottomLevelZeroNoLimit(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(\n+            tree["children"][-1]["children"][0]["item"].getPath(),\n+            "/plone/folder2/doc21",\n+        )\n \n     def testBottomLevelZeroNoLimitRendering(self):\n         """Test that bottomLevel=0 means no limit for bottomLevel."""\n \n         # first we set a high integer as bottomLevel to simulate "no limit"\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=99, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=99, topLevel=0),\n+        )\n         a = view.render()\n \n         # now set bottomLevel to 0 -> outcome should be the same\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(bottomLevel=0, topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(bottomLevel=0, topLevel=0),\n+        )\n         b = view.render()\n \n         self.assertEqual(a, b)\n \n     def testNavRootWithUnicodeNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n-        view = self.renderer(self.portal.folder2.folder21,\n-            assignment=navigation.Assignment(topLevel=1, root_uid=self.portal.folder2.UID()))\n-        self.assertEqual(view.getNavRootPath(), \'/plone/folder2/folder21\')\n-        self.assertEqual(view.getNavRoot().absolute_url(),\n-                         self.portal.folder2.folder21.absolute_url())\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(\n+                topLevel=1, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n+        self.assertEqual(view.getNavRootPath(), "/plone/folder2/folder21")\n+        self.assertEqual(\n+            view.getNavRoot().absolute_url(),\n+            self.portal.folder2.folder21.absolute_url(),\n+        )\n \n     def testNoRootSet(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(), \'/plone/folder2\')\n+        self.assertEqual(tree["children"][-1]["item"].getPath(), "/plone/folder2")\n \n     def testRootIsNotPortal(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID(), topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(\n+                root_uid=self.portal.folder2.UID(), topLevel=0\n+            ),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootDoesNotExist(self):\n-        view = self.renderer(self.portal.folder2.file21, assignment=navigation.Assignment(root_uid=\'DOESNT_EXIST\', topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            assignment=navigation.Assignment(root_uid="DOESNT_EXIST", topLevel=0),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 6)\n+        self.assertEqual(len(tree["children"]), 6)\n \n     def testAboveRoot(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.root\'] = u\'/folder2\'\n+        registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testOutsideRoot(self):\n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()))\n+        view = self.renderer(\n+            self.portal.folder1,\n+            assignment=navigation.Assignment(root_uid=self.portal.folder2.UID()),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrent(self):\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testRootIsCurrentWithFolderishDefaultPage(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.setDefaultPage(\'folder21\')\n+        self.portal.folder2.invokeFactory("Folder", "folder21")\n+        self.portal.folder2.setDefaultPage("folder21")\n \n-        view = self.renderer(self.portal.folder2.folder21, assignment=navigation.Assignment(currentFolderOnly=True))\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            assignment=navigation.Assignment(currentFolderOnly=True),\n+        )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder2/doc21\')\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder2/doc21")\n \n     def testCustomQuery(self):\n         # Try a custom query script for the navtree that returns only published\n         # objects\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         workflow = self.portal.portal_workflow\n-        factory = self.portal.manage_addProduct[\'PythonScripts\']\n-        factory.manage_addPythonScript(\'getCustomNavQuery\')\n+        factory = self.portal.manage_addProduct["PythonScripts"]\n+        factory.manage_addPythonScript("getCustomNavQuery")\n         script = self.portal.getCustomNavQuery\n-        script.ZPythonScript_edit(\'\', \'return {"review_state": "published"}\')\n+        script.ZPythonScript_edit("", \'return {"review_state": "published"}\')\n         self.assertEqual(self.portal.getCustomNavQuery(), {"review_state": "published"})\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testStateFiltering(self):\n         # Test Navtree workflow state filtering\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n-        )\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n         workflow = self.portal.portal_workflow\n-        navigation_settings.workflow_states_to_show = (\'published\',)\n+        navigation_settings.workflow_states_to_show = ("published",)\n         navigation_settings.filter_on_workflow = True\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        #Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        #change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n+        self.assertTrue("children" in tree)\n+        # Should only contain current object\n+        self.assertEqual(len(tree["children"]), 1)\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n         self.portal.folder1.reindexObject()\n         view = self.renderer(self.portal.folder2)\n         tree = view.getNavTree()\n-        #Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["children"]), 2)\n \n     def testPrunedRootNode(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n+        self.assertEqual(len(tree["children"]), 0)\n \n     def testPrunedRootNodeShowsAllParents(self):\n         registry = self.portal.portal_registry\n-        registry[\'plone.parent_types_not_to_query\'] = [u\'Folder\']\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         assignment = navigation.Assignment(topLevel=0)\n         assignment.topLevel = 1\n         view = self.renderer(self.portal.folder1.doc11, assignment=assignment)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/doc11\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(tree["children"][0]["item"].getPath(), "/plone/folder1/doc11")\n \n     def testIsCurrentParentWithOverlapingNames(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n-        self.portal.invokeFactory(\'Folder\', \'folder2x\')\n-        self.portal.folder2x.invokeFactory(\'Document\', \'doc2x1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', ])\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory("Folder", "folder2x")\n+        self.portal.folder2x.invokeFactory("Document", "doc2x1")\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Member",\n+            ],\n+        )\n         view = self.renderer(self.portal.folder2x.doc2x1)\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n \n-        folder2x_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2x\'][0]\n-        self.assertTrue(folder2x_node[\'currentParent\'])\n+        folder2x_node = [n for n in tree["children"] if n["path"] == "/plone/folder2x"][\n+            0\n+        ]\n+        self.assertTrue(folder2x_node["currentParent"])\n \n-        folder2_node = [n for n in tree[\'children\'] if n[\'path\'] == \'/plone/folder2\'][0]\n-        self.assertFalse(folder2_node[\'currentParent\'])\n+        folder2_node = [n for n in tree["children"] if n["path"] == "/plone/folder2"][0]\n+        self.assertFalse(folder2_node["currentParent"])\n \n     def testPortletNotDisplayedOnINavigationRoot(self):\n         """test that navigation portlet does not show on INavigationRoot\n@@ -519,11 +599,10 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add nested subfolder in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n \n         # make a navigation portlet\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=1,\n-                root_uid=None)\n+        assignment = navigation.Assignment(bottomLevel=0, topLevel=1, root_uid=None)\n         portlet = self.renderer(self.portal.folder1, assignment=assignment)\n \n         # check there is no portlet\n@@ -531,7 +610,7 @@ def testPortletNotDisplayedOnINavigationRoot(self):\n \n     def testINavigationRootWithRelativeRootSet(self):\n         """test that navigation portlet uses relative root set by user\n-           even in INavigationRoot case.\n+        even in INavigationRoot case.\n         """\n         self.assertFalse(INavigationRoot.providedBy(self.portal.folder1))\n \n@@ -540,36 +619,39 @@ def testINavigationRootWithRelativeRootSet(self):\n         self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n \n         # add two nested subfolders in folder1\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder1_1\')\n-        self.portal.folder1.folder1_1.invokeFactory(\'Folder\', \'folder1_1_1\')\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n+        self.portal.folder1.folder1_1.invokeFactory("Folder", "folder1_1_1")\n \n         # make a navigation portlet with navigation root set\n-        assignment = navigation.Assignment(bottomLevel=0, topLevel=0,\n-                root_uid=self.portal.folder1.folder1_1.UID())\n-        portlet = self.renderer(self.portal.folder1.folder1_1,\n-                assignment=assignment)\n+        assignment = navigation.Assignment(\n+            bottomLevel=0, topLevel=0, root_uid=self.portal.folder1.folder1_1.UID()\n+        )\n+        portlet = self.renderer(self.portal.folder1.folder1_1, assignment=assignment)\n \n         # check there is a portlet\n         self.assertTrue(portlet.available)\n \n         # check that portlet root is actually the one specified\n         root = portlet.getNavRoot()\n-        self.assertEqual(root.getId(), \'folder1_1\')\n+        self.assertEqual(root.getId(), "folder1_1")\n \n         # check that portlet tree actually includes children\n         tree = portlet.getNavTree()\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(), \'/plone/folder1/folder1_1/folder1_1_1\')\n+        self.assertEqual(len(tree["children"]), 1)\n+        self.assertEqual(\n+            tree["children"][0]["item"].getPath(),\n+            "/plone/folder1/folder1_1/folder1_1_1",\n+        )\n \n     def testPortletsTitle(self):\n         """If portlet\'s name is not explicitely specified we show\n-           default fallback \'Navigation\', translate it and hide it\n-           with CSS."""\n+        default fallback \'Navigation\', translate it and hide it\n+        with CSS."""\n         view = self.renderer(self.portal)\n         view.getNavTree()\n         self.assertEqual(view.title(), "Navigation")\n         self.assertFalse(view.hasName())\n-        view.data.name = \'New navigation title\'\n+        view.data.name = "New navigation title"\n         self.assertEqual(view.title(), "New navigation title")\n         self.assertTrue(view.hasName())\n \n@@ -579,45 +661,59 @@ def testHeadingLinkRootless(self):\n         """\n \n         directlyProvides(self.portal.folder2, INavigationRoot)\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder2, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n         # Even if the assignment contains no topLevel options and no self.root\n         # one should get link to the navigation root sitemap\n-        view = self.renderer(self.portal.folder2.doc21, assignment=navigation.Assignment())\n+        view = self.renderer(\n+            self.portal.folder2.doc21, assignment=navigation.Assignment()\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/folder2/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/folder2/sitemap")\n \n-        view = self.renderer(self.portal.folder1, assignment=navigation.Assignment(topLevel=0))\n+        view = self.renderer(\n+            self.portal.folder1, assignment=navigation.Assignment(topLevel=0)\n+        )\n         link = view.heading_link_target()\n         # The root is not given -> should render the sitemap in the navigation root\n-        self.assertEqual(link, \'http://nohost/plone/sitemap\')\n+        self.assertEqual(link, "http://nohost/plone/sitemap")\n \n     def testHeadingLinkRooted(self):\n         """\n         See that heading link points to a content item if root selected, otherwise sitemap.\n         """\n         view = self.renderer(\n-            self.portal.folder2, assignment=navigation.Assignment(\n-                topLevel=0, root_uid=self.portal.folder2.UID()))\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(\n+                topLevel=0, root_uid=self.portal.folder2.UID()\n+            ),\n+        )\n         link = view.heading_link_target()\n-        self.assertEqual(link, \'http://nohost/plone/folder2\')\n+        self.assertEqual(link, "http://nohost/plone/folder2")\n \n     def testHeadingLinkRootedItemGone(self):\n         """\n         See that heading link points to a content item which do not exist\n         """\n-        view = self.renderer(self.portal.folder2, assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"))\n+        view = self.renderer(\n+            self.portal.folder2,\n+            assignment=navigation.Assignment(topLevel=0, root_uid="DOESNT_EXIST"),\n+        )\n         link = view.heading_link_target()\n         # Points to the site root if the item is gone\n         self.assertEqual(link, "http://nohost/plone/sitemap")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_news_portlet.py b/plone/app/portlets/tests/test_news_portlet.py\nindex ed0c6e6b..b021f887 100644\n--- a/plone/app/portlets/tests/test_news_portlet.py\n+++ b/plone/app/portlets/tests/test_news_portlet.py\n@@ -1,39 +1,37 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        self.assertEqual(portlet.addview, \'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        self.assertEqual(portlet.addview, "portlets.News")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = news.Assignment(count=5)\n@@ -41,11 +39,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.News\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.News")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -56,60 +54,83 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = news.Assignment(count=5)\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = news.Assignment(count=5)\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, news.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = news.Assignment(count=5)\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, news.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n         # Make sure News Items use simple_publication_workflow\n-        self.portal.portal_workflow.setChainForPortalTypes([\'News Item\'], [\'simple_publication_workflow\'])\n+        self.portal.portal_workflow.setChainForPortalTypes(\n+            ["News Item"], ["simple_publication_workflow"]\n+        )\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n-        assignment = assignment or news.Assignment(template=\'portlet_recent\', macro=\'portlet\')\n-\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n+        assignment = assignment or news.Assignment(\n+            template="portlet_recent", macro="portlet"\n+        )\n+\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_published_news_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'News Item\', \'n1\')\n-        self.portal.invokeFactory(\'News Item\', \'n2\')\n-        self.portal.portal_workflow.doActionFor(self.portal.n1, \'publish\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("News Item", "n1")\n+        self.portal.invokeFactory("News Item", "n2")\n+        self.portal.portal_workflow.doActionFor(self.portal.n1, "publish")\n \n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'draft\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("draft",)))\n         self.assertEqual(0, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', )))\n+        r = self.renderer(assignment=news.Assignment(count=5, state=("published",)))\n         self.assertEqual(1, len(r.published_news_items()))\n-        r = self.renderer(assignment=news.Assignment(count=5, state=(\'published\', \'private\', )))\n+        r = self.renderer(\n+            assignment=news.Assignment(\n+                count=5,\n+                state=(\n+                    "published",\n+                    "private",\n+                ),\n+            )\n+        )\n         self.assertEqual(2, len(r.published_news_items()))\n \n     def test_all_news_link(self):\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n         r = self.renderer(assignment=news.Assignment(count=5))\n         self.assertEqual(r.all_news_link(), None)\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n-        self.assertTrue(r.all_news_link().endswith(\'/news\'))\n+        self.portal.invokeFactory("Folder", "news")\n+        self.assertTrue(r.all_news_link().endswith("/news"))\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_recent_portlet.py b/plone/app/portlets/tests/test_recent_portlet.py\nindex 9c50f85f..2eba5dd0 100644\n--- a/plone/app/portlets/tests/test_recent_portlet.py\n+++ b/plone/app/portlets/tests/test_recent_portlet.py\n@@ -1,38 +1,37 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.storage import PortletAssignmentMapping\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        self.assertEqual(portlet.addview, \'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        self.assertEqual(portlet.addview, "portlets.Recent")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = recent.Assignment()\n@@ -40,11 +39,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Recent\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Recent")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -55,48 +54,57 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n \n-        mapping[\'foo\'] = recent.Assignment()\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = recent.Assignment()\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, recent.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = recent.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, recent.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.app.REQUEST\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.portal.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or recent.Assignment()\n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_recent_items(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        if \'news\' in self.portal:\n-            self.portal._delObject(\'news\')\n-        if \'events\' in self.portal:\n-            self.portal._delObject(\'events\')\n-        if \'front-page\' in self.portal:\n-            self.portal._delObject(\'front-page\')\n-        if \'Members\' in self.portal:\n-            self.portal._delObject(\'Members\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n             self.folder = None\n-        if \'folder\' in self.portal:\n-            self.portal._delObject(\'folder\')\n-        if \'users\' in self.portal:\n-            self.portal._delObject(\'users\')\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n         r = self.renderer(assignment=recent.Assignment())\n         self.assertEqual(2, len(r.recent_items()))\n \n@@ -105,15 +113,17 @@ def test_recent_items(self):\n \n     def test_recently_modified_link(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertTrue(r.recently_modified_link().endswith(\'/recently_modified\'))\n+        self.assertTrue(r.recently_modified_link().endswith("/recently_modified"))\n \n     def test_title(self):\n         r = self.renderer(assignment=recent.Assignment())\n-        self.assertEqual(str(r.title), \'box_recent_changes\')\n+        self.assertEqual(str(r.title), "box_recent_changes")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py\nindex 2d656ed8..03105469 100644\n--- a/plone/app/portlets/tests/test_redirects.py\n+++ b/plone/app/portlets/tests/test_redirects.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.portlets.browser.adding import PortletAdding\n from plone.app.portlets.browser.editmanager import ManagePortletAssignments\n from plone.app.portlets.browser.formhelper import AddForm\n@@ -8,30 +7,26 @@\n \n class TestRedirects(PortletsTestCase):\n     _test_methods = [\n-        (PortletAdding, \'nextURL\'),\n-        (ManagePortletAssignments, \'_nextUrl\'),\n-        (AddForm, \'nextURL\'),\n-        (EditForm, \'nextURL\'),\n+        (PortletAdding, "nextURL"),\n+        (ManagePortletAssignments, "_nextUrl"),\n+        (AddForm, "nextURL"),\n+        (EditForm, "nextURL"),\n     ]\n \n     def test_regression(self):\n         portal_url = self.portal.absolute_url()\n-        self.request.form.update({\n-            \'referer\': portal_url\n-        })\n+        self.request.form.update({"referer": portal_url})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n             self.assertEqual(getattr(view, method)(), portal_url)\n \n     def test_valid_next_url(self):\n-        self.request.form.update({\n-            \'referer\': \'http://attacker.com\'\n-        })\n+        self.request.form.update({"referer": "http://attacker.com"})\n         for Klass, method in self._test_methods:\n             view = Klass(self.portal, self.request)\n             view.__parent__ = self.portal\n-            self.assertNotEqual(\'http://attacker.com\', getattr(view, method)())\n+            self.assertNotEqual("http://attacker.com", getattr(view, method)())\n \n \n def test_suite():\n@@ -52,7 +47,9 @@ def test_suite():\n     # bin/test -s plone.app.portlets -m test_redirects\n     # But the error *is* in this test_redirects.py file,\n     # because it goes away when I delete this file.\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestRedirects))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_review_portlet.py b/plone/app/portlets/tests/test_review_portlet.py\nindex 676416d9..53eb64e3 100644\n--- a/plone/app/portlets/tests/test_review_portlet.py\n+++ b/plone/app/portlets/tests/test_review_portlet.py\n@@ -1,41 +1,39 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignment\n-from plone.portlets.interfaces import IPortletDataProvider\n-from plone.portlets.interfaces import IPortletRenderer\n-\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.tests.base import PortletsTestCase\n-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import setRoles\n-from plone.app.testing import login\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestPortlet(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        self.assertEqual(portlet.addview, \'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        self.assertEqual(portlet.addview, "portlets.Review")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = review.Assignment()\n@@ -43,11 +41,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.Review\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.Review")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n         addview.createAndAdd(data={})\n \n         self.assertEqual(len(mapping), 1)\n@@ -56,55 +54,65 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = review.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, review.Renderer))\n \n \n class TestRenderer(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.portal_membership.getMemberById(\'test_user_1_\').setMemberProperties(\n-                                    {\'fullname\': \'Test user\'})\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.portal_membership.getMemberById("test_user_1_").setMemberProperties(\n+            {"fullname": "Test user"}\n+        )\n \n         # add Folder and assign Reviewer role to our Test user there\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.portal.invokeFactory("Folder", "folder1")\n         self.folder1 = self.portal.folder1\n-        self.folder1.manage_setLocalRoles(\'test_user_1_\', [\'Reviewer\'])\n+        self.folder1.manage_setLocalRoles("test_user_1_", ["Reviewer"])\n         self.folder1.reindexObjectSecurity()\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or review.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_review_items(self):\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(0, len(r.review_items()))\n-        wf = getToolByName(self.portal, \'portal_workflow\')\n-        wf.doActionFor(self.portal.doc1, \'submit\')\n+        wf = getToolByName(self.portal, "portal_workflow")\n+        wf.doActionFor(self.portal.doc1, "submit")\n         r = self.renderer(assignment=review.Assignment())\n         self.assertEqual(1, len(r.review_items()))\n-        self.assertEqual(r.review_items()[0][\'creator\'], "Test user")\n+        self.assertEqual(r.review_items()[0]["creator"], "Test user")\n \n     def test_full_news_link(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertTrue(r.full_review_link().endswith(\'/full_review_list\'))\n+        self.assertTrue(r.full_review_link().endswith("/full_review_list"))\n \n     def test_full_news_link_local_reviewer(self):\n         # login as our test user\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n         # there should be no full news link on site root for our local reviewer\n         r = self.renderer(assignment=review.Assignment())\n@@ -112,16 +120,19 @@ def test_full_news_link_local_reviewer(self):\n \n         # get renderer in context of our reviewer\'s folder\n         r = self.renderer(context=self.folder1, assignment=review.Assignment())\n-        self.assertEqual(r.full_review_link(), \'%s/full_review_list\' %\n-            self.folder1.absolute_url())\n+        self.assertEqual(\n+            r.full_review_link(), "%s/full_review_list" % self.folder1.absolute_url()\n+        )\n \n     def test_title(self):\n         r = self.renderer(assignment=review.Assignment())\n-        self.assertEqual(str(r.title), \'box_review_list\')\n+        self.assertEqual(str(r.title), "box_review_list")\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_rss_portlet.py b/plone/app/portlets/tests/test_rss_portlet.py\nindex 7d47b67f..1ee123ed 100644\n--- a/plone/app/portlets/tests/test_rss_portlet.py\n+++ b/plone/app/portlets/tests/test_rss_portlet.py\n@@ -1,36 +1,48 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-\n-from Products.GenericSetup.utils import _getDottedName\n-\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.portlets.portlets import rss\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.namedfile.file import NamedBlobFile\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n+from Products.GenericSetup.utils import _getDottedName\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n-from plone.app.portlets.portlets import rss\n-from plone.app.portlets.tests.base import PortletsTestCase\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+import os\n+import transaction\n+import unittest\n \n \n-class TestPortlet(PortletsTestCase):\n+# Take a sample feed.  In this case an atom feed instead of RSS.\n+# Taken from https://maurits.vanrees.org/weblog/topics/plone/@@atom.xml\n+here = os.path.dirname(__file__)\n+sample_feed = os.path.join(here, "atom_feed_maurits.xml")\n \n+\n+class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        self.assertEqual(portlet.addview, \'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        self.assertEqual(portlet.addview, "portlets.rss")\n \n     def testRegisteredInterfaces(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n         registered_interfaces = [_getDottedName(i) for i in portlet.for_]\n         registered_interfaces.sort()\n-        self.assertEqual([\'plone.app.portlets.interfaces.IColumn\',\n-          \'plone.app.portlets.interfaces.IDashboard\'],\n-          registered_interfaces)\n+        self.assertEqual(\n+            [\n+                "plone.app.portlets.interfaces.IColumn",\n+                "plone.app.portlets.interfaces.IDashboard",\n+            ],\n+            registered_interfaces,\n+        )\n \n     def testInterfaces(self):\n         portlet = rss.Assignment()\n@@ -38,11 +50,11 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'portlets.rss\')\n-        mapping = self.portal.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="portlets.rss")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n         addview.createAndAdd(data={})\n \n@@ -52,24 +64,44 @@ def testInvokeAddview(self):\n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n-        manager = getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = self.folder.restrictedTraverse("@@plone")\n+        manager = getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = rss.Assignment()\n \n-        renderer = getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, rss.Renderer))\n \n+    def testRSSFeedFile(self):\n+        # We should not be able to read a file from the file system.\n+        # We pass a url and a timeout in minutes\n+        feed = rss.RSSFeed("file://" + sample_feed, 1)\n+        feed._retrieveFeed()\n+        self.assertTrue(feed._loaded)\n+        self.assertTrue(feed._failed)\n+        self.assertFalse(feed.ok)\n+        self.assertFalse(feed.siteurl)\n+        self.assertEqual(len(feed.items), 0)\n \n-class TestRenderer(PortletsTestCase):\n \n-    def renderer(self, context=None, request=None, view=None, manager=None, assignment=None):\n+class TestRenderer(PortletsTestCase):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n-        manager = manager or getUtility(IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n+        view = view or self.folder.restrictedTraverse("@@plone")\n+        manager = manager or getUtility(\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n         assignment = assignment or rss.Assignment()\n \n-        return getMultiAdapter((context, request, view, manager, assignment), IPortletRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n \n     def test_rss_items(self):\n         r = self.renderer(assignment=rss.Assignment())\n@@ -77,13 +109,40 @@ def test_rss_items(self):\n \n     def testTitle(self):\n         r = self.renderer(assignment=rss.Assignment())\n-        self.assertEqual(r.title, u\'\')\n-        r.data.portlet_title = u\'Overridden title\'\n-        self.assertEqual(r.title, u\'Overridden title\')\n+        self.assertEqual(r.title, "")\n+        r.data.portlet_title = "Overridden title"\n+        self.assertEqual(r.title, "Overridden title")\n+\n+\n+class TestFunctional(unittest.TestCase):\n+    layer = PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+\n+    def test_rss_feed_http(self):\n+        # First prepare a file in the current site,\n+        # so that we can try to load this via http.\n+        with open(sample_feed, "rb") as myfile:\n+            data = myfile.read()\n+        file_field = NamedBlobFile(data, filename="feed.xml")\n+        portal = self.layer["portal"]\n+        feed_id = portal.invokeFactory("File", "feed")\n+        feed = portal[feed_id]\n+        feed.file = file_field\n+        transaction.commit()\n+\n+        # Eat the feed.\n+        feed = rss.RSSFeed(feed.absolute_url(), 1)\n+        feed._retrieveFeed()\n+        self.assertTrue(feed._loaded)\n+        self.assertFalse(feed._failed)\n+        self.assertTrue(feed.ok)\n+        self.assertEqual(feed.siteurl, "https://maurits.vanrees.org/weblog")\n+        self.assertEqual(len(feed.items), 15)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/plone/app/portlets/tests/test_setup.py b/plone/app/portlets/tests/test_setup.py\nindex e85cb877..4d31bd54 100644\n--- a/plone/app/portlets/tests/test_setup.py\n+++ b/plone/app/portlets/tests/test_setup.py\n@@ -1,29 +1,38 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getSiteManager, getUtilitiesFor, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.portlets.interfaces import IDashboard\n+from plone.app.portlets.interfaces import ILeftColumn\n+from plone.app.portlets.interfaces import IRightColumn\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.portlets.interfaces import ILocalPortletAssignable\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletType\n-\n-from plone.app.portlets.interfaces import ILeftColumn, IRightColumn, IDashboard\n-from plone.app.portlets.tests.base import PortletsTestCase\n+from zope.component import getSiteManager\n+from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n \n \n class TestProductInstall(PortletsTestCase):\n-\n     def testPortletManagersRegistered(self):\n         sm = getSiteManager(self.portal)\n-        registrations = [r.name for r in sm.registeredUtilities()\n-                            if IPortletManager == r.provided]\n-        self.assertEqual([\'plone.dashboard1\', \'plone.dashboard2\',\n-                           \'plone.dashboard3\', \'plone.dashboard4\',\n-                           \'plone.footerportlets\', \'plone.leftcolumn\',\n-                           \'plone.rightcolumn\'], sorted(registrations))\n+        registrations = [\n+            r.name for r in sm.registeredUtilities() if IPortletManager == r.provided\n+        ]\n+        self.assertEqual(\n+            [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n+                "plone.footerportlets",\n+                "plone.leftcolumn",\n+                "plone.rightcolumn",\n+            ],\n+            sorted(registrations),\n+        )\n \n     def testInterfaces(self):\n-        left = getUtility(IPortletManager, \'plone.leftcolumn\')\n-        right = getUtility(IPortletManager, \'plone.rightcolumn\')\n-        dashboard = getUtility(IPortletManager, \'plone.dashboard1\')\n+        left = getUtility(IPortletManager, "plone.leftcolumn")\n+        right = getUtility(IPortletManager, "plone.rightcolumn")\n+        dashboard = getUtility(IPortletManager, "plone.dashboard1")\n \n         self.assertTrue(ILeftColumn.providedBy(left))\n         self.assertTrue(IRightColumn.providedBy(right))\n@@ -35,12 +44,14 @@ def testAssignable(self):\n \n     def testPortletTypesRegistered(self):\n         portlets = [u[0] for u in getUtilitiesFor(IPortletType)]\n-        self.assertTrue(\'portlets.Classic\' in portlets)\n-        self.assertTrue(\'portlets.Login\' in portlets)\n+        self.assertTrue("portlets.Classic" in portlets)\n+        self.assertTrue("portlets.Login" in portlets)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestProductInstall))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex b5984506..c54bfd08 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -1,90 +1,100 @@\n-# -*- coding: utf-8 -*-\n+from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from AccessControl import Unauthorized\n-\n-from zope.component import getMultiAdapter, getUtility\n-\n-from plone.portlets.interfaces import IPortletManager, IPortletAssignmentMapping\n-\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.constants import GROUP_CATEGORY\n-from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n-\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.portlets import classic\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n+from plone.portlets.constants import GROUP_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestTraversal(PortletsTestCase):\n-\n     def _assertSameObject(self, a, b):\n         self.assertTrue(aq_base(a) is aq_base(b))\n \n     def testContextNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.folder.restrictedTraverse(\'++contextportlets++plone.leftcolumn\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.folder.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         self._assertSameObject(aq_parent(mapping), self.folder)\n-        mapping[\'foo\'] = assignment\n+        mapping["foo"] = assignment\n         target = getMultiAdapter((self.folder, manager), IPortletAssignmentMapping)\n-        self._assertSameObject(target[\'foo\'], assignment)\n-        self.assertEqual(\'++contextportlets++plone.leftcolumn\', mapping.id)\n+        self._assertSameObject(target["foo"], assignment)\n+        self.assertEqual("++contextportlets++plone.leftcolumn", mapping.id)\n \n     def testDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID)\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++dashboard++plone.dashboard1+" + TEST_USER_ID\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID][\'foo\'], assignment)\n-        self.assertEqual(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID, mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID]["foo"], assignment)\n+        self.assertEqual("++dashboard++plone.dashboard1+" + TEST_USER_ID, mapping.id)\n \n     def testGroupDashboardNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupdashboard++plone.dashboard1+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupdashboard++plone.dashboard1+Reviewers", mapping.id)\n \n     def testGroupDashboardNamespaceChecker(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++groupdashboard++plone.dashboard1+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.dashboard1")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupdashboard++plone.dashboard1+Reviewers"\n+        )\n \n         checker = IPortletPermissionChecker(mapping)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        checker() # no exception\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        checker()  # no exception\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertRaises(Unauthorized, checker)\n \n     def testGroupNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++groupportlets++plone.leftcolumn+Reviewers\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++groupportlets++plone.leftcolumn+Reviewers"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[GROUP_CATEGORY][\'Reviewers\'][\'foo\'], assignment)\n-        self.assertEqual(\'++groupportlets++plone.leftcolumn+Reviewers\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(manager[GROUP_CATEGORY]["Reviewers"]["foo"], assignment)\n+        self.assertEqual("++groupportlets++plone.leftcolumn+Reviewers", mapping.id)\n \n     def testContentTypeNamespace(self):\n         assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-        mapping = self.portal.restrictedTraverse(\'++contenttypeportlets++plone.leftcolumn+Image\')\n+        manager = getUtility(IPortletManager, name="plone.leftcolumn")\n+        mapping = self.portal.restrictedTraverse(\n+            "++contenttypeportlets++plone.leftcolumn+Image"\n+        )\n         self._assertSameObject(aq_parent(mapping), self.portal)\n-        mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[CONTENT_TYPE_CATEGORY][\'Image\'][\'foo\'], assignment)\n-        self.assertEqual(\'++contenttypeportlets++plone.leftcolumn+Image\', mapping.id)\n+        mapping["foo"] = assignment\n+        self._assertSameObject(\n+            manager[CONTENT_TYPE_CATEGORY]["Image"]["foo"], assignment\n+        )\n+        self.assertEqual("++contenttypeportlets++plone.leftcolumn+Image", mapping.id)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestTraversal))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 64042f73..08f4464a 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,89 +1,98 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n-\n-from plone.app.testing import TEST_USER_ID\n-\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletRenderer\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-from plone.portlets.constants import USER_CATEGORY\n-from plone.portlets.utils import hashPortletInfo\n-\n from plone.app.portlets.browser.utils import PortletUtilities\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import news\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.utils import assignment_from_key\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.utils import hashPortletInfo\n+from Products.CMFPlone.utils import safe_unicode\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class TestAssignmentFromKey(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n+        self.manager = getUtility(IPortletManager, name="plone.leftcolumn")\n         self.cat = self.manager[USER_CATEGORY]\n-        self.cat[TEST_USER_ID] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n-                                                       category=USER_CATEGORY,\n-                                                       name=TEST_USER_ID)\n+        self.cat[TEST_USER_ID] = PortletAssignmentMapping(\n+            manager="plone.leftcolumn", category=USER_CATEGORY, name=TEST_USER_ID\n+        )\n \n     def testGetPortletFromContext(self):\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = \'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = "/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromContextUnicodePath(self):\n         """Do not fail, if path is a unicode object.\n         plone.portlets.utils.unhashPortletInfo returns a unicode path key.\n         """\n-        mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n+        mapping = getMultiAdapter(\n+            (self.portal, self.manager), IPortletAssignmentMapping\n+        )\n         c = classic.Assignment()\n-        mapping[\'foo\'] = c\n-        path = u\'/\'.join(self.portal.getPhysicalPath())\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', CONTEXT_CATEGORY, path, \'foo\')\n+        mapping["foo"] = c\n+        path = "/".join(self.portal.getPhysicalPath())\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", CONTEXT_CATEGORY, path, "foo"\n+        )\n         self.assertEqual(c, a)\n \n     def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n-        self.cat[TEST_USER_ID][\'foo\'] = c\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, TEST_USER_ID, \'foo\')\n+        self.cat[TEST_USER_ID]["foo"] = c\n+        a = assignment_from_key(\n+            self.portal, "plone.leftcolumn", USER_CATEGORY, TEST_USER_ID, "foo"\n+        )\n         self.assertEqual(c, a)\n \n \n class TestRendering(PortletsTestCase):\n-\n     def afterSetUp(self):\n-        self.portal.invokeFactory(\'News Item\', \'testnews\', title=u\'Test News\')\n+        self.portal.invokeFactory("News Item", "testnews", title="Test News")\n \n     def testTraversalRendererWithHash(self):\n         context = self.folder\n         request = self.folder.REQUEST\n         manager = getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.folder)\n-        assignment = news.Assignment(state=(\'private\', ))\n-        mapping = getMultiAdapter(\n-            (context, manager), IPortletAssignmentMapping)\n-        mapping[\'newsportlet\'] = assignment\n+            IPortletManager, name="plone.leftcolumn", context=self.folder\n+        )\n+        assignment = news.Assignment(state=("private",))\n+        mapping = getMultiAdapter((context, manager), IPortletAssignmentMapping)\n+        mapping["newsportlet"] = assignment\n         portlet_hash = hashPortletInfo(\n-            dict(manager=manager.__name__, category=CONTEXT_CATEGORY,\n-                 key=\'/\'.join(context.getPhysicalPath()),\n-                 name=\'newsportlet\'))\n+            dict(\n+                manager=manager.__name__,\n+                category=CONTEXT_CATEGORY,\n+                key="/".join(context.getPhysicalPath()),\n+                name="newsportlet",\n+            )\n+        )\n         render_portlet_view = PortletUtilities(context, request)\n         rendered_portlet = render_portlet_view.render_portlet(\n-            safe_unicode(portlet_hash))\n-        self.assertIn(u\'portletNews\', rendered_portlet)\n-        self.assertIn(u\'Test News\', rendered_portlet)\n+            safe_unicode(portlet_hash)\n+        )\n+        self.assertIn("portletNews", rendered_portlet)\n+        self.assertIn("Test News", rendered_portlet)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestAssignmentFromKey))\n     suite.addTest(makeSuite(TestRendering))\ndiff --git a/plone/app/portlets/tests/utils.py b/plone/app/portlets/tests/utils.py\nindex abe40cad..b21f6aa4 100644\n--- a/plone/app/portlets/tests/utils.py\n+++ b/plone/app/portlets/tests/utils.py\n@@ -1,12 +1,12 @@\n-# -*- coding: utf-8 -*-\n-import doctest\n from plone.portlets.manager import PortletManager\n \n+import doctest\n+\n \n # Standard options for DocTests\n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n # Helper class for tests\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex bd19a4b5..db69975a 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,33 +1,24 @@\n-# -*- coding: utf-8 -*-\n-from zope.component import getUtility, getMultiAdapter\n-from zope.container.interfaces import INameChooser\n-\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-\n-from plone.portlets.constants import CONTEXT_CATEGORY, USER_CATEGORY\n-\n+from Acquisition import aq_base\n+from plone.app.event.portlets import portlet_calendar as calendar\n+from plone.app.event.portlets import portlet_events as events\n+from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n-\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import login\n-from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import navigation\n+from plone.app.portlets.portlets import news\n from plone.app.portlets.portlets import recent\n from plone.app.portlets.portlets import review\n-\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.portlets.storage import UserPortletAssignmentMapping\n-\n-from Acquisition import aq_base\n+from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.constants import USER_CATEGORY\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n from Products.CMFCore.utils import getToolByName\n-\n-from plone.app.portlets import HAS_PLONE_APP_EVENT\n-if HAS_PLONE_APP_EVENT:\n-    from plone.app.event.portlets import portlet_calendar as calendar\n-    from plone.app.event.portlets import portlet_events as events\n-\n-import six\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.container.interfaces import INameChooser\n \n \n def assignment_mapping_from_key(context, manager_name, category, key, create=False):\n@@ -40,20 +31,18 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n \n     if category == CONTEXT_CATEGORY:\n         path = key\n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n-        portal_path = \'/\'.join(portal.getPhysicalPath())\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n+        portal_path = "/".join(portal.getPhysicalPath())\n         if path == portal_path:\n             # there may be problem if PloneSite id is \'plone\'.\n             # restrictedTraverse traverses to @@plone BrowserView which\n             # is wrong\n             obj = portal\n         else:\n-            if path.startswith(portal_path + \'/\'):\n-                path = path[len(portal_path)+1:]\n-            while path.startswith(\'/\'):\n+            if path.startswith(portal_path + "/"):\n+                path = path[len(portal_path) + 1 :]\n+            while path.startswith("/"):\n                 path = path[1:]\n-            if six.PY2 and isinstance(path, six.text_type):\n-                path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n             raise KeyError("Cannot find object at path %s" % path)\n@@ -75,6 +64,7 @@ def assignment_from_key(context, manager_name, category, key, name):\n     """\n     return assignment_mapping_from_key(context, manager_name, category, key)[name]\n \n+\n DONT_MIGRATE = object()\n \n \n@@ -83,30 +73,31 @@ def convert_legacy_portlets(context):\n     context to new-style portlets.\n     """\n \n-    portletsMapping = {\'portlet_login\': login.Assignment(),\n-                       \'portlet_news\': news.Assignment(count=5),\n-                       \'portlet_navigation\': navigation.Assignment(),\n-                       \'portlet_review\': review.Assignment(),\n-                       \'portlet_recent\': recent.Assignment(count=5),\n-                       \'portlet_related\': DONT_MIGRATE,\n-                       \'portlet_languages\': DONT_MIGRATE,\n-                       \'portlet_calendar\': DONT_MIGRATE,\n-                       \'portlet_events\': DONT_MIGRATE,\n-                       }\n-\n-    if HAS_PLONE_APP_EVENT:\n-        portletsMapping.update({\n-            \'portlet_calendar\': calendar.Assignment(),\n-            \'portlet_events\': events.Assignment(count=5),\n-        })\n+    portletsMapping = {\n+        "portlet_login": login.Assignment(),\n+        "portlet_news": news.Assignment(count=5),\n+        "portlet_navigation": navigation.Assignment(),\n+        "portlet_review": review.Assignment(),\n+        "portlet_recent": recent.Assignment(count=5),\n+        "portlet_related": DONT_MIGRATE,\n+        "portlet_languages": DONT_MIGRATE,\n+        "portlet_calendar": DONT_MIGRATE,\n+        "portlet_events": DONT_MIGRATE,\n+        "portlet_calendar": calendar.Assignment(),\n+        "portlet_events": events.Assignment(count=5),\n+    }\n \n     # Convert left_slots and right_slots to portlets\n \n-    left = getUtility(IPortletManager, name=\'plone.leftcolumn\')\n-    right = getUtility(IPortletManager, name=\'plone.rightcolumn\')\n+    left = getUtility(IPortletManager, name="plone.leftcolumn")\n+    right = getUtility(IPortletManager, name="plone.rightcolumn")\n \n-    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(context)\n-    rightAssignable = getMultiAdapter((context, right), IPortletAssignmentMapping).__of__(context)\n+    leftAssignable = getMultiAdapter((context, left), IPortletAssignmentMapping).__of__(\n+        context\n+    )\n+    rightAssignable = getMultiAdapter(\n+        (context, right), IPortletAssignmentMapping\n+    ).__of__(context)\n \n     IPortletPermissionChecker(leftAssignable)()\n     IPortletPermissionChecker(rightAssignable)()\n@@ -114,23 +105,31 @@ def convert_legacy_portlets(context):\n     leftChooser = INameChooser(leftAssignable)\n     rightChooser = INameChooser(rightAssignable)\n \n-    left_slots = getattr(aq_base(context), \'left_slots\', [])\n-    right_slots = getattr(aq_base(context), \'right_slots\', [])\n+    left_slots = getattr(aq_base(context), "left_slots", [])\n+    right_slots = getattr(aq_base(context), "right_slots", [])\n \n     for item in left_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 leftAssignable[leftChooser.chooseName(None, newPortlet)] = newPortlet\n \n     for item in right_slots:\n-        path = item.split(\'/\')\n+        path = item.split("/")\n         if len(path) == 4:\n             newPortlet = portletsMapping.get(path[1], None)\n-            if newPortlet is None and path[0] in (\'context\', \'here\') and path[2] == \'macros\':\n+            if (\n+                newPortlet is None\n+                and path[0] in ("context", "here")\n+                and path[2] == "macros"\n+            ):\n                 newPortlet = classic.Assignment(path[1], path[3])\n             if newPortlet is not None and newPortlet is not DONT_MIGRATE:\n                 rightAssignable[rightChooser.chooseName(None, newPortlet)] = newPortlet\ndiff --git a/setup.cfg b/setup.cfg\nindex d67feb4c..908a1d62 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,12 +1,9 @@\n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n-not_skip =\n-    __init__.py\n \n [bdist_wheel]\n-universal = 1\n+universal = 0\ndiff --git a/setup.py b/setup.py\nindex 70faa101..a44fbd88 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,80 +1,75 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'4.4.4.dev0\'\n+version = "5.0.0b2.dev0"\n \n setup(\n-    name=\'plone.app.portlets\',\n+    name="plone.app.portlets",\n     version=version,\n     description="Plone integration for the basic plone.portlets package",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'portlets viewlets plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.portlets\',\n-    license=\'GPL version 2\',\n+    keywords="portlets viewlets plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.portlets",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'five.customerize\',\n-        \'plone.autoform\',\n-        \'plone.i18n\',\n-        \'plone.memoize\',\n-        \'plone.portlets>=1.1\',\n-        \'plone.app.i18n\',\n-        \'plone.app.layout >= 1.2dev\',\n-        \'plone.app.vocabularies >= 2.1.15.dev0\',\n-        \'plone.app.z3cform\',\n-        \'six\',\n-        \'transaction\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.container\',\n-        \'zope.contentprovider\',\n-        \'zope.event\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.site\',\n-        \'zope.traversing\',\n-        \'Products.CMFPlone\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'Products.GenericSetup >= 2.0.dev0\',\n-        \'Products.PluggableAuthService\',\n-        \'ZODB3\',\n-        \'Acquisition\',\n-        \'DateTime\',\n-        \'Zope2 >= 2.12.3\',\n-        \'feedparser\',\n+        "setuptools",\n+        "five.customerize",\n+        "plone.autoform",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.portlets>=1.1",\n+        "plone.app.i18n",\n+        "plone.app.vocabularies >= 2.1.15.dev0",\n+        "plone.app.z3cform",\n+        "transaction",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.container",\n+        "zope.contentprovider",\n+        "zope.event",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.site",\n+        "zope.traversing",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.GenericSetup >= 2.0.dev0",\n+        "Products.PluggableAuthService",\n+        "ZODB",\n+        "Acquisition",\n+        "DateTime",\n+        "Zope >= 5",\n+        "feedparser",\n     ],\n )\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2023-05-09T11:49:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/91fe8bb5df5decf31f84a9eb7565171b932b273c

Merge branch 'master' into add_css_class_to_actions

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A tox.ini
M .gitignore
M CHANGES.rst
M README.rst
M plone/app/portlets/__init__.py
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/configure.zcml
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/interfaces.py
M plone/app/portlets/browser/manage.py
M plone/app/portlets/browser/templates/column.pt
M plone/app/portlets/browser/templates/dashboard-column.pt
M plone/app/portlets/browser/templates/edit-manager-contextual.pt
M plone/app/portlets/browser/templates/edit-manager-macros.pt
M plone/app/portlets/browser/templates/edit-manager.pt
M plone/app/portlets/browser/templates/error_message.pt
M plone/app/portlets/browser/templates/footer.pt
M plone/app/portlets/browser/templates/manage-content-type.pt
M plone/app/portlets/browser/templates/manage-contextual.pt
M plone/app/portlets/browser/templates/manage-dashboard.pt
M plone/app/portlets/browser/templates/manage-group-dashboard.pt
M plone/app/portlets/browser/templates/manage-group.pt
M plone/app/portlets/browser/templates/manage_portlets_fallback.pt
M plone/app/portlets/browser/templates/portlets-pageform.pt
M plone/app/portlets/browser/templates/topbar-manage-portlets.pt
M plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt
M plone/app/portlets/browser/viewlets.py
M plone/app/portlets/configure.zcml
M plone/app/portlets/dashboard/configure.zcml
M plone/app/portlets/dashboard/dashboard.pt
M plone/app/portlets/dashboard/dashboard.py
M plone/app/portlets/dashboard/user_actions.pt
M plone/app/portlets/dashboard/user_actions.py
M plone/app/portlets/exportimport/configure.zcml
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/interfaces.py
M plone/app/portlets/meta.zcml
M plone/app/portlets/metaconfigure.py
M plone/app/portlets/overrides.zcml
M plone/app/portlets/permissions.zcml
M plone/app/portlets/portlets/actions.pt
M plone/app/portlets/portlets/base.py
M plone/app/portlets/portlets/calendar.py
M plone/app/portlets/portlets/classic.pt
M plone/app/portlets/portlets/configure.zcml
M plone/app/portlets/portlets/events.py
M plone/app/portlets/portlets/language.pt
M plone/app/portlets/portlets/language.py
M plone/app/portlets/portlets/login.pt
M plone/app/portlets/portlets/login.py
M plone/app/portlets/portlets/navigation.pt
M plone/app/portlets/portlets/navigation.py
M plone/app/portlets/portlets/navigation_recurse.pt
M plone/app/portlets/portlets/news.pt
M plone/app/portlets/portlets/news.py
M plone/app/portlets/portlets/recent.pt
M plone/app/portlets/portlets/recent.py
M plone/app/portlets/portlets/review.pt
M plone/app/portlets/portlets/review.py
M plone/app/portlets/portlets/rss.pt
M plone/app/portlets/portlets/rss.py
M plone/app/portlets/portlets/search.pt
M plone/app/portlets/portlets/search.py
M plone/app/portlets/testing.py
M plone/app/portlets/tests/atom_feed_maurits.xml
M plone/app/portlets/tests/configure.zcml
M plone/app/portlets/tests/profiles/testing/portlets.xml
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/testMemberDashboard.rst
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_classic_portlet.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/tests/test_exportimport.py
M plone/app/portlets/tests/test_formextender.py
M plone/app/portlets/tests/test_login_portlet.py
M plone/app/portlets/tests/test_manage_views.py
M plone/app/portlets/tests/test_mapping.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_news_portlet.py
M plone/app/portlets/tests/test_recent_portlet.py
M plone/app/portlets/tests/test_redirects.py
M plone/app/portlets/tests/test_review_portlet.py
M plone/app/portlets/tests/test_rss_portlet.py
M plone/app/portlets/tests/test_setup.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
M plone/app/portlets/utils.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.gitignore b/.gitignore\nindex 0cf73216..33ae8cb9 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -2,7 +2,9 @@\n *.pyc\n *.pyo\n build\n+dependencies.svg\n dist\n .project\n .pydevproject\n .settings\n+.tox\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..02792c8f\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,13 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "c79ab88f"\n+\n+[dependencies]\n+mappings = [\n+    "ExtensionClass = [\'ComputedAttribute\']",\n+    ]\n+ignores = [\n+    "Products.CMFPlone",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..449e951a\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 7db62182..9550a542 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,67 @@ Changelog\n \n .. towncrier release notes start\n \n+5.0.4 (2023-05-08)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix circular dependency on `plone.app.event`.\n+  [@jensens] (fix-circular-dependency)\n+\n+\n+5.0.3 (2023-04-14)\n+------------------\n+\n+Internal:\n+\n+\n+- Update configuration files, declare dependencies.\n+  [plone devs] (65ae937a)\n+\n+\n+5.0.2 (2023-03-14)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Avoid acquisition breaking the Review list portlet.\n+  [frapell] (#171)\n+\n+\n+5.0.1 (2023-01-26)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix login button name.\n+  [wkbkhard] (#132)\n+\n+\n+5.0.0 (2022-11-30)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Final release.\n+  [gforcada] (#600)\n+\n+\n+5.0.0b2 (2022-07-21)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Fix Plone 5.2.4 migrating troubles [michaellaunay] (#157)\n+- fix deprecation warnings from plone.base\n+  [jensens] (#166)\n+\n+\n 5.0.0b1 (2022-06-23)\n --------------------\n \n@@ -191,7 +252,7 @@ New features:\n   version.\n   [icemac]\n \n-- Add python 3 compatability\n+- Add python 3 compatibility\n   [pbauer, ale-rt, jensens]\n \n Bug fixes:\n@@ -230,7 +291,7 @@ Bug fixes:\n \n New features:\n \n-- navigation-, news-, recent-,review-portlets: add options to supress icons,\n+- navigation-, news-, recent-,review-portlets: add options to suppress icons,\n   read thumb_scale from registry plus  option to override thumb_scale individually\n   or suppress thumbs.\n   Replace paper clip (fontello icon) with mimetype icon\n@@ -486,7 +547,7 @@ Fixes:\n 3.0.5 (2015-05-12)\n ------------------\n \n-- Supress a ZopeTestCase warning.\n+- Suppress a ZopeTestCase warning.\n   This fixes https://github.com/plone/Products.CMFPlone/issues/501\n   [gforcada]\n \n@@ -541,7 +602,7 @@ Fixes:\n 3.0.1 (2014-04-16)\n ------------------\n \n-- Transfered pbauer\'s fix of #32 \'removing group-portlets\' of 2.4.x-branch to\n+- Transferred pbauer\'s fix of #32 \'removing group-portlets\' of 2.4.x-branch to\n   master. Also Tansfered changelogs of version 2.4.4 to 2.4.8.\n   [ida27]\n \n@@ -645,7 +706,7 @@ Fixes:\n 2.4.6 (2013-09-14)\n ------------------\n \n-- Use relative links for calender next and prev buttons since caching can cause these things to change the current page the user is viewing\n+- Use relative links for calendar next and prev buttons since caching can cause these things to change the current page the user is viewing\n   [vangheem]\n - Fix the removing of Group- and Typeportlets https://dev.plone.org/ticket/13659\n   [pbauer]\n@@ -819,7 +880,7 @@ Fixes:\n   [seanupton]\n \n - Navigation portlet template renders a non-site navigation root content\n-  item with its apporpriate content icon, reserving the Plone site icon\n+  item with its appropriate content icon, reserving the Plone site icon\n   CSS sprite for default use by a site only.\n   [seanupton]\n \n@@ -909,7 +970,7 @@ Fixes:\n \n 2.2.1 - 2011-08-08\n ------------------\n-- Imporove tests readability. Merged from branches/2.1\n+- Improve tests readability. Merged from branches/2.1\n   [gotcha]\n \n - \'placeholder\' attribute for the search portlet\'s field instead of the custom\ndiff --git a/README.rst b/README.rst\nindex 6c10947b..09e6915a 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -10,5 +10,6 @@ Compatibility\n \n plone.app.portlets 2.4.x is for Plone 4.3.\n plone.app.portlets 2.5.x is for Plone 4.3 with plone.app.event (makes the calendar- and events-portlets use the p.a.event implementation)\n-plone.app.portlets 3.x is for Plone 5.\n-plone.app.portlets 4.x is for Plone 5.1\n+plone.app.portlets 3.x is for Plone 5.0\n+plone.app.portlets 4.x is for Plone 5.1 and 5.2.\n+plone.app.portlets 5.x is for Plone 6.0.\ndiff --git a/plone/app/portlets/__init__.py b/plone/app/portlets/__init__.py\nindex febb48db..793aae76 100644\n--- a/plone/app/portlets/__init__.py\n+++ b/plone/app/portlets/__init__.py\n@@ -1,14 +1 @@\n-# Import PloneMessageFactory to create messages in the plone domain\n-from zope.i18nmessageid import MessageFactory\n-\n-import pkg_resources\n-\n-\n-PloneMessageFactory = MessageFactory("plone")\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.event")\n-except pkg_resources.DistributionNotFound:\n-    HAS_PLONE_APP_EVENT = False\n-else:\n-    HAS_PLONE_APP_EVENT = True\n+from plone.base import PloneMessageFactory  # noqa F401 imported but unused\ndiff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py\nindex 656babe3..be62f690 100644\n--- a/plone/app/portlets/browser/adding.py\n+++ b/plone/app/portlets/browser/adding.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPortletAdding)\n class PortletAdding(SimpleItem, BrowserView):\n-\n     context = None\n     request = None\n \ndiff --git a/plone/app/portlets/browser/configure.zcml b/plone/app/portlets/browser/configure.zcml\nindex 653f3487..a06c00c8 100644\n--- a/plone/app/portlets/browser/configure.zcml\n+++ b/plone/app/portlets/browser/configure.zcml\n@@ -1,243 +1,246 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n-    <!-- Some things do not make sense in the breadcrumbs. -->\n-    <class class="..portlets.base.Assignment">\n-      <implements interface="Products.CMFPlone.interfaces.IHideFromBreadcrumbs" />\n-    </class>\n+  <!-- Some things do not make sense in the breadcrumbs. -->\n+  <class class="..portlets.base.Assignment">\n+    <implements interface="plone.base.interfaces.IHideFromBreadcrumbs" />\n+  </class>\n \n-    <class class="..storage.PortletAssignmentMapping">\n-      <implements interface="Products.CMFPlone.interfaces.IHideFromBreadcrumbs" />\n-    </class>\n+  <class class="..storage.PortletAssignmentMapping">\n+    <implements interface="plone.base.interfaces.IHideFromBreadcrumbs" />\n+  </class>\n \n-    <!-- Make a special renderer for the columns so we can control them\n+  <!-- Make a special renderer for the columns so we can control them\n       with a template\n     -->\n-    <adapter\n+  <adapter\n       factory="..manager.ColumnPortletManagerRenderer"\n       provides="plone.portlets.interfaces.IPortletManagerRenderer"\n       />\n \n-    <adapter\n+  <adapter\n       factory="..manager.DashboardPortletManagerRenderer"\n       provides="plone.portlets.interfaces.IPortletManagerRenderer"\n       />\n \n-    <!-- Namespace traversal adapters for various types of portlets -->\n-    <adapter\n-        factory=".traversal.ContextPortletNamespace"\n-        name="contextportlets"\n-        />\n-    <adapter\n-        factory=".traversal.DashboardNamespace"\n-        name="dashboard"\n-        />\n-    <adapter\n-        factory=".traversal.GroupPortletNamespace"\n-        name="groupportlets"\n-        />\n-    <adapter\n-        factory=".traversal.GroupDashboardNamespace"\n-        name="groupdashboard"\n-        />\n-    <adapter\n-        factory=".traversal.ContentTypePortletNamespace"\n-        name="contenttypeportlets"\n-        />\n+  <!-- Namespace traversal adapters for various types of portlets -->\n+  <adapter\n+      factory=".traversal.ContextPortletNamespace"\n+      name="contextportlets"\n+      />\n+  <adapter\n+      factory=".traversal.DashboardNamespace"\n+      name="dashboard"\n+      />\n+  <adapter\n+      factory=".traversal.GroupPortletNamespace"\n+      name="groupportlets"\n+      />\n+  <adapter\n+      factory=".traversal.GroupDashboardNamespace"\n+      name="groupdashboard"\n+      />\n+  <adapter\n+      factory=".traversal.ContentTypePortletNamespace"\n+      name="contenttypeportlets"\n+      />\n \n-    <!-- Portlet management pages -->\n+  <!-- Portlet management pages -->\n \n-    <browser:page\n-        for="*"\n-        name="manage-portlets-macros"\n-        class=".manage.ManageContextualPortlets"\n-        template="templates/edit-manager-macros.pt"\n-        permission="plone.app.portlets.ManageOwnPortlets"\n-        />\n+  <browser:page\n+      name="manage-portlets-macros"\n+      for="*"\n+      class=".manage.ManageContextualPortlets"\n+      template="templates/edit-manager-macros.pt"\n+      permission="plone.app.portlets.ManageOwnPortlets"\n+      />\n \n-    <browser:page\n+  <browser:page\n+      name="topbar-manage-portlets"\n       for="plone.portlets.interfaces.ILocalPortletAssignable"\n       class=".manage.TopbarManagePortlets"\n-      permission="plone.app.portlets.ManagePortlets"\n-      name="topbar-manage-portlets"\n       template="templates/topbar-manage-portlets.pt"\n+      permission="plone.app.portlets.ManagePortlets"\n       />\n \n \n-    <browser:pages\n+  <browser:pages\n       for="plone.portlets.interfaces.ILocalPortletAssignable"\n       class=".manage.ManageContextualPortlets"\n       permission="plone.app.portlets.ManagePortlets"\n       >\n \n-      <browser:page\n+    <browser:page\n         name="manage-portlets"\n         template="templates/manage-contextual.pt"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="convert-legacy-portlets"\n         attribute="convert_legacy_portlets"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="set-portlet-blacklist-status"\n         attribute="set_blacklist_status"\n         />\n \n-    </browser:pages>\n+  </browser:pages>\n \n-    <browser:page\n+  <browser:page\n+      name="manage-dashboard"\n       for="plone.app.layout.navigation.interfaces.INavigationRoot"\n       class=".manage.ManageDashboardPortlets"\n-      name="manage-dashboard"\n       template="templates/manage-dashboard.pt"\n       permission="plone.app.portlets.ManageOwnPortlets"\n       />\n \n-    <browser:page\n+  <browser:page\n+      name="manage-content-type-portlets"\n       for="Products.CMFCore.interfaces.ISiteRoot"\n       class=".manage.ManageContentTypePortlets"\n-      name="manage-content-type-portlets"\n       template="templates/manage-content-type.pt"\n       permission="plone.app.portlets.ManagePortlets"\n       />\n \n-    <browser:page\n+  <browser:page\n+      name="manage-group-portlets"\n       for="Products.CMFCore.interfaces.ISiteRoot"\n       class=".manage.ManageGroupPortlets"\n-      name="manage-group-portlets"\n       template="templates/manage-group.pt"\n       permission="plone.app.portlets.ManagePortlets"\n       />\n \n-    <browser:page\n+  <browser:page\n+      name="manage-group-dashboard"\n       for="Products.CMFCore.interfaces.ISiteRoot"\n       class=".manage.ManageGroupDashboardPortlets"\n-      name="manage-group-dashboard"\n       template="templates/manage-group-dashboard.pt"\n       permission="plone.app.portlets.ManagePortlets"\n       />\n \n-    <!-- Renderer for the columns in edit mode -->\n-    <adapter\n-        factory=".editmanager.EditPortletManagerRenderer"\n-        provides="plone.portlets.interfaces.IPortletManagerRenderer"\n-        />\n-    <adapter\n-        factory=".editmanager.ContextualEditPortletManagerRenderer"\n-        provides="plone.portlets.interfaces.IPortletManagerRenderer"\n-        />\n-    <adapter\n-        factory=".editmanager.DashboardEditPortletManagerRenderer"\n-        provides="plone.portlets.interfaces.IPortletManagerRenderer"\n-        />\n+  <!-- Renderer for the columns in edit mode -->\n+  <adapter\n+      factory=".editmanager.EditPortletManagerRenderer"\n+      provides="plone.portlets.interfaces.IPortletManagerRenderer"\n+      />\n+  <adapter\n+      factory=".editmanager.ContextualEditPortletManagerRenderer"\n+      provides="plone.portlets.interfaces.IPortletManagerRenderer"\n+      />\n+  <adapter\n+      factory=".editmanager.DashboardEditPortletManagerRenderer"\n+      provides="plone.portlets.interfaces.IPortletManagerRenderer"\n+      />\n \n \n-    <!-- Operations on portlets when in edit mode -->\n-    <browser:pages\n+  <!-- Operations on portlets when in edit mode -->\n+  <browser:pages\n       for="plone.portlets.interfaces.IPortletAssignmentMapping"\n       class=".editmanager.ManagePortletAssignments"\n       permission="plone.app.portlets.ManageOwnPortlets"\n       >\n \n-      <browser:page\n+    <browser:page\n         name="delete-portlet"\n         attribute="delete_portlet"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="move-portlet-up"\n         attribute="move_portlet_up"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="move-portlet-down"\n         attribute="move_portlet_down"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="toggle-visibility"\n         attribute="toggle_visibility"\n         />\n \n-    </browser:pages>\n+  </browser:pages>\n \n-    <!-- Adding view for portlet assignments -->\n-    <browser:view\n-      for="plone.portlets.interfaces.IPortletAssignmentMapping"\n+  <!-- Adding view for portlet assignments -->\n+  <browser:view\n       name="+"\n+      for="plone.portlets.interfaces.IPortletAssignmentMapping"\n       class=".adding.PortletAdding"\n       allowed_interface="plone.app.portlets.browser.interfaces.IPortletAdding"\n       permission="plone.app.portlets.ManagePortlets"\n       />\n \n-    <browser:view\n-      for="plone.app.portlets.interfaces.IUserPortletAssignmentMapping"\n+  <browser:view\n       name="+"\n+      for="plone.app.portlets.interfaces.IUserPortletAssignmentMapping"\n       class="plone.app.portlets.browser.adding.PortletAdding"\n       allowed_interface="plone.app.portlets.browser.interfaces.IPortletAdding"\n-      permission="plone.app.portlets.ManageOwnPortlets" />\n+      permission="plone.app.portlets.ManageOwnPortlets"\n+      />\n \n \n-    <class class=".adding.PortletAdding">\n-      <require\n+  <class class=".adding.PortletAdding">\n+    <require\n         permission="plone.app.portlets.ManagePortlets"\n-        interface=".interfaces.IPortletAdding" />\n-    </class>\n+        interface=".interfaces.IPortletAdding"\n+        />\n+  </class>\n \n-    <!-- Get pretty templates on our add and edit pages -->\n-    <configure package="Products.CMFPlone.browser">\n+  <!-- Get pretty templates on our add and edit pages -->\n+  <configure package="Products.CMFPlone.browser">\n \n-      <browser:page\n+    <browser:page\n         name="five_template"\n         for="plone.portlets.interfaces.IPortletAssignment"\n         template="templates/five_template.pt"\n         permission="zope2.View"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="five_template"\n         for="plone.portlets.interfaces.IPortletAssignmentMapping"\n         template="templates/five_template.pt"\n         permission="zope2.View"\n         />\n \n-      <browser:page\n+    <browser:page\n         name="five_template"\n         for="plone.app.portlets.browser.interfaces.IPortletAdding"\n         template="templates/five_template.pt"\n         permission="zope2.View"\n         />\n \n-    </configure>\n+  </configure>\n \n-    <browser:page\n-        for="*"\n-        name="render-portlet"\n-        class=".utils.PortletUtilities"\n-        attribute="render_portlet"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="render-portlet"\n+      for="*"\n+      class=".utils.PortletUtilities"\n+      attribute="render_portlet"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Portlets Footer -->\n-    <browser:viewlet\n-        name="plone.footer"\n-        for="*"\n-        manager="plone.app.layout.viewlets.interfaces.IPortalFooter"\n-        class=".viewlets.FooterViewlet"\n-        permission="zope.Public"\n-        />\n+  <!-- Portlets Footer -->\n+  <browser:viewlet\n+      name="plone.footer"\n+      for="*"\n+      manager="plone.app.layout.viewlets.interfaces.IPortalFooter"\n+      class=".viewlets.FooterViewlet"\n+      permission="zope.Public"\n+      />\n \n-    <!-- Manage portlets Fallback link -->\n-    <browser:viewlet\n-        name="plone.manage_portlets_fallback"\n-        for="plone.portlets.interfaces.ILocalPortletAssignable"\n-        view="plone.app.layout.globals.interfaces.IViewView"\n-        manager="plone.app.layout.viewlets.interfaces.IBelowContent"\n-        class=".viewlets.ManagePortletsFallbackViewlet"\n-        permission="zope2.View"\n-        />\n+  <!-- Manage portlets Fallback link -->\n+  <browser:viewlet\n+      name="plone.manage_portlets_fallback"\n+      for="plone.portlets.interfaces.ILocalPortletAssignable"\n+      view="plone.app.layout.globals.interfaces.IViewView"\n+      manager="plone.app.layout.viewlets.interfaces.IBelowContent"\n+      class=".viewlets.ManagePortletsFallbackViewlet"\n+      permission="zope2.View"\n+      />\n \n </configure>\ndiff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py\nindex 5e5842b2..11d1a978 100644\n--- a/plone/app/portlets/browser/editmanager.py\n+++ b/plone/app/portlets/browser/editmanager.py\n@@ -9,6 +9,7 @@\n from Acquisition import Explicit\n from Acquisition.interfaces import IAcquirer\n from five.customerize.zpt import TTWViewTemplateRenderer\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.memoize.view import memoize\n from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n from plone.portlets.constants import CONTEXT_CATEGORY\n@@ -20,7 +21,6 @@\n from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.portlets.utils import hashPortletInfo\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.PythonScripts.standard import url_quote\n@@ -93,7 +93,7 @@ def view_name(self):\n                     Unauthorized,\n                 ):\n                     logging.getLogger("plone.app.portlets.browser").debug(\n-                        "Cant get view name for TTV %s" % self.__parent__\n+                        "Can\'t get view name for TTW %s" % self.__parent__\n                     )\n         return name\n \n@@ -392,9 +392,10 @@ def global_portlets(self, category, prefix):\n                 mapping = self.manager.get(category, None)\n                 assignments = []\n                 if mapping is not None:\n-                    is_visible = lambda a: IPortletAssignmentSettings(a).get(\n-                        "visible", True\n-                    )\n+\n+                    def is_visible(a):\n+                        return IPortletAssignmentSettings(a).get("visible", True)\n+\n                     assignments.extend(\n                         [a for a in mapping.get(key, {}).values() if is_visible(a)]\n                     )\ndiff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py\nindex 3a104c73..bb053fe2 100644\n--- a/plone/app/portlets/browser/formhelper.py\n+++ b/plone/app/portlets/browser/formhelper.py\n@@ -30,7 +30,7 @@ class AddForm(AutoExtensibleForm, form.AddForm):\n \n     Sub-classes should define create() and set the form_fields class variable.\n \n-    Notice the suble difference between AddForm and NullAddform in that the\n+    Notice the subtle difference between AddForm and NullAddform in that the\n     create template method for AddForm takes as a parameter a dict \'data\':\n \n         def create(self, data):\ndiff --git a/plone/app/portlets/browser/interfaces.py b/plone/app/portlets/browser/interfaces.py\nindex 6ce29538..795beabe 100644\n--- a/plone/app/portlets/browser/interfaces.py\n+++ b/plone/app/portlets/browser/interfaces.py\n@@ -45,7 +45,7 @@ class IManageDashboardPortletsView(IManagePortletsView):\n \n \n class IManageColumnPortletsView(IManagePortletsView):\n-    """Base class for views that should display the edit fuctionality\n+    """Base class for views that should display the edit functionality\n     for column portlets.\n \n     This allows us to register a generic portlet manager renderer for this\ndiff --git a/plone/app/portlets/browser/manage.py b/plone/app/portlets/browser/manage.py\nindex 0face36a..1c970240 100644\n--- a/plone/app/portlets/browser/manage.py\n+++ b/plone/app/portlets/browser/manage.py\n@@ -120,7 +120,6 @@ def convert_legacy_portlets(self):\n \n @implementer(IManageDashboardPortletsView)\n class ManageDashboardPortlets(BrowserView):\n-\n     # IManagePortletsView implementation\n \n     @property\n@@ -212,7 +211,6 @@ def getAssignmentsForManager(self, manager):\n \n @implementer(IManageGroupPortletsView)\n class ManageGroupPortlets(BrowserView):\n-\n     # IManagePortletsView implementation\n \n     @property\ndiff --git a/plone/app/portlets/browser/templates/column.pt b/plone/app/portlets/browser/templates/column.pt\nindex 5f01c0d6..b3dd4828 100644\n--- a/plone/app/portlets/browser/templates/column.pt\n+++ b/plone/app/portlets/browser/templates/column.pt\n@@ -1,6 +1,9 @@\n <tal:block repeat="portlet options/portlets">\n-<div class="portletWrapper"\n-    tal:attributes="id string:portletwrapper-${portlet/hash};\n-                     data-portlethash portlet/hash"\n-     tal:content="structure python:view.safe_render(portlet[\'renderer\'])" />\n+  <div class="portletWrapper"\n+       tal:content="structure python:view.safe_render(portlet[\'renderer\'])"\n+       tal:attributes="\n+         id string:portletwrapper-${portlet/hash};\n+         data-portlethash portlet/hash;\n+       "\n+  ></div>\n </tal:block>\ndiff --git a/plone/app/portlets/browser/templates/dashboard-column.pt b/plone/app/portlets/browser/templates/dashboard-column.pt\nindex 0d59beba..1a5bde69 100644\n--- a/plone/app/portlets/browser/templates/dashboard-column.pt\n+++ b/plone/app/portlets/browser/templates/dashboard-column.pt\n@@ -1,5 +1,8 @@\n <tal:block repeat="portlet options/portlets">\n-<div tal:attributes="id string:portletwrapper-${portlet/hash};\n-                     data-portlethash portlet/hash"\n-     tal:content="structure python:view.safe_render(portlet[\'renderer\'])" />\n+  <div tal:content="structure python:view.safe_render(portlet[\'renderer\'])"\n+       tal:attributes="\n+         id string:portletwrapper-${portlet/hash};\n+         data-portlethash portlet/hash;\n+       "\n+  ></div>\n </tal:block>\ndiff --git a/plone/app/portlets/browser/templates/edit-manager-contextual.pt b/plone/app/portlets/browser/templates/edit-manager-contextual.pt\nindex 4e3ac302..085756f8 100644\n--- a/plone/app/portlets/browser/templates/edit-manager-contextual.pt\n+++ b/plone/app/portlets/browser/templates/edit-manager-contextual.pt\n@@ -1,69 +1,107 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n-<div class="portlets-manager pat-manage-portlets row"\n-     tal:attributes="id string:portletmanager-${view/normalized_manager_name};"\n-     i18n:domain="plone">\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n+  <div class="portlets-manager pat-manage-portlets row"\n+       tal:attributes="\n+         id string:portletmanager-${view/normalized_manager_name};\n+       "\n+       i18n:domain="plone"\n+  >\n \n-  <div class="container">\n-    <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form" />\n-  </div>\n+    <div class="container">\n+      <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form"></div>\n+    </div>\n \n-  <div metal:use-macro="context/@@manage-portlets-macros/macros/current-portlets-list" />\n+    <div metal:use-macro="context/@@manage-portlets-macros/macros/current-portlets-list"></div>\n \n-  <div class="container portletAssignments">\n+    <div class="container portletAssignments">\n \n-    <h5 i18n:translate="heading_un_block_portlets">\n+      <h5 i18n:translate="heading_un_block_portlets">\n         Block/unblock portlets\n-    </h5>\n-\n-    <form method="post" tal:attributes="action view/blacklist_status_action" class="portlets-settings">\n-\n-        <span tal:replace="structure context/@@authenticator/authenticator" />\n-        <input type="hidden" name="manager" tal:attributes="value view/manager_name" />\n-\n-        <div tal:define="status view/context_blacklist_status" class="mb-3 portlet-group">\n+      </h5>\n+\n+      <form class="portlets-settings"\n+            method="post"\n+            tal:attributes="\n+              action view/blacklist_status_action;\n+            "\n+      >\n+\n+        <span tal:replace="structure context/@@authenticator/authenticator"></span>\n+        <input name="manager"\n+               type="hidden"\n+               tal:attributes="\n+                 value view/manager_name;\n+               "\n+        />\n+\n+        <div class="mb-3 portlet-group"\n+             tal:define="\n+               status view/context_blacklist_status;\n+             "\n+        >\n \n           <div class="mb-3">\n \n             <label i18n:translate="label_portlets_parent_folders">Parent portlets:</label>\n \n-            <select name="context_status:int" size="1" class="form-select">\n+            <select class="form-select"\n+                    name="context_status:int"\n+                    size="1"\n+            >\n \n-                <option value="1"\n-                        tal:attributes="selected python:status == True and \'selected\' or None"\n-                        i18n:translate="portlets_value_block">\n+              <option value="1"\n+                      tal:attributes="\n+                        selected python:status == True and \'selected\' or None;\n+                      "\n+                      i18n:translate="portlets_value_block"\n+              >\n                     Block\n-                </option>\n+              </option>\n \n-                <option value="-1"\n-                        tal:attributes="selected python:(status == False or status == None) and \'selected\' or None"\n-                        i18n:translate="portlets_value_show">\n+              <option value="-1"\n+                      tal:attributes="\n+                        selected python:(status == False or status == None) and \'selected\' or None;\n+                      "\n+                      i18n:translate="portlets_value_show"\n+              >\n                     Do not block\n-                </option>\n+              </option>\n \n             </select>\n \n           </div>\n \n-          <tal:block define="portlets view/inherited_portlets;"\n-                    condition="portlets">\n+          <tal:block define="\n+                       portlets view/inherited_portlets;\n+                     "\n+                     condition="portlets"\n+          >\n \n-            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet list-group\' or \'managedPortlet inheritedPortlet list-group\'" tal:repeat="portlet portlets">\n+            <div tal:repeat="portlet portlets"\n+                 tal:attributes="\n+                   class python:status and \'managedPortlet inheritedPortlet blockedPortlet list-group\' or \'managedPortlet inheritedPortlet list-group\';\n+                 "\n+            >\n \n               <div class="list-group-item">\n \n-                <a tal:omit-tag="not:portlet/editview"\n-                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                  tal:content="portlet/title" />\n+                <a tal:content="portlet/title"\n+                   tal:omit-tag="not:portlet/editview"\n+                   tal:attributes="\n+                     href string:${portlet/editview}?referer=${view/url_quote_referer};\n+                   "\n+                ></a>\n \n                 <span class="portletBlockedMessage hiddenStructure"\n-                  tal:condition="status"\n-                  title="Blocked"\n-                  i18n:translate="label_portlet_blocked"\n-                  i18n:attributes="title title_portlet_blocked;">\n+                      title="Blocked"\n+                      tal:condition="status"\n+                      i18n:attributes="title title_portlet_blocked;"\n+                      i18n:translate="label_portlet_blocked"\n+                >\n                   (Blocked)\n                 </span>\n               </div>\n@@ -73,48 +111,74 @@\n \n         </div>\n \n-        <div tal:define="status view/group_blacklist_status" class="mb-3 portlet-group">\n+        <div class="mb-3 portlet-group"\n+             tal:define="\n+               status view/group_blacklist_status;\n+             "\n+        >\n \n           <label i18n:translate="label_portlets_group_portlets">Group portlets:</label>\n \n-          <select name="group_status:int" size="1" class="form-select">\n-\n-              <option value="0"\n-                      tal:attributes="selected python:status == None and \'selected\' or None"\n-                      i18n:translate="portlets_value_use_parent">\n+          <select class="form-select"\n+                  name="group_status:int"\n+                  size="1"\n+          >\n+\n+            <option value="0"\n+                    tal:attributes="\n+                      selected python:status == None and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_use_parent"\n+            >\n                   Use parent settings\n-              </option>\n-\n-              <option value="1"\n-                      tal:attributes="selected python:status == True and \'selected\' or None"\n-                      i18n:translate="portlets_value_block">\n+            </option>\n+\n+            <option value="1"\n+                    tal:attributes="\n+                      selected python:status == True and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_block"\n+            >\n                   Block\n-              </option>\n-\n-              <option value="-1"\n-                      tal:attributes="selected python:status == False and \'selected\' or None"\n-                      i18n:translate="portlets_value_show">\n+            </option>\n+\n+            <option value="-1"\n+                    tal:attributes="\n+                      selected python:status == False and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_show"\n+            >\n                   Do not block\n-              </option>\n+            </option>\n \n           </select>\n \n-          <tal:block define="portlets view/group_portlets;\n-                            status python:view.group_blacklist_status(check_parent=True)">\n+          <tal:block define="\n+                       portlets view/group_portlets;\n+                       status python:view.group_blacklist_status(check_parent=True);\n+                     ">\n \n-            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'" tal:repeat="portlet portlets">\n+            <div tal:repeat="portlet portlets"\n+                 tal:attributes="\n+                   class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\';\n+                 "\n+            >\n \n               <div class="portletHeader">\n \n-                <a tal:omit-tag="not:portlet/editview"\n-                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                  tal:content="portlet/title" />\n+                <a tal:content="portlet/title"\n+                   tal:omit-tag="not:portlet/editview"\n+                   tal:attributes="\n+                     href string:${portlet/editview}?referer=${view/url_quote_referer};\n+                   "\n+                ></a>\n \n                 <span class="portletBlockedMessage hiddenStructure"\n-                  tal:condition="status"\n-                  title="Blocked"\n-                  i18n:translate="label_portlet_blocked"\n-                  i18n:attributes="title title_portlet_blocked;">\n+                      title="Blocked"\n+                      tal:condition="status"\n+                      i18n:attributes="title title_portlet_blocked;"\n+                      i18n:translate="label_portlet_blocked"\n+                >\n                   (Blocked)\n                 </span>\n \n@@ -127,46 +191,71 @@\n         </div>\n \n \n-        <div tal:define="status view/content_type_blacklist_status" class="mb-3 portlet-group">\n+        <div class="mb-3 portlet-group"\n+             tal:define="\n+               status view/content_type_blacklist_status;\n+             "\n+        >\n \n           <label i18n:translate="label_portlets_content_type_portlets">Content type portlets:</label>\n \n-          <select name="content_type_status:int" size="1"  class="form-select">\n-\n-              <option value="0"\n-                      tal:attributes="selected python:status == None and \'selected\' or None"\n-                      i18n:translate="portlets_value_use_parent">\n+          <select class="form-select"\n+                  name="content_type_status:int"\n+                  size="1"\n+          >\n+\n+            <option value="0"\n+                    tal:attributes="\n+                      selected python:status == None and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_use_parent"\n+            >\n                   Use parent settings\n-              </option>\n-\n-              <option value="1"\n-                      tal:attributes="selected python:status == True and \'selected\' or None"\n-                      i18n:translate="portlets_value_block">\n+            </option>\n+\n+            <option value="1"\n+                    tal:attributes="\n+                      selected python:status == True and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_block"\n+            >\n                   Block\n-              </option>\n-\n-              <option value="-1"\n-                      tal:attributes="selected python:status == False and \'selected\' or None"\n-                      i18n:translate="portlets_value_show">\n+            </option>\n+\n+            <option value="-1"\n+                    tal:attributes="\n+                      selected python:status == False and \'selected\' or None;\n+                    "\n+                    i18n:translate="portlets_value_show"\n+            >\n                   Do not block\n-              </option>\n+            </option>\n           </select>\n \n-          <tal:block define="portlets view/content_type_portlets;\n-                    status python:view.content_type_blacklist_status(check_parent=True)">\n+          <tal:block define="\n+                       portlets view/content_type_portlets;\n+                       status python:view.content_type_blacklist_status(check_parent=True);\n+                     ">\n \n-            <div tal:attributes="class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\'"\n-              tal:repeat="portlet portlets">\n+            <div tal:repeat="portlet portlets"\n+                 tal:attributes="\n+                   class python:status and \'managedPortlet inheritedPortlet blockedPortlet\' or \'managedPortlet inheritedPortlet\';\n+                 "\n+            >\n               <div class="portletHeader">\n-                <a tal:omit-tag="not:portlet/editview"\n-                  tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                  tal:content="portlet/title" />\n+                <a tal:content="portlet/title"\n+                   tal:omit-tag="not:portlet/editview"\n+                   tal:attributes="\n+                     href string:${portlet/editview}?referer=${view/url_quote_referer};\n+                   "\n+                ></a>\n \n                 <span class="portletBlockedMessage hiddenStructure"\n-                  tal:condition="status"\n-                  title="Blocked"\n-                  i18n:translate="label_portlet_blocked"\n-                  i18n:attributes="title title_portlet_blocked;">\n+                      title="Blocked"\n+                      tal:condition="status"\n+                      i18n:attributes="title title_portlet_blocked;"\n+                      i18n:translate="label_portlet_blocked"\n+                >\n                   (Blocked)\n                 </span>\n \n@@ -177,17 +266,18 @@\n         </div>\n \n         <noscript>\n-        <div class="formControls">\n+          <div class="formControls">\n             <input class="btn btn-primary"\n-                  type="submit"\n-                  value="Save settings"\n-                  i18n:attributes="value label_save_settings"/>\n-        </div>\n+                   type="submit"\n+                   value="Save settings"\n+                   i18n:attributes="value label_save_settings"\n+            />\n+          </div>\n         </noscript>\n \n       </form>\n \n-  </div>\n+    </div>\n \n-</div>\n-</html>\n\\ No newline at end of file\n+  </div>\n+</html>\ndiff --git a/plone/app/portlets/browser/templates/edit-manager-macros.pt b/plone/app/portlets/browser/templates/edit-manager-macros.pt\nindex a4d0ac1a..3abd7d6d 100644\n--- a/plone/app/portlets/browser/templates/edit-manager-macros.pt\n+++ b/plone/app/portlets/browser/templates/edit-manager-macros.pt\n@@ -1,129 +1,314 @@\n-<div metal:define-macro="portlet-add-form" class="section mb-4" i18n:domain="plone">\n+<div class="section mb-4"\n+     metal:define-macro="portlet-add-form"\n+     i18n:domain="plone"\n+>\n \n-    <form method="post" action="#"\n-          tal:define="portlets view/addable_portlets"\n-          tal:condition="portlets"\n-          tal:attributes="action view/context_url">\n+  <form action="#"\n+        method="post"\n+        tal:define="\n+          portlets view/addable_portlets;\n+        "\n+        tal:condition="portlets"\n+        tal:attributes="\n+          action view/context_url;\n+        "\n+  >\n \n-        <input type="hidden" name="referer" tal:attributes="value view/referer" />\n+    <input name="referer"\n+           type="hidden"\n+           tal:attributes="\n+             value view/referer;\n+           "\n+    />\n \n-        <label class="hiddenStructure"\n-               i18n:translate="label_add_portlet">\n+    <label class="hiddenStructure"\n+           i18n:translate="label_add_portlet"\n+    >\n             Add portlet\n-        </label>\n+    </label>\n \n-        <select name=":action" class="add-portlet form-select"\n-                tal:attributes="data-context-url python: view.context_url()">\n-            <option tal:attributes="value python:request[\'ACTUAL_URL\'].replace(view.context_url(), \'\')"\n-                    i18n:translate="label_add_portlet_ellipsis">\n+    <select class="add-portlet form-select"\n+            name=":action"\n+            tal:attributes="\n+              data-context-url python: view.context_url();\n+            "\n+    >\n+      <option tal:attributes="\n+                value python:request[\'ACTUAL_URL\'].replace(view.context_url(), \'\');\n+              "\n+              i18n:translate="label_add_portlet_ellipsis"\n+      >\n                 Add portlet&hellip;\n-            </option>\n-            <tal:options repeat="portlet portlets">\n-                <option tal:attributes="value string:${portlet/addview}"\n-                        tal:content="portlet/title"\n-                        i18n:translate="" />\n-            </tal:options>\n-\n-        </select>\n-\n-        <noscript>\n-            <input class="btn btn-secondary"\n-                   type="submit"\n-                   value="Add portlet"\n-                   i18n:attributes="value label_add_portlet;"/>\n-        </noscript>\n-\n-    </form>\n+      </option>\n+      <tal:options repeat="portlet portlets">\n+        <option tal:content="portlet/title"\n+                tal:attributes="\n+                  value string:${portlet/addview};\n+                "\n+                i18n:translate=""\n+        ></option>\n+      </tal:options>\n+\n+    </select>\n+\n+    <noscript>\n+      <input class="btn btn-secondary"\n+             type="submit"\n+             value="Add portlet"\n+             i18n:attributes="value label_add_portlet;"\n+      />\n+    </noscript>\n+\n+  </form>\n </div>\n \n-<div metal:define-macro="current-portlets-list" class="portletAssignment"\n-    i18n:domain="plone"\n-    tal:define="portlets view/portlets">\n+<div class="portletAssignment"\n+     metal:define-macro="current-portlets-list"\n+     tal:define="\n+       portlets view/portlets;\n+     "\n+     i18n:domain="plone"\n+>\n \n-    <h5 i18n:translate="heading_portlets_assigned_here" tal:condition="portlets">\n+  <h5 tal:condition="portlets"\n+      i18n:translate="heading_portlets_assigned_here"\n+  >\n         Portlets assigned here\n-    </h5>\n+  </h5>\n \n-    <tal:block repeat="portlet portlets">\n-    <div\n-        tal:define="\n-            hiddenPortletClass python:not portlet[\'visible\'] and \'blockedPortlet\' or \'\';\n-            authenticator context/@@authenticator/authenticator"\n-        tal:attributes="\n-            class string:managedPortlet card mb-3 ${hiddenPortletClass};\n-            data-portlethash portlet/hash;\n-            data-viewname view/view_name;">\n-\n-        <div class="card-header d-flex align-items-center justify-content-between">\n-\n-            <a tal:omit-tag="not:portlet/editview"\n-                tal:attributes="href string:${portlet/editview}?referer=${view/url_quote_referer}"\n-                tal:content="portlet/title"></a>\n-        </div>\n-\n-        <div class="card-body managedPortletActions">\n-\n-            <form class="portlet-action up" method="POST"\n-                tal:attributes="action portlet/up_url"\n-                tal:condition="not:repeat/portlet/start">\n-                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                <input type="hidden" name="key" tal:attributes="value view/key" />\n-                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                <span tal:replace="structure authenticator"/>\n-                <button class="btn btn-outline-secondary btn-sm" title="Move up" i18n:attributes="title" type="submit"\n-                    tal:attributes="name string:${portlet/name}-up">&#9650;</button>\n-            </form>\n-\n-            <form class="portlet-action down" method="POST"\n-                tal:attributes="action portlet/down_url"\n-                tal:condition="not:repeat/portlet/end">\n-                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                <input type="hidden" name="key" tal:attributes="value view/key" />\n-                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                <span tal:replace="structure authenticator"/>\n-                <button class="btn btn-outline-secondary btn-sm" title="Move down" i18n:attributes="title" type="submit"\n-                    tal:attributes="name string:${portlet/name}-down">&#9660;</button>\n-            </form>\n-\n-            <form class="portlet-action" method="POST"\n-                tal:attributes="action portlet/show_url"\n-                tal:condition="not: portlet/visible">\n-                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                <input type="hidden" name="key" tal:attributes="value view/key" />\n-                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                <span tal:replace="structure authenticator"/>\n-                <button class="btn btn-outline-secondary btn-sm" type="submit" i18n:translate="label_show_item"\n-                    tal:attributes="name string:${portlet/name}-show">Show</button>\n-            </form>\n-\n-            <form class="portlet-action" method="POST"\n-                tal:attributes="action portlet/hide_url"\n-                tal:condition="portlet/visible">\n-                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                <input type="hidden" name="key" tal:attributes="value view/key" />\n-                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                <span tal:replace="structure authenticator"/>\n-                <button class="btn btn-outline-secondary btn-sm" type="submit" i18n:translate="label_hide_item"\n-                    tal:attributes="name string:${portlet/name}-hide">Hide</button>\n-            </form>\n-\n-            <form class="portlet-action delete" method="POST"\n-                tal:attributes="action portlet/delete_url">\n-                <input type="hidden" name="referer" tal:attributes="value view/url_quote_referer" />\n-                <input type="hidden" name="key" tal:attributes="value view/key" />\n-                <input type="hidden" name="name" tal:attributes="value portlet/name" />\n-                <input type="hidden" name="viewname" tal:attributes="value view/view_name" />\n-                <span tal:replace="structure authenticator"/>\n-                <button class="btn btn-outline-secondary btn-sm" i18n:attributes="title" title="Remove" type="submit"\n-                    tal:attributes="name string:${portlet/name}-remove">&times;</button>\n-            </form>\n-\n-        </div>\n+  <tal:block repeat="portlet portlets">\n+    <div tal:define="\n+           hiddenPortletClass python:not portlet[\'visible\'] and \'blockedPortlet\' or \'\';\n+           authenticator context/@@authenticator/authenticator;\n+         "\n+         tal:attributes="\n+           class string:managedPortlet card mb-3 ${hiddenPortletClass};\n+           data-portlethash portlet/hash;\n+           data-viewname view/view_name;\n+         "\n+    >\n+\n+      <div class="card-header d-flex align-items-center justify-content-between">\n+\n+        <a tal:content="portlet/title"\n+           tal:omit-tag="not:portlet/editview"\n+           tal:attributes="\n+             href string:${portlet/editview}?referer=${view/url_quote_referer};\n+           "\n+        ></a>\n+      </div>\n+\n+      <div class="card-body managedPortletActions">\n+\n+        <form class="portlet-action up"\n+              method="POST"\n+              tal:condition="not:repeat/portlet/start"\n+              tal:attributes="\n+                action portlet/up_url;\n+              "\n+        >\n+          <input name="referer"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/url_quote_referer;\n+                 "\n+          />\n+          <input name="key"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/key;\n+                 "\n+          />\n+          <input name="name"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value portlet/name;\n+                 "\n+          />\n+          <input name="viewname"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/view_name;\n+                 "\n+          />\n+          <span tal:replace="structure authenticator"></span>\n+          <button class="btn btn-outline-secondary btn-sm"\n+                  title="Move up"\n+                  type="submit"\n+                  tal:attributes="\n+                    name string:${portlet/name}-up;\n+                  "\n+                  i18n:attributes="title"\n+          >&#9650;</button>\n+        </form>\n+\n+        <form class="portlet-action down"\n+              method="POST"\n+              tal:condition="not:repeat/portlet/end"\n+              tal:attributes="\n+                action portlet/down_url;\n+              "\n+        >\n+          <input name="referer"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/url_quote_referer;\n+                 "\n+          />\n+          <input name="key"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/key;\n+                 "\n+          />\n+          <input name="name"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value portlet/name;\n+                 "\n+          />\n+          <input name="viewname"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/view_name;\n+                 "\n+          />\n+          <span tal:replace="structure authenticator"></span>\n+          <button class="btn btn-outline-secondary btn-sm"\n+                  title="Move down"\n+                  type="submit"\n+                  tal:attributes="\n+                    name string:${portlet/name}-down;\n+                  "\n+                  i18n:attributes="title"\n+          >&#9660;</button>\n+        </form>\n+\n+        <form class="portlet-action"\n+              method="POST"\n+              tal:condition="not: portlet/visible"\n+              tal:attributes="\n+                action portlet/show_url;\n+              "\n+        >\n+          <input name="referer"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/url_quote_referer;\n+                 "\n+          />\n+          <input name="key"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/key;\n+                 "\n+          />\n+          <input name="name"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value portlet/name;\n+                 "\n+          />\n+          <input name="viewname"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/view_name;\n+                 "\n+          />\n+          <span tal:replace="structure authenticator"></span>\n+          <button class="btn btn-outline-secondary btn-sm"\n+                  type="submit"\n+                  tal:attributes="\n+                    name string:${portlet/name}-show;\n+                  "\n+                  i18n:translate="label_show_item"\n+          >Show</button>\n+        </form>\n+\n+        <form class="portlet-action"\n+              method="POST"\n+              tal:condition="portlet/visible"\n+              tal:attributes="\n+                action portlet/hide_url;\n+              "\n+        >\n+          <input name="referer"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/url_quote_referer;\n+                 "\n+          />\n+          <input name="key"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/key;\n+                 "\n+          />\n+          <input name="name"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value portlet/name;\n+                 "\n+          />\n+          <input name="viewname"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/view_name;\n+                 "\n+          />\n+          <span tal:replace="structure authenticator"></span>\n+          <button class="btn btn-outline-secondary btn-sm"\n+                  type="submit"\n+                  tal:attributes="\n+                    name string:${portlet/name}-hide;\n+                  "\n+                  i18n:translate="label_hide_item"\n+          >Hide</button>\n+        </form>\n+\n+        <form class="portlet-action delete"\n+              method="POST"\n+              tal:attributes="\n+                action portlet/delete_url;\n+              "\n+        >\n+          <input name="referer"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/url_quote_referer;\n+                 "\n+          />\n+          <input name="key"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/key;\n+                 "\n+          />\n+          <input name="name"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value portlet/name;\n+                 "\n+          />\n+          <input name="viewname"\n+                 type="hidden"\n+                 tal:attributes="\n+                   value view/view_name;\n+                 "\n+          />\n+          <span tal:replace="structure authenticator"></span>\n+          <button class="btn btn-outline-secondary btn-sm"\n+                  title="Remove"\n+                  type="submit"\n+                  tal:attributes="\n+                    name string:${portlet/name}-remove;\n+                  "\n+                  i18n:attributes="title"\n+          >&times;</button>\n+        </form>\n+\n+      </div>\n \n     </div>\n-    </tal:block>\n+  </tal:block>\n </div>\ndiff --git a/plone/app/portlets/browser/templates/edit-manager.pt b/plone/app/portlets/browser/templates/edit-manager.pt\nindex 55421e75..ab741186 100644\n--- a/plone/app/portlets/browser/templates/edit-manager.pt\n+++ b/plone/app/portlets/browser/templates/edit-manager.pt\n@@ -1,14 +1,18 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n-<div class="portlets-manager pat-manage-portlets"\n-     tal:attributes="id string:portletmanager-${view/normalized_manager_name};">\n+      tal:omit-tag=""\n+>\n+  <div class="portlets-manager pat-manage-portlets"\n+       tal:attributes="\n+         id string:portletmanager-${view/normalized_manager_name};\n+       "\n+  >\n \n-  <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form" />\n+    <div metal:use-macro="context/@@manage-portlets-macros/macros/portlet-add-form"></div>\n \n-  <div metal:use-macro="context/@@manage-portlets-macros/macros/current-portlets-list" />\n+    <div metal:use-macro="context/@@manage-portlets-macros/macros/current-portlets-list"></div>\n \n-</div>\n+  </div>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/error_message.pt b/plone/app/portlets/browser/templates/error_message.pt\nindex 536b5f59..4b964967 100644\n--- a/plone/app/portlets/browser/templates/error_message.pt\n+++ b/plone/app/portlets/browser/templates/error_message.pt\n@@ -1,17 +1,20 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n-<section class="portlet portletError"\n-    i18n:domain="plone">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n+  <section class="portlet portletError"\n+           i18n:domain="plone"\n+  >\n \n     <header class="portletHeader">\n-        <a href="#"\n-           class="tile"\n-           i18n:translate="box_error">Error</a>\n+      <a class="tile"\n+         href="#"\n+         i18n:translate="box_error"\n+      >Error</a>\n     </header>\n     <section class="portletContent">\n-        <p i18n:translate="text_error_rendering_portlet">There was an error while rendering the portlet.</p>\n+      <p i18n:translate="text_error_rendering_portlet">There was an error while rendering the portlet.</p>\n     </section>\n-</section>\n+  </section>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/footer.pt b/plone/app/portlets/browser/templates/footer.pt\nindex df16ba9d..51f14d6c 100644\n--- a/plone/app/portlets/browser/templates/footer.pt\n+++ b/plone/app/portlets/browser/templates/footer.pt\n@@ -1,5 +1,7 @@\n <div class="row">\n-\t<div class="col-xs-12">\n-\t\t<div tal:on-error="nothing" tal:replace="structure view/render_footer_portlets" />\n-\t</div>\n+  <div class="col-xs-12">\n+    <div tal:replace="structure view/render_footer_portlets"\n+         tal:on-error="nothing"\n+    ></div>\n+  </div>\n </div>\ndiff --git a/plone/app/portlets/browser/templates/manage-content-type.pt b/plone/app/portlets/browser/templates/manage-content-type.pt\nindex b2d0f1a5..1b149b69 100644\n--- a/plone/app/portlets/browser/templates/manage-content-type.pt\n+++ b/plone/app/portlets/browser/templates/manage-content-type.pt\n@@ -1,41 +1,51 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n-<body>\n-<metal:main fill-slot="main">\n+  <body>\n+    <metal:main fill-slot="main">\n \n-  <h1 class="documentFirstHeading"\n-      i18n:translate="title_manage_contenttype_portlets">\n-      <img i18n:name="contenttype_icon"\n-           tal:define="icon view/portal_type_icon"\n-           tal:replace="structure icon/html_tag" />\n+      <h1 class="documentFirstHeading"\n+          i18n:translate="title_manage_contenttype_portlets"\n+      >\n+        <img tal:define="\n+               icon view/portal_type_icon;\n+             "\n+             tal:replace="structure icon/html_tag"\n+             i18n:name="contenttype_icon"\n+        />\n       Manage content type portlets for\n-      <span i18n:name="contenttype_name" tal:content="view/portal_type">content type</span>\n-  </h1>\n+        <span tal:content="view/portal_type"\n+              i18n:name="contenttype_name"\n+        >content type</span>\n+      </h1>\n \n-  <div id="content-core">\n-      <a href=""\n-           class="link-parent"\n-           tal:attributes="href string:${context/absolute_url}/@@content-controlpanel?type_id=${request/key}"\n-           i18n:translate="return_to_view">\n+      <div id="content-core">\n+        <a class="link-parent"\n+           href=""\n+           tal:attributes="\n+             href string:${context/absolute_url}/@@content-controlpanel?type_id=${request/key};\n+           "\n+           i18n:translate="return_to_view"\n+        >\n         Return\n-      </a>\n+        </a>\n \n-      <p i18n:translate="description_manage_contenttype_portlets">\n+        <p i18n:translate="description_manage_contenttype_portlets">\n         The left and right portlet slots will now display only those portlets\n         assigned to this content type. Use the up, down, delete and edit links\n         to manage user portlets. Use the drop-down list to add new portlets.\n-      </p>\n+        </p>\n \n-      <p i18n:translate="description_contenttype_portlets_below">\n+        <p i18n:translate="description_contenttype_portlets_below">\n         Note that content type portlets are normally rendered below context portlets.\n-      </p>\n-  </div>\n+        </p>\n+      </div>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/manage-contextual.pt b/plone/app/portlets/browser/templates/manage-contextual.pt\nindex 1cf4829f..b9e5832a 100644\n--- a/plone/app/portlets/browser/templates/manage-contextual.pt\n+++ b/plone/app/portlets/browser/templates/manage-contextual.pt\n@@ -1,94 +1,121 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n-<body>\n-<metal:main fill-slot="main" tal:define="plone_view context/@@plone">\n+  <body>\n+    <metal:main fill-slot="main"\n+                tal:define="\n+                  plone_view context/@@plone;\n+                "\n+    >\n \n-  <header>\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="title_manage_contextual_portlets">\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate="title_manage_contextual_portlets"\n+        >\n         Manage portlets for\n-        <q i18n:name="context_title" tal:content="context/Title">title</q>\n-    </h1>\n-    \n-    \n-    <a href=""\n-        class="link-parent d-inline-block mb-3"\n-        tal:attributes="href string:${context/absolute_url}"\n-        i18n:translate="return_to_view">\n+          <q tal:content="context/Title"\n+             i18n:name="context_title"\n+          >title</q>\n+        </h1>\n+\n+\n+        <a class="link-parent d-inline-block mb-3"\n+           href=""\n+           tal:attributes="\n+             href string:${context/absolute_url};\n+           "\n+           i18n:translate="return_to_view"\n+        >\n       Return\n-    </a>\n+        </a>\n \n-    <tal:block tal:define="is_portal_root context/@@plone_context_state/is_portal_root;"\n-            tal:condition="not:is_portal_root">\n-    <a class="link-parent mb-3 ms-3" tal:condition="plone_view/getParentObject|nothing"\n-    tal:attributes="href python:plone_view.getParentObject().absolute_url()+\'/@@manage-portlets\'"\n-    i18n:translate="">\n+        <tal:block tal:define="\n+                     is_portal_root context/@@plone_context_state/is_portal_root;\n+                   "\n+                   tal:condition="not:is_portal_root"\n+        >\n+          <a class="link-parent mb-3 ms-3"\n+             tal:condition="plone_view/getParentObject|nothing"\n+             tal:attributes="\n+               href python:plone_view.getParentObject().absolute_url()+\'/@@manage-portlets\';\n+             "\n+             i18n:translate=""\n+          >\n     Go to parent folder\n-    </a>\n-    </tal:block>\n-    \n-\n-    <div class="alert alert-info"\n-        role="status"\n-        tal:condition="plone_view/isDefaultPageInFolder|nothing">\n-      <strong i18n:translate="">\n+          </a>\n+        </tal:block>\n+\n+\n+        <div class="alert alert-info"\n+             role="status"\n+             tal:condition="plone_view/isDefaultPageInFolder|nothing"\n+        >\n+          <strong i18n:translate="">\n           Info\n-      </strong>\n-      <span tal:omit-tag=""\n-          i18n:translate="label_manage_portlets_default_view_container">\n+          </strong>\n+          <span tal:omit-tag=""\n+                i18n:translate="label_manage_portlets_default_view_container"\n+          >\n           You are managing the portlets of the default view of a container. If\n           you wanted to manage the portlets of the container itself,\n-          <a href=""\n-              i18n:name="go_here"\n-              i18n:translate="label_manage_portlets_default_view_container_go_here"\n-              tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@manage-portlets">go here</a>.\n-      </span>\n-    </div>\n-  </header>\n+            <a href=""\n+               tal:attributes="\n+                 href string:${context/aq_inner/aq_parent/absolute_url}/@@manage-portlets;\n+               "\n+               i18n:name="go_here"\n+               i18n:translate="label_manage_portlets_default_view_container_go_here"\n+            >go here</a>.\n+          </span>\n+        </div>\n+      </header>\n \n-  <div id="content-core">\n+      <div id="content-core">\n \n-      <p i18n:translate="description_manage_contextual_portlets">\n+        <p i18n:translate="description_manage_contextual_portlets">\n         The portlet columns will first display portlets\n         explicitly assigned in this context. Use the buttons on each portlet\n         to move them up or down, delete or edit them. To add a new portlet,\n         use the drop-down list at the top of the column.\n-      </p>\n+        </p>\n \n-      <p i18n:translate="description_portlets_block_unblock">\n+        <p i18n:translate="description_portlets_block_unblock">\n           If you wish to block or unblock certain categories of portlets, you can\n           do so using the drop-down boxes. Portlets that are included by these categories\n           are shown below the selection box.\n-      </p>\n+        </p>\n \n-      <div tal:condition="view/has_legacy_portlets">\n+        <div tal:condition="view/has_legacy_portlets">\n \n-        <h2 i18n:translate="title_legacy_portlets">Legacy portlets</h2>\n+          <h2 i18n:translate="title_legacy_portlets">Legacy portlets</h2>\n \n-        <p i18n:translate="action_convert_legacy_portlets">\n+          <p i18n:translate="action_convert_legacy_portlets">\n           There are legacy portlets defined here. Click the button to\n           convert them to new-style portlets.\n-        </p>\n+          </p>\n \n-        <form method="post"\n-              tal:attributes="action string:${context/absolute_url}/@@convert-legacy-portlets">\n+          <form method="post"\n+                tal:attributes="\n+                  action string:${context/absolute_url}/@@convert-legacy-portlets;\n+                "\n+          >\n \n-            <input type="submit"\n-                   class="btn btn-primary"\n+            <input class="btn btn-primary"\n+                   name="convert"\n+                   type="submit"\n                    value="Convert portlets"\n                    i18n:attributes="value label_convert_portlets"\n-                   name="convert" />\n+            />\n \n-        </form>\n+          </form>\n \n+        </div>\n       </div>\n-  </div>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/manage-dashboard.pt b/plone/app/portlets/browser/templates/manage-dashboard.pt\nindex 5c96ccde..cc2af212 100644\n--- a/plone/app/portlets/browser/templates/manage-dashboard.pt\n+++ b/plone/app/portlets/browser/templates/manage-dashboard.pt\n@@ -1,27 +1,29 @@\n-<html\n-    xmlns="http://www.w3.org/1999/xhtml"\n-    xmlns:tal="http://xml.zope.org/namespaces/tal"\n-    xmlns:metal="http://xml.zope.org/namespaces/metal"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    xml:lang="en"\n-    lang="en"\n-    metal:use-macro="context/main_template/macros/master"\n-    i18n:domain="plone">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n+      metal:use-macro="context/main_template/macros/master"\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n   <head>\n-    <metal:block\n-        fill-slot="top_slot"\n-        tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+    <metal:block fill-slot="top_slot"\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n   </head>\n \n   <body>\n \n     <metal:b fill-slot="content-title">\n-      <h1\n-          class="documentFirstHeading"\n-          i18n:translate="title_edit_dashboard">\n+      <h1 class="documentFirstHeading"\n+          i18n:translate="title_edit_dashboard"\n+      >\n         Edit your dashboard\n       </h1>\n     </metal:b>\n@@ -32,24 +34,32 @@\n \n         <div class="autotabs">\n           <nav class="autotoc-nav nav nav-tabs mb-3">\n-              <a class="nav-link"\n-                 href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n-                 i18n:translate="label_dashboard">Dashboard</a>\n-              <a class="active nav-link"\n-                 href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n-                 i18n:translate="label_edit">Edit</a>\n+            <a class="nav-link"\n+               href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n+               i18n:translate="label_dashboard"\n+            >Dashboard</a>\n+            <a class="active nav-link"\n+               href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n+               i18n:translate="label_edit"\n+            >Edit</a>\n           </nav>\n \n-          <div id="dashboard"\n-              class="row row-cols-1 row-cols-md-2 gx-5 gy-5">\n-            <div id="dashboard-portlets1" class=""\n-              tal:content="structure provider:plone.dashboard1" />\n+          <div class="row row-cols-1 row-cols-md-2 gx-5 gy-5"\n+               id="dashboard"\n+          >\n+            <div class=""\n+                 id="dashboard-portlets1"\n+                 tal:content="structure provider:plone.dashboard1"\n+            ></div>\n             <div id="dashboard-portlets2"\n-              tal:content="structure provider:plone.dashboard2" />\n+                 tal:content="structure provider:plone.dashboard2"\n+            ></div>\n             <div id="dashboard-portlets3"\n-              tal:content="structure provider:plone.dashboard3" />\n+                 tal:content="structure provider:plone.dashboard3"\n+            ></div>\n             <div id="dashboard-portlets4"\n-              tal:content="structure provider:plone.dashboard4" />\n+                 tal:content="structure provider:plone.dashboard4"\n+            ></div>\n           </div>\n         </div>\n \ndiff --git a/plone/app/portlets/browser/templates/manage-group-dashboard.pt b/plone/app/portlets/browser/templates/manage-group-dashboard.pt\nindex e99baf91..f080fd73 100644\n--- a/plone/app/portlets/browser/templates/manage-group-dashboard.pt\n+++ b/plone/app/portlets/browser/templates/manage-group-dashboard.pt\n@@ -1,59 +1,86 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      xml:lang="en" lang="en"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<head>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-             tal:define="dummy python:request.set(\'disable_border\',1)" />\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                 "\n+    />\n \n-</head>\n+  </head>\n \n-<body>\n+  <body>\n \n-<metal:b fill-slot="prefs_configlet_main">\n+    <metal:b fill-slot="prefs_configlet_main">\n \n-    <header>\n-      <h1 class="documentFirstHeading" i18n:translate="">Group: <span i18n:name="groupname" tal:content="view/group" tal:omit-tag=""/></h1>\n-    </header>\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate=""\n+        >Group:\n+          <span tal:content="view/group"\n+                tal:omit-tag=""\n+                i18n:name="groupname"\n+          ></span></h1>\n+      </header>\n \n-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+      <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n         Portal status message\n-    </div>\n-\n-    <div id="content-core" tal:define="token context/@@authenticator/token">\n-      <div class="autotabs">\n-        <nav class="autotoc-nav nav nav-tabs mb-3">\n-          <a class="nav-link" href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n-             i18n:translate="label_group_members">Group Members</a>\n-          <a class="nav-link" href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n-             i18n:translate="label_group_properties">Group Properties</a>\n-          <a class="nav-link" href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n-             i18n:translate="label_group_portlets">Group Portlets</a>\n-          <a class="active nav-link"\n-             href="${portal_url}/@@manage-group-dashboard?key=${request/key}&_authenticator=${token}"\n-             i18n:translate="label_group_dashboard">Group Dashboard</a>\n-        </nav>\n-\n-        <div id="dashboard"\n-            class="row row-cols-1 row-cols-md-2 gx-5 gy-5">\n+      </div>\n+\n+      <div id="content-core"\n+           tal:define="\n+             token context/@@authenticator/token;\n+           "\n+      >\n+        <div class="autotabs">\n+          <nav class="autotoc-nav nav nav-tabs mb-3">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n+               i18n:translate="label_group_members"\n+            >Group Members</a>\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n+               i18n:translate="label_group_properties"\n+            >Group Properties</a>\n+            <a class="nav-link"\n+               href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n+               i18n:translate="label_group_portlets"\n+            >Group Portlets</a>\n+            <a class="active nav-link"\n+               href="${portal_url}/@@manage-group-dashboard?key=${request/key}&_authenticator=${token}"\n+               i18n:translate="label_group_dashboard"\n+            >Group Dashboard</a>\n+          </nav>\n+\n+          <div class="row row-cols-1 row-cols-md-2 gx-5 gy-5"\n+               id="dashboard"\n+          >\n             <div id="dashboard-portlets1"\n-              tal:content="structure provider:plone.dashboard1" />\n+                 tal:content="structure provider:plone.dashboard1"\n+            ></div>\n             <div id="dashboard-portlets2"\n-              tal:content="structure provider:plone.dashboard2" />\n+                 tal:content="structure provider:plone.dashboard2"\n+            ></div>\n             <div id="dashboard-portlets3"\n-              tal:content="structure provider:plone.dashboard3" />\n+                 tal:content="structure provider:plone.dashboard3"\n+            ></div>\n             <div id="dashboard-portlets4"\n-              tal:content="structure provider:plone.dashboard4" />\n+                 tal:content="structure provider:plone.dashboard4"\n+            ></div>\n+          </div>\n+          <div class="visualClear"><!-- --></div>\n         </div>\n-        <div class="visualClear"><!-- --></div>\n       </div>\n-    </div>\n \n-</metal:b>\n+    </metal:b>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/manage-group.pt b/plone/app/portlets/browser/templates/manage-group.pt\nindex 5d5c7c3c..edddf21f 100644\n--- a/plone/app/portlets/browser/templates/manage-group.pt\n+++ b/plone/app/portlets/browser/templates/manage-group.pt\n@@ -1,58 +1,82 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      xml:lang="en" lang="en"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n       metal:use-macro="here/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<head>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-             tal:define="dummy python:request.set(\'disable_border\',1)" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n \n-<metal:b fill-slot="content-title">\n-  <a href=""\n-       class="link-parent"\n-       tal:attributes="href string:$portal_url/@@usergroup-groupprefs"\n-       i18n:translate="label_up_to_groups_overview">\n+    <metal:b fill-slot="content-title">\n+      <a class="link-parent"\n+         href=""\n+         tal:attributes="\n+           href string:$portal_url/@@usergroup-groupprefs;\n+         "\n+         i18n:translate="label_up_to_groups_overview"\n+      >\n     Up to Groups Overview\n-  </a>\n-\n-  <h1 class="documentFirstHeading" i18n:translate="">Group: <span i18n:name="groupname" tal:content="view/group" tal:omit-tag=""/></h1>\n-</metal:b>\n-\n-<metal:b fill-slot="content-core">\n-  <metal:b metal:define-macro="props" tal:omit-tag="">\n-\n-    <div class="autotabs" tal:define="token context/@@authenticator/token">\n-      <nav class="autotoc-nav">\n-        <a href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n-           i18n:translate="label_group_members">Group Members</a>\n-        <a href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n-           i18n:translate="label_group_properties">Group Properties</a>\n-        <a class="active"\n-           href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n-           i18n:translate="label_group_portlets">Group Portlets</a>\n-        <a href="${portal_url}/@@manage-group-dashboard?key=${request/key}&_authenticator=${token}"\n-           i18n:translate="label_group_dashboard">Group Dashboard</a>\n-      </nav>\n-\n-      <p i18n:translate="description_manage_group_portlets">\n+      </a>\n+\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >Group:\n+        <span tal:content="view/group"\n+              tal:omit-tag=""\n+              i18n:name="groupname"\n+        ></span></h1>\n+    </metal:b>\n+\n+    <metal:b fill-slot="content-core">\n+      <metal:b metal:define-macro="props"\n+               tal:omit-tag=""\n+      >\n+\n+        <div class="autotabs"\n+             tal:define="\n+               token context/@@authenticator/token;\n+             "\n+        >\n+          <nav class="autotoc-nav">\n+            <a href="${portal_url}/@@usergroup-groupmembership?groupname=${request/key}"\n+               i18n:translate="label_group_members"\n+            >Group Members</a>\n+            <a href="${portal_url}/@@usergroup-groupdetails?groupname=${request/key}"\n+               i18n:translate="label_group_properties"\n+            >Group Properties</a>\n+            <a class="active"\n+               href="${portal_url}/@@manage-group-portlets?key=${request/key}&_authenticator=${token}"\n+               i18n:translate="label_group_portlets"\n+            >Group Portlets</a>\n+            <a href="${portal_url}/@@manage-group-dashboard?key=${request/key}&_authenticator=${token}"\n+               i18n:translate="label_group_dashboard"\n+            >Group Dashboard</a>\n+          </nav>\n+\n+          <p i18n:translate="description_manage_group_portlets">\n         The left and right portlet slots will now display only those portlets\n         assigned to this group. Use the up, down, delete and edit links\n         to manage user portlets. Use the drop-down list to add new portlets.\n-      </p>\n+          </p>\n \n-      <p i18n:translate="description_group_portlets_below">\n+          <p i18n:translate="description_group_portlets_below">\n         Note that group portlets are normally rendered below context portlets.\n-      </p>\n-    </div>\n+          </p>\n+        </div>\n \n-  </metal:b>\n-</metal:b>\n+      </metal:b>\n+    </metal:b>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/manage_portlets_fallback.pt b/plone/app/portlets/browser/templates/manage_portlets_fallback.pt\nindex ec5592d9..a7cba8b9 100644\n--- a/plone/app/portlets/browser/templates/manage_portlets_fallback.pt\n+++ b/plone/app/portlets/browser/templates/manage_portlets_fallback.pt\n@@ -1,14 +1,19 @@\n-<div tal:condition="view/available" class="row managePortlets-row">\n-\t<tal:comment tal:condition="nothing">\n+<div class="row managePortlets-row"\n+     tal:condition="view/available"\n+>\n+  <tal:comment tal:condition="nothing">\n \t\t**********\n \t\tNEEDED COL\n \t\t**********\n-\t</tal:comment>\n-    <a class="managePortletsFallback"\n-        tal:attributes="href string:${view/object_url}/@@manage-portlets"\n-        i18n:domain="plone"\n-        i18n:translate="manage_portlets_link">\n+  </tal:comment>\n+  <a class="managePortletsFallback"\n+     tal:attributes="\n+       href string:${view/object_url}/@@manage-portlets;\n+     "\n+     i18n:domain="plone"\n+     i18n:translate="manage_portlets_link"\n+  >\n         Manage portlets\n-    </a>\n+  </a>\n \n-</div>\n\\ No newline at end of file\n+</div>\ndiff --git a/plone/app/portlets/browser/templates/portlets-pageform.pt b/plone/app/portlets/browser/templates/portlets-pageform.pt\nindex dc35fecb..4e65a74e 100644\n--- a/plone/app/portlets/browser/templates/portlets-pageform.pt\n+++ b/plone/app/portlets/browser/templates/portlets-pageform.pt\n@@ -1,23 +1,33 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master">\n+      metal:use-macro="context/main_template/macros/master"\n+>\n \n-<metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+  <metal:block fill-slot="top_slot"\n+               tal:define="\n+                 dummy python:request.set(\'disable_border\',1);\n+                 disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                 disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+               "\n+  />\n \n-<body>\n-<metal:main fill-slot="main">\n+  <body>\n+    <metal:main fill-slot="main">\n \n-  <metal:form use-macro="context/@@base-pageform.html/form">\n-    <metal:block fill-slot="extra_info">\n-     <input type="hidden" name="referer" value="" tal:attributes="value view/referer" />\n-    </metal:block>\n-  </metal:form>\n+      <metal:form use-macro="context/@@base-pageform.html/form">\n+        <metal:block fill-slot="extra_info">\n+          <input name="referer"\n+                 type="hidden"\n+                 value=""\n+                 tal:attributes="\n+                   value view/referer;\n+                 "\n+          />\n+        </metal:block>\n+      </metal:form>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/topbar-manage-portlets.pt b/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\nindex 11d9aaa0..37702e0c 100644\n--- a/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\n+++ b/plone/app/portlets/browser/templates/topbar-manage-portlets.pt\n@@ -1,68 +1,102 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n+      i18n:domain="plone"\n+>\n+  <body>\n \n-  <metal:main fill-slot="main" tal:define="plone_view context/@@plone">\n+    <metal:main fill-slot="main"\n+                tal:define="\n+                  plone_view context/@@plone;\n+                "\n+    >\n \n-    <div class="quicknav-wrapper">\n-      <form method="post"\n-          tal:attributes="action context/absolute_url">\n-        <select id="quicknav" class="switch-portlet-manager form-select w-auto ms-1 float-end" name=":action"\n-            tal:define="portlet_menu context/@@view_get_menu/plone_contentmenu_portletmanager"\n-            tal:attributes="data-context-url context/absolute_url">\n-          <option tal:attributes="value python:request[\'ACTUAL_URL\']"\n-          ><tal:span i18n:translate="title_switch_portlet_managers">Other portlet managers</tal:span>&hellip;</option>\n-          <tal:item repeat="item portlet_menu">\n-            <option tal:define="item_id python:item[\'title\'].lower().replace(\' \', \'.\');\n-                                is_current python:item_id == view.manager_name"\n-                tal:attributes="value item/action"\n-                tal:content="item/title"\n-                tal:omit-tag="is_current">Plone Leftcolumn</option>\n-          </tal:item>\n-        </select>\n-        <label for="quicknav" class="sr-only" i18n:translate="title_switch_portlet_managers">Other portlet managers</label>\n-      </form>\n-    </div>\n+      <div class="quicknav-wrapper">\n+        <form method="post"\n+              tal:attributes="\n+                action context/absolute_url;\n+              "\n+        >\n+          <select class="switch-portlet-manager form-select w-auto ms-1 float-end"\n+                  id="quicknav"\n+                  name=":action"\n+                  tal:define="\n+                    portlet_menu context/@@view_get_menu/plone_contentmenu_portletmanager;\n+                  "\n+                  tal:attributes="\n+                    data-context-url context/absolute_url;\n+                  "\n+          >\n+            <option tal:attributes="\n+                      value python:request[\'ACTUAL_URL\'];\n+                    "><tal:span i18n:translate="title_switch_portlet_managers">Other portlet managers</tal:span>&hellip;</option>\n+            <tal:item repeat="item portlet_menu">\n+              <option tal:define="\n+                        item_id python:item[\'title\'].lower().replace(\' \', \'.\');\n+                        is_current python:item_id == view.manager_name;\n+                      "\n+                      tal:content="item/title"\n+                      tal:omit-tag="is_current"\n+                      tal:attributes="\n+                        value item/action;\n+                      "\n+              >Plone Leftcolumn</option>\n+            </tal:item>\n+          </select>\n+          <label class="sr-only"\n+                 for="quicknav"\n+                 i18n:translate="title_switch_portlet_managers"\n+          >Other portlet managers</label>\n+        </form>\n+      </div>\n \n-    <header>\n-      <h1 class="documentFirstHeading"\n-        i18n:translate="title_manage_contextual_portlets">\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate="title_manage_contextual_portlets"\n+        >\n         Manage portlets for\n-        <q i18n:name="context_title" tal:content="context/Title">title</q>\n-      </h1>\n-      \n-      <a class="link-parent d-inline-block mb-3"\n-          tal:attributes="href context/absolute_url"\n-          i18n:translate="return_to_view">\n+          <q tal:content="context/Title"\n+             i18n:name="context_title"\n+          >title</q>\n+        </h1>\n+\n+        <a class="link-parent d-inline-block mb-3"\n+           tal:attributes="\n+             href context/absolute_url;\n+           "\n+           i18n:translate="return_to_view"\n+        >\n         Return\n-      </a>      \n+        </a>\n \n-      <div class="alert alert-info"\n-          role="status"\n-          tal:condition="plone_view/isDefaultPageInFolder|nothing">\n-        <strong i18n:translate="">\n+        <div class="alert alert-info"\n+             role="status"\n+             tal:condition="plone_view/isDefaultPageInFolder|nothing"\n+        >\n+          <strong i18n:translate="">\n             Info\n-        </strong>\n-        <div i18n:translate="label_manage_portlets_default_view_container">\n+          </strong>\n+          <div i18n:translate="label_manage_portlets_default_view_container">\n             You are managing the portlets of the default view of a container. If\n             you wanted to manage the portlets of the container itself,\n-          <a href=""\n-              i18n:name="go_here"\n-              i18n:translate="label_manage_portlets_default_view_container_go_here"\n-              class="portlets-link-to-parent"\n-              tal:attributes="href string:${context/aq_inner/aq_parent/absolute_url}/@@topbar-manage-portlets/${view/manager_name}">go here</a>.\n+            <a class="portlets-link-to-parent"\n+               href=""\n+               tal:attributes="\n+                 href string:${context/aq_inner/aq_parent/absolute_url}/@@topbar-manage-portlets/${view/manager_name};\n+               "\n+               i18n:name="go_here"\n+               i18n:translate="label_manage_portlets_default_view_container_go_here"\n+            >go here</a>.\n+          </div>\n         </div>\n-      </div>\n-    </header>\n+      </header>\n \n-    <h2 tal:content="view/manager_name"></h2>\n-    <span tal:replace="structure view/render_edit_manager_portlets" />\n+      <h2 tal:content="view/manager_name"></h2>\n+      <span tal:replace="structure view/render_edit_manager_portlets"></span>\n \n-  </metal:main>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt b/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\nindex d376e420..d75e5cca 100644\n--- a/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\n+++ b/plone/app/portlets/browser/templates/z3cform-portlets-pageform.pt\n@@ -1,30 +1,45 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      metal:use-macro="context/main_template/macros/master"\n       i18n:domain="plone"\n-      metal:use-macro="context/main_template/macros/master">\n+>\n+\n+  <metal:block fill-slot="top_slot"\n+               tal:define="\n+                 dummy python:request.set(\'disable_border\',1);\n+                 disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                 disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+               "\n+  />\n \n-<metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+  <metal:block fill-slot="main">\n \n-    <metal:block fill-slot="main">\n+    <h1 class="documentFirstHeading"\n+        tal:content="view/label | nothing"\n+    ></h1>\n \n-        <h1 class="documentFirstHeading" tal:content="view/label | nothing" />\n-        \n-        <div class="text-muted" tal:condition="view/description | nothing" tal:content="view/description" />\n+    <div class="text-muted"\n+         tal:condition="view/description | nothing"\n+         tal:content="view/description"\n+    ></div>\n \n-        <div id="content-core">\n-            <metal:block use-macro="context/@@ploneform-macros/titlelessform" >\n-                <metal:block fill-slot="formtop">\n-                     <input type="hidden" name="referer" value="" tal:attributes="value view/referer" />\n-                </metal:block>\n-            </metal:block>\n-        </div>\n+    <div id="content-core">\n+      <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n+        <metal:block fill-slot="formtop">\n+          <input name="referer"\n+                 type="hidden"\n+                 value=""\n+                 tal:attributes="\n+                   value view/referer;\n+                 "\n+          />\n+        </metal:block>\n+      </metal:block>\n+    </div>\n \n \n-    </metal:block>\n+  </metal:block>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/app/portlets/browser/viewlets.py b/plone/app/portlets/browser/viewlets.py\nindex 6a365f00..01fa1f8b 100644\n--- a/plone/app/portlets/browser/viewlets.py\n+++ b/plone/app/portlets/browser/viewlets.py\n@@ -1,8 +1,8 @@\n-from zope.component import getMultiAdapter\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from plone.app.layout.viewlets.common import ViewletBase\n from AccessControl import getSecurityManager\n from datetime import date\n+from plone.app.layout.viewlets.common import ViewletBase\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getMultiAdapter\n \n \n class ManagePortletsFallbackViewlet(ViewletBase):\n@@ -11,11 +11,9 @@ class ManagePortletsFallbackViewlet(ViewletBase):\n     index = ViewPageTemplateFile("templates/manage_portlets_fallback.pt")\n \n     def update(self):\n-        plonelayout = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_layout"\n-        )\n+        plonelayout = getMultiAdapter((self.context, self.request), name="plone_layout")\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n \n         self.portlet_assignable = context_state.portlet_assignable()\n@@ -32,11 +30,12 @@ def available(self):\n             return False\n         return bool(not self.sl and not self.sr and self.portlet_assignable)\n \n+\n class FooterViewlet(ViewletBase):\n     index = ViewPageTemplateFile("templates/footer.pt")\n \n     def update(self):\n-        super(FooterViewlet, self).update()\n+        super().update()\n         self.year = date.today().year\n \n     def render_footer_portlets(self):\ndiff --git a/plone/app/portlets/configure.zcml b/plone/app/portlets/configure.zcml\nindex b4b59569..6732bada 100644\n--- a/plone/app/portlets/configure.zcml\n+++ b/plone/app/portlets/configure.zcml\n@@ -2,70 +2,65 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    >\n \n-    <include package="plone.portlets" />\n-    <include package="plone.app.vocabularies" />\n+  <include package="plone.portlets" />\n+  <include package="plone.app.vocabularies" />\n \n-    <five:registerPackage package="." />\n+  <five:registerPackage package="." />\n \n-    <include file="permissions.zcml" />\n+  <include file="permissions.zcml" />\n \n-    <include package=".browser" />\n-    <include package=".dashboard" />\n-    <include package=".exportimport" />\n-    <include package=".portlets" />\n+  <include package=".browser" />\n+  <include package=".dashboard" />\n+  <include package=".exportimport" />\n+  <include package=".portlets" />\n \n-    <!-- Set up the portlet context -->\n-    <adapter factory=".portletcontext.ContentContext" />\n-    <adapter factory=".portletcontext.PortalRootContext" />\n+  <!-- Set up the portlet context -->\n+  <adapter factory=".portletcontext.ContentContext" />\n+  <adapter factory=".portletcontext.PortalRootContext" />\n \n-    <!-- Make it possible to define a sane default dashboard -->\n-    <subscriber\n-        for="Products.PluggableAuthService.interfaces.authservice.IPropertiedUser\n-            Products.PluggableAuthService.interfaces.events.IPrincipalCreatedEvent"\n-        handler=".dashboard.new_user"\n-        />\n-\n-    <adapter factory=".dashboard.DefaultDashboard" />\n+  <!-- Make it possible to define a sane default dashboard -->\n+  <subscriber\n+      for="Products.PluggableAuthService.interfaces.authservice.IPropertiedUser\n+           Products.PluggableAuthService.interfaces.events.IPrincipalCreatedEvent"\n+      handler=".dashboard.new_user"\n+      />\n \n-    <!-- Make the site root and any ATContentType a possible portlet manager -->\n-    <class class="Products.CMFPlone.Portal.PloneSite">\n-        <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />\n-    </class>\n+  <adapter factory=".dashboard.DefaultDashboard" />\n \n-    <class zcml:condition="installed Products.ATContentTypes"\n-           class="Products.ATContentTypes.content.base.ATCTMixin">\n-        <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />\n-    </class>\n+  <!-- Make the site root a possible portlet manager -->\n+  <class class="Products.CMFPlone.Portal.PloneSite">\n+    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />\n+  </class>\n \n-    <!-- Make a Zope 2 safe traversal adapter for assignment mappings -->\n-    <adapter\n+  <!-- Make a Zope safe traversal adapter for assignment mappings -->\n+  <adapter\n       factory=".storage.PortletAssignmentMappingTraverser"\n       provides="zope.publisher.interfaces.browser.IBrowserPublisher"\n       />\n \n-    <!-- Set up assignment mapping permissions -->\n-    <class class=".storage.PortletAssignmentMapping">\n-      <require\n+  <!-- Set up assignment mapping permissions -->\n+  <class class=".storage.PortletAssignmentMapping">\n+    <require\n         permission="zope2.View"\n         interface="zope.container.interfaces.IReadContainer"\n         />\n-      <require\n+    <require\n         permission="plone.app.portlets.ManagePortlets"\n         interface="zope.container.interfaces.IWriteContainer"\n         />\n-      <require\n+    <require\n         permission="plone.app.portlets.ManagePortlets"\n         attributes="updateOrder"\n         />\n-    </class>\n+  </class>\n \n-    <!-- Register a name chooser -->\n-    <adapter\n+  <!-- Register a name chooser -->\n+  <adapter\n+      factory=".storage.PortletsNameChooser"\n       provides="zope.container.interfaces.INameChooser"\n       for="plone.portlets.interfaces.IPortletAssignmentMapping"\n-      factory=".storage.PortletsNameChooser"\n       />\n \n </configure>\ndiff --git a/plone/app/portlets/dashboard/configure.zcml b/plone/app/portlets/dashboard/configure.zcml\nindex c206737c..6096944a 100644\n--- a/plone/app/portlets/dashboard/configure.zcml\n+++ b/plone/app/portlets/dashboard/configure.zcml\n@@ -1,22 +1,23 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    >\n \n-    <browser:page\n-        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-        name="dashboard"\n-        permission="plone.app.portlets.ViewDashboard"\n-        class=".dashboard.DashboardView"\n-        template="dashboard.pt"\n-        />\n+  <browser:page\n+      name="dashboard"\n+      for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+      class=".dashboard.DashboardView"\n+      template="dashboard.pt"\n+      permission="plone.app.portlets.ViewDashboard"\n+      />\n \n-    <!-- this view provides a not-js fallback for the user dropdown menu.\n+  <!-- this view provides a not-js fallback for the user dropdown menu.\n     It has been placed here to be near the personal bar code -->\n-    <browser:page\n-        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-        name="useractions"\n-        permission="zope2.View"\n-        class=".user_actions.UserActionsView"\n-        template="user_actions.pt"\n-        />\n+  <browser:page\n+      name="useractions"\n+      for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+      class=".user_actions.UserActionsView"\n+      template="user_actions.pt"\n+      permission="zope2.View"\n+      />\n </configure>\ndiff --git a/plone/app/portlets/dashboard/dashboard.pt b/plone/app/portlets/dashboard/dashboard.pt\nindex 71de849a..da7884b5 100644\n--- a/plone/app/portlets/dashboard/dashboard.pt\n+++ b/plone/app/portlets/dashboard/dashboard.pt\n@@ -1,25 +1,27 @@\n-<html\n-    xmlns="http://www.w3.org/1999/xhtml"\n-    xml:lang="en"\n-    xmlns:tal="http://xml.zope.org/namespaces/tal"\n-    xmlns:metal="http://xml.zope.org/namespaces/metal"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    lang="en"\n-    metal:use-macro="context/main_template/macros/master"\n-    i18n:domain="plone">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      lang="en"\n+      metal:use-macro="context/main_template/macros/master"\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n   <body>\n \n     <metal:b fill-slot="content-title">\n-      <h1\n-          class="documentFirstHeading"\n+      <h1 class="documentFirstHeading"\n+          tal:define="\n+            memberinfo context/portal_membership/getMemberInfo;\n+            member context/@@plone_portal_state/member;\n+            name python:memberinfo[\'fullname\'] or member.getId() or member.getId();\n+          "\n           i18n:translate="heading_dashboard"\n-          tal:define="memberinfo context/portal_membership/getMemberInfo;\n-                  member context/@@plone_portal_state/member;\n-                  name python:memberinfo[\'fullname\'] or member.getId() or member.getId()">\n-        <span\n-            tal:replace="name"\n-            i18n:name="user_name" />\n+      >\n+        <span tal:replace="name"\n+              i18n:name="user_name"\n+        ></span>\n         &#8217;s dashboard\n       </h1>\n     </metal:b>\n@@ -30,35 +32,35 @@\n         <div class="autotabs">\n           <nav class="autotoc-nav nav nav-tabs mb-3">\n             <span class="nav-item">\n-              <a\n-                  class="active nav-link"\n-                  href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n-                  i18n:translate="label_dashboard">Dashboard</a>\n+              <a class="active nav-link"\n+                 href="${context/@@plone_portal_state/navigation_root_url}/dashboard"\n+                 i18n:translate="label_dashboard"\n+              >Dashboard</a>\n             </span>\n             <span class="nav-item">\n-              <a\n-                  href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n-                  class="nav-link"\n-                  i18n:translate="label_edit">Edit</a>\n+              <a class="nav-link"\n+                 href="${context/@@plone_portal_state/navigation_root_url}/@@manage-dashboard?_authenticator=${view/auth_token}"\n+                 i18n:translate="label_edit"\n+              >Edit</a>\n             </span>\n           </nav>\n \n \n-          <div\n-              id="dashboard"\n-              class="row row-cols-1 row-cols-md-2 gy-2">\n-            <div\n-                id="dashboard-portlets1"\n-                tal:content="structure provider:plone.dashboard1" />\n-            <div\n-                id="dashboard-portlets2"\n-                tal:content="structure provider:plone.dashboard2" />\n-            <div\n-                id="dashboard-portlets3"\n-                tal:content="structure provider:plone.dashboard3" />\n-            <div\n-                id="dashboard-portlets4"\n-                tal:content="structure provider:plone.dashboard4" />\n+          <div class="row row-cols-1 row-cols-md-2 gy-2"\n+               id="dashboard"\n+          >\n+            <div id="dashboard-portlets1"\n+                 tal:content="structure provider:plone.dashboard1"\n+            ></div>\n+            <div id="dashboard-portlets2"\n+                 tal:content="structure provider:plone.dashboard2"\n+            ></div>\n+            <div id="dashboard-portlets3"\n+                 tal:content="structure provider:plone.dashboard3"\n+            ></div>\n+            <div id="dashboard-portlets4"\n+                 tal:content="structure provider:plone.dashboard4"\n+            ></div>\n           </div>\n \n         </div>\ndiff --git a/plone/app/portlets/dashboard/dashboard.py b/plone/app/portlets/dashboard/dashboard.py\nindex abc42837..a2e5354a 100644\n--- a/plone/app/portlets/dashboard/dashboard.py\n+++ b/plone/app/portlets/dashboard/dashboard.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+from .. import PloneMessageFactory as _\n from AccessControl import getSecurityManager\n from plone.memoize.instance import memoize\n from plone.portlets.constants import GROUP_CATEGORY\n@@ -6,7 +6,6 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.protect.authenticator import createToken\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getUtility\n@@ -28,8 +27,8 @@ def __call__(self):\n         self.request.set("disable_plone.rightcolumn", 1)\n         if self.can_edit() and self.empty():\n             message = _(\n-                u"info_empty_dashboard",\n-                default=u"Your dashboard is currently empty. Click the"\n+                "info_empty_dashboard",\n+                default="Your dashboard is currently empty. Click the"\n                 " <em>edit</em> tab to assign some personal"\n                 " portlets.",\n             )\ndiff --git a/plone/app/portlets/dashboard/user_actions.pt b/plone/app/portlets/dashboard/user_actions.pt\nindex ce532f1f..c94373bf 100644\n--- a/plone/app/portlets/dashboard/user_actions.pt\n+++ b/plone/app/portlets/dashboard/user_actions.pt\n@@ -1,35 +1,45 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<head>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n \n-<metal:main fill-slot="main">\n-<h1 i18n:translate="" class="documentFirstHeading">User Actions</h1>\n-<ul id="user-actions">\n-    <li tal:repeat="action view/user_actions">\n-        <a href=""\n-           tal:attributes="href action/url;\n-                           target action/link_target|nothing;\n-                           id string:personaltoolspage-${action/id};"\n-           tal:content="action/title"\n-           i18n:translate="">\n+    <metal:main fill-slot="main">\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >User Actions</h1>\n+      <ul id="user-actions">\n+        <li tal:repeat="action view/user_actions">\n+          <a href=""\n+             tal:content="action/title"\n+             tal:attributes="\n+               href action/url;\n+               target action/link_target|nothing;\n+               id string:personaltoolspage-${action/id};\n+             "\n+             i18n:translate=""\n+          >\n             action title\n-        </a>\n-    </li>\n-</ul>\n-</metal:main>\n+          </a>\n+        </li>\n+      </ul>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/portlets/dashboard/user_actions.py b/plone/app/portlets/dashboard/user_actions.py\nindex 64e10f96..5cec7084 100644\n--- a/plone/app/portlets/dashboard/user_actions.py\n+++ b/plone/app/portlets/dashboard/user_actions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n \n@@ -8,7 +7,7 @@ class UserActionsView(BrowserView):\n \n     def user_actions(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n \n         actions = context_state.actions("user")\ndiff --git a/plone/app/portlets/exportimport/configure.zcml b/plone/app/portlets/exportimport/configure.zcml\nindex 17e90313..e78125b1 100644\n--- a/plone/app/portlets/exportimport/configure.zcml\n+++ b/plone/app/portlets/exportimport/configure.zcml\n@@ -1,44 +1,38 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone">\n-\n-    <adapter\n-        factory=".portlets.PortletsXMLAdapter"\n-        name="plone.portlets"\n-        />\n-\n-    <adapter\n-        factory=".portlets.PropertyPortletAssignmentExportImportHandler"\n-        />\n-\n-    <!-- Register import and export steps -->\n-    <genericsetup:importStep\n-        name="portlets"\n-        title="Portlets"\n-        description="Import portlet managers, types, assignments and blacklistings"\n-        handler=".portlets.importPortlets">\n-        <depends name="componentregistry"/>\n-        <depends name="content"/>\n-    </genericsetup:importStep>\n-\n-    <genericsetup:exportStep\n-        name="portlets"\n-        title="Portlets"\n-        description="Export portlet managers, types, assignments and blacklistings"\n-        handler=".portlets.exportPortlets"\n-        />\n-\n-    <configure\n-        zcml:condition="not-installed Products.CMFCore.src">\n-\n-        <utility\n-            factory=".portlets.Blacklist"\n-            provides="Products.GenericSetup.interfaces.IComponentsHandlerBlacklist"\n-            name="plone.app.portlets.exportimport"\n-            />\n-\n-        </configure>\n+    i18n_domain="plone"\n+    >\n+\n+  <adapter\n+      factory=".portlets.PortletsXMLAdapter"\n+      name="plone.portlets"\n+      />\n+\n+  <adapter factory=".portlets.PropertyPortletAssignmentExportImportHandler" />\n+\n+  <!-- Register import and export steps -->\n+  <genericsetup:importStep\n+      name="portlets"\n+      title="Portlets"\n+      description="Import portlet managers, types, assignments and blacklistings"\n+      handler=".portlets.importPortlets"\n+      >\n+    <depends name="componentregistry" />\n+    <depends name="content" />\n+  </genericsetup:importStep>\n+\n+  <genericsetup:exportStep\n+      name="portlets"\n+      title="Portlets"\n+      description="Export portlet managers, types, assignments and blacklistings"\n+      handler=".portlets.exportPortlets"\n+      />\n+\n+  <utility\n+      factory=".portlets.Blacklist"\n+      provides="Products.GenericSetup.interfaces.IComponentsHandlerBlacklist"\n+      name="plone.app.portlets.exportimport"\n+      />\n \n </configure>\ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 6c404fac..8d4d1dcf 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -245,7 +245,7 @@ def field_typecast(self, field, value):\n                     try:\n                         value = tc(value)\n                         break\n-                    except:\n+                    except Exception:\n                         pass\n         return value\n \n@@ -651,12 +651,12 @@ def extractMapping(manager_name, category, key, mapping):\n                 child.setAttribute("location", "/")\n \n                 status = assignable.getBlacklistStatus(category)\n-                if status == True:\n+                if status is None:\n+                    child.setAttribute("status", "acquire")\n+                elif status:\n                     child.setAttribute("status", "block")\n-                elif status == False:\n-                    child.setAttribute("status", "show")\n                 else:\n-                    child.setAttribute("status", "acquire")\n+                    child.setAttribute("status", "show")\n \n                 fragment.appendChild(child)\n \n@@ -802,7 +802,6 @@ def exportPortlets(context):\n \n \n class InvalidPortletForDefinition(Exception):\n-\n     message = """The following portlet definition is invalid: %s\n The \'for\' attribute is not supported, use \'for\' sub-elements instead.\n See http://plone.org/documentation/manual/upgrade-guide/version/\\\ndiff --git a/plone/app/portlets/interfaces.py b/plone/app/portlets/interfaces.py\nindex bde17c68..d1b34dfc 100644\n--- a/plone/app/portlets/interfaces.py\n+++ b/plone/app/portlets/interfaces.py\n@@ -26,7 +26,7 @@ class IPortletPermissionChecker(Interface):\n     """\n \n     def __call__():\n-        """Check the adapted assignment manager. Will raise Unathorized if\n+        """Check the adapted assignment manager. Will raise Unauthorized if\n         something fishy is going on.\n         """\n \ndiff --git a/plone/app/portlets/meta.zcml b/plone/app/portlets/meta.zcml\nindex 2341e10d..0655c3dc 100644\n--- a/plone/app/portlets/meta.zcml\n+++ b/plone/app/portlets/meta.zcml\n@@ -1,21 +1,22 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:meta="http://namespaces.zope.org/meta">\n+    xmlns:meta="http://namespaces.zope.org/meta"\n+    >\n \n-    <meta:directives namespace="http://namespaces.plone.org/plone">\n+  <meta:directives namespace="http://namespaces.plone.org/plone">\n \n-        <meta:directive\n-            name="portlet"\n-            schema=".metadirectives.IPortletDirective"\n-            handler=".metaconfigure.portletDirective"\n-            />\n+    <meta:directive\n+        name="portlet"\n+        handler=".metaconfigure.portletDirective"\n+        schema=".metadirectives.IPortletDirective"\n+        />\n \n-        <meta:directive\n-            name="portletRenderer"\n-            schema=".metadirectives.IPortletRendererDirective"\n-            handler=".metaconfigure.portletRendererDirective"\n-            />\n+    <meta:directive\n+        name="portletRenderer"\n+        handler=".metaconfigure.portletRendererDirective"\n+        schema=".metadirectives.IPortletRendererDirective"\n+        />\n \n-    </meta:directives>\n+  </meta:directives>\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/app/portlets/metaconfigure.py b/plone/app/portlets/metaconfigure.py\nindex 2dff5aae..dc551d15 100644\n--- a/plone/app/portlets/metaconfigure.py\n+++ b/plone/app/portlets/metaconfigure.py\n@@ -14,7 +14,7 @@\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n \n-# Keep track of which renderers we\'ve registered so that we can artifically\n+# Keep track of which renderers we\'ve registered so that we can artificially\n # subclass them in portletRendererDirective. Yes, this is evil.\n _default_renderers = {}\n \n@@ -36,7 +36,7 @@ def portletDirective(\n     base.Assignment, a renderer deriving from base.Renderer, an addview\n     using z3c form and deriving from base.AddForm and an editview (optional)\n     using z3c form and deriving from base.EditForm, can use this directive\n-    to avoid having to regiter each of those components individually.\n+    to avoid having to register each of those components individually.\n \n     In addition, we register the portlet interface using IPortletTypeInterface\n     and an IFactory utility, in order to help the GenericSetup handler and\n@@ -147,7 +147,6 @@ def portletRendererDirective(\n         raise TypeError("\'template\' and \'class\' cannot be specified at the same time")\n \n     if template is not None:\n-\n         # Look up the default renderer for this portlet\n         base_class = _default_renderers.get(portlet, None)\n         if base_class is None:\ndiff --git a/plone/app/portlets/overrides.zcml b/plone/app/portlets/overrides.zcml\nindex 2aefc787..beb2011a 100644\n--- a/plone/app/portlets/overrides.zcml\n+++ b/plone/app/portlets/overrides.zcml\n@@ -1,8 +1,10 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n+  <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n \n-    <adapter factory=".manager.PortletManagerRenderer"\n-             provides="plone.portlets.interfaces.IPortletManagerRenderer"/>\n+  <adapter\n+      factory=".manager.PortletManagerRenderer"\n+      provides="plone.portlets.interfaces.IPortletManagerRenderer"\n+      />\n \n </configure>\ndiff --git a/plone/app/portlets/permissions.zcml b/plone/app/portlets/permissions.zcml\nindex db4a2f1a..9d15eb31 100644\n--- a/plone/app/portlets/permissions.zcml\n+++ b/plone/app/portlets/permissions.zcml\n@@ -1,5 +1,7 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.portlets">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    i18n_domain="plone.app.portlets"\n+    >\n \n   <!-- Note: These permissions are also set up in the rolemap.xml GenericSetup\n              importer in CMFPlone.\n@@ -14,23 +16,23 @@\n       A better way of doing this would probably be to use the Owner role\n       against the assignment mappings and let Manage portlets be controlled\n       by that, but managing those roles properly w.r.t. the namespace\n-      traveral adapters and acquisition is not fun.\n+      traversal adapters and acquisition is not fun.\n      -->\n \n   <permission\n-    id="plone.app.portlets.ManagePortlets"\n-    title="Portlets: Manage portlets"\n-    />\n+      id="plone.app.portlets.ManagePortlets"\n+      title="Portlets: Manage portlets"\n+      />\n \n   <permission\n-    id="plone.app.portlets.ManageOwnPortlets"\n-    title="Portlets: Manage own portlets"\n-    />\n+      id="plone.app.portlets.ManageOwnPortlets"\n+      title="Portlets: Manage own portlets"\n+      />\n \n   <permission\n-     id="plone.app.portlets.ViewDashboard"\n-     title="Portlets: View dashboard"\n-     />\n+      id="plone.app.portlets.ViewDashboard"\n+      title="Portlets: View dashboard"\n+      />\n \n   <adapter factory=".checker.DefaultPortletPermissionChecker" />\n   <adapter factory=".checker.UserPortletPermissionChecker" />\ndiff --git a/plone/app/portlets/portlets/actions.pt b/plone/app/portlets/portlets/actions.pt\nindex 1c6eb538..cd462e42 100644\n--- a/plone/app/portlets/portlets/actions.pt\n+++ b/plone/app/portlets/portlets/actions.pt\n@@ -1,40 +1,64 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag=""\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n   <div class="card portlet portletActions"\n-      tal:define="portal_url context/@@plone_portal_state/portal_url;">\n+       tal:define="\n+         portal_url context/@@plone_portal_state/portal_url;\n+       "\n+  >\n \n-    <div class="card-header" tal:condition="view/showTitle">\n-      <span tal:condition="view/title" tal:replace="view/title">\n+    <div class="card-header"\n+         tal:condition="view/showTitle"\n+    >\n+      <span tal:condition="view/title"\n+            tal:replace="view/title"\n+      >\n         Title\n       </span>\n     </div>\n \n     <div class="card-body portletContent">\n-      <ul tal:attributes="class string:actions-${view/category}">\n+      <ul tal:attributes="\n+            class string:actions-${view/category};\n+          ">\n         <tal:loop tal:repeat="link view/actionLinks">\n-        <li class="portletItem ${python:link[\'id\']}"\n-            tal:define="icon nocall:link/icon">\n-          <a href="#"\n-              tal:define="modal link/modal|nothing"\n-              tal:attributes="href link/url;\n-                              class python:\'pat-plone-modal\' if modal else None;\n-                              data-pat-plone-modal python:modal if modal else None;">\n-            <span tal:condition="not:icon"\n-                tal:content="link/title">\n+          <li class="portletItem action-item-${python:link[\'id\']}"\n+              tal:define="\n+                icon nocall:link/icon;\n+              "\n+          >\n+            <a href="#"\n+               tal:define="\n+                 modal link/modal|nothing;\n+               "\n+               tal:attributes="\n+                 href link/url;\n+                 class python:\'pat-plone-modal\' if modal else None;\n+                 data-pat-plone-modal python:modal if modal else None;\n+               "\n+            >\n+              <span tal:condition="not:icon"\n+                    tal:content="link/title"\n+              >\n               Action\n-            </span>\n-            <span tal:condition="icon"\n-                tal:content="link/title"\n-                tal:define="icon_url icon/absolute_url|icon"\n-                tal:attributes="style string:background-image:url($icon_url);;">\n+              </span>\n+              <span tal:define="\n+                      icon_url icon/absolute_url|icon;\n+                    "\n+                    tal:condition="icon"\n+                    tal:content="link/title"\n+                    tal:attributes="\n+                      style string:background-image:url($icon_url);;;\n+                    "\n+              >\n               Action\n-            </span>\n-          </a>\n-        </li>\n+              </span>\n+            </a>\n+          </li>\n         </tal:loop>\n       </ul>\n     </div>\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex cfe507cb..cd6b8bcc 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -1,6 +1,6 @@\n-from ..browser.formhelper import AddForm\n-from ..browser.formhelper import EditForm\n-from ..browser.formhelper import NullAddForm\n+from ..browser.formhelper import AddForm  # noqa F401 imported but unused\n+from ..browser.formhelper import EditForm  # noqa F401 imported but unused\n+from ..browser.formhelper import NullAddForm  # noqa F401 imported but unused\n from OFS.SimpleItem import SimpleItem\n from plone.app.portlets.interfaces import IDeferredPortletRenderer\n from plone.portlets.interfaces import IPortletAssignment\n@@ -86,14 +86,14 @@ class DeferredRenderer(Renderer):\n     render_preload = ViewPageTemplateFile("deferred_portlet.pt")\n \n     def render_full(self):\n-        raise NotImplemented(\n+        raise NotImplementedError(\n             "You must implement \'render_full\' as a method or page template file attribute"\n         )\n \n     def render(self):\n         """render the portlet\n \n-        the template gets choosen depending on the initialize state\n+        the template gets chosen depending on the initialize state\n         """\n         if self.initializing:\n             return self.render_preload()\ndiff --git a/plone/app/portlets/portlets/calendar.py b/plone/app/portlets/portlets/calendar.py\nindex 2d0e487f..700e6ca8 100644\n--- a/plone/app/portlets/portlets/calendar.py\n+++ b/plone/app/portlets/portlets/calendar.py\n@@ -1,2 +1,7 @@\n-# avoid broken persistent object\n-from plone.app.event.portlets.portlet_calendar import Assignment\n+from zope.deferredimport import deprecated\n+\n+\n+deprecated(\n+    "Import from plone.app.event.portlets.portlet_calendar instead (will be removed in Plone 7)",\n+    Assignment="plone.app.event.portlets.portlet_calendar:Assignment",\n+)\ndiff --git a/plone/app/portlets/portlets/classic.pt b/plone/app/portlets/portlets/classic.pt\nindex 877411fe..bb3b4935 100644\n--- a/plone/app/portlets/portlets/classic.pt\n+++ b/plone/app/portlets/portlets/classic.pt\n@@ -1,12 +1,14 @@\n-<tal:block tal:define="use_macro view/use_macro;\n-                       path_expression view/path_expression">\n+<tal:block tal:define="\n+             use_macro view/use_macro;\n+             path_expression view/path_expression;\n+           ">\n \n   <tal:block condition="use_macro">\n     <metal:block metal:use-macro="python:path(path_expression)" />\n   </tal:block>\n \n   <tal:block condition="not:use_macro">\n-    <div tal:replace="structure python:path(path_expression)" />\n+    <div tal:replace="structure python:path(path_expression)"></div>\n   </tal:block>\n \n-</tal:block>\n\\ No newline at end of file\n+</tal:block>\ndiff --git a/plone/app/portlets/portlets/configure.zcml b/plone/app/portlets/portlets/configure.zcml\nindex 08e2bd7a..ef9cdc83 100644\n--- a/plone/app/portlets/portlets/configure.zcml\n+++ b/plone/app/portlets/portlets/configure.zcml\n@@ -1,96 +1,98 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:browser="http://namespaces.zope.org/browser"\n-           xmlns:plone="http://namespaces.plone.org/plone">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n \n-    <plone:portlet\n-        name="portlets.Classic"\n-        interface=".classic.IClassicPortlet"\n-        assignment=".classic.Assignment"\n-        renderer=".classic.Renderer"\n-        addview=".classic.AddForm"\n-        editview=".classic.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Classic"\n+      interface=".classic.IClassicPortlet"\n+      assignment=".classic.Assignment"\n+      renderer=".classic.Renderer"\n+      addview=".classic.AddForm"\n+      editview=".classic.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.News"\n-        interface=".news.INewsPortlet"\n-        assignment=".news.Assignment"\n-        renderer=".news.Renderer"\n-        addview=".news.AddForm"\n-        editview=".news.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.News"\n+      interface=".news.INewsPortlet"\n+      assignment=".news.Assignment"\n+      renderer=".news.Renderer"\n+      addview=".news.AddForm"\n+      editview=".news.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.Login"\n-        interface=".login.ILoginPortlet"\n-        assignment=".login.Assignment"\n-        renderer=".login.Renderer"\n-        addview=".login.AddForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Login"\n+      interface=".login.ILoginPortlet"\n+      assignment=".login.Assignment"\n+      renderer=".login.Renderer"\n+      addview=".login.AddForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.Navigation"\n-        interface=".navigation.INavigationPortlet"\n-        assignment=".navigation.Assignment"\n-        renderer=".navigation.Renderer"\n-        addview=".navigation.AddForm"\n-        editview=".navigation.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Navigation"\n+      interface=".navigation.INavigationPortlet"\n+      assignment=".navigation.Assignment"\n+      renderer=".navigation.Renderer"\n+      addview=".navigation.AddForm"\n+      editview=".navigation.EditForm"\n+      />\n \n-    <adapter factory=".navigation.QueryBuilder" />\n-    <adapter factory=".navigation.NavtreeStrategy" />\n+  <adapter factory=".navigation.QueryBuilder" />\n+  <adapter factory=".navigation.NavtreeStrategy" />\n \n-    <plone:portlet\n-        name="portlets.Recent"\n-        interface=".recent.IRecentPortlet"\n-        assignment=".recent.Assignment"\n-        renderer=".recent.Renderer"\n-        addview=".recent.AddForm"\n-        editview=".recent.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Recent"\n+      interface=".recent.IRecentPortlet"\n+      assignment=".recent.Assignment"\n+      renderer=".recent.Renderer"\n+      addview=".recent.AddForm"\n+      editview=".recent.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.Review"\n-        interface=".review.IReviewPortlet"\n-        assignment=".review.Assignment"\n-        renderer=".review.Renderer"\n-        addview=".review.AddForm"\n-        editview=".review.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Review"\n+      interface=".review.IReviewPortlet"\n+      assignment=".review.Assignment"\n+      renderer=".review.Renderer"\n+      addview=".review.AddForm"\n+      editview=".review.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.rss"\n-        interface=".rss.IRSSPortlet"\n-        assignment=".rss.Assignment"\n-        renderer=".rss.Renderer"\n-        addview=".rss.AddForm"\n-        editview=".rss.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.rss"\n+      interface=".rss.IRSSPortlet"\n+      assignment=".rss.Assignment"\n+      renderer=".rss.Renderer"\n+      addview=".rss.AddForm"\n+      editview=".rss.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.Search"\n-        interface=".search.ISearchPortlet"\n-        assignment=".search.Assignment"\n-        renderer=".search.Renderer"\n-        addview=".search.AddForm"\n-        editview=".search.EditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Search"\n+      interface=".search.ISearchPortlet"\n+      assignment=".search.Assignment"\n+      renderer=".search.Renderer"\n+      addview=".search.AddForm"\n+      editview=".search.EditForm"\n+      />\n \n-    <plone:portlet\n-        name="portlets.Language"\n-        interface=".language.ILanguagePortlet"\n-        assignment=".language.Assignment"\n-        renderer=".language.Renderer"\n-        addview=".language.AddForm"\n-        />\n+  <plone:portlet\n+      name="portlets.Language"\n+      interface=".language.ILanguagePortlet"\n+      assignment=".language.Assignment"\n+      renderer=".language.Renderer"\n+      addview=".language.AddForm"\n+      />\n \n-    <plone:portlet\n-       name="portlets.Actions"\n-       interface=".actions.IActionsPortlet"\n-       assignment=".actions.Assignment"\n-       renderer=".actions.Renderer"\n-       addview=".actions.AddForm"\n-       editview=".actions.EditForm"\n-       />\n+  <plone:portlet\n+      name="portlets.Actions"\n+      interface=".actions.IActionsPortlet"\n+      assignment=".actions.Assignment"\n+      renderer=".actions.Renderer"\n+      addview=".actions.AddForm"\n+      editview=".actions.EditForm"\n+      />\n \n </configure>\ndiff --git a/plone/app/portlets/portlets/events.py b/plone/app/portlets/portlets/events.py\nindex f8eb93c6..c9986594 100644\n--- a/plone/app/portlets/portlets/events.py\n+++ b/plone/app/portlets/portlets/events.py\n@@ -1,2 +1,7 @@\n-# avoid broken persistent object\n-from plone.app.event.portlets.portlet_events import Assignment\n+from zope.deferredimport import deprecated\n+\n+\n+deprecated(\n+    "Import from plone.app.event.portlets.portlet_events instead (will be removed in Plone 7)",\n+    Assignment="plone.app.event.portlets.portlet_events:Assignment",\n+)\ndiff --git a/plone/app/portlets/portlets/language.pt b/plone/app/portlets/portlets/language.pt\nindex f79d7102..7fdc1eba 100644\n--- a/plone/app/portlets/portlets/language.pt\n+++ b/plone/app/portlets/portlets/language.pt\n@@ -1,33 +1,51 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag=""\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n   <div class="card portlet portletLanguage">\n \n     <div class="card-header">\n-      <span class="tile" i18n:translate="box_languages">Languages</span>\n+      <span class="tile"\n+            i18n:translate="box_languages"\n+      >Languages</span>\n     </div>\n \n     <div class="card-body">\n-      <ul tal:define="showFlags view/showFlags">\n-        <li class="portletItem" tal:repeat="lang view/languages">\n-          <span tal:define="code lang/code;\n-                            selected lang/selected"\n-              tal:omit-tag="selected">\n+      <ul tal:define="\n+            showFlags view/showFlags;\n+          ">\n+        <li class="portletItem"\n+            tal:repeat="lang view/languages"\n+        >\n+          <span tal:define="\n+                  code lang/code;\n+                  selected lang/selected;\n+                "\n+                tal:omit-tag="selected"\n+          >\n             <a href=""\n-                tal:define="flag lang/flag;\n-                            name lang/name"\n-                tal:attributes="href string:${here/absolute_url}/switchLanguage?set_language=${code};\n-                                title name">\n+               tal:define="\n+                 flag lang/flag;\n+                 name lang/name;\n+               "\n+               tal:attributes="\n+                 href string:${here/absolute_url}/switchLanguage?set_language=${code};\n+                 title name;\n+               "\n+            >\n               <tal:flag condition="python:showFlags and flag">\n-                <img width="14"\n-                    height="11"\n-                    alt=""\n-                    tal:attributes="src string:${view/navigation_root_url}${flag};\n-                                    title python: name;\n-                                    class python: selected and \'currentItem\' or \'\';" />\n+                <img alt=""\n+                     height="11"\n+                     width="14"\n+                     tal:attributes="\n+                       src string:${view/navigation_root_url}${flag};\n+                       title python: name;\n+                       class python: selected and \'currentItem\' or \'\';\n+                     "\n+                />\n               </tal:flag>\n               <span tal:replace="lang/native|lang/name">Native language name</span>\n             </a>\ndiff --git a/plone/app/portlets/portlets/language.py b/plone/app/portlets/portlets/language.py\nindex 23906b7d..f61b2d1f 100644\n--- a/plone/app/portlets/portlets/language.py\n+++ b/plone/app/portlets/portlets/language.py\n@@ -1,6 +1,6 @@\n-from plone.app.i18n.locales.browser.selector import LanguageSelector\n from .. import PloneMessageFactory as _\n from ..portlets import base\n+from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getMultiAdapter\n@@ -13,7 +13,6 @@ class ILanguagePortlet(IPortletDataProvider):\n \n @implementer(ILanguagePortlet)\n class Assignment(base.Assignment):\n-\n     title = _("label_languages", default="Languages")\n \n \ndiff --git a/plone/app/portlets/portlets/login.pt b/plone/app/portlets/portlets/login.pt\nindex 4fa808a4..b515b7d0 100644\n--- a/plone/app/portlets/portlets/login.pt\n+++ b/plone/app/portlets/portlets/login.pt\n@@ -1,126 +1,200 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n       i18n:domain="plone"\n-      tal:omit-tag="">\n+>\n \n   <tal:block condition="view/show">\n \n-  <div class="card portlet portletLogin"\n-      tal:condition="view/available">\n+    <div class="card portlet portletLogin"\n+         tal:condition="view/available"\n+    >\n \n-    <div class="card-header">\n-      <a href="#"\n-          class="tile"\n-          tal:attributes="href view/login_form"\n-          i18n:translate="box_sign_in">Log in</a>\n-    </div>\n+      <div class="card-header">\n+        <a class="tile"\n+           href="#"\n+           tal:attributes="\n+             href view/login_form;\n+           "\n+           i18n:translate="box_sign_in"\n+        >Log in</a>\n+      </div>\n \n-    <div class="card-body">\n-      <div tal:define="ac_name view/login_name;\n-                        ac_password view/login_password">\n-        <form action="login_form"\n-            id="loginform"\n-            method="post"\n-            tal:attributes="action view/login_form">\n-          <div>\n-            <input type="hidden" name="form.submitted" value="1" />\n-            <input type="hidden" name="came_from" value=""\n-                tal:attributes="value context/@@plone_context_state/current_page_url" />\n-            <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-            <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-            <input type="hidden" name="login_name" id="login_name" value="" />\n-            <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-          </div>\n-          <div class="field"\n-              tal:define="use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];">\n-            <tal:loginname condition="not:use_email_as_login">\n+      <div class="card-body">\n+        <div tal:define="\n+               ac_name view/login_name;\n+               ac_password view/login_password;\n+             ">\n+          <form id="loginform"\n+                action="login_form"\n+                method="post"\n+                tal:attributes="\n+                  action view/login_form;\n+                "\n+          >\n+            <div>\n+              <input name="form.submitted"\n+                     type="hidden"\n+                     value="1"\n+              />\n+              <input name="came_from"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       value context/@@plone_context_state/current_page_url;\n+                     "\n+              />\n+              <input id="js_enabled"\n+                     name="js_enabled"\n+                     type="hidden"\n+                     value="0"\n+              />\n+              <input id="cookies_enabled"\n+                     name="cookies_enabled"\n+                     type="hidden"\n+                     value=""\n+              />\n+              <input id="login_name"\n+                     name="login_name"\n+                     type="hidden"\n+                     value=""\n+              />\n+              <input id="pwd_empty"\n+                     name="pwd_empty"\n+                     type="hidden"\n+                     value="0"\n+              />\n+            </div>\n+            <div class="field"\n+                 tal:define="\n+                   use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];\n+                 "\n+            >\n+              <tal:loginname condition="not:use_email_as_login">\n+                <label for=""\n+                       tal:attributes="\n+                         for ac_name;\n+                       "\n+                       i18n:translate="label_login_name"\n+                >Login Name</label>\n+                <br />\n+                <input size="10"\n+                       type="text"\n+                       tal:attributes="\n+                         name ac_name;\n+                         id ac_name;\n+                         value python:request.get(ac_name, \'\');\n+                       "\n+                />\n+              </tal:loginname>\n+              <tal:email condition="use_email_as_login">\n+                <label for=""\n+                       tal:attributes="\n+                         for ac_name;\n+                       "\n+                       i18n:translate="label_email"\n+                >Email</label>\n+                <br />\n+                <input size="10"\n+                       type="text"\n+                       tal:attributes="\n+                         name ac_name;\n+                         id ac_name;\n+                         value python:request.get(ac_name, \'\');\n+                       "\n+                />\n+              </tal:email>\n+            </div>\n+            <div class="field">\n               <label for=""\n-                  tal:attributes="for ac_name"\n-                  i18n:translate="label_login_name">Login Name</label>\n+                     tal:attributes="\n+                       for ac_password;\n+                     "\n+                     i18n:translate="label_password"\n+              >Password</label>\n               <br />\n-              <input type="text"\n-                  size="10"\n-                  tal:attributes="name ac_name; id ac_name;\n-                                  value python:request.get(ac_name, \'\');" />\n-            </tal:loginname>\n-            <tal:email condition="use_email_as_login">\n-              <label for=""\n-                  tal:attributes="for ac_name"\n-                  i18n:translate="label_email">Email</label>\n-              <br />\n-              <input type="text"\n-                  size="10"\n-                  tal:attributes="name ac_name; id ac_name;\n-                                  value python:request.get(ac_name, \'\');" />\n-            </tal:email>\n-          </div>\n-          <div class="field">\n-            <label for=""\n-                tal:attributes="for ac_password"\n-                i18n:translate="label_password">Password</label>\n-            <br />\n-            <input type="password"\n-                size="10"\n-                tal:attributes="name ac_password; id ac_password;" />\n-          </div>\n-          <div class="cookiesMessage alert alert-warning"\n-              style="display:none" role="alert">\n-            <strong i18n:translate="">Warning</strong>\n-            <span i18n:translate="enable_cookies_message_before_login">\n+              <input size="10"\n+                     type="password"\n+                     tal:attributes="\n+                       name ac_password;\n+                       id ac_password;\n+                     "\n+              />\n+            </div>\n+            <div class="cookiesMessage alert alert-warning"\n+                 role="alert"\n+                 style="display:none"\n+            >\n+              <strong i18n:translate="">Warning</strong>\n+              <span i18n:translate="enable_cookies_message_before_login">\n               Cookies are not enabled. You must enable cookies before you\n               can log in.\n-            </span>\n-          </div>\n-          <div class="formControls">\n-            <input class="btn btn-primary"\n-                type="submit"\n-                name="submit"\n-                value="Log in"\n-                title="Log in"\n-                i18n:attributes="value label_log_in; title label_log_in;"/>\n-          </div>\n-        </form>\n+              </span>\n+            </div>\n+            <div class="formControls">\n+              <input class="btn btn-primary"\n+                     name="buttons.login"\n+                     title="Log in"\n+                     type="submit"\n+                     value="Log in"\n+                     i18n:attributes="value label_log_in; title label_log_in;"\n+              />\n+            </div>\n+          </form>\n+        </div>\n       </div>\n-    </div>\n \n-    <div class="card-footer">\n-      <div tal:condition="view/can_request_password">\n-        <a href="mail_password_form"\n-            class="tile"\n-            tal:attributes="href view/mail_password_form">\n-          <tal:block replace="structure context/info_icon.png"/>\n-          <span tal:omit-tag="" i18n:translate="box_forgot_password_option">Forgot your password?</span>\n-        </a>\n-      </div>\n-      <div tal:condition="view/can_register">\n-        <a href=""\n-            class="tile"\n-            tal:attributes="href view/join_action">\n-          <tal:block replace="structure context/user.png"/>\n-          <span tal:omit-tag="" i18n:translate="box_new_user_option">New user?</span>\n-        </a>\n+      <div class="card-footer">\n+        <div tal:condition="view/can_request_password">\n+          <a class="tile"\n+             href="mail_password_form"\n+             tal:attributes="\n+               href view/mail_password_form;\n+             "\n+          >\n+            <tal:block replace="structure context/info_icon.png" />\n+            <span tal:omit-tag=""\n+                  i18n:translate="box_forgot_password_option"\n+            >Forgot your password?</span>\n+          </a>\n+        </div>\n+        <div tal:condition="view/can_register">\n+          <a class="tile"\n+             href=""\n+             tal:attributes="\n+               href view/join_action;\n+             "\n+          >\n+            <tal:block replace="structure context/user.png" />\n+            <span tal:omit-tag=""\n+                  i18n:translate="box_new_user_option"\n+            >New user?</span>\n+          </a>\n+        </div>\n       </div>\n     </div>\n-  </div>\n \n-  <div class="card portlet portletLogin"\n-      tal:condition="not:view/available">\n+    <div class="card portlet portletLogin"\n+         tal:condition="not:view/available"\n+    >\n \n-    <div class="card-header">\n-      <a href="#"\n-          class="tile"\n-          i18n:translate="box_sign_in">Log in</a>\n-    </div>\n+      <div class="card-header">\n+        <a class="tile"\n+           href="#"\n+           i18n:translate="box_sign_in"\n+        >Log in</a>\n+      </div>\n \n-    <div class="card-body"\n-        i18n:translate="login_portlet_disabled">\n+      <div class="card-body"\n+           i18n:translate="login_portlet_disabled"\n+      >\n       Cookie authentication is disabled.\n       Login portlet not available.\n-    </div>\n+      </div>\n \n-  </div>\n+    </div>\n \n   </tal:block>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/app/portlets/portlets/login.py b/plone/app/portlets/portlets/login.py\nindex 3f6cc1ac..ab23fa6b 100644\n--- a/plone/app/portlets/portlets/login.py\n+++ b/plone/app/portlets/portlets/login.py\n@@ -14,7 +14,6 @@ class ILoginPortlet(IPortletDataProvider):\n \n @implementer(ILoginPortlet)\n class Assignment(base.Assignment):\n-\n     title = _("label_log_in", default="Log in")\n \n \ndiff --git a/plone/app/portlets/portlets/navigation.pt b/plone/app/portlets/portlets/navigation.pt\nindex 73555dcc..b661c2c6 100644\n--- a/plone/app/portlets/portlets/navigation.pt\n+++ b/plone/app/portlets/portlets/navigation.pt\n@@ -1,44 +1,63 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div class="card portlet portletNavigationTree"\n-      tal:define="root view/navigation_root"\n-      i18n:domain="plone">\n+       tal:define="\n+         root view/navigation_root;\n+       "\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header"\n-        tal:attributes="class python:view.hasName() and \'card-header\' or \'card-header hiddenStructure\'">\n-      <a href="#"\n-          class="tile"\n-          tal:attributes="href string:${view/heading_link_target}"\n-          tal:content="view/title"\n-          i18n:translate="">Navigation</a>\n+         tal:attributes="\n+           class python:view.hasName() and \'card-header\' or \'card-header hiddenStructure\';\n+         "\n+    >\n+      <a class="tile"\n+         href="#"\n+         tal:content="view/title"\n+         tal:attributes="\n+           href string:${view/heading_link_target};\n+         "\n+         i18n:translate=""\n+      >Navigation</a>\n     </div>\n \n     <nav class="card-body">\n       <ul class="navTree navTreeLevel0">\n-        <li tal:define="selectedClass view/root_item_class;\n-                        li_class python:selectedClass and \' navTreeCurrentNode\' or \'\';\n-                        normalizeString nocall:context/plone_utils/normalizeString;\n-                        section_title root/Title;\n-                        section python:normalizeString(section_title);"\n+        <li tal:define="\n+              selectedClass view/root_item_class;\n+              li_class python:selectedClass and \' navTreeCurrentNode\' or \'\';\n+              normalizeString nocall:context/plone_utils/normalizeString;\n+              section_title root/Title;\n+              section python:normalizeString(section_title);\n+            "\n             tal:condition="view/include_top"\n-            tal:attributes="class string:navTreeItem navTreeTopNode${li_class} nav-section-${section}">\n+            tal:attributes="\n+              class string:navTreeItem navTreeTopNode${li_class} nav-section-${section};\n+            "\n+        >\n           <div tal:define="\n-                  rootIsPortal view/root_is_portal;\n-                  root_type root/portal_type;\n-                  root_type_class python:\'contenttype-\' + normalizeString(root_type);\n-                  root_class python:rootIsPortal and \'contenttype-plone-site\' or root_type_class;\n-              ">\n-            <a tal:attributes="href root/absolute_url;\n-                              title root/Description;\n-                              class python:\' \'.join([root_class, selectedClass]).strip();">\n-              <span tal:omit-tag=""\n-                  tal:condition="rootIsPortal"\n-                  i18n:translate="tabs_home">Home</span>\n+                 rootIsPortal view/root_is_portal;\n+                 root_type root/portal_type;\n+                 root_type_class python:\'contenttype-\' + normalizeString(root_type);\n+                 root_class python:rootIsPortal and \'contenttype-plone-site\' or root_type_class;\n+               ">\n+            <a tal:attributes="\n+                 href root/absolute_url;\n+                 title root/Description;\n+                 class python:\' \'.join([root_class, selectedClass]).strip();\n+               ">\n+              <span tal:condition="rootIsPortal"\n+                    tal:omit-tag=""\n+                    i18n:translate="tabs_home"\n+              >Home</span>\n               <span tal:condition="not:rootIsPortal"\n-                  tal:replace="root/Title">Root item title</span>\n+                    tal:replace="root/Title"\n+              >Root item title</span>\n             </a>\n           </div>\n         </li>\ndiff --git a/plone/app/portlets/portlets/navigation.py b/plone/app/portlets/portlets/navigation.py\nindex 4d5c4f4c..f1fc0819 100644\n--- a/plone/app/portlets/portlets/navigation.py\n+++ b/plone/app/portlets/portlets/navigation.py\n@@ -12,6 +12,11 @@\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.app.uuid.utils import uuidToObject\n from plone.app.vocabularies.catalog import CatalogSource\n+from plone.base.defaultpage import is_default_page\n+from plone.base.interfaces import INavigationSchema\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import ISiteSchema\n+from plone.base.utils import safe_callable\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n@@ -19,14 +24,9 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone import utils\n from Products.CMFPlone.browser.navtree import SitemapNavtreeStrategy\n-from Products.CMFPlone.defaultpage import is_default_page\n-from Products.CMFPlone.interfaces import INavigationSchema\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from Products.CMFPlone.utils import typesToList\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zExceptions import NotFound\n from zope import schema\n from zope.component import adapter\n@@ -36,8 +36,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import os\n-\n \n class INavigationPortlet(IPortletDataProvider):\n     """A portlet which can render the navigation tree"""\n@@ -149,7 +147,6 @@ class INavigationPortlet(IPortletDataProvider):\n \n @implementer(INavigationPortlet)\n class Assignment(base.Assignment):\n-\n     name = ""\n     root = None\n     root_uid = None\n@@ -414,7 +411,7 @@ def __init__(self, context, portlet):\n \n         # Acquire a custom nav query if available\n         customQuery = getattr(context, "getCustomNavQuery", None)\n-        if customQuery is not None and utils.safe_callable(customQuery):\n+        if customQuery is not None and safe_callable(customQuery):\n             query = customQuery()\n         else:\n             query = {}\n@@ -444,7 +441,7 @@ def __init__(self, context, portlet):\n         # seem to work with EPI.\n \n         # Only list the applicable types\n-        query["portal_type"] = utils.typesToList(context)\n+        query["portal_type"] = typesToList(context)\n \n         # Apply the desired sort\n         sortAttribute = navtree_properties.getProperty("sortAttribute", None)\n@@ -483,13 +480,12 @@ def __init__(self, context, portlet):\n \n     def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n-        if sitemapDecision == False:\n+        if not sitemapDecision:\n             return False\n         depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n-        else:\n-            return True\n+        return True\n \n \n def getRootPath(context, currentFolderOnly, topLevel, root):\ndiff --git a/plone/app/portlets/portlets/navigation_recurse.pt b/plone/app/portlets/portlets/navigation_recurse.pt\nindex 8b6a9d28..b7a52d86 100644\n--- a/plone/app/portlets/portlets/navigation_recurse.pt\n+++ b/plone/app/portlets/portlets/navigation_recurse.pt\n@@ -1,61 +1,82 @@\n-<tal:master define="level options/level | python:0;\n-                    children options/children | nothing;\n-                    bottomLevel options/bottomLevel | nothing;\n-                    supress_icon    view/data/no_icons;\n-                    supress_thumb   view/data/no_thumbs;\n-                    thumb_scale view/thumb_scale;\n-                    icons nocall:context/@@iconresolver;\n-                    normalizeString nocall: context/plone_utils/normalizeString;"\n-            i18n:domain="plone">\n-\n-<metal:main define-macro="nav_main"\n-\t   tal:define="portal context/@@plone_portal_state/portal;\n-                   image_scale portal/@@image_scale">\n-<tal:navitem repeat="node children">\n-<li tal:define="show_children   node/show_children;\n-                children        node/children;\n-                item_url        node/getURL;\n-                item_remote_url node/getRemoteUrl;\n-                use_remote_url  node/useRemoteUrl | nothing;\n-                item_type       node/portal_type;\n-                item            node/item;\n-                has_thumb       item/getIcon;\n-                is_current      node/currentItem;\n-                is_in_path      node/currentParent;\n-                li_class        python:\' navTreeCurrentNode\' if is_current else \'\';\n-                li_extr_class   python:\' navTreeItemInPath\' if is_in_path else \'\';\n-                li_folder_class python:\' navTreeFolderish\' if show_children else \'\';"\n-    tal:condition="python:bottomLevel &lt;= 0 or level &lt;= bottomLevel"\n-    tal:attributes="class string:navTreeItem visualNoMarker${li_class}${li_extr_class}${li_folder_class} section-${node/normalized_id}">\n-\n-    <tal:level define="item_class string:state-${node/normalized_review_state};\n-                       item_type_class python:\'contenttype-%s\' % normalizeString(item_type) if not supress_icon else \'\';\n-                       item_class python:\'%s navTreeCurrentItem\' % item_class if is_current else item_class">\n-\n-        <a tal:attributes="href  python:item_remote_url if use_remote_url else item_url;\n-                           title node/Description;\n-                           class string:${item_class}${li_class}${li_extr_class}${li_folder_class} ${item_type_class}">\n+<tal:master define="\n+              level options/level | python:0;\n+              children options/children | nothing;\n+              bottomLevel options/bottomLevel | nothing;\n+              supress_icon    view/data/no_icons;\n+              supress_thumb   view/data/no_thumbs;\n+              thumb_scale view/thumb_scale;\n+              icons nocall:context/@@iconresolver;\n+              normalizeString nocall: context/plone_utils/normalizeString;\n+            "\n+            i18n:domain="plone"\n+>\n+\n+  <metal:main define-macro="nav_main"\n+              tal:define="\n+                portal context/@@plone_portal_state/portal;\n+                image_scale portal/@@image_scale;\n+              "\n+  >\n+    <tal:navitem repeat="node children">\n+      <li tal:define="\n+            show_children   node/show_children;\n+            children        node/children;\n+            item_url        node/getURL;\n+            item_remote_url node/getRemoteUrl;\n+            use_remote_url  node/useRemoteUrl | nothing;\n+            item_type       node/portal_type;\n+            item            node/item;\n+            has_thumb       item/getIcon;\n+            is_current      node/currentItem;\n+            is_in_path      node/currentParent;\n+            li_class        python:\' navTreeCurrentNode\' if is_current else \'\';\n+            li_extr_class   python:\' navTreeItemInPath\' if is_in_path else \'\';\n+            li_folder_class python:\' navTreeFolderish\' if show_children else \'\';\n+          "\n+          tal:condition="python:bottomLevel &lt;= 0 or level &lt;= bottomLevel"\n+          tal:attributes="\n+            class string:navTreeItem visualNoMarker${li_class}${li_extr_class}${li_folder_class} section-${node/normalized_id};\n+          "\n+      >\n+\n+        <tal:level define="\n+                     item_class string:state-${node/normalized_review_state};\n+                     item_type_class python:\'contenttype-%s\' % normalizeString(item_type) if not supress_icon else \'\';\n+                     item_class python:\'%s navTreeCurrentItem\' % item_class if is_current else item_class;\n+                   ">\n+\n+          <a tal:attributes="\n+               href  python:item_remote_url if use_remote_url else item_url;\n+               title node/Description;\n+               class string:${item_class}${li_class}${li_extr_class}${li_folder_class} ${item_type_class};\n+             ">\n \n             <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n+                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')"\n+            />\n \n             <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'mimetype-{item.mime_type}\')" />\n+                      tal:replace="structure python:icons.tag(f\'mimetype-{item.mime_type}\')"\n+            />\n \n             <img tal:condition="python:has_thumb and thumb_scale"\n-                 tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)">\n+                 tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)"\n+            />\n \n             <span tal:replace="node/Title">Selected Item Title</span>\n-        </a>\n-        <tal:children condition="children">\n-            <ul tal:attributes="class string:navTree navTreeLevel${level}"\n-                tal:condition="python: children and show_children and bottomLevel and level < bottomLevel or bottomLevel == 0">\n-                <span tal:replace="structure python:view.recurse(children=children, level=level+1, bottomLevel=bottomLevel)" />\n+          </a>\n+          <tal:children condition="children">\n+            <ul tal:condition="python: children and show_children and bottomLevel and level &lt; bottomLevel or bottomLevel == 0"\n+                tal:attributes="\n+                  class string:navTree navTreeLevel${level};\n+                "\n+            >\n+              <span tal:replace="structure python:view.recurse(children=children, level=level+1, bottomLevel=bottomLevel)"></span>\n             </ul>\n-        </tal:children>\n+          </tal:children>\n \n-    </tal:level>\n-</li>\n-</tal:navitem>\n-</metal:main>\n+        </tal:level>\n+      </li>\n+    </tal:navitem>\n+  </metal:main>\n </tal:master>\ndiff --git a/plone/app/portlets/portlets/news.pt b/plone/app/portlets/portlets/news.pt\nindex 3b53a00b..1dc0c9c9 100644\n--- a/plone/app/portlets/portlets/news.pt\n+++ b/plone/app/portlets/portlets/news.pt\n@@ -1,58 +1,86 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div class="card portlet portletNews"\n-      i18n:domain="plone">\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header">\n-      <a href="#"\n-          class="tile"\n-          tal:define="all_news_link view/all_news_link"\n-          tal:omit-tag="not:all_news_link"\n-          tal:attributes="href all_news_link"\n-          i18n:translate="box_news">News</a>\n+      <a class="tile"\n+         href="#"\n+         tal:define="\n+           all_news_link view/all_news_link;\n+         "\n+         tal:omit-tag="not:all_news_link"\n+         tal:attributes="\n+           href all_news_link;\n+         "\n+         i18n:translate="box_news"\n+      >News</a>\n     </div>\n \n     <div class="card-body"\n-        tal:define="thumb_scale view/thumb_scale;\n-                    supress_thumb view/data/no_thumbs;">\n+         tal:define="\n+           thumb_scale view/thumb_scale;\n+           supress_thumb view/data/no_thumbs;\n+         "\n+    >\n       <ul>\n-        <tal:newsitems\n-            tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                        plone_layout context/@@plone_layout;\n-                        portal context/@@plone_portal_state/portal;\n-                        image_scale portal/@@image_scale;\n-                        thumb_scale view/thumb_scale"\n-            tal:repeat="obj view/published_news_items">\n-        <li tal:define="oddrow repeat/obj/odd;"\n-            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n-          <a href=""\n-              class="tile"\n-              tal:attributes="href obj/getURL;\n-                              title obj/Description">\n-            <img tal:condition="python:obj.getIcon and thumb_scale"\n-                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n-            <span tal:replace="obj/pretty_title_or_id">Plone 5.1 announced!</span>\n-          </a>\n-          <time class="portletItemDetails"\n-              tal:content="python:toLocalizedTime(obj.Date)">May 5</time>\n-        </li>\n+        <tal:newsitems tal:define="\n+                         toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n+                         plone_layout context/@@plone_layout;\n+                         portal context/@@plone_portal_state/portal;\n+                         image_scale portal/@@image_scale;\n+                         thumb_scale view/thumb_scale;\n+                       "\n+                       tal:repeat="obj view/published_news_items"\n+        >\n+          <li tal:define="\n+                oddrow repeat/obj/odd;\n+              "\n+              tal:attributes="\n+                class python:oddrow and \'portletItem even\' or \'portletItem odd\';\n+              "\n+          >\n+            <a class="tile"\n+               href=""\n+               tal:attributes="\n+                 href obj/getURL;\n+                 title obj/Description;\n+               "\n+            >\n+              <img tal:condition="python:obj.getIcon and thumb_scale"\n+                   tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)"\n+              />\n+              <span tal:replace="obj/pretty_title_or_id">Plone 5.1 announced!</span>\n+            </a>\n+            <time class="portletItemDetails"\n+                  tal:content="python:toLocalizedTime(obj.Date)"\n+            >May 5</time>\n+          </li>\n         </tal:newsitems>\n       </ul>\n     </div>\n \n     <div class="card-footer portletFooter"\n-        tal:condition="view/all_news_link">\n+         tal:condition="view/all_news_link"\n+    >\n       <a href=""\n-          tal:attributes="href view/all_news_link"\n-          i18n:translate="box_more_news_link">\n+         tal:attributes="\n+           href view/all_news_link;\n+         "\n+         i18n:translate="box_more_news_link"\n+      >\n         More news&hellip;\n       </a>\n     </div>\n-    <div class="card-footer" tal:condition="not:view/all_news_link"></div>\n+    <div class="card-footer"\n+         tal:condition="not:view/all_news_link"\n+    ></div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/app/portlets/portlets/news.py b/plone/app/portlets/portlets/news.py\nindex 0075ee9d..ebb7d97b 100644\n--- a/plone/app/portlets/portlets/news.py\n+++ b/plone/app/portlets/portlets/news.py\n@@ -5,13 +5,13 @@\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.app.z3cform.widget import SelectFieldWidget\n from plone.autoform.directives import widget\n+from plone.base.interfaces import ISiteSchema\n from plone.memoize import ram\n from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n from zope.component import getMultiAdapter\n@@ -20,7 +20,6 @@\n \n \n class INewsPortlet(IPortletDataProvider):\n-\n     count = schema.Int(\n         title=_("Number of items to display"),\n         description=_("How many items to list."),\n@@ -60,7 +59,6 @@ class INewsPortlet(IPortletDataProvider):\n \n @implementer(INewsPortlet)\n class Assignment(base.Assignment):\n-\n     thumb_scale = None\n     no_thumbs = False\n \n@@ -78,7 +76,6 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     _template = ViewPageTemplateFile("news.pt")\n \n     def __init__(self, *args):\ndiff --git a/plone/app/portlets/portlets/recent.pt b/plone/app/portlets/portlets/recent.pt\nindex d7ce3ed1..ac9dc4f6 100644\n--- a/plone/app/portlets/portlets/recent.pt\n+++ b/plone/app/portlets/portlets/recent.pt\n@@ -1,56 +1,89 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag=""\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n   <div class="card portlet portletRecent">\n \n     <div class="card-header">\n-      <a href="#" tal:attributes="href view/recently_modified_link" i18n:translate="" tal:content="view/title" />\n+      <a href="#"\n+         tal:content="view/title"\n+         tal:attributes="\n+           href view/recently_modified_link;\n+         "\n+         i18n:translate=""\n+      ></a>\n     </div>\n \n-    <div class="card-body" tal:condition="view/recent_items"\n-        tal:define="plone_layout context/@@plone_layout;\n-                    portal context/@@plone_portal_state/portal;\n-                    image_scale portal/@@image_scale;\n-                    supress_icon view/data/no_icons;\n-                    supress_thumb view/data/no_thumbs;\n-                    thumb_scale view/thumb_scale;\n-                    icons nocall:context/@@iconresolver;">\n+    <div class="card-body"\n+         tal:define="\n+           plone_layout context/@@plone_layout;\n+           portal context/@@plone_portal_state/portal;\n+           image_scale portal/@@image_scale;\n+           supress_icon view/data/no_icons;\n+           supress_thumb view/data/no_thumbs;\n+           thumb_scale view/thumb_scale;\n+           icons nocall:context/@@iconresolver;\n+         "\n+         tal:condition="view/recent_items"\n+    >\n       <ul>\n-        <tal:items\n-            tal:define="plone_view context/@@plone;\n-                        normalizeString nocall:plone_view/normalizeString;\n-                        toLocalizedTime nocall:plone_view/toLocalizedTime;"\n-            tal:repeat="obj view/recent_items">\n-        <li tal:define="oddrow repeat/obj/odd;\n-                        item_type obj/portal_type;\n-                        item_wf_state obj/review_state;\n-                        item_wf_state_class python:\'state-\' + normalizeString(item_wf_state);\n-                        item_class python:\'contenttype-\' + normalizeString(obj.portal_type) if not supress_icon else \'\';">\n-          <a href="" tal:attributes="href string:${obj/getURL}/view; title obj/Description; class string:$item_wf_state_class tile $item_class">\n-\n-            <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n-            <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')" />\n-\n-            <img tal:condition="python:obj.getIcon and thumb_scale and not supress_thumb and image_scale" tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n-            <span tal:content="obj/pretty_title_or_id">Title</span>\n-          </a>\n-          <time tal:content="python:toLocalizedTime(obj.ModificationDate)">May 5</time>\n-        </li>\n+        <tal:items tal:define="\n+                     plone_view context/@@plone;\n+                     normalizeString nocall:plone_view/normalizeString;\n+                     toLocalizedTime nocall:plone_view/toLocalizedTime;\n+                   "\n+                   tal:repeat="obj view/recent_items"\n+        >\n+          <li tal:define="\n+                oddrow repeat/obj/odd;\n+                item_type obj/portal_type;\n+                item_wf_state obj/review_state;\n+                item_wf_state_class python:\'state-\' + normalizeString(item_wf_state);\n+                item_class python:\'contenttype-\' + normalizeString(obj.portal_type) if not supress_icon else \'\';\n+              ">\n+            <a href=""\n+               tal:attributes="\n+                 href string:${obj/getURL}/view;\n+                 title obj/Description;\n+                 class string:$item_wf_state_class tile $item_class;\n+               "\n+            >\n+\n+              <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n+                        tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')"\n+              />\n+              <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n+                        tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')"\n+              />\n+\n+              <img tal:condition="python:obj.getIcon and thumb_scale and not supress_thumb and image_scale"\n+                   tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)"\n+              />\n+              <span tal:content="obj/pretty_title_or_id">Title</span>\n+            </a>\n+            <time tal:content="python:toLocalizedTime(obj.ModificationDate)">May 5</time>\n+          </li>\n         </tal:items>\n       </ul>\n     </div>\n \n-    <div class="card-body" tal:condition="not: view/recent_items">\n+    <div class="card-body"\n+         tal:condition="not: view/recent_items"\n+    >\n       <p i18n:translate="box_recent_no_items">No items changed yet.</p>\n     </div>\n \n     <div class="card-footer">\n-      <a href="#" class="tile" tal:attributes="href view/recently_modified_link" i18n:translate="box_more_recently_changed">All recent changes&hellip;</a>\n+      <a class="tile"\n+         href="#"\n+         tal:attributes="\n+           href view/recently_modified_link;\n+         "\n+         i18n:translate="box_more_recently_changed"\n+      >All recent changes&hellip;</a>\n     </div>\n   </div>\n \ndiff --git a/plone/app/portlets/portlets/recent.py b/plone/app/portlets/portlets/recent.py\nindex 1893c525..05e7d74a 100644\n--- a/plone/app/portlets/portlets/recent.py\n+++ b/plone/app/portlets/portlets/recent.py\n@@ -3,13 +3,13 @@\n from ..portlets import base\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from plone.memoize import ram\n from plone.memoize.compress import xhtml_compress\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zope import schema\n@@ -21,7 +21,6 @@\n \n \n class IRecentPortlet(IPortletDataProvider):\n-\n     count = schema.Int(\n         title=_("Number of items to display"),\n         description=_("How many items to list."),\n@@ -61,6 +60,7 @@ class IRecentPortlet(IPortletDataProvider):\n class Assignment(base.Assignment):\n     no_icons = False\n     thumb_scale = None\n+    no_thumbs = False\n \n     def __init__(self, count=5, no_icons=False, thumb_scale=None, no_thumbs=False):\n         self.count = count\ndiff --git a/plone/app/portlets/portlets/review.pt b/plone/app/portlets/portlets/review.pt\nindex c3b16cf5..e0bd4c52 100644\n--- a/plone/app/portlets/portlets/review.pt\n+++ b/plone/app/portlets/portlets/review.pt\n@@ -1,63 +1,89 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div class="card portlet portletWorkflowReview"\n-      i18n:domain="plone">\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header">\n-      <a href="#"\n-          class="tile"\n-          tal:define="full_review_link view/full_review_link"\n-          tal:omit-tag="not:full_review_link"\n-          tal:attributes="href full_review_link"\n-          i18n:translate=""\n-          tal:content="view/title" />\n+      <a class="tile"\n+         href="#"\n+         tal:define="\n+           full_review_link view/full_review_link;\n+         "\n+         tal:content="view/title"\n+         tal:omit-tag="not:full_review_link"\n+         tal:attributes="\n+           href full_review_link;\n+         "\n+         i18n:translate=""\n+      ></a>\n     </div>\n \n     <div class="card-body"\n-        tal:define="supress_icon    view/data/no_icons;\n-                    supress_thumb   view/data/no_thumbs;\n-                    thumb_scale python:view.thumb_scale();\n-                    ">\n+         tal:define="\n+           supress_icon    view/data/no_icons;\n+           supress_thumb   view/data/no_thumbs;\n+           thumb_scale python:view.thumb_scale();\n+         "\n+    >\n       <ul>\n         <tal:items tal:repeat="obj view/review_items">\n-        <li class="portletItem"\n-            tal:define="oddrow repeat/obj/odd;\n-                        review_state_class obj/review_state_class;\n-                        image obj/images;\n-                        hasImage obj/hasImage;\n-                        item_class python: obj[\'item_class\'] if not supress_icon else \'\';"\n-            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n-\n-          <a href="#"\n-              tal:attributes="href string:${obj/path}/view;\n-                              title obj/description;\n-                              class string:$review_state_class tile $item_class">\n-            <img tal:condition="python:not supress_thumb and hasImage and thumb_scale"\n-                tal:replace="structure python:image.scale(\'image\', scale=thumb_scale).tag(css_class=\'float-end thumb-\'+thumb_scale)"/>\n-            <span tal:replace="obj/title">Title</span>\n-          </a>\n-          <span class="portletItemDetails">\n-              <span tal:replace="obj/creator">Jim Smith</span> &mdash;\n-              <time tal:replace="obj/mod_date"> May 5</time>\n-          </span>\n-\n-        </li>\n+          <li class="portletItem"\n+              tal:define="\n+                oddrow repeat/obj/odd;\n+                review_state_class obj/review_state_class;\n+                image obj/images;\n+                hasImage obj/hasImage;\n+                item_class python: obj[\'item_class\'] if not supress_icon else \'\';\n+              "\n+              tal:attributes="\n+                class python:oddrow and \'portletItem even\' or \'portletItem odd\';\n+              "\n+          >\n+\n+            <a href="#"\n+               tal:attributes="\n+                 href string:${obj/path}/view;\n+                 title obj/description;\n+                 class string:$review_state_class tile $item_class;\n+               "\n+            >\n+              <img tal:condition="python:not supress_thumb and hasImage and thumb_scale"\n+                   tal:replace="structure python:image.scale(\'image\', scale=thumb_scale).tag(css_class=\'float-end thumb-\'+thumb_scale)"\n+              />\n+              <span tal:replace="obj/title">Title</span>\n+            </a>\n+            <span class="portletItemDetails">\n+              <span tal:replace="obj/creator">Jim Smith</span>\n+               &mdash;\n+              <time tal:replace="obj/mod_date">\n+                May 5</time>\n+            </span>\n+\n+          </li>\n         </tal:items>\n       </ul>\n     </div>\n \n     <div class="card-footer"\n-        tal:define="full_review_link view/full_review_link"\n-        tal:condition="full_review_link">\n-      <a href="#"\n-          class="tile"\n-          tal:attributes="href full_review_link"\n-          i18n:translate="box_full_review_list">Full review list&hellip;</a>\n+         tal:define="\n+           full_review_link view/full_review_link;\n+         "\n+         tal:condition="full_review_link"\n+    >\n+      <a class="tile"\n+         href="#"\n+         tal:attributes="\n+           href full_review_link;\n+         "\n+         i18n:translate="box_full_review_list"\n+      >Full review list&hellip;</a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/app/portlets/portlets/review.py b/plone/app/portlets/portlets/review.py\nindex cba8d97f..feb83225 100644\n--- a/plone/app/portlets/portlets/review.py\n+++ b/plone/app/portlets/portlets/review.py\n@@ -1,24 +1,23 @@\n from .. import PloneMessageFactory as _\n from ..browser import formhelper\n from ..portlets import base\n+from Acquisition import aq_base\n from Acquisition import aq_inner\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.instance import memoize\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n from zope.interface import implementer\n-from zope.interface import Interface\n \n \n class IReviewPortlet(IPortletDataProvider):\n-\n     no_icons = schema.Bool(\n         title=_("Suppress Icons"),\n         description=_("If enabled, the portlet will not show document type icons"),\n@@ -63,7 +62,6 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     render = ViewPageTemplateFile("review.pt")\n \n     title = _("box_review_list", default="Review List")\n@@ -118,7 +116,7 @@ def _data(self):\n                 creator_name = creator.getProperty("fullname", "") or creator_id\n             else:\n                 creator_name = creator_id\n-            hasImage = True if getattr(obj, "image", None) else False\n+            hasImage = True if getattr(aq_base(obj), "image", None) else False\n             images = obj.restrictedTraverse("@@images") if hasImage else None\n             items.append(\n                 dict(\ndiff --git a/plone/app/portlets/portlets/rss.pt b/plone/app/portlets/portlets/rss.pt\nindex 66b9ec21..853ac0c4 100644\n--- a/plone/app/portlets/portlets/rss.pt\n+++ b/plone/app/portlets/portlets/rss.pt\n@@ -1,52 +1,78 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div class="card portlet portletRss"\n-      i18n:domain="plone"\n-      tal:condition="view/enabled">\n+       tal:condition="view/enabled"\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header">\n-      <a href=""\n-          tal:attributes="href view/siteurl"\n-          tal:omit-tag="not:view/siteurl"\n-          tal:content="view/title"\n-          class="tile">\n+      <a class="tile"\n+         href=""\n+         tal:content="view/title"\n+         tal:omit-tag="not:view/siteurl"\n+         tal:attributes="\n+           href view/siteurl;\n+         "\n+      >\n         Tags\n       </a>\n     </div>\n \n-    <div class="card-body" >\n+    <div class="card-body">\n       <ul tal:condition="view/feedAvailable">\n-        <tal:rss tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime"\n-            tal:repeat="item view/items">\n-        <li class="portletItem oddrow"\n-            tal:define="oddrow repeat/item/odd"\n-            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n-          <a href="#"\n-              tal:attributes="href item/url"\n-              class="tile">\n-            <span tal:replace="item/title">Title</span>\n-          </a>\n-          <time class="portletItemDetails"\n-              tal:condition="exists:item/updated">\n-            <span tal:omit-tag="" tal:content="python:toLocalizedTime(item[\'updated\'])">19.02.2007</span>\n-          </time>\n-        </li>\n+        <tal:rss tal:define="\n+                   toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n+                 "\n+                 tal:repeat="item view/items"\n+        >\n+          <li class="portletItem oddrow"\n+              tal:define="\n+                oddrow repeat/item/odd;\n+              "\n+              tal:attributes="\n+                class python:oddrow and \'portletItem even\' or \'portletItem odd\';\n+              "\n+          >\n+            <a class="tile"\n+               href="#"\n+               tal:attributes="\n+                 href item/url;\n+               "\n+            >\n+              <span tal:replace="item/title">Title</span>\n+            </a>\n+            <time class="portletItemDetails"\n+                  tal:condition="exists:item/updated"\n+            >\n+              <span tal:content="python:toLocalizedTime(item[\'updated\'])"\n+                    tal:omit-tag=""\n+              >19.02.2007</span>\n+            </time>\n+          </li>\n         </tal:rss>\n       </ul>\n     </div>\n \n-    <div class="card-footer" tal:condition="view/feedAvailable">\n+    <div class="card-footer"\n+         tal:condition="view/feedAvailable"\n+    >\n       <a href=""\n-          tal:condition="view/siteurl"\n-          tal:attributes="href view/siteurl">\n-        <span class="hiddenStructure"><span tal:replace="view/title" /> - </span>\n+         tal:condition="view/siteurl"\n+         tal:attributes="\n+           href view/siteurl;\n+         "\n+      >\n+        <span class="hiddenStructure"><span tal:replace="view/title"></span>\n+          -\n+        </span>\n         <span i18n:translate="box_morelink">More&hellip;</span>\n       </a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/app/portlets/portlets/rss.py b/plone/app/portlets/portlets/rss.py\nindex c53a37bd..655c4862 100644\n--- a/plone/app/portlets/portlets/rss.py\n+++ b/plone/app/portlets/portlets/rss.py\n@@ -127,7 +127,7 @@ def update(self):\n             # check for regular update\n             if self.needs_update:\n                 return self._retrieveFeed()\n-        except:\n+        except Exception:\n             self._failed = True\n             logger.exception("failed to update RSS feed %s", self.url)\n \n@@ -235,7 +235,6 @@ def siteurl(self):\n \n \n class IRSSPortlet(IPortletDataProvider):\n-\n     portlet_title = schema.TextLine(\n         title=_("Title"),\n         description=_(\n@@ -269,7 +268,6 @@ class IRSSPortlet(IPortletDataProvider):\n \n @implementer(IRSSPortlet)\n class Assignment(base.Assignment):\n-\n     portlet_title = ""\n \n     @property\n@@ -289,7 +287,6 @@ def __init__(self, portlet_title="", count=5, url="", timeout=100):\n \n \n class Renderer(base.DeferredRenderer):\n-\n     render_full = ZopeTwoPageTemplateFile("rss.pt")\n \n     @property\ndiff --git a/plone/app/portlets/portlets/search.pt b/plone/app/portlets/portlets/search.pt\nindex 7d1289f4..38eecebd 100644\n--- a/plone/app/portlets/portlets/search.pt\n+++ b/plone/app/portlets/portlets/search.pt\n@@ -1,40 +1,70 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       tal:omit-tag=""\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n   <div class="card portlet portletSearch">\n \n     <div class="card-header">\n-      <a class="tile" tal:attributes="href view/search_action">\n-        <tal:header condition="not:view/data/title|nothing" i18n:translate="box_search">Search</tal:header>\n-        <tal:header condition="view/data/title|nothing" tal:content="view/data/title">Search</tal:header>\n+      <a class="tile"\n+         tal:attributes="\n+           href view/search_action;\n+         "\n+      >\n+        <tal:header condition="not:view/data/title|nothing"\n+                    i18n:translate="box_search"\n+        >Search</tal:header>\n+        <tal:header condition="view/data/title|nothing"\n+                    tal:content="view/data/title"\n+        >Search</tal:header>\n       </a>\n     </div>\n \n     <div class="card-body">\n-      <form id="searchform" action="search"\n-          style="min-width: auto;"\n-          tal:define="livesearch view/enable_livesearch;"\n-          tal:attributes="action view/search_action;\n-                          data-action view/action;\n-                          class python: view.enable_livesearch() and \'pat-livesearch\' or None;\n-                          data-pat-livesearch python: view.enable_livesearch() and \'ajaxUrl:\' + view.navigation_root_url + \'/@@ajax-search\' or None;">\n+      <form id="searchform"\n+            action="search"\n+            style="min-width: auto;"\n+            tal:define="\n+              livesearch view/enable_livesearch;\n+            "\n+            tal:attributes="\n+              action view/search_action;\n+              data-action view/action;\n+              class python: view.enable_livesearch() and \'pat-livesearch\' or None;\n+              data-pat-livesearch python: view.enable_livesearch() and \'ajaxUrl:\' + view.navigation_root_url + \'/@@ajax-search\' or None;\n+            "\n+      >\n         <div class="LSBox">\n           <div class="input-group">\n             <input class="form-control"\n-                name="SearchableText"\n-                type="text"\n-                title="Search Site"\n-                placeholder="Search Site"\n-                i18n:attributes="title title_search_title; placeholder title_search_site"\n-                tal:attributes="value request/SearchableText|nothing; class python:livesearch and \'form-control portlet-search-gadget\' or \'form-control portlet-search-gadget-nols\'"/>\n+                   name="SearchableText"\n+                   placeholder="Search Site"\n+                   title="Search Site"\n+                   type="text"\n+                   tal:attributes="\n+                     value request/SearchableText|nothing;\n+                     class python:livesearch and \'form-control portlet-search-gadget\' or \'form-control portlet-search-gadget-nols\';\n+                   "\n+                   i18n:attributes="title title_search_title; placeholder title_search_site"\n+            />\n             <div class="input-group-append">\n-              <button type="submit" class="btn btn-primary" value="Search" i18n:attributes="value label_search" i18n:translate="label_submit">Submit</button>\n+              <button class="btn btn-primary"\n+                      type="submit"\n+                      value="Search"\n+                      i18n:attributes="value label_search"\n+                      i18n:translate="label_submit"\n+              >Submit</button>\n             </div>\n           </div>\n-          <div class="LSResult" style="" tal:condition="livesearch" tal:attributes="data-livesearch view/livesearch_action;">\n+          <div class="LSResult"\n+               style=""\n+               tal:condition="livesearch"\n+               tal:attributes="\n+                 data-livesearch view/livesearch_action;\n+               "\n+          >\n             <div class="LSShadow"></div>\n           </div>\n         </div>\n@@ -42,7 +72,12 @@\n     </div>\n \n     <div class="card-footer">\n-      <a href="#" tal:attributes="href view/search_action" i18n:translate="label_advanced_search">Advanced Search&hellip;</a>\n+      <a href="#"\n+         tal:attributes="\n+           href view/search_action;\n+         "\n+         i18n:translate="label_advanced_search"\n+      >Advanced Search&hellip;</a>\n     </div>\n \n   </div>\ndiff --git a/plone/app/portlets/portlets/search.py b/plone/app/portlets/portlets/search.py\nindex db7b3a68..18a45998 100644\n--- a/plone/app/portlets/portlets/search.py\n+++ b/plone/app/portlets/portlets/search.py\n@@ -34,7 +34,6 @@ def title(self):\n \n \n class Renderer(base.Renderer):\n-\n     render = ViewPageTemplateFile("search.pt")\n     action = "@@search"\n     livesearch_action = "livesearch_reply"\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex f37875e6..f72fad39 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -7,7 +7,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.testing import z2\n+from plone.testing import zope\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n \n@@ -15,11 +15,10 @@\n \n \n class PloneAppPortlets(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        z2.installProduct(app, "plone.app.portlets")\n+        zope.installProduct(app, "plone.app.portlets")\n \n         # Include testing profile\n         import plone.app.portlets\ndiff --git a/plone/app/portlets/tests/atom_feed_maurits.xml b/plone/app/portlets/tests/atom_feed_maurits.xml\nindex 7655d714..83c90123 100644\n--- a/plone/app/portlets/tests/atom_feed_maurits.xml\n+++ b/plone/app/portlets/tests/atom_feed_maurits.xml\n@@ -1,1520 +1 @@\n-<?xml version="1.0" ?>\n <?xml-stylesheet href="atom.css" type="text/css"?>\n-\n-<feed xmlns="http://www.w3.org/2005/Atom"\n-      xmlns:atom="http://www.w3.org/2005/Atom"\n-      xmlns:dc="http://purl.org/dc/elements/1.1/"\n-      xml:base="https://maurits.vanrees.org" xml:lang="en">\n-  <link rel="self"\n-        href="https://maurits.vanrees.org/weblog/topics/plone/@@atom.xml" />\n-  <div xmlns="http://www.w3.org/1999/xhtml">\n-    <a href="http://www.atomenabled.org/feedvalidator/check.cgi?url=https://maurits.vanrees.org/weblog/atom.xml">\n-      <img title="Validate my Atom feed" width="88"\n-           height="31"\n-           src="http://www.atomenabled.org/feedvalidator/images/valid-atom.png"\n-           alt="[Valid Atom]" border="0px" />\n-    </a>\n-    <p>\n-      <span>\n-        This is an Atom formatted XML site feed. It is intended to be viewed in\n-        a Newsreader or syndicated to another site. Please visit\n-      </span>\n-      <a href="http://www.atomenabled.org/">Atom Enabled</a>\n-      <span>\n-        for more info.\n-      </span>\n-    </p>\n-  </div>\n-\n-  <title type="html">Weblog</title>\n-\n-\n-  <updated>2021-01-05T10:33:42+00:00</updated>\n-\n-  <link href="https://maurits.vanrees.org/weblog"\n-        rel="alternate" type="text/html" />\n-\n-\n-\n-  <id>urn:syndication:3a1d81067fb16b9d671c9ee4a6efa204</id>\n-\n-  <generator uri="http://plone.org/products/fatsyndication/" version="0.1">fatsyndication</generator>\n-\n-\n-\n-    <entry>\n-\n-      <title>Philip Bauer: Growing Pains: PosKeyErrors and Other Malaises</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/philip-bauer-growing-pains-poskeyerrors-and-other-malaises" />\n-\n-\n-\n-      <id>urn:syndication:a2e343ca7c1c64182bc128b9a4f0be0b</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>This talk is about the issues that you face when your project grows, the code base grows, the database grows, the problems grow.\n-This is about the causes and some of the remedies.</p>\n-<div class="section" id="symptom-1-huge-database">\n-<h3><a name="symptom-1-huge-database">Symptom 1: huge database</a></h3>\n-<p>Cause 1: a huge number of revisions or versions.</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Remove all versions and pack the database. When you migrate to a new Plone version, and you ask your client, they will usually be okay with this.</li>\n-<li>Manage or limit revisions. Easiest is to use <a class="reference" href="https://github.com/collective/collective.revisionmanager">collective.revisionmanager</a> for this. Especially, revisions may have been left behind for content that no longer exists. You can easily remove it with this tool.</li>\n-<li>Disable versioning of Files. It is disabled by default, but maybe someone has switched it on.</li>\n-<li>Enable manual versioning instead of automatic. Then the editor needs to check a box when they make a major change that they want to be able to rollback.</li>\n-</ul>\n-<p>Cause 2: no packing.</p>\n-<p>Remedy: just pack it. Use the <tt class="docutils literal"><span class="pre">zeopack</span></tt> script, which part of <tt class="docutils literal"><span class="pre">plone.recipe.zeoserver</span></tt>. Add a cronjob for this, weekly seems best for most sites.</p>\n-<p>Cause 3: unused content.</p>\n-<p>Remedy: delete it. You have to find it first.\n-Of course no code can tell you which content is safe to delete.\n-You could use <tt class="docutils literal"><span class="pre">statistics.py</span></tt> from <a class="reference" href="https://github.com/collective/collective.migrationhelpers">collective.migrationhelpers</a> to get an idea of where which content is.</p>\n-<p>Cause 4: the SearchableText index is huge</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Use solr or elasticsearch and possibly remove the <tt class="docutils literal"><span class="pre">SearchableText</span></tt> index.</li>\n-<li>Don\'t index files. They are converted to text, but this may not be needed for your site.</li>\n-</ul>\n-<p>Cause 5: large blobs\n-For example, plone.de had a Linux <tt class="docutils literal"><span class="pre">iso</span></tt> image, which was huge.</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Limit the upload size. You could do this in nginx/apache. Archetypes had something, you can likely do this in Dexterity too.</li>\n-<li>Get stats and remove or replace too large items.</li>\n-</ul>\n-<p>Cause 6: aborted uploads (rare)</p>\n-<p>Remedy: check <tt class="docutils literal"><span class="pre">IAnnotations(portal).get(\'file_upload_map\')</span></tt>.</p>\n-</div>\n-<div class="section" id="symptom-2-slow-site">\n-<h3><a name="symptom-2-slow-site">Symptom 2: slow site</a></h3>\n-<p>Cause 1: unneeded full renders of content</p>\n-<p>Remedy: use Python in page templates.\n-By default, page templates use path expressions like this: <tt class="docutils literal"><span class="pre">tal:define=&quot;foo</span> <span class="pre">context/foo&quot;</span></tt>.\n-But this tries to render&nbsp; foo as html if possible.\n-Use <tt class="docutils literal"><span class="pre">foo</span> <span class="pre">python:context.foo</span></tt> instead.</p>\n-<p>Cause 2: wake up many objects</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Always try to use brains and metadata. The difference is huge, also with Dexterity.</li>\n-<li>Listing 3000 brains: 0.2 seconds</li>\n-<li>Listing 3000 objects: 2 seconds</li>\n-<li>Same is true for Volto when you use the search-endpoint with <tt class="docutils literal"><span class="pre">fullobjects</span></tt>.</li>\n-</ul>\n-<p>Of course most page templates in Plone will not list thousands of objects, but will be paginated.\n-Still: just use brains, they are so much tastier.</p>\n-<p>Cause 3: no caching</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Switch on the built-in caching</li>\n-<li>Add varnish</li>\n-<li>Manage the zeocache (that is a bit of science, ask the community)</li>\n-<li>Use <tt class="docutils literal"><span class="pre">memoize</span></tt> in your code.</li>\n-</ul>\n-<p>Cause 4: hardware</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Don\'t be cheap.</li>\n-<li>Buy enough ram to keep the database in memory.</li>\n-<li>Remember that your consulting time probably costs more than buying better hardware would.</li>\n-</ul>\n-<p>Cause 5: slow code</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Learn and use profiling. A very handy toy for that is <a class="reference" href="https://pypi.org/project/py-spy/">py-spy</a>. Sample use: <tt class="docutils literal"><span class="pre">sudo</span> <span class="pre">py-spy</span> <span class="pre">top</span> <span class="pre">--pid</span> <span class="pre">12345</span></tt></li>\n-<li>Do not call methods multiple times from templates. Call them once, store the result, and use this.</li>\n-</ul>\n-<p>Cause 6: slow data sources</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>decouple, for example using redis or celery</li>\n-<li>Use your choice of async implementations</li>\n-<li>Use lazyloading of images if they come from outside of your Plone site.</li>\n-</ul>\n-</div>\n-<div class="section" id="symptom-3-conflict-errors">\n-<h3><a name="symptom-3-conflict-errors">Symptom 3: conflict errors</a></h3>\n-<p>Conflict errors happen when two requests work at the same time and both change the same object.\n-This is complicated, but Zope and the ZODB have built-in conflict resolution.</p>\n-<p>Cause 1: conflict resolving is not enabled.\n-The zeoserver needs access to the same code that your zeoclient has, otherwise conflicts cannot be resolved and the transaction will be aborted.</p>\n-<p>Remedy: add all application code to the zeoserver:</p>\n-<pre class="literal-block">\n-[zeoserver]\n-eggs = ${buildout:eggs}\n-</pre>\n-<p>Cause 2: long running requests change data</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Prevent writes.</li>\n-<li>If it takes long, do intermediate commits when possible.</li>\n-<li>Prevent crossfire: disable cronjobs and editors when a long request needs to run.</li>\n-<li>Use async. Talk to Asko about that probably.</li>\n-</ul>\n-</div>\n-<div class="section" id="symptom-4-poskeyerrors">\n-<h3><a name="symptom-4-poskeyerrors">Symptom 4: PosKeyErrors</a></h3>\n-<p>Cause 1: missing blobs</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Copy all blobs of course.</li>\n-<li>Use <a class="reference" href="https://pypi.org/project/experimental.gracefulblobmissing/">experimental.gracefulblobmissing</a> in development to create dummy blobs where needed.</li>\n-<li>Find and delete afflicted content in a browser view.</li>\n-<li>There can be cases when you have two zeoclients and the syncing does not work well. Talk to Alessandro about that.</li>\n-</ul>\n-</div>\n-<div class="section" id="symptom-5-broken-data">\n-<h3><a name="symptom-5-broken-data">Symptom 5: broken data</a></h3>\n-<p>Now for the really interesting part.\n-These are errors like:</p>\n-<pre class="literal-block">\n-ModuleNotFoundError\n-AttributeError\n-ImportError\n-PostKeyError\n-BrokenObject\n-</pre>\n-<p>I could read you my whole blog post about <a class="reference" href="https://www.starzel.de/blog/zodb-debugging">zodb debugging</a>.</p>\n-<p>Cause 1: code to unpickle som data is missing</p>\n-<p>Remedies:</p>\n-<ul class="simple">\n-<li>Ignore the errors, if normal operation still works, and the site only has to stay up for a limited time, because <tt class="docutils literal"><span class="pre">zeopack</span></tt> probably also fails.</li>\n-<li>Fix it with a <a class="reference" href="https://github.com/zopefoundation/zodbupdate#id4">rename_dict</a>. See <a class="reference" href="https://github.com/zestsoftware/zest.zodbupdate">zest.zodbupdate</a> for some examples that are actually really useful. [Thanks! MvR]</li>\n-<li>Work around it with an <tt class="docutils literal"><span class="pre">alias_module</span></tt> patch, like <tt class="docutils literal"><span class="pre">plone.app.upgrade</span></tt> does in several cases. Then imports can work again.</li>\n-<li>Find out what and where broken objects are and then fix or remove them safely. Use <a class="reference" href="https://pypi.org/project/zodbverify/">zodbverify</a>.</li>\n-</ul>\n-<p>Steps for the last one:</p>\n-<ul class="simple">\n-<li>Call <tt class="docutils literal"><span class="pre">bin/zodbverify</span> <span class="pre">-f</span> <span class="pre">var/filestorage/Data.fs</span></tt> to get all broken objects.</li>\n-<li>Pick one error type at a time, with an oid (object id) that has a problem.</li>\n-<li>Call <tt class="docutils literal"><span class="pre">bin/zodbverify</span> <span class="pre">-f</span> <span class="pre">var/filestorage/Data.fs</span> <span class="pre">-o</span> <span class="pre">&lt;oid&gt;</span> <span class="pre">-D</span></tt> to inspect one object and find out where it is referenced.</li>\n-<li>For the extra options, you should use the branch from my <a class="reference" href="https://github.com/plone/zodbverify/pull/8">pull request</a>, which I still have not finished yet, but it runs fine.</li>\n-<li>Remove or fix the object.</li>\n-<li>Important: make notes, write upgrade steps, keep the terminal log, because you will forget it and need it again.</li>\n-</ul>\n-<p>To remove or fix the object, it helps to start the actual Plone site with some special zodbverify sauce:</p>\n-<pre class="literal-block">\n-./bin/instance zodbverify -f var/filestorage/Data.fs -o &lt;oid&gt; -D\n-</pre>\n-<p>Then you can use your debugging skills to try and fix things.\n-Note that after you fixed it, you need to commit the changes explicitly:</p>\n-<pre class="literal-block">\n-import transaction\n-transaction.commit()\n-</pre>\n-<p>Note that the bad object is still in the database, until you pack it.</p>\n-<p>Frequent culprits are IntIds and Relations, especially if you migrated from Archetypes to Dexterity.\n-Using <a class="reference" href="https://github.com/collective/collective.relationhelpers/blob/master/src/collective/relationhelpers/api.py">collective.relationhelpers</a> you can clean this up:</p>\n-<pre class="literal-block">\n-from collective.relationhelpers.api import cleanup_intids\n-from collective.relationhelpers.api import purge_relations\n-from collective.relationhelpers.api import restore_relations\n-from collective.relationhelpers.api import store_relations\n-# store all relations in a annotation on the portal\n-store_relations()\n-# empty the relation-catalog\n-purge_relations()\n-# remove all relationvalues and refs to broken objects from intid\n-cleanup_intids()\n-# recreate all relations from a annotation on the portal\n-restore_relations()\n-</pre>\n-</div>\n-<div class="section" id="symptom-6-bad-code">\n-<h3><a name="symptom-6-bad-code">Symptom 6: bad code</a></h3>\n-<p>Unreadable, untested, unused, undocumented, unmaintained, complicated, overly complex, too much code.\n-If you can convince a client to <em>not</em> want a feature because they will only use it once, that is a win.\n-Every line of code that is <em>not</em> written, is a good line of code.</p>\n-</div>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-11T17:08:38+00:00</published>\n-\n-      <updated>2021-01-05T10:33:42+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Maik Derstappen: Plone 6 Theming with Diazo</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/maik-derstappen-plone-6-theming-with-diazo" />\n-\n-\n-\n-      <id>urn:syndication:3ba6d872864981f8695780e8de6d246f</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>How does Plone theming look in classic UI?</p>\n-<ul class="simple">\n-<li>html5 theme plus a mapping configuration</li>\n-<li>deploying themes as ZIP-file for shared hosting is possible</li>\n-<li>With Diazo you can map any Plone html to a static theme layout.</li>\n-</ul>\n-<p>Separating frontend and backend theme.\n-Don\'t reinvent the backend views!\n-You could theme the backend, so for content editors and admins, but it looks fine, not needed.\n-You should focus on the frontend layout for visitors.\n-To use the default backend layout you can include <tt class="docutils literal"><span class="pre">backend.xml</span></tt> in your rules, with some conditions.</p>\n-<p>Diazo is not for everything!\n-If the backend markup differs from what you need, do not try to solve it with Diazo or XSLT.\n-Instead, fix the backend templates directly, most likely with a <tt class="docutils literal"><span class="pre">z3c.jbot</span></tt> override.</p>\n-<p>You can use <a class="reference" href="https://github.com/collective/collective.themefragments/">theme fragments</a> or browser views to add new templates.\n-The theme fragments can also be used as tiles in Mosaic.</p>\n-<p>I like using SASS mixins.\n-Say you have a <tt class="docutils literal"><span class="pre">&lt;div</span> <span class="pre">class=&quot;main-wrapper</span> <span class="pre">container&quot;&gt;</span></tt>.\n-Cleaner would be <tt class="docutils literal"><span class="pre">&lt;div</span> <span class="pre">class=&quot;main-wrapper&quot;&gt;</span></tt>.\n-You can do this with mixins with <tt class="docutils literal"><span class="pre">&#64;include</span></tt> in your selector.</p>\n-<p>For more information on Diazo, see <a class="reference" href="https://diazo.org">https://diazo.org</a>.</p>\n-<div class="section" id="new-features-in-plone-6">\n-<h3><a name="new-features-in-plone-6">New features in Plone 6</a></h3>\n-<p>From the backend we get Bootstrap 5 compatible html.\n-Result is that Bootstrap themes are easier to integrate in Plone 6.</p>\n-<p>You have custom CSS in the theming control panel, for small changes.\n-This actually sneaked into Plone 5.2.2 as well.</p>\n-<p>We have simplified Diazo rules.</p>\n-<p>Create a theme with plonecli:</p>\n-<ul class="simple">\n-<li>pip install plonecli</li>\n-<li>plonecli create addon plonetheme.yourtheme</li>\n-<li>cd plonetheme.yourtheme</li>\n-<li>plonecli add theme</li>\n-<li>plonecli build</li>\n-</ul>\n-<p>Theme from this presentation will be published as <a class="reference" href="https://github.com/collective/collective.bunapisicuto">collective.bunapisicuto</a> when it is ready for you to inspect.</p>\n-</div>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-10T22:16:11+00:00</published>\n-\n-      <updated>2020-12-10T22:16:11+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Stefan Antonelli: Plone 6 Theming from Scratch</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/stefan-antonelli-plone-6-theming-from-scratch" />\n-\n-\n-\n-      <id>urn:syndication:d1f0f9b0e055800492dbadd973f3290e</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>How to create a theme for Plone 6.\n-Quite easy, because the templates use Bootstrap 5 classes.\n-We build a theme from scratch, no Barceloneta, no Diazo.</p>\n-<p>First step is to create an empty plone_addon package with <tt class="docutils literal"><span class="pre">plonecli</span></tt> or <tt class="docutils literal"><span class="pre">mr.bob</span></tt>.\n-For the questions you can answer: use Plone 5.2.1. We will switch later.\n-My theme is <a class="reference" href="https://github.com/collective/plonetheme.munich">plonetheme.munich</a>.</p>\n-<p>I recommend to cleanup the standard package a bit.\n-I remove tests, constraints for Plone 4 and 5.\n-Check it out in the commits.</p>\n-<p>Now switch to <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/buildout.cfg">extend Plone 6</a> and run the buildout.</p>\n-<p>You can add theme structure with a bob template, but I prefer creating my own.</p>\n-<p>Some interesting files:</p>\n-<ul class="simple">\n-<li><a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/package.json">package.json</a> lists various tasks, especially the <tt class="docutils literal"><span class="pre">watch</span></tt> task.</li>\n-<li>In the theme <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/src/plonetheme/munich/theme/manifest.cfg">manifest.cfg</a> we more or less disable Diazo by emptying the <tt class="docutils literal"><span class="pre">rules</span></tt> line.</li>\n-<li>The compiled CSS and JavaScript are registered in <a class="reference" href="https://github.com/collective/plonetheme.munich/blob/master/src/plonetheme/munich/profiles/default/registry/main.xml">registry.xml</a>.</li>\n-</ul>\n-<p>You can compile SASS to CSS using npm or yarn.\n-Do <tt class="docutils literal"><span class="pre">yarn</span> <span class="pre">install</span></tt> in the top of your package.\n-Later, with <tt class="docutils literal"><span class="pre">yarn</span> <span class="pre">dist</span></tt> you make it ready for production.</p>\n-<p>After these steps Plone is partially broken, or at least ugly.\n-I do some <a class="reference" href="https://github.com/collective/plonetheme.munich/commit/000717fb336849facec17b8fbd7b75686ec6146b">basic fixes</a> and it looks better.</p>\n-<p>For templates that you need to change you add <tt class="docutils literal"><span class="pre">z3c.jbot</span></tt> overrides.\n-Personally I always kick out the &quot;search in section&quot; checkbox.</p>\n-<p>I don\'t like columns, but for this example I kept them.\n-In most cases I need just one column.\n-Plus maybe a side bar for portlets, but portlets must die.</p>\n-<p>With <tt class="docutils literal"><span class="pre">plonetheme.tokyo</span></tt> everything is Bootstrap, no columns, so no portlets, really fully responsive.\n-This was the package where we built on Barceloneta Plone 5.2 and introduced lots of template overrides to put in Bootstrap.\n-For Plone 6 we can just remove the overrides.</p>\n-<p>What about the toolbar? Yes, we dropped it.\n-We bring editing features and navigation together.\n-This is now a few feature: <a class="reference" href="https://github.com/collective/collective.sidebar">collective.sidebar</a>.\n-It is only one template to override.\n-It works for Plone 5.2 at the moment, and I may work on it for Plone 6 during the sprints.</p>\n-<p>Question: is TTW still a viable path?</p>\n-<p>Answer: I like to concentrate on one path.\n-I am not an expert in TTW theming.\n-I switched to file system, except really small customizations.\n-For small CSS customizations there is a field in the theming control panel.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-10T17:08:30+00:00</published>\n-\n-      <updated>2020-12-10T17:08:30+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Stefan Antonelli and Peter Holzer: Modernize Plone\xe2\x80\x99s Classic UI</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/stefan-antonelli-and-peter-holzer-modernize-plone2019s-classic-ui" />\n-\n-\n-\n-      <id>urn:syndication:468faba6197c93edadf910d668dac1c1</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>What was new in Plone 5?\n-We had beautiful new theme: Barceloneta.\n-Diazo theming by default.\n-We switched to CSS compilation with <tt class="docutils literal"><span class="pre">less</span></tt>.</p>\n-<p>During the Tokyo conference Stefan thought up Tokyo Theme.\n-Clean responsive theme for Plone 5.\n-Tons of overrides to tackle problems in Plone 5.\n-Issue with navigation and editing on mobile we solved with collective.sidebar.</p>\n-<p>We had community discussions, especially during several Plone events.\n-Everyone tried to use Bootstrap (components).\n-First idea: map variables from Barceloneta to Bootstrap, because they have similar ideas using different terms.</p>\n-<p>We have PLIP to modernize markup in templates, and another PLIP to modernize the default theme: Barceloneta LTS.\n-Forms using z3c.form are already using the new classes.</p>\n-<p>Make things easier: UI, development.\n-Creating a modern UI for the web is complex.\n-You need to support different devices, responsiveness.\n-In Bootstrap there are patterns for most useful things.</p>\n-<p>Developer perspective: expect one way to do things.\n-Developers should not have to worry about design.\n-When busy in the backend, you should focus on Python, not on it looking nice and shiny.\n-Don\'t think about markup, just use components.\n-The good news: there is documentation. The Bootstrap documentation is our documentation.</p>\n-<p>What is new in Plone 6?</p>\n-<ul class="simple">\n-<li>Volto is the default UI.</li>\n-<li>There still is the Classic UI with Barceloneta look and feel, but updated.</li>\n-<li>No TTW (through the web) theming.</li>\n-<li>But there is a textarea to add some simple CSS (already in 5.2.3).</li>\n-<li>Some CSS variables may be changeable TTW.</li>\n-<li>Finally jQuery 3</li>\n-</ul>\n-<p>Bootstrap is still the most popular front-end framework.\n-Well documented, tested and maintained.\n-It is so easy to create stuff, I enjoy it a lot.</p>\n-<p>What is new in Bootstrap 5?</p>\n-<ul class="simple">\n-<li>Improved overall look and feel.</li>\n-<li>Updated and extended the color system</li>\n-<li>Custom properties: css variables</li>\n-<li>SVG Icon library</li>\n-<li>Pure javascript</li>\n-<li>Dropped IE10 and IE11 support</li>\n-<li>Bootstrap 5 is currently alpha 3.</li>\n-<li>See <a class="reference" href="https://v5.getbootstrap.com">https://v5.getbootstrap.com</a></li>\n-</ul>\n-<p>Features: what do we get from these changes?</p>\n-<ul class="simple">\n-<li>Core templates use Bootstrap 5 markup. Instead of overrides in <tt class="docutils literal"><span class="pre">plonetheme.tokyo</span></tt>, we have lots of branches for the actual packages.</li>\n-<li>All major templates have been touched already.</li>\n-<li>For the current state, see the unofficial demo at <a class="reference" href="https://classic.plone.de">https://classic.plone.de</a></li>\n-<li>The <a class="reference" href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">Bootstrap documentation</a> has lots of snippets than you can copy.</li>\n-<li>You don\'t need much more CSS on top of it if you paste most examples. We added a little for own components, like navigation.</li>\n-</ul>\n-<p>Barceloneta appearance is fully customizable.\n-It is basically on opinionated set of bootstrap variables.\n-Every aspect can be changed with variables: colors, fonts, sizes, spacings, grid gutters, etc.\n-There are overall properties, like shadowed, rounded, gradients. Just turn on or off.</p>\n-<p>Theming workflow.\n-<tt class="docutils literal"><span class="pre">plonetheme.barceloneta</span></tt> will also be published as <tt class="docutils literal"><span class="pre">npm</span></tt> package.\n-<tt class="docutils literal"><span class="pre">bobtemplates.plone</span></tt> will have a template for the new theming workflow.\n-You can do quick and dirty customizations through the CSS overrides field in the theme controlpanel.</p>\n-<p>Diazo will still be there, will work as before.\n-Some optimizations in the <tt class="docutils literal"><span class="pre">rules.xml</span></tt> to make content are customizations easier.</p>\n-<p>How to deal with icons?\n-What if you want to change the content type icons? Used to be hard.\n-Now we come up with the idea of an icon resolver.\n-We decided to use the <a class="reference" href="https://icons.getbootstrap.com">bootstrap icons</a>.\n-Icons are registered via GenericSetup, for example with a record name <tt class="docutils literal"><span class="pre">plone.icon.alarm</span></tt> pointing to an SVG.\n-You can then override this in your own GS profile.</p>\n-<p>Example icon use:</p>\n-<pre class="literal-block">\n-&lt;tal:icon replace=&quot;structure python:icons.tag(\'love\', tag_class=\'custom-class\', tag_alt=\'foobar\')&quot; /&gt;\n-</pre>\n-<p>You get get back an inline SVG or an image tag.</p>\n-<p>Note: all z3c form widgets in Plone are now in <tt class="docutils literal"><span class="pre">plone.app.z3cform</span></tt>, and not scattered over lots of packages.</p>\n-<p>We will restart our weekly Plone 6 Classic UI sprints, starting Januari 13 2021, 10:00 (UTC+1).</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-10T16:02:29+00:00</published>\n-\n-      <updated>2020-12-10T16:02:29+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Keynote: The User Experience - Editing Composite Pages in Plone 6 and Beyond</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/keynote-the-user-experience-editing-composite-pages-in-plone-6-and-beyond" />\n-\n-\n-\n-      <id>urn:syndication:e244a1928902dfa6b7ea77347437d2d9</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>It may be a surprise to non-technical people to learn that pages created in Volto are not currently interoperable with traditional Plone\'s page editing. If you think about it, the reason becomes obvious. Volto, like Mosaic, creates tiled layouts, and like Mosaic it stores page data in special fields for the individual blocks and their layout. Neither Volto nor Mosaic pages are editable in TinyMCE, which expects just one rich text field.</p>\n-<p>Is this divergence between sites created in Volto and sites created in traditional Plone a problem? It does make it harder to describe what Plone is, and it might mean that there is no way to mix both approaches - for instance when part of a larger site is available as a Volto-based sub-site. Would it be possible to have one tool and one representation for tiled layouts so that we can avoid this divergence? Is there some other solution? Is it even a problem? Will Plone 6 be backwards compatible with Plone 5 and include a smooth upgrade path?</p>\n-<p>We will tackle these questions in this strategic panel discussion, moderated by Sally Kleinfeldt. Panelists will include Paul Roeland, Philip Bauer, Timo Stollenwerk, Victor Fernandez de Alba, and Eric Steele.</p>\n-<p>First, Philip has a message from Max Jacob who is very ill with pancreatic cancer and may not survive this weekend. He wants to thank the Plone community for what they allowed him to do: like organize the German Plone Konferenz. Thanks for all the friendships. Such a pity that this is happening now, he wanted to jump into only doing Plone for the next few years, due to changes at his job, and looked forward to that.</p>\n-<div class="section" id="classic-mosaic-and-volto-pages">\n-<h3><a name="classic-mosaic-and-volto-pages">Classic, Mosaic and Volto Pages</a></h3>\n-<p>We have Classic, Mosaic and Volto Pages. They have different internal representations and are not compatible.\n-Is this a problem? Is there a solution?\n-Is one tool, one representation possible?\n-If we really need three, how to position?</p>\n-<p>Paul: for me as user this presents a problem. When do you switch over your site?\n-We would like to not write 700 pages from scratch, again, like we did for previous composite pages.</p>\n-<p>Timo: We migrated quite a few large projects from classic Plone to Volto.\n-One of those had collective.cover (other composite page system).\n-Problem in general with such systems, is that they are pretty specific.\n-They solve specific use cases and come from different eras.\n-After any migration, it will not look the same any more.\n-Whatever you do: the page will initially look ugly.\n-So you put a lot of effort into migration, but then have to put manual effort into every page anyway.\n-It <em>can</em> help: you at least have a start.\n-We created a system where we migrated overview pages, and editors could click to migrate other pages one at a time.</p>\n-<p>Philip: We have code to migrate from non-folderish to folderish content types.\n-There will be code to migrate to dexterity site root on Plone 6.\n-We <em>can</em> make sure to migrate any standard content types.\n-Mosaic is another story.\n-So for pages you would at least have the text available. Maybe only visible for editors to pick and choose from.\n-You may lose portlets, unless they get implemented in Volto.</p>\n-<p>Timo: When you go to Plone 6 and do a redesign at the same time, then you can jump on Volto.\n-Otherwise you could stay at Classic Plone for now.\n-There will be an overlap period.</p>\n-<p>Victor: For Mosaic you could dump all tiles into html and insert it in a block.</p>\n-</div>\n-<div class="section" id="how-to-have-a-big-classic-site-with-a-subsite-made-in-volto">\n-<h3><a name="how-to-have-a-big-classic-site-with-a-subsite-made-in-volto">How to have a big Classic site with a subsite made in Volto?</a></h3>\n-<p>Victor: Definitely doable, though we have not done this ourselves.</p>\n-<p>Sally: But what happens when an editor in Classic goes to the Volto subsite? The Volto page would not be editable then, right?</p>\n-<p>Philip: You should not offer this. I see no upside, no use case.\n-Split them into separate applications, with shared authentication maybe.</p>\n-<p>Paul: Use case: large site with several departments.\n-The marketing department may want snazzy new Volto things.</p>\n-<p>Timo: Just create another site then.</p>\n-</div>\n-<div class="section" id="cost-and-benefit-of-upgrading-big-classic-site-to-plone-6">\n-<h3><a name="cost-and-benefit-of-upgrading-big-classic-site-to-plone-6">Cost and benefit of upgrading big Classic Site to Plone 6</a></h3>\n-<p>So you just had a big migration to Plone5, and now what would you get for going to Plone 6.</p>\n-<p>Philip: We have this discussion every major upgrade.\n-Communicate every upgrade as a relaunch.\n-The relaunch is the reason for the upgrade.\n-&quot;There is a new version so you need to upgrade&quot; does not fly for my clients.</p>\n-<p>Timo: We became a very developer oriented community, and every develop understands the need and benefits.\n-We should really get back to giving more value at major releases, so clients really want to upgrade themselves.\n-Plone releases should sell themselves.</p>\n-<p>Eric: It looks like we think Plone 6 + Volto is a costly upgrade with lots of benefits.\n-For Classic 5 to Classic 6 the upgrade is not costly.</p>\n-</div>\n-<div class="section" id="alex-limi-s-vision-for-deco-are-we-there-yet">\n-<h3><a name="alex-limi-s-vision-for-deco-are-we-there-yet">Alex Limi\'s vision for Deco: are we there yet?</a></h3>\n-<p>Was this fulfilled by Mosaic? Volto? Something still needed?</p>\n-<p>Paul: Not quite, but slowly getting there.\n-For me it would be Volto, plus some power features that Eau de Web (EEA) adds.</p>\n-<p>Timo: I think we went beyond what Limi envisioned.</p>\n-<p>Eric and Victor: What we have seen from Volto, is pretty close to what Alex wanted.</p>\n-<p>Victor: We gave the users powerful tools, so beware of them.</p>\n-<p>Philip: Partly yes. Volto is close, and it is for normal users.</p>\n-<p>Now some questions from users.</p>\n-</div>\n-<div class="section" id="is-there-a-plan-for-volto-to-support-editing-the-existing-richtext-fields-of-documents-news-items">\n-<h3><a name="is-there-a-plan-for-volto-to-support-editing-the-existing-richtext-fields-of-documents-news-items">Is there a plan for Volto to support editing the existing Richtext fields of Documents, News Items?</a></h3>\n-<p>Philip: This should be doable.</p>\n-</div>\n-<div class="section" id="migrations">\n-<h3><a name="migrations">Migrations</a></h3>\n-<p>Philip: Plone 4 to 5.2 was three migrations in one.\n-Plone 6 is less of a problem.</p>\n-<p>Eric: 5.2 had a lot of backend migrations.\n-A split between backend and frontend with plone.restapi in between makes things easier.</p>\n-<p>[The question on multiple variations of Volto, especially editors, went a bit too fast for me to write intelligible notes down.]</p>\n-</div>\n-<div class="section" id="what-s-the-future-of-using-ct-s-behaviors-in-plone-to-design-information-architecture">\n-<h3><a name="what-s-the-future-of-using-ct-s-behaviors-in-plone-to-design-information-architecture">What\'s the future of using CT\'s/behaviors in Plone to design information architecture?</a></h3>\n-<blockquote>\n-With Volto the trend seems mixing/adding 40 different blocks for every page.</blockquote>\n-<p>Timo: Blocks are definitely the way to work.\n-But the underlying power of content types and behaviors still exists.</p>\n-<p>Philip: We need blocks that represent a field or a behavior. That is unavoidable.</p>\n-</div>\n-<div class="section" id="next-steps">\n-<h3><a name="next-steps">Next steps</a></h3>\n-<p>Timo: We plan to have an open space on page compositions and Volto, and want to sprint on it.</p>\n-<p>Paul: Good if there is a longer term vision.\n-I would rather have more power that a Site Admin can lock down, than having to choose between three different versions.\n-I don\'t want choice stress.</p>\n-</div>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-10T14:55:55+00:00</published>\n-\n-      <updated>2020-12-10T14:55:55+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Lightning Talks Wednesday</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/lightning-talks-wednesday" />\n-\n-\n-\n-      <id>urn:syndication:c478decef0cbf87b0b04ae96599134b3</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <div class="section" id="lukas-guziel-continuous-deployment">\n-<h3><a name="lukas-guziel-continuous-deployment">Lukas Guziel: Continuous Deployment</a></h3>\n-<p>CD means deploying code automatically.\n-It saves time, reduces human error.\n-It Gitlab you can add <tt class="docutils literal"><span class="pre">gitlib-ci.yml</span></tt> and configure it.\n-Include a base template that you use in multiple projects.\n-End result can be a site that the customer can test.</p>\n-</div>\n-<div class="section" id="erico-andrei-world-plone-day-2021">\n-<h3><a name="erico-andrei-world-plone-day-2021">Erico Andrei: World Plone Day 2021</a></h3>\n-<p>We are a global community.\n-Almost 300 people from 36 countries are at this online conference.\n-World Plone Day is an annual Plone event.\n-Next year of course online. April 28th 2021.</p>\n-<p>We want to stream 24 hours live on our YouTube channel.\n-Showcase Plone. Technical talk, use cases, interviews, demo.</p>\n-<p>It should not all be in English, please use your own language.\n-Talk to your local community.</p>\n-<p>Please help and join. See <a class="reference" href="https://plone.org/events/wpd">https://plone.org/events/wpd</a></p>\n-</div>\n-<div class="section" id="andreas-jung-collective-contentsync2">\n-<h3><a name="andreas-jung-collective-contentsync2">Andreas Jung: collective.contentsync2</a></h3>\n-<p>Syncing content between Plone sites through <tt class="docutils literal"><span class="pre">plone.restapi</span></tt>.\n-It is a behavior.\n-You have a source Plone site and one or more target Plone sites.\n-You need Plone 5.2 under Python 3.</p>\n-<ul class="simple">\n-<li>Create a dedicated user account with global role Editor.</li>\n-<li>Configure on the content sync control panel.</li>\n-<li>Automatically creates two content rules to sync content when added or modified.</li>\n-<li>You can enable it on all content types, also Folders.</li>\n-</ul>\n-<p>See <a class="reference" href="https://github.com/collective/collective.contentsync2">https://github.com/collective/collective.contentsync2</a></p>\n-</div>\n-<div class="section" id="philip-bauer-why-relations-are-weird">\n-<h3><a name="philip-bauer-why-relations-are-weird">Philip Bauer: Why relations are weird</a></h3>\n-<p>These packages have a part in relations:</p>\n-<ul class="simple">\n-<li>zc.relation: abstract relation catalog</li>\n-<li>z3c.relationfield: fields and values on objects</li>\n-<li>plone.app.relationfield: converters from field to widget and vv</li>\n-<li>plone.app.z3cform: widgets</li>\n-<li>mockup: actual widget UI</li>\n-</ul>\n-<p>In a schema use a RelationChoice field with vocabulary plone.app.vocabularies.Catalog, and set pattern directives.</p>\n-<p>It is not straightforward.\n-So I wrote <tt class="docutils literal"><span class="pre">collective.relationhelpers</span></tt>.</p>\n-<p>See <a class="reference" href="https://github.com/collective/collective.relationhelpers">https://github.com/collective/collective.relationhelpers</a></p>\n-<p>Maybe use uuid instead of all this code.</p>\n-<p>[About ten people in the chat want to merge this package into plone.api. Actually, see <a class="reference" href="https://github.com/plone/plone.api/issues/223">this issue</a>.]</p>\n-</div>\n-<div class="section" id="christopher-lozinski-simple-json-schema-guis">\n-<h3><a name="christopher-lozinski-simple-json-schema-guis">Christopher Lozinski: Simple JSON Schema GUIs</a></h3>\n-<p>Create a JSON schema, automatically generate the UI.\n-Search for basic JSON editor library.\n-He shows JSON in ZODB, so you can browse it, if I understood correctly.\xf0\x9f\x99\x82</p>\n-</div>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-09T18:21:14+00:00</published>\n-\n-      <updated>2020-12-09T18:21:14+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Eric Brehault: Second Guessing the Single-Page-App Pattern</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/eric-brehault-second-guessing-the-single-page-app-pattern" />\n-\n-\n-\n-      <id>urn:syndication:8b678f3acfa36bff175e085791de850d</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>SPA (Single Page App) is about providing an entire app by exposing a single physical web page containing an enormous javascript bundle. It breaks the original web paradigm in many ways. Surprisingly enough, we invest a lot of efforts to mimic the regular web behaviour.</p>\n-<p>Isn\xe2\x80\x99t it time for modern frontend to reconsider the SPA approach?</p>\n-<p>[Note: Eric presented by using a projector to show his slides on a black Plone conference T-shirt. :-)]</p>\n-<p>Why are we doing this? Originally we always requested a whole page and this was considered slow. But we have good bandwidth now. And if you don\'t have good bandwidth, the super big bundle is not good either.</p>\n-<p>With SPA we try very hard to bring back the original working of the page, especially the browser history, being able to browse and then share the link to the current page.</p>\n-<p>To mitigate problems, we created an enormous stack. And we deny the complexity.  New tools create new problems, even when their individual creators does not see the complexity.</p>\n-<p>&quot;SPA isn\'t stable or efficient.&quot;\n-But there is no way back. For example, you cannot create Google Docs  with server side rendered pages.\n-Web 2.0 is 15 years old. It is still about content.</p>\n-<p>SPA is separation of concern, which is a good principle. But we mix the browser layer (how you get and view the page) and the content layer (the page content).</p>\n-<p>It seems a take it or leave it situation: either use SPA or don\'t. What do we want? We want proportionate complexity. Do we need 100 percent SPA?</p>\n-<p>You can use micro components, see for example the demo of Maik Derstappen in the lightning talks on Monday, using Svelte.\n-Micro frontend is bigger than that.  It is a part of the application, that you develop separately. For example, you could do the Plone Sharing page like this.</p>\n-<p>Can we compile each page separately? Then each page is an app.</p>\n-<p>ES6 native support would be interesting. Combine with HTTP/2 and you need no bundles.\n-Bundling is the most brutal thing ever. Horrible. Get rid of it.</p>\n-<p>Respect the layers. SPAs are monolithic. Break them down.</p>\n-<p>We should have a generic browser layer, common to many different use cases, for example for logging in.\n-I don\'t want to code that, but plug it. Second step: push this layer to the browsers themselves.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-09T17:41:59+00:00</published>\n-\n-      <updated>2020-12-09T17:42:16+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Asko Soukka: Deploying Plone and Volto, the Hard Way</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/asko-soukka-deploying-plone-and-volto-the-hard-way" />\n-\n-\n-\n-      <id>urn:syndication:7d213d4114be2f1ef8ed20a2e1983ed3</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>Here are the <a class="reference" href="https://datakurre.github.io/ploneconf2020/deploying-plone-and-volto-hard-way.pdf">slides</a>.</p>\n-<p>How about building Plone without buildout? Running Plone on Python 3 without WSGI? Deploying Plone and Volto with containers without Docker? Building all this in re-usable and safe manner in sandbox with restricted network access with Nix? Welcome to hear about our hipster setup where we lock, build and configure Plone deployments with Nix, insist to keep ZServer running on Python 3 for the love\'s sake, build software deployments into standalone tarball archives, and run them with Nomad \xe2\x80\x93 the simple on-premises-friendly alternative for K8S.</p>\n-<ul class="simple">\n-<li>The easy, documented way: buildout, WSGI, Docker (if you need containers), Registry.</li>\n-<li>Our way: pip, TxZServer, Nomad, Nix</li>\n-</ul>\n-<p>When you use a container infrastructure, you have multiple containers for running a Plone site, for example zeo clients, zeo servers, load balancer. Nomad helps there, and is much simpler than Kubernetes.\n-We have one job file to rule them all: task groups, instance count, update policy, server resources, volumen mounts, tasks, consul services, vault secrets, environment variables, exec artifacts.</p>\n-<p>Nomad has &quot;isolated fork / exec driver&quot;. No docker image needed. We have a Nix-built artifact, a tarball that we extract in the root of the container.</p>\n-<p>With Nix, you get 100 percent reproducible artifacts. Production equals development. You have a full dependency graph. The result is a standalone tarball, perhaps 100 MB. Disadvantage is that there are no conventions, no metadata, no shared layers, no documentation. It needs learning and practice. Well, some documentation now: <a class="reference" href="https://nixos.org">https://nixos.org</a> and <a class="reference" href="https://nix.dev">https://nix.dev</a>, partially made by people that were using Plone previously.</p>\n-<p>Some ugly parts from Nix:</p>\n-<ul class="simple">\n-<li>Every language has their own Nix-conventions</li>\n-<li>dependency generator ecosystem is comples</li>\n-<li>cyclic dependencies are not supported</li>\n-<li>no storage device is big enough for <tt class="docutils literal"><span class="pre">/nix/store</span></tt></li>\n-</ul>\n-<p>Our (legacy) approach for Plone 5.2.1 without Buildout and with pip:</p>\n-<ul class="simple">\n-<li>generated requirements.txt with buildout</li>\n-<li>create Python env with pip and nix</li>\n-<li>use pip-branch of z3c.autoinclude</li>\n-<li>disabled <tt class="docutils literal"><span class="pre">&lt;includeDependencies</span> <span class="pre">/&gt;</span></tt></li>\n-<li>generate instance skeleton with nix</li>\n-<li>forked plone.recipe.zope2instance</li>\n-</ul>\n-<p>Plone 6 without Buildout should be pip-installable out of the box, but that is hear-say.</p>\n-<p>We use TxZServer in production, so ZServer using Twisted.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-09T16:22:15+00:00</published>\n-\n-      <updated>2020-12-09T16:22:15+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Nicola Zambello: Theming Volto without SemanticUI: Is It Possible?</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/nicola-zambello-theming-volto-without-semanticui-is-it-possible" />\n-\n-\n-\n-      <id>urn:syndication:d96309ed215a2fec3c67f7f3e4d97885</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>We will walk through the process of building a product for Italian Public Administrations using a bootstrap-based theme.\n-I\'m presenting io-comune, RedTurtle\'s first product based on Volto and the strategies we used.\n-We will see the possibilities in Volto for theming without SemanticUI, using bootstrap and sass and what are the next ideas we could work on.</p>\n-<p>Scenario:</p>\n-<ul class="simple">\n-<li>We wanted to adopt Volto in our new project.</li>\n-<li>We needed to include Bootstrap.</li>\n-<li>Volto uses SemanticUI instead.</li>\n-<li>Two such frameworks will conflict, for example fighting over the same selector.</li>\n-</ul>\n-<p>We tried. We tried harder.\n-A cheap approach did not seem possible, so we looked for a sane one.</p>\n-<p>A new theme: <tt class="docutils literal"><span class="pre">pastanaga-cms-ui</span></tt>. Load only the CSS needed for Volto admin UI, see <a class="reference" href="https://github.com/plone/volto/pull/970">Volto PR 970</a>.\n-And <tt class="docutils literal"><span class="pre">public-ui</span></tt> for public pages.\n-In your <tt class="docutils literal"><span class="pre">src/theme.js</span></tt> do not import the css/less from semantic-ui, but the <tt class="docutils literal"><span class="pre">pastanaga-cms-ui</span></tt>.\n-In theme theme.config also use pastanaga-cms-ui.\n-Also razzle-config.</p>\n-<p>You should normalize your base style, for example:</p>\n-<pre class="literal-block">\n-body.cms-ui {\n-  .public-ui {\n-    font-size: 18px;\n-  }\n-}\n-</pre>\n-<p>and wrap your components with <tt class="docutils literal"><span class="pre">.public-ui</span></tt>.</p>\n-<p>Building a product:</p>\n-<ul class="simple">\n-<li>Base common package for every customer: <a class="reference" href="https://github.com/RedTurtle/design-volto-theme">https://github.com/RedTurtle/design-volto-theme</a></li>\n-<li>New intermediate layer for SemanticUI</li>\n-<li>New config layer for razzle/customizations</li>\n-<li>Template for actual projects: <tt class="docutils literal"><span class="pre">design-volto-kit</span></tt>, with a Yeoman generator: <tt class="docutils literal"><span class="pre">create-italia-volto-app</span></tt></li>\n-</ul>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-09T14:22:41+00:00</published>\n-\n-      <updated>2020-12-09T14:22:41+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Alin Voinea: Volto Dexterity Schema and Layout Editor</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/alin-voinea-volto-dexterity-schema-and-layout-editor" />\n-\n-\n-\n-      <id>urn:syndication:e78a4c57d7c28e52be32a25b83f7c466</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>Through the Web Dexterity Content-Types with Schema Editor and Blocks Layout Editor</p>\n-<p>How do we define content types schemas in Plone?</p>\n-<ul class="simple">\n-<li>TTW schema editor</li>\n-<li>GenericSetup profile</li>\n-<li>Behaviors, schemas in Python</li>\n-</ul>\n-<p>Why do we need them, we have Volto blocks, right?\n-You still need metadata, a title, etcetera. Certainly for larger institutions you need a structure, a schema.\n-Volto itself has schema-based components.</p>\n-<p>Layout editor.\n-Blocks have properties, like a placeholder, a position.\n-You can type text in a block: &quot;Published on date by author&quot;.\n-Then select &quot;date&quot; and link this text to the published date metadata,\n-and select &quot;author&quot; and link it to the author.\n-Save this as a layout for a content type.\n-You can export this to a JSONField in a custom behavior, so you can save it in version control for production.</p>\n-<p>List of add-ons and other packages that make Volto awesome:\n-<a class="reference" href="https://github.com/collective/awesome-volto">https://github.com/collective/awesome-volto</a></p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-08T17:40:59+00:00</published>\n-\n-      <updated>2020-12-08T17:40:59+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Jens Klein: Performance, Profiling, Power-Consumption</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/jens-klein-performance-profiling-power-consumption" />\n-\n-\n-\n-      <id>urn:syndication:8c53225f93c004d147e18d907160144d</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>I want to focus on Python performance, so not caching or database performance.</p>\n-<p>Tools:</p>\n-<ul class="simple">\n-<li><tt class="docutils literal"><span class="pre">py-spy</span></tt>: Overall mix of the whole live application, top-like.</li>\n-<li><tt class="docutils literal"><span class="pre">repoze.profile</span></tt>: WSGI middleware, slows down application. Profile single request and analyse its call stack by count, call time, etc.</li>\n-<li><tt class="docutils literal"><span class="pre">dis</span></tt>: disassembler for Python at the bytecode level.</li>\n-</ul>\n-<p>Improvements Plone 5.2.0-5.2.3:</p>\n-<ul class="simple">\n-<li>Avoided early <tt class="docutils literal"><span class="pre">providedBy</span></tt> calls</li>\n-<li><tt class="docutils literal"><span class="pre">__getattr__</span></tt> early exit on common attributes</li>\n-<li><tt class="docutils literal"><span class="pre">zope.interface</span></tt>: some functions are called hundreds of thousands of times when you reindex an index, so a tiny improvement helps a lot. I found various places that could use improvements, and that landed in the package, together with memory improvements by Jason Madden.</li>\n-</ul>\n-<p>Live demo. I call <tt class="docutils literal"><span class="pre">py-spy</span></tt> with <tt class="docutils literal"><span class="pre">sudo</span></tt> because I need to connect to an existing process id.</p>\n-<p>Future Todo\'s:</p>\n-<ul class="simple">\n-<li><tt class="docutils literal"><span class="pre">plone.restapi</span></tt> has optimization potential, all navigation related, but currently it still supports even Plone 4.3. This will likely wait for a 5.2-only or Python3-only branch.</li>\n-<li><tt class="docutils literal"><span class="pre">plone.registry</span></tt> is called too often</li>\n-<li>Use <tt class="docutils literal"><span class="pre">python:</span></tt> expressions in all page templates. They are way faster than standard Tales expressions.</li>\n-<li>More introspection.</li>\n-<li>Move more logic from page templates to Python code</li>\n-</ul>\n-<p>Advice: start introspecting the performance of your application.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-08T16:27:53+00:00</published>\n-\n-      <updated>2020-12-08T16:27:53+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Alex Clark: The State of Pillow</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/alex-clark-the-state-of-pillow" />\n-\n-\n-\n-      <id>urn:syndication:e34819d893c83228742eda41c42063d6</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>The Plone Conference account tweeted that a State of Plone talk would be awesome and that the Plone community missed me. I miss the Plone community too, so I am here.</p>\n-<p>I will state it clearly: Pillow would not exist if not for Plone.</p>\n-<p>In July 2010 I announced Pillow as &quot;friendly&quot; fork of PIL. The <a class="reference" href="https://mail.python.org/pipermail/image-sig/2010-July/006423.html">mailing thread</a> and future answers are interesting to read.</p>\n-<p>Some history:</p>\n-<ul class="simple">\n-<li>1991: Python 0.9.1</li>\n-<li>1995: PIL started</li>\n-<li>1998: Zope</li>\n-<li>1999: Zope2</li>\n-<li>2000: Python 2.0 with distutils</li>\n-<li>2001: Plone</li>\n-<li>2005: Buildout</li>\n-<li>2006: I attended my first Plone Conference, in Washington</li>\n-<li>2006: setuptools was born</li>\n-</ul>\n-<p>PIL had an issue, or Plone had an issue with PIL:</p>\n-<ul class="simple">\n-<li>PIL used distutils.</li>\n-<li>Plone 3.2 used Buildout and setuptools</li>\n-<li>PIL was not installable in Buildout and setuptools</li>\n-<li>Specific problem: <tt class="docutils literal"><span class="pre">import</span> <span class="pre">Image</span></tt> could mean the Image module from PIL, or the Image module from Zope.</li>\n-</ul>\n-<p>Various ways of repackaging PIL started, for example <tt class="docutils literal"><span class="pre">PILwoTk</span></tt>. You can still find various PIL derivatives at <a class="reference" href="https://dist.plone.org/thirdparty/">https://dist.plone.org/thirdparty/</a></p>\n-<p>PIL 1.1.6 from 2006 is still the last version on <a class="reference" href="https://pypi.org/project/PIL/#history">PyPI</a>. I got maintainership of this page this year, actually.\n-Pillow 1.0 is basically the same, except that it uses <tt class="docutils literal"><span class="pre">setuptools</span></tt>.\n-This worked in buildout.\n-I was happy.</p>\n-<p>Couple years, nothing really interesting happened.\n-But some contributors came along.\n-Pillow 2.0.0 in March 2013 had Python 3 support.</p>\n-<p>An important milestone in 2015: we added release notes.</p>\n-<p>Release schedule: in the beginning of every quarter.</p>\n-<p>We get some money from Tidelift for maintenance.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-08T16:23:06+00:00</published>\n-\n-      <updated>2020-12-08T16:26:22+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Lightning talks Monday</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/lightning-talks-monday" />\n-\n-\n-\n-      <id>urn:syndication:73d847717e4336392db709c0738ec383</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <div class="section" id="alec-mitchell-wysiwyg-problems-be-gone">\n-<h3><a name="alec-mitchell-wysiwyg-problems-be-gone">Alec Mitchell: WYSIWYG problems be gone</a></h3>\n-<p>A new add-on to vastly* improve your content editing experience.</p>\n-<p>(* size of improvement may vary, no warranty implied. The following is (un)paid free software promotional content)</p>\n-<p>Adding images to a document is so hard! At least nine steps! (Difficulty be exaggerated for marketing purposes).\n-Why can\'t you drop an image in?\n-You can, with our new, super special add-on <a class="reference" href="https://pypi.org/project/kcrw.tinymce-imagedrop/">krcw.tinymce_imagedrop</a>.</p>\n-<p>Can you drop two?\n-Yes!</p>\n-<p>Can you drop more than two?\n-No, because browsers are weird.</p>\n-<p>But it fails gracefully.</p>\n-</div>\n-<div class="section" id="steve-piercy-deform-and-friends">\n-<h3><a name="steve-piercy-deform-and-friends">Steve Piercy: Deform and friends</a></h3>\n-<p>How I learned to stop worrying and love web forms.\n-We must have a good interface, data structure, validation, security.\n-Deform (form library), colander (de/serialization), peppercorn (data structure), bootstrap forms for design.\n-We have a looooong list of widgets.\n-In deform 3.0 we will use bootstrap 5.\n-See <a class="reference" href="https://github.com/pylons/deform">https://github.com/pylons/deform</a></p>\n-</div>\n-<div class="section" id="christopher-lozinski-forest-wiki">\n-<h3><a name="christopher-lozinski-forest-wiki">Christopher Lozinski: Forest Wiki</a></h3>\n-<p>The <a class="reference" href="https://forestwiki.com/">Forest Wiki</a> is a modern version of Zope 2.\n-Biggest difference: it uses Pyramid\'s security and views.\n-Modern JavaScript enabled ZMI: reorder, sort, rename, etc.\n-Both WYSIWYG and MarkDown pages.\n-Advanced types like JSON, CoffeeScript, pug. Pug is the leading template engine for Node.</p>\n-</div>\n-<div class="section" id="jens-klein-relstorage">\n-<h3><a name="jens-klein-relstorage">Jens Klein: RelStorage</a></h3>\n-<p>Plone relational database backend storage.\n-It is a drop-in replacement for FileStorage of ZEO.\n-You can use PostgreSQL, MySQL, Oracle, SQLite.\n-It has been around for about 13 years, grown old, but in recent years development has picked up, driven by Jason Madden, including Python 3 support. It is much more performant.\n-Latest release 3.4.0 is form October 2020.</p>\n-<p>PostgreSQL is the cloud database, kind of industry standard, well supported by all big cloud providers.\n-Easy to install in Docker.</p>\n-<p>Advantages of RelStorage: fast, parallel commits, better concurrency, shorter locks.\n-Optimized per process caching.\n-Blobs in database.\n-Optionally you can use it in history free mode. You lose the Undo functionality, but you don\'t need to pack so often.</p>\n-<p><tt class="docutils literal"><span class="pre">plone.recipe.zope2instance</span></tt> supports it with the <tt class="docutils literal"><span class="pre">rel-storage</span></tt> option.</p>\n-<p>You can use additional client side caches, shared between all threads of a process.</p>\n-<p>With the <tt class="docutils literal"><span class="pre">zodbconvert</span></tt> tool you convert from ZEO to RelStorage, or the other way around, including converting blobs if needed.</p>\n-<p>ZODB keeps old transactions, so packing is needed, even in history free mode. RelStorage has a fast <tt class="docutils literal"><span class="pre">zodbpack</span></tt>.</p>\n-<p>Blobs:</p>\n-<ul>\n-<li><p class="first">RelStorage 3.x is Python 3 only and runs with Plone 5.2+. Here, blobs should be stored in RelStorage.</p>\n-</li>\n-<li><p class="first">RelStorage 2.x is for Plone 5.0, 5.1, and blobs should <a href="#id1" name="id2"><span class="problematic" id="id2">**</span></a>not**&nbsp; be stored in the database, except for Oracle backends, otherwise you should still use a shared blobs filesystem directory.</p>\n-<div class="system-message" id="id1">\n-<p class="system-message-title">System Message: <a name="id1">WARNING/2</a> (<tt class="docutils">&lt;string&gt;</tt>, line 69); <em><a href="#id2">backlink</a></em></p>\n-<p>Inline strong start-string without end-string.</p>\n-</div>\n-</li>\n-</ul>\n-<p>I use RelStorage today for all my live deployments. I have used it since version 1.6 with Plone 4.3 and never had problems. Always blazing fast. Dev/ops and sysadmins love it: it is a standard solution, nothing special, just works.</p>\n-</div>\n-<div class="section" id="maik-derstappen-add-on-catalog-for-plone">\n-<h3><a name="maik-derstappen-add-on-catalog-for-plone">Maik Derstappen: Add-on catalog for Plone</a></h3>\n-<p>We want to bring back an add-on catalog for Plone. You can look on PyPI, but it is hard to find packages.</p>\n-<p>We worked on a tool for this. You can search on named, filter on Plone versions and add-on types.</p>\n-<p>Components:</p>\n-<ul class="simple">\n-<li>The <a class="reference" href="https://github.com/collective/pyf.aggregator">Python Package Filter Aggregator</a> (<tt class="docutils literal"><span class="pre">pyf.aggregator</span></tt>) aggregates the meta information of all Python packages in the PyPI.</li>\n-<li>an <a class="reference" href="https://github.com/collective/pyf.api">api</a> using elasticsearch</li>\n-<li>a <a class="reference" href="https://github.com/collective/pyf-svelte-gui">prototype in Svelte</a></li>\n-</ul>\n-<p>We only aggregate packages that have classifier <tt class="docutils literal"><span class="pre">Plone</span> <span class="pre">::</span> <span class="pre">Framework</span></tt>.\n-We will probably work on this during the sprints and are happy to onboard you.</p>\n-</div>\n-<div class="section" id="david-bain-plone-and-webflow">\n-<h3><a name="david-bain-plone-and-webflow">David Bain: Plone and Webflow</a></h3>\n-<p>Both platforms are for building websites, but they approach things in different ways.\n-I hope this may inspire.\n-Keep in mind the motivation of the two platforms, which may account for some strengths and weaknesses.</p>\n-<p>Webflow is visual web design, less content management. Strong design tools.\n-Designer friendly layout tools.\n-You can design a page with what you could call blocks.</p>\n-<p>Plone is enterprise content management, focus on security.\n-Linking to an attachment is standard, where it is tricky in Webflow.\n-Forms are way more flexible.</p>\n-<p>We have also built a website in Webflow and based it on Plone.</p>\n-</div>\n-<div class="section" id="steve-piercy-pyramid-project-in-pycharm-professional">\n-<h3><a name="steve-piercy-pyramid-project-in-pycharm-professional">Steve Piercy: Pyramid Project in PyCharm Professional</a></h3>\n-<p>It is easy to create a such a project. Demo.\n-See <a class="reference" href="https://stevepiercy.github.io/pppp/">https://stevepiercy.github.io/pppp/</a></p>\n-</div>\n-<div class="section" id="miu-razvan-volto-grid-block">\n-<h3><a name="miu-razvan-volto-grid-block">Miu Razvan: Volto grid block</a></h3>\n-<ul class="simple">\n-<li>Created by Eau de Web team</li>\n-<li>Dependencies: Volto blocks form</li>\n-<li>Similar component: Volto columns block</li>\n-<li>Use it to organize other blocks.</li>\n-<li>Demo showing lots of configuration options, including for different screen sizes</li>\n-<li>See <a class="reference" href="https://github.com/eea/volto-grid-block">https://github.com/eea/volto-grid-block</a></li>\n-</ul>\n-</div>\n-<div class="section" id="maik-derstappen-custom-elements">\n-<h3><a name="maik-derstappen-custom-elements">Maik Derstappen: Custom elements</a></h3>\n-<p>Custom elements are an extension to normal native html elements, for example <tt class="docutils literal"><span class="pre">&lt;flag-icon&gt;</span></tt>.</p>\n-<p>The promise of web components: write once, use anywhere.\n-See <a class="reference" href="https://custom-elements-everywhere.com/">https://custom-elements-everywhere.com/</a></p>\n-<p>How do you use this in Plone?\n-Use <tt class="docutils literal"><span class="pre">plonecli</span> <span class="pre">add</span> <span class="pre">svelte_app</span></tt> to create a small app. Run <tt class="docutils literal"><span class="pre">yarn</span></tt>. Install in Plone add-ons control panel.\n-Edit a page. Replace html source with <tt class="docutils literal"><span class="pre">&lt;my-svelte-app</span> <span class="pre">/&gt;</span></tt>.\n-And your component is there and working.\n-The size is less than five&nbsp; kilobytes.</p>\n-</div>\n-<div class="section" id="tiberiu-ichim-volto-slate">\n-<h3><a name="tiberiu-ichim-volto-slate">Tiberiu Ichim: volto-slate</a></h3>\n-<p><tt class="docutils literal"><span class="pre">volto-slate</span></tt> is a drop-in replacement for the standard rich text editor in Volto.\n-Volto turns an HTML document into a modern document.</p>\n-<p>Why another text editor instead of improving the existing one?</p>\n-<ul class="simple">\n-<li>With Slate we get a better plugin framework. Plugins are just wrappers around the editor. The standard Draft.js is meant to be integrated directly by an application, no concept of plugins out-of-the-box.</li>\n-<li>Slate has simple DOM-like storage for its values, making it easier to render the ersult.</li>\n-</ul>\n-<p>Current status:</p>\n-<ul class="simple">\n-<li>No migrations of any kind.</li>\n-<li>Right now not possible to completely remove or replace Draftjs out of Volto.</li>\n-</ul>\n-</div>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-08T11:53:56+00:00</published>\n-\n-      <updated>2020-12-09T10:19:52+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Fred van Dijk: collective.collectionfilter as a Light-weight Faceted Navigation or a \'compare\' Console</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/fred-van-dijk-collective-collectionfilter-as-a-light-weight-faceted-navigation-or-a-compare-console" />\n-\n-\n-\n-      <id>urn:syndication:0a9da3a3170511af38154da7691da92a</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>I want to talk about some categorisation and classification options in Plone, next to the folder structure.</p>\n-<p>Faceted navigation: drill down on \'facets\' when you search for items. It was popularized by online shopping. Facets in Plone for developers is: whatever is in the ZCatalog, and for users: what you can search on in Collections.\n-Gold standard is <a class="reference" href="https://github.com/eea/eea.facetednavigation">eea.facetednavigation</a>, developed for the European Environment Agency. Examples: <a class="reference" href="https://www.eea.europa.eu/highlights">EEA</a>,  and on two sites by Zest: <a class="reference" href="https://vaquums.eu/sensor-db">Vaquums</a> and <a class="reference" href="https://www.minaraad.be/zoeken">Minaraad</a>, where it replaces the standard search.</p>\n-<p>collective.collectionfilter is a much leaner, meaner, but also more limited version of faceted navigation. Demo with standard Plone News Items with some tags (also known as categories, also known as Subject). Add a Collection that filters on News Items. Now add collection filter portlets.</p>\n-<p>eea.facetednavigation takes over your complete page. In an action you enable or disable it.</p>\n-<p>Now a demo of collectionfilter in SGBP, a documentation website for water management planning in Belgium/Flanders. The customer wanted to take some graphs and compare them. We did that with collectionfilter and collective.classifiers. With the last one we added structured categories: one for water basins and one for parameters of the graphs. Now we use collectionfilter to query a parameter and show the graphs for all water basins.</p>\n-<p>You can adapt several things in the collectionfilter UI, for example change how search options are displayed. This is documented, but took me a while to get right.</p>\n-<p>Collectionfilter also works with Mosaic, because the portlets are also mapped to tiles.</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-07T21:10:20+00:00</published>\n-\n-      <updated>2020-12-07T21:10:20+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-\n-    <entry>\n-\n-      <title>Asko Soukka: Plone and Volto in a Jamstack project</title>\n-\n-      <link rel="alternate" type="text/html"\n-            href="https://maurits.vanrees.org/weblog/archive/2020/12/asko-soukka-plone-and-volto-in-a-jamstack-project" />\n-\n-\n-\n-      <id>urn:syndication:a2b3ebe0e81fdf7ce953cb80333b0919</id>\n-\n-\n-\n-\n-\n-\n-      <content type="html"\n-               xml:base="https://maurits.vanrees.org"\n-               xml:lang="en-US" xml:space="preserve">\n-          <![CDATA[\n-          <p>Here are the <a class="reference" href="https://datakurre.github.io/ploneconf2020/plone-and-volto-in-jamstack-project.pdf">slides</a>.</p>\n-<p>I am a software architect at University of Jyv\xc3\xa4skyl\xc3\xa4. I have been using Plone since 2004 and GatsbyJS since 2018.\n-The university wanted one student information management system to rule them all, but... every organisation shall do their own integrations, using granular REST API with deep JSON responses. And there should be branded study guides, which we crafted with GatsbyJS. But this was not enough for the Open University part. They really needed a CMS.</p>\n-<p>We use Plone 5.2, Volto, GatsbyJS, and have 6000 html pages, times two languages, out of which 760 are Volto pages.\n-With Plone we could extend content types without needing to do any coding, in the content types field editor. In volto we added auto-complete widgets with custom vocabularies. On the GatsbyJs side, we query the connected pages with GraphQL. We render Volto layouts with React components, rendering individual blocks.</p>\n-<p>Why did we choose GatsbyJs? It is a ReactJS-based site generator. Being static, it is very fast. You can use multiple sources as input, using a plugin architecture. Data lookup is done with GraphQL. It is easy to get started, with comprehensive documentation.</p>\n-<p>I mentored two Google Summer of Code projects for the <tt class="docutils literal"><span class="pre">gatsby-source-plone</span></tt> plugin. It supports default types and most TTW types, also Volto blocks. You can do incremental updates by modification date, so it is really fast.</p>\n-<p>Not everything is easy. The full &quot;GatsbyJs experience&quot; requires practice. You want to replace inline images and links with GatsbyJs images and links, replace file links with direct downloads.</p>\n-<p>Using <tt class="docutils literal"><span class="pre">&#64;plone/volto</span></tt> as dependency to render blocks seemed like a good idea, but it required webpack overrides to be impartable, and could not be used for images and links.</p>\n-<p>The ugly parts of GatsbyJs:</p>\n-<ul class="simple">\n-<li>The GraphQL source plugin cannot cache.</li>\n-<li>The build may take hours, and gigabytes of memory.</li>\n-<li>The build result in readonly.</li>\n-<li>For me it is hard to follow GatsbyJs development, especially individual plugins, because they use a monorepo.</li>\n-</ul>\n-<p>Editors can work on the site during the day, and then wee rebuild the result during the night</p>\n-\n-          ]]>\n-      </content>\n-\n-\n-\n-      <author>\n-        <name>Maurits van Rees</name>\n-      </author>\n-\n-      <published>2020-12-07T17:54:09+00:00</published>\n-\n-      <updated>2020-12-07T17:54:09+00:00</updated>\n-\n-\n-        <category term="plone" />\n-\n-\n-        <category term="ploneconf2020" />\n-\n-\n-    </entry>\n-\n-\n-\n-</feed>\ndiff --git a/plone/app/portlets/tests/configure.zcml b/plone/app/portlets/tests/configure.zcml\nindex 1b376d1c..61518080 100644\n--- a/plone/app/portlets/tests/configure.zcml\n+++ b/plone/app/portlets/tests/configure.zcml\n@@ -1,26 +1,28 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     package="plone.app.portlets"\n-    i18n_domain="test">\n+    i18n_domain="test"\n+    >\n \n-    <plone:portlet\n-        name="portlets.test.Test"\n-        interface="plone.app.portlets.tests.test_configuration.ITestPortlet"\n-        assignment="plone.app.portlets.tests.test_configuration.TestAssignment"\n-        renderer="plone.app.portlets.tests.test_configuration.TestRenderer"\n-        addview="plone.app.portlets.tests.test_configuration.TestAddForm"\n-        editview="plone.app.portlets.tests.test_configuration.TestEditForm"\n-        />\n+  <plone:portlet\n+      name="portlets.test.Test"\n+      interface="plone.app.portlets.tests.test_configuration.ITestPortlet"\n+      assignment="plone.app.portlets.tests.test_configuration.TestAssignment"\n+      renderer="plone.app.portlets.tests.test_configuration.TestRenderer"\n+      addview="plone.app.portlets.tests.test_configuration.TestAddForm"\n+      editview="plone.app.portlets.tests.test_configuration.TestEditForm"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="testing"\n-        title="plone.app.portlets testing"\n-        description="Used for testing only"\n-        directory="tests/profiles/testing"\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="testing"\n+      title="plone.app.portlets testing"\n+      description="Used for testing only"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      directory="tests/profiles/testing"\n+      />\n \n </configure>\ndiff --git a/plone/app/portlets/tests/profiles/testing/portlets.xml b/plone/app/portlets/tests/profiles/testing/portlets.xml\nindex e1a89a5c..4895e87c 100644\n--- a/plone/app/portlets/tests/profiles/testing/portlets.xml\n+++ b/plone/app/portlets/tests/profiles/testing/portlets.xml\n@@ -1,153 +1,141 @@\n-<?xml version="1.0"?>\n-<portlets\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone">\n-\n-    <portletmanager\n-        name="test.testcolumn"\n-        type="plone.app.portlets.tests.test_configuration.ITestColumn"\n-        />\n-\n-    <portletmanager\n-        name="test.testcolumn2"\n-        type="plone.app.portlets.tests.test_configuration.ITestColumn"\n-        />\n-\n-    <portlet\n-        addview="portlets.test.Test"\n-        title="Test portlet"\n-        description="A test portlet"\n-        i18n:attributes="title title_test_portlet;\n-                         description description_test_portlet"\n-        />\n-\n-    <!-- \'name\' and \'insert-before\' are optional -->\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="context"\n-        key="/"\n-        type="portlets.test.Test"\n-        name="test.portlet1">\n-            <property name="test_text">Test pr\xc3\xb6p 1</property>\n-            <property name="test_bool">False</property>\n-            <property name="test_tuple">\n-                <element>published</element>\n-                <element>private</element>\n-            </property>\n-    </assignment>\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="context"\n-        key="/"\n-        type="portlets.test.Test"\n-        name="test.portlet2"\n-        visible="0"\n-        insert-before="test.portlet1">\n-            <property name="test_text">Test prop 2</property>\n-            <property name="test_bool">True</property>\n-            <property name="test_tuple" />\n-    </assignment>\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="context"\n-        key="/"\n-        type="portlets.test.Test"\n-        name="test.portlet3"\n-        insert-before="*" />\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="content_type"\n-        key="Folder"\n-        type="portlets.test.Test"\n-        name="test.portlet4"\n-        insert-before="test.portlet1"\n-        />\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="content_type"\n-        key="Folder"\n-        type="portlets.test.Test"\n-        name="test.portlet5"\n-        insert-before="test.portlet1"\n-        />\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="group"\n-        key="Reviewers"\n-        type="portlets.test.Test"\n-        name="test.portlet6"\n-        insert-before="test.portlet1"\n-        />\n-\n-    <assignment\n-        manager="test.testcolumn"\n-        category="context"\n-        key="/"\n-        type="portlets.test.Test"\n-        name="test.portlet7"\n-        remove="" />\n-\n-    <assignment name="navigation"\n-        category="context"\n-        key="/"\n-        manager="test.testcolumn2"\n-        type="portlets.Navigation"\n-        visible="True">\n-        <property name="topLevel">1</property>\n-        <property name="currentFolderOnly">False</property>\n-        <property name="name"></property>\n-        <property name="includeTop">False</property>\n-        <property name="bottomLevel">0</property>\n-        <property name="root"></property>\n-        <property name="no_icon">False</property>\n-        <property name="thumb_scale"></property>\n-        <property name="no_thumbs">False</property>\n-    </assignment>\n-\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="context"\n-        location="/news"\n-        status="block"\n-        />\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="group"\n-        location="/news"\n-        status="show"\n-        />\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="content_type"\n-        location="/news"\n-        status="acquire"\n-        />\n-\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="content_type"\n-        location="/"\n-        status="block"\n-        />\n-\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="group"\n-        location="/"\n-        status="show"\n-        />\n-\n-    <blacklist\n-        manager="test.testcolumn"\n-        category="context"\n-        location="/"\n-        status="acquire"\n-        />\n+<?xml version="1.0" encoding="utf-8"?>\n+<portlets xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+          i18n:domain="plone"\n+>\n+\n+  <portletmanager name="test.testcolumn"\n+                  type="plone.app.portlets.tests.test_configuration.ITestColumn"\n+  />\n+\n+  <portletmanager name="test.testcolumn2"\n+                  type="plone.app.portlets.tests.test_configuration.ITestColumn"\n+  />\n+\n+  <portlet addview="portlets.test.Test"\n+           description="A test portlet"\n+           title="Test portlet"\n+           i18n:attributes="title title_test_portlet;                          description description_test_portlet"\n+  />\n+\n+  <!-- \'name\' and \'insert-before\' are optional -->\n+\n+  <assignment category="context"\n+              key="/"\n+              manager="test.testcolumn"\n+              name="test.portlet1"\n+              type="portlets.test.Test"\n+  >\n+    <property name="test_text">Test pr\xc3\xb6p 1</property>\n+    <property name="test_bool">False</property>\n+    <property name="test_tuple">\n+      <element>published</element>\n+      <element>private</element>\n+    </property>\n+  </assignment>\n+\n+  <assignment category="context"\n+              insert-before="test.portlet1"\n+              key="/"\n+              manager="test.testcolumn"\n+              name="test.portlet2"\n+              type="portlets.test.Test"\n+              visible="0"\n+  >\n+    <property name="test_text">Test prop 2</property>\n+    <property name="test_bool">True</property>\n+    <property name="test_tuple" />\n+  </assignment>\n+\n+  <assignment category="context"\n+              insert-before="*"\n+              key="/"\n+              manager="test.testcolumn"\n+              name="test.portlet3"\n+              type="portlets.test.Test"\n+  />\n+\n+  <assignment category="content_type"\n+              insert-before="test.portlet1"\n+              key="Folder"\n+              manager="test.testcolumn"\n+              name="test.portlet4"\n+              type="portlets.test.Test"\n+  />\n+\n+  <assignment category="content_type"\n+              insert-before="test.portlet1"\n+              key="Folder"\n+              manager="test.testcolumn"\n+              name="test.portlet5"\n+              type="portlets.test.Test"\n+  />\n+\n+  <assignment category="group"\n+              insert-before="test.portlet1"\n+              key="Reviewers"\n+              manager="test.testcolumn"\n+              name="test.portlet6"\n+              type="portlets.test.Test"\n+  />\n+\n+  <assignment category="context"\n+              key="/"\n+              manager="test.testcolumn"\n+              name="test.portlet7"\n+              remove=""\n+              type="portlets.test.Test"\n+  />\n+\n+  <assignment category="context"\n+              key="/"\n+              manager="test.testcolumn2"\n+              name="navigation"\n+              type="portlets.Navigation"\n+              visible="True"\n+  >\n+    <property name="topLevel">1</property>\n+    <property name="currentFolderOnly">False</property>\n+    <property name="name" />\n+    <property name="includeTop">False</property>\n+    <property name="bottomLevel">0</property>\n+    <property name="root" />\n+    <property name="no_icon">False</property>\n+    <property name="thumb_scale" />\n+    <property name="no_thumbs">False</property>\n+  </assignment>\n+\n+  <blacklist category="context"\n+             location="/news"\n+             manager="test.testcolumn"\n+             status="block"\n+  />\n+  <blacklist category="group"\n+             location="/news"\n+             manager="test.testcolumn"\n+             status="show"\n+  />\n+  <blacklist category="content_type"\n+             location="/news"\n+             manager="test.testcolumn"\n+             status="acquire"\n+  />\n+\n+  <blacklist category="content_type"\n+             location="/"\n+             manager="test.testcolumn"\n+             status="block"\n+  />\n+\n+  <blacklist category="group"\n+             location="/"\n+             manager="test.testcolumn"\n+             status="show"\n+  />\n+\n+  <blacklist category="context"\n+             location="/"\n+             manager="test.testcolumn"\n+             status="acquire"\n+  />\n \n </portlets>\ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex c52d40bd..90b19398 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -2,11 +2,12 @@\n from plone.app.portlets.testing import OPTIONFLAGS\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n from plone.testing import layered\n-from unittest import TestSuite\n+\n+import unittest\n \n \n def test_suite():\n-    suite = TestSuite()\n+    suite = unittest.TestSuite()\n     suite.addTest(\n         layered(\n             DocFileSuite(\ndiff --git a/plone/app/portlets/tests/testMemberDashboard.rst b/plone/app/portlets/tests/testMemberDashboard.rst\nindex dd922332..bb095334 100644\n--- a/plone/app/portlets/tests/testMemberDashboard.rst\n+++ b/plone/app/portlets/tests/testMemberDashboard.rst\n@@ -16,7 +16,7 @@ bug: 11174: Portal Members can\'t add portlets to their dashboard\n ----------------------\n Login as the \'user1\' user\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(layer[\'app\'])\n     >>> portalURL = portal.absolute_url()\n \n@@ -34,7 +34,7 @@ Go to the dashboard and check that portlets are addable here\n \n Let\'s try to add a Search portlet and then remove it\n \n-    >>> bool(re.search(\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n+    >>> bool(re.search(r\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n     False\n     >>> browser.getControl(name=\':action\',index=0).value = [\'/++dashboard++plone.dashboard1+user1/+/portlets.Search\']\n     >>> browser.getForm(index=1).submit()\n@@ -73,7 +73,7 @@ Using the addview, let\'s see that we cannot add a portlet for another user\n     >>> browser.getControl(\'Log in\').click()\n \n     >>> browser.open(portalURL+\'/@@manage-dashboard?_authenticator=\' + createToken())\n-    >>> bool(re.search(\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n+    >>> bool(re.search(r\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n     False\n \n Now, we try to open the @@manage-portlets view and also try to call the addview\n@@ -94,7 +94,7 @@ those views\n     >>> browser.open(portalURL+\'/@@manage-portlets?_authenticator=\' + createToken())\n     >>> "Insufficient Privileges" in browser.contents\n     False\n-    >>> bool(re.search(\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n+    >>> bool(re.search(r\'\\<\\/span\\>\\s+Search\\s+\\<\\/div\\>\', browser.contents))\n     False\n     >>> browser.open(portalURL + "/++contextportlets++plone.leftcolumn/+/portlets.Search")\n     >>> "Insufficient Privileges" in browser.contents\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex c9a2b605..3427115c 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -12,6 +12,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -19,7 +21,7 @@ def afterSetUp(self):\n \n     def test_portlet_type_registered(self):\n         portlet = getUtility(IPortletType, name="portlets.Actions")\n-        self.assertEquals(portlet.addview, "portlets.Actions")\n+        self.assertEqual(portlet.addview, "portlets.Actions")\n         return\n \n     def test_interfaces(self):\n@@ -40,7 +42,7 @@ def test_invoke_add_view(self):\n         data = {"ptitle": "Actions", "category": "document", "show_icons": True}\n         addview.createAndAdd(data=data)\n \n-        self.assertEquals(len(mapping), 1)\n+        self.assertEqual(len(mapping), 1)\n         self.assertTrue(isinstance(mapping.values()[0], actions.Assignment))\n         return\n \n@@ -158,18 +160,18 @@ def test_multiple_portlets(self):\n         links2 = r2.actionLinks()\n \n         # check the portal_tabs links (portal_tabs is somehow special)\n-        self.assertEquals(len(links1), 5)\n-        self.assertEquals(links1[0]["title"], "Home")\n+        self.assertEqual(len(links1), 5)\n+        self.assertEqual(links1[0]["title"], "Home")\n \n         # now check the site_actions links\n         # this was failing until the caching of actionLinks method was fixed\n         if int(migtool.getInstanceVersion()[0]) >= 4:\n-            self.assertEquals(len(links2), 3)\n+            self.assertEqual(len(links2), 3)\n         else:\n-            self.assertEquals(len(links2), 4)\n-        self.assertEquals(links2[0]["title"], "Site Map")\n-        self.assertEquals(links2[0]["url"], "http://nohost/plone/sitemap")\n-        self.assertEquals(links2[0]["icon"], None)\n+            self.assertEqual(len(links2), 4)\n+        self.assertEqual(links2[0]["title"], "Site Map")\n+        self.assertEqual(links2[0]["url"], "http://nohost/plone/sitemap")\n+        self.assertEqual(links2[0]["icon"], None)\n         return\n \n     def test_portal_tabs(self):\n@@ -239,3 +241,10 @@ def test_object_buttons_with_icons(self):\n         expected = {"Cut", "Copy", "Rename", "Delete"}\n         got = {str(link["title"]) for link in output}\n         self.assertTrue(expected.issubset(got))\n+\n+\n+def test_suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n+    return suite\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex f3ca0184..928c42fc 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -2,6 +2,8 @@\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n+import unittest\n+\n \n class MockBrain:\n     def __init__(self, path="some/path", modified="2002-01-01"):\n@@ -60,9 +62,6 @@ def testNonASCIIPath(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestCacheKey))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestCacheKey))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_classic_portlet.py b/plone/app/portlets/tests/test_classic_portlet.py\nindex cbe01e5a..7e800fe4 100644\n--- a/plone/app/portlets/tests/test_classic_portlet.py\n+++ b/plone/app/portlets/tests/test_classic_portlet.py\n@@ -12,6 +12,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -119,10 +121,7 @@ def testRenderClassicPortlet(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex a064e73b..ea54d8f0 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -2,6 +2,7 @@\n from plone.app.portlets.exportimport.portlets import importPortlets\n from plone.app.portlets.interfaces import IColumn\n from plone.app.portlets.interfaces import IPortletTypeInterface\n+from plone.app.portlets.portlets import base\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.utils import assignment_mapping_from_key\n from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n@@ -9,6 +10,7 @@\n from plone.portlets.constants import GROUP_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n from plone.portlets.interfaces import IPortletAssignmentSettings\n+from plone.portlets.interfaces import IPortletDataProvider\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n@@ -17,27 +19,18 @@\n from Products.GenericSetup.context import TarballExportContext\n from Products.GenericSetup.interfaces import IBody\n from Products.GenericSetup.tests.common import DummyImportContext\n+from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n from zope.component import getUtility\n from zope.component import queryUtility\n from zope.component.interfaces import IFactory\n from zope.i18nmessageid import Message\n+from zope.interface import implementer\n from zope.interface import Interface\n \n import time\n-\n-\n-# BBB Zope 2.12\n-try:\n-    from OFS import metaconfigure\n-    from Zope2.App import zcml\n-\n-    zcml  # pyflakes\n-    metaconfigure\n-except ImportError:\n-    from Products.Five import fiveconfigure as metaconfigure\n-    from Products.Five import zcml\n+import unittest\n \n \n class DummyView(BrowserView):\n@@ -46,11 +39,6 @@ class DummyView(BrowserView):\n \n # A sample portlet\n \n-from plone.app.portlets.portlets import base\n-from plone.portlets.interfaces import IPortletDataProvider\n-from zope import schema\n-from zope.interface import implementer\n-\n \n class ITestPortlet(IPortletDataProvider):\n     test_text = schema.TextLine(title="Test")\n@@ -63,7 +51,6 @@ class ITestPortlet(IPortletDataProvider):\n \n @implementer(ITestPortlet)\n class TestAssignment(base.Assignment):\n-\n     test_text = None\n     test_bool = None\n     test_tuple = None\n@@ -279,7 +266,7 @@ def testAssignmentRemoval(self):\n             key="/",\n         )\n \n-        # initally there should be no portlet7\n+        # initially there should be no portlet7\n         self.assertEqual(mapping.get("test.portlet7", None), None)\n \n         # now we add one\n@@ -341,7 +328,7 @@ def testAssignmentPurging(self):\n         )\n         self.assertEqual(1, len(mapping))\n \n-        # and be purgable\n+        # and be purgeable\n         context = DummyImportContext(self.portal, purge=False)\n         context._files[\n             "portlets.xml"\n@@ -375,7 +362,7 @@ def testAssignmentPurging(self):\n         )\n         self.assertEqual(2, len(mapping))\n \n-        # and be purgable\n+        # and be purgeable\n         context = DummyImportContext(self.portal, purge=False)\n         context._files[\n             "portlets.xml"\n@@ -425,7 +412,7 @@ def testPurgeMethod(self):\n \n     def testPurge(self):\n         manager = queryUtility(IPortletManager, name="test.testcolumn")\n-        self.assertNotEquals(None, manager)\n+        self.assertNotEqual(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n         context._files[\n@@ -441,7 +428,7 @@ def testPurge(self):\n \n     def testManagerRemove(self):\n         manager = queryUtility(IPortletManager, name="test.testcolumn")\n-        self.assertNotEquals(None, manager)\n+        self.assertNotEqual(None, manager)\n \n         context = DummyImportContext(self.portal, purge=False)\n         context._files[\n@@ -596,10 +583,7 @@ def testExport(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestZCML))\n-    suite.addTest(makeSuite(TestGenericSetup))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestZCML))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestGenericSetup))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex c15b08cd..fb66b582 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -4,6 +4,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.portlets.interfaces import IPortletContext\n \n+import unittest\n+\n \n class TestBasicContext(PortletsTestCase):\n     def testParent(self):\n@@ -18,7 +20,6 @@ def testGlobalsNoGroups(self):\n         self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n-\n         group = self.portal.portal_groups.getGroupById("Reviewers")\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n@@ -32,7 +33,6 @@ def testGlobalsWithSingleGroup(self):\n         self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n-\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n@@ -70,7 +70,6 @@ def testGlobalsNoGroups(self):\n         self.assertEqual(g[1], ("user", TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n-\n         group = self.portal.portal_groups.getGroupById("Reviewers")\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group.addMember(TEST_USER_ID)\n@@ -84,7 +83,6 @@ def testGlobalsWithSingleGroup(self):\n         self.assertEqual(g[3], ("group", "Reviewers"))\n \n     def testGlobalsWithMultipleGroup(self):\n-\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         group = self.portal.portal_groups.getGroupById("Reviewers")\n         group.addMember(TEST_USER_ID)\n@@ -110,10 +108,9 @@ def testAnonymous(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestBasicContext))\n-    suite.addTest(makeSuite(TestPortalRootContext))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestBasicContext))\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(TestPortalRootContext)\n+    )\n     return suite\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex 0d504f76..40457880 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -2,20 +2,17 @@\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRetriever\n-from plone.portlets.interfaces import IPortletType\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n-from unittest import makeSuite\n-from unittest import TestSuite\n-from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.event import notify\n \n+import unittest\n+\n \n class TestDashboard(PortletsTestCase):\n     def test_default_dashboard_created_for_new_user(self):\n-\n         col = getUtility(IPortletManager, name="plone.dashboard1")\n         user_portlets = col[USER_CATEGORY]\n         self.assertFalse("fakeuser" in user_portlets)\n@@ -46,7 +43,6 @@ def test_non_ascii_usernames_created(self):\n \n \n def test_suite():\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestDashboard))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestDashboard))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_exportimport.py b/plone/app/portlets/tests/test_exportimport.py\nindex 545d53fa..77e27899 100644\n--- a/plone/app/portlets/tests/test_exportimport.py\n+++ b/plone/app/portlets/tests/test_exportimport.py\n@@ -15,6 +15,8 @@\n from zope.component import queryUtility\n from zope.i18nmessageid import Message\n \n+import unittest\n+\n \n class PortletsExportImportTestCase(PortletsTestCase):\n     def afterSetUp(self):\n@@ -248,14 +250,15 @@ def test_extractPortletManagerNode_customClass(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestImportPortlets))\n-    suite.addTest(makeSuite(TestExportPortlets))\n-    suite.addTest(makeSuite(TestImportPortletManagers))\n-    suite.addTest(makeSuite(TestExportPortletManagers))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestImportPortlets))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestExportPortlets))\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(TestImportPortletManagers)\n+    )\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(TestExportPortletManagers)\n+    )\n     return suite\n \n \ndiff --git a/plone/app/portlets/tests/test_formextender.py b/plone/app/portlets/tests/test_formextender.py\nindex 51fb7ada..94ce9878 100644\n--- a/plone/app/portlets/tests/test_formextender.py\n+++ b/plone/app/portlets/tests/test_formextender.py\n@@ -20,10 +20,10 @@\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \n-\n-# A sample schemaextender:\n+import unittest\n \n \n+# A sample schemaextender:\n EXTENDER_PREFIX = "portletcssclass"\n \n \n@@ -149,7 +149,6 @@ def test_invoke_add_form(self):\n         self.assertEqual(settings.get("css_class"), "my-class")\n \n     def test_editform_fields(self):\n-\n         schema_field_names = [k for k in field.Fields(news.INewsPortlet).keys()]\n \n         mapping = PortletAssignmentMapping()\n@@ -258,9 +257,6 @@ def test_renderer(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestSchemaExtender))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestSchemaExtender))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_login_portlet.py b/plone/app/portlets/tests/test_login_portlet.py\nindex a3f3f810..5d178225 100644\n--- a/plone/app/portlets/tests/test_login_portlet.py\n+++ b/plone/app/portlets/tests/test_login_portlet.py\n@@ -14,6 +14,8 @@\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -140,10 +142,7 @@ def testCanRegister(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_manage_views.py b/plone/app/portlets/tests/test_manage_views.py\nindex c78baf9c..9836eede 100644\n--- a/plone/app/portlets/tests/test_manage_views.py\n+++ b/plone/app/portlets/tests/test_manage_views.py\n@@ -1,5 +1,7 @@\n from plone.app.portlets.tests.base import PortletsTestCase\n \n+import unittest\n+\n \n class TestManageAssignments(PortletsTestCase):\n     def testMoveUp(self):\n@@ -13,10 +15,7 @@ def testDelete(self):\n \n \n def test_suite():\n-    from unittest import TestSuite\n-\n-    # from unittest import makeSuite\n-    suite = TestSuite()\n+    suite = unittest.TestSuite()\n     # TODO: Write tests that *pass*\n-    # suite.addTest(makeSuite(TestManageAssignments))\n+    # suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestManageAssignments))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_mapping.py b/plone/app/portlets/tests/test_mapping.py\nindex b9170971..b1eb279a 100644\n--- a/plone/app/portlets/tests/test_mapping.py\n+++ b/plone/app/portlets/tests/test_mapping.py\n@@ -11,6 +11,8 @@\n from zope.publisher.interfaces import NotFound\n from zope.publisher.interfaces.browser import IBrowserPublisher\n \n+import unittest\n+\n \n class TestNameChooser(PortletsTestCase):\n     def testNameChooser(self):\n@@ -72,11 +74,8 @@ def testTraverseToNonExistent(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestContextMapping))\n-    suite.addTest(makeSuite(TestTraverser))\n-    suite.addTest(makeSuite(TestNameChooser))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestContextMapping))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestTraverser))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestNameChooser))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex b8ee6889..a538d0d5 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -7,7 +7,6 @@\n \n \n def test_suite():\n-\n     import plone.app.portlets.storage\n \n     return unittest.TestSuite(\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 7cfb2345..e917df34 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -6,13 +6,13 @@\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import INavigationSchema\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import INavigationSchema\n from Products.CMFPlone.tests import dummy\n from Products.GenericSetup.utils import _getDottedName\n from zope.component import getMultiAdapter\n@@ -20,6 +20,8 @@\n from zope.interface import directlyProvides\n from zope.intid.interfaces import IIntIds\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -644,7 +646,7 @@ def testINavigationRootWithRelativeRootSet(self):\n         )\n \n     def testPortletsTitle(self):\n-        """If portlet\'s name is not explicitely specified we show\n+        """If portlet\'s name is not explicitly specified we show\n         default fallback \'Navigation\', translate it and hide it\n         with CSS."""\n         view = self.renderer(self.portal)\n@@ -711,10 +713,7 @@ def testHeadingLinkRootedItemGone(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_news_portlet.py b/plone/app/portlets/tests/test_news_portlet.py\nindex b021f887..4b8c6477 100644\n--- a/plone/app/portlets/tests/test_news_portlet.py\n+++ b/plone/app/portlets/tests/test_news_portlet.py\n@@ -12,6 +12,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -128,10 +130,7 @@ def test_all_news_link(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_recent_portlet.py b/plone/app/portlets/tests/test_recent_portlet.py\nindex 2eba5dd0..6a70eb27 100644\n--- a/plone/app/portlets/tests/test_recent_portlet.py\n+++ b/plone/app/portlets/tests/test_recent_portlet.py\n@@ -12,6 +12,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -121,10 +123,7 @@ def test_title(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py\nindex 03105469..ec6446b8 100644\n--- a/plone/app/portlets/tests/test_redirects.py\n+++ b/plone/app/portlets/tests/test_redirects.py\n@@ -4,6 +4,8 @@\n from plone.app.portlets.browser.formhelper import EditForm\n from plone.app.portlets.tests.base import PortletsTestCase\n \n+import unittest\n+\n \n class TestRedirects(PortletsTestCase):\n     _test_methods = [\n@@ -47,9 +49,6 @@ def test_suite():\n     # bin/test -s plone.app.portlets -m test_redirects\n     # But the error *is* in this test_redirects.py file,\n     # because it goes away when I delete this file.\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestRedirects))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRedirects))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_review_portlet.py b/plone/app/portlets/tests/test_review_portlet.py\nindex 53eb64e3..e978fe70 100644\n--- a/plone/app/portlets/tests/test_review_portlet.py\n+++ b/plone/app/portlets/tests/test_review_portlet.py\n@@ -14,6 +14,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestPortlet(PortletsTestCase):\n     def afterSetUp(self):\n@@ -130,10 +132,7 @@ def test_title(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_rss_portlet.py b/plone/app/portlets/tests/test_rss_portlet.py\nindex 1ee123ed..74e73e85 100644\n--- a/plone/app/portlets/tests/test_rss_portlet.py\n+++ b/plone/app/portlets/tests/test_rss_portlet.py\n@@ -140,10 +140,7 @@ def test_rss_feed_http(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestPortlet))\n-    suite.addTest(makeSuite(TestRenderer))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestPortlet))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRenderer))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_setup.py b/plone/app/portlets/tests/test_setup.py\nindex 4d31bd54..cf35792c 100644\n--- a/plone/app/portlets/tests/test_setup.py\n+++ b/plone/app/portlets/tests/test_setup.py\n@@ -9,6 +9,8 @@\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestProductInstall(PortletsTestCase):\n     def testPortletManagersRegistered(self):\n@@ -49,9 +51,6 @@ def testPortletTypesRegistered(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestProductInstall))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestProductInstall))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex c54bfd08..c6ca8b07 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -14,6 +14,8 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestTraversal(PortletsTestCase):\n     def _assertSameObject(self, a, b):\n@@ -52,8 +54,6 @@ def testGroupDashboardNamespace(self):\n         self.assertEqual("++groupdashboard++plone.dashboard1+Reviewers", mapping.id)\n \n     def testGroupDashboardNamespaceChecker(self):\n-        assignment = classic.Assignment()\n-        manager = getUtility(IPortletManager, name="plone.dashboard1")\n         mapping = self.portal.restrictedTraverse(\n             "++groupdashboard++plone.dashboard1+Reviewers"\n         )\n@@ -92,9 +92,6 @@ def testContentTypeNamespace(self):\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestTraversal))\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestTraversal))\n     return suite\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 08f4464a..06957183 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -5,16 +5,17 @@\n from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.utils import assignment_from_key\n from plone.app.testing import TEST_USER_ID\n+from plone.base.utils import safe_text\n from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletAssignmentMapping\n from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.utils import hashPortletInfo\n-from Products.CMFPlone.utils import safe_unicode\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n+import unittest\n+\n \n class TestAssignmentFromKey(PortletsTestCase):\n     def afterSetUp(self):\n@@ -82,18 +83,15 @@ def testTraversalRendererWithHash(self):\n             )\n         )\n         render_portlet_view = PortletUtilities(context, request)\n-        rendered_portlet = render_portlet_view.render_portlet(\n-            safe_unicode(portlet_hash)\n-        )\n+        rendered_portlet = render_portlet_view.render_portlet(safe_text(portlet_hash))\n         self.assertIn("portletNews", rendered_portlet)\n         self.assertIn("Test News", rendered_portlet)\n \n \n def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestAssignmentFromKey))\n-    suite.addTest(makeSuite(TestRendering))\n+    suite = unittest.TestSuite()\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(TestAssignmentFromKey)\n+    )\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestRendering))\n     return suite\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex db69975a..db641f23 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -1,7 +1,6 @@\n from Acquisition import aq_base\n from plone.app.event.portlets import portlet_calendar as calendar\n from plone.app.event.portlets import portlet_events as events\n-from plone.app.portlets import HAS_PLONE_APP_EVENT\n from plone.app.portlets.interfaces import IPortletPermissionChecker\n from plone.app.portlets.portlets import classic\n from plone.app.portlets.portlets import login\n@@ -81,8 +80,6 @@ def convert_legacy_portlets(context):\n         "portlet_recent": recent.Assignment(count=5),\n         "portlet_related": DONT_MIGRATE,\n         "portlet_languages": DONT_MIGRATE,\n-        "portlet_calendar": DONT_MIGRATE,\n-        "portlet_events": DONT_MIGRATE,\n         "portlet_calendar": calendar.Assignment(),\n         "portlet_events": events.Assignment(count=5),\n     }\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..375029bf 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,45 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.CMFPlone\']\n+ExtensionClass = [\'ComputedAttribute\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 908a1d62..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,9 +1,23 @@\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex a44fbd88..c0b1ac87 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "5.0.0b2.dev0"\n+version = "5.0.5.dev0"\n \n setup(\n     name="plone.app.portlets",\n@@ -19,57 +19,58 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="portlets viewlets plone",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n-    url="https://pypi.org/project/plone.app.portlets",\n+    url="https://github.com/plone/plone.app.portlets",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n+            "five.intid",\n             "plone.app.testing",\n+            "plone.namedfile",\n+            "plone.testing",\n+            "plone.z3cform",\n+            "zope.intid",\n         ],\n     ),\n     install_requires=[\n         "setuptools",\n+        "plone.base",\n+        "Zope",\n+        "BTrees",\n+        "ExtensionClass",\n+        "feedparser",\n         "five.customerize",\n+        "plone.app.i18n",\n+        "plone.app.layout",\n+        "plone.app.uuid",\n+        "plone.app.vocabularies",\n+        "plone.app.z3cform",\n         "plone.autoform",\n         "plone.i18n",\n         "plone.memoize",\n-        "plone.portlets>=1.1",\n-        "plone.app.i18n",\n-        "plone.app.vocabularies >= 2.1.15.dev0",\n-        "plone.app.z3cform",\n-        "transaction",\n+        "plone.portlets",\n+        "plone.protect",\n+        "plone.registry",\n+        "Products.GenericSetup",\n+        "Products.MimetypesRegistry",\n+        "Products.PluggableAuthService",\n+        "Products.PythonScripts",\n+        "Products.statusmessages",\n+        "z3c.form",\n         "zope.annotation",\n         "zope.browser",\n-        "zope.component",\n-        "zope.configuration",\n-        "zope.container",\n         "zope.contentprovider",\n-        "zope.event",\n-        "zope.i18nmessageid",\n-        "zope.interface",\n-        "zope.lifecycleevent",\n-        "zope.publisher",\n-        "zope.schema",\n-        "zope.site",\n-        "zope.traversing",\n-        "Products.CMFCore",\n-        "Products.CMFDynamicViewFTI",\n-        "Products.GenericSetup >= 2.0.dev0",\n-        "Products.PluggableAuthService",\n-        "ZODB",\n-        "Acquisition",\n-        "DateTime",\n-        "Zope >= 5",\n-        "feedparser",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..724a36cf\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.portlets {posargs}\n+extras =\n+    test\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2023-05-10T09:29:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.portlets/commit/74e4aaec242daae7d5fd2fb7d18f0304fbeed972

Merge pull request #136 from plone/add_css_class_to_actions

Add css class to actions

Files changed:
A news/127.bugfix
M plone/app/portlets/portlets/actions.pt

b'diff --git a/news/127.bugfix b/news/127.bugfix\nnew file mode 100644\nindex 00000000..fdae92ef\n--- /dev/null\n+++ b/news/127.bugfix\n@@ -0,0 +1,2 @@\n+Add css-class to better style actions.\n+[pbauer]\n\\ No newline at end of file\ndiff --git a/plone/app/portlets/portlets/actions.pt b/plone/app/portlets/portlets/actions.pt\nindex 44985527..cd462e42 100644\n--- a/plone/app/portlets/portlets/actions.pt\n+++ b/plone/app/portlets/portlets/actions.pt\n@@ -26,7 +26,7 @@\n             class string:actions-${view/category};\n           ">\n         <tal:loop tal:repeat="link view/actionLinks">\n-          <li class="portletItem"\n+          <li class="portletItem action-item-${python:link[\'id\']}"\n               tal:define="\n                 icon nocall:link/icon;\n               "\n'

