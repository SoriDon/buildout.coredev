Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-02T15:31:43+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/0a9733482306bf1bcc98af63d1f0f4565026be7c

cherrypick getObjSize script from python3

Files changed:
M CHANGES.rst
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/test_utils.py
M Products/CMFPlone/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex f27a3338d..31aef0eb4 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,9 @@ Breaking changes:\n \n New features:\n \n+- Factored out human_readable_size method for replacing getObjSize.py. #1801\n+  [reinhardt]\n+\n - Update TinyMCE to 4.7.13\n   [erral]\n \ndiff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 1d15903d9..743d29aeb 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -26,6 +26,7 @@\n from Products.CMFPlone.interfaces import IPloneCatalogTool\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n from Products.CMFPlone.utils import base_hasattr\n+from Products.CMFPlone.utils import human_readable_size\n from Products.CMFPlone.utils import safe_callable\n from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.ZCatalog import ZCatalog\n@@ -213,39 +214,17 @@ def getObjPositionInParent(obj):\n         return ordered.getObjectPosition(obj.getId())\n     return 0\n \n-SIZE_CONST = {\'KB\': 1024, \'MB\': 1024 * 1024, \'GB\': 1024 * 1024 * 1024}\n-SIZE_ORDER = (\'GB\', \'MB\', \'KB\')\n-\n \n @indexer(Interface)\n def getObjSize(obj):\n     """ Helper method for catalog based folder contents.\n     """\n-    smaller = SIZE_ORDER[-1]\n-\n     if base_hasattr(obj, \'get_size\'):\n         size = obj.get_size()\n     else:\n         size = 0\n \n-    # if the size is a float, then make it an int\n-    # happens for large files\n-    try:\n-        size = int(size)\n-    except (ValueError, TypeError):\n-        pass\n-\n-    if not size:\n-        return \'0 %s\' % smaller\n-\n-    if isinstance(size, six.integer_types):\n-        if size < SIZE_CONST[smaller]:\n-            return \'1 %s\' % smaller\n-        for c in SIZE_ORDER:\n-            if size / SIZE_CONST[c] > 0:\n-                break\n-        return \'%.1f %s\' % (float(size / float(SIZE_CONST[c])), c)\n-    return size\n+    return human_readable_size(size)\n \n \n @indexer(Interface)\ndiff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py\nindex a505995f9..e258ab0c6 100644\n--- a/Products/CMFPlone/tests/test_utils.py\n+++ b/Products/CMFPlone/tests/test_utils.py\n@@ -147,6 +147,24 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = \'/approot/PloneSite/folder/SubSite\'\n         self.assertEqual(get_top_site_from_url(ctx, req).id, \'SubSite\')\n \n+    def test_human_readable_size(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(0), \'0 KB\')\n+        self.assertEqual(human_readable_size(1), \'1 KB\')\n+        size = 1000\n+        self.assertEqual(human_readable_size(size), \'1 KB\')\n+        size += 24\n+        self.assertEqual(human_readable_size(size), \'1.0 KB\')\n+        size += 512\n+        self.assertEqual(human_readable_size(size), \'1.5 KB\')\n+        size *= 1024\n+        self.assertEqual(human_readable_size(size), \'1.5 MB\')\n+        size *= 1024\n+        self.assertEqual(human_readable_size(size), \'1.5 GB\')\n+        size *= 1024\n+        self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n+\n \n class LogoTests(PloneTestCase.PloneTestCase):\n \ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex d79440bf1..f0bdf9a79 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -805,3 +805,31 @@ def _safe_format(inst, method):\n     as we do in CMFPlone/__init__.py.\n     """\n     return SafeFormatter(inst).safe_format\n+\n+\n+SIZE_CONST = {\'KB\': 1024, \'MB\': 1024 * 1024, \'GB\': 1024 * 1024 * 1024}\n+SIZE_ORDER = (\'GB\', \'MB\', \'KB\')\n+\n+\n+def human_readable_size(size):\n+    """ Get a human readable size string. """\n+    smaller = SIZE_ORDER[-1]\n+\n+    # if the size is a float, then make it an int\n+    # happens for large files\n+    try:\n+        size = int(size)\n+    except (ValueError, TypeError):\n+        pass\n+\n+    if not size:\n+        return \'0 %s\' % smaller\n+\n+    if isinstance(size, six.integer_types):\n+        if size < SIZE_CONST[smaller]:\n+            return \'1 %s\' % smaller\n+        for c in SIZE_ORDER:\n+            if size // SIZE_CONST[c] > 0:\n+                break\n+        return \'%.1f %s\' % (float(size / float(SIZE_CONST[c])), c)\n+    return size\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-02T15:31:47+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/acd2068bfa30ce9d0f1ddcc3a944a879994a0817

Removed getObjectsFromPathList.py skin script. #1801

Files changed:
M CHANGES.rst
D Products/CMFPlone/skins/plone_scripts/getObjectsFromPathList.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 31aef0eb4..b0194199e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,8 @@ Breaking changes:\n   Third party code need either to depend on plone.app.controlpanel 4.0,\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n   [jensens]\n+- Removed getObjectsFromPathList.py skin script. #1801\n+  [reinhardt]\n \n New features:\n \ndiff --git a/Products/CMFPlone/skins/plone_scripts/getObjectsFromPathList.py b/Products/CMFPlone/skins/plone_scripts/getObjectsFromPathList.py\ndeleted file mode 100644\nindex 6eea56c4e..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/getObjectsFromPathList.py\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-## Script (Python) "getObjectsFromPathList"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=paths=[],batch=False,b_size=100\n-##title=method to turn a list of paths into a list of objects\n-\n-from Products.CMFCore.utils import getToolByName\n-from zExceptions import Forbidden\n-if container.REQUEST.get(\'PUBLISHED\') is script:\n-    raise Forbidden(\'Script may not be published.\')\n-\n-contents = []\n-portal = getToolByName(context, \'portal_url\').getPortalObject()\n-for path in paths:\n-    obj = portal.restrictedTraverse(str(path), None)\n-    if obj is not None:\n-        contents.append(obj)\n-\n-if batch:\n-    from Products.CMFPlone import Batch\n-    b_start = context.REQUEST.get(\'b_start\', 0)\n-    batch = Batch(contents, b_size, int(b_start), orphan=0)\n-    return batch\n-\n-return contents\n'

