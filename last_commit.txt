Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-26T19:55:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/a88f66cafec93af43827aea7e5911d230a69d377

Use aq functions instead of attributes everywhere.

This removes six test errors and turns them into test failures, which I guess is progress.

Files changed:
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py

diff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py
index df107e2..3216d99 100644
--- a/src/Products/PlonePAS/setuphandlers.py
+++ b/src/Products/PlonePAS/setuphandlers.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from Acquisition import aq_base
 from Acquisition import aq_parent
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS import config
@@ -404,7 +405,7 @@ def setLoginFormInCookieAuth(context):
     """Makes sure the cookie auth redirects to 'require_login' instead
        of 'login_form'."""
     uf = getattr(context, 'acl_users', None)
-    if uf is None or getattr(uf.aq_base, '_getOb', None) is None:
+    if uf is None or getattr(aq_base(uf), '_getOb', None) is None:
         # we have no user folder or it's not a PAS folder, do nothing
         return
     cookie_auth = uf._getOb('credentials_cookie_auth', None)
diff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py
index 149ec50..1dce8b3 100644
--- a/src/Products/PlonePAS/tests/test_groupdatatool.py
+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Permissions
 from AccessControl import Unauthorized
+from Acquisition import aq_parent
 from Products.PlonePAS.tests import base
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
@@ -29,8 +30,8 @@ def testWrapGroup(self):
         self.assertEqual(g.__class__.__name__, 'PloneGroup')
         g = self.groupdata.wrapGroup(g)
         self.assertEqual(g.__class__.__name__, 'GroupData')
-        self.assertEqual(g.aq_parent.__class__.__name__, 'PloneGroup')
-        self.assertEqual(g.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(g).__class__.__name__, 'PloneGroup')
+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,
                          'GroupManager')
 
 
@@ -69,8 +70,8 @@ def testGroupMembersAreWrapped(self):
         self.acl_users.userSetGroups(TEST_USER_ID, groupnames=['foo'])
         ms = g.getGroupMembers()
         self.assertEqual(ms[0].__class__.__name__, 'MemberData')
-        self.assertEqual(ms[0].aq_parent.__class__.__name__, 'PloneUser')
-        self.assertEqual(ms[0].aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(ms[0]).__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(aq_parent(ms[0])).__class__.__name__,
                          'PluggableAuthService')
 
     def testAddMember(self):
diff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py
index 2cb4381..fce58aa 100644
--- a/src/Products/PlonePAS/tests/test_groupstool.py
+++ b/src/Products/PlonePAS/tests/test_groupstool.py
@@ -154,8 +154,8 @@ def testGroupByIdIsWrapped(self):
         self.groups.addGroup('foo', [], [])
         g = self.groups.getGroupById('foo')
         self.assertEqual(g.__class__.__name__, 'GroupData')
-        self.assertEqual(g.aq_parent.__class__.__name__, 'PloneGroup')
-        self.assertEqual(g.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(g).__class__.__name__, 'PloneGroup')
+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,
                          'GroupManager')
 
     def testEditGroup(self):
@@ -212,8 +212,8 @@ def testGroupsByUserIdAreWrapped(self):
         self.acl_users.userSetGroups(TEST_USER_ID, groupnames=['foo'])
         gs = self.groups.getGroupsByUserId(TEST_USER_ID)
         self.assertEqual(gs[0].__class__.__name__, 'GroupData')
-        self.assertEqual(gs[0].aq_parent.__class__.__name__, 'PloneGroup')
-        self.assertEqual(gs[0].aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, 'PloneGroup')
+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,
                          'GroupManager')
 
     def testListGroups(self):
@@ -227,8 +227,8 @@ def testListedGroupsAreWrapped(self):
         self.groups.addGroup('foo', [], [])
         gs = self.groups.listGroups()
         self.assertEqual(gs[0].__class__.__name__, 'GroupData')
-        self.assertEqual(gs[0].aq_parent.__class__.__name__, 'PloneGroup')
-        self.assertEqual(gs[0].aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(gs[0]).__class__.__name__, 'PloneGroup')
+        self.assertEqual(aq_parent(aq_parent(gs[0])).__class__.__name__,
                          'GroupManager')
 
     def testSetGroupOwnership(self):
@@ -248,8 +248,8 @@ def testWrapGroup(self):
         self.assertEqual(g.__class__.__name__, 'PloneGroup')
         g = self.groups.wrapGroup(g)
         self.assertEqual(g.__class__.__name__, 'GroupData')
-        self.assertEqual(g.aq_parent.__class__.__name__, 'PloneGroup')
-        self.assertEqual(g.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(g).__class__.__name__, 'PloneGroup')
+        self.assertEqual(aq_parent(aq_parent(g)).__class__.__name__,
                          'GroupManager')
 
     def testGetGroupInfo(self):
@@ -270,4 +270,3 @@ def testGetGroupInfoAsAnonymous(self):
     def testGetBadGroupInfo(self):
         info = self.groups.getGroupInfo('foo')
         self.assertEqual(info, None)
-
diff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py
index a4697a7..8d92af9 100644
--- a/src/Products/PlonePAS/tests/test_membershiptool.py
+++ b/src/Products/PlonePAS/tests/test_membershiptool.py
@@ -441,7 +441,7 @@ def testGetMemberByIdIsWrapped(self):
         member = self.membership.getMemberById(TEST_USER_ID)
         self.assertNotEqual(member, None)
         self.assertEqual(member.__class__.__name__, 'MemberData')
-        self.assertEqual(member.aq_parent.__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(member).__class__.__name__, 'PloneUser')
 
     def testGetAuthenticatedMember(self):
         member = self.membership.getAuthenticatedMember()
@@ -451,7 +451,7 @@ def testGetAuthenticatedMemberIsWrapped(self):
         member = self.membership.getAuthenticatedMember()
         self.assertEqual(member.getUserName(), TEST_USER_NAME)
         self.assertEqual(member.__class__.__name__, 'MemberData')
-        self.assertEqual(member.aq_parent.__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(member).__class__.__name__, 'PloneUser')
 
     def testGetAuthenticatedMemberIfAnonymous(self):
         self.logout()
@@ -477,8 +477,8 @@ def testWrapUserWrapsBareUser(self):
         user = aq_base(user)
         user = self.membership.wrapUser(user)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(user.aq_parent.__class__.__name__, 'PloneUser')
-        self.assertEqual(user.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
                          'PluggableAuthService')
 
     def testWrapUserWrapsWrappedUser(self):
@@ -487,8 +487,8 @@ def testWrapUserWrapsWrappedUser(self):
         self.assertTrue(hasattr(user, 'aq_base'))
         user = self.membership.wrapUser(user)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(user.aq_parent.__class__.__name__, 'PloneUser')
-        self.assertEqual(user.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__, 'PloneUser')
+        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
                          'PluggableAuthService')
 
     def testWrapUserDoesntWrapMemberData(self):
@@ -505,8 +505,8 @@ def testWrapUserWrapsAnonymous(self):
         self.assertFalse(hasattr(nobody, 'aq_base'))
         user = self.membership.wrapUser(nobody, wrap_anon=1)
         self.assertEqual(user.__class__.__name__, 'MemberData')
-        self.assertEqual(user.aq_parent.__class__.__name__, 'SpecialUser')
-        self.assertEqual(user.aq_parent.aq_parent.__class__.__name__,
+        self.assertEqual(aq_parent(user).__class__.__name__, 'SpecialUser')
+        self.assertEqual(aq_parent(aq_parent(user)).__class__.__name__,
                          'PluggableAuthService')
 
     def testGetCandidateLocalRoles(self):
diff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py
index a22c805..2e320c6 100644
--- a/src/Products/PlonePAS/tools/groups.py
+++ b/src/Products/PlonePAS/tools/groups.py
@@ -3,6 +3,8 @@
 from AccessControl.User import nobody
 from AccessControl.requestmethod import postonly
 from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import UniqueObject
@@ -424,7 +426,7 @@ def wrapGroup(self, g, wrap_anon=0):
             # member data tool at least partially.
             return g
 
-        parent = self.aq_inner.aq_parent
+        parent = aq_parent(aq_inner(self))
         base = getattr(parent, 'aq_base', None)
         if hasattr(base, 'portal_groupdata'):
             # Get portal_groupdata to do the wrapping.
diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py
index 1eca78b..990051a 100644
--- a/src/Products/PlonePAS/tools/memberdata.py
+++ b/src/Products/PlonePAS/tools/memberdata.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.requestmethod import postonly
-from Acquisition import aq_inner, aq_parent
 from App.class_init import InitializeClass
 from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2
 from Products.CMFCore.interfaces import IMember
diff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py
index a7c2237..c6be3af 100644
--- a/src/Products/PlonePAS/tools/membership.py
+++ b/src/Products/PlonePAS/tools/membership.py
@@ -560,7 +560,7 @@ def _findUsersAclHome(self, userid):
         while parent:
             if acl_users.aq_explicit.getUserById(userid, None) is not None:
                 break
-            parent = aq_parent(aq_inner(parent)).aq_parent
+            parent = aq_parent(aq_parent(aq_inner(parent)))
             acl_users = getattr(parent, 'acl_users')
         if parent:
             return acl_users


Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-26T20:07:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/00224d9de0f36e3dce7c16e32b2ff22170a1d508

Fix dummy test File to have a file attribute.

Otherwise we run into problems setting a portrait.
ZPublisher HTTPRequest expects this.

Files changed:
M src/Products/PlonePAS/tests/dummy.py

diff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py
index 346e046..3d0bc44 100644
--- a/src/Products/PlonePAS/tests/dummy.py
+++ b/src/Products/PlonePAS/tests/dummy.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
+from StringIO import StringIO
 from ZPublisher.HTTPRequest import FileUpload
 
 TEXT = 'file data'
@@ -31,6 +32,7 @@ def __init__(self, filename=None, data=None, headers=None):
             self.data = data
         if headers is not None:
             self.headers = headers
+        self.file = StringIO(self.data)
 
     def seek(self, *args):
         pass


Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-26T20:10:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/bcd667410cb7d7c308fcd1706130dee4c2bf23c7

Fix dummy test FieldStorage to have a name attribute.

ZPublisher HTTPRequest expects this.

Files changed:
M src/Products/PlonePAS/tests/dummy.py

diff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py
index 3d0bc44..e6d2e78 100644
--- a/src/Products/PlonePAS/tests/dummy.py
+++ b/src/Products/PlonePAS/tests/dummy.py
@@ -13,6 +13,7 @@ def __init__(self, file, filename='testfile', headers=None):
             headers = {}
         self.headers = headers
         self.filename = filename
+        self.name = filename
 
 
 class File(FileUpload):


