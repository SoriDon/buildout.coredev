Repository: plone.mocktestcase


Branch: refs/heads/master
Date: 2016-10-05T00:39:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.mocktestcase/commit/c004c01150dd322ab49fb64cda6b0f00b2cbc24f

cleanup

Files changed:
A CHANGES.rst
A README.rst
M setup.py
D README.txt
D docs/HISTORY.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..044be4d
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,27 @@
+Changelog
+=========
+
+1.0 (unreleased)
+----------------
+
+- fix to work with zope interface after https://github.com/zopefoundation/zope.interface/commit/79a266200384fa53fb3810ed316a94394166f4e3
+  [jensens]
+
+* Fix relative import to fix Python 3 compatibility.
+  [datakurre]
+
+1.0b3
+-----
+
+* Added mock_tool() helper.
+
+1.0b2
+-----
+
+* Minor amendments to mock Zope 3 component support
+
+1.0b1
+-----
+
+* Initial release
+
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..d60a409
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,84 @@
+Introduction
+============
+
+LEGACY: Do not use this any longer, better use the Python mock module!
+
+This package contains a unittest test class based on the one from the
+``Mocker`` mock library (http://labix.org/mocker).
+
+This class provides support for registering Zope 3 components (utilities,
+adapters, subscription adapters and event handlers) from mocks and tearing
+down the global component registry during test tear-down.
+
+There are also a few convenience methods and parameter checkers that are
+useful to Zope and Plone testing.
+
+Please see the Mocker documentation for more detail:
+
+    http://labix.org/mocker
+
+A test case that mocks a utility may look like this::
+
+    from plone.mocktestcase import MockTestCase
+
+    from my.package.interfaces import IMyInterface
+    from my.package.foo import testable_method
+
+    class MyTestCase(MockTestCase):
+
+        def test_something(self):
+
+            utility_mock = self.mocker.mock()
+            self.expect(utility_mock.do_something()).result("foo")
+            self.mock_utility(utility_mock, IMyInterface)
+
+            # Put mocker into replay mode
+            self.replay()
+
+            # Verify that testable_method() looks up a utility for
+            # IMyInterface and calls do_something() on it, which returns
+            # "foo".
+
+            testable_method()
+
+The following helper methods are available:
+
+   self.replay()
+     Puts the mock into replay mode.
+
+   self.create_dummy(**kw)
+     Return a dummy object that is *not* a mock object, just a dumb object
+     with whatever attributes or methods you pass as keyword arguments.
+     To make a dummy method, pass a function object or a lambda, e.g.
+     self.create_dummy(id="foo", absolute_url=lambda:'http://example.org/foo')
+
+   self.mock_utility(mock, provides, name=u"")
+     Register the given mock object as a global utility providing the given
+     interface, with the given name (defaults to the unnamed default utility).
+
+   self.mock_adapter(mock, provides, adapts, name=u"")
+     Register the given mock object as a global adapter providing the given
+     interface and adapting the given interfaces, with the given name
+     (defaults to the unnamed default adapter).
+
+   self.mock_subscription_adapter(mock, provides, adapts)
+     Register the given mock object as a global subscription adapter providing
+     the given interface and adapting the given interfaces.
+
+   self.mock_handler(mock, adapts)
+     Register the given mock object as a global event subscriber for the
+     given event types.
+
+   self.mock_tool(mock, name)
+     Create a getToolByName() mock (using 'replace' mode) and configure it so
+     that code calling getToolByName(context, name) obtains the given mock
+     object. Can be used multiple times: the getToolByName() mock is created
+     lazily the first time this method is called in any one test fixture.
+
+   self.match_provides(interface)
+     A custom matcher that can be used to check whether an argument to a mock
+     call provides the given interface. Uses interface.providedBy(arg).
+
+   self.match_type(type)
+     A custom matcher that can be used to check whether an argument to a mock
+     call is if the given type. Uses isinstance(arg, type).
diff --git a/README.txt b/README.txt
deleted file mode 100644
index eb98f1e..0000000
--- a/README.txt
+++ /dev/null
@@ -1,98 +0,0 @@
-Introduction
-============
-
-LEGACY: Do not use this any longer, better use the Python mock module!
-
-This package contains a unittest test class based on the one from the
-``Mocker`` mock library (http://labix.org/mocker).
-
-This class provides support for registering Zope 3 components (utilities,
-adapters, subscription adapters and event handlers) from mocks and tearing 
-down the global component registry during test tear-down.
-
-There are also a few convenience methods and parameter checkers that are
-useful to Zope and Plone testing.
-
-Please see the Mocker documentation for more detail:
-
-    http://labix.org/mocker
-
-A test case that mocks a utility may look like this::
-
-    from plone.mocktestcase import MockTestCase
-    
-    from my.package.interfaces import IMyInterface
-    from my.package.foo import testable_method
-
-    class MyTestCase(MockTestCase):
-    
-        def test_something(self):
-
-            utility_mock = self.mocker.mock()
-            self.expect(utility_mock.do_something()).result("foo")
-            self.mock_utility(utility_mock, IMyInterface)
-        
-            # Put mocker into replay mode
-            self.replay()
-        
-            # Verify that testable_method() looks up a utility for 
-            # IMyInterface and calls do_something() on it, which returns
-            # "foo".
-        
-            testable_method()
-
-The following helper methods are available:
-
-   self.replay()
-     Puts the mock into replay mode.
-     
-   self.create_dummy(**kw)
-     Return a dummy object that is *not* a mock object, just a dumb object 
-     with whatever attributes or methods you pass as keyword arguments.
-     To make a dummy method, pass a function object or a lambda, e.g.
-     self.create_dummy(id="foo", absolute_url=lambda:'http://example.org/foo')
-
-   self.mock_utility(mock, provides, name=u"")
-     Register the given mock object as a global utility providing the given
-     interface, with the given name (defaults to the unnamed default utility).
-
-   self.mock_adapter(mock, provides, adapts, name=u"")
-     Register the given mock object as a global adapter providing the given
-     interface and adapting the given interfaces, with the given name 
-     (defaults to the unnamed default adapter).
-
-   self.mock_subscription_adapter(mock, provides, adapts)
-     Register the given mock object as a global subscription adapter providing
-     the given interface and adapting the given interfaces.
-     
-   self.mock_handler(mock, adapts)
-     Register the given mock object as a global event subscriber for the
-     given event types.
-     
-   self.mock_tool(mock, name)
-     Create a getToolByName() mock (using 'replace' mode) and configure it so
-     that code calling getToolByName(context, name) obtains the given mock
-     object. Can be used multiple times: the getToolByName() mock is created
-     lazily the first time this method is called in any one test fixture.
-
-   self.match_provides(interface)
-     A custom matcher that can be used to check whether an argument to a mock
-     call provides the given interface. Uses interface.providedBy(arg).
-     
-   self.match_type(type)
-     A custom matcher that can be used to check whether an argument to a mock 
-     call is if the given type. Uses isinstance(arg, type).
-
-Changes
-=======
-
-1.0.b5
-------
-
-- fix to work with zope interface after https://github.com/zopefoundation/zope.interface/commit/79a266200384fa53fb3810ed316a94394166f4e3
-  [jensens]
-
-1.0.b4
-------
-
-- no log 
diff --git a/docs/HISTORY.txt b/docs/HISTORY.txt
deleted file mode 100644
index ae55957..0000000
--- a/docs/HISTORY.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-Changelog
-=========
-
-1.0
----
-
-* Fix relative import to fix Python 3 compatibility.
-  [datakurre]
-
-1.0b3
------
-
-* Added mock_tool() helper.
-
-1.0b2
------
-
-* Minor amendments to mock Zope 3 component support
-
-1.0b1
------
-
-* Initial release
-
diff --git a/setup.py b/setup.py
index b4fb675..de0e0ad 100644
--- a/setup.py
+++ b/setup.py
@@ -2,37 +2,40 @@
 from setuptools import setup, find_packages
 import os
 
-version = '1.0b5'
+version = '1.0.dev0'
 
-setup(name='plone.mocktestcase',
-      version=version,
-      description="Mock unit test case based on ``mocker``",
-      long_description=open("README.txt").read() + "\n" +
-      open(os.path.join("docs", "HISTORY.txt")).read(),
-      # Get more strings from
-      # http://www.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
-          "Framework :: Plone",
-          "Programming Language :: Python",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-      ],
-      keywords='',
-      author='Martin Aspeli',
-      author_email='optilude@gmail.com',
-      url='http://plone.org',
-      license='LGPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'mocker',
-          'zope.proxy',
-          # 'zope.component',
-          # -*- Extra requirements: -*-
-      ],
-      entry_points="""
-      # -*- Entry points: -*-
-      """,
-      )
+setup(
+    name='plone.mocktestcase',
+    version=version,
+    description="Mock unit test case based on ``mocker``",
+    long_description=(
+        open("README.rst").read() + "\n" +
+        open(os.path.join("CHANGES.rst")).read()
+    ),
+    # Get more strings from
+    # http://www.python.org/pypi?%3Aaction=list_classifiers
+    classifiers=[
+        "Framework :: Plone",
+        "Programming Language :: Python",
+        "Topic :: Software Development :: Libraries :: Python Modules",
+    ],
+    keywords='',
+    author='Martin Aspeli',
+    author_email='optilude@gmail.com',
+    url='http://plone.org',
+    license='LGPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'mocker',
+        'zope.proxy',
+        # 'zope.component',
+        # -*- Extra requirements: -*-
+    ],
+    entry_points="""
+    # -*- Entry points: -*-
+    """,
+)


