Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2019-02-08T16:23:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.relationfield/commit/5b9ba37892807ab7806cb69355f3742fb4d6fc9c

use limited set of indexes for relationcatalog, b/c those were never used and broke if interfaces were missing

Files changed:
A news/26.breaking
M plone/app/relationfield/setuphandlers.py
M setup.py

b'diff --git a/news/26.breaking b/news/26.breaking\nnew file mode 100644\nindex 0000000..8d8da4e\n--- /dev/null\n+++ b/news/26.breaking\n@@ -0,0 +1,4 @@\n+Remove availability of interface indexes on relation catalog.\n+Those broke if interfaces were removed.\n+Plone itself never used those indexes.\n+[jensens]\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex e02b119..93f8572 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -5,10 +5,37 @@\n from zc.relation.interfaces import ICatalog\n from zope.intid.interfaces import IIntIds\n \n+import BTrees\n+\n+\n+PLONE_RELATION_INDEXES = [\n+    {\n+        \'name\': \'from_id\',\n+    },\n+    {\n+        \'name\': \'to_id\',\n+    },\n+    {\n+        \'name\': \'from_attribute\',\n+        \'kwargs\': {\n+            \'btree\': BTrees.family32.OI,\n+        },\n+    },\n+]\n+\n+\n+def relation_catalog_factory():\n+    return RelationCatalog(indexes=PLONE_RELATION_INDEXES)\n+\n \n def add_relations(context):\n-    addUtility(context, ICatalog, RelationCatalog, ofs_name=\'relations\',\n-               findroot=False)\n+    addUtility(\n+        context,\n+        ICatalog,\n+        relation_catalog_factory,\n+        ofs_name=\'relations\',\n+        findroot=False\n+    )\n \n \n def add_intids(context):\ndiff --git a/setup.py b/setup.py\nindex 8571e61..f29fbaa 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'1.4.4.dev0\'\n+version = \'2.0.0.dev0\'\n \n setup(\n     name=\'plone.app.relationfield\',\n@@ -15,8 +15,6 @@\n     # https://pypi.org/classifiers/\n     classifiers=[\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n         \'Framework :: Plone :: 5.2\',\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         \'Programming Language :: Python\',\n@@ -43,7 +41,7 @@\n         \'five.intid\',\n         \'plone.app.intid\',\n         \'z3c.form\',\n-        \'z3c.relationfield>=0.4.2\',\n+        \'z3c.relationfield>0.7.999\',\n         \'z3c.formwidget.query\',\n         \'plone.autoform\',\n         \'plone.supermodel\',\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2019-02-08T16:31:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.relationfield/commit/6e3d1b6827c14cc0a8d0e992ac3e553a85f46844

code style

Files changed:
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M pyproject.toml
M setup.cfg
M setup.py
D .isort.cfg
D base.cfg
D bootstrap.py
D buildout.cfg

b'diff --git a/.isort.cfg b/.isort.cfg\ndeleted file mode 100644\nindex fb79921..0000000\n--- a/.isort.cfg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[settings]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\ndiff --git a/base.cfg b/base.cfg\ndeleted file mode 100644\nindex d7d3bb6..0000000\n--- a/base.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[buildout]\n-package-name = plone.app.relationfield\n-package-extras = [test]\n-test-eggs = Pillow\n-\n-versions = versions\n-\n-[versions]\n-plone.app.relationfield =\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 29f4657..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-[buildout]\n-extends = http://dist.plone.org/release/5-latest/versions.cfg\n-versions = versions\n-parts = test\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = plone.app.relationfield [test]\n-defaults = [\'--auto-color\', \'--auto-progress\']\n-\n-[versions]\n-plone.app.relationfield =\ndiff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py\nindex e37def2..d05e501 100644\n--- a/plone/app/relationfield/behavior.py\n+++ b/plone/app/relationfield/behavior.py\n@@ -19,22 +19,19 @@ class IRelatedItems(model.Schema):\n         title=_(u\'label_related_items\', default=u\'Related Items\'),\n         default=[],\n         value_type=RelationChoice(\n-            title=u\'Related\',\n-            vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title=u\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n         ),\n-        required=False\n+        required=False,\n     )\n     form.widget(\n         \'relatedItems\',\n         RelatedItemsFieldWidget,\n         vocabulary=\'plone.app.vocabularies.Catalog\',\n         pattern_options={\n-            \'recentlyUsed\': True,  # Just turn on. Config in plone.app.widgets.\n-        }\n+            \'recentlyUsed\': True  # Just turn on. Config in plone.app.widgets.\n+        },\n     )\n \n     fieldset(\n-        \'categorization\',\n-        label=_(u\'Categorization\'),\n-        fields=[\'relatedItems\']\n+        \'categorization\', label=_(u\'Categorization\'), fields=[\'relatedItems\']\n     )\ndiff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py\nindex a8b44bc..3ca6349 100644\n--- a/plone/app/relationfield/demo.py\n+++ b/plone/app/relationfield/demo.py\n@@ -12,14 +12,13 @@ class ITestForm(IFormLayer):\n         title=u\'Multiple (Relations field)\',\n         required=False,\n         value_type=RelationChoice(\n-            title=u\'Multiple\',\n-            vocabulary=\'plone.app.vocabularies.Catalog\'\n-        )\n+            title=u\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+        ),\n     )\n     single = RelationChoice(\n         title=u\'Single\',\n         required=False,\n-        vocabulary=\'plone.app.vocabularies.Catalog\'\n+        vocabulary=\'plone.app.vocabularies.Catalog\',\n     )\n \n \ndiff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py\nindex c9726b9..167c20b 100644\n--- a/plone/app/relationfield/schemaeditor.py\n+++ b/plone/app/relationfield/schemaeditor.py\n@@ -19,7 +19,6 @@\n \n @implementer(IFieldFactory)\n class RelationFieldFactory(FieldFactory):\n-\n     def available(self):\n         return queryUtility(IIntIds) is not None\n \n@@ -33,7 +32,7 @@ class IRelationFieldSettings(schema.interfaces.IField):\n             title=_(u\'Type\'),\n             vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n         ),\n-        required=False\n+        required=False,\n     )\n \n \n@@ -44,7 +43,6 @@ def getRelationChoiceEditFormSchema(field):\n \n \n class RelationChoiceEditFormAdapter(object):\n-\n     def __init__(self, field):\n         self.field = field\n \n@@ -65,8 +63,7 @@ def portal_type(self, value):\n \n \n RelationChoiceFactory = RelationFieldFactory(\n-    RelationChoice, _(\'Relation Choice\'),\n-    source=CatalogSource(),\n+    RelationChoice, _(\'Relation Choice\'), source=CatalogSource()\n )\n \n \n@@ -77,7 +74,6 @@ def getRelationListEditFormSchema(field):\n \n \n class RelationListEditFormAdapter(object):\n-\n     def __init__(self, field):\n         self.field = field\n \n@@ -98,9 +94,9 @@ def portal_type(self, value):\n \n \n RelationListFactory = RelationFieldFactory(\n-    RelationList, _(\'Relation List\'),\n+    RelationList,\n+    _(\'Relation List\'),\n     value_type=RelationChoice(\n-        title=_(u\'Relation Choice\'),\n-        source=CatalogSource(),\n-    )\n+        title=_(u\'Relation Choice\'), source=CatalogSource()\n+    ),\n )\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex 93f8572..56200f9 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -2,6 +2,7 @@\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from z3c.relationfield.index import RelationCatalog\n+from z3c.relationfield.interfaces import IRelationValue\n from zc.relation.interfaces import ICatalog\n from zope.intid.interfaces import IIntIds\n \n@@ -9,17 +10,11 @@\n \n \n PLONE_RELATION_INDEXES = [\n+    {\'element\': IRelationValue[\'from_id\']},\n+    {\'element\': IRelationValue[\'to_id\']},\n     {\n-        \'name\': \'from_id\',\n-    },\n-    {\n-        \'name\': \'to_id\',\n-    },\n-    {\n-        \'name\': \'from_attribute\',\n-        \'kwargs\': {\n-            \'btree\': BTrees.family32.OI,\n-        },\n+        \'element\': IRelationValue[\'from_attribute\'],\n+        \'kwargs\': {\'btree\': BTrees.family32.OI},\n     },\n ]\n \n@@ -34,13 +29,12 @@ def add_relations(context):\n         ICatalog,\n         relation_catalog_factory,\n         ofs_name=\'relations\',\n-        findroot=False\n+        findroot=False,\n     )\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\',\n-               findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n \n \n def installRelations(context):\ndiff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py\nindex f2ec81d..6a6ae25 100644\n--- a/plone/app/relationfield/source.py\n+++ b/plone/app/relationfield/source.py\n@@ -9,7 +9,6 @@\n \n @implementer(IQuerySource)\n class CMFContentSearchSource(object):\n-\n     def __init__(self, context):\n         self.context = context\n         self.intid_utility = getUtility(IIntIds)\n@@ -25,9 +24,7 @@ def __len__(self):\n \n     def getTerm(self, obj):\n         return SimpleVocabulary.createTerm(\n-            obj,\n-            self.intid_utility.getId(obj),\n-            obj.Title()\n+            obj, self.intid_utility.getId(obj), obj.Title()\n         )\n \n     def getTermByToken(self, value):\n@@ -36,8 +33,7 @@ def getTermByToken(self, value):\n     def search(self, query_string):\n         catalog = getToolByName(self.context, \'portal_catalog\')\n         result = catalog(\n-            SearchableText=\'{0:s}*\'.format(query_string),\n-            sort_limit=20\n+            SearchableText=\'{0:s}*\'.format(query_string), sort_limit=20\n         )\n         terms = []\n         for brain in result:\ndiff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py\nindex 9ae3bb4..70ef6c9 100644\n--- a/plone/app/relationfield/supermodel.py\n+++ b/plone/app/relationfield/supermodel.py\n@@ -10,25 +10,30 @@\n class RelationChoiceBaseHandler(BaseHandler):\n \n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\n-        \'portal_type\': \'w\',\n-        \'source\': \'rw\',\n-        \'vocabulary\': \'rw\',\n-        \'vocabularyName\': \'rw\'\n-    })\n+    filteredAttributes.update(\n+        {\n+            \'portal_type\': \'w\',\n+            \'source\': \'rw\',\n+            \'vocabulary\': \'rw\',\n+            \'vocabularyName\': \'rw\',\n+        }\n+    )\n \n     def __init__(self, klass):\n         super(RelationChoiceBaseHandler, self).__init__(klass)\n \n-        self.fieldAttributes[\'portal_type\'] = \\\n-            schema.List(__name__=\'portal_type\',\n-                        title=u\'Allowed target types\',\n-                        value_type=schema.Text(title=u\'Type\'))\n+        self.fieldAttributes[\'portal_type\'] = schema.List(\n+            __name__=\'portal_type\',\n+            title=u\'Allowed target types\',\n+            value_type=schema.Text(title=u\'Type\'),\n+        )\n \n     def _constructField(self, attributes):\n-        portal_type = attributes.get(\'portal_type\') \\\n-            or attributes.get(\'portal_types\') \\\n+        portal_type = (\n+            attributes.get(\'portal_type\')\n+            or attributes.get(\'portal_types\')\n             or []\n+        )\n         if \'portal_type\' in attributes:\n             del attributes[\'portal_type\']\n \n@@ -37,24 +42,27 @@ def _constructField(self, attributes):\n         else:\n             attributes[\'source\'] = CatalogSource(portal_type=portal_type)\n \n-        return super(RelationChoiceBaseHandler,\n-                     self)._constructField(attributes)\n+        return super(RelationChoiceBaseHandler, self)._constructField(\n+            attributes\n+        )\n \n     def write(self, field, name, type, elementName=\'field\'):\n-        element = super(RelationChoiceBaseHandler,\n-                        self).write(field, name, type, elementName)\n+        element = super(RelationChoiceBaseHandler, self).write(\n+            field, name, type, elementName\n+        )\n         portal_type = []\n \n-        portal_type.extend(\n-            field.source.query.get(\'portal_type\') or [])\n+        portal_type.extend(field.source.query.get(\'portal_type\') or [])\n \n         if portal_type:\n             attributeField = self.fieldAttributes[\'portal_type\']\n-            child = valueToElement(attributeField, portal_type,\n-                                   name=\'portal_type\', force=True)\n+            child = valueToElement(\n+                attributeField, portal_type, name=\'portal_type\', force=True\n+            )\n             element.append(child)\n \n         return element\n \n+\n RelationChoiceHandler = RelationChoiceBaseHandler(RelationChoice)\n RelationListHandler = BaseHandler(RelationList)\ndiff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex fc2e4eb..6c7c43f 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -13,8 +13,7 @@\n \n \n if HAS_CONTENTTYPES:\n-    from plone.app.contenttypes.testing import \\\n-        PLONE_APP_CONTENTTYPES_FIXTURE\n+    from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n \n \n class IAddress(Interface):\n@@ -35,11 +34,8 @@ def __init__(self, streetname, city):\n \n \n class IPerson(zope.interface.Interface):\n-    name = zope.schema.TextLine(\n-        title=u\'Name\',\n-        default=u\'<no name>\')\n-    phone = zope.schema.TextLine(\n-        title=u\'Phone\')\n+    name = zope.schema.TextLine(title=u\'Name\', default=u\'<no name>\')\n+    phone = zope.schema.TextLine(title=u\'Phone\')\n     addresses = RelationList(title=u\'Addresses\')\n \n \n@@ -53,12 +49,13 @@ def __init__(self, name):\n \n class PloneAppRelationfieldFixture(PloneSandboxLayer):\n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -67,26 +64,28 @@ def setUpPloneSite(self, portal):\n \n FIXTURE = PloneAppRelationfieldFixture()\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.relationfield:Functional\'\n+    bases=(FIXTURE,), name=\'plone.app.relationfield:Functional\'\n )\n \n \n class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):\n \n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n \n         import plone.formwidget.contenttree\n+\n         self.loadZCML(package=plone.formwidget.contenttree)\n \n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -99,25 +98,28 @@ def setUpPloneSite(self, portal):\n \n FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(\n     bases=(CONTENTTREE_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\'\n+    name=\'plone.app.relationfield.contenttree:Functional\',\n )\n \n \n class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):\n \n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n \n         import plone.app.widgets\n+\n         self.loadZCML(package=plone.app.widgets)\n \n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -129,5 +131,5 @@ def setUpPloneSite(self, portal):\n \n FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(\n     bases=(WIDGETS_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\'\n+    name=\'plone.app.relationfield.contenttree:Functional\',\n )\ndiff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py\nindex 47f2f9a..8881030 100644\n--- a/plone/app/relationfield/tests/test_marshall.py\n+++ b/plone/app/relationfield/tests/test_marshall.py\n@@ -8,20 +8,21 @@\n \n \n ZCML_SANDBOX = ZCMLSandbox(\n-    filename=\'test_marshall.zcml\',\n-    package=plone.app.relationfield.tests\n+    filename=\'test_marshall.zcml\', package=plone.app.relationfield.tests\n )\n \n \n def test_suite():\n     suite = TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n-    suite.addTest(layered(\n-        doctest.DocFileSuite(\n-            \'../marshaler.rst\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.relationfield.tests\',\n-        ),\n-        layer=ZCML_SANDBOX)\n+    OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+    suite.addTest(\n+        layered(\n+            doctest.DocFileSuite(\n+                \'../marshaler.rst\',\n+                optionflags=OPTIONFLAGS,\n+                package=\'plone.app.relationfield.tests\',\n+            ),\n+            layer=ZCML_SANDBOX,\n+        )\n     )\n     return suite\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 01e1d0f..1d9892e 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -7,18 +7,22 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(\n-                os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n-                optionflags=optionflags),\n-                FUNCTIONAL_WIDGETS_TESTING)\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n+                    optionflags=optionflags,\n+                ),\n+                FUNCTIONAL_WIDGETS_TESTING,\n+            )\n+        ]\n+    )\n     return suite\n \n \ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex ccd6900..66cb7df 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -9,8 +9,7 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -22,15 +21,18 @@ def check_output(self, want, got, optionflags):\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                os.path.join(os.path.pardir, \'supermodel.txt\'),\n-                optionflags=optionflags,\n-                checker=Py23DocChecker(),\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    os.path.join(os.path.pardir, \'supermodel.txt\'),\n+                    optionflags=optionflags,\n+                    checker=Py23DocChecker(),\n                 ),\n-            layer=FUNCTIONAL_WIDGETS_TESTING)\n-    ])\n+                layer=FUNCTIONAL_WIDGETS_TESTING,\n+            )\n+        ]\n+    )\n     return suite\n \n \ndiff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py\nindex 31a6551..ff54f16 100644\n--- a/plone/app/relationfield/tests/test_widget.py\n+++ b/plone/app/relationfield/tests/test_widget.py\n@@ -35,7 +35,7 @@ def setUp(self):\n             intids.register(address)\n \n     def test_get_datamanger(self):\n-        dm = getMultiAdapter(({}, IPerson[\'addresses\'], ), IDataManager)\n+        dm = getMultiAdapter(({}, IPerson[\'addresses\']), IDataManager)\n         self.assertTrue(isinstance(dm, RelationListDictDataManager))\n \n     def test_datamanager_get_empty(self):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9ac24a5 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,8 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\n+>>>>>>> code style\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..5e20851 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,7 +3,14 @@ ignore =\n     *.cfg\n     bootstrap.py\n \n-\n-\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex f29fbaa..d701cd1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -9,8 +9,9 @@\n     name=\'plone.app.relationfield\',\n     version=version,\n     description=\'Plone support for z3c.relationfield\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    long_description=(\n+        open(\'README.rst\').read() + \'\\n\' + open(\'CHANGES.rst\').read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n@@ -49,7 +50,7 @@\n         \'plone.schemaeditor>=1.3.5.dev0\',\n         \'Products.CMFCore\',\n         \'plone.rfc822\',\n-        \'plone.app.z3cform>=1.1.0.dev0\'\n+        \'plone.app.z3cform>=1.1.0.dev0\',\n     ],\n     extras_require={\n         \'test\': [\n@@ -61,4 +62,4 @@\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\n-    )\n+)\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2019-02-09T14:30:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.relationfield/commit/b6b0c02b8cfde1c86262b2336f371b43e01f0c1c

Merge pull request #26 from plone/use-configurbale-indexes

Use configurable indexes

Files changed:
A news/26.breaking
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M pyproject.toml
M setup.cfg
M setup.py
D .isort.cfg
D base.cfg
D bootstrap.py
D buildout.cfg

b'diff --git a/.isort.cfg b/.isort.cfg\ndeleted file mode 100644\nindex fb79921..0000000\n--- a/.isort.cfg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[settings]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\ndiff --git a/base.cfg b/base.cfg\ndeleted file mode 100644\nindex d7d3bb6..0000000\n--- a/base.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[buildout]\n-package-name = plone.app.relationfield\n-package-extras = [test]\n-test-eggs = Pillow\n-\n-versions = versions\n-\n-[versions]\n-plone.app.relationfield =\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 29f4657..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-[buildout]\n-extends = http://dist.plone.org/release/5-latest/versions.cfg\n-versions = versions\n-parts = test\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = plone.app.relationfield [test]\n-defaults = [\'--auto-color\', \'--auto-progress\']\n-\n-[versions]\n-plone.app.relationfield =\ndiff --git a/news/26.breaking b/news/26.breaking\nnew file mode 100644\nindex 0000000..8d8da4e\n--- /dev/null\n+++ b/news/26.breaking\n@@ -0,0 +1,4 @@\n+Remove availability of interface indexes on relation catalog.\n+Those broke if interfaces were removed.\n+Plone itself never used those indexes.\n+[jensens]\ndiff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py\nindex e37def2..d05e501 100644\n--- a/plone/app/relationfield/behavior.py\n+++ b/plone/app/relationfield/behavior.py\n@@ -19,22 +19,19 @@ class IRelatedItems(model.Schema):\n         title=_(u\'label_related_items\', default=u\'Related Items\'),\n         default=[],\n         value_type=RelationChoice(\n-            title=u\'Related\',\n-            vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title=u\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n         ),\n-        required=False\n+        required=False,\n     )\n     form.widget(\n         \'relatedItems\',\n         RelatedItemsFieldWidget,\n         vocabulary=\'plone.app.vocabularies.Catalog\',\n         pattern_options={\n-            \'recentlyUsed\': True,  # Just turn on. Config in plone.app.widgets.\n-        }\n+            \'recentlyUsed\': True  # Just turn on. Config in plone.app.widgets.\n+        },\n     )\n \n     fieldset(\n-        \'categorization\',\n-        label=_(u\'Categorization\'),\n-        fields=[\'relatedItems\']\n+        \'categorization\', label=_(u\'Categorization\'), fields=[\'relatedItems\']\n     )\ndiff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py\nindex a8b44bc..3ca6349 100644\n--- a/plone/app/relationfield/demo.py\n+++ b/plone/app/relationfield/demo.py\n@@ -12,14 +12,13 @@ class ITestForm(IFormLayer):\n         title=u\'Multiple (Relations field)\',\n         required=False,\n         value_type=RelationChoice(\n-            title=u\'Multiple\',\n-            vocabulary=\'plone.app.vocabularies.Catalog\'\n-        )\n+            title=u\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+        ),\n     )\n     single = RelationChoice(\n         title=u\'Single\',\n         required=False,\n-        vocabulary=\'plone.app.vocabularies.Catalog\'\n+        vocabulary=\'plone.app.vocabularies.Catalog\',\n     )\n \n \ndiff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py\nindex c9726b9..167c20b 100644\n--- a/plone/app/relationfield/schemaeditor.py\n+++ b/plone/app/relationfield/schemaeditor.py\n@@ -19,7 +19,6 @@\n \n @implementer(IFieldFactory)\n class RelationFieldFactory(FieldFactory):\n-\n     def available(self):\n         return queryUtility(IIntIds) is not None\n \n@@ -33,7 +32,7 @@ class IRelationFieldSettings(schema.interfaces.IField):\n             title=_(u\'Type\'),\n             vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n         ),\n-        required=False\n+        required=False,\n     )\n \n \n@@ -44,7 +43,6 @@ def getRelationChoiceEditFormSchema(field):\n \n \n class RelationChoiceEditFormAdapter(object):\n-\n     def __init__(self, field):\n         self.field = field\n \n@@ -65,8 +63,7 @@ def portal_type(self, value):\n \n \n RelationChoiceFactory = RelationFieldFactory(\n-    RelationChoice, _(\'Relation Choice\'),\n-    source=CatalogSource(),\n+    RelationChoice, _(\'Relation Choice\'), source=CatalogSource()\n )\n \n \n@@ -77,7 +74,6 @@ def getRelationListEditFormSchema(field):\n \n \n class RelationListEditFormAdapter(object):\n-\n     def __init__(self, field):\n         self.field = field\n \n@@ -98,9 +94,9 @@ def portal_type(self, value):\n \n \n RelationListFactory = RelationFieldFactory(\n-    RelationList, _(\'Relation List\'),\n+    RelationList,\n+    _(\'Relation List\'),\n     value_type=RelationChoice(\n-        title=_(u\'Relation Choice\'),\n-        source=CatalogSource(),\n-    )\n+        title=_(u\'Relation Choice\'), source=CatalogSource()\n+    ),\n )\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex e02b119..56200f9 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -2,18 +2,39 @@\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from z3c.relationfield.index import RelationCatalog\n+from z3c.relationfield.interfaces import IRelationValue\n from zc.relation.interfaces import ICatalog\n from zope.intid.interfaces import IIntIds\n \n+import BTrees\n+\n+\n+PLONE_RELATION_INDEXES = [\n+    {\'element\': IRelationValue[\'from_id\']},\n+    {\'element\': IRelationValue[\'to_id\']},\n+    {\n+        \'element\': IRelationValue[\'from_attribute\'],\n+        \'kwargs\': {\'btree\': BTrees.family32.OI},\n+    },\n+]\n+\n+\n+def relation_catalog_factory():\n+    return RelationCatalog(indexes=PLONE_RELATION_INDEXES)\n+\n \n def add_relations(context):\n-    addUtility(context, ICatalog, RelationCatalog, ofs_name=\'relations\',\n-               findroot=False)\n+    addUtility(\n+        context,\n+        ICatalog,\n+        relation_catalog_factory,\n+        ofs_name=\'relations\',\n+        findroot=False,\n+    )\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\',\n-               findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n \n \n def installRelations(context):\ndiff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py\nindex f2ec81d..6a6ae25 100644\n--- a/plone/app/relationfield/source.py\n+++ b/plone/app/relationfield/source.py\n@@ -9,7 +9,6 @@\n \n @implementer(IQuerySource)\n class CMFContentSearchSource(object):\n-\n     def __init__(self, context):\n         self.context = context\n         self.intid_utility = getUtility(IIntIds)\n@@ -25,9 +24,7 @@ def __len__(self):\n \n     def getTerm(self, obj):\n         return SimpleVocabulary.createTerm(\n-            obj,\n-            self.intid_utility.getId(obj),\n-            obj.Title()\n+            obj, self.intid_utility.getId(obj), obj.Title()\n         )\n \n     def getTermByToken(self, value):\n@@ -36,8 +33,7 @@ def getTermByToken(self, value):\n     def search(self, query_string):\n         catalog = getToolByName(self.context, \'portal_catalog\')\n         result = catalog(\n-            SearchableText=\'{0:s}*\'.format(query_string),\n-            sort_limit=20\n+            SearchableText=\'{0:s}*\'.format(query_string), sort_limit=20\n         )\n         terms = []\n         for brain in result:\ndiff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py\nindex 9ae3bb4..70ef6c9 100644\n--- a/plone/app/relationfield/supermodel.py\n+++ b/plone/app/relationfield/supermodel.py\n@@ -10,25 +10,30 @@\n class RelationChoiceBaseHandler(BaseHandler):\n \n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\n-        \'portal_type\': \'w\',\n-        \'source\': \'rw\',\n-        \'vocabulary\': \'rw\',\n-        \'vocabularyName\': \'rw\'\n-    })\n+    filteredAttributes.update(\n+        {\n+            \'portal_type\': \'w\',\n+            \'source\': \'rw\',\n+            \'vocabulary\': \'rw\',\n+            \'vocabularyName\': \'rw\',\n+        }\n+    )\n \n     def __init__(self, klass):\n         super(RelationChoiceBaseHandler, self).__init__(klass)\n \n-        self.fieldAttributes[\'portal_type\'] = \\\n-            schema.List(__name__=\'portal_type\',\n-                        title=u\'Allowed target types\',\n-                        value_type=schema.Text(title=u\'Type\'))\n+        self.fieldAttributes[\'portal_type\'] = schema.List(\n+            __name__=\'portal_type\',\n+            title=u\'Allowed target types\',\n+            value_type=schema.Text(title=u\'Type\'),\n+        )\n \n     def _constructField(self, attributes):\n-        portal_type = attributes.get(\'portal_type\') \\\n-            or attributes.get(\'portal_types\') \\\n+        portal_type = (\n+            attributes.get(\'portal_type\')\n+            or attributes.get(\'portal_types\')\n             or []\n+        )\n         if \'portal_type\' in attributes:\n             del attributes[\'portal_type\']\n \n@@ -37,24 +42,27 @@ def _constructField(self, attributes):\n         else:\n             attributes[\'source\'] = CatalogSource(portal_type=portal_type)\n \n-        return super(RelationChoiceBaseHandler,\n-                     self)._constructField(attributes)\n+        return super(RelationChoiceBaseHandler, self)._constructField(\n+            attributes\n+        )\n \n     def write(self, field, name, type, elementName=\'field\'):\n-        element = super(RelationChoiceBaseHandler,\n-                        self).write(field, name, type, elementName)\n+        element = super(RelationChoiceBaseHandler, self).write(\n+            field, name, type, elementName\n+        )\n         portal_type = []\n \n-        portal_type.extend(\n-            field.source.query.get(\'portal_type\') or [])\n+        portal_type.extend(field.source.query.get(\'portal_type\') or [])\n \n         if portal_type:\n             attributeField = self.fieldAttributes[\'portal_type\']\n-            child = valueToElement(attributeField, portal_type,\n-                                   name=\'portal_type\', force=True)\n+            child = valueToElement(\n+                attributeField, portal_type, name=\'portal_type\', force=True\n+            )\n             element.append(child)\n \n         return element\n \n+\n RelationChoiceHandler = RelationChoiceBaseHandler(RelationChoice)\n RelationListHandler = BaseHandler(RelationList)\ndiff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex fc2e4eb..6c7c43f 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -13,8 +13,7 @@\n \n \n if HAS_CONTENTTYPES:\n-    from plone.app.contenttypes.testing import \\\n-        PLONE_APP_CONTENTTYPES_FIXTURE\n+    from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n \n \n class IAddress(Interface):\n@@ -35,11 +34,8 @@ def __init__(self, streetname, city):\n \n \n class IPerson(zope.interface.Interface):\n-    name = zope.schema.TextLine(\n-        title=u\'Name\',\n-        default=u\'<no name>\')\n-    phone = zope.schema.TextLine(\n-        title=u\'Phone\')\n+    name = zope.schema.TextLine(title=u\'Name\', default=u\'<no name>\')\n+    phone = zope.schema.TextLine(title=u\'Phone\')\n     addresses = RelationList(title=u\'Addresses\')\n \n \n@@ -53,12 +49,13 @@ def __init__(self, name):\n \n class PloneAppRelationfieldFixture(PloneSandboxLayer):\n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -67,26 +64,28 @@ def setUpPloneSite(self, portal):\n \n FIXTURE = PloneAppRelationfieldFixture()\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.relationfield:Functional\'\n+    bases=(FIXTURE,), name=\'plone.app.relationfield:Functional\'\n )\n \n \n class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):\n \n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n \n         import plone.formwidget.contenttree\n+\n         self.loadZCML(package=plone.formwidget.contenttree)\n \n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -99,25 +98,28 @@ def setUpPloneSite(self, portal):\n \n FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(\n     bases=(CONTENTTREE_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\'\n+    name=\'plone.app.relationfield.contenttree:Functional\',\n )\n \n \n class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):\n \n     if HAS_CONTENTTYPES:\n-        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+        defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n-        defaultBases = (PLONE_FIXTURE, )\n+        defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n \n         import plone.app.widgets\n+\n         self.loadZCML(package=plone.app.widgets)\n \n         import plone.app.relationfield\n+\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n@@ -129,5 +131,5 @@ def setUpPloneSite(self, portal):\n \n FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(\n     bases=(WIDGETS_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\'\n+    name=\'plone.app.relationfield.contenttree:Functional\',\n )\ndiff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py\nindex 47f2f9a..8881030 100644\n--- a/plone/app/relationfield/tests/test_marshall.py\n+++ b/plone/app/relationfield/tests/test_marshall.py\n@@ -8,20 +8,21 @@\n \n \n ZCML_SANDBOX = ZCMLSandbox(\n-    filename=\'test_marshall.zcml\',\n-    package=plone.app.relationfield.tests\n+    filename=\'test_marshall.zcml\', package=plone.app.relationfield.tests\n )\n \n \n def test_suite():\n     suite = TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n-    suite.addTest(layered(\n-        doctest.DocFileSuite(\n-            \'../marshaler.rst\',\n-            optionflags=OPTIONFLAGS,\n-            package=\'plone.app.relationfield.tests\',\n-        ),\n-        layer=ZCML_SANDBOX)\n+    OPTIONFLAGS = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+    suite.addTest(\n+        layered(\n+            doctest.DocFileSuite(\n+                \'../marshaler.rst\',\n+                optionflags=OPTIONFLAGS,\n+                package=\'plone.app.relationfield.tests\',\n+            ),\n+            layer=ZCML_SANDBOX,\n+        )\n     )\n     return suite\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 01e1d0f..1d9892e 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -7,18 +7,22 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(\n-                os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n-                optionflags=optionflags),\n-                FUNCTIONAL_WIDGETS_TESTING)\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n+                    optionflags=optionflags,\n+                ),\n+                FUNCTIONAL_WIDGETS_TESTING,\n+            )\n+        ]\n+    )\n     return suite\n \n \ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex ccd6900..66cb7df 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -9,8 +9,7 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -22,15 +21,18 @@ def check_output(self, want, got, optionflags):\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                os.path.join(os.path.pardir, \'supermodel.txt\'),\n-                optionflags=optionflags,\n-                checker=Py23DocChecker(),\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    os.path.join(os.path.pardir, \'supermodel.txt\'),\n+                    optionflags=optionflags,\n+                    checker=Py23DocChecker(),\n                 ),\n-            layer=FUNCTIONAL_WIDGETS_TESTING)\n-    ])\n+                layer=FUNCTIONAL_WIDGETS_TESTING,\n+            )\n+        ]\n+    )\n     return suite\n \n \ndiff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py\nindex 31a6551..ff54f16 100644\n--- a/plone/app/relationfield/tests/test_widget.py\n+++ b/plone/app/relationfield/tests/test_widget.py\n@@ -35,7 +35,7 @@ def setUp(self):\n             intids.register(address)\n \n     def test_get_datamanger(self):\n-        dm = getMultiAdapter(({}, IPerson[\'addresses\'], ), IDataManager)\n+        dm = getMultiAdapter(({}, IPerson[\'addresses\']), IDataManager)\n         self.assertTrue(isinstance(dm, RelationListDictDataManager))\n \n     def test_datamanager_get_empty(self):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9ac24a5 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,8 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\n+>>>>>>> code style\ndiff --git a/setup.cfg b/setup.cfg\nindex aecfa92..5e20851 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,7 +3,14 @@ ignore =\n     *.cfg\n     bootstrap.py\n \n-\n-\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 8571e61..d701cd1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,20 +3,19 @@\n from setuptools import setup\n \n \n-version = \'1.4.4.dev0\'\n+version = \'2.0.0.dev0\'\n \n setup(\n     name=\'plone.app.relationfield\',\n     version=version,\n     description=\'Plone support for z3c.relationfield\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    long_description=(\n+        open(\'README.rst\').read() + \'\\n\' + open(\'CHANGES.rst\').read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n         \'Framework :: Plone :: 5.2\',\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         \'Programming Language :: Python\',\n@@ -43,7 +42,7 @@\n         \'five.intid\',\n         \'plone.app.intid\',\n         \'z3c.form\',\n-        \'z3c.relationfield>=0.4.2\',\n+        \'z3c.relationfield>0.7.999\',\n         \'z3c.formwidget.query\',\n         \'plone.autoform\',\n         \'plone.supermodel\',\n@@ -51,7 +50,7 @@\n         \'plone.schemaeditor>=1.3.5.dev0\',\n         \'Products.CMFCore\',\n         \'plone.rfc822\',\n-        \'plone.app.z3cform>=1.1.0.dev0\'\n+        \'plone.app.z3cform>=1.1.0.dev0\',\n     ],\n     extras_require={\n         \'test\': [\n@@ -63,4 +62,4 @@\n     entry_points="""\n     # -*- Entry points: -*-\n     """,\n-    )\n+)\n'

