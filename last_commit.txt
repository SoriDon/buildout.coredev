Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:28:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/4141a1f0c3632796a86d5a4c08cbff82957cd86f

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d915ae9\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3333c742"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..903e642\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.CMFDiffTool {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s Products.CMFDiffTool {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:30:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/3815c857566359af7bcf9063551b673524e9ebb5

chore: pyupgrade

Files changed:
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/exportimport/__init__.py
M Products/CMFDiffTool/exportimport/difftool.py
M Products/CMFDiffTool/interfaces/IChangeSet.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/__init__.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/__init__.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_install.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M setup.py

b'diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 33ccc0c..13d4463 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """CMFDiffTool.py\n \n    Calculate differences between content objects\n@@ -63,7 +62,7 @@ def applyChanges(self, ob):\n     def filenameTitle(self, filename):\n         """Translate the filename leading text\n         """\n-        msg = _(u\'Filename: ${filename}\',\n+        msg = _(\'Filename: ${filename}\',\n                 mapping={\'filename\': filename})\n         return translate(msg)\n \ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex bb16253..00d4036 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 86691ca..831f90b 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex c984d29..6d32f1a 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """CMFDiffTool.py\n \n    Calculate differences between content objects\ndiff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py\nindex 0bdf2cb..74a6304 100644\n--- a/Products/CMFDiffTool/ChangeSet.py\n+++ b/Products/CMFDiffTool/ChangeSet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # ChangeSet.py - Zope object representing the differences between\n # objects\ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex fdd9af6..1e54a19 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Initialize CMFDiffTool Product"""\n # Set up a MessageFactory for the cmfdifftool domain\n from zope.i18nmessageid import MessageFactory\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex 0c69fcd..9457e66 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex 71f3b84..2ff020a 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import RichText\n from plone.dexterity.browser.edit import DefaultEditForm\n from Products.CMFDiffTool.choicediff import ChoiceDiff\n@@ -68,7 +67,7 @@\n """Names of fields not to compare."""\n \n \n-class DexterityCompoundDiff(object):\n+class DexterityCompoundDiff:\n     """text difference for Dexterity"""\n \n     meta_type = \'Compound Diff for Dexterity types\'\ndiff --git a/Products/CMFDiffTool/exportimport/__init__.py b/Products/CMFDiffTool/exportimport/__init__.py\nindex c308b2b..c3b3328 100644\n--- a/Products/CMFDiffTool/exportimport/__init__.py\n+++ b/Products/CMFDiffTool/exportimport/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n # Make a package\ndiff --git a/Products/CMFDiffTool/exportimport/difftool.py b/Products/CMFDiffTool/exportimport/difftool.py\nindex bd4281a..fe83f7c 100644\n--- a/Products/CMFDiffTool/exportimport/difftool.py\n+++ b/Products/CMFDiffTool/exportimport/difftool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.interfaces import IDiffTool\n from Products.GenericSetup.utils import exportObjects\ndiff --git a/Products/CMFDiffTool/interfaces/IChangeSet.py b/Products/CMFDiffTool/interfaces/IChangeSet.py\nindex 21a9201..4e0f986 100644\n--- a/Products/CMFDiffTool/interfaces/IChangeSet.py\n+++ b/Products/CMFDiffTool/interfaces/IChangeSet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \ndiff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex 481a759..c8a1f5b 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Interface definitions\n from zope.interface import Attribute\n from zope.interface import Interface\ndiff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py\nindex 99c2115..56f7591 100644\n--- a/Products/CMFDiffTool/interfaces/portal_diff.py\n+++ b/Products/CMFDiffTool/interfaces/portal_diff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \ndiff --git a/Products/CMFDiffTool/libs/__init__.py b/Products/CMFDiffTool/libs/__init__.py\nindex 40a96af..e69de29 100644\n--- a/Products/CMFDiffTool/libs/__init__.py\n+++ b/Products/CMFDiffTool/libs/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex 7d34b53..dc2d82c 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -135,7 +135,7 @@ def addStylesheet(self, html, ss):\n             pos = match.end()\n         else:\n             pos = 0\n-        return (\'{0}<style type="text/css"><!--\\n{1}\\n--></style>{2}\'.format(\n+        return (\'{}<style type="text/css"><!--\\n{}\\n--></style>{}\'.format(\n             html[:pos], ss, html[pos:]))\n \n     def startInsertText(self):\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex eddba03..722938f 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex af61a16..7c8a7a4 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneSandboxLayer\n@@ -13,9 +12,9 @@\n TEST_CONTENT_TYPE_ID = \'TestContentType\'\n \n VOCABULARY_TUPLES = [\n-    (u\'first_value\', u\'First Title\'),\n-    (u\'second_value\', None),\n-    (u\'third_value\', u\'Third Title\'),\n+    (\'first_value\', \'First Title\'),\n+    (\'second_value\', None),\n+    (\'third_value\', \'Third Title\'),\n ]\n \n VOCABULARY = SimpleVocabulary(\n@@ -41,7 +40,7 @@ def setUpPloneSite(self, portal):\n         sm.registerUtility(\n             component=vocabulary_factory,\n             provided=IVocabularyFactory,\n-            name=u\'Products.CMFDiffTool.testing.VOCABULARY\',\n+            name=\'Products.CMFDiffTool.testing.VOCABULARY\',\n         )\n \n         fti = DexterityFTI(\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 30106e0..5fa3d40 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n \n import unittest\ndiff --git a/Products/CMFDiffTool/tests/__init__.py b/Products/CMFDiffTool/tests/__init__.py\nindex 5dd4550..de1858e 100644\n--- a/Products/CMFDiffTool/tests/__init__.py\n+++ b/Products/CMFDiffTool/tests/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\\\n Unit test package for CMFDiffTool\n """\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex b5457c7..7e09a88 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\ndiff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py\nindex 3d42c5d..4c09d50 100644\n--- a/Products/CMFDiffTool/tests/testDiffTool.py\n+++ b/Products/CMFDiffTool/tests/testDiffTool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex 7c39af4..f48a946 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n@@ -27,10 +26,10 @@ def method(self):\n \n \n class U:\n-    attribute = u\'\\xfcnicode value\'\n+    attribute = \'\\xfcnicode value\'\n \n     def method(self):\n-        return u\'different method val\\xfce\'\n+        return \'different method val\\xfce\'\n \n \n class H:\n@@ -118,7 +117,7 @@ def testSameText(self):\n         self.assertEqual(fd.ndiff(), \'  value\')\n         uu = U()\n         fd = FieldDiff(uu, uu, \'attribute\')\n-        self.assertEqual(fd.ndiff(), u\'  \\xfcnicode value\')\n+        self.assertEqual(fd.ndiff(), \'  \\xfcnicode value\')\n \n     def testDiffText(self):\n         """Test text diff output with different value"""\n@@ -128,7 +127,7 @@ def testDiffText(self):\n         expected = \'- value%s+ different value\' % linesep\n         fd = FieldDiff(a, b, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n-        expected = u\'- value%s+ \\xfcnicode value\' % linesep\n+        expected = \'- value%s+ \\xfcnicode value\' % linesep\n         fd = FieldDiff(a, uu, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n \n@@ -139,13 +138,13 @@ def test_dump_text(self):\n         self.assertEqual(diff, [\'- support\'])\n         # Try unicode, a \'u\' with an umlaut.\n         diff = []\n-        dump(\'+\', [u\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [u\'+ s\\xfcpport\'])\n+        dump(\'+\', [\'s\\xfcpport\'], 0, 1, diff)\n+        self.assertEqual(diff, [\'+ s\\xfcpport\'])\n         # Combine them.\n         diff = []\n         dump(\'-\', [\'support\'], 0, 1, diff)\n-        dump(\'+\', [u\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'- support\', u\'+ s\\xfcpport\'])\n+        dump(\'+\', [\'s\\xfcpport\'], 0, 1, diff)\n+        self.assertEqual(diff, [\'- support\', \'+ s\\xfcpport\'])\n \n     def test_dump_integer(self):\n         """Test dumping a diff of integers."""\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 0bd5732..bdfba50 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n@@ -110,7 +109,7 @@ def testSameText(self):\n         """Test text diff output with no diff"""\n         a = A()\n         diff = ListDiff(a, a, \'attribute\')\n-        expected = \'  1%(linesep)s  2%(linesep)s  3\' % {\'linesep\': linesep}\n+        expected = \'  1{linesep}  2{linesep}  3\'.format(linesep=linesep)\n         self.assertEqual(diff.ndiff(), expected)\n \n     def testDiffText(self):\n@@ -153,15 +152,15 @@ def test_inline_diff_hacker_dict(self):\n \n     def test_inline_diff_vocabulary(self):\n         # unchanged, with vocabulary title\n-        expected = u\'<div class="InlineDiff">First Title</div>\'\n+        expected = \'<div class="InlineDiff">First Title</div>\'\n         self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n                              [testing.VOCABULARY_TUPLES[0][0]], True, expected)\n         # unchanged, without vocabulary title\n-        expected = u\'<div class="InlineDiff">second_value</div>\'\n+        expected = \'<div class="InlineDiff">second_value</div>\'\n         self._test_diff_list([testing.VOCABULARY_TUPLES[1][0]],\n                              [testing.VOCABULARY_TUPLES[1][0]], True, expected)\n         # changed: add value, with vocabulary title\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = \'\'\'<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">First Title</div>\n </div>\'\'\'\n@@ -169,7 +168,7 @@ def test_inline_diff_vocabulary(self):\n                              [testing.VOCABULARY_TUPLES[0][0]],\n                              False, expected)\n         # changed: replaced unique value by another one, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = \'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n@@ -181,7 +180,7 @@ def test_inline_diff_vocabulary(self):\n                              [testing.VOCABULARY_TUPLES[2][0]],\n                              False, expected)\n         # changed: replaced multiple values by others, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = \'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n@@ -196,7 +195,7 @@ def test_inline_diff_vocabulary(self):\n                               testing.VOCABULARY_TUPLES[2][0]],\n                              False, expected)\n         # changed: replaced multiple values by others, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = \'\'\'<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n </div>\n@@ -211,7 +210,7 @@ def test_inline_diff_vocabulary(self):\n                               testing.VOCABULARY_TUPLES[0][0]],\n                              False, expected)\n         # changed: removed values, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = \'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex 1a59c4b..7b3e0ed 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from os import linesep\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from Products.CMFDiffTool.TextDiff import TextDiff\ndiff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py\nindex 9217f6e..ebfe1d4 100644\n--- a/Products/CMFDiffTool/tests/test_astextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_astextdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import date\n from Products.CMFDiffTool.interfaces import IDifference\n from Products.CMFDiffTool.TextDiff import AsTextDiff\n@@ -6,12 +5,12 @@\n import unittest\n \n \n-class DateDummyType(object):\n+class DateDummyType:\n     def __init__(self, date):\n         self.date = date\n \n \n-class BoolDummyType(object):\n+class BoolDummyType:\n     def __init__(self, bool_field):\n         self.bool_field = bool_field\n \ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 9225476..b814d0d 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n@@ -17,14 +16,14 @@ def test_should_detect_different_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'blah.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'bleh.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -37,14 +36,14 @@ def test_should_detect_different_data(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'different contents\', filename=u\'f.txt\'),\n+            file=NamedFile(data=\'different contents\', filename=\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -57,14 +56,14 @@ def test_should_detect_same_data_and_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -78,14 +77,14 @@ def test_should_escape_html(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+            file=NamedFile(data=\'contents\', filename=\'blah.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=u\'<script>alert("Hacker filename")</script>.txt\'),\n+            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=\'<script>alert("Hacker filename")</script>.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \ndiff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py\nindex 63d5b45..95964ee 100644\n--- a/Products/CMFDiffTool/tests/test_choicediff.py\n+++ b/Products/CMFDiffTool/tests/test_choicediff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFDiffTool import testing\ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex c75223b..e19c762 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import date\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -23,17 +22,17 @@ def test_should_diff(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            title=u\'Object 1\',\n-            description=u\'Desc 1\',\n-            text=u\'Text 1\',\n+            title=\'Object 1\',\n+            description=\'Desc 1\',\n+            text=\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            title=u\'Object 2\',\n-            text=u\'Text 2\',\n+            title=\'Object 2\',\n+            text=\'Text 2\',\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -78,7 +77,7 @@ def test_should_provide_inline_diff_for_file_list_field(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            files=[NamedFile(data=\'data\', filename=u\'a.txt\')],\n+            files=[NamedFile(data=\'data\', filename=\'a.txt\')],\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -115,9 +114,9 @@ def test_should_provide_diff_for_related_fields(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            title=u\'Object 1\',\n-            description=u\'Desc 1\',\n-            text=u\'Text 1\',\n+            title=\'Object 1\',\n+            description=\'Desc 1\',\n+            text=\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \n@@ -125,7 +124,7 @@ def test_should_provide_diff_for_related_fields(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            title=u\'Object 2\',\n+            title=\'Object 2\',\n             relatedItems=[RelationValue(intid)],\n         )\n         obj2 = self.portal[\'obj2\']\n@@ -134,7 +133,7 @@ def test_should_provide_diff_for_related_fields(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj3\',\n-            title=u\'Object 3\',\n+            title=\'Object 3\',\n             relatedItems=[RelationValue(intid)],\n         )\n         obj3 = self.portal[\'obj3\']\ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex 24a3c3d..d0c006d 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -6,7 +5,7 @@\n import unittest\n \n \n-class DummyType(object):\n+class DummyType:\n     def __init__(self, files):\n         """`files` is a sequence of (data, filename) tuples."""\n         self.files = files and [\n@@ -17,53 +16,53 @@ class AsTextDiffTestCase(unittest.TestCase):\n \n     def test_should_diff_file_lists_correctly(self):\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data2\', u\'filename2\')],\n+            [(\'data1\', \'filename1\')],\n+            [(\'data2\', \'filename2\')],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'data1\', u\'filename1\'), (\'datay\', u\'filenamey\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [(\'data1\', \'filename1\'), (\'datay\', \'filenamey\')],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'datax\', u\'filenamex\'), (\'data1\', u\'filename1\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [(\'datax\', \'filenamex\'), (\'data1\', \'filename1\')],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [(\'data1\', \'filename1\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data1\', u\'filename1\')],\n+            [(\'data1\', \'filename1\')],\n+            [(\'data1\', \'filename1\')],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n             None,\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n             [],\n             False,\n         )\n         self._test_diff_files(\n             [\n-                (\'<script>alert("Hacker data 1")</script>\', u\'filename1\'),\n-                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+                (\'<script>alert("Hacker data 1")</script>\', \'filename1\'),\n+                (\'<script>alert("Hacker data 2")</script>\', \'filename2\'),\n             ],\n             [\n-                (\'data1\', u\'<script>alert("Hacker data")</script>.txt\'),\n-                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+                (\'data1\', \'<script>alert("Hacker data")</script>.txt\'),\n+                (\'<script>alert("Hacker data 2")</script>\', \'filename2\'),\n             ],\n             False,\n         )\ndiff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py\nindex fadc602..f0326d4 100644\n--- a/Products/CMFDiffTool/tests/test_install.py\n+++ b/Products/CMFDiffTool/tests/test_install.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex 682e420..115620e 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.textfield.value import RichTextValue\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n@@ -7,7 +6,7 @@\n import unittest\n \n \n-class DummyType(object):\n+class DummyType:\n     def __init__(self, body):\n         self.body = body\n \n@@ -22,21 +21,21 @@ def test_parseField_value_is_none(self):\n         self.assertEqual(diff._parseField(value), [])\n \n     def test_parseField_value_is_not_none(self):\n-        value = RichTextValue(u\'foo\')\n+        value = RichTextValue(\'foo\')\n         diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n-        self.assertEqual(diff._parseField(value), [u\'foo\'])\n+        self.assertEqual(diff._parseField(value), [\'foo\'])\n \n     def test_inline_diff_same(self):\n-        value = RichTextValue(u\'foo\')\n+        value = RichTextValue(\'foo\')\n         diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n         inline_diff = diff.inline_diff()\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, True)\n-        self.assertEqual(inline_diff, u\'foo \')\n+        self.assertEqual(inline_diff, \'foo \')\n \n     def test_inline_diff_same_hacker(self):\n-        value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n@@ -44,8 +43,8 @@ def test_inline_diff_same_hacker(self):\n         self.assertNotIn("&gt;", inline_diff)\n \n     def test_inline_diff_different(self):\n-        old_value = RichTextValue(u\'foo\')\n-        new_value = RichTextValue(u\'foo bar\')\n+        old_value = RichTextValue(\'foo\')\n+        new_value = RichTextValue(\'foo bar\')\n         diff = CMFDTHtmlDiff(\n             DummyType(old_value), DummyType(new_value), \'body\')\n \n@@ -53,19 +52,19 @@ def test_inline_diff_different(self):\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, False)\n-        self.assertEqual(inline_diff, u\'foo <span class="insert">bar </span> \')\n+        self.assertEqual(inline_diff, \'foo <span class="insert">bar </span> \')\n \n     def test_inline_diff_different_hacker(self):\n-        old_value = RichTextValue(u\'clean\')\n-        new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        old_value = RichTextValue(\'clean\')\n+        new_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n         self.assertNotIn("&gt;", inline_diff)\n \n-        old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n-        new_value = RichTextValue(u\'clean\')\n+        old_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n+        new_value = RichTextValue(\'clean\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\ndiff --git a/setup.py b/setup.py\nindex dd79c68..bd731df 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:31:16+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/5a07c77baf47a88189e967ee97df0453ab07f65c

chore: black

Files changed:
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/exportimport/difftool.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_install.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M Products/__init__.py
M setup.py

b'diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 13d4463..1a1038b 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -19,36 +19,45 @@\n @implementer(IDifference)\n class BaseDiff:\n     """Basic diff type"""\n-    __allow_access_to_unprotected_subobjects__ = 1\n-    meta_type = \'Base Diff\'\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None,\n-                 field_name=None, field_label=None, schemata=None):\n+    __allow_access_to_unprotected_subobjects__ = 1\n+    meta_type = "Base Diff"\n+\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n         self.field = field\n         self.oldValue = _getValue(obj1, field, field_name)\n         self.newValue = _getValue(obj2, field, field_name)\n-        self.same = (self.oldValue == self.newValue)\n-        if not id1 and safe_hasattr(obj1, \'getId\'):\n+        self.same = self.oldValue == self.newValue\n+        if not id1 and safe_hasattr(obj1, "getId"):\n             id1 = obj1.getId()\n-        if not id2 and safe_hasattr(obj2, \'getId\'):\n+        if not id2 and safe_hasattr(obj2, "getId"):\n             id2 = obj2.getId()\n         self.id1 = id1\n         self.id2 = id2\n         self.label = field_label or field\n-        self.schemata = schemata or \'default\'\n+        self.schemata = schemata or "default"\n         fld1 = _getValue(obj1, field, field_name, convert_to_str=False)\n         fld2 = _getValue(obj2, field, field_name, convert_to_str=False)\n-        if safe_hasattr(fld1, \'getFilename\'):\n+        if safe_hasattr(fld1, "getFilename"):\n             self.oldFilename = fld1.getFilename()\n         else:\n             self.oldFilename = None\n-        if safe_hasattr(fld2, \'getFilename\'):\n+        if safe_hasattr(fld2, "getFilename"):\n             self.newFilename = fld2.getFilename()\n         else:\n             self.newFilename = None\n-        if self.oldFilename is not None and self.newFilename is not None \\\n-           and self.same:\n-            self.same = (self.oldFilename == self.newFilename)\n+        if self.oldFilename is not None and self.newFilename is not None and self.same:\n+            self.same = self.oldFilename == self.newFilename\n \n     def testChanges(self, ob):\n         """Test the specified object to determine if the change set\n@@ -60,10 +69,8 @@ def applyChanges(self, ob):\n         pass\n \n     def filenameTitle(self, filename):\n-        """Translate the filename leading text\n-        """\n-        msg = _(\'Filename: ${filename}\',\n-                mapping={\'filename\': filename})\n+        """Translate the filename leading text"""\n+        msg = _("Filename: ${filename}", mapping={"filename": filename})\n         return translate(msg)\n \n \n@@ -76,7 +83,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n         # as `subject` attribute but the schema name is `subjects`\n         # see plone.app.dexterity.behaviors.metadata.ICategorization and\n         # plone.dexterity.content.DexterityContent\n-        if field == \'subjects\':\n+        if field == "subjects":\n             value = ob.Subject()\n         else:\n             value = getattr(ob, field, None)\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 00d4036..b1b6100 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -8,7 +8,7 @@\n class BinaryDiff(FieldDiff):\n     """Simple binary difference"""\n \n-    meta_type = \'Binary Diff\'\n+    meta_type = "Binary Diff"\n     inlinediff_fmt = """\n <div class="%s">\n     <del>%s</del>\n@@ -32,8 +32,9 @@ def testChanges(self, ob):\n         """\n         value = _getValue(ob, self.field)\n         if not self.same and value != self.oldValue:\n-            raise ValueError(\'Conflict Error during merge\',\n-                             self.field, value, self.oldValue)\n+            raise ValueError(\n+                "Conflict Error during merge", self.field, value, self.oldValue\n+            )\n \n     def applyChanges(self, ob):\n         """Update the specified object with the difference"""\n@@ -45,13 +46,16 @@ def applyChanges(self, ob):\n     def inline_diff(self):\n         """Simple inline diff that just checks that the filename\n         has changed."""\n-        css_class = \'FilenameDiff\'\n+        css_class = "FilenameDiff"\n         html = []\n         if self.oldFilename != self.newFilename:\n             html.append(\n-                self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(html_escape(self.oldFilename)),\n-                                       self.filenameTitle(html_escape(self.newFilename))),\n+                self.inlinediff_fmt\n+                % (\n+                    css_class,\n+                    self.filenameTitle(html_escape(self.oldFilename)),\n+                    self.filenameTitle(html_escape(self.newFilename)),\n+                ),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 831f90b..7316b21 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -10,22 +10,20 @@\n class CMFDTHtmlDiff(TextDiff):\n     """Text difference"""\n \n-    meta_type = \'HTML Diff\'\n+    meta_type = "HTML Diff"\n \n     def inline_diff(self):\n         """Return a specialized diff for HTML"""\n-        a = \'\\n\'.join(self._parseField(self.oldValue,\n-                                       filename=self.oldFilename))\n-        b = \'\\n\'.join(self._parseField(self.newValue,\n-                                       filename=self.newFilename))\n+        a = "\\n".join(self._parseField(self.oldValue, filename=self.oldFilename))\n+        b = "\\n".join(self._parseField(self.newValue, filename=self.newFilename))\n         return htmldiff.htmldiff(html_safe(a), html_safe(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\n         if value is None:\n-            value = \'\'\n+            value = ""\n         else:\n-            value = getattr(value, \'raw\', value)\n+            value = getattr(value, "raw", value)\n         return TextDiff._parseField(self, value, filename)\n \n \ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 6d32f1a..936c1ef 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -21,15 +21,15 @@\n class CMFDiffTool(UniqueObject, SimpleItem):\n     """ """\n \n-    id = \'portal_diff\'\n-    meta_type = \'CMF Diff Tool\'\n+    id = "portal_diff"\n+    meta_type = "CMF Diff Tool"\n \n     security = ClassSecurityInfo()\n \n-    manage_options = (({\'label\': \'Configure\', \'action\': \'manage_difftypes\'},\n-                      {\'label\': \'Overview\', \'action\': \'manage_overview\'},\n-                       ) + SimpleItem.manage_options\n-                      )\n+    manage_options = (\n+        {"label": "Configure", "action": "manage_difftypes"},\n+        {"label": "Overview", "action": "manage_overview"},\n+    ) + SimpleItem.manage_options\n \n     #  Internal attributes\n     _difftypes = {}\n@@ -37,8 +37,8 @@ class CMFDiffTool(UniqueObject, SimpleItem):\n     def __init__(self):\n         self._pt_diffs = {}\n \n-    security.declareProtected(ManagePortal, \'manage_difftypes\')  # NOQA\n-    manage_difftypes = PageTemplateFile(\'zpt/editCMFDiffTool\', globals())\n+    security.declareProtected(ManagePortal, "manage_difftypes")  # NOQA\n+    manage_difftypes = PageTemplateFile("zpt/editCMFDiffTool", globals())\n \n     def manage_editDiffFields(self, updates, REQUEST=None):\n         """Edit the portal type fields"""\n@@ -47,49 +47,48 @@ def manage_editDiffFields(self, updates, REQUEST=None):\n         del self._pt_diffs\n         self._pt_diffs = {}\n         for r in updates:\n-            if r.get(\'delete\', None):\n+            if r.get("delete", None):\n                 continue\n             self.setDiffField(r.pt_name, r.field, r.diff)\n \n         self._p_changed = 1\n \n         if REQUEST:\n-            return self.manage_difftypes(\n-                manage_tabs_message=\'Diff mappings updated\')\n+            return self.manage_difftypes(manage_tabs_message="Diff mappings updated")\n \n-    security.declareProtected(ManagePortal, \'listDiffTypes\')  # NOQA\n+    security.declareProtected(ManagePortal, "listDiffTypes")  # NOQA\n \n     def manage_addDiffField(self, pt_name, field, diff, REQUEST=None):\n         """Add a new diff field from the ZMI"""\n         self.setDiffField(pt_name, field, diff)\n         if REQUEST:\n-            return self.manage_difftypes(manage_tabs_message=\'Field added\')\n+            return self.manage_difftypes(manage_tabs_message="Field added")\n \n     def setDiffField(self, pt_name, field, diff):\n         """\n         Set the diff type for \'field\' on the portal type \'pt_name\' to \'diff\'\n         """\n         if pt_name not in self.portal_types.listContentTypes():\n-            raise BadRequest(\'Error: invalid portal type\')\n+            raise BadRequest("Error: invalid portal type")\n \n         elif not field:\n-            raise BadRequest(\'Error: no field specified\')\n+            raise BadRequest("Error: no field specified")\n \n         elif diff not in self.listDiffTypes():\n-            raise BadRequest(\'Error: invalid diff type\')\n+            raise BadRequest("Error: invalid diff type")\n \n         else:\n             self._pt_diffs.setdefault(pt_name, {})[field] = diff\n             self._p_changed = 1\n \n     #  Interface fulfillment\n-    security.declareProtected(ManagePortal, \'listDiffTypes\')  # NOQA\n+    security.declareProtected(ManagePortal, "listDiffTypes")  # NOQA\n \n     def listDiffTypes(self):\n         """List the names of the registered difference types"""\n         return list(self._difftypes)\n \n-    security.declareProtected(ManagePortal, \'getDiffType\')  # NOQA\n+    security.declareProtected(ManagePortal, "getDiffType")  # NOQA\n \n     def getDiffType(self, diff):\n         """Return a class corresponding to the specified diff type.\n@@ -97,7 +96,7 @@ def getDiffType(self, diff):\n         interface"""\n         return self._difftypes.get(diff, None)\n \n-    security.declareProtected(ManagePortal, \'setDiffForPortalType\')  # NOQA\n+    security.declareProtected(ManagePortal, "setDiffForPortalType")  # NOQA\n \n     def setDiffForPortalType(self, pt_name, mapping):\n         """Set the difference type(self, s) for the specific portal type\n@@ -109,7 +108,7 @@ def setDiffForPortalType(self, pt_name, mapping):\n         self._pt_diffs[pt_name] = mapping.copy()\n         self._p_changed = 1\n \n-    security.declareProtected(ManagePortal, \'getDiffForPortalType\')  # NOQA\n+    security.declareProtected(ManagePortal, "getDiffForPortalType")  # NOQA\n \n     def getDiffForPortalType(self, pt_name):\n         """Returns a dictionary where each key is an attribute or\n@@ -118,7 +117,7 @@ def getDiffForPortalType(self, pt_name):\n         # Return a copy so we don\'t have to worry about the user changing it\n         return self._pt_diffs.get(pt_name, {}).copy()\n \n-    security.declarePublic(\'computeDiff\')  # NOQA\n+    security.declarePublic("computeDiff")  # NOQA\n \n     def computeDiff(self, ob1, ob2, id1=None, id2=None):\n         """Compute the differences between two objects and return the\n@@ -126,7 +125,7 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):\n         IDifference interface"""\n \n         # Try to get the portal type from obj1 first.  If that fails, use obj2\n-        pt_name = \'\'\n+        pt_name = ""\n         try:\n             pt_name = aq_base(ob1).portal_type\n         except AttributeError:\n@@ -142,19 +141,19 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):\n             klass = self._difftypes[klass_name]\n             f_diff = klass(ob1, ob2, field, id1=id1, id2=id2)\n             # handle compound diff types\n-            if safe_hasattr(f_diff, \'__getitem__\'):\n+            if safe_hasattr(f_diff, "__getitem__"):\n                 diffs.extend(f_diff)\n             else:\n                 diffs.append(f_diff)\n         return diffs\n \n-    security.declarePublic(\'createChangeSet\')  # NOQA\n+    security.declarePublic("createChangeSet")  # NOQA\n \n     def createChangeSet(self, ob1, ob2, id1=None, id2=None):\n         """Returns a ChangeSet object that represents the differences\n         between ob1 and ob2 (ie. ob2 - ob1) ."""\n         # FIXME: Pick a better ID\n-        cs = BaseChangeSet(\'Changes\').__of__(self)\n+        cs = BaseChangeSet("Changes").__of__(self)\n         cs.computeDiff(ob1, ob2, id1=id1, id2=id2)\n         return aq_base(cs)\n \n@@ -178,4 +177,4 @@ def unregisterDiffType(klass):\n \n \n InitializeClass(CMFDiffTool)\n-registerToolInterface(\'portal_diff\', IDiffTool)\n+registerToolInterface("portal_diff", IDiffTool)\ndiff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py\nindex 74a6304..9d4d879 100644\n--- a/Products/CMFDiffTool/ChangeSet.py\n+++ b/Products/CMFDiffTool/ChangeSet.py\n@@ -19,17 +19,18 @@\n import logging\n \n \n-logger = logging.getLogger(\'CMFDiffTool\')\n+logger = logging.getLogger("CMFDiffTool")\n \n \n @implementer(IChangeSet)\n class BaseChangeSet(Implicit):\n     """A ChangeSet represents the set of differences between two objects"""\n+\n     # This should really not be needed just for same, we should use a method\n     __allow_access_to_unprotected_subobjects__ = 1\n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         """ChangeSet constructor"""\n         self.id = id\n         self.title = title\n@@ -41,7 +42,7 @@ def __init__(self, id, title=\'\'):\n         self._changesets = {}\n         self.recursive = 0\n \n-    security.declarePublic(\'getId\')  # NOQA\n+    security.declarePublic("getId")  # NOQA\n \n     def getId(self):\n         """ChangeSet id"""\n@@ -54,13 +55,12 @@ def _isSame(self):\n         """Returns true if there are no differences between the two objects"""\n         return reduce(lambda x, y: x and y, [d.same for d in self._diffs], 1)\n \n-    security.declarePublic(\'same\')  # NOQA\n+    security.declarePublic("same")  # NOQA\n     same = ComputedAttribute(_isSame)\n \n-    security.declarePublic(\'computeDiff\')  # NOQA\n+    security.declarePublic("computeDiff")  # NOQA\n \n-    def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n-                    id1=None, id2=None):\n+    def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):\n         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).\n \n         The results can be accessed through getDiffs()"""\n@@ -75,7 +75,7 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n         self._changed = []\n         self._changesets = {}\n \n-        purl = getToolByName(self, \'portal_url\', None)\n+        purl = getToolByName(self, "portal_url", None)\n         if purl is not None:\n             try:\n                 self.ob1_path = purl.getRelativeContentPath(ob1)\n@@ -83,12 +83,10 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n             except AttributeError:\n                 # one or both of the objects may not have a path\n                 return\n-        diff_tool = getToolByName(self, \'portal_diff\')\n+        diff_tool = getToolByName(self, "portal_diff")\n         self._diffs = diff_tool.computeDiff(ob1, ob2, id1=id1, id2=id2)\n \n-        if (recursive and\n-                ob1.isPrincipiaFolderish and\n-                ob2.isPrincipiaFolderish):\n+        if recursive and ob1.isPrincipiaFolderish and ob2.isPrincipiaFolderish:\n             self.recursive = 1\n             ids1 = set(ob1.objectIds())\n             ids2 = set(ob2.objectIds())\n@@ -119,12 +117,12 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n                 self._addSubSet(id, ob1, ob2, exclude, id1, id2)\n \n     def _addSubSet(self, id, ob1, ob2, exclude, id1, id2):\n-        cs = BaseChangeSet(id, title=\'Changes to: %s\' % id)\n+        cs = BaseChangeSet(id, title="Changes to: %s" % id)\n         cs = cs.__of__(self)\n         cs.computeDiff(ob1[id], ob2[id], exclude=exclude, id1=id1, id2=id2)\n         self._changesets[id] = aq_base(cs)\n \n-    security.declarePublic(\'testChanges\')  # NOQA\n+    security.declarePublic("testChanges")  # NOQA\n \n     def testChanges(self, ob):\n         """\n@@ -139,7 +137,7 @@ def testChanges(self, ob):\n             child = ob[id]\n             cs.testChanges(child)\n \n-    security.declarePublic(\'applyChanges\')  # NOQA\n+    security.declarePublic("applyChanges")  # NOQA\n \n     def applyChanges(self, ob):\n         """Apply the change set to the specified object"""\n@@ -158,7 +156,7 @@ def applyChanges(self, ob):\n             child = ob[id]\n             cs.applyChanges(child)\n \n-    security.declarePublic(\'getDiffs\')  # NOQA\n+    security.declarePublic("getDiffs")  # NOQA\n \n     def getDiffs(self):\n         """\n@@ -169,18 +167,18 @@ def getDiffs(self):\n         """\n         return self._diffs\n \n-    security.declarePublic(\'getSubDiffs\')  # NOQA\n+    security.declarePublic("getSubDiffs")  # NOQA\n \n     def getSubDiffs(self):\n         """If the ChangeSet was computed recursively, returns a list\n-           of ChangeSet objects representing subjects differences\n+        of ChangeSet objects representing subjects differences\n \n-           Each ChangeSet will have the same ID as the objects whose\n-           difference it represents.\n-           """\n+        Each ChangeSet will have the same ID as the objects whose\n+        difference it represents.\n+        """\n         return [self[id] for id in self._changed]\n \n-    security.declarePublic(\'getAddedItems\')  # NOQA\n+    security.declarePublic("getAddedItems")  # NOQA\n \n     def getAddedItems(self):\n         """If the ChangeSet was computed recursively, returns the list\n@@ -190,7 +188,7 @@ def getAddedItems(self):\n         """\n         return list(self._added)\n \n-    security.declarePublic(\'getRemovedItems\')  # NOQA\n+    security.declarePublic("getRemovedItems")  # NOQA\n \n     def getRemovedItems(self):\n         """If the ChangeSet was computed recursively, returns the list\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 8d40183..7055f29 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -9,7 +9,7 @@\n class FieldDiff(BaseDiff):\n     """Text difference"""\n \n-    meta_type = \'Field Diff\'\n+    meta_type = "Field Diff"\n \n     same_fmt = """<div class="%s">%s</div>"""\n     inlinediff_fmt = """<div class="%s">\n@@ -41,8 +41,9 @@ def testChanges(self, ob):\n         """\n         value = _getValue(ob, self.field)\n         if not self.same and value != self.oldValue:\n-            raise ValueError(\'Conflict Error during merge\',\n-                             self.field, value, self.oldValue)\n+            raise ValueError(\n+                "Conflict Error during merge", self.field, value, self.oldValue\n+            )\n \n     def applyChanges(self, ob):\n         """Update the specified object with the difference"""\n@@ -57,43 +58,43 @@ def ndiff(self):\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 plain_replace(a, alo, ahi, b, blo, bhi, r)\n-            elif tag == \'delete\':\n-                dump(\'-\', a, alo, ahi, r)\n-            elif tag == \'insert\':\n-                dump(\'+\', b, blo, bhi, r)\n-            elif tag == \'equal\':\n-                dump(\' \', a, alo, ahi, r)\n+            elif tag == "delete":\n+                dump("-", a, alo, ahi, r)\n+            elif tag == "insert":\n+                dump("+", b, blo, bhi, r)\n+            elif tag == "equal":\n+                dump(" ", a, alo, ahi, r)\n             else:\n-                raise ValueError(\'unknown tag %r\', tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %r", tag)\n+        return "\\n".join(r)\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         inlinediff_fmt = self.inlinediff_fmt\n         same_fmt = self.same_fmt\n         r = []\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), ""))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n-            elif tag == \'delete\':\n+                    r.append(inlinediff_fmt % (css_class, "", html_escape(b[i])))\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n-            elif tag == \'insert\':\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), ""))\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n-            elif tag == \'equal\':\n+                    r.append(inlinediff_fmt % (css_class, "", html_escape(b[i])))\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     r.append(same_fmt % (css_class, html_escape(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n-        return \'\\n\'.join(r)\n+        return "\\n".join(r)\n \n \n InitializeClass(FieldDiff)\n@@ -101,7 +102,7 @@ def inline_diff(self):\n \n def dump(tag, x, lo, hi, r):\n     for i in range(lo, hi):\n-        r.append(tag + \' %s\' % x[i])\n+        r.append(tag + " %s" % x[i])\n \n \n def plain_replace(a, alo, ahi, b, blo, bhi, r):\n@@ -109,8 +110,8 @@ def plain_replace(a, alo, ahi, b, blo, bhi, r):\n     # dump the shorter block first -- reduces the burden on short-term\n     # memory if the blocks are of very different sizes\n     if bhi - blo < ahi - alo:\n-        dump(\'+\', b, blo, bhi, r)\n-        dump(\'-\', a, alo, ahi, r)\n+        dump("+", b, blo, bhi, r)\n+        dump("-", a, alo, ahi, r)\n     else:\n-        dump(\'-\', a, alo, ahi, r)\n-        dump(\'+\', b, blo, bhi, r)\n+        dump("-", a, alo, ahi, r)\n+        dump("+", b, blo, bhi, r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex 420d2fa..f041ebf 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -9,12 +9,22 @@\n class ListDiff(FieldDiff):\n     """Text difference"""\n \n-    meta_type = \'List Diff\'\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        FieldDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                           field_label, schemata)\n+    meta_type = "List Diff"\n+\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        FieldDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         self._vocabulary = None\n \n         # Tries to find a vocabulary. First we need to find an object and\n@@ -27,8 +37,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n                 # Binding the field to an object will construct the vocabulary\n                 # using a factory if necessary.\n                 try:\n-                    self._vocabulary = field_instance.value_type.bind(obj).\\\n-                        vocabulary\n+                    self._vocabulary = field_instance.value_type.bind(obj).vocabulary\n                 except Exception:\n                     pass\n \n@@ -38,7 +47,7 @@ def chk_hashable(self, value):\n         try:\n             hash(value)\n         except TypeError as e:\n-            value = repr(e) + \': \' + repr(value)\n+            value = repr(e) + ": " + repr(value)\n         return value\n \n     def _parseField(self, value, filename=None):\n@@ -56,8 +65,7 @@ def _parseField(self, value, filename=None):\n \n \n class RelationListDiff(FieldDiff):\n-\n-    meta_type = \'Related List Diff\'\n+    meta_type = "Related List Diff"\n \n     same_fmt = """<div class="%s"><a target="_blank" href="%s">%s</a></div>"""\n     inlinediff_fmt = """<div class="%s">\n@@ -65,93 +73,97 @@ class RelationListDiff(FieldDiff):\n     </div>"""\n \n     def _parseField(self, value, filename=None):\n-        """ Take RelationValues and just return the target UID\n-            so we can compare """\n+        """Take RelationValues and just return the target UID\n+        so we can compare"""\n \n         if filename is None:\n             # Since we only want to compare a single field, make a\n             # one-item list out of it\n-            return [\'/\'.join(val.getPhysicalPath()) for val in value]\n+            return ["/".join(val.getPhysicalPath()) for val in value]\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                [\'/\'.join(val.getPhysicalPath()) for val in value],\n+                ["/".join(val.getPhysicalPath()) for val in value],\n             ]\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         inlinediff_fmt = self.inlinediff_fmt\n         same_fmt = self.same_fmt\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_sub\', obj_url, obj_title))\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title)\n+                    )\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_add\', obj_url, obj_title))\n-            elif tag == \'delete\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title)\n+                    )\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_sub\', obj_url, obj_title))\n-            elif tag == \'insert\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title)\n+                    )\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_add\', obj_url, obj_title))\n-            elif tag == \'equal\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title)\n+                    )\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\n-                raise ValueError(\'unknown tag %s\' % tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %s" % tag)\n+        return "\\n".join(r)\n \n     def ndiff(self):\n-        """ Return a textual diff """\n+        """Return a textual diff"""\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'- %s\' % obj_url)\n+                    r.append("- %s" % obj_url)\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'+ %s\' % obj_url)\n-            elif tag == \'delete\':\n+                    r.append("+ %s" % obj_url)\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'- %s\' % obj_url)\n-            elif tag == \'insert\':\n+                    r.append("- %s" % obj_url)\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'+ %s\' % obj_url)\n-            elif tag == \'equal\':\n+                    r.append("+ %s" % obj_url)\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'  %s\' % obj_url)\n+                    r.append("  %s" % obj_url)\n             else:\n-                raise ValueError(\'unknown tag %r\', tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %r", tag)\n+        return "\\n".join(r)\n \n \n InitializeClass(ListDiff)\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 52d190d..1bade1d 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -12,7 +12,7 @@\n class TextDiff(FieldDiff):\n     """Text difference"""\n \n-    meta_type = \'Lines Diff\'\n+    meta_type = "Lines Diff"\n     inlinediff_fmt = """\n <div class="%s">\n     <del>%s</del>\n@@ -23,7 +23,7 @@ class TextDiff(FieldDiff):\n     def _parseField(self, value, filename=None):\n         """Parse a field value in preparation for diffing"""\n         if value is None:\n-            value = \'\'\n+            value = ""\n         if filename is None:\n             # Split the text into a list for diffs\n             return value.splitlines()\n@@ -45,27 +45,26 @@ def html_diff(self, context=True, wrapcolumn=40):\n         """Return an HTML table showing differences"""\n         # difflib is not Unicode-aware, so we need to force everything to\n         # utf-8 manually\n-        a = [safe_unicode(i) for i in\n-             self._parseField(self.oldValue, filename=self.oldFilename)]\n-        b = [safe_unicode(i) for i in\n-             self._parseField(self.newValue, filename=self.newFilename)]\n+        a = [\n+            safe_unicode(i)\n+            for i in self._parseField(self.oldValue, filename=self.oldFilename)\n+        ]\n+        b = [\n+            safe_unicode(i)\n+            for i in self._parseField(self.newValue, filename=self.newFilename)\n+        ]\n         vis_diff = difflib.HtmlDiff(wrapcolumn=wrapcolumn)\n         diff = vis_diff.make_table(\n-            a,\n-            b,\n-            safe_unicode(self.id1),\n-            safe_unicode(self.id2),\n-            context=context)\n+            a, b, safe_unicode(self.id1), safe_unicode(self.id2), context=context\n+        )\n         return diff\n \n     def inline_diff(self):\n         """Simple inline diff that just assumes that either the filename\n         has changed, or the text has been completely replaced."""\n-        css_class = \'InlineDiff\'\n-        old_attr = self._parseField(self.oldValue,\n-                                    filename=self.oldFilename)\n-        new_attr = self._parseField(self.newValue,\n-                                    filename=self.newFilename)\n+        css_class = "InlineDiff"\n+        old_attr = self._parseField(self.oldValue, filename=self.oldFilename)\n+        new_attr = self._parseField(self.newValue, filename=self.newFilename)\n         if old_attr:\n             old_fname = old_attr.pop(0)\n         else:\n@@ -79,8 +78,12 @@ def inline_diff(self):\n         html = []\n         if old_fname != new_fname:\n             html.append(\n-                self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       html_escape(old_fname), html_escape(new_fname)),\n+                self.inlinediff_fmt\n+                % (\n+                    "%s FilenameDiff" % css_class,\n+                    html_escape(old_fname),\n+                    html_escape(new_fname),\n+                ),\n             )\n         if a != b:\n             html.append(\n@@ -102,11 +105,11 @@ class AsTextDiff(TextDiff):\n \n     def _parseField(self, value, filename=None):\n         if value is None:\n-            value = \'\'\n+            value = ""\n \n         # In tests translation is not available, so we account for this\n         # case here.\n-        translate = getattr(getSite(), \'translate\', None)\n+        translate = getattr(getSite(), "translate", None)\n         if translate is not None:\n             value = translate(_(value))\n \ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 1e54a19..33fd937 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -3,7 +3,7 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-CMFDiffToolMessageFactory = MessageFactory(\'plone\')\n+CMFDiffToolMessageFactory = MessageFactory("plone")\n \n from Products.CMFCore.utils import ToolInit  # NOQA\n from Products.CMFDiffTool import BinaryDiff  # NOQA\n@@ -40,11 +40,12 @@\n     CMFDiffTool.registerDiffType(choicediff.ChoiceDiff)\n     CMFDiffTool.registerDiffType(dexteritydiff.DexterityCompoundDiff)\n \n-tools = (CMFDiffTool.CMFDiffTool, )\n+tools = (CMFDiffTool.CMFDiffTool,)\n \n \n def initialize(context):\n-    ToolInit(\'CMF Diff Tool\',\n-             tools=tools,\n-             icon=\'tool.gif\',\n-             ).initialize(context)\n+    ToolInit(\n+        "CMF Diff Tool",\n+        tools=tools,\n+        icon="tool.gif",\n+    ).initialize(context)\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex 9457e66..f2ac539 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -51,10 +51,20 @@ class ChoiceDiff(AsTextDiff):\n     user-friendlier inline diff to the user.\n     """\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        AsTextDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                            field_label, schemata)\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        AsTextDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         self._vocabulary = None\n \n         # Tries to find a vocabulary. First we need to find an object and\n@@ -62,8 +72,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n         obj = obj1 if (obj1 is not None) else obj2\n         field_name = field_name or field\n         field_instance = (\n-            get_field_object(obj, field_name) if (obj and field_name)\n-            else None\n+            get_field_object(obj, field_name) if (obj and field_name) else None\n         )\n \n         if field_instance is not None:\n@@ -73,7 +82,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n \n     def _parseField(self, value, filename=None):\n         if value is None:\n-            value = \'\'\n+            value = ""\n         elif self._vocabulary is not None:\n             value = title_or_value(self._vocabulary, value)\n \ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex 2ff020a..dc72640 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -30,10 +30,10 @@\n     ((RelationList,), RelationListDiff),\n     ((Iterable, Container), ListDiff),\n     ((Date, Datetime, Time), AsTextDiff),\n-    ((Bool, ), AsTextDiff),\n-    ((Choice, ), ChoiceDiff),\n+    ((Bool,), AsTextDiff),\n+    ((Choice,), ChoiceDiff),\n     ((Text, Bytes), TextDiff),\n-    ((RichText, ), CMFDTHtmlDiff),\n+    ((RichText,), CMFDTHtmlDiff),\n ]\n \n """\n@@ -63,14 +63,14 @@\n """\n \n # TODO: provide an easier way to exclude fields.\n-EXCLUDED_FIELDS = (\'modification_date\', \'IVersionable.changeNote\')\n+EXCLUDED_FIELDS = ("modification_date", "IVersionable.changeNote")\n """Names of fields not to compare."""\n \n \n class DexterityCompoundDiff:\n     """text difference for Dexterity"""\n \n-    meta_type = \'Compound Diff for Dexterity types\'\n+    meta_type = "Compound Diff for Dexterity types"\n \n     def __init__(self, obj1, obj2, field, id1=None, id2=None):\n         self.id1 = id1 or obj1.getId()\n@@ -97,8 +97,9 @@ def _diff(self, obj1, obj2):\n         diffs = []\n         for field, field_name in self._compute_fields_order(obj1):\n             if field_name not in EXCLUDED_FIELDS:\n-                schema_name = \'.\' in field_name and \\\n-                    field_name.split(\'.\')[0] or \'default\'\n+                schema_name = (\n+                    "." in field_name and field_name.split(".")[0] or "default"\n+                )\n                 diffs.append(self._diff_field(obj1, obj2, field, schema_name))\n \n         return diffs\n@@ -127,14 +128,14 @@ def _get_diff_type(self, field):\n         Return a subclass of `Products.CMFEditions.BaseDiff.BaseDiff` suitable\n         for the given `zope.schema.Field` instance.\n         """\n-        diff_type = self._compute_diff_type(\n-            field, FIELDS_AND_DIFF_TYPES_RELATION)\n+        diff_type = self._compute_diff_type(field, FIELDS_AND_DIFF_TYPES_RELATION)\n \n         if diff_type is ListDiff:\n             return (\n                 self._compute_diff_type(\n-                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION) or\n-                diff_type\n+                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION\n+                )\n+                or diff_type\n             )\n \n         return diff_type or FALL_BACK_DIFF_TYPE\n@@ -154,7 +155,7 @@ def _compute_diff_type(self, field, relation):\n             subclass.\n         """\n \n-        for (field_types, diff_type) in relation:\n+        for field_types, diff_type in relation:\n             if isinstance(field, field_types):\n                 return diff_type\n \n@@ -173,7 +174,8 @@ def _compute_fields_order(self, obj):\n         all_fields += [(form.fields[name].field, name) for name in form.fields]\n         if form.groups:\n             for group in form.groups:\n-                all_fields += [(group.fields[name].field, name)\n-                               for name in group.fields]\n+                all_fields += [\n+                    (group.fields[name].field, name) for name in group.fields\n+                ]\n \n         return all_fields\ndiff --git a/Products/CMFDiffTool/exportimport/difftool.py b/Products/CMFDiffTool/exportimport/difftool.py\nindex fe83f7c..e11e37f 100644\n--- a/Products/CMFDiffTool/exportimport/difftool.py\n+++ b/Products/CMFDiffTool/exportimport/difftool.py\n@@ -8,18 +8,16 @@\n \n @implementer(IDiffTool)\n class DiffToolXMLAdapter(XMLAdapterBase):\n-    \'\'\'In- and exporter for DiffTool.\n-    \'\'\'\n+    """In- and exporter for DiffTool."""\n \n-    name = \'diff_tool\'\n+    name = "diff_tool"\n \n     def _exportNode(self):\n-        \'\'\'Export the object as a DOM node.\n-        \'\'\'\n-        node = self._doc.createElement(\'object\')\n+        """Export the object as a DOM node."""\n+        node = self._doc.createElement("object")\n         node.appendChild(self._extractDiffToolSettings())\n \n-        self._logger.info(\'DiffTool settings exported.\')\n+        self._logger.info("DiffTool settings exported.")\n         return node\n \n     def _importNode(self, node):\n@@ -27,58 +25,56 @@ def _importNode(self, node):\n             self._purgeDiffToolSettings()\n \n         self._initDiffToolSettings(node)\n-        self._logger.info(\'DiffTool settings imported.\')\n+        self._logger.info("DiffTool settings imported.")\n \n     def _purgeDiffToolSettings(self):\n         self.context.manage_editDiffFields({})\n \n     def _initDiffToolSettings(self, node):\n         for child in node.childNodes:\n-            if child.nodeName == \'difftypes\':\n-                for type_entry in child.getElementsByTagName(\'type\'):\n-                    ptype = type_entry.getAttribute(\'portal_type\')\n+            if child.nodeName == "difftypes":\n+                for type_entry in child.getElementsByTagName("type"):\n+                    ptype = type_entry.getAttribute("portal_type")\n                     fields = {}\n-                    for field in type_entry.getElementsByTagName(\'field\'):\n-                        name = field.getAttribute(\'name\')\n-                        diff = field.getAttribute(\'difftype\')\n+                    for field in type_entry.getElementsByTagName("field"):\n+                        name = field.getAttribute("name")\n+                        diff = field.getAttribute("difftype")\n                         fields[name] = diff\n                         self.context.setDiffForPortalType(ptype, fields)\n \n     def _extractDiffToolSettings(self):\n-        node = self._doc.createElement(\'difftypes\')\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        node = self._doc.createElement("difftypes")\n+        ttool = getToolByName(self.context, "portal_types")\n         for ptype in ttool.listContentTypes():\n             diffs = self.context.getDiffForPortalType(ptype)\n             if diffs:\n-                child = self._doc.createElement(\'type\')\n-                child.setAttribute(\'portal_type\', ptype)\n+                child = self._doc.createElement("type")\n+                child.setAttribute("portal_type", ptype)\n                 node.appendChild(child)\n             for field_name, diff in diffs.items():\n-                field = self._doc.createElement(\'field\')\n-                field.setAttribute(\'name\', field_name)\n-                field.setAttribute(\'difftype\', diff)\n+                field = self._doc.createElement("field")\n+                field.setAttribute("name", field_name)\n+                field.setAttribute("difftype", diff)\n                 child.appendChild(field)\n         return node\n \n \n def importDiffTool(context):\n-    \'\'\'Import Factory Tool configuration.\n-    \'\'\'\n+    """Import Factory Tool configuration."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_diff\', None)\n+    tool = getToolByName(site, "portal_diff", None)\n \n     if tool is not None:\n-        importObjects(tool, \'\', context)\n+        importObjects(tool, "", context)\n \n \n def exportDiffTool(context):\n-    \'\'\'Export Factory Tool configuration.\n-    \'\'\'\n+    """Export Factory Tool configuration."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_diff\', None)\n+    tool = getToolByName(site, "portal_diff", None)\n     if tool is None:\n-        logger = context.getLogger(\'difftool\')\n-        logger.info(\'Nothing to export.\')\n+        logger = context.getLogger("difftool")\n+        logger.info("Nothing to export.")\n         return\n \n-    exportObjects(tool, \'\', context)\n+    exportObjects(tool, "", context)\ndiff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex c8a1f5b..a799da8 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -5,9 +5,9 @@\n \n class IDiffTool(Interface):\n     """An interface to compute object differences via pluggable\n-       difference engine"""\n+    difference engine"""\n \n-    id = Attribute(\'id\', \'Must be set to "portal_diff"\')\n+    id = Attribute("id", \'Must be set to "portal_diff"\')\n \n     def listDiffTypes():\n         """List the names of the available difference types"""\n@@ -40,17 +40,21 @@ class IDifference(Interface):\n     """An interface for interacting with the difference between two\n     objects"""\n \n-    meta_type = Attribute(\'title\', \'A human readable name for the diff type\')\n-    field = Attribute(\'field\', \'The name of the field being compared\')\n-    same = Attribute(\'same\',\n-                     \'True if the fields are the "same" \'\n-                     \'(whatever that means for this difference)\')\n-    oldValue = Attribute(\'oldValue\', \'The old field value being compared\')\n-    newValue = Attribute(\'newValue\', \'The new field value being compared\')\n-    oldFilename = Attribute(\'oldFilename\',\n-                            \'The old filename for the field being compared\')\n-    newFilename = Attribute(\'newFilename\',\n-                            \'The new filename for the field being compared\')\n+    meta_type = Attribute("title", "A human readable name for the diff type")\n+    field = Attribute("field", "The name of the field being compared")\n+    same = Attribute(\n+        "same",\n+        \'True if the fields are the "same" \'\n+        "(whatever that means for this difference)",\n+    )\n+    oldValue = Attribute("oldValue", "The old field value being compared")\n+    newValue = Attribute("newValue", "The new field value being compared")\n+    oldFilename = Attribute(\n+        "oldFilename", "The old filename for the field being compared"\n+    )\n+    newFilename = Attribute(\n+        "newFilename", "The new filename for the field being compared"\n+    )\n \n     def testChanges(ob):\n         """Test the specified object to determine if the change set will apply cleanly.\n@@ -62,8 +66,7 @@ def applyChanges(ob):\n         """Update the specified object with the difference"""\n \n     def filenameTitle(self, filename):\n-        """Translate the filename leading text\n-        """\n+        """Translate the filename leading text"""\n \n \n class IStringDifference(IDifference):\n@@ -83,7 +86,7 @@ def getLineDiffs():\n class IChangeSet(Interface):\n     """And interface representing all of the differences between two objects"""\n \n-    same = Attribute(\'same\', \'True if the fields are the "same"\')\n+    same = Attribute("same", \'True if the fields are the "same"\')\n \n     def computeDiff(ob1, ob2, recursive=1, exclude=None):\n         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).\n@@ -111,11 +114,11 @@ def getDiffs():\n \n     def getSubDiffs():\n         """If the ChangeSet was computed recursively, returns a list\n-           of ChangeSet objects representing subobject differences\n+        of ChangeSet objects representing subobject differences\n \n-           Each ChangeSet will have the same ID as the objects whose\n-           difference it represents.\n-           """\n+        Each ChangeSet will have the same ID as the objects whose\n+        difference it represents.\n+        """\n \n     def getAddedItems():\n         """If the ChangeSet was computed recursively, returns the list\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex dc2d82c..107e71f 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -21,13 +21,12 @@ def htmlEncode(s, esc=escape):\n     return esc(s, 1)\n \n \n-commentRE = re.compile(r\'<!--.*?-->\', re.S)\n-tagRE = re.compile(r\'<.*?>\', re.S)\n-headRE = re.compile(r\'<\\s*head\\s*>\', re.S | re.I)\n+commentRE = re.compile(r"<!--.*?-->", re.S)\n+tagRE = re.compile(r"<.*?>", re.S)\n+headRE = re.compile(r"<\\s*head\\s*>", re.S | re.I)\n \n \n class HTMLMatcher(SequenceMatcher):\n-\n     def __init__(self, source1, source2):\n         SequenceMatcher.__init__(self, None, source1, source2)\n \n@@ -45,7 +44,7 @@ def splitTags(self, t):\n             if not match:\n                 result.append(t[pos:])\n                 break\n-            result.append(t[pos:match.start()])\n+            result.append(t[pos : match.start()])\n             result.append(match.group(0))\n             pos = match.end()\n         return result\n@@ -54,11 +53,11 @@ def splitWords(self, t):\n         return t.strip().split()\n \n     def splitHTML(self, t):\n-        t = commentRE.sub(\'\', t)\n+        t = commentRE.sub("", t)\n         r = self.splitTags(t)\n         result = []\n         for item in r:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 result.append(item)\n             else:\n                 result.extend(self.splitWords(item))\n@@ -71,13 +70,13 @@ def htmlDiff(self, addStylesheet=False):\n         out = StringIO()\n         #  print [o[0] for o in opcodes]\n         for tag, i1, i2, j1, j2 in opcodes:\n-            if tag == \'equal\':\n+            if tag == "equal":\n                 for item in a[i1:i2]:\n                     out.write(item)\n-                    out.write(\' \')\n-            if tag == \'delete\' or tag == \'replace\':\n+                    out.write(" ")\n+            if tag == "delete" or tag == "replace":\n                 self.textDelete(a[i1:i2], out)\n-            if tag == \'insert\' or tag == \'replace\':\n+            if tag == "insert" or tag == "replace":\n                 self.textInsert(b[j1:j2], out)\n         html = out.getvalue()\n         out.close()\n@@ -88,7 +87,7 @@ def htmlDiff(self, addStylesheet=False):\n     def textDelete(self, lst, out):\n         inSpan = False\n         for item in lst:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 if inSpan:\n                     out.write(self.endDeleteText())\n                     inSpan = False\n@@ -98,36 +97,36 @@ def textDelete(self, lst, out):\n                     out.write(self.startDeleteText())\n                     inSpan = True\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n         if inSpan:\n             out.write(self.endDeleteText())\n \n     def textInsert(self, lst, out):\n         inSpan = False\n         for item in lst:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 if inSpan:\n                     out.write(self.endInsertText())\n                     inSpan = False\n                 out.write(self.formatInsertTag(item))\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n             else:\n                 if not inSpan:\n                     out.write(self.startInsertText())\n                     inSpan = True\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n         if inSpan:\n             out.write(self.endInsertText())\n \n     def stylesheet(self):\n-        return \'\'\'\n+        return """\n .insert { background-color: #aaffaa }\n .delete { background-color: #ff8888 }\n .tagInsert { background-color: #007700; color: #ffffff }\n .tagDelete { background-color: #770000; color: #ffffff }\n-\'\'\'\n+"""\n \n     def addStylesheet(self, html, ss):\n         match = headRE.search(html)\n@@ -135,36 +134,35 @@ def addStylesheet(self, html, ss):\n             pos = match.end()\n         else:\n             pos = 0\n-        return (\'{}<style type="text/css"><!--\\n{}\\n--></style>{}\'.format(\n-            html[:pos], ss, html[pos:]))\n+        return \'{}<style type="text/css"><!--\\n{}\\n--></style>{}\'.format(\n+            html[:pos], ss, html[pos:]\n+        )\n \n     def startInsertText(self):\n         return \'<span class="insert">\'\n \n     def endInsertText(self):\n-        return \'</span> \'\n+        return "</span> "\n \n     def startDeleteText(self):\n         return \'<span class="delete">\'\n \n     def endDeleteText(self):\n-        return \'</span> \'\n+        return "</span> "\n \n     def formatInsertTag(self, tag):\n-        return (\'<span class="tagInsert">insert: <tt>%s</tt></span> \' %\n-                htmlEncode(tag))\n+        return \'<span class="tagInsert">insert: <tt>%s</tt></span> \' % htmlEncode(tag)\n \n     def formatDeleteTag(self, tag):\n-        return (\'<span class="tagDelete">delete: <tt>%s</tt></span> \' %\n-                htmlEncode(tag))\n+        return \'<span class="tagDelete">delete: <tt>%s</tt></span> \' % htmlEncode(tag)\n \n \n class NoTagHTMLMatcher(HTMLMatcher):\n     def formatInsertTag(self, tag):\n-        return \'\'\n+        return ""\n \n     def formatDeleteTag(self, tag):\n-        return \'\'\n+        return ""\n \n \n def htmldiff(source1, source2, addStylesheet=False):\n@@ -194,22 +192,22 @@ class SimpleHTMLMatcher(HTMLMatcher):\n     """\n \n     def startInsertText(self):\n-        return \'+[\'\n+        return "+["\n \n     def endInsertText(self):\n-        return \']\'\n+        return "]"\n \n     def startDeleteText(self):\n-        return \'-[\'\n+        return "-["\n \n     def endDeleteText(self):\n-        return \']\'\n+        return "]"\n \n     def formatInsertTag(self, tag):\n-        return \'+[%s]\' % tag\n+        return "+[%s]" % tag\n \n     def formatDeleteTag(self, tag):\n-        return \'-[%s]\' % tag\n+        return "-[%s]" % tag\n \n \n def simplehtmldiff(source1, source2):\n@@ -226,12 +224,11 @@ def simplehtmldiff(source1, source2):\n \n \n class TextMatcher(HTMLMatcher):\n-\n     def set_seq1(self, a):\n-        SequenceMatcher.set_seq1(self, a.split(\'\\n\'))\n+        SequenceMatcher.set_seq1(self, a.split("\\n"))\n \n     def set_seq2(self, b):\n-        SequenceMatcher.set_seq2(self, b.split(\'\\n\'))\n+        SequenceMatcher.set_seq2(self, b.split("\\n"))\n \n     def htmlDiff(self, addStylesheet=False):\n         opcodes = self.get_opcodes()\n@@ -239,13 +236,13 @@ def htmlDiff(self, addStylesheet=False):\n         b = self.b\n         out = StringIO()\n         for tag, i1, i2, j1, j2 in opcodes:\n-            if tag == \'equal\':\n+            if tag == "equal":\n                 self.writeLines(a[i1:i2], out)\n-            if tag == \'delete\' or tag == \'replace\':\n+            if tag == "delete" or tag == "replace":\n                 out.write(self.startDeleteText())\n                 self.writeLines(a[i1:i2], out)\n                 out.write(self.endDeleteText())\n-            if tag == \'insert\' or tag == \'replace\':\n+            if tag == "insert" or tag == "replace":\n                 out.write(self.startInsertText())\n                 self.writeLines(b[j1:j2], out)\n                 out.write(self.endInsertText())\n@@ -258,20 +255,22 @@ def htmlDiff(self, addStylesheet=False):\n     def writeLines(self, lines, out):\n         for line in lines:\n             line = htmlEncode(line)\n-            line = line.replace(\'  \', \'&nbsp; \')\n-            line = line.replace(\'\\t\', \'&nbsp; &nbsp; &nbsp; &nbsp; \')\n-            if line.startswith(\' \'):\n-                line = \'&nbsp;\' + line[1:]\n-            out.write(\'<tt>%s</tt><br>\\n\' % line)\n+            line = line.replace("  ", "&nbsp; ")\n+            line = line.replace("\\t", "&nbsp; &nbsp; &nbsp; &nbsp; ")\n+            if line.startswith(" "):\n+                line = "&nbsp;" + line[1:]\n+            out.write("<tt>%s</tt><br>\\n" % line)\n \n \n-if __name__ == \'__main__\':\n+if __name__ == "__main__":\n     import sys\n+\n     if not sys.argv[1:]:\n-        print(\'Usage: %s file1 file2\' % sys.argv[0])  # NOQA\n-        print(\'or to test: %s test\' % sys.argv[0])  # NOQA\n-    elif sys.argv[1] == \'test\' and not sys.argv[2:]:\n+        print("Usage: %s file1 file2" % sys.argv[0])  # NOQA\n+        print("or to test: %s test" % sys.argv[0])  # NOQA\n+    elif sys.argv[1] == "test" and not sys.argv[2:]:\n         import doctest\n+\n         doctest.testmod()\n     else:\n         print(diffFiles(sys.argv[1], sys.argv[2]))  # NOQA\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex 722938f..1d1c0ef 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -10,9 +10,10 @@\n \n try:\n     from plone.namedfile import field\n+\n     FILE_FIELD_TYPES.extend([field.NamedFile, field.NamedImage])\n \n-    if getattr(field, \'HAVE_BLOBS\', True):\n+    if getattr(field, "HAVE_BLOBS", True):\n         FILE_FIELD_TYPES.extend([field.NamedBlobFile, field.NamedBlobImage])\n except ImportError:\n     pass\n@@ -21,7 +22,7 @@\n \n \n def named_file_as_str(f):\n-    return \'\' if f is None else \'%s (%d bytes)\' % (f.filename, len(f.data))\n+    return "" if f is None else "%s (%d bytes)" % (f.filename, len(f.data))\n \n \n def is_same(old_data, old_filename, new_data, new_filename):\n@@ -35,42 +36,55 @@ def is_same(old_data, old_filename, new_data, new_filename):\n \n \n class NamedFileBinaryDiff(BinaryDiff):\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n         self.field = field\n         self.label = field_label or field\n-        self.schemata = schemata or \'default\'\n+        self.schemata = schemata or "default"\n         self.field_name = field_name or field\n \n         old_field = getattr(obj1, field)\n         new_field = getattr(obj2, field)\n \n-        self.oldValue = getattr(old_field, \'data\', None)\n-        self.newValue = getattr(new_field, \'data\', None)\n+        self.oldValue = getattr(old_field, "data", None)\n+        self.newValue = getattr(new_field, "data", None)\n \n-        self.id1 = id1 or getattr(obj1, \'getId\', lambda: None)()\n-        self.id2 = id2 or getattr(obj2, \'getId\', lambda: None)()\n+        self.id1 = id1 or getattr(obj1, "getId", lambda: None)()\n+        self.id2 = id2 or getattr(obj2, "getId", lambda: None)()\n \n-        self.oldFilename = getattr(old_field, \'filename\', None)\n-        self.newFilename = getattr(new_field, \'filename\', None)\n+        self.oldFilename = getattr(old_field, "filename", None)\n+        self.newFilename = getattr(new_field, "filename", None)\n \n         self.same = is_same(\n-            self.oldValue, self.oldFilename, self.newValue, self.newFilename)\n+            self.oldValue, self.oldFilename, self.newValue, self.newFilename\n+        )\n \n     def _parseField(self, value, filename=None):\n         return [\n-            \'\' if (value is None)\n+            ""\n+            if (value is None)\n             else named_file_as_str(NamedFile(data=value, filename=filename)),\n         ]\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n+        return (\n+            ""\n+            if self.same\n+            else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n+        )\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -89,10 +103,20 @@ class NamedFileListDiff(ListDiff):\n     same_fmt = """<div class="%s">%s</div>"""\n     inlinediff_fmt = TextDiff.inlinediff_fmt\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        ListDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                          field_label, schemata)\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        ListDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         old_values = list(self.oldValue or [])\n         new_values = list(self.newValue or [])\n \n@@ -100,7 +124,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n         if len(old_values) != len(new_values):\n             self.same = False\n         else:\n-            for (old, new) in zip(old_values, new_values):\n+            for old, new in zip(old_values, new_values):\n                 if not is_same(old.data, old.filename, new.data, new.filename):\n                     self.same = False\n                     break\n@@ -113,33 +137,46 @@ def inline_diff(self):\n         if self.same:\n             return None\n \n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n \n         old_reprs = self._parseField(self.oldValue, None)\n         new_reprs = self._parseField(self.newValue, None)\n \n         old_data = [\n-            {\'repr\': repr, \'data\': value.data, \'filename\': value.filename}\n+            {"repr": repr, "data": value.data, "filename": value.filename}\n             for (repr, value) in zip(old_reprs, self.oldValue or [])\n         ]\n         new_data = [\n-            {\'repr\': repr, \'data\': value.data, \'filename\': value.filename}\n+            {"repr": repr, "data": value.data, "filename": value.filename}\n             for (repr, value) in zip(new_reprs, self.newValue or [])\n         ]\n \n-        dummy_dict = {\'repr\': \'\', \'data\': None, \'filename\': None}\n+        dummy_dict = {"repr": "", "data": None, "filename": None}\n         make_lists_same_length(old_data, new_data, dummy_dict)\n \n         def is_same_dict(d1, d2):\n             return is_same(\n-                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\'],\n+                d1["data"],\n+                d1["filename"],\n+                d2["data"],\n+                d2["filename"],\n             )\n \n-        return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, html_escape(d_old[\'repr\'])))\n-             if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, html_escape(d_old[\'repr\']), html_escape(d_new[\'repr\']))\n-             ) for (d_old, d_new) in zip(old_data, new_data)])\n+        return "\\n".join(\n+            [\n+                (\n+                    (self.same_fmt % (css_class, html_escape(d_old["repr"])))\n+                    if is_same_dict(d_old, d_new)\n+                    else self.inlinediff_fmt\n+                    % (\n+                        css_class,\n+                        html_escape(d_old["repr"]),\n+                        html_escape(d_new["repr"]),\n+                    )\n+                )\n+                for (d_old, d_new) in zip(old_data, new_data)\n+            ]\n+        )\n \n \n InitializeClass(NamedFileListDiff)\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 7c8a7a4..5bc5c58 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -9,16 +9,17 @@\n from zope.schema.vocabulary import SimpleVocabulary\n \n \n-TEST_CONTENT_TYPE_ID = \'TestContentType\'\n+TEST_CONTENT_TYPE_ID = "TestContentType"\n \n VOCABULARY_TUPLES = [\n-    (\'first_value\', \'First Title\'),\n-    (\'second_value\', None),\n-    (\'third_value\', \'Third Title\'),\n+    ("first_value", "First Title"),\n+    ("second_value", None),\n+    ("third_value", "Third Title"),\n ]\n \n VOCABULARY = SimpleVocabulary(\n-    [SimpleTerm(value=v, title=t) for (v, t) in VOCABULARY_TUPLES])\n+    [SimpleTerm(value=v, title=t) for (v, t) in VOCABULARY_TUPLES]\n+)\n \n \n def vocabulary_factory(context):\n@@ -26,21 +27,20 @@ def vocabulary_factory(context):\n \n \n class DXLayer(PloneSandboxLayer):\n-\n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        \'\'\'Set up additional products and ZCML required to test\n+        """Set up additional products and ZCML required to test\n         this product.\n-        \'\'\'\n+        """\n         # setup dexterity\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        types_tool = getToolByName(portal, "portal_types")\n \n         sm = getSiteManager(portal)\n         sm.registerUtility(\n             component=vocabulary_factory,\n             provided=IVocabularyFactory,\n-            name=\'Products.CMFDiffTool.testing.VOCABULARY\',\n+            name="Products.CMFDiffTool.testing.VOCABULARY",\n         )\n \n         fti = DexterityFTI(\n@@ -48,12 +48,12 @@ def setUpPloneSite(self, portal):\n             factory=TEST_CONTENT_TYPE_ID,\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.relationfield.behavior.IRelatedItems\',\n-                \'plone.app.contenttypes.behaviors.collection.ICollection\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.relationfield.behavior.IRelatedItems",\n+                "plone.app.contenttypes.behaviors.collection.ICollection",\n             ),\n-            model_source=\'\'\'\n+            model_source="""\n             <model xmlns=\'http://namespaces.plone.org/supermodel/schema\'>\n                 <schema>\n                     <field name=\'text\' type=\'zope.schema.Text\'>\n@@ -89,7 +89,7 @@ def setUpPloneSite(self, portal):\n                     </field>\n                 </schema>\n             </model>\n-            \'\'\',\n+            """,\n         )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n@@ -97,4 +97,5 @@ def setUpPloneSite(self, portal):\n PACKAGE_DX_FIXTURE = DXLayer()\n \n CMFDiffToolDXLayer = FunctionalTesting(\n-    bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\n+    bases=(PACKAGE_DX_FIXTURE,), name="Products.CMFDiffTool.DX:functional"\n+)\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 5fa3d40..51c1763 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -4,12 +4,13 @@\n \n \n class BaseDXTestCase(unittest.TestCase):\n-    """ A base testing class for CMFDiffTool\n+    """A base testing class for CMFDiffTool\n \n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n+    It includes a layer which installes the product\n+    and some testing dependencies in a Plone site.\n     """\n+\n     layer = CMFDiffToolDXLayer\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex 7e09a88..af65fa8 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -3,7 +3,9 @@\n #\n from Acquisition import aq_base\n from os import linesep\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n+)  # NOQA\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.base.utils import safe_hasattr\n@@ -19,57 +21,52 @@ class TestChangeSet(TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.folder = self.portal\n-        self.p_diff = getToolByName(self.portal, \'portal_diff\')\n-        cs = BaseChangeSet(\'my_changeset\')\n+        self.p_diff = getToolByName(self.portal, "portal_diff")\n+        cs = BaseChangeSet("my_changeset")\n         # ChangeSet needs an acquisition wrapper\n         self.cs = cs.__of__(self.portal)\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces import IChangeSet\n+\n         self.assertTrue(IChangeSet.implementedBy(BaseChangeSet))\n \n     def setupTestObjects(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'My Title\')\n-        self.folder.manage_pasteObjects(\n-            self.folder.manage_copyObjects([\'doc1\']))\n-        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'],\n-                                    \'\')\n+        self.folder.invokeFactory("Document", "doc1", title="My Title")\n+        self.folder.manage_pasteObjects(self.folder.manage_copyObjects(["doc1"]))\n+        cdd = DexterityCompoundDiff(self.folder["doc1"], self.folder["doc1"], "")\n         self.len_diff = len(cdd._diffs)\n \n     def setupTestFolders(self):\n-        self.folder.invokeFactory(\'Folder\', \'folder1\', title=\'My Folder Title\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc1\',\n-                                          title=\'My Title1\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc2\',\n-                                          title=\'My Title2\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc3\',\n-                                          title=\'My Title3\')\n-        self.folder.manage_pasteObjects(\n-            self.folder.manage_copyObjects([\'folder1\']))\n+        self.folder.invokeFactory("Folder", "folder1", title="My Folder Title")\n+        self.folder.folder1.invokeFactory("Document", "doc1", title="My Title1")\n+        self.folder.folder1.invokeFactory("Document", "doc2", title="My Title2")\n+        self.folder.folder1.invokeFactory("Document", "doc3", title="My Title3")\n+        self.folder.manage_pasteObjects(self.folder.manage_copyObjects(["folder1"]))\n         cdd = DexterityCompoundDiff(\n-            self.folder[\'folder1\'][\'doc1\'], self.folder[\'folder1\'][\'doc1\'], \'\')\n+            self.folder["folder1"]["doc1"], self.folder["folder1"]["doc1"], ""\n+        )\n         self.len_diff = len(cdd._diffs)\n \n     def testChangeSetUnchanged(self):\n         self.setupTestObjects()\n-        self.cs.computeDiff(self.folder[\'doc1\'], self.folder[\'copy_of_doc1\'])\n+        self.cs.computeDiff(self.folder["doc1"], self.folder["copy_of_doc1"])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), self.len_diff)\n         self.assertTrue(diffs[0].same)\n \n     def testChangeSetChanged(self):\n         self.setupTestObjects()\n-        self.folder.copy_of_doc1.setTitle(\'My New Title\')\n+        self.folder.copy_of_doc1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), self.len_diff)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Title%s+ My New Title\' % linesep)\n+        self.assertEqual(diffs[0].ndiff(), "- My Title%s+ My New Title" % linesep)\n \n     def testChangeSetFolderUnchanged(self):\n         self.setupTestFolders()\n@@ -89,13 +86,14 @@ def testChangeSetFolderUnchanged(self):\n \n     def testChangeSetFolderChanged(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Folder Title%s+ My New Title\' % linesep)\n+        self.assertEqual(\n+            diffs[0].ndiff(), "- My Folder Title%s+ My New Title" % linesep\n+        )\n         self.assertFalse(self.cs._added)\n         self.assertFalse(self.cs._removed)\n         sub_cs = self.cs.getSubDiffs()\n@@ -109,7 +107,7 @@ def testChangeSetFolderChanged(self):\n \n     def testChangeSetFolderDocChanged(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.doc1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.doc1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -124,16 +122,17 @@ def testChangeSetFolderDocChanged(self):\n             sub_diffs = sub_cs[i].getDiffs()\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             # doc1 has changed\n-            if sub_cs[i].getId() == \'doc1\':\n+            if sub_cs[i].getId() == "doc1":\n                 self.assertFalse(sub_diffs[0].same)\n-                self.assertEqual(sub_diffs[0].ndiff(),\n-                                 \'- My Title1%s+ My New Title\' % linesep)\n+                self.assertEqual(\n+                    sub_diffs[0].ndiff(), "- My Title1%s+ My New Title" % linesep\n+                )\n             else:\n                 self.assertTrue(sub_diffs[0].same)\n \n     def testChangeSetFolderDocRemoved(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.manage_delObjects(\'doc1\')\n+        self.folder.copy_of_folder1.manage_delObjects("doc1")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -149,12 +148,13 @@ def testChangeSetFolderDocRemoved(self):\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             self.assertTrue(sub_diffs[0].same)\n         self.assertFalse(self.cs._added)\n-        self.assertEqual(list(self.cs._removed), [\'doc1\'])\n+        self.assertEqual(list(self.cs._removed), ["doc1"])\n \n     def testChangeSetFolderDocAdded(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.invokeFactory(\'Document\', \'doc4\',\n-                                                  title=\'My Doc Title\')\n+        self.folder.copy_of_folder1.invokeFactory(\n+            "Document", "doc4", title="My Doc Title"\n+        )\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -169,16 +169,14 @@ def testChangeSetFolderDocAdded(self):\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             self.assertTrue(sub_diffs[0].same)\n         self.assertFalse(self.cs._removed)\n-        self.assertEqual(list(self.cs._added), [\'doc4\'])\n+        self.assertEqual(list(self.cs._added), ["doc4"])\n \n     def testChangeSetFolderReordered(self):\n         self.setupTestFolders()\n-        if safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                        \'moveObjectsToTop\'):\n-            self.folder.copy_of_folder1.moveObjectsToTop([\'doc3\'])\n-        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                          \'moveObjectsByDelta\'):\n-            self.folder.copy_of_folder1.moveObjectsByDelta([\'doc3\'], -3)\n+        if safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsToTop"):\n+            self.folder.copy_of_folder1.moveObjectsToTop(["doc3"])\n+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsByDelta"):\n+            self.folder.copy_of_folder1.moveObjectsByDelta(["doc3"], -3)\n         else:\n             # We don\'t have an orderable folder give up\n             return\n@@ -201,34 +199,33 @@ def testChangeSetFolderReordered(self):\n     def testChangeSetFolderComplex(self):\n         self.setupTestFolders()\n         # Add a new sub object\n-        self.folder.copy_of_folder1.invokeFactory(\'Document\', \'doc4\',\n-                                                  title=\'My Doc Title\')\n+        self.folder.copy_of_folder1.invokeFactory(\n+            "Document", "doc4", title="My Doc Title"\n+        )\n         # Delete a sub object\n-        self.folder.copy_of_folder1.manage_delObjects(\'doc2\')\n+        self.folder.copy_of_folder1.manage_delObjects("doc2")\n         # Change one object\n-        self.folder.copy_of_folder1.doc3.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.doc3.setTitle("My New Title")\n         # Change the folder itself\n-        self.folder.copy_of_folder1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.setTitle("My New Title")\n         # Move the changed object\n-        if safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                        \'moveObjectsToTop\'):\n-            self.folder.copy_of_folder1.moveObjectsToTop([\'doc3\'])\n-        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                          \'moveObjectsByDelta\'):\n-            self.folder.copy_of_folder1.moveObjectsByDelta([\'doc3\'], -3)\n+        if safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsToTop"):\n+            self.folder.copy_of_folder1.moveObjectsToTop(["doc3"])\n+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsByDelta"):\n+            self.folder.copy_of_folder1.moveObjectsByDelta(["doc3"], -3)\n         else:\n             # We don\'t have an orderable folder give up\n             return\n \n-        self.cs.computeDiff(self.folder[\'folder1\'],\n-                            self.folder[\'copy_of_folder1\'])\n+        self.cs.computeDiff(self.folder["folder1"], self.folder["copy_of_folder1"])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Folder Title%s+ My New Title\' % linesep)\n-        self.assertEqual(list(self.cs._added), [\'doc4\'])\n-        self.assertEqual(list(self.cs._removed), [\'doc2\'])\n+        self.assertEqual(\n+            diffs[0].ndiff(), "- My Folder Title%s+ My New Title" % linesep\n+        )\n+        self.assertEqual(list(self.cs._added), ["doc4"])\n+        self.assertEqual(list(self.cs._removed), ["doc2"])\n         sub_cs = self.cs.getSubDiffs()\n         # We only have two potentially changed objects\n         self.assertEqual(len(sub_cs), 2)\n@@ -237,10 +234,11 @@ def testChangeSetFolderComplex(self):\n             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))\n             sub_diffs = sub_cs[i].getDiffs()\n             self.assertEqual(len(sub_diffs), self.len_diff)\n-            if sub_cs[i].getId() == \'doc3\':\n+            if sub_cs[i].getId() == "doc3":\n                 self.assertFalse(sub_diffs[0].same)\n-                self.assertEqual(sub_diffs[0].ndiff(),\n-                                 \'- My Title3%s+ My New Title\' % linesep)\n+                self.assertEqual(\n+                    sub_diffs[0].ndiff(), "- My Title3%s+ My New Title" % linesep\n+                )\n             else:\n                 self.assertTrue(sub_diffs[1].same)\n         # XXX we need an explicit way of noting reorders\ndiff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py\nindex 4c09d50..8d664d6 100644\n--- a/Products/CMFDiffTool/tests/testDiffTool.py\n+++ b/Products/CMFDiffTool/tests/testDiffTool.py\n@@ -11,11 +11,11 @@\n \n \n class DummyDiff:\n-    meta_type = \'Dummy Diff Type\'\n+    meta_type = "Dummy Diff Type"\n \n \n class DummyDiff2:\n-    meta_type = \'Second Dummy Diff Type\'\n+    meta_type = "Second Dummy Diff Type"\n \n \n class TestDiffTool(TestCase):\n@@ -24,83 +24,88 @@ class TestDiffTool(TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.p_diff = getToolByName(self.layer[\'portal\'], \'portal_diff\')\n+        self.p_diff = getToolByName(self.layer["portal"], "portal_diff")\n         # clear pt_diff registry\n         self.p_diff._pt_diffs = {}\n \n         # patch portal_types to list `Document` in the listContentTypes\n         # a plausability check is done in the `setDiffForPortalType` method\n         # but we have no content registry\n-        portal_types = getToolByName(self.layer[\'portal\'], \'portal_types\')\n+        portal_types = getToolByName(self.layer["portal"], "portal_types")\n         self._old_listContentTypes = portal_types.listContentTypes\n-        portal_types.listContentTypes = lambda: [\'Document\']\n+        portal_types.listContentTypes = lambda: ["Document"]\n         registerDiffType(DummyDiff)\n \n     def tearDown(self):\n-        portal_types = getToolByName(self.layer[\'portal\'], \'portal_types\')\n+        portal_types = getToolByName(self.layer["portal"], "portal_types")\n         portal_types.listContentTypes = self._old_listContentTypes\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces.portal_diff import portal_diff\n+\n         self.assertTrue(portal_diff.providedBy(self.p_diff))\n \n     def testRegisterDiffType(self):\n         """Test registration of Diff types"""\n         unregisterDiffType(DummyDiff)\n-        self.assertNotIn(\'Dummy Diff Type\', self.p_diff.listDiffTypes())\n+        self.assertNotIn("Dummy Diff Type", self.p_diff.listDiffTypes())\n         registerDiffType(DummyDiff)\n-        self.assertIn(\'Dummy Diff Type\', self.p_diff.listDiffTypes())\n+        self.assertIn("Dummy Diff Type", self.p_diff.listDiffTypes())\n \n     def testSetDiff(self):\n         """Test setDiffForPortalType() method"""\n-        d = {\'field1\': \'TestDiff\', \'field2\': \'Dummy Diff Type\'}\n-        self.p_diff.setDiffForPortalType(\'Document\', d)\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        d = {"field1": "TestDiff", "field2": "Dummy Diff Type"}\n+        self.p_diff.setDiffForPortalType("Document", d)\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n \n     def testSetDiffReplaces(self):\n         """Test that setDiffForPortalType() replaces old data"""\n-        d1 = {\'field1\': \'TestDiff\', \'field2\': \'Dummy Diff Type\'}\n-        d2 = {\'field3\': \'Dummy Diff Type\'}\n-        self.p_diff.setDiffForPortalType(\'Document\', d1)\n-        self.p_diff.setDiffForPortalType(\'Document\', d2)\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d2)\n+        d1 = {"field1": "TestDiff", "field2": "Dummy Diff Type"}\n+        d2 = {"field3": "Dummy Diff Type"}\n+        self.p_diff.setDiffForPortalType("Document", d1)\n+        self.p_diff.setDiffForPortalType("Document", d2)\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d2)\n \n     def testSingleSetDiffField(self):\n         """Test setDiffField method"""\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'),\n-                         {\'title\': \'Dummy Diff Type\'})\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.assertEqual(\n+            self.p_diff.getDiffForPortalType("Document"), {"title": "Dummy Diff Type"}\n+        )\n \n     def testMultipleSetDiffField(self):\n         """\n         Test setDiffField method adding a second field to one content type\n         """\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.p_diff.setDiffField(\'Document\', \'description\', \'Dummy Diff Type\')\n-        d = {\'title\': \'Dummy Diff Type\', \'description\': \'Dummy Diff Type\'}\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.p_diff.setDiffField("Document", "description", "Dummy Diff Type")\n+        d = {"title": "Dummy Diff Type", "description": "Dummy Diff Type"}\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n \n     def testReplaceSetDiffField(self):\n         """Test that setDiffField does a replace for existing fields"""\n         registerDiffType(DummyDiff2)\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Second Dummy Diff Type\')\n-        d = {\'title\': \'Second Dummy Diff Type\'}\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.p_diff.setDiffField("Document", "title", "Second Dummy Diff Type")\n+        d = {"title": "Second Dummy Diff Type"}\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n         unregisterDiffType(DummyDiff2)\n \n     def testSetDiffFieldNameFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Bob\', \'title\', \'Dummy Diff Type\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Bob", "title", "Dummy Diff Type"\n+        )\n \n     def testSetDiffFieldBlankFieldFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Document\', \'\', \'Dummy Diff Type\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Document", "", "Dummy Diff Type"\n+        )\n \n     def testSetDiffFieldInvalidDiffFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Document\', \'title\', \'NoDiff\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Document", "title", "NoDiff"\n+        )\n \n     def beforeTearDown(self):\n         # Undo changes that don\'t get rolled back (i.e. module level changes)\ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex f48a946..0a36e0a 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -12,24 +12,24 @@\n \n \n class A:\n-    attribute = \'value\'\n+    attribute = "value"\n \n     def method(self):\n-        return \'method value\'\n+        return "method value"\n \n \n class B:\n-    attribute = \'different value\'\n+    attribute = "different value"\n \n     def method(self):\n-        return \'different method value\'\n+        return "different method value"\n \n \n class U:\n-    attribute = \'\\xfcnicode value\'\n+    attribute = "\\xfcnicode value"\n \n     def method(self):\n-        return \'different method val\\xfce\'\n+        return "different method val\\xfce"\n \n \n class H:\n@@ -47,24 +47,25 @@ class TestFieldDiff(TestCase):\n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n+\n         self.assertTrue(IDifference.implementedBy(FieldDiff))\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n+        fd = FieldDiff(a, a, "attribute")\n         self.assertTrue(fd.same)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n+        fd = FieldDiff(uu, uu, "attribute")\n         self.assertTrue(fd.same)\n \n     def testMethodSame(self):\n         """Test method with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'method\')\n+        fd = FieldDiff(a, a, "method")\n         self.assertTrue(fd.same)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'method\')\n+        fd = FieldDiff(uu, uu, "method")\n         self.assertTrue(fd.same)\n \n     def testAttributeDiff(self):\n@@ -72,9 +73,9 @@ def testAttributeDiff(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'attribute\')\n+        fd = FieldDiff(a, b, "attribute")\n         self.assertFalse(fd.same)\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertFalse(fd.same)\n \n     def testMethodDiff(self):\n@@ -82,20 +83,20 @@ def testMethodDiff(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'method\')\n+        fd = FieldDiff(a, b, "method")\n         self.assertFalse(fd.same)\n-        fd = FieldDiff(a, uu, \'method\')\n+        fd = FieldDiff(a, uu, "method")\n         self.assertFalse(fd.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, a, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = FieldDiff(uu, uu, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n@@ -103,72 +104,72 @@ def testGetLineDiffsDifferent(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, b, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n-        fd = FieldDiff(a, uu, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, uu, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n-        self.assertEqual(fd.ndiff(), \'  value\')\n+        fd = FieldDiff(a, a, "attribute")\n+        self.assertEqual(fd.ndiff(), "  value")\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n-        self.assertEqual(fd.ndiff(), \'  \\xfcnicode value\')\n+        fd = FieldDiff(uu, uu, "attribute")\n+        self.assertEqual(fd.ndiff(), "  \\xfcnicode value")\n \n     def testDiffText(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n         uu = U()\n-        expected = \'- value%s+ different value\' % linesep\n-        fd = FieldDiff(a, b, \'attribute\')\n+        expected = "- value%s+ different value" % linesep\n+        fd = FieldDiff(a, b, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n-        expected = \'- value%s+ \\xfcnicode value\' % linesep\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        expected = "- value%s+ \\xfcnicode value" % linesep\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n \n     def test_dump_text(self):\n         """Test dumping a diff of text."""\n         diff = []\n-        dump(\'-\', [\'support\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'- support\'])\n+        dump("-", ["support"], 0, 1, diff)\n+        self.assertEqual(diff, ["- support"])\n         # Try unicode, a \'u\' with an umlaut.\n         diff = []\n-        dump(\'+\', [\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'+ s\\xfcpport\'])\n+        dump("+", ["s\\xfcpport"], 0, 1, diff)\n+        self.assertEqual(diff, ["+ s\\xfcpport"])\n         # Combine them.\n         diff = []\n-        dump(\'-\', [\'support\'], 0, 1, diff)\n-        dump(\'+\', [\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'- support\', \'+ s\\xfcpport\'])\n+        dump("-", ["support"], 0, 1, diff)\n+        dump("+", ["s\\xfcpport"], 0, 1, diff)\n+        self.assertEqual(diff, ["- support", "+ s\\xfcpport"])\n \n     def test_dump_integer(self):\n         """Test dumping a diff of integers."""\n         diff = []\n-        dump(\'-\', [4], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 4\'])\n-        dump(\'+\', [42], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 4\', \'+ 42\'])\n+        dump("-", [4], 0, 1, diff)\n+        self.assertEqual(diff, ["- 4"])\n+        dump("+", [42], 0, 1, diff)\n+        self.assertEqual(diff, ["- 4", "+ 42"])\n \n     def test_dump_float(self):\n         """Test dumping a diff of floats."""\n         diff = []\n-        dump(\'-\', [1.1], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 1.1\'])\n-        dump(\'+\', [1.2], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 1.1\', \'+ 1.2\'])\n+        dump("-", [1.1], 0, 1, diff)\n+        self.assertEqual(diff, ["- 1.1"])\n+        dump("+", [1.2], 0, 1, diff)\n+        self.assertEqual(diff, ["- 1.1", "+ 1.2"])\n \n     def test_dump_boolean(self):\n         """Test dumping a diff of booleans."""\n         diff = []\n-        dump(\'-\', [True], 0, 1, diff)\n-        self.assertEqual(diff, [\'- True\'])\n-        dump(\'+\', [False], 0, 1, diff)\n-        self.assertEqual(diff, [\'- True\', \'+ False\'])\n+        dump("-", [True], 0, 1, diff)\n+        self.assertEqual(diff, ["- True"])\n+        dump("+", [False], 0, 1, diff)\n+        self.assertEqual(diff, ["- True", "+ False"])\n \n     def test_inline_diff_same(self):\n         """Test inline diff for attribute with same value"""\n@@ -176,12 +177,12 @@ def test_inline_diff_same(self):\n         uu = U()\n         h = H()\n         # We mostly just want to check that the inline diff renders without error.\n-        fd = FieldDiff(a, a, \'attribute\')\n+        fd = FieldDiff(a, a, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n-        fd = FieldDiff(uu, uu, \'attribute\')\n+        fd = FieldDiff(uu, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         self.assertNotIn("&gt;", fd.inline_diff())\n-        fd = FieldDiff(h, h, \'attribute\')\n+        fd = FieldDiff(h, h, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\n@@ -192,16 +193,16 @@ def test_inline_diff_different(self):\n         a = A()\n         uu = U()\n         h = H()\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n-        fd = FieldDiff(uu, a, \'attribute\')\n+        fd = FieldDiff(uu, a, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         self.assertNotIn("&gt;", fd.inline_diff())\n-        fd = FieldDiff(uu, h, \'attribute\')\n+        fd = FieldDiff(uu, h, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\n-        fd = FieldDiff(h, uu, \'attribute\')\n+        fd = FieldDiff(h, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex bdfba50..55a219a 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -26,99 +26,100 @@ class HList:\n \n \n class C:\n-    attribute = {\'a\': 1, \'b\': 2}\n+    attribute = {"a": 1, "b": 2}\n \n \n class D:\n-    attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n+    attribute = {"a": 1, "b": 2, "c": 3}\n \n \n class HDict:\n-    attribute = {\'a\': \'<script>alert("Hacker value")</script>\'}\n+    attribute = {"a": \'<script>alert("Hacker value")</script>\'}\n \n \n class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n         )\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n         )\n \n-        self.obj1 = self.portal[\'obj1\']\n-        self.obj2 = self.portal[\'obj2\']\n+        self.obj1 = self.portal["obj1"]\n+        self.obj2 = self.portal["obj2"]\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         self.assertTrue(IDifference.implementedBy(ListDiff))\n \n     def testInvalidValue(self):\n-        """ Test if no error with invalid values """\n+        """Test if no error with invalid values"""\n         a = A()\n         a.attribute = []\n         b = A()\n \n         b.attribute = None\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n         b.attribute = 0\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n-        b.attribute = \'\'\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        b.attribute = ""\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n+        diff = ListDiff(a, a, "attribute")\n         self.assertTrue(diff.same)\n \n     def testAttributeDiff(self):\n         """Test attribute with different value"""\n         a = A()\n         b = B()\n-        diff = ListDiff(a, b, \'attribute\')\n+        diff = ListDiff(a, b, "attribute")\n         self.assertFalse(diff.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 3, 0, 3)]\n+        diff = ListDiff(a, a, "attribute")\n+        expected = [("equal", 0, 3, 0, 3)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n         """test getLineDiffs() method with different value"""\n         a = A()\n         b = B()\n-        diff = ListDiff(a, b, \'attribute\')\n-        expected = [(\'equal\', 0, 3, 0, 3), (\'insert\', 3, 3, 3, 4)]\n+        diff = ListDiff(a, b, "attribute")\n+        expected = [("equal", 0, 3, 0, 3), ("insert", 3, 3, 3, 4)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with no diff"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n-        expected = \'  1{linesep}  2{linesep}  3\'.format(linesep=linesep)\n+        diff = ListDiff(a, a, "attribute")\n+        expected = "  1{linesep}  2{linesep}  3".format(linesep=linesep)\n         self.assertEqual(diff.ndiff(), expected)\n \n     def testDiffText(self):\n         """Test text diff output with no diff"""\n         a = A()\n         b = B()\n-        expected = \'  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4\' % \\\n-                   {\'linesep\': linesep}\n-        diff = ListDiff(a, b, \'attribute\')\n+        expected = "  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4" % {\n+            "linesep": linesep\n+        }\n+        diff = ListDiff(a, b, "attribute")\n         self.assertEqual(diff.ndiff(), expected)\n \n     def test_inline_diff(self):\n@@ -131,13 +132,13 @@ def test_inline_diff(self):\n     <div class="diff_sub"></div>\n     <div class="diff_add">4</div>\n </div>"""\n-        diff = ListDiff(a, b, \'attribute\')\n+        diff = ListDiff(a, b, "attribute")\n         self.assertEqual(diff.inline_diff(), expected)\n \n     def test_inline_diff_hacker_list(self):\n         a = A()\n         h = HList()\n-        diff = ListDiff(a, h, \'attribute\')\n+        diff = ListDiff(a, h, "attribute")\n         # The script tag should be escaped.\n         self.assertNotIn("<script", diff.inline_diff())\n         self.assertIn("&gt;", diff.inline_diff())\n@@ -145,7 +146,7 @@ def test_inline_diff_hacker_list(self):\n     def test_inline_diff_hacker_dict(self):\n         d = D()\n         h = HDict()\n-        diff = ListDiff(d, h, \'attribute\')\n+        diff = ListDiff(d, h, "attribute")\n         # The script tag should be escaped.\n         self.assertNotIn("<script", diff.inline_diff())\n         self.assertIn("&gt;", diff.inline_diff())\n@@ -153,34 +154,43 @@ def test_inline_diff_hacker_dict(self):\n     def test_inline_diff_vocabulary(self):\n         # unchanged, with vocabulary title\n         expected = \'<div class="InlineDiff">First Title</div>\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n-                             [testing.VOCABULARY_TUPLES[0][0]], True, expected)\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            True,\n+            expected,\n+        )\n         # unchanged, without vocabulary title\n         expected = \'<div class="InlineDiff">second_value</div>\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[1][0]], True, expected)\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[1][0]],\n+            True,\n+            expected,\n+        )\n         # changed: add value, with vocabulary title\n-        expected = \'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">First Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([],\n-                             [testing.VOCABULARY_TUPLES[0][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list([], [testing.VOCABULARY_TUPLES[0][0]], False, expected)\n         # changed: replaced unique value by another one, displaying titles\n-        expected = \'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n <div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            [testing.VOCABULARY_TUPLES[2][0]],\n+            False,\n+            expected,\n+        )\n         # changed: replaced multiple values by others, displaying titles\n-        expected = \'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n@@ -188,14 +198,15 @@ def test_inline_diff_vocabulary(self):\n <div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[1][0],\n-                              testing.VOCABULARY_TUPLES[2][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[2][0]],\n+            False,\n+            expected,\n+        )\n         # changed: replaced multiple values by others, displaying titles\n-        expected = \'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n </div>\n@@ -203,43 +214,47 @@ def test_inline_diff_vocabulary(self):\n <div class="InlineDiff">\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0],\n-                              testing.VOCABULARY_TUPLES[0][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[2][0], testing.VOCABULARY_TUPLES[0][0]],\n+            False,\n+            expected,\n+        )\n         # changed: removed values, displaying titles\n-        expected = \'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n <div class="InlineDiff">\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [], False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [],\n+            False,\n+            expected,\n+        )\n \n     def _test_diff_list(self, value1, value2, same, expected):\n         self.obj1.choices = value1\n         self.obj2.choices = value2\n-        diff = ListDiff(self.obj1, self.obj2, \'choices\')\n+        diff = ListDiff(self.obj1, self.obj2, "choices")\n         self.assertEqual(diff.same, same)\n         self.assertEqual(diff.inline_diff(), expected)\n \n     def testGetLineDictDiffsSame(self):\n         """test getLineDiffs() method with dict same value"""\n         c = C()\n-        diff = ListDiff(c, c, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        diff = ListDiff(c, c, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testGetLineDictDiffsDifferent(self):\n         """test getLineDiffs() method with dict different value"""\n         c = C()\n         d = D()\n-        diff = ListDiff(c, d, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        diff = ListDiff(c, d, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(diff.getLineDiffs(), expected)\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex 7b3e0ed..aa2a64e 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -8,17 +8,17 @@\n \n \n class A:\n-    attribute = \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\'\n+    attribute = "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0"\n \n     def method(self):\n-        return \'method \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\'\n+        return "method \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0"\n \n \n class B:\n-    attribute = \'\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n+    attribute = "\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"\n \n     def method(self):\n-        return \'method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n+        return "method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"\n \n \n class H:\n@@ -30,66 +30,68 @@ def method(self):\n \n class TestTextDiff(TestCase):\n     """Test the TextDiff class"""\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces import IDifference\n+\n         self.assertTrue(IDifference.implementedBy(TextDiff))\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n+        fd = TextDiff(a, a, "attribute")\n         self.assertTrue(fd.same)\n \n     def testMethodSame(self):\n         """Test method with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'method\')\n+        fd = TextDiff(a, a, "method")\n         self.assertTrue(fd.same)\n \n     def testAttributeDiff(self):\n         """Test attribute with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertFalse(fd.same)\n \n     def testMethodDiff(self):\n         """Test method with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'method\')\n+        fd = TextDiff(a, b, "method")\n         self.assertFalse(fd.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = TextDiff(a, a, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n         """test getLineDiffs() method with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = TextDiff(a, b, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n-        self.assertEqual(fd.ndiff(), \'  \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\')\n+        fd = TextDiff(a, a, "attribute")\n+        self.assertEqual(fd.ndiff(), "  \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0")\n \n     def testDiffText(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n-        expected = \'- \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0%s+ \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\' % linesep\n-        fd = TextDiff(a, b, \'attribute\')\n+        expected = "- \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0%s+ \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb" % linesep\n+        fd = TextDiff(a, b, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n \n     def testUnifiedDiff(self):\n@@ -105,7 +107,7 @@ def testUnifiedDiff(self):\n \n -\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n +\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        fd = TextDiff(a, b, \'attribute\', \'version1\', \'version2\')\n+        fd = TextDiff(a, b, "attribute", "version1", "version2")\n         self.assertEqual(fd.unified_diff(), expected)\n \n     def testHTMLDiff(self):\n@@ -123,10 +125,10 @@ def testHTMLDiff(self):\n             <tr><td class="diff_next" id="difflib_chg_to0__0"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="from0_1">1</td><td nowrap="nowrap"><span class="diff_sub">\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0</span></td><td class="diff_next"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="to0_1">1</td><td nowrap="nowrap"><span class="diff_add">\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb</span></td></tr>\n         </tbody>\n     </table>"""  # NOQA\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertEqual(fd.html_diff(), expected)\n \n-        fd = TextDiff(a, h, \'attribute\')\n+        fd = TextDiff(a, h, "attribute")\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.html_diff())\n         self.assertIn("&gt;", fd.html_diff())\n@@ -136,10 +138,10 @@ def testInlineDiff(self):\n         a = A()\n         b = B()\n         h = H()\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n \n-        fd = TextDiff(a, h, \'attribute\')\n+        fd = TextDiff(a, h, "attribute")\n         self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py\nindex ebfe1d4..1178909 100644\n--- a/Products/CMFDiffTool/tests/test_astextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_astextdiff.py\n@@ -16,7 +16,6 @@ def __init__(self, bool_field):\n \n \n class AsTextDiffTestCase(unittest.TestCase):\n-\n     def test_should_diff_anything_as_text(self):\n         self._test_diff_date(date(2011, 1, 1), date(2012, 2, 2), False)\n         self._test_diff_date(date(2011, 1, 1), date(2011, 1, 1), True)\n@@ -24,7 +23,7 @@ def test_should_diff_anything_as_text(self):\n         self._test_diff_date(None, None, True)\n \n     def _test_diff_date(self, d1, d2, same):\n-        diff = AsTextDiff(DateDummyType(d1), DateDummyType(d2), \'date\')\n+        diff = AsTextDiff(DateDummyType(d1), DateDummyType(d2), "date")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n \n@@ -51,7 +50,7 @@ def test_should_diff_boolean_fields(self):\n         self._test_diff_bool(None, None, True)\n \n     def _test_diff_bool(self, b1, b2, same):\n-        diff = AsTextDiff(BoolDummyType(b1), BoolDummyType(b2), \'bool_field\')\n+        diff = AsTextDiff(BoolDummyType(b1), BoolDummyType(b2), "bool_field")\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n@@ -60,6 +59,5 @@ def _test_diff_bool(self, b1, b2, same):\n         if same:\n             self.assertFalse(inline_diff)\n         else:\n-            self.assertTrue(\n-                (\'True\' in inline_diff) or (\'False\' in inline_diff))\n+            self.assertTrue(("True" in inline_diff) or ("False" in inline_diff))\n             # self.assertFalse(\'None\' in inline_diff)\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex b814d0d..60e9dd5 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -9,86 +9,88 @@\n \n \n class BinaryDiffTestCase(BaseDXTestCase):\n-\n     def test_should_detect_different_filename(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=\'blah.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="blah.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=\'bleh.txt\'),\n+            "obj2",\n+            file=NamedFile(data="contents", filename="bleh.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n \n     def test_should_detect_different_data(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'different contents\', filename=\'f.txt\'),\n+            "obj2",\n+            file=NamedFile(data="different contents", filename="f.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n \n     def test_should_detect_same_data_and_filename(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=\'f.txt\'),\n+            "obj2",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertTrue(diff.same)\n \n     def test_should_escape_html(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=\'blah.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="blah.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=\'<script>alert("Hacker filename")</script>.txt\'),\n+            "obj2",\n+            file=NamedFile(\n+                data=\'<script>alert("Hacker data")</script>\',\n+                filename=\'<script>alert("Hacker filename")</script>.txt\',\n+            ),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n         # The script tag should be escaped.\n@@ -101,7 +103,7 @@ def test_should_escape_html(self):\n         # which namedfiles do not have.  So we hack it.\n         obj1.file.getFilename = lambda: obj1.file.filename\n         obj2.file.getFilename = lambda: obj2.file.filename\n-        diff = BinaryDiff.BinaryDiff(obj1, obj2, \'file\')\n+        diff = BinaryDiff.BinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n         # The script tag should be escaped.\ndiff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py\nindex 95964ee..a1a84e2 100644\n--- a/Products/CMFDiffTool/tests/test_choicediff.py\n+++ b/Products/CMFDiffTool/tests/test_choicediff.py\n@@ -8,31 +8,34 @@\n \n \n class ChoiceDiffTestCase(BaseDXTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n         )\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n         )\n \n-        self.obj1 = self.portal[\'obj1\']\n-        self.obj2 = self.portal[\'obj2\']\n+        self.obj1 = self.portal["obj1"]\n+        self.obj2 = self.portal["obj2"]\n \n     def test_should_diff_choice_field(self):\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0],\n-                               testing.VOCABULARY_TUPLES[0][0], True)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0],\n-                               testing.VOCABULARY_TUPLES[1][0], False)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0],\n-                               testing.VOCABULARY_TUPLES[0][0], False)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0],\n-                               testing.VOCABULARY_TUPLES[1][0], True)\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[0][0], True\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0], False\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[0][0], False\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[1][0], True\n+        )\n \n         self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0], None, False)\n         self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0], None, False)\n@@ -43,7 +46,7 @@ def test_should_diff_choice_field(self):\n     def _test_diff_choice(self, value1, value2, same):\n         self.obj1.choice = value1\n         self.obj2.choice = value2\n-        diff = ChoiceDiff(self.obj1, self.obj2, \'choice\')\n+        diff = ChoiceDiff(self.obj1, self.obj2, "choice")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n \n@@ -53,7 +56,9 @@ def _test_diff_choice(self, value1, value2, same):\n         else:\n             if value1 is not None:\n                 self.assertTrue(\n-                    title_or_value(testing.VOCABULARY, value1) in inline_diff)\n+                    title_or_value(testing.VOCABULARY, value1) in inline_diff\n+                )\n             if value2 is not None:\n                 self.assertTrue(\n-                    title_or_value(testing.VOCABULARY, value2) in inline_diff)\n+                    title_or_value(testing.VOCABULARY, value2) in inline_diff\n+                )\ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex e19c762..48b6ae6 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -13,77 +13,75 @@\n \n \n class DexterityDiffTestCase(BaseDXTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_should_diff(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            title=\'Object 1\',\n-            description=\'Desc 1\',\n-            text=\'Text 1\',\n+            "obj1",\n+            title="Object 1",\n+            description="Desc 1",\n+            text="Text 1",\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            title=\'Object 2\',\n-            text=\'Text 2\',\n+            "obj2",\n+            title="Object 2",\n+            text="Text 2",\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n             self.assertTrue(IDifference.providedBy(d))\n             self.assertFalse(d.field in EXCLUDED_FIELDS)\n-            if d.field in [\'title\', \'description\', \'text\']:\n-                self.assertFalse(\n-                    d.same, \'Field %s should be different.\' % d.field)\n+            if d.field in ["title", "description", "text"]:\n+                self.assertFalse(d.same, "Field %s should be different." % d.field)\n             else:\n-                self.assertTrue(d.same, \'Field %s should be equal.\' % d.field)\n+                self.assertTrue(d.same, "Field %s should be equal." % d.field)\n \n     def test_should_provide_inline_diff_for_date_field(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             date=date(2001, 1, 1),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n             date=date(2001, 1, 2),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n-            if d.field == \'date\':\n+            if d.field == "date":\n                 self.assertTrue(d.inline_diff())\n \n     def test_should_provide_inline_diff_for_file_list_field(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             files=None,\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            files=[NamedFile(data=\'data\', filename=\'a.txt\')],\n+            "obj2",\n+            files=[NamedFile(data="data", filename="a.txt")],\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n-            if d.field == \'files\':\n+            if d.field == "files":\n                 inline_diff = d.inline_diff()\n                 self.assertTrue(inline_diff)\n                 self.assertTrue(obj2.files[0].filename in inline_diff)\n@@ -91,68 +89,68 @@ def test_should_provide_inline_diff_for_file_list_field(self):\n     def test_should_provide_diff_for_behaviors_fields(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             date=date(2001, 1, 1),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n             date=date(2001, 1, 2),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         fields = [d.field for d in diffs]\n-        self.assertIn(\'title\', fields)\n-        self.assertIn(\'description\', fields)\n+        self.assertIn("title", fields)\n+        self.assertIn("description", fields)\n \n     def test_should_provide_diff_for_related_fields(self):\n         intids = getUtility(IIntIds)\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            title=\'Object 1\',\n-            description=\'Desc 1\',\n-            text=\'Text 1\',\n+            "obj1",\n+            title="Object 1",\n+            description="Desc 1",\n+            text="Text 1",\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         intid = intids.register(obj1)\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            title=\'Object 2\',\n+            "obj2",\n+            title="Object 2",\n             relatedItems=[RelationValue(intid)],\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n         intid = intids.register(obj2)\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj3\',\n-            title=\'Object 3\',\n+            "obj3",\n+            title="Object 3",\n             relatedItems=[RelationValue(intid)],\n         )\n-        obj3 = self.portal[\'obj3\']\n+        obj3 = self.portal["obj3"]\n \n-        diffs = DexterityCompoundDiff(obj2, obj3, \'any\')\n+        diffs = DexterityCompoundDiff(obj2, obj3, "any")\n         for d in diffs:\n-            if d.field == \'relatedItems\':\n+            if d.field == "relatedItems":\n                 inline_diff = d.inline_diff()\n                 self.assertTrue(inline_diff)\n                 i_diff_sub = inline_diff.index(\'<div class="diff_sub">\')\n-                i_obj1 = inline_diff.index(\'Object 1\')\n+                i_obj1 = inline_diff.index("Object 1")\n                 i_diff_add = inline_diff.index(\'<div class="diff_add">\')\n-                i_obj2 = inline_diff.index(\'Object 2\')\n+                i_obj2 = inline_diff.index("Object 2")\n                 self.assertTrue(i_diff_sub < i_obj1 < i_diff_add < i_obj2)\n \n                 n_diff = d.ndiff()\n                 self.assertTrue(n_diff)\n-                i_rem = n_diff.index(\'-\')\n-                i_obj1 = n_diff.index(\'obj1\')\n-                i_add = n_diff.index(\'+\')\n-                i_obj2 = n_diff.index(\'obj2\')\n+                i_rem = n_diff.index("-")\n+                i_obj1 = n_diff.index("obj1")\n+                i_add = n_diff.index("+")\n+                i_obj2 = n_diff.index("obj2")\n                 self.assertTrue(i_rem < i_obj1 < i_add < i_obj2)\ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex d0c006d..58d8546 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -8,61 +8,59 @@\n class DummyType:\n     def __init__(self, files):\n         """`files` is a sequence of (data, filename) tuples."""\n-        self.files = files and [\n-            NamedFile(data=d, filename=fn) for (d, fn) in files]\n+        self.files = files and [NamedFile(data=d, filename=fn) for (d, fn) in files]\n \n \n class AsTextDiffTestCase(unittest.TestCase):\n-\n     def test_should_diff_file_lists_correctly(self):\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\')],\n-            [(\'data2\', \'filename2\')],\n+            [("data1", "filename1")],\n+            [("data2", "filename2")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n-            [(\'data1\', \'filename1\'), (\'datay\', \'filenamey\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("data1", "filename1"), ("datay", "filenamey")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n-            [(\'datax\', \'filenamex\'), (\'data1\', \'filename1\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("datax", "filenamex"), ("data1", "filename1")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\')],\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [("data1", "filename1")],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\')],\n-            [(\'data1\', \'filename1\')],\n+            [("data1", "filename1")],\n+            [("data1", "filename1")],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             None,\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', \'filename1\'), (\'datax\', \'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             [],\n             False,\n         )\n         self._test_diff_files(\n             [\n-                (\'<script>alert("Hacker data 1")</script>\', \'filename1\'),\n-                (\'<script>alert("Hacker data 2")</script>\', \'filename2\'),\n+                (\'<script>alert("Hacker data 1")</script>\', "filename1"),\n+                (\'<script>alert("Hacker data 2")</script>\', "filename2"),\n             ],\n             [\n-                (\'data1\', \'<script>alert("Hacker data")</script>.txt\'),\n-                (\'<script>alert("Hacker data 2")</script>\', \'filename2\'),\n+                ("data1", \'<script>alert("Hacker data")</script>.txt\'),\n+                (\'<script>alert("Hacker data 2")</script>\', "filename2"),\n             ],\n             False,\n         )\n@@ -72,7 +70,8 @@ def test_should_diff_file_lists_correctly(self):\n \n     def _test_diff_files(self, files1, files2, same):\n         diff = namedfile.NamedFileListDiff(\n-            DummyType(files1), DummyType(files2), \'files\')\n+            DummyType(files1), DummyType(files2), "files"\n+        )\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n         inline = diff.inline_diff()\ndiff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py\nindex f0326d4..92e8ea4 100644\n--- a/Products/CMFDiffTool/tests/test_install.py\n+++ b/Products/CMFDiffTool/tests/test_install.py\n@@ -4,10 +4,7 @@\n \n \n class InstallTestCase(BaseDXTestCase):\n-\n     def test_compound_diff_type_should_be_registered(self):\n-        diff_tool = getToolByName(self.portal, \'portal_diff\')\n-        self.assertTrue(\n-            DexterityCompoundDiff.meta_type in diff_tool.listDiffTypes())\n-        self.assertTrue(\n-            diff_tool.getDiffType(DexterityCompoundDiff.meta_type))\n+        diff_tool = getToolByName(self.portal, "portal_diff")\n+        self.assertTrue(DexterityCompoundDiff.meta_type in diff_tool.listDiffTypes())\n+        self.assertTrue(diff_tool.getDiffType(DexterityCompoundDiff.meta_type))\ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex 115620e..90d8a29 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -13,40 +13,40 @@ def __init__(self, body):\n \n class RichTextDiffTestCase(unittest.TestCase):\n     """Test RichTextDiff"""\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def test_parseField_value_is_none(self):\n         value = None\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         self.assertEqual(diff._parseField(value), [])\n \n     def test_parseField_value_is_not_none(self):\n-        value = RichTextValue(\'foo\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n-        self.assertEqual(diff._parseField(value), [\'foo\'])\n+        value = RichTextValue("foo")\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n+        self.assertEqual(diff._parseField(value), ["foo"])\n \n     def test_inline_diff_same(self):\n-        value = RichTextValue(\'foo\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        value = RichTextValue("foo")\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         inline_diff = diff.inline_diff()\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, True)\n-        self.assertEqual(inline_diff, \'foo \')\n+        self.assertEqual(inline_diff, "foo ")\n \n     def test_inline_diff_same_hacker(self):\n         value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n         self.assertNotIn("&gt;", inline_diff)\n \n     def test_inline_diff_different(self):\n-        old_value = RichTextValue(\'foo\')\n-        new_value = RichTextValue(\'foo bar\')\n-        diff = CMFDTHtmlDiff(\n-            DummyType(old_value), DummyType(new_value), \'body\')\n+        old_value = RichTextValue("foo")\n+        new_value = RichTextValue("foo bar")\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n \n         inline_diff = diff.inline_diff()\n \n@@ -55,17 +55,17 @@ def test_inline_diff_different(self):\n         self.assertEqual(inline_diff, \'foo <span class="insert">bar </span> \')\n \n     def test_inline_diff_different_hacker(self):\n-        old_value = RichTextValue(\'clean\')\n+        old_value = RichTextValue("clean")\n         new_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n-        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n         self.assertNotIn("&gt;", inline_diff)\n \n         old_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n-        new_value = RichTextValue(\'clean\')\n-        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        new_value = RichTextValue("clean")\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 3d83865..715e9fe 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -8,12 +8,12 @@ def safe_unicode(value):\n     try:\n         value = str(value)\n     except UnicodeDecodeError:\n-        value = value.decode(\'utf-8\', \'replace\')\n+        value = value.decode("utf-8", "replace")\n     return value\n \n \n def safe_utf8(value):\n-    return safe_unicode(value).encode(\'utf-8\')\n+    return safe_unicode(value).encode("utf-8")\n \n \n def scrub_html(value):\n@@ -37,6 +37,7 @@ def html_escape(value):\n     value = safe_unicode(value)\n     return escape(value, 1)\n \n+\n def html_safe(value):\n     value = safe_unicode(value)\n     return scrub_html(value)\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex de40ea7..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/setup.py b/setup.py\nindex bd731df..06a546d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n setup(\n-    name=\'Products.CMFDiffTool\',\n+    name="Products.CMFDiffTool",\n     version=version,\n     description="Diff tool for Plone",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Programming Language :: Python :: 3.8",\n@@ -22,36 +21,36 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Topic :: Internet :: WWW/HTTP",\n     ],\n-    keywords=\'Diff Plone\',\n-    author=\'Brent Hendricks\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/Products.CMFDiffTool\',\n-    license=\'GPL\',\n+    keywords="Diff Plone",\n+    author="Brent Hendricks",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/Products.CMFDiffTool",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'zope.component\',\n-            \'plone.app.testing\',\n-            \'plone.namedfile\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.contenttypes[test]\',\n-            ]\n+            "zope.component",\n+            "plone.app.testing",\n+            "plone.namedfile",\n+            "plone.app.dexterity",\n+            "plone.app.contenttypes[test]",\n+        ]\n     ),\n-    python_requires=\'>=3.8\',\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'plone.base\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Acquisition\',\n-        \'Zope\',\n+        "setuptools",\n+        "zope.interface",\n+        "plone.base",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Acquisition",\n+        "Zope",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n     """,\n-    )\n+)\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:33:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/09ee48da7c734c20e060fed9ce27293a450be2aa

chore: black and isort fighting

Files changed:
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testListDiff.py

b'diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex af65fa8..542514b 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -3,9 +3,7 @@\n #\n from Acquisition import aq_base\n from os import linesep\n-from plone.app.contenttypes.testing import (\n-    PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING,\n-)  # NOQA\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.base.utils import safe_hasattr\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 55a219a..6da8f91 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -116,9 +116,7 @@ def testDiffText(self):\n         """Test text diff output with no diff"""\n         a = A()\n         b = B()\n-        expected = "  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4" % {\n-            "linesep": linesep\n-        }\n+        expected = "  1{linesep}  2{linesep}  3{linesep}+ 4".format(linesep=linesep)\n         diff = ListDiff(a, b, "attribute")\n         self.assertEqual(diff.ndiff(), expected)\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:33:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/e10bfa15448af487bbd85a96d7901e46696d98e5

chore: zpretty ZXML/XML

Files changed:
M Products/CMFDiffTool/configure.zcml
M Products/CMFDiffTool/exportimport/configure.zcml
M Products/CMFDiffTool/profiles.zcml
M Products/CMFDiffTool/profiles/default/componentregistry.xml
M Products/CMFDiffTool/profiles/default/metadata.xml

b'diff --git a/Products/CMFDiffTool/configure.zcml b/Products/CMFDiffTool/configure.zcml\nindex 13d2a4f..7d308fb 100644\n--- a/Products/CMFDiffTool/configure.zcml\n+++ b/Products/CMFDiffTool/configure.zcml\n@@ -2,6 +2,6 @@\n \n   <include package=".exportimport" />\n \n-  <include file="profiles.zcml"/>\n+  <include file="profiles.zcml" />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/exportimport/configure.zcml b/Products/CMFDiffTool/exportimport/configure.zcml\nindex 9563ead..14426a5 100644\n--- a/Products/CMFDiffTool/exportimport/configure.zcml\n+++ b/Products/CMFDiffTool/exportimport/configure.zcml\n@@ -1,29 +1,31 @@\n <configure\n-   xmlns="http://namespaces.zope.org/zope"\n-   xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-   i18n_domain="cmf"\n-   >\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    i18n_domain="cmf"\n+    >\n \n   <genericsetup:importStep\n       name="difftool"\n-      handler="Products.CMFDiffTool.exportimport.difftool.importDiffTool"\n       title="Diff Tool"\n-      description="Import CMFDiffTool settings">\n+      description="Import CMFDiffTool settings"\n+      handler="Products.CMFDiffTool.exportimport.difftool.importDiffTool"\n+      >\n     <depends name="toolset" />\n     <depends name="componentregistry" />\n   </genericsetup:importStep>\n \n   <genericsetup:exportStep\n       name="difftool"\n-      handler="Products.CMFDiffTool.exportimport.difftool.exportDiffTool"\n       title="Diff Tool"\n-      description="Export CMFDiffTool settings"/>\n+      description="Export CMFDiffTool settings"\n+      handler="Products.CMFDiffTool.exportimport.difftool.exportDiffTool"\n+      />\n \n   <adapter\n-     factory=".difftool.DiffToolXMLAdapter"\n-     provides="Products.GenericSetup.interfaces.IBody"\n-     for="Products.CMFDiffTool.interfaces.IDiffTool\n-          Products.GenericSetup.interfaces.ISetupEnviron"\n-     />\n+      factory=".difftool.DiffToolXMLAdapter"\n+      provides="Products.GenericSetup.interfaces.IBody"\n+      for="Products.CMFDiffTool.interfaces.IDiffTool\n+           Products.GenericSetup.interfaces.ISetupEnviron"\n+      />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/profiles.zcml b/Products/CMFDiffTool/profiles.zcml\nindex 2ca32fe..f21e2b3 100644\n--- a/Products/CMFDiffTool/profiles.zcml\n+++ b/Products/CMFDiffTool/profiles.zcml\n@@ -1,14 +1,15 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="cmfdifftool">\n+    i18n_domain="cmfdifftool"\n+    >\n \n   <genericsetup:registerProfile\n       name="CMFDiffTool"\n       title="CMFDiffTool"\n-      directory="profiles/default"\n       description="Extension profile for default CMFDiffTool setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/profiles/default/componentregistry.xml b/Products/CMFDiffTool/profiles/default/componentregistry.xml\nindex 4ed5c31..760f596 100644\n--- a/Products/CMFDiffTool/profiles/default/componentregistry.xml\n+++ b/Products/CMFDiffTool/profiles/default/componentregistry.xml\n@@ -1,10 +1,10 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n- <adapters/>\n- <utilities>\n-  <utility\n-    factory="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"\n-    id="portal_diff"\n-    interface="Products.CMFDiffTool.interfaces.IDiffTool"/>\n- </utilities>\n+  <adapters />\n+  <utilities>\n+    <utility id="portal_diff"\n+             factory="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"\n+             interface="Products.CMFDiffTool.interfaces.IDiffTool"\n+    />\n+  </utilities>\n </componentregistry>\ndiff --git a/Products/CMFDiffTool/profiles/default/metadata.xml b/Products/CMFDiffTool/profiles/default/metadata.xml\nindex d02ea5c..58133d6 100644\n--- a/Products/CMFDiffTool/profiles/default/metadata.xml\n+++ b/Products/CMFDiffTool/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>2</version>\n </metadata>\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T20:33:52+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/b14b2bbc77b1eeff2d7bc8781e76734b1f7208d6

chore: zpretty PT

Files changed:
M Products/CMFDiffTool/zpt/editCMFDiffTool.zpt

b'diff --git a/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt b/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\nindex 822ef99..333d23a 100644\n--- a/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\n+++ b/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\n@@ -1,7 +1,10 @@\n <html tal:omit-tag="">\n   <span tal:replace="structure here/manage_page_header">Header</span>\n-  <span tal:define="manage_tabs_message options/manage_tabs_message | nothing"\n-    tal:replace="structure here/manage_tabs">Tabs</span>\n+  <span tal:define="\n+          manage_tabs_message options/manage_tabs_message | nothing;\n+        "\n+        tal:replace="structure here/manage_tabs"\n+  >Tabs</span>\n \n \n   <style>\n@@ -12,91 +15,140 @@\n \n     #diffTable td { padding: 1ex; }\n \n-    .lastrow td { \n-      border-bottom: 1px solid black; \n+    .lastrow td {\n+      border-bottom: 1px solid black;\n     }\n   </style>\n \n   <h3>Differences by Type</h3>\n-  \n-  <form action="manage_addDiffField" method="post">\n+\n+  <form action="manage_addDiffField"\n+        method="post"\n+  >\n     <table>\n       <tr>\n-    <th>Portal Type</th>\n-    <th>Field name</th>\n-    <th>Diff Type</th>\n+        <th>Portal Type</th>\n+        <th>Field name</th>\n+        <th>Diff Type</th>\n       </tr>\n       <tr>\n-    <td>\n-      <select name="pt_name">\n-        <option tal:repeat="pt here/portal_types/listTypeInfo"\n-                tal:attributes="value pt/id;"\n-                tal:content="pt/id">[group]</option>\n-      </select>\n-    </td>\n-    <td>\n-      <input type="text" name="field" />\n-    </td>\n-    <td>\n-      <select name="diff">\n-        <option tal:repeat="d here/listDiffTypes"\n-            tal:attributes="value d;"\n-            tal:content="d">[group]</option>\n-      </select>\n-    </td>\n-    <td>\n-      <input type="submit" name="add" value="Add field" />\n-    </td>\n+        <td>\n+          <select name="pt_name">\n+            <option tal:repeat="pt here/portal_types/listTypeInfo"\n+                    tal:content="pt/id"\n+                    tal:attributes="\n+                      value pt/id;\n+                    "\n+            >[group]</option>\n+          </select>\n+        </td>\n+        <td>\n+          <input name="field"\n+                 type="text"\n+          />\n+        </td>\n+        <td>\n+          <select name="diff">\n+            <option tal:repeat="d here/listDiffTypes"\n+                    tal:content="d"\n+                    tal:attributes="\n+                      value d;\n+                    "\n+            >[group]</option>\n+          </select>\n+        </td>\n+        <td>\n+          <input name="add"\n+                 type="submit"\n+                 value="Add field"\n+          />\n+        </td>\n       </tr>\n     </table>\n   </form>\n \n-  <form action="." method="post">\n+  <form action="."\n+        method="post"\n+  >\n \n     <table id="diffTable">\n       <thead>\n-    <tr>\n-      <th>Portal Type</th>\n-      <th>Field</th>\n-      <th>Diff Type</th>\n-      <th>Delete</th>\n-    </tr>\n+        <tr>\n+          <th>Portal Type</th>\n+          <th>Field</th>\n+          <th>Diff Type</th>\n+          <th>Delete</th>\n+        </tr>\n       </thead>\n       <tal:p_type tal:repeat="pt_name here/portal_types/listContentTypes">\n-    <tal:defs tal:define="diff_map python:here.getDiffForPortalType(pt_name)" tal:condition="diff_map">\n-      <tr tal:repeat="pair diff_map/items" tal:attributes="class python:test(repeat[\'pair\'].end, \'lastrow\', nothing)">\n-        <tal:defs tal:define="field python:pair[0]; difftype python:pair[1];">\n+        <tal:defs tal:define="\n+                    diff_map python:here.getDiffForPortalType(pt_name);\n+                  "\n+                  tal:condition="diff_map"\n+        >\n+          <tr tal:repeat="pair diff_map/items"\n+              tal:attributes="\n+                class python:test(repeat[\'pair\'].end, \'lastrow\', nothing);\n+              "\n+          >\n+            <tal:defs tal:define="\n+                        field python:pair[0];\n+                        difftype python:pair[1];\n+                      ">\n \n-          <td class="form-label">\n-        <a tal:condition="repeat/pair/start" \n-                   tal:attributes="href string:../portal_types/$pt_name/manage_workspace" \n-                   tal:content="pt_name">[pt_name]</a>\n-          </td>\n+              <td class="form-label">\n+                <a tal:condition="repeat/pair/start"\n+                   tal:content="pt_name"\n+                   tal:attributes="\n+                     href string:../portal_types/$pt_name/manage_workspace;\n+                   "\n+                >[pt_name]</a>\n+              </td>\n \n-          <td class="form-label" tal:content="field">[field]</td>\n-          <td class="form-element">\n-        <select name="updates.diff:records">\n-          <option tal:repeat="d here/listDiffTypes"\n-                   tal:content="d"\n-               tal:attributes="value d;\n-                                           selected python:test(d == difftype, \'selected\' ,nothing);">\n+              <td class="form-label"\n+                  tal:content="field"\n+              >[field]</td>\n+              <td class="form-element">\n+                <select name="updates.diff:records">\n+                  <option tal:repeat="d here/listDiffTypes"\n+                          tal:content="d"\n+                          tal:attributes="\n+                            value d;\n+                            selected python:test(d == difftype, \'selected\' ,nothing);\n+                          "\n+                  >\n             [group]\n-          </option>\n-        </select>\n-          </td>\n-          <td align="center">\n-        <input type="hidden" name="updates.pt_name:records" tal:attributes="value pt_name" />\n-        <input type="hidden" name="updates.field:records" tal:attributes="value field" />\n-        <input type="checkbox" name="updates.delete:records" />\n-          </td>\n+                  </option>\n+                </select>\n+              </td>\n+              <td align="center">\n+                <input name="updates.pt_name:records"\n+                       type="hidden"\n+                       tal:attributes="\n+                         value pt_name;\n+                       "\n+                />\n+                <input name="updates.field:records"\n+                       type="hidden"\n+                       tal:attributes="\n+                         value field;\n+                       "\n+                />\n+                <input name="updates.delete:records"\n+                       type="checkbox"\n+                />\n+              </td>\n+            </tal:defs>\n+          </tr>\n         </tal:defs>\n-      </tr>   \n-    </tal:defs>   \n       </tal:p_type>\n     </table>\n-    \n-    <input type="submit" name="manage_editDiffFields:action" value="Update" />\n+\n+    <input name="manage_editDiffFields:action"\n+           type="submit"\n+           value="Update"\n+    />\n   </form>\n-  \n+\n   <span tal:replace="structure here/manage_page_footer">Footer</span>\n </html>\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T21:23:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/ff12d21a37b1162ea8cfb58d91b4e7e56130f362

chore: configure codespell

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..48f5b49 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,6 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\n+[tool.codespell]\n+ignore-words-list = "alo"\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-08T21:23:33+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/d5655161babe6d6b7aae48f7921dc99c8674060a

feat: codespell

Files changed:
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testDiffTool.py

b'diff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex a799da8..c445a22 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -59,7 +59,7 @@ class IDifference(Interface):\n     def testChanges(ob):\n         """Test the specified object to determine if the change set will apply cleanly.\n \n-        Returns None if there would be no erros\n+        Returns None if there would be no errors\n         """\n \n     def applyChanges(ob):\n@@ -91,7 +91,7 @@ class IChangeSet(Interface):\n     def computeDiff(ob1, ob2, recursive=1, exclude=None):\n         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).\n \n-        If resursive is 1, compute differences between subobjects of\n+        If recursive is 1, compute differences between subobjects of\n         ob1 and ob2 as well, excluding any subobjects whose IDs are\n         listed in exclude\n \n@@ -100,7 +100,7 @@ def computeDiff(ob1, ob2, recursive=1, exclude=None):\n     def testChanges(ob):\n         """Test the specified object to determine if the change set will apply cleanly.\n \n-        Returns None if there would be no erros\n+        Returns None if there would be no errors\n         """\n \n     def applyChanges(ob):\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 51c1763..7230734 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -6,7 +6,7 @@\n class BaseDXTestCase(unittest.TestCase):\n     """A base testing class for CMFDiffTool\n \n-    It includes a layer which installes the product\n+    It includes a layer which installs the product\n     and some testing dependencies in a Plone site.\n     """\n \ndiff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py\nindex 8d664d6..e1b5f27 100644\n--- a/Products/CMFDiffTool/tests/testDiffTool.py\n+++ b/Products/CMFDiffTool/tests/testDiffTool.py\n@@ -29,7 +29,7 @@ def setUp(self):\n         self.p_diff._pt_diffs = {}\n \n         # patch portal_types to list `Document` in the listContentTypes\n-        # a plausability check is done in the `setDiffForPortalType` method\n+        # a plausibility check is done in the `setDiffForPortalType` method\n         # but we have no content registry\n         portal_types = getToolByName(self.layer["portal"], "portal_types")\n         self._old_listContentTypes = portal_types.listContentTypes\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-09T09:53:22+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/b195baa24ef54ae86aaa968a055898e3e04020bd

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 48f5b49..fbbe123 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,8 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+ExtensionClass = [\'ComputedAttribute\']\n+ignore-packages = [\'plone.namedfile\', \'plone.dexterity\', \'plone.app.textfield\']\n \n [tool.codespell]\n ignore-words-list = "alo"\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-09T09:53:38+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/1f67789be64cb64fc763d992badedae5066a5c40

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 06a546d..b865631 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,19 +35,19 @@\n             "zope.component",\n             "plone.app.testing",\n             "plone.namedfile",\n-            "plone.app.dexterity",\n             "plone.app.contenttypes[test]",\n+            "zope.intid",\n         ]\n     ),\n     python_requires=">=3.8",\n     install_requires=[\n-        "setuptools",\n-        "zope.interface",\n-        "plone.base",\n-        "Products.CMFCore",\n+        "ExtensionClass",\n         "Products.GenericSetup",\n-        "Acquisition",\n+        "Products.PortalTransforms",\n         "Zope",\n+        "setuptools",\n+        "plone.base",\n+        "z3c.relationfield",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-04-12T00:44:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/f045affd6f65267499ca7b6458af4923ff38768d

Merge pull request #43 from plone/config-with-default-template-d8360894

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/configure.zcml
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/exportimport/__init__.py
M Products/CMFDiffTool/exportimport/configure.zcml
M Products/CMFDiffTool/exportimport/difftool.py
M Products/CMFDiffTool/interfaces/IChangeSet.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/__init__.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/profiles.zcml
M Products/CMFDiffTool/profiles/default/componentregistry.xml
M Products/CMFDiffTool/profiles/default/metadata.xml
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/__init__.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_install.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M Products/CMFDiffTool/zpt/editCMFDiffTool.zpt
M Products/__init__.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d915ae9\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3333c742"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 33ccc0c..1a1038b 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """CMFDiffTool.py\n \n    Calculate differences between content objects\n@@ -20,36 +19,45 @@\n @implementer(IDifference)\n class BaseDiff:\n     """Basic diff type"""\n-    __allow_access_to_unprotected_subobjects__ = 1\n-    meta_type = \'Base Diff\'\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None,\n-                 field_name=None, field_label=None, schemata=None):\n+    __allow_access_to_unprotected_subobjects__ = 1\n+    meta_type = "Base Diff"\n+\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n         self.field = field\n         self.oldValue = _getValue(obj1, field, field_name)\n         self.newValue = _getValue(obj2, field, field_name)\n-        self.same = (self.oldValue == self.newValue)\n-        if not id1 and safe_hasattr(obj1, \'getId\'):\n+        self.same = self.oldValue == self.newValue\n+        if not id1 and safe_hasattr(obj1, "getId"):\n             id1 = obj1.getId()\n-        if not id2 and safe_hasattr(obj2, \'getId\'):\n+        if not id2 and safe_hasattr(obj2, "getId"):\n             id2 = obj2.getId()\n         self.id1 = id1\n         self.id2 = id2\n         self.label = field_label or field\n-        self.schemata = schemata or \'default\'\n+        self.schemata = schemata or "default"\n         fld1 = _getValue(obj1, field, field_name, convert_to_str=False)\n         fld2 = _getValue(obj2, field, field_name, convert_to_str=False)\n-        if safe_hasattr(fld1, \'getFilename\'):\n+        if safe_hasattr(fld1, "getFilename"):\n             self.oldFilename = fld1.getFilename()\n         else:\n             self.oldFilename = None\n-        if safe_hasattr(fld2, \'getFilename\'):\n+        if safe_hasattr(fld2, "getFilename"):\n             self.newFilename = fld2.getFilename()\n         else:\n             self.newFilename = None\n-        if self.oldFilename is not None and self.newFilename is not None \\\n-           and self.same:\n-            self.same = (self.oldFilename == self.newFilename)\n+        if self.oldFilename is not None and self.newFilename is not None and self.same:\n+            self.same = self.oldFilename == self.newFilename\n \n     def testChanges(self, ob):\n         """Test the specified object to determine if the change set\n@@ -61,10 +69,8 @@ def applyChanges(self, ob):\n         pass\n \n     def filenameTitle(self, filename):\n-        """Translate the filename leading text\n-        """\n-        msg = _(u\'Filename: ${filename}\',\n-                mapping={\'filename\': filename})\n+        """Translate the filename leading text"""\n+        msg = _("Filename: ${filename}", mapping={"filename": filename})\n         return translate(msg)\n \n \n@@ -77,7 +83,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n         # as `subject` attribute but the schema name is `subjects`\n         # see plone.app.dexterity.behaviors.metadata.ICategorization and\n         # plone.dexterity.content.DexterityContent\n-        if field == \'subjects\':\n+        if field == "subjects":\n             value = ob.Subject()\n         else:\n             value = getattr(ob, field, None)\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex bb16253..b1b6100 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n@@ -9,7 +8,7 @@\n class BinaryDiff(FieldDiff):\n     """Simple binary difference"""\n \n-    meta_type = \'Binary Diff\'\n+    meta_type = "Binary Diff"\n     inlinediff_fmt = """\n <div class="%s">\n     <del>%s</del>\n@@ -33,8 +32,9 @@ def testChanges(self, ob):\n         """\n         value = _getValue(ob, self.field)\n         if not self.same and value != self.oldValue:\n-            raise ValueError(\'Conflict Error during merge\',\n-                             self.field, value, self.oldValue)\n+            raise ValueError(\n+                "Conflict Error during merge", self.field, value, self.oldValue\n+            )\n \n     def applyChanges(self, ob):\n         """Update the specified object with the difference"""\n@@ -46,13 +46,16 @@ def applyChanges(self, ob):\n     def inline_diff(self):\n         """Simple inline diff that just checks that the filename\n         has changed."""\n-        css_class = \'FilenameDiff\'\n+        css_class = "FilenameDiff"\n         html = []\n         if self.oldFilename != self.newFilename:\n             html.append(\n-                self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(html_escape(self.oldFilename)),\n-                                       self.filenameTitle(html_escape(self.newFilename))),\n+                self.inlinediff_fmt\n+                % (\n+                    css_class,\n+                    self.filenameTitle(html_escape(self.oldFilename)),\n+                    self.filenameTitle(html_escape(self.newFilename)),\n+                ),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 86691ca..7316b21 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n@@ -11,22 +10,20 @@\n class CMFDTHtmlDiff(TextDiff):\n     """Text difference"""\n \n-    meta_type = \'HTML Diff\'\n+    meta_type = "HTML Diff"\n \n     def inline_diff(self):\n         """Return a specialized diff for HTML"""\n-        a = \'\\n\'.join(self._parseField(self.oldValue,\n-                                       filename=self.oldFilename))\n-        b = \'\\n\'.join(self._parseField(self.newValue,\n-                                       filename=self.newFilename))\n+        a = "\\n".join(self._parseField(self.oldValue, filename=self.oldFilename))\n+        b = "\\n".join(self._parseField(self.newValue, filename=self.newFilename))\n         return htmldiff.htmldiff(html_safe(a), html_safe(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\n         if value is None:\n-            value = \'\'\n+            value = ""\n         else:\n-            value = getattr(value, \'raw\', value)\n+            value = getattr(value, "raw", value)\n         return TextDiff._parseField(self, value, filename)\n \n \ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex c984d29..936c1ef 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """CMFDiffTool.py\n \n    Calculate differences between content objects\n@@ -22,15 +21,15 @@\n class CMFDiffTool(UniqueObject, SimpleItem):\n     """ """\n \n-    id = \'portal_diff\'\n-    meta_type = \'CMF Diff Tool\'\n+    id = "portal_diff"\n+    meta_type = "CMF Diff Tool"\n \n     security = ClassSecurityInfo()\n \n-    manage_options = (({\'label\': \'Configure\', \'action\': \'manage_difftypes\'},\n-                      {\'label\': \'Overview\', \'action\': \'manage_overview\'},\n-                       ) + SimpleItem.manage_options\n-                      )\n+    manage_options = (\n+        {"label": "Configure", "action": "manage_difftypes"},\n+        {"label": "Overview", "action": "manage_overview"},\n+    ) + SimpleItem.manage_options\n \n     #  Internal attributes\n     _difftypes = {}\n@@ -38,8 +37,8 @@ class CMFDiffTool(UniqueObject, SimpleItem):\n     def __init__(self):\n         self._pt_diffs = {}\n \n-    security.declareProtected(ManagePortal, \'manage_difftypes\')  # NOQA\n-    manage_difftypes = PageTemplateFile(\'zpt/editCMFDiffTool\', globals())\n+    security.declareProtected(ManagePortal, "manage_difftypes")  # NOQA\n+    manage_difftypes = PageTemplateFile("zpt/editCMFDiffTool", globals())\n \n     def manage_editDiffFields(self, updates, REQUEST=None):\n         """Edit the portal type fields"""\n@@ -48,49 +47,48 @@ def manage_editDiffFields(self, updates, REQUEST=None):\n         del self._pt_diffs\n         self._pt_diffs = {}\n         for r in updates:\n-            if r.get(\'delete\', None):\n+            if r.get("delete", None):\n                 continue\n             self.setDiffField(r.pt_name, r.field, r.diff)\n \n         self._p_changed = 1\n \n         if REQUEST:\n-            return self.manage_difftypes(\n-                manage_tabs_message=\'Diff mappings updated\')\n+            return self.manage_difftypes(manage_tabs_message="Diff mappings updated")\n \n-    security.declareProtected(ManagePortal, \'listDiffTypes\')  # NOQA\n+    security.declareProtected(ManagePortal, "listDiffTypes")  # NOQA\n \n     def manage_addDiffField(self, pt_name, field, diff, REQUEST=None):\n         """Add a new diff field from the ZMI"""\n         self.setDiffField(pt_name, field, diff)\n         if REQUEST:\n-            return self.manage_difftypes(manage_tabs_message=\'Field added\')\n+            return self.manage_difftypes(manage_tabs_message="Field added")\n \n     def setDiffField(self, pt_name, field, diff):\n         """\n         Set the diff type for \'field\' on the portal type \'pt_name\' to \'diff\'\n         """\n         if pt_name not in self.portal_types.listContentTypes():\n-            raise BadRequest(\'Error: invalid portal type\')\n+            raise BadRequest("Error: invalid portal type")\n \n         elif not field:\n-            raise BadRequest(\'Error: no field specified\')\n+            raise BadRequest("Error: no field specified")\n \n         elif diff not in self.listDiffTypes():\n-            raise BadRequest(\'Error: invalid diff type\')\n+            raise BadRequest("Error: invalid diff type")\n \n         else:\n             self._pt_diffs.setdefault(pt_name, {})[field] = diff\n             self._p_changed = 1\n \n     #  Interface fulfillment\n-    security.declareProtected(ManagePortal, \'listDiffTypes\')  # NOQA\n+    security.declareProtected(ManagePortal, "listDiffTypes")  # NOQA\n \n     def listDiffTypes(self):\n         """List the names of the registered difference types"""\n         return list(self._difftypes)\n \n-    security.declareProtected(ManagePortal, \'getDiffType\')  # NOQA\n+    security.declareProtected(ManagePortal, "getDiffType")  # NOQA\n \n     def getDiffType(self, diff):\n         """Return a class corresponding to the specified diff type.\n@@ -98,7 +96,7 @@ def getDiffType(self, diff):\n         interface"""\n         return self._difftypes.get(diff, None)\n \n-    security.declareProtected(ManagePortal, \'setDiffForPortalType\')  # NOQA\n+    security.declareProtected(ManagePortal, "setDiffForPortalType")  # NOQA\n \n     def setDiffForPortalType(self, pt_name, mapping):\n         """Set the difference type(self, s) for the specific portal type\n@@ -110,7 +108,7 @@ def setDiffForPortalType(self, pt_name, mapping):\n         self._pt_diffs[pt_name] = mapping.copy()\n         self._p_changed = 1\n \n-    security.declareProtected(ManagePortal, \'getDiffForPortalType\')  # NOQA\n+    security.declareProtected(ManagePortal, "getDiffForPortalType")  # NOQA\n \n     def getDiffForPortalType(self, pt_name):\n         """Returns a dictionary where each key is an attribute or\n@@ -119,7 +117,7 @@ def getDiffForPortalType(self, pt_name):\n         # Return a copy so we don\'t have to worry about the user changing it\n         return self._pt_diffs.get(pt_name, {}).copy()\n \n-    security.declarePublic(\'computeDiff\')  # NOQA\n+    security.declarePublic("computeDiff")  # NOQA\n \n     def computeDiff(self, ob1, ob2, id1=None, id2=None):\n         """Compute the differences between two objects and return the\n@@ -127,7 +125,7 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):\n         IDifference interface"""\n \n         # Try to get the portal type from obj1 first.  If that fails, use obj2\n-        pt_name = \'\'\n+        pt_name = ""\n         try:\n             pt_name = aq_base(ob1).portal_type\n         except AttributeError:\n@@ -143,19 +141,19 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):\n             klass = self._difftypes[klass_name]\n             f_diff = klass(ob1, ob2, field, id1=id1, id2=id2)\n             # handle compound diff types\n-            if safe_hasattr(f_diff, \'__getitem__\'):\n+            if safe_hasattr(f_diff, "__getitem__"):\n                 diffs.extend(f_diff)\n             else:\n                 diffs.append(f_diff)\n         return diffs\n \n-    security.declarePublic(\'createChangeSet\')  # NOQA\n+    security.declarePublic("createChangeSet")  # NOQA\n \n     def createChangeSet(self, ob1, ob2, id1=None, id2=None):\n         """Returns a ChangeSet object that represents the differences\n         between ob1 and ob2 (ie. ob2 - ob1) ."""\n         # FIXME: Pick a better ID\n-        cs = BaseChangeSet(\'Changes\').__of__(self)\n+        cs = BaseChangeSet("Changes").__of__(self)\n         cs.computeDiff(ob1, ob2, id1=id1, id2=id2)\n         return aq_base(cs)\n \n@@ -179,4 +177,4 @@ def unregisterDiffType(klass):\n \n \n InitializeClass(CMFDiffTool)\n-registerToolInterface(\'portal_diff\', IDiffTool)\n+registerToolInterface("portal_diff", IDiffTool)\ndiff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py\nindex 0bdf2cb..9d4d879 100644\n--- a/Products/CMFDiffTool/ChangeSet.py\n+++ b/Products/CMFDiffTool/ChangeSet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # ChangeSet.py - Zope object representing the differences between\n # objects\n@@ -20,17 +19,18 @@\n import logging\n \n \n-logger = logging.getLogger(\'CMFDiffTool\')\n+logger = logging.getLogger("CMFDiffTool")\n \n \n @implementer(IChangeSet)\n class BaseChangeSet(Implicit):\n     """A ChangeSet represents the set of differences between two objects"""\n+\n     # This should really not be needed just for same, we should use a method\n     __allow_access_to_unprotected_subobjects__ = 1\n     security = ClassSecurityInfo()\n \n-    def __init__(self, id, title=\'\'):\n+    def __init__(self, id, title=""):\n         """ChangeSet constructor"""\n         self.id = id\n         self.title = title\n@@ -42,7 +42,7 @@ def __init__(self, id, title=\'\'):\n         self._changesets = {}\n         self.recursive = 0\n \n-    security.declarePublic(\'getId\')  # NOQA\n+    security.declarePublic("getId")  # NOQA\n \n     def getId(self):\n         """ChangeSet id"""\n@@ -55,13 +55,12 @@ def _isSame(self):\n         """Returns true if there are no differences between the two objects"""\n         return reduce(lambda x, y: x and y, [d.same for d in self._diffs], 1)\n \n-    security.declarePublic(\'same\')  # NOQA\n+    security.declarePublic("same")  # NOQA\n     same = ComputedAttribute(_isSame)\n \n-    security.declarePublic(\'computeDiff\')  # NOQA\n+    security.declarePublic("computeDiff")  # NOQA\n \n-    def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n-                    id1=None, id2=None):\n+    def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):\n         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).\n \n         The results can be accessed through getDiffs()"""\n@@ -76,7 +75,7 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n         self._changed = []\n         self._changesets = {}\n \n-        purl = getToolByName(self, \'portal_url\', None)\n+        purl = getToolByName(self, "portal_url", None)\n         if purl is not None:\n             try:\n                 self.ob1_path = purl.getRelativeContentPath(ob1)\n@@ -84,12 +83,10 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n             except AttributeError:\n                 # one or both of the objects may not have a path\n                 return\n-        diff_tool = getToolByName(self, \'portal_diff\')\n+        diff_tool = getToolByName(self, "portal_diff")\n         self._diffs = diff_tool.computeDiff(ob1, ob2, id1=id1, id2=id2)\n \n-        if (recursive and\n-                ob1.isPrincipiaFolderish and\n-                ob2.isPrincipiaFolderish):\n+        if recursive and ob1.isPrincipiaFolderish and ob2.isPrincipiaFolderish:\n             self.recursive = 1\n             ids1 = set(ob1.objectIds())\n             ids2 = set(ob2.objectIds())\n@@ -120,12 +117,12 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,\n                 self._addSubSet(id, ob1, ob2, exclude, id1, id2)\n \n     def _addSubSet(self, id, ob1, ob2, exclude, id1, id2):\n-        cs = BaseChangeSet(id, title=\'Changes to: %s\' % id)\n+        cs = BaseChangeSet(id, title="Changes to: %s" % id)\n         cs = cs.__of__(self)\n         cs.computeDiff(ob1[id], ob2[id], exclude=exclude, id1=id1, id2=id2)\n         self._changesets[id] = aq_base(cs)\n \n-    security.declarePublic(\'testChanges\')  # NOQA\n+    security.declarePublic("testChanges")  # NOQA\n \n     def testChanges(self, ob):\n         """\n@@ -140,7 +137,7 @@ def testChanges(self, ob):\n             child = ob[id]\n             cs.testChanges(child)\n \n-    security.declarePublic(\'applyChanges\')  # NOQA\n+    security.declarePublic("applyChanges")  # NOQA\n \n     def applyChanges(self, ob):\n         """Apply the change set to the specified object"""\n@@ -159,7 +156,7 @@ def applyChanges(self, ob):\n             child = ob[id]\n             cs.applyChanges(child)\n \n-    security.declarePublic(\'getDiffs\')  # NOQA\n+    security.declarePublic("getDiffs")  # NOQA\n \n     def getDiffs(self):\n         """\n@@ -170,18 +167,18 @@ def getDiffs(self):\n         """\n         return self._diffs\n \n-    security.declarePublic(\'getSubDiffs\')  # NOQA\n+    security.declarePublic("getSubDiffs")  # NOQA\n \n     def getSubDiffs(self):\n         """If the ChangeSet was computed recursively, returns a list\n-           of ChangeSet objects representing subjects differences\n+        of ChangeSet objects representing subjects differences\n \n-           Each ChangeSet will have the same ID as the objects whose\n-           difference it represents.\n-           """\n+        Each ChangeSet will have the same ID as the objects whose\n+        difference it represents.\n+        """\n         return [self[id] for id in self._changed]\n \n-    security.declarePublic(\'getAddedItems\')  # NOQA\n+    security.declarePublic("getAddedItems")  # NOQA\n \n     def getAddedItems(self):\n         """If the ChangeSet was computed recursively, returns the list\n@@ -191,7 +188,7 @@ def getAddedItems(self):\n         """\n         return list(self._added)\n \n-    security.declarePublic(\'getRemovedItems\')  # NOQA\n+    security.declarePublic("getRemovedItems")  # NOQA\n \n     def getRemovedItems(self):\n         """If the ChangeSet was computed recursively, returns the list\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 8d40183..7055f29 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -9,7 +9,7 @@\n class FieldDiff(BaseDiff):\n     """Text difference"""\n \n-    meta_type = \'Field Diff\'\n+    meta_type = "Field Diff"\n \n     same_fmt = """<div class="%s">%s</div>"""\n     inlinediff_fmt = """<div class="%s">\n@@ -41,8 +41,9 @@ def testChanges(self, ob):\n         """\n         value = _getValue(ob, self.field)\n         if not self.same and value != self.oldValue:\n-            raise ValueError(\'Conflict Error during merge\',\n-                             self.field, value, self.oldValue)\n+            raise ValueError(\n+                "Conflict Error during merge", self.field, value, self.oldValue\n+            )\n \n     def applyChanges(self, ob):\n         """Update the specified object with the difference"""\n@@ -57,43 +58,43 @@ def ndiff(self):\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 plain_replace(a, alo, ahi, b, blo, bhi, r)\n-            elif tag == \'delete\':\n-                dump(\'-\', a, alo, ahi, r)\n-            elif tag == \'insert\':\n-                dump(\'+\', b, blo, bhi, r)\n-            elif tag == \'equal\':\n-                dump(\' \', a, alo, ahi, r)\n+            elif tag == "delete":\n+                dump("-", a, alo, ahi, r)\n+            elif tag == "insert":\n+                dump("+", b, blo, bhi, r)\n+            elif tag == "equal":\n+                dump(" ", a, alo, ahi, r)\n             else:\n-                raise ValueError(\'unknown tag %r\', tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %r", tag)\n+        return "\\n".join(r)\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         inlinediff_fmt = self.inlinediff_fmt\n         same_fmt = self.same_fmt\n         r = []\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), ""))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n-            elif tag == \'delete\':\n+                    r.append(inlinediff_fmt % (css_class, "", html_escape(b[i])))\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n-            elif tag == \'insert\':\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), ""))\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n-            elif tag == \'equal\':\n+                    r.append(inlinediff_fmt % (css_class, "", html_escape(b[i])))\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     r.append(same_fmt % (css_class, html_escape(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n-        return \'\\n\'.join(r)\n+        return "\\n".join(r)\n \n \n InitializeClass(FieldDiff)\n@@ -101,7 +102,7 @@ def inline_diff(self):\n \n def dump(tag, x, lo, hi, r):\n     for i in range(lo, hi):\n-        r.append(tag + \' %s\' % x[i])\n+        r.append(tag + " %s" % x[i])\n \n \n def plain_replace(a, alo, ahi, b, blo, bhi, r):\n@@ -109,8 +110,8 @@ def plain_replace(a, alo, ahi, b, blo, bhi, r):\n     # dump the shorter block first -- reduces the burden on short-term\n     # memory if the blocks are of very different sizes\n     if bhi - blo < ahi - alo:\n-        dump(\'+\', b, blo, bhi, r)\n-        dump(\'-\', a, alo, ahi, r)\n+        dump("+", b, blo, bhi, r)\n+        dump("-", a, alo, ahi, r)\n     else:\n-        dump(\'-\', a, alo, ahi, r)\n-        dump(\'+\', b, blo, bhi, r)\n+        dump("-", a, alo, ahi, r)\n+        dump("+", b, blo, bhi, r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex 420d2fa..f041ebf 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -9,12 +9,22 @@\n class ListDiff(FieldDiff):\n     """Text difference"""\n \n-    meta_type = \'List Diff\'\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        FieldDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                           field_label, schemata)\n+    meta_type = "List Diff"\n+\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        FieldDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         self._vocabulary = None\n \n         # Tries to find a vocabulary. First we need to find an object and\n@@ -27,8 +37,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n                 # Binding the field to an object will construct the vocabulary\n                 # using a factory if necessary.\n                 try:\n-                    self._vocabulary = field_instance.value_type.bind(obj).\\\n-                        vocabulary\n+                    self._vocabulary = field_instance.value_type.bind(obj).vocabulary\n                 except Exception:\n                     pass\n \n@@ -38,7 +47,7 @@ def chk_hashable(self, value):\n         try:\n             hash(value)\n         except TypeError as e:\n-            value = repr(e) + \': \' + repr(value)\n+            value = repr(e) + ": " + repr(value)\n         return value\n \n     def _parseField(self, value, filename=None):\n@@ -56,8 +65,7 @@ def _parseField(self, value, filename=None):\n \n \n class RelationListDiff(FieldDiff):\n-\n-    meta_type = \'Related List Diff\'\n+    meta_type = "Related List Diff"\n \n     same_fmt = """<div class="%s"><a target="_blank" href="%s">%s</a></div>"""\n     inlinediff_fmt = """<div class="%s">\n@@ -65,93 +73,97 @@ class RelationListDiff(FieldDiff):\n     </div>"""\n \n     def _parseField(self, value, filename=None):\n-        """ Take RelationValues and just return the target UID\n-            so we can compare """\n+        """Take RelationValues and just return the target UID\n+        so we can compare"""\n \n         if filename is None:\n             # Since we only want to compare a single field, make a\n             # one-item list out of it\n-            return [\'/\'.join(val.getPhysicalPath()) for val in value]\n+            return ["/".join(val.getPhysicalPath()) for val in value]\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                [\'/\'.join(val.getPhysicalPath()) for val in value],\n+                ["/".join(val.getPhysicalPath()) for val in value],\n             ]\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         inlinediff_fmt = self.inlinediff_fmt\n         same_fmt = self.same_fmt\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_sub\', obj_url, obj_title))\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title)\n+                    )\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_add\', obj_url, obj_title))\n-            elif tag == \'delete\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title)\n+                    )\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_sub\', obj_url, obj_title))\n-            elif tag == \'insert\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title)\n+                    )\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n-                    r.append(inlinediff_fmt %\n-                             (css_class, \'diff_add\', obj_url, obj_title))\n-            elif tag == \'equal\':\n+                    r.append(\n+                        inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title)\n+                    )\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\n-                raise ValueError(\'unknown tag %s\' % tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %s" % tag)\n+        return "\\n".join(r)\n \n     def ndiff(self):\n-        """ Return a textual diff """\n+        """Return a textual diff"""\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n-            if tag == \'replace\':\n+            if tag == "replace":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'- %s\' % obj_url)\n+                    r.append("- %s" % obj_url)\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'+ %s\' % obj_url)\n-            elif tag == \'delete\':\n+                    r.append("+ %s" % obj_url)\n+            elif tag == "delete":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'- %s\' % obj_url)\n-            elif tag == \'insert\':\n+                    r.append("- %s" % obj_url)\n+            elif tag == "insert":\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'+ %s\' % obj_url)\n-            elif tag == \'equal\':\n+                    r.append("+ %s" % obj_url)\n+            elif tag == "equal":\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append(\'  %s\' % obj_url)\n+                    r.append("  %s" % obj_url)\n             else:\n-                raise ValueError(\'unknown tag %r\', tag)\n-        return \'\\n\'.join(r)\n+                raise ValueError("unknown tag %r", tag)\n+        return "\\n".join(r)\n \n \n InitializeClass(ListDiff)\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 52d190d..1bade1d 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -12,7 +12,7 @@\n class TextDiff(FieldDiff):\n     """Text difference"""\n \n-    meta_type = \'Lines Diff\'\n+    meta_type = "Lines Diff"\n     inlinediff_fmt = """\n <div class="%s">\n     <del>%s</del>\n@@ -23,7 +23,7 @@ class TextDiff(FieldDiff):\n     def _parseField(self, value, filename=None):\n         """Parse a field value in preparation for diffing"""\n         if value is None:\n-            value = \'\'\n+            value = ""\n         if filename is None:\n             # Split the text into a list for diffs\n             return value.splitlines()\n@@ -45,27 +45,26 @@ def html_diff(self, context=True, wrapcolumn=40):\n         """Return an HTML table showing differences"""\n         # difflib is not Unicode-aware, so we need to force everything to\n         # utf-8 manually\n-        a = [safe_unicode(i) for i in\n-             self._parseField(self.oldValue, filename=self.oldFilename)]\n-        b = [safe_unicode(i) for i in\n-             self._parseField(self.newValue, filename=self.newFilename)]\n+        a = [\n+            safe_unicode(i)\n+            for i in self._parseField(self.oldValue, filename=self.oldFilename)\n+        ]\n+        b = [\n+            safe_unicode(i)\n+            for i in self._parseField(self.newValue, filename=self.newFilename)\n+        ]\n         vis_diff = difflib.HtmlDiff(wrapcolumn=wrapcolumn)\n         diff = vis_diff.make_table(\n-            a,\n-            b,\n-            safe_unicode(self.id1),\n-            safe_unicode(self.id2),\n-            context=context)\n+            a, b, safe_unicode(self.id1), safe_unicode(self.id2), context=context\n+        )\n         return diff\n \n     def inline_diff(self):\n         """Simple inline diff that just assumes that either the filename\n         has changed, or the text has been completely replaced."""\n-        css_class = \'InlineDiff\'\n-        old_attr = self._parseField(self.oldValue,\n-                                    filename=self.oldFilename)\n-        new_attr = self._parseField(self.newValue,\n-                                    filename=self.newFilename)\n+        css_class = "InlineDiff"\n+        old_attr = self._parseField(self.oldValue, filename=self.oldFilename)\n+        new_attr = self._parseField(self.newValue, filename=self.newFilename)\n         if old_attr:\n             old_fname = old_attr.pop(0)\n         else:\n@@ -79,8 +78,12 @@ def inline_diff(self):\n         html = []\n         if old_fname != new_fname:\n             html.append(\n-                self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       html_escape(old_fname), html_escape(new_fname)),\n+                self.inlinediff_fmt\n+                % (\n+                    "%s FilenameDiff" % css_class,\n+                    html_escape(old_fname),\n+                    html_escape(new_fname),\n+                ),\n             )\n         if a != b:\n             html.append(\n@@ -102,11 +105,11 @@ class AsTextDiff(TextDiff):\n \n     def _parseField(self, value, filename=None):\n         if value is None:\n-            value = \'\'\n+            value = ""\n \n         # In tests translation is not available, so we account for this\n         # case here.\n-        translate = getattr(getSite(), \'translate\', None)\n+        translate = getattr(getSite(), "translate", None)\n         if translate is not None:\n             value = translate(_(value))\n \ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex fdd9af6..33fd937 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n """Initialize CMFDiffTool Product"""\n # Set up a MessageFactory for the cmfdifftool domain\n from zope.i18nmessageid import MessageFactory\n \n \n-CMFDiffToolMessageFactory = MessageFactory(\'plone\')\n+CMFDiffToolMessageFactory = MessageFactory("plone")\n \n from Products.CMFCore.utils import ToolInit  # NOQA\n from Products.CMFDiffTool import BinaryDiff  # NOQA\n@@ -41,11 +40,12 @@\n     CMFDiffTool.registerDiffType(choicediff.ChoiceDiff)\n     CMFDiffTool.registerDiffType(dexteritydiff.DexterityCompoundDiff)\n \n-tools = (CMFDiffTool.CMFDiffTool, )\n+tools = (CMFDiffTool.CMFDiffTool,)\n \n \n def initialize(context):\n-    ToolInit(\'CMF Diff Tool\',\n-             tools=tools,\n-             icon=\'tool.gif\',\n-             ).initialize(context)\n+    ToolInit(\n+        "CMF Diff Tool",\n+        tools=tools,\n+        icon="tool.gif",\n+    ).initialize(context)\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex 0c69fcd..f2ac539 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n@@ -52,10 +51,20 @@ class ChoiceDiff(AsTextDiff):\n     user-friendlier inline diff to the user.\n     """\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        AsTextDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                            field_label, schemata)\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        AsTextDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         self._vocabulary = None\n \n         # Tries to find a vocabulary. First we need to find an object and\n@@ -63,8 +72,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n         obj = obj1 if (obj1 is not None) else obj2\n         field_name = field_name or field\n         field_instance = (\n-            get_field_object(obj, field_name) if (obj and field_name)\n-            else None\n+            get_field_object(obj, field_name) if (obj and field_name) else None\n         )\n \n         if field_instance is not None:\n@@ -74,7 +82,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n \n     def _parseField(self, value, filename=None):\n         if value is None:\n-            value = \'\'\n+            value = ""\n         elif self._vocabulary is not None:\n             value = title_or_value(self._vocabulary, value)\n \ndiff --git a/Products/CMFDiffTool/configure.zcml b/Products/CMFDiffTool/configure.zcml\nindex 13d2a4f..7d308fb 100644\n--- a/Products/CMFDiffTool/configure.zcml\n+++ b/Products/CMFDiffTool/configure.zcml\n@@ -2,6 +2,6 @@\n \n   <include package=".exportimport" />\n \n-  <include file="profiles.zcml"/>\n+  <include file="profiles.zcml" />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex 71f3b84..dc72640 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.textfield import RichText\n from plone.dexterity.browser.edit import DefaultEditForm\n from Products.CMFDiffTool.choicediff import ChoiceDiff\n@@ -31,10 +30,10 @@\n     ((RelationList,), RelationListDiff),\n     ((Iterable, Container), ListDiff),\n     ((Date, Datetime, Time), AsTextDiff),\n-    ((Bool, ), AsTextDiff),\n-    ((Choice, ), ChoiceDiff),\n+    ((Bool,), AsTextDiff),\n+    ((Choice,), ChoiceDiff),\n     ((Text, Bytes), TextDiff),\n-    ((RichText, ), CMFDTHtmlDiff),\n+    ((RichText,), CMFDTHtmlDiff),\n ]\n \n """\n@@ -64,14 +63,14 @@\n """\n \n # TODO: provide an easier way to exclude fields.\n-EXCLUDED_FIELDS = (\'modification_date\', \'IVersionable.changeNote\')\n+EXCLUDED_FIELDS = ("modification_date", "IVersionable.changeNote")\n """Names of fields not to compare."""\n \n \n-class DexterityCompoundDiff(object):\n+class DexterityCompoundDiff:\n     """text difference for Dexterity"""\n \n-    meta_type = \'Compound Diff for Dexterity types\'\n+    meta_type = "Compound Diff for Dexterity types"\n \n     def __init__(self, obj1, obj2, field, id1=None, id2=None):\n         self.id1 = id1 or obj1.getId()\n@@ -98,8 +97,9 @@ def _diff(self, obj1, obj2):\n         diffs = []\n         for field, field_name in self._compute_fields_order(obj1):\n             if field_name not in EXCLUDED_FIELDS:\n-                schema_name = \'.\' in field_name and \\\n-                    field_name.split(\'.\')[0] or \'default\'\n+                schema_name = (\n+                    "." in field_name and field_name.split(".")[0] or "default"\n+                )\n                 diffs.append(self._diff_field(obj1, obj2, field, schema_name))\n \n         return diffs\n@@ -128,14 +128,14 @@ def _get_diff_type(self, field):\n         Return a subclass of `Products.CMFEditions.BaseDiff.BaseDiff` suitable\n         for the given `zope.schema.Field` instance.\n         """\n-        diff_type = self._compute_diff_type(\n-            field, FIELDS_AND_DIFF_TYPES_RELATION)\n+        diff_type = self._compute_diff_type(field, FIELDS_AND_DIFF_TYPES_RELATION)\n \n         if diff_type is ListDiff:\n             return (\n                 self._compute_diff_type(\n-                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION) or\n-                diff_type\n+                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION\n+                )\n+                or diff_type\n             )\n \n         return diff_type or FALL_BACK_DIFF_TYPE\n@@ -155,7 +155,7 @@ def _compute_diff_type(self, field, relation):\n             subclass.\n         """\n \n-        for (field_types, diff_type) in relation:\n+        for field_types, diff_type in relation:\n             if isinstance(field, field_types):\n                 return diff_type\n \n@@ -174,7 +174,8 @@ def _compute_fields_order(self, obj):\n         all_fields += [(form.fields[name].field, name) for name in form.fields]\n         if form.groups:\n             for group in form.groups:\n-                all_fields += [(group.fields[name].field, name)\n-                               for name in group.fields]\n+                all_fields += [\n+                    (group.fields[name].field, name) for name in group.fields\n+                ]\n \n         return all_fields\ndiff --git a/Products/CMFDiffTool/exportimport/__init__.py b/Products/CMFDiffTool/exportimport/__init__.py\nindex c308b2b..c3b3328 100644\n--- a/Products/CMFDiffTool/exportimport/__init__.py\n+++ b/Products/CMFDiffTool/exportimport/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n # Make a package\ndiff --git a/Products/CMFDiffTool/exportimport/configure.zcml b/Products/CMFDiffTool/exportimport/configure.zcml\nindex 9563ead..14426a5 100644\n--- a/Products/CMFDiffTool/exportimport/configure.zcml\n+++ b/Products/CMFDiffTool/exportimport/configure.zcml\n@@ -1,29 +1,31 @@\n <configure\n-   xmlns="http://namespaces.zope.org/zope"\n-   xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-   i18n_domain="cmf"\n-   >\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    i18n_domain="cmf"\n+    >\n \n   <genericsetup:importStep\n       name="difftool"\n-      handler="Products.CMFDiffTool.exportimport.difftool.importDiffTool"\n       title="Diff Tool"\n-      description="Import CMFDiffTool settings">\n+      description="Import CMFDiffTool settings"\n+      handler="Products.CMFDiffTool.exportimport.difftool.importDiffTool"\n+      >\n     <depends name="toolset" />\n     <depends name="componentregistry" />\n   </genericsetup:importStep>\n \n   <genericsetup:exportStep\n       name="difftool"\n-      handler="Products.CMFDiffTool.exportimport.difftool.exportDiffTool"\n       title="Diff Tool"\n-      description="Export CMFDiffTool settings"/>\n+      description="Export CMFDiffTool settings"\n+      handler="Products.CMFDiffTool.exportimport.difftool.exportDiffTool"\n+      />\n \n   <adapter\n-     factory=".difftool.DiffToolXMLAdapter"\n-     provides="Products.GenericSetup.interfaces.IBody"\n-     for="Products.CMFDiffTool.interfaces.IDiffTool\n-          Products.GenericSetup.interfaces.ISetupEnviron"\n-     />\n+      factory=".difftool.DiffToolXMLAdapter"\n+      provides="Products.GenericSetup.interfaces.IBody"\n+      for="Products.CMFDiffTool.interfaces.IDiffTool\n+           Products.GenericSetup.interfaces.ISetupEnviron"\n+      />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/exportimport/difftool.py b/Products/CMFDiffTool/exportimport/difftool.py\nindex bd4281a..e11e37f 100644\n--- a/Products/CMFDiffTool/exportimport/difftool.py\n+++ b/Products/CMFDiffTool/exportimport/difftool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.interfaces import IDiffTool\n from Products.GenericSetup.utils import exportObjects\n@@ -9,18 +8,16 @@\n \n @implementer(IDiffTool)\n class DiffToolXMLAdapter(XMLAdapterBase):\n-    \'\'\'In- and exporter for DiffTool.\n-    \'\'\'\n+    """In- and exporter for DiffTool."""\n \n-    name = \'diff_tool\'\n+    name = "diff_tool"\n \n     def _exportNode(self):\n-        \'\'\'Export the object as a DOM node.\n-        \'\'\'\n-        node = self._doc.createElement(\'object\')\n+        """Export the object as a DOM node."""\n+        node = self._doc.createElement("object")\n         node.appendChild(self._extractDiffToolSettings())\n \n-        self._logger.info(\'DiffTool settings exported.\')\n+        self._logger.info("DiffTool settings exported.")\n         return node\n \n     def _importNode(self, node):\n@@ -28,58 +25,56 @@ def _importNode(self, node):\n             self._purgeDiffToolSettings()\n \n         self._initDiffToolSettings(node)\n-        self._logger.info(\'DiffTool settings imported.\')\n+        self._logger.info("DiffTool settings imported.")\n \n     def _purgeDiffToolSettings(self):\n         self.context.manage_editDiffFields({})\n \n     def _initDiffToolSettings(self, node):\n         for child in node.childNodes:\n-            if child.nodeName == \'difftypes\':\n-                for type_entry in child.getElementsByTagName(\'type\'):\n-                    ptype = type_entry.getAttribute(\'portal_type\')\n+            if child.nodeName == "difftypes":\n+                for type_entry in child.getElementsByTagName("type"):\n+                    ptype = type_entry.getAttribute("portal_type")\n                     fields = {}\n-                    for field in type_entry.getElementsByTagName(\'field\'):\n-                        name = field.getAttribute(\'name\')\n-                        diff = field.getAttribute(\'difftype\')\n+                    for field in type_entry.getElementsByTagName("field"):\n+                        name = field.getAttribute("name")\n+                        diff = field.getAttribute("difftype")\n                         fields[name] = diff\n                         self.context.setDiffForPortalType(ptype, fields)\n \n     def _extractDiffToolSettings(self):\n-        node = self._doc.createElement(\'difftypes\')\n-        ttool = getToolByName(self.context, \'portal_types\')\n+        node = self._doc.createElement("difftypes")\n+        ttool = getToolByName(self.context, "portal_types")\n         for ptype in ttool.listContentTypes():\n             diffs = self.context.getDiffForPortalType(ptype)\n             if diffs:\n-                child = self._doc.createElement(\'type\')\n-                child.setAttribute(\'portal_type\', ptype)\n+                child = self._doc.createElement("type")\n+                child.setAttribute("portal_type", ptype)\n                 node.appendChild(child)\n             for field_name, diff in diffs.items():\n-                field = self._doc.createElement(\'field\')\n-                field.setAttribute(\'name\', field_name)\n-                field.setAttribute(\'difftype\', diff)\n+                field = self._doc.createElement("field")\n+                field.setAttribute("name", field_name)\n+                field.setAttribute("difftype", diff)\n                 child.appendChild(field)\n         return node\n \n \n def importDiffTool(context):\n-    \'\'\'Import Factory Tool configuration.\n-    \'\'\'\n+    """Import Factory Tool configuration."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_diff\', None)\n+    tool = getToolByName(site, "portal_diff", None)\n \n     if tool is not None:\n-        importObjects(tool, \'\', context)\n+        importObjects(tool, "", context)\n \n \n def exportDiffTool(context):\n-    \'\'\'Export Factory Tool configuration.\n-    \'\'\'\n+    """Export Factory Tool configuration."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_diff\', None)\n+    tool = getToolByName(site, "portal_diff", None)\n     if tool is None:\n-        logger = context.getLogger(\'difftool\')\n-        logger.info(\'Nothing to export.\')\n+        logger = context.getLogger("difftool")\n+        logger.info("Nothing to export.")\n         return\n \n-    exportObjects(tool, \'\', context)\n+    exportObjects(tool, "", context)\ndiff --git a/Products/CMFDiffTool/interfaces/IChangeSet.py b/Products/CMFDiffTool/interfaces/IChangeSet.py\nindex 21a9201..4e0f986 100644\n--- a/Products/CMFDiffTool/interfaces/IChangeSet.py\n+++ b/Products/CMFDiffTool/interfaces/IChangeSet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \ndiff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex 481a759..c445a22 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Interface definitions\n from zope.interface import Attribute\n from zope.interface import Interface\n@@ -6,9 +5,9 @@\n \n class IDiffTool(Interface):\n     """An interface to compute object differences via pluggable\n-       difference engine"""\n+    difference engine"""\n \n-    id = Attribute(\'id\', \'Must be set to "portal_diff"\')\n+    id = Attribute("id", \'Must be set to "portal_diff"\')\n \n     def listDiffTypes():\n         """List the names of the available difference types"""\n@@ -41,30 +40,33 @@ class IDifference(Interface):\n     """An interface for interacting with the difference between two\n     objects"""\n \n-    meta_type = Attribute(\'title\', \'A human readable name for the diff type\')\n-    field = Attribute(\'field\', \'The name of the field being compared\')\n-    same = Attribute(\'same\',\n-                     \'True if the fields are the "same" \'\n-                     \'(whatever that means for this difference)\')\n-    oldValue = Attribute(\'oldValue\', \'The old field value being compared\')\n-    newValue = Attribute(\'newValue\', \'The new field value being compared\')\n-    oldFilename = Attribute(\'oldFilename\',\n-                            \'The old filename for the field being compared\')\n-    newFilename = Attribute(\'newFilename\',\n-                            \'The new filename for the field being compared\')\n+    meta_type = Attribute("title", "A human readable name for the diff type")\n+    field = Attribute("field", "The name of the field being compared")\n+    same = Attribute(\n+        "same",\n+        \'True if the fields are the "same" \'\n+        "(whatever that means for this difference)",\n+    )\n+    oldValue = Attribute("oldValue", "The old field value being compared")\n+    newValue = Attribute("newValue", "The new field value being compared")\n+    oldFilename = Attribute(\n+        "oldFilename", "The old filename for the field being compared"\n+    )\n+    newFilename = Attribute(\n+        "newFilename", "The new filename for the field being compared"\n+    )\n \n     def testChanges(ob):\n         """Test the specified object to determine if the change set will apply cleanly.\n \n-        Returns None if there would be no erros\n+        Returns None if there would be no errors\n         """\n \n     def applyChanges(ob):\n         """Update the specified object with the difference"""\n \n     def filenameTitle(self, filename):\n-        """Translate the filename leading text\n-        """\n+        """Translate the filename leading text"""\n \n \n class IStringDifference(IDifference):\n@@ -84,12 +86,12 @@ def getLineDiffs():\n class IChangeSet(Interface):\n     """And interface representing all of the differences between two objects"""\n \n-    same = Attribute(\'same\', \'True if the fields are the "same"\')\n+    same = Attribute("same", \'True if the fields are the "same"\')\n \n     def computeDiff(ob1, ob2, recursive=1, exclude=None):\n         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).\n \n-        If resursive is 1, compute differences between subobjects of\n+        If recursive is 1, compute differences between subobjects of\n         ob1 and ob2 as well, excluding any subobjects whose IDs are\n         listed in exclude\n \n@@ -98,7 +100,7 @@ def computeDiff(ob1, ob2, recursive=1, exclude=None):\n     def testChanges(ob):\n         """Test the specified object to determine if the change set will apply cleanly.\n \n-        Returns None if there would be no erros\n+        Returns None if there would be no errors\n         """\n \n     def applyChanges(ob):\n@@ -112,11 +114,11 @@ def getDiffs():\n \n     def getSubDiffs():\n         """If the ChangeSet was computed recursively, returns a list\n-           of ChangeSet objects representing subobject differences\n+        of ChangeSet objects representing subobject differences\n \n-           Each ChangeSet will have the same ID as the objects whose\n-           difference it represents.\n-           """\n+        Each ChangeSet will have the same ID as the objects whose\n+        difference it represents.\n+        """\n \n     def getAddedItems():\n         """If the ChangeSet was computed recursively, returns the list\ndiff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py\nindex 99c2115..56f7591 100644\n--- a/Products/CMFDiffTool/interfaces/portal_diff.py\n+++ b/Products/CMFDiffTool/interfaces/portal_diff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \ndiff --git a/Products/CMFDiffTool/libs/__init__.py b/Products/CMFDiffTool/libs/__init__.py\nindex 40a96af..e69de29 100644\n--- a/Products/CMFDiffTool/libs/__init__.py\n+++ b/Products/CMFDiffTool/libs/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex 7d34b53..107e71f 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -21,13 +21,12 @@ def htmlEncode(s, esc=escape):\n     return esc(s, 1)\n \n \n-commentRE = re.compile(r\'<!--.*?-->\', re.S)\n-tagRE = re.compile(r\'<.*?>\', re.S)\n-headRE = re.compile(r\'<\\s*head\\s*>\', re.S | re.I)\n+commentRE = re.compile(r"<!--.*?-->", re.S)\n+tagRE = re.compile(r"<.*?>", re.S)\n+headRE = re.compile(r"<\\s*head\\s*>", re.S | re.I)\n \n \n class HTMLMatcher(SequenceMatcher):\n-\n     def __init__(self, source1, source2):\n         SequenceMatcher.__init__(self, None, source1, source2)\n \n@@ -45,7 +44,7 @@ def splitTags(self, t):\n             if not match:\n                 result.append(t[pos:])\n                 break\n-            result.append(t[pos:match.start()])\n+            result.append(t[pos : match.start()])\n             result.append(match.group(0))\n             pos = match.end()\n         return result\n@@ -54,11 +53,11 @@ def splitWords(self, t):\n         return t.strip().split()\n \n     def splitHTML(self, t):\n-        t = commentRE.sub(\'\', t)\n+        t = commentRE.sub("", t)\n         r = self.splitTags(t)\n         result = []\n         for item in r:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 result.append(item)\n             else:\n                 result.extend(self.splitWords(item))\n@@ -71,13 +70,13 @@ def htmlDiff(self, addStylesheet=False):\n         out = StringIO()\n         #  print [o[0] for o in opcodes]\n         for tag, i1, i2, j1, j2 in opcodes:\n-            if tag == \'equal\':\n+            if tag == "equal":\n                 for item in a[i1:i2]:\n                     out.write(item)\n-                    out.write(\' \')\n-            if tag == \'delete\' or tag == \'replace\':\n+                    out.write(" ")\n+            if tag == "delete" or tag == "replace":\n                 self.textDelete(a[i1:i2], out)\n-            if tag == \'insert\' or tag == \'replace\':\n+            if tag == "insert" or tag == "replace":\n                 self.textInsert(b[j1:j2], out)\n         html = out.getvalue()\n         out.close()\n@@ -88,7 +87,7 @@ def htmlDiff(self, addStylesheet=False):\n     def textDelete(self, lst, out):\n         inSpan = False\n         for item in lst:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 if inSpan:\n                     out.write(self.endDeleteText())\n                     inSpan = False\n@@ -98,36 +97,36 @@ def textDelete(self, lst, out):\n                     out.write(self.startDeleteText())\n                     inSpan = True\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n         if inSpan:\n             out.write(self.endDeleteText())\n \n     def textInsert(self, lst, out):\n         inSpan = False\n         for item in lst:\n-            if item.startswith(\'<\'):\n+            if item.startswith("<"):\n                 if inSpan:\n                     out.write(self.endInsertText())\n                     inSpan = False\n                 out.write(self.formatInsertTag(item))\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n             else:\n                 if not inSpan:\n                     out.write(self.startInsertText())\n                     inSpan = True\n                 out.write(item)\n-                out.write(\' \')\n+                out.write(" ")\n         if inSpan:\n             out.write(self.endInsertText())\n \n     def stylesheet(self):\n-        return \'\'\'\n+        return """\n .insert { background-color: #aaffaa }\n .delete { background-color: #ff8888 }\n .tagInsert { background-color: #007700; color: #ffffff }\n .tagDelete { background-color: #770000; color: #ffffff }\n-\'\'\'\n+"""\n \n     def addStylesheet(self, html, ss):\n         match = headRE.search(html)\n@@ -135,36 +134,35 @@ def addStylesheet(self, html, ss):\n             pos = match.end()\n         else:\n             pos = 0\n-        return (\'{0}<style type="text/css"><!--\\n{1}\\n--></style>{2}\'.format(\n-            html[:pos], ss, html[pos:]))\n+        return \'{}<style type="text/css"><!--\\n{}\\n--></style>{}\'.format(\n+            html[:pos], ss, html[pos:]\n+        )\n \n     def startInsertText(self):\n         return \'<span class="insert">\'\n \n     def endInsertText(self):\n-        return \'</span> \'\n+        return "</span> "\n \n     def startDeleteText(self):\n         return \'<span class="delete">\'\n \n     def endDeleteText(self):\n-        return \'</span> \'\n+        return "</span> "\n \n     def formatInsertTag(self, tag):\n-        return (\'<span class="tagInsert">insert: <tt>%s</tt></span> \' %\n-                htmlEncode(tag))\n+        return \'<span class="tagInsert">insert: <tt>%s</tt></span> \' % htmlEncode(tag)\n \n     def formatDeleteTag(self, tag):\n-        return (\'<span class="tagDelete">delete: <tt>%s</tt></span> \' %\n-                htmlEncode(tag))\n+        return \'<span class="tagDelete">delete: <tt>%s</tt></span> \' % htmlEncode(tag)\n \n \n class NoTagHTMLMatcher(HTMLMatcher):\n     def formatInsertTag(self, tag):\n-        return \'\'\n+        return ""\n \n     def formatDeleteTag(self, tag):\n-        return \'\'\n+        return ""\n \n \n def htmldiff(source1, source2, addStylesheet=False):\n@@ -194,22 +192,22 @@ class SimpleHTMLMatcher(HTMLMatcher):\n     """\n \n     def startInsertText(self):\n-        return \'+[\'\n+        return "+["\n \n     def endInsertText(self):\n-        return \']\'\n+        return "]"\n \n     def startDeleteText(self):\n-        return \'-[\'\n+        return "-["\n \n     def endDeleteText(self):\n-        return \']\'\n+        return "]"\n \n     def formatInsertTag(self, tag):\n-        return \'+[%s]\' % tag\n+        return "+[%s]" % tag\n \n     def formatDeleteTag(self, tag):\n-        return \'-[%s]\' % tag\n+        return "-[%s]" % tag\n \n \n def simplehtmldiff(source1, source2):\n@@ -226,12 +224,11 @@ def simplehtmldiff(source1, source2):\n \n \n class TextMatcher(HTMLMatcher):\n-\n     def set_seq1(self, a):\n-        SequenceMatcher.set_seq1(self, a.split(\'\\n\'))\n+        SequenceMatcher.set_seq1(self, a.split("\\n"))\n \n     def set_seq2(self, b):\n-        SequenceMatcher.set_seq2(self, b.split(\'\\n\'))\n+        SequenceMatcher.set_seq2(self, b.split("\\n"))\n \n     def htmlDiff(self, addStylesheet=False):\n         opcodes = self.get_opcodes()\n@@ -239,13 +236,13 @@ def htmlDiff(self, addStylesheet=False):\n         b = self.b\n         out = StringIO()\n         for tag, i1, i2, j1, j2 in opcodes:\n-            if tag == \'equal\':\n+            if tag == "equal":\n                 self.writeLines(a[i1:i2], out)\n-            if tag == \'delete\' or tag == \'replace\':\n+            if tag == "delete" or tag == "replace":\n                 out.write(self.startDeleteText())\n                 self.writeLines(a[i1:i2], out)\n                 out.write(self.endDeleteText())\n-            if tag == \'insert\' or tag == \'replace\':\n+            if tag == "insert" or tag == "replace":\n                 out.write(self.startInsertText())\n                 self.writeLines(b[j1:j2], out)\n                 out.write(self.endInsertText())\n@@ -258,20 +255,22 @@ def htmlDiff(self, addStylesheet=False):\n     def writeLines(self, lines, out):\n         for line in lines:\n             line = htmlEncode(line)\n-            line = line.replace(\'  \', \'&nbsp; \')\n-            line = line.replace(\'\\t\', \'&nbsp; &nbsp; &nbsp; &nbsp; \')\n-            if line.startswith(\' \'):\n-                line = \'&nbsp;\' + line[1:]\n-            out.write(\'<tt>%s</tt><br>\\n\' % line)\n+            line = line.replace("  ", "&nbsp; ")\n+            line = line.replace("\\t", "&nbsp; &nbsp; &nbsp; &nbsp; ")\n+            if line.startswith(" "):\n+                line = "&nbsp;" + line[1:]\n+            out.write("<tt>%s</tt><br>\\n" % line)\n \n \n-if __name__ == \'__main__\':\n+if __name__ == "__main__":\n     import sys\n+\n     if not sys.argv[1:]:\n-        print(\'Usage: %s file1 file2\' % sys.argv[0])  # NOQA\n-        print(\'or to test: %s test\' % sys.argv[0])  # NOQA\n-    elif sys.argv[1] == \'test\' and not sys.argv[2:]:\n+        print("Usage: %s file1 file2" % sys.argv[0])  # NOQA\n+        print("or to test: %s test" % sys.argv[0])  # NOQA\n+    elif sys.argv[1] == "test" and not sys.argv[2:]:\n         import doctest\n+\n         doctest.testmod()\n     else:\n         print(diffFiles(sys.argv[1], sys.argv[2]))  # NOQA\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex eddba03..1d1c0ef 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n@@ -11,9 +10,10 @@\n \n try:\n     from plone.namedfile import field\n+\n     FILE_FIELD_TYPES.extend([field.NamedFile, field.NamedImage])\n \n-    if getattr(field, \'HAVE_BLOBS\', True):\n+    if getattr(field, "HAVE_BLOBS", True):\n         FILE_FIELD_TYPES.extend([field.NamedBlobFile, field.NamedBlobImage])\n except ImportError:\n     pass\n@@ -22,7 +22,7 @@\n \n \n def named_file_as_str(f):\n-    return \'\' if f is None else \'%s (%d bytes)\' % (f.filename, len(f.data))\n+    return "" if f is None else "%s (%d bytes)" % (f.filename, len(f.data))\n \n \n def is_same(old_data, old_filename, new_data, new_filename):\n@@ -36,42 +36,55 @@ def is_same(old_data, old_filename, new_data, new_filename):\n \n \n class NamedFileBinaryDiff(BinaryDiff):\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n         self.field = field\n         self.label = field_label or field\n-        self.schemata = schemata or \'default\'\n+        self.schemata = schemata or "default"\n         self.field_name = field_name or field\n \n         old_field = getattr(obj1, field)\n         new_field = getattr(obj2, field)\n \n-        self.oldValue = getattr(old_field, \'data\', None)\n-        self.newValue = getattr(new_field, \'data\', None)\n+        self.oldValue = getattr(old_field, "data", None)\n+        self.newValue = getattr(new_field, "data", None)\n \n-        self.id1 = id1 or getattr(obj1, \'getId\', lambda: None)()\n-        self.id2 = id2 or getattr(obj2, \'getId\', lambda: None)()\n+        self.id1 = id1 or getattr(obj1, "getId", lambda: None)()\n+        self.id2 = id2 or getattr(obj2, "getId", lambda: None)()\n \n-        self.oldFilename = getattr(old_field, \'filename\', None)\n-        self.newFilename = getattr(new_field, \'filename\', None)\n+        self.oldFilename = getattr(old_field, "filename", None)\n+        self.newFilename = getattr(new_field, "filename", None)\n \n         self.same = is_same(\n-            self.oldValue, self.oldFilename, self.newValue, self.newFilename)\n+            self.oldValue, self.oldFilename, self.newValue, self.newFilename\n+        )\n \n     def _parseField(self, value, filename=None):\n         return [\n-            \'\' if (value is None)\n+            ""\n+            if (value is None)\n             else named_file_as_str(NamedFile(data=value, filename=filename)),\n         ]\n \n     def inline_diff(self):\n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n+        return (\n+            ""\n+            if self.same\n+            else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n+        )\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -90,10 +103,20 @@ class NamedFileListDiff(ListDiff):\n     same_fmt = """<div class="%s">%s</div>"""\n     inlinediff_fmt = TextDiff.inlinediff_fmt\n \n-    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n-                 field_label=None, schemata=None):\n-        ListDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n-                          field_label, schemata)\n+    def __init__(\n+        self,\n+        obj1,\n+        obj2,\n+        field,\n+        id1=None,\n+        id2=None,\n+        field_name=None,\n+        field_label=None,\n+        schemata=None,\n+    ):\n+        ListDiff.__init__(\n+            self, obj1, obj2, field, id1, id2, field_name, field_label, schemata\n+        )\n         old_values = list(self.oldValue or [])\n         new_values = list(self.newValue or [])\n \n@@ -101,7 +124,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n         if len(old_values) != len(new_values):\n             self.same = False\n         else:\n-            for (old, new) in zip(old_values, new_values):\n+            for old, new in zip(old_values, new_values):\n                 if not is_same(old.data, old.filename, new.data, new.filename):\n                     self.same = False\n                     break\n@@ -114,33 +137,46 @@ def inline_diff(self):\n         if self.same:\n             return None\n \n-        css_class = \'InlineDiff\'\n+        css_class = "InlineDiff"\n \n         old_reprs = self._parseField(self.oldValue, None)\n         new_reprs = self._parseField(self.newValue, None)\n \n         old_data = [\n-            {\'repr\': repr, \'data\': value.data, \'filename\': value.filename}\n+            {"repr": repr, "data": value.data, "filename": value.filename}\n             for (repr, value) in zip(old_reprs, self.oldValue or [])\n         ]\n         new_data = [\n-            {\'repr\': repr, \'data\': value.data, \'filename\': value.filename}\n+            {"repr": repr, "data": value.data, "filename": value.filename}\n             for (repr, value) in zip(new_reprs, self.newValue or [])\n         ]\n \n-        dummy_dict = {\'repr\': \'\', \'data\': None, \'filename\': None}\n+        dummy_dict = {"repr": "", "data": None, "filename": None}\n         make_lists_same_length(old_data, new_data, dummy_dict)\n \n         def is_same_dict(d1, d2):\n             return is_same(\n-                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\'],\n+                d1["data"],\n+                d1["filename"],\n+                d2["data"],\n+                d2["filename"],\n             )\n \n-        return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, html_escape(d_old[\'repr\'])))\n-             if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, html_escape(d_old[\'repr\']), html_escape(d_new[\'repr\']))\n-             ) for (d_old, d_new) in zip(old_data, new_data)])\n+        return "\\n".join(\n+            [\n+                (\n+                    (self.same_fmt % (css_class, html_escape(d_old["repr"])))\n+                    if is_same_dict(d_old, d_new)\n+                    else self.inlinediff_fmt\n+                    % (\n+                        css_class,\n+                        html_escape(d_old["repr"]),\n+                        html_escape(d_new["repr"]),\n+                    )\n+                )\n+                for (d_old, d_new) in zip(old_data, new_data)\n+            ]\n+        )\n \n \n InitializeClass(NamedFileListDiff)\ndiff --git a/Products/CMFDiffTool/profiles.zcml b/Products/CMFDiffTool/profiles.zcml\nindex 2ca32fe..f21e2b3 100644\n--- a/Products/CMFDiffTool/profiles.zcml\n+++ b/Products/CMFDiffTool/profiles.zcml\n@@ -1,14 +1,15 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="cmfdifftool">\n+    i18n_domain="cmfdifftool"\n+    >\n \n   <genericsetup:registerProfile\n       name="CMFDiffTool"\n       title="CMFDiffTool"\n-      directory="profiles/default"\n       description="Extension profile for default CMFDiffTool setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n </configure>\ndiff --git a/Products/CMFDiffTool/profiles/default/componentregistry.xml b/Products/CMFDiffTool/profiles/default/componentregistry.xml\nindex 4ed5c31..760f596 100644\n--- a/Products/CMFDiffTool/profiles/default/componentregistry.xml\n+++ b/Products/CMFDiffTool/profiles/default/componentregistry.xml\n@@ -1,10 +1,10 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n- <adapters/>\n- <utilities>\n-  <utility\n-    factory="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"\n-    id="portal_diff"\n-    interface="Products.CMFDiffTool.interfaces.IDiffTool"/>\n- </utilities>\n+  <adapters />\n+  <utilities>\n+    <utility id="portal_diff"\n+             factory="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"\n+             interface="Products.CMFDiffTool.interfaces.IDiffTool"\n+    />\n+  </utilities>\n </componentregistry>\ndiff --git a/Products/CMFDiffTool/profiles/default/metadata.xml b/Products/CMFDiffTool/profiles/default/metadata.xml\nindex d02ea5c..58133d6 100644\n--- a/Products/CMFDiffTool/profiles/default/metadata.xml\n+++ b/Products/CMFDiffTool/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>2</version>\n </metadata>\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex af61a16..5bc5c58 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneSandboxLayer\n@@ -10,16 +9,17 @@\n from zope.schema.vocabulary import SimpleVocabulary\n \n \n-TEST_CONTENT_TYPE_ID = \'TestContentType\'\n+TEST_CONTENT_TYPE_ID = "TestContentType"\n \n VOCABULARY_TUPLES = [\n-    (u\'first_value\', u\'First Title\'),\n-    (u\'second_value\', None),\n-    (u\'third_value\', u\'Third Title\'),\n+    ("first_value", "First Title"),\n+    ("second_value", None),\n+    ("third_value", "Third Title"),\n ]\n \n VOCABULARY = SimpleVocabulary(\n-    [SimpleTerm(value=v, title=t) for (v, t) in VOCABULARY_TUPLES])\n+    [SimpleTerm(value=v, title=t) for (v, t) in VOCABULARY_TUPLES]\n+)\n \n \n def vocabulary_factory(context):\n@@ -27,21 +27,20 @@ def vocabulary_factory(context):\n \n \n class DXLayer(PloneSandboxLayer):\n-\n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        \'\'\'Set up additional products and ZCML required to test\n+        """Set up additional products and ZCML required to test\n         this product.\n-        \'\'\'\n+        """\n         # setup dexterity\n-        types_tool = getToolByName(portal, \'portal_types\')\n+        types_tool = getToolByName(portal, "portal_types")\n \n         sm = getSiteManager(portal)\n         sm.registerUtility(\n             component=vocabulary_factory,\n             provided=IVocabularyFactory,\n-            name=u\'Products.CMFDiffTool.testing.VOCABULARY\',\n+            name="Products.CMFDiffTool.testing.VOCABULARY",\n         )\n \n         fti = DexterityFTI(\n@@ -49,12 +48,12 @@ def setUpPloneSite(self, portal):\n             factory=TEST_CONTENT_TYPE_ID,\n             global_allow=True,\n             behaviors=(\n-                \'plone.app.versioningbehavior.behaviors.IVersionable\',\n-                \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-                \'plone.app.relationfield.behavior.IRelatedItems\',\n-                \'plone.app.contenttypes.behaviors.collection.ICollection\',\n+                "plone.app.versioningbehavior.behaviors.IVersionable",\n+                "plone.app.dexterity.behaviors.metadata.IBasic",\n+                "plone.app.relationfield.behavior.IRelatedItems",\n+                "plone.app.contenttypes.behaviors.collection.ICollection",\n             ),\n-            model_source=\'\'\'\n+            model_source="""\n             <model xmlns=\'http://namespaces.plone.org/supermodel/schema\'>\n                 <schema>\n                     <field name=\'text\' type=\'zope.schema.Text\'>\n@@ -90,7 +89,7 @@ def setUpPloneSite(self, portal):\n                     </field>\n                 </schema>\n             </model>\n-            \'\'\',\n+            """,\n         )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n@@ -98,4 +97,5 @@ def setUpPloneSite(self, portal):\n PACKAGE_DX_FIXTURE = DXLayer()\n \n CMFDiffToolDXLayer = FunctionalTesting(\n-    bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\n+    bases=(PACKAGE_DX_FIXTURE,), name="Products.CMFDiffTool.DX:functional"\n+)\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 30106e0..7230734 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,16 +1,16 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n \n import unittest\n \n \n class BaseDXTestCase(unittest.TestCase):\n-    """ A base testing class for CMFDiffTool\n+    """A base testing class for CMFDiffTool\n \n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n+    It includes a layer which installs the product\n+    and some testing dependencies in a Plone site.\n     """\n+\n     layer = CMFDiffToolDXLayer\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\ndiff --git a/Products/CMFDiffTool/tests/__init__.py b/Products/CMFDiffTool/tests/__init__.py\nindex 5dd4550..de1858e 100644\n--- a/Products/CMFDiffTool/tests/__init__.py\n+++ b/Products/CMFDiffTool/tests/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\\\n Unit test package for CMFDiffTool\n """\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex b5457c7..542514b 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n from Acquisition import aq_base\n from os import linesep\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.base.utils import safe_hasattr\n@@ -20,57 +19,52 @@ class TestChangeSet(TestCase):\n     layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.folder = self.portal\n-        self.p_diff = getToolByName(self.portal, \'portal_diff\')\n-        cs = BaseChangeSet(\'my_changeset\')\n+        self.p_diff = getToolByName(self.portal, "portal_diff")\n+        cs = BaseChangeSet("my_changeset")\n         # ChangeSet needs an acquisition wrapper\n         self.cs = cs.__of__(self.portal)\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces import IChangeSet\n+\n         self.assertTrue(IChangeSet.implementedBy(BaseChangeSet))\n \n     def setupTestObjects(self):\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'My Title\')\n-        self.folder.manage_pasteObjects(\n-            self.folder.manage_copyObjects([\'doc1\']))\n-        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'],\n-                                    \'\')\n+        self.folder.invokeFactory("Document", "doc1", title="My Title")\n+        self.folder.manage_pasteObjects(self.folder.manage_copyObjects(["doc1"]))\n+        cdd = DexterityCompoundDiff(self.folder["doc1"], self.folder["doc1"], "")\n         self.len_diff = len(cdd._diffs)\n \n     def setupTestFolders(self):\n-        self.folder.invokeFactory(\'Folder\', \'folder1\', title=\'My Folder Title\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc1\',\n-                                          title=\'My Title1\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc2\',\n-                                          title=\'My Title2\')\n-        self.folder.folder1.invokeFactory(\'Document\', \'doc3\',\n-                                          title=\'My Title3\')\n-        self.folder.manage_pasteObjects(\n-            self.folder.manage_copyObjects([\'folder1\']))\n+        self.folder.invokeFactory("Folder", "folder1", title="My Folder Title")\n+        self.folder.folder1.invokeFactory("Document", "doc1", title="My Title1")\n+        self.folder.folder1.invokeFactory("Document", "doc2", title="My Title2")\n+        self.folder.folder1.invokeFactory("Document", "doc3", title="My Title3")\n+        self.folder.manage_pasteObjects(self.folder.manage_copyObjects(["folder1"]))\n         cdd = DexterityCompoundDiff(\n-            self.folder[\'folder1\'][\'doc1\'], self.folder[\'folder1\'][\'doc1\'], \'\')\n+            self.folder["folder1"]["doc1"], self.folder["folder1"]["doc1"], ""\n+        )\n         self.len_diff = len(cdd._diffs)\n \n     def testChangeSetUnchanged(self):\n         self.setupTestObjects()\n-        self.cs.computeDiff(self.folder[\'doc1\'], self.folder[\'copy_of_doc1\'])\n+        self.cs.computeDiff(self.folder["doc1"], self.folder["copy_of_doc1"])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), self.len_diff)\n         self.assertTrue(diffs[0].same)\n \n     def testChangeSetChanged(self):\n         self.setupTestObjects()\n-        self.folder.copy_of_doc1.setTitle(\'My New Title\')\n+        self.folder.copy_of_doc1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), self.len_diff)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Title%s+ My New Title\' % linesep)\n+        self.assertEqual(diffs[0].ndiff(), "- My Title%s+ My New Title" % linesep)\n \n     def testChangeSetFolderUnchanged(self):\n         self.setupTestFolders()\n@@ -90,13 +84,14 @@ def testChangeSetFolderUnchanged(self):\n \n     def testChangeSetFolderChanged(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Folder Title%s+ My New Title\' % linesep)\n+        self.assertEqual(\n+            diffs[0].ndiff(), "- My Folder Title%s+ My New Title" % linesep\n+        )\n         self.assertFalse(self.cs._added)\n         self.assertFalse(self.cs._removed)\n         sub_cs = self.cs.getSubDiffs()\n@@ -110,7 +105,7 @@ def testChangeSetFolderChanged(self):\n \n     def testChangeSetFolderDocChanged(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.doc1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.doc1.setTitle("My New Title")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -125,16 +120,17 @@ def testChangeSetFolderDocChanged(self):\n             sub_diffs = sub_cs[i].getDiffs()\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             # doc1 has changed\n-            if sub_cs[i].getId() == \'doc1\':\n+            if sub_cs[i].getId() == "doc1":\n                 self.assertFalse(sub_diffs[0].same)\n-                self.assertEqual(sub_diffs[0].ndiff(),\n-                                 \'- My Title1%s+ My New Title\' % linesep)\n+                self.assertEqual(\n+                    sub_diffs[0].ndiff(), "- My Title1%s+ My New Title" % linesep\n+                )\n             else:\n                 self.assertTrue(sub_diffs[0].same)\n \n     def testChangeSetFolderDocRemoved(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.manage_delObjects(\'doc1\')\n+        self.folder.copy_of_folder1.manage_delObjects("doc1")\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -150,12 +146,13 @@ def testChangeSetFolderDocRemoved(self):\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             self.assertTrue(sub_diffs[0].same)\n         self.assertFalse(self.cs._added)\n-        self.assertEqual(list(self.cs._removed), [\'doc1\'])\n+        self.assertEqual(list(self.cs._removed), ["doc1"])\n \n     def testChangeSetFolderDocAdded(self):\n         self.setupTestFolders()\n-        self.folder.copy_of_folder1.invokeFactory(\'Document\', \'doc4\',\n-                                                  title=\'My Doc Title\')\n+        self.folder.copy_of_folder1.invokeFactory(\n+            "Document", "doc4", title="My Doc Title"\n+        )\n         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n@@ -170,16 +167,14 @@ def testChangeSetFolderDocAdded(self):\n             self.assertEqual(len(sub_diffs), self.len_diff)\n             self.assertTrue(sub_diffs[0].same)\n         self.assertFalse(self.cs._removed)\n-        self.assertEqual(list(self.cs._added), [\'doc4\'])\n+        self.assertEqual(list(self.cs._added), ["doc4"])\n \n     def testChangeSetFolderReordered(self):\n         self.setupTestFolders()\n-        if safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                        \'moveObjectsToTop\'):\n-            self.folder.copy_of_folder1.moveObjectsToTop([\'doc3\'])\n-        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                          \'moveObjectsByDelta\'):\n-            self.folder.copy_of_folder1.moveObjectsByDelta([\'doc3\'], -3)\n+        if safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsToTop"):\n+            self.folder.copy_of_folder1.moveObjectsToTop(["doc3"])\n+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsByDelta"):\n+            self.folder.copy_of_folder1.moveObjectsByDelta(["doc3"], -3)\n         else:\n             # We don\'t have an orderable folder give up\n             return\n@@ -202,34 +197,33 @@ def testChangeSetFolderReordered(self):\n     def testChangeSetFolderComplex(self):\n         self.setupTestFolders()\n         # Add a new sub object\n-        self.folder.copy_of_folder1.invokeFactory(\'Document\', \'doc4\',\n-                                                  title=\'My Doc Title\')\n+        self.folder.copy_of_folder1.invokeFactory(\n+            "Document", "doc4", title="My Doc Title"\n+        )\n         # Delete a sub object\n-        self.folder.copy_of_folder1.manage_delObjects(\'doc2\')\n+        self.folder.copy_of_folder1.manage_delObjects("doc2")\n         # Change one object\n-        self.folder.copy_of_folder1.doc3.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.doc3.setTitle("My New Title")\n         # Change the folder itself\n-        self.folder.copy_of_folder1.setTitle(\'My New Title\')\n+        self.folder.copy_of_folder1.setTitle("My New Title")\n         # Move the changed object\n-        if safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                        \'moveObjectsToTop\'):\n-            self.folder.copy_of_folder1.moveObjectsToTop([\'doc3\'])\n-        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),\n-                          \'moveObjectsByDelta\'):\n-            self.folder.copy_of_folder1.moveObjectsByDelta([\'doc3\'], -3)\n+        if safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsToTop"):\n+            self.folder.copy_of_folder1.moveObjectsToTop(["doc3"])\n+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1), "moveObjectsByDelta"):\n+            self.folder.copy_of_folder1.moveObjectsByDelta(["doc3"], -3)\n         else:\n             # We don\'t have an orderable folder give up\n             return\n \n-        self.cs.computeDiff(self.folder[\'folder1\'],\n-                            self.folder[\'copy_of_folder1\'])\n+        self.cs.computeDiff(self.folder["folder1"], self.folder["copy_of_folder1"])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\n-        self.assertEqual(diffs[0].ndiff(),\n-                         \'- My Folder Title%s+ My New Title\' % linesep)\n-        self.assertEqual(list(self.cs._added), [\'doc4\'])\n-        self.assertEqual(list(self.cs._removed), [\'doc2\'])\n+        self.assertEqual(\n+            diffs[0].ndiff(), "- My Folder Title%s+ My New Title" % linesep\n+        )\n+        self.assertEqual(list(self.cs._added), ["doc4"])\n+        self.assertEqual(list(self.cs._removed), ["doc2"])\n         sub_cs = self.cs.getSubDiffs()\n         # We only have two potentially changed objects\n         self.assertEqual(len(sub_cs), 2)\n@@ -238,10 +232,11 @@ def testChangeSetFolderComplex(self):\n             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))\n             sub_diffs = sub_cs[i].getDiffs()\n             self.assertEqual(len(sub_diffs), self.len_diff)\n-            if sub_cs[i].getId() == \'doc3\':\n+            if sub_cs[i].getId() == "doc3":\n                 self.assertFalse(sub_diffs[0].same)\n-                self.assertEqual(sub_diffs[0].ndiff(),\n-                                 \'- My Title3%s+ My New Title\' % linesep)\n+                self.assertEqual(\n+                    sub_diffs[0].ndiff(), "- My Title3%s+ My New Title" % linesep\n+                )\n             else:\n                 self.assertTrue(sub_diffs[1].same)\n         # XXX we need an explicit way of noting reorders\ndiff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py\nindex 3d42c5d..e1b5f27 100644\n--- a/Products/CMFDiffTool/tests/testDiffTool.py\n+++ b/Products/CMFDiffTool/tests/testDiffTool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n@@ -12,11 +11,11 @@\n \n \n class DummyDiff:\n-    meta_type = \'Dummy Diff Type\'\n+    meta_type = "Dummy Diff Type"\n \n \n class DummyDiff2:\n-    meta_type = \'Second Dummy Diff Type\'\n+    meta_type = "Second Dummy Diff Type"\n \n \n class TestDiffTool(TestCase):\n@@ -25,83 +24,88 @@ class TestDiffTool(TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.p_diff = getToolByName(self.layer[\'portal\'], \'portal_diff\')\n+        self.p_diff = getToolByName(self.layer["portal"], "portal_diff")\n         # clear pt_diff registry\n         self.p_diff._pt_diffs = {}\n \n         # patch portal_types to list `Document` in the listContentTypes\n-        # a plausability check is done in the `setDiffForPortalType` method\n+        # a plausibility check is done in the `setDiffForPortalType` method\n         # but we have no content registry\n-        portal_types = getToolByName(self.layer[\'portal\'], \'portal_types\')\n+        portal_types = getToolByName(self.layer["portal"], "portal_types")\n         self._old_listContentTypes = portal_types.listContentTypes\n-        portal_types.listContentTypes = lambda: [\'Document\']\n+        portal_types.listContentTypes = lambda: ["Document"]\n         registerDiffType(DummyDiff)\n \n     def tearDown(self):\n-        portal_types = getToolByName(self.layer[\'portal\'], \'portal_types\')\n+        portal_types = getToolByName(self.layer["portal"], "portal_types")\n         portal_types.listContentTypes = self._old_listContentTypes\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces.portal_diff import portal_diff\n+\n         self.assertTrue(portal_diff.providedBy(self.p_diff))\n \n     def testRegisterDiffType(self):\n         """Test registration of Diff types"""\n         unregisterDiffType(DummyDiff)\n-        self.assertNotIn(\'Dummy Diff Type\', self.p_diff.listDiffTypes())\n+        self.assertNotIn("Dummy Diff Type", self.p_diff.listDiffTypes())\n         registerDiffType(DummyDiff)\n-        self.assertIn(\'Dummy Diff Type\', self.p_diff.listDiffTypes())\n+        self.assertIn("Dummy Diff Type", self.p_diff.listDiffTypes())\n \n     def testSetDiff(self):\n         """Test setDiffForPortalType() method"""\n-        d = {\'field1\': \'TestDiff\', \'field2\': \'Dummy Diff Type\'}\n-        self.p_diff.setDiffForPortalType(\'Document\', d)\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        d = {"field1": "TestDiff", "field2": "Dummy Diff Type"}\n+        self.p_diff.setDiffForPortalType("Document", d)\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n \n     def testSetDiffReplaces(self):\n         """Test that setDiffForPortalType() replaces old data"""\n-        d1 = {\'field1\': \'TestDiff\', \'field2\': \'Dummy Diff Type\'}\n-        d2 = {\'field3\': \'Dummy Diff Type\'}\n-        self.p_diff.setDiffForPortalType(\'Document\', d1)\n-        self.p_diff.setDiffForPortalType(\'Document\', d2)\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d2)\n+        d1 = {"field1": "TestDiff", "field2": "Dummy Diff Type"}\n+        d2 = {"field3": "Dummy Diff Type"}\n+        self.p_diff.setDiffForPortalType("Document", d1)\n+        self.p_diff.setDiffForPortalType("Document", d2)\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d2)\n \n     def testSingleSetDiffField(self):\n         """Test setDiffField method"""\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'),\n-                         {\'title\': \'Dummy Diff Type\'})\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.assertEqual(\n+            self.p_diff.getDiffForPortalType("Document"), {"title": "Dummy Diff Type"}\n+        )\n \n     def testMultipleSetDiffField(self):\n         """\n         Test setDiffField method adding a second field to one content type\n         """\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.p_diff.setDiffField(\'Document\', \'description\', \'Dummy Diff Type\')\n-        d = {\'title\': \'Dummy Diff Type\', \'description\': \'Dummy Diff Type\'}\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.p_diff.setDiffField("Document", "description", "Dummy Diff Type")\n+        d = {"title": "Dummy Diff Type", "description": "Dummy Diff Type"}\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n \n     def testReplaceSetDiffField(self):\n         """Test that setDiffField does a replace for existing fields"""\n         registerDiffType(DummyDiff2)\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Dummy Diff Type\')\n-        self.p_diff.setDiffField(\'Document\', \'title\', \'Second Dummy Diff Type\')\n-        d = {\'title\': \'Second Dummy Diff Type\'}\n-        self.assertEqual(self.p_diff.getDiffForPortalType(\'Document\'), d)\n+        self.p_diff.setDiffField("Document", "title", "Dummy Diff Type")\n+        self.p_diff.setDiffField("Document", "title", "Second Dummy Diff Type")\n+        d = {"title": "Second Dummy Diff Type"}\n+        self.assertEqual(self.p_diff.getDiffForPortalType("Document"), d)\n         unregisterDiffType(DummyDiff2)\n \n     def testSetDiffFieldNameFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Bob\', \'title\', \'Dummy Diff Type\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Bob", "title", "Dummy Diff Type"\n+        )\n \n     def testSetDiffFieldBlankFieldFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Document\', \'\', \'Dummy Diff Type\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Document", "", "Dummy Diff Type"\n+        )\n \n     def testSetDiffFieldInvalidDiffFailure(self):\n-        self.assertRaises(BadRequest, self.p_diff.setDiffField,\n-                          \'Document\', \'title\', \'NoDiff\')\n+        self.assertRaises(\n+            BadRequest, self.p_diff.setDiffField, "Document", "title", "NoDiff"\n+        )\n \n     def beforeTearDown(self):\n         # Undo changes that don\'t get rolled back (i.e. module level changes)\ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex 7c39af4..0a36e0a 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n@@ -13,24 +12,24 @@\n \n \n class A:\n-    attribute = \'value\'\n+    attribute = "value"\n \n     def method(self):\n-        return \'method value\'\n+        return "method value"\n \n \n class B:\n-    attribute = \'different value\'\n+    attribute = "different value"\n \n     def method(self):\n-        return \'different method value\'\n+        return "different method value"\n \n \n class U:\n-    attribute = u\'\\xfcnicode value\'\n+    attribute = "\\xfcnicode value"\n \n     def method(self):\n-        return u\'different method val\\xfce\'\n+        return "different method val\\xfce"\n \n \n class H:\n@@ -48,24 +47,25 @@ class TestFieldDiff(TestCase):\n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n+\n         self.assertTrue(IDifference.implementedBy(FieldDiff))\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n+        fd = FieldDiff(a, a, "attribute")\n         self.assertTrue(fd.same)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n+        fd = FieldDiff(uu, uu, "attribute")\n         self.assertTrue(fd.same)\n \n     def testMethodSame(self):\n         """Test method with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'method\')\n+        fd = FieldDiff(a, a, "method")\n         self.assertTrue(fd.same)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'method\')\n+        fd = FieldDiff(uu, uu, "method")\n         self.assertTrue(fd.same)\n \n     def testAttributeDiff(self):\n@@ -73,9 +73,9 @@ def testAttributeDiff(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'attribute\')\n+        fd = FieldDiff(a, b, "attribute")\n         self.assertFalse(fd.same)\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertFalse(fd.same)\n \n     def testMethodDiff(self):\n@@ -83,20 +83,20 @@ def testMethodDiff(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'method\')\n+        fd = FieldDiff(a, b, "method")\n         self.assertFalse(fd.same)\n-        fd = FieldDiff(a, uu, \'method\')\n+        fd = FieldDiff(a, uu, "method")\n         self.assertFalse(fd.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, a, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = FieldDiff(uu, uu, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n@@ -104,72 +104,72 @@ def testGetLineDiffsDifferent(self):\n         a = A()\n         b = B()\n         uu = U()\n-        fd = FieldDiff(a, b, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, b, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n-        fd = FieldDiff(a, uu, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = FieldDiff(a, uu, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with same value"""\n         a = A()\n-        fd = FieldDiff(a, a, \'attribute\')\n-        self.assertEqual(fd.ndiff(), \'  value\')\n+        fd = FieldDiff(a, a, "attribute")\n+        self.assertEqual(fd.ndiff(), "  value")\n         uu = U()\n-        fd = FieldDiff(uu, uu, \'attribute\')\n-        self.assertEqual(fd.ndiff(), u\'  \\xfcnicode value\')\n+        fd = FieldDiff(uu, uu, "attribute")\n+        self.assertEqual(fd.ndiff(), "  \\xfcnicode value")\n \n     def testDiffText(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n         uu = U()\n-        expected = \'- value%s+ different value\' % linesep\n-        fd = FieldDiff(a, b, \'attribute\')\n+        expected = "- value%s+ different value" % linesep\n+        fd = FieldDiff(a, b, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n-        expected = u\'- value%s+ \\xfcnicode value\' % linesep\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        expected = "- value%s+ \\xfcnicode value" % linesep\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n \n     def test_dump_text(self):\n         """Test dumping a diff of text."""\n         diff = []\n-        dump(\'-\', [\'support\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'- support\'])\n+        dump("-", ["support"], 0, 1, diff)\n+        self.assertEqual(diff, ["- support"])\n         # Try unicode, a \'u\' with an umlaut.\n         diff = []\n-        dump(\'+\', [u\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [u\'+ s\\xfcpport\'])\n+        dump("+", ["s\\xfcpport"], 0, 1, diff)\n+        self.assertEqual(diff, ["+ s\\xfcpport"])\n         # Combine them.\n         diff = []\n-        dump(\'-\', [\'support\'], 0, 1, diff)\n-        dump(\'+\', [u\'s\\xfcpport\'], 0, 1, diff)\n-        self.assertEqual(diff, [\'- support\', u\'+ s\\xfcpport\'])\n+        dump("-", ["support"], 0, 1, diff)\n+        dump("+", ["s\\xfcpport"], 0, 1, diff)\n+        self.assertEqual(diff, ["- support", "+ s\\xfcpport"])\n \n     def test_dump_integer(self):\n         """Test dumping a diff of integers."""\n         diff = []\n-        dump(\'-\', [4], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 4\'])\n-        dump(\'+\', [42], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 4\', \'+ 42\'])\n+        dump("-", [4], 0, 1, diff)\n+        self.assertEqual(diff, ["- 4"])\n+        dump("+", [42], 0, 1, diff)\n+        self.assertEqual(diff, ["- 4", "+ 42"])\n \n     def test_dump_float(self):\n         """Test dumping a diff of floats."""\n         diff = []\n-        dump(\'-\', [1.1], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 1.1\'])\n-        dump(\'+\', [1.2], 0, 1, diff)\n-        self.assertEqual(diff, [\'- 1.1\', \'+ 1.2\'])\n+        dump("-", [1.1], 0, 1, diff)\n+        self.assertEqual(diff, ["- 1.1"])\n+        dump("+", [1.2], 0, 1, diff)\n+        self.assertEqual(diff, ["- 1.1", "+ 1.2"])\n \n     def test_dump_boolean(self):\n         """Test dumping a diff of booleans."""\n         diff = []\n-        dump(\'-\', [True], 0, 1, diff)\n-        self.assertEqual(diff, [\'- True\'])\n-        dump(\'+\', [False], 0, 1, diff)\n-        self.assertEqual(diff, [\'- True\', \'+ False\'])\n+        dump("-", [True], 0, 1, diff)\n+        self.assertEqual(diff, ["- True"])\n+        dump("+", [False], 0, 1, diff)\n+        self.assertEqual(diff, ["- True", "+ False"])\n \n     def test_inline_diff_same(self):\n         """Test inline diff for attribute with same value"""\n@@ -177,12 +177,12 @@ def test_inline_diff_same(self):\n         uu = U()\n         h = H()\n         # We mostly just want to check that the inline diff renders without error.\n-        fd = FieldDiff(a, a, \'attribute\')\n+        fd = FieldDiff(a, a, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n-        fd = FieldDiff(uu, uu, \'attribute\')\n+        fd = FieldDiff(uu, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         self.assertNotIn("&gt;", fd.inline_diff())\n-        fd = FieldDiff(h, h, \'attribute\')\n+        fd = FieldDiff(h, h, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\n@@ -193,16 +193,16 @@ def test_inline_diff_different(self):\n         a = A()\n         uu = U()\n         h = H()\n-        fd = FieldDiff(a, uu, \'attribute\')\n+        fd = FieldDiff(a, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n-        fd = FieldDiff(uu, a, \'attribute\')\n+        fd = FieldDiff(uu, a, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         self.assertNotIn("&gt;", fd.inline_diff())\n-        fd = FieldDiff(uu, h, \'attribute\')\n+        fd = FieldDiff(uu, h, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\n-        fd = FieldDiff(h, uu, \'attribute\')\n+        fd = FieldDiff(h, uu, "attribute")\n         self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 0bd5732..6da8f91 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # CMFDiffTool tests\n #\n@@ -27,99 +26,98 @@ class HList:\n \n \n class C:\n-    attribute = {\'a\': 1, \'b\': 2}\n+    attribute = {"a": 1, "b": 2}\n \n \n class D:\n-    attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n+    attribute = {"a": 1, "b": 2, "c": 3}\n \n \n class HDict:\n-    attribute = {\'a\': \'<script>alert("Hacker value")</script>\'}\n+    attribute = {"a": \'<script>alert("Hacker value")</script>\'}\n \n \n class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n         )\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n         )\n \n-        self.obj1 = self.portal[\'obj1\']\n-        self.obj2 = self.portal[\'obj2\']\n+        self.obj1 = self.portal["obj1"]\n+        self.obj2 = self.portal["obj2"]\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         self.assertTrue(IDifference.implementedBy(ListDiff))\n \n     def testInvalidValue(self):\n-        """ Test if no error with invalid values """\n+        """Test if no error with invalid values"""\n         a = A()\n         a.attribute = []\n         b = A()\n \n         b.attribute = None\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n         b.attribute = 0\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n-        b.attribute = \'\'\n-        diff = ListDiff(a, b, \'attribute\')\n-        self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n+        b.attribute = ""\n+        diff = ListDiff(a, b, "attribute")\n+        self.assertEqual([("insert", 0, 0, 0, 1)], diff.getLineDiffs())\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n+        diff = ListDiff(a, a, "attribute")\n         self.assertTrue(diff.same)\n \n     def testAttributeDiff(self):\n         """Test attribute with different value"""\n         a = A()\n         b = B()\n-        diff = ListDiff(a, b, \'attribute\')\n+        diff = ListDiff(a, b, "attribute")\n         self.assertFalse(diff.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 3, 0, 3)]\n+        diff = ListDiff(a, a, "attribute")\n+        expected = [("equal", 0, 3, 0, 3)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n         """test getLineDiffs() method with different value"""\n         a = A()\n         b = B()\n-        diff = ListDiff(a, b, \'attribute\')\n-        expected = [(\'equal\', 0, 3, 0, 3), (\'insert\', 3, 3, 3, 4)]\n+        diff = ListDiff(a, b, "attribute")\n+        expected = [("equal", 0, 3, 0, 3), ("insert", 3, 3, 3, 4)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with no diff"""\n         a = A()\n-        diff = ListDiff(a, a, \'attribute\')\n-        expected = \'  1%(linesep)s  2%(linesep)s  3\' % {\'linesep\': linesep}\n+        diff = ListDiff(a, a, "attribute")\n+        expected = "  1{linesep}  2{linesep}  3".format(linesep=linesep)\n         self.assertEqual(diff.ndiff(), expected)\n \n     def testDiffText(self):\n         """Test text diff output with no diff"""\n         a = A()\n         b = B()\n-        expected = \'  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4\' % \\\n-                   {\'linesep\': linesep}\n-        diff = ListDiff(a, b, \'attribute\')\n+        expected = "  1{linesep}  2{linesep}  3{linesep}+ 4".format(linesep=linesep)\n+        diff = ListDiff(a, b, "attribute")\n         self.assertEqual(diff.ndiff(), expected)\n \n     def test_inline_diff(self):\n@@ -132,13 +130,13 @@ def test_inline_diff(self):\n     <div class="diff_sub"></div>\n     <div class="diff_add">4</div>\n </div>"""\n-        diff = ListDiff(a, b, \'attribute\')\n+        diff = ListDiff(a, b, "attribute")\n         self.assertEqual(diff.inline_diff(), expected)\n \n     def test_inline_diff_hacker_list(self):\n         a = A()\n         h = HList()\n-        diff = ListDiff(a, h, \'attribute\')\n+        diff = ListDiff(a, h, "attribute")\n         # The script tag should be escaped.\n         self.assertNotIn("<script", diff.inline_diff())\n         self.assertIn("&gt;", diff.inline_diff())\n@@ -146,42 +144,51 @@ def test_inline_diff_hacker_list(self):\n     def test_inline_diff_hacker_dict(self):\n         d = D()\n         h = HDict()\n-        diff = ListDiff(d, h, \'attribute\')\n+        diff = ListDiff(d, h, "attribute")\n         # The script tag should be escaped.\n         self.assertNotIn("<script", diff.inline_diff())\n         self.assertIn("&gt;", diff.inline_diff())\n \n     def test_inline_diff_vocabulary(self):\n         # unchanged, with vocabulary title\n-        expected = u\'<div class="InlineDiff">First Title</div>\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n-                             [testing.VOCABULARY_TUPLES[0][0]], True, expected)\n+        expected = \'<div class="InlineDiff">First Title</div>\'\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            True,\n+            expected,\n+        )\n         # unchanged, without vocabulary title\n-        expected = u\'<div class="InlineDiff">second_value</div>\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[1][0]], True, expected)\n+        expected = \'<div class="InlineDiff">second_value</div>\'\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[1][0]],\n+            True,\n+            expected,\n+        )\n         # changed: add value, with vocabulary title\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">First Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([],\n-                             [testing.VOCABULARY_TUPLES[0][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list([], [testing.VOCABULARY_TUPLES[0][0]], False, expected)\n         # changed: replaced unique value by another one, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n <div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0]],\n+            [testing.VOCABULARY_TUPLES[2][0]],\n+            False,\n+            expected,\n+        )\n         # changed: replaced multiple values by others, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n@@ -189,14 +196,15 @@ def test_inline_diff_vocabulary(self):\n <div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[1][0],\n-                              testing.VOCABULARY_TUPLES[2][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[2][0]],\n+            False,\n+            expected,\n+        )\n         # changed: replaced multiple values by others, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n </div>\n@@ -204,43 +212,47 @@ def test_inline_diff_vocabulary(self):\n <div class="InlineDiff">\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0],\n-                              testing.VOCABULARY_TUPLES[0][0]],\n-                             False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [testing.VOCABULARY_TUPLES[2][0], testing.VOCABULARY_TUPLES[0][0]],\n+            False,\n+            expected,\n+        )\n         # changed: removed values, displaying titles\n-        expected = u\'\'\'<div class="InlineDiff">\n+        expected = """<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n     <div class="diff_add"></div>\n </div>\n <div class="InlineDiff">\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n-</div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n-                              testing.VOCABULARY_TUPLES[1][0]],\n-                             [], False, expected)\n+</div>"""\n+        self._test_diff_list(\n+            [testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+            [],\n+            False,\n+            expected,\n+        )\n \n     def _test_diff_list(self, value1, value2, same, expected):\n         self.obj1.choices = value1\n         self.obj2.choices = value2\n-        diff = ListDiff(self.obj1, self.obj2, \'choices\')\n+        diff = ListDiff(self.obj1, self.obj2, "choices")\n         self.assertEqual(diff.same, same)\n         self.assertEqual(diff.inline_diff(), expected)\n \n     def testGetLineDictDiffsSame(self):\n         """test getLineDiffs() method with dict same value"""\n         c = C()\n-        diff = ListDiff(c, c, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        diff = ListDiff(c, c, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(diff.getLineDiffs(), expected)\n \n     def testGetLineDictDiffsDifferent(self):\n         """test getLineDiffs() method with dict different value"""\n         c = C()\n         d = D()\n-        diff = ListDiff(c, d, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        diff = ListDiff(c, d, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(diff.getLineDiffs(), expected)\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex 1a59c4b..aa2a64e 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from os import linesep\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from Products.CMFDiffTool.TextDiff import TextDiff\n@@ -10,17 +8,17 @@\n \n \n class A:\n-    attribute = \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\'\n+    attribute = "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0"\n \n     def method(self):\n-        return \'method \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\'\n+        return "method \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0"\n \n \n class B:\n-    attribute = \'\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n+    attribute = "\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"\n \n     def method(self):\n-        return \'method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n+        return "method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"\n \n \n class H:\n@@ -32,66 +30,68 @@ def method(self):\n \n class TestTextDiff(TestCase):\n     """Test the TextDiff class"""\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n         from Products.CMFDiffTool.interfaces import IDifference\n+\n         self.assertTrue(IDifference.implementedBy(TextDiff))\n \n     def testAttributeSame(self):\n         """Test attribute with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n+        fd = TextDiff(a, a, "attribute")\n         self.assertTrue(fd.same)\n \n     def testMethodSame(self):\n         """Test method with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'method\')\n+        fd = TextDiff(a, a, "method")\n         self.assertTrue(fd.same)\n \n     def testAttributeDiff(self):\n         """Test attribute with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertFalse(fd.same)\n \n     def testMethodDiff(self):\n         """Test method with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'method\')\n+        fd = TextDiff(a, b, "method")\n         self.assertFalse(fd.same)\n \n     def testGetLineDiffsSame(self):\n         """test getLineDiffs() method with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n-        expected = [(\'equal\', 0, 1, 0, 1)]\n+        fd = TextDiff(a, a, "attribute")\n+        expected = [("equal", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testGetLineDiffsDifferent(self):\n         """test getLineDiffs() method with different value"""\n         a = A()\n         b = B()\n-        fd = TextDiff(a, b, \'attribute\')\n-        expected = [(\'replace\', 0, 1, 0, 1)]\n+        fd = TextDiff(a, b, "attribute")\n+        expected = [("replace", 0, 1, 0, 1)]\n         self.assertEqual(fd.getLineDiffs(), expected)\n \n     def testSameText(self):\n         """Test text diff output with same value"""\n         a = A()\n-        fd = TextDiff(a, a, \'attribute\')\n-        self.assertEqual(fd.ndiff(), \'  \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\')\n+        fd = TextDiff(a, a, "attribute")\n+        self.assertEqual(fd.ndiff(), "  \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0")\n \n     def testDiffText(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n-        expected = \'- \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0%s+ \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\' % linesep\n-        fd = TextDiff(a, b, \'attribute\')\n+        expected = "- \xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0%s+ \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb" % linesep\n+        fd = TextDiff(a, b, "attribute")\n         self.assertEqual(fd.ndiff(), expected)\n \n     def testUnifiedDiff(self):\n@@ -107,7 +107,7 @@ def testUnifiedDiff(self):\n \n -\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n +\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        fd = TextDiff(a, b, \'attribute\', \'version1\', \'version2\')\n+        fd = TextDiff(a, b, "attribute", "version1", "version2")\n         self.assertEqual(fd.unified_diff(), expected)\n \n     def testHTMLDiff(self):\n@@ -125,10 +125,10 @@ def testHTMLDiff(self):\n             <tr><td class="diff_next" id="difflib_chg_to0__0"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="from0_1">1</td><td nowrap="nowrap"><span class="diff_sub">\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0</span></td><td class="diff_next"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="to0_1">1</td><td nowrap="nowrap"><span class="diff_add">\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb</span></td></tr>\n         </tbody>\n     </table>"""  # NOQA\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertEqual(fd.html_diff(), expected)\n \n-        fd = TextDiff(a, h, \'attribute\')\n+        fd = TextDiff(a, h, "attribute")\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.html_diff())\n         self.assertIn("&gt;", fd.html_diff())\n@@ -138,10 +138,10 @@ def testInlineDiff(self):\n         a = A()\n         b = B()\n         h = H()\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, "attribute")\n         self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n \n-        fd = TextDiff(a, h, \'attribute\')\n+        fd = TextDiff(a, h, "attribute")\n         self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n         # h.attribute contains a script, and this should be escaped.\n         self.assertNotIn(h.attribute, fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py\nindex 9217f6e..1178909 100644\n--- a/Products/CMFDiffTool/tests/test_astextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_astextdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import date\n from Products.CMFDiffTool.interfaces import IDifference\n from Products.CMFDiffTool.TextDiff import AsTextDiff\n@@ -6,18 +5,17 @@\n import unittest\n \n \n-class DateDummyType(object):\n+class DateDummyType:\n     def __init__(self, date):\n         self.date = date\n \n \n-class BoolDummyType(object):\n+class BoolDummyType:\n     def __init__(self, bool_field):\n         self.bool_field = bool_field\n \n \n class AsTextDiffTestCase(unittest.TestCase):\n-\n     def test_should_diff_anything_as_text(self):\n         self._test_diff_date(date(2011, 1, 1), date(2012, 2, 2), False)\n         self._test_diff_date(date(2011, 1, 1), date(2011, 1, 1), True)\n@@ -25,7 +23,7 @@ def test_should_diff_anything_as_text(self):\n         self._test_diff_date(None, None, True)\n \n     def _test_diff_date(self, d1, d2, same):\n-        diff = AsTextDiff(DateDummyType(d1), DateDummyType(d2), \'date\')\n+        diff = AsTextDiff(DateDummyType(d1), DateDummyType(d2), "date")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n \n@@ -52,7 +50,7 @@ def test_should_diff_boolean_fields(self):\n         self._test_diff_bool(None, None, True)\n \n     def _test_diff_bool(self, b1, b2, same):\n-        diff = AsTextDiff(BoolDummyType(b1), BoolDummyType(b2), \'bool_field\')\n+        diff = AsTextDiff(BoolDummyType(b1), BoolDummyType(b2), "bool_field")\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n@@ -61,6 +59,5 @@ def _test_diff_bool(self, b1, b2, same):\n         if same:\n             self.assertFalse(inline_diff)\n         else:\n-            self.assertTrue(\n-                (\'True\' in inline_diff) or (\'False\' in inline_diff))\n+            self.assertTrue(("True" in inline_diff) or ("False" in inline_diff))\n             # self.assertFalse(\'None\' in inline_diff)\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 9225476..60e9dd5 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n@@ -10,86 +9,88 @@\n \n \n class BinaryDiffTestCase(BaseDXTestCase):\n-\n     def test_should_detect_different_filename(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="blah.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\'),\n+            "obj2",\n+            file=NamedFile(data="contents", filename="bleh.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n \n     def test_should_detect_different_data(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'different contents\', filename=u\'f.txt\'),\n+            "obj2",\n+            file=NamedFile(data="different contents", filename="f.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n \n     def test_should_detect_same_data_and_filename(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n+            "obj2",\n+            file=NamedFile(data="contents", filename="f.txt"),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertTrue(diff.same)\n \n     def test_should_escape_html(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+            "obj1",\n+            file=NamedFile(data="contents", filename="blah.txt"),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=u\'<script>alert("Hacker filename")</script>.txt\'),\n+            "obj2",\n+            file=NamedFile(\n+                data=\'<script>alert("Hacker data")</script>\',\n+                filename=\'<script>alert("Hacker filename")</script>.txt\',\n+            ),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n         # The script tag should be escaped.\n@@ -102,7 +103,7 @@ def test_should_escape_html(self):\n         # which namedfiles do not have.  So we hack it.\n         obj1.file.getFilename = lambda: obj1.file.filename\n         obj2.file.getFilename = lambda: obj2.file.filename\n-        diff = BinaryDiff.BinaryDiff(obj1, obj2, \'file\')\n+        diff = BinaryDiff.BinaryDiff(obj1, obj2, "file")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertFalse(diff.same)\n         # The script tag should be escaped.\ndiff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py\nindex 63d5b45..a1a84e2 100644\n--- a/Products/CMFDiffTool/tests/test_choicediff.py\n+++ b/Products/CMFDiffTool/tests/test_choicediff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFDiffTool import testing\n@@ -9,31 +8,34 @@\n \n \n class ChoiceDiffTestCase(BaseDXTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n         )\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n         )\n \n-        self.obj1 = self.portal[\'obj1\']\n-        self.obj2 = self.portal[\'obj2\']\n+        self.obj1 = self.portal["obj1"]\n+        self.obj2 = self.portal["obj2"]\n \n     def test_should_diff_choice_field(self):\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0],\n-                               testing.VOCABULARY_TUPLES[0][0], True)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0],\n-                               testing.VOCABULARY_TUPLES[1][0], False)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0],\n-                               testing.VOCABULARY_TUPLES[0][0], False)\n-        self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0],\n-                               testing.VOCABULARY_TUPLES[1][0], True)\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[0][0], True\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0], False\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[0][0], False\n+        )\n+        self._test_diff_choice(\n+            testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[1][0], True\n+        )\n \n         self._test_diff_choice(testing.VOCABULARY_TUPLES[0][0], None, False)\n         self._test_diff_choice(testing.VOCABULARY_TUPLES[1][0], None, False)\n@@ -44,7 +46,7 @@ def test_should_diff_choice_field(self):\n     def _test_diff_choice(self, value1, value2, same):\n         self.obj1.choice = value1\n         self.obj2.choice = value2\n-        diff = ChoiceDiff(self.obj1, self.obj2, \'choice\')\n+        diff = ChoiceDiff(self.obj1, self.obj2, "choice")\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n \n@@ -54,7 +56,9 @@ def _test_diff_choice(self, value1, value2, same):\n         else:\n             if value1 is not None:\n                 self.assertTrue(\n-                    title_or_value(testing.VOCABULARY, value1) in inline_diff)\n+                    title_or_value(testing.VOCABULARY, value1) in inline_diff\n+                )\n             if value2 is not None:\n                 self.assertTrue(\n-                    title_or_value(testing.VOCABULARY, value2) in inline_diff)\n+                    title_or_value(testing.VOCABULARY, value2) in inline_diff\n+                )\ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex c75223b..48b6ae6 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import date\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -14,77 +13,75 @@\n \n \n class DexterityDiffTestCase(BaseDXTestCase):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_should_diff(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            title=u\'Object 1\',\n-            description=u\'Desc 1\',\n-            text=u\'Text 1\',\n+            "obj1",\n+            title="Object 1",\n+            description="Desc 1",\n+            text="Text 1",\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            title=u\'Object 2\',\n-            text=u\'Text 2\',\n+            "obj2",\n+            title="Object 2",\n+            text="Text 2",\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n             self.assertTrue(IDifference.providedBy(d))\n             self.assertFalse(d.field in EXCLUDED_FIELDS)\n-            if d.field in [\'title\', \'description\', \'text\']:\n-                self.assertFalse(\n-                    d.same, \'Field %s should be different.\' % d.field)\n+            if d.field in ["title", "description", "text"]:\n+                self.assertFalse(d.same, "Field %s should be different." % d.field)\n             else:\n-                self.assertTrue(d.same, \'Field %s should be equal.\' % d.field)\n+                self.assertTrue(d.same, "Field %s should be equal." % d.field)\n \n     def test_should_provide_inline_diff_for_date_field(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             date=date(2001, 1, 1),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n             date=date(2001, 1, 2),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n-            if d.field == \'date\':\n+            if d.field == "date":\n                 self.assertTrue(d.inline_diff())\n \n     def test_should_provide_inline_diff_for_file_list_field(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             files=None,\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            files=[NamedFile(data=\'data\', filename=u\'a.txt\')],\n+            "obj2",\n+            files=[NamedFile(data="data", filename="a.txt")],\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         for d in diffs:\n-            if d.field == \'files\':\n+            if d.field == "files":\n                 inline_diff = d.inline_diff()\n                 self.assertTrue(inline_diff)\n                 self.assertTrue(obj2.files[0].filename in inline_diff)\n@@ -92,68 +89,68 @@ def test_should_provide_inline_diff_for_file_list_field(self):\n     def test_should_provide_diff_for_behaviors_fields(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n+            "obj1",\n             date=date(2001, 1, 1),\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n+            "obj2",\n             date=date(2001, 1, 2),\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n-        diffs = DexterityCompoundDiff(obj1, obj2, \'any\')\n+        diffs = DexterityCompoundDiff(obj1, obj2, "any")\n         fields = [d.field for d in diffs]\n-        self.assertIn(\'title\', fields)\n-        self.assertIn(\'description\', fields)\n+        self.assertIn("title", fields)\n+        self.assertIn("description", fields)\n \n     def test_should_provide_diff_for_related_fields(self):\n         intids = getUtility(IIntIds)\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj1\',\n-            title=u\'Object 1\',\n-            description=u\'Desc 1\',\n-            text=u\'Text 1\',\n+            "obj1",\n+            title="Object 1",\n+            description="Desc 1",\n+            text="Text 1",\n         )\n-        obj1 = self.portal[\'obj1\']\n+        obj1 = self.portal["obj1"]\n \n         intid = intids.register(obj1)\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj2\',\n-            title=u\'Object 2\',\n+            "obj2",\n+            title="Object 2",\n             relatedItems=[RelationValue(intid)],\n         )\n-        obj2 = self.portal[\'obj2\']\n+        obj2 = self.portal["obj2"]\n \n         intid = intids.register(obj2)\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n-            \'obj3\',\n-            title=u\'Object 3\',\n+            "obj3",\n+            title="Object 3",\n             relatedItems=[RelationValue(intid)],\n         )\n-        obj3 = self.portal[\'obj3\']\n+        obj3 = self.portal["obj3"]\n \n-        diffs = DexterityCompoundDiff(obj2, obj3, \'any\')\n+        diffs = DexterityCompoundDiff(obj2, obj3, "any")\n         for d in diffs:\n-            if d.field == \'relatedItems\':\n+            if d.field == "relatedItems":\n                 inline_diff = d.inline_diff()\n                 self.assertTrue(inline_diff)\n                 i_diff_sub = inline_diff.index(\'<div class="diff_sub">\')\n-                i_obj1 = inline_diff.index(\'Object 1\')\n+                i_obj1 = inline_diff.index("Object 1")\n                 i_diff_add = inline_diff.index(\'<div class="diff_add">\')\n-                i_obj2 = inline_diff.index(\'Object 2\')\n+                i_obj2 = inline_diff.index("Object 2")\n                 self.assertTrue(i_diff_sub < i_obj1 < i_diff_add < i_obj2)\n \n                 n_diff = d.ndiff()\n                 self.assertTrue(n_diff)\n-                i_rem = n_diff.index(\'-\')\n-                i_obj1 = n_diff.index(\'obj1\')\n-                i_add = n_diff.index(\'+\')\n-                i_obj2 = n_diff.index(\'obj2\')\n+                i_rem = n_diff.index("-")\n+                i_obj1 = n_diff.index("obj1")\n+                i_add = n_diff.index("+")\n+                i_obj2 = n_diff.index("obj2")\n                 self.assertTrue(i_rem < i_obj1 < i_add < i_obj2)\ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex 24a3c3d..58d8546 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -6,64 +5,62 @@\n import unittest\n \n \n-class DummyType(object):\n+class DummyType:\n     def __init__(self, files):\n         """`files` is a sequence of (data, filename) tuples."""\n-        self.files = files and [\n-            NamedFile(data=d, filename=fn) for (d, fn) in files]\n+        self.files = files and [NamedFile(data=d, filename=fn) for (d, fn) in files]\n \n \n class AsTextDiffTestCase(unittest.TestCase):\n-\n     def test_should_diff_file_lists_correctly(self):\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data2\', u\'filename2\')],\n+            [("data1", "filename1")],\n+            [("data2", "filename2")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'data1\', u\'filename1\'), (\'datay\', u\'filenamey\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("data1", "filename1"), ("datay", "filenamey")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'datax\', u\'filenamex\'), (\'data1\', u\'filename1\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("datax", "filenamex"), ("data1", "filename1")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [("data1", "filename1")],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\')],\n-            [(\'data1\', u\'filename1\')],\n+            [("data1", "filename1")],\n+            [("data1", "filename1")],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             True,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             None,\n             False,\n         )\n         self._test_diff_files(\n-            [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n+            [("data1", "filename1"), ("datax", "filenamex")],\n             [],\n             False,\n         )\n         self._test_diff_files(\n             [\n-                (\'<script>alert("Hacker data 1")</script>\', u\'filename1\'),\n-                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+                (\'<script>alert("Hacker data 1")</script>\', "filename1"),\n+                (\'<script>alert("Hacker data 2")</script>\', "filename2"),\n             ],\n             [\n-                (\'data1\', u\'<script>alert("Hacker data")</script>.txt\'),\n-                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+                ("data1", \'<script>alert("Hacker data")</script>.txt\'),\n+                (\'<script>alert("Hacker data 2")</script>\', "filename2"),\n             ],\n             False,\n         )\n@@ -73,7 +70,8 @@ def test_should_diff_file_lists_correctly(self):\n \n     def _test_diff_files(self, files1, files2, same):\n         diff = namedfile.NamedFileListDiff(\n-            DummyType(files1), DummyType(files2), \'files\')\n+            DummyType(files1), DummyType(files2), "files"\n+        )\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n         inline = diff.inline_diff()\ndiff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py\nindex fadc602..92e8ea4 100644\n--- a/Products/CMFDiffTool/tests/test_install.py\n+++ b/Products/CMFDiffTool/tests/test_install.py\n@@ -1,14 +1,10 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n class InstallTestCase(BaseDXTestCase):\n-\n     def test_compound_diff_type_should_be_registered(self):\n-        diff_tool = getToolByName(self.portal, \'portal_diff\')\n-        self.assertTrue(\n-            DexterityCompoundDiff.meta_type in diff_tool.listDiffTypes())\n-        self.assertTrue(\n-            diff_tool.getDiffType(DexterityCompoundDiff.meta_type))\n+        diff_tool = getToolByName(self.portal, "portal_diff")\n+        self.assertTrue(DexterityCompoundDiff.meta_type in diff_tool.listDiffTypes())\n+        self.assertTrue(diff_tool.getDiffType(DexterityCompoundDiff.meta_type))\ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex 682e420..90d8a29 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.textfield.value import RichTextValue\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n@@ -7,66 +6,66 @@\n import unittest\n \n \n-class DummyType(object):\n+class DummyType:\n     def __init__(self, body):\n         self.body = body\n \n \n class RichTextDiffTestCase(unittest.TestCase):\n     """Test RichTextDiff"""\n+\n     layer = PLONE_INTEGRATION_TESTING\n \n     def test_parseField_value_is_none(self):\n         value = None\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         self.assertEqual(diff._parseField(value), [])\n \n     def test_parseField_value_is_not_none(self):\n-        value = RichTextValue(u\'foo\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n-        self.assertEqual(diff._parseField(value), [u\'foo\'])\n+        value = RichTextValue("foo")\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n+        self.assertEqual(diff._parseField(value), ["foo"])\n \n     def test_inline_diff_same(self):\n-        value = RichTextValue(u\'foo\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        value = RichTextValue("foo")\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         inline_diff = diff.inline_diff()\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, True)\n-        self.assertEqual(inline_diff, u\'foo \')\n+        self.assertEqual(inline_diff, "foo ")\n \n     def test_inline_diff_same_hacker(self):\n-        value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n-        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n         self.assertNotIn("&gt;", inline_diff)\n \n     def test_inline_diff_different(self):\n-        old_value = RichTextValue(u\'foo\')\n-        new_value = RichTextValue(u\'foo bar\')\n-        diff = CMFDTHtmlDiff(\n-            DummyType(old_value), DummyType(new_value), \'body\')\n+        old_value = RichTextValue("foo")\n+        new_value = RichTextValue("foo bar")\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n \n         inline_diff = diff.inline_diff()\n \n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, False)\n-        self.assertEqual(inline_diff, u\'foo <span class="insert">bar </span> \')\n+        self.assertEqual(inline_diff, \'foo <span class="insert">bar </span> \')\n \n     def test_inline_diff_different_hacker(self):\n-        old_value = RichTextValue(u\'clean\')\n-        new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n-        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        old_value = RichTextValue("clean")\n+        new_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n         self.assertNotIn("&gt;", inline_diff)\n \n-        old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n-        new_value = RichTextValue(u\'clean\')\n-        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        old_value = RichTextValue(\'<script>alert("Hacker value")</script>\')\n+        new_value = RichTextValue("clean")\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), "body")\n         inline_diff = diff.inline_diff()\n         # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 3d83865..715e9fe 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -8,12 +8,12 @@ def safe_unicode(value):\n     try:\n         value = str(value)\n     except UnicodeDecodeError:\n-        value = value.decode(\'utf-8\', \'replace\')\n+        value = value.decode("utf-8", "replace")\n     return value\n \n \n def safe_utf8(value):\n-    return safe_unicode(value).encode(\'utf-8\')\n+    return safe_unicode(value).encode("utf-8")\n \n \n def scrub_html(value):\n@@ -37,6 +37,7 @@ def html_escape(value):\n     value = safe_unicode(value)\n     return escape(value, 1)\n \n+\n def html_safe(value):\n     value = safe_unicode(value)\n     return scrub_html(value)\ndiff --git a/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt b/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\nindex 822ef99..333d23a 100644\n--- a/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\n+++ b/Products/CMFDiffTool/zpt/editCMFDiffTool.zpt\n@@ -1,7 +1,10 @@\n <html tal:omit-tag="">\n   <span tal:replace="structure here/manage_page_header">Header</span>\n-  <span tal:define="manage_tabs_message options/manage_tabs_message | nothing"\n-    tal:replace="structure here/manage_tabs">Tabs</span>\n+  <span tal:define="\n+          manage_tabs_message options/manage_tabs_message | nothing;\n+        "\n+        tal:replace="structure here/manage_tabs"\n+  >Tabs</span>\n \n \n   <style>\n@@ -12,91 +15,140 @@\n \n     #diffTable td { padding: 1ex; }\n \n-    .lastrow td { \n-      border-bottom: 1px solid black; \n+    .lastrow td {\n+      border-bottom: 1px solid black;\n     }\n   </style>\n \n   <h3>Differences by Type</h3>\n-  \n-  <form action="manage_addDiffField" method="post">\n+\n+  <form action="manage_addDiffField"\n+        method="post"\n+  >\n     <table>\n       <tr>\n-    <th>Portal Type</th>\n-    <th>Field name</th>\n-    <th>Diff Type</th>\n+        <th>Portal Type</th>\n+        <th>Field name</th>\n+        <th>Diff Type</th>\n       </tr>\n       <tr>\n-    <td>\n-      <select name="pt_name">\n-        <option tal:repeat="pt here/portal_types/listTypeInfo"\n-                tal:attributes="value pt/id;"\n-                tal:content="pt/id">[group]</option>\n-      </select>\n-    </td>\n-    <td>\n-      <input type="text" name="field" />\n-    </td>\n-    <td>\n-      <select name="diff">\n-        <option tal:repeat="d here/listDiffTypes"\n-            tal:attributes="value d;"\n-            tal:content="d">[group]</option>\n-      </select>\n-    </td>\n-    <td>\n-      <input type="submit" name="add" value="Add field" />\n-    </td>\n+        <td>\n+          <select name="pt_name">\n+            <option tal:repeat="pt here/portal_types/listTypeInfo"\n+                    tal:content="pt/id"\n+                    tal:attributes="\n+                      value pt/id;\n+                    "\n+            >[group]</option>\n+          </select>\n+        </td>\n+        <td>\n+          <input name="field"\n+                 type="text"\n+          />\n+        </td>\n+        <td>\n+          <select name="diff">\n+            <option tal:repeat="d here/listDiffTypes"\n+                    tal:content="d"\n+                    tal:attributes="\n+                      value d;\n+                    "\n+            >[group]</option>\n+          </select>\n+        </td>\n+        <td>\n+          <input name="add"\n+                 type="submit"\n+                 value="Add field"\n+          />\n+        </td>\n       </tr>\n     </table>\n   </form>\n \n-  <form action="." method="post">\n+  <form action="."\n+        method="post"\n+  >\n \n     <table id="diffTable">\n       <thead>\n-    <tr>\n-      <th>Portal Type</th>\n-      <th>Field</th>\n-      <th>Diff Type</th>\n-      <th>Delete</th>\n-    </tr>\n+        <tr>\n+          <th>Portal Type</th>\n+          <th>Field</th>\n+          <th>Diff Type</th>\n+          <th>Delete</th>\n+        </tr>\n       </thead>\n       <tal:p_type tal:repeat="pt_name here/portal_types/listContentTypes">\n-    <tal:defs tal:define="diff_map python:here.getDiffForPortalType(pt_name)" tal:condition="diff_map">\n-      <tr tal:repeat="pair diff_map/items" tal:attributes="class python:test(repeat[\'pair\'].end, \'lastrow\', nothing)">\n-        <tal:defs tal:define="field python:pair[0]; difftype python:pair[1];">\n+        <tal:defs tal:define="\n+                    diff_map python:here.getDiffForPortalType(pt_name);\n+                  "\n+                  tal:condition="diff_map"\n+        >\n+          <tr tal:repeat="pair diff_map/items"\n+              tal:attributes="\n+                class python:test(repeat[\'pair\'].end, \'lastrow\', nothing);\n+              "\n+          >\n+            <tal:defs tal:define="\n+                        field python:pair[0];\n+                        difftype python:pair[1];\n+                      ">\n \n-          <td class="form-label">\n-        <a tal:condition="repeat/pair/start" \n-                   tal:attributes="href string:../portal_types/$pt_name/manage_workspace" \n-                   tal:content="pt_name">[pt_name]</a>\n-          </td>\n+              <td class="form-label">\n+                <a tal:condition="repeat/pair/start"\n+                   tal:content="pt_name"\n+                   tal:attributes="\n+                     href string:../portal_types/$pt_name/manage_workspace;\n+                   "\n+                >[pt_name]</a>\n+              </td>\n \n-          <td class="form-label" tal:content="field">[field]</td>\n-          <td class="form-element">\n-        <select name="updates.diff:records">\n-          <option tal:repeat="d here/listDiffTypes"\n-                   tal:content="d"\n-               tal:attributes="value d;\n-                                           selected python:test(d == difftype, \'selected\' ,nothing);">\n+              <td class="form-label"\n+                  tal:content="field"\n+              >[field]</td>\n+              <td class="form-element">\n+                <select name="updates.diff:records">\n+                  <option tal:repeat="d here/listDiffTypes"\n+                          tal:content="d"\n+                          tal:attributes="\n+                            value d;\n+                            selected python:test(d == difftype, \'selected\' ,nothing);\n+                          "\n+                  >\n             [group]\n-          </option>\n-        </select>\n-          </td>\n-          <td align="center">\n-        <input type="hidden" name="updates.pt_name:records" tal:attributes="value pt_name" />\n-        <input type="hidden" name="updates.field:records" tal:attributes="value field" />\n-        <input type="checkbox" name="updates.delete:records" />\n-          </td>\n+                  </option>\n+                </select>\n+              </td>\n+              <td align="center">\n+                <input name="updates.pt_name:records"\n+                       type="hidden"\n+                       tal:attributes="\n+                         value pt_name;\n+                       "\n+                />\n+                <input name="updates.field:records"\n+                       type="hidden"\n+                       tal:attributes="\n+                         value field;\n+                       "\n+                />\n+                <input name="updates.delete:records"\n+                       type="checkbox"\n+                />\n+              </td>\n+            </tal:defs>\n+          </tr>\n         </tal:defs>\n-      </tr>   \n-    </tal:defs>   \n       </tal:p_type>\n     </table>\n-    \n-    <input type="submit" name="manage_editDiffFields:action" value="Update" />\n+\n+    <input name="manage_editDiffFields:action"\n+           type="submit"\n+           value="Update"\n+    />\n   </form>\n-  \n+\n   <span tal:replace="structure here/manage_page_footer">Footer</span>\n </html>\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex de40ea7..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..fbbe123 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,48 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ExtensionClass = [\'ComputedAttribute\']\n+ignore-packages = [\'plone.namedfile\', \'plone.dexterity\', \'plone.app.textfield\']\n+\n+[tool.codespell]\n+ignore-words-list = "alo"\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex dd79c68..b865631 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,16 +1,14 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n setup(\n-    name=\'Products.CMFDiffTool\',\n+    name="Products.CMFDiffTool",\n     version=version,\n     description="Diff tool for Plone",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Programming Language :: Python :: 3.8",\n@@ -23,36 +21,36 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Topic :: Internet :: WWW/HTTP",\n     ],\n-    keywords=\'Diff Plone\',\n-    author=\'Brent Hendricks\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/Products.CMFDiffTool\',\n-    license=\'GPL\',\n+    keywords="Diff Plone",\n+    author="Brent Hendricks",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/Products.CMFDiffTool",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'zope.component\',\n-            \'plone.app.testing\',\n-            \'plone.namedfile\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.contenttypes[test]\',\n-            ]\n+            "zope.component",\n+            "plone.app.testing",\n+            "plone.namedfile",\n+            "plone.app.contenttypes[test]",\n+            "zope.intid",\n+        ]\n     ),\n-    python_requires=\'>=3.8\',\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'plone.base\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Acquisition\',\n-        \'Zope\',\n+        "ExtensionClass",\n+        "Products.GenericSetup",\n+        "Products.PortalTransforms",\n+        "Zope",\n+        "setuptools",\n+        "plone.base",\n+        "z3c.relationfield",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n     """,\n-    )\n+)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..903e642\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.CMFDiffTool {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s Products.CMFDiffTool {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

