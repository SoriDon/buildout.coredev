Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:01:26+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/348287cf29d668e72ee29b5ca47353e3bc0e1b28

fix startup in python3

Files changed:
M src/Products/PlonePAS/tools/groupdata.py

b'diff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 24b9d82..25c917c 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -514,9 +514,15 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n+<<<<<<< HEAD\n     canAddToGroup = MemberData.canAddToGroup.__func__\n     canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n     canAssignRole = MemberData.canAssignRole.__func__\n+=======\n+    canAddToGroup = MemberData.canAddToGroup\n+    canRemoveFromGroup = MemberData.canRemoveFromGroup\n+    canAssignRole = MemberData.canAssignRole\n+>>>>>>> fix startup in python3\n \n     # plugin getters\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Pavel Bogdanovic (pabo3000) <pb@prontonet.eu>
Commit: https://github.com/plone/Products.PlonePAS/commit/08a3671abf090c98a86972c2d99fed0ce77ce6c0

Fix pull request: Fix startup issues in python3

Files changed:
M src/Products/PlonePAS/tools/groupdata.py

b'diff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 25c917c..24b9d82 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -514,15 +514,9 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n-<<<<<<< HEAD\n     canAddToGroup = MemberData.canAddToGroup.__func__\n     canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n     canAssignRole = MemberData.canAssignRole.__func__\n-=======\n-    canAddToGroup = MemberData.canAddToGroup\n-    canRemoveFromGroup = MemberData.canRemoveFromGroup\n-    canAssignRole = MemberData.canAssignRole\n->>>>>>> fix startup in python3\n \n     # plugin getters\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/94f53bfcf928b7f196490ac844bf33e77c596fdc

fix setting the auth-cookie in py3

Files changed:
M src/Products/PlonePAS/plugins/cookie_handler.py

b"diff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex a301a1e..1e0ec65 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -70,7 +70,11 @@ def updateCredentials(self, request, response, login, new_password):\n \n         setAuthCookie = getattr(self, 'setAuthCookie', None)\n         if setAuthCookie:\n-            cookie_val = encodestring('%s:%s' % (login, new_password))\n+            cookie_str = b':'.join([\n+                login.encode('utf-8'),\n+                new_password.encode('utf-8'),\n+            ])\n+            cookie_val = encodestring(cookie_str)\n             cookie_val = cookie_val.rstrip()\n             setAuthCookie(response, self.cookie_name, quote(cookie_val))\n         else:\n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/05bd87c25b81065c831c1d07cf0c1911cff5061b

fix assignment of MemberData-functions during startup in py3

Files changed:
M src/Products/PlonePAS/tools/groupdata.py

b"diff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 24b9d82..cfe9eeb 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -30,6 +30,7 @@\n from zope.interface import implementer\n \n import logging\n+import six\n \n logger = logging.getLogger('PlonePAS')\n _marker = object()\n@@ -514,9 +515,15 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n-    canAddToGroup = MemberData.canAddToGroup.__func__\n-    canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n-    canAssignRole = MemberData.canAssignRole.__func__\n+    if six.PY3:\n+        canAddToGroup = MemberData.canAddToGroup\n+        canRemoveFromGroup = MemberData.canRemoveFromGroup\n+        canAssignRole = MemberData.canAssignRole\n+    else:\n+        # in PY2 this is a unbound method\n+        canAddToGroup = MemberData.canAddToGroup.__func__\n+        canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n+        canAssignRole = MemberData.canAssignRole.__func__\n \n     # plugin getters\n \n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/8cdb99009fe84a93c79ef3107318b0d6614cd245

user properties are text in py3

Files changed:
M src/Products/PlonePAS/plugins/ufactory.py

b'diff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 6663650..8edeabe 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -227,7 +227,7 @@ def getProperty(self, id, default=_marker):\n         for sheet in self.getOrderedPropertySheets():\n             if sheet.hasProperty(id):\n                 value = sheet.getProperty(id)\n-                if isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, six.text_type):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/30f9640bad1e61e5d3e7054f8ca018396eae995e

fix scaling user profile

Files changed:
M src/Products/PlonePAS/utils.py

b"diff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 61af69c..106ad12 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n-from six import StringIO\n+from six import BytesIO\n from six.moves import urllib\n \n import six\n@@ -159,7 +159,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     if original_mode == 'P' and format in ('GIF', 'PNG'):\n         image = image.convert('P')\n     # Save\n-    new_file = StringIO()\n+    new_file = BytesIO()\n     image.save(new_file, format, quality=IMAGE_SCALE_PARAMS['quality'])\n     new_file.seek(0)\n     # Return the file data and the new mimetype\n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/605c3aba93fceb3be5b6a5fc04a4ab4d7c959728

fix another case where properties are text in py3

Files changed:
M src/Products/PlonePAS/tools/memberdata.py

b'diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 29d2386..36a9245 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -304,7 +304,7 @@ def getProperty(self, id, default=_marker):\n             if sheet.hasProperty(id):\n                 # Return the first one that has the property.\n                 value = sheet.getProperty(id)\n-                if isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, six.text_type):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/fbb6ccfbce26b6687c4d366a093821e2554c199c

migrate all tests away from PloneTestCase
fix most tests with py3

Files changed:
A src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/tests/cookie_auth.rst
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/membership.py
D src/Products/PlonePAS/tests/base.py

b'diff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 8edeabe..f0fe7c1 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -215,7 +215,7 @@ def setProperties(self, properties=None, **kw):\n                 continue\n \n             update = {}\n-            for (key, value) in properties.items():\n+            for (key, value) in list(properties.items()):\n                 if sheet.hasProperty(key):\n                     update[key] = value\n                     del properties[key]\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nnew file mode 100644\nindex 0000000..39bcf18\n--- /dev/null\n+++ b/src/Products/PlonePAS/testing.py\n@@ -0,0 +1,52 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n+from plone.testing import z2\n+\n+import Products.PlonePAS\n+\n+\n+class ProductsPlonepasLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=Products.PlonePAS)\n+        z2.installProduct(app, \'Products.PlonePAS\')\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'Products.PlonePAS:PlonePAS\')\n+        # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        from Products.CMFPlone.utils import _createObjectByType\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        mtool = portal.portal_membership\n+        if not mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+        mtool.createMemberArea(TEST_USER_ID)\n+        if mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+\n+        _createObjectByType(\'Folder\', portal, id=\'folder\')\n+\n+\n+PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\n+\n+\n+PRODUCTS_PLONEPAS_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n+    name=\'ProductsPlonepasLayer:IntegrationTesting\',\n+)\n+\n+\n+PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n+    name=\'ProductsPlonepasLayer:FunctionalTesting\',\n+)\ndiff --git a/src/Products/PlonePAS/tests/base.py b/src/Products/PlonePAS/tests/base.py\ndeleted file mode 100644\nindex 2003845..0000000\n--- a/src/Products/PlonePAS/tests/base.py\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase as TestCase  # noqa\n-from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase  # noqa\ndiff --git a/src/Products/PlonePAS/tests/cookie_auth.rst b/src/Products/PlonePAS/tests/cookie_auth.rst\nindex e5b0e79..ae68c02 100644\n--- a/src/Products/PlonePAS/tests/cookie_auth.rst\n+++ b/src/Products/PlonePAS/tests/cookie_auth.rst\n@@ -11,13 +11,13 @@ User in Plone Site\n Plone Site has PAS installed\n \n   >>> portal = layer[\'portal\']\n-  >>> print portal.acl_users.meta_type\n+  >>> print(portal.acl_users.meta_type)\n   Pluggable Auth Service\n \n User exists in the user folder inside the Plone Site.\n \n   >>> uf = portal.acl_users\n-  >>> print uf.meta_type\n+  >>> print(uf.meta_type)\n   Pluggable Auth Service\n \n   >>> user_name, user_password, user_role = (\'foo\', \'bar\', \'Manager\')\n@@ -32,7 +32,7 @@ Login to Plone Site using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n   >>> browser.open(\'%s/manage\' % portal.absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \n Make sure cookie plugin is installed and activated.\n@@ -53,10 +53,10 @@ Make sure cookie plugin is installed and activated.\n   ...       pass\n \n   >>> for active, iface in actives:\n-  ...     print iface,\n+  ...     print(iface,)\n   ...     for id, plugin in active:\n   ...         if id == \'credentials_cookie_auth\':\n-  ...            print True\n+  ...            print(True)\n   <...IExtraction...> True\n   <...IChallenge...> True\n   <...ICredentialsUpdate...> <...ICredentialsReset...>\n@@ -68,7 +68,7 @@ User Exists on the folder containing the Plone Site, which should be a\n Pluggable Auth Service too.\n \n   >>> uf = layer[\'app\'].acl_users\n-  >>> print uf.meta_type\n+  >>> print(uf.meta_type)\n   Pluggable Auth Service\n \n   >>> user_name, user_password, user_role = (\'baz\', \'bar\', \'Manager\')\n@@ -85,7 +85,7 @@ Login directly to containing folder using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (user_name, user_password,))\n   >>> browser.open(\'%s/manage\' % layer[\'app\'].absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \n Login to Plone Site using Basic Auth works.\n@@ -93,6 +93,6 @@ Login to Plone Site using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (user_name, user_password,))\n   >>> browser.open(\'%s/manage\' % portal.absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 5c7a8c3..3dfede8 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n-from six import StringIO\n+from six import BytesIO\n from ZPublisher.HTTPRequest import FileUpload\n \n-TEXT = \'file data\'\n+TEXT = b\'file data\'\n \n \n class FieldStorage(object):\n@@ -33,7 +33,7 @@ def __init__(self, filename=None, data=None, headers=None):\n             self.data = data\n         if headers is not None:\n             self.headers = headers\n-        self.file = StringIO(self.data)\n+        self.file = BytesIO(self.data)\n \n     def seek(self, *args):\n         pass\ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 5518805..220d896 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -1,20 +1,24 @@\n # -*- coding: utf-8 -*-\n-from Products.PlonePAS.tests import base\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.events import \\\n-    IPrincipalDeletedEvent\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.events import IPrincipalDeletedEvent\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n+from Products.PluggableAuthService.PluggableAuthService import  _SWALLOWABLE_PLUGIN_EXCEPTIONS\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n+import unittest\n \n-class BasicOpsTestCase(base.TestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+class BasicOpsTestCase(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.acl_users = self.portal.acl_users\n \n     def compareRoles(self, target, user, roles):\n@@ -32,11 +36,9 @@ def compareRoles(self, target, user, roles):\n             user_roles = list(u.getRoles())\n         else:\n             user_roles = list(u.getRolesInContext(target))\n-        actual_roles = filter(lambda x: x not in non_roles, user_roles)\n-        actual_roles.sort()\n+        actual_roles = list(filter(lambda x: x not in non_roles, user_roles))\n         wished_roles = list(roles)\n-        wished_roles.sort()\n-        if actual_roles == wished_roles:\n+        if sorted(actual_roles) == sorted(wished_roles):\n             return 1\n         raise RuntimeError("User %s: Whished roles: %s BUT current "\n                            "roles: %s" % (user, wished_roles, actual_roles))\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 9e2c509..6cf3903 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n from plone.testing import layered\n import doctest\n import unittest\n@@ -14,7 +14,7 @@ def test_suite():\n                 package=\'Products.PlonePAS.tests\',\n                 optionflags=doctest.ELLIPSIS\n             ),\n-            layer=PTC_FUNCTIONAL_TESTING\n+            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n         )\n     )\n     suite.addTest(\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex 343c6e7..d69da2d 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -2,9 +2,12 @@\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_parent\n-from Products.PlonePAS.tests import base\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import logout\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+import unittest\n \n \n def sortTuple(t):\n@@ -13,9 +16,12 @@ def sortTuple(t):\n     return tuple(l)\n \n \n-class TestGroupDataTool(base.TestCase):\n+class TestGroupDataTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n@@ -35,9 +41,12 @@ def testWrapGroup(self):\n                          \'GroupManager\')\n \n \n-class TestGroupData(base.TestCase):\n+class TestGroupData(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.memberdata = self.portal.portal_memberdata\n         self.acl_users = self.portal.acl_users\n@@ -73,13 +82,13 @@ def testGroupMembersAreWrapped(self):\n         self.assertEqual(aq_parent(ms[0]).__class__.__name__, \'PluggableAuthService\')\n \n     def testAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         g = self.groups.getGroupById(\'foo\')\n         g.addMember(TEST_USER_ID)\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         g = self.groups.getGroupById(\'foo\')\n         g.addMember(TEST_USER_ID)\n         g.removeMember(TEST_USER_ID)\n@@ -121,6 +130,7 @@ def testGetRoles(self):\n                          (\'Authenticated\', \'Member\'))\n \n     def testGetRolesInContext(self):\n+        self.folder = self.portal[\'folder\']\n         g = self.groups.getGroupById(\'foo\')\n         self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n         user = self.acl_users.getUser(TEST_USER_NAME)\n@@ -145,19 +155,22 @@ def testHasRole(self):\n         self.assertTrue(g.has_role(\'Member\'))\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.groups = self.portal.portal_groups\n         self.groups.addGroup(\'foo\')\n         self.groupdata = self.groups.getGroupById(\'foo\')\n \n     def testAnonAddMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testAnonRemoveMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.removeMember,\n                           TEST_USER_ID)\n \n@@ -169,10 +182,10 @@ def testMemberRemoveMember(self):\n                           TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex fce58aa..da81fd0 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -3,16 +3,20 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.app.testing import setRoles\n+from plone.app.testing import logout\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.group import PloneGroup\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PlonePAS.tools.groupdata import GroupData\n-from Products.PluggableAuthService.interfaces.events import \\\n-    IGroupDeletedEvent\n-from plone.app.testing import TEST_USER_ID\n+from Products.PluggableAuthService.interfaces.events import IGroupDeletedEvent\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n+import unittest\n+\n \n def sortTuple(t):\n     l = list(t)\n@@ -20,15 +24,18 @@ def sortTuple(t):\n     return tuple(l)\n \n \n-class GroupsToolTest(base.TestCase):\n+class TestGroupsTool(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.gt = getToolByName(self.portal, \'portal_groups\')\n         self.gd = getToolByName(self.portal, \'portal_groupdata\')\n \n         self.group_id = \'group1\'\n         # Create a new Group\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.gt.addGroup(\n             self.group_id,\n             [\'Reviewer\'],\n@@ -89,20 +96,23 @@ def test_edit_group(self):\n         self.assertTrue(\'Reviewers\' in group.getGroups())\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n     # GroupData has wrong security declarations\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.groups = self.portal.portal_groups\n         self.groups.addGroup(\'foo\')\n         self.groupdata = self.groups.getGroupById(\'foo\')\n \n     def testAnonAddMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testAnonRemoveMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.removeMember,\n                           TEST_USER_ID)\n \n@@ -114,21 +124,25 @@ def testMemberRemoveMember(self):\n                           TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\n \n \n-class TestGroupsTool(base.TestCase):\n+class TestGroupsTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n+        self.folder = self.portal[\'folder\']\n \n         if \'auto_group\' in self.acl_users:\n             self.acl_users.manage_delObjects([\'auto_group\'])\n@@ -262,7 +276,7 @@ def testGetGroupInfo(self):\n \n     def testGetGroupInfoAsAnonymous(self):\n         self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\')\n-        self.logout()\n+        logout()\n         info = self.groups.restrictedTraverse(\'getGroupInfo\')(\'foo\')\n         self.assertEqual(info.get(\'title\'), \'Foo\')\n         self.assertEqual(info.get(\'description\'), \'Bar\')\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 440322a..c432124 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -2,13 +2,18 @@\n from DateTime import DateTime\n from OFS.Image import Image\n from plone.app.testing import TEST_USER_ID as default_user\n-from Products.PlonePAS.tests import base\n from Products.PlonePAS.tests import dummy\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestMemberDataTool(base.TestCase):\n \n-    def afterSetUp(self):\n+class TestMemberDataTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         self.membership.memberareaCreationFlag = 0\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 5f1ab79..be4b27c 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -11,25 +11,34 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.browser.member import PASMemberView\n from Products.PlonePAS.interfaces.membership import IMembershipTool\n from Products.PlonePAS.plugins.ufactory import PloneUser\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PlonePAS.tests import dummy\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n-import six\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import BadRequest\n+from plone.app.testing import TEST_USER_ID\n+\n \n import os\n+import six\n+import unittest\n \n \n-class MembershipToolTest(base.TestCase):\n+class MembershipToolTest(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n \n@@ -120,12 +129,16 @@ def test_id_clean(self):\n         cleaned = cleanId(u\'abc\')\n         self.assertEqual(cleaned, \'abc\')\n         self.assertTrue(isinstance(cleaned, str))\n-        self.assertFalse(isinstance(cleaned, six.text_type))\n+        if six.PY2:\n+            self.assertFalse(isinstance(cleaned, six.text_type))\n+\n \n+class MemberAreaTest(unittest.TestCase):\n \n-class MemberAreaTest(base.TestCase):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n         # Enable member-area creation\n@@ -133,7 +146,7 @@ def afterSetUp(self):\n         # Those are all valid chars in Zope.\n         self.mid = "Member #1 - Houston, TX. ($100)"\n         self.pas = self.portal.acl_users\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n     def test_funky_member_ids_1(self):\n         mid = self.mid\n@@ -167,11 +180,15 @@ def test_memberareaCreationFlag_respected(self):\n         self.assertFalse(\'bar\' in self.portal.Members)\n \n \n-class TestMembershipTool(base.TestCase):\n+class TestMembershipTool(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.groups = self.portal.portal_groups\n+        self.folder = self.portal[\'folder\']\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n@@ -232,7 +249,7 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n             {\'email\': \'member2@host.com\', \'title\': \'Member #2\'}\n         )\n \n-        self.login(member_id)\n+        login(self.portal, member_id)\n         image = self.makeRealImage()\n         safe_member_id = self.membership._getSafeMemberId(member_id)\n \n@@ -247,6 +264,7 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n     def testCannotChangeOtherMemberPortrait(self):\n         # A normal member should not be able to change the portrait of\n         # another member.\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n         self.assertRaises(Unauthorized, self.membership.changeMemberPortrait,\n@@ -257,7 +275,7 @@ def testChangeMemberPortraitAsManager(self):\n         # member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(image, \'joe\')\n         self.assertEqual(self.membership.getPersonalPortrait(\'joe\').getId(),\n@@ -282,9 +300,9 @@ def testCannotDeleteOtherPersonalPortrait(self):\n         # another member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.membership.changeMemberPortrait(image, \'joe\')\n-        self.setRoles([\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait,\n                           \'joe\')\n \n@@ -293,7 +311,7 @@ def testDeleteOtherPersonalPortraitAsManager(self):\n         # member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.membership.changeMemberPortrait(image, \'joe\')\n         self.membership.deletePersonalPortrait(\'joe\')\n         self.assertEqual(\n@@ -318,7 +336,7 @@ def testPortraitForNonStandardUserId(self):\n         safe_id = self.membership._getSafeMemberId(user_id)\n         self.assertEqual(safe_id, \'bob--jones-2Btest-40example.org\')\n         self.membership.addMember(user_id, \'secret\', [\'Member\'], [])\n-        self.login(user_id)\n+        login(self.portal, user_id)\n \n         # Should return the default portrait\n         self.assertEqual(\n@@ -333,7 +351,7 @@ def testPortraitForNonStandardUserId(self):\n                          \'Image\')\n \n         # Other users should be able to see your portrait.\n-        self.login(TEST_USER_NAME)\n+        login(self.portal, TEST_USER_NAME)\n         self.assertEqual(\n             self.membership.getPersonalPortrait(user_id).getId(),\n             safe_id)\n@@ -342,7 +360,7 @@ def testPortraitForNonStandardUserId(self):\n             \'Image\')\n \n         # You can delete your own portrait.\n-        self.login(user_id)\n+        login(self.portal, user_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n             self.membership.getPersonalPortrait(user_id).getId(),\n@@ -351,7 +369,7 @@ def testPortraitForNonStandardUserId(self):\n         # Managers should be able to change the portrait of another\n         # member and delete it.\n         manager_image = self.makeRealImage()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(manager_image, user_id)\n         self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(),\n@@ -406,7 +424,7 @@ def testSetPassword(self):\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n-        self.logout()\n+        logout()\n         try:\n             self.membership.setPassword(\'geheim\')\n         except BadRequest:\n@@ -424,9 +442,9 @@ def testSetPasswordAndKeepGroups(self):\n         groups = self.groups\n         groups.addGroup(group2, None, [], [])\n         group = groups.getGroupById(group2)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group.addMember(TEST_USER_ID)\n-        self.login(TEST_USER_NAME)  # Back to normal\n+        login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.membership.setPassword(\'geheim\')\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n@@ -460,20 +478,20 @@ def testGetAuthenticatedMemberIsWrapped(self):\n                          \'PluggableAuthService\')\n \n     def testGetAuthenticatedMemberIfAnonymous(self):\n-        self.logout()\n+        logout()\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), \'Anonymous User\')\n \n     def testAnonymousMemberIsNotWrapped(self):\n         # Also see http://dev.plone.org/plone/ticket/1851\n-        self.logout()\n+        logout()\n         member = self.membership.getAuthenticatedMember()\n         self.assertNotEqual(member.__class__.__name__, \'MemberData\')\n         self.assertEqual(member.__class__.__name__, \'SpecialUser\')\n \n     def testIsAnonymousUser(self):\n         self.assertFalse(self.membership.isAnonymousUser())\n-        self.logout()\n+        logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n \n     def testWrapUserWrapsBareUser(self):\n@@ -513,14 +531,14 @@ def testWrapUserWrapsAnonymous(self):\n     def testGetCandidateLocalRoles(self):\n         self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n                          (\'Owner\',))\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n                          (\'Owner\', \'Reviewer\'))\n \n     def testSetLocalRoles(self):\n         self.assertTrue(\n             \'Owner\' in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.membership.setLocalRoles(self.folder, [TEST_USER_ID, \'user2\'],\n                                       \'Reviewer\')\n         self.assertEqual(self.folder.get_local_roles_for_userid(TEST_USER_ID),\n@@ -529,7 +547,7 @@ def testSetLocalRoles(self):\n                          (\'Reviewer\',))\n \n     def testDeleteLocalRoles(self):\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.membership.setLocalRoles(self.folder, [\'user2\'], \'Reviewer\')\n         self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n                          (\'Reviewer\',))\n@@ -630,7 +648,7 @@ def testGetCandidateLocalRolesForAssigned(self):\n     def test_bug4333_delete_user_remove_memberdata(self):\n         # delete user should delete portal_memberdata\n         memberdata = self.portal.portal_memberdata\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n                        [\'Member\'], \'2002-01-01\')\n         barney = self.membership.getMemberById(\'barney\')\n@@ -655,7 +673,7 @@ def test_bug4333_delete_user_remove_memberdata(self):\n \n     def testBogusMemberPortrait(self):\n         # Should change the portrait image\n-        bad_file = dummy.File(data=\'<div>This is a lie!!!</div>\',\n+        bad_file = dummy.File(data=b\'<div>This is a lie!!!</div>\',\n                               headers={\'content_type\': \'image/jpeg\'})\n         self.assertRaises(IOError, self.membership.changeMemberPortrait,\n                           bad_file, TEST_USER_ID)\n@@ -668,24 +686,27 @@ def testGetBadMembers(self):\n         bad_file = Image(\n             id=TEST_USER_ID,\n             title=\'\',\n-            file=StringIO(\'<div>This is a lie!!!</div>\')\n+            file=BytesIO(b\'<div>This is a lie!!!</div>\')\n         )\n         # Manually set a bad image using private methods\n         self.portal.portal_memberdata._setPortrait(bad_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n         # Try an empty image\n-        empty_file = Image(id=TEST_USER_ID, title=\'\', file=StringIO(\'\'))\n+        empty_file = Image(id=TEST_USER_ID, title=\'\', file=BytesIO(b\'\'))\n         self.portal.portal_memberdata._setPortrait(empty_file, TEST_USER_ID)\n-        self.assertEqual(self.membership.getBadMembers(), [])\n+        self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n         # And a good image\n         self.membership.changeMemberPortrait(self.makeRealImage(),\n                                              TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n \n \n-class TestCreateMemberarea(base.TestCase):\n+class TestCreateMemberarea(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n \n@@ -702,7 +723,7 @@ def testCreateMemberarea(self):\n     def testCreatMemberareaUsesCurrentUser(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should create a memberarea for user2\n-            self.login(\'user2\')\n+            login(self.portal, \'user2\')\n             self.membership.createMemberarea()\n             memberfolder = self.membership.getHomeFolder(\'user2\')\n             self.assertTrue(\n@@ -765,9 +786,12 @@ def testCreateMemberareaWhenDisabled(self):\n         )\n \n \n-class TestMemberareaSetup(base.TestCase):\n+class TestMemberareaSetup(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n         self.membership.createMemberarea(\'user2\')\n@@ -806,9 +830,12 @@ def testHomePageNotExists(self):\n             self.assertFalse(\'index_html\' in self.home)\n \n \n-class TestSearchForMembers(base.TestCase):\n+class TestSearchForMembers(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         # Don\'t let default_user disturb results\n@@ -885,10 +912,13 @@ def testSearchByRequestObj(self):\n             len(search(REQUEST=dict(name=\'j\xc3\xbcrgen\'))), 1)\n \n \n-class TestDefaultUserAndPasswordNotChanged(base.TestCase):\n+class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n     # A test for a silly transaction/persistency bug in PlonePAS\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n \n     def testDefaultUserAndPasswordUnchanged(self):\n@@ -900,10 +930,12 @@ def testDefaultUserAndPasswordUnchanged(self):\n         self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n     # MembershipTool is missing security declarations\n     # http://dev.plone.org/plone/ticket/5432\n \n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n     _unprotected = (\n         \'changeMemberPortrait\',\n         \'deletePersonalPortrait\',\n@@ -911,29 +943,33 @@ class TestMethodProtection(base.TestCase):\n         \'searchForMembers\',\n     )\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n \n     def assertUnprotected(self, object, method):\n-        self.logout()\n+        logout()\n         object.restrictedTraverse(method)\n \n     def assertProtected(self, object, method):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, object.restrictedTraverse, method)\n \n     for method in _unprotected:\n-        exec "def testUnprotected_%s(self):" \\\n+        exec ("def testUnprotected_%s(self):" \\\n              "    self.assertProtected(self.membership, \'%s\')" \\\n-             % (method, method)\n+             % (method, method))\n+\n+        exec ("def testMemberAccessible_%s(self):" \\\n+             "    self.membership.restrictedTraverse(\'%s\')" % (method, method))\n \n-        exec "def testMemberAccessible_%s(self):" \\\n-             "    self.membership.restrictedTraverse(\'%s\')" % (method, method)\n \n+class TestMemberInfoView(unittest.TestCase):\n \n-class TestMemberInfoView(base.TestCase):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.view = PASMemberView(self.portal, self.portal.REQUEST)\n \n@@ -967,7 +1003,7 @@ def testGetMemberInfoViewForNonMember(self):\n         self.assertEqual(info[\'name_or_id\'], \'charon\')\n \n     def testGetMemberInfoViewForAnonymous(self):\n-        self.logout()\n+        logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n         info = self.view.info()\n         self.assertEqual(info[\'username\'], \'Anonymous User\')\n@@ -991,18 +1027,17 @@ def testGetMemberInfoViewHomePageBad(self):\n     def testSetGroupsWithUserNameIdDifference(self):\n         pas = self.portal[\'acl_users\']\n         self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.setGroups([\'Editors\'], name=TEST_USER_ID)\n-        self.login(TEST_USER_NAME)\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        login(self.portal, TEST_USER_NAME)\n         user = getSecurityManager().getUser()\n         self.assertTrue(\n             \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n         )\n-        self.login()\n \n     def testSetGroupsWithSameUserNameAndId(self):\n         pas = self.portal[\'acl_users\']\n         self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.setGroups([\'Editors\'])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n         user = getSecurityManager().getUser()\n         self.assertTrue(\n             \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 3dab964..f6d5763 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -1,12 +1,22 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import login\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.property import ZODBMutablePropertyProvider\n-from Products.PlonePAS.tests import base\n from Products.PluggableAuthService.interfaces.plugins import \\\n     IUserEnumerationPlugin\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class PropertiesTest(base.TestCase):\n+\n+class PropertiesTest(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n     def test_user_properties(self):\n         mt = getToolByName(self.portal, \'portal_membership\')\n@@ -37,7 +47,7 @@ def test_user_properties(self):\n         member = mt.getMemberById(\'user1\')\n \n         # Set some member properties. Needs to be logged in as the user.\n-        self.login(\'user1\')\n+        login(self.portal, \'user1\')\n         member.setMemberProperties({\'age\': 30, \'fullname\': \'User #1 Is Cool\',\n                                     \'email\': \'user1@anotherhost.qa\'})\n \n@@ -81,7 +91,7 @@ def test_group_properties(self):\n         gt = getToolByName(self.portal, \'portal_groups\')\n         gd = getToolByName(self.portal, \'portal_groupdata\')\n \n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n         # Create a new Group\n         gt.addGroup(\n@@ -185,9 +195,12 @@ def test_schema_for_mutable_property_provider(self):\n         self.assertEqual(sheet.getProperty(\'addresses\'), (\'Here\', \'There\'))\n \n \n-class PropertySearchTest(base.TestCase):\n+class PropertySearchTest(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n         self.gt = getToolByName(self.portal, \'portal_groups\')\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex 00ec703..6771033 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -2,7 +2,6 @@\n # $Id$\n """Tests for Products.PlonePAS.plugins.role.GroupAwareRoleManager"""\n \n-from Products.PlonePAS.tests import base\n from Products.PluggableAuthService.PluggableAuthService import \\\n     _PLUGIN_TYPE_INFO\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n@@ -13,6 +12,9 @@\n     makeRequestAndResponse\n from Products.PluginRegistry.PluginRegistry import PluginRegistry\n from zope.interface import implementer\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+import unittest\n \n \n @implementer(IGroupsPlugin)\n@@ -22,9 +24,11 @@ def getGroupsForPrincipal(self, principal, request=None):\n         return principal._groups\n \n \n-class GroupAwareRoleManagerTests(base.TestCase):\n+class GroupAwareRoleManagerTests(unittest.TestCase):\n     """Roles manager that takes care of goup of principal"""\n \n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n     def _getTargetClass(self):\n \n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex d0a7f60..e4c62ca 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -1,10 +1,15 @@\n # -*- encoding: utf-8 -*-\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestPASSearchView(base.TestCase):\n+\n+class TestPASSearchView(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\n+        self.portal = self.layer[\'portal\']\n         pas_search = self.portal.restrictedTraverse(\'@@pas_search\')\n         values = [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n                   {\'title\': u\'anthropologie\'}]\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 58cd826..cb743a7 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -32,7 +32,7 @@\n from ZODB.POSException import ConflictError\n from plone.protect.interfaces import IDisableCSRFProtection\n import six\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import BadRequest\n from zope import event\n from zope.component import getUtility\n@@ -762,7 +762,9 @@ def getBadMembers(self):\n         counter = 1\n         for member_id in tuple(portraits.keys()):\n             portrait = portraits[member_id]\n-            portrait_data = str(portrait.data)\n+            portrait_data = portrait.data\n+            if six.PY2:\n+                portrait_data = str(portrait.data)\n             if portrait_data == \'\':\n                 continue\n             if not HAS_PIL:\n@@ -772,7 +774,7 @@ def getBadMembers(self):\n                 )\n             try:\n                 import PIL\n-                PIL.Image.open(StringIO(portrait_data))\n+                PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\n             except:\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/1acfcb7ce9308f6c7ba044f664284b404246853e

fix tests for py3 and py2

Files changed:
M src/Products/PlonePAS/tests/cookie_auth.rst
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py

b'diff --git a/src/Products/PlonePAS/tests/cookie_auth.rst b/src/Products/PlonePAS/tests/cookie_auth.rst\nindex ae68c02..7405a56 100644\n--- a/src/Products/PlonePAS/tests/cookie_auth.rst\n+++ b/src/Products/PlonePAS/tests/cookie_auth.rst\n@@ -53,13 +53,13 @@ Make sure cookie plugin is installed and activated.\n   ...       pass\n \n   >>> for active, iface in actives:\n-  ...     print(iface,)\n+  ...     print(iface)\n   ...     for id, plugin in active:\n   ...         if id == \'credentials_cookie_auth\':\n   ...            print(True)\n-  <...IExtraction...> True\n-  <...IChallenge...> True\n-  <...ICredentialsUpdate...> <...ICredentialsReset...>\n+  <...IExtraction...>...True\n+  <...IChallenge...>...True\n+  <...ICredentialsUpdate...>...<...ICredentialsReset...>\n \n User in parent folder\n ---------------------\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 6cf3903..73647bf 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,10 +1,20 @@\n # -*- coding: utf-8 -*-\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n from plone.testing import layered\n+\n import doctest\n+import re\n+import six\n import unittest\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("IOError", "OSError", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n@@ -12,7 +22,8 @@ def test_suite():\n             doctest.DocFileSuite(\n                 \'cookie_auth.rst\',\n                 package=\'Products.PlonePAS.tests\',\n-                optionflags=doctest.ELLIPSIS\n+                optionflags=doctest.ELLIPSIS,\n+                checker=Py23DocChecker(),\n             ),\n             layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n         )\n@@ -20,7 +31,8 @@ def test_suite():\n     suite.addTest(\n         doctest.DocTestSuite(\n             \'Products.PlonePAS.utils\',\n-            optionflags=doctest.ELLIPSIS\n+            optionflags=doctest.ELLIPSIS,\n+            checker=Py23DocChecker(),\n         )\n     )\n     return suite\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex be4b27c..42d989c 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -694,7 +694,7 @@ def testGetBadMembers(self):\n         # Try an empty image\n         empty_file = Image(id=TEST_USER_ID, title=\'\', file=BytesIO(b\'\'))\n         self.portal.portal_memberdata._setPortrait(empty_file, TEST_USER_ID)\n-        self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n+        self.assertEqual(self.membership.getBadMembers(), [])\n         # And a good image\n         self.membership.changeMemberPortrait(self.makeRealImage(),\n                                              TEST_USER_ID)\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex cb743a7..7d6fd38 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -765,7 +765,7 @@ def getBadMembers(self):\n             portrait_data = portrait.data\n             if six.PY2:\n                 portrait_data = str(portrait.data)\n-            if portrait_data == \'\':\n+            if not portrait_data:\n                 continue\n             if not HAS_PIL:\n                 raise RuntimeError(\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 106ad12..8544c0e 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -69,11 +69,11 @@ def scale_image(image_file, max_size=None, default_format=None):\n         >>> scale_image(invalid, (50, 50))\n         Traceback (most recent call last):\n         ...\n-        IOError: cannot identify image file...\n+        OSError: cannot identify image file...\n         >>> scale_image(sneaky, (50, 50))\n         Traceback (most recent call last):\n         ...\n-        IOError: cannot identify image file...\n+        OSError: cannot identify image file...\n \n     Now that that\'s out of the way we check on our real images to make\n     sure the format and mode are preserved, that they are scaled, and that they\n@@ -112,13 +112,13 @@ def scale_image(image_file, max_size=None, default_format=None):\n     width only unless told not to (we need to reset out files before\n     trying again though::\n \n-        >>> orig_jpg.seek(0)\n+        >>> _ = orig_jpg.seek(0)\n         >>> new_jpg, mimetype = scale_image(orig_jpg, (70, 100))\n         >>> img = Image.open(new_jpg)\n         >>> img.size\n         (70, 70)\n \n-        >>> orig_jpg.seek(0)\n+        >>> _ = orig_jpg.seek(0)\n         >>> new_jpg, mimetype = scale_image(orig_jpg, (70, 50))\n         >>> img = Image.open(new_jpg)\n         >>> img.size\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/75a67a20e383e1d42e43768202b2607e85e0e87f

InitializeClass was moved to AccessControl.class_init

Files changed:
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py

b'diff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex 8ec0ee3..5783ef6 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex 1e0ec65..e3103c3 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -10,7 +10,7 @@\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from base64 import encodestring\n from Products.PluggableAuthService.interfaces.authservice import \\\ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 0061e1a..1c940fc 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -7,7 +7,7 @@\n """\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from OFS.Folder import Folder\n from Products.CMFCore.CookieCrumbler import manage_addCC\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex 2bc36bf..bbbd21e 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -5,7 +5,7 @@\n \n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from BTrees.OOBTree import OOBTree\n from BTrees.OOBTree import OOSet\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex f09ef38..93e76b5 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -9,7 +9,7 @@\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PluggableAuthService.plugins.LocalRolePlugin \\\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex 0b3c29a..f0e36f8 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -4,7 +4,7 @@\n Mutable Property Provider\n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex 799bd37..430a9df 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -3,7 +3,7 @@\n Mutable Property Provider\n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from BTrees.OOBTree import OOBTree\n from Products.CMFCore.utils import getToolByName\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 8a0b444..9c836ae 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -10,7 +10,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IAssignRoleCapability\n from Products.PlonePAS.utils import getGroupsForPrincipal\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex f0fe7c1..9be8b46 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.PermissionRole import _what_not_even_god_should_do\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex 79ee8f0..5a4d8ac 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -5,7 +5,7 @@\n from AccessControl import AuthEncoding\n from AccessControl import ClassSecurityInfo\n from AccessControl.Permissions import manage_users as ManageUsers\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n from Products.PlonePAS.interfaces.capabilities import IPasswordSetCapability\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex cfe9eeb..4da00f8 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -7,7 +7,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.PropertyManager import PropertyManager\n from OFS.SimpleItem import SimpleItem\ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 2e320c6..837805a 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -5,7 +5,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 36a9245..68cfbb1 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.requestmethod import postonly\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.interfaces import IMember\n from Products.CMFCore.MemberDataTool import _marker\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 7d6fd38..4f5c2b0 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -7,7 +7,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n from OFS.Image import Image\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:02:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/7f0dca597812816c2f23f8558eaf4ed737cfc140

setDefaultRoles is deprecated. addPermission from AccessControl.Permission is used.

Files changed:
M src/Products/PlonePAS/permissions.py

b"diff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 126932a..0ab494d 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -1,17 +1,17 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.permissions import setDefaultRoles\n+from AccessControl.Permission import addPermission\n \n AddGroups = 'Add Groups'\n-setDefaultRoles(AddGroups, ('Manager',))\n+addPermission(AddGroups, default_roles=('Manager',))\n \n ManageGroups = 'Manage Groups'\n-setDefaultRoles(ManageGroups, ('Manager',))\n+addPermission(ManageGroups, default_roles=('Manager',))\n \n ViewGroups = 'View Groups'\n-setDefaultRoles(ViewGroups, ('Manager', 'Owner', 'Member'))\n+addPermission(ViewGroups, default_roles=('Manager', 'Owner', 'Member'))\n \n DeleteGroups = 'Delete Groups'\n-setDefaultRoles(DeleteGroups, ('Manager', ))\n+addPermission(DeleteGroups, default_roles=('Manager', ))\n \n SetGroupOwnership = 'Set Group Ownership'\n-setDefaultRoles(SetGroupOwnership, ('Manager', 'Owner'))\n+addPermission(SetGroupOwnership, default_roles=('Manager', 'Owner'))\n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:13:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/bc212075995a9970d74cac64d64cfa364116742a

note changes

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3e3653f..f7f3733 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,11 +12,26 @@ Breaking changes:\n \n New features:\n \n-- Make imports work with python 3. Fix startup.\n+- Make it work in Python 3:\n+  Make imports work. \n+  Fix startup.\n+  Fix setting the auth-cookie.\n+  Fix assignment of MemberData-functions during startup.\n+  User properties are text.\n+  Fix scaling user profile.\n+  Migrate all tests away from PloneTestCasei. \n+  Fix other tests. \n   [pbauer]\n \n Bug fixes:\n \n+- InitializeClass was moved to AccessControl.class_init\n+  [jensens]\n+\n+- setDefaultRoles is deprecated. \n+  addPermission from AccessControl.Permission is used.\n+  [jensens]\n+\n - Removed ``Extensions/Install.py`` which had only backwards compatibility imports.\n   [maurits]\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T13:18:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/7c7ac6246c7bcb6ccfd5a9e9f0156ffccf0bea4b

update metadata

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 009c32f..5114586 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,7 +20,7 @@\n         \'setuptools\',\n         \'six\',\n         \'zope.deprecation\',\n-        \'Zope2 >=2.13.22\',\n+        \'Zope\',\n     ]\n \n setup(\n@@ -35,6 +35,8 @@\n         "License :: OSI Approved :: Zope Public License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'Zope CMF Plone PAS authentication\',\n     author=\'Kapil Thangavelu, Wichert Akkerman\',\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2018-09-14T14:13:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/ca2496c9c18d8ec7828854f419159defcc2f5e0f

Merge pull request #34 from plone/python3

More python 3 issues

Files changed:
A src/Products/PlonePAS/testing.py
M CHANGES.rst
M setup.py
M src/Products/PlonePAS/permissions.py
M src/Products/PlonePAS/plugins/autogroup.py
M src/Products/PlonePAS/plugins/cookie_handler.py
M src/Products/PlonePAS/plugins/crumbler.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/tests/cookie_auth.rst
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py
D src/Products/PlonePAS/tests/base.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3e3653f..f7f3733 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,11 +12,26 @@ Breaking changes:\n \n New features:\n \n-- Make imports work with python 3. Fix startup.\n+- Make it work in Python 3:\n+  Make imports work. \n+  Fix startup.\n+  Fix setting the auth-cookie.\n+  Fix assignment of MemberData-functions during startup.\n+  User properties are text.\n+  Fix scaling user profile.\n+  Migrate all tests away from PloneTestCasei. \n+  Fix other tests. \n   [pbauer]\n \n Bug fixes:\n \n+- InitializeClass was moved to AccessControl.class_init\n+  [jensens]\n+\n+- setDefaultRoles is deprecated. \n+  addPermission from AccessControl.Permission is used.\n+  [jensens]\n+\n - Removed ``Extensions/Install.py`` which had only backwards compatibility imports.\n   [maurits]\n \ndiff --git a/setup.py b/setup.py\nindex 009c32f..5114586 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,7 +20,7 @@\n         \'setuptools\',\n         \'six\',\n         \'zope.deprecation\',\n-        \'Zope2 >=2.13.22\',\n+        \'Zope\',\n     ]\n \n setup(\n@@ -35,6 +35,8 @@\n         "License :: OSI Approved :: Zope Public License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'Zope CMF Plone PAS authentication\',\n     author=\'Kapil Thangavelu, Wichert Akkerman\',\ndiff --git a/src/Products/PlonePAS/permissions.py b/src/Products/PlonePAS/permissions.py\nindex 126932a..0ab494d 100644\n--- a/src/Products/PlonePAS/permissions.py\n+++ b/src/Products/PlonePAS/permissions.py\n@@ -1,17 +1,17 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.permissions import setDefaultRoles\n+from AccessControl.Permission import addPermission\n \n AddGroups = \'Add Groups\'\n-setDefaultRoles(AddGroups, (\'Manager\',))\n+addPermission(AddGroups, default_roles=(\'Manager\',))\n \n ManageGroups = \'Manage Groups\'\n-setDefaultRoles(ManageGroups, (\'Manager\',))\n+addPermission(ManageGroups, default_roles=(\'Manager\',))\n \n ViewGroups = \'View Groups\'\n-setDefaultRoles(ViewGroups, (\'Manager\', \'Owner\', \'Member\'))\n+addPermission(ViewGroups, default_roles=(\'Manager\', \'Owner\', \'Member\'))\n \n DeleteGroups = \'Delete Groups\'\n-setDefaultRoles(DeleteGroups, (\'Manager\', ))\n+addPermission(DeleteGroups, default_roles=(\'Manager\', ))\n \n SetGroupOwnership = \'Set Group Ownership\'\n-setDefaultRoles(SetGroupOwnership, (\'Manager\', \'Owner\'))\n+addPermission(SetGroupOwnership, default_roles=(\'Manager\', \'Owner\'))\ndiff --git a/src/Products/PlonePAS/plugins/autogroup.py b/src/Products/PlonePAS/plugins/autogroup.py\nindex 8ec0ee3..5783ef6 100644\n--- a/src/Products/PlonePAS/plugins/autogroup.py\n+++ b/src/Products/PlonePAS/plugins/autogroup.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PlonePAS.interfaces.group import IGroupIntrospection\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\ndiff --git a/src/Products/PlonePAS/plugins/cookie_handler.py b/src/Products/PlonePAS/plugins/cookie_handler.py\nindex a301a1e..e3103c3 100644\n--- a/src/Products/PlonePAS/plugins/cookie_handler.py\n+++ b/src/Products/PlonePAS/plugins/cookie_handler.py\n@@ -10,7 +10,7 @@\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from base64 import encodestring\n from Products.PluggableAuthService.interfaces.authservice import \\\n@@ -70,7 +70,11 @@ def updateCredentials(self, request, response, login, new_password):\n \n         setAuthCookie = getattr(self, \'setAuthCookie\', None)\n         if setAuthCookie:\n-            cookie_val = encodestring(\'%s:%s\' % (login, new_password))\n+            cookie_str = b\':\'.join([\n+                login.encode(\'utf-8\'),\n+                new_password.encode(\'utf-8\'),\n+            ])\n+            cookie_val = encodestring(cookie_str)\n             cookie_val = cookie_val.rstrip()\n             setAuthCookie(response, self.cookie_name, quote(cookie_val))\n         else:\ndiff --git a/src/Products/PlonePAS/plugins/crumbler.py b/src/Products/PlonePAS/plugins/crumbler.py\nindex 0061e1a..1c940fc 100644\n--- a/src/Products/PlonePAS/plugins/crumbler.py\n+++ b/src/Products/PlonePAS/plugins/crumbler.py\n@@ -7,7 +7,7 @@\n """\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from OFS.Folder import Folder\n from Products.CMFCore.CookieCrumbler import manage_addCC\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex 2bc36bf..bbbd21e 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -5,7 +5,7 @@\n \n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from BTrees.OOBTree import OOBTree\n from BTrees.OOBTree import OOSet\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex f09ef38..93e76b5 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -9,7 +9,7 @@\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PluggableAuthService.plugins.LocalRolePlugin \\\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex 0b3c29a..f0e36f8 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -4,7 +4,7 @@\n Mutable Property Provider\n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex 799bd37..430a9df 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -3,7 +3,7 @@\n Mutable Property Provider\n """\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from BTrees.OOBTree import OOBTree\n from Products.CMFCore.utils import getToolByName\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 8a0b444..9c836ae 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -10,7 +10,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IAssignRoleCapability\n from Products.PlonePAS.utils import getGroupsForPrincipal\ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 6663650..9be8b46 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.PermissionRole import _what_not_even_god_should_do\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n from Products.PlonePAS.interfaces.propertysheets import IMutablePropertySheet\n@@ -215,7 +215,7 @@ def setProperties(self, properties=None, **kw):\n                 continue\n \n             update = {}\n-            for (key, value) in properties.items():\n+            for (key, value) in list(properties.items()):\n                 if sheet.hasProperty(key):\n                     update[key] = value\n                     del properties[key]\n@@ -227,7 +227,7 @@ def getProperty(self, id, default=_marker):\n         for sheet in self.getOrderedPropertySheets():\n             if sheet.hasProperty(id):\n                 value = sheet.getProperty(id)\n-                if isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, six.text_type):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex 79ee8f0..5a4d8ac 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -5,7 +5,7 @@\n from AccessControl import AuthEncoding\n from AccessControl import ClassSecurityInfo\n from AccessControl.Permissions import manage_users as ManageUsers\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from Products.PlonePAS.interfaces.capabilities import IDeleteCapability\n from Products.PlonePAS.interfaces.capabilities import IPasswordSetCapability\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nnew file mode 100644\nindex 0000000..39bcf18\n--- /dev/null\n+++ b/src/Products/PlonePAS/testing.py\n@@ -0,0 +1,52 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n+from plone.testing import z2\n+\n+import Products.PlonePAS\n+\n+\n+class ProductsPlonepasLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=Products.PlonePAS)\n+        z2.installProduct(app, \'Products.PlonePAS\')\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'Products.PlonePAS:PlonePAS\')\n+        # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        from Products.CMFPlone.utils import _createObjectByType\n+        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        mtool = portal.portal_membership\n+        if not mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+        mtool.createMemberArea(TEST_USER_ID)\n+        if mtool.getMemberareaCreationFlag():\n+            mtool.setMemberareaCreationFlag()\n+\n+        _createObjectByType(\'Folder\', portal, id=\'folder\')\n+\n+\n+PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\n+\n+\n+PRODUCTS_PLONEPAS_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n+    name=\'ProductsPlonepasLayer:IntegrationTesting\',\n+)\n+\n+\n+PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PRODUCTS_PLONEPAS_FIXTURE,),\n+    name=\'ProductsPlonepasLayer:FunctionalTesting\',\n+)\ndiff --git a/src/Products/PlonePAS/tests/base.py b/src/Products/PlonePAS/tests/base.py\ndeleted file mode 100644\nindex 2003845..0000000\n--- a/src/Products/PlonePAS/tests/base.py\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase as TestCase  # noqa\n-from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase  # noqa\ndiff --git a/src/Products/PlonePAS/tests/cookie_auth.rst b/src/Products/PlonePAS/tests/cookie_auth.rst\nindex e5b0e79..7405a56 100644\n--- a/src/Products/PlonePAS/tests/cookie_auth.rst\n+++ b/src/Products/PlonePAS/tests/cookie_auth.rst\n@@ -11,13 +11,13 @@ User in Plone Site\n Plone Site has PAS installed\n \n   >>> portal = layer[\'portal\']\n-  >>> print portal.acl_users.meta_type\n+  >>> print(portal.acl_users.meta_type)\n   Pluggable Auth Service\n \n User exists in the user folder inside the Plone Site.\n \n   >>> uf = portal.acl_users\n-  >>> print uf.meta_type\n+  >>> print(uf.meta_type)\n   Pluggable Auth Service\n \n   >>> user_name, user_password, user_role = (\'foo\', \'bar\', \'Manager\')\n@@ -32,7 +32,7 @@ Login to Plone Site using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n   >>> browser.open(\'%s/manage\' % portal.absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \n Make sure cookie plugin is installed and activated.\n@@ -53,13 +53,13 @@ Make sure cookie plugin is installed and activated.\n   ...       pass\n \n   >>> for active, iface in actives:\n-  ...     print iface,\n+  ...     print(iface)\n   ...     for id, plugin in active:\n   ...         if id == \'credentials_cookie_auth\':\n-  ...            print True\n-  <...IExtraction...> True\n-  <...IChallenge...> True\n-  <...ICredentialsUpdate...> <...ICredentialsReset...>\n+  ...            print(True)\n+  <...IExtraction...>...True\n+  <...IChallenge...>...True\n+  <...ICredentialsUpdate...>...<...ICredentialsReset...>\n \n User in parent folder\n ---------------------\n@@ -68,7 +68,7 @@ User Exists on the folder containing the Plone Site, which should be a\n Pluggable Auth Service too.\n \n   >>> uf = layer[\'app\'].acl_users\n-  >>> print uf.meta_type\n+  >>> print(uf.meta_type)\n   Pluggable Auth Service\n \n   >>> user_name, user_password, user_role = (\'baz\', \'bar\', \'Manager\')\n@@ -85,7 +85,7 @@ Login directly to containing folder using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (user_name, user_password,))\n   >>> browser.open(\'%s/manage\' % layer[\'app\'].absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \n Login to Plone Site using Basic Auth works.\n@@ -93,6 +93,6 @@ Login to Plone Site using Basic Auth works.\n   >>> browser = Browser(layer[\'app\'])\n   >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (user_name, user_password,))\n   >>> browser.open(\'%s/manage\' % portal.absolute_url())\n-  >>> print browser.headers\n+  >>> print(browser.headers)\n   Status: 200 ...\n \ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 5c7a8c3..3dfede8 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from OFS.SimpleItem import SimpleItem\n-from six import StringIO\n+from six import BytesIO\n from ZPublisher.HTTPRequest import FileUpload\n \n-TEXT = \'file data\'\n+TEXT = b\'file data\'\n \n \n class FieldStorage(object):\n@@ -33,7 +33,7 @@ def __init__(self, filename=None, data=None, headers=None):\n             self.data = data\n         if headers is not None:\n             self.headers = headers\n-        self.file = StringIO(self.data)\n+        self.file = BytesIO(self.data)\n \n     def seek(self, *args):\n         pass\ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex 5518805..220d896 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -1,20 +1,24 @@\n # -*- coding: utf-8 -*-\n-from Products.PlonePAS.tests import base\n-from Products.PluggableAuthService.PluggableAuthService import \\\n-    _SWALLOWABLE_PLUGIN_EXCEPTIONS\n-from Products.PluggableAuthService.interfaces.authservice import \\\n-    IPluggableAuthService\n-from Products.PluggableAuthService.interfaces.events import \\\n-    IPrincipalDeletedEvent\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.events import IPrincipalDeletedEvent\n from Products.PluggableAuthService.interfaces.plugins import IRolesPlugin\n+from Products.PluggableAuthService.PluggableAuthService import  _SWALLOWABLE_PLUGIN_EXCEPTIONS\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n+import unittest\n \n-class BasicOpsTestCase(base.TestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+class BasicOpsTestCase(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.acl_users = self.portal.acl_users\n \n     def compareRoles(self, target, user, roles):\n@@ -32,11 +36,9 @@ def compareRoles(self, target, user, roles):\n             user_roles = list(u.getRoles())\n         else:\n             user_roles = list(u.getRolesInContext(target))\n-        actual_roles = filter(lambda x: x not in non_roles, user_roles)\n-        actual_roles.sort()\n+        actual_roles = list(filter(lambda x: x not in non_roles, user_roles))\n         wished_roles = list(roles)\n-        wished_roles.sort()\n-        if actual_roles == wished_roles:\n+        if sorted(actual_roles) == sorted(wished_roles):\n             return 1\n         raise RuntimeError("User %s: Whished roles: %s BUT current "\n                            "roles: %s" % (user, wished_roles, actual_roles))\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 9e2c509..73647bf 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -1,10 +1,20 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n from plone.testing import layered\n+\n import doctest\n+import re\n+import six\n import unittest\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("IOError", "OSError", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n@@ -12,15 +22,17 @@ def test_suite():\n             doctest.DocFileSuite(\n                 \'cookie_auth.rst\',\n                 package=\'Products.PlonePAS.tests\',\n-                optionflags=doctest.ELLIPSIS\n+                optionflags=doctest.ELLIPSIS,\n+                checker=Py23DocChecker(),\n             ),\n-            layer=PTC_FUNCTIONAL_TESTING\n+            layer=PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n         )\n     )\n     suite.addTest(\n         doctest.DocTestSuite(\n             \'Products.PlonePAS.utils\',\n-            optionflags=doctest.ELLIPSIS\n+            optionflags=doctest.ELLIPSIS,\n+            checker=Py23DocChecker(),\n         )\n     )\n     return suite\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex 343c6e7..d69da2d 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -2,9 +2,12 @@\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_parent\n-from Products.PlonePAS.tests import base\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import logout\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+import unittest\n \n \n def sortTuple(t):\n@@ -13,9 +16,12 @@ def sortTuple(t):\n     return tuple(l)\n \n \n-class TestGroupDataTool(base.TestCase):\n+class TestGroupDataTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n         self.groupdata = self.portal.portal_groupdata\n@@ -35,9 +41,12 @@ def testWrapGroup(self):\n                          \'GroupManager\')\n \n \n-class TestGroupData(base.TestCase):\n+class TestGroupData(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.memberdata = self.portal.portal_memberdata\n         self.acl_users = self.portal.acl_users\n@@ -73,13 +82,13 @@ def testGroupMembersAreWrapped(self):\n         self.assertEqual(aq_parent(ms[0]).__class__.__name__, \'PluggableAuthService\')\n \n     def testAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         g = self.groups.getGroupById(\'foo\')\n         g.addMember(TEST_USER_ID)\n         self.assertEqual(g.getGroupMembers()[0].getId(), TEST_USER_ID)\n \n     def testRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         g = self.groups.getGroupById(\'foo\')\n         g.addMember(TEST_USER_ID)\n         g.removeMember(TEST_USER_ID)\n@@ -121,6 +130,7 @@ def testGetRoles(self):\n                          (\'Authenticated\', \'Member\'))\n \n     def testGetRolesInContext(self):\n+        self.folder = self.portal[\'folder\']\n         g = self.groups.getGroupById(\'foo\')\n         self.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'foo\'])\n         user = self.acl_users.getUser(TEST_USER_NAME)\n@@ -145,19 +155,22 @@ def testHasRole(self):\n         self.assertTrue(g.has_role(\'Member\'))\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.groups = self.portal.portal_groups\n         self.groups.addGroup(\'foo\')\n         self.groupdata = self.groups.getGroupById(\'foo\')\n \n     def testAnonAddMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testAnonRemoveMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.removeMember,\n                           TEST_USER_ID)\n \n@@ -169,10 +182,10 @@ def testMemberRemoveMember(self):\n                           TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex fce58aa..da81fd0 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -3,16 +3,20 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.app.testing import setRoles\n+from plone.app.testing import logout\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.group import PloneGroup\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PlonePAS.tools.groupdata import GroupData\n-from Products.PluggableAuthService.interfaces.events import \\\n-    IGroupDeletedEvent\n-from plone.app.testing import TEST_USER_ID\n+from Products.PluggableAuthService.interfaces.events import IGroupDeletedEvent\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n \n+import unittest\n+\n \n def sortTuple(t):\n     l = list(t)\n@@ -20,15 +24,18 @@ def sortTuple(t):\n     return tuple(l)\n \n \n-class GroupsToolTest(base.TestCase):\n+class TestGroupsTool(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.gt = getToolByName(self.portal, \'portal_groups\')\n         self.gd = getToolByName(self.portal, \'portal_groupdata\')\n \n         self.group_id = \'group1\'\n         # Create a new Group\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.gt.addGroup(\n             self.group_id,\n             [\'Reviewer\'],\n@@ -89,20 +96,23 @@ def test_edit_group(self):\n         self.assertTrue(\'Reviewers\' in group.getGroups())\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n     # GroupData has wrong security declarations\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.groups = self.portal.portal_groups\n         self.groups.addGroup(\'foo\')\n         self.groupdata = self.groups.getGroupById(\'foo\')\n \n     def testAnonAddMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.addMember, TEST_USER_ID)\n \n     def testAnonRemoveMember(self):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, self.groupdata.removeMember,\n                           TEST_USER_ID)\n \n@@ -114,21 +124,25 @@ def testMemberRemoveMember(self):\n                           TEST_USER_ID)\n \n     def testManagerAddMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n \n     def testManagerRemoveMember(self):\n-        self.setPermissions([Permissions.manage_users])\n+        self.portal.manage_role(\'Member\', [Permissions.manage_users])\n         self.groupdata.addMember(TEST_USER_ID)\n         self.groupdata.removeMember(TEST_USER_ID)\n \n \n-class TestGroupsTool(base.TestCase):\n+class TestGroupsTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.acl_users = self.portal.acl_users\n         self.groups = self.portal.portal_groups\n+        self.folder = self.portal[\'folder\']\n \n         if \'auto_group\' in self.acl_users:\n             self.acl_users.manage_delObjects([\'auto_group\'])\n@@ -262,7 +276,7 @@ def testGetGroupInfo(self):\n \n     def testGetGroupInfoAsAnonymous(self):\n         self.groups.addGroup(\'foo\', title=\'Foo\', description=\'Bar\')\n-        self.logout()\n+        logout()\n         info = self.groups.restrictedTraverse(\'getGroupInfo\')(\'foo\')\n         self.assertEqual(info.get(\'title\'), \'Foo\')\n         self.assertEqual(info.get(\'description\'), \'Bar\')\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 440322a..c432124 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -2,13 +2,18 @@\n from DateTime import DateTime\n from OFS.Image import Image\n from plone.app.testing import TEST_USER_ID as default_user\n-from Products.PlonePAS.tests import base\n from Products.PlonePAS.tests import dummy\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestMemberDataTool(base.TestCase):\n \n-    def afterSetUp(self):\n+class TestMemberDataTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         self.membership.memberareaCreationFlag = 0\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 5f1ab79..42d989c 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -11,25 +11,34 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.browser.member import PASMemberView\n from Products.PlonePAS.interfaces.membership import IMembershipTool\n from Products.PlonePAS.plugins.ufactory import PloneUser\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n from Products.PlonePAS.tests import dummy\n from Products.PlonePAS.tools.memberdata import MemberData\n from Products.PlonePAS.tools.membership import MembershipTool\n from Products.PlonePAS.utils import getGroupsForPrincipal\n-import six\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import BadRequest\n+from plone.app.testing import TEST_USER_ID\n+\n \n import os\n+import six\n+import unittest\n \n \n-class MembershipToolTest(base.TestCase):\n+class MembershipToolTest(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n \n@@ -120,12 +129,16 @@ def test_id_clean(self):\n         cleaned = cleanId(u\'abc\')\n         self.assertEqual(cleaned, \'abc\')\n         self.assertTrue(isinstance(cleaned, str))\n-        self.assertFalse(isinstance(cleaned, six.text_type))\n+        if six.PY2:\n+            self.assertFalse(isinstance(cleaned, six.text_type))\n+\n \n+class MemberAreaTest(unittest.TestCase):\n \n-class MemberAreaTest(base.TestCase):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n         # Enable member-area creation\n@@ -133,7 +146,7 @@ def afterSetUp(self):\n         # Those are all valid chars in Zope.\n         self.mid = "Member #1 - Houston, TX. ($100)"\n         self.pas = self.portal.acl_users\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n     def test_funky_member_ids_1(self):\n         mid = self.mid\n@@ -167,11 +180,15 @@ def test_memberareaCreationFlag_respected(self):\n         self.assertFalse(\'bar\' in self.portal.Members)\n \n \n-class TestMembershipTool(base.TestCase):\n+class TestMembershipTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.groups = self.portal.portal_groups\n+        self.folder = self.portal[\'folder\']\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n@@ -232,7 +249,7 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n             {\'email\': \'member2@host.com\', \'title\': \'Member #2\'}\n         )\n \n-        self.login(member_id)\n+        login(self.portal, member_id)\n         image = self.makeRealImage()\n         safe_member_id = self.membership._getSafeMemberId(member_id)\n \n@@ -247,6 +264,7 @@ def testChangeOwnMemberPortraitWithEmailUsers(self):\n     def testCannotChangeOtherMemberPortrait(self):\n         # A normal member should not be able to change the portrait of\n         # another member.\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n         self.assertRaises(Unauthorized, self.membership.changeMemberPortrait,\n@@ -257,7 +275,7 @@ def testChangeMemberPortraitAsManager(self):\n         # member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(image, \'joe\')\n         self.assertEqual(self.membership.getPersonalPortrait(\'joe\').getId(),\n@@ -282,9 +300,9 @@ def testCannotDeleteOtherPersonalPortrait(self):\n         # another member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.membership.changeMemberPortrait(image, \'joe\')\n-        self.setRoles([\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertRaises(Unauthorized, self.membership.deletePersonalPortrait,\n                           \'joe\')\n \n@@ -293,7 +311,7 @@ def testDeleteOtherPersonalPortraitAsManager(self):\n         # member.\n         image = self.makeRealImage()\n         self.membership.addMember(\'joe\', \'secret\', [\'Member\'], [])\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.membership.changeMemberPortrait(image, \'joe\')\n         self.membership.deletePersonalPortrait(\'joe\')\n         self.assertEqual(\n@@ -318,7 +336,7 @@ def testPortraitForNonStandardUserId(self):\n         safe_id = self.membership._getSafeMemberId(user_id)\n         self.assertEqual(safe_id, \'bob--jones-2Btest-40example.org\')\n         self.membership.addMember(user_id, \'secret\', [\'Member\'], [])\n-        self.login(user_id)\n+        login(self.portal, user_id)\n \n         # Should return the default portrait\n         self.assertEqual(\n@@ -333,7 +351,7 @@ def testPortraitForNonStandardUserId(self):\n                          \'Image\')\n \n         # Other users should be able to see your portrait.\n-        self.login(TEST_USER_NAME)\n+        login(self.portal, TEST_USER_NAME)\n         self.assertEqual(\n             self.membership.getPersonalPortrait(user_id).getId(),\n             safe_id)\n@@ -342,7 +360,7 @@ def testPortraitForNonStandardUserId(self):\n             \'Image\')\n \n         # You can delete your own portrait.\n-        self.login(user_id)\n+        login(self.portal, user_id)\n         self.membership.deletePersonalPortrait(user_id)\n         self.assertEqual(\n             self.membership.getPersonalPortrait(user_id).getId(),\n@@ -351,7 +369,7 @@ def testPortraitForNonStandardUserId(self):\n         # Managers should be able to change the portrait of another\n         # member and delete it.\n         manager_image = self.makeRealImage()\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(manager_image, user_id)\n         self.assertEqual(self.membership.getPersonalPortrait(user_id).getId(),\n@@ -406,7 +424,7 @@ def testSetPassword(self):\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n-        self.logout()\n+        logout()\n         try:\n             self.membership.setPassword(\'geheim\')\n         except BadRequest:\n@@ -424,9 +442,9 @@ def testSetPasswordAndKeepGroups(self):\n         groups = self.groups\n         groups.addGroup(group2, None, [], [])\n         group = groups.getGroupById(group2)\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group.addMember(TEST_USER_ID)\n-        self.login(TEST_USER_NAME)  # Back to normal\n+        login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.membership.setPassword(\'geheim\')\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n@@ -460,20 +478,20 @@ def testGetAuthenticatedMemberIsWrapped(self):\n                          \'PluggableAuthService\')\n \n     def testGetAuthenticatedMemberIfAnonymous(self):\n-        self.logout()\n+        logout()\n         member = self.membership.getAuthenticatedMember()\n         self.assertEqual(member.getUserName(), \'Anonymous User\')\n \n     def testAnonymousMemberIsNotWrapped(self):\n         # Also see http://dev.plone.org/plone/ticket/1851\n-        self.logout()\n+        logout()\n         member = self.membership.getAuthenticatedMember()\n         self.assertNotEqual(member.__class__.__name__, \'MemberData\')\n         self.assertEqual(member.__class__.__name__, \'SpecialUser\')\n \n     def testIsAnonymousUser(self):\n         self.assertFalse(self.membership.isAnonymousUser())\n-        self.logout()\n+        logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n \n     def testWrapUserWrapsBareUser(self):\n@@ -513,14 +531,14 @@ def testWrapUserWrapsAnonymous(self):\n     def testGetCandidateLocalRoles(self):\n         self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n                          (\'Owner\',))\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.assertEqual(self.membership.getCandidateLocalRoles(self.folder),\n                          (\'Owner\', \'Reviewer\'))\n \n     def testSetLocalRoles(self):\n         self.assertTrue(\n             \'Owner\' in self.folder.get_local_roles_for_userid(TEST_USER_ID))\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.membership.setLocalRoles(self.folder, [TEST_USER_ID, \'user2\'],\n                                       \'Reviewer\')\n         self.assertEqual(self.folder.get_local_roles_for_userid(TEST_USER_ID),\n@@ -529,7 +547,7 @@ def testSetLocalRoles(self):\n                          (\'Reviewer\',))\n \n     def testDeleteLocalRoles(self):\n-        self.setRoles([\'Member\', \'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Reviewer\'])\n         self.membership.setLocalRoles(self.folder, [\'user2\'], \'Reviewer\')\n         self.assertEqual(self.folder.get_local_roles_for_userid(\'user2\'),\n                          (\'Reviewer\',))\n@@ -630,7 +648,7 @@ def testGetCandidateLocalRolesForAssigned(self):\n     def test_bug4333_delete_user_remove_memberdata(self):\n         # delete user should delete portal_memberdata\n         memberdata = self.portal.portal_memberdata\n-        self.setRoles([\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.addMember(\'barney\', \'Barney Rubble\', \'barney@bedrock.com\',\n                        [\'Member\'], \'2002-01-01\')\n         barney = self.membership.getMemberById(\'barney\')\n@@ -655,7 +673,7 @@ def test_bug4333_delete_user_remove_memberdata(self):\n \n     def testBogusMemberPortrait(self):\n         # Should change the portrait image\n-        bad_file = dummy.File(data=\'<div>This is a lie!!!</div>\',\n+        bad_file = dummy.File(data=b\'<div>This is a lie!!!</div>\',\n                               headers={\'content_type\': \'image/jpeg\'})\n         self.assertRaises(IOError, self.membership.changeMemberPortrait,\n                           bad_file, TEST_USER_ID)\n@@ -668,13 +686,13 @@ def testGetBadMembers(self):\n         bad_file = Image(\n             id=TEST_USER_ID,\n             title=\'\',\n-            file=StringIO(\'<div>This is a lie!!!</div>\')\n+            file=BytesIO(b\'<div>This is a lie!!!</div>\')\n         )\n         # Manually set a bad image using private methods\n         self.portal.portal_memberdata._setPortrait(bad_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [TEST_USER_ID])\n         # Try an empty image\n-        empty_file = Image(id=TEST_USER_ID, title=\'\', file=StringIO(\'\'))\n+        empty_file = Image(id=TEST_USER_ID, title=\'\', file=BytesIO(b\'\'))\n         self.portal.portal_memberdata._setPortrait(empty_file, TEST_USER_ID)\n         self.assertEqual(self.membership.getBadMembers(), [])\n         # And a good image\n@@ -683,9 +701,12 @@ def testGetBadMembers(self):\n         self.assertEqual(self.membership.getBadMembers(), [])\n \n \n-class TestCreateMemberarea(base.TestCase):\n+class TestCreateMemberarea(unittest.TestCase):\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n \n@@ -702,7 +723,7 @@ def testCreateMemberarea(self):\n     def testCreatMemberareaUsesCurrentUser(self):\n         if self.membership.memberareaCreationFlag is True:\n             # Should create a memberarea for user2\n-            self.login(\'user2\')\n+            login(self.portal, \'user2\')\n             self.membership.createMemberarea()\n             memberfolder = self.membership.getHomeFolder(\'user2\')\n             self.assertTrue(\n@@ -765,9 +786,12 @@ def testCreateMemberareaWhenDisabled(self):\n         )\n \n \n-class TestMemberareaSetup(base.TestCase):\n+class TestMemberareaSetup(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.membership.addMember(\'user2\', \'secret\', [\'Member\'], [])\n         self.membership.createMemberarea(\'user2\')\n@@ -806,9 +830,12 @@ def testHomePageNotExists(self):\n             self.assertFalse(\'index_html\' in self.home)\n \n \n-class TestSearchForMembers(base.TestCase):\n+class TestSearchForMembers(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.memberdata = self.portal.portal_memberdata\n         self.membership = self.portal.portal_membership\n         # Don\'t let default_user disturb results\n@@ -885,10 +912,13 @@ def testSearchByRequestObj(self):\n             len(search(REQUEST=dict(name=\'j\xc3\xbcrgen\'))), 1)\n \n \n-class TestDefaultUserAndPasswordNotChanged(base.TestCase):\n+class TestDefaultUserAndPasswordNotChanged(unittest.TestCase):\n     # A test for a silly transaction/persistency bug in PlonePAS\n \n-    def afterSetUp(self):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n \n     def testDefaultUserAndPasswordUnchanged(self):\n@@ -900,10 +930,12 @@ def testDefaultUserAndPasswordUnchanged(self):\n         self.assertFalse(self.membership.testCurrentPassword(\'geheim\'))\n \n \n-class TestMethodProtection(base.TestCase):\n+class TestMethodProtection(unittest.TestCase):\n     # MembershipTool is missing security declarations\n     # http://dev.plone.org/plone/ticket/5432\n \n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n     _unprotected = (\n         \'changeMemberPortrait\',\n         \'deletePersonalPortrait\',\n@@ -911,29 +943,33 @@ class TestMethodProtection(base.TestCase):\n         \'searchForMembers\',\n     )\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n \n     def assertUnprotected(self, object, method):\n-        self.logout()\n+        logout()\n         object.restrictedTraverse(method)\n \n     def assertProtected(self, object, method):\n-        self.logout()\n+        logout()\n         self.assertRaises(Unauthorized, object.restrictedTraverse, method)\n \n     for method in _unprotected:\n-        exec "def testUnprotected_%s(self):" \\\n+        exec ("def testUnprotected_%s(self):" \\\n              "    self.assertProtected(self.membership, \'%s\')" \\\n-             % (method, method)\n+             % (method, method))\n+\n+        exec ("def testMemberAccessible_%s(self):" \\\n+             "    self.membership.restrictedTraverse(\'%s\')" % (method, method))\n \n-        exec "def testMemberAccessible_%s(self):" \\\n-             "    self.membership.restrictedTraverse(\'%s\')" % (method, method)\n \n+class TestMemberInfoView(unittest.TestCase):\n \n-class TestMemberInfoView(base.TestCase):\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.view = PASMemberView(self.portal, self.portal.REQUEST)\n \n@@ -967,7 +1003,7 @@ def testGetMemberInfoViewForNonMember(self):\n         self.assertEqual(info[\'name_or_id\'], \'charon\')\n \n     def testGetMemberInfoViewForAnonymous(self):\n-        self.logout()\n+        logout()\n         self.assertTrue(self.membership.isAnonymousUser())\n         info = self.view.info()\n         self.assertEqual(info[\'username\'], \'Anonymous User\')\n@@ -991,18 +1027,17 @@ def testGetMemberInfoViewHomePageBad(self):\n     def testSetGroupsWithUserNameIdDifference(self):\n         pas = self.portal[\'acl_users\']\n         self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.setGroups([\'Editors\'], name=TEST_USER_ID)\n-        self.login(TEST_USER_NAME)\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n+        login(self.portal, TEST_USER_NAME)\n         user = getSecurityManager().getUser()\n         self.assertTrue(\n             \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\n         )\n-        self.login()\n \n     def testSetGroupsWithSameUserNameAndId(self):\n         pas = self.portal[\'acl_users\']\n         self.portal.portal_groups.addGroup(\'Editors\', [], [])\n-        self.setGroups([\'Editors\'])\n+        self.portal.acl_users.userSetGroups(TEST_USER_ID, groupnames=[\'Editors\'])\n         user = getSecurityManager().getUser()\n         self.assertTrue(\n             \'Editors\' in getGroupsForPrincipal(user, pas[\'plugins\'])\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 3dab964..f6d5763 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -1,12 +1,22 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import login\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.plugins.property import ZODBMutablePropertyProvider\n-from Products.PlonePAS.tests import base\n from Products.PluggableAuthService.interfaces.plugins import \\\n     IUserEnumerationPlugin\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class PropertiesTest(base.TestCase):\n+\n+class PropertiesTest(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n     def test_user_properties(self):\n         mt = getToolByName(self.portal, \'portal_membership\')\n@@ -37,7 +47,7 @@ def test_user_properties(self):\n         member = mt.getMemberById(\'user1\')\n \n         # Set some member properties. Needs to be logged in as the user.\n-        self.login(\'user1\')\n+        login(self.portal, \'user1\')\n         member.setMemberProperties({\'age\': 30, \'fullname\': \'User #1 Is Cool\',\n                                     \'email\': \'user1@anotherhost.qa\'})\n \n@@ -81,7 +91,7 @@ def test_group_properties(self):\n         gt = getToolByName(self.portal, \'portal_groups\')\n         gd = getToolByName(self.portal, \'portal_groupdata\')\n \n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n         # Create a new Group\n         gt.addGroup(\n@@ -185,9 +195,12 @@ def test_schema_for_mutable_property_provider(self):\n         self.assertEqual(sheet.getProperty(\'addresses\'), (\'Here\', \'There\'))\n \n \n-class PropertySearchTest(base.TestCase):\n+class PropertySearchTest(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.mt = getToolByName(self.portal, \'portal_membership\')\n         self.md = getToolByName(self.portal, \'portal_memberdata\')\n         self.gt = getToolByName(self.portal, \'portal_groups\')\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex 00ec703..6771033 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -2,7 +2,6 @@\n # $Id$\n """Tests for Products.PlonePAS.plugins.role.GroupAwareRoleManager"""\n \n-from Products.PlonePAS.tests import base\n from Products.PluggableAuthService.PluggableAuthService import \\\n     _PLUGIN_TYPE_INFO\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n@@ -13,6 +12,9 @@\n     makeRequestAndResponse\n from Products.PluginRegistry.PluginRegistry import PluginRegistry\n from zope.interface import implementer\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n+import unittest\n \n \n @implementer(IGroupsPlugin)\n@@ -22,9 +24,11 @@ def getGroupsForPrincipal(self, principal, request=None):\n         return principal._groups\n \n \n-class GroupAwareRoleManagerTests(base.TestCase):\n+class GroupAwareRoleManagerTests(unittest.TestCase):\n     """Roles manager that takes care of goup of principal"""\n \n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n+\n     def _getTargetClass(self):\n \n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex d0a7f60..e4c62ca 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -1,10 +1,15 @@\n # -*- encoding: utf-8 -*-\n-from Products.PlonePAS.tests import base\n+from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestPASSearchView(base.TestCase):\n+\n+class TestPASSearchView(unittest.TestCase):\n+\n+    layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\n+        self.portal = self.layer[\'portal\']\n         pas_search = self.portal.restrictedTraverse(\'@@pas_search\')\n         values = [{\'title\': u\'Sociologie\'}, {\'title\': u\'\xc3\x89conomie\'},\n                   {\'title\': u\'anthropologie\'}]\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 24b9d82..4da00f8 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -7,7 +7,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.PropertyManager import PropertyManager\n from OFS.SimpleItem import SimpleItem\n@@ -30,6 +30,7 @@\n from zope.interface import implementer\n \n import logging\n+import six\n \n logger = logging.getLogger(\'PlonePAS\')\n _marker = object()\n@@ -514,9 +515,15 @@ def canWriteProperty(self, prop_name):\n                     break  # shadowed by read-only\n         return 0\n \n-    canAddToGroup = MemberData.canAddToGroup.__func__\n-    canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n-    canAssignRole = MemberData.canAssignRole.__func__\n+    if six.PY3:\n+        canAddToGroup = MemberData.canAddToGroup\n+        canRemoveFromGroup = MemberData.canRemoveFromGroup\n+        canAssignRole = MemberData.canAssignRole\n+    else:\n+        # in PY2 this is a unbound method\n+        canAddToGroup = MemberData.canAddToGroup.__func__\n+        canRemoveFromGroup = MemberData.canRemoveFromGroup.__func__\n+        canAssignRole = MemberData.canAssignRole.__func__\n \n     # plugin getters\n \ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 2e320c6..837805a 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -5,7 +5,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import getToolByName\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex 29d2386..68cfbb1 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.requestmethod import postonly\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2\n from Products.CMFCore.interfaces import IMember\n from Products.CMFCore.MemberDataTool import _marker\n@@ -304,7 +304,7 @@ def getProperty(self, id, default=_marker):\n             if sheet.hasProperty(id):\n                 # Return the first one that has the property.\n                 value = sheet.getProperty(id)\n-                if isinstance(value, six.text_type):\n+                if six.PY2 and isinstance(value, six.text_type):\n                     # XXX Temporarily work around the fact that\n                     # property sheets blindly store and return\n                     # unicode. This is sub-optimal and should be\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 58cd826..4f5c2b0 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -7,7 +7,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime import DateTime\n from OFS.Image import Image\n@@ -32,7 +32,7 @@\n from ZODB.POSException import ConflictError\n from plone.protect.interfaces import IDisableCSRFProtection\n import six\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import BadRequest\n from zope import event\n from zope.component import getUtility\n@@ -762,8 +762,10 @@ def getBadMembers(self):\n         counter = 1\n         for member_id in tuple(portraits.keys()):\n             portrait = portraits[member_id]\n-            portrait_data = str(portrait.data)\n-            if portrait_data == \'\':\n+            portrait_data = portrait.data\n+            if six.PY2:\n+                portrait_data = str(portrait.data)\n+            if not portrait_data:\n                 continue\n             if not HAS_PIL:\n                 raise RuntimeError(\n@@ -772,7 +774,7 @@ def getBadMembers(self):\n                 )\n             try:\n                 import PIL\n-                PIL.Image.open(StringIO(portrait_data))\n+                PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\n             except:\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 61af69c..8544c0e 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.PlonePAS.config import IMAGE_SCALE_PARAMS\n from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin\n-from six import StringIO\n+from six import BytesIO\n from six.moves import urllib\n \n import six\n@@ -69,11 +69,11 @@ def scale_image(image_file, max_size=None, default_format=None):\n         >>> scale_image(invalid, (50, 50))\n         Traceback (most recent call last):\n         ...\n-        IOError: cannot identify image file...\n+        OSError: cannot identify image file...\n         >>> scale_image(sneaky, (50, 50))\n         Traceback (most recent call last):\n         ...\n-        IOError: cannot identify image file...\n+        OSError: cannot identify image file...\n \n     Now that that\'s out of the way we check on our real images to make\n     sure the format and mode are preserved, that they are scaled, and that they\n@@ -112,13 +112,13 @@ def scale_image(image_file, max_size=None, default_format=None):\n     width only unless told not to (we need to reset out files before\n     trying again though::\n \n-        >>> orig_jpg.seek(0)\n+        >>> _ = orig_jpg.seek(0)\n         >>> new_jpg, mimetype = scale_image(orig_jpg, (70, 100))\n         >>> img = Image.open(new_jpg)\n         >>> img.size\n         (70, 70)\n \n-        >>> orig_jpg.seek(0)\n+        >>> _ = orig_jpg.seek(0)\n         >>> new_jpg, mimetype = scale_image(orig_jpg, (70, 50))\n         >>> img = Image.open(new_jpg)\n         >>> img.size\n@@ -159,7 +159,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     if original_mode == \'P\' and format in (\'GIF\', \'PNG\'):\n         image = image.convert(\'P\')\n     # Save\n-    new_file = StringIO()\n+    new_file = BytesIO()\n     image.save(new_file, format, quality=IMAGE_SCALE_PARAMS[\'quality\'])\n     new_file.seek(0)\n     # Return the file data and the new mimetype\n'

