Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/f46ebf885c3fcb579fbe6181f7fb5ad6695de804

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a9dd65cc.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a774e20\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9dd65cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/a9dd65cc.internal b/news/a9dd65cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a9dd65cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0dad625 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,62 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..1dd6e4c\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.protect {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.protect {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/49b2a76df56ffd90621e3e15fc23afcbe5b762aa

Bumped version for breaking release.

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex ed59cfd..7e0822f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = '4.1.9.dev0'\n+version = '5.0.0.dev0'\n \n setup(\n     name='plone.protect',\n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/f9af79b17279d44eeb9dcd552c07946fbec8ab10

Drop support for Python 2.7 up to 3.7.

Files changed:
A news/5390ebc6.feature
M CHANGES.rst
M plone/__init__.py
M plone/protect/__init__.py
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/configure.zcml
M plone/protect/confirm.pt
M plone/protect/interfaces.py
M plone/protect/monkey.py
M plone/protect/postonly.py
M plone/protect/profiles/default/metadata.xml
M plone/protect/subscribers.py
M plone/protect/testing.py
M plone/protect/tests/__init__.py
M plone/protect/tests/case.py
M plone/protect/tests/test.zcml
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M plone/protect/tests/testPostOnly.py
M plone/protect/tests/testUtils.py
M plone/protect/tests/test_confirm_view.py
M plone/protect/utils.py
M plone/protect/views.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 62f960e..2767e3d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,8 +11,8 @@ Changelog\n 4.1.8 (2022-12-16)\n ------------------\n \n-Bug fixes:\n \n+Bug fixes:\n \n - Testing: explicitly set response content type header to html.  [jeromeperrin] (#97)\n \ndiff --git a/news/5390ebc6.feature b/news/5390ebc6.feature\nnew file mode 100644\nindex 0000000..29cba15\n--- /dev/null\n+++ b/news/5390ebc6.feature\n@@ -0,0 +1 @@\n+Drop support for Python <3.8.\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/protect/__init__.py b/plone/protect/__init__.py\nindex 7b621e7..a768935 100644\n--- a/plone/protect/__init__.py\n+++ b/plone/protect/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.authenticator import check as CheckAuthenticator\n from plone.protect.authenticator import createToken\n from plone.protect.authenticator import CustomCheckAuthenticator\ndiff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex ede24bd..53b1069 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.interfaces import IAuthenticatorView\n@@ -36,7 +35,7 @@ def _is_equal(val1, val2):\n     """\n     constant time comparison\n     """\n-    if not isinstance(val1, six.string_types) or not isinstance(val2, six.string_types):\n+    if not isinstance(val1, str) or not isinstance(val2, str):\n         return False\n     if len(val1) != len(val2):\n         return False\n@@ -51,23 +50,23 @@ def _getKeyring(username, manager=None):\n         manager = getUtility(IKeyManager)\n     if username == ANONYMOUS_USER:\n         try:\n-            ring = manager[u\'_anon\']\n+            ring = manager["_anon"]\n         except KeyError:\n             # no anonymous key defined.\n             # XXX should we even bother allowing to verify?\n-            ring = manager[u\'_system\']\n+            ring = manager["_system"]\n     else:\n         try:\n-            ring = manager[u"_forms"]\n+            ring = manager["_forms"]\n         except KeyError:\n-            ring = manager[u\'_system\']\n+            ring = manager["_system"]\n     return ring\n \n \n-def _verify_request(request, extra=\'\', name=\'_authenticator\', manager=None):\n+def _verify_request(request, extra="", name="_authenticator", manager=None):\n     auth = request.get(name)\n     if auth is None:\n-        auth = request.getHeader(\'X-CSRF-TOKEN\')\n+        auth = request.getHeader("X-CSRF-TOKEN")\n         if auth is None:\n             return False\n     if isinstance(auth, list):\n@@ -77,60 +76,57 @@ def _verify_request(request, extra=\'\', name=\'_authenticator\', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n \n-    if six.PY3:\n-        user = user.encode(\'utf-8\')\n-        extra = extra.encode(\'utf-8\')\n+    user = user.encode("utf-8")\n+    extra = extra.encode("utf-8")\n \n     for key in ring:\n         if key is None:\n             continue\n-        correct = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n+        correct = hmac.new(key.encode("utf-8"), user + extra, sha).hexdigest()\n         if _is_equal(correct, auth):\n             return True\n \n     return False\n \n+\n # We had to rename because previous hotfixes patched _verify\n _verify = _verify_request\n \n \n-def createToken(extra=\'\', manager=None):\n+def createToken(extra="", manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n     secret = ring.random()\n-    if six.PY3:\n-        secret = secret.encode(\'utf-8\')\n-        user = user.encode(\'utf-8\')\n-        extra = extra.encode(\'utf-8\')\n+    secret = secret.encode("utf-8")\n+    user = user.encode("utf-8")\n+    extra = extra.encode("utf-8")\n     return hmac.new(secret, user + extra, sha).hexdigest()\n \n \n @implementer(IAuthenticatorView)\n class AuthenticatorView(BrowserView):\n-\n-    def token(self, extra=\'\'):\n+    def token(self, extra=""):\n         return createToken(extra)\n \n-    def authenticator(self, extra=\'\', name=\'_authenticator\'):\n+    def authenticator(self, extra="", name="_authenticator"):\n         auth = createToken(extra)\n-        return \'<input type="hidden" name="%s" value="%s"/>\' % (name, auth)\n+        return f\'<input type="hidden" name="{name}" value="{auth}"/>\'\n \n-    def verify(self, extra=\'\', name="_authenticator"):\n+    def verify(self, extra="", name="_authenticator"):\n         return _verify_request(self.request, extra=extra, name=name)\n \n \n-def check(request, extra=\'\', name="_authenticator", manager=None):\n+def check(request, extra="", name="_authenticator", manager=None):\n     if isinstance(request, HTTPRequest):\n-        if not _verify_request(request, extra=extra,\n-                               name=name, manager=manager):\n-            raise Forbidden(\'Form authenticator is invalid.\')\n+        if not _verify_request(request, extra=extra, name=name, manager=manager):\n+            raise Forbidden("Form authenticator is invalid.")\n \n \n-def CustomCheckAuthenticator(extra=\'\', name=\'_authenticator\'):\n+def CustomCheckAuthenticator(extra="", name="_authenticator"):\n     def _check(request):\n         return check(request, extra=extra, name=name)\n+\n     return _check\n \n \n-__all__ = ["AuthenticatorView", "check", "createToken",\n-           "CustomCheckAuthenticator"]\n+__all__ = ["AuthenticatorView", "check", "createToken", "CustomCheckAuthenticator"]\ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 1602e65..6fe425c 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_parent\n from BTrees.OOBTree import OOBTree\n@@ -18,8 +17,8 @@\n from Products.CMFCore.utils import getToolByName\n from repoze.xmliter.serializer import XMLSerializer\n from repoze.xmliter.utils import getHTMLSerializer\n-from six.moves.urllib.parse import urlencode\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import urlencode\n+from urllib.parse import urlparse\n from zExceptions import Forbidden\n from zope.component import adapts\n from zope.component import ComponentLookupError\n@@ -43,7 +42,7 @@\n     from zope.app.component.hooks import getSite\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.blob\')\n+    pkg_resources.get_distribution("plone.app.blob")\n except pkg_resources.DistributionNotFound:\n     ATBlob = None\n else:\n@@ -61,27 +60,33 @@\n     IPortletAssignment = None\n \n \n-logger = logging.getLogger(\'plone.protect\')\n+logger = logging.getLogger("plone.protect")\n \n-X_FRAME_OPTIONS = os.environ.get(\'PLONE_X_FRAME_OPTIONS\', \'SAMEORIGIN\')\n-CSRF_DISABLED = os.environ.get(\'PLONE_CSRF_DISABLED\', \'false\').lower() in \\\n-    (\'true\', \'t\', \'yes\', \'y\', \'1\')\n+X_FRAME_OPTIONS = os.environ.get("PLONE_X_FRAME_OPTIONS", "SAMEORIGIN")\n+CSRF_DISABLED = os.environ.get("PLONE_CSRF_DISABLED", "false").lower() in (\n+    "true",\n+    "t",\n+    "yes",\n+    "y",\n+    "1",\n+)\n ANNOTATION_KEYS = (\n-    \'plone.contentrules.localassignments\',\n-    \'syndication_settings\',\n-    \'plone.portlets.contextassignments\',\n-    \'plone.scale\',\n+    "plone.contentrules.localassignments",\n+    "syndication_settings",\n+    "plone.portlets.contextassignments",\n+    "plone.scale",\n )\n SAFE_TYPES = tuple(t for t in [ATBlob, ScalesDict] if t is not None)\n \n \n @implementer(ITransform)\n-class ProtectTransform(object):\n+class ProtectTransform:\n     """\n     XXX Need to be extremely careful with everything we do in here\n     since an error here would mean the transform is skipped\n     and no CSRF protection...\n     """\n+\n     adapts(Interface, Interface)  # any context, any request\n \n     # should be last lxml related transform\n@@ -89,9 +94,7 @@ class ProtectTransform(object):\n \n     key_manager = None\n     site = None\n-    safe_views = (\n-        \'plone_lock_operations\',\n-    )\n+    safe_views = ("plone_lock_operations",)\n \n     def __init__(self, published, request):\n         self.published = published\n@@ -109,13 +112,16 @@ def parseTree(self, result, encoding):\n \n         # hhmmm, this is kind of taken right out of plone.app.theming\n         # maybe this logic(parsing dom) should be someone central?\n-        contentType = self.request.response.getHeader(\'Content-Type\')\n-        if contentType is None or not contentType.startswith(\'text/html\'):\n+        contentType = self.request.response.getHeader("Content-Type")\n+        if contentType is None or not contentType.startswith("text/html"):\n             return None\n \n-        contentEncoding = self.request.response.getHeader(\'Content-Encoding\')\n-        if contentEncoding and contentEncoding in (\'zip\', \'deflate\',\n-                                                   \'compress\',):\n+        contentEncoding = self.request.response.getHeader("Content-Encoding")\n+        if contentEncoding and contentEncoding in (\n+            "zip",\n+            "deflate",\n+            "compress",\n+        ):\n             return None\n \n         if isinstance(result, list) and len(result) == 1:\n@@ -123,20 +129,21 @@ def parseTree(self, result, encoding):\n             if not result[0].strip():\n                 return None\n         try:\n-            result = getHTMLSerializer(\n-                result, pretty_print=False, encoding=encoding)\n+            result = getHTMLSerializer(result, pretty_print=False, encoding=encoding)\n             # We are going to force html output here always as XHTML\n             # output does odd character encodings\n             result.serializer = html.tostring\n             return result\n         except (AttributeError, TypeError, etree.ParseError):\n             # XXX handle something special?\n-            logger.warn(\'error parsing dom, failure to add csrf \'\n-                        \'token to response for url %s\' % self.request.URL)\n+            logger.warn(\n+                "error parsing dom, failure to add csrf "\n+                "token to response for url %s" % self.request.URL\n+            )\n             return None\n \n     def transformBytes(self, result, encoding):\n-        result = result.decode(encoding, \'ignore\')\n+        result = result.decode(encoding, "ignore")\n         return self.transformIterable([result], encoding)\n \n     def transformString(self, result, encoding):\n@@ -146,14 +153,10 @@ def transformUnicode(self, result, encoding):\n         return self.transformIterable([result], encoding)\n \n     def transformIterable(self, result, encoding):\n-        """Apply the transform if required\n-        """\n+        """Apply the transform if required"""\n         # before anything, do the clickjacking protection\n-        if (\n-            X_FRAME_OPTIONS and\n-            not self.request.response.getHeader(\'X-Frame-Options\')\n-        ):\n-            self.request.response.setHeader(\'X-Frame-Options\', X_FRAME_OPTIONS)\n+        if X_FRAME_OPTIONS and not self.request.response.getHeader("X-Frame-Options"):\n+            self.request.response.setHeader("X-Frame-Options", X_FRAME_OPTIONS)\n \n         if CSRF_DISABLED:\n             return\n@@ -164,7 +167,7 @@ def transformIterable(self, result, encoding):\n \n         # if on confirm view, do not check, just abort and\n         # immediately transform without csrf checking again\n-        if IConfirmView.providedBy(self.request.get(\'PUBLISHED\')):\n+        if IConfirmView.providedBy(self.request.get("PUBLISHED")):\n             # abort it, show the confirmation...\n             transaction.abort()\n             return self.transform(result, encoding)\n@@ -176,7 +179,7 @@ def transformIterable(self, result, encoding):\n             return\n \n         try:\n-            tool = getToolByName(context, \'portal_url\', None)\n+            tool = getToolByName(context, "portal_url", None)\n             if tool:\n                 self.site = tool.getPortalObject()\n         except TypeError:\n@@ -201,7 +204,7 @@ def transformIterable(self, result, encoding):\n         return self.transform(result, encoding)\n \n     def getContext(self):\n-        published = self.request.get(\'PUBLISHED\')\n+        published = self.request.get("PUBLISHED")\n         if isinstance(published, types.MethodType):\n             return published.__self__\n         return aq_parent(published)\n@@ -221,26 +224,30 @@ def check(self):\n             return self._check()\n         except:\n             transaction.abort()\n-            logger.error("Error checking for CSRF. "\n-                         "Transaction will be aborted since the request "\n-                         "is now unsafe:\\n%s" % (\n-                             traceback.format_exc()))\n+            logger.error(\n+                "Error checking for CSRF. "\n+                "Transaction will be aborted since the request "\n+                "is now unsafe:\\n%s" % (traceback.format_exc())\n+            )\n             raise\n \n     def _registered_objects(self):\n         app = self.request.PARENTS[-1]\n-        return list(itertools.chain.from_iterable([\n-            conn._registered_objects\n-            # skip the \'temporary\' connection since it stores session objects\n-            # which get written all the time\n-            for name, conn in app._p_jar.connections.items()\n-            if name != \'temporary\'\n-        ]))\n+        return list(\n+            itertools.chain.from_iterable(\n+                [\n+                    conn._registered_objects\n+                    # skip the \'temporary\' connection since it stores session objects\n+                    # which get written all the time\n+                    for name, conn in app._p_jar.connections.items()\n+                    if name != "temporary"\n+                ]\n+            )\n+        )\n \n     def _check(self):\n         registered = self._registered_objects()\n-        if len(registered) > 0 and \\\n-                not IDisableCSRFProtection.providedBy(self.request):\n+        if len(registered) > 0 and not IDisableCSRFProtection.providedBy(self.request):\n             if self.getViewName() in self.safe_views:\n                 return True\n             # Okay, we\'re writing here, we need to protect!\n@@ -248,8 +255,10 @@ def _check(self):\n                 check(self.request, manager=self.key_manager)\n                 return True\n             except ComponentLookupError:\n-                logger.info(\'Can not find key manager for CSRF protection. \'\n-                            \'This should not happen.\')\n+                logger.info(\n+                    "Can not find key manager for CSRF protection. "\n+                    "This should not happen."\n+                )\n                 raise\n             except Forbidden:\n                 # XXX\n@@ -260,13 +269,13 @@ def _check(self):\n                 # need to be portlet assignments. XXX needs to be fixed\n                 # somehow...\n                 safe_oids = []\n-                if SAFE_WRITE_KEY in getattr(self.request, \'environ\', {}):\n+                if SAFE_WRITE_KEY in getattr(self.request, "environ", {}):\n                     safe_oids = self.request.environ[SAFE_WRITE_KEY]\n                 safe = True\n                 for obj in registered:\n                     if IPortletAssignment is not None and IPortletAssignment.providedBy(obj):\n                         continue\n-                    if getattr(obj, \'_p_oid\', False) in safe_oids:\n+                    if getattr(obj, "_p_oid", False) in safe_oids:\n                         continue\n                     if SAFE_TYPES and isinstance(obj, SAFE_TYPES):\n                         continue\n@@ -284,14 +293,13 @@ def _check(self):\n                     safe = False\n                     break\n                 if not safe:\n-                    if self.request.REQUEST_METHOD != \'GET\':\n+                    if self.request.REQUEST_METHOD != "GET":\n                         # only try to be "smart" with GET requests\n                         raise\n                     logger.info(\n-                        \'{0:s}\\naborting transaction due to no CSRF \'\n-                        \'protection on url {1:s}\'.format(\n-                            \'\\n\'.join(traceback.format_stack()),\n-                            self.request.URL\n+                        "{:s}\\naborting transaction due to no CSRF "\n+                        "protection on url {:s}".format(\n+                            "\\n".join(traceback.format_stack()), self.request.URL\n                         )\n                     )\n                     transaction.abort()\n@@ -305,15 +313,15 @@ def _check(self):\n                     #   write on read, without a POST request and we don\'t\n                     #   know what to do with it gracefully.\n                     resp = self.request.response\n-                    ct = resp.getHeader(\'Content-Type\', \'\') or \'\'\n-                    if self.site and (\n-                            resp.status in (301, 302) or \'text/html\' in ct):\n+                    ct = resp.getHeader("Content-Type", "") or ""\n+                    if self.site and (resp.status in (301, 302) or "text/html" in ct):\n                         data = self.request.form.copy()\n-                        data[\'original_url\'] = self.request.URL\n-                        resp.redirect(\'%s/@@confirm-action?%s\' % (\n-                            self.site.absolute_url(),\n-                            urlencode(data)\n-                        ))\n+                        data["original_url"] = self.request.URL\n+                        resp.redirect(\n+                            "{}/@@confirm-action?{}".format(\n+                                self.site.absolute_url(), urlencode(data)\n+                            )\n+                        )\n                         return False\n         return True\n \n@@ -328,7 +336,6 @@ def isActionInSite(self, action, current_url):\n         return True\n \n     def transform(self, result, encoding):\n-\n         result = self.parseTree(result, encoding)\n         if result is None:\n             return None\n@@ -339,12 +346,11 @@ def transform(self, result, encoding):\n         except ComponentLookupError:\n             if self.site is not None:\n                 logger.warn(\n-                    \'Keyring not found on site. This should not happen\',\n-                    exc_info=True\n+                    "Keyring not found on site. This should not happen", exc_info=True\n                 )\n             return result\n \n-        for form in root.cssselect(\'form\'):\n+        for form in root.cssselect("form"):\n             # XXX should we only do POST? If we\'re logged in and\n             # it\'s an internal form, I\'m inclined to say no...\n             # method = form.attrib.get(\'method\', \'GET\').lower()\n@@ -353,36 +359,38 @@ def transform(self, result, encoding):\n \n             # some get forms we definitely do not want to protect.\n             # for now, we know search we do not want to protect\n-            method = form.attrib.get(\'method\', \'GET\').lower()\n-            action = form.attrib.get(\'action\', \'\').strip()\n-            if method == \'get\' and \'@@search\' in action:\n+            method = form.attrib.get("method", "GET").lower()\n+            action = form.attrib.get("action", "").strip()\n+            if method == "get" and "@@search" in action:\n                 continue\n-            action = form.attrib.get(\'action\', \'\').strip()\n+            action = form.attrib.get("action", "").strip()\n             if not self.isActionInSite(action, url):\n                 continue\n             # check if the token is already on the form..\n             hidden = form.cssselect(\'[name="_authenticator"]\')\n             if len(hidden) == 0:\n                 hidden = etree.Element("input")\n-                hidden.attrib[\'name\'] = \'_authenticator\'\n-                hidden.attrib[\'type\'] = \'hidden\'\n-                hidden.attrib[\'value\'] = token\n+                hidden.attrib["name"] = "_authenticator"\n+                hidden.attrib["type"] = "hidden"\n+                hidden.attrib["value"] = token\n                 form.append(hidden)\n \n-        if self.site is not None and not root.cssselect(\'#protect-script\'):\n+        if self.site is not None and not root.cssselect("#protect-script"):\n             # Alternative: add this in the resource registry.\n             site_url = self.site.absolute_url()\n-            elements = root.cssselect(\'body\')\n+            elements = root.cssselect("body")\n             if len(elements):\n                 body = elements[0]\n                 protect_script = etree.Element("script")\n-                protect_script.attrib.update({\n-                    \'type\': "application/javascript",\n-                    \'src\': "%s/++resource++protect.js" % site_url,\n-                    \'data-site-url\': site_url,\n-                    \'data-token\': token,\n-                    \'id\': \'protect-script\'\n-                })\n+                protect_script.attrib.update(\n+                    {\n+                        "type": "application/javascript",\n+                        "src": "%s/++resource++protect.js" % site_url,\n+                        "data-site-url": site_url,\n+                        "data-token": token,\n+                        "id": "protect-script",\n+                    }\n+                )\n                 body.append(protect_script)\n \n         return result\ndiff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml\nindex be8dad9..6a9d097 100644\n--- a/plone/protect/configure.zcml\n+++ b/plone/protect/configure.zcml\n@@ -1,69 +1,73 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:monkey="http://namespaces.plone.org/monkey"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <include package="AccessControl"\n-             zcml:condition="installed AccessControl.rolemanager" />\n-    <include package="plone.keyring" />\n-    <include package="plone.transformchain" />\n+  <include\n+      package="AccessControl"\n+      zcml:condition="installed AccessControl.rolemanager"\n+      />\n+  <include package="plone.keyring" />\n+  <include package="plone.transformchain" />\n \n-    <browser:page\n-       for="*"\n-       name="authenticator"\n-       class=".authenticator.AuthenticatorView"\n-       permission="zope.Public"\n-       allowed_interface=".interfaces.IAuthenticatorView"\n-       />\n+  <browser:page\n+      name="authenticator"\n+      for="*"\n+      class=".authenticator.AuthenticatorView"\n+      allowed_interface=".interfaces.IAuthenticatorView"\n+      permission="zope.Public"\n+      />\n \n-    <genericsetup:registerProfile\n-        zcml:condition="installed Products.CMFCore"\n-        name="default"\n-        directory="profiles/default"\n-        title="plone.protect configuration"\n-        description="Local configuration for plone.protect"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="plone.protect configuration"\n+      description="Local configuration for plone.protect"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      directory="profiles/default"\n+      zcml:condition="installed Products.CMFCore"\n+      />\n \n-    <adapter\n-        name="plone.protect.autocsrf"\n-        factory=".auto.ProtectTransform"\n-        />\n+  <adapter\n+      factory=".auto.ProtectTransform"\n+      name="plone.protect.autocsrf"\n+      />\n \n-    <browser:resource\n-        name="protect.js"\n-        file="protect.js"\n-        />\n+  <browser:resource\n+      name="protect.js"\n+      file="protect.js"\n+      />\n \n-    <browser:page\n-        name="confirm-action"\n-        for="*"\n-        class=".views.ConfirmView"\n-        template="confirm.pt"\n-        permission="zope2.View"\n-    />\n+  <browser:page\n+      name="confirm-action"\n+      for="*"\n+      class=".views.ConfirmView"\n+      template="confirm.pt"\n+      permission="zope2.View"\n+      />\n \n-    <subscriber handler=".subscribers.onUserLogsIn" />\n+  <subscriber handler=".subscribers.onUserLogsIn" />\n \n-    <include package="collective.monkeypatcher" />\n+  <include package="collective.monkeypatcher" />\n \n-    <monkey:patch\n-        zcml:condition="installed OFS.Lockable"\n-        description="Special handling for write on read Zope2 locking issues"\n-        class="OFS.Lockable.LockableItem"\n-        original="wl_lockmapping"\n-        replacement=".monkey.wl_lockmapping"\n-        preserveOriginal="True"\n-        />\n+  <monkey:patch\n+      original="wl_lockmapping"\n+      replacement=".monkey.wl_lockmapping"\n+      class="OFS.Lockable.LockableItem"\n+      description="Special handling for write on read Zope2 locking issues"\n+      preserveOriginal="True"\n+      zcml:condition="installed OFS.Lockable"\n+      />\n \n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n \n-    <zcml:customAction\n-        handler=".monkey.disable_zope_csrf_checks"\n-        />\n+  <zcml:customAction handler=".monkey.disable_zope_csrf_checks" />\n \n </configure>\ndiff --git a/plone/protect/confirm.pt b/plone/protect/confirm.pt\nindex 6a87b94..20d339e 100644\n--- a/plone/protect/confirm.pt\n+++ b/plone/protect/confirm.pt\n@@ -1,50 +1,73 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<metal:block fill-slot="top_slot"\n-             tal:define="dummy python:request.set(\'disable_border\', 1)" />\n+  <metal:block fill-slot="top_slot"\n+               tal:define="\n+                 dummy python:request.set(\'disable_border\', 1);\n+               "\n+  />\n \n-<body>\n-  <metal:title fill-slot="content-title">\n-     <h1 class="documentFirstHeading" i18n:translate="">\n+  <body>\n+    <metal:title fill-slot="content-title">\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >\n          Confirming User Action.\n-     </h1>\n-  </metal:title>\n+      </h1>\n+    </metal:title>\n \n-  <metal:description fill-slot="content-description">\n-     <div class="documentDescription" i18n:translate="">\n+    <metal:description fill-slot="content-description">\n+      <div class="documentDescription"\n+           i18n:translate=""\n+      >\n          Confirm that you\'d like to perform this action.\n-     </div>\n-  </metal:description>\n+      </div>\n+    </metal:description>\n \n-  <metal:content-core fill-slot="content-core">\n-    <metal:content-core define-macro="content-core">\n-      <p class="discreet" i18n:translate="">\n+    <metal:content-core fill-slot="content-core">\n+      <metal:content-core define-macro="content-core">\n+        <p class="discreet"\n+           i18n:translate=""\n+        >\n         Careful, it\'s possible someone is executing an exploit against you.\n         Verify you just performed an action on this site and that you were\n         not referred here by a different website or email.\n-      </p>\n-      <form tal:attributes="action request/original_url;" method="GET">\n-        <tal:values tal:repeat="key python: request.form.keys()">\n-          <input type="hidden" tal:attributes="name key; value python: request.form[key]" />\n-        </tal:values>\n-        <dl>\n-          <dt i18n:translate="">Original URL</dt>\n-          <dd tal:content="request/original_url" />\n-        </dl>\n-        <div class="formControls">\n-          <input type="submit" value="Confirm action" i18n:attributes="value"\n-                 name="form.button.confirm" class="standalone" />\n-        </div>\n-      </form>\n+        </p>\n+        <form method="GET"\n+              tal:attributes="\n+                action request/original_url;\n+              "\n+        >\n+          <tal:values tal:repeat="key python: request.form.keys()">\n+            <input type="hidden"\n+                   tal:attributes="\n+                     name key;\n+                     value python: request.form[key];\n+                   "\n+            />\n+          </tal:values>\n+          <dl>\n+            <dt i18n:translate="">Original URL</dt>\n+            <dd tal:content="request/original_url"></dd>\n+          </dl>\n+          <div class="formControls">\n+            <input class="standalone"\n+                   name="form.button.confirm"\n+                   type="submit"\n+                   value="Confirm action"\n+                   i18n:attributes="value"\n+            />\n+          </div>\n+        </form>\n+      </metal:content-core>\n     </metal:content-core>\n-  </metal:content-core>\n \n-</body>\n+  </body>\n </html>\n-\ndiff --git a/plone/protect/interfaces.py b/plone/protect/interfaces.py\nindex fdfebed..36ebe28 100644\n--- a/plone/protect/interfaces.py\n+++ b/plone/protect/interfaces.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IAuthenticatorView(Interface):\n-\n     def token():\n         """return token value"""\n \ndiff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex af79302..959508a 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -1,11 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.auto import safeWrite\n from zope.testing.cleanup import addCleanUp\n+\n import inspect\n \n \n def wl_lockmapping(self, killinvalids=0, create=0):\n-    has_write_locks = hasattr(self, \'_dav_writelocks\')\n+    has_write_locks = hasattr(self, "_dav_writelocks")\n     locks = self._old_wl_lockmapping(killinvalids=killinvalids, create=create)\n     try:\n         safeWrite(locks)\n@@ -22,10 +22,10 @@ def pluggableauth__getCSRFToken(request):\n     """\n     let plone.protect do it\'s job\n     """\n-    return \'\'\n+    return ""\n \n \n-def pluggableauth__checkCSRFToken(request, token=\'csrf_token\', raises=True):\n+def pluggableauth__checkCSRFToken(request, token="csrf_token", raises=True):\n     """\n     let plone.protect do it\'s job\n     """\n@@ -41,28 +41,33 @@ def marmoset_patch(func, replacement):\n \n def disable_zope_csrf_checks():\n     from Products.PluggableAuthService import utils as pluggable_utils\n-    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+\n+    if hasattr(pluggable_utils, "checkCSRFToken"):\n         marmoset_patch(\n             pluggable_utils.checkCSRFToken,\n             pluggableauth__checkCSRFToken,\n         )\n-    if hasattr(pluggable_utils, \'getCSRFToken\'):\n-        marmoset_patch(\n-            pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n+    if hasattr(pluggable_utils, "getCSRFToken"):\n+        marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n \n \n def enable_zope_csrf_checks():\n     from Products.PluggableAuthService import utils as pluggable_utils\n-    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+\n+    if hasattr(pluggable_utils, "checkCSRFToken"):\n         try:\n-            pluggable_utils.checkCSRFToken.__code__ = \\\n+            pluggable_utils.checkCSRFToken.__code__ = (\n                 pluggable_utils.checkCSRFToken._old_code\n+            )\n         except AttributeError:\n             pass\n-    if hasattr(pluggable_utils, \'getCSRFToken\'):\n+    if hasattr(pluggable_utils, "getCSRFToken"):\n         try:\n-            pluggable_utils.getCSRFToken.__code__ = \\\n+            pluggable_utils.getCSRFToken.__code__ = (\n                 pluggable_utils.getCSRFToken._old_code\n+            )\n         except AttributeError:\n             pass\n+\n+\n addCleanUp(enable_zope_csrf_checks)\ndiff --git a/plone/protect/postonly.py b/plone/protect/postonly.py\nindex aeb0535..f0217e0 100644\n--- a/plone/protect/postonly.py\n+++ b/plone/protect/postonly.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from zExceptions import Forbidden\n from ZPublisher.HTTPRequest import HTTPRequest\n \n \n def check(request):\n     if isinstance(request, HTTPRequest):\n-        if request.get(\'REQUEST_METHOD\', \'GET\').upper() != \'POST\':\n-            raise Forbidden(\'Request must be POST\')\n+        if request.get("REQUEST_METHOD", "GET").upper() != "POST":\n+            raise Forbidden("Request must be POST")\ndiff --git a/plone/protect/profiles/default/metadata.xml b/plone/protect/profiles/default/metadata.xml\nindex 6b36b5c..054bd4a 100644\n--- a/plone/protect/profiles/default/metadata.xml\n+++ b/plone/protect/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1.1</version>\n   <dependencies>\ndiff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py\nindex a99ac23..baf74e8 100644\n--- a/plone/protect/subscribers.py\n+++ b/plone/protect/subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.protect.utils import getRoot\n@@ -20,12 +19,12 @@\n     from zope.app.component.hooks import getSite\n \n \n-LOGGER = logging.getLogger(\'plone.protect\')\n+LOGGER = logging.getLogger("plone.protect")\n \n _ring_rotation_schedules = (\n-    (\'_system\', 60 * 60 * 24 * 7),  # weekly\n-    (\'_forms\', 60 * 60 * 24),  # daily\n-    (\'_anon\', 60 * 60 * 24),  # daily\n+    ("_system", 60 * 60 * 24 * 7),  # weekly\n+    ("_forms", 60 * 60 * 24),  # daily\n+    ("_anon", 60 * 60 * 24),  # daily\n )\n \n \n@@ -35,7 +34,7 @@ def _rotate(manager):\n         try:\n             ring = manager[ring_name]\n             if (ring.last_rotation + check_period) < current_time:\n-                LOGGER.info(\'auto rotating keyring %s\' % ring_name)\n+                LOGGER.info("auto rotating keyring %s" % ring_name)\n                 ring.rotate()\n         except KeyError:\n             continue\n@@ -63,5 +62,5 @@ def onUserLogsIn(event):\n         if req:\n             url = req.URL\n         else:\n-            url = \'\'\n-        LOGGER.warn(\'cannot find key manager for url %s\' % url)\n+            url = ""\n+        LOGGER.warn("cannot find key manager for url %s" % url)\ndiff --git a/plone/protect/testing.py b/plone/protect/testing.py\nindex 126d004..1b63308 100644\n--- a/plone/protect/testing.py\n+++ b/plone/protect/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n@@ -14,39 +13,39 @@ class ProtectedLayer(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # load ZCML\n         import plone.protect\n-        xmlconfig.file(\'configure.zcml\', plone.protect,\n-                       context=configurationContext)\n-        xmlconfig.file(\'test.zcml\', plone.protect.tests,\n-                       context=configurationContext)\n+\n+        xmlconfig.file("configure.zcml", plone.protect, context=configurationContext)\n+        xmlconfig.file("test.zcml", plone.protect.tests, context=configurationContext)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.protect:default\')\n+        applyProfile(portal, "plone.protect:default")\n         self.portal = portal\n \n     def tearDownZope(self, app):\n         from plone.protect.monkey import enable_zope_csrf_checks\n \n+\n PROTECT_FIXTURE = ProtectedLayer()\n PROTECT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PROTECT_FIXTURE,), name="PROTECT_FIXTURE:Functional")\n+    bases=(PROTECT_FIXTURE,), name="PROTECT_FIXTURE:Functional"\n+)\n \n \n class TestUnprotectedView(BrowserView):\n-\n     def __call__(self):\n         # on posts, write something to the db\n-        if \'submit1\' in self.request.form or \'submit2\' in self.request.form:\n-            self.context.foo = \'bar\'\n+        if "submit1" in self.request.form or "submit2" in self.request.form:\n+            self.context.foo = "bar"\n             self.context._p_changed = True\n-        self.request.response.setHeader(\'Content-Type\', \'text/html\')\n+        self.request.response.setHeader("Content-Type", "text/html")\n         return """\n <html>\n <body>\n <form id="one" method="POST">\n     <input type="submit" name="submit1" value="submit1" />\n </form>\n-<form id="two" action="%s" METHOD="post">\n+<form id="two" action="{}" METHOD="post">\n     <input type="submit" name="submit2" value="submit2" />\n </form>\n <form id="three" method="GET">\n@@ -65,14 +64,13 @@ def __call__(self):\n     <input type="submit" name="submit7" value="submit7" />\n </form>\n </body>\n-</html>""" % (\n+</html>""".format(\n             self.request.URL,\n         )\n \n \n class TestSafeToWriteObject(BrowserView):\n-\n     def __call__(self):\n-        self.context.foo = \'bar\'\n+        self.context.foo = "bar"\n         safeWrite(self)\n-        return \'done\'\n+        return "done"\ndiff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/protect/tests/__init__.py\n+++ b/plone/protect/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/protect/tests/case.py b/plone/protect/tests/case.py\nindex ed1bbd0..60a09b6 100644\n--- a/plone/protect/tests/case.py\n+++ b/plone/protect/tests/case.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import noSecurityManager\n from AccessControl.User import User\n@@ -9,31 +8,28 @@\n \n \n class MockRequest(dict):\n-\n     def __init__(self, URL=None, *args, **kwargs):\n-        super(MockRequest, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n         self.environ = {}\n         self.URL = URL\n \n     def setReferer(self, url):\n-        self.environ[\'HTTP_REFERER\'] = url\n+        self.environ["HTTP_REFERER"] = url\n \n     def getHeader(self, name):\n         return None\n \n \n class KeyringTestCase(TestCase):\n-\n     key_size = 1\n \n     def setUp(self):\n         self.sm = getGlobalSiteManager()\n         self.manager = KeyManager(self.key_size)\n-        self.sm.registerUtility(self.manager, provided=IKeyManager,\n-                                event=False)\n+        self.sm.registerUtility(self.manager, provided=IKeyManager, event=False)\n         # Tests modify the user object so we better make sure it is *our*\n         # user object and not the built-in Anonymous User.\n-        newSecurityManager(None, User(\'dummy\', \'secret\', (), ()))\n+        newSecurityManager(None, User("dummy", "secret", (), ()))\n \n     def tearDown(self):\n         self.sm.unregisterUtility(self.manager, provided=IKeyManager)\ndiff --git a/plone/protect/tests/test.zcml b/plone/protect/tests/test.zcml\nindex 14db394..10bb5e2 100644\n--- a/plone/protect/tests/test.zcml\n+++ b/plone/protect/tests/test.zcml\n@@ -1,21 +1,22 @@\n <configure\n-  xmlns="http://namespaces.zope.org/zope"\n-  xmlns:i18n="http://namespaces.zope.org/i18n"\n-  xmlns:browser="http://namespaces.zope.org/browser"\n-  i18n_domain="collective.protected">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="collective.protected"\n+    >\n \n   <browser:page\n-    for="*"\n-    name="test-unprotected"\n-    class="plone.protect.testing.TestUnprotectedView"\n-    permission="zope2.View"\n-  />\n+      name="test-unprotected"\n+      for="*"\n+      class="plone.protect.testing.TestUnprotectedView"\n+      permission="zope2.View"\n+      />\n \n   <browser:page\n-    for="*"\n-    name="test-safetowrite"\n-    class="plone.protect.testing.TestSafeToWriteObject"\n-    permission="zope2.View"\n-  />\n+      name="test-safetowrite"\n+      for="*"\n+      class="plone.protect.testing.TestSafeToWriteObject"\n+      permission="zope2.View"\n+      />\n \n </configure>\ndiff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py\nindex d59e9f1..0c9ecd4 100644\n--- a/plone/protect/tests/testAuthenticator.py\n+++ b/plone/protect/tests/testAuthenticator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.protect import createToken\n from plone.protect import CustomCheckAuthenticator\n@@ -13,9 +12,9 @@\n from ZPublisher.HTTPRequest import HTTPRequest\n \n import hmac\n+import six\n import sys\n \n-import six\n \n try:\n     from hashlib import sha1 as sha\n@@ -24,7 +23,6 @@\n \n \n class AuthenticatorTests(KeyringTestCase):\n-\n     def setUp(self):\n         KeyringTestCase.setUp(self)\n         self.view = AuthenticatorView(None, None)\n@@ -34,7 +32,7 @@ def setUsername(self, name):\n         user.name = name\n \n     def setSecret(self, secret):\n-        self.manager[\'_forms\'].data[0] = secret\n+        self.manager["_forms"].data[0] = secret\n \n     def testIsHtmlInput(self):\n         auth = self.view.authenticator()\n@@ -55,39 +53,37 @@ def testDiffersPerSecret(self):\n \n     def testDiffersPerExtra(self):\n         one = self.view.authenticator()\n-        two = self.view.authenticator(\'some-extra-value\')\n+        two = self.view.authenticator("some-extra-value")\n         self.assertNotEqual(one, two)\n \n \n class VerifyTests(KeyringTestCase):\n-\n     key_size = 2\n \n     def setUp(self):\n         self.request = MockRequest()\n-        super(VerifyTests, self).setUp()\n+        super().setUp()\n         self.view = AuthenticatorView(None, self.request)\n \n-    def setAuthenticator(self, key, extra=\'\', name="_authenticator"):\n+    def setAuthenticator(self, key, extra="", name="_authenticator"):\n         user = getSecurityManager().getUser().getUserName()\n-        if six.PY3:\n-            user = user.encode(\'utf-8\')\n-            extra = extra.encode(\'utf-8\')\n-        auth = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n+        user = user.encode("utf-8")\n+        extra = extra.encode("utf-8")\n+        auth = hmac.new(key.encode("utf-8"), user + extra, sha).hexdigest()\n         self.request[name] = auth\n \n     def testCorrectAuthenticator(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n+        self.manager["_forms"].data[0] = "secret"\n         self.setAuthenticator("secret")\n         self.assertEqual(self.view.verify(), True)\n \n     def testCustomAuthenticatorKeyName(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n+        self.manager["_forms"].data[0] = "secret"\n         self.setAuthenticator("secret", name="_my_authenticator")\n         self.assertEqual(self.view.verify(name="_my_authenticator"), True)\n \n     def testOlderSecretVerifies(self):\n-        self.manager[\'_forms\'].data[1] = "backup"\n+        self.manager["_forms"].data[1] = "backup"\n         self.setAuthenticator("backup")\n         self.assertEqual(self.view.verify(), True)\n \n@@ -103,25 +99,25 @@ def testAuthenticatorWrongType(self):\n         self.assertEqual(self.view.verify(), False)\n \n     def testExtraArgumentCanBeVerified(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n-        self.setAuthenticator("secret", \'some-extra-value\')\n-        self.assertEqual(self.view.verify(\'some-extra-value\'), True)\n+        self.manager["_forms"].data[0] = "secret"\n+        self.setAuthenticator("secret", "some-extra-value")\n+        self.assertEqual(self.view.verify("some-extra-value"), True)\n \n \n class DecoratorTests(KeyringTestCase):\n-\n     def setUp(self):\n         self.request = HTTPRequest(sys.stdin, dict(SERVER_URL="dummy"), None)\n         KeyringTestCase.setUp(self)\n \n         def func(REQUEST=None):\n             return 1\n+\n         self.func = protect(check)(func)\n \n     def testNoRequestParameter(self):\n-\n         def func():\n             pass\n+\n         self.assertRaises(ValueError, protect(check), func)\n \n     def testIgnoreBadRequestType(self):\n@@ -132,21 +128,25 @@ def testBadAuthenticator(self):\n         self.assertRaises(Forbidden, self.func, self.request)\n \n     def testAuthenticatedCustom(self):\n-        self.request[\'_authenticator\'] = createToken(\'some-value\')\n+        self.request["_authenticator"] = createToken("some-value")\n \n         def func(REQUEST=self.request):\n             return True\n-        self.assertEquals(\n-            protect(CustomCheckAuthenticator(\'some-value\'))(func)(), True)\n+\n+        self.assertEqual(protect(CustomCheckAuthenticator("some-value"))(func)(), True)\n \n     def testAuthenticatedCustomName(self):\n-        self.request[\'_my_authenticator\'] = createToken(\'some-value\')\n+        self.request["_my_authenticator"] = createToken("some-value")\n \n         def func(REQUEST=self.request):\n             return True\n-        self.assertEquals(\n-            protect(CustomCheckAuthenticator(\n-                \'some-value\', \'_my_authenticator\'))(func)(), True)\n+\n+        self.assertEqual(\n+            protect(CustomCheckAuthenticator("some-value", "_my_authenticator"))(\n+                func\n+            )(),\n+            True,\n+        )\n \n \n def test_suite():\ndiff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex 70c75c1..017e69a 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import SITE_OWNER_NAME\n@@ -20,149 +19,141 @@\n import unittest\n \n \n-class _BaseAutoTest(object):\n+class _BaseAutoTest:\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def test_adds_csrf_protection_input(self):\n-        self.open(\'test-unprotected\')\n+        self.open("test-unprotected")\n         self.assertTrue(\'name="_authenticator"\' in self.browser.contents)\n \n     def test_adds_csrf_protection_for_scheme_relative_same_domain(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'five\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("five")\n         form.getControl(name="_authenticator")\n \n     def test_adds_csrf_protection_for_relative_path(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'seven\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("seven")\n         form.getControl(name="_authenticator")\n \n     def test_adds_csrf_protection_for_no_action(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'one\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("one")\n         form.getControl(name="_authenticator")\n \n     def test_does_not_add_csrf_protection_to_different_domain(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'six\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("six")\n         try:\n             form.getControl(name="_authenticator")\n-            self.assertEqual(\'should not add authenticator\', \'\')\n+            self.assertEqual("should not add authenticator", "")\n         except Exception:\n             pass\n \n-    def test_does_not_add_csrf_protection_to_different_domain_scheme_relative(\n-            self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'four\')\n+    def test_does_not_add_csrf_protection_to_different_domain_scheme_relative(self):\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("four")\n         try:\n             form.getControl(name="_authenticator")\n-            self.assertEqual(\'should not add authenticator\', \'\')\n+            self.assertEqual("should not add authenticator", "")\n         except Exception:\n             pass\n \n     def test_authentication_works_automatically(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit1\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit1").click()\n         self.assertEqual(self.portal.foo, "bar")\n \n     def test_authentication_works_for_other_form(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit2\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit2").click()\n         self.assertEqual(self.portal.foo, "bar")\n \n     def test_works_for_get_form_yet(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit3\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit3").click()\n \n     def test_forbidden_raised_if_auth_failure(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getForm(\'one\').\\\n-            getControl(name="_authenticator").value = \'foobar\'\n+        self.open("test-unprotected")\n+        self.browser.getForm("one").getControl(name="_authenticator").value = "foobar"\n         # XXX: plone.transformchain don\'t reraise exceptions\n         # try:\n         #    self.browser.getControl(\'submit1\').click()\n         # except Exception as ex:\n         #     self.assertEquals(ex.getcode(), 403)\n-        self.browser.getControl(\'submit1\').click()\n+        self.browser.getControl("submit1").click()\n         self.assertFalse(hasattr(self.portal, "foo"))\n \n \n class AutoCSRFProtectTests(unittest.TestCase, _BaseAutoTest):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        self.browser.open(self.portal.absolute_url() + \'/login_form\')\n-        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        self.browser.getControl(\n-            name=\'__ac_password\'\n-        ).value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open(self.portal.absolute_url() + "/login_form")\n+        self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+        self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n     def open(self, path):\n-        self.browser.open(self.portal.absolute_url() + \'/\' + path)\n+        self.browser.open(self.portal.absolute_url() + "/" + path)\n \n     def test_CSRF_header(self):\n-        self.request.environ[\'HTTP_X_CSRF_TOKEN\'] = createToken()\n+        self.request.environ["HTTP_X_CSRF_TOKEN"] = createToken()\n         view = AuthenticatorView(None, self.request)\n         self.assertEqual(view.verify(), True)\n \n     def test_incorrect_CSRF_header(self):\n-        self.request.environ[\'HTTP_X_CSRF_TOKEN\'] = \'foobar\'\n+        self.request.environ["HTTP_X_CSRF_TOKEN"] = "foobar"\n         view = AuthenticatorView(None, self.request)\n         self.assertEqual(view.verify(), False)\n \n     def test_only_add_auth_when_user_logged_in(self):\n         logout()\n-        self.open(\'logout\')\n-        self.open(\'test-unprotected\')\n+        self.open("logout")\n+        self.open("test-unprotected")\n         try:\n-            self.browser.getForm(\'one\').getControl(name="_authenticator")\n-            self.assertEqual(\'anonymous should not be protected\', \'\')\n+            self.browser.getForm("one").getControl(name="_authenticator")\n+            self.assertEqual("anonymous should not be protected", "")\n         except LookupError:\n             pass\n \n \n class TestRoot(unittest.TestCase, _BaseAutoTest):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n     def open(self, path):\n-        self.browser.open(self.portal.aq_parent.absolute_url() + \'/\' + path)\n+        self.browser.open(self.portal.aq_parent.absolute_url() + "/" + path)\n \n \n class AutoRotateTests(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n \n     def test_keyrings_get_rotated_on_login(self):\n         manager = getUtility(IKeyManager)\n-        ring = manager[\'_forms\']\n+        ring = manager["_forms"]\n         keys = ring.data\n         ring.last_rotation = 0\n         transaction.commit()\n \n         # should be rotated on login\n         login(self.portal, TEST_USER_NAME)\n-        self.browser.open(self.portal.absolute_url() + \'/login_form\')\n-        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        self.browser.getControl(\n-            name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open(self.portal.absolute_url() + "/login_form")\n+        self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+        self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         self.assertNotEqual(keys, ring.data)\n         self.assertNotEqual(ring.last_rotation, 0)\n@@ -172,9 +163,9 @@ class TestAutoChecks(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_safe_write_empty_returns_false(self):\n         transform = ProtectTransform(self.portal, self.request)\n@@ -191,13 +182,13 @@ def test_safe_write_large_oobtree(self):\n         annotations = IAnnotations(self.portal)\n         # Make sure the OOBTree has a second bucket. One bucket holds 30 items.\n         for idx in range(35):\n-            key = \'{0}{1}\'.format(__name__, idx)\n-            value = \'test\'\n+            key = f"{__name__}{idx}"\n+            value = "test"\n             annotations[key] = value\n         transaction.commit()\n         # Key that is alphabetically after the others ends up in the second\n         # bucket.\n-        annotations[\'{0}{1}\'.format(__name__, \'XXX999\')] = \'abcd\'\n+        annotations["{}{}".format(__name__, "XXX999")] = "abcd"\n         safeWrite(annotations.obj.__annotations__)\n         transform = ProtectTransform(self.portal, self.request)\n         self.assertTrue(transform._check())\n@@ -207,22 +198,28 @@ class TestAutoTransform(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request.response.setHeader(\'Content-Type\', \'text/html\')\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request.response.setHeader("Content-Type", "text/html")\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_empty_no_error(self):\n         # empty pages (eg. tiles or ajax requests) should not lead to\n         # transform errors or warnings\n         transform = ProtectTransform(self.portal, self.request)\n-        result = transform.transform([\'\\n\'], \'utf-8\')\n+        result = transform.transform(["\\n"], "utf-8")\n         self.assertEqual(result, None)\n \n     def test_html(self):\n         transform = ProtectTransform(self.portal, self.request)\n-        result = transform.transform([(\n-            \'<html>\\n<body>\'\n-            \'<form action="http://nohost/myaction" method="POST">\'\n-            \'</form></body>\\n</html>\')], \'utf-8\')\n-        self.assertTrue(b\'_authenticator\' in result.serialize())\n+        result = transform.transform(\n+            [\n+                (\n+                    "<html>\\n<body>"\n+                    \'<form action="http://nohost/myaction" method="POST">\'\n+                    "</form></body>\\n</html>"\n+                )\n+            ],\n+            "utf-8",\n+        )\n+        self.assertTrue(b"_authenticator" in result.serialize())\ndiff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py\nindex a71bcf6..69cd140 100644\n--- a/plone/protect/tests/testPatches.py\n+++ b/plone/protect/tests/testPatches.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n@@ -11,29 +10,24 @@ class TestCSRF(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n-    def test_change_password_on_root_does_not_throw_other_csrf_protection(\n-            self\n-    ):\n+    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):\n         self.browser.open(\n-            \'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n-                self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME\n+            "{}/acl_users/users/manage_users?user_id={}&passwd=1".format(\n+                self.layer["app"].absolute_url(), SITE_OWNER_NAME\n             )\n         )\n-        self.browser.getControl(name=\'password\').value = SITE_OWNER_PASSWORD\n-        self.browser.getControl(name=\'confirm\').value = SITE_OWNER_PASSWORD\n-        self.browser.getForm(action=\'manage_updateUserPassword\').submit()\n-        self.assertEquals(\n+        self.browser.getControl(name="password").value = SITE_OWNER_PASSWORD\n+        self.browser.getControl(name="confirm").value = SITE_OWNER_PASSWORD\n+        self.browser.getForm(action="manage_updateUserPassword").submit()\n+        self.assertEqual(\n             self.browser.url,\n-            \'%s/acl_users/users/manage_users?\'\n-            \'manage_tabs_message=password+updated\' % (\n-                self.layer[\'app\'].absolute_url()\n-            )\n+            "%s/acl_users/users/manage_users?"\n+            "manage_tabs_message=password+updated" % (self.layer["app"].absolute_url()),\n         )\ndiff --git a/plone/protect/tests/testPostOnly.py b/plone/protect/tests/testPostOnly.py\nindex 4aeb042..7654fb1 100644\n--- a/plone/protect/tests/testPostOnly.py\n+++ b/plone/protect/tests/testPostOnly.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.postonly import check\n from unittest import makeSuite\n from unittest import TestCase\n@@ -8,13 +7,12 @@\n \n \n class PostOnlyTests(TestCase):\n-\n     def makeRequest(self, method):\n-        return HTTPRequest(None,\n-                           dict(REQUEST_METHOD=method,\n-                                SERVER_PORT="80",\n-                                SERVER_NAME="localhost"),\n-                           None)\n+        return HTTPRequest(\n+            None,\n+            dict(REQUEST_METHOD=method, SERVER_PORT="80", SERVER_NAME="localhost"),\n+            None,\n+        )\n \n     def testNonHTTPRequestAllowed(self):\n         check("not a request")\ndiff --git a/plone/protect/tests/testUtils.py b/plone/protect/tests/testUtils.py\nindex 95f6b4b..5a3bf86 100644\n--- a/plone/protect/tests/testUtils.py\n+++ b/plone/protect/tests/testUtils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from plone.protect.utils import addTokenToUrl\n from plone.protect.utils import protect\n@@ -18,13 +17,11 @@ def funcWithRequest(one, two, REQUEST=None):\n \n \n class DummyChecker:\n-\n     def __call__(self, request):\n         self.request = request\n \n \n class DecoratorTests(TestCase):\n-\n     def testFunctionMustHaveRequest(self):\n         protector = protect()\n         self.assertRaises(ValueError, protector, funcWithoutRequest)\n@@ -50,28 +47,26 @@ def testRequestPassedToChecker(self):\n \n \n class UrlTests(unittest.TestCase):\n-\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def testWithUrlFromSameDomain(self):\n-        url = addTokenToUrl(\'http://nohost/foobar\', self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar", self.layer["request"])\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithUrlFromOtherDomain(self):\n-        url = addTokenToUrl(\'http://other/foobar\', self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' not in url)\n+        url = addTokenToUrl("http://other/foobar", self.layer["request"])\n+        self.assertTrue("_authenticator=" not in url)\n \n     def testAddingWithQueryParams(self):\n-        url = addTokenToUrl(\'http://nohost/foobar?foo=bar\',\n-                            self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar?foo=bar", self.layer["request"])\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithoutRequest(self):\n-        url = addTokenToUrl(\'http://nohost/foobar\')\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar")\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithNone(self):\n-        url = addTokenToUrl(None, self.layer[\'request\'])\n+        url = addTokenToUrl(None, self.layer["request"])\n         self.assertTrue(not url)\n \n \ndiff --git a/plone/protect/tests/test_confirm_view.py b/plone/protect/tests/test_confirm_view.py\nindex eff2632..46c0881 100644\n--- a/plone/protect/tests/test_confirm_view.py\n+++ b/plone/protect/tests/test_confirm_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from zExceptions import Forbidden\n from zope.component import getMultiAdapter\n@@ -10,21 +9,15 @@ class TestAttackVector(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def test_regression(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        view = getMultiAdapter(\n-            (portal, request), name=u\'confirm-action\')\n-        request.form.update({\n-            \'original_url\': \'foobar\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        view = getMultiAdapter((portal, request), name="confirm-action")\n+        request.form.update({"original_url": "foobar"})\n         self.assertTrue(\'value="foobar"\' in view())\n \n     def test_valid_url(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        view = getMultiAdapter(\n-            (portal, request), name=u\'confirm-action\')\n-        request.form.update({\n-            \'original_url\': \'javascript:alert(1)\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        view = getMultiAdapter((portal, request), name="confirm-action")\n+        request.form.update({"original_url": "javascript:alert(1)"})\n         self.assertRaises(Forbidden, view)\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex 5c72e2a..0b1c669 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.requestmethod import buildfacade\n from Acquisition import aq_parent\n from BTrees.IFBTree import IFBTree\n@@ -19,7 +18,7 @@\n import logging\n \n \n-SAFE_WRITE_KEY = \'plone.protect.safe_oids\'\n+SAFE_WRITE_KEY = "plone.protect.safe_oids"\n BTREE_TYPES = (\n     IFBTree,\n     IIBTree,\n@@ -31,7 +30,7 @@\n     OLBTree,\n     OOBTree,\n )\n-LOGGER = logging.getLogger(\'plone.protect\')\n+LOGGER = logging.getLogger("plone.protect")\n \n _default = []\n \n@@ -39,8 +38,7 @@\n # It should probably be updated to use the decorator module.\n \n \n-class protect(object):\n-\n+class protect:\n     def __init__(self, *checkers):\n         self.checkers = checkers\n \n@@ -61,7 +59,7 @@ def __call__(self, callable):\n \n         arglen = len(args)\n         if defaults is not None:\n-            defaults = list(zip(args[arglen - len(defaults):], defaults))\n+            defaults = list(zip(args[arglen - len(defaults) :], defaults))\n             arglen -= len(defaults)\n \n         def _curried(*args, **kw):\n@@ -99,23 +97,23 @@ def addTokenToUrl(url, req=None, manager=None):\n     if req is None or not url.startswith(req.SERVER_URL):\n         # only transforms urls to same site\n         return url\n-    if getattr(req, \'environ\', _default) is _default:\n+    if getattr(req, "environ", _default) is _default:\n         # TestRequests have no environ.\n         token = createToken(manager=manager)\n-    elif \'_auth_token\' not in req.environ:\n+    elif "_auth_token" not in req.environ:\n         # Let\'s cache this value since this could be called\n         # many times for one request.\n         token = createToken(manager=manager)\n-        req.environ[\'_auth_token\'] = token\n+        req.environ["_auth_token"] = token\n     else:\n-        token = req.environ[\'_auth_token\']\n+        token = req.environ["_auth_token"]\n \n-    if \'_authenticator\' not in url:\n-        if \'?\' not in url:\n-            url += \'?\'\n+    if "_authenticator" not in url:\n+        if "?" not in url:\n+            url += "?"\n         else:\n-            url += \'&\'\n-        url += \'_authenticator=\' + token\n+            url += "&"\n+        url += "_authenticator=" + token\n     return url\n \n \n@@ -140,9 +138,9 @@ def getRoot(context):\n def safeWrite(obj, request=None):\n     if request is None:\n         request = getRequest()\n-    if request is None or getattr(request, \'environ\', _default) is _default:\n+    if request is None or getattr(request, "environ", _default) is _default:\n         # Request not found or it is a TestRequest without an environment.\n-        LOGGER.debug(\'could not mark object as a safe write\')\n+        LOGGER.debug("could not mark object as a safe write")\n         return\n     if SAFE_WRITE_KEY not in request.environ:\n         request.environ[SAFE_WRITE_KEY] = []\n@@ -156,4 +154,4 @@ def safeWrite(obj, request=None):\n                     request.environ[SAFE_WRITE_KEY].append(bucket._p_oid)\n                 bucket = bucket._next\n     except AttributeError:\n-        LOGGER.debug(\'object you attempted to mark safe does not have an oid\')\n+        LOGGER.debug("object you attempted to mark safe does not have an oid")\ndiff --git a/plone/protect/views.py b/plone/protect/views.py\nindex 7d5ce9f..9e1f56a 100644\n--- a/plone/protect/views.py\n+++ b/plone/protect/views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.interfaces import IConfirmView\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n@@ -8,10 +7,9 @@\n \n @implementer(IConfirmView)\n class ConfirmView(BrowserView):\n-\n     def __call__(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n-        original_url = getattr(self.request, \'original_url\', \'\')\n+        urltool = getToolByName(self.context, "portal_url")\n+        original_url = getattr(self.request, "original_url", "")\n         if not original_url or not urltool.isURLInPortal(original_url):\n-            raise Forbidden(\'url not in portal: {0}\'.format(original_url))\n+            raise Forbidden(f"url not in portal: {original_url}")\n         return self.index()\ndiff --git a/setup.py b/setup.py\nindex 7e0822f..c17e824 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,67 +1,61 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'5.0.0.dev0\'\n+version = "5.0.0.dev0"\n \n setup(\n-    name=\'plone.protect\',\n+    name="plone.protect",\n     version=version,\n     description="Security for browser forms",\n-    long_description=\'%s\\n%s\' % (\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read()\n+    long_description="{}\\n{}".format(\n+        open("README.rst").read(), open("CHANGES.rst").read()\n     ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 2",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'zope security CSRF\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.protect\',\n-    license=\'BSD\',\n+    keywords="zope security CSRF",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.protect",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', ],\n+    namespace_packages=[\n+        "plone",\n+    ],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\',\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'lxml[cssselect]\',\n-        \'setuptools\',\n-        \'plone.keyring >= 3.0dev\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Zope2\',\n-        \'plone.transformchain\',\n-        \'repoze.xmliter>=0.3\',\n-        \'collective.monkeypatcher\',\n-        \'z3c.zcmlhook\',\n+        "lxml[cssselect]",\n+        "setuptools",\n+        "plone.keyring",\n+        "six",\n+        "zope.component",\n+        "zope.interface",\n+        "Zope",\n+        "plone.transformchain",\n+        "repoze.xmliter",\n+        "collective.monkeypatcher",\n+        "z3c.zcmlhook",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'Products.CMFPlone\'\n-            \'zope.annotation\',\n+        "test": [\n+            "plone.app.testing",\n+            "Products.CMFPlone",\n+            "zope.annotation",\n         ],\n-    }\n+    },\n )\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/61363a0f5e71051f5263823d72310a5305f5d912

adapts -&gt; adapter

Files changed:
M plone/protect/auto.py

b'diff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 6fe425c..65081f4 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -20,7 +20,7 @@\n from urllib.parse import urlencode\n from urllib.parse import urlparse\n from zExceptions import Forbidden\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n from zope.interface import implementer\n@@ -80,6 +80,7 @@\n \n \n @implementer(ITransform)\n+@adapter(Interface, Interface)  # any context, any request\n class ProtectTransform:\n     """\n     XXX Need to be extremely careful with everything we do in here\n@@ -87,7 +88,6 @@ class ProtectTransform:\n     and no CSRF protection...\n     """\n \n-    adapts(Interface, Interface)  # any context, any request\n \n     # should be last lxml related transform\n     order = 9000\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:07:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/28c6a25aa31100e797167b76a3710248a3af4d99

merge master

Files changed:
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/subscribers.py
M plone/protect/tests/testAuthenticator.py
M pyproject.toml
M setup.py

b'diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex 53b1069..5352039 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -1,4 +1,5 @@\n from AccessControl import getSecurityManager\n+from hashlib import sha1 as sha\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.interfaces import IAuthenticatorView\n from Products.Five import BrowserView\n@@ -8,13 +9,6 @@\n from ZPublisher.HTTPRequest import HTTPRequest\n \n import hmac\n-import six\n-\n-\n-try:\n-    from hashlib import sha1 as sha\n-except ImportError:\n-    import sha\n \n \n ANONYMOUS_USER = "Anonymous User"\ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 65081f4..9cdf33b 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -13,6 +13,7 @@\n from plone.protect.utils import getRootKeyManager\n from plone.protect.utils import SAFE_WRITE_KEY\n from plone.protect.utils import safeWrite  # noqa b/w compat import\n+from plone.scale.storage import ScalesDict\n from plone.transformchain.interfaces import ITransform\n from Products.CMFCore.utils import getToolByName\n from repoze.xmliter.serializer import XMLSerializer\n@@ -23,43 +24,24 @@\n from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n \n import itertools\n import logging\n import os\n-import pkg_resources\n-import six\n import traceback\n import transaction\n import types\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except:\n-    from zope.app.component.hooks import getSite\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.blob")\n-except pkg_resources.DistributionNotFound:\n-    ATBlob = None\n-else:\n-    from plone.app.blob.content import ATBlob\n-\n-try:\n-    from plone.scale.storage import ScalesDict\n-except ImportError:\n-    ScalesDict = None\n-\n # do not hard depend here on plone.portlets (for Plone 7)\n try:\n     from plone.portlets.interfaces import IPortletAssignment\n except ImportError:\n     IPortletAssignment = None\n \n-\n logger = logging.getLogger("plone.protect")\n \n X_FRAME_OPTIONS = os.environ.get("PLONE_X_FRAME_OPTIONS", "SAMEORIGIN")\n@@ -76,7 +58,7 @@\n     "plone.portlets.contextassignments",\n     "plone.scale",\n )\n-SAFE_TYPES = tuple(t for t in [ATBlob, ScalesDict] if t is not None)\n+SAFE_TYPES = (ScalesDict,)\n \n \n @implementer(ITransform)\n@@ -273,7 +255,10 @@ def _check(self):\n                     safe_oids = self.request.environ[SAFE_WRITE_KEY]\n                 safe = True\n                 for obj in registered:\n-                    if IPortletAssignment is not None and IPortletAssignment.providedBy(obj):\n+                    if (\n+                        IPortletAssignment is not None\n+                        and IPortletAssignment.providedBy(obj)\n+                    ):\n                         continue\n                     if getattr(obj, "_p_oid", False) in safe_oids:\n                         continue\ndiff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py\nindex baf74e8..288d8ee 100644\n--- a/plone/protect/subscribers.py\n+++ b/plone/protect/subscribers.py\n@@ -6,6 +6,7 @@\n from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n \n@@ -13,12 +14,6 @@\n import time\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except ImportError:\n-    from zope.app.component.hooks import getSite\n-\n-\n LOGGER = logging.getLogger("plone.protect")\n \n _ring_rotation_schedules = (\ndiff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py\nindex 0c9ecd4..ffbb884 100644\n--- a/plone/protect/tests/testAuthenticator.py\n+++ b/plone/protect/tests/testAuthenticator.py\n@@ -1,4 +1,5 @@\n from AccessControl import getSecurityManager\n+from hashlib import sha1 as sha\n from plone.protect import createToken\n from plone.protect import CustomCheckAuthenticator\n from plone.protect import protect\n@@ -12,16 +13,9 @@\n from ZPublisher.HTTPRequest import HTTPRequest\n \n import hmac\n-import six\n import sys\n \n \n-try:\n-    from hashlib import sha1 as sha\n-except ImportError:\n-    import sha\n-\n-\n class AuthenticatorTests(KeyringTestCase):\n     def setUp(self):\n         KeyringTestCase.setUp(self)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0dad625..eed63dd 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -78,4 +78,8 @@ Zope = [\n   \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n+\'plone.app.testing\' = [\n+  \'zope.testing\',\n+  \'plone.testing\',\n+]\n python-dateutil = [\'dateutil\']\ndiff --git a/setup.py b/setup.py\nindex c17e824..edc5056 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,23 +39,23 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n+        "BTrees",\n+        "collective.monkeypatcher",\n         "lxml[cssselect]",\n-        "setuptools",\n         "plone.keyring",\n-        "six",\n-        "zope.component",\n-        "zope.interface",\n-        "Zope",\n+        "plone.scale",\n         "plone.transformchain",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.PluggableAuthService",\n         "repoze.xmliter",\n-        "collective.monkeypatcher",\n+        "setuptools",\n         "z3c.zcmlhook",\n+        "zope.annotation",\n     ],\n     extras_require={\n         "test": [\n             "plone.app.testing",\n-            "Products.CMFPlone",\n-            "zope.annotation",\n         ],\n     },\n )\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:57:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/5f5c09934bff286b42d92610f8cf8ad59eed8b7b

fix codespell, add ignores

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex a774e20..a0895a2 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,7 @@\n [meta]\n template = "default"\n commit-id = "a9dd65cc"\n+codespell_ignores = "discreet,fo,parms"\n+\n+\n+\ndiff --git a/pyproject.toml b/pyproject.toml\nindex eed63dd..c709e93 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -42,6 +42,9 @@ profile = "plone"\n [tool.black]\n target-version = ["py38"]\n \n+[tool.codespell]\n+ignore-words-list = "discreet,fo,parms"\n+\n [tool.dependencychecker]\n Zope = [\n   # Zope own provided namespaces\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T00:57:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/d675f7636165a771313cc0d51f8116bf8ce840e3

make flake8 happy

Files changed:
M plone/protect/__init__.py
M plone/protect/auto.py
M plone/protect/testing.py

b'diff --git a/plone/protect/__init__.py b/plone/protect/__init__.py\nindex a768935..ed495ac 100644\n--- a/plone/protect/__init__.py\n+++ b/plone/protect/__init__.py\n@@ -1,5 +1,5 @@\n-from plone.protect.authenticator import check as CheckAuthenticator\n-from plone.protect.authenticator import createToken\n-from plone.protect.authenticator import CustomCheckAuthenticator\n-from plone.protect.postonly import check as PostOnly\n-from plone.protect.utils import protect\n+from plone.protect.authenticator import check as CheckAuthenticator  # noqa: F401\n+from plone.protect.authenticator import createToken  # noqa: F401\n+from plone.protect.authenticator import CustomCheckAuthenticator  # noqa: F401\n+from plone.protect.postonly import check as PostOnly  # noqa: F401\n+from plone.protect.utils import protect  # noqa: F401\ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 9cdf33b..094b03f 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -70,7 +70,6 @@ class ProtectTransform:\n     and no CSRF protection...\n     """\n \n-\n     # should be last lxml related transform\n     order = 9000\n \n@@ -204,7 +203,7 @@ def check(self):\n         """\n         try:\n             return self._check()\n-        except:\n+        except Exception:\n             transaction.abort()\n             logger.error(\n                 "Error checking for CSRF. "\ndiff --git a/plone/protect/testing.py b/plone/protect/testing.py\nindex 1b63308..80d2313 100644\n--- a/plone/protect/testing.py\n+++ b/plone/protect/testing.py\n@@ -23,7 +23,7 @@ def setUpPloneSite(self, portal):\n         self.portal = portal\n \n     def tearDownZope(self, app):\n-        from plone.protect.monkey import enable_zope_csrf_checks\n+        from plone.protect.monkey import enable_zope_csrf_checks  # noqa: F401\n \n \n PROTECT_FIXTURE = ProtectedLayer()\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2023-04-12T14:53:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/58ae21073c8118aed13471011992f83018cc2054

Merge pull request #100 from plone/config-with-default-template-2ef4352a

Config with default template 2ef4352a

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5390ebc6.feature
A news/a9dd65cc.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/protect/__init__.py
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/configure.zcml
M plone/protect/confirm.pt
M plone/protect/interfaces.py
M plone/protect/monkey.py
M plone/protect/postonly.py
M plone/protect/profiles/default/metadata.xml
M plone/protect/subscribers.py
M plone/protect/testing.py
M plone/protect/tests/__init__.py
M plone/protect/tests/case.py
M plone/protect/tests/test.zcml
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M plone/protect/tests/testPostOnly.py
M plone/protect/tests/testUtils.py
M plone/protect/tests/test_confirm_view.py
M plone/protect/utils.py
M plone/protect/views.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a0895a2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,9 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9dd65cc"\n+codespell_ignores = "discreet,fo,parms"\n+\n+\n+\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 62f960e..2767e3d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,8 +11,8 @@ Changelog\n 4.1.8 (2022-12-16)\n ------------------\n \n-Bug fixes:\n \n+Bug fixes:\n \n - Testing: explicitly set response content type header to html.  [jeromeperrin] (#97)\n \ndiff --git a/news/5390ebc6.feature b/news/5390ebc6.feature\nnew file mode 100644\nindex 0000000..29cba15\n--- /dev/null\n+++ b/news/5390ebc6.feature\n@@ -0,0 +1 @@\n+Drop support for Python <3.8.\ndiff --git a/news/a9dd65cc.internal b/news/a9dd65cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a9dd65cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/protect/__init__.py b/plone/protect/__init__.py\nindex 7b621e7..ed495ac 100644\n--- a/plone/protect/__init__.py\n+++ b/plone/protect/__init__.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from plone.protect.authenticator import check as CheckAuthenticator\n-from plone.protect.authenticator import createToken\n-from plone.protect.authenticator import CustomCheckAuthenticator\n-from plone.protect.postonly import check as PostOnly\n-from plone.protect.utils import protect\n+from plone.protect.authenticator import check as CheckAuthenticator  # noqa: F401\n+from plone.protect.authenticator import createToken  # noqa: F401\n+from plone.protect.authenticator import CustomCheckAuthenticator  # noqa: F401\n+from plone.protect.postonly import check as PostOnly  # noqa: F401\n+from plone.protect.utils import protect  # noqa: F401\ndiff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py\nindex ede24bd..5352039 100644\n--- a/plone/protect/authenticator.py\n+++ b/plone/protect/authenticator.py\n@@ -1,5 +1,5 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from hashlib import sha1 as sha\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.interfaces import IAuthenticatorView\n from Products.Five import BrowserView\n@@ -9,13 +9,6 @@\n from ZPublisher.HTTPRequest import HTTPRequest\n \n import hmac\n-import six\n-\n-\n-try:\n-    from hashlib import sha1 as sha\n-except ImportError:\n-    import sha\n \n \n ANONYMOUS_USER = "Anonymous User"\n@@ -36,7 +29,7 @@ def _is_equal(val1, val2):\n     """\n     constant time comparison\n     """\n-    if not isinstance(val1, six.string_types) or not isinstance(val2, six.string_types):\n+    if not isinstance(val1, str) or not isinstance(val2, str):\n         return False\n     if len(val1) != len(val2):\n         return False\n@@ -51,23 +44,23 @@ def _getKeyring(username, manager=None):\n         manager = getUtility(IKeyManager)\n     if username == ANONYMOUS_USER:\n         try:\n-            ring = manager[u\'_anon\']\n+            ring = manager["_anon"]\n         except KeyError:\n             # no anonymous key defined.\n             # XXX should we even bother allowing to verify?\n-            ring = manager[u\'_system\']\n+            ring = manager["_system"]\n     else:\n         try:\n-            ring = manager[u"_forms"]\n+            ring = manager["_forms"]\n         except KeyError:\n-            ring = manager[u\'_system\']\n+            ring = manager["_system"]\n     return ring\n \n \n-def _verify_request(request, extra=\'\', name=\'_authenticator\', manager=None):\n+def _verify_request(request, extra="", name="_authenticator", manager=None):\n     auth = request.get(name)\n     if auth is None:\n-        auth = request.getHeader(\'X-CSRF-TOKEN\')\n+        auth = request.getHeader("X-CSRF-TOKEN")\n         if auth is None:\n             return False\n     if isinstance(auth, list):\n@@ -77,60 +70,57 @@ def _verify_request(request, extra=\'\', name=\'_authenticator\', manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n \n-    if six.PY3:\n-        user = user.encode(\'utf-8\')\n-        extra = extra.encode(\'utf-8\')\n+    user = user.encode("utf-8")\n+    extra = extra.encode("utf-8")\n \n     for key in ring:\n         if key is None:\n             continue\n-        correct = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n+        correct = hmac.new(key.encode("utf-8"), user + extra, sha).hexdigest()\n         if _is_equal(correct, auth):\n             return True\n \n     return False\n \n+\n # We had to rename because previous hotfixes patched _verify\n _verify = _verify_request\n \n \n-def createToken(extra=\'\', manager=None):\n+def createToken(extra="", manager=None):\n     user = _getUserName()\n     ring = _getKeyring(user, manager=manager)\n     secret = ring.random()\n-    if six.PY3:\n-        secret = secret.encode(\'utf-8\')\n-        user = user.encode(\'utf-8\')\n-        extra = extra.encode(\'utf-8\')\n+    secret = secret.encode("utf-8")\n+    user = user.encode("utf-8")\n+    extra = extra.encode("utf-8")\n     return hmac.new(secret, user + extra, sha).hexdigest()\n \n \n @implementer(IAuthenticatorView)\n class AuthenticatorView(BrowserView):\n-\n-    def token(self, extra=\'\'):\n+    def token(self, extra=""):\n         return createToken(extra)\n \n-    def authenticator(self, extra=\'\', name=\'_authenticator\'):\n+    def authenticator(self, extra="", name="_authenticator"):\n         auth = createToken(extra)\n-        return \'<input type="hidden" name="%s" value="%s"/>\' % (name, auth)\n+        return f\'<input type="hidden" name="{name}" value="{auth}"/>\'\n \n-    def verify(self, extra=\'\', name="_authenticator"):\n+    def verify(self, extra="", name="_authenticator"):\n         return _verify_request(self.request, extra=extra, name=name)\n \n \n-def check(request, extra=\'\', name="_authenticator", manager=None):\n+def check(request, extra="", name="_authenticator", manager=None):\n     if isinstance(request, HTTPRequest):\n-        if not _verify_request(request, extra=extra,\n-                               name=name, manager=manager):\n-            raise Forbidden(\'Form authenticator is invalid.\')\n+        if not _verify_request(request, extra=extra, name=name, manager=manager):\n+            raise Forbidden("Form authenticator is invalid.")\n \n \n-def CustomCheckAuthenticator(extra=\'\', name=\'_authenticator\'):\n+def CustomCheckAuthenticator(extra="", name="_authenticator"):\n     def _check(request):\n         return check(request, extra=extra, name=name)\n+\n     return _check\n \n \n-__all__ = ["AuthenticatorView", "check", "createToken",\n-           "CustomCheckAuthenticator"]\n+__all__ = ["AuthenticatorView", "check", "createToken", "CustomCheckAuthenticator"]\ndiff --git a/plone/protect/auto.py b/plone/protect/auto.py\nindex 1602e65..094b03f 100644\n--- a/plone/protect/auto.py\n+++ b/plone/protect/auto.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_parent\n from BTrees.OOBTree import OOBTree\n@@ -14,84 +13,69 @@\n from plone.protect.utils import getRootKeyManager\n from plone.protect.utils import SAFE_WRITE_KEY\n from plone.protect.utils import safeWrite  # noqa b/w compat import\n+from plone.scale.storage import ScalesDict\n from plone.transformchain.interfaces import ITransform\n from Products.CMFCore.utils import getToolByName\n from repoze.xmliter.serializer import XMLSerializer\n from repoze.xmliter.utils import getHTMLSerializer\n-from six.moves.urllib.parse import urlencode\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import urlencode\n+from urllib.parse import urlparse\n from zExceptions import Forbidden\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n \n import itertools\n import logging\n import os\n-import pkg_resources\n-import six\n import traceback\n import transaction\n import types\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except:\n-    from zope.app.component.hooks import getSite\n-\n-try:\n-    pkg_resources.get_distribution(\'plone.app.blob\')\n-except pkg_resources.DistributionNotFound:\n-    ATBlob = None\n-else:\n-    from plone.app.blob.content import ATBlob\n-\n-try:\n-    from plone.scale.storage import ScalesDict\n-except ImportError:\n-    ScalesDict = None\n-\n # do not hard depend here on plone.portlets (for Plone 7)\n try:\n     from plone.portlets.interfaces import IPortletAssignment\n except ImportError:\n     IPortletAssignment = None\n \n+logger = logging.getLogger("plone.protect")\n \n-logger = logging.getLogger(\'plone.protect\')\n-\n-X_FRAME_OPTIONS = os.environ.get(\'PLONE_X_FRAME_OPTIONS\', \'SAMEORIGIN\')\n-CSRF_DISABLED = os.environ.get(\'PLONE_CSRF_DISABLED\', \'false\').lower() in \\\n-    (\'true\', \'t\', \'yes\', \'y\', \'1\')\n+X_FRAME_OPTIONS = os.environ.get("PLONE_X_FRAME_OPTIONS", "SAMEORIGIN")\n+CSRF_DISABLED = os.environ.get("PLONE_CSRF_DISABLED", "false").lower() in (\n+    "true",\n+    "t",\n+    "yes",\n+    "y",\n+    "1",\n+)\n ANNOTATION_KEYS = (\n-    \'plone.contentrules.localassignments\',\n-    \'syndication_settings\',\n-    \'plone.portlets.contextassignments\',\n-    \'plone.scale\',\n+    "plone.contentrules.localassignments",\n+    "syndication_settings",\n+    "plone.portlets.contextassignments",\n+    "plone.scale",\n )\n-SAFE_TYPES = tuple(t for t in [ATBlob, ScalesDict] if t is not None)\n+SAFE_TYPES = (ScalesDict,)\n \n \n @implementer(ITransform)\n-class ProtectTransform(object):\n+@adapter(Interface, Interface)  # any context, any request\n+class ProtectTransform:\n     """\n     XXX Need to be extremely careful with everything we do in here\n     since an error here would mean the transform is skipped\n     and no CSRF protection...\n     """\n-    adapts(Interface, Interface)  # any context, any request\n \n     # should be last lxml related transform\n     order = 9000\n \n     key_manager = None\n     site = None\n-    safe_views = (\n-        \'plone_lock_operations\',\n-    )\n+    safe_views = ("plone_lock_operations",)\n \n     def __init__(self, published, request):\n         self.published = published\n@@ -109,13 +93,16 @@ def parseTree(self, result, encoding):\n \n         # hhmmm, this is kind of taken right out of plone.app.theming\n         # maybe this logic(parsing dom) should be someone central?\n-        contentType = self.request.response.getHeader(\'Content-Type\')\n-        if contentType is None or not contentType.startswith(\'text/html\'):\n+        contentType = self.request.response.getHeader("Content-Type")\n+        if contentType is None or not contentType.startswith("text/html"):\n             return None\n \n-        contentEncoding = self.request.response.getHeader(\'Content-Encoding\')\n-        if contentEncoding and contentEncoding in (\'zip\', \'deflate\',\n-                                                   \'compress\',):\n+        contentEncoding = self.request.response.getHeader("Content-Encoding")\n+        if contentEncoding and contentEncoding in (\n+            "zip",\n+            "deflate",\n+            "compress",\n+        ):\n             return None\n \n         if isinstance(result, list) and len(result) == 1:\n@@ -123,20 +110,21 @@ def parseTree(self, result, encoding):\n             if not result[0].strip():\n                 return None\n         try:\n-            result = getHTMLSerializer(\n-                result, pretty_print=False, encoding=encoding)\n+            result = getHTMLSerializer(result, pretty_print=False, encoding=encoding)\n             # We are going to force html output here always as XHTML\n             # output does odd character encodings\n             result.serializer = html.tostring\n             return result\n         except (AttributeError, TypeError, etree.ParseError):\n             # XXX handle something special?\n-            logger.warn(\'error parsing dom, failure to add csrf \'\n-                        \'token to response for url %s\' % self.request.URL)\n+            logger.warn(\n+                "error parsing dom, failure to add csrf "\n+                "token to response for url %s" % self.request.URL\n+            )\n             return None\n \n     def transformBytes(self, result, encoding):\n-        result = result.decode(encoding, \'ignore\')\n+        result = result.decode(encoding, "ignore")\n         return self.transformIterable([result], encoding)\n \n     def transformString(self, result, encoding):\n@@ -146,14 +134,10 @@ def transformUnicode(self, result, encoding):\n         return self.transformIterable([result], encoding)\n \n     def transformIterable(self, result, encoding):\n-        """Apply the transform if required\n-        """\n+        """Apply the transform if required"""\n         # before anything, do the clickjacking protection\n-        if (\n-            X_FRAME_OPTIONS and\n-            not self.request.response.getHeader(\'X-Frame-Options\')\n-        ):\n-            self.request.response.setHeader(\'X-Frame-Options\', X_FRAME_OPTIONS)\n+        if X_FRAME_OPTIONS and not self.request.response.getHeader("X-Frame-Options"):\n+            self.request.response.setHeader("X-Frame-Options", X_FRAME_OPTIONS)\n \n         if CSRF_DISABLED:\n             return\n@@ -164,7 +148,7 @@ def transformIterable(self, result, encoding):\n \n         # if on confirm view, do not check, just abort and\n         # immediately transform without csrf checking again\n-        if IConfirmView.providedBy(self.request.get(\'PUBLISHED\')):\n+        if IConfirmView.providedBy(self.request.get("PUBLISHED")):\n             # abort it, show the confirmation...\n             transaction.abort()\n             return self.transform(result, encoding)\n@@ -176,7 +160,7 @@ def transformIterable(self, result, encoding):\n             return\n \n         try:\n-            tool = getToolByName(context, \'portal_url\', None)\n+            tool = getToolByName(context, "portal_url", None)\n             if tool:\n                 self.site = tool.getPortalObject()\n         except TypeError:\n@@ -201,7 +185,7 @@ def transformIterable(self, result, encoding):\n         return self.transform(result, encoding)\n \n     def getContext(self):\n-        published = self.request.get(\'PUBLISHED\')\n+        published = self.request.get("PUBLISHED")\n         if isinstance(published, types.MethodType):\n             return published.__self__\n         return aq_parent(published)\n@@ -219,28 +203,32 @@ def check(self):\n         """\n         try:\n             return self._check()\n-        except:\n+        except Exception:\n             transaction.abort()\n-            logger.error("Error checking for CSRF. "\n-                         "Transaction will be aborted since the request "\n-                         "is now unsafe:\\n%s" % (\n-                             traceback.format_exc()))\n+            logger.error(\n+                "Error checking for CSRF. "\n+                "Transaction will be aborted since the request "\n+                "is now unsafe:\\n%s" % (traceback.format_exc())\n+            )\n             raise\n \n     def _registered_objects(self):\n         app = self.request.PARENTS[-1]\n-        return list(itertools.chain.from_iterable([\n-            conn._registered_objects\n-            # skip the \'temporary\' connection since it stores session objects\n-            # which get written all the time\n-            for name, conn in app._p_jar.connections.items()\n-            if name != \'temporary\'\n-        ]))\n+        return list(\n+            itertools.chain.from_iterable(\n+                [\n+                    conn._registered_objects\n+                    # skip the \'temporary\' connection since it stores session objects\n+                    # which get written all the time\n+                    for name, conn in app._p_jar.connections.items()\n+                    if name != "temporary"\n+                ]\n+            )\n+        )\n \n     def _check(self):\n         registered = self._registered_objects()\n-        if len(registered) > 0 and \\\n-                not IDisableCSRFProtection.providedBy(self.request):\n+        if len(registered) > 0 and not IDisableCSRFProtection.providedBy(self.request):\n             if self.getViewName() in self.safe_views:\n                 return True\n             # Okay, we\'re writing here, we need to protect!\n@@ -248,8 +236,10 @@ def _check(self):\n                 check(self.request, manager=self.key_manager)\n                 return True\n             except ComponentLookupError:\n-                logger.info(\'Can not find key manager for CSRF protection. \'\n-                            \'This should not happen.\')\n+                logger.info(\n+                    "Can not find key manager for CSRF protection. "\n+                    "This should not happen."\n+                )\n                 raise\n             except Forbidden:\n                 # XXX\n@@ -260,13 +250,16 @@ def _check(self):\n                 # need to be portlet assignments. XXX needs to be fixed\n                 # somehow...\n                 safe_oids = []\n-                if SAFE_WRITE_KEY in getattr(self.request, \'environ\', {}):\n+                if SAFE_WRITE_KEY in getattr(self.request, "environ", {}):\n                     safe_oids = self.request.environ[SAFE_WRITE_KEY]\n                 safe = True\n                 for obj in registered:\n-                    if IPortletAssignment is not None and IPortletAssignment.providedBy(obj):\n+                    if (\n+                        IPortletAssignment is not None\n+                        and IPortletAssignment.providedBy(obj)\n+                    ):\n                         continue\n-                    if getattr(obj, \'_p_oid\', False) in safe_oids:\n+                    if getattr(obj, "_p_oid", False) in safe_oids:\n                         continue\n                     if SAFE_TYPES and isinstance(obj, SAFE_TYPES):\n                         continue\n@@ -284,14 +277,13 @@ def _check(self):\n                     safe = False\n                     break\n                 if not safe:\n-                    if self.request.REQUEST_METHOD != \'GET\':\n+                    if self.request.REQUEST_METHOD != "GET":\n                         # only try to be "smart" with GET requests\n                         raise\n                     logger.info(\n-                        \'{0:s}\\naborting transaction due to no CSRF \'\n-                        \'protection on url {1:s}\'.format(\n-                            \'\\n\'.join(traceback.format_stack()),\n-                            self.request.URL\n+                        "{:s}\\naborting transaction due to no CSRF "\n+                        "protection on url {:s}".format(\n+                            "\\n".join(traceback.format_stack()), self.request.URL\n                         )\n                     )\n                     transaction.abort()\n@@ -305,15 +297,15 @@ def _check(self):\n                     #   write on read, without a POST request and we don\'t\n                     #   know what to do with it gracefully.\n                     resp = self.request.response\n-                    ct = resp.getHeader(\'Content-Type\', \'\') or \'\'\n-                    if self.site and (\n-                            resp.status in (301, 302) or \'text/html\' in ct):\n+                    ct = resp.getHeader("Content-Type", "") or ""\n+                    if self.site and (resp.status in (301, 302) or "text/html" in ct):\n                         data = self.request.form.copy()\n-                        data[\'original_url\'] = self.request.URL\n-                        resp.redirect(\'%s/@@confirm-action?%s\' % (\n-                            self.site.absolute_url(),\n-                            urlencode(data)\n-                        ))\n+                        data["original_url"] = self.request.URL\n+                        resp.redirect(\n+                            "{}/@@confirm-action?{}".format(\n+                                self.site.absolute_url(), urlencode(data)\n+                            )\n+                        )\n                         return False\n         return True\n \n@@ -328,7 +320,6 @@ def isActionInSite(self, action, current_url):\n         return True\n \n     def transform(self, result, encoding):\n-\n         result = self.parseTree(result, encoding)\n         if result is None:\n             return None\n@@ -339,12 +330,11 @@ def transform(self, result, encoding):\n         except ComponentLookupError:\n             if self.site is not None:\n                 logger.warn(\n-                    \'Keyring not found on site. This should not happen\',\n-                    exc_info=True\n+                    "Keyring not found on site. This should not happen", exc_info=True\n                 )\n             return result\n \n-        for form in root.cssselect(\'form\'):\n+        for form in root.cssselect("form"):\n             # XXX should we only do POST? If we\'re logged in and\n             # it\'s an internal form, I\'m inclined to say no...\n             # method = form.attrib.get(\'method\', \'GET\').lower()\n@@ -353,36 +343,38 @@ def transform(self, result, encoding):\n \n             # some get forms we definitely do not want to protect.\n             # for now, we know search we do not want to protect\n-            method = form.attrib.get(\'method\', \'GET\').lower()\n-            action = form.attrib.get(\'action\', \'\').strip()\n-            if method == \'get\' and \'@@search\' in action:\n+            method = form.attrib.get("method", "GET").lower()\n+            action = form.attrib.get("action", "").strip()\n+            if method == "get" and "@@search" in action:\n                 continue\n-            action = form.attrib.get(\'action\', \'\').strip()\n+            action = form.attrib.get("action", "").strip()\n             if not self.isActionInSite(action, url):\n                 continue\n             # check if the token is already on the form..\n             hidden = form.cssselect(\'[name="_authenticator"]\')\n             if len(hidden) == 0:\n                 hidden = etree.Element("input")\n-                hidden.attrib[\'name\'] = \'_authenticator\'\n-                hidden.attrib[\'type\'] = \'hidden\'\n-                hidden.attrib[\'value\'] = token\n+                hidden.attrib["name"] = "_authenticator"\n+                hidden.attrib["type"] = "hidden"\n+                hidden.attrib["value"] = token\n                 form.append(hidden)\n \n-        if self.site is not None and not root.cssselect(\'#protect-script\'):\n+        if self.site is not None and not root.cssselect("#protect-script"):\n             # Alternative: add this in the resource registry.\n             site_url = self.site.absolute_url()\n-            elements = root.cssselect(\'body\')\n+            elements = root.cssselect("body")\n             if len(elements):\n                 body = elements[0]\n                 protect_script = etree.Element("script")\n-                protect_script.attrib.update({\n-                    \'type\': "application/javascript",\n-                    \'src\': "%s/++resource++protect.js" % site_url,\n-                    \'data-site-url\': site_url,\n-                    \'data-token\': token,\n-                    \'id\': \'protect-script\'\n-                })\n+                protect_script.attrib.update(\n+                    {\n+                        "type": "application/javascript",\n+                        "src": "%s/++resource++protect.js" % site_url,\n+                        "data-site-url": site_url,\n+                        "data-token": token,\n+                        "id": "protect-script",\n+                    }\n+                )\n                 body.append(protect_script)\n \n         return result\ndiff --git a/plone/protect/configure.zcml b/plone/protect/configure.zcml\nindex be8dad9..6a9d097 100644\n--- a/plone/protect/configure.zcml\n+++ b/plone/protect/configure.zcml\n@@ -1,69 +1,73 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:monkey="http://namespaces.plone.org/monkey"\n-    i18n_domain="plone">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n \n-    <include package="AccessControl"\n-             zcml:condition="installed AccessControl.rolemanager" />\n-    <include package="plone.keyring" />\n-    <include package="plone.transformchain" />\n+  <include\n+      package="AccessControl"\n+      zcml:condition="installed AccessControl.rolemanager"\n+      />\n+  <include package="plone.keyring" />\n+  <include package="plone.transformchain" />\n \n-    <browser:page\n-       for="*"\n-       name="authenticator"\n-       class=".authenticator.AuthenticatorView"\n-       permission="zope.Public"\n-       allowed_interface=".interfaces.IAuthenticatorView"\n-       />\n+  <browser:page\n+      name="authenticator"\n+      for="*"\n+      class=".authenticator.AuthenticatorView"\n+      allowed_interface=".interfaces.IAuthenticatorView"\n+      permission="zope.Public"\n+      />\n \n-    <genericsetup:registerProfile\n-        zcml:condition="installed Products.CMFCore"\n-        name="default"\n-        directory="profiles/default"\n-        title="plone.protect configuration"\n-        description="Local configuration for plone.protect"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="plone.protect configuration"\n+      description="Local configuration for plone.protect"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      directory="profiles/default"\n+      zcml:condition="installed Products.CMFCore"\n+      />\n \n-    <adapter\n-        name="plone.protect.autocsrf"\n-        factory=".auto.ProtectTransform"\n-        />\n+  <adapter\n+      factory=".auto.ProtectTransform"\n+      name="plone.protect.autocsrf"\n+      />\n \n-    <browser:resource\n-        name="protect.js"\n-        file="protect.js"\n-        />\n+  <browser:resource\n+      name="protect.js"\n+      file="protect.js"\n+      />\n \n-    <browser:page\n-        name="confirm-action"\n-        for="*"\n-        class=".views.ConfirmView"\n-        template="confirm.pt"\n-        permission="zope2.View"\n-    />\n+  <browser:page\n+      name="confirm-action"\n+      for="*"\n+      class=".views.ConfirmView"\n+      template="confirm.pt"\n+      permission="zope2.View"\n+      />\n \n-    <subscriber handler=".subscribers.onUserLogsIn" />\n+  <subscriber handler=".subscribers.onUserLogsIn" />\n \n-    <include package="collective.monkeypatcher" />\n+  <include package="collective.monkeypatcher" />\n \n-    <monkey:patch\n-        zcml:condition="installed OFS.Lockable"\n-        description="Special handling for write on read Zope2 locking issues"\n-        class="OFS.Lockable.LockableItem"\n-        original="wl_lockmapping"\n-        replacement=".monkey.wl_lockmapping"\n-        preserveOriginal="True"\n-        />\n+  <monkey:patch\n+      original="wl_lockmapping"\n+      replacement=".monkey.wl_lockmapping"\n+      class="OFS.Lockable.LockableItem"\n+      description="Special handling for write on read Zope2 locking issues"\n+      preserveOriginal="True"\n+      zcml:condition="installed OFS.Lockable"\n+      />\n \n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n \n-    <zcml:customAction\n-        handler=".monkey.disable_zope_csrf_checks"\n-        />\n+  <zcml:customAction handler=".monkey.disable_zope_csrf_checks" />\n \n </configure>\ndiff --git a/plone/protect/confirm.pt b/plone/protect/confirm.pt\nindex 6a87b94..20d339e 100644\n--- a/plone/protect/confirm.pt\n+++ b/plone/protect/confirm.pt\n@@ -1,50 +1,73 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<metal:block fill-slot="top_slot"\n-             tal:define="dummy python:request.set(\'disable_border\', 1)" />\n+  <metal:block fill-slot="top_slot"\n+               tal:define="\n+                 dummy python:request.set(\'disable_border\', 1);\n+               "\n+  />\n \n-<body>\n-  <metal:title fill-slot="content-title">\n-     <h1 class="documentFirstHeading" i18n:translate="">\n+  <body>\n+    <metal:title fill-slot="content-title">\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >\n          Confirming User Action.\n-     </h1>\n-  </metal:title>\n+      </h1>\n+    </metal:title>\n \n-  <metal:description fill-slot="content-description">\n-     <div class="documentDescription" i18n:translate="">\n+    <metal:description fill-slot="content-description">\n+      <div class="documentDescription"\n+           i18n:translate=""\n+      >\n          Confirm that you\'d like to perform this action.\n-     </div>\n-  </metal:description>\n+      </div>\n+    </metal:description>\n \n-  <metal:content-core fill-slot="content-core">\n-    <metal:content-core define-macro="content-core">\n-      <p class="discreet" i18n:translate="">\n+    <metal:content-core fill-slot="content-core">\n+      <metal:content-core define-macro="content-core">\n+        <p class="discreet"\n+           i18n:translate=""\n+        >\n         Careful, it\'s possible someone is executing an exploit against you.\n         Verify you just performed an action on this site and that you were\n         not referred here by a different website or email.\n-      </p>\n-      <form tal:attributes="action request/original_url;" method="GET">\n-        <tal:values tal:repeat="key python: request.form.keys()">\n-          <input type="hidden" tal:attributes="name key; value python: request.form[key]" />\n-        </tal:values>\n-        <dl>\n-          <dt i18n:translate="">Original URL</dt>\n-          <dd tal:content="request/original_url" />\n-        </dl>\n-        <div class="formControls">\n-          <input type="submit" value="Confirm action" i18n:attributes="value"\n-                 name="form.button.confirm" class="standalone" />\n-        </div>\n-      </form>\n+        </p>\n+        <form method="GET"\n+              tal:attributes="\n+                action request/original_url;\n+              "\n+        >\n+          <tal:values tal:repeat="key python: request.form.keys()">\n+            <input type="hidden"\n+                   tal:attributes="\n+                     name key;\n+                     value python: request.form[key];\n+                   "\n+            />\n+          </tal:values>\n+          <dl>\n+            <dt i18n:translate="">Original URL</dt>\n+            <dd tal:content="request/original_url"></dd>\n+          </dl>\n+          <div class="formControls">\n+            <input class="standalone"\n+                   name="form.button.confirm"\n+                   type="submit"\n+                   value="Confirm action"\n+                   i18n:attributes="value"\n+            />\n+          </div>\n+        </form>\n+      </metal:content-core>\n     </metal:content-core>\n-  </metal:content-core>\n \n-</body>\n+  </body>\n </html>\n-\ndiff --git a/plone/protect/interfaces.py b/plone/protect/interfaces.py\nindex fdfebed..36ebe28 100644\n--- a/plone/protect/interfaces.py\n+++ b/plone/protect/interfaces.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IAuthenticatorView(Interface):\n-\n     def token():\n         """return token value"""\n \ndiff --git a/plone/protect/monkey.py b/plone/protect/monkey.py\nindex af79302..959508a 100644\n--- a/plone/protect/monkey.py\n+++ b/plone/protect/monkey.py\n@@ -1,11 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.auto import safeWrite\n from zope.testing.cleanup import addCleanUp\n+\n import inspect\n \n \n def wl_lockmapping(self, killinvalids=0, create=0):\n-    has_write_locks = hasattr(self, \'_dav_writelocks\')\n+    has_write_locks = hasattr(self, "_dav_writelocks")\n     locks = self._old_wl_lockmapping(killinvalids=killinvalids, create=create)\n     try:\n         safeWrite(locks)\n@@ -22,10 +22,10 @@ def pluggableauth__getCSRFToken(request):\n     """\n     let plone.protect do it\'s job\n     """\n-    return \'\'\n+    return ""\n \n \n-def pluggableauth__checkCSRFToken(request, token=\'csrf_token\', raises=True):\n+def pluggableauth__checkCSRFToken(request, token="csrf_token", raises=True):\n     """\n     let plone.protect do it\'s job\n     """\n@@ -41,28 +41,33 @@ def marmoset_patch(func, replacement):\n \n def disable_zope_csrf_checks():\n     from Products.PluggableAuthService import utils as pluggable_utils\n-    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+\n+    if hasattr(pluggable_utils, "checkCSRFToken"):\n         marmoset_patch(\n             pluggable_utils.checkCSRFToken,\n             pluggableauth__checkCSRFToken,\n         )\n-    if hasattr(pluggable_utils, \'getCSRFToken\'):\n-        marmoset_patch(\n-            pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n+    if hasattr(pluggable_utils, "getCSRFToken"):\n+        marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)\n \n \n def enable_zope_csrf_checks():\n     from Products.PluggableAuthService import utils as pluggable_utils\n-    if hasattr(pluggable_utils, \'checkCSRFToken\'):\n+\n+    if hasattr(pluggable_utils, "checkCSRFToken"):\n         try:\n-            pluggable_utils.checkCSRFToken.__code__ = \\\n+            pluggable_utils.checkCSRFToken.__code__ = (\n                 pluggable_utils.checkCSRFToken._old_code\n+            )\n         except AttributeError:\n             pass\n-    if hasattr(pluggable_utils, \'getCSRFToken\'):\n+    if hasattr(pluggable_utils, "getCSRFToken"):\n         try:\n-            pluggable_utils.getCSRFToken.__code__ = \\\n+            pluggable_utils.getCSRFToken.__code__ = (\n                 pluggable_utils.getCSRFToken._old_code\n+            )\n         except AttributeError:\n             pass\n+\n+\n addCleanUp(enable_zope_csrf_checks)\ndiff --git a/plone/protect/postonly.py b/plone/protect/postonly.py\nindex aeb0535..f0217e0 100644\n--- a/plone/protect/postonly.py\n+++ b/plone/protect/postonly.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from zExceptions import Forbidden\n from ZPublisher.HTTPRequest import HTTPRequest\n \n \n def check(request):\n     if isinstance(request, HTTPRequest):\n-        if request.get(\'REQUEST_METHOD\', \'GET\').upper() != \'POST\':\n-            raise Forbidden(\'Request must be POST\')\n+        if request.get("REQUEST_METHOD", "GET").upper() != "POST":\n+            raise Forbidden("Request must be POST")\ndiff --git a/plone/protect/profiles/default/metadata.xml b/plone/protect/profiles/default/metadata.xml\nindex 6b36b5c..054bd4a 100644\n--- a/plone/protect/profiles/default/metadata.xml\n+++ b/plone/protect/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1.1</version>\n   <dependencies>\ndiff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py\nindex a99ac23..288d8ee 100644\n--- a/plone/protect/subscribers.py\n+++ b/plone/protect/subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.protect.utils import getRoot\n@@ -7,6 +6,7 @@\n from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n \n@@ -14,18 +14,12 @@\n import time\n \n \n-try:\n-    from zope.component.hooks import getSite\n-except ImportError:\n-    from zope.app.component.hooks import getSite\n-\n-\n-LOGGER = logging.getLogger(\'plone.protect\')\n+LOGGER = logging.getLogger("plone.protect")\n \n _ring_rotation_schedules = (\n-    (\'_system\', 60 * 60 * 24 * 7),  # weekly\n-    (\'_forms\', 60 * 60 * 24),  # daily\n-    (\'_anon\', 60 * 60 * 24),  # daily\n+    ("_system", 60 * 60 * 24 * 7),  # weekly\n+    ("_forms", 60 * 60 * 24),  # daily\n+    ("_anon", 60 * 60 * 24),  # daily\n )\n \n \n@@ -35,7 +29,7 @@ def _rotate(manager):\n         try:\n             ring = manager[ring_name]\n             if (ring.last_rotation + check_period) < current_time:\n-                LOGGER.info(\'auto rotating keyring %s\' % ring_name)\n+                LOGGER.info("auto rotating keyring %s" % ring_name)\n                 ring.rotate()\n         except KeyError:\n             continue\n@@ -63,5 +57,5 @@ def onUserLogsIn(event):\n         if req:\n             url = req.URL\n         else:\n-            url = \'\'\n-        LOGGER.warn(\'cannot find key manager for url %s\' % url)\n+            url = ""\n+        LOGGER.warn("cannot find key manager for url %s" % url)\ndiff --git a/plone/protect/testing.py b/plone/protect/testing.py\nindex 126d004..80d2313 100644\n--- a/plone/protect/testing.py\n+++ b/plone/protect/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n@@ -14,39 +13,39 @@ class ProtectedLayer(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # load ZCML\n         import plone.protect\n-        xmlconfig.file(\'configure.zcml\', plone.protect,\n-                       context=configurationContext)\n-        xmlconfig.file(\'test.zcml\', plone.protect.tests,\n-                       context=configurationContext)\n+\n+        xmlconfig.file("configure.zcml", plone.protect, context=configurationContext)\n+        xmlconfig.file("test.zcml", plone.protect.tests, context=configurationContext)\n \n     def setUpPloneSite(self, portal):\n         # install into the Plone site\n-        applyProfile(portal, \'plone.protect:default\')\n+        applyProfile(portal, "plone.protect:default")\n         self.portal = portal\n \n     def tearDownZope(self, app):\n-        from plone.protect.monkey import enable_zope_csrf_checks\n+        from plone.protect.monkey import enable_zope_csrf_checks  # noqa: F401\n+\n \n PROTECT_FIXTURE = ProtectedLayer()\n PROTECT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PROTECT_FIXTURE,), name="PROTECT_FIXTURE:Functional")\n+    bases=(PROTECT_FIXTURE,), name="PROTECT_FIXTURE:Functional"\n+)\n \n \n class TestUnprotectedView(BrowserView):\n-\n     def __call__(self):\n         # on posts, write something to the db\n-        if \'submit1\' in self.request.form or \'submit2\' in self.request.form:\n-            self.context.foo = \'bar\'\n+        if "submit1" in self.request.form or "submit2" in self.request.form:\n+            self.context.foo = "bar"\n             self.context._p_changed = True\n-        self.request.response.setHeader(\'Content-Type\', \'text/html\')\n+        self.request.response.setHeader("Content-Type", "text/html")\n         return """\n <html>\n <body>\n <form id="one" method="POST">\n     <input type="submit" name="submit1" value="submit1" />\n </form>\n-<form id="two" action="%s" METHOD="post">\n+<form id="two" action="{}" METHOD="post">\n     <input type="submit" name="submit2" value="submit2" />\n </form>\n <form id="three" method="GET">\n@@ -65,14 +64,13 @@ def __call__(self):\n     <input type="submit" name="submit7" value="submit7" />\n </form>\n </body>\n-</html>""" % (\n+</html>""".format(\n             self.request.URL,\n         )\n \n \n class TestSafeToWriteObject(BrowserView):\n-\n     def __call__(self):\n-        self.context.foo = \'bar\'\n+        self.context.foo = "bar"\n         safeWrite(self)\n-        return \'done\'\n+        return "done"\ndiff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/protect/tests/__init__.py\n+++ b/plone/protect/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/protect/tests/case.py b/plone/protect/tests/case.py\nindex ed1bbd0..60a09b6 100644\n--- a/plone/protect/tests/case.py\n+++ b/plone/protect/tests/case.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import noSecurityManager\n from AccessControl.User import User\n@@ -9,31 +8,28 @@\n \n \n class MockRequest(dict):\n-\n     def __init__(self, URL=None, *args, **kwargs):\n-        super(MockRequest, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n         self.environ = {}\n         self.URL = URL\n \n     def setReferer(self, url):\n-        self.environ[\'HTTP_REFERER\'] = url\n+        self.environ["HTTP_REFERER"] = url\n \n     def getHeader(self, name):\n         return None\n \n \n class KeyringTestCase(TestCase):\n-\n     key_size = 1\n \n     def setUp(self):\n         self.sm = getGlobalSiteManager()\n         self.manager = KeyManager(self.key_size)\n-        self.sm.registerUtility(self.manager, provided=IKeyManager,\n-                                event=False)\n+        self.sm.registerUtility(self.manager, provided=IKeyManager, event=False)\n         # Tests modify the user object so we better make sure it is *our*\n         # user object and not the built-in Anonymous User.\n-        newSecurityManager(None, User(\'dummy\', \'secret\', (), ()))\n+        newSecurityManager(None, User("dummy", "secret", (), ()))\n \n     def tearDown(self):\n         self.sm.unregisterUtility(self.manager, provided=IKeyManager)\ndiff --git a/plone/protect/tests/test.zcml b/plone/protect/tests/test.zcml\nindex 14db394..10bb5e2 100644\n--- a/plone/protect/tests/test.zcml\n+++ b/plone/protect/tests/test.zcml\n@@ -1,21 +1,22 @@\n <configure\n-  xmlns="http://namespaces.zope.org/zope"\n-  xmlns:i18n="http://namespaces.zope.org/i18n"\n-  xmlns:browser="http://namespaces.zope.org/browser"\n-  i18n_domain="collective.protected">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="collective.protected"\n+    >\n \n   <browser:page\n-    for="*"\n-    name="test-unprotected"\n-    class="plone.protect.testing.TestUnprotectedView"\n-    permission="zope2.View"\n-  />\n+      name="test-unprotected"\n+      for="*"\n+      class="plone.protect.testing.TestUnprotectedView"\n+      permission="zope2.View"\n+      />\n \n   <browser:page\n-    for="*"\n-    name="test-safetowrite"\n-    class="plone.protect.testing.TestSafeToWriteObject"\n-    permission="zope2.View"\n-  />\n+      name="test-safetowrite"\n+      for="*"\n+      class="plone.protect.testing.TestSafeToWriteObject"\n+      permission="zope2.View"\n+      />\n \n </configure>\ndiff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py\nindex d59e9f1..ffbb884 100644\n--- a/plone/protect/tests/testAuthenticator.py\n+++ b/plone/protect/tests/testAuthenticator.py\n@@ -1,5 +1,5 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from hashlib import sha1 as sha\n from plone.protect import createToken\n from plone.protect import CustomCheckAuthenticator\n from plone.protect import protect\n@@ -15,16 +15,8 @@\n import hmac\n import sys\n \n-import six\n-\n-try:\n-    from hashlib import sha1 as sha\n-except ImportError:\n-    import sha\n-\n \n class AuthenticatorTests(KeyringTestCase):\n-\n     def setUp(self):\n         KeyringTestCase.setUp(self)\n         self.view = AuthenticatorView(None, None)\n@@ -34,7 +26,7 @@ def setUsername(self, name):\n         user.name = name\n \n     def setSecret(self, secret):\n-        self.manager[\'_forms\'].data[0] = secret\n+        self.manager["_forms"].data[0] = secret\n \n     def testIsHtmlInput(self):\n         auth = self.view.authenticator()\n@@ -55,39 +47,37 @@ def testDiffersPerSecret(self):\n \n     def testDiffersPerExtra(self):\n         one = self.view.authenticator()\n-        two = self.view.authenticator(\'some-extra-value\')\n+        two = self.view.authenticator("some-extra-value")\n         self.assertNotEqual(one, two)\n \n \n class VerifyTests(KeyringTestCase):\n-\n     key_size = 2\n \n     def setUp(self):\n         self.request = MockRequest()\n-        super(VerifyTests, self).setUp()\n+        super().setUp()\n         self.view = AuthenticatorView(None, self.request)\n \n-    def setAuthenticator(self, key, extra=\'\', name="_authenticator"):\n+    def setAuthenticator(self, key, extra="", name="_authenticator"):\n         user = getSecurityManager().getUser().getUserName()\n-        if six.PY3:\n-            user = user.encode(\'utf-8\')\n-            extra = extra.encode(\'utf-8\')\n-        auth = hmac.new(key.encode(\'utf-8\'), user + extra, sha).hexdigest()\n+        user = user.encode("utf-8")\n+        extra = extra.encode("utf-8")\n+        auth = hmac.new(key.encode("utf-8"), user + extra, sha).hexdigest()\n         self.request[name] = auth\n \n     def testCorrectAuthenticator(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n+        self.manager["_forms"].data[0] = "secret"\n         self.setAuthenticator("secret")\n         self.assertEqual(self.view.verify(), True)\n \n     def testCustomAuthenticatorKeyName(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n+        self.manager["_forms"].data[0] = "secret"\n         self.setAuthenticator("secret", name="_my_authenticator")\n         self.assertEqual(self.view.verify(name="_my_authenticator"), True)\n \n     def testOlderSecretVerifies(self):\n-        self.manager[\'_forms\'].data[1] = "backup"\n+        self.manager["_forms"].data[1] = "backup"\n         self.setAuthenticator("backup")\n         self.assertEqual(self.view.verify(), True)\n \n@@ -103,25 +93,25 @@ def testAuthenticatorWrongType(self):\n         self.assertEqual(self.view.verify(), False)\n \n     def testExtraArgumentCanBeVerified(self):\n-        self.manager[\'_forms\'].data[0] = "secret"\n-        self.setAuthenticator("secret", \'some-extra-value\')\n-        self.assertEqual(self.view.verify(\'some-extra-value\'), True)\n+        self.manager["_forms"].data[0] = "secret"\n+        self.setAuthenticator("secret", "some-extra-value")\n+        self.assertEqual(self.view.verify("some-extra-value"), True)\n \n \n class DecoratorTests(KeyringTestCase):\n-\n     def setUp(self):\n         self.request = HTTPRequest(sys.stdin, dict(SERVER_URL="dummy"), None)\n         KeyringTestCase.setUp(self)\n \n         def func(REQUEST=None):\n             return 1\n+\n         self.func = protect(check)(func)\n \n     def testNoRequestParameter(self):\n-\n         def func():\n             pass\n+\n         self.assertRaises(ValueError, protect(check), func)\n \n     def testIgnoreBadRequestType(self):\n@@ -132,21 +122,25 @@ def testBadAuthenticator(self):\n         self.assertRaises(Forbidden, self.func, self.request)\n \n     def testAuthenticatedCustom(self):\n-        self.request[\'_authenticator\'] = createToken(\'some-value\')\n+        self.request["_authenticator"] = createToken("some-value")\n \n         def func(REQUEST=self.request):\n             return True\n-        self.assertEquals(\n-            protect(CustomCheckAuthenticator(\'some-value\'))(func)(), True)\n+\n+        self.assertEqual(protect(CustomCheckAuthenticator("some-value"))(func)(), True)\n \n     def testAuthenticatedCustomName(self):\n-        self.request[\'_my_authenticator\'] = createToken(\'some-value\')\n+        self.request["_my_authenticator"] = createToken("some-value")\n \n         def func(REQUEST=self.request):\n             return True\n-        self.assertEquals(\n-            protect(CustomCheckAuthenticator(\n-                \'some-value\', \'_my_authenticator\'))(func)(), True)\n+\n+        self.assertEqual(\n+            protect(CustomCheckAuthenticator("some-value", "_my_authenticator"))(\n+                func\n+            )(),\n+            True,\n+        )\n \n \n def test_suite():\ndiff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex 70c75c1..017e69a 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import SITE_OWNER_NAME\n@@ -20,149 +19,141 @@\n import unittest\n \n \n-class _BaseAutoTest(object):\n+class _BaseAutoTest:\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def test_adds_csrf_protection_input(self):\n-        self.open(\'test-unprotected\')\n+        self.open("test-unprotected")\n         self.assertTrue(\'name="_authenticator"\' in self.browser.contents)\n \n     def test_adds_csrf_protection_for_scheme_relative_same_domain(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'five\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("five")\n         form.getControl(name="_authenticator")\n \n     def test_adds_csrf_protection_for_relative_path(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'seven\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("seven")\n         form.getControl(name="_authenticator")\n \n     def test_adds_csrf_protection_for_no_action(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'one\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("one")\n         form.getControl(name="_authenticator")\n \n     def test_does_not_add_csrf_protection_to_different_domain(self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'six\')\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("six")\n         try:\n             form.getControl(name="_authenticator")\n-            self.assertEqual(\'should not add authenticator\', \'\')\n+            self.assertEqual("should not add authenticator", "")\n         except Exception:\n             pass\n \n-    def test_does_not_add_csrf_protection_to_different_domain_scheme_relative(\n-            self):\n-        self.open(\'test-unprotected\')\n-        form = self.browser.getForm(\'four\')\n+    def test_does_not_add_csrf_protection_to_different_domain_scheme_relative(self):\n+        self.open("test-unprotected")\n+        form = self.browser.getForm("four")\n         try:\n             form.getControl(name="_authenticator")\n-            self.assertEqual(\'should not add authenticator\', \'\')\n+            self.assertEqual("should not add authenticator", "")\n         except Exception:\n             pass\n \n     def test_authentication_works_automatically(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit1\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit1").click()\n         self.assertEqual(self.portal.foo, "bar")\n \n     def test_authentication_works_for_other_form(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit2\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit2").click()\n         self.assertEqual(self.portal.foo, "bar")\n \n     def test_works_for_get_form_yet(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getControl(\'submit3\').click()\n+        self.open("test-unprotected")\n+        self.browser.getControl("submit3").click()\n \n     def test_forbidden_raised_if_auth_failure(self):\n-        self.open(\'test-unprotected\')\n-        self.browser.getForm(\'one\').\\\n-            getControl(name="_authenticator").value = \'foobar\'\n+        self.open("test-unprotected")\n+        self.browser.getForm("one").getControl(name="_authenticator").value = "foobar"\n         # XXX: plone.transformchain don\'t reraise exceptions\n         # try:\n         #    self.browser.getControl(\'submit1\').click()\n         # except Exception as ex:\n         #     self.assertEquals(ex.getcode(), 403)\n-        self.browser.getControl(\'submit1\').click()\n+        self.browser.getControl("submit1").click()\n         self.assertFalse(hasattr(self.portal, "foo"))\n \n \n class AutoCSRFProtectTests(unittest.TestCase, _BaseAutoTest):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        self.browser.open(self.portal.absolute_url() + \'/login_form\')\n-        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        self.browser.getControl(\n-            name=\'__ac_password\'\n-        ).value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open(self.portal.absolute_url() + "/login_form")\n+        self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+        self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n     def open(self, path):\n-        self.browser.open(self.portal.absolute_url() + \'/\' + path)\n+        self.browser.open(self.portal.absolute_url() + "/" + path)\n \n     def test_CSRF_header(self):\n-        self.request.environ[\'HTTP_X_CSRF_TOKEN\'] = createToken()\n+        self.request.environ["HTTP_X_CSRF_TOKEN"] = createToken()\n         view = AuthenticatorView(None, self.request)\n         self.assertEqual(view.verify(), True)\n \n     def test_incorrect_CSRF_header(self):\n-        self.request.environ[\'HTTP_X_CSRF_TOKEN\'] = \'foobar\'\n+        self.request.environ["HTTP_X_CSRF_TOKEN"] = "foobar"\n         view = AuthenticatorView(None, self.request)\n         self.assertEqual(view.verify(), False)\n \n     def test_only_add_auth_when_user_logged_in(self):\n         logout()\n-        self.open(\'logout\')\n-        self.open(\'test-unprotected\')\n+        self.open("logout")\n+        self.open("test-unprotected")\n         try:\n-            self.browser.getForm(\'one\').getControl(name="_authenticator")\n-            self.assertEqual(\'anonymous should not be protected\', \'\')\n+            self.browser.getForm("one").getControl(name="_authenticator")\n+            self.assertEqual("anonymous should not be protected", "")\n         except LookupError:\n             pass\n \n \n class TestRoot(unittest.TestCase, _BaseAutoTest):\n-\n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n     def open(self, path):\n-        self.browser.open(self.portal.aq_parent.absolute_url() + \'/\' + path)\n+        self.browser.open(self.portal.aq_parent.absolute_url() + "/" + path)\n \n \n class AutoRotateTests(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n \n     def test_keyrings_get_rotated_on_login(self):\n         manager = getUtility(IKeyManager)\n-        ring = manager[\'_forms\']\n+        ring = manager["_forms"]\n         keys = ring.data\n         ring.last_rotation = 0\n         transaction.commit()\n \n         # should be rotated on login\n         login(self.portal, TEST_USER_NAME)\n-        self.browser.open(self.portal.absolute_url() + \'/login_form\')\n-        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        self.browser.getControl(\n-            name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open(self.portal.absolute_url() + "/login_form")\n+        self.browser.getControl(name="__ac_name").value = TEST_USER_NAME\n+        self.browser.getControl(name="__ac_password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         self.assertNotEqual(keys, ring.data)\n         self.assertNotEqual(ring.last_rotation, 0)\n@@ -172,9 +163,9 @@ class TestAutoChecks(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_safe_write_empty_returns_false(self):\n         transform = ProtectTransform(self.portal, self.request)\n@@ -191,13 +182,13 @@ def test_safe_write_large_oobtree(self):\n         annotations = IAnnotations(self.portal)\n         # Make sure the OOBTree has a second bucket. One bucket holds 30 items.\n         for idx in range(35):\n-            key = \'{0}{1}\'.format(__name__, idx)\n-            value = \'test\'\n+            key = f"{__name__}{idx}"\n+            value = "test"\n             annotations[key] = value\n         transaction.commit()\n         # Key that is alphabetically after the others ends up in the second\n         # bucket.\n-        annotations[\'{0}{1}\'.format(__name__, \'XXX999\')] = \'abcd\'\n+        annotations["{}{}".format(__name__, "XXX999")] = "abcd"\n         safeWrite(annotations.obj.__annotations__)\n         transform = ProtectTransform(self.portal, self.request)\n         self.assertTrue(transform._check())\n@@ -207,22 +198,28 @@ class TestAutoTransform(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request.response.setHeader(\'Content-Type\', \'text/html\')\n-        self.request.REQUEST_METHOD = \'POST\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request.response.setHeader("Content-Type", "text/html")\n+        self.request.REQUEST_METHOD = "POST"\n \n     def test_empty_no_error(self):\n         # empty pages (eg. tiles or ajax requests) should not lead to\n         # transform errors or warnings\n         transform = ProtectTransform(self.portal, self.request)\n-        result = transform.transform([\'\\n\'], \'utf-8\')\n+        result = transform.transform(["\\n"], "utf-8")\n         self.assertEqual(result, None)\n \n     def test_html(self):\n         transform = ProtectTransform(self.portal, self.request)\n-        result = transform.transform([(\n-            \'<html>\\n<body>\'\n-            \'<form action="http://nohost/myaction" method="POST">\'\n-            \'</form></body>\\n</html>\')], \'utf-8\')\n-        self.assertTrue(b\'_authenticator\' in result.serialize())\n+        result = transform.transform(\n+            [\n+                (\n+                    "<html>\\n<body>"\n+                    \'<form action="http://nohost/myaction" method="POST">\'\n+                    "</form></body>\\n</html>"\n+                )\n+            ],\n+            "utf-8",\n+        )\n+        self.assertTrue(b"_authenticator" in result.serialize())\ndiff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py\nindex a71bcf6..69cd140 100644\n--- a/plone/protect/tests/testPatches.py\n+++ b/plone/protect/tests/testPatches.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n@@ -11,29 +10,24 @@ class TestCSRF(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n-    def test_change_password_on_root_does_not_throw_other_csrf_protection(\n-            self\n-    ):\n+    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):\n         self.browser.open(\n-            \'%s/acl_users/users/manage_users?user_id=%s&passwd=1\' % (\n-                self.layer[\'app\'].absolute_url(), SITE_OWNER_NAME\n+            "{}/acl_users/users/manage_users?user_id={}&passwd=1".format(\n+                self.layer["app"].absolute_url(), SITE_OWNER_NAME\n             )\n         )\n-        self.browser.getControl(name=\'password\').value = SITE_OWNER_PASSWORD\n-        self.browser.getControl(name=\'confirm\').value = SITE_OWNER_PASSWORD\n-        self.browser.getForm(action=\'manage_updateUserPassword\').submit()\n-        self.assertEquals(\n+        self.browser.getControl(name="password").value = SITE_OWNER_PASSWORD\n+        self.browser.getControl(name="confirm").value = SITE_OWNER_PASSWORD\n+        self.browser.getForm(action="manage_updateUserPassword").submit()\n+        self.assertEqual(\n             self.browser.url,\n-            \'%s/acl_users/users/manage_users?\'\n-            \'manage_tabs_message=password+updated\' % (\n-                self.layer[\'app\'].absolute_url()\n-            )\n+            "%s/acl_users/users/manage_users?"\n+            "manage_tabs_message=password+updated" % (self.layer["app"].absolute_url()),\n         )\ndiff --git a/plone/protect/tests/testPostOnly.py b/plone/protect/tests/testPostOnly.py\nindex 4aeb042..7654fb1 100644\n--- a/plone/protect/tests/testPostOnly.py\n+++ b/plone/protect/tests/testPostOnly.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.postonly import check\n from unittest import makeSuite\n from unittest import TestCase\n@@ -8,13 +7,12 @@\n \n \n class PostOnlyTests(TestCase):\n-\n     def makeRequest(self, method):\n-        return HTTPRequest(None,\n-                           dict(REQUEST_METHOD=method,\n-                                SERVER_PORT="80",\n-                                SERVER_NAME="localhost"),\n-                           None)\n+        return HTTPRequest(\n+            None,\n+            dict(REQUEST_METHOD=method, SERVER_PORT="80", SERVER_NAME="localhost"),\n+            None,\n+        )\n \n     def testNonHTTPRequestAllowed(self):\n         check("not a request")\ndiff --git a/plone/protect/tests/testUtils.py b/plone/protect/tests/testUtils.py\nindex 95f6b4b..5a3bf86 100644\n--- a/plone/protect/tests/testUtils.py\n+++ b/plone/protect/tests/testUtils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from plone.protect.utils import addTokenToUrl\n from plone.protect.utils import protect\n@@ -18,13 +17,11 @@ def funcWithRequest(one, two, REQUEST=None):\n \n \n class DummyChecker:\n-\n     def __call__(self, request):\n         self.request = request\n \n \n class DecoratorTests(TestCase):\n-\n     def testFunctionMustHaveRequest(self):\n         protector = protect()\n         self.assertRaises(ValueError, protector, funcWithoutRequest)\n@@ -50,28 +47,26 @@ def testRequestPassedToChecker(self):\n \n \n class UrlTests(unittest.TestCase):\n-\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def testWithUrlFromSameDomain(self):\n-        url = addTokenToUrl(\'http://nohost/foobar\', self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar", self.layer["request"])\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithUrlFromOtherDomain(self):\n-        url = addTokenToUrl(\'http://other/foobar\', self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' not in url)\n+        url = addTokenToUrl("http://other/foobar", self.layer["request"])\n+        self.assertTrue("_authenticator=" not in url)\n \n     def testAddingWithQueryParams(self):\n-        url = addTokenToUrl(\'http://nohost/foobar?foo=bar\',\n-                            self.layer[\'request\'])\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar?foo=bar", self.layer["request"])\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithoutRequest(self):\n-        url = addTokenToUrl(\'http://nohost/foobar\')\n-        self.assertTrue(\'_authenticator=\' in url)\n+        url = addTokenToUrl("http://nohost/foobar")\n+        self.assertTrue("_authenticator=" in url)\n \n     def testWithNone(self):\n-        url = addTokenToUrl(None, self.layer[\'request\'])\n+        url = addTokenToUrl(None, self.layer["request"])\n         self.assertTrue(not url)\n \n \ndiff --git a/plone/protect/tests/test_confirm_view.py b/plone/protect/tests/test_confirm_view.py\nindex eff2632..46c0881 100644\n--- a/plone/protect/tests/test_confirm_view.py\n+++ b/plone/protect/tests/test_confirm_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from zExceptions import Forbidden\n from zope.component import getMultiAdapter\n@@ -10,21 +9,15 @@ class TestAttackVector(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\n \n     def test_regression(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        view = getMultiAdapter(\n-            (portal, request), name=u\'confirm-action\')\n-        request.form.update({\n-            \'original_url\': \'foobar\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        view = getMultiAdapter((portal, request), name="confirm-action")\n+        request.form.update({"original_url": "foobar"})\n         self.assertTrue(\'value="foobar"\' in view())\n \n     def test_valid_url(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        view = getMultiAdapter(\n-            (portal, request), name=u\'confirm-action\')\n-        request.form.update({\n-            \'original_url\': \'javascript:alert(1)\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        view = getMultiAdapter((portal, request), name="confirm-action")\n+        request.form.update({"original_url": "javascript:alert(1)"})\n         self.assertRaises(Forbidden, view)\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex 5c72e2a..0b1c669 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.requestmethod import buildfacade\n from Acquisition import aq_parent\n from BTrees.IFBTree import IFBTree\n@@ -19,7 +18,7 @@\n import logging\n \n \n-SAFE_WRITE_KEY = \'plone.protect.safe_oids\'\n+SAFE_WRITE_KEY = "plone.protect.safe_oids"\n BTREE_TYPES = (\n     IFBTree,\n     IIBTree,\n@@ -31,7 +30,7 @@\n     OLBTree,\n     OOBTree,\n )\n-LOGGER = logging.getLogger(\'plone.protect\')\n+LOGGER = logging.getLogger("plone.protect")\n \n _default = []\n \n@@ -39,8 +38,7 @@\n # It should probably be updated to use the decorator module.\n \n \n-class protect(object):\n-\n+class protect:\n     def __init__(self, *checkers):\n         self.checkers = checkers\n \n@@ -61,7 +59,7 @@ def __call__(self, callable):\n \n         arglen = len(args)\n         if defaults is not None:\n-            defaults = list(zip(args[arglen - len(defaults):], defaults))\n+            defaults = list(zip(args[arglen - len(defaults) :], defaults))\n             arglen -= len(defaults)\n \n         def _curried(*args, **kw):\n@@ -99,23 +97,23 @@ def addTokenToUrl(url, req=None, manager=None):\n     if req is None or not url.startswith(req.SERVER_URL):\n         # only transforms urls to same site\n         return url\n-    if getattr(req, \'environ\', _default) is _default:\n+    if getattr(req, "environ", _default) is _default:\n         # TestRequests have no environ.\n         token = createToken(manager=manager)\n-    elif \'_auth_token\' not in req.environ:\n+    elif "_auth_token" not in req.environ:\n         # Let\'s cache this value since this could be called\n         # many times for one request.\n         token = createToken(manager=manager)\n-        req.environ[\'_auth_token\'] = token\n+        req.environ["_auth_token"] = token\n     else:\n-        token = req.environ[\'_auth_token\']\n+        token = req.environ["_auth_token"]\n \n-    if \'_authenticator\' not in url:\n-        if \'?\' not in url:\n-            url += \'?\'\n+    if "_authenticator" not in url:\n+        if "?" not in url:\n+            url += "?"\n         else:\n-            url += \'&\'\n-        url += \'_authenticator=\' + token\n+            url += "&"\n+        url += "_authenticator=" + token\n     return url\n \n \n@@ -140,9 +138,9 @@ def getRoot(context):\n def safeWrite(obj, request=None):\n     if request is None:\n         request = getRequest()\n-    if request is None or getattr(request, \'environ\', _default) is _default:\n+    if request is None or getattr(request, "environ", _default) is _default:\n         # Request not found or it is a TestRequest without an environment.\n-        LOGGER.debug(\'could not mark object as a safe write\')\n+        LOGGER.debug("could not mark object as a safe write")\n         return\n     if SAFE_WRITE_KEY not in request.environ:\n         request.environ[SAFE_WRITE_KEY] = []\n@@ -156,4 +154,4 @@ def safeWrite(obj, request=None):\n                     request.environ[SAFE_WRITE_KEY].append(bucket._p_oid)\n                 bucket = bucket._next\n     except AttributeError:\n-        LOGGER.debug(\'object you attempted to mark safe does not have an oid\')\n+        LOGGER.debug("object you attempted to mark safe does not have an oid")\ndiff --git a/plone/protect/views.py b/plone/protect/views.py\nindex 7d5ce9f..9e1f56a 100644\n--- a/plone/protect/views.py\n+++ b/plone/protect/views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.protect.interfaces import IConfirmView\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n@@ -8,10 +7,9 @@\n \n @implementer(IConfirmView)\n class ConfirmView(BrowserView):\n-\n     def __call__(self):\n-        urltool = getToolByName(self.context, \'portal_url\')\n-        original_url = getattr(self.request, \'original_url\', \'\')\n+        urltool = getToolByName(self.context, "portal_url")\n+        original_url = getattr(self.request, "original_url", "")\n         if not original_url or not urltool.isURLInPortal(original_url):\n-            raise Forbidden(\'url not in portal: {0}\'.format(original_url))\n+            raise Forbidden(f"url not in portal: {original_url}")\n         return self.index()\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..c709e93 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,69 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,fo,parms"\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+\'plone.app.testing\' = [\n+  \'zope.testing\',\n+  \'plone.testing\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex ed59cfd..edc5056 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,67 +1,61 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'4.1.9.dev0\'\n+version = "5.0.0.dev0"\n \n setup(\n-    name=\'plone.protect\',\n+    name="plone.protect",\n     version=version,\n     description="Security for browser forms",\n-    long_description=\'%s\\n%s\' % (\n-        open("README.rst").read(),\n-        open("CHANGES.rst").read()\n+    long_description="{}\\n{}".format(\n+        open("README.rst").read(), open("CHANGES.rst").read()\n     ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 2",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'zope security CSRF\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.protect\',\n-    license=\'BSD\',\n+    keywords="zope security CSRF",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.protect",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', ],\n+    namespace_packages=[\n+        "plone",\n+    ],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\',\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'lxml[cssselect]\',\n-        \'setuptools\',\n-        \'plone.keyring >= 3.0dev\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Zope2\',\n-        \'plone.transformchain\',\n-        \'repoze.xmliter>=0.3\',\n-        \'collective.monkeypatcher\',\n-        \'z3c.zcmlhook\',\n+        "BTrees",\n+        "collective.monkeypatcher",\n+        "lxml[cssselect]",\n+        "plone.keyring",\n+        "plone.scale",\n+        "plone.transformchain",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.PluggableAuthService",\n+        "repoze.xmliter",\n+        "setuptools",\n+        "z3c.zcmlhook",\n+        "zope.annotation",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'Products.CMFPlone\'\n-            \'zope.annotation\',\n+        "test": [\n+            "plone.app.testing",\n         ],\n-    }\n+    },\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..1dd6e4c\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.protect {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.protect {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

