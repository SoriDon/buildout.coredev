Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-08T15:26:03+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/57fa2f5f85cfd4b804467692cce60eeb85b1c112

add working tests for livesearch - after 9 years ;-)

Files changed:
A Products/CMFPlone/tests/robot/plone-logo.png
M Products/CMFPlone/tests/robot/test_livesearch.robot

b"diff --git a/Products/CMFPlone/tests/robot/plone-logo.png b/Products/CMFPlone/tests/robot/plone-logo.png\nnew file mode 100644\nindex 0000000000..4c109bab8d\nBinary files /dev/null and b/Products/CMFPlone/tests/robot/plone-logo.png differ\ndiff --git a/Products/CMFPlone/tests/robot/test_livesearch.robot b/Products/CMFPlone/tests/robot/test_livesearch.robot\nindex 5fa969e01c..989bc973aa 100644\n--- a/Products/CMFPlone/tests/robot/test_livesearch.robot\n+++ b/Products/CMFPlone/tests/robot/test_livesearch.robot\n@@ -6,6 +6,8 @@ Resource  plone/app/robotframework/selenium.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n+Variables  Products/CMFPlone/tests/robot/variables.py\n+\n Resource  keywords.robot\n \n Test Setup  Run keywords  Plone Test Setup\n@@ -14,58 +16,72 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n *** Test cases ***************************************************************\n \n+\n Scenario: Simple Livesearch\n-    Pass Execution  Disabled until livesearch pattern is integrated\n     Given a logged-in site administrator\n       and a document  Welcome to Plone\n      When I search for  Welcome\n      Then the livesearch results should contain  Welcome to Plone\n-      and there should be '2' livesearch results\n+      and expected livesearch results  1\n \n-Scenario: Livesearch for documents\n-    Pass Execution  Disabled until livesearch pattern is integrated\n+Scenario: Livesearch with image results\n     Given a logged-in site administrator\n-      and a document  My document\n-     When I search for  My document\n-     Then the livesearch results should contain  My document\n-      and there should be '2' livesearch results\n+      and a news item  My News with Image\n+     When I search for  My News\n+     Then the livesearch results should contain  My News with Image\n+      and expected livesearch results  1\n+     Then Page should not contain image  css=.livesearch-results li.search-result .col.img img\n+     When I enable images in results in search controlpanel\n+      and I search for  My News\n+     Then the livesearch results should contain  My News with Image\n+      and expected livesearch results  1\n+      and Page should contain image  css=.livesearch-results li.search-result .col.img img\n \n-Scenario: Livesearch for folder\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder  My folder\n-     When I search for  My folder\n-     Then the livesearch results should contain  My folder\n-      and there should be '2' livesearch results\n \n-Scenario: Livesearch in current folder only\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder with a document 'Inside Document'\n-      and a document  Outside Document\n-     When I search the currentfolder only for  Inside Document\n-     Then the livesearch results should contain  Inside Document\n-      and the livesearch results should not contain  Outside Document\n-      and there should be '2' livesearch results\n \n \n *** Keywords *****************************************************************\n \n+a document\n+    [Arguments]  ${title}\n+    Create content  type=Document  id=doc  title=${title}\n+\n+a news item\n+    [Arguments]  ${title}\n+    Go to  ${PLONE_URL}/++add++News Item\n+    Wait until page contains  Add News Item\n+    Input text  name=form.widgets.IDublinCore.title  ${title}\n+    Choose File  name=form.widgets.ILeadImageBehavior.image  ${PATH_TO_TEST_FILES}/plone-logo.png\n+    Click Button  Save\n+    Wait until page contains  Item created  error=Image could not be created.\n+\n I search for\n     [Arguments]  ${searchtext}\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n I search the currentfolder only for\n     [Arguments]  ${searchtext}\n     Select checkbox  id=searchbox_currentfolder_only\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n the livesearch results should contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Element should contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Element should contain  css=.livesearch-results li a .heading  ${text}\n \n the livesearch results should not contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Page should not contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Page should not contain  css=.livesearch-results li a .heading  ${text}\n+\n+expected livesearch results\n+    [Arguments]  ${num}\n+    ${count} =  Get Element Count  css=.livesearch-results li.search-result\n+    Should Be Equal as Numbers  ${count}  ${num}\n+\n+I enable images in results in search controlpanel\n+    Go to  ${PLONE_URL}/@@search-controlpanel\n+    Wait until page contains  Search Settings\n+    Select Checkbox  form.widgets.search_show_images:list\n+    Click Button  Save\n+    Wait until page contains  Changes saved\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T10:06:31+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/e16a334c431b4bcf42250145e27b1e011352a334

Add support for images in default search page

Files changed:
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 8e396ed2ed..c44596fe4c 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -231,6 +231,16 @@ def navroot_url(self):\n             self._navroot_url = state.navigation_root_url()\n         return self._navroot_url\n \n+    @property\n+    def show_images(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_show_images\')\n+\n+    @property\n+    def search_image_scale(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_image_scale\')\n+\n \n class AjaxSearch(Search):\n \ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex ef4d271e8d..31f2004a97 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -75,30 +75,19 @@\n           </h1>\n         </div>\n \n-        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n-            tal:condition="context/@@syndication-util/search_rss_enabled">\n-          <a class="nav-link"\n-             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n-              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n-              <span i18n:translate="title_subscribe_rss_feed">\n-                Subscribe to an always-updated RSS feed.\n-              </span>\n-          </a>\n-        </div>\n+        <div class="d-flex mb-2">\n \n-        <ul class="nav nav-tabs">\n-\n-          <li class="nav-item">\n-            <a class="nav-link active" aria-current="page" href="#">\n-              <span i18n:translate="batch_x_items_matching_your_criteria" i18n:domain="plone" id="results-count" >\n-                <span i18n:name="number" id="search-results-number" class="badge bg-primary"\n+          <div class="flex-fill">\n+            <a class="nav-link active ps-2" aria-current="page" href="#">\n+              <span i18n:translate="batch_x_items_matching_your_criteria" class="d-flex" i18n:domain="plone" id="results-count" >\n+                <span i18n:name="number" id="search-results-number" class="badge bg-primary me-2 d-flex justify-content-center align-items-center"\n                       tal:content="batch/sequence_length|string:0">234</span>\n                   items matching your search terms.\n               </span>\n             </a>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown ms-auto" id="search-filter">\n+          <div class="nav-item dropdown" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\n@@ -174,9 +163,9 @@\n                 </div>\n               </div>\n             </div>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown">\n+          <div class="nav-item dropdown">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" i18n:translate="sort_by">Sort by</a>\n             <ul class="dropdown-menu dropdown-menu-md-end" id="sorting-options">\n               <li tal:repeat="item view/sort_options">\n@@ -185,16 +174,18 @@\n                    tal:content="item/title">sort option</a>\n               </li>\n             </ul>\n-          </li>\n+          </div>\n \n-        </ul>\n+        </div>\n \n         <div id="search-results-wrapper">\n \n           <metal:searchresults define-macro="search_results">\n \n             <div id="search-results"\n-                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"\n+                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;\n+                             show_images python:view.show_images;\n+                             search_image_scale python:view.search_image_scale;"\n                  data-default-sort="${python:request.get(\'sort_on\') or view.default_sort_on}">\n \n               <metal:noresults tal:condition="not: batch">\n@@ -208,96 +199,107 @@\n                                          allowAnonymousViewAbout python:context.portal_registry[\'plone.allow_anon_views_about\'];\n                                          show_about python:not isAnon or allowAnonymousViewAbout;\n                                          image_scale portal/@@image_scale">\n-                <ol class="searchResults" start="${python:request.get(\'b_start\', 0) + 1}">\n+                <ol class="searchResults list-group list-group-numbered" start="${python:request.get(\'b_start\', 0) + 1}">\n                   <tal:results repeat="item batch">\n-                    <li tal:define="hasIcon item/getIcon" class="my-3 pb-3 border-bottom">\n-                      <span class="result-title">\n-                        <img class="thumb-icon"\n-                             tal:condition="hasIcon"\n-                             tal:replace="structure python: image_scale.tag(item, \'image\', scale=\'icon\', css_class=\'thumb-icon\')">\n-                        <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n-                           class="state-${item/review_state}"\n-                           tal:define="item_url item/getURL;\n-                                       item_type item/PortalType"\n-                           tal:content="python:item.getDataOrigin().pretty_title_or_id()" />\n-                      </span>\n-\n-                      <small class="text-muted" i18n:domain="plone"\n-                            tal:condition="show_about">\n-                        <span class="documentAuthor"\n-                              i18n:translate="label_by_author">\n-                          by\n-                          <tal:block tal:condition="item/Creator"\n-                                     tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n-                            <a href="${navigation_root_url}/author/${item/Creator}"\n-                               tal:content="python:author and author[\'fullname\'] or item.Creator()"\n-                               tal:omit-tag="not:item/Creator"\n-                               i18n:name="author">\n-                                Bob Dobalina\n-                            </a>\n-                          </tal:block>\n-                        </span>\n-                        <span tal:define="publication_date item/EffectiveDate;\n-                                          modification_date item/ModificationDate">\n-\n-                          <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n-                            &mdash;\n-                            <span i18n:translate="box_published">\n-                              published\n+                    <li tal:define="hasIcon item/getIcon" class="list-group-item list-group-item-action d-flex justify-content-between align-items-start  fs-4">\n+                      <div class="ms-2 me-auto">\n+                        <div class="result-title">\n+                          <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                            class="state-${item/review_state}"\n+                            tal:define="item_url item/getURL;\n+                                        item_type item/PortalType">\n+                                        <span tal:replace="python:item.getDataOrigin().pretty_title_or_id()"></span>\n+                          </a>\n+                        </div>\n+\n+                        <small class="text-muted small fs-6" i18n:domain="plone"\n+                              tal:condition="show_about">\n+                          <span class="documentAuthor"\n+                                i18n:translate="label_by_author">\n+                            by\n+                            <tal:block tal:condition="item/Creator"\n+                                      tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n+                              <a href="${navigation_root_url}/author/${item/Creator}"\n+                                tal:content="python:author and author[\'fullname\'] or item.Creator()"\n+                                tal:omit-tag="not:item/Creator"\n+                                i18n:name="author">\n+                                  Bob Dobalina\n+                              </a>\n+                            </tal:block>\n+                          </span>\n+                          <span tal:define="publication_date item/EffectiveDate;\n+                                            modification_date item/ModificationDate">\n+\n+                            <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n+                              &mdash;\n+                              <span i18n:translate="box_published">\n+                                published\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n-                            <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n-                              August 16, 2001 at 23:35:59\n+\n+                            <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                              &mdash;\n+                              <span i18n:translate="box_last_modified">\n+                                last modified\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n                           </span>\n-\n-                          <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                          <span tal:define="categories item/Subject|nothing"\n+                                tal:condition="categories">\n                             &mdash;\n-                            <span i18n:translate="box_last_modified">\n-                              last modified\n-                            </span>\n-                            <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n-                              August 16, 2001 at 23:35:59\n+                            <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n+                            <span tal:repeat="category categories">\n+                              <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n+                                tal:content="category">\n+                                Category\n+                              </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n                             </span>\n                           </span>\n-                        </span>\n-                        <span tal:define="categories item/Subject|nothing"\n-                              tal:condition="categories">\n-                          &mdash;\n-                          <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n-                          <span tal:repeat="category categories">\n-                            <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n-                               tal:content="category">\n-                              Category\n-                            </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n+                        </small>\n+\n+                        <div class="croppedDescription mt-2 mb-2 fs-5 fw-light"\n+                          tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n+                          Cropped description\n+                        </div>\n+\n+                        <cite class="d-block small text-muted fs-6"\n+                              tal:define="breadcrumbs python: view.breadcrumbs(item);\n+                                          is_rtl context/@@plone_portal_state/is_rtl;"\n+                              tal:condition=\'breadcrumbs\'>\n+                          <span i18n:translate="text_searchitem_location">\n+                            Located in\n+                          </span>\n+                          <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n+                                tal:repeat="crumb breadcrumbs">\n+                            <tal:item tal:define="is_last repeat/crumb/end;\n+                                                  url crumb/absolute_url;\n+                                                  title crumb/Title">\n+                              <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n+                              <span class="breadcrumbSeparator" tal:condition="not: is_last">\n+                                <tal:ltr condition="not: is_rtl">/</tal:ltr>\n+                                <tal:rtl condition="is_rtl">/</tal:rtl>\n+                              </span>\n+                            </tal:item>\n                           </span>\n-                        </span>\n-                      </small>\n+                        </cite>\n \n-                      <div class="croppedDescription"\n-                         tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n-                        Cropped description\n                       </div>\n \n-                      <cite class="d-block small text-muted"\n-                            tal:define="breadcrumbs python: view.breadcrumbs(item);\n-                                        is_rtl context/@@plone_portal_state/is_rtl;"\n-                            tal:condition=\'breadcrumbs\'>\n-                        <span i18n:translate="text_searchitem_location">\n-                          Located in\n-                        </span>\n-                        <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n-                              tal:repeat="crumb breadcrumbs">\n-                          <tal:item tal:define="is_last repeat/crumb/end;\n-                                                url crumb/absolute_url;\n-                                                title crumb/Title">\n-                            <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n-                            <span class="breadcrumbSeparator" tal:condition="not: is_last">\n-                              <tal:ltr condition="not: is_rtl">/</tal:ltr>\n-                              <tal:rtl condition="is_rtl">/</tal:rtl>\n-                            </span>\n-                          </tal:item>\n-                        </span>\n-                      </cite>\n+                      <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                          class="state-${item/review_state}"\n+                          tal:define="item_url item/getURL;\n+                                    item_type item/PortalType">\n+                          <img class="thumb-icon"\n+                            tal:condition="python: show_images and hasIcon"\n+                            tal:replace="structure python: image_scale.tag(item, \'image\', scale=search_image_scale, css_class=\'thumb-icon\')">\n+                      </a>\n+\n                     </li>\n                   </tal:results>\n                 </ol>\n@@ -309,6 +311,17 @@\n \n         </div>\n \n+        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n+            tal:condition="context/@@syndication-util/search_rss_enabled">\n+          <a class="mx-2 text-decoration-none -flex  align-items-center"\n+             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n+              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n+              <span i18n:translate="title_subscribe_rss_feed" class="ms-1">\n+                Subscribe to an always-updated RSS feed.\n+              </span>\n+          </a>\n+        </div>\n+\n     </form>\n   </div>\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T10:36:55+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/380af00a23e0e50d848e9fb96c73fe0150640914

update live search test for images enabled by default

Files changed:
M Products/CMFPlone/tests/robot/test_livesearch.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_livesearch.robot b/Products/CMFPlone/tests/robot/test_livesearch.robot\nindex 989bc973aa..0cbbb8280d 100644\n--- a/Products/CMFPlone/tests/robot/test_livesearch.robot\n+++ b/Products/CMFPlone/tests/robot/test_livesearch.robot\n@@ -28,16 +28,13 @@ Scenario: Livesearch with image results\n     Given a logged-in site administrator\n       and a news item  My News with Image\n      When I search for  My News\n-     Then the livesearch results should contain  My News with Image\n-      and expected livesearch results  1\n-     Then Page should not contain image  css=.livesearch-results li.search-result .col.img img\n-     When I enable images in results in search controlpanel\n-      and I search for  My News\n      Then the livesearch results should contain  My News with Image\n       and expected livesearch results  1\n       and Page should contain image  css=.livesearch-results li.search-result .col.img img\n \n-\n+     When I disable images in results in search controlpanel\n+      and I search for  My News\n+     Then Page should not contain image  css=.livesearch-results li.search-result .col.img img\n \n \n *** Keywords *****************************************************************\n@@ -79,9 +76,9 @@ expected livesearch results\n     ${count} =  Get Element Count  css=.livesearch-results li.search-result\n     Should Be Equal as Numbers  ${count}  ${num}\n \n-I enable images in results in search controlpanel\n+I disable images in results in search controlpanel\n     Go to  ${PLONE_URL}/@@search-controlpanel\n     Wait until page contains  Search Settings\n-    Select Checkbox  form.widgets.search_show_images:list\n+    Unselect Checkbox  form.widgets.search_show_images:list\n     Click Button  Save\n     Wait until page contains  Changes saved\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T10:37:10+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/260688733083fcab4af2b761bc00c6728235da1d

add news

Files changed:
A news/3495.feature

b'diff --git a/news/3495.feature b/news/3495.feature\nnew file mode 100644\nindex 0000000000..f5f0505020\n--- /dev/null\n+++ b/news/3495.feature\n@@ -0,0 +1,2 @@\n+Add support for images in default search page.\n+[agitator]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T10:38:45+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/8a89e0a9624fbab064cc63de7b675296c2df2dbf

Merge branch 'master' into search-and-test

Files changed:
A news/3487.breaking
A news/3492.breaking
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testCheckId.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testNavTree.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/utils.py
D Products/CMFPlone/PloneFolder.py
D Products/CMFPlone/tests/testPloneFolder.py

b'diff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py\ndeleted file mode 100644\nindex fb7624ea54..0000000000\n--- a/Products/CMFPlone/PloneFolder.py\n+++ /dev/null\n@@ -1,292 +0,0 @@\n-from AccessControl import ClassSecurityInfo\n-from AccessControl import Permissions\n-from AccessControl import Unauthorized\n-from AccessControl.class_init import InitializeClass\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from ComputedAttribute import ComputedAttribute\n-from OFS.Folder import Folder\n-from OFS.ObjectManager import REPLACEABLE\n-from OFS.OrderSupport import OrderSupport\n-from plone.memoize import view\n-from Products.CMFCore.CMFCatalogAware import CatalogAware\n-from Products.CMFCore.CMFCatalogAware import OpaqueItemManager\n-from Products.CMFCore.CMFCatalogAware import WorkflowAware\n-from Products.CMFCore.permissions import AccessContentsInformation\n-from Products.CMFCore.permissions import AddPortalContent\n-from Products.CMFCore.permissions import AddPortalFolders\n-from Products.CMFCore.permissions import ListFolderContents\n-from Products.CMFCore.permissions import ModifyPortalContent\n-from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import bbb\n-from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-from zExceptions import NotFound\n-from zope.interface import implementer\n-\n-import warnings\n-\n-\n-if bbb.HAS_ZSERVER:\n-    from webdav.NullResource import NullResource\n-    from webdav.interfaces import IWriteLock\n-else:\n-    from OFS.interfaces import IWriteLock\n-    NullResource = bbb.NullResource\n-\n-\n-class ReplaceableWrapper:\n-    """A wrapper around an object to make it replaceable."""\n-\n-    def __init__(self, ob):\n-        warnings.warn(\n-            \'ReplaceableWrapper is deprecated. Planned removal in Plone 6.0\',\n-            DeprecationWarning,\n-        )\n-        self.__ob = ob\n-\n-    def __getattr__(self, name):\n-        if name == \'__replaceable__\':\n-            return REPLACEABLE\n-        return getattr(self.__ob, name)\n-\n-\n-class OrderedContainer(Folder, OrderSupport):\n-    """Folder with subobject ordering support."""\n-\n-    security = ClassSecurityInfo()\n-\n-    security.declareProtected(ModifyPortalContent, \'moveObject\')\n-\n-    def moveObject(self, id, position):\n-        obj_idx = self.getObjectPosition(id)\n-        if obj_idx == position:\n-            return None\n-        elif position < 0:\n-            position = 0\n-\n-        metadata = list(self._objects)\n-        obj_meta = metadata.pop(obj_idx)\n-        metadata.insert(position, obj_meta)\n-        self._objects = tuple(metadata)\n-\n-    security.declarePrivate(\'getIdsSubset\')\n-\n-    def getIdsSubset(self, objs):\n-        # Get the ids of only cmf objects (used for moveObjectsByDelta).\n-        ttool = getToolByName(self, \'portal_types\')\n-        cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]\n-        return [obj[\'id\'] for obj in objs\n-                if obj[\'meta_type\'] in cmf_meta_types]\n-\n-    # BBB\n-    getCMFObjectsSubsetIds = getIdsSubset\n-\n-    security.declareProtected(ModifyPortalContent, \'getObjectPosition\')\n-\n-    def getObjectPosition(self, id):\n-        try:\n-            pos = OrderSupport.getObjectPosition(self, id)\n-        except ValueError:\n-            raise NotFound(\'Object %s was not found\' % str(id))\n-\n-        return pos\n-\n-    def manage_renameObject(self, id, new_id, REQUEST=None):\n-        """Rename a particular sub-object."""\n-        objidx = self.getObjectPosition(id)\n-        method = OrderedContainer.inheritedAttribute(\'manage_renameObject\')\n-        result = method(self, id, new_id, REQUEST)\n-        self.moveObject(new_id, objidx)\n-        putils = getToolByName(self, \'plone_utils\')\n-        putils.reindexOnReorder(self)\n-        return result\n-\n-InitializeClass(OrderedContainer)\n-\n-\n-@implementer(IWriteLock)\n-class BasePloneFolder(CatalogAware, WorkflowAware, OpaqueItemManager,\n-                      PortalFolderBase, DefaultDublinCoreImpl):\n-    """Implements basic Plone folder functionality except ordering support.\n-    """\n-\n-    security = ClassSecurityInfo()\n-\n-    manage_options = Folder.manage_options + \\\n-        WorkflowAware.manage_options\n-\n-    # Fix permissions set by CopySupport.py\n-    __ac_permissions__ = (\n-        (\'Modify portal content\',\n-         (\'manage_cutObjects\', \'manage_pasteObjects\',\n-          \'manage_renameForm\', \'manage_renameObject\',\n-          \'manage_renameObjects\', )),\n-    )\n-\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-    def __init__(self, id, title=\'\'):\n-        DefaultDublinCoreImpl.__init__(self)\n-        self.id = id\n-        self.title = title\n-\n-    def __call__(self):\n-        """Invokes the default view."""\n-        ti = self.getTypeInfo()\n-        method_id = ti and ti.queryMethodId(\'(Default)\', context=self)\n-        if method_id:\n-            method = getattr(self, method_id)\n-            # XXX view is not defined!\n-            if getattr(aq_base(view), \'isDocTemp\', 0):\n-                return method(self, self.REQUEST, self.REQUEST[\'RESPONSE\'])\n-            else:\n-                return method()\n-        else:\n-            raise NotFound(\'Cannot find default view for "%s"\' %\n-                           \'/\'.join(self.getPhysicalPath()))\n-\n-    security.declareProtected(Permissions.view, \'view\')\n-    view = __call__\n-\n-    def index_html(self):\n-        """ Acquire if not present. """\n-        request = getattr(self, \'REQUEST\', None)\n-        if (\n-            request is not None\n-            and \'REQUEST_METHOD\' in request\n-            and request.maybe_webdav_client\n-        ):\n-            method = request[\'REQUEST_METHOD\']\n-            if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n-                # Very likely a WebDAV client trying to create something\n-                result = NullResource(self, \'index_html\')\n-                setattr(result, \'__replaceable__\', REPLACEABLE)\n-                return result\n-            elif method not in (\'GET\', \'HEAD\', \'POST\'):\n-                raise AttributeError(\'index_html\')\n-        # Acquire from skin.\n-        _target = self.__getattr__(\'index_html\')\n-        result = aq_base(_target).__of__(self)\n-        setattr(result, \'__replaceable__\', REPLACEABLE)\n-        return result\n-\n-    index_html = ComputedAttribute(index_html, 1)\n-\n-    security.declareProtected(AddPortalFolders, \'manage_addPloneFolder\')\n-\n-    def manage_addPloneFolder(self, id, title=\'\', REQUEST=None):\n-        """Adds a new PloneFolder."""\n-        ob = PloneFolder(id, title)\n-        self._setObject(id, ob)\n-        if REQUEST is not None:\n-            # TODO HARDCODED FIXME!\n-            return self.folder_contents(self, REQUEST)\n-\n-    manage_addFolder = manage_addPloneFolder\n-    manage_renameObject = PortalFolderBase.manage_renameObject\n-\n-    security.declareProtected(Permissions.delete_objects, \'manage_delObjects\')\n-\n-    def manage_delObjects(self, ids=None, REQUEST=None):\n-        """We need to enforce security."""\n-        if ids is None:\n-            ids = []\n-        mt = getToolByName(self, \'portal_membership\')\n-        if isinstance(ids, str):\n-            ids = [ids]\n-        for id in ids:\n-            item = self._getOb(id)\n-            if not mt.checkPermission(Permissions.delete_objects, item):\n-                raise Unauthorized(\n-                    "Do not have permissions to remove this object")\n-        return PortalFolderBase.manage_delObjects(self, ids, REQUEST=REQUEST)\n-\n-    def __browser_default__(self, request):\n-        """Set default so we can return whatever we want instead\n-        of index_html."""\n-        return getToolByName(self, \'plone_utils\').browserDefault(self)\n-\n-    security.declarePublic(\'contentValues\')\n-\n-    def contentValues(self, filter=None, sort_on=None, reverse=0):\n-        # Able to sort on field.\n-        values = PortalFolderBase.contentValues(self, filter=filter)\n-        if sort_on is not None:\n-            values.sort(lambda x, y,\n-                        sort_on=sort_on: safe_cmp(getattr(x, sort_on),\n-                                                  getattr(y, sort_on)))\n-        if reverse:\n-            values.reverse()\n-\n-        return values\n-\n-    security.declareProtected(ListFolderContents, \'listFolderContents\')\n-\n-    def listFolderContents(self, contentFilter=None,\n-                           suppressHiddenFiles=0):\n-        # Optionally you can suppress "hidden" files, or files that\n-        # begin with \'.\'\n-        contents = PortalFolderBase.listFolderContents(self,\n-                                                       contentFilter=contentFilter)\n-        if suppressHiddenFiles:\n-            contents = [obj for obj in contents if obj.getId()[:1] != \'.\']\n-        return contents\n-\n-    security.declareProtected(AccessContentsInformation,\n-                              \'folderlistingFolderContents\')\n-\n-    def folderlistingFolderContents(self, contentFilter=None,\n-                                    suppressHiddenFiles=0):\n-        # Calls listFolderContents in protected only by ACI so that\n-        # folder_listing can work without the List folder contents permission.\n-        return self.listFolderContents(contentFilter, suppressHiddenFiles)\n-\n-    # Override CMFCore\'s invokeFactory to return the id returned by the\n-    # factory in case the factory modifies the id\n-    security.declareProtected(AddPortalContent, \'invokeFactory\')\n-\n-    def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n-        # Invokes the portal_types tool.\n-        pt = getToolByName(self, \'portal_types\')\n-        myType = pt.getTypeInfo(self)\n-        if myType is not None:\n-            if not myType.allowType(type_name):\n-                raise ValueError(\'Disallowed subobject type: %s\' % type_name)\n-        args = (type_name, self, id, RESPONSE) + args\n-        new_id = pt.constructContent(*args, **kw)\n-        if new_id is None or new_id == \'\':\n-            new_id = id\n-        return new_id\n-\n-\n-InitializeClass(BasePloneFolder)\n-\n-\n-class PloneFolder(BasePloneFolder, OrderedContainer):\n-    """A Plone Folder."""\n-    meta_type = \'Plone Folder\'\n-    security = ClassSecurityInfo()\n-\n-    manage_renameObject = OrderedContainer.manage_renameObject\n-    security.declareProtected(Permissions.copy_or_move, \'manage_copyObjects\')\n-\n-InitializeClass(PloneFolder)\n-\n-\n-def safe_cmp(x, y):\n-    if callable(x):\n-        x = x()\n-    if callable(y):\n-        y = y()\n-    return cmp(x, y)\n-\n-\n-def addPloneFolder(self, id, title=\'\', description=\'\', REQUEST=None):\n-    """Adds a Plone Folder."""\n-    sf = PloneFolder(id, title=title)\n-    sf.description = description\n-    self._setObject(id, sf)\n-    if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(sf.absolute_url() + \'/manage_main\')\ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 216f8c251f..87f6c09683 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -37,7 +37,6 @@\n from Products.CMFPlone.log import log_deprecated\n from Products.CMFPlone.log import log_exc\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from Products.CMFPlone.utils import base_hasattr\n from Products.CMFPlone.utils import safe_hasattr\n from Products.CMFPlone.utils import transaction_note\n@@ -617,7 +616,7 @@ def browserDefault(self, obj):\n         # 7. If nothing else is found, fall back on the object\'s \'view\' action.\n         # 8. If this is not found, raise an AttributeError\n \n-        # WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n+        # 0. WebDAV in Zope is odd it takes the incoming verb eg: PROPFIND\n         # and then requests that object, for example for: /, with verb PROPFIND\n         # means acquire PROPFIND from the folder and call it\n         # its all very odd and WebDAV\'y\n@@ -630,20 +629,9 @@ def browserDefault(self, obj):\n         #\n         # 1. Get an attribute or contained object index_html\n         #\n-\n-        # Note: The base PloneFolder, as well as ATCT\'s ATCTOrderedFolder\n-        # defines a method index_html() which returns a ReplaceableWrapper.\n-        # This is needed for WebDAV to work properly, and to avoid implicit\n-        # acquisition of index_html\'s, which are generally on-object only.\n-        # For the purposes of determining a default page, we don\'t want to\n-        # use this index_html(), nor the ComputedAttribute which defines it.\n-\n-        if not isinstance(getattr(obj, \'index_html\', None),\n-                          ReplaceableWrapper):\n-            index_obj = getattr(aq_base(obj), \'index_html\', None)\n-            if index_obj is not None \\\n-                    and not isinstance(index_obj, ComputedAttribute):\n-                return obj, [\'index_html\']\n+        index_obj = getattr(aq_base(obj), \'index_html\', None)\n+        if index_obj is not None and not isinstance(index_obj, ComputedAttribute):\n+            return obj, [\'index_html\']\n \n         #\n         # 2. Look for a default_page managed by an IBrowserDefault-implementing\n@@ -945,11 +933,6 @@ def reindexOnReorder(self, parent):\n         # but some extensions might need the info anyway. :(\n         notify(ReorderedEvent(parent))\n \n-    @security.public\n-    def isIDAutoGenerated(self, id):\n-        # Determine if an id is autogenerated.\n-        return utils.isIDAutoGenerated(self, id)\n-\n     @security.public\n     def getEmptyTitle(self, translated=True):\n         # Returns string to be used for objects with no title or id.\ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex e3778648fb..592d2e4264 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -131,14 +131,6 @@ def initialize(context):\n     # pipeline registry\n     from Products.CMFPlone import UnicodeSplitter  # noqa\n \n-    # Plone content\n-\n-    # Usage of PloneFolder is discouraged.\n-    from Products.CMFPlone import PloneFolder\n-\n-    contentClasses = (PloneFolder.PloneFolder, )\n-    contentConstructors = (PloneFolder.addPloneFolder, )\n-\n     # CMFCore tools\n     from Products.CMFCore import CachingPolicyManager\n \n@@ -182,12 +174,6 @@ def initialize(context):\n         icon=\'tool.gif\',\n     ).initialize(context)\n \n-    ContentInit(\n-        \'Plone Content\',\n-        content_types=contentClasses,\n-        permission=ADD_CONTENT_PERMISSION,\n-        extra_constructors=contentConstructors,\n-    ).initialize(context)\n \n     from AccessControl.Permissions import view_management_screens\n     from Products.CMFPlone.Portal import PloneSite\ndiff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py\nindex 19810f91b5..ace5f9a80e 100644\n--- a/Products/CMFPlone/tests/testBrowserDefault.py\n+++ b/Products/CMFPlone/tests/testBrowserDefault.py\n@@ -10,7 +10,6 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import _createObjectByType\n from plone.base.utils import safe_text\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from zope.component import getUtility\n \n import difflib\n@@ -166,7 +165,7 @@ def testBrowserDefaultMixinFileDumpsContent(self):\n         data = self.portal.file.file.data\n         self.assertEqual(self.browser.contents.encode(\'utf8\'), data)\n \n-    # Ensure index_html acquisition and replaceablewrapper\n+    # Ensure index_html acquisition\n \n     def testIndexHtmlNotAcquired(self):\n         self.portal.folder.invokeFactory(\'Document\', \'index_html\')\n@@ -177,12 +176,6 @@ def testIndexHtmlNotAcquired(self):\n             (self.portal.folder.subfolder, [layout])\n         )\n \n-    def testIndexHtmlReplaceableWrapper(self):\n-        self.portal.document.index_html = ReplaceableWrapper(None)\n-        layout = self.portal.document.getLayout()\n-        self.assertEqual(self.putils.browserDefault(self.portal.document),\n-                         (self.portal.document, [layout]))\n-\n     # Test behaviour of __call__\n \n     def testCallDocumentGivesTemplate(self):\ndiff --git a/Products/CMFPlone/tests/testCheckId.py b/Products/CMFPlone/tests/testCheckId.py\nindex 9ca7796556..89017a733b 100644\n--- a/Products/CMFPlone/tests/testCheckId.py\n+++ b/Products/CMFPlone/tests/testCheckId.py\n@@ -6,45 +6,6 @@\n from ZODB.POSException import ConflictError\n \n \n-class TestIsIDAutoGenerated(PloneTestCase):\n-\n-    def testAutoGeneratedId(self):\n-        plone_utils = getToolByName(self.portal, \'plone_utils\')\n-        r = plone_utils.isIDAutoGenerated(\'document.2004-11-09.0123456789\')\n-        self.assertEqual(r, True)\n-\n-    def testAutoGeneratedIdWithUnderScores(self):\n-        plone_utils = getToolByName(self.portal, \'plone_utils\')\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        portal_types.test_type = self.portal.portal_types.Event\n-        portal_types.test_type.id = "test_type"\n-\n-        r = plone_utils.isIDAutoGenerated(\'test_type.2004-11-09.0123456789\')\n-\n-        del portal_types.test_type\n-\n-        self.assertEqual(r, True)\n-\n-    def testEmptyId(self):\n-        plone_utils = getToolByName(self.portal, \'plone_utils\')\n-        r = plone_utils.isIDAutoGenerated(\'\')\n-        self.assertEqual(r, False)\n-\n-    def testValidPortalTypeNameButNotAutoGeneratedId(self):\n-        plone_utils = getToolByName(self.portal, \'plone_utils\')\n-        # This was raising an IndexError exception for\n-        # Zope < 2.7.3 (DateTime.py < 1.85.12.11) and a\n-        # SyntaxError for Zope >= 2.7.3 (DateTime.py >= 1.85.12.11)\n-        r = plone_utils.isIDAutoGenerated(\'document.tar.gz\')\n-        self.assertEqual(r, False)\n-        # check DateError\n-        r = plone_utils.isIDAutoGenerated(\'document.tar.12/32/2004\')\n-        self.assertEqual(r, False)\n-        # check TimeError\n-        r = plone_utils.isIDAutoGenerated(\'document.tar.12/31/2004 12:62\')\n-        self.assertEqual(r, False)\n-\n-\n class TestCheckId(PloneTestCase):\n \n     def testGoodId(self):\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex e8ffa50302..833ef3b456 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -4,9 +4,6 @@\n from Products.CMFPlone.MigrationTool import MigrationTool\n from Products.CMFPlone.PloneControlPanel import PloneConfiglet\n from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n-from Products.CMFPlone.PloneFolder import BasePloneFolder\n-from Products.CMFPlone.PloneFolder import OrderedContainer\n-from Products.CMFPlone.PloneFolder import PloneFolder\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n from Products.CMFPlone.PropertiesTool import PropertiesTool\n@@ -261,7 +258,6 @@ def _testStuff(self):\n     (CatalogTool, ()),\n     (MigrationTool, ()),\n     (PloneControlPanel, ()), (PloneConfiglet, ()),\n-    (OrderedContainer, ()), (BasePloneFolder, ()), (PloneFolder, ()),\n     (PloneTool, ()),\n     (PloneSite, ()),\n     (PropertiesTool, ()), (SimpleItemWithProperties, ()),\ndiff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py\nindex 6851386e1f..efd469252c 100644\n--- a/Products/CMFPlone/tests/testNavTree.py\n+++ b/Products/CMFPlone/tests/testNavTree.py\n@@ -1,26 +1,21 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-\n-from Products.CMFCore.utils import getToolByName\n-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-\n-from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.navtree import buildFolderTree\n+from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.app.layout.navigation.root import getNavigationRoot\n-\n+from plone.base.interfaces import INonStructuralFolder\n+from Products.CMFCore.CMFCatalogAware import CatalogAware\n+from Products.CMFCore.PortalFolder import PortalFolderBase\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.tests import PloneTestCase\n from zope.interface import directlyProvides\n from zope.interface import implementer\n \n \n-from Products.CMFPlone.PloneFolder import PloneFolder\n-from plone.base.interfaces import INonStructuralFolder\n-\n default_user = PloneTestCase.default_user\n \n \n-\n @implementer(INonStructuralFolder)\n-class DummyNonStructuralFolder(PloneFolder):\n+class DummyNonStructuralFolder(CatalogAware, PortalFolderBase):\n     pass\n \n \ndiff --git a/Products/CMFPlone/tests/testPloneFolder.py b/Products/CMFPlone/tests/testPloneFolder.py\ndeleted file mode 100644\nindex 757b6129f6..0000000000\n--- a/Products/CMFPlone/tests/testPloneFolder.py\n+++ /dev/null\n@@ -1,176 +0,0 @@\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-from Products.CMFPlone.utils import _createObjectByType\n-\n-from zExceptions import Unauthorized\n-from Products.CMFCore.permissions import DeleteObjects\n-\n-from zExceptions import BadRequest\n-from zExceptions.unauthorized import Unauthorized as zUnauthorized\n-\n-\n-class TestPloneFolder(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        # Create a bunch of subfolders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub3\')\n-\n-    def testGetObjectPosition(self):\n-        self.assertEqual(self.folder.getObjectPosition(\'sub1\'), 0)\n-\n-    def testGetObjectPositionRaisesError(self):\n-        self.assertRaises(ValueError, self.folder.getObjectPosition, \'foobar\')\n-\n-    def testSortOrder(self):\n-        self.assertEqual(self.folder.objectIds(),\n-                         [\'sub1\', \'sub2\', \'sub3\'])\n-\n-    def testCanViewManagementScreen(self):\n-        # Make sure the ZMI management screen works\n-        self.folder.manage_main()\n-\n-\n-class TestCheckIdAvailable(PloneTestCase.PloneTestCase):\n-    # PortalFolder.checkIdAvailable() did not properly catch\n-    # zExceptions.BadRequest.\n-    # Fixed in CMFCore.PortalFolder, not Plone.\n-\n-    def testSetObjectRaisesBadRequest(self):\n-        # _setObject() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._setObject(\'foo\', dummy.Item())\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdRaisesBadRequest(self):\n-        # _checkId() should raise zExceptions.BadRequest\n-        # on duplicate id.\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        try:\n-            self.folder._checkId(\'foo\')\n-        except BadRequest:\n-            pass\n-\n-    def testCheckIdAvailableCatchesBadRequest(self):\n-        # checkIdAvailable() should catch zExceptions.BadRequest\n-        self.folder._setObject(\'foo\', dummy.Item())\n-        self.assertFalse(self.folder.checkIdAvailable(\'foo\'))\n-\n-\n-class TestFolderListing(PloneTestCase.PloneTestCase):\n-    # Tests for http://dev.plone.org/plone/ticket/3512\n-\n-    def afterSetUp(self):\n-        self.workflow = self.portal.portal_workflow\n-        # Create some objects to list\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.folder.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc1\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc2\')\n-        self.setupAuthenticator()\n-\n-    def _contentIds(self, folder):\n-        return [ob.getId() for ob in folder.listFolderContents()]\n-\n-    def testListFolderContentsOmitsPrivateObjects(self):\n-        self.workflow.doActionFor(self.folder.doc1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub1\', \'sub2\', \'doc2\'])\n-\n-    def testListFolderContentsOmitsPrivateFolders(self):\n-        self.workflow.doActionFor(self.folder.sub1, \'hide\')\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder),\n-                         [\'sub2\', \'doc1\', \'doc2\'])\n-\n-    def testBugReport(self):\n-        # Perform the steps-to-reproduce in the collector issue:\n-\n-        # 2)\n-        self.folder.invokeFactory(\'Folder\', id=\'A\')\n-        self.workflow.doActionFor(self.folder.A, \'publish\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 3)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Document\', id=\'B\')\n-        self.folder.A.B.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-        # 4)\n-        self.login()\n-        self.folder.A.invokeFactory(\'Folder\', id=\'C\')\n-        self.folder.A.C.manage_permission(\'View\', [\'Manager\', \'Reviewer\'],\n-                                          acquire=0)\n-\n-        # Here comes the reported bug:\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [\'C\'])\n-\n-        # 4a)\n-        # BUT: removing \'View\' is simply not enough!\n-        # When using the workflow all is fine:\n-        self.login()\n-        self.workflow.doActionFor(self.folder.A.C, \'hide\')\n-\n-        self.logout()\n-        self.assertEqual(self._contentIds(self.folder.A), [])\n-\n-\n-class TestManageDelObjects(PloneTestCase.PloneTestCase):\n-    # manage_delObjects should check \'Delete objects\'\n-    # permission on contained items.\n-\n-    def afterSetUp(self):\n-        # Create a bunch of folders\n-        self.folder.invokeFactory(\'Folder\', id=\'sub1\')\n-        self.sub1 = self.folder.sub1\n-        self.sub1.invokeFactory(\'Folder\', id=\'sub2\')\n-        self.sub2 = self.sub1.sub2\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should NOT be able to delete sub1 due to permission checks in\n-        # Archetypes.BaseFolder.manage_delObjects().\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.folder.manage_delObjects, \'sub1\')\n-\n-    def testManageDelObjectsIfSub2Denied(self):\n-        # We are able to delete sub1 if sub2 is denied\n-        # -> the check is only 1 level deep!\n-        self.sub2.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.folder.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.folder.objectIds())\n-\n-\n-class TestManageDelObjectsInPortal(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        _createObjectByType(\'Folder\', self.portal, id=\'sub1\')\n-        self.sub1 = self.portal.sub1\n-\n-    def testManageDelObjects(self):\n-        # Should be able to delete sub1\n-        self.portal.manage_delObjects(\'sub1\')\n-        self.assertFalse(\'sub1\' in self.portal.objectIds())\n-\n-    def testManageDelObjectsIfSub1Denied(self):\n-        # Should be able to delete sub1 as the portal does not implement\n-        # additional permission checks.\n-        self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(zUnauthorized, self.portal.manage_delObjects, \'sub1\')\ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 9ae991a515..459d21d01e 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -552,21 +552,6 @@ class TestIDGenerationMethods(PloneTestCase.PloneTestCase):\n     def afterSetUp(self):\n         self.utils = self.portal.plone_utils\n \n-    def testAutoGeneratedId(self):\n-        r = self.utils.isIDAutoGenerated(\'document.2004-11-09.0123456789\')\n-        self.assertEqual(r, True)\n-\n-    def testValidPortalTypeNameButNotAutoGeneratedId(self):\n-        # This was raising an IndexError exception for\n-        # Zope < 2.7.3 (DateTime.py < 1.85.12.11) and a\n-        # SyntaxError for Zope >= 2.7.3 (DateTime.py >= 1.85.12.11)\n-        r = self.utils.isIDAutoGenerated(\'document.tar.gz\')\n-        self.assertEqual(r, False)\n-        r = self.utils.isIDAutoGenerated(\'document.tar.12/32/2004\')\n-        self.assertEqual(r, False)\n-        r = self.utils.isIDAutoGenerated(\'document.tar.12/31/2004 12:62\')\n-        self.assertEqual(r, False)\n-\n     def test_pretty_title_or_id_returns_title(self):\n         self.folder.setTitle(\'My pretty title\')\n         self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n@@ -577,17 +562,6 @@ def test_pretty_title_or_id_returns_id(self):\n         self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n                          self.folder.getId())\n \n-    def test_pretty_title_or_id_when_autogenerated(self):\n-        self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.setTitle(\'\')\n-        self.folder.__parent__.manage_renameObject(\n-            self.folder.id, \'folder.2004-11-09.0123456789\')\n-        self.folder.reindexObject()\n-        self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n-                         self.utils.getEmptyTitle())\n-        self.assertEqual(self.utils.pretty_title_or_id(self.folder, \'Marker\'),\n-                         \'Marker\')\n-\n     def test_pretty_title_or_id_works_with_method_that_needs_context(self):\n         self.setRoles([\'Manager\', \'Member\'])\n         # Create a dummy class that looks at it\'s context to find the title\n@@ -621,19 +595,6 @@ def test_pretty_title_or_id_on_catalog_brain_returns_id(self):\n         self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n                          self.folder.getId())\n \n-    def test_pretty_title_or_id_on_catalog_brain_autogenerated(self):\n-        cat = self.portal.portal_catalog\n-        self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.__parent__.manage_renameObject(\n-            self.folder.id, \'folder.2004-11-09.0123456789\')\n-        self.folder.title = \'\'\n-        self.folder.subject = (\'foobar\',)\n-        self.folder.reindexObject()\n-        results = cat(Subject=\'foobar\')\n-        self.assertEqual(len(results), 1)\n-        self.assertEqual(self.utils.pretty_title_or_id(results[0], \'Marker\'),\n-                         \'Marker\')\n-\n     def test_pretty_title_or_id_on_catalog_brain_no_title(self):\n         cat = self.portal.portal_catalog\n         self.setRoles([\'Manager\', \'Member\'])\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 87a3df71b3..e94f7446ea 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -140,31 +140,6 @@ def createSiteMap(context, request, sitemap=False):\n     return view.siteMap()\n \n \n-def isIDAutoGenerated(context, id):\n-    # In 2.1 non-autogenerated is the common case, caught exceptions are\n-    # expensive, so let\'s make a cheap check first\n-    if id.count(\'.\') < 2:\n-        return False\n-\n-    pt = getToolByName(context, \'portal_types\')\n-    portaltypes = pt.listContentTypes()\n-    portaltypes.extend([t.lower() for t in portaltypes])\n-\n-    try:\n-        parts = id.split(\'.\')\n-        random_number = parts.pop()\n-        date_created = parts.pop()\n-        obj_type = \'.\'.join(parts)\n-        type = \' \'.join(obj_type.split(\'_\'))\n-        # New autogenerated ids may have a lower case portal type\n-        if ((type in portaltypes or obj_type in portaltypes) and\n-                DateTime(date_created) and float(random_number)):\n-            return True\n-    except (ValueError, AttributeError, IndexError, DateTimeError):\n-        pass\n-\n-    return False\n-\n \n def isExpired(content):\n     """ Find out if the object is expired (copied from skin script) """\n@@ -217,7 +192,7 @@ def pretty_title_or_id(context, obj, empty_value=_marker):\n     item_id = getattr(obj, \'getId\', None)\n     if safe_callable(item_id):\n         item_id = item_id()\n-    if item_id and not isIDAutoGenerated(context, item_id):\n+    if item_id:\n         return item_id\n     if empty_value is _marker:\n         empty_value = getEmptyTitle(context)\ndiff --git a/news/3487.breaking b/news/3487.breaking\nnew file mode 100644\nindex 0000000000..d0f16829e5\n--- /dev/null\n+++ b/news/3487.breaking\n@@ -0,0 +1,3 @@\n+Remove Archtypes specific `isIDAutoGenerated` helper.\n+This was dead code not used anywhere in Plone 6.\n+[jensens]\ndiff --git a/news/3492.breaking b/news/3492.breaking\nnew file mode 100644\nindex 0000000000..ed0636aaf2\n--- /dev/null\n+++ b/news/3492.breaking\n@@ -0,0 +1,3 @@\n+`PloneFolder` was once used with early Archetypes. \n+This code is dead now and got removed.\n+[jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-04-11T11:31:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/597a618e51b4c4a38b68514f1c36d3beb2744e00

Merge pull request #3495 from plone/search-and-test

Search and test

Files changed:
A Products/CMFPlone/tests/robot/plone-logo.png
A news/3495.feature
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/tests/robot/test_livesearch.robot

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 8e396ed2ed..c44596fe4c 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -231,6 +231,16 @@ def navroot_url(self):\n             self._navroot_url = state.navigation_root_url()\n         return self._navroot_url\n \n+    @property\n+    def show_images(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_show_images\')\n+\n+    @property\n+    def search_image_scale(self):\n+        registry = queryUtility(IRegistry)\n+        return registry.get(\'plone.search_image_scale\')\n+\n \n class AjaxSearch(Search):\n \ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex ef4d271e8d..31f2004a97 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -75,30 +75,19 @@\n           </h1>\n         </div>\n \n-        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n-            tal:condition="context/@@syndication-util/search_rss_enabled">\n-          <a class="nav-link"\n-             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n-              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n-              <span i18n:translate="title_subscribe_rss_feed">\n-                Subscribe to an always-updated RSS feed.\n-              </span>\n-          </a>\n-        </div>\n+        <div class="d-flex mb-2">\n \n-        <ul class="nav nav-tabs">\n-\n-          <li class="nav-item">\n-            <a class="nav-link active" aria-current="page" href="#">\n-              <span i18n:translate="batch_x_items_matching_your_criteria" i18n:domain="plone" id="results-count" >\n-                <span i18n:name="number" id="search-results-number" class="badge bg-primary"\n+          <div class="flex-fill">\n+            <a class="nav-link active ps-2" aria-current="page" href="#">\n+              <span i18n:translate="batch_x_items_matching_your_criteria" class="d-flex" i18n:domain="plone" id="results-count" >\n+                <span i18n:name="number" id="search-results-number" class="badge bg-primary me-2 d-flex justify-content-center align-items-center"\n                       tal:content="batch/sequence_length|string:0">234</span>\n                   items matching your search terms.\n               </span>\n             </a>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown ms-auto" id="search-filter">\n+          <div class="nav-item dropdown" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\n@@ -174,9 +163,9 @@\n                 </div>\n               </div>\n             </div>\n-          </li>\n+          </div>\n \n-          <li class="nav-item dropdown">\n+          <div class="nav-item dropdown">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" i18n:translate="sort_by">Sort by</a>\n             <ul class="dropdown-menu dropdown-menu-md-end" id="sorting-options">\n               <li tal:repeat="item view/sort_options">\n@@ -185,16 +174,18 @@\n                    tal:content="item/title">sort option</a>\n               </li>\n             </ul>\n-          </li>\n+          </div>\n \n-        </ul>\n+        </div>\n \n         <div id="search-results-wrapper">\n \n           <metal:searchresults define-macro="search_results">\n \n             <div id="search-results"\n-                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"\n+                 tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;\n+                             show_images python:view.show_images;\n+                             search_image_scale python:view.search_image_scale;"\n                  data-default-sort="${python:request.get(\'sort_on\') or view.default_sort_on}">\n \n               <metal:noresults tal:condition="not: batch">\n@@ -208,96 +199,107 @@\n                                          allowAnonymousViewAbout python:context.portal_registry[\'plone.allow_anon_views_about\'];\n                                          show_about python:not isAnon or allowAnonymousViewAbout;\n                                          image_scale portal/@@image_scale">\n-                <ol class="searchResults" start="${python:request.get(\'b_start\', 0) + 1}">\n+                <ol class="searchResults list-group list-group-numbered" start="${python:request.get(\'b_start\', 0) + 1}">\n                   <tal:results repeat="item batch">\n-                    <li tal:define="hasIcon item/getIcon" class="my-3 pb-3 border-bottom">\n-                      <span class="result-title">\n-                        <img class="thumb-icon"\n-                             tal:condition="hasIcon"\n-                             tal:replace="structure python: image_scale.tag(item, \'image\', scale=\'icon\', css_class=\'thumb-icon\')">\n-                        <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n-                           class="state-${item/review_state}"\n-                           tal:define="item_url item/getURL;\n-                                       item_type item/PortalType"\n-                           tal:content="python:item.getDataOrigin().pretty_title_or_id()" />\n-                      </span>\n-\n-                      <small class="text-muted" i18n:domain="plone"\n-                            tal:condition="show_about">\n-                        <span class="documentAuthor"\n-                              i18n:translate="label_by_author">\n-                          by\n-                          <tal:block tal:condition="item/Creator"\n-                                     tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n-                            <a href="${navigation_root_url}/author/${item/Creator}"\n-                               tal:content="python:author and author[\'fullname\'] or item.Creator()"\n-                               tal:omit-tag="not:item/Creator"\n-                               i18n:name="author">\n-                                Bob Dobalina\n-                            </a>\n-                          </tal:block>\n-                        </span>\n-                        <span tal:define="publication_date item/EffectiveDate;\n-                                          modification_date item/ModificationDate">\n-\n-                          <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n-                            &mdash;\n-                            <span i18n:translate="box_published">\n-                              published\n+                    <li tal:define="hasIcon item/getIcon" class="list-group-item list-group-item-action d-flex justify-content-between align-items-start  fs-4">\n+                      <div class="ms-2 me-auto">\n+                        <div class="result-title">\n+                          <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                            class="state-${item/review_state}"\n+                            tal:define="item_url item/getURL;\n+                                        item_type item/PortalType">\n+                                        <span tal:replace="python:item.getDataOrigin().pretty_title_or_id()"></span>\n+                          </a>\n+                        </div>\n+\n+                        <small class="text-muted small fs-6" i18n:domain="plone"\n+                              tal:condition="show_about">\n+                          <span class="documentAuthor"\n+                                i18n:translate="label_by_author">\n+                            by\n+                            <tal:block tal:condition="item/Creator"\n+                                      tal:define="author python:context.portal_membership.getMemberInfo(item.Creator())">\n+                              <a href="${navigation_root_url}/author/${item/Creator}"\n+                                tal:content="python:author and author[\'fullname\'] or item.Creator()"\n+                                tal:omit-tag="not:item/Creator"\n+                                i18n:name="author">\n+                                  Bob Dobalina\n+                              </a>\n+                            </tal:block>\n+                          </span>\n+                          <span tal:define="publication_date item/EffectiveDate;\n+                                            modification_date item/ModificationDate">\n+\n+                            <span class="documentPublished" tal:condition="python: publication_date != \'None\'">\n+                              &mdash;\n+                              <span i18n:translate="box_published">\n+                                published\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n-                            <span tal:replace="python:toLocalizedTime(publication_date, long_format=0)">\n-                              August 16, 2001 at 23:35:59\n+\n+                            <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                              &mdash;\n+                              <span i18n:translate="box_last_modified">\n+                                last modified\n+                              </span>\n+                              <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n+                                August 16, 2001 at 23:35:59\n+                              </span>\n                             </span>\n                           </span>\n-\n-                          <span class="documentModified" tal:condition="python: modification_date != publication_date">\n+                          <span tal:define="categories item/Subject|nothing"\n+                                tal:condition="categories">\n                             &mdash;\n-                            <span i18n:translate="box_last_modified">\n-                              last modified\n-                            </span>\n-                            <span tal:replace="python:toLocalizedTime(modification_date, long_format=1)">\n-                              August 16, 2001 at 23:35:59\n+                            <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n+                            <span tal:repeat="category categories">\n+                              <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n+                                tal:content="category">\n+                                Category\n+                              </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n                             </span>\n                           </span>\n-                        </span>\n-                        <span tal:define="categories item/Subject|nothing"\n-                              tal:condition="categories">\n-                          &mdash;\n-                          <tal:filedunder i18n:translate="">filed under:</tal:filedunder>\n-                          <span tal:repeat="category categories">\n-                            <a href="${navigation_root_url}/@@search?Subject%3Alist=${category}" class="link-category" rel="tag"\n-                               tal:content="category">\n-                              Category\n-                            </a><tal:separator condition="not: repeat/category/end">,</tal:separator>\n+                        </small>\n+\n+                        <div class="croppedDescription mt-2 mb-2 fs-5 fw-light"\n+                          tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n+                          Cropped description\n+                        </div>\n+\n+                        <cite class="d-block small text-muted fs-6"\n+                              tal:define="breadcrumbs python: view.breadcrumbs(item);\n+                                          is_rtl context/@@plone_portal_state/is_rtl;"\n+                              tal:condition=\'breadcrumbs\'>\n+                          <span i18n:translate="text_searchitem_location">\n+                            Located in\n+                          </span>\n+                          <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n+                                tal:repeat="crumb breadcrumbs">\n+                            <tal:item tal:define="is_last repeat/crumb/end;\n+                                                  url crumb/absolute_url;\n+                                                  title crumb/Title">\n+                              <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n+                              <span class="breadcrumbSeparator" tal:condition="not: is_last">\n+                                <tal:ltr condition="not: is_rtl">/</tal:ltr>\n+                                <tal:rtl condition="is_rtl">/</tal:rtl>\n+                              </span>\n+                            </tal:item>\n                           </span>\n-                        </span>\n-                      </small>\n+                        </cite>\n \n-                      <div class="croppedDescription"\n-                         tal:condition="item/CroppedDescription" tal:content="item/CroppedDescription">\n-                        Cropped description\n                       </div>\n \n-                      <cite class="d-block small text-muted"\n-                            tal:define="breadcrumbs python: view.breadcrumbs(item);\n-                                        is_rtl context/@@plone_portal_state/is_rtl;"\n-                            tal:condition=\'breadcrumbs\'>\n-                        <span i18n:translate="text_searchitem_location">\n-                          Located in\n-                        </span>\n-                        <span dir="${python:\'rtl\' if is_rtl else \'ltr\'}"\n-                              tal:repeat="crumb breadcrumbs">\n-                          <tal:item tal:define="is_last repeat/crumb/end;\n-                                                url crumb/absolute_url;\n-                                                title crumb/Title">\n-                            <a href="${url}" tal:omit-tag="not: url" tal:content="title">crumb</a>\n-                            <span class="breadcrumbSeparator" tal:condition="not: is_last">\n-                              <tal:ltr condition="not: is_rtl">/</tal:ltr>\n-                              <tal:rtl condition="is_rtl">/</tal:rtl>\n-                            </span>\n-                          </tal:item>\n-                        </span>\n-                      </cite>\n+                      <a href="${python:(item_url + \'/view\') if item_type in use_view_action else item_url}"\n+                          class="state-${item/review_state}"\n+                          tal:define="item_url item/getURL;\n+                                    item_type item/PortalType">\n+                          <img class="thumb-icon"\n+                            tal:condition="python: show_images and hasIcon"\n+                            tal:replace="structure python: image_scale.tag(item, \'image\', scale=search_image_scale, css_class=\'thumb-icon\')">\n+                      </a>\n+\n                     </li>\n                   </tal:results>\n                 </ol>\n@@ -309,6 +311,17 @@\n \n         </div>\n \n+        <div class="my-3" id="rss-subscription" i18n:domain="plone"\n+            tal:condition="context/@@syndication-util/search_rss_enabled">\n+          <a class="mx-2 text-decoration-none -flex  align-items-center"\n+             href="${context/@@plone_context_state/object_url}/search_rss?${request/QUERY_STRING}">\n+              <img tal:replace="structure python:icons.tag(\'rss-fill\')" />\n+              <span i18n:translate="title_subscribe_rss_feed" class="ms-1">\n+                Subscribe to an always-updated RSS feed.\n+              </span>\n+          </a>\n+        </div>\n+\n     </form>\n   </div>\n \ndiff --git a/Products/CMFPlone/tests/robot/plone-logo.png b/Products/CMFPlone/tests/robot/plone-logo.png\nnew file mode 100644\nindex 0000000000..4c109bab8d\nBinary files /dev/null and b/Products/CMFPlone/tests/robot/plone-logo.png differ\ndiff --git a/Products/CMFPlone/tests/robot/test_livesearch.robot b/Products/CMFPlone/tests/robot/test_livesearch.robot\nindex 5fa969e01c..0cbbb8280d 100644\n--- a/Products/CMFPlone/tests/robot/test_livesearch.robot\n+++ b/Products/CMFPlone/tests/robot/test_livesearch.robot\n@@ -6,6 +6,8 @@ Resource  plone/app/robotframework/selenium.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n+Variables  Products/CMFPlone/tests/robot/variables.py\n+\n Resource  keywords.robot\n \n Test Setup  Run keywords  Plone Test Setup\n@@ -14,58 +16,69 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n *** Test cases ***************************************************************\n \n+\n Scenario: Simple Livesearch\n-    Pass Execution  Disabled until livesearch pattern is integrated\n     Given a logged-in site administrator\n       and a document  Welcome to Plone\n      When I search for  Welcome\n      Then the livesearch results should contain  Welcome to Plone\n-      and there should be \'2\' livesearch results\n+      and expected livesearch results  1\n \n-Scenario: Livesearch for documents\n-    Pass Execution  Disabled until livesearch pattern is integrated\n+Scenario: Livesearch with image results\n     Given a logged-in site administrator\n-      and a document  My document\n-     When I search for  My document\n-     Then the livesearch results should contain  My document\n-      and there should be \'2\' livesearch results\n+      and a news item  My News with Image\n+     When I search for  My News\n+     Then the livesearch results should contain  My News with Image\n+      and expected livesearch results  1\n+      and Page should contain image  css=.livesearch-results li.search-result .col.img img\n \n-Scenario: Livesearch for folder\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder  My folder\n-     When I search for  My folder\n-     Then the livesearch results should contain  My folder\n-      and there should be \'2\' livesearch results\n-\n-Scenario: Livesearch in current folder only\n-    Pass Execution  Disabled until livesearch pattern is integrated\n-    Given a logged-in site administrator\n-      and a folder with a document \'Inside Document\'\n-      and a document  Outside Document\n-     When I search the currentfolder only for  Inside Document\n-     Then the livesearch results should contain  Inside Document\n-      and the livesearch results should not contain  Outside Document\n-      and there should be \'2\' livesearch results\n+     When I disable images in results in search controlpanel\n+      and I search for  My News\n+     Then Page should not contain image  css=.livesearch-results li.search-result .col.img img\n \n \n *** Keywords *****************************************************************\n \n+a document\n+    [Arguments]  ${title}\n+    Create content  type=Document  id=doc  title=${title}\n+\n+a news item\n+    [Arguments]  ${title}\n+    Go to  ${PLONE_URL}/++add++News Item\n+    Wait until page contains  Add News Item\n+    Input text  name=form.widgets.IDublinCore.title  ${title}\n+    Choose File  name=form.widgets.ILeadImageBehavior.image  ${PATH_TO_TEST_FILES}/plone-logo.png\n+    Click Button  Save\n+    Wait until page contains  Item created  error=Image could not be created.\n+\n I search for\n     [Arguments]  ${searchtext}\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n I search the currentfolder only for\n     [Arguments]  ${searchtext}\n     Select checkbox  id=searchbox_currentfolder_only\n     Input text  css=input#searchGadget  ${searchtext}\n-    Focus  css=input#searchGadget\n+    Set Focus To Element  css=input#searchGadget\n \n the livesearch results should contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Element should contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Element should contain  css=.livesearch-results li a .heading  ${text}\n \n the livesearch results should not contain\n     [Arguments]  ${text}\n-    Wait until keyword succeeds  5s  1s  Page should not contain  css=#LSResult .LSRow a  ${text}\n+    Wait until keyword succeeds  5s  1s  Page should not contain  css=.livesearch-results li a .heading  ${text}\n+\n+expected livesearch results\n+    [Arguments]  ${num}\n+    ${count} =  Get Element Count  css=.livesearch-results li.search-result\n+    Should Be Equal as Numbers  ${count}  ${num}\n+\n+I disable images in results in search controlpanel\n+    Go to  ${PLONE_URL}/@@search-controlpanel\n+    Wait until page contains  Search Settings\n+    Unselect Checkbox  form.widgets.search_show_images:list\n+    Click Button  Save\n+    Wait until page contains  Changes saved\ndiff --git a/news/3495.feature b/news/3495.feature\nnew file mode 100644\nindex 0000000000..f5f0505020\n--- /dev/null\n+++ b/news/3495.feature\n@@ -0,0 +1,2 @@\n+Add support for images in default search page.\n+[agitator]\n\\ No newline at end of file\n'

