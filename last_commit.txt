Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T12:22:18+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/44d6cf2ff4948ba26ea569e8fc4f4898a22d964b

Add black .flake8 file.

Files changed:
A .flake8

b'diff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 00000000..1a35f4e1\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,6 @@\n+# https://github.com/ambv/black/blob/master/.flake8\n+[flake8]\n+ignore = E203, E266, E501, W503\n+max-line-length = 80\n+max-complexity = 25\n+select = B,C,E,F,W,T4,B9\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T12:26:50+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/35ebc41bb5d40b0183e461cbc1d48143a594725f

Black.

Files changed:
M src/plone/__init__.py
M src/plone/restapi/__init__.py
M src/plone/restapi/batching.py
M src/plone/restapi/behaviors.py
M src/plone/restapi/controlpanels.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/imaging.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/permissions.py
M src/plone/restapi/search/date_recurring_index.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/search/query.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/collection.py
M src/plone/restapi/serializer/controlpanels.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/local_roles.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/serializer/relationfield.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/actions/get.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/services/breadcrumbs/get.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/delete.py
M src/plone/restapi/services/content/get.py
M src/plone/restapi/services/content/sharing.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/update.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/services/controlpanels/patch.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/discussion/utils.py
M src/plone/restapi/services/email_notification/post.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/locking/locking.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/principals/get.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/registry/update.py
M src/plone/restapi/services/roles/get.py
M src/plone/restapi/services/search/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/attypes.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_boolean_value.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_imaging.py
M src/plone/restapi/tests/test_locking.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_profile_tiles.py
M src/plone/restapi/tests/test_query_parsers.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_serializer_user.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_content.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrades.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/types/z3crelationadapter.py
M src/plone/restapi/upgrades/to0002.py
M src/plone/restapi/upgrades/to0003.py
M src/plone/restapi/upgrades/to0004.py

b'diff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex cf140252..a6dbf5d6 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -1,32 +1,34 @@\n # -*- coding: utf-8 -*-\n from AccessControl import allow_module\n from AccessControl.Permissions import add_user_folders\n-from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin  # noqa\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    registerMultiPlugin,\n+)  # noqa\n from plone.restapi.pas import plugin\n from zope.i18nmessageid import MessageFactory\n \n import pkg_resources\n \n-_ = MessageFactory(\'plone.restapi\')\n-PROJECT_NAME = \'plone.restapi\'\n+_ = MessageFactory("plone.restapi")\n+PROJECT_NAME = "plone.restapi"\n \n \n-allow_module(\'json\')\n+allow_module("json")\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.testing\')\n+    pkg_resources.get_distribution("plone.app.testing")\n     REGISTER_TEST_TYPES = True\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     REGISTER_TEST_TYPES = False\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n     HAS_PLONE_APP_CONTENTTYPES = True\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n try:\n-    pkg_resources.get_distribution(\'Products.Archetypes\')\n+    pkg_resources.get_distribution("Products.Archetypes")\n except pkg_resources.DistributionNotFound:\n     HAS_AT = False\n else:\n@@ -40,7 +42,7 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             plugin.manage_addJWTAuthenticationPlugin,\n-            plugin.addJWTAuthenticationPlugin\n+            plugin.addJWTAuthenticationPlugin,\n         ),\n         visibility=None,\n     )\n@@ -52,12 +54,11 @@ def initialize(context):\n         from plone.restapi.tests.attypes import PROJECTNAME\n \n         content_types, constructors, ftis = process_types(\n-            listTypes(PROJECTNAME),\n-            PROJECTNAME\n+            listTypes(PROJECTNAME), PROJECTNAME\n         )\n \n         utils.ContentInit(\n-            \'%s Content\' % PROJECTNAME,\n+            "%s Content" % PROJECTNAME,\n             content_types=content_types,\n             permission=permissions.AddPortalContent,\n             extra_constructors=constructors,\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex c0126c77..c25479d5 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -8,12 +8,11 @@\n \n \n class HypermediaBatch(object):\n-\n     def __init__(self, request, results):\n         self.request = request\n \n-        self.b_start = int(self.request.form.get(\'b_start\', 0))\n-        self.b_size = int(self.request.form.get(\'b_size\', DEFAULT_BATCH_SIZE))\n+        self.b_start = int(self.request.form.get("b_start", 0))\n+        self.b_size = int(self.request.form.get("b_size", DEFAULT_BATCH_SIZE))\n \n         self.batch = Batch(results, self.b_size, self.b_start)\n \n@@ -34,28 +33,27 @@ def canonical_url(self):\n         preserving query string params, but stripping all batching related\n         params from it.\n         """\n-        url = self.request[\'ACTUAL_URL\']\n-        qs_params = parse_qsl(self.request[\'QUERY_STRING\'])\n+        url = self.request["ACTUAL_URL"]\n+        qs_params = parse_qsl(self.request["QUERY_STRING"])\n \n         # Remove any batching / sorting related parameters.\n         # Also take care to preserve list-like query string params.\n         for key, value in qs_params[:]:\n-            if key in (\'b_size\', \'b_start\',\n-                       \'sort_on\', \'sort_order\', \'sort_limit\'):\n+            if key in ("b_size", "b_start", "sort_on", "sort_order", "sort_limit"):\n                 qs_params.remove((key, value))\n \n         qs = urlencode(qs_params)\n \n         if qs_params:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\n \n     @property\n     def current_batch_url(self):\n-        url = self.request[\'ACTUAL_URL\']\n-        qs = self.request[\'QUERY_STRING\']\n+        url = self.request["ACTUAL_URL"]\n+        qs = self.request["QUERY_STRING"]\n         if qs:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\n \n     @property\n@@ -73,15 +71,15 @@ def links(self):\n         next = self.batch.next\n         prev = self.batch.previous\n \n-        links[\'@id\'] = self.current_batch_url\n-        links[\'first\'] = self._url_for_batch(first)\n-        links[\'last\'] = self._url_for_batch(last)\n+        links["@id"] = self.current_batch_url\n+        links["first"] = self._url_for_batch(first)\n+        links["last"] = self._url_for_batch(last)\n \n         if next:\n-            links[\'next\'] = self._url_for_batch(next)\n+            links["next"] = self._url_for_batch(next)\n \n         if prev:\n-            links[\'prev\'] = self._url_for_batch(prev)\n+            links["prev"] = self._url_for_batch(prev)\n \n         return links\n \n@@ -89,9 +87,8 @@ def _batch_for_page(self, pagenumber):\n         """Return a new Batch object for the given pagenumber.\n         """\n         new_batch = Batch.fromPagenumber(\n-            self.batch._sequence,\n-            pagesize=self.b_size,\n-            pagenumber=pagenumber)\n+            self.batch._sequence, pagesize=self.b_size, pagenumber=pagenumber\n+        )\n         return new_batch\n \n     def _url_for_batch(self, batch):\n@@ -101,15 +98,15 @@ def _url_for_batch(self, batch):\n         # Make sure we account for plone.batching\'s one-based indexing and\n         # that the start never drops below zero\n         new_start = max(0, batch.start - 1)\n-        url = self._url_with_params(params={\'b_start\': new_start})\n+        url = self._url_with_params(params={"b_start": new_start})\n         return url\n \n     def _url_with_params(self, params):\n         """Build an URL based on the actual URL of the current request URL\n         and add or update some query string parameters in it.\n         """\n-        url = self.request[\'ACTUAL_URL\']\n-        qs_params = parse_qsl(self.request[\'QUERY_STRING\'])\n+        url = self.request["ACTUAL_URL"]\n+        qs_params = parse_qsl(self.request["QUERY_STRING"])\n \n         # Take care to preserve list-like query string arguments (same QS\n         # param repeated multiple times). In other words, don\'t turn the\n@@ -122,5 +119,5 @@ def _url_with_params(self, params):\n         qs = urlencode(qs_params)\n \n         if qs_params:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex cba56701..3711f31e 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -8,42 +8,33 @@\n import json\n \n \n-TILES_SCHEMA = json.dumps({\n-    \'type\': \'object\',\n-    \'properties\': {},\n-})\n-\n-LAYOUT_SCHEMA = json.dumps({\n-    \'type\': \'object\',\n-    \'properties\': {\n-        \'items\': {\n-            \'type\': \'array\',\n-            \'items\': {\n-                \'type\': \'string\'\n-            }\n-        }\n+TILES_SCHEMA = json.dumps({"type": "object", "properties": {}})\n+\n+LAYOUT_SCHEMA = json.dumps(\n+    {\n+        "type": "object",\n+        "properties": {"items": {"type": "array", "items": {"type": "string"}}},\n     }\n-})\n+)\n \n \n @provider(IFormFieldProvider)\n class ITiles(model.Schema):\n \n-    model.fieldset(\'layout\', label=_(u\'Layout\'),\n-                   fields=[\'tiles\', \'tiles_layout\'])\n+    model.fieldset("layout", label=_(u"Layout"), fields=["tiles", "tiles_layout"])\n \n     tiles = JSONField(\n-        title=u\'Tiles\',\n-        description=u\'The JSON representation of the object tiles information. Must be a JSON object.\',  # noqa\n+        title=u"Tiles",\n+        description=u"The JSON representation of the object tiles information. Must be a JSON object.",  # noqa\n         schema=TILES_SCHEMA,\n         default={},\n         required=False,\n     )\n \n     tiles_layout = JSONField(\n-        title=u\'Tiles Layout)\',\n-        description=u\'The JSON representation of the object tiles layout. Must be a JSON array.\',  # noqa\n+        title=u"Tiles Layout)",\n+        description=u"The JSON representation of the object tiles layout. Must be a JSON array.",  # noqa\n         schema=LAYOUT_SCHEMA,\n-        default={\'items\': []},\n+        default={"items": []},\n         required=False,\n     )\ndiff --git a/src/plone/restapi/controlpanels.py b/src/plone/restapi/controlpanels.py\nindex 04d9bbf2..9b954f6d 100644\n--- a/src/plone/restapi/controlpanels.py\n+++ b/src/plone/restapi/controlpanels.py\n@@ -17,13 +17,15 @@\n \n \n class IControlpanel(Interface):\n-    __name__ = Attribute(\'Name of the controlpanel in the URL\')\n-    title = Attribute(\'Title of this controlpanel\')\n-    group = Attribute(\'Group name of this controlpanel\')\n-    schema = Attribute(\'Registry schema of this controlpanel\')\n+    __name__ = Attribute("Name of the controlpanel in the URL")\n+    title = Attribute("Title of this controlpanel")\n+    group = Attribute("Group name of this controlpanel")\n+    schema = Attribute("Registry schema of this controlpanel")\n \n-    configlet_id = Attribute(\'Id the configlet, ie MailHost\')\n-    configlet_category_id = Attribute(\'Category of the configlet, ie plone-general\')  # noqa\n+    configlet_id = Attribute("Id the configlet, ie MailHost")\n+    configlet_category_id = Attribute(\n+        "Category of the configlet, ie plone-general"\n+    )  # noqa\n \n \n @implementer(IControlpanel)\n@@ -33,113 +35,115 @@ class RegistryConfigletPanel(object):\n     configlet_category_id = None\n     schema = None\n \n-    schema_prefix = \'plone\'\n+    schema_prefix = "plone"\n \n     def _get_configlet(self):\n-        configlet_data = self.portal_cp.enumConfiglets(\n-            self.configlet_category_id\n-        )\n+        configlet_data = self.portal_cp.enumConfiglets(self.configlet_category_id)\n         for action in configlet_data:\n-            if action[\'id\'] == self.configlet_id:\n+            if action["id"] == self.configlet_id:\n                 return action\n \n     def _get_group_title(self):\n         groups = [\n-            g for g in self.portal_cp.getGroups()\n-            if g[\'id\'] == self.configlet[\'category\']\n+            g\n+            for g in self.portal_cp.getGroups()\n+            if g["id"] == self.configlet["category"]\n         ]\n-        return [g[\'title\'] for g in groups][0]\n+        return [g["title"] for g in groups][0]\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-        self.portal_cp = getToolByName(self.context, \'portal_controlpanel\')\n+        self.portal_cp = getToolByName(self.context, "portal_controlpanel")\n \n         self.configlet = self._get_configlet()\n         if self.configlet:\n-            self.title = self.configlet[\'title\']\n+            self.title = self.configlet["title"]\n             self.group = self._get_group_title()\n \n \n # General\n \n+\n @adapter(Interface, Interface)\n class DateTimeControlpanel(RegistryConfigletPanel):\n     schema = IDateAndTimeSchema\n-    configlet_id = \'DateAndTime\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "DateAndTime"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class LanguageControlpanel(RegistryConfigletPanel):\n     schema = ILanguageSchema\n-    configlet_id = \'LanguageSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "LanguageSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class MailControlpanel(RegistryConfigletPanel):\n     schema = IMailSchema\n-    configlet_id = \'MailHost\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "MailHost"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class NavigationControlpanel(RegistryConfigletPanel):\n     schema = INavigationSchema\n-    configlet_id = \'NavigationSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "NavigationSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SiteControlpanel(RegistryConfigletPanel):\n     schema = ISiteSchema\n-    configlet_id = \'PloneReconfig\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "PloneReconfig"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SearchControlpanel(RegistryConfigletPanel):\n     schema = ISearchSchema\n-    configlet_id = \'SearchSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "SearchSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SocialMediaControlpanel(RegistryConfigletPanel):\n     schema = ISocialMediaSchema\n-    configlet_id = \'socialmedia\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "socialmedia"\n+    configlet_category_id = "plone-general"\n \n \n # Content\n \n+\n @adapter(Interface, Interface)\n class EditingControlpanel(RegistryConfigletPanel):\n     schema = IEditingSchema\n-    configlet_id = \'EditingSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "EditingSettings"\n+    configlet_category_id = "plone-content"\n \n \n @adapter(Interface, Interface)\n class ImagingControlpanel(RegistryConfigletPanel):\n     schema = IImagingSchema\n-    configlet_id = \'ImagingSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "ImagingSettings"\n+    configlet_category_id = "plone-content"\n \n \n @adapter(Interface, Interface)\n class MarkupControlpanel(RegistryConfigletPanel):\n     schema = IMarkupSchema\n-    configlet_id = \'MarkupSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "MarkupSettings"\n+    configlet_category_id = "plone-content"\n \n \n # Security\n \n+\n @adapter(Interface, Interface)\n class SecurityControlpanel(RegistryConfigletPanel):\n     schema = ISecuritySchema\n-    configlet_id = \'SecuritySettings\'\n-    configlet_category_id = \'plone-security\'\n+    configlet_id = "SecuritySettings"\n+    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 7c90983b..ee073d89 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -3,13 +3,13 @@\n \n \n class InternalServerErrorView(BrowserView):  # pragma: no cover\n-\n     def __call__(self):\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/internal_server_error\',\n+            "http://nohost/plone/internal_server_error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\ndiff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex 58207c54..a83443f3 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,11 +6,11 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\') or \'{}\')\n+        data = json.loads(request.get("BODY") or "{}")\n     except ValueError:\n-        raise DeserializationError(\'No JSON object could be decoded\')\n+        raise DeserializationError("No JSON object could be decoded")\n     if not isinstance(data, dict):\n-        raise DeserializationError(\'Malformed body\')\n+        raise DeserializationError("Malformed body")\n     return data\n \n \n@@ -25,4 +25,4 @@ def boolean_value(value):\n     Returns: a boolean\n \n     """\n-    return value not in {False, \'false\', \'False\', \'0\', 0}\n+    return value not in {False, "false", "False", "0", 0}\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex dd1be622..c4a3afa0 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -45,7 +45,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n \n             if name in data:\n                 deserializer = queryMultiAdapter(\n-                    (field, obj, self.request), IFieldDeserializer)\n+                    (field, obj, self.request), IFieldDeserializer\n+                )\n                 if deserializer is None:\n                     continue\n                 value, kwargs = deserializer(data[name])\n@@ -58,10 +59,10 @@ def __call__(self, validate_all=False, data=None, create=False):\n             if not validate_all:\n                 errors = {f: e for f, e in errors.items() if f in data}\n             if errors:\n-                errors = [{\n-                    \'message\': e,\n-                    \'field\': f,\n-                    \'error\': \'ValidationError\'} for f, e in errors.items()]\n+                errors = [\n+                    {"message": e, "field": f, "error": "ValidationError"}\n+                    for f, e in errors.items()\n+                ]\n                 raise BadRequest(errors)\n \n             if create:\n@@ -76,8 +77,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n \n         # We\'ll set the layout after the validation and and even if there\n         # are no other changes.\n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n@@ -108,8 +109,9 @@ def validate(self):\n                     else:\n                         errors[field_name] = error_message\n \n-        obj.Schema().validate(instance=obj, REQUEST=None,\n-                              errors=errors, data=True, metadata=True)\n+        obj.Schema().validate(\n+            instance=obj, REQUEST=None, errors=errors, data=True, metadata=True\n+        )\n \n         obj.post_validate(request, errors)\n \n@@ -152,6 +154,7 @@ def get(self, key, default=None):\n class ValidationRequestForm(dict):\n     """A request form dict that returns values from the content object.\n     """\n+\n     def __init__(self, request, context):\n         self.request = request\n         self.context = context\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 3ab58e06..5cb4be16 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -15,7 +15,6 @@\n @implementer(IFieldDeserializer)\n @adapter(IField, IBaseObject, IBrowserRequest)\n class DefaultFieldDeserializer(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         self.context = context\n@@ -28,24 +27,23 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IFileField, IBaseObject, IBrowserRequest)\n class FileFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         kwargs = {}\n         if isinstance(value, dict):\n-            if u\'content-type\' in value:\n-                kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n-            if u\'filename\' in value:\n-                kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n-            if u\'encoding\' in value:\n-                value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n+            if u"content-type" in value:\n+                kwargs[u"mimetype"] = value[u"content-type"].encode("utf8")\n+            if u"filename" in value:\n+                kwargs[u"filename"] = value[u"filename"].encode("utf8")\n+            if u"encoding" in value:\n+                value = value.get("data", "").decode(value[u"encoding"])\n             else:\n-                value = value.get(\'data\', \'\')\n+                value = value.get("data", "")\n         elif isinstance(value, TUSUpload):\n             metadata = value.metadata()\n-            if \'content-type\' in metadata:\n-                kwargs[u\'mimetype\'] = metadata[\'content-type\']\n-            if \'filename\' in metadata:\n-                kwargs[u\'filename\'] = metadata[\'filename\']\n+            if "content-type" in metadata:\n+                kwargs[u"mimetype"] = metadata["content-type"]\n+            if "filename" in metadata:\n+                kwargs[u"filename"] = metadata["filename"]\n             value = value.open()\n \n         return value, kwargs\n@@ -60,10 +58,10 @@ class BlobFieldDeserializer(FileFieldDeserializer):\n @implementer(IFieldDeserializer)\n @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        portal = getMultiAdapter((self.context, self.request),\n-                                 name=\'plone_portal_state\').portal()\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         portal_url = portal.absolute_url()\n \n         if not isinstance(value, list):\n@@ -72,7 +70,7 @@ def __call__(self, value):\n         for i, v in enumerate(value):\n             # Resolve references given by URL\n             if v.startswith(portal_url):\n-                path = v[len(portal_url) + 1:].encode(\'utf8\')\n+                path = v[len(portal_url) + 1 :].encode("utf8")\n                 value[i] = portal.unrestrictedTraverse(path, None)\n \n         return value, {}\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex e434ee01..5aebcf2c 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -24,7 +24,6 @@ class FakeDXContext(object):\n @implementer(IDeserializeFromJson)\n @adapter(IControlpanel)\n class ControlpanelDeserializeFromJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\n@@ -38,9 +37,7 @@ def __init__(self, controlpanel):\n     def __call__(self):\n         data = json_body(self.controlpanel.request)\n \n-        proxy = self.registry.forInterface(\n-            self.schema, prefix=self.schema_prefix\n-        )\n+        proxy = self.registry.forInterface(self.schema, prefix=self.schema_prefix)\n \n         schema_data = {}\n         errors = []\n@@ -56,8 +53,7 @@ def __call__(self):\n \n             if name in data:\n                 deserializer = queryMultiAdapter(\n-                    (field, fake_context, self.request),\n-                    IFieldDeserializer\n+                    (field, fake_context, self.request), IFieldDeserializer\n                 )\n \n                 try:\n@@ -68,21 +64,19 @@ def __call__(self):\n                     # Set the value.\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n-                    errors.append({\n-                        \'message\': str(e), \'field\': name, \'error\': e})\n+                    errors.append({"message": str(e), "field": name, "error": e})\n                 except ValidationError as e:\n-                    errors.append({\n-                        \'message\': e.doc(), \'field\': name, \'error\': e})\n+                    errors.append({"message": e.doc(), "field": name, "error": e})\n                 else:\n                     field_data[name] = value\n \n         # Validate schemata\n         for schema, field_data in schema_data.items():\n             validator = queryMultiAdapter(\n-                (self.context, self.request, None, schema, None),\n-                IManagerValidator)\n+                (self.context, self.request, None, schema, None), IManagerValidator\n+            )\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': str(error)})\n+                errors.append({"error": error, "message": str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 4f93e8ba..33876ba2 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -35,7 +35,9 @@ def __init__(self, context, request):\n         self.sm = getSecurityManager()\n         self.permission_cache = {}\n \n-    def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore=C901\n+    def __call__(\n+        self, validate_all=False, data=None, create=False\n+    ):  # noqa: ignore=C901\n         if data is None:\n             data = json_body(self.request)\n \n@@ -44,8 +46,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n         errors = []\n \n         for schema in iterSchemata(self.context):\n-            write_permissions = mergedTaggedValueDict(\n-                schema, WRITE_PERMISSIONS_KEY)\n+            write_permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n \n@@ -67,71 +68,70 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         if not field.required:\n                             dm.set(field.missing_value)\n                         else:\n-                            errors.append({\n-                                \'field\': field.__name__,\n-                                \'message\': (\n-                                    \'{} is a required field.\'.format(\n-                                        field.__name__\n+                            errors.append(\n+                                {\n+                                    "field": field.__name__,\n+                                    "message": (\n+                                        "{} is a required field.".format(\n+                                            field.__name__\n+                                        ),\n+                                        "Setting it to null is not allowed.",\n                                     ),\n-                                    \'Setting it to null is not allowed.\'\n-                                )})\n+                                }\n+                            )\n                         continue\n \n                     # Deserialize to field value\n                     deserializer = queryMultiAdapter(\n-                        (field, self.context, self.request),\n-                        IFieldDeserializer)\n+                        (field, self.context, self.request), IFieldDeserializer\n+                    )\n                     if deserializer is None:\n                         continue\n \n                     try:\n                         value = deserializer(data[name])\n                     except ValueError as e:\n-                        errors.append({\n-                            \'message\': str(e), \'field\': name, \'error\': e})\n+                        errors.append({"message": str(e), "field": name, "error": e})\n                     except ValidationError as e:\n-                        errors.append({\n-                            \'message\': e.doc(), \'field\': name, \'error\': e})\n+                        errors.append({"message": e.doc(), "field": name, "error": e})\n                     else:\n                         field_data[name] = value\n                         if value != dm.get():\n                             dm.set(value)\n                             # Collect the names of the modified fields\n                             # Use prefixed name because z3c.form does so\n-                            prefixed_name = schema.__name__ + \'.\' + name\n-                            modified.setdefault(schema, []).append(\n-                                prefixed_name)\n+                            prefixed_name = schema.__name__ + "." + name\n+                            modified.setdefault(schema, []).append(prefixed_name)\n \n                 elif validate_all:\n                     # Never validate the changeNote of p.a.versioningbehavior\n                     # The Versionable adapter always returns an empty string\n                     # which is the wrong type. Should be unicode and should be\n                     # fixed in p.a.versioningbehavior\n-                    if name == \'changeNote\':\n+                    if name == "changeNote":\n                         continue\n                     dm = queryMultiAdapter((self.context, field), IDataManager)\n                     bound = field.bind(self.context)\n                     try:\n                         bound.validate(dm.get())\n                     except ValidationError as e:\n-                        errors.append({\n-                            \'message\': e.doc(), \'field\': name, \'error\': e})\n+                        errors.append({"message": e.doc(), "field": name, "error": e})\n \n         # Validate schemata\n         for schema, field_data in schema_data.items():\n             validator = queryMultiAdapter(\n-                (self.context, self.request, None, schema, None),\n-                IManagerValidator)\n+                (self.context, self.request, None, schema, None), IManagerValidator\n+            )\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': str(error)})\n+                errors.append({"error": error, "message": str(error)})\n \n         if errors:\n             raise BadRequest(errors)\n \n         # We\'ll set the layout after the validation and and even if there\n         # are no other changes.\n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n@@ -150,11 +150,11 @@ def check_permission(self, permission_name):\n             return True\n \n         if permission_name not in self.permission_cache:\n-            permission = queryUtility(IPermission,\n-                                      name=permission_name)\n+            permission = queryUtility(IPermission, name=permission_name)\n             if permission is None:\n                 self.permission_cache[permission_name] = True\n             else:\n                 self.permission_cache[permission_name] = bool(\n-                    self.sm.checkPermission(permission.title, self.context))\n+                    self.sm.checkPermission(permission.title, self.context)\n+                )\n         return self.permission_cache[permission_name]\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 077b9064..9b0e58b4 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -33,7 +33,6 @@\n @implementer(IFieldDeserializer)\n @adapter(IField, IDexterityContent, IBrowserRequest)\n class DefaultFieldDeserializer(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         if IField.providedBy(self.field):\n@@ -54,7 +53,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ITextLine, IDexterityContent, IBrowserRequest)\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n@@ -62,7 +60,7 @@ def __call__(self, value):\n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n         if isinstance(value, six.text_type):\n             value = value.strip()\n-            if value == u\'\':\n+            if value == u"":\n                 value = self.field.missing_value\n \n         self.field.validate(value)\n@@ -72,7 +70,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IDatetime, IDexterityContent, IBrowserRequest)\n class DatetimeFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         # Datetime fields may contain timezone naive or timezone aware\n         # objects. Unfortunately the zope.schema.Datetime field does not\n@@ -98,7 +95,7 @@ def __call__(self, value):\n         try:\n             dt = dateutil.parser.parse(value)\n         except ValueError:\n-            raise ValueError(u\'Invalid date: {}\'.format(value))\n+            raise ValueError(u"Invalid date: {}".format(value))\n \n         # Convert to TZ aware in UTC\n         if dt.tzinfo is not None:\n@@ -120,10 +117,9 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IChoice, IDexterityContent, IBrowserRequest)\n class ChoiceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        if isinstance(value, dict) and \'token\' in value:\n-            value = value[\'token\']\n+        if isinstance(value, dict) and "token" in value:\n+            value = value["token"]\n         if IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 value = self.field.vocabulary.getTermByToken(value).value\n@@ -137,19 +133,18 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ICollection, IDexterityContent, IBrowserRequest)\n class CollectionFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if not isinstance(value, list):\n             value = [value]\n \n         if IField.providedBy(self.field.value_type):\n             deserializer = getMultiAdapter(\n-                (self.field.value_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.value_type, self.context, self.request), IFieldDeserializer\n+            )\n \n             for i, v in enumerate(value):\n-                if isinstance(v, dict) and \'token\' in v:\n-                    v = v[\'token\']\n+                if isinstance(v, dict) and "token" in v:\n+                    v = v["token"]\n                 value[i] = deserializer(v)\n \n         value = self.field._type(value)\n@@ -161,21 +156,22 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IDict, IDexterityContent, IBrowserRequest)\n class DictFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if IField.providedBy(self.field.key_type):\n             kdeserializer = getMultiAdapter(\n-                (self.field.key_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.key_type, self.context, self.request), IFieldDeserializer\n+            )\n         else:\n+\n             def kdeserializer(k):\n                 return k\n \n         if IField.providedBy(self.field.value_type):\n             vdeserializer = getMultiAdapter(\n-                (self.field.value_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.value_type, self.context, self.request), IFieldDeserializer\n+            )\n         else:\n+\n             def vdeserializer(v):\n                 return v\n \n@@ -190,7 +186,6 @@ def vdeserializer(v):\n @implementer(IFieldDeserializer)\n @adapter(ITime, IDexterityContent, IBrowserRequest)\n class TimeFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         try:\n             # Create an ISO 8601 datetime string and parse it with Zope\'s\n@@ -200,7 +195,7 @@ def __call__(self, value):\n             # using ``timetz()`` would be timezone aware.\n             value = dateutil.parser.parse(value).time()\n         except ValueError:\n-            raise ValueError(u\'Invalid time: {}\'.format(value))\n+            raise ValueError(u"Invalid time: {}".format(value))\n \n         self.field.validate(value)\n         return value\n@@ -209,7 +204,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ITimedelta, IDexterityContent, IBrowserRequest)\n class TimedeltaFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n@@ -223,30 +217,28 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(INamedField, IDexterityContent, IBrowserRequest)\n class NamedFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        content_type = \'application/octet-stream\'\n+        content_type = "application/octet-stream"\n         filename = None\n         if isinstance(value, dict):\n-            if \'data\' not in value:\n+            if "data" not in value:\n                 # We are probably pushing the contents of a previous GET\n                 # That contain the read representation of the file\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(\'content-type\', content_type)\n-            filename = value.get(\'filename\', filename)\n-            data = value.get(\'data\', \'\')\n+            content_type = value.get("content-type", content_type)\n+            filename = value.get("filename", filename)\n+            data = value.get("data", "")\n             if isinstance(data, six.text_type):\n-                data = data.encode(\'utf-8\')\n-            if \'encoding\' in value:\n-                data = codecs.decode(data, value[\'encoding\'])\n+                data = data.encode("utf-8")\n+            if "encoding" in value:\n+                data = codecs.decode(data, value["encoding"])\n             if isinstance(data, six.text_type):\n-                data = data.encode(\'utf-8\')\n+                data = data.encode("utf-8")\n         elif isinstance(value, TUSUpload):\n-            content_type = value.metadata().get(\n-                \'content-type\', content_type)\n-            filename = value.metadata().get(\'filename\', filename)\n+            content_type = value.metadata().get("content-type", content_type)\n+            filename = value.metadata().get("filename", filename)\n             data = value.open()\n         else:\n             data = value\n@@ -254,9 +246,10 @@ def __call__(self, value):\n         # Convert if we have data\n         if data:\n             if six.PY2:\n-                content_type = content_type.encode(\'utf8\')\n+                content_type = content_type.encode("utf8")\n             value = self.field._type(\n-                data=data, contentType=content_type, filename=filename)\n+                data=data, contentType=content_type, filename=filename\n+            )\n         else:\n             value = None\n \n@@ -268,18 +261,17 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IRichText, IDexterityContent, IBrowserRequest)\n class RichTextFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         content_type = self.field.default_mime_type\n-        encoding = \'utf8\'\n+        encoding = "utf8"\n         if isinstance(value, dict):\n-            content_type = value.get(\'content-type\', content_type)\n-            encoding = value.get(\'encoding\', encoding)\n-            data = value.get(\'data\', u\'\')\n+            content_type = value.get("content-type", content_type)\n+            encoding = value.get("encoding", encoding)\n+            data = value.get("data", u"")\n         elif isinstance(value, TUSUpload):\n-            content_type = value.metadata().get(\'content-type\', content_type)\n-            with open(value.filepath, \'rb\') as f:\n-                data = f.read().decode(\'utf8\')\n+            content_type = value.metadata().get("content-type", content_type)\n+            with open(value.filepath, "rb") as f:\n+                data = f.read().decode("utf8")\n         else:\n             data = value\n \ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 9b299730..8a24c2b0 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -11,6 +11,7 @@\n \n try:\n     from plone.app.workflow.events import LocalrolesModifiedEvent\n+\n     LOCALROLES_MODIFIED_EVENT_AVAILABLE = True\n except ImportError:\n     # Plone < 4.3.4\n@@ -32,29 +33,25 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         data = json_body(self.request)\n-        sharing_view = getMultiAdapter((self.context, self.request),\n-                                       name=\'sharing\')\n+        sharing_view = getMultiAdapter((self.context, self.request), name="sharing")\n \n         # inherit roles\n         inherit_reindex = False\n         # block can be None, so we might get False or None, so we test\n         # for a marker.\n-        inherit = data.get(\'inherit\', marker)\n+        inherit = data.get("inherit", marker)\n         if inherit is not marker:\n-            inherit_reindex = sharing_view.update_inherit(status=inherit,\n-                                                          reindex=False)\n+            inherit_reindex = sharing_view.update_inherit(status=inherit, reindex=False)\n         # roles\n         roles_reindex = False\n-        new_roles = data.get(\'entries\', None)\n+        new_roles = data.get("entries", None)\n         if new_roles is not None:\n             # the roles are converted into a FrozenSet so we have to filter\n             # the data structure we get.\n             for user in new_roles:\n-                roles_list = [key for key in user[\'roles\'] if\n-                              user[\'roles\'][key]]\n-                user[\'roles\'] = roles_list\n-            roles_reindex = sharing_view.update_role_settings(new_roles,\n-                                                              reindex=False)\n+                roles_list = [key for key in user["roles"] if user["roles"][key]]\n+                user["roles"] = roles_list\n+            roles_reindex = sharing_view.update_role_settings(new_roles, reindex=False)\n \n         if ICatalogAware(self.context) and (inherit_reindex or roles_reindex):\n             self.context.reindexObjectSecurity()\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex 98739ed3..45ae1f2c 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -5,12 +5,11 @@\n \n \n class OrderingMixin(object):\n-\n     def handle_ordering(self, data):\n-        if \'ordering\' in data:\n-            obj_id = data[\'ordering\'][\'obj_id\']\n-            delta = data[\'ordering\'][\'delta\']\n-            subset_ids = data[\'ordering\'].get(\'subset_ids\')\n+        if "ordering" in data:\n+            obj_id = data["ordering"]["obj_id"]\n+            delta = data["ordering"]["delta"]\n+            subset_ids = data["ordering"].get("subset_ids")\n \n             # The REST api returns only content items and a Zope resource\n             # may contain non-content items. We need to set the subset_ids\n@@ -24,21 +23,20 @@ def reorderItems(self, obj_id, delta, subset_ids):\n         # Based on wildcard.foldercontents.viewsItemOrder\n         ordering = self.getOrdering()\n         if ordering is None:\n-            msg = \'Content ordering is not supported by this resource\'\n+            msg = "Content ordering is not supported by this resource"\n             raise BadRequest(msg)\n \n         # Make sure we\'re seeing the same order as the client is.\n         if subset_ids:\n-            position_id = [(ordering.getObjectPosition(i), i)\n-                           for i in subset_ids]\n+            position_id = [(ordering.getObjectPosition(i), i) for i in subset_ids]\n             position_id.sort()\n             if subset_ids != [i for position, i in position_id]:\n-                raise BadRequest(\'Client/server ordering mismatch\')\n+                raise BadRequest("Client/server ordering mismatch")\n \n         # All movement is relative to the subset of ids, if passed in.\n-        if delta == \'top\':\n+        if delta == "top":\n             ordering.moveObjectsToTop([obj_id], subset_ids=subset_ids)\n-        elif delta == \'bottom\':\n+        elif delta == "bottom":\n             ordering.moveObjectsToBottom([obj_id], subset_ids=subset_ids)\n         else:\n             delta = int(delta)\n@@ -47,7 +45,7 @@ def reorderItems(self, obj_id, delta, subset_ids):\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n-        elif getattr(self.context, \'getOrdering\', None):\n+        elif getattr(self.context, "getOrdering", None):\n             ordering = self.context.getOrdering()\n             if not IExplicitOrdering.providedBy(ordering):\n                 return None\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex ec3e8bc2..f22e0f37 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -16,14 +16,13 @@\n @implementer(IFieldDeserializer)\n @adapter(IRelationChoice, IDexterityContent, IBrowserRequest)\n class RelationChoiceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         obj = None\n \n         if isinstance(value, dict):\n             # We are trying to deserialize the output of a serialization\n             # which is enhanced, extract it and put it on the loop again\n-            value = value[\'@id\']\n+            value = value["@id"]\n \n         if isinstance(value, int):\n             # Resolve by intid\n@@ -31,20 +30,20 @@ def __call__(self, value):\n             obj = intids.queryObject(value)\n         elif isinstance(value, six.string_types):\n             if six.PY2 and isinstance(value, six.text_type):\n-                value = value.encode(\'utf8\')\n-            portal = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone_portal_state\').portal()\n+                value = value.encode("utf8")\n+            portal = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            ).portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n-                obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:], None)\n-            elif value.startswith(\'/\'):\n+                obj = portal.restrictedTraverse(value[len(portal_url) + 1 :], None)\n+            elif value.startswith("/"):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip("/"), None)\n             else:\n                 # Resolve by UID\n-                catalog = getToolByName(self.context, \'portal_catalog\')\n+                catalog = getToolByName(self.context, "portal_catalog")\n                 brain = catalog(UID=value)\n                 if brain:\n                     obj = brain[0].getObject()\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 949fd630..c66d9069 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -26,32 +26,42 @@ def __call__(self, validate_all=False):\n         # has no schema or something like that.\n         data = json_body(self.request)\n \n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n-        if \'ordering\' in data and \'subset_ids\' not in data[\'ordering\']:\n-            data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n+        if "ordering" in data and "subset_ids" not in data["ordering"]:\n+            data["ordering"]["subset_ids"] = self.context.contentIds()\n         self.handle_ordering(data)\n \n         # Volto Tiles on the Plone Site root faker\n-        if \'tiles\' in data:\n-            if not getattr(self.context, \'tiles\', False):\n-                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+        if "tiles" in data:\n+            if not getattr(self.context, "tiles", False):\n+                self.context.manage_addProperty(\n+                    "tiles", json.dumps(data["tiles"]), "string"\n+                )  # noqa\n             else:\n-                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+                self.context.manage_changeProperties(\n+                    tiles=json.dumps(data["tiles"])\n+                )  # noqa\n \n-        if \'tiles_layout\' in data:\n-            if not getattr(self.context, \'tiles_layout\', False):\n-                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+        if "tiles_layout" in data:\n+            if not getattr(self.context, "tiles_layout", False):\n+                self.context.manage_addProperty(\n+                    "tiles_layout", json.dumps(data["tiles_layout"]), "string"\n+                )  # noqa\n             else:\n-                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+                self.context.manage_changeProperties(\n+                    tiles_layout=json.dumps(data["tiles_layout"])\n+                )  # noqa\n \n-        if \'title\' in data:\n-            self.context.setTitle(data[\'title\'])\n+        if "title" in data:\n+            self.context.setTitle(data["title"])\n \n-        if \'description\' in data:\n-            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+        if "description" in data:\n+            self.context.manage_changeProperties(\n+                description=data["description"]\n+            )  # noqa\n \n         return self.context\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex d943f038..827614d5 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -20,7 +20,7 @@ def get_scales(context, field, width, height):\n     """\n     scales = {}\n     request = getRequest()\n-    images_view = getMultiAdapter((context, request), name=\'images\')\n+    images_view = getMultiAdapter((context, request), name="images")\n \n     for name, actual_width, actual_height in get_scale_infos():\n         # Try first with scale name\n@@ -29,28 +29,27 @@ def get_scales(context, field, width, height):\n             # Sometimes it fails, but we can create it\n             # using scale sizes\n             scale = images_view.scale(\n-                field.__name__, width=actual_width, height=actual_height)\n+                field.__name__, width=actual_width, height=actual_height\n+            )\n \n         url = scale.url\n         actual_width = scale.width\n         actual_height = scale.height\n \n         scales[name] = {\n-            u\'download\': url,\n-            u\'width\': actual_width,\n-            u\'height\': actual_height}\n+            u"download": url,\n+            u"width": actual_width,\n+            u"height": actual_height,\n+        }\n \n     return scales\n \n \n def get_original_image_url(context, fieldname, width, height):\n     request = getRequest()\n-    images_view = getMultiAdapter((context, request), name=\'images\')\n+    images_view = getMultiAdapter((context, request), name="images")\n     scale = images_view.scale(\n-        fieldname,\n-        width=width,\n-        height=height,\n-        direction=\'thumbnail\'\n+        fieldname, width=width, height=height, direction="thumbnail"\n     )\n \n     return scale.url\n@@ -85,22 +84,21 @@ def get_scale_infos():\n     """\n     if PLONE_5:\n         from plone.registry.interfaces import IRegistry\n+\n         registry = getUtility(IRegistry)\n         from Products.CMFPlone.interfaces import IImagingSchema\n-        imaging_settings = registry.forInterface(\n-            IImagingSchema,\n-            prefix=\'plone\'\n-        )\n+\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n         allowed_sizes = imaging_settings.allowed_sizes\n \n     else:\n         ptool = getUtility(IPropertiesTool)\n         image_properties = ptool.imaging_properties\n-        allowed_sizes = image_properties.getProperty(\'allowed_sizes\')\n+        allowed_sizes = image_properties.getProperty("allowed_sizes")\n \n     def split_scale_info(allowed_size):\n-        name, dims = allowed_size.split(\' \')\n-        width, height = list(map(int, dims.split(\':\')))\n+        name, dims = allowed_size.split(" ")\n+        width, height = list(map(int, dims.split(":")))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 51202172..e6e72bfe 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -38,7 +38,7 @@ class IContextawareJsonCompatible(IJsonCompatible):\n     """Convert a value to a JSON compatible data structure, using a context.\n     """\n \n-    def __init__(value, context,):\n+    def __init__(value, context):\n         """Adapts value and a context\n         """\n \n@@ -97,7 +97,8 @@ class IZCatalogCompatibleQuery(Interface):\n \n     global_query_params = Attribute(\n         "A mapping of query-wide parameters (like \'sort_on\') to their data "\n-        "type. These need to be treated separately from indexes.")\n+        "type. These need to be treated separately from indexes."\n+    )\n \n     def __init__(context, request):\n         """Adapts context and request.\n@@ -127,10 +128,12 @@ class IIndexQueryParser(Interface):\n \n     query_value_type = Attribute(\n         "The data type of the query value for queries against this index. "\n-        "The query value may also be a sequence of values of that type.")\n+        "The query value may also be a sequence of values of that type."\n+    )\n \n     query_options = Attribute(\n-        "A mapping of query options this index type supports to their type.")\n+        "A mapping of query options this index type supports to their type."\n+    )\n \n     def __init__(index, context, request):\n         """Adapts a ZCatalog index, context and request.\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex f9c5ab25..7b457345 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -5,8 +5,7 @@\n from BTrees.OOBTree import OOBTree\n from Products.CMFCore.permissions import ManagePortal\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from Products.PluggableAuthService.interfaces.plugins import (\n-    IAuthenticationPlugin)\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n@@ -22,7 +21,8 @@\n \n \n manage_addJWTAuthenticationPlugin = PageTemplateFile(\n-    "add_plugin", globals(), __name__="manage_addJWTAuthenticationPlugin")\n+    "add_plugin", globals(), __name__="manage_addJWTAuthenticationPlugin"\n+)\n \n \n def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n@@ -34,19 +34,16 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n     if REQUEST is not None:\n         REQUEST["RESPONSE"].redirect(\n             "%s/manage_workspace"\n-            "?manage_tabs_message=JWT+authentication+plugin+added." %\n-            self.absolute_url()\n+            "?manage_tabs_message=JWT+authentication+plugin+added."\n+            % self.absolute_url()\n         )\n \n \n-@implementer(\n-    IAuthenticationPlugin,\n-    IChallengePlugin,\n-    IExtractionPlugin,\n-)\n+@implementer(IAuthenticationPlugin, IChallengePlugin, IExtractionPlugin)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n+\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \n@@ -58,34 +55,30 @@ class JWTAuthenticationPlugin(BasePlugin):\n \n     # ZMI tab for configuration page\n     manage_options = (\n-        ({\'label\': \'Configuration\',\n-          \'action\': \'manage_config\'},) +\n-        BasePlugin.manage_options\n-    )\n-    security.declareProtected(ManagePortal, \'manage_config\')\n-    manage_config = PageTemplateFile(\'config\', globals(),\n-                                     __name__=\'manage_config\')\n+        {"label": "Configuration", "action": "manage_config"},\n+    ) + BasePlugin.manage_options\n+    security.declareProtected(ManagePortal, "manage_config")\n+    manage_config = PageTemplateFile("config", globals(), __name__="manage_config")\n \n     def __init__(self, id_, title=None):\n         self._setId(id_)\n         self.title = title\n \n-    security.declarePrivate(\'challenge\')\n+    security.declarePrivate("challenge")\n \n     # Initiate a challenge to the user to provide credentials.\n     def challenge(self, request, response, **kw):\n \n         realm = response.realm\n         if realm:\n-            response.setHeader(\'WWW-Authenticate\',\n-                               \'Bearer realm="%s"\' % realm)\n+            response.setHeader("WWW-Authenticate", \'Bearer realm="%s"\' % realm)\n         m = "You are not authorized to access this resource."\n \n         response.setBody(m, is_error=1)\n         response.setStatus(401)\n         return True\n \n-    security.declarePrivate(\'extractCredentials\')\n+    security.declarePrivate("extractCredentials")\n \n     # IExtractionPlugin implementation\n     # Extracts a JSON web token from the request.\n@@ -94,42 +87,42 @@ def extractCredentials(self, request):\n         auth = request._auth\n         if auth is None:\n             return None\n-        if auth[:7].lower() == \'bearer \':\n-            creds[\'token\'] = auth.split()[-1]\n+        if auth[:7].lower() == "bearer ":\n+            creds["token"] = auth.split()[-1]\n         else:\n             return None\n \n         return creds\n \n-    security.declarePrivate(\'authenticateCredentials\')\n+    security.declarePrivate("authenticateCredentials")\n \n     # IAuthenticationPlugin implementation\n     def authenticateCredentials(self, credentials):\n         # Ignore credentials that are not from our extractor\n-        extractor = credentials.get(\'extractor\')\n+        extractor = credentials.get("extractor")\n         if extractor != self.getId():\n             return None\n \n-        payload = self._decode_token(credentials[\'token\'])\n+        payload = self._decode_token(credentials["token"])\n         if not payload:\n             return None\n \n-        if \'sub\' not in payload:\n+        if "sub" not in payload:\n             return None\n \n-        userid = payload[\'sub\']\n+        userid = payload["sub"]\n         if six.PY2:\n-            userid = userid.encode(\'utf8\')\n+            userid = userid.encode("utf8")\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n                 return None\n-            if credentials[\'token\'] not in self._tokens[userid]:\n+            if credentials["token"] not in self._tokens[userid]:\n                 return None\n \n         return (userid, userid)\n \n-    security.declareProtected(ManagePortal, \'manage_updateConfig\')\n+    security.declareProtected(ManagePortal, "manage_updateConfig")\n \n     @postonly\n     def manage_updateConfig(self, REQUEST):\n@@ -137,15 +130,16 @@ def manage_updateConfig(self, REQUEST):\n         """\n         response = REQUEST.response\n \n-        self.token_timeout = int(REQUEST.form.get(\'token_timeout\',\n-                                                  self.token_timeout))\n-        self.use_keyring = bool(REQUEST.form.get(\'use_keyring\', False))\n-        self.store_tokens = bool(REQUEST.form.get(\'store_tokens\', False))\n+        self.token_timeout = int(REQUEST.form.get("token_timeout", self.token_timeout))\n+        self.use_keyring = bool(REQUEST.form.get("use_keyring", False))\n+        self.store_tokens = bool(REQUEST.form.get("store_tokens", False))\n         if self.store_tokens and self._tokens is None:\n             self._tokens = OOBTree()\n \n-        response.redirect(\'%s/manage_config?manage_tabs_message=%s\' %\n-                          (self.absolute_url(), \'Configuration+updated.\'))\n+        response.redirect(\n+            "%s/manage_config?manage_tabs_message=%s"\n+            % (self.absolute_url(), "Configuration+updated.")\n+        )\n \n     def _decode_token(self, token, verify=True):\n         if self.use_keyring:\n@@ -153,20 +147,17 @@ def _decode_token(self, token, verify=True):\n             for secret in manager[u"_system"]:\n                 if secret is None:\n                     continue\n-                payload = self._jwt_decode(\n-                    token, secret + self._path(), verify=verify)\n+                payload = self._jwt_decode(token, secret + self._path(), verify=verify)\n                 if payload is not None:\n                     return payload\n         else:\n-            return self._jwt_decode(\n-                token, self._secret + self._path(), verify=verify)\n+            return self._jwt_decode(token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n         if isinstance(token, six.text_type):\n-            token = token.encode(\'utf-8\')\n+            token = token.encode("utf-8")\n         try:\n-            return jwt.decode(\n-                token, secret, verify=verify, algorithms=[\'HS256\'])\n+            return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n         except jwt.InvalidTokenError:\n             return None\n \n@@ -179,29 +170,29 @@ def _signing_secret(self):\n         return self._secret + self._path()\n \n     def _path(self):\n-        return \'/\'.join(self.getPhysicalPath())\n+        return "/".join(self.getPhysicalPath())\n \n     def delete_token(self, token):\n         payload = self._decode_token(token, verify=False)\n-        if \'sub\' not in payload:\n+        if "sub" not in payload:\n             return False\n-        userid = payload[\'sub\']\n+        userid = payload["sub"]\n         if userid in self._tokens and token in self._tokens[userid]:\n             del self._tokens[userid][token]\n             return True\n \n     def create_token(self, userid, timeout=None, data=None):\n         payload = {}\n-        payload[\'sub\'] = userid\n+        payload["sub"] = userid\n         if timeout is None:\n             timeout = self.token_timeout\n         if timeout:\n-            payload[\'exp\'] = datetime.utcnow() + timedelta(seconds=timeout)\n+            payload["exp"] = datetime.utcnow() + timedelta(seconds=timeout)\n         if data is not None:\n             payload.update(data)\n-        token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        token = jwt.encode(payload, self._signing_secret(), algorithm="HS256")\n         if not six.PY2:\n-            token = token.decode(\'utf-8\')\n+            token = token.decode("utf-8")\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/permissions.py b/src/plone/restapi/permissions.py\nindex 79d4b580..db979048 100644\n--- a/src/plone/restapi/permissions.py\n+++ b/src/plone/restapi/permissions.py\n@@ -3,4 +3,4 @@\n # # Required to use the REST API at all, in addition to service specific\n # permissions. Granted to Anonymous (i.e. everyone) by default via rolemap.xml\n \n-UseRESTAPI = \'plone.restapi: Use REST API\'\n+UseRESTAPI = "plone.restapi: Use REST API"\ndiff --git a/src/plone/restapi/search/date_recurring_index.py b/src/plone/restapi/search/date_recurring_index.py\nindex c563e4b5..bb40b221 100644\n--- a/src/plone/restapi/search/date_recurring_index.py\n+++ b/src/plone/restapi/search/date_recurring_index.py\n@@ -13,6 +13,4 @@\n class DateRecurringIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = DateTime\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex a2b3f955..a1d969b9 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -13,11 +13,12 @@ class SearchHandler(object):\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def _parse_query(self, query):\n         catalog_compatible_query = getMultiAdapter(\n-            (self.context, self.request), IZCatalogCompatibleQuery)(query)\n+            (self.context, self.request), IZCatalogCompatibleQuery\n+        )(query)\n         return catalog_compatible_query\n \n     def _constrain_query_by_path(self, query):\n@@ -30,53 +31,50 @@ def _constrain_query_by_path(self, query):\n         - \'path\' supplied as a string\n         - \'path\' supplied as a complete query dict\n         """\n-        if \'path\' not in query:\n-            query[\'path\'] = {}\n+        if "path" not in query:\n+            query["path"] = {}\n \n-        if (\n-            isinstance(query[\'path\'], str)\n-            or isinstance(query[\'path\'], list)\n-        ):\n-            query[\'path\'] = {\'query\': query[\'path\']}\n+        if isinstance(query["path"], str) or isinstance(query["path"], list):\n+            query["path"] = {"query": query["path"]}\n \n         # If this is accessed through a VHM the client does not know\n         # the complete physical path of an object. But the path index\n         # indexes the complete physical path. Complete the path.\n-        vhm_physical_path = self.request.get(\'VirtualRootPhysicalPath\')\n+        vhm_physical_path = self.request.get("VirtualRootPhysicalPath")\n         if vhm_physical_path:\n-            path = query[\'path\'].get(\'query\')\n+            path = query["path"].get("query")\n             if path:\n                 if isinstance(path, str):\n-                    path = path.lstrip(\'/\')\n-                    full_path = \'/\'.join(vhm_physical_path + (path,))\n-                    query[\'path\'][\'query\'] = full_path\n+                    path = path.lstrip("/")\n+                    full_path = "/".join(vhm_physical_path + (path,))\n+                    query["path"]["query"] = full_path\n                 if isinstance(path, list):\n                     full_paths = []\n                     for p in path:\n-                        p = p.lstrip(\'/\')\n-                        full_path = \'/\'.join(vhm_physical_path + (p,))\n+                        p = p.lstrip("/")\n+                        full_path = "/".join(vhm_physical_path + (p,))\n                         full_paths.append(full_path)\n-                    query[\'path\'][\'query\'] = full_paths\n+                    query["path"]["query"] = full_paths\n \n-        if isinstance(query[\'path\'], dict) and \'query\' not in query[\'path\']:\n+        if isinstance(query["path"], dict) and "query" not in query["path"]:\n             # We either had no \'path\' parameter at all, or an incomplete\n             # \'path\' query dict (with just ExtendedPathIndex options (like\n             # \'depth\'), but no actual path \'query\' in it).\n             #\n             # In either case, we\'ll prefill with the context\'s path\n-            path = \'/\'.join(self.context.getPhysicalPath())\n-            query[\'path\'][\'query\'] = path\n+            path = "/".join(self.context.getPhysicalPath())\n+            query["path"]["query"] = path\n \n     def search(self, query=None):\n         if query is None:\n             query = {}\n-        if \'fullobjects\' in query:\n+        if "fullobjects" in query:\n             fullobjects = True\n-            del query[\'fullobjects\']\n+            del query["fullobjects"]\n         else:\n             fullobjects = False\n \n-        metadata_fields = query.pop(\'metadata_fields\', [])\n+        metadata_fields = query.pop("metadata_fields", [])\n         if not isinstance(metadata_fields, list):\n             metadata_fields = [metadata_fields]\n \n@@ -84,9 +82,8 @@ def search(self, query=None):\n         query = self._parse_query(query)\n \n         lazy_resultset = self.catalog.searchResults(query)\n-        results = getMultiAdapter(\n-            (lazy_resultset, self.request),\n-            ISerializeToJson)(\n-                metadata_fields=metadata_fields, fullobjects=fullobjects)\n+        results = getMultiAdapter((lazy_resultset, self.request), ISerializeToJson)(\n+            metadata_fields=metadata_fields, fullobjects=fullobjects\n+        )\n \n         return results\ndiff --git a/src/plone/restapi/search/query.py b/src/plone/restapi/search/query.py\nindex 0282f67d..6553f6b7 100644\n--- a/src/plone/restapi/search/query.py\n+++ b/src/plone/restapi/search/query.py\n@@ -69,17 +69,17 @@ class ZCatalogCompatibleQueryAdapter(object):\n     """\n \n     global_query_params = {\n-        \'sort_on\': str,\n-        \'sort_order\': str,\n-        \'sort_limit\': int,\n-        \'b_start\': int,\n-        \'b_size\': int,\n+        "sort_on": str,\n+        "sort_order": str,\n+        "sort_limit": int,\n+        "b_start": int,\n+        "b_size": int,\n     }\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def get_index(self, name):\n         return self.catalog._catalog.indexes.get(name)\n@@ -104,7 +104,8 @@ def __call__(self, query):\n                 continue\n \n             query_opts_parser = getMultiAdapter(\n-                (index, self.context, self.request), IIndexQueryParser)\n+                (index, self.context, self.request), IIndexQueryParser\n+            )\n \n             if query_opts_parser is not None:\n                 idx_query = query_opts_parser.parse(idx_query)\n@@ -140,8 +141,9 @@ def parse_query_value(self, query_value):\n \n         except (ValueError, DTSyntaxError):\n             raise QueryParsingError(\n-                "Query value %r for index %s must be of type %r" % (\n-                    query_value, self.index, self.query_value_type))\n+                "Query value %r for index %s must be of type %r"\n+                % (query_value, self.index, self.query_value_type)\n+            )\n         return self.query_value_type(query_value)\n \n     def parse_simple_query(self, idx_query):\n@@ -154,11 +156,12 @@ def parse_complex_query(self, idx_query):\n         parsed_query = {}\n \n         try:\n-            qv = idx_query.pop(\'query\')\n-            parsed_query[\'query\'] = self.parse_simple_query(qv)\n+            qv = idx_query.pop("query")\n+            parsed_query["query"] = self.parse_simple_query(qv)\n         except KeyError:\n             raise QueryParsingError(\n-                "Query for index %r is missing a \'query\' key!" % self.index)\n+                "Query for index %r is missing a \'query\' key!" % self.index\n+            )\n \n         for opt_key, opt_value in idx_query.items():\n             if opt_key in self.query_options:\n@@ -168,11 +171,12 @@ def parse_complex_query(self, idx_query):\n                 except ValueError:\n                     raise QueryParsingError(\n                         "Value %r for query option %r (index %r) could not be"\n-                        " casted to %r" % (\n-                            opt_value, opt_key, self.index, opt_type))\n+                        " casted to %r" % (opt_value, opt_key, self.index, opt_type)\n+                    )\n             else:\n-                log.warn("Unrecognized query option %r for index %r" % (\n-                    opt_key, self.index))\n+                log.warn(\n+                    "Unrecognized query option %r for index %r" % (opt_key, self.index)\n+                )\n                 # Pass along unknown option without modification\n                 parsed_query[opt_key] = opt_value\n \n@@ -192,10 +196,7 @@ class ZCTextIndexQueryParser(BaseIndexQueryParser):\n class KeywordIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = ANY_TYPE\n-    query_options = {\n-        \'operator\': str,\n-        \'range\': str,\n-    }\n+    query_options = {"operator": str, "range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -206,10 +207,11 @@ class BooleanIndexQueryParser(BaseIndexQueryParser):\n     query_options = {}\n \n     def parse_query_value(self, query_value):\n-        if not str(query_value).lower() in (\'true\', \'false\', \'1\', \'0\'):\n+        if not str(query_value).lower() in ("true", "false", "1", "0"):\n             raise QueryParsingError(\n-                \'Could not parse query value %r as boolean\' % query_value)\n-        return str(query_value).lower() in (\'true\', \'1\')\n+                "Could not parse query value %r as boolean" % query_value\n+            )\n+        return str(query_value).lower() in ("true", "1")\n \n \n @implementer(IIndexQueryParser)\n@@ -217,9 +219,7 @@ def parse_query_value(self, query_value):\n class FieldIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = ANY_TYPE\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -228,11 +228,11 @@ class ExtendedPathIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = str\n     query_options = {\n-        \'level\': int,\n-        \'operator\': str,\n-        \'depth\': int,\n-        \'navtree\': bool,\n-        \'navtree_start\': int,\n+        "level": int,\n+        "operator": str,\n+        "depth": int,\n+        "navtree": bool,\n+        "navtree_start": int,\n     }\n \n \n@@ -241,9 +241,7 @@ class ExtendedPathIndexQueryParser(BaseIndexQueryParser):\n class DateIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = DateTime\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -259,6 +257,4 @@ class DateRangeIndexQueryParser(BaseIndexQueryParser):\n class UUIDIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = str\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 36a08971..4675f1ea 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -24,13 +24,14 @@ def unflatten_dotted_dict(dct):\n            \'foo\': 3},\n      \'bar\': 4}\n     """\n+\n     def create_or_get(dct, key):\n         return dct.setdefault(key, {})\n \n     result = {}\n \n     for key, value in dct.items():\n-        key_segments = key.split(\'.\')\n+        key_segments = key.split(".")\n         # Create nested dicts from parent keys, if any\n         inner = reduce(create_or_get, [result] + key_segments[:-1])\n         # Assign value to terminal key\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 0540cac1..e7fa0fcf 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -13,23 +13,22 @@\n @implementer(ISerializeToJson)\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n-\n     def __call__(self, version=None, include_items=True):\n-        collection_metadata = super(\n-            SerializeCollectionToJson, self).__call__(version=version)\n+        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n+            version=version\n+        )\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n         results = collection_metadata\n-        if not self.request.form.get(\'fullobjects\'):\n-            results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        if not self.request.form.get("fullobjects"):\n+            results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n-            getMultiAdapter(\n-                (brain, self.request), ISerializeToJsonSummary)()\n+        results["items"] = [\n+            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\n         return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex b493d9c0..cb659f3f 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -20,35 +20,35 @@\n @implementer(ISerializeToJson)\n @adapter(IBaseObject, Interface)\n class SerializeToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def getVersion(self, version):\n-        if version == \'current\':\n+        if version == "current":\n             return self.context\n         else:\n             repo_tool = getToolByName(self.context, "portal_repository")\n             return repo_tool.retrieve(self.context, int(version)).object\n \n     def __call__(self, version=None, include_items=False):\n-        version = \'current\' if version is None else version\n+        version = "current" if version is None else version\n \n         obj = self.getVersion(version)\n         parent = aq_parent(aq_inner(obj))\n         parent_summary = getMultiAdapter(\n-            (parent, self.request), ISerializeToJsonSummary)()\n+            (parent, self.request), ISerializeToJsonSummary\n+        )()\n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': obj.absolute_url(),\n-            \'id\': obj.id,\n-            \'@type\': obj.portal_type,\n-            \'parent\': parent_summary,\n-            \'review_state\': self._get_workflow_state(obj),\n-            \'UID\': obj.UID(),\n-            \'layout\': self.context.getLayout(),\n-            \'is_folderish\': False\n+            "@id": obj.absolute_url(),\n+            "id": obj.id,\n+            "@type": obj.portal_type,\n+            "parent": parent_summary,\n+            "review_state": self._get_workflow_state(obj),\n+            "UID": obj.UID(),\n+            "layout": self.context.getLayout(),\n+            "is_folderish": False,\n         }\n \n         # Insert expandable elements\n@@ -56,72 +56,67 @@ def __call__(self, version=None, include_items=False):\n \n         for field in obj.Schema().fields():\n \n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n+            if "r" not in field.mode or not field.checkPermission(\n+                "r", obj\n+            ):  # noqa: E501\n                 continue\n \n             name = field.getName()\n \n             serializer = queryMultiAdapter(\n-                (field, self.context, self.request),\n-                IFieldSerializer)\n+                (field, self.context, self.request), IFieldSerializer\n+            )\n             if serializer is not None:\n                 result[name] = serializer()\n \n         return result\n \n     def _get_workflow_state(self, obj):\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wftool.getInfoFor(\n-            ob=obj, name=\'review_state\', default=None)\n+        wftool = getToolByName(self.context, "portal_workflow")\n+        review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n \n @implementer(ISerializeToJson)\n @adapter(IBaseFolder, Interface)\n class SerializeFolderToJson(SerializeToJson):\n-\n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(\n-            version=version\n-        )\n+        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n \n-        folder_metadata.update({\'is_folderish\': True})\n+        folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\n-            \'include_items\', include_items)\n+        include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\n \n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(query)\n \n             batch = HypermediaBatch(self.request, brains)\n \n-            if not self.request.form.get(\'fullobjects\'):\n-                result[\'@id\'] = batch.canonical_url\n-            result[\'items_total\'] = batch.items_total\n+            if not self.request.form.get("fullobjects"):\n+                result["@id"] = batch.canonical_url\n+            result["items_total"] = batch.items_total\n             if batch.links:\n-                result[\'batching\'] = batch.links\n+                result["batching"] = batch.links\n \n-            if \'fullobjects\' in list(self.request.form):\n-                result[\'items\'] = getMultiAdapter(\n-                    (brains, self.request),\n-                    ISerializeToJson\n-                )(fullobjects=True)[\'items\']\n+            if "fullobjects" in list(self.request.form):\n+                result["items"] = getMultiAdapter(\n+                    (brains, self.request), ISerializeToJson\n+                )(fullobjects=True)["items"]\n             else:\n-                result[\'items\'] = [\n-                    getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJsonSummary\n-                    )()\n+                result["items"] = [\n+                    getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n                     for brain in batch\n                 ]\n         return result\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex eed63d04..9c12d1f9 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -29,7 +29,6 @@\n @adapter(IField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class DefaultFieldSerializer(object):\n-\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -43,16 +42,15 @@ def __call__(self):\n @adapter(IFileField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class FileFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@download\',\n-                        self.field.getName()))\n+        url = "/".join(\n+            (self.context.absolute_url(), "@@download", self.field.getName())\n+        )\n         result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.getContentType(self.context),\n-            \'size\': self.field.get_size(self.context),\n-            \'download\': url\n+            "filename": self.field.getFilename(self.context),\n+            "content-type": self.field.getContentType(self.context),\n+            "size": self.field.get_size(self.context),\n+            "download": url,\n         }\n         return json_compatible(result)\n \n@@ -60,40 +58,35 @@ def __call__(self):\n @adapter(ITextField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class TextFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n-        mimetypes_registry = getToolByName(\n-            self.context, \'mimetypes_registry\')\n+        mimetypes_registry = getToolByName(self.context, "mimetypes_registry")\n         data = super(TextFieldSerializer, self).__call__()\n         return {\n-            \'content-type\': json_compatible(\n-                mimetypes_registry(data)[2].normalized()),\n-            \'data\': data\n+            "content-type": json_compatible(mimetypes_registry(data)[2].normalized()),\n+            "data": data,\n         }\n \n \n @adapter(IImageField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ImageFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n             return None\n \n         width, height = image.width, image.height\n-        url = get_original_image_url(\n-            self.context, self.field.__name__, width, height)\n+        url = get_original_image_url(self.context, self.field.__name__, width, height)\n \n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.get(self.context).getContentType(),\n-            \'size\': self.field.get(self.context).get_size(),\n-            \'download\': url,\n-            \'width\': width,\n-            \'height\': height,\n-            \'scales\': scales,\n+            "filename": self.field.getFilename(self.context),\n+            "content-type": self.field.get(self.context).getContentType(),\n+            "size": self.field.get(self.context).get_size(),\n+            "download": url,\n+            "width": width,\n+            "height": height,\n+            "scales": scales,\n         }\n         return json_compatible(result)\n \n@@ -113,7 +106,6 @@ class BlobImageFieldSerializer(ImageFieldSerializer):\n @adapter(IReferenceField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ReferenceFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         accessor = self.field.getAccessor(self.context)\n         refs = accessor()\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex e1ec1ec8..6147491d 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -13,7 +13,7 @@\n from zope.interface import Interface\n \n \n-BRAIN_METHODS = [\'getPath\', \'getURL\']\n+BRAIN_METHODS = ["getPath", "getURL"]\n \n \n @implementer(ISerializeToJson)\n@@ -28,20 +28,19 @@ def __init__(self, brain, request):\n         self.request = request\n \n     def _get_metadata_to_include(self, metadata_fields):\n-        if metadata_fields and \'_all\' in metadata_fields:\n+        if metadata_fields and "_all" in metadata_fields:\n             site = getSite()\n-            catalog = getToolByName(site, \'portal_catalog\')\n+            catalog = getToolByName(site, "portal_catalog")\n             metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\n \n-    def __call__(self, metadata_fields=(\'_all\',)):\n+    def __call__(self, metadata_fields=("_all",)):\n         metadata_to_include = self._get_metadata_to_include(metadata_fields)\n \n         # Start with a summary representation as our base\n-        result = getMultiAdapter(\n-            (self.brain, self.request), ISerializeToJsonSummary)()\n+        result = getMultiAdapter((self.brain, self.request), ISerializeToJsonSummary)()\n \n         for attr in metadata_to_include:\n             value = getattr(self.brain, attr, None)\n@@ -75,29 +74,30 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n         batch = HypermediaBatch(self.request, self.lazy_resultset)\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         links = batch.links\n         if links:\n-            results[\'batching\'] = links\n+            results["batching"] = links\n \n-        results[\'items\'] = []\n+        results["items"] = []\n         for brain in batch:\n             if fullobjects:\n                 result = getMultiAdapter(\n-                    (brain.getObject(), self.request), ISerializeToJson)(\n-                        include_items=False)\n+                    (brain.getObject(), self.request), ISerializeToJson\n+                )(include_items=False)\n             else:\n                 result = getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary)()\n+                    (brain, self.request), ISerializeToJsonSummary\n+                )()\n \n                 # Merge additional metadata into the summary we already have\n                 if metadata_fields:\n-                    metadata = getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJson)(metadata_fields=metadata_fields)\n+                    metadata = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+                        metadata_fields=metadata_fields\n+                    )\n                     result.update(metadata)\n \n-            results[\'items\'].append(result)\n+            results["items"].append(result)\n \n         return results\ndiff --git a/src/plone/restapi/serializer/collection.py b/src/plone/restapi/serializer/collection.py\nindex e6145a5e..fd514276 100644\n--- a/src/plone/restapi/serializer/collection.py\n+++ b/src/plone/restapi/serializer/collection.py\n@@ -13,22 +13,21 @@\n @implementer(ISerializeToJson)\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n-\n     def __call__(self, version=None, include_items=True):\n         collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n+            version=version\n         )\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n         results = collection_metadata\n-        if not self.request.form.get(\'fullobjects\'):\n-            results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        if not self.request.form.get("fullobjects"):\n+            results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n+        results["items"] = [\n             getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\ndiff --git a/src/plone/restapi/serializer/controlpanels.py b/src/plone/restapi/serializer/controlpanels.py\nindex 22ba4ea8..5a95eb3f 100644\n--- a/src/plone/restapi/serializer/controlpanels.py\n+++ b/src/plone/restapi/serializer/controlpanels.py\n@@ -14,25 +14,24 @@\n \n import zope.schema\n \n-SERVICE_ID = \'@controlpanels\'\n+SERVICE_ID = "@controlpanels"\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(IControlpanel)\n class ControlpanelSummarySerializeToJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n \n     def __call__(self):\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n+            "@id": "{}/{}/{}".format(\n                 self.controlpanel.context.absolute_url(),\n                 SERVICE_ID,\n-                self.controlpanel.__name__\n+                self.controlpanel.__name__,\n             ),\n-            \'title\': self.controlpanel.title,\n-            \'group\': self.controlpanel.group,\n+            "title": self.controlpanel.title,\n+            "group": self.controlpanel.group,\n         }\n \n \n@@ -44,9 +43,7 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request):\n     fieldsets = utils.get_fieldsets(context, request, schema)\n \n     # Build JSON schema properties\n-    properties = utils.get_jsonschema_properties(\n-        context, request, fieldsets\n-    )\n+    properties = utils.get_jsonschema_properties(context, request, fieldsets)\n \n     # Determine required fields\n     required = []\n@@ -57,20 +54,19 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request):\n     # Include field modes\n     for field in utils.iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'properties\': properties,\n-        \'required\': required,\n-        \'fieldsets\': utils.get_fieldset_infos(fieldsets),\n+        "type": "object",\n+        "properties": properties,\n+        "required": required,\n+        "fieldsets": utils.get_fieldset_infos(fieldsets),\n     }\n \n \n @implementer(ISerializeToJson)\n @adapter(IControlpanel)\n class ControlpanelSerializeToJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\n@@ -80,14 +76,10 @@ def __init__(self, controlpanel):\n \n     def __call__(self):\n         json_schema = get_jsonschema_for_controlpanel(\n-            self.controlpanel,\n-            self.controlpanel.context,\n-            self.controlpanel.request\n+            self.controlpanel, self.controlpanel.context, self.controlpanel.request\n         )\n \n-        proxy = self.registry.forInterface(\n-            self.schema, prefix=self.schema_prefix\n-        )\n+        proxy = self.registry.forInterface(self.schema, prefix=self.schema_prefix)\n \n         # Temporarily provide IDexterityContent, so we can use DX field\n         # serializers\n@@ -96,8 +88,7 @@ def __call__(self):\n         json_data = {}\n         for name, field in zope.schema.getFields(self.schema).items():\n             serializer = queryMultiAdapter(\n-                (field, proxy, self.controlpanel.request),\n-                IFieldSerializer\n+                (field, proxy, self.controlpanel.request), IFieldSerializer\n             )\n             if serializer:\n                 value = serializer()\n@@ -109,13 +100,13 @@ def __call__(self):\n \n         # JSON schema\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n+            "@id": "{}/{}/{}".format(\n                 self.controlpanel.context.absolute_url(),\n                 SERVICE_ID,\n-                self.controlpanel.__name__\n+                self.controlpanel.__name__,\n             ),\n-            \'title\': self.controlpanel.title,\n-            \'group\': self.controlpanel.group,\n-            \'schema\': json_schema,\n-            \'data\': json_data,\n+            "title": self.controlpanel.title,\n+            "group": self.controlpanel.group,\n+            "schema": json_schema,\n+            "data": json_data,\n         }\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 83529679..f44af42b 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -24,6 +24,7 @@\n import six\n from six.moves import map\n from six.moves import zip\n+\n # import re\n \n \n@@ -31,11 +32,11 @@ def datetimelike_to_iso(value):\n     if isinstance(value, DateTime):\n         value = value.asdatetime()\n \n-    if getattr(value, \'tzinfo\', None):\n+    if getattr(value, "tzinfo", None):\n         # timezone aware date/time objects are converted to UTC first.\n-        utc = pytz.timezone(\'UTC\')\n+        utc = pytz.timezone("UTC")\n         value = value.astimezone(utc)\n-    if getattr(value, \'microsecond\', False):\n+    if getattr(value, "microsecond", False):\n         # Microseconds are normally not used in Plone\n         value = value.replace(microsecond=0)\n     iso = value.isoformat()\n@@ -62,10 +63,7 @@ def json_compatible(value, context=None):\n     used for converting values that may be None.\n     """\n     if context is not None:\n-        adapter = queryMultiAdapter(\n-            (value, context),\n-            IContextawareJsonCompatible\n-        )\n+        adapter = queryMultiAdapter((value, context), IContextawareJsonCompatible)\n         if adapter:\n             return adapter()\n     else:\n@@ -82,14 +80,15 @@ def default_converter(value):\n         return value\n \n     raise TypeError(\n-        \'No converter for making\'\n-        \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n+        "No converter for making"\n+        " {0!r} ({1}) JSON compatible.".format(value, type(value))\n+    )\n \n \n @adapter(bytes)\n @implementer(IJsonCompatible)\n def bytes_converter(value):\n-    return safe_unicode(value, \'utf-8\')\n+    return safe_unicode(value, "utf-8")\n \n \n @adapter(list)\n@@ -181,9 +180,9 @@ def __call__(self):\n         value = self.value\n         output = value.output_relative_to(self.context)\n         return {\n-            u\'data\': json_compatible(output),\n-            u\'content-type\': json_compatible(value.mimeType),\n-            u\'encoding\': json_compatible(value.encoding),\n+            u"data": json_compatible(output),\n+            u"content-type": json_compatible(value.mimeType),\n+            u"encoding": json_compatible(value.encoding),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 22c8176e..24383be7 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -18,7 +18,6 @@\n @implementer(ISerializeToJson)\n @adapter(IConversation, IRequest)\n class ConversationSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -29,17 +28,14 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, results)\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n+        results["@id"] = batch.canonical_url\n \n-        results[\'items_total\'] = batch.items_total\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n-            getMultiAdapter(\n-                (thread[\'comment\'], self.request),\n-                ISerializeToJson\n-            )()\n+        results["items"] = [\n+            getMultiAdapter((thread["comment"], self.request), ISerializeToJson)()\n             for thread in batch\n         ]\n \n@@ -49,20 +45,17 @@ def __call__(self):\n @implementer(ISerializeToJson)\n @adapter(IComment, IRequest)\n class CommentSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, include_items=True):\n         content_url = self.context.__parent__.__parent__.absolute_url()\n-        comments_url = \'{}/@comments\'.format(content_url)\n-        url = \'{}/{}\'.format(comments_url, self.context.id)\n+        comments_url = "{}/@comments".format(content_url)\n+        url = "{}/{}".format(comments_url, self.context.id)\n \n         if self.context.in_reply_to:\n-            parent_url = \'{}/{}\'.format(\n-                comments_url, self.context.in_reply_to\n-            )\n+            parent_url = "{}/{}".format(comments_url, self.context.in_reply_to)\n             in_reply_to = str(self.context.in_reply_to)\n         else:\n             parent_url = None\n@@ -72,20 +65,19 @@ def __call__(self, include_items=True):\n         delete_own = doc_allowed and can_delete_own(self.context)\n \n         return {\n-            \'@id\': url,\n-            \'@type\': self.context.portal_type,\n-            \'@parent\': parent_url,\n-            \'comment_id\': str(self.context.id),\n-            \'in_reply_to\': in_reply_to,\n-            \'text\': {\n-                \'data\': self.context.text,\n-                \'mime-type\': self.context.mime_type\n-            },\n-            \'user_notification\': self.context.user_notification,\n-            \'author_username\': self.context.author_username,\n-            \'author_name\': self.context.author_name,\n-            \'creation_date\': IJsonCompatible(self.context.creation_date),\n-            \'modification_date\': IJsonCompatible(self.context.modification_date),  # noqa\n-            \'is_editable\': edit_comment_allowed() and can_edit(self.context),\n-            \'is_deletable\': can_delete(self.context) or delete_own\n+            "@id": url,\n+            "@type": self.context.portal_type,\n+            "@parent": parent_url,\n+            "comment_id": str(self.context.id),\n+            "in_reply_to": in_reply_to,\n+            "text": {"data": self.context.text, "mime-type": self.context.mime_type},\n+            "user_notification": self.context.user_notification,\n+            "author_username": self.context.author_username,\n+            "author_name": self.context.author_name,\n+            "creation_date": IJsonCompatible(self.context.creation_date),\n+            "modification_date": IJsonCompatible(\n+                self.context.modification_date\n+            ),  # noqa\n+            "is_editable": edit_comment_allowed() and can_edit(self.context),\n+            "is_deletable": can_delete(self.context) or delete_own,\n         }\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex ad8eae75..b12a4b4f 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -28,7 +28,6 @@\n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n class SerializeToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -36,32 +35,33 @@ def __init__(self, context, request):\n         self.permission_cache = {}\n \n     def getVersion(self, version):\n-        if version == \'current\':\n+        if version == "current":\n             return self.context\n         else:\n             repo_tool = getToolByName(self.context, "portal_repository")\n             return repo_tool.retrieve(self.context, int(version)).object\n \n     def __call__(self, version=None, include_items=True):\n-        version = \'current\' if version is None else version\n+        version = "current" if version is None else version\n \n         obj = self.getVersion(version)\n         parent = aq_parent(aq_inner(obj))\n         parent_summary = getMultiAdapter(\n-            (parent, self.request), ISerializeToJsonSummary)()\n+            (parent, self.request), ISerializeToJsonSummary\n+        )()\n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': obj.absolute_url(),\n-            \'id\': obj.id,\n-            \'@type\': obj.portal_type,\n-            \'parent\': parent_summary,\n-            \'created\': json_compatible(obj.created()),\n-            \'modified\': json_compatible(obj.modified()),\n-            \'review_state\': self._get_workflow_state(obj),\n-            \'UID\': obj.UID(),\n-            \'version\': version,\n-            \'layout\': self.context.getLayout(),\n-            \'is_folderish\': False\n+            "@id": obj.absolute_url(),\n+            "id": obj.id,\n+            "@type": obj.portal_type,\n+            "parent": parent_summary,\n+            "created": json_compatible(obj.created()),\n+            "modified": json_compatible(obj.modified()),\n+            "review_state": self._get_workflow_state(obj),\n+            "UID": obj.UID(),\n+            "version": version,\n+            "layout": self.context.getLayout(),\n+            "is_folderish": False,\n         }\n \n         # Insert expandable elements\n@@ -70,8 +70,7 @@ def __call__(self, version=None, include_items=True):\n         # Insert field values\n         for schema in iterSchemata(self.context):\n \n-            read_permissions = mergedTaggedValueDict(\n-                schema, READ_PERMISSIONS_KEY)\n+            read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n \n@@ -79,20 +78,20 @@ def __call__(self, version=None, include_items=True):\n                     continue\n \n                 serializer = queryMultiAdapter(\n-                    (field, obj, self.request),\n-                    IFieldSerializer)\n+                    (field, obj, self.request), IFieldSerializer\n+                )\n                 value = serializer()\n                 result[json_compatible(name)] = value\n \n-        result[\'allow_discussion\'] = getMultiAdapter(\n-            (self.context, self.request), name=\'conversation_view\').enabled()\n+        result["allow_discussion"] = getMultiAdapter(\n+            (self.context, self.request), name="conversation_view"\n+        ).enabled()\n \n         return result\n \n     def _get_workflow_state(self, obj):\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wftool.getInfoFor(\n-            ob=obj, name=\'review_state\', default=None)\n+        wftool = getToolByName(self.context, "portal_workflow")\n+        review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n     def check_permission(self, permission_name, obj):\n@@ -100,62 +99,57 @@ def check_permission(self, permission_name, obj):\n             return True\n \n         if permission_name not in self.permission_cache:\n-            permission = queryUtility(IPermission,\n-                                      name=permission_name)\n+            permission = queryUtility(IPermission, name=permission_name)\n             if permission is None:\n                 self.permission_cache[permission_name] = True\n             else:\n                 sm = getSecurityManager()\n                 self.permission_cache[permission_name] = bool(\n-                    sm.checkPermission(permission.title, obj))\n+                    sm.checkPermission(permission.title, obj)\n+                )\n         return self.permission_cache[permission_name]\n \n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContainer, Interface)\n class SerializeFolderToJson(SerializeToJson):\n-\n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(\n-            version=version\n-        )\n+        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n \n-        folder_metadata.update({\'is_folderish\': True})\n+        folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\'include_items\', include_items)\n+        include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\n \n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(query)\n \n             batch = HypermediaBatch(self.request, brains)\n \n-            if \'fullobjects\' not in self.request.form:\n-                result[\'@id\'] = batch.canonical_url\n-            result[\'items_total\'] = batch.items_total\n+            if "fullobjects" not in self.request.form:\n+                result["@id"] = batch.canonical_url\n+            result["items_total"] = batch.items_total\n             if batch.links:\n-                result[\'batching\'] = batch.links\n+                result["batching"] = batch.links\n \n-            if \'fullobjects\' in list(self.request.form):\n-                result[\'items\'] = getMultiAdapter(\n-                    (brains, self.request),\n-                    ISerializeToJson\n-                )(fullobjects=True)[\'items\']\n+            if "fullobjects" in list(self.request.form):\n+                result["items"] = getMultiAdapter(\n+                    (brains, self.request), ISerializeToJson\n+                )(fullobjects=True)["items"]\n             else:\n-                result[\'items\'] = [\n-                    getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJsonSummary\n-                    )()\n+                result["items"] = [\n+                    getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n                     for brain in batch\n                 ]\n         return result\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex bc3a5ded..98868216 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -19,7 +19,6 @@\n @adapter(IField, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class DefaultFieldSerializer(object):\n-\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -29,25 +28,21 @@ def __call__(self):\n         return json_compatible(self.get_value())\n \n     def get_value(self, default=None):\n-        return getattr(self.field.interface(self.context),\n-                       self.field.__name__,\n-                       default)\n+        return getattr(self.field.interface(self.context), self.field.__name__, default)\n \n \n @adapter(IChoice, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class ChoiceFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         # Binding is necessary for named vocabularies\n         if IField.providedBy(self.field):\n             self.field = self.field.bind(self.context)\n         value = self.get_value()\n-        if (value is not None\n-                and IVocabularyTokenized.providedBy(self.field.vocabulary)):\n+        if value is not None and IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 term = self.field.vocabulary.getTerm(value)\n-                value = {\'token\': term.token, \'title\': term.title}\n+                value = {"token": term.token, "title": term.title}\n             # Some fields (e.g. language) have a default value that is not in\n             # vocabulary\n             except LookupError:\n@@ -58,26 +53,27 @@ def __call__(self):\n @adapter(ICollection, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class CollectionFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         # Binding is necessary for named vocabularies\n         if IField.providedBy(self.field):\n             self.field = self.field.bind(self.context)\n         value = self.get_value()\n         value_type = self.field.value_type\n-        if (value is not None and IChoice.providedBy(value_type)\n-                and IVocabularyTokenized.providedBy(value_type.vocabulary)):\n+        if (\n+            value is not None\n+            and IChoice.providedBy(value_type)\n+            and IVocabularyTokenized.providedBy(value_type.vocabulary)\n+        ):\n             values = []\n             for v in value:\n                 term = value_type.vocabulary.getTerm(v)\n-                values.append({u\'token\': term.token, u\'title\': term.title})\n+                values.append({u"token": term.token, u"title": term.title})\n             value = self.field._type(values)\n         return json_compatible(value)\n \n \n @adapter(INamedImageField, IDexterityContent, Interface)\n class ImageFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n@@ -85,42 +81,34 @@ def __call__(self):\n \n         width, height = image.getImageSize()\n \n-        url = get_original_image_url(\n-            self.context,\n-            self.field.__name__,\n-            width,\n-            height,\n-        )\n+        url = get_original_image_url(self.context, self.field.__name__, width, height)\n \n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n-            \'filename\': image.filename,\n-            \'content-type\': image.contentType,\n-            \'size\': image.getSize(),\n-            \'download\': url,\n-            \'width\': width,\n-            \'height\': height,\n-            \'scales\': scales\n+            "filename": image.filename,\n+            "content-type": image.contentType,\n+            "size": image.getSize(),\n+            "download": url,\n+            "width": width,\n+            "height": height,\n+            "scales": scales,\n         }\n         return json_compatible(result)\n \n \n @adapter(INamedFileField, IDexterityContent, Interface)\n class FileFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         namedfile = self.field.get(self.context)\n         if namedfile is None:\n             return None\n \n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@download\',\n-                        self.field.__name__))\n+        url = "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\n         result = {\n-            \'filename\': namedfile.filename,\n-            \'content-type\': namedfile.contentType,\n-            \'size\': namedfile.getSize(),\n-            \'download\': url\n+            "filename": namedfile.filename,\n+            "content-type": namedfile.contentType,\n+            "size": namedfile.getSize(),\n+            "download": url,\n         }\n         return json_compatible(result)\n \ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex e3cc3d13..901b1e92 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -7,7 +7,7 @@\n def expandable_elements(context, request):\n     """Returns a dict containing all expandable elements.\n     """\n-    expands = request.form.get(\'expand\', \'\').split(\',\')\n+    expands = request.form.get("expand", "").split(",")\n     elements = getAdapters((context, request), IExpandableElement)\n     res = {}\n     for element in elements:\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex a547787d..a91d2364 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -19,16 +19,13 @@ def __call__(self):\n         portal = getSite()\n \n         return {\n-            \'@id\': \'{}/@groups/{}\'.format(\n-                portal.absolute_url(),\n-                group.id\n-            ),\n-            \'id\': group.id,\n-            \'groupname\': group.getGroupName(),\n-            \'email\': group.getProperty(\'email\'),\n-            \'title\': group.getProperty(\'title\'),\n-            \'description\': group.getProperty(\'description\'),\n-            \'roles\': group.getRoles(),\n+            "@id": "{}/@groups/{}".format(portal.absolute_url(), group.id),\n+            "id": group.id,\n+            "groupname": group.getGroupName(),\n+            "email": group.getProperty("email"),\n+            "title": group.getProperty("title"),\n+            "description": group.getProperty("description"),\n+            "roles": group.getRoles(),\n         }\n \n \n@@ -41,7 +38,6 @@ class SerializeGroupToJsonSummary(BaseSerializer):\n @implementer(ISerializeToJson)\n @adapter(IGroupData, Interface)\n class SerializeGroupToJson(BaseSerializer):\n-\n     def __call__(self):\n         data = super(SerializeGroupToJson, self).__call__()\n         group = self.context\n@@ -49,12 +45,12 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, members)\n \n         users_data = {\n-            \'@id\': batch.canonical_url,\n-            \'items_total\': batch.items_total,\n-            \'items\': list(batch),\n+            "@id": batch.canonical_url,\n+            "items_total": batch.items_total,\n+            "items": list(batch),\n         }\n         if batch.links:\n-            users_data[\'batching\'] = batch.links\n+            users_data["batching"] = batch.links\n \n-        data[\'users\'] = users_data\n+        data["users"] = users_data\n         return data\ndiff --git a/src/plone/restapi/serializer/local_roles.py b/src/plone/restapi/serializer/local_roles.py\nindex 2add7a68..2ecec660 100644\n--- a/src/plone/restapi/serializer/local_roles.py\n+++ b/src/plone/restapi/serializer/local_roles.py\n@@ -15,7 +15,6 @@\n @adapter(IRoleManager, Interface)\n @implementer(ISerializeToJson)\n class SerializeLocalRolesToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -27,25 +26,24 @@ def _get_title(self, role_id):\n         return util.title\n \n     def __call__(self, search=None):\n-        self.request.form[\'search_term\'] = search\n-        sharing_view = getMultiAdapter((self.context, self.request),\n-                                       name=\'sharing\')\n+        self.request.form["search_term"] = search\n+        sharing_view = getMultiAdapter((self.context, self.request), name="sharing")\n         local_roles = sharing_view.role_settings()\n \n         available_roles = []\n-        for role in sorted(sharing_view.roles(), key=itemgetter(\'id\')):\n-            util = queryUtility(ISharingPageRole, name=role[\'id\'])\n+        for role in sorted(sharing_view.roles(), key=itemgetter("id")):\n+            util = queryUtility(ISharingPageRole, name=role["id"])\n             title = util.title\n-            available_roles.append({\n-                \'id\': role[\'id\'],\n-                \'title\': translate(title, context=self.request)})\n+            available_roles.append(\n+                {"id": role["id"], "title": translate(title, context=self.request)}\n+            )\n \n         blocked_roles = getattr(\n-            aq_base(self.context),\n-            \'__ac_local_roles_block__\',\n-            False,\n+            aq_base(self.context), "__ac_local_roles_block__", False\n         )\n \n-        return {\'inherit\': not blocked_roles,\n-                \'entries\': local_roles,\n-                \'available_roles\': available_roles}\n+        return {\n+            "inherit": not blocked_roles,\n+            "entries": local_roles,\n+            "available_roles": available_roles,\n+        }\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 247ba2d3..a9014a74 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -11,7 +11,6 @@\n @implementer(ISerializeToJson)\n @adapter(IRegistry, IRequest)\n class SerializeRegistryToJson(object):\n-\n     def __init__(self, registry, request):\n         self.registry = registry\n         self.request = request\n@@ -22,26 +21,20 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n         def make_item(key):\n             record = records[key]\n             schema = getMultiAdapter(\n-                (record.field, record, self.request),\n-                IJsonSchemaProvider\n+                (record.field, record, self.request), IJsonSchemaProvider\n             )\n-            data = {\n-                \'name\': key,\n-                \'value\': self.registry[key]\n-            }\n+            data = {"name": key, "value": self.registry[key]}\n             __traceback_info__ = (record, record.field, schema)\n-            data[\'schema\'] = {\n-                \'properties\': schema.get_schema(),\n-            }\n+            data["schema"] = {"properties": schema.get_schema()}\n             return data\n \n-        results[\'items\'] = [make_item(key) for key in batch]\n+        results["items"] = [make_item(key) for key in batch]\n         return results\ndiff --git a/src/plone/restapi/serializer/relationfield.py b/src/plone/restapi/serializer/relationfield.py\nindex f229b60f..ab12e79d 100644\n--- a/src/plone/restapi/serializer/relationfield.py\n+++ b/src/plone/restapi/serializer/relationfield.py\n@@ -20,7 +20,8 @@\n def relationvalue_converter(value):\n     if value.to_object:\n         summary = getMultiAdapter(\n-            (value.to_object, getRequest()), ISerializeToJsonSummary)()\n+            (value.to_object, getRequest()), ISerializeToJsonSummary\n+        )()\n         return json_compatible(summary)\n \n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 41445a5c..0aeb3f71 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -16,50 +16,53 @@\n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n class SerializeSiteRootToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None):\n-        version = \'current\' if version is None else version\n-        if version != \'current\':\n+        version = "current" if version is None else version\n+        if version != "current":\n             return {}\n \n         query = self._build_query()\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         brains = catalog(query)\n \n         batch = HypermediaBatch(self.request, brains)\n \n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': batch.canonical_url,\n-            \'id\': self.context.id,\n-            \'@type\': \'Plone Site\',\n-            \'title\': self.context.Title(),\n-            \'parent\': {},\n-            \'is_folderish\': True,\n-            \'description\': self.context.description,\n-            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n-            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n+            "@id": batch.canonical_url,\n+            "id": self.context.id,\n+            "@type": "Plone Site",\n+            "title": self.context.Title(),\n+            "parent": {},\n+            "is_folderish": True,\n+            "description": self.context.description,\n+            "tiles": json.loads(getattr(self.context, "tiles", "{}")),\n+            "tiles_layout": json.loads(\n+                getattr(self.context, "tiles_layout", "{}")\n+            ),  # noqa\n         }\n \n         # Insert expandable elements\n         result.update(expandable_elements(self.context, self.request))\n \n-        result[\'items_total\'] = batch.items_total\n+        result["items_total"] = batch.items_total\n         if batch.links:\n-            result[\'batching\'] = batch.links\n+            result["batching"] = batch.links\n \n-        result[\'items\'] = [\n+        result["items"] = [\n             getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex a3ea13b7..4f94ba8a 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -23,13 +23,15 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         obj = IContentListingObject(self.context)\n-        summary = json_compatible({\n-            \'@id\': obj.getURL(),\n-            \'@type\': obj.PortalType(),\n-            \'title\': obj.Title(),\n-            \'description\': obj.Description(),\n-            \'review_state\': obj.review_state()\n-        })\n+        summary = json_compatible(\n+            {\n+                "@id": obj.getURL(),\n+                "@type": obj.PortalType(),\n+                "title": obj.Title(),\n+                "description": obj.Description(),\n+                "review_state": obj.review_state(),\n+            }\n+        )\n         return summary\n \n \n@@ -44,10 +46,12 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-        summary = json_compatible({\n-            \'@id\': self.context.absolute_url(),\n-            \'@type\': self.context.portal_type,\n-            \'title\': self.context.title,\n-            \'description\': self.context.description\n-        })\n+        summary = json_compatible(\n+            {\n+                "@id": self.context.absolute_url(),\n+                "@type": self.context.portal_type,\n+                "title": self.context.title,\n+                "description": self.context.description,\n+            }\n+        )\n         return summary\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex 89f0030c..df93e6f7 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -8,27 +8,24 @@\n from zope.component import adapter\n from zope.component.hooks import getSite\n \n-SERVICE_ID = \'@tiles\'\n+SERVICE_ID = "@tiles"\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(ITileType, Interface)\n class TileSummarySerializeToJson(object):\n-\n     def __init__(self, tile, request):\n         self.tile = tile\n \n     def __call__(self):\n         portal = getSite()\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n-                portal.absolute_url(),\n-                SERVICE_ID,\n-                self.tile.__name__\n+            "@id": "{}/{}/{}".format(\n+                portal.absolute_url(), SERVICE_ID, self.tile.__name__\n             ),\n-            \'title\': self.tile.title,\n-            \'description\': self.tile.description,\n-            \'icon\': self.tile.icon,\n+            "title": self.tile.title,\n+            "description": self.tile.description,\n+            "icon": self.tile.icon,\n         }\n \n \n@@ -40,9 +37,7 @@ def get_jsonschema_for_tile(tile, context, request):\n     fieldsets = utils.get_fieldsets(context, request, schema)\n \n     # Build JSON schema properties\n-    properties = utils.get_jsonschema_properties(\n-        context, request, fieldsets\n-    )\n+    properties = utils.get_jsonschema_properties(context, request, fieldsets)\n \n     # Determine required fields\n     required = []\n@@ -53,21 +48,20 @@ def get_jsonschema_for_tile(tile, context, request):\n     # Include field modes\n     for field in utils.iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'title\': tile.title,\n-        \'properties\': properties,\n-        \'required\': required,\n-        \'fieldsets\': utils.get_fieldset_infos(fieldsets),\n+        "type": "object",\n+        "title": tile.title,\n+        "properties": properties,\n+        "required": required,\n+        "fieldsets": utils.get_fieldset_infos(fieldsets),\n     }\n \n \n @implementer(ISerializeToJson)\n @adapter(ITileType, Interface)\n class TileSerializeToJson(object):\n-\n     def __init__(self, tile, request):\n         self.tile = tile\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 0f153c8f..c4b06594 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -14,15 +14,16 @@\n try:\n     # Plone 5\n     from plone.app.users.browser.userdatapanel import getUserDataSchema\n+\n     HAS_TTW_SCHEMAS = True\n except ImportError:\n     # Plone 4.3\n     from plone.app.users.userdataschema import IUserDataSchemaProvider\n+\n     HAS_TTW_SCHEMAS = False\n \n \n class BaseSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -35,13 +36,13 @@ def __call__(self):\n         roles = user.getRoles()\n         # Anonymous and Authenticated are pseudo roles assign automatically\n         # to logged-in or logged-out users. They should not be exposed here\n-        roles = list(set(roles) - set([\'Anonymous\', \'Authenticated\', ]))\n+        roles = list(set(roles) - set(["Anonymous", "Authenticated"]))\n \n         data = {\n-            \'@id\': \'{}/@users/{}\'.format(portal.absolute_url(), user.id),\n-            \'id\': user.id,\n-            \'username\': user.getUserName(),\n-            \'roles\': roles,\n+            "@id": "{}/@users/{}".format(portal.absolute_url(), user.id),\n+            "id": user.id,\n+            "username": user.getUserName(),\n+            "roles": roles,\n         }\n \n         if HAS_TTW_SCHEMAS:\n@@ -51,18 +52,19 @@ def __call__(self):\n             schema = util.getSchema()\n \n         for name in getFieldNames(schema):\n-            if name == \'portrait\':\n-                memberdata = getToolByName(portal, \'portal_memberdata\')\n+            if name == "portrait":\n+                memberdata = getToolByName(portal, "portal_memberdata")\n                 if user.id in memberdata.portraits:\n-                    value = \'{}/portal_memberdata/portraits/{}\'.format(\n-                        portal.absolute_url(), user.id)\n+                    value = "{}/portal_memberdata/portraits/{}".format(\n+                        portal.absolute_url(), user.id\n+                    )\n                 else:\n                     value = None\n-            elif name == \'pdelete\':\n+            elif name == "pdelete":\n                 continue\n             else:\n-                value = user.getProperty(name, \'\')\n-                if value == \'\':\n+                value = user.getProperty(name, "")\n+                if value == "":\n                     value = None\n                 if value:\n                     value = safe_unicode(value)\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 181459c9..b9240f01 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -14,23 +14,24 @@\n @implementer(ISerializeToJson)\n @adapter(IVocabulary, Interface)\n class SerializeVocabularyToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        title = self.request.form.get(\'title\', \'\')\n-        token = self.request.form.get(\'token\', \'\')\n+        title = self.request.form.get("title", "")\n+        token = self.request.form.get("token", "")\n \n         terms = []\n         for term in vocabulary:\n             if title and token:\n                 self.request.response.setStatus(400)\n-                return dict(error=dict(\n-                    type=\'Invalid parameters\',\n-                    message=\'You can not filter by title and token at the same time.\')  # noqa\n+                return dict(\n+                    error=dict(\n+                        type="Invalid parameters",\n+                        message="You can not filter by title and token at the same time.",\n+                    )  # noqa\n                 )\n \n             if token:\n@@ -46,25 +47,25 @@ def __call__(self, vocabulary_id):\n \n         serialized_terms = []\n         for term in batch:\n-            serializer = getMultiAdapter((term, self.request),\n-                                         interface=ISerializeToJson)\n+            serializer = getMultiAdapter(\n+                (term, self.request), interface=ISerializeToJson\n+            )\n             serialized_terms.append(serializer())\n \n         result = {\n-            \'@id\': batch.canonical_url,\n-            \'items\': serialized_terms,\n-            \'items_total\': batch.items_total,\n+            "@id": batch.canonical_url,\n+            "items": serialized_terms,\n+            "items_total": batch.items_total,\n         }\n         links = batch.links\n         if links:\n-            result[\'batching\'] = links\n+            result["batching"] = links\n         return result\n \n \n @implementer(ISerializeToJson)\n @adapter(ITokenizedTerm, Interface)\n class SerializeTermToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -73,7 +74,4 @@ def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n-        return {\n-            \'token\': token,\n-            \'title\': translate(title, context=self.request)\n-        }\n+        return {"token": token, "title": translate(title, context=self.request)}\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 48311be5..d2986d9d 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -12,7 +12,8 @@\n class Service(RestService):\n     """Base class for Plone REST API services\n     """\n-    content_type = \'application/json\'\n+\n+    content_type = "application/json"\n \n     def render(self):\n         self.check_permission()\n@@ -20,12 +21,13 @@ def render(self):\n         if content is not _no_content_marker:\n             self.request.response.setHeader("Content-Type", self.content_type)\n             return json.dumps(\n-                content, indent=2, sort_keys=True, separators=(\', \', \': \'))\n+                content, indent=2, sort_keys=True, separators=(", ", ": ")\n+            )\n \n     def check_permission(self):\n         sm = getSecurityManager()\n         if not sm.checkPermission(UseRESTAPI, self):\n-            raise Unauthorized(\'Missing %r permission\' % UseRESTAPI)\n+            raise Unauthorized("Missing %r permission" % UseRESTAPI)\n \n     def reply(self):\n         """Process the request and return a JSON serializable data structure or\ndiff --git a/src/plone/restapi/services/actions/get.py b/src/plone/restapi/services/actions/get.py\nindex c707c5bc..cb5f8111 100644\n--- a/src/plone/restapi/services/actions/get.py\n+++ b/src/plone/restapi/services/actions/get.py\n@@ -13,43 +13,38 @@\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Actions(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            \'actions\': {\n-                \'@id\': \'{}/@actions\'.format(self.context.absolute_url()),\n-            },\n-        }\n+        result = {"actions": {"@id": "{}/@actions".format(self.context.absolute_url())}}\n         if not expand:\n             return result\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n-\n-        categories = self.request.form.get(\n-            \'categories\',\n-            self.all_categories\n+            (self.context, self.request), name="plone_context_state"\n         )\n+\n+        categories = self.request.form.get("categories", self.all_categories)\n         data = {}\n         for category in categories:\n             category_action_data = []\n             actions = context_state.actions(category=category)\n             for action in actions:\n-                category_action_data.append({\n-                    \'title\': translate(action[\'title\'], context=self.request),\n-                    \'id\': action[\'id\'],\n-                    \'icon\': action[\'icon\'],\n-                })\n+                category_action_data.append(\n+                    {\n+                        "title": translate(action["title"], context=self.request),\n+                        "id": action["id"],\n+                        "icon": action["icon"],\n+                    }\n+                )\n             data[category] = category_action_data\n-        return {\'actions\': data}\n+        return {"actions": data}\n \n     @property\n     def all_categories(self):\n-        portal_actions = getToolByName(self.context, \'portal_actions\')\n+        portal_actions = getToolByName(self.context, "portal_actions")\n         categories = []\n         for id, obj in portal_actions.objectItems():\n             if IActionCategory.providedBy(obj):\n@@ -58,7 +53,6 @@ def all_categories(self):\n \n \n class ActionsGet(Service):\n-\n     def reply(self):\n         actions = Actions(self.context, self.request)\n-        return actions(expand=True)[\'actions\']\n+        return actions(expand=True)["actions"]\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex 39568e24..aa618dd2 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -4,7 +4,9 @@\n from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)  # noqa\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n@@ -14,28 +16,31 @@\n class Login(Service):\n     """Handles login and returns a JSON web token (JWT).\n     """\n+\n     def reply(self):\n         data = json_body(self.request)\n-        if \'login\' not in data or \'password\' not in data:\n+        if "login" not in data or "password" not in data:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Missing credentials\',\n-                message=\'Login and password must be provided in body.\'))\n+            return dict(\n+                error=dict(\n+                    type="Missing credentials",\n+                    message="Login and password must be provided in body.",\n+                )\n+            )\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\']\n-        password = data[\'password\']\n+        userid = data["login"]\n+        password = data["password"]\n         if six.PY2:\n-            userid = userid.encode(\'utf8\')\n-            password = password.encode(\'utf8\')\n+            userid = userid.encode("utf8")\n+            password = password.encode("utf8")\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\n-            plugins = uf._getOb(\'plugins\')\n+            plugins = uf._getOb("plugins")\n             authenticators = plugins.listPlugins(IAuthenticationPlugin)\n             plugin = None\n             for id_, authenticator in authenticators:\n@@ -45,26 +50,28 @@ def reply(self):\n \n             if plugin is None:\n                 self.request.response.setStatus(501)\n-                return dict(error=dict(\n-                    type=\'Login failed\',\n-                    message=\'JWT authentication plugin not installed.\'))\n+                return dict(\n+                    error=dict(\n+                        type="Login failed",\n+                        message="JWT authentication plugin not installed.",\n+                    )\n+                )\n \n-            user = uf.authenticate(\n-                userid, password, self.request)\n+            user = uf.authenticate(userid, password, self.request)\n         else:\n             user = None\n \n         if not user:\n             self.request.response.setStatus(401)\n-            return dict(error=dict(\n-                type=\'Invalid credentials\',\n-                message=\'Wrong login and/or password.\'))\n+            return dict(\n+                error=dict(\n+                    type="Invalid credentials", message="Wrong login and/or password."\n+                )\n+            )\n \n         payload = {}\n-        payload[\'fullname\'] = user.getProperty(\'fullname\')\n-        return {\n-            \'token\': plugin.create_token(user.getId(), data=payload)\n-        }\n+        payload["fullname"] = user.getProperty("fullname")\n+        return {"token": plugin.create_token(user.getId(), data=payload)}\n \n     def _find_userfolder(self, userid):\n         """Try to find a user folder that contains a user with the given\n@@ -74,7 +81,7 @@ def _find_userfolder(self, userid):\n         info = None\n \n         while not info:\n-            uf = getToolByName(uf_parent, \'acl_users\')\n+            uf = getToolByName(uf_parent, "acl_users")\n             if uf:\n                 info = uf._verifyUser(uf.plugins, login=userid)\n             if uf_parent is self.context.getPhysicalRoot():\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex fb868723..bbca18c3 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -1,17 +1,17 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import (\n-    IAuthenticationPlugin)\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n from plone.restapi.services import Service\n \n \n class Logout(Service):\n     """Handles logout by invalidating the JWT\n     """\n+\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n-        plugins = acl_users._getOb(\'plugins\')\n+        plugins = acl_users._getOb("plugins")\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n         for id_, authenticator in authenticators:\n             if authenticator.meta_type == "JWT Authentication Plugin":\n@@ -20,20 +20,23 @@ def reply(self):\n \n         if plugin is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Logout failed\',\n-                message=\'JWT authentication plugin not installed.\'))\n+            return dict(\n+                error=dict(\n+                    type="Logout failed",\n+                    message="JWT authentication plugin not installed.",\n+                )\n+            )\n \n         if not plugin.store_tokens:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Logout failed\',\n-                message="Token can\'t be invalidated"))\n+            return dict(\n+                error=dict(type="Logout failed", message="Token can\'t be invalidated")\n+            )\n \n         creds = plugin.extractCredentials(self.request)\n-        if creds and \'token\' in creds and plugin.delete_token(creds[\'token\']):\n+        if creds and "token" in creds and plugin.delete_token(creds["token"]):\n             self.request.response.setStatus(200)\n             return super(Logout, self).reply()\n \n         self.request.response.setStatus(400)\n-        return dict(error=dict(type=\'Logout failed\', message="Unknown token"))\n+        return dict(error=dict(type="Logout failed", message="Unknown token"))\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex cbf18325..01362244 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)  # noqa\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n@@ -14,7 +16,7 @@ class Renew(Service):\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n-        plugins = acl_users._getOb(\'plugins\')\n+        plugins = acl_users._getOb("plugins")\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n         for id_, authenticator in authenticators:\n             if authenticator.meta_type == "JWT Authentication Plugin":\n@@ -23,29 +25,32 @@ def reply(self):\n \n         if plugin is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Renew failed\',\n-                message=\'JWT authentication plugin not installed.\'))\n+            return dict(\n+                error=dict(\n+                    type="Renew failed",\n+                    message="JWT authentication plugin not installed.",\n+                )\n+            )\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        mtool = getToolByName(self.context, \'portal_membership\')\n-        if (bool(mtool.isAnonymousUser())):\n+        mtool = getToolByName(self.context, "portal_membership")\n+        if bool(mtool.isAnonymousUser()):\n             # Don\'t generate authentication tokens for anonymous users.\n             self.request.response.setStatus(401)\n-            return dict(error=dict(\n-                type=\'Invalid or expired authentication token\',\n-                message=\'The authentication token is invalid or expired.\'))\n+            return dict(\n+                error=dict(\n+                    type="Invalid or expired authentication token",\n+                    message="The authentication token is invalid or expired.",\n+                )\n+            )\n         user = mtool.getAuthenticatedMember()\n         payload = {}\n-        payload[\'fullname\'] = user.getProperty(\'fullname\')\n+        payload["fullname"] = user.getProperty("fullname")\n         new_token = plugin.create_token(user.getId(), data=payload)\n         if plugin.store_tokens and self.request._auth:\n             old_token = self.request._auth[7:]\n             plugin.delete_token(old_token)\n-        return {\n-            \'token\': new_token\n-        }\n+        return {"token": new_token}\ndiff --git a/src/plone/restapi/services/breadcrumbs/get.py b/src/plone/restapi/services/breadcrumbs/get.py\nindex a9b8c9d8..fff5bc6a 100644\n--- a/src/plone/restapi/services/breadcrumbs/get.py\n+++ b/src/plone/restapi/services/breadcrumbs/get.py\n@@ -10,35 +10,31 @@\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Breadcrumbs(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            \'breadcrumbs\': {\n-                \'@id\': \'{}/@breadcrumbs\'.format(self.context.absolute_url()),\n-            },\n+            "breadcrumbs": {\n+                "@id": "{}/@breadcrumbs".format(self.context.absolute_url())\n+            }\n         }\n         if not expand:\n             return result\n \n-        breadcrumbs_view = getMultiAdapter((self.context, self.request),\n-                                           name="breadcrumbs_view")\n+        breadcrumbs_view = getMultiAdapter(\n+            (self.context, self.request), name="breadcrumbs_view"\n+        )\n         items = []\n         for crumb in breadcrumbs_view.breadcrumbs():\n-            items.append({\n-                \'title\': crumb[\'Title\'],\n-                \'@id\': crumb[\'absolute_url\']\n-            })\n+            items.append({"title": crumb["Title"], "@id": crumb["absolute_url"]})\n \n-        result[\'breadcrumbs\'][\'items\'] = items\n+        result["breadcrumbs"]["items"] = items\n         return result\n \n \n class BreadcrumbsGet(Service):\n-\n     def reply(self):\n         breadcrumbs = Breadcrumbs(self.context, self.request)\n-        return breadcrumbs(expand=True)[\'breadcrumbs\']\n+        return breadcrumbs(expand=True)["breadcrumbs"]\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 1f51413f..30f6de2b 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -26,75 +26,65 @@ class FolderPost(Service):\n     def reply(self):\n         data = json_body(self.request)\n \n-        type_ = data.get(\'@type\', None)\n-        id_ = data.get(\'id\', None)\n-        title = data.get(\'title\', None)\n+        type_ = data.get("@type", None)\n+        id_ = data.get("id", None)\n+        title = data.get("title", None)\n \n         if not type_:\n             raise BadRequest("Property \'@type\' is required")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         try:\n             obj = create(self.context, type_, id_=id_, title=title)\n         except Unauthorized as exc:\n             self.request.response.setStatus(403)\n-            return dict(error=dict(\n-                type=\'Forbidden\',\n-                message=str(exc)))\n+            return dict(error=dict(type="Forbidden", message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Bad Request\',\n-                message=str(exc)))\n+            return dict(error=dict(type="Bad Request", message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\n         temporarily_wrapped = False\n-        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, "aq_base"):\n             obj = obj.__of__(self.context)\n             temporarily_wrapped = True\n \n         # Update fields\n-        deserializer = queryMultiAdapter((obj, self.request),\n-                                         IDeserializeFromJson)\n+        deserializer = queryMultiAdapter((obj, self.request), IDeserializeFromJson)\n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize type {}\'.format(obj.portal_type)))\n+            return dict(\n+                error=dict(message="Cannot deserialize type {}".format(obj.portal_type))\n+            )\n \n         try:\n             deserializer(validate_all=True, create=True)\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not getattr(deserializer, \'notifies_create\', False):\n+        if not getattr(deserializer, "notifies_create", False):\n             notify(ObjectCreatedEvent(obj))\n \n         obj = add(self.context, obj, rename=not bool(id_))\n \n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+        self.request.response.setHeader("Location", obj.absolute_url())\n \n-        serializer = queryMultiAdapter(\n-            (obj, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = queryMultiAdapter((obj, self.request), ISerializeToJson)\n \n         serialized_obj = serializer()\n \n         # HypermediaBatch can\'t determine the correct canonical URL for\n         # objects that have just been created via POST - so we make sure\n         # to set it here\n-        serialized_obj[\'@id\'] = obj.absolute_url()\n+        serialized_obj["@id"] = obj.absolute_url()\n \n         return serialized_obj\ndiff --git a/src/plone/restapi/services/content/delete.py b/src/plone/restapi/services/content/delete.py\nindex 33ad2605..33b032cf 100644\n--- a/src/plone/restapi/services/content/delete.py\n+++ b/src/plone/restapi/services/content/delete.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n-from plone.app.linkintegrity.exceptions import (\n-    LinkIntegrityNotificationException)\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.restapi.services import Service\n \n \ndiff --git a/src/plone/restapi/services/content/get.py b/src/plone/restapi/services/content/get.py\nindex 5e30d5a0..e8ce4354 100644\n--- a/src/plone/restapi/services/content/get.py\n+++ b/src/plone/restapi/services/content/get.py\n@@ -9,11 +9,10 @@ class ContentGet(Service):\n     """\n \n     def reply(self):\n-        serializer = queryMultiAdapter((self.context, self.request),\n-                                       ISerializeToJson)\n+        serializer = queryMultiAdapter((self.context, self.request), ISerializeToJson)\n \n         if serializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(message=\'No serializer available.\'))\n+            return dict(error=dict(message="No serializer available."))\n \n-        return serializer(version=self.request.get(\'version\'))\n+        return serializer(version=self.request.get("version"))\ndiff --git a/src/plone/restapi/services/content/sharing.py b/src/plone/restapi/services/content/sharing.py\nindex 72c40738..791add05 100644\n--- a/src/plone/restapi/services/content/sharing.py\n+++ b/src/plone/restapi/services/content/sharing.py\n@@ -16,48 +16,51 @@ class SharingGet(Service):\n \n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\n-        if not checkPermission(\'plone.DelegateRoles\', self.context):\n+        if not checkPermission("plone.DelegateRoles", self.context):\n             self.request.response.setStatus(403)\n             return\n-        serializer = queryMultiAdapter((self.context, self.request),\n-                                       interface=ISerializeToJson,\n-                                       name=\'local_roles\')\n+        serializer = queryMultiAdapter(\n+            (self.context, self.request), interface=ISerializeToJson, name="local_roles"\n+        )\n         if serializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(message=\'No serializer available.\'))\n+            return dict(error=dict(message="No serializer available."))\n \n-        search = self.request.form.get(\'search\')\n+        search = self.request.form.get("search")\n         return serializer(search=search)\n \n \n class SharingPost(Service):\n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\n-        if not checkPermission(\'plone.DelegateRoles\', self.context):\n+        if not checkPermission("plone.DelegateRoles", self.context):\n             self.request.response.setStatus(403)\n             return\n \n-        deserializer = queryMultiAdapter((self.context, self.request),\n-                                         interface=IDeserializeFromJson,\n-                                         name=\'local_roles\')\n+        deserializer = queryMultiAdapter(\n+            (self.context, self.request),\n+            interface=IDeserializeFromJson,\n+            name="local_roles",\n+        )\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize local roles for type {}\'.format(\n-                    self.context.portal_type)))\n+            return dict(\n+                error=dict(\n+                    message="Cannot deserialize local roles for type {}".format(\n+                        self.context.portal_type\n+                    )\n+                )\n+            )\n \n         try:\n             deserializer()\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n         # TODO: alternativley return the patched object with a 200\n         self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 524e7c57..4a8057e6 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -29,9 +29,9 @@\n import time\n \n TUS_OPTIONS_RESPONSE_HEADERS = {\n-    \'Tus-Resumable\': \'1.0.0\',\n-    \'Tus-Version\': \'1.0.0\',\n-    \'Tus-Extension\': \'creation,expiration\',\n+    "Tus-Resumable": "1.0.0",\n+    "Tus-Version": "1.0.0",\n+    "Tus-Extension": "creation,expiration",\n }\n \n \n@@ -45,7 +45,6 @@ def reply(self):\n \n \n class TUSBaseService(Service):\n-\n     def __call__(self):\n         # We need to add additional TUS headers if this is a CORS preflight\n         # request.\n@@ -66,16 +65,17 @@ def __call__(self):\n         return self.render()\n \n     def check_tus_version(self):\n-        version = self.request.getHeader(\'Tus-Resumable\')\n-        if version != \'1.0.0\':\n+        version = self.request.getHeader("Tus-Resumable")\n+        if version != "1.0.0":\n             return False\n         return True\n \n     def unsupported_version(self):\n-        self.request.response.setHeader(\'Tus-Version\', \'1.0.0\')\n+        self.request.response.setHeader("Tus-Version", "1.0.0")\n         self.request.response.setStatus(412)\n-        return {\'error\': {\'type\': \'Precondition Failed\',\n-                          \'message\': \'Unsupported version\'}}\n+        return {\n+            "error": {"type": "Precondition Failed", "message": "Unsupported version"}\n+        }\n \n     def error(self, type, message, status=400):\n         """\n@@ -84,10 +84,7 @@ def error(self, type, message, status=400):\n         conform error body.\n         """\n         self.request.response.setStatus(status)\n-        return {\'error\': {\n-                \'type\': type,\n-                \'message\': message,\n-                }}\n+        return {"error": {"type": type, "message": message}}\n \n \n class UploadPost(TUSBaseService):\n@@ -97,40 +94,40 @@ def reply(self):\n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        length = self.request.getHeader(\'Upload-Length\', \'\')\n+        length = self.request.getHeader("Upload-Length", "")\n         try:\n             length = int(length)\n         except ValueError:\n-            return self.error(\'Bad Request\',\n-                              \'Missing or invalid Upload-Length header\')\n+            return self.error("Bad Request", "Missing or invalid Upload-Length header")\n \n         # Parse metadata\n         metadata = {}\n-        for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n+        for item in self.request.getHeader("Upload-Metadata", "").split(","):\n             key_value = item.split()\n             if len(key_value) == 2:\n                 key = key_value[0].lower()\n-                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                value = b64decode(key_value[1]).decode("utf-8")\n                 metadata[key] = value\n-        metadata[\'length\'] = length\n-        if self.__name__.endswith(\'@tus-replace\'):\n-            metadata[\'mode\'] = \'replace\'\n+        metadata["length"] = length\n+        if self.__name__.endswith("@tus-replace"):\n+            metadata["mode"] = "replace"\n         else:\n-            metadata[\'mode\'] = \'create\'\n+            metadata["mode"] = "create"\n \n         tus_upload = TUSUpload(uuid4().hex, metadata=metadata)\n \n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\'Location\', \'{}/@tus-upload/{}\'.format(\n-            self.context.absolute_url(), tus_upload.uid))\n-        self.request.response.setHeader(\'Upload-Expires\', tus_upload.expires())\n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n+        self.request.response.setHeader(\n+            "Location",\n+            "{}/@tus-upload/{}".format(self.context.absolute_url(), tus_upload.uid),\n+        )\n+        self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n         return super(UploadPost, self).reply()\n \n \n @implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-\n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n         self.uid = None\n@@ -155,11 +152,11 @@ def tus_upload(self):\n \n     def check_add_modify_permission(self, mode):\n         sm = getSecurityManager()\n-        if mode == \'create\':\n-            if not sm.checkPermission(\'Add portal content\', self.context):\n+        if mode == "create":\n+            if not sm.checkPermission("Add portal content", self.context):\n                 raise Unauthorized\n         else:\n-            if not sm.checkPermission(\'Modify portal content\', self.context):\n+            if not sm.checkPermission("Modify portal content", self.context):\n                 raise Unauthorized\n \n \n@@ -170,20 +167,22 @@ def reply(self):\n \n         tus_upload = self.tus_upload()\n         if tus_upload is None:\n-            return self.error(\'Not Found\', \'\', 404)\n+            return self.error("Not Found", "", 404)\n \n         metadata = tus_upload.metadata()\n-        self.check_add_modify_permission(metadata.get(\'mode\', \'create\'))\n+        self.check_add_modify_permission(metadata.get("mode", "create"))\n \n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        self.request.response.setHeader(\'Upload-Length\', \'{}\'.format(\n-            tus_upload.length()))\n-        self.request.response.setHeader(\'Upload-Offset\', \'{}\'.format(\n-            tus_upload.offset()))\n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n-        self.request.response.setHeader(\'Cache-Control\', \'no-store\')\n+        self.request.response.setHeader(\n+            "Upload-Length", "{}".format(tus_upload.length())\n+        )\n+        self.request.response.setHeader(\n+            "Upload-Offset", "{}".format(tus_upload.offset())\n+        )\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n+        self.request.response.setHeader("Cache-Control", "no-store")\n         self.request.response.setStatus(200, lock=1)\n         return super(UploadHead, self).reply()\n \n@@ -196,28 +195,26 @@ def reply(self):\n \n         tus_upload = self.tus_upload()\n         if tus_upload is None:\n-            return self.error(\'Not Found\', \'\', 404)\n+            return self.error("Not Found", "", 404)\n \n         metadata = tus_upload.metadata()\n-        self.check_add_modify_permission(metadata.get(\'mode\', \'create\'))\n+        self.check_add_modify_permission(metadata.get("mode", "create"))\n \n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        content_type = self.request.getHeader(\'Content-Type\')\n-        if content_type != \'application/offset+octet-stream\':\n-            return self.error(\n-                \'Bad Request\', \'Missing or invalid Content-Type header\')\n+        content_type = self.request.getHeader("Content-Type")\n+        if content_type != "application/offset+octet-stream":\n+            return self.error("Bad Request", "Missing or invalid Content-Type header")\n \n-        offset = self.request.getHeader(\'Upload-Offset\', \'\')\n+        offset = self.request.getHeader("Upload-Offset", "")\n         try:\n             offset = int(offset)\n         except ValueError:\n-            return self.error(\n-                \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n+            return self.error("Bad Request", "Missing or invalid Upload-Offset header")\n \n         request_body = self.request._file\n-        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+        if hasattr(request_body, "raw"):  # Unwrap io.BufferedRandom\n             request_body = request_body.raw\n         tus_upload.write(request_body, offset)\n         offset = tus_upload.offset()\n@@ -225,28 +222,25 @@ def reply(self):\n         if tus_upload.finished:\n             self.create_or_modify_content(tus_upload)\n         else:\n-            self.request.response.setHeader(\n-                \'Upload-Expires\', tus_upload.expires())\n+            self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n \n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n-        self.request.response.setHeader(\'Upload-Offset\', \'{}\'.format(offset))\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n+        self.request.response.setHeader("Upload-Offset", "{}".format(offset))\n         self.request.response.setStatus(204, lock=1)\n         return super(UploadPatch, self).reply()\n \n     def create_or_modify_content(self, tus_upload):\n         metadata = tus_upload.metadata()\n-        filename = metadata.get(\'filename\', \'\')\n-        content_type = metadata.get(\'content-type\',\n-                                    \'application/octet-stream\')\n-        mode = metadata.get(\'mode\', \'create\')\n-        fieldname = metadata.get(\'fieldname\')\n-\n-        if mode == \'create\':\n-            type_ = metadata.get(\'@type\')\n+        filename = metadata.get("filename", "")\n+        content_type = metadata.get("content-type", "application/octet-stream")\n+        mode = metadata.get("mode", "create")\n+        fieldname = metadata.get("fieldname")\n+\n+        if mode == "create":\n+            type_ = metadata.get("@type")\n             if type_ is None:\n-                ctr = getToolByName(self.context, \'content_type_registry\')\n-                type_ = ctr.findTypeName(\n-                    filename.lower(), content_type, \'\') or \'File\'\n+                ctr = getToolByName(self.context, "content_type_registry")\n+                type_ = ctr.findTypeName(filename.lower(), content_type, "") or "File"\n \n             obj = create(self.context, type_)\n         else:\n@@ -256,66 +250,63 @@ def create_or_modify_content(self, tus_upload):\n             info = IPrimaryFieldInfo(obj, None)\n             if info is not None:\n                 fieldname = info.fieldname\n-            elif base_hasattr(obj, \'getPrimaryField\'):\n+            elif base_hasattr(obj, "getPrimaryField"):\n                 field = obj.getPrimaryField()\n                 fieldname = field.getName()\n \n         if not fieldname:\n-            return self.error(\'Bad Request\', \'Fieldname required\', 400)\n+            return self.error("Bad Request", "Fieldname required", 400)\n \n         # Acquisition wrap temporarily for deserialization\n         temporarily_wrapped = False\n-        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, "aq_base"):\n             obj = obj.__of__(self.context)\n             temporarily_wrapped = True\n \n         # Update field with file data\n-        deserializer = queryMultiAdapter(\n-            (obj, self.request), IDeserializeFromJson)\n+        deserializer = queryMultiAdapter((obj, self.request), IDeserializeFromJson)\n         if deserializer is None:\n             return self.error(\n-                \'Not Implemented\',\n-                \'Cannot deserialize type {}\'.format(\n-                    obj.portal_type),\n-                501)\n+                "Not Implemented",\n+                "Cannot deserialize type {}".format(obj.portal_type),\n+                501,\n+            )\n         try:\n-            deserializer(\n-                data={fieldname: tus_upload}, create=mode == \'create\')\n+            deserializer(data={fieldname: tus_upload}, create=mode == "create")\n         except DeserializationError as e:\n-            return self.error(\n-                \'Deserialization Error\', str(e), 400)\n+            return self.error("Deserialization Error", str(e), 400)\n \n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if mode == \'create\':\n-            if not getattr(deserializer, \'notifies_create\', False):\n+        if mode == "create":\n+            if not getattr(deserializer, "notifies_create", False):\n                 notify(ObjectCreatedEvent(obj))\n             obj = add(self.context, obj)\n \n         tus_upload.close()\n         tus_upload.cleanup()\n-        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+        self.request.response.setHeader("Location", obj.absolute_url())\n \n \n class TUSUpload(object):\n \n-    file_prefix = \'tus_upload_\'\n+    file_prefix = "tus_upload_"\n     expiration_period = 60 * 60\n     finished = False\n \n     def __init__(self, uid, metadata=None):\n         self.uid = uid\n \n-        self.tmp_dir = os.environ.get(\'TUS_TMP_FILE_DIR\')\n+        self.tmp_dir = os.environ.get("TUS_TMP_FILE_DIR")\n         if self.tmp_dir is None:\n-            client_home = os.environ.get(\'CLIENT_HOME\')\n-            self.tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+            client_home = os.environ.get("CLIENT_HOME")\n+            self.tmp_dir = os.path.join(client_home, "tus-uploads")\n         if not os.path.isdir(self.tmp_dir):\n             os.makedirs(self.tmp_dir)\n \n         self.filepath = os.path.join(self.tmp_dir, self.file_prefix + self.uid)\n-        self.metadata_path = self.filepath + \'.json\'\n+        self.metadata_path = self.filepath + ".json"\n         self._metadata = None\n \n         if metadata is not None:\n@@ -326,14 +317,14 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'w\') as f:\n+        with open(self.metadata_path, "w") as f:\n             json.dump(metadata, f)\n \n     def length(self):\n         """Returns the total upload length."""\n         metadata = self.metadata()\n-        if \'length\' in metadata:\n-            return metadata[\'length\']\n+        if "length" in metadata:\n+            return metadata["length"]\n         return 0\n \n     def offset(self):\n@@ -344,9 +335,9 @@ def offset(self):\n \n     def write(self, infile, offset=0):\n         """Write to uploaded file at the given offset."""\n-        mode = \'wb\'\n+        mode = "wb"\n         if os.path.exists(self.filepath):\n-            mode = \'ab+\'\n+            mode = "ab+"\n         with open(self.filepath, mode) as f:\n             f.seek(offset)\n             while True:\n@@ -362,7 +353,7 @@ def write(self, infile, offset=0):\n     def open(self):\n         """Open the uploaded file for reading and return it."""\n         if self._file is None or self._file.closed:\n-            self._file = open(self.filepath, \'rb\')\n+            self._file = open(self.filepath, "rb")\n         return self._file\n \n     def close(self):\n@@ -374,7 +365,7 @@ def metadata(self):\n         """Returns the metadata of the current upload."""\n         if self._metadata is None:\n             if os.path.exists(self.metadata_path):\n-                with open(self.metadata_path, \'rb\') as f:\n+                with open(self.metadata_path, "rb") as f:\n                     self._metadata = json.load(f)\n         return self._metadata or {}\n \n@@ -388,7 +379,7 @@ def cleanup(self):\n     def cleanup_expired(self):\n         """Cleanup unfinished uploads that have expired."""\n         for filename in os.listdir(self.tmp_dir):\n-            if fnmatch(filename, \'tus_upload_*.json\'):\n+            if fnmatch(filename, "tus_upload_*.json"):\n                 metadata_path = os.path.join(self.tmp_dir, filename)\n                 filepath = metadata_path[:-5]\n                 if os.path.exists(filepath):\n@@ -404,8 +395,7 @@ def cleanup_expired(self):\n     def expires(self):\n         """Returns the expiration time of the current upload."""\n         if os.path.exists(self.filepath):\n-            expiration = os.stat(\n-                self.filepath).st_mtime + self.expiration_period\n+            expiration = os.stat(self.filepath).st_mtime + self.expiration_period\n         else:\n             expiration = time.time() + self.expiration_period\n         return formatdate(expiration, False, True)\ndiff --git a/src/plone/restapi/services/content/update.py b/src/plone/restapi/services/content/update.py\nindex 63af95e8..b9d697eb 100644\n--- a/src/plone/restapi/services/content/update.py\n+++ b/src/plone/restapi/services/content/update.py\n@@ -14,32 +14,33 @@ def reply(self):\n \n         if is_locked(self.context, self.request):\n             self.request.response.setStatus(403)\n-            return dict(error=dict(\n-                type=\'Forbidden\', message=\'Resource is locked.\'))\n+            return dict(error=dict(type="Forbidden", message="Resource is locked."))\n \n-        deserializer = queryMultiAdapter((self.context, self.request),\n-                                         IDeserializeFromJson)\n+        deserializer = queryMultiAdapter(\n+            (self.context, self.request), IDeserializeFromJson\n+        )\n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize type {}\'.format(\n-                    self.context.portal_type)))\n+            return dict(\n+                error=dict(\n+                    message="Cannot deserialize type {}".format(\n+                        self.context.portal_type\n+                    )\n+                )\n+            )\n \n         try:\n             deserializer()\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n-        prefer = self.request.getHeader(\'Prefer\')\n-        if prefer == \'return=representation\':\n+        prefer = self.request.getHeader("Prefer")\n+        if prefer == "return=representation":\n             self.request.response.setStatus(200)\n \n             serializer = queryMultiAdapter(\n-                (self.context, self.request),\n-                ISerializeToJson\n+                (self.context, self.request), ISerializeToJson\n             )\n \n             serialized_obj = serializer()\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d4111d65..577d5e0e 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -24,32 +24,33 @@ def create(container, type_, id_=None, title=None):\n     # Generate a temporary id if the id is not given\n     if not id_:\n         now = DateTime()\n-        new_id = \'{}.{}.{}{:04d}\'.format(\n-            type_.lower().replace(\' \', \'_\'),\n-            now.strftime(\'%Y-%m-%d\'),\n+        new_id = "{}.{}.{}{:04d}".format(\n+            type_.lower().replace(" ", "_"),\n+            now.strftime("%Y-%m-%d"),\n             str(now.millis())[7:],\n-            randint(0, 9999))\n+            randint(0, 9999),\n+        )\n     else:\n         if six.PY2 and isinstance(id_, six.text_type):\n-            new_id = id_.encode(\'utf8\')\n+            new_id = id_.encode("utf8")\n         else:\n             new_id = id_\n \n-    portal_types = getToolByName(container, \'portal_types\')\n+    portal_types = getToolByName(container, "portal_types")\n     type_info = portal_types.getTypeInfo(type_)\n \n     # Check for add permission\n     if not type_info.isConstructionAllowed(container):\n-        raise Unauthorized(\'Cannot create %s\' % type_info.getId())\n+        raise Unauthorized("Cannot create %s" % type_info.getId())\n \n     # Check if allowed subobject type\n     container_type_info = portal_types.getTypeInfo(container)\n     if not container_type_info.allowType(type_):\n-        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+        raise Unauthorized("Disallowed subobject type: %s" % type_)\n \n     # Check for type constraints\n     if type_ not in [fti.getId() for fti in container.allowedContentTypes()]:\n-        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+        raise Unauthorized("Disallowed subobject type: %s" % type_)\n \n     if type_info.product:\n         # Oldstyle factory\n@@ -61,7 +62,7 @@ def create(container, type_, id_=None, title=None):\n         factory = getUtility(IFactory, type_info.factory)\n         obj = factory(new_id, title=title)\n \n-    if base_hasattr(obj, \'_setPortalTypeName\'):\n+    if base_hasattr(obj, "_setPortalTypeName"):\n         obj._setPortalTypeName(type_info.getId())\n \n     return obj\n@@ -69,11 +70,11 @@ def create(container, type_, id_=None, title=None):\n \n def add(container, obj, rename=True):\n     """Add an object to a container."""\n-    id_ = getattr(aq_base(obj), \'id\', None)\n+    id_ = getattr(aq_base(obj), "id", None)\n \n     # Archetypes objects are already created in a container thus we just fire\n     # the notification events and rename the object if necessary.\n-    if base_hasattr(obj, \'_at_rename_after_creation\'):\n+    if base_hasattr(obj, "_at_rename_after_creation"):\n         notify(ObjectAddedEvent(obj, container, id_))\n         notifyContainerModified(container)\n         if obj._at_rename_after_creation and rename:\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex 407b92bc..51286cd9 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -19,10 +19,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def get_controlpanel_adapters(self):\n-        adapters = getAdapters(\n-            (self.context, self.request),\n-            provided=IControlpanel\n-        )\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n         for name, panel in adapters:\n             panel.__name__ = name\n             yield name, panel\n@@ -33,10 +30,10 @@ def available_controlpanels(self):\n             [(p.configlet_id, name) for name, p in panels.items()]\n         )\n \n-        pctool = getToolByName(self.context, \'portal_controlpanel\')\n+        pctool = getToolByName(self.context, "portal_controlpanel")\n         for group in pctool.getGroups():\n-            for action_data in pctool.enumConfiglets(group=group[\'id\']):\n-                name = panels_by_configlet.get(action_data[\'id\'])\n+            for action_data in pctool.enumConfiglets(group=group["id"]):\n+                name = panels_by_configlet.get(action_data["id"])\n                 panel = panels.get(name)\n                 if panel:\n                     yield panel\ndiff --git a/src/plone/restapi/services/controlpanels/patch.py b/src/plone/restapi/services/controlpanels/patch.py\nindex b48a6f73..5bbcc6e3 100644\n--- a/src/plone/restapi/services/controlpanels/patch.py\n+++ b/src/plone/restapi/services/controlpanels/patch.py\n@@ -17,10 +17,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def get_controlpanel_adapters(self):\n-        adapters = getAdapters(\n-            (self.context, self.request),\n-            provided=IControlpanel\n-        )\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n         for name, panel in adapters:\n             panel.__name__ = name\n             yield name, panel\n@@ -31,7 +28,7 @@ def panel_by_name(self, name):\n \n     def reply(self):\n         if not self.controlpanel_name:\n-            raise BadRequest(\'Missing parameter controlpanelname\')\n+            raise BadRequest("Missing parameter controlpanelname")\n \n         panel = self.panel_by_name(self.controlpanel_name)\n         deserializer = IDeserializeFromJson(panel)\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 5e12ea4c..05e9374f 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -18,26 +18,26 @@ class BaseCopyMove(Service):\n \n     def __init__(self, context, request):\n         super(BaseCopyMove, self).__init__(context, request)\n-        self.portal = getMultiAdapter((self.context, self.request),\n-                                      name=\'plone_portal_state\').portal()\n+        self.portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         self.portal_url = self.portal.absolute_url()\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n         if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                key = key[len(self.portal_url) + 1:]\n+                key = key[len(self.portal_url) + 1 :]\n                 if six.PY2:\n-                    key = key.encode(\'utf8\')\n+                    key = key.encode("utf8")\n                 return self.portal.restrictedTraverse(key, None)\n-            elif key.startswith(\'/\'):\n+            elif key.startswith("/"):\n                 if six.PY2:\n-                    key = key.encode(\'utf8\')\n+                    key = key.encode("utf8")\n                 # Resolve by path\n-                return self.portal.restrictedTraverse(\n-                    key.lstrip(\'/\'), None)\n+                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\n@@ -46,8 +46,8 @@ def get_object(self, key):\n \n     def reply(self):\n         # return 401/403 Forbidden if the user has no permission\n-        if not checkPermission(\'cmf.AddPortalContent\', self.context):\n-            pm = getToolByName(self.context, \'portal_membership\')\n+        if not checkPermission("cmf.AddPortalContent", self.context):\n+            pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\n                 self.request.response.setStatus(401)\n             else:\n@@ -56,15 +56,14 @@ def reply(self):\n \n         data = json_body(self.request)\n \n-        source = data.get(\'source\', None)\n+        source = data.get("source", None)\n \n         if not source:\n             raise BadRequest("Property \'source\' is required")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         if not isinstance(source, list):\n             source = [source]\n@@ -76,9 +75,9 @@ def reply(self):\n                 if self.is_moving:\n                     # To be able to safely move the object, the user requires\n                     # permissions on the parent\n-                    if not checkPermission(\'zope2.DeleteObjects\', obj) and \\\n-                       not checkPermission(\n-                            \'zope2.DeleteObjects\', aq_parent(obj)):\n+                    if not checkPermission(\n+                        "zope2.DeleteObjects", obj\n+                    ) and not checkPermission("zope2.DeleteObjects", aq_parent(obj)):\n                         self.request.response.setStatus(403)\n                         return\n                 parent = aq_parent(obj)\n@@ -90,14 +89,17 @@ def reply(self):\n         results = []\n         for parent, ids in parents_ids.items():\n             result = self.context.manage_pasteObjects(\n-                cb_copy_data=self.clipboard(parent, ids))\n+                cb_copy_data=self.clipboard(parent, ids)\n+            )\n             for res in result:\n-                results.append({\n-                    \'source\': \'{}/{}\'.format(\n-                        parent.absolute_url(), res[\'id\']),\n-                    \'target\': \'{}/{}\'.format(\n-                        self.context.absolute_url(), res[\'new_id\']),\n-                })\n+                results.append(\n+                    {\n+                        "source": "{}/{}".format(parent.absolute_url(), res["id"]),\n+                        "target": "{}/{}".format(\n+                            self.context.absolute_url(), res["new_id"]\n+                        ),\n+                    }\n+                )\n         return results\n \n     def clipboard(self, parent, ids):\n@@ -108,6 +110,7 @@ def clipboard(self, parent, ids):\n class Copy(BaseCopyMove):\n     """Copies existing content objects.\n     """\n+\n     is_moving = False\n \n     def clipboard(self, parent, ids):\n@@ -117,6 +120,7 @@ def clipboard(self, parent, ids):\n class Move(BaseCopyMove):\n     """Moves existing content objects.\n     """\n+\n     is_moving = True\n \n     def clipboard(self, parent, ids):\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 1857f226..e9899654 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -26,11 +26,11 @@\n def fix_location_header(context, request):\n     # This replaces the location header as sent by p.a.discussion\'s forms with\n     # a RESTapi compatible location.\n-    location = request.response.headers.get(\'location\')\n-    if location and \'#\' in location:\n-        comment_id = location.split(\'#\')[-1]\n-        url = \'{}/@comments/{}\'.format(context.absolute_url(), comment_id)\n-        request.response.headers[\'location\'] = url\n+    location = request.response.headers.get("location")\n+    if location and "#" in location:\n+        comment_id = location.split("#")[-1]\n+        url = "{}/@comments/{}".format(context.absolute_url(), comment_id)\n+        request.response.headers["location"] = url\n \n \n @implementer(IPublishTraverse)\n@@ -45,16 +45,10 @@ def publishTraverse(self, request, name):\n     def reply(self):\n         conversation = IConversation(self.context)\n         if not self.comment_id:\n-            serializer = getMultiAdapter(\n-                (conversation, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((conversation, self.request), ISerializeToJson)\n         else:\n             comment = conversation[self.comment_id]\n-            serializer = getMultiAdapter(\n-                (comment, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((comment, self.request), ISerializeToJson)\n         return serializer()\n \n \n@@ -65,14 +59,13 @@ class CommentsAdd(Service):\n     def publishTraverse(self, request, name):\n         if name:\n             self.comment_id = int(name)\n-            request[\'form.widgets.in_reply_to\'] = name\n+            request["form.widgets.in_reply_to"] = name\n         return self\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n         if self.comment_id and self.comment_id not in list(conversation):\n@@ -82,15 +75,15 @@ def reply(self):\n         # Fake request data\n         body = json_body(self.request)\n         for key, value in body.items():\n-            self.request.form[\'form.widgets.\' + key] = value\n+            self.request.form["form.widgets." + key] = value\n \n         form = CommentForm(self.context, self.request)\n         form.update()\n \n-        action = form.actions[\'comment\']\n+        action = form.actions["comment"]\n         data, errors = form.extractData()\n         if errors:\n-            raise BadRequest({\'errors\': [err.error for err in errors]})\n+            raise BadRequest({"errors": [err.error for err in errors]})\n \n         form.handleComment(form=form, action=action)\n \n@@ -105,7 +98,7 @@ class CommentsUpdate(Service):\n     def publishTraverse(self, request, name):\n         if name:\n             self.comment_id = int(name)\n-            request[\'form.widgets.comment_id\'] = name\n+            request["form.widgets.comment_id"] = name\n         return self\n \n     def reply(self):\n@@ -125,16 +118,16 @@ def reply(self):\n         # Fake request data\n         body = json_body(self.request)\n         for key, value in body.items():\n-            self.request.form[\'form.widgets.\' + key] = value\n+            self.request.form["form.widgets." + key] = value\n \n         form = EditCommentForm(comment, self.request)\n         form.__parent__ = form.context.__parent__.__parent__\n         form.update()\n \n-        action = form.actions[\'comment\']\n+        action = form.actions["comment"]\n         data, errors = form.extractData()\n         if errors:\n-            raise BadRequest({\'errors\': [err.error for err in errors]})\n+            raise BadRequest({"errors": [err.error for err in errors]})\n \n         comment.modification_date = datetime.utcnow()\n         form.handleComment(form=form, action=action)\ndiff --git a/src/plone/restapi/services/discussion/utils.py b/src/plone/restapi/services/discussion/utils.py\nindex 7cdd2d61..2375c43f 100644\n--- a/src/plone/restapi/services/discussion/utils.py\n+++ b/src/plone/restapi/services/discussion/utils.py\n@@ -19,9 +19,9 @@ def can_edit(comment):\n     """Returns true if current user has the \'Edit comments\'\n     permission.\n     """\n-    return bool(getSecurityManager().checkPermission(\n-        \'Edit comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Edit comments", aq_inner(comment))\n+    )\n \n \n def permission_exists(permission_id):\n@@ -32,26 +32,26 @@ def permission_exists(permission_id):\n def can_review(comment):\n     """Returns true if current user has the \'Review comments\' permission.\n     """\n-    return bool(getSecurityManager().checkPermission(\n-        \'Review comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Review comments", aq_inner(comment))\n+    )\n \n \n def can_delete(comment):\n     """Returns true if current user has the \'Delete comments\'\n     permission.\n     """\n-    if not permission_exists(\'plone.app.discussion.DeleteComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return can_review(comment)\n \n-    return bool(getSecurityManager().checkPermission(\n-        \'Delete comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Delete comments", aq_inner(comment))\n+    )\n \n \n def delete_own_comment_allowed():\n-    if not permission_exists(\'plone.app.discussion.DeleteOwnComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteOwnComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return False\n     # Check if delete own comments is allowed in the registry\n@@ -64,11 +64,10 @@ def can_delete_own(comment):\n     """Returns true if the current user could delete the comment if it had\n     no replies. This is used to prepare hidden form buttons for JS.\n     """\n-    if not permission_exists(\'plone.app.discussion.DeleteOwnComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteOwnComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return False\n     try:\n-        return comment.restrictedTraverse(\n-            \'@@delete-own-comment\').could_delete()\n+        return comment.restrictedTraverse("@@delete-own-comment").could_delete()\n     except Unauthorized:\n         return False\ndiff --git a/src/plone/restapi/services/email_notification/post.py b/src/plone/restapi/services/email_notification/post.py\nindex 6c7681b9..5f0ea2da 100644\n--- a/src/plone/restapi/services/email_notification/post.py\n+++ b/src/plone/restapi/services/email_notification/post.py\n@@ -9,37 +9,37 @@\n \n \n class EmailNotificationPost(Service):\n-\n     def reply(self):\n         data = json_body(self.request)\n \n-        sender_from_address = data.get(\'from\', None)\n-        message = data.get(\'message\', None)\n-        sender_fullname = data.get(\'name\', \'\')\n-        subject = data.get(\'subject\', \'\')\n+        sender_from_address = data.get("from", None)\n+        message = data.get("message", None)\n+        sender_fullname = data.get("name", "")\n+        subject = data.get("subject", "")\n \n         if not sender_from_address or not message:\n-            raise BadRequest(\'Missing from or message parameters\')\n+            raise BadRequest("Missing from or message parameters")\n \n-        overview_controlpanel = getMultiAdapter((self.context, self.request),\n-                                                name=\'overview-controlpanel\')\n+        overview_controlpanel = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if overview_controlpanel.mailhost_warning():\n-            raise BadRequest(\'MailHost is not configured.\')\n+            raise BadRequest("MailHost is not configured.")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        contact_info_view = getMultiAdapter((self.context, self.request),\n-                                            name=\'contact-info\')\n+        contact_info_view = getMultiAdapter(\n+            (self.context, self.request), name="contact-info"\n+        )\n \n         contact_info_view.send_message(\n             dict(\n                 message=message,\n                 subject=subject,\n                 sender_from_address=sender_from_address,\n-                sender_fullname=sender_fullname\n+                sender_fullname=sender_fullname,\n             )\n         )\n \ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex f142e1be..61c1f61b 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -18,102 +18,106 @@\n \n \n class EmailSendPost(Service):\n-\n     def reply(self):\n         data = json_body(self.request)\n \n-        send_to_address = data.get(\'to\', None)\n-        sender_from_address = data.get(\'from\', None)\n-        message = data.get(\'message\', None)\n-        sender_fullname = data.get(\'name\', \'\')\n-        subject = data.get(\'subject\', \'\')\n+        send_to_address = data.get("to", None)\n+        sender_from_address = data.get("from", None)\n+        message = data.get("message", None)\n+        sender_fullname = data.get("name", "")\n+        subject = data.get("subject", "")\n \n         if not send_to_address or not sender_from_address or not message:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing "to", "from" or "message" parameters\'))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message=\'Missing "to", "from" or "message" parameters\',\n+                )\n+            )\n \n-        overview_controlpanel = getMultiAdapter((self.context, self.request),\n-                                                name=\'overview-controlpanel\')\n+        overview_controlpanel = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if overview_controlpanel.mailhost_warning():\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'MailHost is not configured.\'))\n+            return dict(\n+                error=dict(type="BadRequest", message="MailHost is not configured.")\n+            )\n \n         sm = getSecurityManager()\n         if not sm.checkPermission(use_mailhost_services, self.context):\n-            pm = getToolByName(self.context, \'portal_membership\')\n+            pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\n                 self.request.response.setStatus(401)\n-                error_type = \'Unauthorized\'\n+                error_type = "Unauthorized"\n             else:\n                 self.request.response.setStatus(403)\n-                error_type = \'Forbidden\'\n-            return dict(error=dict(\n-                type=error_type,\n-                message=message))\n+                error_type = "Forbidden"\n+            return dict(error=dict(type=error_type, message=message))\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_address = mail_settings.email_from_address\n-        encoding = registry.get(\'plone.email_charset\', \'utf-8\')\n-        host = getToolByName(self.context, \'MailHost\')\n+        encoding = registry.get("plone.email_charset", "utf-8")\n+        host = getToolByName(self.context, "MailHost")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         portal_title = site_settings.site_title\n \n         if not subject:\n             if not sender_fullname:\n                 subject = self.context.translate(\n-                    _(u\'A portal user via ${portal_title}\',\n-                      mapping={\'portal_title\': portal_title})\n+                    _(\n+                        u"A portal user via ${portal_title}",\n+                        mapping={"portal_title": portal_title},\n+                    )\n                 )\n             else:\n                 subject = self.context.translate(\n-                    _(u\'${sender_fullname} via ${portal_title}\',\n+                    _(\n+                        u"${sender_fullname} via ${portal_title}",\n                         mapping={\n-                            \'sender_fullname\': sender_fullname,\n-                            \'portal_title\': portal_title})\n+                            "sender_fullname": sender_fullname,\n+                            "portal_title": portal_title,\n+                        },\n+                    )\n                 )\n \n         message_intro = self.context.translate(\n-            _(u\'You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:\', # noqa\n-              mapping={\n-                \'sender_fullname\': sender_fullname or \'a portal user\',\n-                \'portal_title\': portal_title\n-              })\n+            _(\n+                u"You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n+                mapping={\n+                    "sender_fullname": sender_fullname or "a portal user",\n+                    "portal_title": portal_title,\n+                },\n+            )\n         )\n \n-        message = u\'{} \\n {}\'.format(message_intro, message)\n+        message = u"{} \\n {}".format(message_intro, message)\n \n-        message = MIMEText(message, \'plain\', encoding)\n-        message[\'Reply-To\'] = sender_from_address\n+        message = MIMEText(message, "plain", encoding)\n+        message["Reply-To"] = sender_from_address\n         try:\n             host.send(\n                 message,\n                 send_to_address,\n                 from_address,\n                 subject=subject,\n-                charset=encoding\n+                charset=encoding,\n             )\n \n         except (SMTPException, RuntimeError):\n-            plone_utils = getToolByName(self.context, \'plone_utils\')\n+            plone_utils = getToolByName(self.context, "plone_utils")\n             exception = plone_utils.exceptionString()\n-            message = \'Unable to send mail: {}\'.format(exception)\n+            message = "Unable to send mail: {}".format(exception)\n \n             self.request.response.setStatus(500)\n-            return dict(error=dict(\n-                type=\'InternalServerError\',\n-                message=message))\n+            return dict(error=dict(type="InternalServerError", message=message))\n \n         self.request.response.setStatus(204)\n         return\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex bb3e2acb..499d821f 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -19,26 +19,22 @@ def reply(self):\n         portal = getSite()\n         data = json_body(self.request)\n \n-        groupname = data.get(\'groupname\', None)\n+        groupname = data.get("groupname", None)\n \n         if not groupname:\n             raise BadRequest("Property \'groupname\' is required")\n \n-        email = data.get(\'email\', None)\n-        title = data.get(\'title\', None)\n-        description = data.get(\'description\', None)\n-        roles = data.get(\'roles\', None)\n-        groups = data.get(\'groups\', None)\n-        users = data.get(\'users\', [])\n+        email = data.get("email", None)\n+        title = data.get("title", None)\n+        description = data.get("description", None)\n+        roles = data.get("roles", None)\n+        groups = data.get("groups", None)\n+        users = data.get("users", [])\n \n-        properties = {\n-            \'title\': title,\n-            \'description\': description,\n-            \'email\': email,\n-        }\n+        properties = {"title": title, "description": description, "email": email}\n \n-        gtool = getToolByName(self.context, \'portal_groups\')\n-        regtool = getToolByName(self.context, \'portal_registration\')\n+        gtool = getToolByName(self.context, "portal_groups")\n+        regtool = getToolByName(self.context, "portal_registration")\n \n         if not regtool.isMemberIdAllowed(groupname):\n             raise BadRequest("The group name you entered is not valid.")\n@@ -48,17 +44,21 @@ def reply(self):\n             raise BadRequest("The group name you entered already exists.")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        success = gtool.addGroup(groupname, roles, groups,\n-                                 properties=properties,\n-                                 title=title,\n-                                 description=description)\n+        success = gtool.addGroup(\n+            groupname,\n+            roles,\n+            groups,\n+            properties=properties,\n+            title=title,\n+            description=description,\n+        )\n         if not success:\n             raise BadRequest(\n-                "Error occurred, could not add group {}.".format(groupname))\n+                "Error occurred, could not add group {}.".format(groupname)\n+            )\n \n         # Add members\n         group = gtool.getGroupById(groupname)\n@@ -67,10 +67,7 @@ def reply(self):\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@groups/\' + groupname\n-        )\n-        serializer = queryMultiAdapter(\n-            (group, self.request),\n-            ISerializeToJson\n+            "Location", portal.absolute_url() + "/@groups/" + groupname\n         )\n+        serializer = queryMultiAdapter((group, self.request), ISerializeToJson)\n         return serializer()\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 13b7046a..a05e780c 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -24,22 +24,21 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def reply(self):\n \n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n+        portal_groups = getToolByName(self.context, "portal_groups")\n         group = self._get_group(self._get_group_id)\n \n         if not group:\n-            raise NotFound(\'Trying to delete a non-existing group.\')\n+            raise NotFound("Trying to delete a non-existing group.")\n \n         delete_successful = portal_groups.removeGroup(self._get_group_id)\n         if delete_successful:\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0b7c88cd..d1c5a570 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class GroupsGet(Service):\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\n@@ -28,38 +27,35 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def _get_groups(self):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.listGroups()\n \n     def _get_filtered_groups(self, query, limit):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         results = portal_groups.searchGroups(id=query, max_results=limit)\n-        return [portal_groups.getGroupById(group[\'groupid\'])\n-                for group in results]\n+        return [portal_groups.getGroupById(group["groupid"]) for group in results]\n \n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n-            query = self.query.get(\'query\', \'\')\n-            limit = self.query.get(\'limit\', DEFAULT_SEARCH_RESULTS_LIMIT)\n+            query = self.query.get("query", "")\n+            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 groups = self._get_filtered_groups(query, limit)\n                 result = []\n                 for group in groups:\n                     serializer = queryMultiAdapter(\n-                        (group, self.request),\n-                        ISerializeToJsonSummary\n+                        (group, self.request), ISerializeToJsonSummary\n                     )\n                     result.append(serializer())\n                 return result\n@@ -70,8 +66,7 @@ def reply(self):\n             result = []\n             for group in self._get_groups():\n                 serializer = queryMultiAdapter(\n-                    (group, self.request),\n-                    ISerializeToJsonSummary\n+                    (group, self.request), ISerializeToJsonSummary\n                 )\n                 result.append(serializer())\n             return result\n@@ -80,8 +75,5 @@ def reply(self):\n         if not group:\n             self.request.response.setStatus(404)\n             return\n-        serializer = queryMultiAdapter(\n-            (group, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = queryMultiAdapter((group, self.request), ISerializeToJson)\n         return serializer()\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 46b22e09..f25b75ed 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -27,13 +27,12 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def reply(self):\n@@ -41,23 +40,27 @@ def reply(self):\n         group = self._get_group(self._get_group_id)\n \n         if not group:\n-            raise BadRequest(\'Trying to update a non-existing group.\')\n+            raise BadRequest("Trying to update a non-existing group.")\n \n-        title = data.get(\'title\', None)\n-        description = data.get(\'description\', None)\n-        roles = data.get(\'roles\', None)\n-        groups = data.get(\'groups\', None)\n-        users = data.get(\'users\', {})\n+        title = data.get("title", None)\n+        description = data.get("description", None)\n+        roles = data.get("roles", None)\n+        groups = data.get("groups", None)\n+        users = data.get("users", {})\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n-\n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n-\n-        portal_groups.editGroup(self._get_group_id, roles=roles, groups=groups,\n-                                title=title, description=description)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        portal_groups = getToolByName(self.context, "portal_groups")\n+\n+        portal_groups.editGroup(\n+            self._get_group_id,\n+            roles=roles,\n+            groups=groups,\n+            title=title,\n+            description=description,\n+        )\n \n         properties = {}\n         for id, property in group.propertyItems():\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 4354a288..cdb5f67b 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class HistoryGet(Service):\n-\n     def __init__(self, context, request):\n         super(HistoryGet, self).__init__(context, request)\n         self.version = None\n@@ -34,10 +33,7 @@ def reply(self):\n \n         # Listing historical data\n         content_history_viewlet = ContentHistoryViewlet(\n-            self.context,\n-            self.request,\n-            None,\n-            None\n+            self.context, self.request, None, None\n         )\n         site_url = getSite().absolute_url()\n         content_history_viewlet.navigation_root_url = site_url\n@@ -45,61 +41,57 @@ def reply(self):\n         history = content_history_viewlet.fullHistory()\n \n         unwanted_keys = [\n-            \'diff_current_url\',\n-            \'diff_previous_url\',\n-            \'preview_url\',\n-            \'actor_home\',\n-            \'actorid\',\n-            \'revert_url\',\n-            \'version_id\',\n+            "diff_current_url",\n+            "diff_previous_url",\n+            "preview_url",\n+            "actor_home",\n+            "actorid",\n+            "revert_url",\n+            "version_id",\n         ]\n \n         for item in history:\n-            item[\'actor\'] = {\n-                \'@id\': \'{}/@users/{}\'.format(site_url, item[\'actorid\']),\n-                \'id\': item[\'actorid\'],\n-                \'fullname\': item[\'actor\'].get(\'fullname\'),\n-                \'username\': item[\'actor\'].get(\'username\'),\n+            item["actor"] = {\n+                "@id": "{}/@users/{}".format(site_url, item["actorid"]),\n+                "id": item["actorid"],\n+                "fullname": item["actor"].get("fullname"),\n+                "username": item["actor"].get("username"),\n             }\n \n-            if item[\'type\'] == \'versioning\':\n-                item[\'version\'] = item[\'version_id\']\n-                item[\'@id\'] = \'{}/@history/{}\'.format(\n-                    self.context.absolute_url(),\n-                    item[\'version\']\n+            if item["type"] == "versioning":\n+                item["version"] = item["version_id"]\n+                item["@id"] = "{}/@history/{}".format(\n+                    self.context.absolute_url(), item["version"]\n                 )\n \n                 # If a revert_url is present, then CMFEditions has checked our\n                 # permissions.\n-                item[\'may_revert\'] = bool(item.get(\'revert_url\'))\n+                item["may_revert"] = bool(item.get("revert_url"))\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], six.string_types):\n-                item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n+            if not isinstance(item["time"], six.string_types):\n+                item["time"] = dt.fromtimestamp(item["time"]).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\n             # \'Create\', alike the transition_title\n-            if item[\'action\'] is None:\n-                item[\'action\'] = \'Create\'\n+            if item["action"] is None:\n+                item["action"] = "Create"\n \n             # We want action, state and transition names translated\n-            if \'state_title\' in item:\n-                item[\'state_title\'] = self.context.translate(\n-                    safe_unicode(item[\'state_title\']),\n-                    context=self.request\n+            if "state_title" in item:\n+                item["state_title"] = self.context.translate(\n+                    safe_unicode(item["state_title"]), context=self.request\n                 )\n \n-            if \'transition_title\' in item:\n-                item[\'transition_title\'] = self.context.translate(\n-                    safe_unicode(item[\'transition_title\']),\n-                    context=self.request\n+            if "transition_title" in item:\n+                item["transition_title"] = self.context.translate(\n+                    safe_unicode(item["transition_title"]), context=self.request\n                 )\n \n-            if \'action\' in item:\n-                item[\'action\'] = self.context.translate(\n-                    safe_unicode(item[\'action\']),\n-                    context=self.request\n+            if "action" in item:\n+                item["action"] = self.context.translate(\n+                    safe_unicode(item["action"]), context=self.request\n                 )\n \n             # clean up\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 0b759a2b..fe8cf314 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -10,33 +10,33 @@\n \n \n class HistoryPatch(Service):\n-\n     def reply(self):\n         body = json_body(self.request)\n-        message = revert(self.context, body[\'version\'])\n+        message = revert(self.context, body["version"])\n         return json_compatible(message)\n \n \n def revert(context, version):\n-    pr = getToolByName(context, \'portal_repository\')\n+    pr = getToolByName(context, "portal_repository")\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n     if not isinstance(title, six.text_type):\n-        title = six.text_type(title, \'utf-8\', \'ignore\')\n+        title = six.text_type(title, "utf-8", "ignore")\n \n-    if pr.supportsPolicy(context, \'version_on_revert\'):\n+    if pr.supportsPolicy(context, "version_on_revert"):\n         try:\n             commit_msg = context.translate(\n-                _(u\'Reverted to revision ${version}\',\n-                  mapping={\'version\': version})\n+                _(u"Reverted to revision ${version}", mapping={"version": version})\n             )\n             pr.save(obj=context, comment=commit_msg)\n         except FileTooLargeToVersionError:\n-            error_msg = \'The most current revision of the file could not \' + \\\n-                        \'be saved before reverting because the file is \' + \\\n-                        \'too large.\'\n-            raise BadRequest({\'errors\': error_msg, })\n+            error_msg = (\n+                "The most current revision of the file could not "\n+                + "be saved before reverting because the file is "\n+                + "too large."\n+            )\n+            raise BadRequest({"errors": error_msg})\n \n-    msg = u\'{} has been reverted to revision {}.\'.format(title, version)\n-    return {\'message\': msg}\n+    msg = u"{} has been reverted to revision {}.".format(title, version)\n+    return {"message": msg}\ndiff --git a/src/plone/restapi/services/locking/locking.py b/src/plone/restapi/services/locking/locking.py\nindex 9037879e..981d7447 100644\n--- a/src/plone/restapi/services/locking/locking.py\n+++ b/src/plone/restapi/services/locking/locking.py\n@@ -20,17 +20,18 @@ def reply(self):\n         if lockable is not None:\n             lockable.lock()\n \n-            if \'stealable\' in data and not data[\'stealable\']:\n+            if "stealable" in data and not data["stealable"]:\n                 alsoProvides(self.context, INonStealableLock)\n \n-            if \'timeout\' in data:\n+            if "timeout" in data:\n                 lock_item = webdav_lock(self.context)\n-                lock_item.setTimeout("Second-%s" % data[\'timeout\'])\n+                lock_item.setTimeout("Second-%s" % data["timeout"])\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -47,9 +48,10 @@ def reply(self):\n                 noLongerProvides(self.context, INonStealableLock)\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -63,9 +65,10 @@ def reply(self):\n             lockable.refresh_lock()\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -81,21 +84,18 @@ def lock_info(obj):\n     """Returns lock information about the given object."""\n     lockable = ILockable(obj, None)\n     if lockable is not None:\n-        info = {\n-            \'locked\': lockable.locked(),\n-            \'stealable\': lockable.stealable(),\n-        }\n+        info = {"locked": lockable.locked(), "stealable": lockable.stealable()}\n         lock_info = lockable.lock_info()\n         if len(lock_info) > 0:\n-            info[\'creator\'] = lock_info[0][\'creator\']\n-            info[\'time\'] = lock_info[0][\'time\']\n-            info[\'token\'] = lock_info[0][\'token\']\n-            lock_type = lock_info[0][\'type\']\n+            info["creator"] = lock_info[0]["creator"]\n+            info["time"] = lock_info[0]["time"]\n+            info["token"] = lock_info[0]["token"]\n+            lock_type = lock_info[0]["type"]\n             if lock_type:\n-                info[\'name\'] = lock_info[0][\'type\'].__name__\n+                info["name"] = lock_info[0]["type"].__name__\n             lock_item = webdav_lock(obj)\n             if lock_item:\n-                info[\'timeout\'] = lock_item.getTimeout()\n+                info["timeout"] = lock_item.getTimeout()\n         return info\n \n \n@@ -107,7 +107,7 @@ def webdav_lock(obj):\n \n     lock_info = lockable.lock_info()\n     if len(lock_info) > 0:\n-        token = lock_info[0][\'token\']\n+        token = lock_info[0]["token"]\n         return obj.wl_getLock(token)\n \n \n@@ -119,9 +119,9 @@ def is_locked(obj, request):\n     if lockable is None:\n         return False\n     if lockable.locked():\n-        token = request.getHeader(\'Lock-Token\', \'\')\n+        token = request.getHeader("Lock-Token", "")\n         lock_info = lockable.lock_info()\n-        if len(lock_info) > 0 and lock_info[0][\'token\'] == token:\n+        if len(lock_info) > 0 and lock_info[0]["token"] == token:\n             return False\n         return True\n     return False\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex bd2ec0e8..37fa6735 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -23,9 +23,9 @@ def __init__(self, context, request):\n \n     def __call__(self, expand=False):\n         result = {\n-            \'translations\': {\n-                \'@id\': \'{}/@translations\'.format(self.context.absolute_url()),\n-            },\n+            "translations": {\n+                "@id": "{}/@translations".format(self.context.absolute_url())\n+            }\n         }\n         if not expand:\n             return result\n@@ -34,12 +34,11 @@ def __call__(self, expand=False):\n         manager = ITranslationManager(self.context)\n         for language, translation in manager.get_translations().items():\n             if language != ILanguage(self.context).get_language():\n-                translations.append({\n-                    \'@id\': translation.absolute_url(),\n-                    \'language\': language,\n-                })\n+                translations.append(\n+                    {"@id": translation.absolute_url(), "language": language}\n+                )\n \n-        result[\'translations\'][\'items\'] = translations\n+        result["translations"]["items"] = translations\n         return result\n \n \n@@ -49,7 +48,7 @@ class TranslationInfo(Service):\n \n     def reply(self):\n         translations = Translations(self.context, self.request)\n-        return translations(expand=True)[\'translations\']\n+        return translations(expand=True)["translations"]\n \n \n class LinkTranslations(Service):\n@@ -58,48 +57,48 @@ class LinkTranslations(Service):\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         data = json_body(self.request)\n-        id_ = data.get(\'id\', None)\n+        id_ = data.get("id", None)\n         if id_ is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing content id to link to\'))\n+            return dict(\n+                error=dict(type="BadRequest", message="Missing content id to link to")\n+            )\n \n         target = self._traverse(id_)\n         if target is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Content does not exist\'))\n+            return dict(error=dict(type="BadRequest", message="Content does not exist"))\n \n         target_language = ILanguage(target).get_language()\n         manager = ITranslationManager(self.context)\n         current_translation = manager.get_translation(target_language)\n         if current_translation is not None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Already translated into language {}\'.format(\n-                    target_language)))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="Already translated into language {}".format(\n+                        target_language\n+                    ),\n+                )\n+            )\n \n         manager.register_translation(target_language, target)\n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\n-            \'Location\', self.context.absolute_url())\n+        self.request.response.setHeader("Location", self.context.absolute_url())\n         return {}\n \n     def _traverse(self, url):\n-        purl = getToolByName(self.context, \'portal_url\')\n+        purl = getToolByName(self.context, "portal_url")\n         portal = purl.getPortalObject()\n         portal_url = portal.absolute_url()\n         if url.startswith(portal_url):\n-            content_path = url[len(portal_url)+1:]\n-            content_path = content_path.split(\'/\')\n+            content_path = url[len(portal_url) + 1 :]\n+            content_path = content_path.split("/")\n             content_item = portal.restrictedTraverse(content_path)\n             return content_item\n \n@@ -112,25 +111,29 @@ class UnlinkTranslations(Service):\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         data = json_body(self.request)\n         manager = ITranslationManager(self.context)\n-        language = data.get(\'language\', None)\n+        language = data.get("language", None)\n         if language is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'You need to provide the language to unlink\'))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="You need to provide the language to unlink",\n+                )\n+            )\n \n         if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'This objects is not translated into {}\'.format(\n-                    language)))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="This objects is not translated into {}".format(language),\n+                )\n+            )\n \n         manager.remove_translation(language)\n         self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 8e9e2e93..3bcc0d1e 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -18,9 +18,11 @@ class NavigationTreeQueryBuilder(NavtreeQueryBuilder):\n \n     def __init__(self, context, depth):\n         NavtreeQueryBuilder.__init__(self, context)\n-        self.query[\'path\'] = {\'query\': \'/\'.join(context.getPhysicalPath()),\n-                              \'navtree_start\': 1,\n-                              \'depth\': depth - 1}\n+        self.query["path"] = {\n+            "query": "/".join(context.getPhysicalPath()),\n+            "navtree_start": 1,\n+            "depth": depth - 1,\n+        }\n \n \n class CustomNavtreeStrategy(SitemapNavtreeStrategy):\n@@ -37,7 +39,7 @@ def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n         if sitemapDecision is False:\n             return False\n-        depth = node.get(\'depth\', 0)\n+        depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n         else:\n@@ -46,15 +48,17 @@ def subtreeFilter(self, node):\n     def getRootPath(self, topLevel=1):\n         rootPath = getNavigationRoot(self.context)\n \n-        contextPath = \'/\'.join(self.context.getPhysicalPath())\n+        contextPath = "/".join(self.context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n             return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1:]\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split(\'/\')\n+            contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n                 return None\n-            rootPath = rootPath + \'/\' + \'/\'.join(contextSubPathElements[:topLevel]) # noqa\n+            rootPath = (\n+                rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n+            )  # noqa\n         else:\n             return None\n \n@@ -64,98 +68,95 @@ def getRootPath(self, topLevel=1):\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Navigation(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n         self.portal = getSite()\n \n     def __call__(self, expand=False):\n-        if self.request.form.get(\'expand.navigation.depth\', False):\n-            self.depth = int(self.request.form[\'expand.navigation.depth\'])\n+        if self.request.form.get("expand.navigation.depth", False):\n+            self.depth = int(self.request.form["expand.navigation.depth"])\n         else:\n             self.depth = 1\n \n         result = {\n-            \'navigation\': {\n-                \'@id\': \'{}/@navigation\'.format(self.context.absolute_url()),\n-            },\n+            "navigation": {"@id": "{}/@navigation".format(self.context.absolute_url())}\n         }\n         if not expand:\n             return result\n \n-        tabs = getMultiAdapter((self.context, self.request),\n-                               name="portal_tabs_view")\n+        tabs = getMultiAdapter((self.context, self.request), name="portal_tabs_view")\n         items = []\n         for tab in tabs.topLevelTabs():\n             if self.depth > 1:\n-                subitems = self.getTabSubTree(tabUrl=tab[\'url\'],\n-                                              tabPath=tab.get(\'path\'))\n-                items.append({\n-                    \'title\': tab.get(\'title\', tab.get(\'name\')),\n-                    \'@id\': tab[\'url\'] + \'\',\n-                    \'description\': tab.get(\'description\', \'\'),\n-                    \'items\': subitems,\n-                })\n+                subitems = self.getTabSubTree(\n+                    tabUrl=tab["url"], tabPath=tab.get("path")\n+                )\n+                items.append(\n+                    {\n+                        "title": tab.get("title", tab.get("name")),\n+                        "@id": tab["url"] + "",\n+                        "description": tab.get("description", ""),\n+                        "items": subitems,\n+                    }\n+                )\n             else:\n-                items.append({\n-                    \'title\': tab.get(\'title\', tab.get(\'name\')),\n-                    \'@id\': tab[\'url\'] + \'\',\n-                    \'description\': tab.get(\'description\', \'\'),\n-                })\n-        result[\'navigation\'][\'items\'] = items\n+                items.append(\n+                    {\n+                        "title": tab.get("title", tab.get("name")),\n+                        "@id": tab["url"] + "",\n+                        "description": tab.get("description", ""),\n+                    }\n+                )\n+        result["navigation"]["items"] = items\n         return result\n \n-    def getTabSubTree(self, tabUrl=\'\', tabPath=None):\n+    def getTabSubTree(self, tabUrl="", tabPath=None):\n         if tabPath is None:\n             # get path for current tab\'s object\n             tabPath = tabUrl.split(self.portal.absolute_url())[-1]\n \n-            if tabPath == \'\' or \'/view\' in tabPath:\n-                return \'\'\n+            if tabPath == "" or "/view" in tabPath:\n+                return ""\n \n-            if tabPath.startswith(\'/\'):\n+            if tabPath.startswith("/"):\n                 tabPath = tabPath[1:]\n-            elif tabPath.endswith(\'/\'):\n+            elif tabPath.endswith("/"):\n                 # we need a real path, without a slash that might appear\n                 # at the end of the path occasionally\n-                tabPath = str(tabPath.split(\'/\')[0])\n+                tabPath = str(tabPath.split("/")[0])\n \n-            if \'%20\' in tabPath:\n+            if "%20" in tabPath:\n                 # we have the space in object\'s ID that has to be\n                 # converted to the real spaces\n-                tabPath = tabPath.replace(\'%20\', \' \').strip()\n+                tabPath = tabPath.replace("%20", " ").strip()\n \n         tabObj = self.portal.restrictedTraverse(tabPath, None)\n         if tabObj is None:\n-            return \'\'\n+            return ""\n \n         strategy = CustomNavtreeStrategy(tabObj)\n         queryBuilder = NavigationTreeQueryBuilder(tabObj, self.depth)\n         query = queryBuilder()\n-        data = buildFolderTree(\n-            tabObj, obj=tabObj, query=query, strategy=strategy)\n+        data = buildFolderTree(tabObj, obj=tabObj, query=query, strategy=strategy)\n \n-        return self.recurse(\n-            children=data.get(\'children\', []),\n-            level=1)\n+        return self.recurse(children=data.get("children", []), level=1)\n \n     def recurse(self, children=None, level=0, bottomLevel=0):\n         li = []\n         for node in children:\n-            item = {\'title\': node[\'Title\'], \'description\': node[\'Description\']}\n-            item[\'@id\'] = node[\'getURL\']\n+            item = {"title": node["Title"], "description": node["Description"]}\n+            item["@id"] = node["getURL"]\n             if bottomLevel <= 0 or level <= bottomLevel:\n-                nc = node[\'children\']\n-                nc = self.recurse(nc, level+1, bottomLevel)\n+                nc = node["children"]\n+                nc = self.recurse(nc, level + 1, bottomLevel)\n                 if nc:\n-                    item[\'items\'] = nc\n+                    item["items"] = nc\n             li.append(item)\n         return li\n \n \n class NavigationGet(Service):\n-\n     def reply(self):\n         navigation = Navigation(self.context, self.request)\n-        return navigation(expand=True)[\'navigation\']\n+        return navigation(expand=True)["navigation"]\ndiff --git a/src/plone/restapi/services/principals/get.py b/src/plone/restapi/services/principals/get.py\nindex 658977e2..4473231e 100644\n--- a/src/plone/restapi/services/principals/get.py\n+++ b/src/plone/restapi/services/principals/get.py\n@@ -9,12 +9,11 @@\n \n \n class PrincipalsGet(Service):\n-\n     def reply(self):\n-        if self.request.form.get(\'search\', False):\n-            self.search_term = self.request.form[\'search\']\n+        if self.request.form.get("search", False):\n+            self.search_term = self.request.form["search"]\n         else:\n-            raise BadRequest(\'Required \\"search\\" parameter is missing.\')\n+            raise BadRequest(\'Required "search" parameter is missing.\')\n \n         users = self.serialize_principals(self.user_search_results())\n         groups = self.serialize_principals(self.group_search_results())\n@@ -27,8 +26,7 @@ def serialize_principals(self, principals):\n         result = []\n         for principal in principals:\n             serializer = getMultiAdapter(\n-                (principal, self.request),\n-                ISerializeToJsonSummary\n+                (principal, self.request), ISerializeToJsonSummary\n             )\n             result.append(serializer())\n         return result\n@@ -36,37 +34,48 @@ def serialize_principals(self, principals):\n     def user_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n-                chain(*[hunter.searchUsers(**{field: search_term})\n-                      for field in [\'name\', \'fullname\', \'email\']]), \'userid\')\n+                chain(\n+                    *[\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    ]\n+                ),\n+                "userid",\n+            )\n \n         def get_principal_by_id(user_id):\n-            mtool = getToolByName(self.context, \'portal_membership\')\n+            mtool = getToolByName(self.context, "portal_membership")\n             return mtool.getMemberById(user_id)\n \n         return self._principal_search_results(\n-            search_for_principal, get_principal_by_id, \'user\', \'userid\')\n+            search_for_principal, get_principal_by_id, "user", "userid"\n+        )\n \n     def group_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n-                chain(*[hunter.searchGroups(**{field: search_term})\n-                      for field in [\'id\', \'title\']]), \'groupid\')\n+                chain(\n+                    *[\n+                        hunter.searchGroups(**{field: search_term})\n+                        for field in ["id", "title"]\n+                    ]\n+                ),\n+                "groupid",\n+            )\n \n         def get_principal_by_id(group_id):\n-            portal_groups = getToolByName(self.context, \'portal_groups\')\n+            portal_groups = getToolByName(self.context, "portal_groups")\n             return portal_groups.getGroupById(group_id)\n \n         return self._principal_search_results(\n-            search_for_principal, get_principal_by_id, \'group\', \'groupid\')\n+            search_for_principal, get_principal_by_id, "group", "groupid"\n+        )\n \n     def _principal_search_results(\n-            self, search_for_principal,\n-            get_principal_by_id,\n-            principal_type,\n-            id_key):\n+        self, search_for_principal, get_principal_by_id, principal_type, id_key\n+    ):\n \n-        hunter = getMultiAdapter(\n-            (self.context, self.request), name=\'pas_search\')\n+        hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n \n         principals = []\n         for principal_info in search_for_principal(hunter, self.search_term):\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex ed53e17d..649ff88d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -9,7 +9,6 @@\n \n @implementer(IPublishTraverse)\n class RegistryGet(Service):\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\n@@ -24,7 +23,8 @@ def _get_record_name(self):\n         if len(self.params) != 1:\n             raise Exception(\n                 "Must supply exactly one parameter (dotted name of"\n-                "the record to be retrieved)")\n+                "the record to be retrieved)"\n+            )\n \n         return self.params[0]\n \n@@ -34,7 +34,5 @@ def reply(self):\n             value = registry[self._get_record_name]\n             return value\n         else:  # batched listing\n-            serializer = getMultiAdapter(\n-                (registry, self.request), ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((registry, self.request), ISerializeToJson)\n             return serializer()\ndiff --git a/src/plone/restapi/services/registry/update.py b/src/plone/restapi/services/registry/update.py\nindex bc24f176..1cb6f754 100644\n--- a/src/plone/restapi/services/registry/update.py\n+++ b/src/plone/restapi/services/registry/update.py\n@@ -9,21 +9,20 @@\n \n \n class RegistryUpdate(Service):\n-\n     def reply(self):\n-        records_to_update = json.loads(self.request.get(\'BODY\', \'{}\'))\n+        records_to_update = json.loads(self.request.get("BODY", "{}"))\n         registry = getUtility(IRegistry)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         for key, value in records_to_update.items():\n             if key not in registry:\n                 raise NotImplementedError(\n                     "This endpoint is only intended to update existing "\n-                    "records! Couldn\'t find key %r" % key)\n+                    "records! Couldn\'t find key %r" % key\n+                )\n             registry[key] = value\n         self.request.response.setStatus(204)\n         return None\ndiff --git a/src/plone/restapi/services/roles/get.py b/src/plone/restapi/services/roles/get.py\nindex b51d69e6..aafc81e9 100644\n--- a/src/plone/restapi/services/roles/get.py\n+++ b/src/plone/restapi/services/roles/get.py\n@@ -6,16 +6,15 @@\n \n \n class RolesGet(Service):\n-\n     def reply(self):\n-        pmemb = getToolByName(aq_inner(self.context), \'portal_membership\')\n-        roles = [r for r in pmemb.getPortalRoles() if r != \'Owner\']\n+        pmemb = getToolByName(aq_inner(self.context), "portal_membership")\n+        roles = [r for r in pmemb.getPortalRoles() if r != "Owner"]\n         return [\n             {\n-                \'@type\': \'role\',\n-                \'@id\': \'{}/@roles/{}\'.format(self.context.absolute_url(), r),\n-                \'id\': r,\n-                \'title\': translate(r, context=self.request, domain=\'plone\'),\n+                "@type": "role",\n+                "@id": "{}/@roles/{}".format(self.context.absolute_url(), r),\n+                "id": r,\n+                "title": translate(r, context=self.request, domain="plone"),\n             }\n             for r in roles\n         ]\ndiff --git a/src/plone/restapi/services/search/get.py b/src/plone/restapi/services/search/get.py\nindex 2ddade4a..1135a1e8 100644\n--- a/src/plone/restapi/services/search/get.py\n+++ b/src/plone/restapi/services/search/get.py\n@@ -5,7 +5,6 @@\n \n \n class SearchGet(Service):\n-\n     def reply(self):\n         query = self.request.form.copy()\n         query = unflatten_dotted_dict(query)\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 0da486c7..bc2541da 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -13,7 +13,6 @@\n \n @implementer(IPublishTraverse)\n class TilesGet(Service):\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\n@@ -28,23 +27,19 @@ def reply(self):\n             self.content_type = "application/json+schema"\n             try:\n                 tile = getUtility(ITileType, name=self.params[0])\n-                return getMultiAdapter(\n-                    (tile, self.request), ISerializeToJson)()\n+                return getMultiAdapter((tile, self.request), ISerializeToJson)()\n             except KeyError:\n                 self.content_type = "application/json"\n                 self.request.response.setStatus(404)\n                 return {\n-                    \'type\': \'NotFound\',\n-                    \'message\': \'Tile "{}" could not be found.\'.format(\n-                        self.params[0]\n-                    )\n+                    "type": "NotFound",\n+                    "message": \'Tile "{}" could not be found.\'.format(self.params[0]),\n                 }\n \n         result = []\n         tiles = getUtilitiesFor(ITileType, context=self.context)\n         for name, tile in tiles:\n-            serializer = getMultiAdapter(\n-                (tile, self.request), ISerializeToJsonSummary)\n+            serializer = getMultiAdapter((tile, self.request), ISerializeToJsonSummary)\n             if checkPermission(tile.add_permission, self.context):\n                 result.append(serializer())\n \ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 64da46ab..495a482d 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class TypesGet(Service):\n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\n@@ -29,13 +28,14 @@ def _get_record_name(self):\n         if len(self.params) != 1:\n             raise Exception(\n                 "Must supply exactly one parameter (dotted name of"\n-                "the record to be retrieved)")\n+                "the record to be retrieved)"\n+            )\n \n         return self.params[0]\n \n     def check_security(self):\n         # Only expose type information to authenticated users\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         if portal_membership.isAnonymousUser():\n             raise Unauthorized\n \n@@ -47,31 +47,27 @@ def reply(self):\n             try:\n                 portal_type = self.params.pop()\n                 return get_jsonschema_for_portal_type(\n-                    portal_type,\n-                    self.context,\n-                    self.request\n+                    portal_type, self.context, self.request\n                 )\n             except KeyError:\n                 self.content_type = "application/json"\n                 self.request.response.setStatus(404)\n                 return {\n-                    \'type\': \'NotFound\',\n-                    \'message\': \'Type "{}" could not be found.\'.format(\n-                        portal_type\n-                    )\n+                    "type": "NotFound",\n+                    "message": \'Type "{}" could not be found.\'.format(portal_type),\n                 }\n         vocab_factory = getUtility(\n-            IVocabularyFactory,\n-            name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+            IVocabularyFactory, name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n \n-        portal_types = getToolByName(self.context, \'portal_types\')\n+        portal_types = getToolByName(self.context, "portal_types")\n \n         # allowedContentTypes already checks for permissions\n         allowed_types = [x.getId() for x in self.context.allowedContentTypes()]\n \n-        portal = getMultiAdapter((self.context, self.request),\n-                                 name=\'plone_portal_state\').portal()\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         portal_url = portal.absolute_url()\n \n         # only addables if the content type is folderish\n@@ -80,12 +76,13 @@ def reply(self):\n         # Filter out any type that doesn\'t have lookupSchema. We are depended\n         # on that in lower level code.\n         ftis = [portal_types[x.value] for x in vocab_factory(self.context)]\n-        ftis = [fti for fti in ftis if getattr(fti, \'lookupSchema\', None)]\n+        ftis = [fti for fti in ftis if getattr(fti, "lookupSchema", None)]\n \n         return [\n             {\n-                \'@id\': \'{}/@types/{}\'.format(portal_url, fti.getId()),\n-                \'title\': translate(fti.Title(), context=self.request),\n-                \'addable\': fti.getId() in allowed_types if can_add else False,\n-            } for fti in ftis\n+                "@id": "{}/@types/{}".format(portal_url, fti.getId()),\n+                "title": translate(fti.Title(), context=self.request),\n+                "addable": fti.getId() in allowed_types if can_add else False,\n+            }\n+            for fti in ftis\n         ]\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 8f924966..6faf296e 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -21,14 +21,14 @@\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     from plone.app.controlpanel.security import ISecuritySchema\n \n try:  # pragma: no cover\n     # Plone 5.1+\n     from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n     from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     # Plone 5.0 and earlier\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n@@ -51,68 +51,67 @@ def publishTraverse(self, request, name):\n         return self\n \n     def validate_input_data(self, portal, original_data):\n-        \'\'\'Returns a tuple of (required_fields, allowed_fields)\'\'\'\n+        """Returns a tuple of (required_fields, allowed_fields)"""\n         security = getAdapter(portal, ISecuritySchema)\n \n         # remove data we don\'t want to check for\n         data = {}\n-        for key in [\'username\', \'email\', \'password\',\n-                    \'roles\', \'sendPasswordReset\']:\n+        for key in ["username", "email", "password", "roles", "sendPasswordReset"]:\n             if key in original_data:\n                 data[key] = original_data[key]\n \n-        required = [\'email\']\n-        allowed = [\'email\']\n+        required = ["email"]\n+        allowed = ["email"]\n \n         if not security.use_email_as_login:\n-            required.append(\'username\')\n-            allowed.append(\'username\')\n+            required.append("username")\n+            allowed.append("username")\n \n         if self.can_manage_users:\n-            allowed.append(\'password\')\n-            allowed.append(\'sendPasswordReset\')\n-            allowed.append(\'roles\')\n+            allowed.append("password")\n+            allowed.append("sendPasswordReset")\n+            allowed.append("roles")\n         else:\n             if security.enable_user_pwd_choice:\n-                allowed.append(\'password\')\n-                required.append(\'password\')\n+                allowed.append("password")\n+                required.append("password")\n \n         # check input data\n         for fieldname in required:\n             if not data.get(fieldname, None):\n                 self.add_field_error(\n-                    fieldname,\n-                    \'Property \\\'{}\\\' is required.\'.format(fieldname))\n+                    fieldname, "Property \'{}\' is required.".format(fieldname)\n+                )\n         for fieldname in data:\n             if fieldname not in allowed:\n                 self.add_field_error(\n-                    fieldname,\n-                    \'Property \\\'{}\\\' is not allowed.\'.format(fieldname))\n+                    fieldname, "Property \'{}\' is not allowed.".format(fieldname)\n+                )\n \n-        password = data.get(\'password\')\n-        send_password_reset = data.get(\'sendPasswordReset\')\n+        password = data.get("password")\n+        send_password_reset = data.get("sendPasswordReset")\n         if self.can_manage_users:\n             if password is None and send_password_reset is None:\n                 self.add_field_error(\n-                    \'sendPasswordReset\',\n-                    \'You have to either send a password or sendPasswordReset.\')\n+                    "sendPasswordReset",\n+                    "You have to either send a password or sendPasswordReset.",\n+                )\n             if password and send_password_reset:\n                 self.add_field_error(\n-                    \'sendPasswordReset\',\n-                    \'You can\\\'t send both password and sendPasswordReset.\')\n+                    "sendPasswordReset",\n+                    "You can\'t send both password and sendPasswordReset.",\n+                )\n \n     def add_field_error(self, field, message):\n-        self.errors.append({\'field\': field,\n-                            \'message\': message})\n+        self.errors.append({"field": field, "message": message})\n \n     def errors_to_string(self):\n-        return \' \'.join([error[\'message\'] for error in self.errors])\n+        return " ".join([error["message"] for error in self.errors])\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         portal = getSite()\n \n@@ -121,36 +120,39 @@ def reply(self):\n         self.errors = []\n         self.validate_input_data(portal, data)\n         security = getAdapter(self.context, ISecuritySchema)\n-        registration = getToolByName(self.context, \'portal_registration\')\n+        registration = getToolByName(self.context, "portal_registration")\n \n         general_usage_error = (\n             "Either post to @users to create a user or use "\n-            "@users/<username>/reset-password to update the password.")\n+            "@users/<username>/reset-password to update the password."\n+        )\n         if len(self.params) not in [0, 2]:\n             raise Exception(general_usage_error)\n \n         if len(self.params) == 2:\n-            if self.params[1] == \'reset-password\':\n+            if self.params[1] == "reset-password":\n                 return self.update_password(data)\n-            raise Exception(\'Unknown Endpoint @users/%s/%s\' % self.params)\n+            raise Exception("Unknown Endpoint @users/%s/%s" % self.params)\n \n         # Add a portal member\n         if not self.can_add_member:\n-            return self._error(403, \'Forbidden\',\n-                               \'You need AddPortalMember permission.\')\n+            return self._error(403, "Forbidden", "You need AddPortalMember permission.")\n \n         if self.errors:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'WrongParameterError\',\n-                message=\'Error in fields. {}\'.format(self.errors_to_string()),\n-                errors=self.errors))\n-\n-        username = data.pop(\'username\', None)\n-        email = data.pop(\'email\', None)\n-        password = data.pop(\'password\', None)\n-        roles = data.pop(\'roles\', [\'Member\', ])\n-        send_password_reset = data.pop(\'sendPasswordReset\', None)\n+            return dict(\n+                error=dict(\n+                    type="WrongParameterError",\n+                    message="Error in fields. {}".format(self.errors_to_string()),\n+                    errors=self.errors,\n+                )\n+            )\n+\n+        username = data.pop("username", None)\n+        email = data.pop("email", None)\n+        password = data.pop("password", None)\n+        roles = data.pop("roles", ["Member"])\n+        send_password_reset = data.pop("sendPasswordReset", None)\n         properties = data\n \n         if PLONE5:\n@@ -159,39 +161,32 @@ def reply(self):\n             # login_name one, so we leave it as it is, improving the Plone 5\n             # story\n             user_id_login_name_data = {\n-                \'username\': username,\n-                \'email\': email,\n-                \'fullname\': data.get(\'fullname\', \'\')\n+                "username": username,\n+                "email": email,\n+                "fullname": data.get("fullname", ""),\n             }\n \n             register_view = getMultiAdapter(\n-                (self.context, self.request),\n-                name=\'register\'\n+                (self.context, self.request), name="register"\n             )\n \n             register_view.generate_user_id(user_id_login_name_data)\n             register_view.generate_login_name(user_id_login_name_data)\n \n-            user_id = user_id_login_name_data.get(\n-                \'user_id\',\n-                data.get(\'username\')\n-            )\n-            login_name = user_id_login_name_data.get(\n-                \'login_name\',\n-                data.get(\'username\')\n-            )\n+            user_id = user_id_login_name_data.get("user_id", data.get("username"))\n+            login_name = user_id_login_name_data.get("login_name", data.get("username"))\n \n             username = user_id\n-            properties[\'username\'] = user_id\n+            properties["username"] = user_id\n         else:\n             # set username based on the login settings (username or email)\n             if security.use_email_as_login:\n                 username = email\n-                properties[\'username\'] = email\n+                properties["username"] = email\n             else:\n-                properties[\'username\'] = username\n+                properties["username"] = username\n \n-        properties[\'email\'] = email\n+        properties["email"] = email\n \n         if not self.can_manage_users and not security.enable_user_pwd_choice:\n             send_password_reset = True\n@@ -199,18 +194,13 @@ def reply(self):\n             password = registration.generatePassword()\n         # Create user\n         try:\n-            registration = getToolByName(portal, \'portal_registration\')\n+            registration = getToolByName(portal, "portal_registration")\n             user = registration.addMember(\n-                username,\n-                password,\n-                roles,\n-                properties=properties\n+                username, password, roles, properties=properties\n             )\n         except ValueError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'MissingParameterError\',\n-                message=str(e)))\n+            return dict(error=dict(type="MissingParameterError", message=str(e)))\n \n         if PLONE5:\n             # After user creation, we have to fix the login_name if it differs.\n@@ -219,40 +209,34 @@ def reply(self):\n             if user_id != login_name:\n                 # The user id differs from the login name.  Set the login\n                 # name correctly.\n-                pas = getToolByName(self.context, \'acl_users\')\n+                pas = getToolByName(self.context, "acl_users")\n                 pas.updateLoginName(user_id, login_name)\n \n         if send_password_reset:\n             registration.registeredNotify(username)\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@users/\' + username\n-        )\n-        serializer = queryMultiAdapter(\n-            (user, self.request),\n-            ISerializeToJson\n+            "Location", portal.absolute_url() + "/@users/" + username\n         )\n+        serializer = queryMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _get_user_by_login_name(self, user_id):\n-        return get_member_by_login_name(\n-            self.context, user_id, raise_exceptions=False)\n+        return get_member_by_login_name(self.context, user_id, raise_exceptions=False)\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\'error\': {\'type\': type,\n-                          \'message\': message}}\n+        return {"error": {"type": type, "message": message}}\n \n     @property\n     def can_manage_users(self):\n         sm = getSecurityManager()\n-        return sm.checkPermission(\'plone.app.controlpanel.UsersAndGroups\',\n-                                  self.context)\n+        return sm.checkPermission("plone.app.controlpanel.UsersAndGroups", self.context)\n \n     @property\n     def can_set_own_password(self):\n@@ -267,13 +251,13 @@ def can_add_member(self):\n     def update_password(self, data):\n         username = self.params[0]\n         target_user = self._get_user_by_login_name(username)\n-        reset_token = data.get(\'reset_token\', None)\n-        old_password = data.get(\'old_password\', None)\n-        new_password = data.get(\'new_password\', None)\n+        reset_token = data.get("reset_token", None)\n+        old_password = data.get("old_password", None)\n+        new_password = data.get("new_password", None)\n \n-        pas = getToolByName(self.context, \'acl_users\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n-        pwt = getToolByName(self.context, \'portal_password_reset\')\n+        pas = getToolByName(self.context, "acl_users")\n+        mt = getToolByName(self.context, "portal_membership")\n+        pwt = getToolByName(self.context, "portal_password_reset")\n \n         if target_user is None:\n             self.request.response.setStatus(404)\n@@ -281,58 +265,75 @@ def update_password(self, data):\n \n         # Send password reset mail\n         if list(data) == []:\n-            registration_tool = getToolByName(self.context,\n-                                              \'portal_registration\')\n+            registration_tool = getToolByName(self.context, "portal_registration")\n             registration_tool.mailPassword(username, self.request)\n             return\n \n         if reset_token and old_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "You can\'t use \'reset_token\' and \'old_password\' together.")\n+                400,\n+                "Invalid parameters",\n+                "You can\'t use \'reset_token\' and \'old_password\' together.",\n+            )\n         if reset_token and not new_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "If you pass \'reset_token\' you have to pass \'new_password\'")\n+                400,\n+                "Invalid parameters",\n+                "If you pass \'reset_token\' you have to pass \'new_password\'",\n+            )\n         if old_password and not new_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "If you pass \'old_password\' you have to pass \'new_password\'")\n+                400,\n+                "Invalid parameters",\n+                "If you pass \'old_password\' you have to pass \'new_password\'",\n+            )\n \n         # Reset the password with a reset token\n         if reset_token:\n             try:\n                 pwt.resetPassword(username, reset_token, new_password)\n             except InvalidRequestError:\n-                return self._error(403, \'Unknown Token\',\n-                                   \'The reset_token is unknown/not valid.\')\n+                return self._error(\n+                    403, "Unknown Token", "The reset_token is unknown/not valid."\n+                )\n             except ExpiredRequestError:\n-                return self._error(403, \'Expired Token\',\n-                                   \'The reset_token is expired.\')\n+                return self._error(403, "Expired Token", "The reset_token is expired.")\n             return\n \n         # set the new password by giving the old password\n         if old_password:\n             if not (self.can_manage_users or self.can_set_own_password):\n                 return self._error(\n-                    403, \'Not allowed\', \'You can\\\'t set a password without \'\n-                    \'a password reset token.\')\n+                    403,\n+                    "Not allowed",\n+                    "You can\'t set a password without " "a password reset token.",\n+                )\n             authenticated_user_id = mt.getAuthenticatedMember().getId()\n             if username != authenticated_user_id:\n                 return self._error(\n-                    403, "Wrong user",\n-                    ("You need to be logged in as the user \'%s\' to set "\n-                     "the password.") % username)\n+                    403,\n+                    "Wrong user",\n+                    (\n+                        "You need to be logged in as the user \'%s\' to set "\n+                        "the password."\n+                    )\n+                    % username,\n+                )\n \n             check_password_auth = pas.authenticate(\n-                username, old_password.encode(\'utf-8\'), self.request)\n+                username, old_password.encode("utf-8"), self.request\n+            )\n             if not check_password_auth:\n-                return self._error(403, "Wrong password",\n-                                   "The password passed as \'old_password\' "\n-                                   "is wrong.")\n+                return self._error(\n+                    403,\n+                    "Wrong password",\n+                    "The password passed as \'old_password\' " "is wrong.",\n+                )\n             mt.setPassword(new_password)\n             return\n \n-        return self._error(400, \'Invalid parameters\',\n-                           \'See the user endpoint documentation for the \'\n-                           \'valid parameters.\')\n+        return self._error(\n+            400,\n+            "Invalid parameters",\n+            "See the user endpoint documentation for the " "valid parameters.",\n+        )\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 35fc3145..d1e58292 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -23,16 +23,13 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def reply(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n-        delete_successful = portal_membership.deleteMembers(\n-            (self._get_user_id,)\n-        )\n+        portal_membership = getToolByName(portal, "portal_membership")\n+        delete_successful = portal_membership.deleteMembers((self._get_user_id,))\n         if delete_successful:\n             self.request.response.setStatus(204)\n         else:\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex fa91577a..d548ca71 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class UsersGet(Service):\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\n@@ -28,42 +27,39 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _get_users(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.listMembers()\n \n     def _get_filtered_users(self, query, limit):\n         portal = getSite()\n-        acl_users = getToolByName(portal, \'acl_users\')\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        acl_users = getToolByName(portal, "acl_users")\n+        portal_membership = getToolByName(portal, "portal_membership")\n         results = acl_users.searchUsers(id=query, max_results=limit)\n-        return [portal_membership.getMemberById(user[\'userid\'])\n-                for user in results]\n+        return [portal_membership.getMemberById(user["userid"]) for user in results]\n \n     def reply(self):\n         sm = getSecurityManager()\n         if len(self.query) > 0 and len(self.params) == 0:\n-            query = self.query.get(\'query\', \'\')\n-            limit = self.query.get(\'limit\', DEFAULT_SEARCH_RESULTS_LIMIT)\n+            query = self.query.get("query", "")\n+            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 # Someone is searching users, check if he is authorized\n-                if sm.checkPermission(\'Manage portal\', self.context):\n+                if sm.checkPermission("Manage portal", self.context):\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n-                            (user, self.request),\n-                            ISerializeToJson\n+                            (user, self.request), ISerializeToJson\n                         )\n                         result.append(serializer())\n                     return result\n@@ -75,12 +71,11 @@ def reply(self):\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if he is authorized\n-            if sm.checkPermission(\'Manage portal\', self.context):\n+            if sm.checkPermission("Manage portal", self.context):\n                 result = []\n                 for user in self._get_users():\n                     serializer = queryMultiAdapter(\n-                        (user, self.request),\n-                        ISerializeToJson\n+                        (user, self.request), ISerializeToJson\n                     )\n                     result.append(serializer())\n                 return result\n@@ -90,22 +85,19 @@ def reply(self):\n \n         # Some is asking one user, check if the logged in user is asking\n         # his own information or he is a Manager\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         current_user_id = mt.getAuthenticatedMember().getId()\n \n         if sm.checkPermission(\n-            \'plone.restapi: Access Plone user information\', self.context) or \\\n-           (current_user_id and current_user_id == self._get_user_id):\n+            "plone.restapi: Access Plone user information", self.context\n+        ) or (current_user_id and current_user_id == self._get_user_id):\n \n             # we retrieve the user on the user id not the username\n             user = self._get_user(self._get_user_id)\n             if not user:\n                 self.request.response.setStatus(404)\n                 return\n-            serializer = queryMultiAdapter(\n-                (user, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = queryMultiAdapter((user, self.request), ISerializeToJson)\n             return serializer()\n         else:\n             self.request.response.setStatus(401)\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 42f46cd5..b6d61ca4 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -20,7 +20,7 @@\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n@@ -41,51 +41,48 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _change_user_password(self, user, value):\n-        acl_users = getToolByName(self.context, \'acl_users\')\n+        acl_users = getToolByName(self.context, "acl_users")\n         acl_users.userSetPassword(user.getUserId(), value)\n \n     def reply(self):\n-        user_settings_to_update = json.loads(self.request.get(\'BODY\', \'{}\'))\n+        user_settings_to_update = json.loads(self.request.get("BODY", "{}"))\n         user = self._get_user(self._get_user_id)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         security = getAdapter(self.context, ISecuritySchema)\n \n         if self.can_manage_users:\n             for key, value in user_settings_to_update.items():\n-                if key == \'password\':\n+                if key == "password":\n                     self._change_user_password(user, value)\n-                elif key == \'username\':\n+                elif key == "username":\n                     set_own_login_name(user, value)\n                 else:\n-                    if key == \'portrait\' and value.get(\'data\'):\n+                    if key == "portrait" and value.get("data"):\n                         self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n-            roles = user_settings_to_update.get(\'roles\', {})\n+            roles = user_settings_to_update.get("roles", {})\n             if roles:\n                 to_add = [key for key, enabled in roles.items() if enabled]\n-                to_remove = [key for key, enabled in roles.items()\n-                             if not enabled]\n+                to_remove = [key for key, enabled in roles.items() if not enabled]\n \n                 target_roles = set(user.getRoles()) - set(to_remove)\n                 target_roles = target_roles | set(to_add)\n \n-                acl_users = getToolByName(self.context, \'acl_users\')\n+                acl_users = getToolByName(self.context, "acl_users")\n                 acl_users.userFolderEditUser(\n                     principal_id=user.id,\n                     password=None,\n@@ -94,23 +91,28 @@ def reply(self):\n                 )\n         elif self._get_current_user == self._get_user_id:\n             for key, value in user_settings_to_update.items():\n-                if key == \'password\' and \\\n-                   security.enable_user_pwd_choice and \\\n-                   self.can_set_own_password:\n+                if (\n+                    key == "password"\n+                    and security.enable_user_pwd_choice\n+                    and self.can_set_own_password\n+                ):\n                     self._change_user_password(user, value)\n                 else:\n-                    if key == \'portrait\' and value.get(\'data\'):\n+                    if key == "portrait" and value.get("data"):\n                         self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n         else:\n             if self._is_anonymous:\n-                return self._error(401, \'Unauthorized\',\n-                                   \'You are not authorized to perform this \'\n-                                   \'action\')\n+                return self._error(\n+                    401,\n+                    "Unauthorized",\n+                    "You are not authorized to perform this " "action",\n+                )\n             else:\n-                return self._error(403, \'Forbidden\', \'You can\\\'t update the \'\n-                                        \'properties of this user\')\n+                return self._error(\n+                    403, "Forbidden", "You can\'t update the " "properties of this user"\n+                )\n \n         self.request.response.setStatus(204)\n         return None\n@@ -118,8 +120,7 @@ def reply(self):\n     @property\n     def can_manage_users(self):\n         sm = getSecurityManager()\n-        return sm.checkPermission(\'plone.app.controlpanel.UsersAndGroups\',\n-                                  self.context)\n+        return sm.checkPermission("plone.app.controlpanel.UsersAndGroups", self.context)\n \n     @property\n     def can_set_own_password(self):\n@@ -128,39 +129,38 @@ def can_set_own_password(self):\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\'error\': {\'type\': type,\n-                          \'message\': message}}\n+        return {"error": {"type": type, "message": message}}\n \n     @property\n     def _get_current_user(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getAuthenticatedMember().getId()\n \n     @property\n     def _is_anonymous(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.isAnonymousUser()\n \n     def set_member_portrait(self, user, portrait):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         safe_id = portal_membership._getSafeMemberId(user.getId())\n-        content_type = \'application/octet-stream\'\n+        content_type = "application/octet-stream"\n         filename = None\n \n-        content_type = portrait.get(\'content-type\', content_type)\n-        filename = portrait.get(\'filename\', filename)\n-        data = portrait.get(\'data\')\n+        content_type = portrait.get("content-type", content_type)\n+        filename = portrait.get("filename", filename)\n+        data = portrait.get("data")\n         if isinstance(data, six.text_type):\n-            data = data.encode(\'utf-8\')\n-        if \'encoding\' in portrait:\n-            data = codecs.decode(data, portrait[\'encoding\'])\n+            data = data.encode("utf-8")\n+        if "encoding" in portrait:\n+            data = codecs.decode(data, portrait["encoding"])\n         if isinstance(data, six.text_type):\n-            data = data.encode(\'utf-8\')\n+            data = data.encode("utf-8")\n \n-        if portrait.get(\'scale\', False):\n+        if portrait.get("scale", False):\n             # Only scale if the scale (default Plone behavior) boolean is set\n             # This should be handled by the core in the future\n             scaled, mimetype = scale_image(six.BytesIO(data))\n@@ -169,6 +169,6 @@ def set_member_portrait(self, user, portrait):\n             # frontend\n             scaled = data\n \n-        portrait = Image(id=safe_id, file=scaled, title=\'\')\n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        portrait = Image(id=safe_id, file=scaled, title="")\n+        membertool = getToolByName(self, "portal_memberdata")\n         membertool._setPortrait(portrait, safe_id)\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex 48233e6d..3ebe5abe 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -12,7 +12,6 @@\n \n @implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\n@@ -24,22 +23,16 @@ def publishTraverse(self, request, name):\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\n-            \'error\': {\n-                \'type\': type,\n-                \'message\': message\n-            }\n-        }\n+        return {"error": {"type": type, "message": message}}\n \n     def reply(self):\n         if len(self.params) == 0:\n             return [\n                 {\n-                    \'@id\': \'{}/@vocabularies/{}\'.format(\n-                        self.context.absolute_url(),\n-                        vocab[0]\n+                    "@id": "{}/@vocabularies/{}".format(\n+                        self.context.absolute_url(), vocab[0]\n                     ),\n-                    \'title\': vocab[0]\n+                    "title": vocab[0],\n                 }\n                 for vocab in getUtilitiesFor(IVocabularyFactory)\n             ]\n@@ -49,19 +42,14 @@ def reply(self):\n             factory = getUtility(IVocabularyFactory, name=name)\n         except ComponentLookupError:\n             return self._error(\n-                404, "Not Found",\n-                "The vocabulary \'{}\' does not exist".format(name)\n+                404, "Not Found", "The vocabulary \'{}\' does not exist".format(name)\n             )\n \n         vocabulary = factory(self.context)\n         vocabulary_name = self.params[0]\n         serializer = getMultiAdapter(\n-            (vocabulary, self.request),\n-            interface=ISerializeToJson\n+            (vocabulary, self.request), interface=ISerializeToJson\n         )\n         return serializer(\n-            \'{}/@vocabularies/{}\'.format(\n-                self.context.absolute_url(),\n-                vocabulary_name\n-            )\n+            "{}/@vocabularies/{}".format(self.context.absolute_url(), vocabulary_name)\n         )\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex a4cb0e54..13b828b8 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -15,16 +15,13 @@\n @implementer(IExpandableElement)\n @adapter(IWorkflowAware, Interface)\n class WorkflowInfo(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            \'workflow\': {\n-                "@id": \'{}/@workflow\'.format(self.context.absolute_url()),\n-            },\n+            "workflow": {"@id": "{}/@workflow".format(self.context.absolute_url())}\n         }\n         if not expand:\n             return result\n@@ -34,10 +31,10 @@ def __call__(self, expand=False):\n         # API we fake the response to the endpoint by providing an empty\n         # response instead of a 404.\n         if IPloneSiteRoot.providedBy(self.context):\n-            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            result["workflow"].update({"history": [], "transitions": []})\n             return result\n \n-        wftool = getToolByName(self.context, \'portal_workflow\')\n+        wftool = getToolByName(self.context, "portal_workflow")\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\n         except WorkflowException:\n@@ -46,32 +43,33 @@ def __call__(self, expand=False):\n         actions = wftool.listActionInfos(object=self.context)\n         transitions = []\n         for action in actions:\n-            if action[\'category\'] != \'workflow\':\n+            if action["category"] != "workflow":\n                 continue\n \n-            title = action[\'title\']\n+            title = action["title"]\n             if isinstance(title, six.binary_type):\n-                title = title.decode(\'utf8\')\n+                title = title.decode("utf8")\n \n-            transitions.append({\n-                \'@id\': \'{}/@workflow/{}\'.format(\n-                    self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(title),\n-            })\n+            transitions.append(\n+                {\n+                    "@id": "{}/@workflow/{}".format(\n+                        self.context.absolute_url(), action["id"]\n+                    ),\n+                    "title": self.context.translate(title),\n+                }\n+            )\n \n         for item, action in enumerate(history):\n             title = wftool.getTitleForStateOnType(\n-                action[\'review_state\'],\n-                self.context.portal_type\n+                action["review_state"], self.context.portal_type\n             )\n             if isinstance(title, six.binary_type):\n-                title = title.decode(\'utf8\')\n-            history[item][\'title\'] = self.context.translate(title)\n+                title = title.decode("utf8")\n+            history[item]["title"] = self.context.translate(title)\n \n-        result[\'workflow\'].update({\n-            \'history\': json_compatible(history),\n-            \'transitions\': transitions,\n-        })\n+        result["workflow"].update(\n+            {"history": json_compatible(history), "transitions": transitions}\n+        )\n         return result\n \n \n@@ -81,4 +79,4 @@ class WorkflowInfoService(Service):\n \n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n-        return info(expand=True)[\'workflow\']\n+        return info(expand=True)["workflow"]\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 945122c2..05cfb0ee 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -28,7 +28,7 @@ class WorkflowTransition(Service):\n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n         self.transition = None\n-        self.wftool = getToolByName(context, \'portal_workflow\')\n+        self.wftool = getToolByName(context, "portal_workflow")\n \n     def publishTraverse(self, request, name):\n         if self.transition is None:\n@@ -40,70 +40,73 @@ def publishTraverse(self, request, name):\n     def reply(self):\n         if self.transition is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing transition\'))\n+            return dict(error=dict(type="BadRequest", message="Missing transition"))\n \n         data = json_body(self.request)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        comment = data.get(\'comment\', \'\')\n-        include_children = data.get(\'include_children\', False)\n+        comment = data.get("comment", "")\n+        include_children = data.get("include_children", False)\n         publication_dates = {}\n-        if \'effective\' in data:\n-            publication_dates[\'effective\'] = data[\'effective\']\n-        if \'expires\' in data:\n-            publication_dates[\'expires\'] = data[\'expires\']\n+        if "effective" in data:\n+            publication_dates["effective"] = data["effective"]\n+        if "expires" in data:\n+            publication_dates["expires"] = data["expires"]\n         # Archetypes has different field names\n-        if \'effectiveDate\' in data:\n-            publication_dates[\'effectiveDate\'] = data[\'effectiveDate\']\n-        if \'expirationDate\' in data:\n-            publication_dates[\'expirationDate\'] = data[\'expirationDate\']\n+        if "effectiveDate" in data:\n+            publication_dates["effectiveDate"] = data["effectiveDate"]\n+        if "expirationDate" in data:\n+            publication_dates["expirationDate"] = data["expirationDate"]\n \n         try:\n             self.recurse_transition(\n-                [self.context], comment, publication_dates, include_children)\n+                [self.context], comment, publication_dates, include_children\n+            )\n \n         except WorkflowException as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'WorkflowException\',\n-                message=translate(str(e), context=self.request)))\n+            return dict(\n+                error=dict(\n+                    type="WorkflowException",\n+                    message=translate(str(e), context=self.request),\n+                )\n+            )\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Bad Request\',\n-                message=str(e)))\n+            return dict(error=dict(type="Bad Request", message=str(e)))\n \n         history = self.wftool.getInfoFor(self.context, "review_history")\n         action = history[-1]\n         if six.PY2:\n-            action[\'title\'] = self.context.translate(\n+            action["title"] = self.context.translate(\n                 self.wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type).decode(\'utf8\'))\n+                    action["review_state"], self.context.portal_type\n+                ).decode("utf8")\n+            )\n         else:\n-            action[\'title\'] = self.context.translate(\n+            action["title"] = self.context.translate(\n                 self.wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type))\n+                    action["review_state"], self.context.portal_type\n+                )\n+            )\n \n         return json_compatible(action)\n \n-    def recurse_transition(self, objs, comment, publication_dates,\n-                           include_children=False):\n+    def recurse_transition(\n+        self, objs, comment, publication_dates, include_children=False\n+    ):\n         for obj in objs:\n             if publication_dates:\n-                deserializer = queryMultiAdapter((obj, self.request),\n-                                                 IDeserializeFromJson)\n+                deserializer = queryMultiAdapter(\n+                    (obj, self.request), IDeserializeFromJson\n+                )\n                 deserializer(data=publication_dates)\n \n             self.wftool.doActionFor(obj, self.transition, comment=comment)\n             if include_children and IFolderish.providedBy(obj):\n                 self.recurse_transition(\n-                    obj.objectValues(), comment, publication_dates,\n-                    include_children)\n+                    obj.objectValues(), comment, publication_dates, include_children\n+                )\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex 73a41d2b..aaaf2165 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -4,20 +4,21 @@\n from plone.restapi.pas.plugin import JWTAuthenticationPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n-from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n+from Products.PluggableAuthService.interfaces.authservice import (\n+    IPluggableAuthService,\n+)  # noqa: E501\n from zope.interface import implementer\n \n \n @implementer(INonInstallable)\n class HiddenProfiles(object):\n-\n     def getNonInstallableProfiles(self):  # pragma: no cover\n         """Do not show on Plone\'s list of installable profiles."""\n         return [\n-            u\'plone.restapi:performance\',\n-            u\'plone.restapi:testing\',\n-            u\'plone.restapi:tiles\',\n-            u\'plone.restapi:uninstall\',\n+            u"plone.restapi:performance",\n+            u"plone.restapi:testing",\n+            u"plone.restapi:tiles",\n+            u"plone.restapi:uninstall",\n         ]\n \n     def getNonInstallableProducts(self):  # pragma: no cover\n@@ -25,23 +26,20 @@ def getNonInstallableProducts(self):  # pragma: no cover\n \n         This method is only used in Plone 5.1+.\n         """\n-        return [\n-            u\'plone.restapi.upgrades\',\n-        ]\n+        return [u"plone.restapi.upgrades"]\n \n \n def install_pas_plugin(context):\n     uf_parent = aq_inner(context)\n     while True:\n-        uf = getToolByName(uf_parent, \'acl_users\')\n-        if IPluggableAuthService.providedBy(uf) and \'jwt_auth\' not in uf:\n-            plugin = JWTAuthenticationPlugin(\'jwt_auth\')\n+        uf = getToolByName(uf_parent, "acl_users")\n+        if IPluggableAuthService.providedBy(uf) and "jwt_auth" not in uf:\n+            plugin = JWTAuthenticationPlugin("jwt_auth")\n             uf._setObject(plugin.getId(), plugin)\n-            plugin = uf[\'jwt_auth\']\n-            plugin.manage_activateInterfaces([\n-                \'IAuthenticationPlugin\',\n-                \'IExtractionPlugin\',\n-            ])\n+            plugin = uf["jwt_auth"]\n+            plugin.manage_activateInterfaces(\n+                ["IAuthenticationPlugin", "IExtractionPlugin"]\n+            )\n         if uf_parent is uf_parent.getPhysicalRoot():\n             break\n         uf_parent = aq_parent(uf_parent)\n@@ -50,7 +48,7 @@ def install_pas_plugin(context):\n def import_various(context):\n     """Miscellanous steps import handle\n     """\n-    if context.readDataFile(\'plone.restapi_various.txt\') is None:\n+    if context.readDataFile("plone.restapi_various.txt") is None:\n         return\n \n     site = context.getSite()\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 16552218..7f635685 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -43,7 +43,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.multilingual\')\n+    pkg_resources.get_distribution("plone.app.multilingual")\n     PAM_INSTALLED = True\n except pkg_resources.DistributionNotFound:\n     PAM_INSTALLED = False\n@@ -56,13 +56,13 @@\n     PLONE_5 = True  # pragma: no cover\n \n try:\n-    pkg_resources.get_distribution(\'Products.Archetypes\')\n+    pkg_resources.get_distribution("Products.Archetypes")\n except pkg_resources.DistributionNotFound:\n     HAS_AT = False\n else:\n     HAS_AT = True\n \n-ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n+ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n def set_available_languages():\n@@ -79,7 +79,7 @@ def set_available_languages():\n def set_supported_languages(portal):\n     """Set supported languages to the same predictable set for all test layers.\n     """\n-    language_tool = getToolByName(portal, \'portal_languages\')\n+    language_tool = getToolByName(portal, "portal_languages")\n     for lang in ENABLED_LANGUAGES:\n         language_tool.addSupportedLanguage(lang)\n \n@@ -92,28 +92,31 @@ def enable_request_language_negotiation(portal):\n     """\n     if PLONE_5:\n         from Products.CMFPlone.interfaces import ILanguageSchema\n+\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.use_request_negotiation = True\n     else:\n-        lang_tool = getToolByName(portal, \'portal_languages\')\n+        lang_tool = getToolByName(portal, "portal_languages")\n         lang_tool.use_request_negotiation = True\n \n \n class DateTimeFixture(Layer):\n-\n     def setUp(self):\n-        tz = \'UTC\'\n+        tz = "UTC"\n         # Patch DateTime\'s timezone for deterministic behavior.\n         from DateTime import DateTime\n+\n         self.DT_orig_localZone = DateTime.localZone\n         DateTime.localZone = lambda cls=None, ltm=None: tz\n         from plone.dexterity import content\n+\n         content.FLOOR_DATE = DateTime(1970, 0)\n         content.CEILING_DATE = DateTime(2500, 0)\n \n     def tearDown(self):\n         from DateTime import DateTime\n+\n         DateTime.localZone = self.DT_orig_localZone\n \n \n@@ -123,29 +126,31 @@ def tearDown(self):\n import time  # noqa\n from persistent.TimeStamp import TimeStamp  # noqa\n \n+\n def patchedNewTid(old):  # noqa\n-    if getattr(time.time, \'previous_time_function\', False):\n+    if getattr(time.time, "previous_time_function", False):\n         t = time.time.previous_time_function()\n-        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5]+(t % 60,))\n+        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5] + (t % 60,))\n     else:\n         t = time.time()\n-        ts = TimeStamp(*time.gmtime(t)[:5]+(t % 60,))\n+        ts = TimeStamp(*time.gmtime(t)[:5] + (t % 60,))\n     if old is not None:\n         ts = ts.laterThan(TimeStamp(old))\n     return ts.raw()\n \n \n class FreezeTimeFixture(Layer):\n-\n     def setUp(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n+        if PLONE_VERSION.base_version >= "5.1":\n             from ZODB import utils\n+\n             self.ZODB_orig_newTid = utils.newTid\n             utils.newTid = patchedNewTid\n \n     def tearDown(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n+        if PLONE_VERSION.base_version >= "5.1":\n             from ZODB import utils\n+\n             utils.newTid = self.ZODB_orig_newTid\n \n \n@@ -154,176 +159,168 @@ def tearDown(self):\n \n class PloneRestApiDXLayer(PloneSandboxLayer):\n \n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, \'plone.restapi\')\n+        z2.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         set_supported_languages(portal)\n \n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n+        applyProfile(portal, "plone.restapi:default")\n+        applyProfile(portal, "plone.restapi:testing")\n         add_catalog_indexes(portal, DX_TYPES_INDEXES)\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n-        quickInstallProduct(portal, \'collective.MockMailHost\')\n-        applyProfile(portal, \'collective.MockMailHost:default\')\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n+        quickInstallProduct(portal, "collective.MockMailHost")\n+        applyProfile(portal, "collective.MockMailHost:default")\n+        states = portal.portal_workflow["simple_publication_workflow"].states\n         if six.PY2:  # issue 676\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                "utf8"\n+            )  # noqa: E501\n         else:\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n-    name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXLayer:Functional"\n+    name="PloneRestApiDXLayer:Functional",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_DX_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXLayerFreeze:Functional",\n )\n \n \n class PloneRestApiDXPAMLayer(PloneSandboxLayer):\n \n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n \n-        z2.installProduct(app, \'plone.restapi\')\n+        xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n+\n+        z2.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         set_supported_languages(portal)\n-        if portal.portal_setup.profileExists(\'plone.app.multilingual:default\'):\n-            applyProfile(portal, \'plone.app.multilingual:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n+        if portal.portal_setup.profileExists("plone.app.multilingual:default"):\n+            applyProfile(portal, "plone.app.multilingual:default")\n+        applyProfile(portal, "plone.restapi:default")\n+        applyProfile(portal, "plone.restapi:testing")\n         add_catalog_indexes(portal, DX_TYPES_INDEXES)\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n+        states = portal.portal_workflow["simple_publication_workflow"].states\n         if six.PY2:  # issue 676\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                "utf8"\n+            )  # noqa: E501\n         else:\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_PAM_FIXTURE = PloneRestApiDXPAMLayer()\n PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,),\n-    name="PloneRestApiDXPAMLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXPAMLayer:Functional"\n+    name="PloneRestApiDXPAMLayer:Functional",\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_DX_PAM_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXPAMLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXPAMLayerFreeze:Functional",\n )\n \n \n if HAS_AT:\n+\n     class PloneRestApiATLayer(PloneSandboxLayer):\n \n-        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE)\n \n         def setUpZope(self, app, configurationContext):\n             import Products.ATContentTypes\n+\n             self.loadZCML(package=Products.ATContentTypes)\n             import plone.app.dexterity\n+\n             self.loadZCML(package=plone.app.dexterity)\n \n             import plone.restapi\n+\n             xmlconfig.file(\n-                \'configure.zcml\',\n-                plone.restapi,\n-                context=configurationContext\n+                "configure.zcml", plone.restapi, context=configurationContext\n             )\n \n-            z2.installProduct(app, \'Products.Archetypes\')\n-            z2.installProduct(app, \'Products.ATContentTypes\')\n-            z2.installProduct(app, \'plone.app.collection\')\n-            z2.installProduct(app, \'plone.app.blob\')\n-            z2.installProduct(app, \'plone.restapi\')\n+            z2.installProduct(app, "Products.Archetypes")\n+            z2.installProduct(app, "Products.ATContentTypes")\n+            z2.installProduct(app, "plone.app.collection")\n+            z2.installProduct(app, "plone.app.blob")\n+            z2.installProduct(app, "plone.restapi")\n \n         def setUpPloneSite(self, portal):\n             portal.acl_users.userFolderAddUser(\n-                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+            )\n             set_supported_languages(portal)\n \n-            if portal.portal_setup.profileExists(\n-                    \'Products.ATContentTypes:default\'):\n-                applyProfile(portal, \'Products.ATContentTypes:default\')\n-            if portal.portal_setup.profileExists(\n-                    \'plone.app.collection:default\'):\n-                applyProfile(portal, \'plone.app.collection:default\')\n+            if portal.portal_setup.profileExists("Products.ATContentTypes:default"):\n+                applyProfile(portal, "Products.ATContentTypes:default")\n+            if portal.portal_setup.profileExists("plone.app.collection:default"):\n+                applyProfile(portal, "plone.app.collection:default")\n \n-            applyProfile(portal, \'plone.app.dexterity:default\')\n-            applyProfile(portal, \'plone.restapi:default\')\n-            applyProfile(portal, \'plone.restapi:testing\')\n+            applyProfile(portal, "plone.app.dexterity:default")\n+            applyProfile(portal, "plone.restapi:default")\n+            applyProfile(portal, "plone.restapi:testing")\n             set_available_languages()\n             enable_request_language_negotiation(portal)\n-            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n-            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            portal.portal_workflow.setDefaultChain(\n+                "simple_publication_workflow"\n+            )  # noqa: E501\n+            states = portal.portal_workflow[\n+                "simple_publication_workflow"\n+            ].states  # noqa: E501\n             if six.PY2:  # issue 676\n-                states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+                states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                    "utf8"\n+                )  # noqa: E501\n             else:\n-                states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+                states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n     PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-        name="PloneRestApiATLayer:Integration"\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,), name="PloneRestApiATLayer:Integration"\n     )\n     PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n         bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-        name="PloneRestApiATLayer:Functional"\n+        name="PloneRestApiATLayer:Functional",\n     )\n else:\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n@@ -335,23 +332,20 @@ class PloneRestApiTilesLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.restapi:tiles\')\n+        applyProfile(portal, "plone.restapi:tiles")\n \n \n PLONE_RESTAPI_TILES_FIXTURE = PloneRestApiTilesLayer()\n PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_TILES_FIXTURE,),\n-    name="PloneRestApiTilesLayer:Integration"\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE,), name="PloneRestApiTilesLayer:Integration"\n )\n PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayer:Functional"\n+    name="PloneRestApiTilesLayer:Functional",\n )\n PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_TILES_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayerFreeze:Functional",\n )\n \n \n@@ -362,13 +356,13 @@ class RelativeSession(requests.Session):\n \n     def __init__(self, base_url):\n         super(RelativeSession, self).__init__()\n-        if not base_url.endswith(\'/\'):\n-            base_url += \'/\'\n+        if not base_url.endswith("/"):\n+            base_url += "/"\n         self.__base_url = base_url\n \n     def request(self, method, url, **kwargs):\n-        if urlparse(url).scheme not in (\'http\', \'https\'):\n-            url = url.lstrip(\'/\')\n+        if urlparse(url).scheme not in ("http", "https"):\n+            url = url.lstrip("/")\n             url = urljoin(self.__base_url, url)\n         try:\n             return super(RelativeSession, self).request(method, url, **kwargs)\n@@ -393,11 +387,11 @@ def __init__(self, prefix):\n \n     def __call__(self):\n         self.counter += 1\n-        postfix = str(self.counter).rjust(32 - len(self.prefix), \'0\')\n+        postfix = str(self.counter).rjust(32 - len(self.prefix), "0")\n         return self.prefix + postfix\n \n \n def register_static_uuid_utility(prefix):\n-    prefix = re.sub(r\'[^a-zA-Z0-9\\-_]\', \'\', prefix)\n+    prefix = re.sub(r"[^a-zA-Z0-9\\-_]", "", prefix)\n     generator = StaticUUIDGenerator(prefix)\n     getGlobalSiteManager().registerUtility(component=generator)\ndiff --git a/src/plone/restapi/tests/attypes.py b/src/plone/restapi/tests/attypes.py\nindex b03641d7..7a76ba43 100644\n--- a/src/plone/restapi/tests/attypes.py\n+++ b/src/plone/restapi/tests/attypes.py\n@@ -9,6 +9,7 @@\n from plone.app.blob.field import ImageField\n from plone.app.folder.folder import ATFolder\n from plone.app.folder.folder import ATFolderSchema\n+\n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n except ImportError:\n@@ -16,37 +17,40 @@\n else:\n     from plone.app.collection.field import QueryField\n \n-PROJECTNAME = \'plone.restapi.tests\'\n-\n-ATTestDocumentSchema = ATDocumentSchema.copy() + atapi.Schema((\n-\n-    atapi.StringField(\'testStringField\'),\n-    atapi.BooleanField(\'testBooleanField\'),\n-    atapi.IntegerField(\'testIntegerField\'),\n-    atapi.FloatField(\'testFloatField\'),\n-    atapi.FixedPointField(\'testFixedPointField\'),\n-    atapi.DateTimeField(\'testDateTimeField\'),\n-    atapi.LinesField(\'testLinesField\'),\n-    atapi.FileField(\'testFileField\'),\n-    atapi.TextField(\'testTextField\'),\n-    atapi.ImageField(\'testImageField\'),\n-    atapi.ReferenceField(\'testReferenceField\', relationship=\'testrelation\'),\n-    atapi.ReferenceField(\'testMVReferenceField\', relationship=\'testrelation\',\n-                         multiValued=True),\n-    BlobField(\'testBlobField\'),\n-    FileField(\'testBlobFileField\'),\n-    ImageField(\'testBlobImageField\'),\n-    QueryField(\'testQueryField\'),\n-\n-    atapi.StringField(\'testRequiredField\', required=True),\n-    atapi.StringField(\'testReadonlyField\', mode=\'r\'),\n-    atapi.StringField(\'testWriteonlyField\', mode=\'w\'),\n-    atapi.StringField(\'testReadPermissionField\',\n-                      read_permission=permissions.ManagePortal),\n-    atapi.StringField(\'testWritePermissionField\',\n-                      write_permission=permissions.ManagePortal),\n-    atapi.StringField(\'testURLField\', validators=(\'isURL\',)),\n-))\n+PROJECTNAME = "plone.restapi.tests"\n+\n+ATTestDocumentSchema = ATDocumentSchema.copy() + atapi.Schema(\n+    (\n+        atapi.StringField("testStringField"),\n+        atapi.BooleanField("testBooleanField"),\n+        atapi.IntegerField("testIntegerField"),\n+        atapi.FloatField("testFloatField"),\n+        atapi.FixedPointField("testFixedPointField"),\n+        atapi.DateTimeField("testDateTimeField"),\n+        atapi.LinesField("testLinesField"),\n+        atapi.FileField("testFileField"),\n+        atapi.TextField("testTextField"),\n+        atapi.ImageField("testImageField"),\n+        atapi.ReferenceField("testReferenceField", relationship="testrelation"),\n+        atapi.ReferenceField(\n+            "testMVReferenceField", relationship="testrelation", multiValued=True\n+        ),\n+        BlobField("testBlobField"),\n+        FileField("testBlobFileField"),\n+        ImageField("testBlobImageField"),\n+        QueryField("testQueryField"),\n+        atapi.StringField("testRequiredField", required=True),\n+        atapi.StringField("testReadonlyField", mode="r"),\n+        atapi.StringField("testWriteonlyField", mode="w"),\n+        atapi.StringField(\n+            "testReadPermissionField", read_permission=permissions.ManagePortal\n+        ),\n+        atapi.StringField(\n+            "testWritePermissionField", write_permission=permissions.ManagePortal\n+        ),\n+        atapi.StringField("testURLField", validators=("isURL",)),\n+    )\n+)\n \n \n class ATTestDocument(ATDocumentBase):\n@@ -54,7 +58,7 @@ class ATTestDocument(ATDocumentBase):\n \n     schema = ATTestDocumentSchema\n \n-    portal_type = \'ATTestDocument\'\n+    portal_type = "ATTestDocument"\n \n \n registerATCT(ATTestDocument, PROJECTNAME)\n@@ -65,7 +69,7 @@ class ATTestFolder(ATFolder):\n \n     schema = ATFolderSchema\n \n-    portal_type = \'ATTestFolder\'\n+    portal_type = "ATTestFolder"\n \n \n registerATCT(ATTestFolder, PROJECTNAME)\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex da5b3164..e4f7c301 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -31,10 +31,8 @@\n \n \n def vocabularyRequireingContextFactory(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    return SimpleVocabulary([SimpleTerm(catalog.id,\n-                                        catalog.id,\n-                                        catalog.id)])\n+    catalog = getToolByName(context, "portal_catalog")\n+    return SimpleVocabulary([SimpleTerm(catalog.id, catalog.id, catalog.id)])\n \n \n class IDXTestDocumentSchema(model.Schema):\n@@ -45,18 +43,24 @@ class IDXTestDocumentSchema(model.Schema):\n     test_bool_field = schema.Bool(required=False)\n     test_bytes_field = schema.Bytes(required=False)\n     test_bytesline_field = schema.BytesLine(required=False)\n-    test_choice_field = schema.Choice(values=[u\'foo\', u\'bar\'], required=False)\n+    test_choice_field = schema.Choice(values=[u"foo", u"bar"], required=False)\n     test_choice_field_with_vocabulary = schema.Choice(\n-        vocabulary=SimpleVocabulary([\n-            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n-            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n-        ]),  required=False)\n+        vocabulary=SimpleVocabulary(\n+            [\n+                SimpleTerm(u"value1", "token1", u"title1"),\n+                SimpleTerm(u"value2", "token2", u"title2"),\n+            ]\n+        ),\n+        required=False,\n+    )\n     test_date_field = schema.Date(required=False)\n     test_datetime_field = schema.Datetime(required=False)\n     test_datetime_tz_field = schema.Datetime(\n         required=False,\n         defaultFactory=lambda: timezone("Europe/Zurich").localize(\n-            datetime(2017, 10, 31, 10, 0)))\n+            datetime(2017, 10, 31, 10, 0)\n+        ),\n+    )\n     test_decimal_field = schema.Decimal(required=False)\n     test_dict_field = schema.Dict(required=False)\n     test_float_field = schema.Float(required=False)\n@@ -64,30 +68,37 @@ class IDXTestDocumentSchema(model.Schema):\n     test_int_field = schema.Int(required=False)\n     test_list_field = schema.List(required=False)\n     test_list_field_with_choice_with_vocabulary = schema.List(\n-        value_type=schema.Choice(vocabulary=SimpleVocabulary([\n-            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n-            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n-            SimpleTerm(u\'value3\', \'token3\', u\'title3\'),\n-        ])), required=False)\n+        value_type=schema.Choice(\n+            vocabulary=SimpleVocabulary(\n+                [\n+                    SimpleTerm(u"value1", "token1", u"title1"),\n+                    SimpleTerm(u"value2", "token2", u"title2"),\n+                    SimpleTerm(u"value3", "token3", u"title3"),\n+                ]\n+            )\n+        ),\n+        required=False,\n+    )\n     test_set_field = schema.Set(required=False)\n     test_text_field = schema.Text(required=False)\n     test_textline_field = schema.TextLine(required=False)\n     test_time_field = schema.Time(required=False)\n     test_timedelta_field = schema.Timedelta(required=False)\n     test_tuple_field = schema.Tuple(required=False)\n-    test_nested_list_field = schema.List(\n-        required=False, value_type=schema.Tuple())\n+    test_nested_list_field = schema.List(required=False, value_type=schema.Tuple())\n     test_nested_dict_field = schema.Dict(\n-        required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple())\n+        required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple()\n+    )\n     test_list_choice_with_context_vocabulary_field = schema.List(\n-        title=u\'Field\',\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.restapi.testing.context_vocabulary\'),\n-        required=False)\n+        title=u"Field",\n+        value_type=schema.Choice(vocabulary="plone.restapi.testing.context_vocabulary"),\n+        required=False,\n+    )\n \n     # plone.app.textfield\n     test_richtext_field = RichText(\n-        required=False, allowed_mime_types=[\'text/html\', \'text/plain\'])\n+        required=False, allowed_mime_types=["text/html", "text/plain"]\n+    )\n \n     # plone.namedfile fields\n     test_namedfile_field = namedfile.NamedFile(required=False)\n@@ -97,60 +108,60 @@ class IDXTestDocumentSchema(model.Schema):\n \n     # z3c.relationfield\n     test_relationchoice_field = RelationChoice(\n-        required=False, source=CatalogSource(id=[\'doc1\', \'doc2\']))\n+        required=False, source=CatalogSource(id=["doc1", "doc2"])\n+    )\n     test_relationlist_field = RelationList(\n-        required=False, value_type=RelationChoice(\n-            vocabulary="plone.app.vocabularies.Catalog"))\n+        required=False,\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+    )\n \n     # Test fields for validation\n     test_required_field = schema.TextLine(required=True)\n     test_readonly_field = schema.TextLine(required=False, readonly=True)\n     test_maxlength_field = schema.TextLine(required=False, max_length=10)\n-    test_constraint_field = schema.TextLine(required=False,\n-                                            constraint=lambda x: u\'00\' in x)\n-    test_datetime_min_field = schema.Datetime(required=False,\n-                                              min=datetime(2000, 1, 1))\n+    test_constraint_field = schema.TextLine(\n+        required=False, constraint=lambda x: u"00" in x\n+    )\n+    test_datetime_min_field = schema.Datetime(required=False, min=datetime(2000, 1, 1))\n     test_time_min_field = schema.Time(required=False, min=time(1))\n-    test_timedelta_min_field = schema.Timedelta(required=False,\n-                                                min=timedelta(100))\n-    test_list_value_type_field = schema.List(required=False,\n-                                             value_type=schema.Int())\n-    test_dict_key_type_field = schema.Dict(required=False,\n-                                           key_type=schema.Int())\n-\n-    read_permission(test_read_permission_field=\'cmf.ManagePortal\')\n+    test_timedelta_min_field = schema.Timedelta(required=False, min=timedelta(100))\n+    test_list_value_type_field = schema.List(required=False, value_type=schema.Int())\n+    test_dict_key_type_field = schema.Dict(required=False, key_type=schema.Int())\n+\n+    read_permission(test_read_permission_field="cmf.ManagePortal")\n     test_read_permission_field = schema.TextLine(required=False)\n-    write_permission(test_write_permission_field=\'cmf.ManagePortal\')\n+    write_permission(test_write_permission_field="cmf.ManagePortal")\n     test_write_permission_field = schema.TextLine(required=False)\n \n-    read_permission(test_read_permission_field=\'cmf.ManagePortal\')\n+    read_permission(test_read_permission_field="cmf.ManagePortal")\n     test_read_permission_field = schema.TextLine(required=False)\n \n     test_invariant_field1 = schema.TextLine(required=False)\n     test_invariant_field2 = schema.TextLine(required=False)\n \n-    test_missing_value_field = schema.TextLine(required=False,\n-                                               missing_value=u\'missing\',\n-                                               default=u\'default\')\n+    test_missing_value_field = schema.TextLine(\n+        required=False, missing_value=u"missing", default=u"default"\n+    )\n \n     test_missing_value_required_field = schema.TextLine(\n-        required=True, missing_value=u\'missing\', default=u\'some value\')\n+        required=True, missing_value=u"missing", default=u"some value"\n+    )\n \n     @invariant\n     def validate_same_value(data):\n         if data.test_invariant_field1 != data.test_invariant_field2:\n-            raise Invalid(u\'Must have same values\')\n+            raise Invalid(u"Must have same values")\n \n     # Test fields with default values\n-    test_default_value_field = schema.TextLine(\n-        required=True, default=u\'Default\')\n+    test_default_value_field = schema.TextLine(required=True, default=u"Default")\n \n     @provider(IContextAwareDefaultFactory)\n     def default_factory(context):\n-        return u\'DefaultFactory\'\n+        return u"DefaultFactory"\n \n     test_default_factory_field = schema.TextLine(\n-        required=True, defaultFactory=default_factory)\n+        required=True, defaultFactory=default_factory\n+    )\n \n \n class DXTestDocument(Item):\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 49ea7049..92ba3339 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -7,12 +7,13 @@ def result_paths(results):\n     """Helper function to make it easier to write list-based assertions on\n     result sets from the search endpoint.\n     """\n+\n     def get_path(item):\n-        if \'getPath\' in item:\n-            return item[\'getPath\']\n-        return urlparse(item[\'@id\']).path\n+        if "getPath" in item:\n+            return item["getPath"]\n+        return urlparse(item["@id"]).path\n \n-    return [get_path(item) for item in results[\'items\']]\n+    return [get_path(item) for item in results["items"]]\n \n \n def add_catalog_indexes(portal, indexes):\n@@ -24,7 +25,7 @@ def add_catalog_indexes(portal, indexes):\n     `ZCTextIndex` index).\n \n     """\n-    catalog = getToolByName(portal, \'portal_catalog\')\n+    catalog = getToolByName(portal, "portal_catalog")\n     current_indexes = catalog.indexes()\n \n     indexables = []\ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex f6afbd29..3eea79c5 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -42,7 +42,7 @@ def getLanguageListing(self, combined=False):\n         available = self.getAvailableLanguages(combined=combined)\n         languages = {k: v for k, v in languages.items() if k in available}\n \n-        return [(code, languages[code][u\'name\']) for code in languages]\n+        return [(code, languages[code][u"name"]) for code in languages]\n \n \n class ModifiableContentLanguages(ModifiableLanguages, ContentLanguages):\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex e96de6ff..240f0137 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -4,96 +4,223 @@\n from zExceptions import BadRequest\n \n \n-class OrderingMixin():\n+class OrderingMixin:\n     # This assumes there is a self.folder with 9 documents in it.\n \n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Normal\n         # Move to top\n-        data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n+        data = {"ordering": {"delta": "top", "obj_id": "doc9"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc9",\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Move to bottom\n-        data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n+        data = {"ordering": {"delta": "bottom", "obj_id": "doc9"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta up\n-        data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n+        data = {"ordering": {"delta": -2, "obj_id": "doc5"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta down\n-        data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n+        data = {"ordering": {"delta": 2, "obj_id": "doc6"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc7",\n+                "doc8",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # subset ids\n         # Move to top\n-        data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": "top",\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc3", "doc8"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc8",\n+                "doc5",\n+                "doc2",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Move to bottom\n-        data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": "bottom",\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc8", "doc2", "doc3"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc7",\n+                "doc8",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta up\n-        data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": -1,\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc3", "doc8"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc8",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta down\n-        data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": 1,\n+                "obj_id": "doc2",\n+                "subset_ids": ["doc2", "doc8", "doc3"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc8",\n+                "doc5",\n+                "doc2",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n-        data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc6\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": 1,\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc8", "doc6"],\n+            }\n+        }  # noqa\n \n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEqual(\n-            u\'Client/server ordering mismatch\',\n-            str(cm.exception)\n-        )\n+        self.assertEqual(u"Client/server ordering mismatch", str(cm.exception))\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex c3e4b85b..776064aa 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -9,9 +9,9 @@\n import pytz\n from six.moves import range\n \n-LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n+LOREMIPSUM_HTML_10_PARAGRAPHS = """<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi."""  # noqa\n \n-LOREMIPSUM_TEXT_PARAGRAPH = \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\'  # noqa\n+LOREMIPSUM_TEXT_PARAGRAPH = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum."  # noqa\n \n \n def set_description(obj):\n@@ -24,9 +24,7 @@ def set_description(obj):\n def set_text(obj):\n     if IDexterityContent.providedBy(obj):\n         obj.text = RichTextValue(\n-            LOREMIPSUM_HTML_10_PARAGRAPHS,\n-            \'text/html\',\n-            \'text/x-html-safe\'\n+            LOREMIPSUM_HTML_10_PARAGRAPHS, "text/html", "text/x-html-safe"\n         )\n     else:\n         obj.setText(LOREMIPSUM_HTML_10_PARAGRAPHS)\n@@ -35,64 +33,55 @@ def set_text(obj):\n def set_image(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobImage\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        obj.image = NamedBlobImage(\n-            data=open(filename, \'r\').read(),\n-            filename=filename\n-        )\n+\n+        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        obj.image = NamedBlobImage(data=open(filename, "r").read(), filename=filename)\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        obj.setImage(open(filename, \'r\').read())\n+        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        obj.setImage(open(filename, "r").read())\n \n \n def set_file(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobFile\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n+\n+        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n         obj.file = NamedBlobFile(\n-            data=open(filename, \'r\').read(),\n+            data=open(filename, "r").read(),\n             filename=filename,\n-            contentType=\'application/pdf\'\n+            contentType="application/pdf",\n         )\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        obj.setFile(open(filename, \'r\').read())\n+        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        obj.setFile(open(filename, "r").read())\n \n \n def publish(content):\n     """Publish the object if it hasn\'t been published."""\n     portal_workflow = getToolByName(getSite(), "portal_workflow")\n-    if portal_workflow.getInfoFor(content, \'review_state\') != \'published\':\n-        portal_workflow.doActionFor(content, \'publish\')\n+    if portal_workflow.getInfoFor(content, "review_state") != "published":\n+        portal_workflow.doActionFor(content, "publish")\n         return True\n     return False\n \n \n def step_setup_content(context):\n-    marker_file = \'plone.restapi_performance_testing.txt\'\n+    marker_file = "plone.restapi_performance_testing.txt"\n     if context.readDataFile(marker_file) is None:\n         return\n     portal = getSite()\n \n     # Testfolder WRITE\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'testfolder-write\',\n-        title=\'Testfolder Write\'\n-    )\n-    publish(portal[\'testfolder-write\'])\n+    portal.invokeFactory("Folder", id="testfolder-write", title="Testfolder Write")\n+    publish(portal["testfolder-write"])\n \n     # Testfolder READ\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'testfolder-read\',\n-        title=\'Testfolder Read\'\n-    )\n-    publish(portal[\'testfolder-read\'])\n-    portal = portal[\'testfolder-read\']\n+    portal.invokeFactory("Folder", id="testfolder-read", title="Testfolder Read")\n+    publish(portal["testfolder-read"])\n+    portal = portal["testfolder-read"]\n \n     # Document\n-    portal.invokeFactory(\'Document\', id=\'document\', title=\'Document\')\n+    portal.invokeFactory("Document", id="document", title="Document")\n     portal.document.description = LOREMIPSUM_TEXT_PARAGRAPH\n     set_description(portal.document)\n     set_text(portal.document)\n@@ -100,70 +89,52 @@ def step_setup_content(context):\n     portal.document.reindexObject()\n \n     # News Item\n-    portal.invokeFactory(\'News Item\', id=\'newsitem\', title=\'NewsItem\')\n+    portal.invokeFactory("News Item", id="newsitem", title="NewsItem")\n     set_description(portal.newsitem)\n     set_text(portal.newsitem)\n     publish(portal.newsitem)\n     portal.newsitem.reindexObject()\n \n     # Folder\n-    portal.invokeFactory(\'Folder\', id=\'folder\', title=\'Folder\')\n+    portal.invokeFactory("Folder", id="folder", title="Folder")\n     set_description(portal.folder)\n     publish(portal.folder)\n \n     # Folder with 10 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-10-items\',\n-        title=\'Folder 10\'\n-    )\n-    folder10 = portal[\'folder-with-10-items\']\n+    portal.invokeFactory("Folder", id="folder-with-10-items", title="Folder 10")\n+    folder10 = portal["folder-with-10-items"]\n     set_description(folder10)\n     publish(folder10)\n     for i in range(1, 11):\n         folder10.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder10[\'doc{}\'.format(i)])\n+        publish(folder10["doc{}".format(i)])\n \n     # Folder with 100 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-100-items\',\n-        title=\'Folder 100\'\n-    )\n-    folder100 = portal[\'folder-with-100-items\']\n+    portal.invokeFactory("Folder", id="folder-with-100-items", title="Folder 100")\n+    folder100 = portal["folder-with-100-items"]\n     set_description(folder100)\n     publish(folder100)\n     for i in range(1, 101):\n         folder100.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder100[\'doc{}\'.format(i)])\n+        publish(folder100["doc{}".format(i)])\n \n     # Folder with 1000 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-1000-items\',\n-        title=\'Folder 1000\'\n-    )\n-    folder1000 = portal[\'folder-with-1000-items\']\n+    portal.invokeFactory("Folder", id="folder-with-1000-items", title="Folder 1000")\n+    folder1000 = portal["folder-with-1000-items"]\n     set_description(folder1000)\n     publish(folder1000)\n     for i in range(1, 1001):\n         folder1000.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder1000[\'doc{}\'.format(i)])\n+        publish(folder1000["doc{}".format(i)])\n \n     # Collection\n-    portal.invokeFactory(\'Collection\', id=\'collection\', title=\'Collection\')\n+    portal.invokeFactory("Collection", id="collection", title="Collection")\n     set_description(portal.collection)\n     set_text(portal.collection)\n     publish(portal.collection)\n@@ -171,43 +142,43 @@ def step_setup_content(context):\n \n     # Collection with Items\n     portal.invokeFactory(\n-        \'Collection\',\n-        id=\'collectionitems\',\n-        title=\'Collection with Items\'\n+        "Collection", id="collectionitems", title="Collection with Items"\n     )\n     set_description(portal.collectionitems)\n     set_text(portal.collectionitems)\n     if IDexterityContent.providedBy(portal.collectionitems):\n-        portal.collectionitems.query = [{\n-            \'i\': \'Type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n+        portal.collectionitems.query = [\n+            {\n+                "i": "Type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n     publish(portal.collectionitems)\n     portal.collectionitems.reindexObject()\n \n     # Event\n-    portal.invokeFactory(\'Event\', id=\'event\', title=\'Event\')\n+    portal.invokeFactory("Event", id="event", title="Event")\n     set_description(portal.event)\n     publish(portal.event)\n     if IDexterityContent.providedBy(portal.event):\n-        portal.event.timezone = \'Europe/Vienna\'\n+        portal.event.timezone = "Europe/Vienna"\n         tz = pytz.timezone("Europe/Vienna")\n         portal.event.start = tz.localize(datetime(2010, 10, 10, 12, 12))\n         portal.event.end = tz.localize(datetime(2010, 10, 10, 13, 13))\n \n     # Link\n-    portal.invokeFactory(\'Link\', id=\'link\', title=\'Link\')\n+    portal.invokeFactory("Link", id="link", title="Link")\n     set_description(portal.link)\n-    portal.link.remoteUrl = \'http://plone.org\'\n+    portal.link.remoteUrl = "http://plone.org"\n     publish(portal.link)\n \n     # Image\n-    portal.invokeFactory(\'Image\', id=\'image\', title=\'Image\')\n+    portal.invokeFactory("Image", id="image", title="Image")\n     set_description(portal.image)\n     set_image(portal.image)\n \n     # File\n-    portal.invokeFactory(\'File\', id=\'file\', title=\'File\')\n+    portal.invokeFactory("File", id="file", title="File")\n     set_description(portal.file)\n     set_file(portal.file)\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 00563641..f155aa8a 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -16,68 +16,78 @@ class TestATContentSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Collection\', id=\'collection\', title=\'Test Collection\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Collection", id="collection", title="Test Collection"\n+            )\n+        ]\n \n-        self.doc1.setCreationDate(DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.doc1.setModificationDate(DateTime(\'2016-01-21T01:24:11+00:00\'))\n-        self.doc1._setUID(\'76644b6611ab44c6881efd9cb17db12e\')\n+        self.doc1.setCreationDate(DateTime("2016-01-21T01:14:48+00:00"))\n+        self.doc1.setModificationDate(DateTime("2016-01-21T01:24:11+00:00"))\n+        self.doc1._setUID("76644b6611ab44c6881efd9cb17db12e")\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["ATTestFolder"]\n+                "v": ["ATTestFolder"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/plone/folder"\n-            }\n+                "v": "/plone/folder",\n+            },\n         ]\n \n         self.doc1.setQuery(query_data)\n-        self.doc1.setSort_on(\'created\')\n+        self.doc1.setSort_on("created")\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_includes_collection_items(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\n-            \'ATTestFolder\', id=\'subfolder-1\', title=\'Subfolder 1\')\n-        folder.invokeFactory(\n-            \'ATTestFolder\', id=\'subfolder-2\', title=\'Subfolder 2\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc\', title=\'A Document\')\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestFolder", id="subfolder-1", title="Subfolder 1")\n+        folder.invokeFactory("ATTestFolder", id="subfolder-2", title="Subfolder 2")\n+        folder.invokeFactory("ATTestDocument", id="doc", title="A Document")\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'items\', obj)\n-        items = obj[\'items\']\n-        items = sorted(items, key=lambda item: item[u\'@id\'])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Test Folder\',\n-            \'review_state\': \'private\'},\n-            items[0])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder/subfolder-1\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Subfolder 1\',\n-            \'review_state\': \'private\'},\n-            items[1])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder/subfolder-2\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Subfolder 2\',\n-            \'review_state\': \'private\'},\n-            items[2])\n+        self.assertIn("items", obj)\n+        items = obj["items"]\n+        items = sorted(items, key=lambda item: item[u"@id"])\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Test Folder",\n+                "review_state": "private",\n+            },\n+            items[0],\n+        )\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder/subfolder-1",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Subfolder 1",\n+                "review_state": "private",\n+            },\n+            items[1],\n+        )\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder/subfolder-2",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Subfolder 2",\n+                "review_state": "private",\n+            },\n+            items[2],\n+        )\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 92ae9b45..aee241d8 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -30,135 +30,134 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n         # ordering setup\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder1\', title=\'Test folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder1", title="Test folder")\n+        ]\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'ATTestDocument\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "ATTestDocument", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, create=False,\n-                    context=None):\n+    def deserialize(self, body="{}", validate_all=False, create=False, context=None):\n         context = context or self.doc1\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all, create=create)\n \n     def test_deserializer_ignores_readonly_fields(self):\n-        self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n+        self.doc1.getField("testReadonlyField").set(self.doc1, "Readonly")\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual("Readonly", self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual("Updated", self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n         self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.args[0][0][\'message\'])\n+            cm.exception.args[0][0]["message"],\n+        )\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\', create=True)\n-        self.assertFalse(self.doc1.checkCreationFlag(),\n-                         \'Creation flag not cleared\')\n+        self.assertFalse(self.doc1.checkCreationFlag(), "Creation flag not cleared")\n \n     def test_deserializer_notifies_object_initialized(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IBaseObject, IObjectInitializedEvent,))\n+\n+        provideHandler(handler, (IBaseObject, IObjectInitializedEvent))\n         self.doc1.markCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertTrue(getattr(self.doc1, \'_handler_called\', False),\n-                        \'IObjectInitializedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.doc1, "_handler_called", False),\n+            "IObjectInitializedEvent not notified",\n+        )\n \n     def test_deserializer_notifies_object_edited(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IBaseObject, IObjectEditedEvent,))\n+\n+        provideHandler(handler, (IBaseObject, IObjectEditedEvent))\n         self.doc1.unmarkCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertTrue(getattr(self.doc1, \'_handler_called\', False),\n-                        \'IObjectEditedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.doc1, "_handler_called", False),\n+            "IObjectEditedEvent not notified",\n+        )\n \n     def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testStringField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(body=\'{"testStringField": "My Value"}\', validate_all=True)\n         self.assertEqual(\n-            u\'TestRequiredField is required, please correct.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"TestRequiredField is required, please correct.",\n+            cm.exception.args[0][0]["message"],\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n-        self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.deserialize(body=\'{"testRequiredField": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"My Value", self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n-\n         @implementer(IObjectPostValidation)\n         @adapter(IBaseObject)\n         class PostValidator(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, request):\n-                return {\'post\': \'post_validation_error\'}\n+                return {"post": "post_validation_error"}\n \n         provideSubscriptionAdapter(PostValidator)\n \n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"testRequiredField": "My Value"}\', validate_all=True\n+            )\n \n-        self.assertEqual(\n-            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n+        self.assertEqual("post_validation_error", cm.exception.args[0][0]["message"])\n \n     def test_pre_validation(self):\n-\n         @implementer(IObjectPreValidation)\n         @adapter(IBaseObject)\n         class PreValidator(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, request):\n-                return {\'pre\': \'pre_validation_error\'}\n+                return {"pre": "pre_validation_error"}\n \n         provideSubscriptionAdapter(PreValidator)\n \n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"testRequiredField": "My Value"}\', validate_all=True\n+            )\n \n-        self.assertEqual(\n-            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n+        self.assertEqual("pre_validation_error", cm.exception.args[0][0]["message"])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual("my_new_layout", self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -167,51 +166,54 @@ class TestValidationRequest(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n-        self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n+        self.request = ValidationRequest(self.layer["request"], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEqual(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual("Test Document", self.request["title"])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual("Test Document", self.request.get("title"))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual("Test Document", self.request.form["title"])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual("Test Document", self.request.form.get("title"))\n \n     def test_validation_request_contains_key(self):\n-        self.assertIn(\'title\', self.request)\n+        self.assertIn("title", self.request)\n \n     def test_validation_request_form_contains_key(self):\n-        self.assertIn(\'title\', self.request.form)\n+        self.assertIn("title", self.request.form)\n \n     def test_validation_request_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n-            self.request[\'foo\']\n+            self.request["foo"]\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEqual(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get("foo"))\n         marker = object()\n-        self.assertEqual(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get("foo", marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n-            self.request.form[\'foo\']\n+            self.request.form["foo"]\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEqual(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get("foo"))\n         marker = object()\n-        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get("foo", marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual("GET", self.request["REQUEST_METHOD"])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual("GET", self.request.get("REQUEST_METHOD"))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex 86f9958f..407e333b 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -23,163 +23,173 @@ class TestATContentSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n-        self.doc1.setCreationDate(DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.doc1.setModificationDate(DateTime(\'2016-01-21T01:24:11+00:00\'))\n-        self.doc1._setUID(\'76644b6611ab44c6881efd9cb17db12e\')\n+        self.doc1.setCreationDate(DateTime("2016-01-21T01:14:48+00:00"))\n+        self.doc1.setModificationDate(DateTime("2016-01-21T01:24:11+00:00"))\n+        self.doc1._setUID("76644b6611ab44c6881efd9cb17db12e")\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize(self.doc1)\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n-    @unittest.skip(\'We do not include the context at this point\')\n+    @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@context\', obj)\n-        self.assertEqual(u\'http://www.w3.org/ns/hydra/context.jsonld\',\n-                         obj[u\'@context\'])\n+        self.assertIn(u"@context", obj)\n+        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@id\', obj)\n-        self.assertEqual(self.doc1.absolute_url(), obj[u\'@id\'])\n+        self.assertIn(u"@id", obj)\n+        self.assertEqual(self.doc1.absolute_url(), obj[u"@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'id\', obj)\n-        self.assertEqual(self.doc1.id, obj[u\'id\'])\n+        self.assertIn(u"id", obj)\n+        self.assertEqual(self.doc1.id, obj[u"id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@type\', obj)\n-        self.assertEqual(self.doc1.portal_type, obj[u\'@type\'])\n+        self.assertIn(u"@type", obj)\n+        self.assertEqual(self.doc1.portal_type, obj[u"@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'review_state\', obj)\n-        self.assertEqual(u\'private\', obj[u\'review_state\'])\n+        self.assertIn(u"review_state", obj)\n+        self.assertEqual(u"private", obj[u"review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'UID\', obj)\n-        self.assertEqual(u\'76644b6611ab44c6881efd9cb17db12e\', obj[u\'UID\'])\n+        self.assertIn(u"UID", obj)\n+        self.assertEqual(u"76644b6611ab44c6881efd9cb17db12e", obj[u"UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'creation_date\', obj)\n-        self.assertEqual(u\'2016-01-21T01:14:48+00:00\', obj[u\'creation_date\'])\n+        self.assertIn(u"creation_date", obj)\n+        self.assertEqual(u"2016-01-21T01:14:48+00:00", obj[u"creation_date"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'modification_date\', obj)\n-        self.assertEqual(u\'2016-01-21T01:24:11+00:00\',\n-                         obj[u\'modification_date\'])\n+        self.assertIn(u"modification_date", obj)\n+        self.assertEqual(u"2016-01-21T01:24:11+00:00", obj[u"modification_date"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.doc1.setTestReadPermissionField(u\'Secret Stuff\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'testReadPermissionField\',\n-                         self.serialize(self.doc1))\n+        self.doc1.setTestReadPermissionField(u"Secret Stuff")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"testReadPermissionField", self.serialize(self.doc1))\n \n     def test_serializer_ignores_writeonly_field(self):\n-        self.doc1.setTestWriteonlyField(u\'Secret Stuff\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'testWriteonlyField\',\n-                         self.serialize(self.doc1))\n+        self.doc1.setTestWriteonlyField(u"Secret Stuff")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"testWriteonlyField", self.serialize(self.doc1))\n \n     def test_serializer_includes_folder_items(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\'ATTestFolder\', id=\'subfolder\', title=\'Subfolder\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc\', title=\'A Document\')\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestFolder", id="subfolder", title="Subfolder")\n+        folder.invokeFactory("ATTestDocument", id="doc", title="A Document")\n         obj = self.serialize(folder)\n-        self.assertIn(\'items\', obj)\n-        self.assertDictEqual({\n-            \'@id\': \'http://nohost/plone/folder/subfolder\',\n-            \'@type\': \'ATTestFolder\',\n-            \'description\': \'\',\n-            \'title\': u\'Subfolder\',\n-            \'review_state\': \'private\'},\n-            obj[\'items\'][0])\n-        self.assertDictEqual({\n-            \'@id\': \'http://nohost/plone/folder/doc\',\n-            \'@type\': \'ATTestDocument\',\n-            \'description\': \'\',\n-            \'title\': u\'A Document\',\n-            \'review_state\': \'private\'},\n-            obj[\'items\'][1])\n-\n-    def test_serializer_orders_folder_items_by_get_object_position_in_parent(self):  # noqa\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc1\', title=\'A Document\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc2\', title=\'Second doc\')\n+        self.assertIn("items", obj)\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/folder/subfolder",\n+                "@type": "ATTestFolder",\n+                "description": "",\n+                "title": u"Subfolder",\n+                "review_state": "private",\n+            },\n+            obj["items"][0],\n+        )\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/folder/doc",\n+                "@type": "ATTestDocument",\n+                "description": "",\n+                "title": u"A Document",\n+                "review_state": "private",\n+            },\n+            obj["items"][1],\n+        )\n+\n+    def test_serializer_orders_folder_items_by_get_object_position_in_parent(\n+        self\n+    ):  # noqa\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestDocument", id="doc1", title="A Document")\n+        folder.invokeFactory("ATTestDocument", id="doc2", title="Second doc")\n \n         # Change GOPIP (getObjectPositionInParent) based order\n-        folder.moveObjectsUp(\'doc2\')\n+        folder.moveObjectsUp("doc2")\n \n         obj = self.serialize(folder)\n \n-        self.assertIn(\'items\', obj)\n+        self.assertIn("items", obj)\n         self.assertEqual(\n-            obj[\'items\'],\n+            obj["items"],\n             [\n                 {\n-                    \'@id\': \'http://nohost/plone/folder/doc2\',\n-                    \'@type\': \'ATTestDocument\',\n-                    \'description\': \'\',\n-                    \'title\': u\'Second doc\',\n-                    \'review_state\': \'private\'\n+                    "@id": "http://nohost/plone/folder/doc2",\n+                    "@type": "ATTestDocument",\n+                    "description": "",\n+                    "title": u"Second doc",\n+                    "review_state": "private",\n                 },\n                 {\n-                    \'@id\': \'http://nohost/plone/folder/doc1\',\n-                    \'@type\': \'ATTestDocument\',\n-                    \'description\': \'\',\n-                    \'title\': u\'A Document\',\n-                    \'review_state\': \'private\'\n+                    "@id": "http://nohost/plone/folder/doc1",\n+                    "@type": "ATTestDocument",\n+                    "description": "",\n+                    "title": u"A Document",\n+                    "review_state": "private",\n                 },\n-            ])\n+            ],\n+        )\n \n     def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'layout\', obj)\n-        self.assertEqual(current_layout, obj[\'layout\'])\n+        self.assertIn("layout", obj)\n+        self.assertEqual(current_layout, obj["layout"])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'foo\', obj[\'@components\'])\n-        self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        self.assertIn("foo", obj["@components"])\n+        self.assertEqual("collapsed", obj["@components"]["foo"])\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n-        serializer = getMultiAdapter((self.portal.folder, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Folder", id=u"folder")\n+        serializer = getMultiAdapter(\n+            (self.portal.folder, self.request), ISerializeToJson\n+        )\n         obj = serializer()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex 0d9d384f..3e880f66 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -16,218 +16,227 @@ class TestATFieldDeserializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')\n+        self.portal.invokeFactory("ATTestDocument", id="doc1", title="Test Document")\n \n     def deserialize(self, fieldname, value):\n         field = self.portal.doc1.getField(fieldname)\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n         return deserializer(value)\n \n     def test_string_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value, kwargs = self.deserialize("testStringField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n-        value, kwargs = self.deserialize(\'testBooleanField\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value, kwargs = self.deserialize("testBooleanField", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n-        value, kwargs = self.deserialize(\'testBooleanField\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value, kwargs = self.deserialize("testBooleanField", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n-        value, kwargs = self.deserialize(\'testIntegerField\', 777)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value, kwargs = self.deserialize("testIntegerField", 777)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n-        value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value, kwargs = self.deserialize("testFloatField", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'1.1\', value)\n+        value, kwargs = self.deserialize("testFixedPointField", u"1.1")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"1.1", value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testDateTimeField\',\n-                                         u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n+        value, kwargs = self.deserialize(\n+            "testDateTimeField", u"2015-12-20T19:51:06.375Z"\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"2015-12-20T19:51:06.375Z", value)\n \n     def test_lines_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(\'line1\\nline2\', value)\n+        value, kwargs = self.deserialize("testLinesField", u"line1\\nline2")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual("line1\\nline2", value)\n \n     def test_lines_field_deserialization_returns_list(self):\n-        value, kwargs = self.deserialize(\'testLinesField\',\n-                                         [u\'line1\', u\'line2\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'line1\', u\'line2\'], value)\n+        value, kwargs = self.deserialize("testLinesField", [u"line1", u"line2"])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"line1", u"line2"], value)\n \n     def test_file_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize("testFileField", u"Spam and eggs!")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n-        value, kwargs = self.deserialize(\'testFileField\', {\n-            u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n-            u\'encoding\': u\'base64\',\n-        })\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize(\n+            "testFileField", {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"}\n+        )\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Spam and eggs!", value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testFileField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testFileField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n \n     def test_text_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value, kwargs = self.deserialize("testTextField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n-        value, kwargs = self.deserialize(\'testTextField\', {\n-            u\'data\': u\'K\xc3\xa4fer\',\n-            u\'content-type\': \'text/html\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n-        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n+        value, kwargs = self.deserialize(\n+            "testTextField", {u"data": u"K\xc3\xa4fer", u"content-type": "text/html"}\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n+        self.assertEqual("text/html", kwargs[u"mimetype"])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testImageField\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'filename\': \'image.gif\',\n-            u\'content-type\': \'image/gif\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testImageField",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"filename": "image.gif",\n+                u"content-type": "image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertTrue(value.startswith("GIF89a"))\n+        self.assertEqual("image/gif", kwargs[u"mimetype"])\n+        self.assertEqual("image.gif", kwargs[u"filename"])\n \n     def test_blob_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize("testBlobField", u"Spam and eggs!")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testBlobField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n-\n-    def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n-            self):\n-        value, kwargs = self.deserialize(\'testBlobFileField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n-\n-    def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n-            self):\n-        value, kwargs = self.deserialize(\'testBlobImageField\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'filename\': \'image.gif\',\n-            u\'content-type\': \'image/gif\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testBlobField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n+\n+    def test_blobfile_field_deserialization_returns_mimetype_and_filename(self):\n+        value, kwargs = self.deserialize(\n+            "testBlobFileField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n+\n+    def test_blobimage_field_deserialization_returns_mimetype_and_filename(self):\n+        value, kwargs = self.deserialize(\n+            "testBlobImageField",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"filename": "image.gif",\n+                u"content-type": "image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertTrue(value.startswith("GIF89a"))\n+        self.assertEqual("image/gif", kwargs[u"mimetype"])\n+        self.assertEqual("image.gif", kwargs[u"filename"])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["News Item"]\n+                "v": ["News Item"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/Plone/news"\n-            }\n+                "v": "/Plone/news",\n+            },\n         ]\n-        value, kwargs = self.deserialize(\'testQueryField\', query_data)\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value, kwargs = self.deserialize("testQueryField", query_data)\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(value, query_data)\n \n     def test_reference_field_deserialization_returns_uid_in_list(self):\n-        value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         u\'0fc0dac495034b869b3b90c9179499a9\')\n-        self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        value, kwargs = self.deserialize(\n+            "testReferenceField", u"0fc0dac495034b869b3b90c9179499a9"\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <basestring>")\n+        self.assertEqual([u"0fc0dac495034b869b3b90c9179499a9"], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n-        value, kwargs = self.deserialize(\'testReferenceField\', [\n-            u\'0fc0dac495034b869b3b90c9179499a9\',\n-            u\'984c22058343453f997ef9e9de1e8136\',\n-        ])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertIn(u\'0fc0dac495034b869b3b90c9179499a9\', value)\n-        self.assertIn(u\'984c22058343453f997ef9e9de1e8136\', value)\n+        value, kwargs = self.deserialize(\n+            "testReferenceField",\n+            [u"0fc0dac495034b869b3b90c9179499a9", u"984c22058343453f997ef9e9de1e8136"],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertIn(u"0fc0dac495034b869b3b90c9179499a9", value)\n+        self.assertIn(u"984c22058343453f997ef9e9de1e8136", value)\n \n     def test_reference_field_deserialization_returns_object_in_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n-        value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         six.text_type(doc2.absolute_url()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenced Document"\n+            )\n+        ]\n+        value, kwargs = self.deserialize(\n+            "testReferenceField", six.text_type(doc2.absolute_url())\n+        )\n         self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenced Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc3", title="Referenced Document"\n+            )\n+        ]\n         value, kwargs = self.deserialize(\n-            \'testReferenceField\',\n-            [six.text_type(\n-                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+            "testReferenceField",\n+            [six.text_type(doc2.absolute_url()), six.text_type(doc3.absolute_url())],\n+        )\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex 736001bb..6ca6fa28 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -14,10 +14,10 @@\n import unittest\n import six\n \n-if PLONE_VERSION.base_version >= \'5.1\':\n-    GIF_SCALE_FORMAT = \'png\'\n+if PLONE_VERSION.base_version >= "5.1":\n+    GIF_SCALE_FORMAT = "png"\n else:\n-    GIF_SCALE_FORMAT = \'jpeg\'\n+    GIF_SCALE_FORMAT = "jpeg"\n \n \n class TestATFieldSerializer(unittest.TestCase):\n@@ -26,248 +26,242 @@ class TestATFieldSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n     def serialize(self, fieldname, value, **kwargs):\n         field = self.doc1.getField(fieldname)\n         mutator = field.getMutator(self.doc1)\n         mutator(value, **kwargs)\n-        serializer = getMultiAdapter((field, self.doc1, self.request),\n-                                     IFieldSerializer)\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n         return serializer()\n \n     def test_string_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("testStringField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_boolean_field_serialization_returns_true(self):\n-        value = self.serialize(\'testBooleanField\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("testBooleanField", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertTrue(value)\n \n     def test_boolean_field_serialization_returns_false(self):\n-        value = self.serialize(\'testBooleanField\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("testBooleanField", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertFalse(value)\n \n     def test_integer_field_serialization_returns_int(self):\n-        value = self.serialize(\'testIntegerField\', 333)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.serialize("testIntegerField", 333)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(333, value)\n \n     def test_float_field_serialization_returns_float(self):\n-        value = self.serialize(\'testFloatField\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not an <float>\')\n+        value = self.serialize("testFloatField", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not an <float>")\n         self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'1.11\', value)\n+        value = self.serialize("testFixedPointField", u"1.11")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"1.11", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testDateTimeField\',\n-                               DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n+        value = self.serialize(\n+            "testDateTimeField", DateTime("2016-01-21T01:14:48+00:00")\n+        )\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2016-01-21T01:14:48+00:00", value)\n \n     def test_lines_field_serialization_returns_list(self):\n-        value = self.serialize(\'testLinesField\', u\'foo\\nbar\')\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'foo\', u\'bar\'], value)\n+        value = self.serialize("testLinesField", u"foo\\nbar")\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"foo", u"bar"], value)\n \n     def test_file_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testFileField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+        value = self.serialize(\n+            "testFileField", "spam and eggs", filename="spam.txt", mimetype="text/plain"\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-        url = u\'http://nohost/plone/doc1/@@download/testFileField\'\n+        url = u"http://nohost/plone/doc1/@@download/testFileField"\n         self.assertEqual(\n-            {u\'filename\': u\'spam.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": u"spam.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_text_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testTextField\', \'<p>spam and eggs</p>\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertDictEqual({\n-            \'content-type\': u\'text/plain\',\n-            \'data\': u\' spam and eggs \'}, value)\n+        value = self.serialize("testTextField", "<p>spam and eggs</p>")\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertDictEqual(\n+            {"content-type": u"text/plain", "data": u" spam and eggs "}, value\n+        )\n \n     def test_image_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'testImageField\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "testImageField"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n-                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+                fn, image_data, filename="1024x768.gif", mimetype="image/gif"\n+            )\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n             self.maxDiff = 99999\n             obj_url = self.doc1.absolute_url()\n-            scale_url_uuid = \'uuid_1\'\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n-                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            scale_url_uuid = "uuid_1"\n+            download_url = u"{}/@@images/{}.{}".format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 80,\n-                    u\'height\': 60},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 80, u"height": 60},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_blob_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testBlobField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n-        self.assertTrue(isinstance(value, dict), \'Not an <dict>\')\n-        url = u\'http://nohost/plone/doc1/@@download/testBlobField\'\n+        value = self.serialize(\n+            "testBlobField", "spam and eggs", filename="spam.txt", mimetype="text/plain"\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not an <dict>")\n+        url = u"http://nohost/plone/doc1/@@download/testBlobField"\n         self.assertEqual(\n-            {u\'filename\': \'spam.txt\',\n-             u\'size\': 13,\n-             u\'content-type\': \'text/plain\',\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": "spam.txt",\n+                u"size": 13,\n+                u"content-type": "text/plain",\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_blobfile_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testBlobFileField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n+        value = self.serialize(\n+            "testBlobFileField",\n+            "spam and eggs",\n+            filename="spam.txt",\n+            mimetype="text/plain",\n+        )\n \n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        url = u\'http://nohost/plone/doc1/@@download/testBlobFileField\'\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        url = u"http://nohost/plone/doc1/@@download/testBlobFileField"\n         self.assertEqual(\n-            {u\'filename\': \'spam.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": "spam.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_blobimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'testBlobImageField\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "testBlobImageField"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n-                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-            scale_url_uuid = \'uuid_1\'\n+                fn, image_data, filename="1024x768.gif", mimetype="image/gif"\n+            )\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n-                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            download_url = u"{}/@@images/{}.{}".format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_query_field_serialization_returns_list(self):\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["News Item"]\n+                "v": ["News Item"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/Plone/news"\n-            }\n+                "v": "/Plone/news",\n+            },\n         ]\n-        value = self.serialize(\'testQueryField\', query_data)\n-        self.assertTrue(isinstance(value, list), \'Not a list\')\n+        value = self.serialize("testQueryField", query_data)\n+        self.assertTrue(isinstance(value, list), "Not a list")\n         self.assertEqual(value, query_data)\n \n     def test_reference_field_serialization_returns_unicode(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'http://nohost/plone/doc2\', value)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.serialize("testReferenceField", doc2.UID())\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"http://nohost/plone/doc2", value)\n \n     def test_reference_field_serialization_returns_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.serialize(\'testMVReferenceField\',\n-                               [doc2.UID(), doc3.UID()])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.serialize("testMVReferenceField", [doc2.UID(), doc3.UID()])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [u\'http://nohost/plone/doc2\', u\'http://nohost/plone/doc3\'],\n-            sorted(value))\n+            [u"http://nohost/plone/doc2", u"http://nohost/plone/doc3"], sorted(value)\n+        )\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 20889aa6..f66cda27 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -14,92 +14,92 @@ class TestLogin(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@login\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone/@login", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_login_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_login_without_credentials_fails(self):\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_login_with_invalid_credentials_fails(self):\n-        self.request[\'BODY\'] = \'{"login": "admin", "password": "admin"}\'\n+        self.request["BODY"] = \'{"login": "admin", "password": "admin"}\'\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_successful_login_returns_token(self):\n-        self.request[\'BODY\'] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n             SITE_OWNER_NAME,\n-            SITE_OWNER_PASSWORD\n+            SITE_OWNER_PASSWORD,\n         )\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_invalid_token_returns_400(self):\n-        invalid_token = \'abc123\'\n-        self.request._auth = \'Bearer {}\'.format(invalid_token)\n-        self.assertRaises(Unauthorized, self.traverse, path=\'/plone\')\n+        invalid_token = "abc123"\n+        self.request._auth = "Bearer {}".format(invalid_token)\n+        self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_expired_token_returns_400(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\n-            \'admin\',\n-            timeout=-60\n-        )\n-        self.request._auth = \'Bearer {}\'.format(token)\n-        self.assertRaises(Unauthorized, self.traverse, path=\'/plone\')\n+        token = self.portal.acl_users.jwt_auth.create_token("admin", timeout=-60)\n+        self.request._auth = "Bearer {}".format(token)\n+        self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_login_without_api_permission(self):\n         self.portal.manage_permission(UseRESTAPI, roles=[])\n-        self.request[\'BODY\'] = \'{"login": "%s", "password": "%s"}\' % (\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+            SITE_OWNER_NAME,\n+            SITE_OWNER_PASSWORD,\n+        )\n         service = self.traverse()\n         res = service.render()\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_login_with_zope_user_fails_without_pas_plugin(self):\n-        uf = self.layer[\'app\'].acl_users\n-        uf.plugins.users.addUser(\'zopeuser\', \'zopeuser\', \'secret\')\n-        if \'jwt_auth\' in uf:\n-            uf[\'jwt_auth\'].manage_activateInterfaces([])\n-        self.request[\'BODY\'] = \'{"login": "zopeuser", "password": "secret"}\'\n+        uf = self.layer["app"].acl_users\n+        uf.plugins.users.addUser("zopeuser", "zopeuser", "secret")\n+        if "jwt_auth" in uf:\n+            uf["jwt_auth"].manage_activateInterfaces([])\n+        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertEqual(\'JWT authentication plugin not installed.\',\n-                         res[\'error\'][\'message\'])\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertEqual(\n+            "JWT authentication plugin not installed.", res["error"]["message"]\n+        )\n+        self.assertNotIn("token", res)\n \n     def test_login_with_zope_user(self):\n-        self.layer[\'app\'].acl_users.plugins.users.addUser(\n-            \'zopeuser\', \'zopeuser\', \'secret\')\n-        self.request[\'BODY\'] = \'{"login": "zopeuser", "password": "secret"}\'\n+        self.layer["app"].acl_users.plugins.users.addUser(\n+            "zopeuser", "zopeuser", "secret"\n+        )\n+        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n \n class TestLogout(TestCase):\n@@ -107,43 +107,42 @@ class TestLogout(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@logout\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone/@logout", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_logout_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n+        self.assertIn("error", res)\n \n     def test_logout_with_not_stored_token_fails(self):\n         self.portal.acl_users.jwt_auth.store_tokens = False\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(501, self.request.response.getStatus())\n-        self.assertEqual("Token can\'t be invalidated", res[\'error\'][\'message\'])\n+        self.assertEqual("Token can\'t be invalidated", res["error"]["message"])\n \n     def test_logout_with_without_credentials_fails(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual("Unknown token", res[\'error\'][\'message\'])\n+        self.assertEqual("Unknown token", res["error"]["message"])\n \n     def test_logout_succeeds(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n@@ -154,53 +153,49 @@ class TestRenew(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@login-renew\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(\n+        self, path="/plone/@login-renew", accept="application/json", method="POST"\n+    ):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_renew_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n+        self.assertIn("error", res)\n \n     def test_renew_returns_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_renew_deletes_old_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'token\', res)\n-        self.assertEqual(\n-            1, len(self.portal.acl_users.jwt_auth._tokens[\'admin\']))\n+        self.assertIn("token", res)\n+        self.assertEqual(1, len(self.portal.acl_users.jwt_auth._tokens["admin"]))\n \n     def test_renew_fails_on_invalid_token(self):\n-        token = \'this is an invalid token\'\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = "this is an invalid token"\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n+        self.assertEqual(service.request.response.status, 401)\n         self.assertEqual(\n-            service.request.response.status,\n-            401\n-        )\n-        self.assertEqual(\n-            res[\'error\'][\'type\'],\n-            \'Invalid or expired authentication token\'\n+            res["error"]["type"], "Invalid or expired authentication token"\n         )\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 7852d5d8..9159aa72 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -26,13 +26,13 @@ class TestBatchingDXBase(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n@@ -40,9 +40,10 @@ def tearDown(self):\n \n     def _create_doc(self, container, number):\n         createContentInContainer(\n-            container, u\'DXTestDocument\',\n-            id=\'doc-%s\' % str(number + 1),\n-            title=u\'Document %s\' % str(number + 1),\n+            container,\n+            u"DXTestDocument",\n+            id="doc-%s" % str(number + 1),\n+            title=u"Document %s" % str(number + 1),\n             created=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -56,9 +57,7 @@ class TestBatchingSearch(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingSearch, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -66,60 +65,61 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder/@search\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder/@search")\n \n     def test_canonical_url_preserves_multiple_metadata_fields(self):\n-        qs = \'b_start=2&b_size=2&metadata_fields=one&metadata_fields=two\'\n-        response = self.api_session.get(\'/folder/@search?%s\' % qs)\n+        qs = "b_start=2&b_size=2&metadata_fields=one&metadata_fields=two"\n+        response = self.api_session.get("/folder/@search?%s" % qs)\n \n         # Response should contain canonical URL without batching params.\n         # Argument lists like metadata_fields (same query string parameter\n         # repeated multiple times) should be preserved.\n \n         original_qs = parse_qsl(qs)\n-        canonicalized_qs = parse_qsl(urlparse(response.json()[\'@id\']).query)\n+        canonicalized_qs = parse_qsl(urlparse(response.json()["@id"]).query)\n \n         self.assertEqual(\n-            set(original_qs) - set([(\'b_size\', \'2\'), (\'b_start\', \'2\')]),\n-            set(canonicalized_qs))\n+            set(original_qs) - set([("b_size", "2"), ("b_start", "2")]),\n+            set(canonicalized_qs),\n+        )\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder/@search?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder/@search?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder/@search?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder/@search?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder/@search?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-2\',\n-            u\'/plone/folder/doc-3\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(6, response.json()[\'items_total\'])\n+        self.assertEqual(6, response.json()["items_total"])\n \n \n class TestBatchingCollections(TestBatchingDXBase):\n@@ -129,68 +129,68 @@ class TestBatchingCollections(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingCollections, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n \n         collection = createContentInContainer(\n-            self.portal, u\'Collection\',\n-            id=\'collection\')\n+            self.portal, u"Collection", id="collection"\n+        )\n         collection.query = [\n-            {"i": "path",\n-             "o": "plone.app.querystring.operation.string.path",\n-             "v": "/plone/folder/"},\n+            {\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/plone/folder/",\n+            }\n         ]\n         transaction.commit()\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/collection\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/collection")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/collection?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/collection?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/collection?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/collection?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/collection?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/collection?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/collection?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/collection?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/collection?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/collection?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-2\',\n-            u\'/plone/folder/doc-3\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(6, response.json()[\'items_total\'])\n+        self.assertEqual(6, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/collection?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -200,9 +200,7 @@ class TestBatchingDXFolders(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingDXFolders, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -210,49 +208,49 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-3\',\n-            u\'/plone/folder/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-3", u"/plone/folder/doc-4"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -268,49 +266,48 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + u\'/\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + u"/")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/doc-3\',\n-            u\'/plone/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/doc-3", u"/plone/doc-4"], result_paths(response.json())\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestAABatchingArchetypes(unittest.TestCase):\n@@ -330,40 +327,38 @@ class TestAABatchingArchetypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor"])\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Some Folder\',\n-        )]\n+        self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Some Folder")\n+        ]\n         transaction.commit()\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        self.api_session.get(\'/folder?b_size=100\')\n+        self.api_session.get("/folder?b_size=100")\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -372,23 +367,21 @@ class TestBatchingArchetypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Some Folder\',\n-        )]\n+        folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Some Folder")\n+        ]\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -396,56 +389,56 @@ def setUp(self):\n \n     def _create_doc(self, container, number):\n         container.invokeFactory(\n-            \'Document\',\n-            id=\'doc-%s\' % str(number + 1),\n-            title=\'Document %s\' % str(number + 1),\n+            "Document",\n+            id="doc-%s" % str(number + 1),\n+            title="Document %s" % str(number + 1),\n         )\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-3\',\n-            u\'/plone/folder/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-3", u"/plone/folder/doc-4"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -453,16 +446,15 @@ class TestHypermediaBatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n-        self.assertEqual(\n-            25, batch.items_total)\n+        self.assertEqual(25, batch.items_total)\n \n     def test_default_batch_size(self):\n         items = list(range(1, 27))\n@@ -471,196 +463,183 @@ def test_default_batch_size(self):\n \n     def test_custom_batch_size(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 5\n+        self.request.form["b_size"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n-        self.assertEqual(\n-            5, len(list(batch)))\n+        self.assertEqual(5, len(list(batch)))\n \n     def test_default_batch_start(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n-        self.assertEqual(\n-            list(range(1, 11)), list(batch))\n+        self.assertEqual(list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n-        self.assertEqual(\n-            list(range(6, 16)), list(batch))\n+        self.assertEqual(list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 5\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 5\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n-        self.assertListEqual(\n-            list(range(6, 11)), list(batch))\n+        self.assertListEqual(list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\'http://nohost\', batch.canonical_url)\n+        self.assertEqual("http://nohost", batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "one=1&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "foolist=1&foolist=2"\n         batch = HypermediaBatch(self.request, items)\n \n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n         self.assertEqual(\n-            set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n-            set(parse_qsl(urlparse(batch.canonical_url).query))\n+            set([("foolist", "1"), ("foolist", "2")]),\n+            set(parse_qsl(urlparse(batch.canonical_url).query)),\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "one=1&b_size=10&b_start=20&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n         items = list(range(1, 26))\n \n-        self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n+        self.request["QUERY_STRING"] = "one=1&sort_on=path&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_current_batch_url(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n-        self.request[\'QUERY_STRING\'] = \'b_size=10&b_start=20\'\n+        self.request.form["b_size"] = 10\n+        self.request["ACTUAL_URL"] = "http://nohost"\n+        self.request["QUERY_STRING"] = "b_size=10&b_start=20"\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\n-            \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n+        self.assertEqual("http://nohost?b_size=10&b_start=20", batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n         items = list(range(1, 5))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n+        self.assertDictContainsSubset({"first": "http://nohost?b_start=0"}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "foolist=1&foolist=2"\n         batch = HypermediaBatch(self.request, items)\n \n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n+        batch_params = set([("b_start", "0"), ("b_size", "10")])\n         self.assertEqual(\n-            set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n-            set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n+            set([("foolist", "1"), ("foolist", "2")]),\n+            set(parse_qsl(urlparse(batch.links["first"]).query)) - batch_params,\n         )\n \n     def test_last_link_contained(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n+        self.assertDictContainsSubset({"last": "http://nohost?b_start=20"}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n+        self.assertDictContainsSubset({"next": "http://nohost?b_start=10"}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n         items = list(range(1, 26))\n \n         # Start on last page\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 20\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(\n-            set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links))\n+        self.assertSetEqual(set(["@id", "first", "prev", "last"]), set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n \n         # Start on third page\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 20\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n+        self.assertDictContainsSubset({"prev": "http://nohost?b_start=10"}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(\n-            set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links))\n+        self.assertSetEqual(set(["@id", "first", "next", "last"]), set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n         items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n-        self.request.form[\'b_size\'] = size\n+        self.request.form["b_size"] = size\n \n         for pagenumber in range(3):\n-            self.request.form[\'b_start\'] = pagenumber * size\n+            self.request.form["b_start"] = pagenumber * size\n             batch = HypermediaBatch(self.request, items)\n             items_from_all_batches.extend(list(batch))\n \n@@ -670,8 +649,7 @@ def test_batch_start_never_drops_below_zero(self):\n         items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\n-            \'http://nohost?b_start=0\', batch.links[\'prev\'])\n+        self.assertEqual("http://nohost?b_start=0", batch.links["prev"])\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex 382c86a0..1367c401 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -16,41 +16,35 @@ class TestTilesBehavior(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'tiledfolder\')\n-        self.portal.portal_types._setObject(\'tiledfolder\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.behaviors = (\n-            \'plone.tiles\',\n-        )\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("tiledfolder")\n+        self.portal.portal_types._setObject("tiledfolder", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("plone.tiles",)\n         self.fti = fti\n         alsoProvides(self.request, ITiles)\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n-            \'tiledfolder\',\n-            id=\'tiledfolder\',\n-            title=u\'Folder with tiles\'\n+            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n         )\n \n-        self.portal[\'tiledfolder\'].tiles = {\n-            \'uuid1\': {\'@type\': \'title\'},\n-            \'uuid2\': {\'@type\': \'description\'}\n+        self.portal["tiledfolder"].tiles = {\n+            "uuid1": {"@type": "title"},\n+            "uuid2": {"@type": "description"},\n         }\n \n-        self.portal[\'tiledfolder\'].tiles_layout = {\n-            \'uuid1\': {\'@type\': \'title\'},\n-            \'uuid2\': {\'@type\': \'description\'}\n+        self.portal["tiledfolder"].tiles_layout = {\n+            "uuid1": {"@type": "title"},\n+            "uuid2": {"@type": "description"},\n         }\n \n     def test_behavior_provides(self):\n         self.portal.invokeFactory(\n-            \'tiledfolder\',\n-            id=\'tiledfolder\',\n-            title=u\'Folder with tiles\'\n+            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n         )\n \n-        ITiles.providedBy(self.portal[\'tiledfolder\'])\n+        ITiles.providedBy(self.portal["tiledfolder"])\ndiff --git a/src/plone/restapi/tests/test_boolean_value.py b/src/plone/restapi/tests/test_boolean_value.py\nindex 0bfd5b9b..72c308c0 100644\n--- a/src/plone/restapi/tests/test_boolean_value.py\n+++ b/src/plone/restapi/tests/test_boolean_value.py\n@@ -13,31 +13,31 @@ def test_true_bool(self):\n         self.assertTrue(boolean_value(True))\n \n     def test_true_string(self):\n-        self.assertTrue(boolean_value(\'true\'))\n+        self.assertTrue(boolean_value("true"))\n \n     def test_true_string_uppercase(self):\n-        self.assertTrue(boolean_value(\'True\'))\n+        self.assertTrue(boolean_value("True"))\n \n     def test_true_int(self):\n         self.assertTrue(boolean_value(1))\n \n     def test_true_int_string(self):\n-        self.assertTrue(boolean_value(\'1\'))\n+        self.assertTrue(boolean_value("1"))\n \n     def test_false_bool(self):\n         self.assertFalse(boolean_value(False))\n \n     def test_false_string(self):\n-        self.assertFalse(boolean_value(\'false\'))\n+        self.assertFalse(boolean_value("false"))\n \n     def test_false_string_uppercase(self):\n-        self.assertFalse(boolean_value(\'False\'))\n+        self.assertFalse(boolean_value("False"))\n \n     def test_false_int(self):\n         self.assertFalse(boolean_value(0))\n \n     def test_false_int_string(self):\n-        self.assertFalse(boolean_value(\'0\'))\n+        self.assertFalse(boolean_value("0"))\n \n     def test_true_other_value(self):\n-        self.assertTrue(boolean_value(\'foobar\'))\n+        self.assertTrue(boolean_value("foobar"))\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 69e7e44c..64cfdb20 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -19,9 +19,9 @@ class TestCommentsSerializers(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Allow discussion\n@@ -34,72 +34,58 @@ def setUp(self):\n         # doc with comments\n         self.doc = api.content.create(\n             container=self.portal,\n-            type=\'Document\',\n-            id=\'doc_with_comments\',\n-            title=\'Document with comments\',\n-            allow_discussion=True\n+            type="Document",\n+            id="doc_with_comments",\n+            title="Document with comments",\n+            allow_discussion=True,\n         )\n         self.conversation = IConversation(self.doc)\n         self.replies = IReplies(self.conversation)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment"\n         self.comment = self.replies[self.replies.addComment(comment)]\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment 2\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment 2"\n         self.replies.addComment(comment)\n \n     def test_conversation(self):\n         serializer = getMultiAdapter(\n-            (self.conversation, self.request),\n-            ISerializeToJson\n+            (self.conversation, self.request), ISerializeToJson\n         )\n \n         output = serializer()\n-        self.assertEqual(\n-            set(output),\n-            set([\'@id\', \'items_total\', \'items\'])\n-        )\n+        self.assertEqual(set(output), set(["@id", "items_total", "items"]))\n \n     def test_conversation_batched(self):\n-        self.request.form[\'b_size\'] = 1\n+        self.request.form["b_size"] = 1\n         serializer = getMultiAdapter(\n-            (self.conversation, self.request),\n-            ISerializeToJson\n+            (self.conversation, self.request), ISerializeToJson\n         )\n \n         output = serializer()\n-        self.assertIn(\'batching\', output)\n+        self.assertIn("batching", output)\n \n     def test_comment(self):\n-        serializer = getMultiAdapter(\n-            (self.comment, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n \n         output = serializer()\n \n         expected = [\n-            \'@id\',\n-            \'@type\',\n-            \'@parent\',\n-            \'comment_id\',\n-            \'in_reply_to\',\n-            \'text\',\n-            \'user_notification\',\n-            \'author_username\',\n-            \'author_name\',\n-            \'creation_date\',\n-            \'modification_date\',\n-            \'is_editable\',\n-            \'is_deletable\'\n+            "@id",\n+            "@type",\n+            "@parent",\n+            "comment_id",\n+            "in_reply_to",\n+            "text",\n+            "user_notification",\n+            "author_username",\n+            "author_name",\n+            "creation_date",\n+            "modification_date",\n+            "is_editable",\n+            "is_deletable",\n         ]\n-        self.assertEqual(\n-            set(output),\n-            set(expected)\n-        )\n+        self.assertEqual(set(output), set(expected))\n \n-        self.assertEqual(\n-            set(output[\'text\']),\n-            set([\'data\', \'mime-type\'])\n-        )\n+        self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex e7d39a92..fdaab9fd 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -19,8 +19,8 @@\n import transaction\n import unittest\n \n-linkintegrity_version = get_distribution(\'plone.app.linkintegrity\').version\n-if parse_version(linkintegrity_version) >= parse_version(\'3.0.dev0\'):\n+linkintegrity_version = get_distribution("plone.app.linkintegrity").version\n+if parse_version(linkintegrity_version) >= parse_version("3.0.dev0"):\n     NEW_LINKINTEGRITY = True\n else:\n     NEW_LINKINTEGRITY = False\n@@ -31,73 +31,67 @@ class TestContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         transaction.commit()\n \n     def test_delete_content_succeeds(self):\n         response = requests.delete(\n             self.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(204, response.status_code)\n         transaction.begin()\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n \n     def test_delete_content_returns_401_unauthorized(self):\n         response = requests.delete(\n             self.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n         )\n         self.assertEqual(401, response.status_code)\n \n \n-@unittest.skipIf(NEW_LINKINTEGRITY, \'Only affects p.a.linkintegrity<3.0\')\n+@unittest.skipIf(NEW_LINKINTEGRITY, "Only affects p.a.linkintegrity<3.0")\n class TestATContentDelete(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n \n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_delete_content_succeeds_with_link_integrity_breach(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document\',\n-        )]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="My Document")\n+        ]\n         from plone.app.linkintegrity.interfaces import ILinkIntegrityInfo\n-        info = ILinkIntegrityInfo(self.layer[\'request\'])\n+\n+        info = ILinkIntegrityInfo(self.layer["request"])\n         info.addBreach(doc2, self.doc1)\n-        service = self.traverse(\'/plone/doc1\', method=\'DELETE\')\n+        service = self.traverse("/plone/doc1", method="DELETE")\n         service()\n         self.assertEqual(204, info.context.response.status)\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 9504a305..3c38c829 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -24,148 +24,119 @@ class TestContentGet(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.text = RichTextValue(\n-            u"Lorem ipsum.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'My Folder 2\'\n+            u"Lorem ipsum.", "text/plain", "text/html"\n         )\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document 2\'\n+            "Document", id="doc2", title="My Document 2"\n         )\n         self.portal.folder1.invokeFactory(\n-            \'Collection\',\n-            id=\'collection\',\n-            title=\'My collection\'\n+            "Collection", id="collection", title="My collection"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n+        wftool.doActionFor(self.portal.folder1.doc1, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, "publish")\n         transaction.commit()\n \n     def test_get_content_returns_fullobjects(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\n-            \'title\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'description\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'text\' in list(response.json()[\'items\'][0])\n-        )\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("title" in list(response.json()["items"][0]))\n+        self.assertTrue("description" in list(response.json()["items"][0]))\n+        self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n             {\n-                u\'data\': u\'<p>Lorem ipsum.</p>\',\n-                u\'content-type\': u\'text/plain\',\n-                u\'encoding\': u\'utf-8\'\n+                u"data": u"<p>Lorem ipsum.</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n             },\n-            response.json()[\'items\'][0].get(\'text\')\n+            response.json()["items"][0].get("text"),\n         )\n \n         # make sure the single document response is the same as the items\n         response_doc = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertEqual(\n-            response.json()[\'items\'][0],\n-            response_doc.json()\n-        )\n+        self.assertEqual(response.json()["items"][0], response_doc.json())\n \n     def test_get_content_include_items(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?include_items=false\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?include_items=false",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertNotIn(\'items\', response.json())\n+        self.assertNotIn("items", response.json())\n \n     def test_get_content_returns_fullobjects_correct_id(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n-                         self.portal_url + u\'/folder1/folder2\')\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertEqual(\n+            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+        )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("items" not in response.json()["items"][1])\n \n     def test_get_content_includes_related_items(self):\n         intids = getUtility(IIntIds)\n         self.portal.folder1.doc1.relatedItems = [\n-            RelationValue(\n-                intids.getId(\n-                    self.portal.folder1.folder2.doc2\n-                )\n-            )\n-\n+            RelationValue(intids.getId(self.portal.folder1.folder2.doc2))\n         ]\n         transaction.commit()\n         response = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(1, len(response.json()[\'relatedItems\']))\n+        self.assertEqual(1, len(response.json()["relatedItems"]))\n         self.assertEqual(\n-            [{\n-                u\'@id\': self.portal_url + u\'/folder1/folder2/doc2\',\n-                u\'@type\': u\'Document\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'published\',\n-                u\'title\': u\'My Document 2\'\n-            }],\n-            response.json()[\'relatedItems\']\n+            [\n+                {\n+                    u"@id": self.portal_url + u"/folder1/folder2/doc2",\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"review_state": u"published",\n+                    u"title": u"My Document 2",\n+                }\n+            ],\n+            response.json()["relatedItems"],\n         )\n \n \n@@ -175,100 +146,73 @@ class TestContentATGet(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.setText(u"Lorem ipsum.")\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'My Folder 2\'\n-        )\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document 2\'\n+            "Document", id="doc2", title="My Document 2"\n         )\n         self.portal.folder1.invokeFactory(\n-            \'Collection\',\n-            id=\'collection\',\n-            title=\'My collection\'\n+            "Collection", id="collection", title="My collection"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n+        wftool.doActionFor(self.portal.folder1.doc1, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, "publish")\n         transaction.commit()\n \n     def test_get_content_returns_fullobjects(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\n-            \'title\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'description\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'text\' in list(response.json()[\'items\'][0])\n-        )\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("title" in list(response.json()["items"][0]))\n+        self.assertTrue("description" in list(response.json()["items"][0]))\n+        self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n-            {\n-                u\'data\': u\'<p>Lorem ipsum.</p>\',\n-                u\'content-type\': u\'text/html\',\n-            },\n-            response.json()[\'items\'][0].get(\'text\')\n+            {u"data": u"<p>Lorem ipsum.</p>", u"content-type": u"text/html"},\n+            response.json()["items"][0].get("text"),\n         )\n \n         # make sure the single document response is the same as the items\n         response_doc = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertEqual(\n-            response.json()[\'items\'][0],\n-            response_doc.json()\n-        )\n+        self.assertEqual(response.json()["items"][0], response_doc.json())\n \n     def test_get_content_returns_fullobjects_correct_id(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n-                         self.portal_url + u\'/folder1/folder2\')\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertEqual(\n+            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+        )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("items" not in response.json()["items"][1])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex e0cd27b6..608498e4 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -30,79 +30,68 @@ class TestFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n \n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n \n         transaction.commit()\n \n     def _get_ac_local_roles_block(self, obj):\n         return bool(\n-            getattr(aq_base(self.portal.folder1),\n-                    \'__ac_local_roles_block__\',\n-                    False))\n+            getattr(aq_base(self.portal.folder1), "__ac_local_roles_block__", False)\n+        )\n \n     def test_sharing_search(self):\n-        \'\'\'A request to @sharing should support the search parameter. \'\'\'\n+        """A request to @sharing should support the search parameter. """\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        non_search_entries = response.json()[\'entries\']\n+        non_search_entries = response.json()["entries"]\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing?search=admin\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing?search=admin",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        search_entries = response.json()[\'entries\']\n+        search_entries = response.json()["entries"]\n \n         # Did we find anything?\n         self.assertNotEqual(len(non_search_entries), len(search_entries))\n \n     def test_sharing_search_roundtrip(self):\n-        \'\'\'Search for a user and use save roles\n-        \'\'\'\n+        """Search for a user and use save roles\n+        """\n         # Make sure we don\'t already have admin\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertNotIn(\n-            \'admin\', [x[\'id\'] for x in response.json()[\'entries\']]\n-        )\n+        self.assertNotIn("admin", [x["id"] for x in response.json()["entries"]])\n \n         # Now find admin and set roles\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing?search=admin\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing?search=admin",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        roles = [x for x in response.json()[\'entries\'] if x[\'id\'] == \'admin\']\n-        roles = roles[0][\'roles\']\n+        roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n+        roles = roles[0]["roles"]\n \n         new_roles = dict([(key, not val) for key, val in roles.items()])\n-        payload = {\'entries\': [{\'id\': \'admin\', \'roles\': new_roles}]}\n+        payload = {"entries": [{"id": "admin", "roles": new_roles}]}\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json=payload,\n         )\n@@ -110,135 +99,158 @@ def test_sharing_search_roundtrip(self):\n \n         # Now we should have admin in @sharing\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertIn(\n-            \'admin\', [x[\'id\'] for x in response.json()[\'entries\']]\n-        )\n+        self.assertIn("admin", [x["id"] for x in response.json()["entries"]])\n \n         # with the same roles as set\n-        roles = [x for x in response.json()[\'entries\'] if x[\'id\'] == \'admin\']\n-        roles = roles[0][\'roles\']\n+        roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n+        roles = roles[0]["roles"]\n         self.assertEqual(new_roles, roles)\n \n     def test_sharing_titles_are_translated(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\',\n-                     \'Accept-Language\': \'de\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json", "Accept-Language": "de"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        available_roles = response.json()[\'available_roles\']\n-        self.assertEqual([\n-            {u\'id\': u\'Contributor\', u\'title\': u\'Kann hinzuf\\xfcgen\'},\n-            {u\'id\': u\'Editor\', u\'title\': u\'Kann bearbeiten\'},\n-            {u\'id\': u\'Reader\', u\'title\': u\'Kann ansehen\'},\n-            {u\'id\': u\'Reviewer\', u\'title\': u\'Kann ver\\xf6ffentlichen\'}],\n-            available_roles)\n+        available_roles = response.json()["available_roles"]\n+        self.assertEqual(\n+            [\n+                {u"id": u"Contributor", u"title": u"Kann hinzuf\\xfcgen"},\n+                {u"id": u"Editor", u"title": u"Kann bearbeiten"},\n+                {u"id": u"Reader", u"title": u"Kann ansehen"},\n+                {u"id": u"Reviewer", u"title": u"Kann ver\\xf6ffentlichen"},\n+            ],\n+            available_roles,\n+        )\n \n     def test_sharing_requires_delegate_roles_permission(self):\n-        \'\'\'A response for an object without any roles assigned\'\'\'\n+        """A response for an object without any roles assigned"""\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_get_local_roles_none_assigned(self):\n-        \'\'\'A response for an object without any roles assigned\'\'\'\n+        """A response for an object without any roles assigned"""\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [\n-                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n-                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n-                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n-                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n-             u\'entries\': [{\n-                 u\'disabled\': False,\n-                 u\'id\': u\'AuthenticatedUsers\',\n-                 u\'login\': None,\n-                 u\'roles\': {u\'Contributor\': False,\n-                            u\'Editor\': False,\n-                            u\'Reader\': False,\n-                            u\'Reviewer\': False},\n-                 u\'title\': u\'Logged-in users\',\n-                 u\'type\': u\'group\'}],\n-             u\'inherit\': True}\n+            {\n+                u"available_roles": [\n+                    {u"id": u"Contributor", u"title": u"Can add"},\n+                    {u"id": u"Editor", u"title": u"Can edit"},\n+                    {u"id": u"Reader", u"title": u"Can view"},\n+                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                ],\n+                u"entries": [\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"AuthenticatedUsers",\n+                        u"login": None,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": False,\n+                        },\n+                        u"title": u"Logged-in users",\n+                        u"type": u"group",\n+                    }\n+                ],\n+                u"inherit": True,\n+            },\n         )\n \n     def test_get_local_roles_with_user(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer"]\n+        )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [\n-                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n-                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n-                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n-                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n-             u\'entries\': [\n-                {\n-                    u\'disabled\': False,\n-                    u\'id\': u\'AuthenticatedUsers\',\n-                    u\'login\': None,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': False},\n-                    u\'title\': u\'Logged-in users\',\n-                    u\'type\': u\'group\'},\n-                {\n-                    u\'disabled\': False,\n-                    u\'id\': u\'test_user_1_\',\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': True},\n-                    u\'title\': u\'test-user\',\n-                    u\'type\': u\'user\'}],\n-             u\'inherit\': True}\n+            {\n+                u"available_roles": [\n+                    {u"id": u"Contributor", u"title": u"Can add"},\n+                    {u"id": u"Editor", u"title": u"Can edit"},\n+                    {u"id": u"Reader", u"title": u"Can view"},\n+                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                ],\n+                u"entries": [\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"AuthenticatedUsers",\n+                        u"login": None,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": False,\n+                        },\n+                        u"title": u"Logged-in users",\n+                        u"type": u"group",\n+                    },\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"test_user_1_",\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": True,\n+                        },\n+                        u"title": u"test-user",\n+                        u"type": u"user",\n+                    },\n+                ],\n+                u"inherit": True,\n+            },\n         )\n \n     def test_set_local_roles_for_user(self):\n \n-        pas = getToolByName(self.portal, \'acl_users\')\n+        pas = getToolByName(self.portal, "acl_users")\n         self.assertEqual(\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),)\n+            (("admin", ("Owner",), "user", "admin"),),\n         )\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'entries\': [{\n-                    u\'id\': TEST_USER_ID,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': True,\n-                               u\'Reviewer\': True},\n-                    u\'type\': u\'user\'}],\n+                "entries": [\n+                    {\n+                        u"id": TEST_USER_ID,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": True,\n+                            u"Reviewer": True,\n+                        },\n+                        u"type": u"user",\n+                    }\n+                ]\n             },\n         )\n \n@@ -247,35 +259,44 @@ def test_set_local_roles_for_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n-             [\'test-user\', [u\'Reader\', u\'Reviewer\'], \'user\', u\'test_user_1_\']]\n+            [\n+                ["admin", ["Owner"], "user", "admin"],\n+                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+            ],\n         )\n \n     def test_unset_local_roles_for_user(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\', \'Reader\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer", "Reader"]\n+        )\n         transaction.commit()\n \n-        pas = getToolByName(self.portal, \'acl_users\')\n+        pas = getToolByName(self.portal, "acl_users")\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n-             [\'test-user\', [\'Reader\', \'Reviewer\'], \'user\', \'test_user_1_\']]\n+            [\n+                ["admin", ["Owner"], "user", "admin"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n+            ],\n         )\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'entries\': [{\n-                    u\'id\': TEST_USER_ID,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': True},\n-                    u\'type\': u\'user\'}],\n+                "entries": [\n+                    {\n+                        u"id": TEST_USER_ID,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": True,\n+                        },\n+                        u"type": u"user",\n+                    }\n+                ]\n             },\n         )\n \n@@ -284,9 +305,10 @@ def test_unset_local_roles_for_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (u\'Reviewer\',),\n-              \'user\', u\'test_user_1_\'))\n+            (\n+                ("admin", ("Owner",), "user", "admin"),\n+                ("test-user", (u"Reviewer",), "user", u"test_user_1_"),\n+            ),\n         )\n \n     def test_get_local_roles_inherit_roles(self):\n@@ -296,124 +318,113 @@ def test_get_local_roles_inherit_roles(self):\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.json()[\'inherit\'], False)\n+        self.assertEqual(response.json()["inherit"], False)\n \n     def test_set_local_roles_inherit(self):\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         False)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), False)\n \n         # block local roles\n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'inherit\': False\n-            },\n+            json={"inherit": False},\n         )\n \n         transaction.commit()\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         True)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), True)\n         # unblock local roles\n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'inherit\': True\n-            },\n+            json={"inherit": True},\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         False)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), False)\n \n     def test_get_available_roles(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer"]\n+        )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertIn(\'available_roles\', response)\n-        self.assertIn({\'id\': \'Reader\', \'title\': \'Can view\'},\n-                      response[\'available_roles\'])\n+        self.assertIn("available_roles", response)\n+        self.assertIn(\n+            {"id": "Reader", "title": "Can view"}, response["available_roles"]\n+        )\n \n     def test_inherited_global(self):\n-        api.user.grant_roles(username=TEST_USER_ID, roles=[\'Reviewer\'])\n+        api.user.grant_roles(username=TEST_USER_ID, roles=["Reviewer"])\n         api.user.grant_roles(\n-            username=TEST_USER_ID, obj=self.portal.folder1, roles=[\'Editor\']\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Editor"]\n         )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.doc1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.doc1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         response = response.json()\n         # find our entry\n-        entry = [x for x in response[\'entries\'] if x[\'id\'] == TEST_USER_ID][0]\n+        entry = [x for x in response["entries"] if x["id"] == TEST_USER_ID][0]\n \n-        self.assertEqual(\'global\', entry[\'roles\'][\'Reviewer\'])\n-        self.assertEqual(\'acquired\', entry[\'roles\'][\'Editor\'])\n+        self.assertEqual("global", entry["roles"]["Reviewer"])\n+        self.assertEqual("acquired", entry["roles"]["Editor"])\n \n     def test_inherited_global_via_search(self):\n-        api.user.create(email=\'jos@henken.local\', username=\'jos\')\n-        api.user.grant_roles(username=\'jos\', roles=[\'Reviewer\'])\n-        api.user.grant_roles(\n-            username=\'jos\', roles=[\'Editor\'], obj=self.portal.folder1\n-        )\n+        api.user.create(email="jos@henken.local", username="jos")\n+        api.user.grant_roles(username="jos", roles=["Reviewer"])\n+        api.user.grant_roles(username="jos", roles=["Editor"], obj=self.portal.folder1)\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.doc1.absolute_url() + \'/@sharing?search=jos\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.doc1.absolute_url() + "/@sharing?search=jos",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         response = response.json()\n         # find our entry\n-        entry = [x for x in response[\'entries\'] if x[\'id\'] == \'jos\'][0]\n+        entry = [x for x in response["entries"] if x["id"] == "jos"][0]\n \n-        self.assertEqual(\'global\', entry[\'roles\'][\'Reviewer\'])\n-        self.assertEqual(\'acquired\', entry[\'roles\'][\'Editor\'])\n+        self.assertEqual("global", entry["roles"]["Reviewer"])\n+        self.assertEqual("acquired", entry["roles"]["Editor"])\n \n     def test_no_serializer_available_returns_501(self):\n         # This test unregisters the local_roles adapter. The testrunner can\n         # not auto-revert this on test tearDown. Therefore if we ever run\n         # into test isolation issues. Start to look here first.\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterAdapter(SerializeLocalRolesToJson, name=\'local_roles\')\n+        gsm.unregisterAdapter(SerializeLocalRolesToJson, name="local_roles")\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n-        self.assertIn(\'error\', response)\n-        self.assertEqual(\n-            u\'No serializer available.\',\n-            response[\'error\'][\'message\']\n-        )\n+        self.assertIn("error", response)\n+        self.assertEqual(u"No serializer available.", response["error"]["message"])\n \n         # we need to re-register the adapter here for following tests\n-        gsm.registerAdapter(SerializeLocalRolesToJson, name=\'local_roles\')\n+        gsm.registerAdapter(SerializeLocalRolesToJson, name="local_roles")\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex ae29fd2d..370725da 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -27,24 +27,21 @@ class TestContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\',\n-            description=\'Some Description\'\n+            "Document", id="doc1", title="My Document", description="Some Description"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n         transaction.commit()\n \n     def test_patch_document(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n@@ -53,10 +50,10 @@ def test_patch_document(self):\n         self.assertEqual("Patched Document", self.portal.doc1.Title())\n \n     def test_patch_document_will_delete_value_with_null(self):\n-        self.assertEqual(self.portal.doc1.description, \'Some Description\')\n+        self.assertEqual(self.portal.doc1.description, "Some Description")\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"description": null}\',\n         )\n@@ -64,12 +61,12 @@ def test_patch_document_will_delete_value_with_null(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(204, response.status_code)\n-        self.assertEqual(u\'\', self.portal.doc1.description)\n+        self.assertEqual(u"", self.portal.doc1.description)\n \n     def test_patch_document_will_not_delete_value_with_null_if_required(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": null}\',\n         )\n@@ -77,61 +74,52 @@ def test_patch_document_will_not_delete_value_with_null_if_required(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(400, response.status_code)\n-        self.assertTrue("\\\'field\\\': \\\'title\\\'" in response.text)\n-        self.assertTrue(\n-            \'title is a required field.\'\n-            in response.text\n-        )\n-        self.assertTrue(\n-             \'Setting it to null is not allowed.\'\n-             in response.text\n-        )\n+        self.assertTrue("\'field\': \'title\'" in response.text)\n+        self.assertTrue("title is a required field." in response.text)\n+        self.assertTrue("Setting it to null is not allowed." in response.text)\n \n     def test_patch_document_with_representation(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\n-                \'Accept\': \'application/json\',\n-                \'Prefer\': \'return=representation\'\n-            },\n+            headers={"Accept": "application/json", "Prefer": "return=representation"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(response.json()[\'title\'], "Patched Document")\n+        self.assertEqual(response.json()["title"], "Patched Document")\n         transaction.begin()\n         self.assertEqual("Patched Document", self.portal.doc1.Title())\n \n     def test_patch_document_with_invalid_body_returns_400(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            data=\'foo\',\n+            data="foo",\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn(\'DeserializationError\', response.text)\n+        self.assertIn("DeserializationError", response.text)\n \n     def test_patch_undeserializable_object_returns_501(self):\n         obj = PortalContent()\n-        obj.id = \'obj1\'\n-        obj.portal_type = \'Undeserializable Type\'\n+        obj.id = "obj1"\n+        obj.portal_type = "Undeserializable Type"\n         self.portal._setObject(obj.id, obj)\n         transaction.commit()\n \n         response = requests.patch(\n             self.portal.obj1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"id": "patched_obj1"}\',\n         )\n         self.assertEqual(501, response.status_code)\n-        self.assertIn(\'Undeserializable Type\', response.text)\n+        self.assertIn("Undeserializable Type", response.text)\n \n     def test_patch_document_returns_401_unauthorized(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n@@ -140,35 +128,33 @@ def test_patch_document_returns_401_unauthorized(self):\n     def test_patch_image_with_the_contents_of_the_get_preserves_image(self):\n         response = requests.post(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'@type\': \'Image\',\n-                \'image\': {\n-                    \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',  # noqa\n-                    \'encoding\': u\'base64\',\n-                    \'content-type\': u\'image/gif\',\n-                }\n+                "@type": "Image",\n+                "image": {\n+                    "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n+                    "encoding": u"base64",\n+                    "content-type": u"image/gif",\n+                },\n             },\n         )\n         transaction.commit()\n \n         response = response.json()\n-        image_url = self.portal[response[\'id\']].absolute_url()\n+        image_url = self.portal[response["id"]].absolute_url()\n         response = requests.patch(\n             image_url,\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json=response\n+            json=response,\n         )\n         transaction.commit()\n-        response = requests.get(\n-            image_url,\n-            headers={\'Accept\': \'application/json\'})\n+        response = requests.get(image_url, headers={"Accept": "application/json"})\n \n-        self.assertTrue(response.json()[\'image\'])\n-        self.assertIn(\'content-type\', response.json()[\'image\'])\n-        self.assertIn(\'download\', response.json()[\'image\'])\n+        self.assertTrue(response.json()["image"])\n+        self.assertIn("content-type", response.json()["image"])\n+        self.assertIn("download", response.json()["image"])\n \n     def test_patch_document_fires_proper_events(self):\n         sm = getGlobalSiteManager()\n@@ -184,18 +170,12 @@ def record_event(event):\n \n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "description": "123",\n-            },\n+            json={"description": "123"},\n         )\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectModifiedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectModifiedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -209,17 +189,14 @@ class TestATContentPatch(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         self.portal.portal_repository._versionable_content_types = []\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\',\n-            description=\'Some Description\'\n+            "Document", id="doc1", title="My Document", description="Some Description"\n         )\n         self.portal.doc1.unmarkCreationFlag()\n         transaction.commit()\n@@ -227,15 +204,13 @@ def setUp(self):\n     def test_patch_reindexes_document(self):\n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "description": "Foo Bar",\n-            },\n+            json={"description": "Foo Bar"},\n         )\n         transaction.begin()\n         brain = self.portal.portal_catalog(UID=self.portal.doc1.UID())[0]\n-        self.assertEqual(brain.Description, \'Foo Bar\')\n+        self.assertEqual(brain.Description, "Foo Bar")\n \n     def test_patch_document_fires_proper_events(self):\n         sm = getGlobalSiteManager()\n@@ -251,18 +226,12 @@ def record_event(event):\n \n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "description": "123",\n-            },\n+            json={"description": "123"},\n         )\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectEditedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectEditedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 13ab90d6..d26f99aa 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -26,71 +26,56 @@ class TestFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n         transaction.commit()\n \n     def test_post_to_folder_creates_document(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n         self.assertEqual("My Document", self.portal.folder1.mydocument.Title())\n-        self.assertEqual("Document", response.json().get(\'@type\'))\n-        self.assertEqual("mydocument", response.json().get(\'id\'))\n-        self.assertEqual("My Document", response.json().get(\'title\'))\n+        self.assertEqual("Document", response.json().get("@type"))\n+        self.assertEqual("mydocument", response.json().get("id"))\n+        self.assertEqual("My Document", response.json().get("title"))\n \n         expected_url = self.portal_url + u"/folder1/mydocument"\n-        self.assertEqual(expected_url, response.json().get(\'@id\'))\n+        self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_to_folder_creates_folder(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Folder",\n-                "id": "myfolder",\n-                "title": "My Folder",\n-            },\n+            json={"@type": "Folder", "id": "myfolder", "title": "My Folder"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n         self.assertEqual("My Folder", self.portal.folder1.myfolder.Title())\n-        self.assertEqual("Folder", response.json().get(\'@type\'))\n-        self.assertEqual("myfolder", response.json().get(\'id\'))\n-        self.assertEqual("My Folder", response.json().get(\'title\'))\n+        self.assertEqual("Folder", response.json().get("@type"))\n+        self.assertEqual("myfolder", response.json().get("id"))\n+        self.assertEqual("My Folder", response.json().get("title"))\n \n         expected_url = self.portal_url + u"/folder1/myfolder"\n-        self.assertEqual(expected_url, response.json().get(\'@id\'))\n+        self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_without_type_returns_400(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertIn("Property \'@type\' is required", response.text)\n@@ -98,21 +83,18 @@ def test_post_without_type_returns_400(self):\n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "title": "My Document"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'my-document\', self.portal.folder1)\n+        self.assertIn("my-document", self.portal.folder1)\n \n     def test_post_without_id_creates_id_from_filename(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "File",\n@@ -126,49 +108,38 @@ def test_post_without_id_creates_id_from_filename(self):\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'test.txt\', self.portal.folder1)\n+        self.assertIn("test.txt", self.portal.folder1)\n \n     def test_post_with_id_already_in_use_returns_400(self):\n-        self.portal.folder1.invokeFactory(\'Document\', \'mydocument\')\n+        self.portal.folder1.invokeFactory("Document", "mydocument")\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_post_to_folder_returns_401_unauthorized(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(401, response.status_code)\n \n     def test_post_to_folder_without_add_permission_returns_403_forbidden(self):\n         self.portal.folder1.manage_permission(\n-            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+            "plone.app.contenttypes: Add Document", [], acquire=False\n+        )\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(403, response.status_code)\n \n@@ -186,7 +157,7 @@ def record_event(event):\n \n         requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "Document",\n@@ -199,11 +170,12 @@ def record_event(event):\n         self.assertEqual(\n             fired_events,\n             [\n-                \'ObjectCreatedEvent\',\n-                \'ObjectWillBeAddedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+                "ObjectCreatedEvent",\n+                "ObjectWillBeAddedEvent",\n+                "ObjectAddedEvent",\n+                "ContainerModifiedEvent",\n+            ],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -217,16 +189,12 @@ class TestATFolderCreate(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         # wftool = getToolByName(self.portal, \'portal_workflow\')\n         # wftool.doActionFor(self.portal.folder1, \'publish\')\n         transaction.commit()\n@@ -234,44 +202,37 @@ def setUp(self):\n     def test_post_without_id_creates_id_from_title_for_archetypes(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n             json={\n                 "@type": "ATTestDocument",\n                 "title": "My Document",\n-                "testRequiredField": "My Value"\n+                "testRequiredField": "My Value",\n             },\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'my-document\', self.portal.folder1)\n+        self.assertIn("my-document", self.portal.folder1)\n \n     def test_id_from_filename(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "File",\n-                "file": {"filename": "test.txt", "data": "Foo bar"},\n-            },\n+            json={"@type": "File", "file": {"filename": "test.txt", "data": "Foo bar"}},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'test.txt\', self.portal.folder1)\n+        self.assertIn("test.txt", self.portal.folder1)\n \n     def test_post_with_id_already_in_use_returns_400(self):\n-        self.portal.folder1.invokeFactory(\'Document\', \'mydocument\')\n+        self.portal.folder1.invokeFactory("Document", "mydocument")\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n \n@@ -289,7 +250,7 @@ def record_event(event):\n \n         requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "Document",\n@@ -301,11 +262,8 @@ def record_event(event):\n \n         self.assertEqual(\n             fired_events,\n-            [\n-                \'ObjectInitializedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+            ["ObjectInitializedEvent", "ObjectAddedEvent", "ContainerModifiedEvent"],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 773b5d1d..66fd2afe 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -22,41 +22,42 @@ class TestCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_create_content_with_provided_id(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_create_content_without_provided_id(self):\n-        obj = create(self.folder, \'Document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertTrue(obj.getId().startswith(\'document.\'))\n+        obj = create(self.folder, "Document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertTrue(obj.getId().startswith("document."))\n \n     def test_create_content_without_add_permission_raises_unauthorized(self):\n         self.folder.manage_permission(\n-            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+            "plone.app.contenttypes: Add Document", [], acquire=False\n+        )\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_disallowed_content_type_raises_unauthorized(self):\n         self.portal.portal_types.Folder.filter_content_types = True\n         self.portal.portal_types.Folder.allowed_content_types = ()\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_constrained_content_type_raises_unauthorized(self):\n         constrains = ISelectableConstrainTypes(self.folder)\n         constrains.setConstrainTypesMode(1)\n-        constrains.setLocallyAllowedTypes([\'File\'])\n+        constrains.setLocallyAllowedTypes(["File"])\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n \n class TestATCreateContent(unittest.TestCase):\n@@ -65,43 +66,42 @@ class TestATCreateContent(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_create_content_with_provided_id(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_create_content_without_provided_id(self):\n-        obj = create(self.folder, \'Document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertTrue(obj.getId().startswith(\'document.\'))\n+        obj = create(self.folder, "Document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertTrue(obj.getId().startswith("document."))\n \n     def test_create_content_without_add_permission_raises_unauthorized(self):\n-        self.folder.manage_permission(\n-            \'ATContentTypes: Add Document\', [], acquire=False)\n+        self.folder.manage_permission("ATContentTypes: Add Document", [], acquire=False)\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_disallowed_content_type_raises_unauthorized(self):\n         self.portal.portal_types.Folder.filter_content_types = True\n         self.portal.portal_types.Folder.allowed_content_types = ()\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_constrained_content_type_raises_unauthorized(self):\n         constrains = ISelectableConstrainTypes(self.folder)\n         constrains.setConstrainTypesMode(1)\n-        constrains.setLocallyAllowedTypes([\'File\'])\n+        constrains.setLocallyAllowedTypes(["File"])\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n \n class TestAddContent(unittest.TestCase):\n@@ -109,38 +109,39 @@ class TestAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_add_content_to_container(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n     def test_add_content_to_container_renames_id(self):\n-        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = create(self.folder, "Document", title="My Document")\n         obj = add(self.folder, obj)\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_add_content_to_container_keeps_id(self):\n-        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = create(self.folder, "Document", "doc-1", "My Document")\n         obj = add(self.folder, obj, rename=False)\n-        self.assertEqual(obj.getId(), \'doc-1\')\n+        self.assertEqual(obj.getId(), "doc-1")\n \n     def test_add_content_to_container_and_move_on_added_event(self):\n         sm = getGlobalSiteManager()\n \n         def move_object(event):\n             self.portal.manage_pasteObjects(\n-                cb_copy_data=self.folder.manage_cutObjects(\n-                    ids=[\'my-document\']))\n+                cb_copy_data=self.folder.manage_cutObjects(ids=["my-document"])\n+            )\n+\n         sm.registerHandler(move_object, (IObjectAddedEvent,))\n \n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         notify(ObjectCreatedEvent(obj))\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.portal)\n@@ -154,26 +155,26 @@ class TestATAddContent(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_add_content_to_container(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n     def test_add_content_to_container_renames_id(self):\n-        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = create(self.folder, "Document", title="My Document")\n         obj = add(self.folder, obj)\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_add_content_to_container_keeps_id(self):\n-        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = create(self.folder, "Document", "doc-1", "My Document")\n         obj = add(self.folder, obj, rename=False)\n-        self.assertEqual(obj.getId(), \'doc-1\')\n+        self.assertEqual(obj.getId(), "doc-1")\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 6cc45052..8c610347 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -20,40 +20,41 @@ class TestCopyMove(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n-        self.folder1 = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'My Folder\')]\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n+        self.folder1 = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        ]\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_get_object_by_url(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n+        service = self.traverse("/plone/@copy", method="POST")\n         obj = service.get_object(self.doc1.absolute_url())\n \n         self.assertEqual(self.doc1, obj)\n \n     def test_get_object_by_path(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n-        obj = service.get_object(\'/doc1\')\n+        service = self.traverse("/plone/@copy", method="POST")\n+        obj = service.get_object("/doc1")\n \n         self.assertEqual(self.doc1, obj)\n \n     def test_get_object_by_uid(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n+        service = self.traverse("/plone/@copy", method="POST")\n         obj = service.get_object(self.doc1.UID())\n \n         self.assertEqual(self.doc1, obj)\n@@ -64,25 +65,26 @@ class TestCopyMoveFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n-        self.doc2 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc2\', title=\'My Document\')]\n-        self.folder1 = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'My Folder\')]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n+        self.doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="My Document")\n+        ]\n+        self.folder1 = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        ]\n \n         api.user.create(\n-            email=\'memberuser@example.com\',\n-            username=\'memberuser\',\n-            password=\'secret\'\n+            email="memberuser@example.com", username="memberuser", password="secret"\n         )\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -92,128 +94,97 @@ def tearDown(self):\n \n     def test_copy_single_object(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n+        self.assertIn("copy_of_doc1", self.portal.objectIds())\n \n     def test_move_single_object(self):\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/folder1/@move", json={"source": self.doc1.absolute_url()}\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'doc1\', self.folder1.objectIds())\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertIn("doc1", self.folder1.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n \n     def test_move_multiple_objects(self):\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n-            }\n+            "/folder1/@move",\n+            json={"source": [self.doc1.absolute_url(), self.doc2.absolute_url()]},\n         )\n         self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n-        self.assertIn(\'doc1\', self.folder1.objectIds())\n-        self.assertIn(\'doc2\', self.folder1.objectIds())\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n-        self.assertNotIn(\'doc2\', self.portal.objectIds())\n+        self.assertIn("doc1", self.folder1.objectIds())\n+        self.assertIn("doc2", self.folder1.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n+        self.assertNotIn("doc2", self.portal.objectIds())\n \n     def test_copy_without_source_raises_400(self):\n-        response = self.api_session.post(\'/folder1/@copy\')\n+        response = self.api_session.post("/folder1/@copy")\n         self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n-        response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": "does-not-exist"\n-            }\n-        )\n+        response = self.api_session.post("/@copy", json={"source": "does-not-exist"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n-            }\n+            "/@copy",\n+            json={"source": [self.doc1.absolute_url(), self.doc2.absolute_url()]},\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n-        self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n+        self.assertIn("copy_of_doc1", self.portal.objectIds())\n+        self.assertIn("copy_of_doc2", self.portal.objectIds())\n \n     def test_copy_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = (\'nonexistent\', \'secret\')\n+        self.api_session.auth = ("nonexistent", "secret")\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = (\'nonexistent\', \'secret\')\n+        self.api_session.auth = ("nonexistent", "secret")\n         response = self.api_session.post(\n-            \'/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n-        api.user.grant_roles(\n-            username=\'memberuser\', obj=self.folder1, roles=[\'Manager\', ])\n-        api.content.transition(obj=self.doc1, transition=\'publish\')\n+        api.user.grant_roles(username="memberuser", obj=self.folder1, roles=["Manager"])\n+        api.content.transition(obj=self.doc1, transition="publish")\n         transaction.commit()\n \n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/folder1/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 009e2036..b18064b9 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -26,7 +26,9 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PAM_INSTALLED\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n+from plone.restapi.testing import (\n+    PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME,\n+)  # noqa\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n from plone.scale import storage\n@@ -50,40 +52,35 @@\n \n \n TUS_HEADERS = [\n-    \'upload-offset\',\n-    \'upload-length\',\n-    \'upload-metadata\',\n-    \'tus-version\',\n-    \'tus-resumable\',\n-    \'tus-extension\',\n-    \'tus-max-size\',\n-\n+    "upload-offset",\n+    "upload-length",\n+    "upload-metadata",\n+    "tus-version",\n+    "tus-resumable",\n+    "tus-extension",\n+    "tus-max-size",\n ]\n \n REQUEST_HEADER_KEYS = [\n-    \'accept\',\n-    \'accept-language\',\n-    \'authorization\',\n-    \'lock-token\',\n-    \'prefer\',\n+    "accept",\n+    "accept-language",\n+    "authorization",\n+    "lock-token",\n+    "prefer",\n ] + TUS_HEADERS\n \n-RESPONSE_HEADER_KEYS = [\n-    \'content-type\',\n-    \'allow\',\n-    \'location\',\n-] + TUS_HEADERS\n+RESPONSE_HEADER_KEYS = ["content-type", "allow", "location"] + TUS_HEADERS\n \n \n-base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n+base_path = resource_filename("plone.restapi.tests", "http-examples")\n \n-UPLOAD_DATA = b\'abcdefgh\'\n-UPLOAD_MIMETYPE = b\'text/plain\'\n-UPLOAD_FILENAME = b\'test.txt\'\n+UPLOAD_DATA = b"abcdefgh"\n+UPLOAD_MIMETYPE = b"text/plain"\n+UPLOAD_FILENAME = b"test.txt"\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n-UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n-UPLOAD_PDF_FILENAME = \'file.pdf\'\n+UPLOAD_PDF_MIMETYPE = "application/pdf"\n+UPLOAD_PDF_FILENAME = "file.pdf"\n \n PLONE_VERSION = parse_version(api.env.plone_version())\n \n@@ -96,36 +93,37 @@\n \n \n def pretty_json(data):\n-    return json.dumps(data, sort_keys=True, indent=4, separators=(\',\', \': \'))\n+    return json.dumps(data, sort_keys=True, indent=4, separators=(",", ": "))\n \n \n def save_request_and_response_for_docs(name, response):\n     if six.PY2:\n         open_kw = {}\n     else:\n-        open_kw = {\'newline\': \'\\n\'}\n-    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n-    with open(filename, \'w\', **open_kw) as req:\n-        req.write(\'{} {} HTTP/1.1\\n\'.format(\n-            response.request.method,\n-            response.request.path_url\n-        ))\n+        open_kw = {"newline": "\\n"}\n+    filename = "{}/{}".format(base_path, "%s.req" % name)\n+    with open(filename, "w", **open_kw) as req:\n+        req.write(\n+            "{} {} HTTP/1.1\\n".format(\n+                response.request.method, response.request.path_url\n+            )\n+        )\n         ordered_request_headers = collections.OrderedDict(\n             sorted(response.request.headers.items())\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write(\'{}: {}\\n\'.format(key.title(), value))\n+                req.write("{}: {}\\n".format(key.title(), value))\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n-            if \'content-type\' not in REQUEST_HEADER_KEYS:\n-                content_type = response.request.headers[\'Content-Type\']\n-                req.write(\'Content-Type: %s\\n\' % content_type)\n+            if "content-type" not in REQUEST_HEADER_KEYS:\n+                content_type = response.request.headers["Content-Type"]\n+                req.write("Content-Type: %s\\n" % content_type)\n \n-            req.write(\'\\n\')\n+            req.write("\\n")\n \n             # Pretty print JSON request body\n-            if content_type == \'application/json\':\n+            if content_type == "application/json":\n                 json_body = json.loads(response.request.body)\n                 body = pretty_json(json_body)\n                 # Make sure Content-Length gets updated, just in case we\n@@ -133,22 +131,23 @@ def save_request_and_response_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if (isinstance(response.request.body, six.text_type)\n-                    or not hasattr(req, \'buffer\')):\n+            if isinstance(response.request.body, six.text_type) or not hasattr(\n+                req, "buffer"\n+            ):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n                 req.buffer.write(response.request.body)\n \n-    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n-    with open(filename, \'w\', **open_kw) as resp:\n+    filename = "{}/{}".format(base_path, "%s.resp" % name)\n+    with open(filename, "w", **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n-        resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n+        resp.write("HTTP/1.1 {} {}\\n".format(status, reason))\n         for key, value in response.headers.items():\n             if key.lower() in RESPONSE_HEADER_KEYS:\n-                resp.write(\'{}: {}\\n\'.format(key.title(), value))\n-        resp.write(\'\\n\')\n+                resp.write("{}: {}\\n".format(key.title(), value))\n+        resp.write("\\n")\n         resp.write(response.text)\n \n \n@@ -157,23 +156,23 @@ class TestDocumentation(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Register custom UUID generator to produce stable UUIDs during tests\n         pushGlobalRegistry(getSite())\n-        register_static_uuid_utility(prefix=\'SomeUUID\')\n+        register_static_uuid_utility(prefix="SomeUUID")\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n@@ -181,48 +180,38 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def create_document(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n     def create_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        folder = self.portal[\'folder\']\n-        folder.title = \'My Folder\'\n-        folder.description = u\'This is a folder with two documents\'\n-        folder.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'A document within a folder\'\n-        )\n-        folder.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'A document within a folder\'\n-        )\n-        folder.creation_date = DateTime(\n-            \'2016-01-21T07:14:48+00:00\')\n-        folder.modification_date = DateTime(\n-            \'2016-01-21T07:24:11+00:00\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        folder = self.portal["folder"]\n+        folder.title = "My Folder"\n+        folder.description = u"This is a folder with two documents"\n+        folder.invokeFactory("Document", id="doc1", title="A document within a folder")\n+        folder.invokeFactory("Document", id="doc2", title="A document within a folder")\n+        folder.creation_date = DateTime("2016-01-21T07:14:48+00:00")\n+        folder.modification_date = DateTime("2016-01-21T07:24:11+00:00")\n         return folder\n \n     def tearDown(self):\n@@ -236,384 +225,316 @@ def test_documentation_content_crud(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            folder.absolute_url(),\n-            json={\n-                \'@type\': \'Document\',\n-                \'title\': \'My Document\',\n-            }\n+            folder.absolute_url(), json={"@type": "Document", "title": "My Document"}\n         )\n-        save_request_and_response_for_docs(\'content_post\', response)\n+        save_request_and_response_for_docs("content_post", response)\n \n         transaction.commit()\n-        document = folder[\'my-document\']\n+        document = folder["my-document"]\n         response = self.api_session.get(document.absolute_url())\n-        save_request_and_response_for_docs(\'content_get\', response)\n+        save_request_and_response_for_docs("content_get", response)\n \n         response = self.api_session.patch(\n-            document.absolute_url(),\n-            json={\n-                \'title\': \'My New Document Title\',\n-            }\n+            document.absolute_url(), json={"title": "My New Document Title"}\n         )\n-        save_request_and_response_for_docs(\'content_patch\', response)\n+        save_request_and_response_for_docs("content_patch", response)\n \n         response = self.api_session.patch(\n             document.absolute_url(),\n-            headers={\'Prefer\': \'return=representation\'},\n-            json={\n-                \'title\': \'My New Document Title\',\n-            }\n-        )\n-        save_request_and_response_for_docs(\n-            \'content_patch_representation\',\n-            response\n+            headers={"Prefer": "return=representation"},\n+            json={"title": "My New Document Title"},\n         )\n+        save_request_and_response_for_docs("content_patch_representation", response)\n \n         transaction.commit()\n         response = self.api_session.delete(document.absolute_url())\n-        save_request_and_response_for_docs(\'content_delete\', response)\n+        save_request_and_response_for_docs("content_delete", response)\n \n     def test_documentation_document(self):\n         response = self.api_session.get(self.document.absolute_url())\n-        save_request_and_response_for_docs(\'document\', response)\n+        save_request_and_response_for_docs("document", response)\n \n     def test_documentation_news_item(self):\n-        self.portal.invokeFactory(\'News Item\', id=\'newsitem\')\n-        self.portal.newsitem.title = \'My News Item\'\n-        self.portal.newsitem.description = u\'This is a news item\'\n+        self.portal.invokeFactory("News Item", id="newsitem")\n+        self.portal.newsitem.title = "My News Item"\n+        self.portal.newsitem.description = u"This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n-        )\n-        self.portal.newsitem.image_caption = u\'This is an image caption.\'\n-        self.portal.newsitem.creation_date = DateTime(\n-            \'2016-01-21T02:14:48+00:00\')\n-        self.portal.newsitem.modification_date = DateTime(\n-            \'2016-01-21T02:24:11+00:00\')\n+            data=image_data, contentType="image/png", filename=u"image.png"\n+        )\n+        self.portal.newsitem.image_caption = u"This is an image caption."\n+        self.portal.newsitem.creation_date = DateTime("2016-01-21T02:14:48+00:00")\n+        self.portal.newsitem.modification_date = DateTime("2016-01-21T02:24:11+00:00")\n         transaction.commit()\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n-            response = self.api_session.get(\n-                self.portal.newsitem.absolute_url()\n-            )\n-            save_request_and_response_for_docs(\'newsitem\', response)\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n+            response = self.api_session.get(self.portal.newsitem.absolute_url())\n+            save_request_and_response_for_docs("newsitem", response)\n \n     def test_documentation_event(self):\n-        self.portal.invokeFactory(\'Event\', id=\'event\')\n-        self.portal.event.title = \'Event\'\n-        self.portal.event.description = u\'This is an event\'\n+        self.portal.invokeFactory("Event", id="event")\n+        self.portal.event.title = "Event"\n+        self.portal.event.description = u"This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n-        self.portal.event.creation_date = DateTime(\'2016-01-21T03:14:48+00:00\')\n-        self.portal.event.modification_date = DateTime(\n-            \'2016-01-21T03:24:11+00:00\')\n+        self.portal.event.creation_date = DateTime("2016-01-21T03:14:48+00:00")\n+        self.portal.event.modification_date = DateTime("2016-01-21T03:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n-        save_request_and_response_for_docs(\'event\', response)\n+        save_request_and_response_for_docs("event", response)\n \n     def test_documentation_link(self):\n-        self.portal.invokeFactory(\'Link\', id=\'link\')\n-        self.portal.link.title = \'My Link\'\n-        self.portal.link.description = u\'This is a link\'\n-        self.portal.remoteUrl = \'http://plone.org\'\n-        self.portal.link.creation_date = DateTime(\'2016-01-21T04:14:48+00:00\')\n-        self.portal.link.modification_date = DateTime(\n-            \'2016-01-21T04:24:11+00:00\')\n+        self.portal.invokeFactory("Link", id="link")\n+        self.portal.link.title = "My Link"\n+        self.portal.link.description = u"This is a link"\n+        self.portal.remoteUrl = "http://plone.org"\n+        self.portal.link.creation_date = DateTime("2016-01-21T04:14:48+00:00")\n+        self.portal.link.modification_date = DateTime("2016-01-21T04:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n-        save_request_and_response_for_docs(\'link\', response)\n+        save_request_and_response_for_docs("link", response)\n \n     def test_documentation_file(self):\n-        self.portal.invokeFactory(\'File\', id=\'file\')\n-        self.portal.file.title = \'My File\'\n-        self.portal.file.description = u\'This is a file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        with open(pdf_file, \'rb\') as f:\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.file.title = "My File"\n+        self.portal.file.description = u"This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=pdf_data,\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n         )\n-        self.portal.file.creation_date = DateTime(\'2016-01-21T05:14:48+00:00\')\n-        self.portal.file.modification_date = DateTime(\n-            \'2016-01-21T05:24:11+00:00\')\n+        self.portal.file.creation_date = DateTime("2016-01-21T05:14:48+00:00")\n+        self.portal.file.modification_date = DateTime("2016-01-21T05:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n-        save_request_and_response_for_docs(\'file\', response)\n+        save_request_and_response_for_docs("file", response)\n \n     def test_documentation_image(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image\')\n-        self.portal.image.title = \'My Image\'\n-        self.portal.image.description = u\'This is an image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="image")\n+        self.portal.image.title = "My Image"\n+        self.portal.image.description = u"This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n-        self.portal.image.creation_date = DateTime(\'2016-01-21T06:14:48+00:00\')\n-        self.portal.image.modification_date = DateTime(\n-            \'2016-01-21T06:24:11+00:00\')\n+        self.portal.image.creation_date = DateTime("2016-01-21T06:14:48+00:00")\n+        self.portal.image.modification_date = DateTime("2016-01-21T06:24:11+00:00")\n         transaction.commit()\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n             response = self.api_session.get(self.portal.image.absolute_url())\n-            save_request_and_response_for_docs(\'image\', response)\n+            save_request_and_response_for_docs("image", response)\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n         transaction.commit()\n         response = self.api_session.get(folder.absolute_url())\n-        save_request_and_response_for_docs(\'folder\', response)\n+        save_request_and_response_for_docs("folder", response)\n \n     def test_documentation_collection(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection\')\n-        self.portal.collection.title = \'My Collection\'\n-        self.portal.collection.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n-        self.portal.collection.creation_date = DateTime(\n-            \'2016-01-21T08:14:48+00:00\')\n-        self.portal.collection.modification_date = DateTime(\n-            \'2016-01-21T08:24:11+00:00\')\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.collection.title = "My Collection"\n+        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n+        self.portal.collection.creation_date = DateTime("2016-01-21T08:14:48+00:00")\n+        self.portal.collection.modification_date = DateTime("2016-01-21T08:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n-        save_request_and_response_for_docs(\'collection\', response)\n+        save_request_and_response_for_docs("collection", response)\n \n     def test_documentation_siteroot(self):\n         response = self.api_session.get(self.portal.absolute_url())\n-        save_request_and_response_for_docs(\'siteroot\', response)\n+        save_request_and_response_for_docs("siteroot", response)\n \n     def test_documentation_404_not_found(self):\n-        response = self.api_session.get(\'non-existing-resource\')\n-        save_request_and_response_for_docs(\'404_not_found\', response)\n+        response = self.api_session.get("non-existing-resource")\n+        save_request_and_response_for_docs("404_not_found", response)\n \n     def test_documentation_search(self):\n-        query = {\'sort_on\': \'path\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search\', response)\n+        query = {"sort_on": "path"}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search", response)\n \n     def test_documentation_search_options(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'Folder 1\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'Folder 2\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="Folder 2")\n         transaction.commit()\n-        query = {\'sort_on\': \'path\',\n-                 \'path.query\': \'/plone/folder1\',\n-                 \'path.depth\': \'1\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_options\', response)\n+        query = {"sort_on": "path", "path.query": "/plone/folder1", "path.depth": "1"}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_options", response)\n \n     def test_documentation_search_multiple_paths(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'Folder 1\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'Folder 2\'\n-        )\n-        self.portal.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n+        self.portal.invokeFactory("Folder", id="folder2", title="Folder 2")\n+        self.portal.folder2.invokeFactory("Document", id="doc2", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'sort_on\': \'path\',\n-                 \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n-                 \'path.depth\': \'2\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_multiple_paths\', response)\n+        query = {\n+            "sort_on": "path",\n+            "path.query": ["/plone/folder1", "/plone/folder2"],\n+            "path.depth": "2",\n+        }\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_multiple_paths", response)\n \n     def test_documentation_search_metadata_fields(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'modified\', \'created\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_metadata_fields\', response)\n+        query = {"SearchableText": "lorem", "metadata_fields": ["modified", "created"]}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_metadata_fields", response)\n \n     def test_documentation_search_fullobjects(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'fullobjects\': 1}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_fullobjects\', response)\n+        query = {"SearchableText": "lorem", "fullobjects": 1}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_fullobjects", response)\n \n     def test_documentation_workflow(self):\n         response = self.api_session.get(\n-            \'{}/@workflow\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'workflow_get\', response)\n+            "{}/@workflow".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n         self.frozen_time.tick(timedelta(minutes=5))\n         response = self.api_session.post(\n-            \'{}/@workflow/publish\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'workflow_post\', response)\n+            "{}/@workflow/publish".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("workflow_post", response)\n \n     def test_documentation_workflow_transition_with_body(self):\n         self.frozen_time.tick(timedelta(minutes=5))\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n         transaction.commit()\n         response = self.api_session.post(\n-            \'{}/@workflow/publish\'.format(folder.absolute_url()),\n+            "{}/@workflow/publish".format(folder.absolute_url()),\n             json={\n-                \'comment\': \'Publishing my folder...\',\n-                \'include_children\': True,\n-                \'effective\': \'2018-01-21T08:00:00\',\n-                \'expires\': \'2019-01-21T08:00:00\',\n-            })\n-        save_request_and_response_for_docs(\'workflow_post_with_body\', response)\n+                "comment": "Publishing my folder...",\n+                "include_children": True,\n+                "effective": "2018-01-21T08:00:00",\n+                "expires": "2019-01-21T08:00:00",\n+            },\n+        )\n+        save_request_and_response_for_docs("workflow_post_with_body", response)\n \n     def test_documentation_registry_get(self):\n         response = self.api_session.get(\n-            \'/@registry/plone.app.querystring.field.path.title\')\n-        save_request_and_response_for_docs(\'registry_get\', response)\n+            "/@registry/plone.app.querystring.field.path.title"\n+        )\n+        save_request_and_response_for_docs("registry_get", response)\n \n     def test_documentation_registry_update(self):\n         response = self.api_session.patch(\n-            \'/@registry/\',\n-            json={\'plone.app.querystring.field.path.title\': \'Value\'})\n-        save_request_and_response_for_docs(\'registry_update\', response)\n+            "/@registry/", json={"plone.app.querystring.field.path.title": "Value"}\n+        )\n+        save_request_and_response_for_docs("registry_update", response)\n \n     def test_documentation_registry_get_list(self):\n-        response = self.api_session.get(\'/@registry\')\n-        save_request_and_response_for_docs(\'registry_get_list\', response)\n+        response = self.api_session.get("/@registry")\n+        save_request_and_response_for_docs("registry_get_list", response)\n \n     def test_documentation_types(self):\n-        response = self.api_session.get(\'/@types\')\n-        save_request_and_response_for_docs(\'types\', response)\n+        response = self.api_session.get("/@types")\n+        save_request_and_response_for_docs("types", response)\n \n     def test_documentation_types_document(self):\n-        response = self.api_session.get(\'@types/Document\')\n-        save_request_and_response_for_docs(\'types_document\', response)\n+        response = self.api_session.get("@types/Document")\n+        save_request_and_response_for_docs("types_document", response)\n \n     def test_documentation_jwt_login(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        save_request_and_response_for_docs(\'jwt_login\', response)\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        save_request_and_response_for_docs("jwt_login", response)\n \n     def test_documentation_jwt_logged_in(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.get(\n-            \'/\',\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_logged_in\', response)\n+            "/", headers={"Authorization": "Bearer {}".format(token)}\n+        )\n+        save_request_and_response_for_docs("jwt_logged_in", response)\n \n     def test_documentation_jwt_login_renew(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            \'{}/@login-renew\'.format(self.portal.absolute_url()),\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_login_renew\', response)\n+            "{}/@login-renew".format(self.portal.absolute_url()),\n+            headers={"Authorization": "Bearer {}".format(token)},\n+        )\n+        save_request_and_response_for_docs("jwt_login_renew", response)\n \n     def test_documentation_jwt_logout(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            \'{}/@logout\'.format(self.portal.absolute_url()),\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_logout\', response)\n+            "{}/@logout".format(self.portal.absolute_url()),\n+            headers={"Authorization": "Bearer {}".format(token)},\n+        )\n+        save_request_and_response_for_docs("jwt_logout", response)\n \n     def test_documentation_batching(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Folder\'\n-        )]\n+        folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Folder")\n+        ]\n         for i in range(7):\n             folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc-%s\' % str(i + 1),\n-                title=\'Document %s\' % str(i + 1)\n+                "Document", id="doc-%s" % str(i + 1), title="Document %s" % str(i + 1)\n             )\n         transaction.commit()\n \n-        query = {\'sort_on\': \'path\'}\n-        response = self.api_session.get(\n-            \'/folder/@search?b_size=5\', params=query)\n-        save_request_and_response_for_docs(\'batching\', response)\n+        query = {"sort_on": "path"}\n+        response = self.api_session.get("/folder/@search?b_size=5", params=query)\n+        save_request_and_response_for_docs("batching", response)\n \n     def test_documentation_users(self):\n         test_user = api.user.get(username=TEST_USER_ID)\n@@ -623,533 +544,515 @@ def test_documentation_users(self):\n             "fullname": "Test User",\n             "home_page": "http://www.example.com",\n             "location": "Bonn",\n-            "username": "test-user"\n+            "username": "test-user",\n         }\n         test_user.setMemberProperties(mapping=properties)\n-        admin = api.user.get(username=\'admin\')\n+        admin = api.user.get(username="admin")\n         properties = {\n             "description": "This is an admin user",\n             "email": "admin@example.com",\n             "fullname": "Administrator",\n             "home_page": "http://www.example.com",\n             "location": "Berlin",\n-            "username": "admin"\n+            "username": "admin",\n         }\n         admin.setMemberProperties(mapping=properties)\n         transaction.commit()\n-        response = self.api_session.get(\'/@users\')\n-        save_request_and_response_for_docs(\'users\', response)\n+        response = self.api_session.get("/@users")\n+        save_request_and_response_for_docs("users", response)\n \n     def test_documentation_users_as_anonymous(self):\n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n \n-        response = logged_out_api_session.get(\'@users\')\n-        save_request_and_response_for_docs(\'users_anonymous\', response)\n+        response = logged_out_api_session.get("@users")\n+        save_request_and_response_for_docs("users_anonymous", response)\n         self.assertEqual(response.status_code, 401)\n         logged_out_api_session.close()\n \n     def test_documentations_users_as_unauthorized_user(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'password\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="password",\n+            properties=properties,\n         )\n         transaction.commit()\n \n         standard_api_session = RelativeSession(self.portal_url)\n-        standard_api_session.headers.update({\'Accept\': \'application/json\'})\n-        standard_api_session.auth = (\'noam\', \'password\')\n+        standard_api_session.headers.update({"Accept": "application/json"})\n+        standard_api_session.auth = ("noam", "password")\n \n-        response = standard_api_session.get(\'@users\')\n-        save_request_and_response_for_docs(\'users_unauthorized\', response)\n+        response = standard_api_session.get("@users")\n+        save_request_and_response_for_docs("users_unauthorized", response)\n         self.assertEqual(response.status_code, 401)\n         standard_api_session.close()\n \n     def test_documentation_users_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_get\', response)\n+        response = self.api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_get", response)\n \n     def test_documentation_users_anonymous_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n \n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_anonymous_get\', response)\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_anonymous_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_unauthorized_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="secret",\n+            properties=properties,\n         )\n \n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam-fake\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam-fake",\n+            password="secret",\n+            properties=properties,\n         )\n \n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n-        logged_out_api_session.auth = (\'noam-fake\', \'secret\')\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n+        logged_out_api_session.auth = ("noam-fake", "secret")\n \n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_unauthorized_get\', response)\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_unauthorized_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_authorized_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="secret",\n+            properties=properties,\n         )\n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n-        logged_out_api_session.auth = (\'noam\', \'secret\')\n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_authorized_get\', response)\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n+        logged_out_api_session.auth = ("noam", "secret")\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_authorized_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'@users\', params={\'query\': \'noa\'})\n-        save_request_and_response_for_docs(\'users_filtered_by_username\', response)  # noqa\n+        response = self.api_session.get("@users", params={"query": "noa"})\n+        save_request_and_response_for_docs(\n+            "users_filtered_by_username", response\n+        )  # noqa\n \n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n-                \'email\': \'noam.chomsky@example.com\',\n-                \'password\': \'colorlessgreenideas\',\n-                \'username\': \'noamchomsky\',\n-                \'fullname\': \'Noam Avram Chomsky\',\n-                \'home_page\': \'web.mit.edu/chomsky\',\n-                \'description\': \'Professor of Linguistics\',\n-                \'location\': \'Cambridge, MA\',\n-                \'roles\': [\'Contributor\', ],\n+                "email": "noam.chomsky@example.com",\n+                "password": "colorlessgreenideas",\n+                "username": "noamchomsky",\n+                "fullname": "Noam Avram Chomsky",\n+                "home_page": "web.mit.edu/chomsky",\n+                "description": "Professor of Linguistics",\n+                "location": "Cambridge, MA",\n+                "roles": ["Contributor"],\n             },\n         )\n-        save_request_and_response_for_docs(\'users_created\', response)\n+        save_request_and_response_for_docs("users_created", response)\n \n     def test_documentation_users_add(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n-                \'email\': \'noam.chomsky@example.com\',\n-                \'username\': \'noamchomsky\',\n-                \'fullname\': \'Noam Avram Chomsky\',\n-                \'home_page\': \'web.mit.edu/chomsky\',\n-                \'description\': \'Professor of Linguistics\',\n-                \'location\': \'Cambridge, MA\',\n-                \'sendPasswordReset\': True\n+                "email": "noam.chomsky@example.com",\n+                "username": "noamchomsky",\n+                "fullname": "Noam Avram Chomsky",\n+                "home_page": "web.mit.edu/chomsky",\n+                "description": "Professor of Linguistics",\n+                "location": "Cambridge, MA",\n+                "sendPasswordReset": True,\n             },\n         )\n-        save_request_and_response_for_docs(\'users_add\', response)\n+        save_request_and_response_for_docs("users_add", response)\n \n     def test_documentation_users_update(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n         response = self.api_session.patch(\n-            \'/@users/noam\',\n+            "/@users/noam",\n             json={\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'roles\': {\'Contributor\': False, },\n+                "email": "avram.chomsky@example.com",\n+                "roles": {"Contributor": False},\n             },\n         )\n-        save_request_and_response_for_docs(\'users_update\', response)\n+        save_request_and_response_for_docs("users_update", response)\n \n     def test_documentation_users_update_portrait(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\'\n-        )\n+        api.user.create(email="noam.chomsky@example.com", username="noam")\n         transaction.commit()\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n-        response_get = self.api_session.get(\'/@users/noam\', json=payload)\n+        response_get = self.api_session.get("/@users/noam", json=payload)\n \n-        save_request_and_response_for_docs(\'users_update_portrait\', response)\n-        save_request_and_response_for_docs(\n-            \'users_update_portrait_get\', response_get)\n+        save_request_and_response_for_docs("users_update_portrait", response)\n+        save_request_and_response_for_docs("users_update_portrait_get", response_get)\n \n     def test_documentation_users_update_portrait_with_scale(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\',\n-                \'scale\': True\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n+                "scale": True,\n             }\n         }\n-        api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\'\n-        )\n+        api.user.create(email="noam.chomsky@example.com", username="noam")\n         transaction.commit()\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n-        save_request_and_response_for_docs(\n-            \'users_update_portrait_scale\', response)\n+        save_request_and_response_for_docs("users_update_portrait_scale", response)\n \n     def test_documentation_users_delete(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n-        response = self.api_session.delete(\n-            \'/@users/noam\')\n-        save_request_and_response_for_docs(\'users_delete\', response)\n+        response = self.api_session.delete("/@users/noam")\n+        save_request_and_response_for_docs("users_delete", response)\n \n     def test_documentation_groups(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'/@groups\')\n-        save_request_and_response_for_docs(\'groups\', response)\n+        response = self.api_session.get("/@groups")\n+        save_request_and_response_for_docs("groups", response)\n \n     def test_documentation_groups_get(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'@groups/ploneteam\')\n-        save_request_and_response_for_docs(\'groups_get\', response)\n+        response = self.api_session.get("@groups/ploneteam")\n+        save_request_and_response_for_docs("groups_get", response)\n \n     def test_documentation_groups_filtered_get(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'@groups\', params={\'query\': \'plo\'})\n-        save_request_and_response_for_docs(\'groups_filtered_by_groupname\', response)  # noqa\n+        response = self.api_session.get("@groups", params={"query": "plo"})\n+        save_request_and_response_for_docs(\n+            "groups_filtered_by_groupname", response\n+        )  # noqa\n \n     def test_documentation_groups_created(self):\n         response = self.api_session.post(\n-            \'/@groups\',\n+            "/@groups",\n             json={\n-                \'groupname\': \'fwt\',\n-                \'email\': \'fwt@plone.org\',\n-                \'title\': \'Framework Team\',\n-                \'description\': \'The Plone Framework Team\',\n-                \'roles\': [\'Manager\'],\n-                \'groups\': [\'Administrators\'],\n-                \'users\': [SITE_OWNER_NAME, TEST_USER_ID]\n+                "groupname": "fwt",\n+                "email": "fwt@plone.org",\n+                "title": "Framework Team",\n+                "description": "The Plone Framework Team",\n+                "roles": ["Manager"],\n+                "groups": ["Administrators"],\n+                "users": [SITE_OWNER_NAME, TEST_USER_ID],\n             },\n         )\n-        save_request_and_response_for_docs(\'groups_created\', response)\n+        save_request_and_response_for_docs("groups_created", response)\n \n     def test_documentation_groups_update(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n         response = self.api_session.patch(\n-            \'/@groups/ploneteam\',\n-            json={\n-                \'email\': \'ploneteam2@plone.org\',\n-                \'users\': {TEST_USER_ID: False}\n-            },\n+            "/@groups/ploneteam",\n+            json={"email": "ploneteam2@plone.org", "users": {TEST_USER_ID: False}},\n         )\n-        save_request_and_response_for_docs(\'groups_update\', response)\n+        save_request_and_response_for_docs("groups_update", response)\n \n     def test_documentation_groups_delete(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n-        response = self.api_session.delete(\n-            \'/@groups/ploneteam\')\n-        save_request_and_response_for_docs(\'groups_delete\', response)\n+        response = self.api_session.delete("/@groups/ploneteam")\n+        save_request_and_response_for_docs("groups_delete", response)\n \n     def test_documentation_breadcrumbs(self):\n         response = self.api_session.get(\n-            \'{}/@breadcrumbs\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'breadcrumbs\', response)\n+            "{}/@breadcrumbs".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("breadcrumbs", response)\n \n     def test_documentation_navigation(self):\n         response = self.api_session.get(\n-            \'{}/@navigation\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'navigation\', response)\n+            "{}/@navigation".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("navigation", response)\n \n     def test_documentation_navigation_tree(self):\n         folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         subfolder1 = createContentInContainer(\n-            folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         createContentInContainer(\n-            folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n-        createContentInContainer(\n-            thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+        )\n         createContentInContainer(\n-            folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n+        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n         transaction.commit()\n \n         response = self.api_session.get(\n-            \'{}/@navigation\'.format(self.document.absolute_url()),\n-            params={\n-                "expand.navigation.depth": 4\n-            })\n-        save_request_and_response_for_docs(\'navigation_tree\', response)\n+            "{}/@navigation".format(self.document.absolute_url()),\n+            params={"expand.navigation.depth": 4},\n+        )\n+        save_request_and_response_for_docs("navigation_tree", response)\n \n     def test_documentation_principals(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n-        transaction.commit()\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "ploneteam"\n-            }\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n         )\n-        save_request_and_response_for_docs(\'principals\', response)\n+        transaction.commit()\n+        response = self.api_session.get("/@principals", params={"search": "ploneteam"})\n+        save_request_and_response_for_docs("principals", response)\n \n     def test_documentation_copy(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                \'source\': self.document.absolute_url(),\n-            },\n+            "/@copy", json={"source": self.document.absolute_url()}\n         )\n-        save_request_and_response_for_docs(\'copy\', response)\n+        save_request_and_response_for_docs("copy", response)\n \n     def test_documentation_copy_multiple(self):\n-        newsitem = self.portal[self.portal.invokeFactory(\n-            \'News Item\', id=\'newsitem\')]\n-        newsitem.title = \'My News Item\'\n+        newsitem = self.portal[self.portal.invokeFactory("News Item", id="newsitem")]\n+        newsitem.title = "My News Item"\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                \'source\': [\n-                    self.document.absolute_url(),\n-                    newsitem.absolute_url(),\n-                ],\n-            },\n+            "/@copy",\n+            json={"source": [self.document.absolute_url(), newsitem.absolute_url()]},\n         )\n-        save_request_and_response_for_docs(\'copy_multiple\', response)\n+        save_request_and_response_for_docs("copy_multiple", response)\n \n     def test_documentation_move(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/folder/@move\',\n-            json={\n-                \'source\': self.document.absolute_url(),\n-            },\n+            "/folder/@move", json={"source": self.document.absolute_url()}\n         )\n-        save_request_and_response_for_docs(\'move\', response)\n+        save_request_and_response_for_docs("move", response)\n \n     def test_documentation_vocabularies_all(self):\n-        response = self.api_session.get(\'/@vocabularies\')\n-        save_request_and_response_for_docs(\'vocabularies\', response)\n+        response = self.api_session.get("/@vocabularies")\n+        save_request_and_response_for_docs("vocabularies", response)\n \n     def test_documentation_vocabularies_get(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n-        save_request_and_response_for_docs(\'vocabularies_get\', response)\n+        save_request_and_response_for_docs("vocabularies_get", response)\n \n     def test_documentation_vocabularies_get_filtered_by_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'title=doc\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?" "title=doc"\n         )\n         save_request_and_response_for_docs(\n-            \'vocabularies_get_filtered_by_title\', response)\n+            "vocabularies_get_filtered_by_title", response\n+        )\n \n     def test_documentation_vocabularies_get_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'token=Document\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?"\n+            "token=Document"\n         )\n         save_request_and_response_for_docs(\n-            \'vocabularies_get_filtered_by_token\', response)\n+            "vocabularies_get_filtered_by_token", response\n+        )\n \n     def test_documentation_sharing_folder_get(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n-        response = self.api_session.get(\n-            \'/folder/@sharing\'\n-        )\n-        save_request_and_response_for_docs(\'sharing_folder_get\', response)\n+        response = self.api_session.get("/folder/@sharing")\n+        save_request_and_response_for_docs("sharing_folder_get", response)\n \n     def test_documentation_sharing_folder_post(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n         payload = {\n             "inherit": True,\n@@ -1160,73 +1063,62 @@ def test_documentation_sharing_folder_post(self):\n                         "Reviewer": True,\n                         "Editor": False,\n                         "Reader": True,\n-                        "Contributor": False\n+                        "Contributor": False,\n                     },\n-                    "type": "user"\n+                    "type": "user",\n                 }\n-            ]\n+            ],\n         }\n-        response = self.api_session.post(\n-            \'/folder/@sharing\',\n-            json=payload\n-        )\n-        save_request_and_response_for_docs(\'sharing_folder_post\', response)\n+        response = self.api_session.post("/folder/@sharing", json=payload)\n+        save_request_and_response_for_docs("sharing_folder_post", response)\n \n     def test_documentation_sharing_search(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'doc\')\n-        api.user.grant_roles(\'admin\', roles=[\'Contributor\'])\n-        api.user.grant_roles(\n-            \'admin\', roles=[\'Editor\'], obj=self.portal.folder\n-        )\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="doc")\n+        api.user.grant_roles("admin", roles=["Contributor"])\n+        api.user.grant_roles("admin", roles=["Editor"], obj=self.portal.folder)\n         transaction.commit()\n-        response = self.api_session.get(\n-            \'/folder/doc/@sharing?search=admin\'\n-        )\n-        save_request_and_response_for_docs(\'sharing_search\', response)\n+        response = self.api_session.get("/folder/doc/@sharing?search=admin")\n+        save_request_and_response_for_docs("sharing_search", response)\n \n     def test_documentation_expansion(self):\n-        response = self.api_session.get(\n-            \'/front-page\'\n-        )\n-        save_request_and_response_for_docs(\'expansion\', response)\n+        response = self.api_session.get("/front-page")\n+        save_request_and_response_for_docs("expansion", response)\n \n     def test_documentation_expansion_expanded(self):\n-        response = self.api_session.get(\n-            \'/front-page?expand=breadcrumbs\'\n-        )\n-        save_request_and_response_for_docs(\'expansion_expanded\', response)\n+        response = self.api_session.get("/front-page?expand=breadcrumbs")\n+        save_request_and_response_for_docs("expansion_expanded", response)\n \n     def test_documentation_expansion_expanded_full(self):\n         response = self.api_session.get(\n-            \'/front-page?expand=actions,breadcrumbs,navigation,schema,workflow\'\n+            "/front-page?expand=actions,breadcrumbs,navigation,schema,workflow"\n         )\n-        save_request_and_response_for_docs(\'expansion_expanded_full\', response)\n+        save_request_and_response_for_docs("expansion_expanded_full", response)\n \n     def test_history_get(self):\n-        self.document.setTitle(\'My new title\')\n-        url = \'{}/@history\'.format(self.document.absolute_url())\n+        self.document.setTitle("My new title")\n+        url = "{}/@history".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'history_get\', response)\n+        save_request_and_response_for_docs("history_get", response)\n \n     def test_history_revert(self):\n-        url = \'{}/@history\'.format(self.document.absolute_url())\n-        response = self.api_session.patch(url, json={\'version\': 0})\n-        save_request_and_response_for_docs(\'history_revert\', response)\n+        url = "{}/@history".format(self.document.absolute_url())\n+        response = self.api_session.patch(url, json={"version": 0})\n+        save_request_and_response_for_docs("history_revert", response)\n \n     def test_tusupload_options(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n-        response = self.api_session.options(\'/folder/@tus-upload\')\n-        save_request_and_response_for_docs(\'tusupload_options\', response)\n+        response = self.api_session.options("/folder/@tus-upload")\n+        save_request_and_response_for_docs("tusupload_options", response)\n \n     def test_tusupload_post_head_patch(self):\n         # We create both the POST and PATCH example here, because we need the\n         # temporary id\n \n-        def clean_upload_url(response, _id=\'032803b64ad746b3ab46d9223ea3d90f\'):\n-            pattern = r\'@tus-upload/(\\w+)\'\n-            repl = \'@tus-upload/\' + _id\n+        def clean_upload_url(response, _id="032803b64ad746b3ab46d9223ea3d90f"):\n+            pattern = r"@tus-upload/(\\w+)"\n+            repl = "@tus-upload/" + _id\n \n             # Replaces the dynamic part in the headers with a stable id\n             for target in [response, response.request]:\n@@ -1235,159 +1127,166 @@ def clean_upload_url(response, _id=\'032803b64ad746b3ab46d9223ea3d90f\'):\n \n                 target.url = re.sub(pattern, repl, target.url)\n \n-        def clean_final_url(response, _id=\'document-2016-10-21\'):\n-            url = self.portal.folder.absolute_url() + \'/\' + _id\n-            response.headers[\'Location\'] = url\n+        def clean_final_url(response, _id="document-2016-10-21"):\n+            url = self.portal.folder.absolute_url() + "/" + _id\n+            response.headers["Location"] = url\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n \n         # POST create an upload\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n-            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n+        metadata = "filename {},content-type {}".format(\n+            b64encode(UPLOAD_FILENAME).decode("utf-8"),\n+            b64encode(UPLOAD_MIMETYPE).decode("utf-8"),\n         )\n         response = self.api_session.post(\n-            \'/folder/@tus-upload\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            "/folder/@tus-upload",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n \n-        upload_url = response.headers[\'location\']\n+        upload_url = response.headers["location"]\n \n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_post\', response)\n+        save_request_and_response_for_docs("tusupload_post", response)\n \n         # PATCH upload a partial document\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=UPLOAD_DATA[:3]\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=UPLOAD_DATA[:3],\n         )\n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_patch\', response)\n+        save_request_and_response_for_docs("tusupload_patch", response)\n \n         # HEAD ask for much the server has\n-        response = self.api_session.head(\n-            upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\'}\n-        )\n+        response = self.api_session.head(upload_url, headers={"Tus-Resumable": "1.0.0"})\n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_head\', response)\n+        save_request_and_response_for_docs("tusupload_head", response)\n \n         # Finalize the upload\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': response.headers[\'Upload-Offset\']},\n-            data=UPLOAD_DATA[3:]\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": response.headers["Upload-Offset"],\n+            },\n+            data=UPLOAD_DATA[3:],\n         )\n         clean_upload_url(response)\n         clean_final_url(response)\n-        save_request_and_response_for_docs(\n-            \'tusupload_patch_finalized\',\n-            response\n-        )\n+        save_request_and_response_for_docs("tusupload_patch_finalized", response)\n \n     def test_tusreplace_post_patch(self):\n-        self.portal.invokeFactory(\'File\', id=\'myfile\')\n+        self.portal.invokeFactory("File", id="myfile")\n         transaction.commit()\n \n         # POST create an upload\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n-            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n+        metadata = "filename {},content-type {}".format(\n+            b64encode(UPLOAD_FILENAME).decode("utf-8"),\n+            b64encode(UPLOAD_MIMETYPE).decode("utf-8"),\n         )\n         response = self.api_session.post(\n-            \'/myfile/@tus-replace\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            "/myfile/@tus-replace",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n-        upload_url = response.headers[\'location\']\n+        upload_url = response.headers["location"]\n         # Replace dynamic uuid with a static one\n-        response.headers[\'location\'] = \'/\'.join(\n-            upload_url.split(\'/\')[:-1] + [\'4e465958b24a46ec8657e6f3be720991\'])\n-        save_request_and_response_for_docs(\'tusreplace_post\', response)\n+        response.headers["location"] = "/".join(\n+            upload_url.split("/")[:-1] + ["4e465958b24a46ec8657e6f3be720991"]\n+        )\n+        save_request_and_response_for_docs("tusreplace_post", response)\n \n         # PATCH upload file data\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n             data=UPLOAD_DATA,\n         )\n         # Replace dynamic uuid with a static one\n-        response.request.url = \'/\'.join(\n-            upload_url.split(\'/\')[:-1] + [\'4e465958b24a46ec8657e6f3be720991\'])\n-        save_request_and_response_for_docs(\'tusreplace_patch\', response)\n+        response.request.url = "/".join(\n+            upload_url.split("/")[:-1] + ["4e465958b24a46ec8657e6f3be720991"]\n+        )\n+        save_request_and_response_for_docs("tusreplace_patch", response)\n \n     def test_locking_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\'lock\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("lock", response)\n \n     def test_locking_lock_nonstealable_and_timeout(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(\n-            url,\n-            json={\n-                \'stealable\': False,\n-                \'timeout\': 3600,\n-            },\n+            url, json={"stealable": False, "timeout": 3600}\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\n-            \'lock_nonstealable_timeout\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("lock_nonstealable_timeout", response)\n \n     def test_locking_unlock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        url = \'{}/@unlock\'.format(self.document.absolute_url())\n+        url = "{}/@unlock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        save_request_and_response_for_docs(\'unlock\', response)\n+        save_request_and_response_for_docs("unlock", response)\n \n     def test_locking_refresh_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        url = \'{}/@refresh-lock\'.format(self.document.absolute_url())\n+        url = "{}/@refresh-lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\'refresh_lock\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("refresh_lock", response)\n \n     def test_locking_lockinfo(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'lock_get\', response)\n+        save_request_and_response_for_docs("lock_get", response)\n \n     def test_update_with_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        token = response.json()[\'token\']\n+        token = response.json()["token"]\n         response = self.api_session.patch(\n             self.document.absolute_url(),\n-            headers={\'Lock-Token\': token},\n-            json={\'title\': \'New Title\'})\n-        response.request.headers[\'Lock-Token\'] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n-        save_request_and_response_for_docs(\'lock_update\', response)\n+            headers={"Lock-Token": token},\n+            json={"title": "New Title"},\n+        )\n+        response.request.headers[\n+            "Lock-Token"\n+        ] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n+        save_request_and_response_for_docs("lock_update", response)\n \n \n class TestDocumentationMessageTranslations(unittest.TestCase):\n@@ -1395,24 +1294,24 @@ class TestDocumentationMessageTranslations(unittest.TestCase):\n     layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Register custom UUID generator to produce stable UUIDs during tests\n         pushGlobalRegistry(getSite())\n-        register_static_uuid_utility(prefix=\'SomeUUID\')\n+        register_static_uuid_utility(prefix="SomeUUID")\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n@@ -1420,27 +1319,27 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def create_document(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n     def tearDown(self):\n@@ -1449,26 +1348,24 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_translate_messages_types(self):\n-        response = self.api_session.get(\'/@types\')\n-        save_request_and_response_for_docs(\n-            \'translated_messages_types\', response)\n+        response = self.api_session.get("/@types")\n+        save_request_and_response_for_docs("translated_messages_types", response)\n \n     def test_translate_messages_types_folder(self):\n-        response = self.api_session.get(\'/@types/Folder\')\n-        save_request_and_response_for_docs(\n-            \'translated_messages_types_folder\', response)\n+        response = self.api_session.get("/@types/Folder")\n+        save_request_and_response_for_docs("translated_messages_types_folder", response)\n \n     def test_translate_messages_object_workflow(self):\n-        response = self.api_session.get(\n-            \'{}/@workflow\'.format(self.document.id))\n+        response = self.api_session.get("{}/@workflow".format(self.document.id))\n         save_request_and_response_for_docs(\n-            \'translated_messages_object_workflow\', response)\n+            "translated_messages_object_workflow", response\n+        )\n \n     def test_translate_messages_object_history(self):\n-        response = self.api_session.get(\n-            \'{}/@history\'.format(self.document.id))\n+        response = self.api_session.get("{}/@history".format(self.document.id))\n         save_request_and_response_for_docs(\n-            \'translated_messages_object_history\', response)\n+            "translated_messages_object_history", response\n+        )\n \n \n class TestCommenting(unittest.TestCase):\n@@ -1476,9 +1373,9 @@ class TestCommenting(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n@@ -1491,18 +1388,17 @@ def setUp(self):\n         settings.delete_own_comment_enabled = True\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document_with_comments()\n \n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def tearDown(self):\n@@ -1510,47 +1406,48 @@ def tearDown(self):\n         self.api_session.close()\n \n     def create_document_with_comments(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.allow_discussion = True\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n \n         # Add a bunch of comments to the default conversation so we can do\n         # batching\n         self.conversation = conversation = IConversation(document)\n         self.replies = replies = IReplies(conversation)\n         for x in range(1, 2):\n-            comment = createObject(\'plone.Comment\')\n-            comment.text = \'Comment %d\' % x\n+            comment = createObject("plone.Comment")\n+            comment.text = "Comment %d" % x\n             comment = replies[replies.addComment(comment)]\n \n             comment_replies = IReplies(comment)\n             for y in range(1, 2):\n-                comment = createObject(\'plone.Comment\')\n-                comment.text = \'Comment %d.%d\' % (x, y)\n+                comment = createObject("plone.Comment")\n+                comment.text = "Comment %d.%d" % (x, y)\n                 comment_replies.addComment(comment)\n         self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \n     @staticmethod\n-    def clean_comment_id(response, _id=\'123456\'):\n-        pattern = r\'@comments/(\\w+)\'\n-        pattern_bytes = b\'@comments/(\\\\w+)\'\n-        repl = \'@comments/\' + _id\n+    def clean_comment_id(response, _id="123456"):\n+        pattern = r"@comments/(\\w+)"\n+        pattern_bytes = b"@comments/(\\\\w+)"\n+        repl = "@comments/" + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n         for target in [response, response.request]:\n@@ -1561,136 +1458,106 @@ def clean_comment_id(response, _id=\'123456\'):\n \n         # and the body\n         if response.request.body:\n-            response.request.body = re.sub(\n-                pattern_bytes, repl, response.request.body\n-            )\n+            response.request.body = re.sub(pattern_bytes, repl, response.request.body)\n \n         # and the response\n         if response.content:\n             response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n-        url = \'{}/@comments\'.format(self.document.absolute_url())\n+        url = "{}/@comments".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'comments_get\', response)\n+        save_request_and_response_for_docs("comments_get", response)\n \n     def test_comments_add_root(self):\n-        url = \'{}/@comments/\'.format(\n-            self.document.absolute_url()\n-        )\n-        payload = {\'text\': \'My comment\'}\n+        url = "{}/@comments/".format(self.document.absolute_url())\n+        payload = {"text": "My comment"}\n         response = self.api_session.post(url, json=payload)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_add_root\', response\n-        )\n+        save_request_and_response_for_docs("comments_add_root", response)\n \n     def test_comments_add_sub(self):\n         # Add a reply\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n-        payload = {\'text\': \'My reply\'}\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        payload = {"text": "My reply"}\n         response = self.api_session.post(url, json=payload)\n \n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_add_sub\', response\n-        )\n+        save_request_and_response_for_docs("comments_add_sub", response)\n \n     def test_comments_update(self):\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n-        payload = {\'text\': \'My NEW comment\'}\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        payload = {"text": "My NEW comment"}\n         response = self.api_session.patch(url, json=payload)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_update\', response\n-        )\n+        save_request_and_response_for_docs("comments_update", response)\n \n     def test_comments_delete(self):\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n         response = self.api_session.delete(url)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_delete\', response\n-        )\n+        save_request_and_response_for_docs("comments_delete", response)\n \n     def test_roles_get(self):\n-        url = \'{}/@roles\'.format(self.portal_url)\n+        url = "{}/@roles".format(self.portal_url)\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'roles\', response)\n+        save_request_and_response_for_docs("roles", response)\n \n     def test_documentation_expansion(self):\n-        response = self.api_session.get(\n-            \'/front-page?expand=breadcrumbs,workflow\'\n-        )\n-        save_request_and_response_for_docs(\'expansion\', response)\n+        response = self.api_session.get("/front-page?expand=breadcrumbs,workflow")\n+        save_request_and_response_for_docs("expansion", response)\n \n-    @unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n     def test_controlpanels_get_listing(self):\n-        response = self.api_session.get(\n-            \'/@controlpanels\'\n-        )\n-        save_request_and_response_for_docs(\'controlpanels_get\', response)\n+        response = self.api_session.get("/@controlpanels")\n+        save_request_and_response_for_docs("controlpanels_get", response)\n \n-    @unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n     def test_controlpanels_get_item(self):\n-        response = self.api_session.get(\n-            \'/@controlpanels/editing\'\n-        )\n-        save_request_and_response_for_docs(\'controlpanels_get_item\', response)\n+        response = self.api_session.get("/@controlpanels/editing")\n+        save_request_and_response_for_docs("controlpanels_get_item", response)\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestPAMDocumentation(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        language_tool = api.portal.get_tool(\'portal_languages\')\n-        language_tool.addSupportedLanguage(\'en\')\n-        language_tool.addSupportedLanguage(\'es\')\n-        applyProfile(self.portal, \'plone.app.multilingual:default\')\n-        en_id = self.portal[\'en\'].invokeFactory(\n-            \'Document\',\n-            id=\'test-document\',\n-            title=\'Test document\'\n+        language_tool = api.portal.get_tool("portal_languages")\n+        language_tool.addSupportedLanguage("en")\n+        language_tool.addSupportedLanguage("es")\n+        applyProfile(self.portal, "plone.app.multilingual:default")\n+        en_id = self.portal["en"].invokeFactory(\n+            "Document", id="test-document", title="Test document"\n         )\n-        self.en_content = self.portal[\'en\'].get(en_id)\n-        es_id = self.portal[\'es\'].invokeFactory(\n-            \'Document\',\n-            id=\'test-document\',\n-            title=\'Test document\'\n+        self.en_content = self.portal["en"].get(en_id)\n+        es_id = self.portal["es"].invokeFactory(\n+            "Document", id="test-document", title="Test document"\n         )\n-        self.es_content = self.portal[\'es\'].get(es_id)\n+        self.es_content = self.portal["es"].get(es_id)\n \n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def tearDown(self):\n@@ -1699,29 +1566,25 @@ def tearDown(self):\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            json={\n-                \'id\': self.es_content.absolute_url()\n-            }\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.absolute_url()},\n         )\n-        save_request_and_response_for_docs(\'translations_post\', response)\n+        save_request_and_response_for_docs("translations_post", response)\n \n     def test_documentation_translations_get(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.get(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()))\n+            "{}/@translations".format(self.en_content.absolute_url())\n+        )\n \n-        save_request_and_response_for_docs(\'translations_get\', response)\n+        save_request_and_response_for_docs("translations_get", response)\n \n     def test_documentation_translations_delete(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            json={\n-                "language": "es"\n-            })\n-        save_request_and_response_for_docs(\'translations_delete\', response)\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"language": "es"},\n+        )\n+        save_request_and_response_for_docs("translations_delete", response)\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex b8def61d..223dbfdc 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -24,133 +24,128 @@ class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_textline_field=u\'Test Document\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_textline_field=u"Test Document",\n+            test_readonly_field=u"readonly",\n+        )\n \n         # ordering setup\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'Test folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="Test folder")\n+        ]\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "Document", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal.doc1\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n-            self.deserialize(body=\'Not a JSON object\')\n-        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n+            self.deserialize(body="Not a JSON object")\n+        self.assertEqual("No JSON object could be decoded", cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n-            self.deserialize(body=\'[1,2,3]\')\n-        self.assertEqual(\'Malformed body\', cm.exception.msg)\n+            self.deserialize(body="[1,2,3]")\n+        self.assertEqual("Malformed body", cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u"My Item", self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u"readonly", self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n+\n+        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertTrue(getattr(self.portal.doc1, \'_handler_called\', False),\n-                        \'IObjectEditedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.portal.doc1, "_handler_called", False),\n+            "IObjectEditedEvent not notified",\n+        )\n \n     def test_deserializer_modified_event_contains_descriptions(self):\n         def handler(obj, event):\n             self.event = event\n-        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n+\n+        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n         self.assertEqual(1, len(self.event.descriptions))\n         self.assertEqual(\n-            (\'IDXTestDocumentSchema.test_textline_field\',),\n-            self.event.descriptions[0].attributes)\n+            ("IDXTestDocumentSchema.test_textline_field",),\n+            self.event.descriptions[0].attributes,\n+        )\n \n     def test_deserializer_does_not_update_field_without_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n-        setRoles(self.portal,\n-                 TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n+        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor", "Editor"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n         self.assertEqual(\n-            u\'Test Write Permission\',\n-            self.portal.doc1.test_write_permission_field\n+            u"Test Write Permission", self.portal.doc1.test_write_permission_field\n         )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n+        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(\n-            u\'Foo\',\n-            self.portal.doc1.test_write_permission_field\n-        )\n+        self.assertEqual(u"Foo", self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n-                                  \' "test_invariant_field2": "Bar"}\')\n+            self.deserialize(\n+                body=\'{"test_invariant_field1": "Foo",\'\n+                \' "test_invariant_field2": "Bar"}\'\n+            )\n         self.assertEqual(\n-            u\'Must have same values\',\n-            str(cm.exception.args[0][0][\'message\'])\n+            u"Must have same values", str(cm.exception.args[0][0]["message"])\n         )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u"My Value", self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n-        self.deserialize(\n-            body=\'{"test_annotations_behavior_field": "My Value"}\')\n+        self.deserialize(body=\'{"test_annotations_behavior_field": "My Value"}\')\n         self.assertEqual(\n-            u\'My Value\',\n-            ITestAnnotationsBehavior(self.portal.doc1)\n-            .test_annotations_behavior_field)\n+            u"My Value",\n+            ITestAnnotationsBehavior(self.portal.doc1).test_annotations_behavior_field,\n+        )\n \n     def test_deserializer_raises_if_required_value_is_missing(self):\n         # Value missing from request\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"test_textline_field": "My Value"}\', validate_all=True\n+            )\n         self.assertEqual(\n-            u\'Required input is missing.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_textline_field": ""}\',\n-                             validate_all=True)\n+            self.deserialize(body=\'{"test_textline_field": ""}\', validate_all=True)\n         self.assertEqual(\n-            u\'Required input is missing.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n-        self.deserialize(body=\'{"test_required_field": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"My Value", self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -163,56 +158,45 @@ def test_deserializer_does_not_store_default_value(self):\n         # Right now, we want to have the same behavior in the API for\n         # consistency reasons.\n         self.deserialize(body=\'{"test_default_value_field": "Default"}\')\n-        self.assertNotIn(\'test_default_value_field\', dir(self.portal.doc1),\n-                         \'Default value unexpectedly stored.\')\n+        self.assertNotIn(\n+            "test_default_value_field",\n+            dir(self.portal.doc1),\n+            "Default value unexpectedly stored.",\n+        )\n \n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n-        self.deserialize(body=\'{"test_required_field": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(\n-            u\'Default\',\n-            self.portal.doc1.test_default_value_field\n-        )\n-        self.assertEqual(\n-            u\'DefaultFactory\',\n-            self.portal.doc1.test_default_factory_field\n-        )\n+        self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"Default", self.portal.doc1.test_default_value_field)\n+        self.assertEqual(u"DefaultFactory", self.portal.doc1.test_default_factory_field)\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEqual(\n-            u\'missing\',\n-            self.portal.doc1.test_missing_value_field\n-        )\n+        self.assertEqual(u"missing", self.portal.doc1.test_missing_value_field)\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n-        \'\'\'We don\'t set missing_value if the field is required\'\'\'\n-        self.deserialize(\n-            body=\'{"test_missing_value_required_field": "valid value"}\')\n+        """We don\'t set missing_value if the field is required"""\n+        self.deserialize(body=\'{"test_missing_value_required_field": "valid value"}\')\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(\n-                body=\'{"test_missing_value_required_field": null}\')\n+            self.deserialize(body=\'{"test_missing_value_required_field": null}\')\n         self.assertEqual(\n-            u\'valid value\',\n-            self.portal.doc1.test_missing_value_required_field\n+            u"valid value", self.portal.doc1.test_missing_value_required_field\n         )\n         self.assertEqual(\n             (\n-                \'test_missing_value_required_field is a required field.\',\n-                \'Setting it to null is not allowed.\'\n+                "test_missing_value_required_field is a required field.",\n+                "Setting it to null is not allowed.",\n             ),\n-            cm.exception.args[0][0][\'message\']\n+            cm.exception.args[0][0]["message"],\n         )\n         self.assertEqual(\n-            u\'test_missing_value_required_field\',\n-            cm.exception.args[0][0][\'field\']\n+            u"test_missing_value_required_field", cm.exception.args[0][0]["field"]\n         )\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual("my_new_layout", self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -220,45 +204,45 @@ class TestDXContentSerializerDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_textline_field=u\'Test Document\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_textline_field=u"Test Document",\n+            test_readonly_field=u"readonly",\n+        )\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc2\',\n-            test_textline_field=u\'Test Document 2\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_textline_field=u"Test Document 2",\n+            test_readonly_field=u"readonly",\n+        )\n \n     def deserialize(self, field, value, validate_all=False, context=None):\n         context = context or self.portal.doc1\n         body = {}\n         body[field] = value\n         body = json.dumps(body)\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def serialize(self, field):\n-        serializer = getMultiAdapter((self.portal.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n         value = six.text_type(self.portal.doc2.UID())\n-        self.deserialize(\'test_relationchoice_field\', value)\n+        self.deserialize("test_relationchoice_field", value)\n \n-        serialization_value = self.serialize(\'test_relationchoice_field\')\n+        serialization_value = self.serialize("test_relationchoice_field")\n \n-        self.deserialize(\'test_relationchoice_field\', serialization_value)\n+        self.deserialize("test_relationchoice_field", serialization_value)\n \n         self.assertEqual(\n-            serialization_value[\'@id\'],\n-            self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n+            serialization_value["@id"],\n+            self.portal.doc1.test_relationchoice_field.to_object.absolute_url(),\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 7f393977..7382ba83 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -30,6 +30,7 @@\n class AdapterCM(object):\n     """Context manager that will temporarily register an adapter\n     """\n+\n     def __init__(self, adapter, from_, provides):\n         self.adapter = adapter\n         self.from_ = from_\n@@ -48,145 +49,140 @@ class TestDXContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        richtext_value = RichTextValue(\n-            u\'K\xc3\xa4fer\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        richtext_value = RichTextValue(u"K\xc3\xa4fer", "text/plain", "text/html")\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_ascii_field=\'foo\',\n-            test_asciiline_field=\'foo\',\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_ascii_field="foo",\n+            test_asciiline_field="foo",\n             test_bool_field=True,\n-            test_bytes_field=\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\',\n-            test_bytesline_field=\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\',\n-            test_choice_field=u\'foo\',\n+            test_bytes_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n+            test_bytesline_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n+            test_choice_field=u"foo",\n             test_date_field=date(2015, 7, 15),\n             test_datetime_field=datetime(2015, 6, 20, 13, 22, 4),\n-            test_decimal_field=\'1.1\',\n-            test_dict_field={\'foo\': \'bar\', \'spam\': \'eggs\', \'1\': 1},\n+            test_decimal_field="1.1",\n+            test_dict_field={"foo": "bar", "spam": "eggs", "1": 1},\n             test_float_field=1.5,\n             test_frozenset_field=frozenset([1, 2, 3]),\n             test_int_field=500,\n-            test_list_field=[1, \'two\', 3],\n-            test_set_field=set([\'a\', \'b\', \'c\']),\n-            test_text_field=u\'K\xc3\xa4fer\',\n+            test_list_field=[1, "two", 3],\n+            test_set_field=set(["a", "b", "c"]),\n+            test_text_field=u"K\xc3\xa4fer",\n             test_richtext_field=richtext_value,\n-            test_textline_field=u\'K\xc3\xa4fer\',\n+            test_textline_field=u"K\xc3\xa4fer",\n             test_time_field=time(14, 15, 33),\n             test_timedelta_field=timedelta(44),\n             test_tuple_field=(1, 1),\n-            test_readonly_field=u\'readonly\',\n-            test_read_permission_field=u\'Secret Stuff\')\n+            test_readonly_field=u"readonly",\n+            test_read_permission_field=u"Secret Stuff",\n+        )\n \n-        self.portal.doc1.creation_date = DateTime(\'2015-04-27T10:14:48+00:00\')\n-        self.portal.doc1.modification_date = DateTime(\n-            \'2015-04-27T10:24:11+00:00\')\n-        IMutableUUID(self.portal.doc1).set(\'30314724b77a4ec0abbad03d262837aa\')\n+        self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n+        self.portal.doc1.modification_date = DateTime("2015-04-27T10:24:11+00:00")\n+        IMutableUUID(self.portal.doc1).set("30314724b77a4ec0abbad03d262837aa")\n \n     def serialize(self):\n-        serializer = getMultiAdapter((self.portal.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize()\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n-    @unittest.skip(\'We do not include the context at this point\')\n+    @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@context\', obj)\n-        self.assertEqual(u\'http://www.w3.org/ns/hydra/context.jsonld\',\n-                         obj[u\'@context\'])\n+        self.assertIn(u"@context", obj)\n+        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@id\', obj)\n-        self.assertEqual(self.portal.doc1.absolute_url(), obj[u\'@id\'])\n+        self.assertIn(u"@id", obj)\n+        self.assertEqual(self.portal.doc1.absolute_url(), obj[u"@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize()\n-        self.assertIn(u\'id\', obj)\n-        self.assertEqual(self.portal.doc1.id, obj[u\'id\'])\n+        self.assertIn(u"id", obj)\n+        self.assertEqual(self.portal.doc1.id, obj[u"id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@type\', obj)\n-        self.assertEqual(self.portal.doc1.portal_type, obj[u\'@type\'])\n+        self.assertIn(u"@type", obj)\n+        self.assertEqual(self.portal.doc1.portal_type, obj[u"@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize()\n-        self.assertIn(u\'review_state\', obj)\n-        self.assertEqual(u\'private\', obj[u\'review_state\'])\n+        self.assertIn(u"review_state", obj)\n+        self.assertEqual(u"private", obj[u"review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize()\n-        self.assertIn(u\'UID\', obj)\n-        self.assertEqual(u\'30314724b77a4ec0abbad03d262837aa\', obj[u\'UID\'])\n+        self.assertIn(u"UID", obj)\n+        self.assertEqual(u"30314724b77a4ec0abbad03d262837aa", obj[u"UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize()\n-        self.assertIn(u\'created\', obj)\n-        self.assertEqual(u\'2015-04-27T10:14:48+00:00\', obj[u\'created\'])\n+        self.assertIn(u"created", obj)\n+        self.assertEqual(u"2015-04-27T10:14:48+00:00", obj[u"created"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize()\n-        self.assertIn(u\'modified\', obj)\n-        self.assertEqual(u\'2015-04-27T10:24:11+00:00\', obj[u\'modified\'])\n+        self.assertIn(u"modified", obj)\n+        self.assertEqual(u"2015-04-27T10:24:11+00:00", obj[u"modified"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.portal.doc1.test_read_permission_field = u\'Secret Stuff\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'test_read_permission_field\', self.serialize())\n+        self.portal.doc1.test_read_permission_field = u"Secret Stuff"\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"test_read_permission_field", self.serialize())\n \n     def test_serializer_includes_field_with_read_permission(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         obj = self.serialize()\n-        self.assertIn(u\'test_read_permission_field\', obj)\n-        self.assertEqual(u\'Secret Stuff\', obj[u\'test_read_permission_field\'])\n+        self.assertIn(u"test_read_permission_field", obj)\n+        self.assertEqual(u"Secret Stuff", obj[u"test_read_permission_field"])\n \n     def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n-        self.assertIn(\'layout\', obj)\n-        self.assertEqual(current_layout, obj[\'layout\'])\n+        self.assertIn("layout", obj)\n+        self.assertEqual(current_layout, obj["layout"])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         obj = self.serialize()\n-        self.assertIn(\'foo\', obj[\'@components\'])\n-        self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        self.assertIn("foo", obj["@components"])\n+        self.assertEqual("collapsed", obj["@components"]["foo"])\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(False, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(False, obj["is_folderish"])\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n-        serializer = getMultiAdapter((self.portal.folder, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Folder", id=u"folder")\n+        serializer = getMultiAdapter(\n+            (self.portal.folder, self.request), ISerializeToJson\n+        )\n         obj = serializer()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -199,159 +195,157 @@ class RichtextTransform(object):\n             """RichttextValue to show that the context is correctly passed\n                in throughout the stack.\n             """\n+\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, value, mime_type):\n                 return self.context.portal_type\n \n-        with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n+        with AdapterCM(RichtextTransform, (Interface,), ITransformer):\n             obj = self.serialize()\n \n         self.assertEqual(\n-            obj[\'test_richtext_field\'][\'data\'],\n-            self.portal.doc1.portal_type\n+            obj["test_richtext_field"]["data"], self.portal.doc1.portal_type\n         )\n \n     def test_allow_discussion_by_default(self):\n         """ Not globally addable, not fti enabled, not obj instance enabled """\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Document", id=u"doc2")\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         self.portal.doc2.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n         self.portal.doc2.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n         self.portal.doc2.allow_discussion = False\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = False\n         self.portal.doc2.allow_discussion = True\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n+    def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(\n+        self\n+    ):  # noqa\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n \n         obj = self.serialize()\n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d493b6a4..29740455 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -25,6 +25,7 @@\n class RequiredField(object):\n     """Context manager that will make a field required and back to old state.\n     """\n+\n     def __init__(self, field):\n         self.field = field\n         self.old_state = field.required\n@@ -41,488 +42,520 @@ class TestDXFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\', title=\'Test Document\')\n+        self.portal.invokeFactory("DXTestDocument", id="doc1", title="Test Document")\n \n     def deserialize(self, fieldname, value):\n         for schema in iterSchemata(self.portal.doc1):\n             if fieldname in schema:\n                 field = schema.get(fieldname)\n                 break\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n         return deserializer(value)\n \n     def test_ascii_deserialization_returns_native_string(self):\n-        value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        value = self.deserialize("test_ascii_field", u"Foo")\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Foo", value)\n \n     def test_asciiline_deserialization_returns_native_string(self):\n-        value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        value = self.deserialize("test_asciiline_field", u"Foo")\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Foo", value)\n \n     def test_bool_deserialization_returns_true(self):\n-        value = self.deserialize(\'test_bool_field\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.deserialize("test_bool_field", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_bool_deserialization_returns_false(self):\n-        value = self.deserialize(\'test_bool_field\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.deserialize("test_bool_field", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_bytes_deserialization_returns_bytestring(self):\n-        value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n-        self.assertEqual(b\'Foo\', value)\n+        value = self.deserialize("test_bytes_field", u"Foo")\n+        self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n+        self.assertEqual(b"Foo", value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n-        value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n-        self.assertEqual(b\'Foo\', value)\n+        value = self.deserialize("test_bytesline_field", u"Foo")\n+        self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n+        self.assertEqual(b"Foo", value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n-        value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'bar\', value)\n+        value = self.deserialize("test_choice_field", u"bar")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"bar", value)\n \n     def test_choice_deserialization_from_token_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 u\'token1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", u"token1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 u\'value1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", u"value1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 {u\'token\': u\'token1\', u\'title\': u\'title1\'})\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize(\n+            "test_choice_field_with_vocabulary",\n+            {u"token": u"token1", u"title": u"title1"},\n+        )\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_date_deserialization_returns_date(self):\n-        value = self.deserialize(\'test_date_field\', u\'2015-12-20\')\n+        value = self.deserialize("test_date_field", u"2015-12-20")\n         self.assertTrue(isinstance(value, date))\n         self.assertEqual(date(2015, 12, 20), value)\n \n     def test_datetime_deserialization_returns_datetime(self):\n-        value = self.deserialize(\'test_datetime_field\',\n-                                 u\'2015-12-20T10:39:54.361Z\')\n-        self.assertTrue(isinstance(value, datetime), \'Not a <datetime>\')\n+        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361Z")\n+        self.assertTrue(isinstance(value, datetime), "Not a <datetime>")\n         self.assertEqual(datetime(2015, 12, 20, 10, 39, 54, 361000), value)\n \n     def test_datetime_deserialization_handles_timezone(self):\n-        value = self.deserialize(\'test_datetime_field\',\n-                                 u\'2015-12-20T10:39:54.361+01\')\n+        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361+01")\n         self.assertEqual(datetime(2015, 12, 20, 9, 39, 54, 361000), value)\n \n     def test_datetime_with_tz_deserialization_keeps_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361+01\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 10, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-12-20T10:39:54.361+01"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 10, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_converts_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361-04\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 15, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-12-20T10:39:54.361-04"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 15, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_adds_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 11, 39, 54, 361000)), value)\n+        value = self.deserialize("test_datetime_tz_field", u"2015-12-20T10:39:54.361")\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 11, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_handles_dst(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-05-20T10:39:54.361+02\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-05-20T10:39:54.361+02"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 5, 20, 10, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\n-        value = self.deserialize(\'test_datetime_field\', None)\n+        value = self.deserialize("test_datetime_field", None)\n         self.assertEqual(value, None)\n \n     def test_datetime_deserialization_required(self):\n-        field_name = \'test_datetime_field\'\n+        field_name = "test_datetime_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_decimal_deserialization_returns_decimal(self):\n-        value = self.deserialize(\'test_decimal_field\', u\'1.1\')\n-        self.assertTrue(isinstance(value, Decimal), \'Not a <Decimal>\')\n-        self.assertEqual(Decimal(\'1.1\'), value)\n+        value = self.deserialize("test_decimal_field", u"1.1")\n+        self.assertTrue(isinstance(value, Decimal), "Not a <Decimal>")\n+        self.assertEqual(Decimal("1.1"), value)\n \n     def test_dict_deserialization_returns_dict(self):\n-        value = self.deserialize(\'test_dict_field\', {u\'key\': u\'value\'})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({u\'key\': u\'value\'}, value)\n+        value = self.deserialize("test_dict_field", {u"key": u"value"})\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual({u"key": u"value"}, value)\n \n     def test_float_deserialization_returns_float(self):\n-        value = self.deserialize(\'test_float_field\', 1.0)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.deserialize("test_float_field", 1.0)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.0, value)\n \n     def test_frozenset_deserialization_returns_frozenset(self):\n-        value = self.deserialize(\'test_frozenset_field\', [u\'foo\', u\'bar\'])\n-        self.assertTrue(isinstance(value, frozenset), \'Not a <frozenset>\')\n-        self.assertEqual(frozenset([u\'foo\', u\'bar\']), value)\n+        value = self.deserialize("test_frozenset_field", [u"foo", u"bar"])\n+        self.assertTrue(isinstance(value, frozenset), "Not a <frozenset>")\n+        self.assertEqual(frozenset([u"foo", u"bar"]), value)\n \n     def test_int_deserialization_returns_int(self):\n-        value = self.deserialize(\'test_int_field\', 22)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.deserialize("test_int_field", 22)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(22, value)\n \n     def test_list_deserialization_returns_list(self):\n-        value = self.deserialize(\'test_list_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.deserialize("test_list_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual([1, 2, 3], value)\n \n     def test_list_deserialization_from_tokens_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [u\'token1\', u\'token3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"token1", u"token3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_list_deserialization_from_values_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [u\'value1\', u\'value3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_list_deserialization_from_terms_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [{u\'token\': u\'token1\', u\'title\': u\'title1\'},\n-                                  {u\'token\': u\'token3\', u\'title\': u\'title3\'}])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary",\n+            [\n+                {u"token": u"token1", u"title": u"title1"},\n+                {u"token": u"token3", u"title": u"title3"},\n+            ],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_set_deserialization_returns_set(self):\n-        value = self.deserialize(\'test_set_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, set), \'Not a <set>\')\n+        value = self.deserialize("test_set_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, set), "Not a <set>")\n         self.assertEqual(set([1, 2, 3]), value)\n \n     def test_text_deserialization_returns_unicode(self):\n-        value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'Foo\', value)\n+        value = self.deserialize("test_text_field", u"Foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"Foo", value)\n \n     def test_textline_deserialization_returns_unicode(self):\n-        value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'Foo\', value)\n+        value = self.deserialize("test_textline_field", u"Foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"Foo", value)\n \n     def test_time_deserialization_returns_time(self):\n-        value = self.deserialize(\'test_time_field\', u\'10:39:54.361Z\')\n-        self.assertTrue(isinstance(value, time), \'Not a <time>\')\n+        value = self.deserialize("test_time_field", u"10:39:54.361Z")\n+        self.assertTrue(isinstance(value, time), "Not a <time>")\n         self.assertEqual(time(10, 39, 54, 361000), value)\n \n     def test_timedelta_deserialization_returns_timedela(self):\n-        value = self.deserialize(\'test_timedelta_field\', 3600.0)\n-        self.assertTrue(isinstance(value, timedelta), \'Not a <timedelta>\')\n+        value = self.deserialize("test_timedelta_field", 3600.0)\n+        self.assertTrue(isinstance(value, timedelta), "Not a <timedelta>")\n         self.assertEqual(timedelta(seconds=3600), value)\n \n     def test_tuple_deserialization_returns_tuple(self):\n-        value = self.deserialize(\'test_tuple_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, tuple), \'Not a <tuple>\')\n+        value = self.deserialize("test_tuple_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, tuple), "Not a <tuple>")\n         self.assertEqual((1, 2, 3), value)\n \n     def test_nested_list_deserialization_returns_nested_list(self):\n-        value = self.deserialize(\'test_nested_list_field\',\n-                                 [[1, u\'foo\'], [2, u\'bar\']])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertTrue(isinstance(value[0], tuple), \'Not a <tuple>\')\n-        self.assertTrue(isinstance(value[1], tuple), \'Not a <tuple>\')\n+        value = self.deserialize("test_nested_list_field", [[1, u"foo"], [2, u"bar"]])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertTrue(isinstance(value[0], tuple), "Not a <tuple>")\n+        self.assertTrue(isinstance(value[1], tuple), "Not a <tuple>")\n \n     def test_nested_dict_deserialization_returns_nested_dict(self):\n         value = self.deserialize(\n-            \'test_nested_dict_field\',\n-            {u\'1\': [u\'foo\', u\'bar\'], u\'2\': [u\'spam\', u\'eggs\']})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertIn(\'1\', value)\n-        self.assertTrue(isinstance(value[\'1\'], tuple), \'Not a <tuple>\')\n-        self.assertIn(\'2\', value)\n-        self.assertTrue(isinstance(value[\'2\'], tuple), \'Not a <tuple>\')\n+            "test_nested_dict_field", {u"1": [u"foo", u"bar"], u"2": [u"spam", u"eggs"]}\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertIn("1", value)\n+        self.assertTrue(isinstance(value["1"], tuple), "Not a <tuple>")\n+        self.assertIn("2", value)\n+        self.assertTrue(isinstance(value["2"], tuple), "Not a <tuple>")\n \n     def test_richtext_deserialization_from_unicode_returns_richtext(self):\n-        value = self.deserialize(\'test_richtext_field\', u\'<p>a paragraph</p>\')\n-        self.assertTrue(isinstance(value, RichTextValue),\n-                        \'Not a <RichTextValue>\')\n-        self.assertEqual(u\'<p>a paragraph</p>\', value.raw)\n+        value = self.deserialize("test_richtext_field", u"<p>a paragraph</p>")\n+        self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n+        self.assertEqual(u"<p>a paragraph</p>", value.raw)\n \n     def test_richtext_deserialization_from_dict_returns_richtext(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-        })\n-        self.assertTrue(isinstance(value, RichTextValue),\n-                        \'Not a <RichTextValue>\')\n-        self.assertEqual(u\'Some text\', value.raw)\n+        value = self.deserialize("test_richtext_field", {u"data": u"Some text"})\n+        self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n+        self.assertEqual(u"Some text", value.raw)\n \n     def test_richtext_deserialization_sets_mime_type(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n-        self.assertEqual(\'text/plain\', value.mimeType)\n+        value = self.deserialize(\n+            "test_richtext_field",\n+            {u"data": u"Some text", u"content-type": u"text/plain"},\n+        )\n+        self.assertEqual("text/plain", value.mimeType)\n \n     def test_richtext_deserialization_sets_encoding(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-            u\'encoding\': u\'latin1\',\n-        })\n-        self.assertEqual(\'latin1\', value.encoding)\n+        value = self.deserialize(\n+            "test_richtext_field", {u"data": u"Some text", u"encoding": u"latin1"}\n+        )\n+        self.assertEqual("latin1", value.encoding)\n \n     def test_namedfield_deserialization_decodes_value(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n-            u\'encoding\': u\'base64\',\n-        })\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"},\n+        )\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n-        self.assertEqual(\'text/plain\', value.contentType)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+        )\n+        self.assertEqual("text/plain", value.contentType)\n \n     def test_namedfield_deserialization_sets_filename(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': u\'doc.txt\',\n-        })\n-        self.assertEqual(\'doc.txt\', value.filename)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"Spam and eggs!", u"filename": u"doc.txt"},\n+        )\n+        self.assertEqual("doc.txt", value.filename)\n \n     def test_namedfile_deserialization_returns_namedfile(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedFile),\n-                        \'Not a <NamedFile>\')\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize("test_namedfile_field", {u"data": u"Spam and eggs!"})\n+        self.assertTrue(isinstance(value, namedfile.NamedFile), "Not a <NamedFile>")\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n-        value = self.deserialize(\'test_namedimage_field\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'content-type\': u\'image/gif\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedImage),\n-                        \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n+        value = self.deserialize(\n+            "test_namedimage_field",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"content-type": u"image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, namedfile.NamedImage), "Not a <NamedImage>")\n+        self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n-        value = self.deserialize(\'test_namedblobfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n-                        \'Not a <NamedBlobFile>\')\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize(\n+            "test_namedblobfile_field", {u"data": u"Spam and eggs!"}\n+        )\n+        self.assertTrue(\n+            isinstance(value, namedfile.NamedBlobFile), "Not a <NamedBlobFile>"\n+        )\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n-        value = self.deserialize(\'test_namedblobimage_field\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'content-type\': u\'image/gif\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n-                        \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n+        value = self.deserialize(\n+            "test_namedblobimage_field",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"content-type": u"image/gif",\n+            },\n+        )\n+        self.assertTrue(\n+            isinstance(value, namedfile.NamedBlobImage), "Not a <NamedBlobImage>"\n+        )\n+        self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n-        value = self.deserialize(\'test_namedblobimage_field\', None)\n+        value = self.deserialize("test_namedblobimage_field", None)\n         self.assertFalse(value)\n \n     def test_namedblobfile_deserialization_fed_with_null_removes_file(self):\n         # null in json translates to None in python.\n-        value = self.deserialize(\'test_namedblobfile_field\', None)\n+        value = self.deserialize("test_namedblobfile_field", None)\n         self.assertFalse(value)\n \n     def test_namedblobfile_deserialize_required(self):\n-        field_name = \'test_namedblobfile_field\'\n+        field_name = "test_namedblobfile_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_namedblobimage_deserialize_required(self):\n-        field_name = \'test_namedblobimage_field\'\n+        field_name = "test_namedblobimage_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_relationchoice_deserialization_from_uid_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\',\n-                                 six.text_type(doc2.UID()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize("test_relationchoice_field", six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\',\n-                                 six.text_type(doc2.absolute_url()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize(\n+            "test_relationchoice_field", six.text_type(doc2.absolute_url())\n+        )\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\', u\'/doc2\')\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize("test_relationchoice_field", u"/doc2")\n         self.assertEqual(doc2, value)\n \n     def test_relationlist_deserialization_returns_list_of_documents(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n         value = self.deserialize(\n-            \'test_relationlist_field\',\n-            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+            "test_relationlist_field",\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n \n     def test_default_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize(\'test_maxlength_field\', u\'01234567890\')\n+            self.deserialize("test_maxlength_field", u"01234567890")\n \n     def test_datetime_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_datetime_field\',\n-                             u\'2015-15-15T10:39:54.361Z\')\n-        self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         str(cm.exception))\n+            self.deserialize("test_datetime_field", u"2015-15-15T10:39:54.361Z")\n+        self.assertEqual(u"Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize(\'test_datetime_min_field\',\n-                             u\'1999-12-20T10:39:54.361Z\')\n+            self.deserialize("test_datetime_min_field", u"1999-12-20T10:39:54.361Z")\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n+            self.deserialize("test_list_value_type_field", [1, b"2", 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n+        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual((b"2", six.integer_types, ""), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_dict_key_type_field\', {\'k\': \'v\'})\n+            self.deserialize("test_dict_key_type_field", {"k": "v"})\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n         # We check for two sets of exception details\n         # because zope.schema changed its exception...\n-        self.assertIn(cm.exception.doc(), (\n-            u\'Object is of wrong type.\',\n-            u\'Invalid int literal.\',\n-        ))\n-        self.assertIn(cm.exception.args, (\n-            (\'k\', six.integer_types, \'\'),\n-            ("invalid literal for int() with base 10: \'k\'",),\n-        ))\n+        self.assertIn(\n+            cm.exception.doc(), (u"Object is of wrong type.", u"Invalid int literal.")\n+        )\n+        self.assertIn(\n+            cm.exception.args,\n+            (\n+                ("k", six.integer_types, ""),\n+                ("invalid literal for int() with base 10: \'k\'",),\n+            ),\n+        )\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_time_field\',\n-                             u\'midnight\')\n-        self.assertEqual(u\'Invalid time: midnight\',\n-                         str(cm.exception))\n+            self.deserialize("test_time_field", u"midnight")\n+        self.assertEqual(u"Invalid time: midnight", str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_time_min_field\', u\'00:39:54.361Z\')\n-        self.assertEqual(u\'Value is too small\',\n-                         cm.exception.doc())\n+            self.deserialize("test_time_min_field", u"00:39:54.361Z")\n+        self.assertEqual(u"Value is too small", cm.exception.doc())\n \n     def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_timedelta_field\',\n-                             u\'2h\')\n+            self.deserialize("test_timedelta_field", u"2h")\n         self.assertIn(\n-            u\'unsupported type for timedelta seconds component:\',\n-            str(cm.exception))\n+            u"unsupported type for timedelta seconds component:", str(cm.exception)\n+        )\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_timedelta_min_field\', 50)\n-        self.assertEqual(u\'Value is too small\',\n-                         cm.exception.doc())\n+            self.deserialize("test_timedelta_min_field", 50)\n+        self.assertEqual(u"Value is too small", cm.exception.doc())\n \n     def test_namedfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_namedimage_field\', {\n-                u\'data\': u\'Spam and eggs!\',\n-                u\'content-type\': u\'text/plain\',\n-            })\n-        self.assertEqual(u\'Invalid image file\', cm.exception.doc())\n+            self.deserialize(\n+                "test_namedimage_field",\n+                {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+            )\n+        self.assertEqual(u"Invalid image file", cm.exception.doc())\n \n     def test_namedfield_deserializer_download(self):\n         # Handle when we post back the GET results.\n         # This then has a \'download\' key, and not a \'data\' key.\n \n-        self.deserialize(\'test_namedfile_field\', {\n-            u\'download\': u\'some download link\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n+        self.deserialize(\n+            "test_namedfile_field",\n+            {u"download": u"some download link", u"content-type": u"text/plain"},\n+        )\n \n     def test_richtextfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_richtext_field\', {\n-                u\'data\': u\'Spam and eggs!\',\n-                u\'content-type\': u\'text/xml\',\n-            })\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n+            self.deserialize(\n+                "test_richtext_field",\n+                {u"data": u"Spam and eggs!", u"content-type": u"text/xml"},\n+            )\n+        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n \n     def test_relationchoicefield_deserializer_validates_value(self):\n-        self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n+        self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_relationchoice_field\', u\'/doc3\')\n-        self.assertEqual(u\'Constraint not satisfied\', cm.exception.doc())\n+            self.deserialize("test_relationchoice_field", u"/doc3")\n+        self.assertEqual(u"Constraint not satisfied", cm.exception.doc())\n \n     def test_deserialize_with_context_bound_vocabulary(self):\n         value = self.deserialize(\n-            \'test_list_choice_with_context_vocabulary_field\',\n-            [u\'portal_catalog\'])\n-        self.assertEqual([u\'portal_catalog\'], value)\n+            "test_list_choice_with_context_vocabulary_field", [u"portal_catalog"]\n+        )\n+        self.assertEqual([u"portal_catalog"], value)\n \n     def test_textline_deserializer_strips_value(self):\n-        value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEqual(value, \'aa\')\n+        value = self.deserialize("test_textline_field", u"  aa  ")\n+        self.assertEqual(value, "aa")\n \n     def test_default_field_deserializer_validates_value(self):\n-\n         class CustomIntField(Field):\n-\n             def constraint(self, value):\n                 if not isinstance(value, int):\n                     raise ConstraintNotSatisfied\n                 return True\n \n         field = CustomIntField()\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n \n         with self.assertRaises(ConstraintNotSatisfied):\n             deserializer(b"not an int")\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 39da5413..04edd751 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -23,10 +23,10 @@\n import os\n import six\n \n-if PLONE_VERSION.base_version >= \'5.1\':\n-    GIF_SCALE_FORMAT = \'png\'\n+if PLONE_VERSION.base_version >= "5.1":\n+    GIF_SCALE_FORMAT = "png"\n else:\n-    GIF_SCALE_FORMAT = \'jpeg\'\n+    GIF_SCALE_FORMAT = "jpeg"\n \n \n class TestDexterityFieldSerializing(TestCase):\n@@ -34,363 +34,352 @@ class TestDexterityFieldSerializing(TestCase):\n     maxDiff = None\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=\'doc1\',\n-            title=\'Test Document\'\n-        )]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n     def serialize(self, fieldname, value):\n         for schema in iterSchemata(self.doc1):\n             if fieldname in schema:\n                 field = schema.get(fieldname)\n                 break\n-        dm = getMultiAdapter(\n-            (self.doc1, field),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((self.doc1, field), IDataManager)\n         dm.set(value)\n-        serializer = getMultiAdapter(\n-            (field, self.doc1, self.request),\n-            IFieldSerializer\n-        )\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n         return serializer()\n \n     def test_ascii_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        value = self.serialize("test_ascii_field", "foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"foo", value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        value = self.serialize("test_asciiline_field", "foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"foo", value)\n \n     def test_bool_field_serialization_returns_true(self):\n-        value = self.serialize(\'test_bool_field\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("test_bool_field", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_bool_field_serialization_returns_false(self):\n-        value = self.serialize(\'test_bool_field\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("test_bool_field", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n+        value = self.serialize("test_bytes_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytesline_field\',\n-                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n+        value = self.serialize("test_bytesline_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n \n     def test_choice_field_serialization_returns_vocabulary_term(self):\n-        value = self.serialize(\'test_choice_field\', u\'foo\')\n+        value = self.serialize("test_choice_field", u"foo")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u\'token\': u\'foo\', u\'title\': None}, value)\n+        self.assertEqual({u"token": u"foo", u"title": None}, value)\n \n-    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(self):  # noqa\n-        value = self.serialize(\'test_choice_field_with_vocabulary\', u\'value1\')\n+    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(\n+        self\n+    ):  # noqa\n+        value = self.serialize("test_choice_field_with_vocabulary", u"value1")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u\'token\': u\'token1\', u\'title\': u\'title1\'}, value)\n+        self.assertEqual({u"token": u"token1", u"title": u"title1"}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2015-07-15\', value)\n+        value = self.serialize("test_date_field", date(2015, 7, 15))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2015-07-15", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_datetime_field\',\n-                               datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2015-06-20T13:22:04\', value)\n+        value = self.serialize("test_datetime_field", datetime(2015, 6, 20, 13, 22, 4))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2015-06-20T13:22:04", value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'1.1\', value)\n+        value = self.serialize("test_decimal_field", "1.1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"1.1", value)\n \n     def test_dict_field_serialization_returns_dict(self):\n-        value = self.serialize(\'test_dict_field\',\n-                               {\'foo\': \'bar\', \'spam\': \'eggs\', \'1\': 1})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({u\'foo\': u\'bar\', u\'spam\': u\'eggs\', u\'1\': 1}, value)\n+        value = self.serialize(\n+            "test_dict_field", {"foo": "bar", "spam": "eggs", "1": 1}\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual({u"foo": u"bar", u"spam": u"eggs", u"1": 1}, value)\n \n     def test_float_field_serialization_returns_float(self):\n-        value = self.serialize(\'test_float_field\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.serialize("test_float_field", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.5, value)\n \n     def test_frozenset_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_frozenset_field\', frozenset([1, 2, 3]))\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.serialize("test_frozenset_field", frozenset([1, 2, 3]))\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual([1, 2, 3], sorted(value))\n \n     def test_int_field_serialization_returns_int(self):\n-        value = self.serialize(\'test_int_field\', 500)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.serialize("test_int_field", 500)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(500, value)\n \n     def test_list_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_list_field\', [1, \'two\', 3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([1, u\'two\', 3], value)\n-\n-    def test_list_field_with_vocabulary_choice_serialization_returns_terms(\n-            self):\n-        value = self.serialize(\'test_list_field_with_choice_with_vocabulary\',\n-                               [u\'value1\', u\'value3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.serialize("test_list_field", [1, "two", 3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([1, u"two", 3], value)\n+\n+    def test_list_field_with_vocabulary_choice_serialization_returns_terms(self):\n+        value = self.serialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u\'token\': u\'token1\', u\'title\': u\'title1\'},\n-                {u\'token\': u\'token3\', u\'title\': u\'title3\'},\n+                {u"token": u"token1", u"title": u"title1"},\n+                {u"token": u"token3", u"title": u"title3"},\n             ],\n-            value)\n+            value,\n+        )\n \n     def test_set_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_set_field\', set([\'a\', \'b\', \'c\']))\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'a\', u\'b\', u\'c\'], sorted(value))\n+        value = self.serialize("test_set_field", set(["a", "b", "c"]))\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"a", u"b", u"c"], sorted(value))\n \n     def test_text_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("test_text_field", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("test_textline_field", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_time_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'14:15:33\', value)\n+        value = self.serialize("test_time_field", time(14, 15, 33))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"14:15:33", value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n-        value = self.serialize(\'test_timedelta_field\', timedelta(0.01))\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.serialize("test_timedelta_field", timedelta(0.01))\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(864.0, value)\n \n     def test_richtext_field_serialization_returns_dict(self):\n-        value = self.serialize(\'test_richtext_field\', RichTextValue(\n-            raw=u\'<p>Some Text</p>\', mimeType=\'text/html\',\n-            outputMimeType=\'text/html\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({\n-            u\'content-type\': u\'text/html\',\n-            u\'data\': u\'<p>Some Text</p>\',\n-            u\'encoding\': u\'utf-8\'}, value)\n+        value = self.serialize(\n+            "test_richtext_field",\n+            RichTextValue(\n+                raw=u"<p>Some Text</p>",\n+                mimeType="text/html",\n+                outputMimeType="text/html",\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual(\n+            {\n+                u"content-type": u"text/html",\n+                u"data": u"<p>Some Text</p>",\n+                u"encoding": u"utf-8",\n+            },\n+            value,\n+        )\n \n     def test_namedfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n-            \'test_namedfile_field\',\n-            NamedFile(data=u\'Spam and eggs\', contentType=u\'text/plain\',\n-                      filename=u\'test.txt\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        download_url = u\'/\'.join([\n-            self.doc1.absolute_url(),\n-            u\'@@download/test_namedfile_field\'])\n+            "test_namedfile_field",\n+            NamedFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        download_url = u"/".join(\n+            [self.doc1.absolute_url(), u"@@download/test_namedfile_field"]\n+        )\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': download_url},\n-            value)\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": download_url,\n+            },\n+            value,\n+        )\n \n     def test_namedimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'test_namedimage_field\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "test_namedimage_field"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data,\n-                    contentType=u\'image/gif\',\n-                    filename=u\'1024x768.gif\'\n-                )\n+                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                ),\n             )\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = \'uuid_1\'\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n+            download_url = u"{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n             )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_namedblobfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n-            \'test_namedblobfile_field\',\n-            NamedBlobFile(data=u\'Spam and eggs\', contentType=u\'text/plain\',\n-                          filename=u\'test.txt\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-\n-        download_url = u\'/\'.join([\n-            self.doc1.absolute_url(),\n-            u\'@@download/test_namedblobfile_field\'])\n+            "test_namedblobfile_field",\n+            NamedBlobFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+\n+        download_url = u"/".join(\n+            [self.doc1.absolute_url(), u"@@download/test_namedblobfile_field"]\n+        )\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': download_url},\n-            value)\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": download_url,\n+            },\n+            value,\n+        )\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'test_namedblobimage_field\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "test_namedblobimage_field"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data,\n-                    contentType=u\'image/gif\',\n-                    filename=u\'1024x768.gif\'\n-                )\n+                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                ),\n             )\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = \'uuid_1\'\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n+            download_url = u"{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n             )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_relationchoice_field_serialization_returns_summary_dict(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 2\',\n-        )]\n-        value = self.serialize(\'test_relationchoice_field\', doc2)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc2",\n+                title="Referenceable Document",\n+                description="Description 2",\n+            )\n+        ]\n+        value = self.serialize("test_relationchoice_field", doc2)\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/doc2\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 2\',\n-             \'review_state\': \'private\'\n-             },\n-            value)\n+            {\n+                "@id": "http://nohost/plone/doc2",\n+                "@type": "DXTestDocument",\n+                "title": "Referenceable Document",\n+                "description": "Description 2",\n+                "review_state": "private",\n+            },\n+            value,\n+        )\n \n     def test_relationlist_field_serialization_returns_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 2\',\n-        )]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 3\',\n-        )]\n-        value = self.serialize(\'test_relationlist_field\', [doc2, doc3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([\n-            {\'@id\': \'http://nohost/plone/doc2\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 2\',\n-             \'review_state\': \'private\'\n-\n-             },\n-            {\'@id\': \'http://nohost/plone/doc3\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 3\',\n-             \'review_state\': \'private\'\n-             }],\n-            value)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc2",\n+                title="Referenceable Document",\n+                description="Description 2",\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc3",\n+                title="Referenceable Document",\n+                description="Description 3",\n+            )\n+        ]\n+        value = self.serialize("test_relationlist_field", [doc2, doc3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual(\n+            [\n+                {\n+                    "@id": "http://nohost/plone/doc2",\n+                    "@type": "DXTestDocument",\n+                    "title": "Referenceable Document",\n+                    "description": "Description 2",\n+                    "review_state": "private",\n+                },\n+                {\n+                    "@id": "http://nohost/plone/doc3",\n+                    "@type": "DXTestDocument",\n+                    "title": "Referenceable Document",\n+                    "description": "Description 3",\n+                    "review_state": "private",\n+                },\n+            ],\n+            value,\n+        )\n \n \n class TestDexterityFieldSerializers(TestCase):\n-\n     def default_field_serializer(self):\n         verifyClass(IFieldSerializer, DefaultFieldSerializer)\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex 7cb02d73..37cca4d8 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -16,15 +16,15 @@\n \n \n class InternalServerErrorView(BrowserView):\n-\n     def __call__(self):  # pragma: no cover\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/internal_server_error\',\n+            "http://nohost/plone/internal_server_error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\n         raise HTTPError\n \n@@ -34,20 +34,20 @@ class TestErrorHandling(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'document1\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="document1")\n         self.document = self.portal.document1\n         self.document_url = self.document.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\')\n+        self.portal.invokeFactory("Folder", id="folder1")\n         self.folder = self.portal.folder1\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n@@ -55,60 +55,52 @@ def setUp(self):\n     def tearDown(self):\n         self.api_session.close()\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_404_not_found(self):\n-        response = self.api_session.get(\'non-existing-resource\')\n+        response = self.api_session.get("non-existing-resource")\n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'NotFound\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("NotFound", response.json()["type"])\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_401_unauthorized(self):\n         response = self.api_session.get(self.document_url)\n         self.assertEqual(response.status_code, 401)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'Unauthorized\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("Unauthorized", response.json()["type"])\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_500_internal_server_error(self):\n         provideAdapter(\n             InternalServerErrorView,\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n-            name=\'internal_server_error\'\n+            name="internal_server_error",\n         )\n         import transaction\n+\n         transaction.commit()\n \n-        response = self.api_session.get(\'internal_server_error\')\n+        response = self.api_session.get("internal_server_error")\n \n         self.assertEqual(response.status_code, 500)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'HTTPError\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("HTTPError", response.json()["type"])\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex de805d73..e372be25 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -27,64 +27,64 @@\n \n \n class ExpandableElementFoo(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         if expand:\n-            return {\'foo\': \'expanded\'}\n+            return {"foo": "expanded"}\n         else:\n-            return {\'foo\': \'collapsed\'}\n+            return {"foo": "collapsed"}\n \n \n class ExpandableElementBar(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         if expand:\n-            return {\'bar\': \'expanded\'}\n+            return {"bar": "expanded"}\n         else:\n-            return {\'bar\': \'collapsed\'}\n+            return {"bar": "collapsed"}\n \n \n class TestExpansion(unittest.TestCase):\n-\n     def setUp(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         provideAdapter(\n             ExpandableElementBar,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'bar\'\n+            name="bar",\n         )\n \n     def test_expansion_returns_collapsed_elements(self):\n         request = TestRequest()\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'collapsed\', \'foo\': \'collapsed\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "collapsed", "foo": "collapsed"}},\n+            expandable_elements(None, request),\n+        )\n \n     def test_expansion_returns_expanded_element(self):\n-        request = TestRequest(form={\'expand\': \'foo\'})\n+        request = TestRequest(form={"expand": "foo"})\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'collapsed\', \'foo\': \'expanded\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "collapsed", "foo": "expanded"}},\n+            expandable_elements(None, request),\n+        )\n \n     def test_expansion_returns_multiple_expanded_elements(self):\n-        request = TestRequest(form={\'expand\': \'foo,bar\'})\n+        request = TestRequest(form={"expand": "foo,bar"})\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'expanded\', \'foo\': \'expanded\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "expanded", "foo": "expanded"}},\n+            expandable_elements(None, request),\n+        )\n \n     def tearDown(self):\n         gsm = getGlobalSiteManager()\n@@ -92,12 +92,14 @@ def tearDown(self):\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n         gsm.unregisterAdapter(\n             ExpandableElementBar,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'bar\')\n+            "bar",\n+        )\n \n \n class TestExpansionFunctional(unittest.TestCase):\n@@ -105,232 +107,182 @@ class TestExpansionFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_actions_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'actions\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("actions", list(response.json().get("@components")))\n \n     def test_actions_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "actions"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "actions"})\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(\n-            \'object\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'object_buttons\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'portal_tabs\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'site_actions\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'user\' in response.json()[\'@components\'][\'actions\']\n-        )\n+        self.assertTrue("object" in response.json()["@components"]["actions"])\n+        self.assertTrue("object_buttons" in response.json()["@components"]["actions"])\n+        self.assertTrue("portal_tabs" in response.json()["@components"]["actions"])\n+        self.assertTrue("site_actions" in response.json()["@components"]["actions"])\n+        self.assertTrue("user" in response.json()["@components"]["actions"])\n \n     def test_navigation_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'navigation\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("navigation", list(response.json().get("@components")))\n \n     def test_navigation_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "navigation"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "navigation"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             [\n+                {u"title": u"Home", u"@id": self.portal_url + u"", u"description": u""},\n                 {\n-                    u\'title\': u\'Home\',\n-                    u\'@id\': self.portal_url + u\'\',\n-                    u\'description\': u\'\',\n+                    u"title": u"Some Folder",\n+                    u"@id": self.portal_url + u"/folder",\n+                    u"description": u"",\n                 },\n-                {\n-                    u\'title\': u\'Some Folder\',\n-                    u\'@id\': self.portal_url + u\'/folder\',\n-                    u\'description\': u\'\',\n-                }\n             ],\n-            response.json()[\'@components\'][\'navigation\'][\'items\']\n+            response.json()["@components"]["navigation"]["items"],\n         )\n \n     def test_navigation_expanded_with_depth(self):\n         createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         subfolder1 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n+            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+        )\n         createContentInContainer(\n-            thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n         response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "navigation",\n-                "expand.navigation.depth": 3\n-            }\n+            "/folder", params={"expand": "navigation", "expand.navigation.depth": 3}\n         )\n \n         self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()["@components"]["navigation"]["items"]), 3)\n         self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\']), 3\n-        )\n-        self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\'][1][\'items\']), 3 # noqa\n+            len(response.json()["@components"]["navigation"]["items"][1]["items"]),\n+            3,  # noqa\n         )\n         self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\'][1][\'items\'][0][\'items\']), 1 # noqa\n+            len(\n+                response.json()["@components"]["navigation"]["items"][1]["items"][0][\n+                    "items"\n+                ]\n+            ),\n+            1,  # noqa\n         )\n \n     def test_breadcrumbs_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'breadcrumbs\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("breadcrumbs", list(response.json().get("@components")))\n \n     def test_breadcrumbs_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "breadcrumbs"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "breadcrumbs"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            [\n-                {\n-                    u\'title\': u\'Some Folder\',\n-                    u\'@id\': self.portal_url + u\'/folder\'\n-                }\n-            ],\n-            response.json()[\'@components\'][\'breadcrumbs\'][\'items\']\n+            [{u"title": u"Some Folder", u"@id": self.portal_url + u"/folder"}],\n+            response.json()["@components"]["breadcrumbs"]["items"],\n         )\n \n     def test_workflow_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'workflow\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("workflow", list(response.json().get("@components")))\n \n     def test_workflow_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "workflow"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "workflow"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            self.portal_url + u\'/folder/@workflow\',\n-            response.json().get(\'@components\').get(\'workflow\').get(\'@id\')\n+            self.portal_url + u"/folder/@workflow",\n+            response.json().get("@components").get("workflow").get("@id"),\n         )\n         self.assertEqual(\n-            u\'private\',\n-            response.json()[\'@components\'][\'workflow\'][\'history\'][0][\'review_state\']  # noqa\n+            u"private",\n+            response.json()["@components"]["workflow"]["history"][0][\n+                "review_state"\n+            ],  # noqa\n         )\n         self.assertEqual(\n-            u\'Private\',\n-            response.json()[\'@components\'][\'workflow\'][\'history\'][0][\'title\']\n+            u"Private",\n+            response.json()["@components"]["workflow"]["history"][0]["title"],\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal_url + u\'/folder/@workflow/publish\',  # noqa\n-                    u\'title\': u\'Publish\'\n+                    u"@id": self.portal_url + u"/folder/@workflow/publish",  # noqa\n+                    u"title": u"Publish",\n                 },\n                 {\n-                    u\'@id\': self.portal_url + u\'/folder/@workflow/submit\',  # noqa\n-                    u\'title\': u\'Submit for publication\'\n-                }\n+                    u"@id": self.portal_url + u"/folder/@workflow/submit",  # noqa\n+                    u"title": u"Submit for publication",\n+                },\n             ],\n-            response.json()[\'@components\'][\'workflow\'][\'transitions\']\n+            response.json()["@components"]["workflow"]["transitions"],\n         )\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestTranslationExpansionFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n         transaction.commit()\n \n@@ -338,28 +290,18 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_translations_is_expandable(self):\n-        response = self.api_session.get(\'/en/test-document\')\n+        response = self.api_session.get("/en/test-document")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'translations\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("translations", list(response.json().get("@components")))\n \n     def test_translations_expanded(self):\n         response = self.api_session.get(\n-            \'/en/test-document\',\n-            params={\n-                "expand": "translations"\n-            }\n+            "/en/test-document", params={"expand": "translations"}\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        translation_dict = {\n-            \'@id\': self.es_content.absolute_url(),\n-            \'language\': \'es\'\n-        }\n+        translation_dict = {"@id": self.es_content.absolute_url(), "language": "es"}\n         self.assertIn(\n-            translation_dict,\n-            response.json()[\'@components\'][\'translations\'][\'items\']\n+            translation_dict, response.json()["@components"]["translations"]["items"]\n         )\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 1d8543ab..9a9972a1 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -17,133 +17,109 @@ class TestFunctionalAuth(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.private_document = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+        self.private_document = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         self.private_document_url = self.private_document.absolute_url()\n         transaction.commit()\n \n     def test_login_without_credentials_fails(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/@login", headers={"Accept": "application/json"}\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            u\'Missing credentials\',\n-            response.json().get(\'error\').get(\'type\')\n+            u"Missing credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u\'Login and password must be provided in body.\',\n-            response.json().get(\'error\').get(\'message\')\n+            u"Login and password must be provided in body.",\n+            response.json().get("error").get("message"),\n         )\n \n     def test_login_with_invalid_credentials_fails(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": "invalid",\n-                "password": "invalid",\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": "invalid", "password": "invalid"},\n         )\n         self.assertEqual(401, response.status_code)\n         self.assertEqual(\n-            u\'Invalid credentials\',\n-            response.json().get(\'error\').get(\'type\')\n+            u"Invalid credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u\'Wrong login and/or password.\',\n-            response.json().get(\'error\').get(\'message\')\n+            u"Wrong login and/or password.", response.json().get("error").get("message")\n         )\n \n     def test_login_with_valid_credentials_returns_token(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": TEST_USER_NAME,\n-                "password": TEST_USER_PASSWORD,\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": TEST_USER_NAME, "password": TEST_USER_PASSWORD},\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(\n-            u\'token\' in response.json()\n-        )\n+        self.assertTrue(u"token" in response.json())\n \n     def test_accessing_private_document_with_valid_token_succeeds(self):\n         # login and generate a valid token\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": TEST_USER_NAME,\n-                "password": TEST_USER_PASSWORD,\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": TEST_USER_NAME, "password": TEST_USER_PASSWORD},\n         )\n-        valid_token = response.json().get(\'token\')\n+        valid_token = response.json().get("token")\n \n         # use valid token to access a private resource\n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + valid_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + valid_token,\n             },\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(u\'@id\' in response.json())\n+        self.assertTrue(u"@id" in response.json())\n \n     def test_accessing_private_document_with_invalid_token_fails(self):\n-        invalid_token = \'abcd1234\'\n+        invalid_token = "abcd1234"\n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + invalid_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + invalid_token,\n             },\n         )\n \n         self.assertEqual(401, response.status_code)\n+        self.assertEqual(u"Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u\'Unauthorized\',\n-            response.json().get(\'type\')\n-        )\n-        self.assertEqual(\n-            u\'You are not authorized to access this resource.\',\n-            response.json().get(\'message\')\n+            u"You are not authorized to access this resource.",\n+            response.json().get("message"),\n         )\n \n     def test_accessing_private_document_with_expired_token_fails(self):\n         # generate an expired token\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         expired_token = self.portal.acl_users.jwt_auth.create_token(\n-            \'admin\',\n-            timeout=-60\n+            "admin", timeout=-60\n         )\n         transaction.commit()\n \n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + expired_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + expired_token,\n             },\n         )\n \n         self.assertEqual(401, response.status_code)\n+        self.assertEqual(u"Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u\'Unauthorized\',\n-            response.json().get(\'type\')\n-        )\n-        self.assertEqual(\n-            u\'You are not authorized to access this resource.\',\n-            response.json().get(\'message\')\n+            u"You are not authorized to access this resource.",\n+            response.json().get("message"),\n         )\ndiff --git a/src/plone/restapi/tests/test_imaging.py b/src/plone/restapi/tests/test_imaging.py\nindex b1ff6abf..84394674 100644\n--- a/src/plone/restapi/tests/test_imaging.py\n+++ b/src/plone/restapi/tests/test_imaging.py\n@@ -4,7 +4,6 @@\n \n \n class TestGetActualScale(TestCase):\n-\n     def test_constrains_landscape_to_width(self):\n         img = (800, 400)\n         bbox = (200, 200)\ndiff --git a/src/plone/restapi/tests/test_locking.py b/src/plone/restapi/tests/test_locking.py\nindex 44e57653..c738dca4 100644\n--- a/src/plone/restapi/tests/test_locking.py\n+++ b/src/plone/restapi/tests/test_locking.py\n@@ -19,15 +19,16 @@ class TestLocking(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, SITE_OWNER_NAME)\n-        self.doc = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n+        self.doc = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         alsoProvides(self.doc, ITTWLockable)\n \n         self.api_session = RelativeSession(self.doc.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -36,21 +37,21 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_lock_object(self):\n-        response = self.api_session.post(\'/@lock\',)\n+        response = self.api_session.post("/@lock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         self.assertTrue(ILockable(self.doc).locked())\n \n     def test_lock_object_non_stealable(self):\n-        response = self.api_session.post(\'/@lock\', json={\'stealable\': False})\n+        response = self.api_session.post("/@lock", json={"stealable": False})\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         self.assertTrue(INonStealableLock.providedBy(self.doc))\n \n     def test_lock_object_with_custom_timeout(self):\n-        response = self.api_session.post(\'/@lock\', json={\'timeout\': 86400})\n+        response = self.api_session.post("/@lock", json={"timeout": 86400})\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n@@ -60,7 +61,7 @@ def test_unlock_object(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.post(\'/@unlock\')\n+        response = self.api_session.post("/@unlock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n@@ -71,45 +72,45 @@ def test_refresh_lock(self):\n         lockable.lock()\n         modified = self.doc.wl_lockValues()[0].getModifiedTime()\n         transaction.commit()\n-        response = self.api_session.post(\'/@refresh-lock\')\n+        response = self.api_session.post("/@refresh-lock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(\n-            self.doc.wl_lockValues()[0].getModifiedTime() > modified)\n+        self.assertTrue(self.doc.wl_lockValues()[0].getModifiedTime() > modified)\n \n     def test_lock_info_for_locked_object(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.get(\'/@lock\')\n+        response = self.api_session.get("/@lock")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(response.json()[\'locked\'])\n+        self.assertTrue(response.json()["locked"])\n \n     def test_lock_info_for_unlocked_object(self):\n-        response = self.api_session.get(\'/@lock\')\n+        response = self.api_session.get("/@lock")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertFalse(response.json()[\'locked\'])\n+        self.assertFalse(response.json()["locked"])\n \n     def test_update_locked_object_without_token_fails(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.patch(\'/\', json={\'title\': \'New Title\'})\n+        response = self.api_session.patch("/", json={"title": "New Title"})\n         transaction.commit()\n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(self.doc.Title(), \'My Document\')\n+        self.assertEqual(self.doc.Title(), "My Document")\n \n     def test_update_locked_object_with_token_succeeds(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n         response = self.api_session.patch(\n-            \'/\',\n-            headers={\'Lock-Token\': lockable.lock_info()[0][\'token\']},\n-            json={\'title\': \'New Title\'})\n+            "/",\n+            headers={"Lock-Token": lockable.lock_info()[0]["token"]},\n+            json={"title": "New Title"},\n+        )\n         transaction.commit()\n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(self.doc.Title(), \'New Title\')\n+        self.assertEqual(self.doc.Title(), "New Title")\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex 4a30e18d..a9a2f7ae 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -13,100 +13,93 @@ class TestJWTAuthenticationPlugin(unittest.TestCase):\n \n     def setUp(self):\n \n-        self.portal = self.layer[\'portal\']\n-        uf = getToolByName(self.portal, \'acl_users\')\n-        self.plugin = uf[\'jwt_auth\']\n+        self.portal = self.layer["portal"]\n+        uf = getToolByName(self.portal, "acl_users")\n+        self.plugin = uf["jwt_auth"]\n \n     def test_challenge(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         self.plugin.challenge(request, request.response)\n         self.assertEqual(401, response.getStatus())\n-        self.assertEqual(\n-            \'Bearer realm="Zope"\', response.getHeader(\'WWW-Authenticate\'))\n+        self.assertEqual(\'Bearer realm="Zope"\', response.getHeader("WWW-Authenticate"))\n \n     def test_extract_credentials_without_authorization_header(self):\n-        request = self.layer[\'request\']\n-        request._auth = \'\'\n+        request = self.layer["request"]\n+        request._auth = ""\n         self.assertEqual(None, self.plugin.extractCredentials(request))\n \n     def test_extract_credentials_with_other_authorization_header(self):\n-        request = self.layer[\'request\']\n-        request._auth = \'Basic YWRtaW46YWRtaW4=\'\n+        request = self.layer["request"]\n+        request._auth = "Basic YWRtaW46YWRtaW4="\n         self.assertEqual(None, self.plugin.extractCredentials(request))\n \n     def test_extract_credentials_with_bearer_authorization_header(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         request._auth = (\n-            \'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.\'\n-            \'PGnRccPTXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw\')\n+            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9."\n+            "PGnRccPTXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw"\n+        )\n         self.assertEqual(\n-            \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.PGnRccP\'\n-            \'TXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw\',\n-            self.plugin.extractCredentials(request)[\'token\'])\n+            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.PGnRccP"\n+            "TXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw",\n+            self.plugin.extractCredentials(request)["token"],\n+        )\n \n     def test_authenticate_credentials_from_unknown_extractor(self):\n         creds = {}\n-        creds[\'extractor\'] = \'credentials_basic_auth\'\n+        creds["extractor"] = "credentials_basic_auth"\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_invalid_token(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = \'invalid\'\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = "invalid"\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_without_subject(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = (\n-            \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.t-IDcSemACt8x4iTMCda8Yhe\'\n-            \'3iZaWbvV5XKSTbuAn0M\')\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = (\n+            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.t-IDcSemACt8x4iTMCda8Yhe"\n+            "3iZaWbvV5XKSTbuAn0M"\n+        )\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_valid_token(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertEqual(\n-            (\'admin\', \'admin\'),\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertEqual(("admin", "admin"), self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertIsInstance(\n-            self.plugin.authenticateCredentials(creds)[0],\n-            str,\n-        )\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertIsInstance(self.plugin.authenticateCredentials(creds)[0], str)\n \n     def test_decode_token_after_key_rotation(self):\n-        token = self.plugin.create_token(\'admin\', timeout=0)\n+        token = self.plugin.create_token("admin", timeout=0)\n         key_manager = getUtility(IKeyManager)\n         key_manager.rotate()\n-        self.assertEqual({\'sub\': \'admin\'}, self.plugin._decode_token(token))\n+        self.assertEqual({"sub": "admin"}, self.plugin._decode_token(token))\n \n     def test_decode_with_static_secret(self):\n         self.plugin.use_keyring = False\n-        token = self.plugin.create_token(\'admin\', timeout=0)\n-        self.assertEqual({\'sub\': \'admin\'}, self.plugin._decode_token(token))\n+        token = self.plugin.create_token("admin", timeout=0)\n+        self.assertEqual({"sub": "admin"}, self.plugin._decode_token(token))\n \n     def test_authenticate_credentials_with_stored_token(self):\n         self.plugin.store_tokens = True\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertEqual(\n-            (\'admin\', \'admin\'),\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertEqual(("admin", "admin"), self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_deleted_token_fails(self):\n         self.plugin.store_tokens = True\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.plugin.delete_token(creds[\'token\'])\n-        self.assertEqual(\n-            None,\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.plugin.delete_token(creds["token"])\n+        self.assertEqual(None, self.plugin.authenticateCredentials(creds))\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 84a94c9b..80fe21f2 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -16,33 +16,33 @@ class TestPermissions(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_anonymous_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Anonymous\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Anonymous"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n \n     def test_authenticated_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Authenticated\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Authenticated"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n \n     def test_manager_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n@@ -57,6 +57,9 @@ def test_unauthorized_if_missing_permission(self):\n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 401)\n         self.assertDictContainsSubset(\n-            {u\'type\': u\'Unauthorized\',\n-             u\'message\': u"Missing \'plone.restapi: Use REST API\' permission"},\n-            response.json())\n+            {\n+                u"type": u"Unauthorized",\n+                u"message": u"Missing \'plone.restapi: Use REST API\' permission",\n+            },\n+            response.json(),\n+        )\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nindex dbeccb14..8875cf07 100644\n--- a/src/plone/restapi/tests/test_profile_tiles.py\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -15,20 +15,18 @@ class TestProfileTiles(unittest.TestCase):\n     layer = PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n \n     def test_document_type_has_tiles_behavior_enabled(self):\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'tileddoc\',\n-            title=\'Document with Tiles\'\n+            "Document", id="tileddoc", title="Document with Tiles"\n         )\n-        ITiles.providedBy(self.portal[\'tileddoc\'])\n+        ITiles.providedBy(self.portal["tileddoc"])\n \n     def test_plone_restapi_base_profile_applied(self):\n-        uf = getToolByName(self.portal, \'acl_users\')\n-        self.assertTrue(\'jwt_auth\' in uf)\n+        uf = getToolByName(self.portal, "acl_users")\n+        self.assertTrue("jwt_auth" in uf)\ndiff --git a/src/plone/restapi/tests/test_query_parsers.py b/src/plone/restapi/tests/test_query_parsers.py\nindex 681c43e9..c3369614 100644\n--- a/src/plone/restapi/tests/test_query_parsers.py\n+++ b/src/plone/restapi/tests/test_query_parsers.py\n@@ -14,19 +14,18 @@\n \n \n class TestBaseIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_query_values_in_sequences(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual([\'23\', \'42\'], qp.parse([23, 42]))\n-        self.assertEqual([\'23\', \'42\'], qp.parse((23, 42)))\n+        self.assertEqual(["23", "42"], qp.parse([23, 42]))\n+        self.assertEqual(["23", "42"], qp.parse((23, 42)))\n \n     def test_raises_on_missing_query_key_for_complex_queries(self):\n         qp = BaseIndexQueryParser()\n@@ -35,60 +34,59 @@ def test_raises_on_missing_query_key_for_complex_queries(self):\n \n \n class TestZCTextIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = ZCTextIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = ZCTextIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n \n class TestKeywordIndexQueryParser(unittest.TestCase):\n-\n     def test_returns_simple_query_unchanged(self):\n         qp = KeywordIndexQueryParser()\n-        self.assertEqual(\'keyword\', qp.parse(\'keyword\'))\n+        self.assertEqual("keyword", qp.parse("keyword"))\n         self.assertEqual(42, qp.parse(42))\n \n     def test_returns_complex_query_values_unchanged(self):\n         qp = KeywordIndexQueryParser()\n-        self.assertEqual({\'query\': \'keyword\'}, qp.parse({\'query\': \'keyword\'}))\n-        self.assertEqual({\'query\': 42}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "keyword"}, qp.parse({"query": "keyword"}))\n+        self.assertEqual({"query": 42}, qp.parse({"query": 42}))\n \n     def test_casts_operator_option_to_string(self):\n         qp = KeywordIndexQueryParser()\n         self.assertEqual(\n-            {\'operator\': \'42\', \'query\': \'keyword\'},\n-            qp.parse({\'operator\': 42, \'query\': \'keyword\'}))\n+            {"operator": "42", "query": "keyword"},\n+            qp.parse({"operator": 42, "query": "keyword"}),\n+        )\n \n     def test_casts_range_option_to_string(self):\n         qp = KeywordIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'keyword\'},\n-            qp.parse({\'range\': 42, \'query\': \'keyword\'}))\n+            {"range": "42", "query": "keyword"},\n+            qp.parse({"range": 42, "query": "keyword"}),\n+        )\n \n \n class TestBooleanIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_boolean(self):\n         qp = BooleanIndexQueryParser()\n-        self.assertEqual(True, qp.parse(\'True\'))\n-        self.assertEqual(True, qp.parse(\'true\'))\n-        self.assertEqual(True, qp.parse(\'1\'))\n-        self.assertEqual(False, qp.parse(\'False\'))\n-        self.assertEqual(False, qp.parse(\'false\'))\n-        self.assertEqual(False, qp.parse(\'0\'))\n+        self.assertEqual(True, qp.parse("True"))\n+        self.assertEqual(True, qp.parse("true"))\n+        self.assertEqual(True, qp.parse("1"))\n+        self.assertEqual(False, qp.parse("False"))\n+        self.assertEqual(False, qp.parse("false"))\n+        self.assertEqual(False, qp.parse("0"))\n \n     def test_casts_complex_query_values_to_boolean(self):\n         qp = BooleanIndexQueryParser()\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'True\'}))\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'true\'}))\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'1\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'False\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'false\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'0\'}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "True"}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "true"}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "1"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "False"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "false"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "0"}))\n \n     def test_raises_for_invalid_query_type(self):\n         qp = BooleanIndexQueryParser()\n@@ -97,116 +95,114 @@ def test_raises_for_invalid_query_type(self):\n \n \n class TestFieldIndexQueryParser(unittest.TestCase):\n-\n     def test_returns_simple_query_unchanged(self):\n         qp = FieldIndexQueryParser()\n-        self.assertEqual(\'foo\', qp.parse(\'foo\'))\n+        self.assertEqual("foo", qp.parse("foo"))\n         self.assertEqual(42, qp.parse(42))\n \n     def test_returns_complex_query_values_unchanged(self):\n         qp = FieldIndexQueryParser()\n-        self.assertEqual({\'query\': \'foo\'}, qp.parse({\'query\': \'foo\'}))\n-        self.assertEqual({\'query\': 42}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "foo"}, qp.parse({"query": "foo"}))\n+        self.assertEqual({"query": 42}, qp.parse({"query": 42}))\n \n     def test_casts_range_option_to_string(self):\n         qp = FieldIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'/path\'},\n-            qp.parse({\'range\': 42, \'query\': \'/path\'}))\n+            {"range": "42", "query": "/path"}, qp.parse({"range": 42, "query": "/path"})\n+        )\n \n \n class TestExtendedPathIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_level_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'level\': 3, \'query\': \'/path\'},\n-            qp.parse({\'level\': \'3\', \'query\': \'/path\'}))\n+            {"level": 3, "query": "/path"}, qp.parse({"level": "3", "query": "/path"})\n+        )\n \n     def test_casts_operator_option_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'operator\': \'42\', \'query\': \'/path\'},\n-            qp.parse({\'operator\': 42, \'query\': \'/path\'}))\n+            {"operator": "42", "query": "/path"},\n+            qp.parse({"operator": 42, "query": "/path"}),\n+        )\n \n     def test_casts_depth_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'depth\': 3, \'query\': \'/path\'},\n-            qp.parse({\'depth\': \'3\', \'query\': \'/path\'}))\n+            {"depth": 3, "query": "/path"}, qp.parse({"depth": "3", "query": "/path"})\n+        )\n \n     def test_casts_navtree_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'navtree\': False, \'query\': \'/path\'},\n-            qp.parse({\'navtree\': 0, \'query\': \'/path\'}))\n+            {"navtree": False, "query": "/path"},\n+            qp.parse({"navtree": 0, "query": "/path"}),\n+        )\n         self.assertEqual(\n-            {\'navtree\': True, \'query\': \'/path\'},\n-            qp.parse({\'navtree\': 1, \'query\': \'/path\'}))\n+            {"navtree": True, "query": "/path"},\n+            qp.parse({"navtree": 1, "query": "/path"}),\n+        )\n \n     def test_casts_navtree_start_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'navtree_start\': 42, \'query\': \'/path\'},\n-            qp.parse({\'navtree_start\': \'42\', \'query\': \'/path\'}))\n+            {"navtree_start": 42, "query": "/path"},\n+            qp.parse({"navtree_start": "42", "query": "/path"}),\n+        )\n \n \n class TestDateIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_zope_date_time(self):\n         qp = DateIndexQueryParser()\n-        self.assertEqual(\n-            DateTime(\'2016/12/24 00:00:00 GMT+0\'),\n-            qp.parse(\'2016-12-24\'))\n+        self.assertEqual(DateTime("2016/12/24 00:00:00 GMT+0"), qp.parse("2016-12-24"))\n \n     def test_casts_complex_query_values_to_zope_date_time(self):\n         qp = DateIndexQueryParser()\n         self.assertEqual(\n-            {\'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'query\': \'2016-12-24\'}))\n+            {"query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"query": "2016-12-24"}),\n+        )\n \n     def test_casts_range_option_to_string(self):\n         qp = DateIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'range\': 42, \'query\': \'2016-12-24\'}))\n+            {"range": "42", "query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"range": 42, "query": "2016-12-24"}),\n+        )\n \n \n class TestDateRangeIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_zope_date_time(self):\n         qp = DateRangeIndexQueryParser()\n-        self.assertEqual(\n-            DateTime(\'2016/12/24 00:00:00 GMT+0\'),\n-            qp.parse(\'2016-12-24\'))\n+        self.assertEqual(DateTime("2016/12/24 00:00:00 GMT+0"), qp.parse("2016-12-24"))\n \n     def test_casts_complex_query_values_to_zope_date_time(self):\n         qp = DateRangeIndexQueryParser()\n         self.assertEqual(\n-            {\'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'query\': \'2016-12-24\'}))\n+            {"query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"query": "2016-12-24"}),\n+        )\n \n \n class TestUUIDIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = UUIDIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = UUIDIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_range_option_to_string(self):\n         qp = UUIDIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'<UID>\'},\n-            qp.parse({\'range\': 42, \'query\': \'<UID>\'}))\n+            {"range": "42", "query": "<UID>"}, qp.parse({"range": 42, "query": "<UID>"})\n+        )\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex 7bb89ba9..3f76ba74 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -20,22 +20,22 @@ class TestRegistry(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         registry = getUtility(IRegistry)\n         record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-        registry.records[\'foo.bar\'] = record\n+        registry.records["foo.bar"] = record\n \n         for counter in range(1, 100):\n             record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-            registry.records[\'foo.bar\' + str(counter)] = record\n+            registry.records["foo.bar" + str(counter)] = record\n \n         transaction.commit()\n \n@@ -43,45 +43,43 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_registry_record(self):\n-        response = self.api_session.get(\'/@registry/foo.bar\')\n+        response = self.api_session.get("/@registry/foo.bar")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.json(), \'Lorem Ipsum\')\n+        self.assertEqual(response.json(), "Lorem Ipsum")\n \n     def test_update_registry_record(self):\n         registry = getUtility(IRegistry)\n-        payload = {\'foo.bar\': \'lorem ipsum\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar": "lorem ipsum"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(registry[\'foo.bar\'], \'lorem ipsum\')\n+        self.assertEqual(registry["foo.bar"], "lorem ipsum")\n \n     def test_update_several_registry_records(self):\n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar Baz"),\n-                        u"Lorem Ipsum Dolor")\n-        registry.records[\'foo.bar.baz\'] = record\n+        record = Record(field.TextLine(title=u"Foo Bar Baz"), u"Lorem Ipsum Dolor")\n+        registry.records["foo.bar.baz"] = record\n         transaction.commit()\n-        payload = {\'foo.bar\': \'lorem ipsum\',\n-                   \'foo.bar.baz\': \'lorem ipsum dolor\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar": "lorem ipsum", "foo.bar.baz": "lorem ipsum dolor"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(registry[\'foo.bar\'], \'lorem ipsum\')\n-        self.assertEqual(registry[\'foo.bar.baz\'], \'lorem ipsum dolor\')\n+        self.assertEqual(registry["foo.bar"], "lorem ipsum")\n+        self.assertEqual(registry["foo.bar.baz"], "lorem ipsum dolor")\n \n     def test_update_non_existing_registry_record(self):\n-        payload = {\'foo.bar.baz\': \'lorem ipsum\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar.baz": "lorem ipsum"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         self.assertEqual(response.status_code, 500)\n \n     def test_get_listing(self):\n-        response = self.api_session.get(\'/@registry\')\n+        response = self.api_session.get("/@registry")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertIn(\'items\', response)\n-        self.assertIn(\'batching\', response)\n-        self.assertIn(\'next\', response[\'batching\'])\n+        self.assertIn("items", response)\n+        self.assertIn("batching", response)\n+        self.assertIn("next", response["batching"])\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex e6774412..76b0e769 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -17,43 +17,42 @@ class TestRegistrySerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n-        expected = [\'@id\', \'items_total\', \'items\']\n+        expected = ["@id", "items_total", "items"]\n         self.assertEqual(set(obj), set(expected))\n-        self.assertNotIn(\'batching\', list(obj))\n+        self.assertNotIn("batching", list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n \n         for counter in range(1, 100):\n             record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-            registry.records[\'foo.bar\' + str(counter)] = record\n+            registry.records["foo.bar" + str(counter)] = record\n \n         obj = self.serialize(registry)\n-        expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n+        expected = ["@id", "items_total", "items", "batching"]\n         self.assertEqual(set(expected), set(obj))\n-        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n+        self.assertEqual(obj["items_total"], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\n \n         record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-        registry.records[\'foo.bar\'] = record\n+        registry.records["foo.bar"] = record\n \n         obj = self.serialize(registry)\n-        item = obj[\'items\'][0]\n-        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n-        self.assertEqual(item[\'name\'], \'foo.bar\')\n-        self.assertEqual(item[\'value\'], u"Lorem Ipsum")\n+        item = obj["items"][0]\n+        self.assertEqual(set(item), set(["name", "value", "schema"]))\n+        self.assertEqual(set(item["schema"]), set(["properties"]))\n+        self.assertEqual(item["name"], "foo.bar")\n+        self.assertEqual(item["value"], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 474dd4cc..00c15aea 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -12,48 +12,62 @@ class TestRolesGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_roles_endpoint_lists_roles(self):\n-        response = self.api_session.get(\'/@roles\')\n+        response = self.api_session.get("/@roles")\n \n         expected = (\n-            {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Contributor\',\n-             u\'title\': u\'Contributor\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Editor\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Editor\',\n-             u\'title\': u\'Editor\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Member\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Member\',\n-             u\'title\': u\'Member\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Reader\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Reader\',\n-             u\'title\': u\'Reader\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Reviewer\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Reviewer\',\n-             u\'title\': u\'Reviewer\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Site Administrator\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Site Administrator\',\n-             u\'title\': u\'Site Administrator\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'},\n+            {\n+                u"@id": self.portal_url + u"/@roles/Contributor",\n+                u"@type": u"role",\n+                u"id": u"Contributor",\n+                u"title": u"Contributor",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Editor",\n+                u"@type": u"role",\n+                u"id": u"Editor",\n+                u"title": u"Editor",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Member",\n+                u"@type": u"role",\n+                u"id": u"Member",\n+                u"title": u"Member",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Reader",\n+                u"@type": u"role",\n+                u"id": u"Reader",\n+                u"title": u"Reader",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Reviewer",\n+                u"@type": u"role",\n+                u"id": u"Reviewer",\n+                u"title": u"Reviewer",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Site Administrator",\n+                u"@type": u"role",\n+                u"id": u"Site Administrator",\n+                u"title": u"Site Administrator",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Manager",\n+                u"@type": u"role",\n+                u"id": u"Manager",\n+                u"title": u"Manager",\n+            },\n         )\n         result = response.json()\n         self.assertEqual(len(expected), len(result))\n@@ -61,21 +75,24 @@ def test_roles_endpoint_lists_roles(self):\n             self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n-        self.api_session.headers.update({\'Accept-Language\': \'de\'})\n-        response = self.api_session.get(\'/@roles\')\n+        self.api_session.headers.update({"Accept-Language": "de"})\n+        response = self.api_session.get("/@roles")\n         # One of the roles has changed translation in German.\n         # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n-        titles = {item[\'title\'] for item in response.json()}\n-        options = {u\'Ver\\xf6ffentlichen\', u\'Reviewer\'}\n+        titles = {item["title"] for item in response.json()}\n+        options = {u"Ver\\xf6ffentlichen", u"Reviewer"}\n         # One of the options must match:\n         self.assertTrue(titles.intersection(options))\n         # Discard them:\n         titles = titles.difference(options)\n-        self.assertEqual({\n-            u\'Hinzuf\\xfcgen\',\n-            u\'Bearbeiten\',\n-            u\'Benutzer\',\n-            u\'Ansehen\',\n-            u\'Website-Administrator\',\n-            u\'Verwalten\'},\n-            titles)\n+        self.assertEqual(\n+            {\n+                u"Hinzuf\\xfcgen",\n+                u"Bearbeiten",\n+                u"Benutzer",\n+                u"Ansehen",\n+                u"Website-Administrator",\n+                u"Verwalten",\n+            },\n+            titles,\n+        )\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 827d1526..44291366 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -27,66 +27,67 @@ class TestSearchFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # /plone/folder\n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n \n         # /plone/folder/doc\n         self.doc = createContentInContainer(\n-            self.folder, u\'DXTestDocument\',\n-            id=\'doc\',\n-            title=u\'Lorem Ipsum\',\n+            self.folder,\n+            u"DXTestDocument",\n+            id="doc",\n+            title=u"Lorem Ipsum",\n             start=DateTime(1950, 1, 1, 0, 0),\n             effective=DateTime(1995, 1, 1, 0, 0),\n             expires=DateTime(1999, 1, 1, 0, 0),\n             test_int_field=42,\n-            test_list_field=[\'Keyword1\', \'Keyword2\', \'Keyword3\'],\n+            test_list_field=["Keyword1", "Keyword2", "Keyword3"],\n             test_bool_field=True,\n             test_richtext_field=RichTextValue(\n-                raw=u\'<p>Some Text</p>\',\n-                mimeType=\'text/html\',\n-                outputMimeType=\'text/html\'\n+                raw=u"<p>Some Text</p>",\n+                mimeType="text/html",\n+                outputMimeType="text/html",\n             ),\n         )\n-        IMutableUUID(self.doc).set(\'77779ffa110e45afb1ba502f75f77777\')\n+        IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n         self.doc.reindexObject()\n \n         # /plone/folder/other-document\n         self.doc2 = createContentInContainer(\n-            self.folder, u\'DXTestDocument\',\n-            id=\'other-document\',\n-            title=u\'Other Document\',\n-            description=u\'\\xdcbersicht\',\n+            self.folder,\n+            u"DXTestDocument",\n+            id="other-document",\n+            title=u"Other Document",\n+            description=u"\\xdcbersicht",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n-            test_list_field=[\'Keyword2\', \'Keyword3\'],\n+            test_list_field=["Keyword2", "Keyword3"],\n             test_bool_field=False,\n         )\n \n         # /plone/folder2\n         self.folder2 = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Another Folder\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Another Folder"\n+        )\n \n         # /plone/folder2/doc\n         createContentInContainer(\n-            self.folder2, u\'DXTestDocument\',\n-            id=\'doc\',\n-            title=u\'Document in second folder\',\n+            self.folder2,\n+            u"DXTestDocument",\n+            id="doc",\n+            title=u"Document in second folder",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -95,9 +96,10 @@ def setUp(self):\n \n         # /plone/doc-outside-folder\n         createContentInContainer(\n-            self.portal, u\'DXTestDocument\',\n-            id=\'doc-outside-folder\',\n-            title=u\'Doc outside folder\',\n+            self.portal,\n+            u"DXTestDocument",\n+            id="doc-outside-folder",\n+            title=u"Doc outside folder",\n         )\n \n         transaction.commit()\n@@ -106,182 +108,194 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_overall_response_format(self):\n-        response = self.api_session.get(\'/@search\')\n+        response = self.api_session.get("/@search")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-        )\n+        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n         self.assertEqual(\n-            results[u\'items_total\'],\n-            len(results[u\'items\']),\n-            \'items_total property should match actual item count.\'\n+            results[u"items_total"],\n+            len(results[u"items"]),\n+            "items_total property should match actual item count.",\n         )\n \n     def test_search_on_context_constrains_query_by_path(self):\n-        response = self.api_session.get(\'/folder/@search\')\n+        response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_search_in_vhm(self):\n         # Install a Virtual Host Monster\n-        if \'virtual_hosting\' not in self.app.objectIds():\n+        if "virtual_hosting" not in self.app.objectIds():\n             # If ZopeLite was imported, we have no default virtual\n             # host monster\n-            from Products.SiteAccess.VirtualHostMonster \\\n-                import manage_addVirtualHostMonster\n-            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+            from Products.SiteAccess.VirtualHostMonster import (\n+                manage_addVirtualHostMonster,\n+            )\n+\n+            manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n         # we don\'t get a result if we do not provide the full physical path\n-        response = self.api_session.get(\'/@search?path=/folder\',)\n+        response = self.api_session.get("/@search?path=/folder")\n         self.assertSetEqual(set(), set(result_paths(response.json())))\n \n         # If we go through the VHM will will get results if we only use\n         # the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search?path=/folder\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search?path=/folder",\n+        )\n         response = self.api_session.get(vhm_url)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\'},\n-            set(result_paths(response.json())))\n+            {u"/folder", u"/folder/doc", u"/folder/other-document"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_search_in_vhm_multiple_paths(self):\n         # Install a Virtual Host Monster\n-        if \'virtual_hosting\' not in self.app.objectIds():\n+        if "virtual_hosting" not in self.app.objectIds():\n             # If ZopeLite was imported, we have no default virtual\n             # host monster\n-            from Products.SiteAccess.VirtualHostMonster \\\n-                import manage_addVirtualHostMonster\n-            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+            from Products.SiteAccess.VirtualHostMonster import (\n+                manage_addVirtualHostMonster,\n+            )\n+\n+            manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n         # path as a list\n-        query = {\'path\': [\n-            \'/folder\',\n-            \'/folder2\']\n-        }\n+        query = {"path": ["/folder", "/folder2"]}\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search",\n+        )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\',\n-             u\'/folder2\',\n-             u\'/folder2/doc\'},\n-            set(result_paths(response.json())))\n+            {\n+                u"/folder",\n+                u"/folder/doc",\n+                u"/folder/other-document",\n+                u"/folder2",\n+                u"/folder2/doc",\n+            },\n+            set(result_paths(response.json())),\n+        )\n \n         # path as a dict with a query list\n-        query = {\'path.query\': [\n-            \'/folder\',\n-            \'/folder2\']\n-        }\n+        query = {"path.query": ["/folder", "/folder2"]}\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search",\n+        )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\',\n-             u\'/folder2\',\n-             u\'/folder2/doc\'},\n-            set(result_paths(response.json())))\n+            {\n+                u"/folder",\n+                u"/folder/doc",\n+                u"/folder/other-document",\n+                u"/folder2",\n+                u"/folder2/doc",\n+            },\n+            set(result_paths(response.json())),\n+        )\n \n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n-        response = self.api_session.get(\'/@search?path.depth=1\')\n+        response = self.api_session.get("/@search?path.depth=1")\n         self.assertSetEqual(\n-            {u\'/plone/folder\',\n-             u\'/plone/folder2\',\n-             u\'/plone/doc-outside-folder\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/folder", u"/plone/folder2", u"/plone/doc-outside-folder"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_partial_metadata_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertDictContainsSubset(\n-            {u\'@id\': self.portal_url + u\'/folder/doc\',\n-             u\'title\': u\'Lorem Ipsum\',\n-             u\'portal_type\': u\'DXTestDocument\',\n-             u\'review_state\': u\'private\'},\n-            response.json()[\'items\'][0])\n+            {\n+                u"@id": self.portal_url + u"/folder/doc",\n+                u"title": u"Lorem Ipsum",\n+                u"portal_type": u"DXTestDocument",\n+                u"review_state": u"private",\n+            },\n+            response.json()["items"][0],\n+        )\n \n     def test_full_metadata_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\', \'metadata_fields\': \'_all\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": "lorem", "metadata_fields": "_all"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        first_item = response.json()[\'items\'][0]\n+        first_item = response.json()["items"][0]\n         self.assertDictContainsSubset(\n-            {u\'@id\': self.portal_url + u\'/folder/doc\',\n-             u\'Creator\': u\'test_user_1_\',\n-             u\'Description\': u\'\',\n-             u\'EffectiveDate\': u\'None\',\n-             u\'ExpirationDate\': u\'None\',\n-             u\'Subject\': [],\n-             u\'Title\': u\'Lorem Ipsum\',\n-             u\'Type\': u\'DX Test Document\',\n-             u\'UID\': u\'77779ffa110e45afb1ba502f75f77777\',\n-             u\'author_name\': None,\n-             u\'cmf_uid\': None,\n-             u\'commentators\': [],\n-             u\'description\': u\'\',\n-             u\'effective\': u\'1995-01-01T00:00:00+00:00\',\n-             u\'end\': None,\n-             u\'exclude_from_nav\': False,\n-             u\'expires\': u\'1999-01-01T00:00:00+00:00\',\n-             u\'getId\': u\'doc\',\n-             u\'getPath\': u\'/plone/folder/doc\',\n-             u\'getRemoteUrl\': None,\n-             u\'getURL\': self.portal_url + u\'/folder/doc\',\n-             u\'id\': u\'doc\',\n-             u\'in_response_to\': None,\n-             u\'is_folderish\': False,\n-             u\'last_comment_date\': None,\n-             u\'listCreators\': [u\'test_user_1_\'],\n-             u\'location\': None,\n-             u\'meta_type\': u\'Dexterity Item\',\n-             u\'portal_type\': u\'DXTestDocument\',\n-             u\'review_state\': u\'private\',\n-             u\'start\': u\'1950-01-01T00:00:00+00:00\',\n-             u\'sync_uid\': None,\n-             u\'title\': u\'Lorem Ipsum\',\n-             u\'total_comments\': 0},\n-            first_item)\n+            {\n+                u"@id": self.portal_url + u"/folder/doc",\n+                u"Creator": u"test_user_1_",\n+                u"Description": u"",\n+                u"EffectiveDate": u"None",\n+                u"ExpirationDate": u"None",\n+                u"Subject": [],\n+                u"Title": u"Lorem Ipsum",\n+                u"Type": u"DX Test Document",\n+                u"UID": u"77779ffa110e45afb1ba502f75f77777",\n+                u"author_name": None,\n+                u"cmf_uid": None,\n+                u"commentators": [],\n+                u"description": u"",\n+                u"effective": u"1995-01-01T00:00:00+00:00",\n+                u"end": None,\n+                u"exclude_from_nav": False,\n+                u"expires": u"1999-01-01T00:00:00+00:00",\n+                u"getId": u"doc",\n+                u"getPath": u"/plone/folder/doc",\n+                u"getRemoteUrl": None,\n+                u"getURL": self.portal_url + u"/folder/doc",\n+                u"id": u"doc",\n+                u"in_response_to": None,\n+                u"is_folderish": False,\n+                u"last_comment_date": None,\n+                u"listCreators": [u"test_user_1_"],\n+                u"location": None,\n+                u"meta_type": u"Dexterity Item",\n+                u"portal_type": u"DXTestDocument",\n+                u"review_state": u"private",\n+                u"start": u"1950-01-01T00:00:00+00:00",\n+                u"sync_uid": None,\n+                u"title": u"Lorem Ipsum",\n+                u"total_comments": 0,\n+            },\n+            first_item,\n+        )\n         # This value changed in Plone 5.2\n         # (Dexterity gained support for getObjSize)\n-        self.assertIn(first_item[u\'getObjSize\'], (u\'0 KB\', u\'1 KB\'))\n+        self.assertIn(first_item[u"getObjSize"], (u"0 KB", u"1 KB"))\n \n     def test_full_objects_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\'],\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+            "fullobjects": True,\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            u\'<p>Some Text</p>\',\n-            response.json()[\'items\'][0][\'test_richtext_field\'][\'data\'])\n+            u"<p>Some Text</p>",\n+            response.json()["items"][0]["test_richtext_field"]["data"],\n+        )\n         self.assertEqual(\n-            self.portal_url + u\'/folder/doc\',\n-            response.json()[\'items\'][0][\'@id\'])\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+        )\n \n     def test_full_objects_retrieval_discussion(self):\n         # Allow discussion\n@@ -292,83 +306,69 @@ def test_full_objects_retrieval_discussion(self):\n \n         transaction.commit()\n \n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n-        self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        url = "{}/@comments".format(self.doc.absolute_url())\n+        self.api_session.post(url, json={"text": "comment 1"})\n         transaction.commit()\n \n-        query = {\'portal_type\': \'Discussion Item\',\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"portal_type": "Discussion Item", "fullobjects": True}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n-            self.folder, u\'Collection\',\n-            id=\'collection\',\n+            self.folder, u"Collection", id="collection"\n         )\n         transaction.commit()\n \n-        query = {\'portal_type\': \'Collection\',\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"portal_type": "Collection", "fullobjects": True}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n \n     # ZCTextIndex\n \n     def test_fulltext_search(self):\n-        query = {\'SearchableText\': \'lorem\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": "lorem"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_fulltext_search_with_non_ascii_characters(self):\n-        query = {\'SearchableText\': u\'\\xfcbersicht\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": u"\\xfcbersicht"}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # KeywordIndex\n \n     def test_keyword_index_str_query(self):\n-        query = {\'test_list_field\': \'Keyword1\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field": "Keyword1"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_keyword_index_str_query_or(self):\n-        query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field": ["Keyword2", "Keyword3"]}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            result_paths(response.json()),\n         )\n \n     def test_keyword_index_str_query_and(self):\n         query = {\n-            \'test_list_field.query\': [\'Keyword1\', \'Keyword2\'],\n-            \'test_list_field.operator\': \'and\',\n+            "test_list_field.query": ["Keyword1", "Keyword2"],\n+            "test_list_field.operator": "and",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n@@ -376,240 +376,207 @@ def test_keyword_index_int_query(self):\n         self.doc.reindexObject()\n         transaction.commit()\n \n-        query = {\'test_list_field:int\': 42}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field:int": 42}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # BooleanIndex\n \n     def test_boolean_index_query(self):\n-        query = {\'test_bool_field\': True, \'portal_type\': \'DXTestDocument\'}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        query = {"test_bool_field": True, "portal_type": "DXTestDocument"}\n+        response = self.api_session.get("/folder/@search", params=query)\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n-        query = {\'test_bool_field\': False, \'portal_type\': \'DXTestDocument\'}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"test_bool_field": False, "portal_type": "DXTestDocument"}\n+        response = self.api_session.get("/folder/@search", params=query)\n         self.assertEqual(\n-            [u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # FieldIndex\n \n     def test_field_index_int_query(self):\n-        query = {\'test_int_field:int\': 42}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_int_field:int": 42}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_field_index_int_range_query(self):\n         query = {\n-            \'test_int_field.query:int\': [41, 43],\n-            \'test_int_field.range\': \'min:max\',\n+            "test_int_field.query:int": [41, 43],\n+            "test_int_field.range": "min:max",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # ExtendedPathIndex\n \n     def test_extended_path_index_query(self):\n-        query = {\'path\': \'/\'.join(self.folder.getPhysicalPath())}\n+        query = {"path": "/".join(self.folder.getPhysicalPath())}\n \n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            result_paths(response.json()),\n         )\n \n     def test_extended_path_index_query_multiple(self):\n         # path as a list\n-        query = {\'path\': [\n-                \'/\'.join(self.folder.getPhysicalPath()),\n-                \'/\'.join(self.folder2.getPhysicalPath())]\n+        query = {\n+            "path": [\n+                "/".join(self.folder.getPhysicalPath()),\n+                "/".join(self.folder2.getPhysicalPath()),\n+            ]\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\',\n-             u\'/plone/folder2\',\n-             u\'/plone/folder2/doc\'],\n-            result_paths(response.json())\n+            [\n+                u"/plone/folder",\n+                u"/plone/folder/doc",\n+                u"/plone/folder/other-document",\n+                u"/plone/folder2",\n+                u"/plone/folder2/doc",\n+            ],\n+            result_paths(response.json()),\n         )\n \n         # path as a dict with a query list\n-        query = {\'path.query\': [\n-                \'/\'.join(self.folder.getPhysicalPath()),\n-                \'/\'.join(self.folder2.getPhysicalPath())]\n+        query = {\n+            "path.query": [\n+                "/".join(self.folder.getPhysicalPath()),\n+                "/".join(self.folder2.getPhysicalPath()),\n+            ]\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\',\n-             u\'/plone/folder2\',\n-             u\'/plone/folder2/doc\'],\n-            result_paths(response.json())\n+            [\n+                u"/plone/folder",\n+                u"/plone/folder/doc",\n+                u"/plone/folder/other-document",\n+                u"/plone/folder2",\n+                u"/plone/folder2/doc",\n+            ],\n+            result_paths(response.json()),\n         )\n \n     def test_extended_path_index_depth_limiting(self):\n-        lvl1 = createContentInContainer(self.portal, u\'Folder\', id=u\'lvl1\')\n-        lvl2 = createContentInContainer(lvl1, u\'Folder\', id=u\'lvl2\')\n-        createContentInContainer(lvl2, u\'Folder\', id=u\'lvl3\')\n+        lvl1 = createContentInContainer(self.portal, u"Folder", id=u"lvl1")\n+        lvl2 = createContentInContainer(lvl1, u"Folder", id=u"lvl2")\n+        createContentInContainer(lvl2, u"Folder", id=u"lvl3")\n         transaction.commit()\n \n-        path = \'/plone/lvl1\'\n+        path = "/plone/lvl1"\n \n         # Depth 0 - only object identified by path\n-        query = {\'path.query\': path, \'path.depth\': 0}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path.query": path, "path.depth": 0}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/lvl1\'],\n-            result_paths(response.json()))\n+        self.assertEqual([u"/plone/lvl1"], result_paths(response.json()))\n \n         # Depth 1 - immediate children\n-        query = {\'path.query\': path, \'path.depth\': 1}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path.query": path, "path.depth": 1}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/lvl1/lvl2\'],\n-            result_paths(response.json()))\n+        self.assertEqual([u"/plone/lvl1/lvl2"], result_paths(response.json()))\n \n         # No depth - object itself and all children\n-        query = {\'path\': path}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path": path}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertSetEqual(\n-            {u\'/plone/lvl1\', u\'/plone/lvl1/lvl2\', u\'/plone/lvl1/lvl2/lvl3\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/lvl1", u"/plone/lvl1/lvl2", u"/plone/lvl1/lvl2/lvl3"},\n+            set(result_paths(response.json())),\n+        )\n \n     # DateIndex\n \n     def test_date_index_query(self):\n-        query = {\'start\': date(1950, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"start": date(1950, 1, 1).isoformat()}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_date_index_ranged_query(self):\n         query = {\n-            \'start.query\': [\n-                date(1949, 1, 1).isoformat(),\n-                date(1951, 1, 1).isoformat(),\n-            ],\n-            \'start.range\': \'min:max\',\n+            "start.query": [date(1949, 1, 1).isoformat(), date(1951, 1, 1).isoformat()],\n+            "start.range": "min:max",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # DateRangeIndex\n \n     def test_date_range_index_query(self):\n-        query = {\'effectiveRange\': date(1997, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"effectiveRange": date(1997, 1, 1).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n+            [u"/plone/folder", u"/plone/folder/doc"], result_paths(response.json())\n         )\n \n     # DateRecurringIndex\n \n     def test_date_recurring_index_query(self):\n         from datetime import datetime\n+\n         createContentInContainer(\n-            self.folder, u\'Event\', id=u\'event\',\n-            title=u\'Event\',\n+            self.folder,\n+            u"Event",\n+            id=u"event",\n+            title=u"Event",\n             start=datetime(2013, 1, 1, 0, 0),\n             end=datetime(2013, 1, 1, 23, 59),\n             whole_day=True,\n-            recurrence=\'FREQ=DAILY;COUNT=10;INTERVAL=2\',\n-            timezone=\'UTC\',\n+            recurrence="FREQ=DAILY;COUNT=10;INTERVAL=2",\n+            timezone="UTC",\n         )\n         import transaction\n+\n         transaction.commit()\n \n         # First occurrence\n-        query = {\'start\': date(2013, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 1).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # No event that day\n-        query = {\'start\': date(2013, 1, 2).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 2).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([], result_paths(response.json()))\n \n         # Second occurrence\n-        query = {\'start\': date(2013, 1, 3).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 3).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # Ranged query\n         query = {\n-            \'start.query\': [date(2013, 1, 1).isoformat(),\n-                            date(2013, 1, 5).isoformat()],\n-            \'start.range\': \'min:max\',\n+            "start.query": [date(2013, 1, 1).isoformat(), date(2013, 1, 5).isoformat()],\n+            "start.range": "min:max",\n         }\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n     # UUIDIndex\n \n     def test_uuid_index_query(self):\n-        IMutableUUID(self.doc).set(\'7777a074cb4240d08c9a129e3a837777\')\n+        IMutableUUID(self.doc).set("7777a074cb4240d08c9a129e3a837777")\n         self.doc.reindexObject()\n         transaction.commit()\n \n-        query = {\'UID\': \'7777a074cb4240d08c9a129e3a837777\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        query = {"UID": "7777a074cb4240d08c9a129e3a837777"}\n+        response = self.api_session.get("/@search", params=query)\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n \n class TestSearchATFunctional(unittest.TestCase):\n@@ -617,74 +584,77 @@ class TestSearchATFunctional(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # /plone/folder\n-        with api.env.adopt_roles([\'Manager\']):\n+        with api.env.adopt_roles(["Manager"]):\n             self.folder = api.content.create(\n-                type=u\'ATTestFolder\',\n-                id=u\'folder\',\n-                title=u\'Some Folder\',\n+                type=u"ATTestFolder",\n+                id=u"folder",\n+                title=u"Some Folder",\n                 container=self.portal,\n             )\n \n             # /plone/folder/doc\n             self.doc = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                id=\'doc\',\n-                title=u\'Lorem Ipsum\',\n+                type=u"ATTestDocument",\n+                id="doc",\n+                title=u"Lorem Ipsum",\n                 start=DateTime(1950, 1, 1, 0, 0),\n                 effective=DateTime(1995, 1, 1, 0, 0),\n                 expires=DateTime(1999, 1, 1, 0, 0),\n                 testIntegerField=42,\n-                testLinesField=[\'Keyword1\', \'Keyword2\', \'Keyword3\'],\n+                testLinesField=["Keyword1", "Keyword2", "Keyword3"],\n                 testBooleanField=True,\n-                testTextField=u\'<p>Some Text</p>\',\n+                testTextField=u"<p>Some Text</p>",\n             )\n \n             # /plone/folder/other-document\n             self.doc2 = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                id=\'other-document\',\n-                title=u\'Other Document\',\n-                description=u\'\\xdcbersicht\',\n+                type=u"ATTestDocument",\n+                id="other-document",\n+                title=u"Other Document",\n+                description=u"\\xdcbersicht",\n                 start=DateTime(1975, 1, 1, 0, 0),\n                 effective=DateTime(2015, 1, 1, 0, 0),\n                 expires=DateTime(2020, 1, 1, 0, 0),\n-                testLinesField=[\'Keyword2\', \'Keyword3\'],\n+                testLinesField=["Keyword2", "Keyword3"],\n                 testBooleanField=False,\n             )\n \n             # /plone/doc-outside-folder\n             api.content.create(\n                 container=self.portal,\n-                type=u\'ATTestDocument\',\n-                id=\'doc-outside-folder\',\n-                title=u\'Doc outside folder\',\n+                type=u"ATTestDocument",\n+                id="doc-outside-folder",\n+                title=u"Doc outside folder",\n             )\n \n         transaction.commit()\n \n     def test_full_objects_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\'],\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+            "fullobjects": True,\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            {u\'data\': u\' Some Text \', u\'content-type\': u\'text/plain\'},\n-            response.json()[\'items\'][0][\'testTextField\'])\n+            {u"data": u" Some Text ", u"content-type": u"text/plain"},\n+            response.json()["items"][0]["testTextField"],\n+        )\n         self.assertEqual(\n-            self.portal_url + u\'/folder/doc\',\n-            response.json()[\'items\'][0][\'@id\'])\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+        )\ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex 65a92378..7de60ce9 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -5,36 +5,22 @@\n \n \n class TestUnflattenDottedDict(unittest.TestCase):\n-\n     def test_unflattens_dotted_dict(self):\n-        dct = {\n-            \'a.b.X\': 1,\n-            \'a.b.Y\': 2,\n-            \'a.foo\': 3,\n-            \'bar\': 4,\n-        }\n+        dct = {"a.b.X": 1, "a.b.Y": 2, "a.foo": 3, "bar": 4}\n         self.assertEqual(\n-            {\'a\': {\'b\': {\'X\': 1,\n-                         \'Y\': 2},\n-                   \'foo\': 3},\n-             \'bar\': 4},\n-            unflatten_dotted_dict(dct)\n+            {"a": {"b": {"X": 1, "Y": 2}, "foo": 3}, "bar": 4},\n+            unflatten_dotted_dict(dct),\n         )\n \n     def test_works_on_empty_dict(self):\n         self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n-        dct = {\n-            \'path.query\': [\'foo\', \'bar\'],\n-            \'path.depth\': 2,\n-        }\n+        dct = {"path.query": ["foo", "bar"], "path.depth": 2}\n         self.assertEqual(\n-            {\'path\': {\'query\': [\'foo\', \'bar\'],\n-                      \'depth\': 2}},\n-            unflatten_dotted_dict(dct)\n+            {"path": {"query": ["foo", "bar"], "depth": 2}}, unflatten_dotted_dict(dct)\n         )\n \n     def test_leaves_regular_keys_untouched(self):\n-        dct = {\'foo\': 1, \'bar\': 2}\n+        dct = {"foo": 1, "bar": 2}\n         self.assertEqual(dct, unflatten_dotted_dict(dct))\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 6d1748e1..2b529399 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -22,401 +22,333 @@ class TestSerializeToJsonAdapter(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.workflowTool = getToolByName(self.portal, "portal_workflow")\n         self.portal_url = self.portal.absolute_url()\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\', title=\'Document 1\')\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=\'dxdoc\',\n-            title=\'DX Test Document\'\n+            "DXTestDocument", id="dxdoc", title="DX Test Document"\n         )\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'@id\'],\n-            self.portal_url + \'/doc1\'\n+            self.serialize(self.portal.doc1)["@id"], self.portal_url + "/doc1"\n         )\n \n     def test_serialize_returns_type(self):\n         self.assertTrue(\n-            self.serialize(self.portal.doc1).get(\'@type\'),\n-            \'The @type attribute should be present.\'\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'@type\'],\n-            u\'Document\'\n+            self.serialize(self.portal.doc1).get("@type"),\n+            "The @type attribute should be present.",\n         )\n+        self.assertEqual(self.serialize(self.portal.doc1)["@type"], u"Document")\n \n     def test_serialize_returns_title(self):\n-        self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'title\'],\n-            u\'Document 1\'\n-        )\n+        self.assertEqual(self.serialize(self.portal.doc1)["title"], u"Document 1")\n \n     def test_serialize_can_read_as_manager(self):\n-        self.portal.dxdoc.test_read_permission_field = u\'Test Read Permission\'\n-        self.workflowTool.doActionFor(self.portal.dxdoc, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n+        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.assertIn(\n-            \'Test Read Permission\',\n-            list(self.serialize(self.portal.dxdoc).values())\n+            "Test Read Permission", list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n-        self.portal.dxdoc.test_read_permission_field = u\'Test Read Permission\'\n-        self.workflowTool.doActionFor(self.portal.dxdoc, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertNotIn(\n-            \'Test Read Permission\',\n-            list(self.serialize(self.portal.dxdoc).values())\n+            "Test Read Permission", list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\n-        self.portal.doc1.description = u\'This is a document\'\n+        self.portal.doc1.description = u"This is a document"\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'description\'],\n-            u\'This is a document\'\n+            self.serialize(self.portal.doc1)["description"], u"This is a document"\n         )\n \n     def test_serialize_returns_rich_text(self):\n         self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum.",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum.", "text/plain", "text/html"\n         )\n         self.assertEqual(\n-            self.serialize(self.portal.doc1).get(\'text\'),\n-            {u\'data\': u\'<p>Lorem ipsum.</p>\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'encoding\': u\'utf-8\'}\n+            self.serialize(self.portal.doc1).get("text"),\n+            {\n+                u"data": u"<p>Lorem ipsum.</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n+            },\n         )\n \n     def test_serialize_returns_effective(self):\n-        self.portal.doc1.setEffectiveDate(DateTime(\'2014/04/04\'))\n+        self.portal.doc1.setEffectiveDate(DateTime("2014/04/04"))\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'effective\'],\n-            \'2014-04-04T00:00:00\'\n+            self.serialize(self.portal.doc1)["effective"], "2014-04-04T00:00:00"\n         )\n \n     def test_serialize_returns_expires(self):\n-        self.portal.doc1.setExpirationDate(DateTime(\'2017/01/01\'))\n+        self.portal.doc1.setExpirationDate(DateTime("2017/01/01"))\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'expires\'],\n-            \'2017-01-01T00:00:00\'\n+            self.serialize(self.portal.doc1)["expires"], "2017-01-01T00:00:00"\n         )\n \n     def test_serialize_on_folder_returns_items_attr(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\', title=\'Folder 1\')\n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.folder1.doc1.title = u\'Document 1\'\n-        self.portal.folder1.doc1.description = u\'This is a document\'\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1")\n+        self.portal.folder1.doc1.title = u"Document 1"\n+        self.portal.folder1.doc1.description = u"This is a document"\n         self.portal.folder1.doc1.reindexObject()\n         self.assertEqual(\n-            self.serialize(self.portal.folder1)[\'items\'],\n+            self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'This is a document\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/folder1/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"This is a document",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 }\n-            ]\n+            ],\n         )\n \n-    def test_serialize_folder_orders_items_by_get_object_position_in_parent(self):  # noqa\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\', title=\'Folder 1\')\n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.folder1.doc1.title = u\'Document 1\'\n-        self.portal.folder1.doc1.description = u\'This is a document\'\n+    def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1")\n+        self.portal.folder1.doc1.title = u"Document 1"\n+        self.portal.folder1.doc1.description = u"This is a document"\n         self.portal.folder1.doc1.reindexObject()\n \n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc2\')\n-        self.portal.folder1.doc2.title = u\'Document 2\'\n-        self.portal.folder1.doc2.description = u\'Second doc\'\n+        self.portal.folder1.invokeFactory("Document", id="doc2")\n+        self.portal.folder1.doc2.title = u"Document 2"\n+        self.portal.folder1.doc2.description = u"Second doc"\n         self.portal.folder1.doc2.reindexObject()\n \n         # Change GOPIP (getObjectPositionInParent) based order\n-        self.portal.folder1.moveObjectsUp(\'doc2\')\n+        self.portal.folder1.moveObjectsUp("doc2")\n \n         self.assertEqual(\n-            self.serialize(self.portal.folder1)[\'items\'],\n+            self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc2\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'Second doc\',\n-                    u\'title\': u\'Document 2\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/folder1/doc2",\n+                    u"@type": u"Document",\n+                    u"description": u"Second doc",\n+                    u"title": u"Document 2",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'This is a document\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n-                }\n-            ]\n+                    u"@id": u"http://nohost/plone/folder1/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"This is a document",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n+                },\n+            ],\n         )\n \n     def test_serialize_returns_parent(self):\n         self.assertTrue(\n-            self.serialize(self.portal.doc1).get(\'parent\'),\n-            \'The parent attribute should be present.\'\n+            self.serialize(self.portal.doc1).get("parent"),\n+            "The parent attribute should be present.",\n         )\n         self.assertEqual(\n             {\n-                \'@id\': self.portal.absolute_url(),\n-                \'@type\': self.portal.portal_type,\n-                \'title\': self.portal.title,\n-                \'description\': self.portal.description\n+                "@id": self.portal.absolute_url(),\n+                "@type": self.portal.portal_type,\n+                "title": self.portal.title,\n+                "description": self.portal.description,\n             },\n-            self.serialize(self.portal.doc1)[\'parent\']\n+            self.serialize(self.portal.doc1)["parent"],\n         )\n \n     def test_serialize_does_not_returns_parent_on_root(self):\n         self.assertEqual(\n             {},\n-            self.serialize(self.portal).get(\'parent\'),\n-            \'The parent attribute should be present, even on portal root.\'\n+            self.serialize(self.portal).get("parent"),\n+            "The parent attribute should be present, even on portal root.",\n         )\n         self.assertEqual(\n             {\n-                \'@id\': self.portal.absolute_url(),\n-                \'@type\': self.portal.portal_type,\n-                \'title\': self.portal.title,\n-                \'description\': self.portal.description\n+                "@id": self.portal.absolute_url(),\n+                "@type": self.portal.portal_type,\n+                "title": self.portal.title,\n+                "description": self.portal.description,\n             },\n-            self.serialize(self.portal.doc1)[\'parent\'],\n-            \'The parent attribute on portal root should be None\'\n+            self.serialize(self.portal.doc1)["parent"],\n+            "The parent attribute on portal root should be None",\n         )\n \n     def test_serialize_returns_site_root_type(self):\n         self.assertTrue(\n-            self.serialize(self.portal).get(\'@type\'),\n-            \'The @type attribute should be present.\'\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'@type\'],\n-            u\'Plone Site\'\n+            self.serialize(self.portal).get("@type"),\n+            "The @type attribute should be present.",\n         )\n+        self.assertEqual(self.serialize(self.portal)["@type"], u"Plone Site")\n \n     def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  # noqa\n         # Change GOPIP (getObjectPositionInParent) based order\n-        self.portal.moveObjectsUp(\'dxdoc\')\n+        self.portal.moveObjectsUp("dxdoc")\n \n         self.assertEqual(\n-            self.serialize(self.portal)[\'items\'],\n+            self.serialize(self.portal)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/dxdoc\',\n-                    u\'@type\': u\'DXTestDocument\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'DX Test Document\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/dxdoc",\n+                    u"@type": u"DXTestDocument",\n+                    u"description": u"",\n+                    u"title": u"DX Test Document",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': u\'http://nohost/plone/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 },\n-            ]\n+            ],\n         )\n \n     def test_serialize_ignores_underscore_values(self):\n-        self.assertFalse(\n-            \'__name__\' in self.serialize(self.portal.doc1)\n-        )\n-        self.assertFalse(\n-            \'manage_options\' in self.serialize(self.portal.doc1)\n-        )\n+        self.assertFalse("__name__" in self.serialize(self.portal.doc1))\n+        self.assertFalse("manage_options" in self.serialize(self.portal.doc1))\n \n     def test_serialize_file(self):\n-        self.portal.invokeFactory(\'File\', id=\'file1\', title=\'File 1\')\n+        self.portal.invokeFactory("File", id="file1", title="File 1")\n         self.portal.file1.file = NamedFile(\n-            data=u\'Spam and eggs\',\n-            contentType=u\'text/plain\',\n-            filename=u\'test.txt\')\n+            data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+        )\n \n         file_url = self.portal.file1.absolute_url()\n-        download_url = \'{0}/@@download/file\'.format(file_url)\n+        download_url = "{0}/@@download/file".format(file_url)\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'download\': download_url,\n-             u\'size\': 13},\n-            self.serialize(self.portal.file1).get(\'file\')\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"download": download_url,\n+                u"size": 13,\n+            },\n+            self.serialize(self.portal.file1).get("file"),\n         )\n \n     def test_serialize_empty_file_returns_none(self):\n-        self.portal.invokeFactory(\'File\', id=\'file1\', title=\'File 1\')\n+        self.portal.invokeFactory("File", id="file1", title="File 1")\n \n-        self.assertEqual(None, self.serialize(self.portal.file1).get(\'file\'))\n+        self.assertEqual(None, self.serialize(self.portal.file1).get("file"))\n \n     def test_serialize_image(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="image1", title="Image 1")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n \n         self.maxDiff = 99999\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             obj_url = self.portal.image1.absolute_url()\n-            scale_url_uuid = \'uuid_1\'\n-            download_url = u\'{}/@@images/{}.png\'.format(\n-                obj_url, scale_url_uuid\n-            )\n+            scale_url_uuid = "uuid_1"\n+            download_url = u"{}/@@images/{}.png".format(obj_url, scale_url_uuid)\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 4},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 8},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 16},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 33},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 52},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 215,\n-                    u\'height\': 56},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 215,\n-                    u\'height\': 56},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 4},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 8},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 16},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 33},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 52},\n+                u"preview": {u"download": download_url, u"width": 215, u"height": 56},\n+                u"large": {u"download": download_url, u"width": 215, u"height": 56},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'image.png\',\n-                u\'content-type\': u\'image/png\',\n-                u\'size\': 1185,\n-                u\'download\': download_url,\n-                u\'width\': 215,\n-                u\'height\': 56,\n-                u\'scales\': scales},\n-                self.serialize(self.portal.image1)[\'image\'])\n+            self.assertEqual(\n+                {\n+                    u"filename": u"image.png",\n+                    u"content-type": u"image/png",\n+                    u"size": 1185,\n+                    u"download": download_url,\n+                    u"width": 215,\n+                    u"height": 56,\n+                    u"scales": scales,\n+                },\n+                self.serialize(self.portal.image1)["image"],\n+            )\n \n     def test_serialize_empty_image_returns_none(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        self.assertEqual(None, self.serialize(self.portal.image1)[\'image\'])\n+        self.portal.invokeFactory("Image", id="image1", title="Image 1")\n+        self.assertEqual(None, self.serialize(self.portal.image1)["image"])\n \n     def test_serialize_to_json_collection(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection1\')\n-        self.portal.collection1.title = \'My Collection\'\n-        self.portal.collection1.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection1.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n+        self.portal.invokeFactory("Collection", id="collection1")\n+        self.portal.collection1.title = "My Collection"\n+        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n         self.portal.doc1.reindexObject()\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u\'Collection\',\n-            self.serialize(self.portal.collection1).get(\'@type\')\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u\'Collection\',\n-            self.serialize(self.portal.collection1).get(\'@type\')\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal.doc1.absolute_url(),\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": self.portal.doc1.absolute_url(),\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': self.portal.doc2.absolute_url(),\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 2\',\n-                    u\'review_state\': u\'private\'\n-                }\n+                    u"@id": self.portal.doc2.absolute_url(),\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 2",\n+                    u"review_state": u"private",\n+                },\n             ],\n-            self.serialize(self.portal.collection1).get(\'items\')\n+            self.serialize(self.portal.collection1).get("items"),\n         )\n \n     def test_serialize_returns_site_root_common(self):\n-        self.assertIn(\n-            \'title\',\n-            self.serialize(self.portal),\n-        )\n-        self.assertIn(\n-            \'description\',\n-            self.serialize(self.portal)\n-        )\n+        self.assertIn("title", self.serialize(self.portal))\n+        self.assertIn("description", self.serialize(self.portal))\n \n     def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles\'],\n-            {}\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles_layout\'],\n-            {}\n-        )\n+        self.assertEqual(self.serialize(self.portal)["tiles"], {})\n+        self.assertEqual(self.serialize(self.portal)["tiles_layout"], {})\n \n     def test_serialize_returns_site_root_opt_in_tiles_present(self):\n         tiles = {\n-            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n-                "@type": "description"\n-            },\n-            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n-                "@type": "title"\n-            }\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n         tiles_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n-                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n             ]\n         }\n+        self.portal.manage_addProperty("tiles", json.dumps(tiles), "string")\n         self.portal.manage_addProperty(\n-            \'tiles\', json.dumps(tiles), \'string\')\n-        self.portal.manage_addProperty(\n-            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n-\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles\'],\n-            tiles\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles_layout\'],\n-            tiles_layout\n+            "tiles_layout", json.dumps(tiles_layout), "string"\n         )\n+\n+        self.assertEqual(self.serialize(self.portal)["tiles"], tiles)\n+        self.assertEqual(self.serialize(self.portal)["tiles_layout"], tiles_layout)\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a873dd8a..e8c64311 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -19,158 +19,173 @@ class TestCatalogSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         # /plone/my-folder\n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            title=u\'My Folder\')\n+            self.portal, u"Folder", title=u"My Folder"\n+        )\n \n         # /plone/my-folder/my-document\n         self.doc = createContentInContainer(\n-            self.folder, u\'Document\',\n+            self.folder,\n+            u"Document",\n             creation_date=DateTime(2015, 12, 31, 23, 45),\n-            title=u\'My Document\')\n+            title=u"My Document",\n+        )\n \n-        IMutableUUID(self.doc).set(\'77779ffa110e45afb1ba502f75f77777\')\n+        IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n         self.doc.reindexObject()\n \n     def test_lazy_cat_serialization_empty_resultset(self):\n         # Force an empty resultset (Products.ZCatalog.Lazy.LazyCat)\n-        lazy_cat = self.catalog(path=\'doesnt-exist\')\n+        lazy_cat = self.catalog(path="doesnt-exist")\n         results = getMultiAdapter((lazy_cat, self.request), ISerializeToJson)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost\', \'items\': [], \'items_total\': 0},\n-            results)\n+            {"@id": "http://nohost", "items": [], "items_total": 0}, results\n+        )\n \n     def test_lazy_map_serialization(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n         lazy_map = self.catalog()\n         results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 2}, results)\n-        self.assertEqual(2, len(results[\'items\']))\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 2}, results)\n+        self.assertEqual(2, len(results["items"]))\n \n     def test_lazy_map_serialization_with_fullobjects(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n-        results = getMultiAdapter(\n-            (lazy_map, self.request), ISerializeToJson)(fullobjects=True)\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)(\n+            fullobjects=True\n+        )\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 1}, results)\n-        self.assertEqual(1, len(results[\'items\']))\n-        result_item = results[\'items\'][0]\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 1}, results)\n+        self.assertEqual(1, len(results["items"]))\n+        result_item = results["items"][0]\n \n-        self.assertDictContainsSubset({\n-            \'@id\': \'http://nohost/plone/my-folder/my-document\',\n-            \'@type\': \'Document\',\n-            u\'changeNote\': u\'\',\n-            u\'contributors\': [],\n-            u\'creators\': [u\'test_user_1_\'],\n-            u\'description\': u\'\',\n-            u\'effective\': None,\n-            u\'exclude_from_nav\': False,\n-            u\'expires\': None,\n-            \'id\': u\'my-document\',\n-            \'is_folderish\': False,\n-            u\'language\': u\'\',\n-            \'layout\': \'document_view\',\n-            \'parent\': {\n-                u\'@id\': u\'http://nohost/plone/my-folder\',\n-                u\'@type\': u\'Folder\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'private\',\n-                u\'title\': u\'My Folder\'},\n-            u\'relatedItems\': [],\n-            \'review_state\': \'private\',\n-            u\'rights\': u\'\',\n-            u\'subjects\': [],\n-            u\'table_of_contents\': None,\n-            u\'text\': None,\n-            u\'title\': u\'My Document\',\n-            \'version\': \'current\'},\n-            result_item)\n+        self.assertDictContainsSubset(\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                u"changeNote": u"",\n+                u"contributors": [],\n+                u"creators": [u"test_user_1_"],\n+                u"description": u"",\n+                u"effective": None,\n+                u"exclude_from_nav": False,\n+                u"expires": None,\n+                "id": u"my-document",\n+                "is_folderish": False,\n+                u"language": u"",\n+                "layout": "document_view",\n+                "parent": {\n+                    u"@id": u"http://nohost/plone/my-folder",\n+                    u"@type": u"Folder",\n+                    u"description": u"",\n+                    u"review_state": u"private",\n+                    u"title": u"My Folder",\n+                },\n+                u"relatedItems": [],\n+                "review_state": "private",\n+                u"rights": u"",\n+                u"subjects": [],\n+                u"table_of_contents": None,\n+                u"text": None,\n+                u"title": u"My Document",\n+                "version": "current",\n+            },\n+            result_item,\n+        )\n \n     def test_brain_summary_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        result = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'@type\': \'Document\',\n-             \'title\': \'My Document\',\n-             \'description\': \'\',\n-             \'review_state\': \'private\'},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                "title": "My Document",\n+                "description": "",\n+                "review_state": "private",\n+            },\n+            result,\n+        )\n \n     def test_brain_partial_metadata_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request),\n-            ISerializeToJson)(metadata_fields=[\'portal_type\', \'review_state\'])\n+        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+            metadata_fields=["portal_type", "review_state"]\n+        )\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'@type\': \'Document\',\n-             \'title\': \'My Document\',\n-             \'description\': \'\',\n-             \'portal_type\': u\'Document\',\n-             \'review_state\': u\'private\'},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                "title": "My Document",\n+                "description": "",\n+                "portal_type": u"Document",\n+                "review_state": u"private",\n+            },\n+            result,\n+        )\n \n     def test_brain_full_metadata_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request),\n-            ISerializeToJson)(metadata_fields=[\'_all\'])\n+        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+            metadata_fields=["_all"]\n+        )\n \n         self.assertDictContainsSubset(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'Creator\': u\'test_user_1_\',\n-             \'Description\': u\'\',\n-             \'EffectiveDate\': u\'None\',\n-             \'ExpirationDate\': u\'None\',\n-             \'Subject\': [],\n-             \'Title\': u\'My Document\',\n-             \'Type\': u\'Page\',\n-             \'UID\': u\'77779ffa110e45afb1ba502f75f77777\',\n-             \'author_name\': None,\n-             \'cmf_uid\': 1,\n-             \'commentators\': [],\n-             \'created\': u\'2015-12-31T23:45:00+00:00\',\n-             \'description\': \'\',\n-             \'effective\': u\'1969-12-31T00:00:00+00:00\',\n-             \'end\': None,\n-             \'exclude_from_nav\': False,\n-             \'expires\': u\'2499-12-31T00:00:00+00:00\',\n-             \'getId\': u\'my-document\',\n-             \'getObjSize\': u\'0 KB\',\n-             \'getPath\': \'/plone/my-folder/my-document\',\n-             \'getRemoteUrl\': None,\n-             \'getURL\': \'http://nohost/plone/my-folder/my-document\',\n-             \'id\': u\'my-document\',\n-             \'in_response_to\': None,\n-             \'is_folderish\': False,\n-             \'last_comment_date\': None,\n-             \'listCreators\': [u\'test_user_1_\'],\n-             \'location\': None,\n-             \'meta_type\': u\'Dexterity Item\',\n-             \'portal_type\': u\'Document\',\n-             \'review_state\': u\'private\',\n-             \'start\': None,\n-             \'sync_uid\': None,\n-             \'title\': \'My Document\',\n-             \'total_comments\': 0},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "Creator": u"test_user_1_",\n+                "Description": u"",\n+                "EffectiveDate": u"None",\n+                "ExpirationDate": u"None",\n+                "Subject": [],\n+                "Title": u"My Document",\n+                "Type": u"Page",\n+                "UID": u"77779ffa110e45afb1ba502f75f77777",\n+                "author_name": None,\n+                "cmf_uid": 1,\n+                "commentators": [],\n+                "created": u"2015-12-31T23:45:00+00:00",\n+                "description": "",\n+                "effective": u"1969-12-31T00:00:00+00:00",\n+                "end": None,\n+                "exclude_from_nav": False,\n+                "expires": u"2499-12-31T00:00:00+00:00",\n+                "getId": u"my-document",\n+                "getObjSize": u"0 KB",\n+                "getPath": "/plone/my-folder/my-document",\n+                "getRemoteUrl": None,\n+                "getURL": "http://nohost/plone/my-folder/my-document",\n+                "id": u"my-document",\n+                "in_response_to": None,\n+                "is_folderish": False,\n+                "last_comment_date": None,\n+                "listCreators": [u"test_user_1_"],\n+                "location": None,\n+                "meta_type": u"Dexterity Item",\n+                "portal_type": u"Document",\n+                "review_state": u"private",\n+                "start": None,\n+                "sync_uid": None,\n+                "title": "My Document",\n+                "total_comments": 0,\n+            },\n+            result,\n+        )\n \n \n class TestCatalogATSerializers(unittest.TestCase):\n@@ -179,82 +194,85 @@ class TestCatalogATSerializers(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n-        with api.env.adopt_roles([\'Manager\']):\n+        with api.env.adopt_roles(["Manager"]):\n             # /plone/my-folder\n             self.folder = api.content.create(\n-                container=self.portal,\n-                type=u\'ATTestFolder\',\n-                title=u\'My Folder\')\n+                container=self.portal, type=u"ATTestFolder", title=u"My Folder"\n+            )\n \n             # /plone/my-folder/my-document\n             self.doc = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                testTextField=\'My content\',\n+                type=u"ATTestDocument",\n+                testTextField="My content",\n                 testIntegerField=42,\n-                title=u\'My Document\')\n+                title=u"My Document",\n+            )\n \n     def test_lazy_map_serialization_with_fullobjects(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n-        results = getMultiAdapter(\n-            (lazy_map, self.request), ISerializeToJson)(fullobjects=True)\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)(\n+            fullobjects=True\n+        )\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 1}, results)\n-        self.assertEqual(1, len(results[\'items\']))\n-        result_item = results[\'items\'][0]\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 1}, results)\n+        self.assertEqual(1, len(results["items"]))\n+        result_item = results["items"][0]\n \n-        self.assertDictContainsSubset({\n-            \'@id\': \'http://nohost/plone/my-folder/my-document\',\n-            \'@type\': \'ATTestDocument\',\n-            \'contributors\': [],\n-            \'creators\': [u\'test_user_1_\'],\n-            \'description\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'effectiveDate\': None,\n-            \'excludeFromNav\': False,\n-            \'expirationDate\': None,\n-            \'id\': u\'my-document\',\n-            \'is_folderish\': False,\n-            \'language\': u\'en\',\n-            \'layout\': \'base_view\',\n-            \'location\': u\'\',\n-            \'parent\': {\n-                u\'@id\': u\'http://nohost/plone/my-folder\',\n-                u\'@type\': u\'ATTestFolder\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'private\',\n-                u\'title\': u\'My Folder\'},\n-            \'relatedItems\': [],\n-            \'review_state\': \'private\',\n-            \'rights\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'subject\': [],\n-            \'tableContents\': False,\n-            \'testBlobImageField\': None,\n-            \'testBooleanField\': False,\n-            \'testDateTimeField\': None,\n-            \'testFixedPointField\': None,\n-            \'testFloatField\': None,\n-            \'testImageField\': None,\n-            \'testIntegerField\': 42,\n-            \'testLinesField\': [],\n-            \'testMVReferenceField\': [],\n-            \'testQueryField\': [],\n-            \'testReadonlyField\': u\'\',\n-            \'testReferenceField\': None,\n-            \'testRequiredField\': u\'\',\n-            \'testStringField\': u\'\',\n-            \'testTextField\': {\n-                \'content-type\': u\'text/plain\',\n-                \'data\': u\'My content\'},\n-            \'testURLField\': u\'\',\n-            \'testWritePermissionField\': u\'\',\n-            \'text\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'title\': u\'My Document\'},\n-            result_item)\n+        self.assertDictContainsSubset(\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "ATTestDocument",\n+                "contributors": [],\n+                "creators": [u"test_user_1_"],\n+                "description": {"content-type": u"text/plain", "data": u""},\n+                "effectiveDate": None,\n+                "excludeFromNav": False,\n+                "expirationDate": None,\n+                "id": u"my-document",\n+                "is_folderish": False,\n+                "language": u"en",\n+                "layout": "base_view",\n+                "location": u"",\n+                "parent": {\n+                    u"@id": u"http://nohost/plone/my-folder",\n+                    u"@type": u"ATTestFolder",\n+                    u"description": u"",\n+                    u"review_state": u"private",\n+                    u"title": u"My Folder",\n+                },\n+                "relatedItems": [],\n+                "review_state": "private",\n+                "rights": {"content-type": u"text/plain", "data": u""},\n+                "subject": [],\n+                "tableContents": False,\n+                "testBlobImageField": None,\n+                "testBooleanField": False,\n+                "testDateTimeField": None,\n+                "testFixedPointField": None,\n+                "testFloatField": None,\n+                "testImageField": None,\n+                "testIntegerField": 42,\n+                "testLinesField": [],\n+                "testMVReferenceField": [],\n+                "testQueryField": [],\n+                "testReadonlyField": u"",\n+                "testReferenceField": None,\n+                "testRequiredField": u"",\n+                "testStringField": u"",\n+                "testTextField": {"content-type": u"text/plain", "data": u"My content"},\n+                "testURLField": u"",\n+                "testWritePermissionField": u"",\n+                "text": {"content-type": u"text/plain", "data": u""},\n+                "title": u"My Document",\n+            },\n+            result_item,\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 289fee0c..d53d5dec 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -23,56 +23,54 @@ class TestJsonCompatibleConverters(TestCase):\n \n     def test_None(self):\n         self.assertEqual(None, json_compatible(None))\n-        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual("null", json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n-        err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n+        err_regex = (\n+            r"^No converter for making <object object at [^>]*>"\n+            + r" \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$"\n+        )\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n-            json_compatible({\'foo\': [object()]})\n+            json_compatible({"foo": [object()]})\n \n     def test_True(self):\n         self.assertEqual(True, json_compatible(True))\n-        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual("true", json.dumps(json_compatible(True)))\n \n     def test_False(self):\n         self.assertEqual(False, json_compatible(False))\n-        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual("false", json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n-        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u"foo", json_compatible(u"foo"))\n+        self.assertIsInstance(json_compatible(u"foo"), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(u"Hall\\xf6chen", json_compatible(u"Hall\\xf6chen"))\n         self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\',\n-            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible(u"Hall\\xf6chen"))\n         )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n-        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u"foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\',\n-            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n-        )\n+        self.assertEqual(u"Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n+        self.assertEqual(\'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\xc3\xb6chen")))\n \n     def test_int(self):\n         self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual("42", json.dumps(json_compatible(42)))\n \n     def test_long(self):\n         def _long(val):\n@@ -80,124 +78,114 @@ def _long(val):\n                 return int(val)\n             else:\n                 return int(val)\n+\n         self.assertEqual(_long(10), json_compatible(_long(10)))\n         self.assertIsInstance(json_compatible(_long(10)), int)\n-        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n+        self.assertEqual("10", json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n         self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual("1.4", json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n-        self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              six.text_type,\n-                              \'List values should be converted recursively.\')\n+        self.assertEqual(["foo"], json_compatible(["foo"]))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(["foo"])))\n+        self.assertIsInstance(\n+            json_compatible(["foo"])[0],\n+            six.text_type,\n+            "List values should be converted recursively.",\n+        )\n \n     def test_persistent_list(self):\n-        value = PersistentList([\'foo\'])\n-        self.assertEqual([\'foo\'], json_compatible(value))\n+        value = PersistentList(["foo"])\n+        self.assertEqual(["foo"], json_compatible(value))\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value)[0],\n-                              six.text_type,\n-                              \'PersistentList values should be converted\'\n-                              \' recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(value)[0],\n+            six.text_type,\n+            "PersistentList values should be converted" " recursively.",\n+        )\n \n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n-        self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              six.text_type,\n-                              \'Tuple values should be converted recursively.\')\n+        self.assertEqual(["foo", None], json_compatible(("foo", None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(("foo",))))\n+        self.assertIsInstance(\n+            json_compatible(("foo",))[0],\n+            six.text_type,\n+            "Tuple values should be converted recursively.",\n+        )\n \n     def test_frozenset(self):\n         self.assertEqual(\n-            [[1, 1], [2, 2]],\n-            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+            [[1, 1], [2, 2]], sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n         )\n \n     def test_set(self):\n         self.assertEqual(\n-            [[1, 1], [2, 2]],\n-            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+            [[1, 1], [2, 2]], sorted(json_compatible(set([(1, 1), (2, 2)])))\n         )\n \n     def test_dict(self):\n         self.assertEqual(\n-            {\n-                u\'foo\': True,\n-                u\'bar\': None,\n-                u\'baz\': 3\n-            },\n-            json_compatible(\n-                {\n-                    \'foo\': True,\n-                    \'bar\': None,\n-                    \'baz\': 3\n-                }\n-            )\n+            {u"foo": True, u"bar": None, u"baz": 3},\n+            json_compatible({"foo": True, "bar": None, "baz": 3}),\n         )\n-        self.assertEqual(\n-            \'{"foo": "bar"}\',\n-            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible({"foo": "bar"})))\n+        self.assertIsInstance(\n+            json_compatible(list({"foo": "bar"})[0]),\n+            six.text_type,\n+            "Dict keys should be converted recursively.",\n         )\n-        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n-                              six.text_type,\n-                              \'Dict keys should be converted recursively.\')\n         self.assertIsInstance(\n-            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            json_compatible(list({"foo": "bar"}.values())[0]),\n             six.text_type,\n-            \'Dict values should be converted recursively.\')\n+            "Dict values should be converted recursively.",\n+        )\n \n     def test_dict_empty(self):\n         self.assertEqual({}, json_compatible({}))\n-        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual("{}", json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n-        value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        value = PersistentMapping({"foo": "bar"})\n+        self.assertEqual({u"foo": u"bar"}, json_compatible(value))\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(list(value)[0]),\n-                              six.text_type,\n-                              \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(list(value.values())[0]),\n-                              six.text_type,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list(value)[0]),\n+            six.text_type,\n+            "Dict keys should be converted recursively.",\n+        )\n+        self.assertIsInstance(\n+            json_compatible(list(value.values())[0]),\n+            six.text_type,\n+            "Dict values should be converted recursively.",\n+        )\n \n     def test_python_datetime(self):\n-        value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n+        value = DateTime("2015/11/23 19:45:55.649027 GMT+3").asdatetime()\n+        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n-            u\'2015-11-23T16:45:55+00:00\',\n-            json_compatible(value)\n-        )\n-        self.assertEqual(\n-            \'"2015-11-23T16:45:55+00:00"\',\n-            json.dumps(json_compatible(value))\n+            \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_zope_DateTime(self):\n-        value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEqual(\n-            u\'2015-11-23T16:45:55+00:00\',\n-            json_compatible(value)\n-        )\n+        value = DateTime("2015/11/23 19:45:55.649027 GMT+3")\n+        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n-            \'"2015-11-23T16:45:55+00:00"\',\n-            json.dumps(json_compatible(value))\n+            \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(u"2015-11-23", json_compatible(value))\n         self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(u"19:45:55", json_compatible(value))\n         self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n@@ -207,25 +195,31 @@ def test_broken_relation_value(self):\n         self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n-        portal = self.layer[\'portal\']\n-        doc1 = portal[portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\',\n-            title=\'Document 1\',\n-            description=\'Description\',\n-        )]\n+        portal = self.layer["portal"]\n+        doc1 = portal[\n+            portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc1",\n+                title="Document 1",\n+                description="Description",\n+            )\n+        ]\n         intids = getUtility(IIntIds)\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Document 1\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            json_compatible(RelationValue(intids.getId(doc1))))\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Document 1",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            json_compatible(RelationValue(intids.getId(doc1))),\n+        )\n \n     def test_i18n_message(self):\n-        _ = MessageFactory(\'plone.restapi.tests\')\n-        msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEqual(u\'default message\', json_compatible(msg))\n+        _ = MessageFactory("plone.restapi.tests")\n+        msg = _(u"message_id", default=u"default message")\n+        self.assertEqual(u"default message", json_compatible(msg))\n \n     def test_missing_value(self):\n         self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 977fb7ca..3ecbe1b8 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -14,50 +14,48 @@ class TestSerializeUserToJsonAdapters(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n         self.gtool.addGroup(\n-            \'ploneteam\', (), (),\n+            "ploneteam",\n+            (),\n+            (),\n             properties=properties,\n-            title=properties[\'title\'],\n-            description=properties[\'description\'])\n-        self.group = self.gtool.getGroupById(\'ploneteam\')\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n+        self.group = self.gtool.getGroupById("ploneteam")\n         self.group.addMember(TEST_USER_ID)\n \n     def serialize(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def serialize_summary(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJsonSummary)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJsonSummary)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         group = self.serialize(self.group)\n         self.assertTrue(group)\n-        self.assertEqual(\'ploneteam\', group.get(\'id\'))\n-        self.assertEqual(\'ploneteam@plone.org\', group.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', group.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', group.get(\'description\'))\n-        self.assertEqual(\n-            set(group[\'users\']),\n-            set([\'@id\', \'items_total\', \'items\'])\n-        )\n+        self.assertEqual("ploneteam", group.get("id"))\n+        self.assertEqual("ploneteam@plone.org", group.get("email"))\n+        self.assertEqual("Plone Team", group.get("title"))\n+        self.assertEqual("We are Plone", group.get("description"))\n+        self.assertEqual(set(group["users"]), set(["@id", "items_total", "items"]))\n \n     def test_summary(self):\n         group = self.serialize_summary(self.group)\n         self.assertTrue(group)\n-        self.assertEqual(\'ploneteam\', group.get(\'id\'))\n-        self.assertEqual(\'ploneteam@plone.org\', group.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', group.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', group.get(\'description\'))\n-        self.assertNotIn(\'users\', group)\n+        self.assertEqual("ploneteam", group.get("id"))\n+        self.assertEqual("ploneteam@plone.org", group.get("email"))\n+        self.assertEqual("Plone Team", group.get("title"))\n+        self.assertEqual("We are Plone", group.get("description"))\n+        self.assertNotIn("users", group)\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 235a041f..a8647e5e 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -19,81 +19,97 @@ class TestSummarySerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.doc1 = createContentInContainer(\n-            self.portal, u\'DXTestDocument\',\n-            id=u\'doc1\',\n-            title=u\'Lorem Ipsum\',\n-            description=u\'Description\')\n+            self.portal,\n+            u"DXTestDocument",\n+            id=u"doc1",\n+            title=u"Lorem Ipsum",\n+            description=u"Description",\n+        )\n \n     def test_site_root_summary(self):\n         summary = getMultiAdapter(\n-            (self.portal, self.request), ISerializeToJsonSummary)()\n+            (self.portal, self.request), ISerializeToJsonSummary\n+        )()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone\',\n-             \'@type\': \'Plone Site\',\n-             \'title\': \'Plone site\',\n-             \'description\': \'\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone",\n+                "@type": "Plone Site",\n+                "title": "Plone site",\n+                "description": "",\n+            },\n+            summary,\n+        )\n \n     def test_brain_summary(self):\n         brain = self.catalog(UID=self.doc1.UID())[0]\n-        summary = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n         # Must also work if we\'re dealing with a CatalogContentListingObject\n         # (because the brain has already been adapted to IContentListingObject,\n         # as is the case for collection results)\n         listing_obj = IContentListingObject(brain)\n         summary = getMultiAdapter(\n-            (listing_obj, self.request), ISerializeToJsonSummary)()\n+            (listing_obj, self.request), ISerializeToJsonSummary\n+        )()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n     def test_brain_summary_with_missing_value(self):\n         brain = self.catalog(UID=self.doc1.UID())[0]\n         brain.Description = Missing.Value\n \n-        summary = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': None,\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": None,\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n     def test_dx_type_summary(self):\n-        summary = getMultiAdapter(\n-            (self.doc1, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n \n class TestSummarySerializersATTypes(unittest.TestCase):\n@@ -102,25 +118,30 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\',\n-            description=\'Description\')]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument",\n+                id="doc1",\n+                title="Lorem Ipsum",\n+                description="Description",\n+            )\n+        ]\n \n     def test_at_type_summary(self):\n-        summary = getMultiAdapter(\n-            (self.doc1, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'ATTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "ATTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer_user.py b/src/plone/restapi/tests/test_serializer_user.py\nindex b32d9041..42063b85 100644\n--- a/src/plone/restapi/tests/test_serializer_user.py\n+++ b/src/plone/restapi/tests/test_serializer_user.py\n@@ -13,47 +13,45 @@ class TestSerializeUserToJsonAdapter(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         self.user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n \n     def serialize(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         user = self.serialize(self.user)\n         self.assertTrue(user)\n-        self.assertEqual(\'noam\', user.get(\'id\'))\n-        self.assertEqual(\'noam.chomsky@example.com\', user.get(\'email\'))\n-        self.assertEqual(\'Noam Avram Chomsky\', user.get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', user.get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', user.get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', user.get(\'location\'))\n+        self.assertEqual("noam", user.get("id"))\n+        self.assertEqual("noam.chomsky@example.com", user.get("email"))\n+        self.assertEqual("Noam Avram Chomsky", user.get("fullname"))\n+        self.assertEqual("web.mit.edu/chomsky", user.get("home_page"))  # noqa\n+        self.assertEqual("Professor of Linguistics", user.get("description"))  # noqa\n+        self.assertEqual("Cambridge, MA", user.get("location"))\n \n     def test_serialize_roles(self):\n         user = self.serialize(self.user)\n-        self.assertIn(\'roles\', user)\n-        self.assertNotIn(\'Authenticated\', user[\'roles\'])\n-        self.assertNotIn(\'Anonymous\', user[\'roles\'])\n+        self.assertIn("roles", user)\n+        self.assertNotIn("Authenticated", user["roles"])\n+        self.assertNotIn("Anonymous", user["roles"])\n \n-    @unittest.skipUnless(HAS_TTW_SCHEMAS, \'Requires TTW user schemas\')\n+    @unittest.skipUnless(HAS_TTW_SCHEMAS, "Requires TTW user schemas")\n     def test_serialize_custom_member_schema(self):\n         from plone.app.users.browser.schemaeditor import applySchema\n+\n         member_schema = """\n             <model xmlns="http://namespaces.plone.org/supermodel/schema"\n                 xmlns:form="http://namespaces.plone.org/supermodel/form"\n@@ -74,9 +72,10 @@ def test_serialize_custom_member_schema(self):\n         """\n         applySchema(member_schema)\n         user = api.user.create(\n-            email=\'donald.duck@example.com\',\n-            username=\'donald\',\n-            properties={\'twitter\': \'TheRealDuck\'})\n+            email="donald.duck@example.com",\n+            username="donald",\n+            properties={"twitter": "TheRealDuck"},\n+        )\n         res = self.serialize(user)\n-        self.assertIn(\'twitter\', res)\n-        self.assertEqual(res[\'twitter\'], \'TheRealDuck\')\n+        self.assertIn("twitter", res)\n+        self.assertEqual(res["twitter"], "TheRealDuck")\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 9a68830c..4b630309 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -24,210 +24,160 @@ class TestTraversal(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_document(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.doc1.description = u"This is a document"\n-        self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        self.portal.doc1.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.doc1.absolute_url())\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json: \' +\n-            \'{}\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json: "\n+            + "{}".format(response.headers.get("Content-Type")),\n         )\n         self.assertEqual(\n-            \'Document\',\n-            response.json().get(\'@type\'),\n+            "Document",\n+            response.json().get("@type"),\n             "Response should be @type \'Document\', not \'{}\'".format(\n-                response.json().get(\'@type\')\n-            )\n+                response.json().get("@type")\n+            ),\n         )\n         self.assertEqual(\n-            response.json().get(\'@id\'),\n+            response.json().get("@id"),\n             self.portal.doc1.absolute_url(),\n-            \'@id attribute != {}: {}\'.format(\n-                self.portal.doc1.absolute_url(),\n-                response.json()\n-            )\n-        )\n-        self.assertEqual(\n-            \'My Document\',\n-            response.json().get(\'title\'),\n-        )\n-        self.assertEqual(\n-            \'This is a document\',\n-            response.json().get(\'description\')\n+            "@id attribute != {}: {}".format(\n+                self.portal.doc1.absolute_url(), response.json()\n+            ),\n         )\n+        self.assertEqual("My Document", response.json().get("title"))\n+        self.assertEqual("This is a document", response.json().get("description"))\n         self.assertEqual(\n-            {u\'data\': u\'<p>Lorem ipsum</p>\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'encoding\': u\'utf-8\'},\n-            response.json().get(\'text\')\n+            {\n+                u"data": u"<p>Lorem ipsum</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n+            },\n+            response.json().get("text"),\n         )\n \n     def test_get_news_item(self):\n-        self.portal.invokeFactory(\n-            \'News Item\',\n-            id=\'news1\',\n-            title=\'News Item 1\'\n-        )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n-        self.portal.news1.image_caption = u\'This is an image caption.\'\n+        self.portal.news1.image_caption = u"This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n             response = self.api_session.get(self.portal.news1.absolute_url())\n \n             self.assertEqual(response.status_code, 200)\n             self.assertEqual(\n-                response.headers.get(\'Content-Type\'),\n-                \'application/json\',\n-                \'When sending a GET request with Content-Type: application/json \' + # noqa\n-                \'the server should respond with sending back application/json.\'\n+                response.headers.get("Content-Type"),\n+                "application/json",\n+                "When sending a GET request with Content-Type: application/json "\n+                + "the server should respond with sending back application/json.",  # noqa\n             )\n             self.assertEqual(\n-                \'News Item\',\n-                response.json().get(\'@type\'),\n+                "News Item",\n+                response.json().get("@type"),\n                 "Response should be @type \'News Item\', not \'{}\'".format(\n-                    response.json().get(\'@type\')\n-                )\n-            )\n-            self.assertEqual(\n-                response.json().get(\'@id\'),\n-                self.portal.news1.absolute_url()\n+                    response.json().get("@type")\n+                ),\n             )\n             self.assertEqual(\n-                \'News Item 1\',\n-                response.json().get(\'title\')\n+                response.json().get("@id"), self.portal.news1.absolute_url()\n             )\n+            self.assertEqual("News Item 1", response.json().get("title"))\n             self.assertEqual(\n-                u\'This is an image caption.\',\n-                response.json()[\'image_caption\']\n+                u"This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {\'download\': self.portal_url + u\'/news1/@@images/uuid1.png\'},  # noqa\n-                response.json()[\'image\']\n+                {"download": self.portal_url + u"/news1/@@images/uuid1.png"},  # noqa\n+                response.json()["image"],\n             )\n \n     def test_get_folder(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.folder1.absolute_url())\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertEqual(\n-            \'Folder\',\n-            response.json().get(\'@type\'),\n+            "Folder",\n+            response.json().get("@type"),\n             "Response should be @type \'Folder\', not \'{}\'".format(\n-                response.json().get(\'@type\')\n-            )\n-        )\n-        self.assertEqual(\n-            self.portal.folder1.absolute_url(),\n-            response.json().get(\'@id\')\n-        )\n-        self.assertEqual(\n-            \'My Folder\',\n-            response.json().get(\'title\')\n+                response.json().get("@type")\n+            ),\n         )\n+        self.assertEqual(self.portal.folder1.absolute_url(), response.json().get("@id"))\n+        self.assertEqual("My Folder", response.json().get("title"))\n \n     def test_get_site_root(self):\n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            self.portal_url,\n-            response.json().get(\'@id\')\n-        )\n-        self.assertEqual(\n-            \'Plone Site\',\n-            response.json().get(\'@type\')\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(self.portal_url, response.json().get("@id"))\n+        self.assertEqual("Plone Site", response.json().get("@type"))\n \n     def test_get_site_root_with_default_page(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        self.portal.setDefaultPage(\'front-page\')\n+        self.portal.invokeFactory("Document", id="front-page")\n+        self.portal.setDefaultPage("front-page")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json().get(\'@id\'),\n-            self.portal_url\n-        )\n-        self.assertEqual(\n-            \'Plone Site\',\n-            response.json().get(\'@type\')\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json().get("@id"), self.portal_url)\n+        self.assertEqual("Plone Site", response.json().get("@type"))\n \n-    @unittest.skip(\'Not implemented yet.\')\n+    @unittest.skip("Not implemented yet.")\n     def test_get_file(self):  # pragma: no cover\n-        self.portal.invokeFactory(\'File\', id=\'file1\')\n-        self.portal.file1.title = \'File\'\n-        self.portal.file1.description = u\'A file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        with open(pdf_file, \'rb\') as f:\n+        self.portal.invokeFactory("File", id="file1")\n+        self.portal.file1.title = "File"\n+        self.portal.file1.description = u"A file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=pdf_data,\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n         )\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file1)\n@@ -238,40 +188,32 @@ def test_get_file(self):  # pragma: no cover\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal.file1.absolute_url()\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json()["@id"], self.portal.file1.absolute_url())\n \n-    @unittest.skip(\'Not implemented yet.\')\n+    @unittest.skip("Not implemented yet.")\n     def test_get_image(self):  # pragma: no cover\n-        self.portal.invokeFactory(\'Image\', id=\'img1\')\n-        self.portal.img1.title = \'Image\'\n-        self.portal.img1.description = u\'An image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="img1")\n+        self.portal.img1.title = "Image"\n+        self.portal.img1.description = u"An image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.img1.absolute_url())\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal.img1.absolute_url()\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json()["@id"], self.portal.img1.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex e90688ce..5a16a7b6 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -14,7 +14,7 @@\n import unittest\n \n \n-TEST_CATEGORY_ID = \'testcategory\'\n+TEST_CATEGORY_ID = "testcategory"\n \n \n class TestActions(unittest.TestCase):\n@@ -27,42 +27,57 @@ def add_category(self, name):\n         self.portal_actions._setObject(name, category)\n         return category\n \n-    def add_action(self, category, name, title, icon_expr=\'\',\n-                   available_expr=\'\',\n-                   permissions=()):\n-        action = Action(name, title=title, icon_expr=icon_expr,\n-                        available_expr=available_expr, permissions=permissions)\n+    def add_action(\n+        self, category, name, title, icon_expr="", available_expr="", permissions=()\n+    ):\n+        action = Action(\n+            name,\n+            title=title,\n+            icon_expr=icon_expr,\n+            available_expr=available_expr,\n+            permissions=permissions,\n+        )\n         action.id = name\n         category._setObject(name, action)\n         return action\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n-        self.portal_actions = api.portal.get_tool(name=\'portal_actions\')\n+        self.portal_actions = api.portal.get_tool(name="portal_actions")\n         existing_ids = self.portal_actions.objectIds()\n         self.portal_actions.manage_delObjects(ids=existing_ids)\n-        self.cat1 = self.add_category(\'category1\')\n-        self.add_action(self.cat1, \'member_action\', \'Members only\',\n-                        available_expr=\'python:member is not None\')\n-        self.add_action(self.cat1, \'view_action\',\n-                        \'Action with view permission\',\n-                        permissions=(permissions.View,))\n-        self.add_action(self.cat1, \'manage_action\',\n-                        \'Action with Manage Portal Content permission\',\n-                        permissions=(permissions.ManagePortal,))\n-        self.cat2 = self.add_category(\'category2\')\n-        self.cat3 = self.add_category(\'category3\')\n+        self.cat1 = self.add_category("category1")\n+        self.add_action(\n+            self.cat1,\n+            "member_action",\n+            "Members only",\n+            available_expr="python:member is not None",\n+        )\n+        self.add_action(\n+            self.cat1,\n+            "view_action",\n+            "Action with view permission",\n+            permissions=(permissions.View,),\n+        )\n+        self.add_action(\n+            self.cat1,\n+            "manage_action",\n+            "Action with Manage Portal Content permission",\n+            permissions=(permissions.ManagePortal,),\n+        )\n+        self.cat2 = self.add_category("category2")\n+        self.cat3 = self.add_category("category3")\n \n         transaction.commit()\n \n@@ -71,89 +86,92 @@ def tearDown(self):\n         self.anon_api_session.close()\n \n     def test_actions_all_categories(self):\n-        response = self.api_session.get(\'/@actions\')\n+        response = self.api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response))\n+        self.assertEqual(["category1", "category2", "category3"], sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n-            \'/@actions?categories:list=category1&categories:list=category2\')\n+            "/@actions?categories:list=category1&categories:list=category2"\n+        )\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response))\n+        self.assertEqual(["category1", "category2"], sorted(response))\n \n     def test_actions_siteroot(self):\n-        response = self.api_session.get(\'/@actions\')\n+        response = self.api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'category1\': [\n-                {u\'title\': u\'Members only\',\n-                 u\'id\': u\'member_action\',\n-                 u\'icon\': u\'\'},\n-                {u\'title\': u\'Action with view permission\',\n-                 u\'id\': u\'view_action\',\n-                 u\'icon\': u\'\'},\n-                {u\'title\': u\'Action with Manage Portal Content permission\',\n-                 u\'id\': u\'manage_action\',\n-                 u\'icon\': u\'\'}],\n-             u\'category2\': [],\n-             u\'category3\': []})\n+            {\n+                u"category1": [\n+                    {u"title": u"Members only", u"id": u"member_action", u"icon": u""},\n+                    {\n+                        u"title": u"Action with view permission",\n+                        u"id": u"view_action",\n+                        u"icon": u"",\n+                    },\n+                    {\n+                        u"title": u"Action with Manage Portal Content permission",\n+                        u"id": u"manage_action",\n+                        u"icon": u"",\n+                    },\n+                ],\n+                u"category2": [],\n+                u"category3": [],\n+            },\n+        )\n \n     def test_actions_siteroot_anon(self):\n-        response = self.anon_api_session.get(\'/@actions\')\n+        response = self.anon_api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'category1\': [\n-                {u\'title\': u\'Action with view permission\',\n-                 u\'id\': u\'view_action\',\n-                 u\'icon\': u\'\'}],\n-             u\'category2\': [],\n-             u\'category3\': []})\n+            {\n+                u"category1": [\n+                    {\n+                        u"title": u"Action with view permission",\n+                        u"id": u"view_action",\n+                        u"icon": u"",\n+                    }\n+                ],\n+                u"category2": [],\n+                u"category3": [],\n+            },\n+        )\n \n     def test_actions_on_content_object(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n         # we need the category in portal_actions to get additional actions\n         # from portal_types\n-        self.cat_object = self.add_category(\'object\')\n+        self.cat_object = self.add_category("object")\n         transaction.commit()\n-        url = \'%s/@actions\' % self.portal.doc1.absolute_url()\n+        url = "%s/@actions" % self.portal.doc1.absolute_url()\n         response = self.api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u\'id\'] for action in response[\'object\']]\n-        self.assertTrue(u\'view\' in object_action_ids)\n-        self.assertTrue(u\'edit\' in object_action_ids)\n+        object_action_ids = [action[u"id"] for action in response["object"]]\n+        self.assertTrue(u"view" in object_action_ids)\n+        self.assertTrue(u"edit" in object_action_ids)\n \n     def test_actions_on_content_object_anon(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n-        api.content.transition(obj=self.portal.doc1, transition=\'publish\')\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        api.content.transition(obj=self.portal.doc1, transition="publish")\n         # we need the category in portal_actions to get additional actions\n         # from portal_types\n-        self.cat_object = self.add_category(\'object\')\n+        self.cat_object = self.add_category("object")\n         transaction.commit()\n-        url = \'%s/@actions\' % self.portal.doc1.absolute_url()\n+        url = "%s/@actions" % self.portal.doc1.absolute_url()\n         response = self.anon_api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u\'id\'] for action in response[\'object\']]\n-        self.assertTrue(u\'view\' in object_action_ids)\n-        self.assertTrue(u\'edit\' not in object_action_ids)\n+        object_action_ids = [action[u"id"] for action in response["object"]]\n+        self.assertTrue(u"view" in object_action_ids)\n+        self.assertTrue(u"edit" not in object_action_ids)\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex 190e6a0d..82091933 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -16,44 +16,40 @@ class TestServicesBreadcrumbs(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_breadcrumbs(self):\n-        response = self.api_session.get(\'/folder/doc1/@breadcrumbs\')\n+        response = self.api_session.get("/folder/doc1/@breadcrumbs")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': self.portal_url + u\'/folder/doc1/@breadcrumbs\',\n-                \'items\': [\n+                "@id": self.portal_url + u"/folder/doc1/@breadcrumbs",\n+                "items": [\n+                    {u"@id": self.portal_url + u"/folder", u"title": u"Some Folder"},\n                     {\n-                        u\'@id\': self.portal_url + u\'/folder\',\n-                        u\'title\': u\'Some Folder\'\n-                    }, {\n-                        u\'@id\': self.portal_url + u\'/folder/doc1\',\n-                        u\'title\': u\'A document\'\n-                    }\n-                ]\n-            }\n+                        u"@id": self.portal_url + u"/folder/doc1",\n+                        u"title": u"A document",\n+                    },\n+                ],\n+            },\n         )\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 0eb86824..4a8e134f 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -19,9 +19,9 @@ class TestCommentsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Allow discussion\n@@ -34,24 +34,24 @@ def setUp(self):\n         # doc with comments\n         self.doc = api.content.create(\n             container=self.portal,\n-            type=\'Document\',\n-            id=\'doc_with_comments\',\n-            title=\'Document with comments\',\n-            allow_discussion=True\n+            type="Document",\n+            id="doc_with_comments",\n+            title="Document with comments",\n+            allow_discussion=True,\n         )\n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        api.user.create(username=\'jos\', password=\'jos\', email=\'jos@plone.org\')\n+        api.user.create(username="jos", password="jos", email="jos@plone.org")\n \n         # Admin session\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # User session\n         self.user_session = RelativeSession(self.portal_url)\n-        self.user_session.headers.update({\'Accept\': \'application/json\'})\n-        self.user_session.auth = (\'jos\', \'jos\')\n+        self.user_session.headers.update({"Accept": "application/json"})\n+        self.user_session.auth = ("jos", "jos")\n \n         transaction.commit()\n \n@@ -60,129 +60,126 @@ def tearDown(self):\n         self.user_session.close()\n \n     def test_list_datastructure(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n         response = self.api_session.get(url)\n \n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertEqual(\n-            set([\'items_total\', \'items\', \'@id\']),\n-            set(data)\n-        )\n+        self.assertEqual(set(["items_total", "items", "@id"]), set(data))\n \n     def test_list_batching(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        self.api_session.post(url, json={\'text\': \'comment 1\'})\n-        self.api_session.post(url, json={\'text\': \'comment 2\'})\n+        self.api_session.post(url, json={"text": "comment 1"})\n+        self.api_session.post(url, json={"text": "comment 2"})\n \n-        response = self.api_session.get(url, params={\'b_size\': 1})\n+        response = self.api_session.get(url, params={"b_size": 1})\n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertIn(\'batching\', data)\n+        self.assertIn("batching", data)\n \n     def test_add_comment_to_root(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n         response = self.api_session.get(url)\n-        self.assertEqual(0, response.json()[\'items_total\'])\n+        self.assertEqual(0, response.json()["items_total"])\n \n-        response = self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'location\', response.headers)\n+        self.assertIn("location", response.headers)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        self.assertEqual(1, data[\'items_total\'])\n-        self.assertIsNone(data[\'items\'][0][\'in_reply_to\'])\n-        self.assertIsNone(data[\'items\'][0][\'@parent\'])\n+        self.assertEqual(1, data["items_total"])\n+        self.assertIsNone(data["items"][0]["in_reply_to"])\n+        self.assertIsNone(data["items"][0]["@parent"])\n \n     def test_add_comment_to_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        parent_id = data[\'items\'][0][\'comment_id\']\n+        parent_id = data["items"][0]["comment_id"]\n \n-        SUBTEXT = \'sub comment\'\n+        SUBTEXT = "sub comment"\n \n-        payload = {\'text\': SUBTEXT, \'in_reply_to\': parent_id}\n+        payload = {"text": SUBTEXT, "in_reply_to": parent_id}\n         response = self.api_session.post(url, json=payload)\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        sub = [x for x in data[\'items\'] if x[\'text\'][\'data\'] == SUBTEXT][0]\n-        self.assertEqual(parent_id, sub[\'in_reply_to\'])\n+        sub = [x for x in data["items"] if x["text"]["data"] == SUBTEXT][0]\n+        self.assertEqual(parent_id, sub["in_reply_to"])\n \n     def test_update(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n-        OLD_TEXT = \'comment 1\'\n-        NEW_TEXT = \'new text\'\n+        url = "{}/@comments".format(self.doc.absolute_url())\n+        OLD_TEXT = "comment 1"\n+        NEW_TEXT = "new text"\n \n-        self.api_session.post(url, json={\'text\': OLD_TEXT})\n+        self.api_session.post(url, json={"text": OLD_TEXT})\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        item_texts = [x[\'text\'][\'data\'] for x in data[\'items\']]\n+        item_texts = [x["text"]["data"] for x in data["items"]]\n         self.assertNotIn(NEW_TEXT, item_texts)\n         self.assertIn(OLD_TEXT, item_texts)\n-        comment = data[\'items\'][0]\n+        comment = data["items"][0]\n \n-        payload = {\'text\': NEW_TEXT}\n-        response = self.api_session.patch(comment[\'@id\'], json=payload)\n+        payload = {"text": NEW_TEXT}\n+        response = self.api_session.patch(comment["@id"], json=payload)\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'location\', response.headers)\n+        self.assertIn("location", response.headers)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        item_texts = [x[\'text\'][\'data\'] for x in data[\'items\']]\n+        item_texts = [x["text"]["data"] for x in data["items"]]\n         self.assertIn(NEW_TEXT, item_texts)\n         self.assertNotIn(OLD_TEXT, item_texts)\n \n     def test_permissions_delete_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment\'})\n+        response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n-        comment_url = response.json()[\'items\'][0][\'@id\']\n-        self.assertFalse(comment_url.endswith(\'@comments\'))\n-        self.assertTrue(response.json()[\'items\'][0][\'is_deletable\'])\n+        comment_url = response.json()["items"][0]["@id"]\n+        self.assertFalse(comment_url.endswith("@comments"))\n+        self.assertTrue(response.json()["items"][0]["is_deletable"])\n \n         # Other user may not delete this\n         response = self.user_session.delete(comment_url)\n         self.assertEqual(401, response.status_code)\n \n         response = self.user_session.get(url)\n-        self.assertFalse(response.json()[\'items\'][0][\'is_deletable\'])\n+        self.assertFalse(response.json()["items"][0]["is_deletable"])\n \n         # The owner may\n         response = self.api_session.delete(comment_url)\n         self.assertEqual(204, response.status_code)\n \n     def test_permissions_update_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment\'})\n+        response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n-        comment_url = response.json()[\'items\'][0][\'@id\']\n-        self.assertFalse(comment_url.endswith(\'@comments\'))\n-        self.assertTrue(response.json()[\'items\'][0][\'is_editable\'])\n+        comment_url = response.json()["items"][0]["@id"]\n+        self.assertFalse(comment_url.endswith("@comments"))\n+        self.assertTrue(response.json()["items"][0]["is_editable"])\n \n         # Other user may not update this\n-        response = self.user_session.patch(comment_url, json={\'text\': \'new\'})\n+        response = self.user_session.patch(comment_url, json={"text": "new"})\n         self.assertEqual(401, response.status_code)\n \n         response = self.user_session.get(url)\n-        self.assertFalse(response.json()[\'items\'][0][\'is_editable\'])\n+        self.assertFalse(response.json()["items"][0]["is_editable"])\n \n         # The owner may\n-        response = self.api_session.patch(comment_url, json={\'text\': \'new\'})\n+        response = self.api_session.patch(comment_url, json={"text": "new"})\n         self.assertEqual(204, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_services_content.py b/src/plone/restapi/tests/test_services_content.py\nindex 54b12521..fe6ba842 100644\n--- a/src/plone/restapi/tests/test_services_content.py\n+++ b/src/plone/restapi/tests/test_services_content.py\n@@ -15,22 +15,20 @@ class TestHistoryVersioning(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n         transaction.commit()\n \n@@ -39,4 +37,4 @@ def tearDown(self):\n \n     def test_response(self):\n         response = self.api_session.get(self.doc.absolute_url())\n-        self.assertIn(\'version\', response.json())\n+        self.assertIn("version", response.json())\ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex 4955e5da..cda2cebc 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -16,20 +16,20 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n class TestControlpanelsEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n@@ -37,94 +37,89 @@ def tearDown(self):\n \n     def test_get_listing(self):\n         # Do we get a list with at least one item?\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         self.assertEqual(200, response.status_code)\n         data = response.json()\n         self.assertIs(type(data), list)\n         self.assertGreater(len(data), 0)\n \n     def test_get_item_nonexisting(self):\n-        response = self.api_session.get(\'/@controlpanels/no-way-jose\')\n+        response = self.api_session.get("/@controlpanels/no-way-jose")\n         self.assertEqual(404, response.status_code)\n \n     def test_get_item(self):\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n+        response = self.api_session.get("/@controlpanels/editing")\n         self.assertEqual(200, response.status_code)\n \n     def test_all_controlpanels(self):\n         # make sure all define controlpanels serialize\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         for item in response.json():\n-            response = self.api_session.get(item[\'@id\'])\n+            response = self.api_session.get(item["@id"])\n             self.assertEqual(\n                 200,\n                 response.status_code,\n-                \'{} failed: {}\'.format(item[\'@id\'], response.json())\n+                "{} failed: {}".format(item["@id"], response.json()),\n             )\n \n     def test_patch_needs_parameter(self):\n-        response = self.api_session.patch(\'/@controlpanels\')\n+        response = self.api_session.patch("/@controlpanels")\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            \'Missing parameter controlpanelname\', response.json()[\'message\']\n+            "Missing parameter controlpanelname", response.json()["message"]\n         )\n \n     def test_update(self):\n         # get current settings, switch them and check if it changed\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n-        old_data = response.json()[\'data\']\n+        response = self.api_session.get("/@controlpanels/editing")\n+        old_data = response.json()["data"]\n \n         # switch values and set\n         new_values = {\n-            \'ext_editor\': not old_data[\'ext_editor\'],\n-            \'lock_on_ttw_edit\': not old_data[\'lock_on_ttw_edit\']\n+            "ext_editor": not old_data["ext_editor"],\n+            "lock_on_ttw_edit": not old_data["lock_on_ttw_edit"],\n         }\n-        response = self.api_session.patch(\n-            \'/@controlpanels/editing\', json=new_values\n-        )\n+        response = self.api_session.patch("/@controlpanels/editing", json=new_values)\n \n         # check if the values changed\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n+        response = self.api_session.get("/@controlpanels/editing")\n         self.assertNotEqual(response.json(), old_data)\n \n     def test_update_all(self):\n         # Mail is in faulty state by default\n         self.api_session.patch(\n-            \'/@controlpanels/mail\',\n+            "/@controlpanels/mail",\n             json={\n-                \'email_from_address\': \'admin@local.local\',\n-                \'email_from_name\': \'Jos Henken\',\n-            }\n+                "email_from_address": "admin@local.local",\n+                "email_from_name": "Jos Henken",\n+            },\n         )\n \n         # make sure all define controlpanels deserialize\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         for item in response.json():\n             # get current data\n-            response = self.api_session.get(item[\'@id\'])\n+            response = self.api_session.get(item["@id"])\n \n             # store the outputted data\n-            response = self.api_session.patch(\n-                item[\'@id\'],\n-                json=response.json()[\'data\']\n-            )\n+            response = self.api_session.patch(item["@id"], json=response.json()["data"])\n             self.assertEqual(\n                 204,\n                 response.status_code,\n-                \'{} failed: {}\'.format(item[\'@id\'], response.content)\n+                "{} failed: {}".format(item["@id"], response.content),\n             )\n \n     def test_update_required(self):\n-        KEY = \'email_charset\'\n-        URL = \'/@controlpanels/mail\'\n+        KEY = "email_charset"\n+        URL = "/@controlpanels/mail"\n         # sanity check\n         response = self.api_session.get(URL)\n         response = response.json()\n-        self.assertIn(KEY, response[\'schema\'][\'required\'])\n+        self.assertIn(KEY, response["schema"]["required"])\n \n         response = self.api_session.patch(URL, json={KEY: None})\n \n         self.assertEqual(response.status_code, 400)\n         response = response.json()\n-        self.assertIn(\'message\', response)\n-        self.assertIn(\'Required input is missing.\', response[\'message\'])\n+        self.assertIn("message", response)\n+        self.assertIn("Required input is missing.", response["message"])\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 0e6ce006..a0b05b80 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -21,28 +21,30 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\')  # noqa\n+@unittest.skipIf(\n+    not PLONE5, "email notification not implemented for Plone < 5."\n+)  # noqa\n class EmailNotificationEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         registry = getUtility(IRegistry)\n-        registry[\'plone.email_from_address\'] = \'info@plone.org\'\n-        registry[\'plone.email_from_name\'] = u\'Plone test site\'\n+        registry["plone.email_from_address"] = "info@plone.org"\n+        registry["plone.email_from_name"] = u"Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         transaction.commit()\n \n@@ -51,55 +53,42 @@ def tearDown(self):\n \n     def test_email_notification_missing_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n-            json={\n-                \'message\': \'Just want to say hi.\'\n-            })\n+            "/@email-notification", json={"message": "Just want to say hi."}\n+        )\n         transaction.commit()\n         self.assertEqual(response.status_code, 400)\n         self.assertEqual(self.mailhost.messages, [])\n         error = response.json()\n-        self.assertEqual(error[\'message\'],\n-                         \'Missing from or message parameters\')\n+        self.assertEqual(error["message"], "Missing from or message parameters")\n \n     def test_email_notification(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n-            json={\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\'\n-            })\n+            "/@email-notification",\n+            json={"from": "john@doe.com", "message": "Just want to say hi."},\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'Subject: [No Subject]\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'To: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("Subject: [No Subject]" in self.mailhost.messages[0])\n+        self.assertTrue("To: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_notification_all_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n+            "/@email-notification",\n             json={\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'To: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'John Doe\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("=?utf-8?q?This_is_the_subject" in self.mailhost.messages[0])\n+        self.assertTrue("To: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("John Doe" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 9fe77368..2d24eb01 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -21,28 +21,28 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email send not implemented for Plone < 5.\') # noqa\n+@unittest.skipIf(not PLONE5, "email send not implemented for Plone < 5.")  # noqa\n class EmailSendEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         registry = getUtility(IRegistry)\n-        registry[\'plone.email_from_address\'] = \'info@plone.org\'\n-        registry[\'plone.email_from_name\'] = u\'Plone test site\'\n+        registry["plone.email_from_address"] = "info@plone.org"\n+        registry["plone.email_from_name"] = u"Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         transaction.commit()\n \n@@ -52,57 +52,54 @@ def tearDown(self):\n \n     def test_email_send(self):\n         response = self.api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'From: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue(\n+            "Subject: =?utf-8?q?A_portal_user_via_Plone_site?="\n+            in self.mailhost.messages[0]\n+        )\n+        self.assertTrue("From: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_send_all_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'From: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'John Doe\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("=?utf-8?q?This_is_the_subject" in self.mailhost.messages[0])\n+        self.assertTrue("From: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("John Doe" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_send_anonymous(self):\n         response = self.anon_api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n \n         self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex d4735d86..df3a34c3 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -16,181 +16,162 @@ class TestGroupsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        self.gtool.addGroup(\'ploneteam\', (), (),\n-                            properties=properties,\n-                            title=properties[\'title\'],\n-                            description=properties[\'description\'])\n+        self.gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_list_groups(self):\n-        response = self.api_session.get(\'/@groups\')\n+        response = self.api_session.get("/@groups")\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(5, len(response.json()))\n-        user_ids = [group[\'id\'] for group in response.json()]\n-        self.assertIn(\'Administrators\', user_ids)\n-        self.assertIn(\'Reviewers\', user_ids)\n-        self.assertIn(\'AuthenticatedUsers\', user_ids)\n-        self.assertIn(\'ploneteam\', user_ids)\n-        ptgroup = [x for x in response.json()\n-                   if x.get(\'groupname\') == \'ploneteam\'][0]\n-        self.assertEqual(\'ploneteam\', ptgroup.get(\'id\'))\n+        user_ids = [group["id"] for group in response.json()]\n+        self.assertIn("Administrators", user_ids)\n+        self.assertIn("Reviewers", user_ids)\n+        self.assertIn("AuthenticatedUsers", user_ids)\n+        self.assertIn("ploneteam", user_ids)\n+        ptgroup = [x for x in response.json() if x.get("groupname") == "ploneteam"][0]\n+        self.assertEqual("ploneteam", ptgroup.get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            ptgroup.get(\'@id\')\n+            self.portal.absolute_url() + "/@groups/ploneteam", ptgroup.get("@id")\n         )\n-        self.assertEqual(\'ploneteam@plone.org\', ptgroup.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', ptgroup.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', ptgroup.get(\'description\'))\n+        self.assertEqual("ploneteam@plone.org", ptgroup.get("email"))\n+        self.assertEqual("Plone Team", ptgroup.get("title"))\n+        self.assertEqual("We are Plone", ptgroup.get("description"))\n \n-        self.assertEqual(ptgroup.get(\'roles\'), [\'Authenticated\'])\n+        self.assertEqual(ptgroup.get("roles"), ["Authenticated"])\n \n         # We don\'t want the group members listed in the overview as there\n         # might be loads.\n         self.assertTrue(\n-            not any([\'users\' in group for group in response.json()]),\n-            "Users key found in groups listing"\n+            not any(["users" in group for group in response.json()]),\n+            "Users key found in groups listing",\n         )\n \n     def test_add_group(self):\n         response = self.api_session.post(\n-            \'/@groups\',\n+            "/@groups",\n             json={\n-                \'groupname\': \'fwt\',\n-                \'email\': \'fwt@plone.org\',\n-                \'title\': \'Framework Team\',\n-                \'description\': \'The Plone Framework Team\',\n-                \'roles\': [\'Manager\'],\n-                \'groups\': [\'Administrators\'],\n-                \'users\': [SITE_OWNER_NAME, TEST_USER_ID]\n+                "groupname": "fwt",\n+                "email": "fwt@plone.org",\n+                "title": "Framework Team",\n+                "description": "The Plone Framework Team",\n+                "roles": ["Manager"],\n+                "groups": ["Administrators"],\n+                "users": [SITE_OWNER_NAME, TEST_USER_ID],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        fwt = self.gtool.getGroupById(\'fwt\')\n-        self.assertEqual(\n-            "fwt@plone.org", fwt.getProperty(\'email\')\n-        )\n+        fwt = self.gtool.getGroupById("fwt")\n+        self.assertEqual("fwt@plone.org", fwt.getProperty("email"))\n         self.assertTrue(\n-            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(\n-                set(fwt.getGroupMemberIds())\n-            ),\n-            "Userids not found in group"\n+            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(set(fwt.getGroupMemberIds())),\n+            "Userids not found in group",\n         )\n \n     def test_add_group_groupname_is_required(self):\n-        response = self.api_session.post(\n-            \'/@groups\',\n-            json={\n-                "title": "Framework Team"\n-            },\n-        )\n+        response = self.api_session.post("/@groups", json={"title": "Framework Team"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'"Property \\\'groupname\\\' is required\' in response.text)\n+        self.assertTrue("\\"Property \'groupname\' is required" in response.text)\n \n     def test_get_group(self):\n-        response = self.api_session.get(\'/@groups/ploneteam\')\n+        response = self.api_session.get("/@groups/ploneteam")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\'ploneteam\', response.json().get(\'id\'))\n+        self.assertEqual("ploneteam", response.json().get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            response.json().get(\'@id\')\n+            self.portal.absolute_url() + "/@groups/ploneteam",\n+            response.json().get("@id"),\n         )\n-        self.assertEqual(\n-            \'ploneteam@plone.org\',\n-            response.json().get(\'email\')\n-        )\n-        self.assertEqual(\'ploneteam@plone.org\', response.json().get(\'email\'))\n-        self.assertEqual(\'Plone Team\', response.json().get(\'title\'))\n-        self.assertEqual(\'We are Plone\', response.json().get(\'description\'))\n-        self.assertIn(\'users\', response.json())\n+        self.assertEqual("ploneteam@plone.org", response.json().get("email"))\n+        self.assertEqual("ploneteam@plone.org", response.json().get("email"))\n+        self.assertEqual("Plone Team", response.json().get("title"))\n+        self.assertEqual("We are Plone", response.json().get("description"))\n+        self.assertIn("users", response.json())\n \n     def test_get_search_group_with_filter(self):\n-        response = self.api_session.get(\'/@groups\', params={\'query\': \'plo\'})\n+        response = self.api_session.get("/@groups", params={"query": "plo"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'ploneteam\', response.json()[0].get(\'id\'))\n-        self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            response.json()[0].get(\'@id\')\n-        )\n+        self.assertEqual("ploneteam", response.json()[0].get("id"))\n         self.assertEqual(\n-            \'ploneteam@plone.org\',\n-            response.json()[0].get(\'email\')\n+            self.portal.absolute_url() + "/@groups/ploneteam",\n+            response.json()[0].get("@id"),\n         )\n+        self.assertEqual("ploneteam@plone.org", response.json()[0].get("email"))\n \n-        response = self.api_session.get(\'/@groups\', params={\'query\': \'Auth\'})\n+        response = self.api_session.get("/@groups", params={"query": "Auth"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'AuthenticatedUsers\', response.json()[0].get(\'id\'))\n+        self.assertEqual("AuthenticatedUsers", response.json()[0].get("id"))\n \n     def test_get_non_existing_group(self):\n-        response = self.api_session.get(\'/@groups/non-existing-group\')\n+        response = self.api_session.get("/@groups/non-existing-group")\n \n         self.assertEqual(response.status_code, 404)\n \n     def test_update_group(self):\n-        ploneteam = self.gtool.getGroupById(\'ploneteam\')\n+        ploneteam = self.gtool.getGroupById("ploneteam")\n         ploneteam.addMember(SITE_OWNER_NAME)\n         transaction.commit()\n         self.assertNotIn(TEST_USER_ID, ploneteam.getGroupMemberIds())\n         self.assertIn(SITE_OWNER_NAME, ploneteam.getGroupMemberIds())\n \n         payload = {\n-            \'groupname\': \'ploneteam\',\n-            \'email\': \'ploneteam2@plone.org\',\n-            \'users\': {\n-                TEST_USER_ID: True,\n-                SITE_OWNER_NAME: False,\n-            }\n+            "groupname": "ploneteam",\n+            "email": "ploneteam2@plone.org",\n+            "users": {TEST_USER_ID: True, SITE_OWNER_NAME: False},\n         }\n-        response = self.api_session.patch(\'/@groups/ploneteam\', json=payload)\n+        response = self.api_session.patch("/@groups/ploneteam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        ploneteam = self.gtool.getGroupById(\'ploneteam\')\n-        self.assertEqual(\'ploneteam\', ploneteam.id)\n-        self.assertEqual(\'Plone Team\', ploneteam.getProperty(\'title\'))\n-        self.assertEqual(\n-            \'ploneteam2@plone.org\',\n-            ploneteam.getProperty(\'email\')\n-        )\n+        ploneteam = self.gtool.getGroupById("ploneteam")\n+        self.assertEqual("ploneteam", ploneteam.id)\n+        self.assertEqual("Plone Team", ploneteam.getProperty("title"))\n+        self.assertEqual("ploneteam2@plone.org", ploneteam.getProperty("email"))\n         self.assertIn(TEST_USER_ID, ploneteam.getGroupMemberIds())\n         self.assertNotIn(SITE_OWNER_NAME, ploneteam.getGroupMemberIds())\n \n     def test_delete_group(self):\n-        response = self.api_session.delete(\'/@groups/ploneteam\')\n+        response = self.api_session.delete("/@groups/ploneteam")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(None, self.gtool.getGroupById(\'ploneteam\'))\n+        self.assertEqual(None, self.gtool.getGroupById("ploneteam"))\n \n     def test_delete_non_existing_group(self):\n-        response = self.api_session.delete(\'/@groups/non-existing-group\')\n+        response = self.api_session.delete("/@groups/non-existing-group")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 404)\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 0d262098..e4d2f0e8 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -17,26 +17,24 @@ class TestHistoryEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = \'{}/@history\'.format(self.doc.absolute_url())\n+        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n \n         transaction.commit()\n \n@@ -48,66 +46,52 @@ def test_get_types(self):\n         response = self.api_session.get(self.endpoint_url)\n         data = response.json()\n \n-        types = [item[\'type\'] for item in data]\n+        types = [item["type"] for item in data]\n \n-        self.assertEqual(set([\'versioning\', \'workflow\']), set(types))\n+        self.assertEqual(set(["versioning", "workflow"]), set(types))\n \n     def test_get_datastructure(self):\n         response = self.api_session.get(self.endpoint_url)\n         data = response.json()\n \n-        actor_keys = [\'@id\', \'id\', \'fullname\', \'username\']\n+        actor_keys = ["@id", "id", "fullname", "username"]\n \n-        main_keys = [\n-            \'action\',\n-            \'actor\',\n-            \'comments\',\n-            \'time\',\n-            \'transition_title\',\n-            \'type\',\n-        ]\n+        main_keys = ["action", "actor", "comments", "time", "transition_title", "type"]\n \n-        history_keys = main_keys + [\n-            \'@id\',\n-            \'may_revert\',\n-            \'version\'\n-        ]\n+        history_keys = main_keys + ["@id", "may_revert", "version"]\n \n-        workflow_keys = main_keys + [\n-            \'review_state\',\n-            \'state_title\',\n-        ]\n+        workflow_keys = main_keys + ["review_state", "state_title"]\n \n         for item in data:\n             # Make sure we\'ll add tests when new history types are added.\n-            self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n+            self.assertIn(item["type"], ["versioning", "workflow"])\n \n-            if item[\'type\'] == \'versioning\':\n+            if item["type"] == "versioning":\n                 self.assertEqual(set(item), set(history_keys))\n             else:\n                 self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n+            self.assertEqual(set(item["actor"]), set(actor_keys))\n \n-            self.assertIsNotNone(item[\'action\'])\n+            self.assertIsNotNone(item["action"])\n \n     def test_revert(self):\n-        url = \'{}/@history\'.format(self.doc.absolute_url())\n-        response = self.api_session.patch(url, json={\'version\': 0})\n+        url = "{}/@history".format(self.doc.absolute_url())\n+        response = self.api_session.patch(url, json={"version": 0})\n         self.assertEqual(response.status_code, 200)\n \n         # My Document is the old title\n         self.assertEqual(\n             response.json(),\n-            {u\'message\': u\'My Document has been reverted to revision 0.\'}\n+            {u"message": u"My Document has been reverted to revision 0."},\n         )\n \n     def test_time_field(self):\n-        url = \'{}/@history\'.format(self.doc.absolute_url())\n+        url = "{}/@history".format(self.doc.absolute_url())\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n+            self.assertTrue(isinstance(item["time"], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -115,56 +99,54 @@ def test_get_historical_link(self):\n         data = response.json()\n \n         for item in data:\n-            if item[\'type\'] == \'versioning\':\n+            if item["type"] == "versioning":\n                 self.assertTrue(\n-                    item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n+                    item["@id"].endswith("@history/" + str(item["version"]))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', list(item))\n+                self.assertNotIn("@id", list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\n-        url = self.doc.absolute_url() + \'/@history/current\'\n+        url = self.doc.absolute_url() + "/@history/current"\n         response = self.api_session.get(url)\n-        self.assertEqual(response.json()[\'title\'], \'Current version\')\n+        self.assertEqual(response.json()["title"], "Current version")\n \n     def test_previous_version(self):\n         # Does version=0 get the older version?\n-        url = self.doc.absolute_url() + \'/@history/0\'\n+        url = self.doc.absolute_url() + "/@history/0"\n         response = self.api_session.get(url)\n-        self.assertEqual(response.json()[\'title\'], \'My Document\')\n+        self.assertEqual(response.json()["title"], "My Document")\n \n     def test_no_sharing(self):\n-        url = self.doc.absolute_url() + \'/@history/0\'\n+        url = self.doc.absolute_url() + "/@history/0"\n         response = self.api_session.get(url)\n-        self.assertNotIn(\'sharing\', response.json())\n+        self.assertNotIn("sharing", response.json())\n \n \n class TestHistoryEndpointTranslatedMessages(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = \'{}/@history\'.format(self.doc.absolute_url())\n+        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n \n         transaction.commit()\n \n@@ -172,28 +154,19 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_actions_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Crear\',\n-            first_action[\'action\'],\n-        )\n+        self.assertEqual(u"Crear", first_action["action"])\n \n     def test_state_titles_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Privado\',\n-            first_action[\'state_title\'],\n-        )\n+        self.assertEqual(u"Privado", first_action["state_title"])\n \n     def test_transition_titles_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Crear\',\n-            first_action[\'transition_title\'],\n-        )\n+        self.assertEqual(u"Crear", first_action["transition_title"])\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex e7c08903..dbbecb3f 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -16,113 +16,103 @@ class TestServicesNavigation(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         self.folder2 = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         self.subfolder1 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         self.subfolder2 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         self.thirdlevelfolder = createContentInContainer(\n-            self.subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n+            self.subfolder1,\n+            u"Folder",\n+            id=u"thirdlevelfolder",\n+            title=u"Third Level Folder",\n+        )\n         self.fourthlevelfolder = createContentInContainer(\n-            self.thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            self.thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_navigation_with_no_params_gets_only_top_level(self):\n-        response = self.api_session.get(\'/folder/@navigation\')\n+        response = self.api_session.get("/folder/@navigation")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': self.portal_url + u\'/folder/@navigation\',\n-                \'items\': [\n+                "@id": self.portal_url + u"/folder/@navigation",\n+                "items": [\n+                    {u"title": u"Home", u"@id": self.portal_url, u"description": u""},\n                     {\n-                        u\'title\': u\'Home\',\n-                        u\'@id\': self.portal_url,\n-                        u\'description\': u\'\',\n+                        u"title": u"Some Folder",\n+                        u"@id": self.portal_url + u"/folder",\n+                        u"description": u"",\n                     },\n                     {\n-                        u\'title\': u\'Some Folder\',\n-                        u\'@id\': self.portal_url + u\'/folder\',\n-                        u\'description\': u\'\',\n+                        u"@id": self.portal_url + u"/folder2",\n+                        u"description": u"",\n+                        u"title": u"Some Folder 2",\n                     },\n-                    {\n-                        u\'@id\': self.portal_url + u\'/folder2\',\n-                        u\'description\': u\'\',\n-                        u\'title\': u\'Some Folder 2\'\n-                    }\n-                ]\n-            }\n+                ],\n+            },\n         )\n \n     def test_navigation_service(self):\n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 2\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 2}\n+        )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 3)\n-        self.assertEqual(\n-            response.json()[\'items\'][1][\'title\'], u\'Some Folder\')\n-        self.assertEqual(len(response.json()[\'items\'][1][\'items\']), 3)\n-        self.assertEqual(len(response.json()[\'items\'][2][\'items\']), 0)\n+        self.assertEqual(len(response.json()["items"]), 3)\n+        self.assertEqual(response.json()["items"][1]["title"], u"Some Folder")\n+        self.assertEqual(len(response.json()["items"][1]["items"]), 3)\n+        self.assertEqual(len(response.json()["items"][2]["items"]), 0)\n \n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 3\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 3}\n+        )\n \n+        self.assertEqual(len(response.json()["items"][1]["items"][0]["items"]), 1)\n         self.assertEqual(\n-            len(response.json()[\'items\'][1][\'items\'][0][\'items\']), 1)\n-        self.assertEqual(\n-            response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'title\'],\n-            u\'Third Level Folder\')\n-        self.assertNotIn(\n-            \'items\', response.json()[\'items\'][1][\'items\'][0][\'items\'][0])\n+            response.json()["items"][1]["items"][0]["items"][0]["title"],\n+            u"Third Level Folder",\n+        )\n+        self.assertNotIn("items", response.json()["items"][1]["items"][0]["items"][0])\n \n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 4\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 4}\n+        )\n \n         self.assertEqual(\n-            len(response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'items\']),\n-            1)\n+            len(response.json()["items"][1]["items"][0]["items"][0]["items"]), 1\n+        )\n         self.assertEqual(\n-            response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'items\'][0][\'title\'], # noqa\n-            u\'Fourth Level Folder\')\n+            response.json()["items"][1]["items"][0]["items"][0]["items"][0][\n+                "title"\n+            ],  # noqa\n+            u"Fourth Level Folder",\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex 2aaaf608..735e9263 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -16,90 +16,76 @@ class TestPrincipalsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         self.user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n \n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        self.gtool.addGroup(\'ploneteam\', (), (),\n-                            properties=properties,\n-                            title=properties[\'title\'],\n-                            description=properties[\'description\'])\n+        self.gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_principals(self):\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "noam"\n-            }\n-        )\n+        response = self.api_session.get("/@principals", params={"search": "noam"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'users\']))\n-        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n-\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "plone"\n-            }\n-        )\n+        self.assertEqual(1, len(response["users"]))\n+        self.assertEqual("noam", response["users"][0]["id"])\n+\n+        response = self.api_session.get("/@principals", params={"search": "plone"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'groups\']))\n-        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response["groups"]))\n+        self.assertEqual("ploneteam", response["groups"][0]["id"])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n-            email=\'plone.user@example.com\',\n-            username=\'plone.user\'\n+            email="plone.user@example.com", username="plone.user"\n         )\n         transaction.commit()\n \n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "plone"\n-            }\n-        )\n+        response = self.api_session.get("/@principals", params={"search": "plone"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'users\']))\n-        self.assertEqual(1, len(response[\'groups\']))\n-        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response["users"]))\n+        self.assertEqual(1, len(response["groups"]))\n+        self.assertEqual("plone.user", response["users"][0]["id"])\n+        self.assertEqual("ploneteam", response["groups"][0]["id"])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 7e6adf17..514d27ff 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -21,18 +21,15 @@\n \n \n class ISampleTile(Interface):\n-    title = zope.schema.TextLine(\n-        title=u\'Title\',\n-        required=False\n-    )\n+    title = zope.schema.TextLine(title=u"Title", required=False)\n \n \n class SampleTile(Tile):\n \n-    __name__ = \'sample.tile\'  # would normally be set by a ZCML handler\n+    __name__ = "sample.tile"  # would normally be set by a ZCML handler\n \n     def __call__(self):\n-        return \'<html><body><b>My tile</b></body></html>\'\n+        return "<html><body><b>My tile</b></body></html>"\n \n \n class TestServicesTiles(unittest.TestCase):\n@@ -40,115 +37,98 @@ class TestServicesTiles(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\')\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         behavior_list = [a for a in fti.behaviors]\n-        behavior_list.append(\'plone.tiles\')\n-        behavior_list.append(\'plone.leadimage\')\n+        behavior_list.append("plone.tiles")\n+        behavior_list.append("plone.leadimage")\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u\'Document\',\n-            id=u\'doc\',\n-            title=u\'A document\')\n+            self.portal, u"Document", id=u"doc", title=u"A document"\n+        )\n         transaction.commit()\n \n         sampleTileType = TileType(\n-            u\'sample.tile\',\n-            u\'Sample tile\',\n-            \'cmf.ModifyPortalContent\',\n-            \'zope.Public\',\n-            description=u\'A tile used for testing\',\n+            u"sample.tile",\n+            u"Sample tile",\n+            "cmf.ModifyPortalContent",\n+            "zope.Public",\n+            description=u"A tile used for testing",\n             schema=ISampleTile,\n-            icon=\'testicon\')\n-        provideUtility(sampleTileType, name=u\'sample.tile\')\n-        provideAdapter(SampleTile, (Interface, Interface),\n-                       IBasicTile, name=u\'sample.tile\')\n+            icon="testicon",\n+        )\n+        provideUtility(sampleTileType, name=u"sample.tile")\n+        provideAdapter(\n+            SampleTile, (Interface, Interface), IBasicTile, name=u"sample.tile"\n+        )\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_available_tiles(self):\n-        response = self.api_session.get(\'/@tiles\')\n+        response = self.api_session.get("/@tiles")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(len(response), 1)\n-        self.assertEqual(\n-            response[0][\'@id\'],\n-            self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEqual(\n-            response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEqual(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0]["@id"], self.portal_url + u"/@tiles/sample.tile")\n+        self.assertEqual(response[0]["title"], u"Sample tile")\n+        self.assertEqual(response[0]["description"], u"A tile used for testing")\n+        self.assertEqual(response[0]["icon"], "testicon")\n \n     def test_get_tile(self):\n-        response = self.api_session.get(\'/@tiles/sample.tile\')\n+        response = self.api_session.get("/@tiles/sample.tile")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual(response[\'title\'], u\'Sample tile\')\n-        self.assertEqual(\n-            response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEqual(\n-            response[\'properties\'][\'title\'][\'type\'], u\'string\')\n+        self.assertEqual(response["title"], u"Sample tile")\n+        self.assertEqual(response["properties"]["title"]["title"], u"Title")\n+        self.assertEqual(response["properties"]["title"]["type"], u"string")\n \n     def test_patch_tiles_list(self):\n         response = self.api_session.patch(\n-            \'/doc\',\n+            "/doc",\n             json={\n                 "tiles": {\n-                    \'uuid1\': {\'@type\': \'title\'},\n-                    \'uuid2\': {\'@type\': \'description\'}\n-                },\n-            })\n+                    "uuid1": {"@type": "title"},\n+                    "uuid2": {"@type": "description"},\n+                }\n+            },\n+        )\n \n         self.assertEqual(response.status_code, 204)\n \n-        response = self.api_session.get(\'/doc\')\n+        response = self.api_session.get("/doc")\n         response = response.json()\n \n         self.assertEqual(\n-            response[\'tiles\'],\n-            {\n-                \'uuid1\': {\'@type\': \'title\'},\n-                \'uuid2\': {\'@type\': \'description\'}\n-            }\n+            response["tiles"],\n+            {"uuid1": {"@type": "title"}, "uuid2": {"@type": "description"}},\n         )\n \n     def test_patch_tiles_layout(self):\n         response = self.api_session.patch(\n-            \'/doc\',\n-            json={\n-                "tiles_layout": {\n-                    "items": ["#uuid1", "#uuid2"]\n-                }\n-            })\n+            "/doc", json={"tiles_layout": {"items": ["#uuid1", "#uuid2"]}}\n+        )\n \n         self.assertEqual(response.status_code, 204)\n \n-        response = self.api_session.get(\'/doc\')\n+        response = self.api_session.get("/doc")\n         response = response.json()\n \n-        self.assertEqual(\n-            response[\'tiles_layout\'],\n-            {\n-                "items": ["#uuid1", "#uuid2"]\n-            }\n-        )\n+        self.assertEqual(response["tiles_layout"], {"items": ["#uuid1", "#uuid2"]})\n \n     def test_get_tiles_layout_schema(self):\n-        response = self.api_session.get(\'/@types/Document\')\n+        response = self.api_session.get("/@types/Document")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex bb83e4f1..9ef8357c 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -17,83 +17,72 @@ class TestServicesTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n         for item in response.json():\n-            self.assertEqual(\n-                sorted(item),\n-                sorted([\'@id\', \'title\', \'addable\'])\n-            )\n+            self.assertEqual(sorted(item), sorted(["@id", "title", "addable"]))\n \n     def test_get_types_document(self):\n         response = self.api_session.get(\n-            \'{}/@types/Document\'.format(self.portal.absolute_url())\n+            "{}/@types/Document".format(self.portal.absolute_url())\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json+schema\',\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json+schema", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json+schema",\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json+schema", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n \n     def test_get_types_with_unknown_type(self):\n         response = self.api_session.get(\n-            \'{}/@types/UnknownType\'.format(self.portal.absolute_url())\n+            "{}/@types/UnknownType".format(self.portal.absolute_url())\n         )\n \n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            \'application/json\',\n-            response.headers.get(\'Content-Type\'),\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            "application/json",\n+            response.headers.get("Content-Type"),\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n \n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n \n         response_allowed_ids = [\n-            x[\'@id\'].split(\'/\')[-1]\n-            for x in response.json()\n-            if x[\'addable\']\n+            x["@id"].split("/")[-1] for x in response.json() if x["addable"]\n         ]\n \n         # We check subset here, because only DX types are returned by the\n@@ -102,78 +91,65 @@ def test_contextaware_addable(self):\n         self.assertTrue(set(response_allowed_ids).issubset(set(allowed_ids)))\n \n     def test_image_type(self):\n-        response = self.api_session.get(\'/@types/Image\')\n+        response = self.api_session.get("/@types/Image")\n         response = response.json()\n-        self.assertIn(\'fieldsets\', response)\n-        self.assertIn(\n-            \'image.data\', response[\'properties\'][\'image\'][\'properties\'])\n+        self.assertIn("fieldsets", response)\n+        self.assertIn("image.data", response["properties"]["image"]["properties"])\n \n     def test_file_type(self):\n-        response = self.api_session.get(\'/@types/File\')\n+        response = self.api_session.get("/@types/File")\n         response = response.json()\n-        self.assertIn(\'fieldsets\', response)\n-        self.assertIn(\n-            \'file.data\', response[\'properties\'][\'file\'][\'properties\'])\n+        self.assertIn("fieldsets", response)\n+        self.assertIn("file.data", response["properties"]["file"]["properties"])\n \n     def test_event_type(self):\n-        response = self.api_session.get(\'/@types/Event\')\n+        response = self.api_session.get("/@types/Event")\n         response = response.json()\n-        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n+        self.assertIn("title", response["properties"]["start"])\n \n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'1234\'\n+            email="noam.chomsky@example.com", username="noam", password="1234"\n         )\n \n         folder = api.content.create(\n-            container=self.portal,\n-            id="folder",\n-            type=\'Folder\',\n-            title=u\'folder\',)\n+            container=self.portal, id="folder", type="Folder", title=u"folder"\n+        )\n \n         folder_cant_add = api.content.create(\n             container=self.portal,\n             id="folder_cant_add",\n-            type=\'Folder\',\n-            title=u\'folder_cant_add\',)\n+            type="Folder",\n+            title=u"folder_cant_add",\n+        )\n \n-        api.user.grant_roles(\n-            user=user,\n-            obj=folder,\n-            roles=[\'Contributor\', ])\n+        api.user.grant_roles(user=user, obj=folder, roles=["Contributor"])\n \n-        api.user.grant_roles(\n-            user=user,\n-            obj=folder_cant_add,\n-            roles=[\'Reader\', ])\n+        api.user.grant_roles(user=user, obj=folder_cant_add, roles=["Reader"])\n \n         transaction.commit()\n \n-        self.api_session.auth = (\'noam\', \'1234\')\n+        self.api_session.auth = ("noam", "1234")\n         # In the folder, the user should be able to add types since we granted\n         # Contributor role on it\n-        response = self.api_session.get(\'/folder/@types\')\n+        response = self.api_session.get("/folder/@types")\n         response = response.json()\n \n         # Any addable type will do.\n-        self.assertTrue(any(a[\'addable\'] for a in response))\n+        self.assertTrue(any(a["addable"] for a in response))\n \n         # In the folder where the user only have Reader role, no types are\n         # addable\n-        response = self.api_session.get(\'/folder_cant_add/@types\')\n+        response = self.api_session.get("/folder_cant_add/@types")\n         response = response.json()\n \n-        self.assertEqual(\n-            len([a for a in response if a[\'addable\']]), 0)\n+        self.assertEqual(len([a for a in response if a["addable"]]), 0)\n \n         # and in the root Plone site there\'s no addable types\n-        response = self.api_session.get(\'/@types\')\n+        response = self.api_session.get("/@types")\n         response = response.json()\n \n-        self.assertEqual(\n-            len([a for a in response if a[\'addable\']]), 0)\n+        self.assertEqual(len([a for a in response if a["addable"]]), 0)\n \n \n class TestServicesTypesTranslatedTitles(unittest.TestCase):\n@@ -181,13 +157,13 @@ class TestServicesTypesTranslatedTitles(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -196,20 +172,21 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types_translated(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertEqual({\n-            u\'Archivo\',\n-            u\'Carpeta\',\n-            u\'Colecci\xc3\xb3n\',\n-            u\'DX Test Document\',\n-            u\'Enlace\',\n-            u\'Evento\',\n-            u\'Imagen\',\n-            u\'Noticia\',\n-            u\'P\xc3\xa1gina\'},\n-            set(item[\'title\'] for item in response.json()))\n+        self.assertEqual(\n+            {\n+                u"Archivo",\n+                u"Carpeta",\n+                u"Colecci\xc3\xb3n",\n+                u"DX Test Document",\n+                u"Enlace",\n+                u"Evento",\n+                u"Imagen",\n+                u"Noticia",\n+                u"P\xc3\xa1gina",\n+            },\n+            set(item["title"] for item in response.json()),\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 191fb186..186f067b 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -27,43 +27,43 @@ class TestUsersEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n+            email="noam.chomsky@example.com",\n+            username="noam",\n             properties=properties,\n-            password=u\'password\'\n+            password=u"password",\n         )\n         properties = {\n-            \'email\': \'otheruser@example.com\',\n-            \'username\': \'otheruser\',\n-            \'fullname\': \'Other user\',\n+            "email": "otheruser@example.com",\n+            "username": "otheruser",\n+            "fullname": "Other user",\n         }\n         api.user.create(\n-            email=\'otheruser@example.com\',\n-            username=\'otheruser\',\n+            email="otheruser@example.com",\n+            username="otheruser",\n             properties=properties,\n-            password=u\'otherpassword\'\n+            password=u"otherpassword",\n         )\n         transaction.commit()\n \n@@ -72,84 +72,70 @@ def tearDown(self):\n         self.anon_api_session.close()\n \n     def test_list_users(self):\n-        response = self.api_session.get(\'/@users\')\n+        response = self.api_session.get("/@users")\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(4, len(response.json()))\n-        user_ids = [user[\'id\'] for user in response.json()]\n-        self.assertIn(\'admin\', user_ids)\n-        self.assertIn(\'test_user_1_\', user_ids)\n-        self.assertIn(\'noam\', user_ids)\n-        noam = [x for x in response.json() if x.get(\'username\') == \'noam\'][0]\n-        self.assertEqual(\'noam\', noam.get(\'id\'))\n-        self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            noam.get(\'@id\')\n-        )\n-        self.assertEqual(\'noam.chomsky@example.com\', noam.get(\'email\'))\n-        self.assertEqual(\'Noam Avram Chomsky\', noam.get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', noam.get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', noam.get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', noam.get(\'location\'))\n+        user_ids = [user["id"] for user in response.json()]\n+        self.assertIn("admin", user_ids)\n+        self.assertIn("test_user_1_", user_ids)\n+        self.assertIn("noam", user_ids)\n+        noam = [x for x in response.json() if x.get("username") == "noam"][0]\n+        self.assertEqual("noam", noam.get("id"))\n+        self.assertEqual(self.portal.absolute_url() + "/@users/noam", noam.get("@id"))\n+        self.assertEqual("noam.chomsky@example.com", noam.get("email"))\n+        self.assertEqual("Noam Avram Chomsky", noam.get("fullname"))\n+        self.assertEqual("web.mit.edu/chomsky", noam.get("home_page"))  # noqa\n+        self.assertEqual("Professor of Linguistics", noam.get("description"))  # noqa\n+        self.assertEqual("Cambridge, MA", noam.get("location"))\n \n     def test_list_users_without_being_manager(self):\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users\')\n+        response = noam_api_session.get("/@users")\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_list_users_as_anonymous(self):\n \n-        response = self.anon_api_session.get(\'/@users\')\n+        response = self.anon_api_session.get("/@users")\n         self.assertEqual(response.status_code, 401)\n \n     def test_add_user(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n                 "password": "peopleshistory",\n-                "roles": ["Contributor", ],\n+                "roles": ["Contributor"],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        howard = api.user.get(userid=\'howard\')\n-        self.assertEqual(\n-            "howard.zinn@example.com", howard.getProperty(\'email\')\n-        )\n-        self.assertIn(\'Contributor\', api.user.get_roles(username="howard"))\n+        howard = api.user.get(userid="howard")\n+        self.assertEqual("howard.zinn@example.com", howard.getProperty("email"))\n+        self.assertIn("Contributor", api.user.get_roles(username="howard"))\n \n     def test_add_user_username_is_required(self):\n-        response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "password": "noamchomsky"\n-            },\n-        )\n+        response = self.api_session.post("/@users", json={"password": "noamchomsky"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is required\' in response.text)\n+        self.assertTrue("Property \'username\' is required" in response.text)\n \n     def test_add_user_password_is_required(self):\n-        response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "noamchomsky"\n-            },\n-        )\n+        response = self.api_session.post("/@users", json={"username": "noamchomsky"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n         self.assertTrue(\n-            (\'You have to either send a \'\n-             \'password or sendPasswordReset\') in response.text)\n+            ("You have to either send a " "password or sendPasswordReset")\n+            in response.text\n+        )\n \n     def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         # enable use_email_as_login\n@@ -157,16 +143,11 @@ def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "noam",\n-                "password": "secret"\n-            },\n+            "/@users", json={"username": "noam", "password": "secret"}\n         )\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is not allowed\' in\n-                        response.text)\n+        self.assertTrue("Property \'username\' is not allowed" in response.text)\n \n     def test_add_user_email_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -174,16 +155,12 @@ def test_add_user_email_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(api.user.get(userid=\'howard.zinn@example.com\'))\n+        self.assertTrue(api.user.get(userid="howard.zinn@example.com"))\n \n     def test_username_is_not_allowed_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -191,18 +168,17 @@ def test_username_is_not_allowed_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "secret"\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is not allowed\'\n-                        in response.text)\n+        self.assertTrue("Property \'username\' is not allowed" in response.text)\n \n     def test_add_user_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -210,38 +186,33 @@ def test_add_user_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user = api.user.get(userid=\'howard.zinn@example.com\')\n+        user = api.user.get(userid="howard.zinn@example.com")\n         self.assertTrue(user)\n-        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n-        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+        self.assertEqual("howard.zinn@example.com", user.getUserName())\n+        self.assertEqual("howard.zinn@example.com", user.getProperty("email"))\n \n     def test_add_user_with_sendPasswordRest_sends_email(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "sendPasswordReset": True\n+                "sendPasswordReset": True,\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(\'To: howard.zinn@example.com\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("To: howard.zinn@example.com" in self.mailhost.messages[0])\n \n     def test_add_user_send_properties(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "password": "secret",\n@@ -252,8 +223,8 @@ def test_add_user_send_properties(self):\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        member = api.user.get(username=\'howard\')\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Howard Zinn\')\n+        member = api.user.get(username="howard")\n+        self.assertEqual(member.getProperty("fullname"), "Howard Zinn")\n \n     def test_add_anon_user_sends_properties_are_saved(self):\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n@@ -261,7 +232,7 @@ def test_add_anon_user_sends_properties_are_saved(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n@@ -271,8 +242,8 @@ def test_add_anon_user_sends_properties_are_saved(self):\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        member = api.user.get(username=\'howard\')\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Howard Zinn\')\n+        member = api.user.get(username="howard")\n+        self.assertEqual(member.getProperty("fullname"), "Howard Zinn")\n \n     def test_add_anon_no_roles(self):\n         """Make sure anonymous users cannot set their own roles.\n@@ -283,19 +254,19 @@ def test_add_anon_no_roles(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "roles": [\'Manager\'],\n+                "roles": ["Manager"],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        errors = response.json()[\'error\'][\'errors\']\n-        fields = [x[\'field\'] for x in errors]\n-        self.assertEqual([\'roles\'], fields)\n+        errors = response.json()["error"]["errors"]\n+        fields = [x["field"] for x in errors]\n+        self.assertEqual(["roles"], fields)\n \n     def test_add_user_with_uuid_as_userid_enabled(self):\n         # enable use_email_as_login\n@@ -304,389 +275,341 @@ def test_add_user_with_uuid_as_userid_enabled(self):\n         security_settings.use_uuid_as_userid = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n-        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n-        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+        self.assertEqual("howard.zinn@example.com", user.getUserName())\n+        self.assertEqual("howard.zinn@example.com", user.getProperty("email"))\n \n     def test_get_user(self):\n-        response = self.api_session.get(\'/@users/noam\')\n+        response = self.api_session.get("/@users/noam")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\'noam\', response.json().get(\'id\'))\n+        self.assertEqual("noam", response.json().get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            response.json().get(\'@id\')\n+            self.portal.absolute_url() + "/@users/noam", response.json().get("@id")\n         )\n+        self.assertEqual("noam.chomsky@example.com", response.json().get("email"))\n+        self.assertEqual("Noam Avram Chomsky", response.json().get("fullname"))\n         self.assertEqual(\n-            \'noam.chomsky@example.com\',\n-            response.json().get(\'email\')\n-        )\n-        self.assertEqual(\'Noam Avram Chomsky\', response.json().get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', response.json().get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', response.json().get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', response.json().get(\'location\'))\n+            "web.mit.edu/chomsky", response.json().get("home_page")\n+        )  # noqa\n+        self.assertEqual(\n+            "Professor of Linguistics", response.json().get("description")\n+        )  # noqa\n+        self.assertEqual("Cambridge, MA", response.json().get("location"))\n \n     def test_get_user_as_anonymous(self):\n-        response = self.anon_api_session.get(\'/@users/noam\')\n+        response = self.anon_api_session.get("/@users/noam")\n         self.assertEqual(response.status_code, 401)\n \n     def test_get_other_user_info_when_logged_in(self):\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users/otheruser\')\n+        response = noam_api_session.get("/@users/otheruser")\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'/@users\', params={\'query\': \'noa\'})\n+        response = self.api_session.get("/@users", params={"query": "noa"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'noam\', response.json()[0].get(\'id\'))\n+        self.assertEqual("noam", response.json()[0].get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            response.json()[0].get(\'@id\')\n+            self.portal.absolute_url() + "/@users/noam", response.json()[0].get("@id")\n         )\n+        self.assertEqual("noam.chomsky@example.com", response.json()[0].get("email"))\n         self.assertEqual(\n-            \'noam.chomsky@example.com\',\n-            response.json()[0].get(\'email\')\n-        )\n-        self.assertEqual(\'Noam Avram Chomsky\', response.json()[0].get(\'fullname\'))  # noqa\n+            "Noam Avram Chomsky", response.json()[0].get("fullname")\n+        )  # noqa\n \n-        response = self.api_session.get(\'/@users\', params={\'query\': \'howa\'})\n+        response = self.api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'howard\', response.json()[0].get(\'id\'))\n+        self.assertEqual("howard", response.json()[0].get("id"))\n \n     def test_get_search_user_with_filter_as_anonymous(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n-        response = self.anon_api_session.get(\n-            \'/@users\',\n-            params={\'query\': \'howa\'}\n-        )\n+        response = self.anon_api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 401)\n \n     def test_get_search_user_with_filter_as_unauthorized_user(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users\', params={\'query\': \'howa\'})\n+        response = noam_api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_get_non_existing_user(self):\n-        response = self.api_session.get(\'/@users/non-existing-user\')\n+        response = self.api_session.get("/@users/non-existing-user")\n \n         self.assertEqual(response.status_code, 404)\n \n     def test_update_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'avram\',\n-            \'email\': \'avram.chomsky@example.com\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "avram",\n+            "email": "avram.chomsky@example.com",\n         }\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        noam = api.user.get(userid=\'noam\')\n-        self.assertEqual(\'noam\', noam.getUserId())  # user id never changes\n-        self.assertEqual(\'avram\', noam.getUserName())\n-        self.assertEqual(\'Noam A. Chomsky\', noam.getProperty(\'fullname\'))\n-        self.assertEqual(\n-            \'avram.chomsky@example.com\',\n-            noam.getProperty(\'email\')\n-        )\n+        noam = api.user.get(userid="noam")\n+        self.assertEqual("noam", noam.getUserId())  # user id never changes\n+        self.assertEqual("avram", noam.getUserName())\n+        self.assertEqual("Noam A. Chomsky", noam.getProperty("fullname"))\n+        self.assertEqual("avram.chomsky@example.com", noam.getProperty("email"))\n \n     def test_user_can_update_himself(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        noam = api.user.get(userid=\'noam\')\n-        self.assertEqual(\'noam\', noam.getUserId())  # user id never changes\n-        self.assertEqual(\'Noam A. Chomsky\', noam.getProperty(\'fullname\'))\n-        self.assertEqual(\n-            \'avram.chomsky@plone.org\',\n-            noam.getProperty(\'email\')\n-        )\n+        noam = api.user.get(userid="noam")\n+        self.assertEqual("noam", noam.getUserId())  # user id never changes\n+        self.assertEqual("Noam A. Chomsky", noam.getProperty("fullname"))\n+        self.assertEqual("avram.chomsky@plone.org", noam.getProperty("email"))\n \n     def test_update_roles(self):\n-        self.assertNotIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertNotIn("Contributor", api.user.get_roles(username="noam"))\n \n-        self.api_session.patch(\n-            \'/@users/noam\',\n-            json={\'roles\': {\'Contributor\': True}}\n-        )\n+        self.api_session.patch("/@users/noam", json={"roles": {"Contributor": True}})\n         transaction.commit()\n-        self.assertIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertIn("Contributor", api.user.get_roles(username="noam"))\n \n-        self.api_session.patch(\n-            \'/@users/noam\',\n-            json={\'roles\': {\'Contributor\': False}}\n-        )\n+        self.api_session.patch("/@users/noam", json={"roles": {"Contributor": False}})\n         transaction.commit()\n-        self.assertNotIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertNotIn("Contributor", api.user.get_roles(username="noam"))\n \n     def test_update_user_password(self):\n-        old_password_hashes = dict(\n-            self.portal.acl_users.source_users._user_passwords\n-        )\n-        payload = {\'password\': \'secret\'}\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        old_password_hashes = dict(self.portal.acl_users.source_users._user_passwords)\n+        payload = {"password": "secret"}\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n \n-        new_password_hashes = dict(\n-            self.portal.acl_users.source_users._user_passwords\n-        )\n-        self.assertNotEqual(\n-            old_password_hashes[\'noam\'], new_password_hashes[\'noam\']\n-        )\n+        new_password_hashes = dict(self.portal.acl_users.source_users._user_passwords)\n+        self.assertNotEqual(old_password_hashes["noam"], new_password_hashes["noam"])\n \n     def test_update_portrait(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_update_portrait_with_default_plone_scaling(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\',\n-                \'scale\': True\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n+                "scale": True,\n             }\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_update_portrait_by_manager(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.anon_api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.anon_api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_user_can_not_update_another_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'otheruser\', \'otherpassword\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("otheruser", "otherpassword")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_user_requests_password_sends_password_via_mail(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         payload = {}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         # FIXME: Test that mail is sent\n \n     def test_user_can_set_her_own_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         self.portal.manage_permission(\n-            SetOwnPassword, roles=[\'Authenticated\', \'Manager\'], acquire=False)\n+            SetOwnPassword, roles=["Authenticated", "Manager"], acquire=False\n+        )\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        authed = self.portal.acl_users.authenticate(\'noam\', \'new_password\',\n-                                                    {})\n+        authed = self.portal.acl_users.authenticate("noam", "new_password", {})\n         self.assertTrue(authed)\n \n     def test_normal_authenticated_user_cannot_set_other_users_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         self.portal.manage_permission(\n-            SetOwnPassword, roles=[\'Authenticated\', \'Manager\'], acquire=False)\n+            SetOwnPassword, roles=["Authenticated", "Manager"], acquire=False\n+        )\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/otheruser/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post(\n+            "/@users/otheruser/reset-password", json=payload\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Wrong user\')\n+        self.assertEqual(response.json()["error"]["type"], "Wrong user")\n \n     def test_user_set_own_password_requires_set_own_password_permission(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        self.portal.manage_permission(SetOwnPassword, roles=[\'Manager\'],\n-                                      acquire=False)\n+        self.api_session.auth = ("noam", "password")\n+        self.portal.manage_permission(SetOwnPassword, roles=["Manager"], acquire=False)\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_user_set_own_password_requires_old_and_new_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'old_password\': \'password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"old_password": "password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n-        payload = {\'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n+        payload = {"new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n \n     def test_user_set_own_password_checks_old_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'new_password\': \'new_password\',\n-                   \'old_password\': \'wrong_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"new_password": "new_password", "old_password": "wrong_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Wrong password\')\n+        self.assertEqual(response.json()["error"]["type"], "Wrong password")\n \n     def test_user_set_reset_token_requires_new_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'reset_token\': \'abc\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"reset_token": "abc"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n \n     def test_reset_with_token(self):\n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n-        reset_info = reset_tool.requestReset(\'noam\')\n-        token = reset_info[\'randomstring\']\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n+        reset_info = reset_tool.requestReset("noam")\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"reset_token": token, "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        authed = self.portal.acl_users.authenticate(\'noam\', \'new_password\',\n-                                                    {})\n+        authed = self.portal.acl_users.authenticate("noam", "new_password", {})\n         self.assertTrue(authed)\n \n     def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n@@ -697,29 +620,24 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.id),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.id), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n@@ -731,29 +649,24 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.getUserName()),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n@@ -764,41 +677,36 @@ def test_reset_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.getUserName()),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n     def test_delete_user(self):\n-        response = self.api_session.delete(\'/@users/noam\')\n+        response = self.api_session.delete("/@users/noam")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(None, api.user.get(userid=\'noam\'))\n+        self.assertEqual(None, api.user.get(userid="noam"))\n \n     def test_delete_non_existing_user(self):\n-        response = self.api_session.delete(\'/@users/non-existing-user\')\n+        response = self.api_session.delete("/@users/non-existing-user")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 404)\n@@ -809,10 +717,7 @@ def test_anonymous_requires_enable_self_reg(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "password": "noamchomsky"\n-            },\n+            "/@users", json={"password": "noamchomsky"}\n         )\n         transaction.commit()\n \n@@ -822,11 +727,8 @@ def test_anonymous_requires_enable_self_reg(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\'\n-            },\n+            "/@users",\n+            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n         )\n         transaction.commit()\n \n@@ -838,17 +740,13 @@ def test_anonymous_without_enable_user_pwd_choice_sends_mail(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\'\n-            },\n+            "/@users",\n+            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(\'To: avram.chomsky@example.com\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("To: avram.chomsky@example.com" in self.mailhost.messages[0])\n \n     def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n@@ -856,28 +754,27 @@ def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'password\\\' is not allowed\'\n-                        in response.text)\n+        self.assertTrue("Property \'password\' is not allowed" in response.text)\n \n         security_settings.enable_user_pwd_choice = True\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n@@ -891,11 +788,11 @@ def test_anonymous_with_enable_user_pwd_choice_doent_send_email(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n@@ -910,25 +807,25 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n \n         response = response.json()\n-        self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEqual(1, len(response[\'roles\']))\n+        self.assertIn("Member", response["roles"])\n+        self.assertEqual(1, len(response["roles"]))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n@@ -937,5 +834,5 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n \n         response = response.json()\n \n-        self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEqual(1, len(response[\'roles\']))\n+        self.assertIn("Member", response["roles"])\n+        self.assertEqual(1, len(response["roles"]))\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 69a9a8d0..8e7d0391 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -16,8 +16,8 @@\n import unittest\n \n \n-TEST_TERM_1 = SimpleTerm(42, token=\'token1\', title=u\'Title 1\')\n-TEST_TERM_2 = SimpleTerm(43, token=\'token2\', title=u\'Title 2\')\n+TEST_TERM_1 = SimpleTerm(42, token="token1", title=u"Title 1")\n+TEST_TERM_2 = SimpleTerm(43, token="token2", title=u"Title 2")\n TEST_VOCABULARY = SimpleVocabulary([TEST_TERM_1, TEST_TERM_2])\n \n \n@@ -26,10 +26,12 @@ def test_vocabulary_factory(context):\n \n \n def test_context_vocabulary_factory(context):\n-    return SimpleVocabulary([\n-        SimpleTerm(context.id, token=\'id\', title=context.id),\n-        SimpleTerm(context.title, token=\'title\', title=context.title)\n-    ])\n+    return SimpleVocabulary(\n+        [\n+            SimpleTerm(context.id, token="id", title=context.id),\n+            SimpleTerm(context.title, token="title", title=context.title),\n+        ]\n+    )\n \n \n class TestVocabularyEndpoint(unittest.TestCase):\n@@ -39,23 +41,23 @@ class TestVocabularyEndpoint(unittest.TestCase):\n     maxDiff = None\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         provideUtility(\n             test_vocabulary_factory,\n             provides=IVocabularyFactory,\n-            name=\'plone.restapi.tests.test_vocabulary\'\n+            name="plone.restapi.tests.test_vocabulary",\n         )\n \n     def test_get_vocabulary(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -63,18 +65,19 @@ def test_get_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                u\'items\': [\n-                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n-                    {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                u"items": [\n+                    {u"title": u"Title 1", u"token": u"token1"},\n+                    {u"title": u"Title 2", u"token": u"token2"},\n                 ],\n-                u\'items_total\': 2,\n-            }\n+                u"items_total": 2,\n+            },\n         )\n \n     def test_get_vocabulary_batched(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -82,23 +85,26 @@ def test_get_vocabulary_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                u\'batching\': {\n-                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\',  # noqa\n-                    u\'first\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1\',  # noqa\n-                    u\'last\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n-                    u\'next\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                u"batching": {\n+                    u"@id": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n+                    u"first": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n+                    u"last": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n+                    u"next": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n                 },\n-                u\'items\': [\n-                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n-                ],\n-                u\'items_total\': 2,\n-            }\n+                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n+                u"items_total": 2,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?title=2"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,20 +112,16 @@ def test_get_vocabulary_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n-                u\'items\': [\n-                    {\n-                        u\'title\': u\'Title 2\',\n-                        u\'token\': u\'token2\',\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n+                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -127,20 +129,16 @@ def test_get_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\',  # noqa\n-                u\'items\': [\n-                    {\n-                        u\'title\': u\'Title 1\',\n-                        u\'token\': u\'token1\',\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n+                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -148,30 +146,31 @@ def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\',  # noqa\n-                u\'items\': [],\n-                u\'items_total\': 0,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n+                u"items": [],\n+                u"items_total": 0,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title"  # noqa\n         )\n \n         self.assertEqual(400, response.status_code)\n         response = response.json()\n         self.assertEqual(\n-            response.get(\'error\'),\n+            response.get("error"),\n             {\n-                u\'message\': u\'You can not filter by title and token at the same time.\',  # noqa\n-                u\'type\': u\'Invalid parameters\'\n-            }\n+                u"message": u"You can not filter by title and token at the same time.",  # noqa\n+                u"type": u"Invalid parameters",\n+            },\n         )\n \n     def test_get_corner_case_vocabulary_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\'\n+            "/@vocabularies/plone.app.vocabularies.Weekdays?token=0"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -179,85 +178,79 @@ def test_get_corner_case_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\',  # noqa\n-                u\'items\': [\n-                    {\n-                        \'title\': \'Monday\',\n-                        \'token\': \'0\'\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n+                u"items": [{"title": "Monday", "token": "0"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_unknown_vocabulary(self):\n-        response = self.api_session.get(\n-            \'/@vocabularies/unknown.vocabulary\')\n+        response = self.api_session.get("/@vocabularies/unknown.vocabulary")\n \n         self.assertEqual(404, response.status_code)\n         response = response.json()\n-        self.assertEqual(response[\'error\'][\'type\'], u"Not Found")\n+        self.assertEqual(response["error"]["type"], u"Not Found")\n \n     def test_get_all_vocabularies(self):\n-        response = self.api_session.get(\'/@vocabularies\')\n+        response = self.api_session.get("/@vocabularies")\n \n         self.assertEqual(200, response.status_code)\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n-        self.assertTrue(\n-            \'@id\' in list(response[0])\n-        )\n-        self.assertTrue(\n-            \'title\' in list(response[0])\n-        )\n+        self.assertTrue("@id" in list(response[0]))\n+        self.assertTrue("title" in list(response[0]))\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                    u\'title\': u\'plone.restapi.tests.test_vocabulary\'\n+                    u"@id": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                    u"title": u"plone.restapi.tests.test_vocabulary",\n                 }\n             ],\n             [\n-                x for x in response\n-                if x.get(\'title\') == \'plone.restapi.tests.test_vocabulary\'\n-            ]\n+                x\n+                for x in response\n+                if x.get("title") == "plone.restapi.tests.test_vocabulary"\n+            ],\n         )\n \n     def test_context_vocabulary(self):\n         api.content.create(\n-            container=self.portal,\n-            id="testdoc",\n-            type=\'Document\',\n-            title=u\'Document 1\',\n+            container=self.portal, id="testdoc", type="Document", title=u"Document 1"\n         )\n         transaction.commit()\n \n-        context_vocab_name = \'plone.restapi.tests.test_context_vocabulary\'\n-        provideUtility(test_context_vocabulary_factory,\n-                       provides=IVocabularyFactory,\n-                       name=context_vocab_name)\n+        context_vocab_name = "plone.restapi.tests.test_context_vocabulary"\n+        provideUtility(\n+            test_context_vocabulary_factory,\n+            provides=IVocabularyFactory,\n+            name=context_vocab_name,\n+        )\n \n         response = self.api_session.get(\n-            \'testdoc/@vocabularies/{}\'.format(context_vocab_name))\n+            "testdoc/@vocabularies/{}".format(context_vocab_name)\n+        )\n \n         gsm = getGlobalSiteManager()\n-        gsm.unregisterUtility(provided=IVocabularyFactory,\n-                              name=context_vocab_name)\n+        gsm.unregisterUtility(provided=IVocabularyFactory, name=context_vocab_name)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n-                u\'items\': [\n-                    {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n-                    {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n+                u"@id": self.portal_url\n+                + u"/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n+                u"items": [\n+                    {u"title": u"testdoc", u"token": u"id"},\n+                    {u"title": u"Document 1", u"token": u"title"},\n                 ],\n-                u\'items_total\': 2,\n-\n-            })\n+                u"items_total": 2,\n+            },\n+        )\n \n     def tearDown(self):\n         self.api_session.close()\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterUtility(provided=IVocabularyFactory,\n-                              name=\'plone.restapi.tests.test_vocabulary\')\n+        gsm.unregisterUtility(\n+            provided=IVocabularyFactory, name="plone.restapi.tests.test_vocabulary"\n+        )\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex 20719007..5357e39b 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -21,8 +21,8 @@ class TestInstall(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n@@ -32,11 +32,11 @@ def test_product_is_installed(self):\n             qi = get_installer(self.portal)\n             installed = qi.is_product_installed(PROJECT_NAME)\n         else:\n-            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            qi_tool = getToolByName(self.portal, "portal_quickinstaller")\n             installed = PROJECT_NAME in [\n-                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n-        self.assertTrue(\n-            installed, \'package appears not to have been installed\')\n+                p["id"] for p in qi_tool.listInstalledProducts()\n+            ]\n+        self.assertTrue(installed, "package appears not to have been installed")\n \n \n class TestUninstall(unittest.TestCase):\n@@ -44,16 +44,16 @@ class TestUninstall(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n \n         if HAS_INSTALLER:\n             qi = get_installer(self.portal)\n             qi.uninstall_product(PROJECT_NAME)\n             self.installed = qi.is_product_installed(PROJECT_NAME)\n         else:\n-            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n-            with api.env.adopt_roles([\'Manager\']):\n+            qi_tool = getToolByName(self.portal, "portal_quickinstaller")\n+            with api.env.adopt_roles(["Manager"]):\n                 qi_tool.uninstallProducts(products=[PROJECT_NAME])\n             self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n@@ -62,4 +62,4 @@ def test_uninstalled(self):\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\n-        self.assertNotIn(\'IPloneRestapiLayer\', layers)\n+        self.assertNotIn("IPloneRestapiLayer", layers)\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4b7a81f0..5cb9ba40 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -14,31 +14,28 @@ class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # ordering setup\n         self.folder = self.portal\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "Document", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual("my_new_layout", self.portal.getLayout())\n \n \n class TestSiteRootDeserializer(unittest.TestCase):\n@@ -46,35 +43,32 @@ class TestSiteRootDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_opt_in_tiles_deserializer(self):\n         tiles = {\n-            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n-                "@type": "description"\n-            },\n-            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n-                "@type": "title"\n-            }\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n         tiles_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n-                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n             ]\n         }\n \n         self.deserialize(\n             body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n-                json.dumps(tiles), json.dumps(tiles_layout)))\n+                json.dumps(tiles), json.dumps(tiles_layout)\n+            )\n+        )\n \n         self.assertEqual(tiles, json.loads(self.portal.tiles))\n         self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 8d0cb15f..8e7070a5 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -13,25 +13,23 @@ class TestSiteSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def serialize(self):\n-        serializer = getMultiAdapter((self.portal, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize()\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n     def test_serializer_includes_title(self):\n         obj = self.serialize()\n-        self.assertIn(u\'title\', obj)\n-        self.assertEqual(u\'Plone site\', obj[u\'title\'])\n+        self.assertIn(u"title", obj)\n+        self.assertEqual(u"Plone site", obj[u"title"])\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex eccd3025..d586b253 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -20,70 +20,73 @@\n     from plone.app.multilingual.interfaces import ITranslationManager\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestTranslationInfo(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n     def test_translation_info_includes_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request),\n-            name=u\'GET_application_json_@translations\')\n+            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+        )\n \n         info = tinfo.reply()\n-        self.assertIn(\'items\', info)\n-        self.assertEqual(1, len(info[\'items\']))\n+        self.assertIn("items", info)\n+        self.assertEqual(1, len(info["items"]))\n \n     def test_correct_translation_information(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request),\n-            name=u\'GET_application_json_@translations\')\n+            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+        )\n \n         info = tinfo.reply()\n-        tinfo_es = info[\'items\'][0]\n-        self.assertEqual(\n-            self.es_content.absolute_url(),\n-            tinfo_es[\'@id\'])\n+        tinfo_es = info["items"][0]\n+        self.assertEqual(self.es_content.absolute_url(), tinfo_es["@id"])\n         self.assertEqual(\n-            ILanguage(self.es_content).get_language(),\n-            tinfo_es[\'language\'])\n+            ILanguage(self.es_content).get_language(), tinfo_es["language"]\n+        )\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestLinkContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "id": self.es_content.absolute_url(),\n-            },\n+            json={"id": self.es_content.absolute_url()},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n@@ -94,80 +97,74 @@ def test_translation_linking_succeeds(self):\n \n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-            },\n+            json={},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_calling_with_an_already_translated_content_gives_400(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'id\': self.es_content.absolute_url()\n-            },\n+            json={"id": self.es_content.absolute_url()},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_calling_with_inexistent_content_gives_400(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'id\': \'http://this-content-does-not-exist\',\n-            },\n+            json={"id": "http://this-content-does-not-exist"},\n         )\n         self.assertEqual(400, response.status_code)\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestUnLinkContentTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n \n     def test_translation_unlinking_succeeds(self):\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "language": "es",\n-            },\n+            json={"language": "es"},\n         )\n         self.assertEqual(204, response.status_code)\n         transaction.begin()\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n-            ILanguage(self.es_content).get_language(),\n-            list(manager.get_translations()))\n+            ILanguage(self.es_content).get_language(), list(manager.get_translations())\n+        )\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-            },\n+            json={},\n         )\n         self.assertEqual(400, response.status_code)\n \n@@ -175,11 +172,9 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n         ITranslationManager(self.en_content).remove_translation("es")\n         transaction.commit()\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "language": "es",\n-            },\n+            json={"language": "es"},\n         )\n         self.assertEqual(400, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 8a2eb839..08aca316 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -32,28 +32,27 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = b\'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b"abcdefgh"\n+UPLOAD_MIMETYPE = "text/plain"\n+UPLOAD_FILENAME = "test.txt"\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n-UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n-UPLOAD_PDF_FILENAME = \'file.pdf\'\n+UPLOAD_PDF_MIMETYPE = "application/pdf"\n+UPLOAD_PDF_FILENAME = "file.pdf"\n \n \n def _base64_str(s):\n     if not isinstance(s, bytes):\n-        s = s.encode(\'utf-8\')\n+        s = s.encode("utf-8")\n     s = b64encode(s)\n     if not isinstance(s, str):\n-        s = s.decode(\'utf-8\')\n+        s = s.decode("utf-8")\n     return s\n \n \n def _prepare_metadata(filename, content_type):\n-    return \'filename {},content-type {}\'.format(\n-        _base64_str(filename),\n-        _base64_str(content_type),\n+    return "filename {},content-type {}".format(\n+        _base64_str(filename), _base64_str(content_type)\n     )\n \n \n@@ -62,23 +61,22 @@ class TestTUS(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         login(self.portal, SITE_OWNER_NAME)\n \n-        self.folder = api.content.create(container=self.portal,\n-                                         type=\'Folder\',\n-                                         id=\'testfolder\',\n-                                         title=\'Testfolder\')\n-        self.upload_url = \'{}/@tus-upload\'.format(self.folder.absolute_url())\n+        self.folder = api.content.create(\n+            container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n+        )\n+        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def get_tus_uid_from_url(self, url):\n-        uid = url.rsplit(\'/\', 1)[-1]\n+        uid = url.rsplit("/", 1)[-1]\n         assert len(uid) == 32\n         return uid\n \n@@ -89,9 +87,9 @@ def test_tus_option_headers(self):\n         response = self.api_session.options(self.upload_url)\n         headers = response.headers\n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(headers[\'Tus-Version\'], \'1.0.0\')\n-        self.assertEqual(headers[\'Tus-Extension\'], \'creation,expiration\')\n-        self.assertEqual(headers[\'Tus-Resumable\'], \'1.0.0\')\n+        self.assertEqual(headers["Tus-Version"], "1.0.0")\n+        self.assertEqual(headers["Tus-Extension"], "creation,expiration")\n+        self.assertEqual(headers["Tus-Resumable"], "1.0.0")\n \n     def test_tus_post_without_version_header_returns_412(self):\n         response = self.api_session.post(self.upload_url)\n@@ -99,247 +97,279 @@ def test_tus_post_without_version_header_returns_412(self):\n \n     def test_tus_post_with_wrong_version_header_returns_412(self):\n         response = self.api_session.post(\n-            self.upload_url, headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url, headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n \n     def test_tus_post_initialization_requires_header_length(self):\n         response = self.api_session.post(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n-        self.assertEqual(response.json()[\'error\'][\'type\'], \'Bad Request\')\n-        self.assertEqual(response.json()[\'error\'][\'message\'],\n-                         \'Missing or invalid Upload-Length header\')\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n+        self.assertEqual(response.json()["error"]["type"], "Bad Request")\n+        self.assertEqual(\n+            response.json()["error"]["message"],\n+            "Missing or invalid Upload-Length header",\n+        )\n         self.assertEqual(response.status_code, 400)\n \n     def test_tus_post_initialization(self):\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\n-                \'Tus-Resumable\': \'1.0.0\',\n-                \'Upload-Length\': str(UPLOAD_LENGTH),\n-            })\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n+        )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n-        url_base, uid = location.rsplit(\'/\', 1)\n+        location = response.headers["Location"]\n+        url_base, uid = location.rsplit("/", 1)\n         self.assertEqual(url_base, self.upload_url)\n         self.assertEqual(len(uid), 32)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'length\': 8, u\'mode\': u\'create\'})\n+        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"create"})\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n         metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        uid = self.get_tus_uid_from_url(response.headers[\'Location\'])\n+        uid = self.get_tus_uid_from_url(response.headers["Location"])\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'content-type\': u\'text/plain\',\n-                          u\'filename\': u\'test.txt\',\n-                          u\'length\': 8,\n-                          u\'mode\': u\'create\'})\n+        self.assertEqual(\n+            stored_metadata,\n+            {\n+                u"content-type": u"text/plain",\n+                u"filename": u"test.txt",\n+                u"length": 8,\n+                u"mode": u"create",\n+            },\n+        )\n         upload.cleanup()\n \n     def test_tus_post_replace(self):\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\n-                \'Tus-Resumable\': \'1.0.0\',\n-                \'Upload-Length\': str(UPLOAD_LENGTH),\n-            })\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n+        )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n-        url_base, uid = location.rsplit(\'/\', 1)\n+        location = response.headers["Location"]\n+        url_base, uid = location.rsplit("/", 1)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'length\': 8, u\'mode\': u\'replace\'})\n+        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"replace"})\n         upload.cleanup()\n \n     def test_tus_head_on_not_existing_resource_returns_404(self):\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid/123\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid/123", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n-            self.upload_url + \'/non-existing-uid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\'}\n+            self.upload_url + "/non-existing-uid", headers={"Tus-Resumable": "1.0.0"}\n         )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n \n     def test_tus_head_with_unsupported_version_returns_412(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n         tus.cleanup()\n \n     def test_tus_head_response_includes_required_headers(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'1.0.0\'})\n-        self.assertIn(\'Upload-Length\', response.headers)\n-        self.assertEqual(\'2048\', response.headers[\'Upload-Length\'])\n-        self.assertIn(\'Upload-Offset\', response.headers)\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Cache-Control\', response.headers)\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "1.0.0"}\n+        )\n+        self.assertIn("Upload-Length", response.headers)\n+        self.assertEqual("2048", response.headers["Upload-Length"])\n+        self.assertIn("Upload-Offset", response.headers)\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Cache-Control", response.headers)\n         tus.cleanup()\n \n     def test_head_in_create_mode_without_add_permission_raises_401(self):\n-        self.folder.manage_permission(\'Add portal content\', [], 0)\n+        self.folder.manage_permission("Add portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "create", "length": 12})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Offset\': \'0\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Offset": "0"},\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_head_in_replace_mode_without_modify_permission_raises_401(self):\n-        self.folder.manage_permission(\'Modify portal content\', [], 0)\n+        self.folder.manage_permission("Modify portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "replace", "length": 12})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Offset\': \'0\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Offset": "0"},\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_on_not_existing_resource_returns_404(self):\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid/123\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid/123", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.patch(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n \n     def test_tus_patch_with_unsupported_version_returns_412(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_with_unsupported_content_type_returns_400(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/json\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Content-Type": "application/json"},\n+        )\n         self.assertEqual(400, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_with_invalid_offset_returns_400(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\'})\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+            },\n+        )\n         self.assertEqual(400, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_unfinished_upload_returns_expires_header(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'Upload-Expires\', response.headers)\n+        self.assertIn("Upload-Expires", response.headers)\n         tus.cleanup()\n \n     def test_tus_patch_non_primary_field(self):\n-        tus = TUSUpload(\'myuid\', {\n-            \'@type\': \'DXTestDocument\',\n-            \'length\': 12,\n-            \'fieldname\': \'test_namedblobfile_field\'})\n+        tus = TUSUpload(\n+            "myuid",\n+            {\n+                "@type": "DXTestDocument",\n+                "length": 12,\n+                "fieldname": "test_namedblobfile_field",\n+            },\n+        )\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b"abcdefghijkl", self.folder[id_].test_namedblobfile_field.data\n+        )\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n-        self.folder.manage_permission(\'Add portal content\', [], 0)\n+        self.folder.manage_permission("Add portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "create", "length": 12})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n-        self.folder.manage_permission(\'Modify portal content\', [], 0)\n+        self.folder.manage_permission("Modify portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "replace", "length": 12})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -350,53 +380,59 @@ def test_tus_can_upload_text_file(self):\n         metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n         response = self.api_session.patch(\n             location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=BytesIO(UPLOAD_DATA))\n+            headers={\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+                "Tus-Resumable": "1.0.0",\n+            },\n+            data=BytesIO(UPLOAD_DATA),\n+        )\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n         # Create a test file\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -416,39 +452,42 @@ def record_event(event):\n         sm.registerHandler(record_event, (IObjectModifiedEvent,))\n \n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         self.assertEqual(\n             fired_events,\n             [\n-                \'ObjectCreatedEvent\',\n-                \'ObjectWillBeAddedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+                "ObjectCreatedEvent",\n+                "ObjectWillBeAddedEvent",\n+                "ObjectAddedEvent",\n+                "ContainerModifiedEvent",\n+            ],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -457,10 +496,9 @@ def record_event(event):\n \n     def test_replace_with_tus_fires_proper_events(self):\n         # Create a test file\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n \n         sm = getGlobalSiteManager()\n@@ -475,36 +513,34 @@ def record_event(event):\n         sm.registerHandler(record_event, (IObjectModifiedEvent,))\n \n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectModifiedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectModifiedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -513,19 +549,25 @@ def record_event(event):\n \n     def tearDown(self):\n         self.api_session.close()\n-        client_home = os.environ.get(\'CLIENT_HOME\')\n-        tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+        client_home = os.environ.get("CLIENT_HOME")\n+        tmp_dir = os.path.join(client_home, "tus-uploads")\n         if os.path.isdir(tmp_dir):\n             shutil.rmtree(tmp_dir)\n \n \n class CORSTestPolicy(CORSPolicy):\n-    allow_origin = [\'*\']\n-    allow_methods = [\'DELETE\', \'GET\', \'OPTIONS\', \'PATCH\', \'POST\', \'PUT\']\n+    allow_origin = ["*"]\n+    allow_methods = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]\n     allow_credentials = True\n     allow_headers = [\n-        \'Accept\', \'Authorization\', \'Origin\', \'X-Requested-With\',\n-        \'Content-Type\', \'Tus-Resumable\', \'Upload-Length\', \'Upload-Offset\',\n+        "Accept",\n+        "Authorization",\n+        "Origin",\n+        "X-Requested-With",\n+        "Content-Type",\n+        "Tus-Resumable",\n+        "Upload-Length",\n+        "Upload-Offset",\n     ]\n     expose_header = []\n     max_age = 3600\n@@ -537,154 +579,153 @@ class TestTUSUploadWithCORS(unittest.TestCase):\n \n     def setUp(self):\n         provideAdapter(\n-            CORSTestPolicy,\n-            adapts=(Interface, IBrowserRequest),\n-            provides=ICORSPolicy,\n+            CORSTestPolicy, adapts=(Interface, IBrowserRequest), provides=ICORSPolicy\n         )\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        self.upload_url = \'{}/@tus-upload\'.format(self.portal.absolute_url())\n+        self.upload_url = "{}/@tus-upload".format(self.portal.absolute_url())\n \n     def test_cors_preflight_for_post_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'POST\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Tus-Resumable,Upload-Length\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "POST",\n+                "Access-Control-Request-Headers": "Tus-Resumable,Upload-Length",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def test_cors_preflight_for_patch_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'PATCH\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Content-Type,Tus-Resumable,Upload-Offset\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "PATCH",\n+                "Access-Control-Request-Headers": "Content-Type,Tus-Resumable,Upload-Offset",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def test_cors_preflight_for_head_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'HEAD\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Tus-Resumable\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "HEAD",\n+                "Access-Control-Request-Headers": "Tus-Resumable",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def tearDown(self):\n         self.api_session.close()\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterAdapter(\n-            CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n+        gsm.unregisterAdapter(CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n \n \n class TestTUSUpload(unittest.TestCase):\n-\n     def test_tmp_dir_gets_created_in_client_home(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertTrue(os.path.isdir(tus.tmp_dir))\n         tus.cleanup()\n \n     def test_use_tus_tmp_dir_if_provided(self):\n         tus_upload_dir = tempfile.mkdtemp()\n-        os.environ[\'TUS_TMP_FILE_DIR\'] = tus_upload_dir\n-        tus = TUSUpload(\'myuid\')\n+        os.environ["TUS_TMP_FILE_DIR"] = tus_upload_dir\n+        tus = TUSUpload("myuid")\n         self.assertEqual(tus_upload_dir, tus.tmp_dir)\n         tus.cleanup()\n \n     def test_metadata_gets_stored_if_provided(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024, \'filename\': \'test.pdf\'})\n-        self.assertIn(\'filename\', tus.metadata())\n-        self.assertEqual(\'test.pdf\', tus.metadata()[\'filename\'])\n+        tus = TUSUpload("myuid", {"length": 1024, "filename": "test.pdf"})\n+        self.assertIn("filename", tus.metadata())\n+        self.assertEqual("test.pdf", tus.metadata()["filename"])\n         tus.cleanup()\n \n     def test_length_returns_total_length_if_set(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         self.assertEqual(1024, tus.length())\n         tus.cleanup()\n \n     def test_length_returns_zero_if_not_set(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertEqual(0, tus.length())\n         tus.cleanup()\n \n     def test_offset_returns_zero_if_file_doesnt_exist(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         self.assertEqual(0, tus.offset())\n         tus.cleanup()\n \n     def test_offset_returns_size_of_current_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n-        tus.write(BytesIO(b\'abc\'), 10)\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n+        tus.write(BytesIO(b"abc"), 10)\n         self.assertEqual(13, tus.offset())\n-        with open(tus.filepath, \'rb\') as f:\n+        with open(tus.filepath, "rb") as f:\n             data = f.read()\n-        self.assertEqual(b\'0123456789abc\', data)\n+        self.assertEqual(b"0123456789abc", data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 10})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n     def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertEqual({}, tus.metadata())\n         tus.cleanup()\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n     def test_cleanup_removes_metadata_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.metadata_path))\n \n     def test_cleanup_expired_files(self):\n-        tus = TUSUpload(\'myuid\')\n-        filepath = os.path.join(tus.tmp_dir, \'tus_upload_12345\')\n-        metadata_path = os.path.join(tus.tmp_dir, \'tus_upload_12345.json\')\n-        metadata_only_path = os.path.join(tus.tmp_dir, \'tus_upload_67890.json\')\n-        open(filepath, \'wb\').close()\n+        tus = TUSUpload("myuid")\n+        filepath = os.path.join(tus.tmp_dir, "tus_upload_12345")\n+        metadata_path = os.path.join(tus.tmp_dir, "tus_upload_12345.json")\n+        metadata_only_path = os.path.join(tus.tmp_dir, "tus_upload_67890.json")\n+        open(filepath, "wb").close()\n         os.utime(filepath, (946684800.0, 946684800.0))\n-        open(metadata_path, \'wb\').close()\n+        open(metadata_path, "wb").close()\n         os.utime(metadata_path, (946684800.0, 946684800.0))\n-        open(metadata_only_path, \'wb\').close()\n+        open(metadata_only_path, "wb").close()\n         os.utime(metadata_only_path, (946684800.0, 946684800.0))\n         tus.cleanup_expired()\n         self.assertFalse(os.path.exists(filepath))\n@@ -693,8 +734,8 @@ def test_cleanup_expired_files(self):\n         tus.cleanup()\n \n     def tearDown(self):\n-        client_home = os.environ.get(\'CLIENT_HOME\')\n-        tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+        client_home = os.environ.get("CLIENT_HOME")\n+        tmp_dir = os.path.join(client_home, "tus-uploads")\n         if os.path.isdir(tmp_dir):\n             shutil.rmtree(tmp_dir)\n \n@@ -705,20 +746,19 @@ class TestTUSWithAT(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n-        self.folder = api.content.create(container=self.portal,\n-                                         type=\'Folder\',\n-                                         id=\'testfolder\',\n-                                         title=\'Testfolder\')\n-        self.upload_url = \'{}/@tus-upload\'.format(self.folder.absolute_url())\n+        self.folder = api.content.create(\n+            container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n+        )\n+        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n     def tearDown(self):\n@@ -726,29 +766,31 @@ def tearDown(self):\n \n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex c637e071..546c2480 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -23,49 +23,32 @@\n \n class IDummySchema(model.Schema):\n \n-    field1 = schema.Bool(\n-        title=u"Foo",\n-        description=u"",\n-    )\n+    field1 = schema.Bool(title=u"Foo", description=u"")\n \n-    field2 = schema.TextLine(\n-        title=u"Bar",\n-        description=u"",\n-    )\n+    field2 = schema.TextLine(title=u"Bar", description=u"")\n \n \n class ITaggedValuesSchema(model.Schema):\n \n-    form.mode(field_mode_hidden=\'hidden\')\n-    field_mode_hidden = schema.TextLine(\n-        title=u"ModeHidden",\n-        description=u"",\n-    )\n+    form.mode(field_mode_hidden="hidden")\n+    field_mode_hidden = schema.TextLine(title=u"ModeHidden", description=u"")\n \n-    form.mode(field_mode_display=\'display\')\n-    field_mode_display = schema.TextLine(\n-        title=u"ModeDisplay",\n-        description=u"",\n-    )\n+    form.mode(field_mode_display="display")\n+    field_mode_display = schema.TextLine(title=u"ModeDisplay", description=u"")\n \n-    form.mode(field_mode_input=\'input\')\n-    field_mode_input = schema.TextLine(\n-        title=u"ModeInput",\n-        description=u"",\n-    )\n+    form.mode(field_mode_input="input")\n+    field_mode_input = schema.TextLine(title=u"ModeInput", description=u"")\n \n-    field_mode_default = schema.TextLine(\n-        title=u"ModeInput",\n-        description=u"",\n-    )\n+    field_mode_default = schema.TextLine(title=u"ModeInput", description=u"")\n \n-    parametrized_widget_field = schema.TextLine(\n-        title=u"Parametrized widget field")\n-    form.widget(\'parametrized_widget_field\',\n-                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n+    parametrized_widget_field = schema.TextLine(title=u"Parametrized widget field")\n+    form.widget(\n+        "parametrized_widget_field", a_param="some_value", defaultFactory=lambda: "Foo"\n+    )\n \n     not_parametrized_widget_field = schema.TextLine(\n-        title=u"No parametrized widget field")\n+        title=u"No parametrized widget field"\n+    )\n     form.widget(not_parametrized_widget_field=TextWidget)\n \n \n@@ -74,55 +57,41 @@ class TestJsonSchemaUtils(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def test_get_jsonschema_properties(self):\n         fieldsets = get_fieldsets(self.portal, self.request, IDummySchema)\n         info = get_jsonschema_properties(self.portal, self.request, fieldsets)\n         expected = {\n-            \'field1\': {\n-                \'title\': u\'Foo\',\n-                \'description\': u\'\',\n-                \'type\': \'boolean\'\n-            },\n-            \'field2\': {\n-                \'title\': u\'Bar\',\n-                \'description\': u\'\',\n-                \'type\': \'string\'\n-            },\n+            "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n+            "field2": {"title": u"Bar", "description": u"", "type": "string"},\n         }\n         self.assertEqual(info, expected)\n \n     def test_get_jsonschema_for_fti(self):\n         portal = self.portal\n         request = self.request\n-        ttool = getToolByName(portal, \'portal_types\')\n-        jsonschema = get_jsonschema_for_fti(\n-            ttool[\'Document\'],\n-            portal, request\n-        )\n-        self.assertEqual(jsonschema[\'title\'], \'Page\')\n-        self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n-        self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n-        self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n-        self.assertIn(\'layouts\', jsonschema)\n+        ttool = getToolByName(portal, "portal_types")\n+        jsonschema = get_jsonschema_for_fti(ttool["Document"], portal, request)\n+        self.assertEqual(jsonschema["title"], "Page")\n+        self.assertEqual(jsonschema["type"], "object")\n+        self.assertIn("title", list(jsonschema["properties"]))\n+        self.assertIn("title", jsonschema["required"])\n+        self.assertEqual("default", jsonschema["fieldsets"][0]["id"])\n+        self.assertIn("title", jsonschema["fieldsets"][0]["fields"])\n+        self.assertIn("layouts", jsonschema)\n \n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'Document\'],\n-            portal,\n-            request,\n-            excluded_fields=[\'title\']\n+            ttool["Document"], portal, request, excluded_fields=["title"]\n         )\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n+        self.assertNotIn("title", list(jsonschema["properties"]))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n         """\n-        fti = self.portal.portal_types[\'Plone Site\']\n-        self.assertFalse(hasattr(fti, \'lookupSchema\'))\n+        fti = self.portal.portal_types["Plone Site"]\n+        self.assertFalse(hasattr(fti, "lookupSchema"))\n \n         # This shouldn\'t raise an error.\n         get_jsonschema_for_fti(fti, self.portal, self.request)\n@@ -130,21 +99,18 @@ def test_get_jsonschema_for_fti_non_dx(self):\n     def test_get_jsonschema_for_portal_type(self):\n         portal = self.portal\n         request = self.request\n-        jsonschema = get_jsonschema_for_portal_type(\n-            \'Document\',\n-            portal,\n-            request\n-        )\n-        self.assertEqual(jsonschema[\'title\'], \'Page\')\n-        self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n-        self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n-        self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n+        jsonschema = get_jsonschema_for_portal_type("Document", portal, request)\n+        self.assertEqual(jsonschema["title"], "Page")\n+        self.assertEqual(jsonschema["type"], "object")\n+        self.assertIn("title", list(jsonschema["properties"]))\n+        self.assertIn("title", jsonschema["required"])\n+        self.assertEqual("default", jsonschema["fieldsets"][0]["id"])\n+        self.assertIn("title", jsonschema["fieldsets"][0]["fields"])\n \n         jsonschema = get_jsonschema_for_portal_type(\n-            \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n+            "Document", portal, request, excluded_fields=["title"]\n+        )\n+        self.assertNotIn("title", list(jsonschema["properties"]))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\n@@ -152,71 +118,60 @@ class TestTaggedValuesJsonSchemaUtils(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        fti = DexterityFTI(\'TaggedDocument\')\n-        self.portal.portal_types._setObject(\'TaggedDocument\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.schema = \'plone.restapi.tests.test_types.ITaggedValuesSchema\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        fti = DexterityFTI("TaggedDocument")\n+        self.portal.portal_types._setObject("TaggedDocument", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.schema = "plone.restapi.tests.test_types.ITaggedValuesSchema"\n \n     def test_get_jsonschema_with_hidden_field(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n \n         self.assertEqual(\n-            \'hidden\',\n-            jsonschema[\'properties\'][\'field_mode_hidden\'][\'mode\']\n+            "hidden", jsonschema["properties"]["field_mode_hidden"]["mode"]\n         )\n         self.assertEqual(\n-            \'display\',\n-            jsonschema[\'properties\'][\'field_mode_display\'][\'mode\']\n-        )\n-        self.assertEqual(\n-            \'input\',\n-            jsonschema[\'properties\'][\'field_mode_input\'][\'mode\']\n+            "display", jsonschema["properties"]["field_mode_display"]["mode"]\n         )\n+        self.assertEqual("input", jsonschema["properties"]["field_mode_input"]["mode"])\n \n     def test_get_jsonschema_with_widget_params(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            \'some_value\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n-                \'widgetOptions\'][\'a_param\']\n+            "some_value",\n+            jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"][\n+                "a_param"\n+            ],\n         )\n \n     def test_do_not_fail_with_non_parametrized_widget(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            u\'No parametrized widget field\',\n-            jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n+            u"No parametrized widget field",\n+            jsonschema["properties"]["not_parametrized_widget_field"]["title"],\n         )\n \n     def test_resolve_callable_widget_params(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n \n         self.assertEqual(\n-            u\'Foo\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n-                \'widgetOptions\'].get(\'defaultFactory\')\n+            u"Foo",\n+            jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"].get(\n+                "defaultFactory"\n+            ),\n         )\n \n \n@@ -225,12 +180,12 @@ class TestJsonSchemaProviders(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.dummy_vocabulary = SimpleVocabulary(\n             [\n-                SimpleTerm(value=u\'foo\', title=u\'Foo\'),\n-                SimpleTerm(value=u\'bar\', title=u\'Bar\')\n+                SimpleTerm(value=u"foo", title=u"Foo"),\n+                SimpleTerm(value=u"bar", title=u"Bar"),\n             ]\n         )\n \n@@ -241,406 +196,370 @@ def setUp(self):\n     def dummy_source_vocab(self, context):\n         return SimpleVocabulary(\n             [\n-                SimpleTerm(value=u\'foo\', title=u\'Foo\'),\n-                SimpleTerm(value=u\'bar\', title=u\'Bar\')\n+                SimpleTerm(value=u"foo", title=u"Foo"),\n+                SimpleTerm(value=u"bar", title=u"Bar"),\n             ]\n         )\n \n     def test_textline(self):\n         field = schema.TextLine(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=u\'foobar\'\n+            title=u"My field", description=u"My great field", default=u"foobar"\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': u\'foobar\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": u"foobar",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_text(self):\n         field = schema.Text(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=u\'Lorem ipsum dolor sit amet\',\n+            title=u"My field",\n+            description=u"My great field",\n+            default=u"Lorem ipsum dolor sit amet",\n             min_length=10,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': \'textarea\',\n-                \'default\': u\'Lorem ipsum dolor sit amet\',\n-                \'minLength\': 10,\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": "textarea",\n+                "default": u"Lorem ipsum dolor sit amet",\n+                "minLength": 10,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_bool(self):\n         field = schema.Bool(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=False,\n+            title=u"My field", description=u"My great field", default=False\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'boolean\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': False,\n+                "type": "boolean",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": False,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_float(self):\n         field = schema.Float(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min=0.0,\n             max=1.0,\n             default=0.5,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0.0,\n-                \'maximum\': 1.0,\n-                \'type\': \'number\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 0.5,\n+                "minimum": 0.0,\n+                "maximum": 1.0,\n+                "type": "number",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 0.5,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_decimal(self):\n         field = schema.Decimal(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min=Decimal(0),\n             max=Decimal(1),\n             default=Decimal(0.5),\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0.0,\n-                \'maximum\': 1.0,\n-                \'type\': \'number\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 0.5,\n+                "minimum": 0.0,\n+                "maximum": 1.0,\n+                "type": "number",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 0.5,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_int(self):\n         field = schema.Int(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            min=0,\n-            max=100,\n-            default=50,\n+            title=u"My field", description=u"My great field", min=0, max=100, default=50\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0,\n-                \'maximum\': 100,\n-                \'type\': \'integer\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 50,\n+                "minimum": 0,\n+                "maximum": 100,\n+                "type": "integer",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 50,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             vocabulary=self.dummy_vocabulary,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'enum\': [\'foo\', \'bar\'],\n-                \'enumNames\': [\'Foo\', \'Bar\'],\n-                \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "enum": ["foo", "bar"],\n+                "enumNames": ["Foo", "Bar"],\n+                "choices": [("foo", "Foo"), ("bar", "Bar")],\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice_named_vocab(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+            title=u"My field",\n+            description=u"My great field",\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "vocabulary": {\n+                    "@id": u"http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+                },  # noqa\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             source=self.dummy_source_vocab,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'enum\': [\'foo\', \'bar\'],\n-                \'enumNames\': [\'Foo\', \'Bar\'],\n-                \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "enum": ["foo", "bar"],\n+                "enumNames": ["Foo", "Bar"],\n+                "choices": [("foo", "Foo"), ("bar", "Bar")],\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_collection(self):\n         field = schema.List(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min_length=1,\n             value_type=schema.TextLine(\n-                title=u\'Text\',\n-                description=u\'Text field\',\n-                default=u\'Default text\'\n+                title=u"Text", description=u"Text field", default=u"Default text"\n             ),\n-            default=[\'foobar\'],\n+            default=["foobar"],\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': [\'foobar\'],\n-                \'minItems\': 1,\n-                \'uniqueItems\': False,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'type\': \'string\',\n-                    \'title\': u\'Text\',\n-                    \'description\': u\'Text field\',\n-                    \'default\': u\'Default text\',\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": ["foobar"],\n+                "minItems": 1,\n+                "uniqueItems": False,\n+                "additionalItems": True,\n+                "items": {\n+                    "type": "string",\n+                    "title": u"Text",\n+                    "description": u"Text field",\n+                    "default": u"Default text",\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # Test Tuple\n-        field = schema.Tuple(\n-            title=u\'My field\',\n-            value_type=schema.Int(),\n-            default=(1, 2),\n+        field = schema.Tuple(title=u"My field", value_type=schema.Int(), default=(1, 2))\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'integer\',\n-                },\n-                \'default\': (1, 2),\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {"title": u"", "description": u"", "type": "integer"},\n+                "default": (1, 2),\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # Test Set\n-        field = schema.Set(\n-            title=u\'My field\',\n-            value_type=schema.TextLine(),\n+        field = schema.Set(title=u"My field", value_type=schema.TextLine())\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'string\',\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {"title": u"", "description": u"", "type": "string"},\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # List of choices\n         field = schema.List(\n-            title=u\'My field\',\n-            value_type=schema.Choice(\n-                vocabulary=self.dummy_vocabulary,\n-            ),\n+            title=u"My field",\n+            value_type=schema.Choice(vocabulary=self.dummy_vocabulary),\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'string\',\n-                    \'enum\': [\'foo\', \'bar\'],\n-                    \'enumNames\': [\'Foo\', \'Bar\'],\n-                    \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {\n+                    "title": u"",\n+                    "description": u"",\n+                    "type": "string",\n+                    "enum": ["foo", "bar"],\n+                    "enumNames": ["Foo", "Bar"],\n+                    "choices": [("foo", "Foo"), ("bar", "Bar")],\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_object(self):\n         field = schema.Object(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            schema=IDummySchema,\n+            title=u"My field", description=u"My great field", schema=IDummySchema\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'object\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'properties\': {\n-                    \'field1\': {\n-                        \'title\': u\'Foo\',\n-                        \'description\': u\'\',\n-                        \'type\': \'boolean\'\n-                    },\n-                    \'field2\': {\n-                        \'title\': u\'Bar\',\n-                        \'description\': u\'\',\n-                        \'type\': \'string\'\n-                    },\n-                }\n+                "type": "object",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "properties": {\n+                    "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n+                    "field2": {"title": u"Bar", "description": u"", "type": "string"},\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_richtext(self):\n-        field = RichText(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-        )\n+        field = RichText(title=u"My field", description=u"My great field")\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': \'richtext\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": "richtext",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_date(self):\n         field = schema.Date(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=date(2016, 1, 1),\n+            title=u"My field", description=u"My great field", default=date(2016, 1, 1)\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': date(2016, 1, 1),\n-                \'widget\': u\'date\'\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": date(2016, 1, 1),\n+                "widget": u"date",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_datetime(self):\n-        field = schema.Datetime(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-        )\n+        field = schema.Datetime(title=u"My field", description=u"My great field")\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': u\'datetime\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": u"datetime",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\ndiff --git a/src/plone/restapi/tests/test_upgrades.py b/src/plone/restapi/tests/test_upgrades.py\nindex 4e6c23d6..b15ac6b3 100644\n--- a/src/plone/restapi/tests/test_upgrades.py\n+++ b/src/plone/restapi/tests/test_upgrades.py\n@@ -10,31 +10,27 @@ class TestUpgrades(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def test_migration_profile_to_0002_can_be_loaded(self):\n-        loadMigrationProfile(\n-            self.portal,\n-            \'profile-plone.restapi.upgrades:0002\'\n-        )\n+        loadMigrationProfile(self.portal, "profile-plone.restapi.upgrades:0002")\n         self.assertTrue(True)\n \n     def test_run_migration_profile_to_0002(self):\n         from plone.restapi.upgrades.to0002 import assign_use_api_permission\n-        portal_setup = getToolByName(self.portal, \'portal_setup\')\n+\n+        portal_setup = getToolByName(self.portal, "portal_setup")\n         assign_use_api_permission(portal_setup)\n         self.assertTrue(True)\n \n     def test_migration_profile_to_0004_can_be_loaded(self):\n-        loadMigrationProfile(\n-            self.portal,\n-            \'profile-plone.restapi.upgrades:0004\'\n-        )\n+        loadMigrationProfile(self.portal, "profile-plone.restapi.upgrades:0004")\n         self.assertTrue(True)\n \n     def test_run_migration_profile_to_0004(self):\n         from plone.restapi.upgrades.to0004 import assign_get_users_permission\n-        portal_setup = getToolByName(self.portal, \'portal_setup\')\n+\n+        portal_setup = getToolByName(self.portal, "portal_setup")\n         assign_get_users_permission(portal_setup)\n         self.assertTrue(True)\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 0f4d0558..659e530f 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -21,71 +21,79 @@ class TestWorkflowInfo(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\', title=\'Test Document\')]\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'submit\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "submit")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n \n     def test_workflow_info_includes_history(self):\n-        wfinfo = getMultiAdapter((self.doc1, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'history\', info)\n-        history = info[\'history\']\n+        self.assertIn("history", info)\n+        history = info["history"]\n         self.assertEqual(3, len(history))\n-        self.assertEqual(\'published\', history[-1][u\'review_state\'])\n-        self.assertEqual(u\'Published with accent \xc3\xa9\', history[-1][u\'title\'])\n+        self.assertEqual("published", history[-1][u"review_state"])\n+        self.assertEqual(u"Published with accent \xc3\xa9", history[-1][u"title"])\n \n     def test_workflow_info_unauthorized_history(self):\n         login(self.portal, SITE_OWNER_NAME)\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Test Document\')]\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(doc2, \'submit\')\n-        wftool.doActionFor(doc2, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Test Document"\n+            )\n+        ]\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(doc2, "submit")\n+        wftool.doActionFor(doc2, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, TEST_USER_NAME)\n-        wfinfo = getMultiAdapter((doc2, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (doc2, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'history\', info)\n-        history = info[\'history\']\n+        self.assertIn("history", info)\n+        history = info["history"]\n         self.assertEqual(0, len(history))\n \n     def test_workflow_info_includes_transitions(self):\n-        wfinfo = getMultiAdapter((self.doc1, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'transitions\', info)\n-        transitions = info[\'transitions\']\n+        self.assertIn("transitions", info)\n+        transitions = info["transitions"]\n         self.assertEqual(2, len(transitions))\n \n     def test_collapsed_workflow_info_in_content_serialization(self):\n-        serializer = getMultiAdapter((self.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.doc1, self.request), ISerializeToJson)\n         obj = serializer()\n-        self.assertIn(\'workflow\', obj[\'@components\'])\n-        self.assertIn(\'@id\', obj[\'@components\'][\'workflow\'])\n+        self.assertIn("workflow", obj["@components"])\n+        self.assertIn("@id", obj["@components"]["workflow"])\n \n     def test_expanded_workflow_info_in_content_serialization(self):\n-        self.request.form.update({\'expand\': \'workflow\'})\n-        serializer = getMultiAdapter((self.doc1, self.request),\n-                                     ISerializeToJson)\n+        self.request.form.update({"expand": "workflow"})\n+        serializer = getMultiAdapter((self.doc1, self.request), ISerializeToJson)\n         obj = serializer()\n-        self.assertIn(\'workflow\', obj[\'@components\'])\n-        self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n-        self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n+        self.assertIn("workflow", obj["@components"])\n+        self.assertIn("transitions", obj["@components"]["workflow"])\n+        self.assertIn("history", obj["@components"]["workflow"])\n \n     def test_workflow_info_empty_on_siteroot(self):\n-        wfinfo = getMultiAdapter((self.portal, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.portal, self.request), name=u"GET_application_json_@workflow"\n+        )\n         obj = wfinfo.reply()\n \n-        self.assertEquals(obj[\'transitions\'], [])\n-        self.assertEquals(obj[\'history\'], [])\n+        self.assertEquals(obj["transitions"], [])\n+        self.assertEquals(obj["history"], [])\n \n \n class TestWorkflowTransition(TestCase):\n@@ -93,90 +101,84 @@ class TestWorkflowTransition(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+\n+    def traverse(self, path="/plone", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_transition_action_succeeds(self):\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u\'published\', res[u\'review_state\'])\n+        self.assertEqual(u"published", res[u"review_state"])\n         self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(self.portal.doc1, u\'review_state\'))\n+            u"published", self.wftool.getInfoFor(self.portal.doc1, u"review_state")\n+        )\n \n     def test_calling_endpoint_without_transition_gives_400(self):\n-        service = self.traverse(\'/plone/doc1/@workflow\')\n+        service = self.traverse("/plone/doc1/@workflow")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'Missing transition\', res[\'error\'][\'message\'])\n+        self.assertEqual("Missing transition", res["error"]["message"])\n \n-    def test_calling_workflow_with_additional_path_segments_results_in_404(\n-            self):\n+    def test_calling_workflow_with_additional_path_segments_results_in_404(self):\n         with self.assertRaises(NotFound):\n-            self.traverse(\'/plone/doc1/@workflow/publish/test\')\n+            self.traverse("/plone/doc1/@workflow/publish/test")\n \n     def test_transition_with_comment(self):\n-        self.request[\'BODY\'] = \'{"comment": "A comment"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"comment": "A comment"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u\'A comment\', res[u\'comments\'])\n+        self.assertEqual(u"A comment", res[u"comments"])\n \n     def test_transition_including_children(self):\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', id=\'subfolder\')]\n-        self.request[\'BODY\'] = (\n-            \'{"comment": "A comment", "include_children": true}\')\n-        service = self.traverse(\'/plone/folder/@workflow/publish\')\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n+        subfolder = folder[folder.invokeFactory("Folder", id="subfolder")]\n+        self.request["BODY"] = \'{"comment": "A comment", "include_children": true}\'\n+        service = self.traverse("/plone/folder/@workflow/publish")\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n+        self.assertEqual(u"published", self.wftool.getInfoFor(folder, u"review_state"))\n         self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(folder, u\'review_state\'))\n-        self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(subfolder, u\'review_state\'))\n+            u"published", self.wftool.getInfoFor(subfolder, u"review_state")\n+        )\n \n     def test_transition_with_effective_date(self):\n-        self.request[\'BODY\'] = \'{"effective": "2018-06-24T09:17:02"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"effective": "2018-06-24T09:17:02"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         service.reply()\n         self.assertEqual(\n-            \'2018-06-24T09:17:00+00:00\',\n-            self.portal.doc1.effective().ISO8601())\n+            "2018-06-24T09:17:00+00:00", self.portal.doc1.effective().ISO8601()\n+        )\n \n     def test_transition_with_expiration_date(self):\n-        self.request[\'BODY\'] = \'{"expires": "2019-06-20T18:00:00"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"expires": "2019-06-20T18:00:00"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         service.reply()\n         self.assertEqual(\n-            \'2019-06-20T18:00:00+00:00\',\n-            self.portal.doc1.expires().ISO8601())\n+            "2019-06-20T18:00:00+00:00", self.portal.doc1.expires().ISO8601()\n+        )\n \n     def test_invalid_transition_results_in_400(self):\n-        service = self.traverse(\'/plone/doc1/@workflow/foo\')\n+        service = self.traverse("/plone/doc1/@workflow/foo")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'WorkflowException\', res[\'error\'][\'type\'])\n+        self.assertEqual("WorkflowException", res["error"]["type"])\n \n     def test_invalid_effective_date_results_in_400(self):\n-        self.request[\'BODY\'] = \'{"effective": "now"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"effective": "now"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'Bad Request\', res[\'error\'][\'type\'])\n+        self.assertEqual("Bad Request", res["error"]["type"])\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 677c3aa6..d26c2b25 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -37,7 +37,6 @@\n @adapter(IField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DefaultJsonSchemaProvider(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         self.context = context\n@@ -52,7 +51,7 @@ def get_title(self):\n \n     def get_description(self):\n         if self.field.description is None:\n-            return u\'\'\n+            return u""\n \n         return translate(self.field.description, context=self.request)\n \n@@ -62,21 +61,21 @@ def get_schema(self):\n         You should override `additional` method to provide more properties\n         about the field."""\n         schema = {\n-            \'type\': self.get_type(),\n-            \'title\': self.get_title(),\n-            \'description\': self.get_description(),\n+            "type": self.get_type(),\n+            "title": self.get_title(),\n+            "description": self.get_description(),\n         }\n \n         widget = self.get_widget()\n         if widget:\n-            schema[\'widget\'] = widget\n+            schema["widget"] = widget\n \n         widget_options = self.get_widget_params()\n         if widget_options:\n-            schema[\'widgetOptions\'] = widget_options\n+            schema["widgetOptions"] = widget_options\n \n         if self.field.default is not None:\n-            schema[\'default\'] = self.field.default\n+            schema["default"] = self.field.default\n \n         schema.update(self.additional())\n         return schema\n@@ -90,46 +89,43 @@ def get_widget(self):\n     def get_widget_params(self):\n         all_params = get_widget_params([self.field.interface])\n         params = all_params.get(self.field.getName(), {})\n-        if \'vocabulary\' in params:\n-            vocab_name = params[\'vocabulary\']\n-            params[\'vocabulary\'] = {\n-                    \'@id\': get_vocabulary_url(\n-                        vocab_name, self.context, self.request)}\n+        if "vocabulary" in params:\n+            vocab_name = params["vocabulary"]\n+            params["vocabulary"] = {\n+                "@id": get_vocabulary_url(vocab_name, self.context, self.request)\n+            }\n         return params\n \n \n @adapter(IBytes, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class BytesLineJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n \n @adapter(ITextLine, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TextLineJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n \n @adapter(IText, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TextJsonSchemaProvider(TextLineJsonSchemaProvider):\n-\n     def additional(self):\n         info = {}\n         if self.field.min_length is not None:\n-            info[\'minLength\'] = self.field.min_length\n+            info["minLength"] = self.field.min_length\n \n         if self.field.max_length is not None:\n-            info[\'maxLength\'] = self.field.max_length\n+            info["maxLength"] = self.field.max_length\n \n         return info\n \n     def get_widget(self):\n-        return \'textarea\'\n+        return "textarea"\n \n \n @adapter(IASCII, Interface, Interface)\n@@ -149,17 +145,16 @@ class ASCIILineJsonSchemaProvider(TextLineJsonSchemaProvider):\n @adapter(IFloat, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class FloatJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'number\'\n+        return "number"\n \n     def additional(self):\n         info = {}\n         if self.field.min is not None:\n-            info[\'minimum\'] = self.field.min\n+            info["minimum"] = self.field.min\n \n         if self.field.max is not None:\n-            info[\'maximum\'] = self.field.max\n+            info["maximum"] = self.field.max\n \n         return info\n \n@@ -174,44 +169,41 @@ class DecimalJsonSchemaProvider(FloatJsonSchemaProvider):\n @adapter(IInt, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class IntegerJsonSchemaProvider(FloatJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'integer\'\n+        return "integer"\n \n \n @adapter(IBool, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class BoolJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'boolean\'\n+        return "boolean"\n \n \n @adapter(ICollection, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class CollectionJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'array\'\n+        return "array"\n \n     def get_items(self):\n         """Get items properties."""\n         value_type_adapter = getMultiAdapter(\n-            (self.field.value_type, self.context, self.request),\n-            IJsonSchemaProvider)\n+            (self.field.value_type, self.context, self.request), IJsonSchemaProvider\n+        )\n \n         return value_type_adapter.get_schema()\n \n     def additional(self):\n         info = {}\n-        info[\'additionalItems\'] = True\n+        info["additionalItems"] = True\n         if self.field.min_length:\n-            info[\'minItems\'] = self.field.min_length\n+            info["minItems"] = self.field.min_length\n \n         if self.field.max_length:\n-            info[\'maxItems\'] = self.field.max_length\n+            info["maxItems"] = self.field.max_length\n \n-        info[\'items\'] = self.get_items()\n+        info["items"] = self.get_items()\n \n         return info\n \n@@ -219,13 +211,12 @@ def additional(self):\n @adapter(IList, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class ListJsonSchemaProvider(CollectionJsonSchemaProvider):\n-\n     def additional(self):\n         info = super(ListJsonSchemaProvider, self).additional()\n         if IChoice.providedBy(self.field.value_type):\n-            info[\'uniqueItems\'] = True\n+            info["uniqueItems"] = True\n         else:\n-            info[\'uniqueItems\'] = False\n+            info["uniqueItems"] = False\n \n         return info\n \n@@ -233,10 +224,9 @@ def additional(self):\n @adapter(ISet, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class SetJsonSchemaProvider(CollectionJsonSchemaProvider):\n-\n     def additional(self):\n         info = super(SetJsonSchemaProvider, self).additional()\n-        info[\'uniqueItems\'] = True\n+        info["uniqueItems"] = True\n         return info\n \n \n@@ -255,28 +245,24 @@ class ChoiceJsonSchemaProvider(DefaultJsonSchemaProvider):\n     should_render_choices = True\n \n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def additional(self):\n-        vocab_name = getattr(self.field, \'vocabularyName\', None)\n+        vocab_name = getattr(self.field, "vocabularyName", None)\n         if vocab_name:\n             return {\n-                \'vocabulary\': {\n-                    \'@id\': get_vocabulary_url(\n-                        vocab_name,\n-                        self.context,\n-                        self.request\n-                    )\n+                "vocabulary": {\n+                    "@id": get_vocabulary_url(vocab_name, self.context, self.request)\n                 }\n             }\n \n         # Maybe we have an unnamed vocabulary or source.\n \n-        vocabulary = getattr(self.field, \'vocabulary\', None)\n+        vocabulary = getattr(self.field, "vocabulary", None)\n         if IContextSourceBinder.providedBy(vocabulary):\n             vocabulary = vocabulary(self.context)\n \n-        if hasattr(vocabulary, \'__iter__\') and self.should_render_choices:\n+        if hasattr(vocabulary, "__iter__") and self.should_render_choices:\n             # choices and enumNames are v5 proposals, for now we implement both\n             choices = []\n             enum = []\n@@ -288,11 +274,7 @@ def additional(self):\n                 enum.append(term.token)\n                 enum_names.append(title)\n \n-            return {\n-                \'enum\': enum,\n-                \'enumNames\': enum_names,\n-                \'choices\': choices,\n-            }\n+            return {"enum": enum, "enumNames": enum_names, "choices": choices}\n         else:\n             return {}\n \n@@ -301,14 +283,14 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class ObjectJsonSchemaProvider(DefaultJsonSchemaProvider):\n \n-    prefix = \'\'\n+    prefix = ""\n \n     def get_type(self):\n-        return \'object\'\n+        return "object"\n \n     def get_properties(self):\n         if self.prefix:\n-            prefix = \'.\'.join([self.prefix, self.field.__name__])\n+            prefix = ".".join([self.prefix, self.field.__name__])\n         else:\n             prefix = self.field.__name__\n \n@@ -319,34 +301,31 @@ def get_properties(self):\n \n     def additional(self):\n         info = super(ObjectJsonSchemaProvider, self).additional()\n-        info[\'properties\'] = self.get_properties()\n+        info["properties"] = self.get_properties()\n         return info\n \n \n @adapter(IDict, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DictJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'dict\'\n+        return "dict"\n \n     def additional(self):\n         info = {}\n         key_type = getMultiAdapter(\n-            (self.field.key_type, self.context, self.request),\n-            IJsonSchemaProvider\n+            (self.field.key_type, self.context, self.request), IJsonSchemaProvider\n         )\n-        info[\'key_type\'] = {\n-            \'schema\': key_type.get_schema(),\n-            \'additional\': key_type.additional(),\n+        info["key_type"] = {\n+            "schema": key_type.get_schema(),\n+            "additional": key_type.additional(),\n         }\n         value_type = getMultiAdapter(\n-            (self.field.key_type, self.context, self.request),\n-            IJsonSchemaProvider\n+            (self.field.key_type, self.context, self.request), IJsonSchemaProvider\n         )\n-        info[\'value_type\'] = {\n-            \'schema\': value_type.get_schema(),\n-            \'additional\': value_type.additional(),\n+        info["value_type"] = {\n+            "schema": value_type.get_schema(),\n+            "additional": value_type.additional(),\n         }\n         return info\n \n@@ -355,42 +334,40 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class RichTextJsonSchemaProvider(DefaultJsonSchemaProvider):\n \n-    prefix = \'\'\n+    prefix = ""\n \n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def get_widget(self):\n-        return \'richtext\'\n+        return "richtext"\n \n \n @adapter(IDate, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DateJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def additional(self):\n         info = {}\n         if self.field.min is not None:\n-            info[\'minimum\'] = self.field.min\n+            info["minimum"] = self.field.min\n \n         if self.field.max is not None:\n-            info[\'maximum\'] = self.field.max\n+            info["maximum"] = self.field.max\n \n         return info\n \n     def get_widget(self):\n-        return \'date\'\n+        return "date"\n \n \n @adapter(IDatetime, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DatetimeJsonSchemaProvider(DateJsonSchemaProvider):\n-\n     def get_widget(self):\n-        return \'datetime\'\n+        return "datetime"\n \n \n @adapter(ITuple, Interface, Interface)\n@@ -402,9 +379,8 @@ class SubjectsFieldJsonSchemaProvider(ChoiceJsonSchemaProvider):\n @adapter(IJSONField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class JSONFieldSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'dict\'\n+        return "dict"\n \n     def get_widget(self):\n-        return \'json\'\n+        return "json"\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 8243778c..82e2e2dd 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -53,7 +53,7 @@ def iter_fields(fieldsets):\n     as returned by `get_fieldsets`.\n     """\n     for fieldset in fieldsets:\n-        for field in fieldset[\'fields\']:\n+        for field in fieldset["fields"]:\n             yield field\n \n \n@@ -64,18 +64,16 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     form = create_form(context, request, schema, additional_schemata)\n \n     # Default fieldset\n-    fieldsets = [{\n-        \'id\': \'default\',\n-        \'title\': u\'Default\',\n-        \'fields\': list(form.fields.values()),\n-    }]\n+    fieldsets = [\n+        {"id": "default", "title": u"Default", "fields": list(form.fields.values())}\n+    ]\n \n     # Additional fieldsets (AKA z3c.form groups)\n     for group in form.groups:\n         fieldset = {\n-            \'id\': group.__name__,\n-            \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': list(group.fields.values()),\n+            "id": group.__name__,\n+            "title": translate(group.label, context=getRequest()),\n+            "fields": list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n@@ -90,13 +88,14 @@ def get_fieldset_infos(fieldsets):\n     fieldset_infos = []\n     for fieldset in fieldsets:\n         fs_info = copy(fieldset)\n-        fs_info[\'fields\'] = [f.field.getName() for f in fs_info[\'fields\']]\n+        fs_info["fields"] = [f.field.getName() for f in fs_info["fields"]]\n         fieldset_infos.append(fs_info)\n     return fieldset_infos\n \n \n-def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n-                              excluded_fields=None):\n+def get_jsonschema_properties(\n+    context, request, fieldsets, prefix="", excluded_fields=None\n+):\n     """Build a JSON schema \'properties\' list, based on a list of fieldset\n     dicts as returned by `get_fieldsets()`.\n     """\n@@ -113,15 +112,16 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n             adapter = queryMultiAdapter(\n                 (field.field, context, request),\n                 interface=IJsonSchemaProvider,\n-                name=field.__name__)\n+                name=field.__name__,\n+            )\n \n             adapter = adapter or getMultiAdapter(\n-                (field.field, context, request),\n-                interface=IJsonSchemaProvider)\n+                (field.field, context, request), interface=IJsonSchemaProvider\n+            )\n \n             adapter.prefix = prefix\n             if prefix:\n-                fieldname = \'.\'.join([prefix, fieldname])\n+                fieldname = ".".join([prefix, fieldname])\n \n             properties[fieldname] = adapter.get_schema()\n \n@@ -161,16 +161,11 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n         additional_schemata = ()\n     else:\n         additional_schemata = tuple(getAdditionalSchemata(portal_type=fti.id))\n-        fieldsets = get_fieldsets(\n-            context, request, schema, additional_schemata\n-        )\n+        fieldsets = get_fieldsets(context, request, schema, additional_schemata)\n \n     # Build JSON schema properties\n     properties = get_jsonschema_properties(\n-        context,\n-        request,\n-        fieldsets,\n-        excluded_fields=excluded_fields,\n+        context, request, fieldsets, excluded_fields=excluded_fields\n     )\n \n     # Determine required fields\n@@ -182,26 +177,26 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     # Include field modes\n     for field in iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': IJsonCompatible(properties),\n-        \'required\': required,\n-        \'fieldsets\': get_fieldset_infos(fieldsets),\n-        \'layouts\': getattr(fti, \'view_methods\', []),\n+        "type": "object",\n+        "title": translate(fti.Title(), context=getRequest()),\n+        "properties": IJsonCompatible(properties),\n+        "required": required,\n+        "fieldsets": get_fieldset_infos(fieldsets),\n+        "layouts": getattr(fti, "view_methods", []),\n     }\n \n \n-def get_jsonschema_for_portal_type(portal_type, context, request,\n-                                   excluded_fields=None):\n+def get_jsonschema_for_portal_type(portal_type, context, request, excluded_fields=None):\n     """Build a complete JSON schema for the given portal_type.\n     """\n-    ttool = getToolByName(context, \'portal_types\')\n+    ttool = getToolByName(context, "portal_types")\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\n-        fti, context, request, excluded_fields=excluded_fields)\n+        fti, context, request, excluded_fields=excluded_fields\n+    )\n \n \n def get_vocabulary_url(vocab_name, context, request):\n@@ -210,7 +205,4 @@ def get_vocabulary_url(vocab_name, context, request):\n     except AttributeError:\n         portal = getSite()\n         context_url = portal.absolute_url()\n-    return \'{}/@vocabularies/{}\'.format(\n-        context_url,\n-        vocab_name,\n-    )\n+    return "{}/@vocabularies/{}".format(context_url, vocab_name)\ndiff --git a/src/plone/restapi/types/z3crelationadapter.py b/src/plone/restapi/types/z3crelationadapter.py\nindex ea5181d0..4bba58eb 100644\n--- a/src/plone/restapi/types/z3crelationadapter.py\n+++ b/src/plone/restapi/types/z3crelationadapter.py\n@@ -12,12 +12,11 @@\n @adapter(IRelationList, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class ChoiceslessRelationListSchemaProvider(ListJsonSchemaProvider):\n-\n     def get_items(self):\n         """Get items properties."""\n         value_type_adapter = getMultiAdapter(\n-            (self.field.value_type, self.context, self.request),\n-            IJsonSchemaProvider)\n+            (self.field.value_type, self.context, self.request), IJsonSchemaProvider\n+        )\n \n         # Prevent rendering all choices.\n         value_type_adapter.should_render_choices = False\ndiff --git a/src/plone/restapi/upgrades/to0002.py b/src/plone/restapi/upgrades/to0002.py\nindex 5f5dddd3..0231f2fc 100644\n--- a/src/plone/restapi/upgrades/to0002.py\n+++ b/src/plone/restapi/upgrades/to0002.py\n@@ -5,7 +5,8 @@ def assign_use_api_permission(setup_context):\n     """Assign the \'plone.restapi: Use REST API\' permission to Anonymous.\n     """\n     setup_context.runImportStepFromProfile(\n-        \'profile-plone.restapi.upgrades:0002\',\n-        \'rolemap\',\n+        "profile-plone.restapi.upgrades:0002",\n+        "rolemap",\n         run_dependencies=False,\n-        purge_old=False)\n+        purge_old=False,\n+    )\ndiff --git a/src/plone/restapi/upgrades/to0003.py b/src/plone/restapi/upgrades/to0003.py\nindex 0cf67476..132f9755 100644\n--- a/src/plone/restapi/upgrades/to0003.py\n+++ b/src/plone/restapi/upgrades/to0003.py\n@@ -6,5 +6,5 @@\n def install_pas_plugin_in_zope_root(setup_context):\n     """Install PAS plugin in Zope root\n     """\n-    portal = getToolByName(setup_context, \'portal_url\').getPortalObject()\n+    portal = getToolByName(setup_context, "portal_url").getPortalObject()\n     install_pas_plugin(portal)\ndiff --git a/src/plone/restapi/upgrades/to0004.py b/src/plone/restapi/upgrades/to0004.py\nindex 697b25d6..6fac3ce7 100644\n--- a/src/plone/restapi/upgrades/to0004.py\n+++ b/src/plone/restapi/upgrades/to0004.py\n@@ -6,7 +6,8 @@ def assign_get_users_permission(setup_context):\n        to Managers by default.\n     """\n     setup_context.runImportStepFromProfile(\n-        \'profile-plone.restapi.upgrades:0004\',\n-        \'rolemap\',\n+        "profile-plone.restapi.upgrades:0004",\n+        "rolemap",\n         run_dependencies=False,\n-        purge_old=False)\n+        purge_old=False,\n+    )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T17:17:48+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/daea71799a804b3bd6839960ce599291e924ff58

Add changelog for Black.

Files changed:
A news/693.feature

b'diff --git a/news/693.feature b/news/693.feature\nnew file mode 100644\nindex 00000000..5eae0203\n--- /dev/null\n+++ b/news/693.feature\n@@ -0,0 +1 @@\n+Use Black on the code base. [timo]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T17:38:28+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/ea4eff7f6fb041d283b9894262a571b3fe797510

Fix test that started to fail in Plone 4.3 and 5.0.

Files changed:
M .flake8
M plone-5.0.x.cfg
M src/plone/restapi/tests/test_search.py

b'diff --git a/.flake8 b/.flake8\nindex 1a35f4e1..d163169f 100644\n--- a/.flake8\n+++ b/.flake8\n@@ -1,6 +1,6 @@\n # https://github.com/ambv/black/blob/master/.flake8\n [flake8]\n ignore = E203, E266, E501, W503\n-max-line-length = 80\n+max-line-length = 88\n max-complexity = 25\n select = B,C,E,F,W,T4,B9\ndiff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex bc3c0932..824e5ab5 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -7,3 +7,4 @@ extends =\n [versions]\n pytz = 2017.3\n zope.interface = 4.1.0\n+Pillow = 5.3.0\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 44291366..56cf5f0a 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -111,7 +111,8 @@ def test_overall_response_format(self):\n         response = self.api_session.get("/@search")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n+        self.assertEqual(response.headers.get(\n+            "Content-Type"), "application/json")\n \n         results = response.json()\n         self.assertEqual(\n@@ -123,7 +124,8 @@ def test_overall_response_format(self):\n     def test_search_on_context_constrains_query_by_path(self):\n         response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n+            {u"/plone/folder", u"/plone/folder/doc",\n+                u"/plone/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -294,7 +296,8 @@ def test_full_objects_retrieval(self):\n             response.json()["items"][0]["test_richtext_field"]["data"],\n         )\n         self.assertEqual(\n-            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url +\n+            u"/folder/doc", response.json()["items"][0]["@id"]\n         )\n \n     def test_full_objects_retrieval_discussion(self):\n@@ -419,7 +422,8 @@ def test_extended_path_index_query(self):\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            [u"/plone/folder", u"/plone/folder/doc",\n+                u"/plone/folder/other-document"],\n             result_paths(response.json()),\n         )\n \n@@ -517,7 +521,14 @@ def test_date_range_index_query(self):\n         response = self.api_session.get("/folder/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder", u"/plone/folder/doc"], result_paths(response.json())\n+            2,\n+            len(result_paths(response.json()))\n+        )\n+        self.assertTrue(\n+            u"/plone/folder" in result_paths(response.json())\n+        )\n+        self.assertTrue(\n+            u"/plone/folder/doc" in result_paths(response.json())\n         )\n \n     # DateRecurringIndex\n@@ -544,7 +555,8 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 1).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"],\n+                         result_paths(response.json()))\n \n         # No event that day\n         query = {"start": date(2013, 1, 2).isoformat()}\n@@ -556,7 +568,8 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 3).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"],\n+                         result_paths(response.json()))\n \n         # Ranged query\n         query = {\n@@ -565,7 +578,8 @@ def test_date_recurring_index_query(self):\n         }\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"],\n+                         result_paths(response.json()))\n \n     # UUIDIndex\n \n@@ -656,5 +670,6 @@ def test_full_objects_retrieval(self):\n             response.json()["items"][0]["testTextField"],\n         )\n         self.assertEqual(\n-            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url +\n+            u"/folder/doc", response.json()["items"][0]["@id"]\n         )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T17:46:49+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/9582a6e911c5ab186648b59eba1230e46d9a3f8e

Run black.

Files changed:
M base.cfg
M src/plone/restapi/tests/test_search.py

b'diff --git a/base.cfg b/base.cfg\nindex c75383a8..60addc79 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -99,7 +99,7 @@ mode = 755\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\n flake8-exclude=bootstrap.py,bootstrap-buildout.py,docs,bin,*.egg,setup.py,overrides\n-flake8-max-complexity = 20\n+flake8-max-complexity = 25\n flake8-extensions =\n     flake8-coding\n     flake8-debugger\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 56cf5f0a..2b732248 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -111,8 +111,7 @@ def test_overall_response_format(self):\n         response = self.api_session.get("/@search")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers.get(\n-            "Content-Type"), "application/json")\n+        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n         self.assertEqual(\n@@ -124,8 +123,7 @@ def test_overall_response_format(self):\n     def test_search_on_context_constrains_query_by_path(self):\n         response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder/doc",\n-                u"/plone/folder/other-document"},\n+            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -296,8 +294,7 @@ def test_full_objects_retrieval(self):\n             response.json()["items"][0]["test_richtext_field"]["data"],\n         )\n         self.assertEqual(\n-            self.portal_url +\n-            u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n         )\n \n     def test_full_objects_retrieval_discussion(self):\n@@ -422,8 +419,7 @@ def test_extended_path_index_query(self):\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder", u"/plone/folder/doc",\n-                u"/plone/folder/other-document"],\n+            [u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"],\n             result_paths(response.json()),\n         )\n \n@@ -520,16 +516,9 @@ def test_date_range_index_query(self):\n         query = {"effectiveRange": date(1997, 1, 1).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            2,\n-            len(result_paths(response.json()))\n-        )\n-        self.assertTrue(\n-            u"/plone/folder" in result_paths(response.json())\n-        )\n-        self.assertTrue(\n-            u"/plone/folder/doc" in result_paths(response.json())\n-        )\n+        self.assertEqual(2, len(result_paths(response.json())))\n+        self.assertTrue(u"/plone/folder" in result_paths(response.json()))\n+        self.assertTrue(u"/plone/folder/doc" in result_paths(response.json()))\n \n     # DateRecurringIndex\n \n@@ -555,8 +544,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 1).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"],\n-                         result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # No event that day\n         query = {"start": date(2013, 1, 2).isoformat()}\n@@ -568,8 +556,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 3).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"],\n-                         result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # Ranged query\n         query = {\n@@ -578,8 +565,7 @@ def test_date_recurring_index_query(self):\n         }\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"],\n-                         result_paths(response.json()))\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n     # UUIDIndex\n \n@@ -670,6 +656,5 @@ def test_full_objects_retrieval(self):\n             response.json()["items"][0]["testTextField"],\n         )\n         self.assertEqual(\n-            self.portal_url +\n-            u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n         )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T18:35:49+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/5653de30dfe15a7861b6caf738f7ad2856371ada

Remove Pillow pin on Plone 4.3.

Files changed:
M plone-5.0.x.cfg

b'diff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex 824e5ab5..bc3c0932 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -7,4 +7,3 @@ extends =\n [versions]\n pytz = 2017.3\n zope.interface = 4.1.0\n-Pillow = 5.3.0\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-24T20:35:29+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/ebe264281c7d981efdcda1ff8d823dfe7df1d7ef

Merge pull request #734 from plone/black-2

Add black

Files changed:
A .flake8
A news/693.feature
M base.cfg
M src/plone/__init__.py
M src/plone/restapi/__init__.py
M src/plone/restapi/batching.py
M src/plone/restapi/behaviors.py
M src/plone/restapi/controlpanels.py
M src/plone/restapi/demo/demo.py
M src/plone/restapi/deserializer/__init__.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/deserializer/controlpanels.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/imaging.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/permissions.py
M src/plone/restapi/search/date_recurring_index.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/search/query.py
M src/plone/restapi/search/utils.py
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/collection.py
M src/plone/restapi/serializer/controlpanels.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/local_roles.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/serializer/relationfield.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/actions/get.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/services/breadcrumbs/get.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/delete.py
M src/plone/restapi/services/content/get.py
M src/plone/restapi/services/content/sharing.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/update.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/services/controlpanels/patch.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/discussion/utils.py
M src/plone/restapi/services/email_notification/post.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/locking/locking.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/principals/get.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/registry/update.py
M src/plone/restapi/services/roles/get.py
M src/plone/restapi/services/search/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/attypes.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_atfield_deserializer.py
M src/plone/restapi/tests/test_atfield_serializer.py
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_boolean_value.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_delete.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_content_utils.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_imaging.py
M src/plone/restapi/tests/test_locking.py
M src/plone/restapi/tests/test_pas.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_profile_tiles.py
M src/plone/restapi/tests/test_query_parsers.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_search_utils.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_serializer_user.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_content.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrades.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/types/z3crelationadapter.py
M src/plone/restapi/upgrades/to0002.py
M src/plone/restapi/upgrades/to0003.py
M src/plone/restapi/upgrades/to0004.py

b'diff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 00000000..d163169f\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,6 @@\n+# https://github.com/ambv/black/blob/master/.flake8\n+[flake8]\n+ignore = E203, E266, E501, W503\n+max-line-length = 88\n+max-complexity = 25\n+select = B,C,E,F,W,T4,B9\ndiff --git a/base.cfg b/base.cfg\nindex c75383a8..60addc79 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -99,7 +99,7 @@ mode = 755\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\n flake8-exclude=bootstrap.py,bootstrap-buildout.py,docs,bin,*.egg,setup.py,overrides\n-flake8-max-complexity = 20\n+flake8-max-complexity = 25\n flake8-extensions =\n     flake8-coding\n     flake8-debugger\ndiff --git a/news/693.feature b/news/693.feature\nnew file mode 100644\nindex 00000000..5eae0203\n--- /dev/null\n+++ b/news/693.feature\n@@ -0,0 +1 @@\n+Use Black on the code base. [timo]\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex cf140252..a6dbf5d6 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -1,32 +1,34 @@\n # -*- coding: utf-8 -*-\n from AccessControl import allow_module\n from AccessControl.Permissions import add_user_folders\n-from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin  # noqa\n+from Products.PluggableAuthService.PluggableAuthService import (\n+    registerMultiPlugin,\n+)  # noqa\n from plone.restapi.pas import plugin\n from zope.i18nmessageid import MessageFactory\n \n import pkg_resources\n \n-_ = MessageFactory(\'plone.restapi\')\n-PROJECT_NAME = \'plone.restapi\'\n+_ = MessageFactory("plone.restapi")\n+PROJECT_NAME = "plone.restapi"\n \n \n-allow_module(\'json\')\n+allow_module("json")\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.testing\')\n+    pkg_resources.get_distribution("plone.app.testing")\n     REGISTER_TEST_TYPES = True\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     REGISTER_TEST_TYPES = False\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n     HAS_PLONE_APP_CONTENTTYPES = True\n except pkg_resources.DistributionNotFound:  # pragma: no cover\n     HAS_PLONE_APP_CONTENTTYPES = False\n \n try:\n-    pkg_resources.get_distribution(\'Products.Archetypes\')\n+    pkg_resources.get_distribution("Products.Archetypes")\n except pkg_resources.DistributionNotFound:\n     HAS_AT = False\n else:\n@@ -40,7 +42,7 @@ def initialize(context):\n         permission=add_user_folders,\n         constructors=(\n             plugin.manage_addJWTAuthenticationPlugin,\n-            plugin.addJWTAuthenticationPlugin\n+            plugin.addJWTAuthenticationPlugin,\n         ),\n         visibility=None,\n     )\n@@ -52,12 +54,11 @@ def initialize(context):\n         from plone.restapi.tests.attypes import PROJECTNAME\n \n         content_types, constructors, ftis = process_types(\n-            listTypes(PROJECTNAME),\n-            PROJECTNAME\n+            listTypes(PROJECTNAME), PROJECTNAME\n         )\n \n         utils.ContentInit(\n-            \'%s Content\' % PROJECTNAME,\n+            "%s Content" % PROJECTNAME,\n             content_types=content_types,\n             permission=permissions.AddPortalContent,\n             extra_constructors=constructors,\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex c0126c77..c25479d5 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -8,12 +8,11 @@\n \n \n class HypermediaBatch(object):\n-\n     def __init__(self, request, results):\n         self.request = request\n \n-        self.b_start = int(self.request.form.get(\'b_start\', 0))\n-        self.b_size = int(self.request.form.get(\'b_size\', DEFAULT_BATCH_SIZE))\n+        self.b_start = int(self.request.form.get("b_start", 0))\n+        self.b_size = int(self.request.form.get("b_size", DEFAULT_BATCH_SIZE))\n \n         self.batch = Batch(results, self.b_size, self.b_start)\n \n@@ -34,28 +33,27 @@ def canonical_url(self):\n         preserving query string params, but stripping all batching related\n         params from it.\n         """\n-        url = self.request[\'ACTUAL_URL\']\n-        qs_params = parse_qsl(self.request[\'QUERY_STRING\'])\n+        url = self.request["ACTUAL_URL"]\n+        qs_params = parse_qsl(self.request["QUERY_STRING"])\n \n         # Remove any batching / sorting related parameters.\n         # Also take care to preserve list-like query string params.\n         for key, value in qs_params[:]:\n-            if key in (\'b_size\', \'b_start\',\n-                       \'sort_on\', \'sort_order\', \'sort_limit\'):\n+            if key in ("b_size", "b_start", "sort_on", "sort_order", "sort_limit"):\n                 qs_params.remove((key, value))\n \n         qs = urlencode(qs_params)\n \n         if qs_params:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\n \n     @property\n     def current_batch_url(self):\n-        url = self.request[\'ACTUAL_URL\']\n-        qs = self.request[\'QUERY_STRING\']\n+        url = self.request["ACTUAL_URL"]\n+        qs = self.request["QUERY_STRING"]\n         if qs:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\n \n     @property\n@@ -73,15 +71,15 @@ def links(self):\n         next = self.batch.next\n         prev = self.batch.previous\n \n-        links[\'@id\'] = self.current_batch_url\n-        links[\'first\'] = self._url_for_batch(first)\n-        links[\'last\'] = self._url_for_batch(last)\n+        links["@id"] = self.current_batch_url\n+        links["first"] = self._url_for_batch(first)\n+        links["last"] = self._url_for_batch(last)\n \n         if next:\n-            links[\'next\'] = self._url_for_batch(next)\n+            links["next"] = self._url_for_batch(next)\n \n         if prev:\n-            links[\'prev\'] = self._url_for_batch(prev)\n+            links["prev"] = self._url_for_batch(prev)\n \n         return links\n \n@@ -89,9 +87,8 @@ def _batch_for_page(self, pagenumber):\n         """Return a new Batch object for the given pagenumber.\n         """\n         new_batch = Batch.fromPagenumber(\n-            self.batch._sequence,\n-            pagesize=self.b_size,\n-            pagenumber=pagenumber)\n+            self.batch._sequence, pagesize=self.b_size, pagenumber=pagenumber\n+        )\n         return new_batch\n \n     def _url_for_batch(self, batch):\n@@ -101,15 +98,15 @@ def _url_for_batch(self, batch):\n         # Make sure we account for plone.batching\'s one-based indexing and\n         # that the start never drops below zero\n         new_start = max(0, batch.start - 1)\n-        url = self._url_with_params(params={\'b_start\': new_start})\n+        url = self._url_with_params(params={"b_start": new_start})\n         return url\n \n     def _url_with_params(self, params):\n         """Build an URL based on the actual URL of the current request URL\n         and add or update some query string parameters in it.\n         """\n-        url = self.request[\'ACTUAL_URL\']\n-        qs_params = parse_qsl(self.request[\'QUERY_STRING\'])\n+        url = self.request["ACTUAL_URL"]\n+        qs_params = parse_qsl(self.request["QUERY_STRING"])\n \n         # Take care to preserve list-like query string arguments (same QS\n         # param repeated multiple times). In other words, don\'t turn the\n@@ -122,5 +119,5 @@ def _url_with_params(self, params):\n         qs = urlencode(qs_params)\n \n         if qs_params:\n-            url = \'?\'.join((url, qs))\n+            url = "?".join((url, qs))\n         return url\ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex cba56701..3711f31e 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -8,42 +8,33 @@\n import json\n \n \n-TILES_SCHEMA = json.dumps({\n-    \'type\': \'object\',\n-    \'properties\': {},\n-})\n-\n-LAYOUT_SCHEMA = json.dumps({\n-    \'type\': \'object\',\n-    \'properties\': {\n-        \'items\': {\n-            \'type\': \'array\',\n-            \'items\': {\n-                \'type\': \'string\'\n-            }\n-        }\n+TILES_SCHEMA = json.dumps({"type": "object", "properties": {}})\n+\n+LAYOUT_SCHEMA = json.dumps(\n+    {\n+        "type": "object",\n+        "properties": {"items": {"type": "array", "items": {"type": "string"}}},\n     }\n-})\n+)\n \n \n @provider(IFormFieldProvider)\n class ITiles(model.Schema):\n \n-    model.fieldset(\'layout\', label=_(u\'Layout\'),\n-                   fields=[\'tiles\', \'tiles_layout\'])\n+    model.fieldset("layout", label=_(u"Layout"), fields=["tiles", "tiles_layout"])\n \n     tiles = JSONField(\n-        title=u\'Tiles\',\n-        description=u\'The JSON representation of the object tiles information. Must be a JSON object.\',  # noqa\n+        title=u"Tiles",\n+        description=u"The JSON representation of the object tiles information. Must be a JSON object.",  # noqa\n         schema=TILES_SCHEMA,\n         default={},\n         required=False,\n     )\n \n     tiles_layout = JSONField(\n-        title=u\'Tiles Layout)\',\n-        description=u\'The JSON representation of the object tiles layout. Must be a JSON array.\',  # noqa\n+        title=u"Tiles Layout)",\n+        description=u"The JSON representation of the object tiles layout. Must be a JSON array.",  # noqa\n         schema=LAYOUT_SCHEMA,\n-        default={\'items\': []},\n+        default={"items": []},\n         required=False,\n     )\ndiff --git a/src/plone/restapi/controlpanels.py b/src/plone/restapi/controlpanels.py\nindex 04d9bbf2..9b954f6d 100644\n--- a/src/plone/restapi/controlpanels.py\n+++ b/src/plone/restapi/controlpanels.py\n@@ -17,13 +17,15 @@\n \n \n class IControlpanel(Interface):\n-    __name__ = Attribute(\'Name of the controlpanel in the URL\')\n-    title = Attribute(\'Title of this controlpanel\')\n-    group = Attribute(\'Group name of this controlpanel\')\n-    schema = Attribute(\'Registry schema of this controlpanel\')\n+    __name__ = Attribute("Name of the controlpanel in the URL")\n+    title = Attribute("Title of this controlpanel")\n+    group = Attribute("Group name of this controlpanel")\n+    schema = Attribute("Registry schema of this controlpanel")\n \n-    configlet_id = Attribute(\'Id the configlet, ie MailHost\')\n-    configlet_category_id = Attribute(\'Category of the configlet, ie plone-general\')  # noqa\n+    configlet_id = Attribute("Id the configlet, ie MailHost")\n+    configlet_category_id = Attribute(\n+        "Category of the configlet, ie plone-general"\n+    )  # noqa\n \n \n @implementer(IControlpanel)\n@@ -33,113 +35,115 @@ class RegistryConfigletPanel(object):\n     configlet_category_id = None\n     schema = None\n \n-    schema_prefix = \'plone\'\n+    schema_prefix = "plone"\n \n     def _get_configlet(self):\n-        configlet_data = self.portal_cp.enumConfiglets(\n-            self.configlet_category_id\n-        )\n+        configlet_data = self.portal_cp.enumConfiglets(self.configlet_category_id)\n         for action in configlet_data:\n-            if action[\'id\'] == self.configlet_id:\n+            if action["id"] == self.configlet_id:\n                 return action\n \n     def _get_group_title(self):\n         groups = [\n-            g for g in self.portal_cp.getGroups()\n-            if g[\'id\'] == self.configlet[\'category\']\n+            g\n+            for g in self.portal_cp.getGroups()\n+            if g["id"] == self.configlet["category"]\n         ]\n-        return [g[\'title\'] for g in groups][0]\n+        return [g["title"] for g in groups][0]\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-        self.portal_cp = getToolByName(self.context, \'portal_controlpanel\')\n+        self.portal_cp = getToolByName(self.context, "portal_controlpanel")\n \n         self.configlet = self._get_configlet()\n         if self.configlet:\n-            self.title = self.configlet[\'title\']\n+            self.title = self.configlet["title"]\n             self.group = self._get_group_title()\n \n \n # General\n \n+\n @adapter(Interface, Interface)\n class DateTimeControlpanel(RegistryConfigletPanel):\n     schema = IDateAndTimeSchema\n-    configlet_id = \'DateAndTime\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "DateAndTime"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class LanguageControlpanel(RegistryConfigletPanel):\n     schema = ILanguageSchema\n-    configlet_id = \'LanguageSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "LanguageSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class MailControlpanel(RegistryConfigletPanel):\n     schema = IMailSchema\n-    configlet_id = \'MailHost\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "MailHost"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class NavigationControlpanel(RegistryConfigletPanel):\n     schema = INavigationSchema\n-    configlet_id = \'NavigationSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "NavigationSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SiteControlpanel(RegistryConfigletPanel):\n     schema = ISiteSchema\n-    configlet_id = \'PloneReconfig\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "PloneReconfig"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SearchControlpanel(RegistryConfigletPanel):\n     schema = ISearchSchema\n-    configlet_id = \'SearchSettings\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "SearchSettings"\n+    configlet_category_id = "plone-general"\n \n \n @adapter(Interface, Interface)\n class SocialMediaControlpanel(RegistryConfigletPanel):\n     schema = ISocialMediaSchema\n-    configlet_id = \'socialmedia\'\n-    configlet_category_id = \'plone-general\'\n+    configlet_id = "socialmedia"\n+    configlet_category_id = "plone-general"\n \n \n # Content\n \n+\n @adapter(Interface, Interface)\n class EditingControlpanel(RegistryConfigletPanel):\n     schema = IEditingSchema\n-    configlet_id = \'EditingSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "EditingSettings"\n+    configlet_category_id = "plone-content"\n \n \n @adapter(Interface, Interface)\n class ImagingControlpanel(RegistryConfigletPanel):\n     schema = IImagingSchema\n-    configlet_id = \'ImagingSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "ImagingSettings"\n+    configlet_category_id = "plone-content"\n \n \n @adapter(Interface, Interface)\n class MarkupControlpanel(RegistryConfigletPanel):\n     schema = IMarkupSchema\n-    configlet_id = \'MarkupSettings\'\n-    configlet_category_id = \'plone-content\'\n+    configlet_id = "MarkupSettings"\n+    configlet_category_id = "plone-content"\n \n \n # Security\n \n+\n @adapter(Interface, Interface)\n class SecurityControlpanel(RegistryConfigletPanel):\n     schema = ISecuritySchema\n-    configlet_id = \'SecuritySettings\'\n-    configlet_category_id = \'plone-security\'\n+    configlet_id = "SecuritySettings"\n+    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/demo/demo.py b/src/plone/restapi/demo/demo.py\nindex 7c90983b..ee073d89 100644\n--- a/src/plone/restapi/demo/demo.py\n+++ b/src/plone/restapi/demo/demo.py\n@@ -3,13 +3,13 @@\n \n \n class InternalServerErrorView(BrowserView):  # pragma: no cover\n-\n     def __call__(self):\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/internal_server_error\',\n+            "http://nohost/plone/internal_server_error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\ndiff --git a/src/plone/restapi/deserializer/__init__.py b/src/plone/restapi/deserializer/__init__.py\nindex 58207c54..a83443f3 100644\n--- a/src/plone/restapi/deserializer/__init__.py\n+++ b/src/plone/restapi/deserializer/__init__.py\n@@ -6,11 +6,11 @@\n \n def json_body(request):\n     try:\n-        data = json.loads(request.get(\'BODY\') or \'{}\')\n+        data = json.loads(request.get("BODY") or "{}")\n     except ValueError:\n-        raise DeserializationError(\'No JSON object could be decoded\')\n+        raise DeserializationError("No JSON object could be decoded")\n     if not isinstance(data, dict):\n-        raise DeserializationError(\'Malformed body\')\n+        raise DeserializationError("Malformed body")\n     return data\n \n \n@@ -25,4 +25,4 @@ def boolean_value(value):\n     Returns: a boolean\n \n     """\n-    return value not in {False, \'false\', \'False\', \'0\', 0}\n+    return value not in {False, "false", "False", "0", 0}\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex dd1be622..c4a3afa0 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -45,7 +45,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n \n             if name in data:\n                 deserializer = queryMultiAdapter(\n-                    (field, obj, self.request), IFieldDeserializer)\n+                    (field, obj, self.request), IFieldDeserializer\n+                )\n                 if deserializer is None:\n                     continue\n                 value, kwargs = deserializer(data[name])\n@@ -58,10 +59,10 @@ def __call__(self, validate_all=False, data=None, create=False):\n             if not validate_all:\n                 errors = {f: e for f, e in errors.items() if f in data}\n             if errors:\n-                errors = [{\n-                    \'message\': e,\n-                    \'field\': f,\n-                    \'error\': \'ValidationError\'} for f, e in errors.items()]\n+                errors = [\n+                    {"message": e, "field": f, "error": "ValidationError"}\n+                    for f, e in errors.items()\n+                ]\n                 raise BadRequest(errors)\n \n             if create:\n@@ -76,8 +77,8 @@ def __call__(self, validate_all=False, data=None, create=False):\n \n         # We\'ll set the layout after the validation and and even if there\n         # are no other changes.\n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n@@ -108,8 +109,9 @@ def validate(self):\n                     else:\n                         errors[field_name] = error_message\n \n-        obj.Schema().validate(instance=obj, REQUEST=None,\n-                              errors=errors, data=True, metadata=True)\n+        obj.Schema().validate(\n+            instance=obj, REQUEST=None, errors=errors, data=True, metadata=True\n+        )\n \n         obj.post_validate(request, errors)\n \n@@ -152,6 +154,7 @@ def get(self, key, default=None):\n class ValidationRequestForm(dict):\n     """A request form dict that returns values from the content object.\n     """\n+\n     def __init__(self, request, context):\n         self.request = request\n         self.context = context\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 3ab58e06..5cb4be16 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -15,7 +15,6 @@\n @implementer(IFieldDeserializer)\n @adapter(IField, IBaseObject, IBrowserRequest)\n class DefaultFieldDeserializer(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         self.context = context\n@@ -28,24 +27,23 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IFileField, IBaseObject, IBrowserRequest)\n class FileFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         kwargs = {}\n         if isinstance(value, dict):\n-            if u\'content-type\' in value:\n-                kwargs[u\'mimetype\'] = value[u\'content-type\'].encode(\'utf8\')\n-            if u\'filename\' in value:\n-                kwargs[u\'filename\'] = value[u\'filename\'].encode(\'utf8\')\n-            if u\'encoding\' in value:\n-                value = value.get(\'data\', \'\').decode(value[u\'encoding\'])\n+            if u"content-type" in value:\n+                kwargs[u"mimetype"] = value[u"content-type"].encode("utf8")\n+            if u"filename" in value:\n+                kwargs[u"filename"] = value[u"filename"].encode("utf8")\n+            if u"encoding" in value:\n+                value = value.get("data", "").decode(value[u"encoding"])\n             else:\n-                value = value.get(\'data\', \'\')\n+                value = value.get("data", "")\n         elif isinstance(value, TUSUpload):\n             metadata = value.metadata()\n-            if \'content-type\' in metadata:\n-                kwargs[u\'mimetype\'] = metadata[\'content-type\']\n-            if \'filename\' in metadata:\n-                kwargs[u\'filename\'] = metadata[\'filename\']\n+            if "content-type" in metadata:\n+                kwargs[u"mimetype"] = metadata["content-type"]\n+            if "filename" in metadata:\n+                kwargs[u"filename"] = metadata["filename"]\n             value = value.open()\n \n         return value, kwargs\n@@ -60,10 +58,10 @@ class BlobFieldDeserializer(FileFieldDeserializer):\n @implementer(IFieldDeserializer)\n @adapter(IReferenceField, IBaseObject, IBrowserRequest)\n class ReferenceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        portal = getMultiAdapter((self.context, self.request),\n-                                 name=\'plone_portal_state\').portal()\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         portal_url = portal.absolute_url()\n \n         if not isinstance(value, list):\n@@ -72,7 +70,7 @@ def __call__(self, value):\n         for i, v in enumerate(value):\n             # Resolve references given by URL\n             if v.startswith(portal_url):\n-                path = v[len(portal_url) + 1:].encode(\'utf8\')\n+                path = v[len(portal_url) + 1 :].encode("utf8")\n                 value[i] = portal.unrestrictedTraverse(path, None)\n \n         return value, {}\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels.py\nindex e434ee01..5aebcf2c 100644\n--- a/src/plone/restapi/deserializer/controlpanels.py\n+++ b/src/plone/restapi/deserializer/controlpanels.py\n@@ -24,7 +24,6 @@ class FakeDXContext(object):\n @implementer(IDeserializeFromJson)\n @adapter(IControlpanel)\n class ControlpanelDeserializeFromJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\n@@ -38,9 +37,7 @@ def __init__(self, controlpanel):\n     def __call__(self):\n         data = json_body(self.controlpanel.request)\n \n-        proxy = self.registry.forInterface(\n-            self.schema, prefix=self.schema_prefix\n-        )\n+        proxy = self.registry.forInterface(self.schema, prefix=self.schema_prefix)\n \n         schema_data = {}\n         errors = []\n@@ -56,8 +53,7 @@ def __call__(self):\n \n             if name in data:\n                 deserializer = queryMultiAdapter(\n-                    (field, fake_context, self.request),\n-                    IFieldDeserializer\n+                    (field, fake_context, self.request), IFieldDeserializer\n                 )\n \n                 try:\n@@ -68,21 +64,19 @@ def __call__(self):\n                     # Set the value.\n                     setattr(proxy, name, value)\n                 except ValueError as e:\n-                    errors.append({\n-                        \'message\': str(e), \'field\': name, \'error\': e})\n+                    errors.append({"message": str(e), "field": name, "error": e})\n                 except ValidationError as e:\n-                    errors.append({\n-                        \'message\': e.doc(), \'field\': name, \'error\': e})\n+                    errors.append({"message": e.doc(), "field": name, "error": e})\n                 else:\n                     field_data[name] = value\n \n         # Validate schemata\n         for schema, field_data in schema_data.items():\n             validator = queryMultiAdapter(\n-                (self.context, self.request, None, schema, None),\n-                IManagerValidator)\n+                (self.context, self.request, None, schema, None), IManagerValidator\n+            )\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': str(error)})\n+                errors.append({"error": error, "message": str(error)})\n \n         if errors:\n             raise BadRequest(errors)\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 4f93e8ba..33876ba2 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -35,7 +35,9 @@ def __init__(self, context, request):\n         self.sm = getSecurityManager()\n         self.permission_cache = {}\n \n-    def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore=C901\n+    def __call__(\n+        self, validate_all=False, data=None, create=False\n+    ):  # noqa: ignore=C901\n         if data is None:\n             data = json_body(self.request)\n \n@@ -44,8 +46,7 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n         errors = []\n \n         for schema in iterSchemata(self.context):\n-            write_permissions = mergedTaggedValueDict(\n-                schema, WRITE_PERMISSIONS_KEY)\n+            write_permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n \n@@ -67,71 +68,70 @@ def __call__(self, validate_all=False, data=None, create=False):  # noqa: ignore\n                         if not field.required:\n                             dm.set(field.missing_value)\n                         else:\n-                            errors.append({\n-                                \'field\': field.__name__,\n-                                \'message\': (\n-                                    \'{} is a required field.\'.format(\n-                                        field.__name__\n+                            errors.append(\n+                                {\n+                                    "field": field.__name__,\n+                                    "message": (\n+                                        "{} is a required field.".format(\n+                                            field.__name__\n+                                        ),\n+                                        "Setting it to null is not allowed.",\n                                     ),\n-                                    \'Setting it to null is not allowed.\'\n-                                )})\n+                                }\n+                            )\n                         continue\n \n                     # Deserialize to field value\n                     deserializer = queryMultiAdapter(\n-                        (field, self.context, self.request),\n-                        IFieldDeserializer)\n+                        (field, self.context, self.request), IFieldDeserializer\n+                    )\n                     if deserializer is None:\n                         continue\n \n                     try:\n                         value = deserializer(data[name])\n                     except ValueError as e:\n-                        errors.append({\n-                            \'message\': str(e), \'field\': name, \'error\': e})\n+                        errors.append({"message": str(e), "field": name, "error": e})\n                     except ValidationError as e:\n-                        errors.append({\n-                            \'message\': e.doc(), \'field\': name, \'error\': e})\n+                        errors.append({"message": e.doc(), "field": name, "error": e})\n                     else:\n                         field_data[name] = value\n                         if value != dm.get():\n                             dm.set(value)\n                             # Collect the names of the modified fields\n                             # Use prefixed name because z3c.form does so\n-                            prefixed_name = schema.__name__ + \'.\' + name\n-                            modified.setdefault(schema, []).append(\n-                                prefixed_name)\n+                            prefixed_name = schema.__name__ + "." + name\n+                            modified.setdefault(schema, []).append(prefixed_name)\n \n                 elif validate_all:\n                     # Never validate the changeNote of p.a.versioningbehavior\n                     # The Versionable adapter always returns an empty string\n                     # which is the wrong type. Should be unicode and should be\n                     # fixed in p.a.versioningbehavior\n-                    if name == \'changeNote\':\n+                    if name == "changeNote":\n                         continue\n                     dm = queryMultiAdapter((self.context, field), IDataManager)\n                     bound = field.bind(self.context)\n                     try:\n                         bound.validate(dm.get())\n                     except ValidationError as e:\n-                        errors.append({\n-                            \'message\': e.doc(), \'field\': name, \'error\': e})\n+                        errors.append({"message": e.doc(), "field": name, "error": e})\n \n         # Validate schemata\n         for schema, field_data in schema_data.items():\n             validator = queryMultiAdapter(\n-                (self.context, self.request, None, schema, None),\n-                IManagerValidator)\n+                (self.context, self.request, None, schema, None), IManagerValidator\n+            )\n             for error in validator.validate(field_data):\n-                errors.append({\'error\': error, \'message\': str(error)})\n+                errors.append({"error": error, "message": str(error)})\n \n         if errors:\n             raise BadRequest(errors)\n \n         # We\'ll set the layout after the validation and and even if there\n         # are no other changes.\n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n@@ -150,11 +150,11 @@ def check_permission(self, permission_name):\n             return True\n \n         if permission_name not in self.permission_cache:\n-            permission = queryUtility(IPermission,\n-                                      name=permission_name)\n+            permission = queryUtility(IPermission, name=permission_name)\n             if permission is None:\n                 self.permission_cache[permission_name] = True\n             else:\n                 self.permission_cache[permission_name] = bool(\n-                    self.sm.checkPermission(permission.title, self.context))\n+                    self.sm.checkPermission(permission.title, self.context)\n+                )\n         return self.permission_cache[permission_name]\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 077b9064..9b0e58b4 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -33,7 +33,6 @@\n @implementer(IFieldDeserializer)\n @adapter(IField, IDexterityContent, IBrowserRequest)\n class DefaultFieldDeserializer(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         if IField.providedBy(self.field):\n@@ -54,7 +53,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ITextLine, IDexterityContent, IBrowserRequest)\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if isinstance(value, six.text_type):\n             value = IFromUnicode(self.field).fromUnicode(value)\n@@ -62,7 +60,7 @@ def __call__(self, value):\n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n         if isinstance(value, six.text_type):\n             value = value.strip()\n-            if value == u\'\':\n+            if value == u"":\n                 value = self.field.missing_value\n \n         self.field.validate(value)\n@@ -72,7 +70,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IDatetime, IDexterityContent, IBrowserRequest)\n class DatetimeFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         # Datetime fields may contain timezone naive or timezone aware\n         # objects. Unfortunately the zope.schema.Datetime field does not\n@@ -98,7 +95,7 @@ def __call__(self, value):\n         try:\n             dt = dateutil.parser.parse(value)\n         except ValueError:\n-            raise ValueError(u\'Invalid date: {}\'.format(value))\n+            raise ValueError(u"Invalid date: {}".format(value))\n \n         # Convert to TZ aware in UTC\n         if dt.tzinfo is not None:\n@@ -120,10 +117,9 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IChoice, IDexterityContent, IBrowserRequest)\n class ChoiceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        if isinstance(value, dict) and \'token\' in value:\n-            value = value[\'token\']\n+        if isinstance(value, dict) and "token" in value:\n+            value = value["token"]\n         if IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 value = self.field.vocabulary.getTermByToken(value).value\n@@ -137,19 +133,18 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ICollection, IDexterityContent, IBrowserRequest)\n class CollectionFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if not isinstance(value, list):\n             value = [value]\n \n         if IField.providedBy(self.field.value_type):\n             deserializer = getMultiAdapter(\n-                (self.field.value_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.value_type, self.context, self.request), IFieldDeserializer\n+            )\n \n             for i, v in enumerate(value):\n-                if isinstance(v, dict) and \'token\' in v:\n-                    v = v[\'token\']\n+                if isinstance(v, dict) and "token" in v:\n+                    v = v["token"]\n                 value[i] = deserializer(v)\n \n         value = self.field._type(value)\n@@ -161,21 +156,22 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IDict, IDexterityContent, IBrowserRequest)\n class DictFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         if IField.providedBy(self.field.key_type):\n             kdeserializer = getMultiAdapter(\n-                (self.field.key_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.key_type, self.context, self.request), IFieldDeserializer\n+            )\n         else:\n+\n             def kdeserializer(k):\n                 return k\n \n         if IField.providedBy(self.field.value_type):\n             vdeserializer = getMultiAdapter(\n-                (self.field.value_type, self.context, self.request),\n-                IFieldDeserializer)\n+                (self.field.value_type, self.context, self.request), IFieldDeserializer\n+            )\n         else:\n+\n             def vdeserializer(v):\n                 return v\n \n@@ -190,7 +186,6 @@ def vdeserializer(v):\n @implementer(IFieldDeserializer)\n @adapter(ITime, IDexterityContent, IBrowserRequest)\n class TimeFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         try:\n             # Create an ISO 8601 datetime string and parse it with Zope\'s\n@@ -200,7 +195,7 @@ def __call__(self, value):\n             # using ``timetz()`` would be timezone aware.\n             value = dateutil.parser.parse(value).time()\n         except ValueError:\n-            raise ValueError(u\'Invalid time: {}\'.format(value))\n+            raise ValueError(u"Invalid time: {}".format(value))\n \n         self.field.validate(value)\n         return value\n@@ -209,7 +204,6 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(ITimedelta, IDexterityContent, IBrowserRequest)\n class TimedeltaFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         try:\n             value = timedelta(seconds=value)\n@@ -223,30 +217,28 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(INamedField, IDexterityContent, IBrowserRequest)\n class NamedFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n-        content_type = \'application/octet-stream\'\n+        content_type = "application/octet-stream"\n         filename = None\n         if isinstance(value, dict):\n-            if \'data\' not in value:\n+            if "data" not in value:\n                 # We are probably pushing the contents of a previous GET\n                 # That contain the read representation of the file\n                 # with the \'download\' key so we return the same stored file\n                 return getattr(self.field.context, self.field.__name__)\n \n-            content_type = value.get(\'content-type\', content_type)\n-            filename = value.get(\'filename\', filename)\n-            data = value.get(\'data\', \'\')\n+            content_type = value.get("content-type", content_type)\n+            filename = value.get("filename", filename)\n+            data = value.get("data", "")\n             if isinstance(data, six.text_type):\n-                data = data.encode(\'utf-8\')\n-            if \'encoding\' in value:\n-                data = codecs.decode(data, value[\'encoding\'])\n+                data = data.encode("utf-8")\n+            if "encoding" in value:\n+                data = codecs.decode(data, value["encoding"])\n             if isinstance(data, six.text_type):\n-                data = data.encode(\'utf-8\')\n+                data = data.encode("utf-8")\n         elif isinstance(value, TUSUpload):\n-            content_type = value.metadata().get(\n-                \'content-type\', content_type)\n-            filename = value.metadata().get(\'filename\', filename)\n+            content_type = value.metadata().get("content-type", content_type)\n+            filename = value.metadata().get("filename", filename)\n             data = value.open()\n         else:\n             data = value\n@@ -254,9 +246,10 @@ def __call__(self, value):\n         # Convert if we have data\n         if data:\n             if six.PY2:\n-                content_type = content_type.encode(\'utf8\')\n+                content_type = content_type.encode("utf8")\n             value = self.field._type(\n-                data=data, contentType=content_type, filename=filename)\n+                data=data, contentType=content_type, filename=filename\n+            )\n         else:\n             value = None\n \n@@ -268,18 +261,17 @@ def __call__(self, value):\n @implementer(IFieldDeserializer)\n @adapter(IRichText, IDexterityContent, IBrowserRequest)\n class RichTextFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         content_type = self.field.default_mime_type\n-        encoding = \'utf8\'\n+        encoding = "utf8"\n         if isinstance(value, dict):\n-            content_type = value.get(\'content-type\', content_type)\n-            encoding = value.get(\'encoding\', encoding)\n-            data = value.get(\'data\', u\'\')\n+            content_type = value.get("content-type", content_type)\n+            encoding = value.get("encoding", encoding)\n+            data = value.get("data", u"")\n         elif isinstance(value, TUSUpload):\n-            content_type = value.metadata().get(\'content-type\', content_type)\n-            with open(value.filepath, \'rb\') as f:\n-                data = f.read().decode(\'utf8\')\n+            content_type = value.metadata().get("content-type", content_type)\n+            with open(value.filepath, "rb") as f:\n+                data = f.read().decode("utf8")\n         else:\n             data = value\n \ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 9b299730..8a24c2b0 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -11,6 +11,7 @@\n \n try:\n     from plone.app.workflow.events import LocalrolesModifiedEvent\n+\n     LOCALROLES_MODIFIED_EVENT_AVAILABLE = True\n except ImportError:\n     # Plone < 4.3.4\n@@ -32,29 +33,25 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         data = json_body(self.request)\n-        sharing_view = getMultiAdapter((self.context, self.request),\n-                                       name=\'sharing\')\n+        sharing_view = getMultiAdapter((self.context, self.request), name="sharing")\n \n         # inherit roles\n         inherit_reindex = False\n         # block can be None, so we might get False or None, so we test\n         # for a marker.\n-        inherit = data.get(\'inherit\', marker)\n+        inherit = data.get("inherit", marker)\n         if inherit is not marker:\n-            inherit_reindex = sharing_view.update_inherit(status=inherit,\n-                                                          reindex=False)\n+            inherit_reindex = sharing_view.update_inherit(status=inherit, reindex=False)\n         # roles\n         roles_reindex = False\n-        new_roles = data.get(\'entries\', None)\n+        new_roles = data.get("entries", None)\n         if new_roles is not None:\n             # the roles are converted into a FrozenSet so we have to filter\n             # the data structure we get.\n             for user in new_roles:\n-                roles_list = [key for key in user[\'roles\'] if\n-                              user[\'roles\'][key]]\n-                user[\'roles\'] = roles_list\n-            roles_reindex = sharing_view.update_role_settings(new_roles,\n-                                                              reindex=False)\n+                roles_list = [key for key in user["roles"] if user["roles"][key]]\n+                user["roles"] = roles_list\n+            roles_reindex = sharing_view.update_role_settings(new_roles, reindex=False)\n \n         if ICatalogAware(self.context) and (inherit_reindex or roles_reindex):\n             self.context.reindexObjectSecurity()\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex 98739ed3..45ae1f2c 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -5,12 +5,11 @@\n \n \n class OrderingMixin(object):\n-\n     def handle_ordering(self, data):\n-        if \'ordering\' in data:\n-            obj_id = data[\'ordering\'][\'obj_id\']\n-            delta = data[\'ordering\'][\'delta\']\n-            subset_ids = data[\'ordering\'].get(\'subset_ids\')\n+        if "ordering" in data:\n+            obj_id = data["ordering"]["obj_id"]\n+            delta = data["ordering"]["delta"]\n+            subset_ids = data["ordering"].get("subset_ids")\n \n             # The REST api returns only content items and a Zope resource\n             # may contain non-content items. We need to set the subset_ids\n@@ -24,21 +23,20 @@ def reorderItems(self, obj_id, delta, subset_ids):\n         # Based on wildcard.foldercontents.viewsItemOrder\n         ordering = self.getOrdering()\n         if ordering is None:\n-            msg = \'Content ordering is not supported by this resource\'\n+            msg = "Content ordering is not supported by this resource"\n             raise BadRequest(msg)\n \n         # Make sure we\'re seeing the same order as the client is.\n         if subset_ids:\n-            position_id = [(ordering.getObjectPosition(i), i)\n-                           for i in subset_ids]\n+            position_id = [(ordering.getObjectPosition(i), i) for i in subset_ids]\n             position_id.sort()\n             if subset_ids != [i for position, i in position_id]:\n-                raise BadRequest(\'Client/server ordering mismatch\')\n+                raise BadRequest("Client/server ordering mismatch")\n \n         # All movement is relative to the subset of ids, if passed in.\n-        if delta == \'top\':\n+        if delta == "top":\n             ordering.moveObjectsToTop([obj_id], subset_ids=subset_ids)\n-        elif delta == \'bottom\':\n+        elif delta == "bottom":\n             ordering.moveObjectsToBottom([obj_id], subset_ids=subset_ids)\n         else:\n             delta = int(delta)\n@@ -47,7 +45,7 @@ def reorderItems(self, obj_id, delta, subset_ids):\n     def getOrdering(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.context\n-        elif getattr(self.context, \'getOrdering\', None):\n+        elif getattr(self.context, "getOrdering", None):\n             ordering = self.context.getOrdering()\n             if not IExplicitOrdering.providedBy(ordering):\n                 return None\ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex ec3e8bc2..f22e0f37 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -16,14 +16,13 @@\n @implementer(IFieldDeserializer)\n @adapter(IRelationChoice, IDexterityContent, IBrowserRequest)\n class RelationChoiceFieldDeserializer(DefaultFieldDeserializer):\n-\n     def __call__(self, value):\n         obj = None\n \n         if isinstance(value, dict):\n             # We are trying to deserialize the output of a serialization\n             # which is enhanced, extract it and put it on the loop again\n-            value = value[\'@id\']\n+            value = value["@id"]\n \n         if isinstance(value, int):\n             # Resolve by intid\n@@ -31,20 +30,20 @@ def __call__(self, value):\n             obj = intids.queryObject(value)\n         elif isinstance(value, six.string_types):\n             if six.PY2 and isinstance(value, six.text_type):\n-                value = value.encode(\'utf8\')\n-            portal = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone_portal_state\').portal()\n+                value = value.encode("utf8")\n+            portal = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            ).portal()\n             portal_url = portal.absolute_url()\n             if value.startswith(portal_url):\n                 # Resolve by URL\n-                obj = portal.restrictedTraverse(\n-                    value[len(portal_url) + 1:], None)\n-            elif value.startswith(\'/\'):\n+                obj = portal.restrictedTraverse(value[len(portal_url) + 1 :], None)\n+            elif value.startswith("/"):\n                 # Resolve by path\n-                obj = portal.restrictedTraverse(value.lstrip(\'/\'), None)\n+                obj = portal.restrictedTraverse(value.lstrip("/"), None)\n             else:\n                 # Resolve by UID\n-                catalog = getToolByName(self.context, \'portal_catalog\')\n+                catalog = getToolByName(self.context, "portal_catalog")\n                 brain = catalog(UID=value)\n                 if brain:\n                     obj = brain[0].getObject()\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 949fd630..c66d9069 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -26,32 +26,42 @@ def __call__(self, validate_all=False):\n         # has no schema or something like that.\n         data = json_body(self.request)\n \n-        if \'layout\' in data:\n-            layout = data[\'layout\']\n+        if "layout" in data:\n+            layout = data["layout"]\n             self.context.setLayout(layout)\n \n         # OrderingMixin\n-        if \'ordering\' in data and \'subset_ids\' not in data[\'ordering\']:\n-            data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n+        if "ordering" in data and "subset_ids" not in data["ordering"]:\n+            data["ordering"]["subset_ids"] = self.context.contentIds()\n         self.handle_ordering(data)\n \n         # Volto Tiles on the Plone Site root faker\n-        if \'tiles\' in data:\n-            if not getattr(self.context, \'tiles\', False):\n-                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+        if "tiles" in data:\n+            if not getattr(self.context, "tiles", False):\n+                self.context.manage_addProperty(\n+                    "tiles", json.dumps(data["tiles"]), "string"\n+                )  # noqa\n             else:\n-                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+                self.context.manage_changeProperties(\n+                    tiles=json.dumps(data["tiles"])\n+                )  # noqa\n \n-        if \'tiles_layout\' in data:\n-            if not getattr(self.context, \'tiles_layout\', False):\n-                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+        if "tiles_layout" in data:\n+            if not getattr(self.context, "tiles_layout", False):\n+                self.context.manage_addProperty(\n+                    "tiles_layout", json.dumps(data["tiles_layout"]), "string"\n+                )  # noqa\n             else:\n-                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+                self.context.manage_changeProperties(\n+                    tiles_layout=json.dumps(data["tiles_layout"])\n+                )  # noqa\n \n-        if \'title\' in data:\n-            self.context.setTitle(data[\'title\'])\n+        if "title" in data:\n+            self.context.setTitle(data["title"])\n \n-        if \'description\' in data:\n-            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+        if "description" in data:\n+            self.context.manage_changeProperties(\n+                description=data["description"]\n+            )  # noqa\n \n         return self.context\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex d943f038..827614d5 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -20,7 +20,7 @@ def get_scales(context, field, width, height):\n     """\n     scales = {}\n     request = getRequest()\n-    images_view = getMultiAdapter((context, request), name=\'images\')\n+    images_view = getMultiAdapter((context, request), name="images")\n \n     for name, actual_width, actual_height in get_scale_infos():\n         # Try first with scale name\n@@ -29,28 +29,27 @@ def get_scales(context, field, width, height):\n             # Sometimes it fails, but we can create it\n             # using scale sizes\n             scale = images_view.scale(\n-                field.__name__, width=actual_width, height=actual_height)\n+                field.__name__, width=actual_width, height=actual_height\n+            )\n \n         url = scale.url\n         actual_width = scale.width\n         actual_height = scale.height\n \n         scales[name] = {\n-            u\'download\': url,\n-            u\'width\': actual_width,\n-            u\'height\': actual_height}\n+            u"download": url,\n+            u"width": actual_width,\n+            u"height": actual_height,\n+        }\n \n     return scales\n \n \n def get_original_image_url(context, fieldname, width, height):\n     request = getRequest()\n-    images_view = getMultiAdapter((context, request), name=\'images\')\n+    images_view = getMultiAdapter((context, request), name="images")\n     scale = images_view.scale(\n-        fieldname,\n-        width=width,\n-        height=height,\n-        direction=\'thumbnail\'\n+        fieldname, width=width, height=height, direction="thumbnail"\n     )\n \n     return scale.url\n@@ -85,22 +84,21 @@ def get_scale_infos():\n     """\n     if PLONE_5:\n         from plone.registry.interfaces import IRegistry\n+\n         registry = getUtility(IRegistry)\n         from Products.CMFPlone.interfaces import IImagingSchema\n-        imaging_settings = registry.forInterface(\n-            IImagingSchema,\n-            prefix=\'plone\'\n-        )\n+\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n         allowed_sizes = imaging_settings.allowed_sizes\n \n     else:\n         ptool = getUtility(IPropertiesTool)\n         image_properties = ptool.imaging_properties\n-        allowed_sizes = image_properties.getProperty(\'allowed_sizes\')\n+        allowed_sizes = image_properties.getProperty("allowed_sizes")\n \n     def split_scale_info(allowed_size):\n-        name, dims = allowed_size.split(\' \')\n-        width, height = list(map(int, dims.split(\':\')))\n+        name, dims = allowed_size.split(" ")\n+        width, height = list(map(int, dims.split(":")))\n         return name, width, height\n \n     return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 51202172..e6e72bfe 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -38,7 +38,7 @@ class IContextawareJsonCompatible(IJsonCompatible):\n     """Convert a value to a JSON compatible data structure, using a context.\n     """\n \n-    def __init__(value, context,):\n+    def __init__(value, context):\n         """Adapts value and a context\n         """\n \n@@ -97,7 +97,8 @@ class IZCatalogCompatibleQuery(Interface):\n \n     global_query_params = Attribute(\n         "A mapping of query-wide parameters (like \'sort_on\') to their data "\n-        "type. These need to be treated separately from indexes.")\n+        "type. These need to be treated separately from indexes."\n+    )\n \n     def __init__(context, request):\n         """Adapts context and request.\n@@ -127,10 +128,12 @@ class IIndexQueryParser(Interface):\n \n     query_value_type = Attribute(\n         "The data type of the query value for queries against this index. "\n-        "The query value may also be a sequence of values of that type.")\n+        "The query value may also be a sequence of values of that type."\n+    )\n \n     query_options = Attribute(\n-        "A mapping of query options this index type supports to their type.")\n+        "A mapping of query options this index type supports to their type."\n+    )\n \n     def __init__(index, context, request):\n         """Adapts a ZCatalog index, context and request.\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex f9c5ab25..7b457345 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -5,8 +5,7 @@\n from BTrees.OOBTree import OOBTree\n from Products.CMFCore.permissions import ManagePortal\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from Products.PluggableAuthService.interfaces.plugins import (\n-    IAuthenticationPlugin)\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin\n from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin\n@@ -22,7 +21,8 @@\n \n \n manage_addJWTAuthenticationPlugin = PageTemplateFile(\n-    "add_plugin", globals(), __name__="manage_addJWTAuthenticationPlugin")\n+    "add_plugin", globals(), __name__="manage_addJWTAuthenticationPlugin"\n+)\n \n \n def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n@@ -34,19 +34,16 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n     if REQUEST is not None:\n         REQUEST["RESPONSE"].redirect(\n             "%s/manage_workspace"\n-            "?manage_tabs_message=JWT+authentication+plugin+added." %\n-            self.absolute_url()\n+            "?manage_tabs_message=JWT+authentication+plugin+added."\n+            % self.absolute_url()\n         )\n \n \n-@implementer(\n-    IAuthenticationPlugin,\n-    IChallengePlugin,\n-    IExtractionPlugin,\n-)\n+@implementer(IAuthenticationPlugin, IChallengePlugin, IExtractionPlugin)\n class JWTAuthenticationPlugin(BasePlugin):\n     """Plone PAS plugin for authentication with JSON web tokens (JWT).\n     """\n+\n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n \n@@ -58,34 +55,30 @@ class JWTAuthenticationPlugin(BasePlugin):\n \n     # ZMI tab for configuration page\n     manage_options = (\n-        ({\'label\': \'Configuration\',\n-          \'action\': \'manage_config\'},) +\n-        BasePlugin.manage_options\n-    )\n-    security.declareProtected(ManagePortal, \'manage_config\')\n-    manage_config = PageTemplateFile(\'config\', globals(),\n-                                     __name__=\'manage_config\')\n+        {"label": "Configuration", "action": "manage_config"},\n+    ) + BasePlugin.manage_options\n+    security.declareProtected(ManagePortal, "manage_config")\n+    manage_config = PageTemplateFile("config", globals(), __name__="manage_config")\n \n     def __init__(self, id_, title=None):\n         self._setId(id_)\n         self.title = title\n \n-    security.declarePrivate(\'challenge\')\n+    security.declarePrivate("challenge")\n \n     # Initiate a challenge to the user to provide credentials.\n     def challenge(self, request, response, **kw):\n \n         realm = response.realm\n         if realm:\n-            response.setHeader(\'WWW-Authenticate\',\n-                               \'Bearer realm="%s"\' % realm)\n+            response.setHeader("WWW-Authenticate", \'Bearer realm="%s"\' % realm)\n         m = "You are not authorized to access this resource."\n \n         response.setBody(m, is_error=1)\n         response.setStatus(401)\n         return True\n \n-    security.declarePrivate(\'extractCredentials\')\n+    security.declarePrivate("extractCredentials")\n \n     # IExtractionPlugin implementation\n     # Extracts a JSON web token from the request.\n@@ -94,42 +87,42 @@ def extractCredentials(self, request):\n         auth = request._auth\n         if auth is None:\n             return None\n-        if auth[:7].lower() == \'bearer \':\n-            creds[\'token\'] = auth.split()[-1]\n+        if auth[:7].lower() == "bearer ":\n+            creds["token"] = auth.split()[-1]\n         else:\n             return None\n \n         return creds\n \n-    security.declarePrivate(\'authenticateCredentials\')\n+    security.declarePrivate("authenticateCredentials")\n \n     # IAuthenticationPlugin implementation\n     def authenticateCredentials(self, credentials):\n         # Ignore credentials that are not from our extractor\n-        extractor = credentials.get(\'extractor\')\n+        extractor = credentials.get("extractor")\n         if extractor != self.getId():\n             return None\n \n-        payload = self._decode_token(credentials[\'token\'])\n+        payload = self._decode_token(credentials["token"])\n         if not payload:\n             return None\n \n-        if \'sub\' not in payload:\n+        if "sub" not in payload:\n             return None\n \n-        userid = payload[\'sub\']\n+        userid = payload["sub"]\n         if six.PY2:\n-            userid = userid.encode(\'utf8\')\n+            userid = userid.encode("utf8")\n \n         if self.store_tokens:\n             if userid not in self._tokens:\n                 return None\n-            if credentials[\'token\'] not in self._tokens[userid]:\n+            if credentials["token"] not in self._tokens[userid]:\n                 return None\n \n         return (userid, userid)\n \n-    security.declareProtected(ManagePortal, \'manage_updateConfig\')\n+    security.declareProtected(ManagePortal, "manage_updateConfig")\n \n     @postonly\n     def manage_updateConfig(self, REQUEST):\n@@ -137,15 +130,16 @@ def manage_updateConfig(self, REQUEST):\n         """\n         response = REQUEST.response\n \n-        self.token_timeout = int(REQUEST.form.get(\'token_timeout\',\n-                                                  self.token_timeout))\n-        self.use_keyring = bool(REQUEST.form.get(\'use_keyring\', False))\n-        self.store_tokens = bool(REQUEST.form.get(\'store_tokens\', False))\n+        self.token_timeout = int(REQUEST.form.get("token_timeout", self.token_timeout))\n+        self.use_keyring = bool(REQUEST.form.get("use_keyring", False))\n+        self.store_tokens = bool(REQUEST.form.get("store_tokens", False))\n         if self.store_tokens and self._tokens is None:\n             self._tokens = OOBTree()\n \n-        response.redirect(\'%s/manage_config?manage_tabs_message=%s\' %\n-                          (self.absolute_url(), \'Configuration+updated.\'))\n+        response.redirect(\n+            "%s/manage_config?manage_tabs_message=%s"\n+            % (self.absolute_url(), "Configuration+updated.")\n+        )\n \n     def _decode_token(self, token, verify=True):\n         if self.use_keyring:\n@@ -153,20 +147,17 @@ def _decode_token(self, token, verify=True):\n             for secret in manager[u"_system"]:\n                 if secret is None:\n                     continue\n-                payload = self._jwt_decode(\n-                    token, secret + self._path(), verify=verify)\n+                payload = self._jwt_decode(token, secret + self._path(), verify=verify)\n                 if payload is not None:\n                     return payload\n         else:\n-            return self._jwt_decode(\n-                token, self._secret + self._path(), verify=verify)\n+            return self._jwt_decode(token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n         if isinstance(token, six.text_type):\n-            token = token.encode(\'utf-8\')\n+            token = token.encode("utf-8")\n         try:\n-            return jwt.decode(\n-                token, secret, verify=verify, algorithms=[\'HS256\'])\n+            return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n         except jwt.InvalidTokenError:\n             return None\n \n@@ -179,29 +170,29 @@ def _signing_secret(self):\n         return self._secret + self._path()\n \n     def _path(self):\n-        return \'/\'.join(self.getPhysicalPath())\n+        return "/".join(self.getPhysicalPath())\n \n     def delete_token(self, token):\n         payload = self._decode_token(token, verify=False)\n-        if \'sub\' not in payload:\n+        if "sub" not in payload:\n             return False\n-        userid = payload[\'sub\']\n+        userid = payload["sub"]\n         if userid in self._tokens and token in self._tokens[userid]:\n             del self._tokens[userid][token]\n             return True\n \n     def create_token(self, userid, timeout=None, data=None):\n         payload = {}\n-        payload[\'sub\'] = userid\n+        payload["sub"] = userid\n         if timeout is None:\n             timeout = self.token_timeout\n         if timeout:\n-            payload[\'exp\'] = datetime.utcnow() + timedelta(seconds=timeout)\n+            payload["exp"] = datetime.utcnow() + timedelta(seconds=timeout)\n         if data is not None:\n             payload.update(data)\n-        token = jwt.encode(payload, self._signing_secret(), algorithm=\'HS256\')\n+        token = jwt.encode(payload, self._signing_secret(), algorithm="HS256")\n         if not six.PY2:\n-            token = token.decode(\'utf-8\')\n+            token = token.decode("utf-8")\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/permissions.py b/src/plone/restapi/permissions.py\nindex 79d4b580..db979048 100644\n--- a/src/plone/restapi/permissions.py\n+++ b/src/plone/restapi/permissions.py\n@@ -3,4 +3,4 @@\n # # Required to use the REST API at all, in addition to service specific\n # permissions. Granted to Anonymous (i.e. everyone) by default via rolemap.xml\n \n-UseRESTAPI = \'plone.restapi: Use REST API\'\n+UseRESTAPI = "plone.restapi: Use REST API"\ndiff --git a/src/plone/restapi/search/date_recurring_index.py b/src/plone/restapi/search/date_recurring_index.py\nindex c563e4b5..bb40b221 100644\n--- a/src/plone/restapi/search/date_recurring_index.py\n+++ b/src/plone/restapi/search/date_recurring_index.py\n@@ -13,6 +13,4 @@\n class DateRecurringIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = DateTime\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex a2b3f955..a1d969b9 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -13,11 +13,12 @@ class SearchHandler(object):\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def _parse_query(self, query):\n         catalog_compatible_query = getMultiAdapter(\n-            (self.context, self.request), IZCatalogCompatibleQuery)(query)\n+            (self.context, self.request), IZCatalogCompatibleQuery\n+        )(query)\n         return catalog_compatible_query\n \n     def _constrain_query_by_path(self, query):\n@@ -30,53 +31,50 @@ def _constrain_query_by_path(self, query):\n         - \'path\' supplied as a string\n         - \'path\' supplied as a complete query dict\n         """\n-        if \'path\' not in query:\n-            query[\'path\'] = {}\n+        if "path" not in query:\n+            query["path"] = {}\n \n-        if (\n-            isinstance(query[\'path\'], str)\n-            or isinstance(query[\'path\'], list)\n-        ):\n-            query[\'path\'] = {\'query\': query[\'path\']}\n+        if isinstance(query["path"], str) or isinstance(query["path"], list):\n+            query["path"] = {"query": query["path"]}\n \n         # If this is accessed through a VHM the client does not know\n         # the complete physical path of an object. But the path index\n         # indexes the complete physical path. Complete the path.\n-        vhm_physical_path = self.request.get(\'VirtualRootPhysicalPath\')\n+        vhm_physical_path = self.request.get("VirtualRootPhysicalPath")\n         if vhm_physical_path:\n-            path = query[\'path\'].get(\'query\')\n+            path = query["path"].get("query")\n             if path:\n                 if isinstance(path, str):\n-                    path = path.lstrip(\'/\')\n-                    full_path = \'/\'.join(vhm_physical_path + (path,))\n-                    query[\'path\'][\'query\'] = full_path\n+                    path = path.lstrip("/")\n+                    full_path = "/".join(vhm_physical_path + (path,))\n+                    query["path"]["query"] = full_path\n                 if isinstance(path, list):\n                     full_paths = []\n                     for p in path:\n-                        p = p.lstrip(\'/\')\n-                        full_path = \'/\'.join(vhm_physical_path + (p,))\n+                        p = p.lstrip("/")\n+                        full_path = "/".join(vhm_physical_path + (p,))\n                         full_paths.append(full_path)\n-                    query[\'path\'][\'query\'] = full_paths\n+                    query["path"]["query"] = full_paths\n \n-        if isinstance(query[\'path\'], dict) and \'query\' not in query[\'path\']:\n+        if isinstance(query["path"], dict) and "query" not in query["path"]:\n             # We either had no \'path\' parameter at all, or an incomplete\n             # \'path\' query dict (with just ExtendedPathIndex options (like\n             # \'depth\'), but no actual path \'query\' in it).\n             #\n             # In either case, we\'ll prefill with the context\'s path\n-            path = \'/\'.join(self.context.getPhysicalPath())\n-            query[\'path\'][\'query\'] = path\n+            path = "/".join(self.context.getPhysicalPath())\n+            query["path"]["query"] = path\n \n     def search(self, query=None):\n         if query is None:\n             query = {}\n-        if \'fullobjects\' in query:\n+        if "fullobjects" in query:\n             fullobjects = True\n-            del query[\'fullobjects\']\n+            del query["fullobjects"]\n         else:\n             fullobjects = False\n \n-        metadata_fields = query.pop(\'metadata_fields\', [])\n+        metadata_fields = query.pop("metadata_fields", [])\n         if not isinstance(metadata_fields, list):\n             metadata_fields = [metadata_fields]\n \n@@ -84,9 +82,8 @@ def search(self, query=None):\n         query = self._parse_query(query)\n \n         lazy_resultset = self.catalog.searchResults(query)\n-        results = getMultiAdapter(\n-            (lazy_resultset, self.request),\n-            ISerializeToJson)(\n-                metadata_fields=metadata_fields, fullobjects=fullobjects)\n+        results = getMultiAdapter((lazy_resultset, self.request), ISerializeToJson)(\n+            metadata_fields=metadata_fields, fullobjects=fullobjects\n+        )\n \n         return results\ndiff --git a/src/plone/restapi/search/query.py b/src/plone/restapi/search/query.py\nindex 0282f67d..6553f6b7 100644\n--- a/src/plone/restapi/search/query.py\n+++ b/src/plone/restapi/search/query.py\n@@ -69,17 +69,17 @@ class ZCatalogCompatibleQueryAdapter(object):\n     """\n \n     global_query_params = {\n-        \'sort_on\': str,\n-        \'sort_order\': str,\n-        \'sort_limit\': int,\n-        \'b_start\': int,\n-        \'b_size\': int,\n+        "sort_on": str,\n+        "sort_order": str,\n+        "sort_limit": int,\n+        "b_start": int,\n+        "b_size": int,\n     }\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def get_index(self, name):\n         return self.catalog._catalog.indexes.get(name)\n@@ -104,7 +104,8 @@ def __call__(self, query):\n                 continue\n \n             query_opts_parser = getMultiAdapter(\n-                (index, self.context, self.request), IIndexQueryParser)\n+                (index, self.context, self.request), IIndexQueryParser\n+            )\n \n             if query_opts_parser is not None:\n                 idx_query = query_opts_parser.parse(idx_query)\n@@ -140,8 +141,9 @@ def parse_query_value(self, query_value):\n \n         except (ValueError, DTSyntaxError):\n             raise QueryParsingError(\n-                "Query value %r for index %s must be of type %r" % (\n-                    query_value, self.index, self.query_value_type))\n+                "Query value %r for index %s must be of type %r"\n+                % (query_value, self.index, self.query_value_type)\n+            )\n         return self.query_value_type(query_value)\n \n     def parse_simple_query(self, idx_query):\n@@ -154,11 +156,12 @@ def parse_complex_query(self, idx_query):\n         parsed_query = {}\n \n         try:\n-            qv = idx_query.pop(\'query\')\n-            parsed_query[\'query\'] = self.parse_simple_query(qv)\n+            qv = idx_query.pop("query")\n+            parsed_query["query"] = self.parse_simple_query(qv)\n         except KeyError:\n             raise QueryParsingError(\n-                "Query for index %r is missing a \'query\' key!" % self.index)\n+                "Query for index %r is missing a \'query\' key!" % self.index\n+            )\n \n         for opt_key, opt_value in idx_query.items():\n             if opt_key in self.query_options:\n@@ -168,11 +171,12 @@ def parse_complex_query(self, idx_query):\n                 except ValueError:\n                     raise QueryParsingError(\n                         "Value %r for query option %r (index %r) could not be"\n-                        " casted to %r" % (\n-                            opt_value, opt_key, self.index, opt_type))\n+                        " casted to %r" % (opt_value, opt_key, self.index, opt_type)\n+                    )\n             else:\n-                log.warn("Unrecognized query option %r for index %r" % (\n-                    opt_key, self.index))\n+                log.warn(\n+                    "Unrecognized query option %r for index %r" % (opt_key, self.index)\n+                )\n                 # Pass along unknown option without modification\n                 parsed_query[opt_key] = opt_value\n \n@@ -192,10 +196,7 @@ class ZCTextIndexQueryParser(BaseIndexQueryParser):\n class KeywordIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = ANY_TYPE\n-    query_options = {\n-        \'operator\': str,\n-        \'range\': str,\n-    }\n+    query_options = {"operator": str, "range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -206,10 +207,11 @@ class BooleanIndexQueryParser(BaseIndexQueryParser):\n     query_options = {}\n \n     def parse_query_value(self, query_value):\n-        if not str(query_value).lower() in (\'true\', \'false\', \'1\', \'0\'):\n+        if not str(query_value).lower() in ("true", "false", "1", "0"):\n             raise QueryParsingError(\n-                \'Could not parse query value %r as boolean\' % query_value)\n-        return str(query_value).lower() in (\'true\', \'1\')\n+                "Could not parse query value %r as boolean" % query_value\n+            )\n+        return str(query_value).lower() in ("true", "1")\n \n \n @implementer(IIndexQueryParser)\n@@ -217,9 +219,7 @@ def parse_query_value(self, query_value):\n class FieldIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = ANY_TYPE\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -228,11 +228,11 @@ class ExtendedPathIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = str\n     query_options = {\n-        \'level\': int,\n-        \'operator\': str,\n-        \'depth\': int,\n-        \'navtree\': bool,\n-        \'navtree_start\': int,\n+        "level": int,\n+        "operator": str,\n+        "depth": int,\n+        "navtree": bool,\n+        "navtree_start": int,\n     }\n \n \n@@ -241,9 +241,7 @@ class ExtendedPathIndexQueryParser(BaseIndexQueryParser):\n class DateIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = DateTime\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\n \n \n @implementer(IIndexQueryParser)\n@@ -259,6 +257,4 @@ class DateRangeIndexQueryParser(BaseIndexQueryParser):\n class UUIDIndexQueryParser(BaseIndexQueryParser):\n \n     query_value_type = str\n-    query_options = {\n-        \'range\': str,\n-    }\n+    query_options = {"range": str}\ndiff --git a/src/plone/restapi/search/utils.py b/src/plone/restapi/search/utils.py\nindex 36a08971..4675f1ea 100644\n--- a/src/plone/restapi/search/utils.py\n+++ b/src/plone/restapi/search/utils.py\n@@ -24,13 +24,14 @@ def unflatten_dotted_dict(dct):\n            \'foo\': 3},\n      \'bar\': 4}\n     """\n+\n     def create_or_get(dct, key):\n         return dct.setdefault(key, {})\n \n     result = {}\n \n     for key, value in dct.items():\n-        key_segments = key.split(\'.\')\n+        key_segments = key.split(".")\n         # Create nested dicts from parent keys, if any\n         inner = reduce(create_or_get, [result] + key_segments[:-1])\n         # Assign value to terminal key\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex 0540cac1..e7fa0fcf 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -13,23 +13,22 @@\n @implementer(ISerializeToJson)\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n-\n     def __call__(self, version=None, include_items=True):\n-        collection_metadata = super(\n-            SerializeCollectionToJson, self).__call__(version=version)\n+        collection_metadata = super(SerializeCollectionToJson, self).__call__(\n+            version=version\n+        )\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n         results = collection_metadata\n-        if not self.request.form.get(\'fullobjects\'):\n-            results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        if not self.request.form.get("fullobjects"):\n+            results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n-            getMultiAdapter(\n-                (brain, self.request), ISerializeToJsonSummary)()\n+        results["items"] = [\n+            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\n         return results\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex b493d9c0..cb659f3f 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -20,35 +20,35 @@\n @implementer(ISerializeToJson)\n @adapter(IBaseObject, Interface)\n class SerializeToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def getVersion(self, version):\n-        if version == \'current\':\n+        if version == "current":\n             return self.context\n         else:\n             repo_tool = getToolByName(self.context, "portal_repository")\n             return repo_tool.retrieve(self.context, int(version)).object\n \n     def __call__(self, version=None, include_items=False):\n-        version = \'current\' if version is None else version\n+        version = "current" if version is None else version\n \n         obj = self.getVersion(version)\n         parent = aq_parent(aq_inner(obj))\n         parent_summary = getMultiAdapter(\n-            (parent, self.request), ISerializeToJsonSummary)()\n+            (parent, self.request), ISerializeToJsonSummary\n+        )()\n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': obj.absolute_url(),\n-            \'id\': obj.id,\n-            \'@type\': obj.portal_type,\n-            \'parent\': parent_summary,\n-            \'review_state\': self._get_workflow_state(obj),\n-            \'UID\': obj.UID(),\n-            \'layout\': self.context.getLayout(),\n-            \'is_folderish\': False\n+            "@id": obj.absolute_url(),\n+            "id": obj.id,\n+            "@type": obj.portal_type,\n+            "parent": parent_summary,\n+            "review_state": self._get_workflow_state(obj),\n+            "UID": obj.UID(),\n+            "layout": self.context.getLayout(),\n+            "is_folderish": False,\n         }\n \n         # Insert expandable elements\n@@ -56,72 +56,67 @@ def __call__(self, version=None, include_items=False):\n \n         for field in obj.Schema().fields():\n \n-            if \'r\' not in field.mode or not field.checkPermission(\'r\', obj):  # noqa: E501\n+            if "r" not in field.mode or not field.checkPermission(\n+                "r", obj\n+            ):  # noqa: E501\n                 continue\n \n             name = field.getName()\n \n             serializer = queryMultiAdapter(\n-                (field, self.context, self.request),\n-                IFieldSerializer)\n+                (field, self.context, self.request), IFieldSerializer\n+            )\n             if serializer is not None:\n                 result[name] = serializer()\n \n         return result\n \n     def _get_workflow_state(self, obj):\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wftool.getInfoFor(\n-            ob=obj, name=\'review_state\', default=None)\n+        wftool = getToolByName(self.context, "portal_workflow")\n+        review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n \n @implementer(ISerializeToJson)\n @adapter(IBaseFolder, Interface)\n class SerializeFolderToJson(SerializeToJson):\n-\n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(\n-            version=version\n-        )\n+        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n \n-        folder_metadata.update({\'is_folderish\': True})\n+        folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\n-            \'include_items\', include_items)\n+        include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\n \n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(query)\n \n             batch = HypermediaBatch(self.request, brains)\n \n-            if not self.request.form.get(\'fullobjects\'):\n-                result[\'@id\'] = batch.canonical_url\n-            result[\'items_total\'] = batch.items_total\n+            if not self.request.form.get("fullobjects"):\n+                result["@id"] = batch.canonical_url\n+            result["items_total"] = batch.items_total\n             if batch.links:\n-                result[\'batching\'] = batch.links\n+                result["batching"] = batch.links\n \n-            if \'fullobjects\' in list(self.request.form):\n-                result[\'items\'] = getMultiAdapter(\n-                    (brains, self.request),\n-                    ISerializeToJson\n-                )(fullobjects=True)[\'items\']\n+            if "fullobjects" in list(self.request.form):\n+                result["items"] = getMultiAdapter(\n+                    (brains, self.request), ISerializeToJson\n+                )(fullobjects=True)["items"]\n             else:\n-                result[\'items\'] = [\n-                    getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJsonSummary\n-                    )()\n+                result["items"] = [\n+                    getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n                     for brain in batch\n                 ]\n         return result\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex eed63d04..9c12d1f9 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -29,7 +29,6 @@\n @adapter(IField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class DefaultFieldSerializer(object):\n-\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -43,16 +42,15 @@ def __call__(self):\n @adapter(IFileField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class FileFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@download\',\n-                        self.field.getName()))\n+        url = "/".join(\n+            (self.context.absolute_url(), "@@download", self.field.getName())\n+        )\n         result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.getContentType(self.context),\n-            \'size\': self.field.get_size(self.context),\n-            \'download\': url\n+            "filename": self.field.getFilename(self.context),\n+            "content-type": self.field.getContentType(self.context),\n+            "size": self.field.get_size(self.context),\n+            "download": url,\n         }\n         return json_compatible(result)\n \n@@ -60,40 +58,35 @@ def __call__(self):\n @adapter(ITextField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class TextFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n-        mimetypes_registry = getToolByName(\n-            self.context, \'mimetypes_registry\')\n+        mimetypes_registry = getToolByName(self.context, "mimetypes_registry")\n         data = super(TextFieldSerializer, self).__call__()\n         return {\n-            \'content-type\': json_compatible(\n-                mimetypes_registry(data)[2].normalized()),\n-            \'data\': data\n+            "content-type": json_compatible(mimetypes_registry(data)[2].normalized()),\n+            "data": data,\n         }\n \n \n @adapter(IImageField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ImageFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n             return None\n \n         width, height = image.width, image.height\n-        url = get_original_image_url(\n-            self.context, self.field.__name__, width, height)\n+        url = get_original_image_url(self.context, self.field.__name__, width, height)\n \n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n-            \'filename\': self.field.getFilename(self.context),\n-            \'content-type\': self.field.get(self.context).getContentType(),\n-            \'size\': self.field.get(self.context).get_size(),\n-            \'download\': url,\n-            \'width\': width,\n-            \'height\': height,\n-            \'scales\': scales,\n+            "filename": self.field.getFilename(self.context),\n+            "content-type": self.field.get(self.context).getContentType(),\n+            "size": self.field.get(self.context).get_size(),\n+            "download": url,\n+            "width": width,\n+            "height": height,\n+            "scales": scales,\n         }\n         return json_compatible(result)\n \n@@ -113,7 +106,6 @@ class BlobImageFieldSerializer(ImageFieldSerializer):\n @adapter(IReferenceField, IBaseObject, Interface)\n @implementer(IFieldSerializer)\n class ReferenceFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         accessor = self.field.getAccessor(self.context)\n         refs = accessor()\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex e1ec1ec8..6147491d 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -13,7 +13,7 @@\n from zope.interface import Interface\n \n \n-BRAIN_METHODS = [\'getPath\', \'getURL\']\n+BRAIN_METHODS = ["getPath", "getURL"]\n \n \n @implementer(ISerializeToJson)\n@@ -28,20 +28,19 @@ def __init__(self, brain, request):\n         self.request = request\n \n     def _get_metadata_to_include(self, metadata_fields):\n-        if metadata_fields and \'_all\' in metadata_fields:\n+        if metadata_fields and "_all" in metadata_fields:\n             site = getSite()\n-            catalog = getToolByName(site, \'portal_catalog\')\n+            catalog = getToolByName(site, "portal_catalog")\n             metadata_attrs = list(catalog.schema()) + BRAIN_METHODS\n             return metadata_attrs\n \n         return metadata_fields\n \n-    def __call__(self, metadata_fields=(\'_all\',)):\n+    def __call__(self, metadata_fields=("_all",)):\n         metadata_to_include = self._get_metadata_to_include(metadata_fields)\n \n         # Start with a summary representation as our base\n-        result = getMultiAdapter(\n-            (self.brain, self.request), ISerializeToJsonSummary)()\n+        result = getMultiAdapter((self.brain, self.request), ISerializeToJsonSummary)()\n \n         for attr in metadata_to_include:\n             value = getattr(self.brain, attr, None)\n@@ -75,29 +74,30 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n         batch = HypermediaBatch(self.request, self.lazy_resultset)\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         links = batch.links\n         if links:\n-            results[\'batching\'] = links\n+            results["batching"] = links\n \n-        results[\'items\'] = []\n+        results["items"] = []\n         for brain in batch:\n             if fullobjects:\n                 result = getMultiAdapter(\n-                    (brain.getObject(), self.request), ISerializeToJson)(\n-                        include_items=False)\n+                    (brain.getObject(), self.request), ISerializeToJson\n+                )(include_items=False)\n             else:\n                 result = getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary)()\n+                    (brain, self.request), ISerializeToJsonSummary\n+                )()\n \n                 # Merge additional metadata into the summary we already have\n                 if metadata_fields:\n-                    metadata = getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJson)(metadata_fields=metadata_fields)\n+                    metadata = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+                        metadata_fields=metadata_fields\n+                    )\n                     result.update(metadata)\n \n-            results[\'items\'].append(result)\n+            results["items"].append(result)\n \n         return results\ndiff --git a/src/plone/restapi/serializer/collection.py b/src/plone/restapi/serializer/collection.py\nindex e6145a5e..fd514276 100644\n--- a/src/plone/restapi/serializer/collection.py\n+++ b/src/plone/restapi/serializer/collection.py\n@@ -13,22 +13,21 @@\n @implementer(ISerializeToJson)\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n-\n     def __call__(self, version=None, include_items=True):\n         collection_metadata = super(SerializeCollectionToJson, self).__call__(\n-            version=version,\n+            version=version\n         )\n         results = self.context.results(batch=False)\n         batch = HypermediaBatch(self.request, results)\n \n         results = collection_metadata\n-        if not self.request.form.get(\'fullobjects\'):\n-            results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        if not self.request.form.get("fullobjects"):\n+            results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n+        results["items"] = [\n             getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\ndiff --git a/src/plone/restapi/serializer/controlpanels.py b/src/plone/restapi/serializer/controlpanels.py\nindex 22ba4ea8..5a95eb3f 100644\n--- a/src/plone/restapi/serializer/controlpanels.py\n+++ b/src/plone/restapi/serializer/controlpanels.py\n@@ -14,25 +14,24 @@\n \n import zope.schema\n \n-SERVICE_ID = \'@controlpanels\'\n+SERVICE_ID = "@controlpanels"\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(IControlpanel)\n class ControlpanelSummarySerializeToJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n \n     def __call__(self):\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n+            "@id": "{}/{}/{}".format(\n                 self.controlpanel.context.absolute_url(),\n                 SERVICE_ID,\n-                self.controlpanel.__name__\n+                self.controlpanel.__name__,\n             ),\n-            \'title\': self.controlpanel.title,\n-            \'group\': self.controlpanel.group,\n+            "title": self.controlpanel.title,\n+            "group": self.controlpanel.group,\n         }\n \n \n@@ -44,9 +43,7 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request):\n     fieldsets = utils.get_fieldsets(context, request, schema)\n \n     # Build JSON schema properties\n-    properties = utils.get_jsonschema_properties(\n-        context, request, fieldsets\n-    )\n+    properties = utils.get_jsonschema_properties(context, request, fieldsets)\n \n     # Determine required fields\n     required = []\n@@ -57,20 +54,19 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request):\n     # Include field modes\n     for field in utils.iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'properties\': properties,\n-        \'required\': required,\n-        \'fieldsets\': utils.get_fieldset_infos(fieldsets),\n+        "type": "object",\n+        "properties": properties,\n+        "required": required,\n+        "fieldsets": utils.get_fieldset_infos(fieldsets),\n     }\n \n \n @implementer(ISerializeToJson)\n @adapter(IControlpanel)\n class ControlpanelSerializeToJson(object):\n-\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\n@@ -80,14 +76,10 @@ def __init__(self, controlpanel):\n \n     def __call__(self):\n         json_schema = get_jsonschema_for_controlpanel(\n-            self.controlpanel,\n-            self.controlpanel.context,\n-            self.controlpanel.request\n+            self.controlpanel, self.controlpanel.context, self.controlpanel.request\n         )\n \n-        proxy = self.registry.forInterface(\n-            self.schema, prefix=self.schema_prefix\n-        )\n+        proxy = self.registry.forInterface(self.schema, prefix=self.schema_prefix)\n \n         # Temporarily provide IDexterityContent, so we can use DX field\n         # serializers\n@@ -96,8 +88,7 @@ def __call__(self):\n         json_data = {}\n         for name, field in zope.schema.getFields(self.schema).items():\n             serializer = queryMultiAdapter(\n-                (field, proxy, self.controlpanel.request),\n-                IFieldSerializer\n+                (field, proxy, self.controlpanel.request), IFieldSerializer\n             )\n             if serializer:\n                 value = serializer()\n@@ -109,13 +100,13 @@ def __call__(self):\n \n         # JSON schema\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n+            "@id": "{}/{}/{}".format(\n                 self.controlpanel.context.absolute_url(),\n                 SERVICE_ID,\n-                self.controlpanel.__name__\n+                self.controlpanel.__name__,\n             ),\n-            \'title\': self.controlpanel.title,\n-            \'group\': self.controlpanel.group,\n-            \'schema\': json_schema,\n-            \'data\': json_data,\n+            "title": self.controlpanel.title,\n+            "group": self.controlpanel.group,\n+            "schema": json_schema,\n+            "data": json_data,\n         }\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 83529679..f44af42b 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -24,6 +24,7 @@\n import six\n from six.moves import map\n from six.moves import zip\n+\n # import re\n \n \n@@ -31,11 +32,11 @@ def datetimelike_to_iso(value):\n     if isinstance(value, DateTime):\n         value = value.asdatetime()\n \n-    if getattr(value, \'tzinfo\', None):\n+    if getattr(value, "tzinfo", None):\n         # timezone aware date/time objects are converted to UTC first.\n-        utc = pytz.timezone(\'UTC\')\n+        utc = pytz.timezone("UTC")\n         value = value.astimezone(utc)\n-    if getattr(value, \'microsecond\', False):\n+    if getattr(value, "microsecond", False):\n         # Microseconds are normally not used in Plone\n         value = value.replace(microsecond=0)\n     iso = value.isoformat()\n@@ -62,10 +63,7 @@ def json_compatible(value, context=None):\n     used for converting values that may be None.\n     """\n     if context is not None:\n-        adapter = queryMultiAdapter(\n-            (value, context),\n-            IContextawareJsonCompatible\n-        )\n+        adapter = queryMultiAdapter((value, context), IContextawareJsonCompatible)\n         if adapter:\n             return adapter()\n     else:\n@@ -82,14 +80,15 @@ def default_converter(value):\n         return value\n \n     raise TypeError(\n-        \'No converter for making\'\n-        \' {0!r} ({1}) JSON compatible.\'.format(value, type(value)))\n+        "No converter for making"\n+        " {0!r} ({1}) JSON compatible.".format(value, type(value))\n+    )\n \n \n @adapter(bytes)\n @implementer(IJsonCompatible)\n def bytes_converter(value):\n-    return safe_unicode(value, \'utf-8\')\n+    return safe_unicode(value, "utf-8")\n \n \n @adapter(list)\n@@ -181,9 +180,9 @@ def __call__(self):\n         value = self.value\n         output = value.output_relative_to(self.context)\n         return {\n-            u\'data\': json_compatible(output),\n-            u\'content-type\': json_compatible(value.mimeType),\n-            u\'encoding\': json_compatible(value.encoding),\n+            u"data": json_compatible(output),\n+            u"content-type": json_compatible(value.mimeType),\n+            u"encoding": json_compatible(value.encoding),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 22c8176e..24383be7 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -18,7 +18,6 @@\n @implementer(ISerializeToJson)\n @adapter(IConversation, IRequest)\n class ConversationSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -29,17 +28,14 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, results)\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n+        results["@id"] = batch.canonical_url\n \n-        results[\'items_total\'] = batch.items_total\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n-        results[\'items\'] = [\n-            getMultiAdapter(\n-                (thread[\'comment\'], self.request),\n-                ISerializeToJson\n-            )()\n+        results["items"] = [\n+            getMultiAdapter((thread["comment"], self.request), ISerializeToJson)()\n             for thread in batch\n         ]\n \n@@ -49,20 +45,17 @@ def __call__(self):\n @implementer(ISerializeToJson)\n @adapter(IComment, IRequest)\n class CommentSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, include_items=True):\n         content_url = self.context.__parent__.__parent__.absolute_url()\n-        comments_url = \'{}/@comments\'.format(content_url)\n-        url = \'{}/{}\'.format(comments_url, self.context.id)\n+        comments_url = "{}/@comments".format(content_url)\n+        url = "{}/{}".format(comments_url, self.context.id)\n \n         if self.context.in_reply_to:\n-            parent_url = \'{}/{}\'.format(\n-                comments_url, self.context.in_reply_to\n-            )\n+            parent_url = "{}/{}".format(comments_url, self.context.in_reply_to)\n             in_reply_to = str(self.context.in_reply_to)\n         else:\n             parent_url = None\n@@ -72,20 +65,19 @@ def __call__(self, include_items=True):\n         delete_own = doc_allowed and can_delete_own(self.context)\n \n         return {\n-            \'@id\': url,\n-            \'@type\': self.context.portal_type,\n-            \'@parent\': parent_url,\n-            \'comment_id\': str(self.context.id),\n-            \'in_reply_to\': in_reply_to,\n-            \'text\': {\n-                \'data\': self.context.text,\n-                \'mime-type\': self.context.mime_type\n-            },\n-            \'user_notification\': self.context.user_notification,\n-            \'author_username\': self.context.author_username,\n-            \'author_name\': self.context.author_name,\n-            \'creation_date\': IJsonCompatible(self.context.creation_date),\n-            \'modification_date\': IJsonCompatible(self.context.modification_date),  # noqa\n-            \'is_editable\': edit_comment_allowed() and can_edit(self.context),\n-            \'is_deletable\': can_delete(self.context) or delete_own\n+            "@id": url,\n+            "@type": self.context.portal_type,\n+            "@parent": parent_url,\n+            "comment_id": str(self.context.id),\n+            "in_reply_to": in_reply_to,\n+            "text": {"data": self.context.text, "mime-type": self.context.mime_type},\n+            "user_notification": self.context.user_notification,\n+            "author_username": self.context.author_username,\n+            "author_name": self.context.author_name,\n+            "creation_date": IJsonCompatible(self.context.creation_date),\n+            "modification_date": IJsonCompatible(\n+                self.context.modification_date\n+            ),  # noqa\n+            "is_editable": edit_comment_allowed() and can_edit(self.context),\n+            "is_deletable": can_delete(self.context) or delete_own,\n         }\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex ad8eae75..b12a4b4f 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -28,7 +28,6 @@\n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n class SerializeToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -36,32 +35,33 @@ def __init__(self, context, request):\n         self.permission_cache = {}\n \n     def getVersion(self, version):\n-        if version == \'current\':\n+        if version == "current":\n             return self.context\n         else:\n             repo_tool = getToolByName(self.context, "portal_repository")\n             return repo_tool.retrieve(self.context, int(version)).object\n \n     def __call__(self, version=None, include_items=True):\n-        version = \'current\' if version is None else version\n+        version = "current" if version is None else version\n \n         obj = self.getVersion(version)\n         parent = aq_parent(aq_inner(obj))\n         parent_summary = getMultiAdapter(\n-            (parent, self.request), ISerializeToJsonSummary)()\n+            (parent, self.request), ISerializeToJsonSummary\n+        )()\n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': obj.absolute_url(),\n-            \'id\': obj.id,\n-            \'@type\': obj.portal_type,\n-            \'parent\': parent_summary,\n-            \'created\': json_compatible(obj.created()),\n-            \'modified\': json_compatible(obj.modified()),\n-            \'review_state\': self._get_workflow_state(obj),\n-            \'UID\': obj.UID(),\n-            \'version\': version,\n-            \'layout\': self.context.getLayout(),\n-            \'is_folderish\': False\n+            "@id": obj.absolute_url(),\n+            "id": obj.id,\n+            "@type": obj.portal_type,\n+            "parent": parent_summary,\n+            "created": json_compatible(obj.created()),\n+            "modified": json_compatible(obj.modified()),\n+            "review_state": self._get_workflow_state(obj),\n+            "UID": obj.UID(),\n+            "version": version,\n+            "layout": self.context.getLayout(),\n+            "is_folderish": False,\n         }\n \n         # Insert expandable elements\n@@ -70,8 +70,7 @@ def __call__(self, version=None, include_items=True):\n         # Insert field values\n         for schema in iterSchemata(self.context):\n \n-            read_permissions = mergedTaggedValueDict(\n-                schema, READ_PERMISSIONS_KEY)\n+            read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n \n@@ -79,20 +78,20 @@ def __call__(self, version=None, include_items=True):\n                     continue\n \n                 serializer = queryMultiAdapter(\n-                    (field, obj, self.request),\n-                    IFieldSerializer)\n+                    (field, obj, self.request), IFieldSerializer\n+                )\n                 value = serializer()\n                 result[json_compatible(name)] = value\n \n-        result[\'allow_discussion\'] = getMultiAdapter(\n-            (self.context, self.request), name=\'conversation_view\').enabled()\n+        result["allow_discussion"] = getMultiAdapter(\n+            (self.context, self.request), name="conversation_view"\n+        ).enabled()\n \n         return result\n \n     def _get_workflow_state(self, obj):\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-        review_state = wftool.getInfoFor(\n-            ob=obj, name=\'review_state\', default=None)\n+        wftool = getToolByName(self.context, "portal_workflow")\n+        review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n     def check_permission(self, permission_name, obj):\n@@ -100,62 +99,57 @@ def check_permission(self, permission_name, obj):\n             return True\n \n         if permission_name not in self.permission_cache:\n-            permission = queryUtility(IPermission,\n-                                      name=permission_name)\n+            permission = queryUtility(IPermission, name=permission_name)\n             if permission is None:\n                 self.permission_cache[permission_name] = True\n             else:\n                 sm = getSecurityManager()\n                 self.permission_cache[permission_name] = bool(\n-                    sm.checkPermission(permission.title, obj))\n+                    sm.checkPermission(permission.title, obj)\n+                )\n         return self.permission_cache[permission_name]\n \n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContainer, Interface)\n class SerializeFolderToJson(SerializeToJson):\n-\n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(\n-            version=version\n-        )\n+        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n \n-        folder_metadata.update({\'is_folderish\': True})\n+        folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n \n-        include_items = self.request.form.get(\'include_items\', include_items)\n+        include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\n         if include_items:\n             query = self._build_query()\n \n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+            catalog = getToolByName(self.context, "portal_catalog")\n             brains = catalog(query)\n \n             batch = HypermediaBatch(self.request, brains)\n \n-            if \'fullobjects\' not in self.request.form:\n-                result[\'@id\'] = batch.canonical_url\n-            result[\'items_total\'] = batch.items_total\n+            if "fullobjects" not in self.request.form:\n+                result["@id"] = batch.canonical_url\n+            result["items_total"] = batch.items_total\n             if batch.links:\n-                result[\'batching\'] = batch.links\n+                result["batching"] = batch.links\n \n-            if \'fullobjects\' in list(self.request.form):\n-                result[\'items\'] = getMultiAdapter(\n-                    (brains, self.request),\n-                    ISerializeToJson\n-                )(fullobjects=True)[\'items\']\n+            if "fullobjects" in list(self.request.form):\n+                result["items"] = getMultiAdapter(\n+                    (brains, self.request), ISerializeToJson\n+                )(fullobjects=True)["items"]\n             else:\n-                result[\'items\'] = [\n-                    getMultiAdapter(\n-                        (brain, self.request),\n-                        ISerializeToJsonSummary\n-                    )()\n+                result["items"] = [\n+                    getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n                     for brain in batch\n                 ]\n         return result\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex bc3a5ded..98868216 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -19,7 +19,6 @@\n @adapter(IField, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class DefaultFieldSerializer(object):\n-\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -29,25 +28,21 @@ def __call__(self):\n         return json_compatible(self.get_value())\n \n     def get_value(self, default=None):\n-        return getattr(self.field.interface(self.context),\n-                       self.field.__name__,\n-                       default)\n+        return getattr(self.field.interface(self.context), self.field.__name__, default)\n \n \n @adapter(IChoice, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class ChoiceFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         # Binding is necessary for named vocabularies\n         if IField.providedBy(self.field):\n             self.field = self.field.bind(self.context)\n         value = self.get_value()\n-        if (value is not None\n-                and IVocabularyTokenized.providedBy(self.field.vocabulary)):\n+        if value is not None and IVocabularyTokenized.providedBy(self.field.vocabulary):\n             try:\n                 term = self.field.vocabulary.getTerm(value)\n-                value = {\'token\': term.token, \'title\': term.title}\n+                value = {"token": term.token, "title": term.title}\n             # Some fields (e.g. language) have a default value that is not in\n             # vocabulary\n             except LookupError:\n@@ -58,26 +53,27 @@ def __call__(self):\n @adapter(ICollection, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n class CollectionFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         # Binding is necessary for named vocabularies\n         if IField.providedBy(self.field):\n             self.field = self.field.bind(self.context)\n         value = self.get_value()\n         value_type = self.field.value_type\n-        if (value is not None and IChoice.providedBy(value_type)\n-                and IVocabularyTokenized.providedBy(value_type.vocabulary)):\n+        if (\n+            value is not None\n+            and IChoice.providedBy(value_type)\n+            and IVocabularyTokenized.providedBy(value_type.vocabulary)\n+        ):\n             values = []\n             for v in value:\n                 term = value_type.vocabulary.getTerm(v)\n-                values.append({u\'token\': term.token, u\'title\': term.title})\n+                values.append({u"token": term.token, u"title": term.title})\n             value = self.field._type(values)\n         return json_compatible(value)\n \n \n @adapter(INamedImageField, IDexterityContent, Interface)\n class ImageFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         image = self.field.get(self.context)\n         if not image:\n@@ -85,42 +81,34 @@ def __call__(self):\n \n         width, height = image.getImageSize()\n \n-        url = get_original_image_url(\n-            self.context,\n-            self.field.__name__,\n-            width,\n-            height,\n-        )\n+        url = get_original_image_url(self.context, self.field.__name__, width, height)\n \n         scales = get_scales(self.context, self.field, width, height)\n         result = {\n-            \'filename\': image.filename,\n-            \'content-type\': image.contentType,\n-            \'size\': image.getSize(),\n-            \'download\': url,\n-            \'width\': width,\n-            \'height\': height,\n-            \'scales\': scales\n+            "filename": image.filename,\n+            "content-type": image.contentType,\n+            "size": image.getSize(),\n+            "download": url,\n+            "width": width,\n+            "height": height,\n+            "scales": scales,\n         }\n         return json_compatible(result)\n \n \n @adapter(INamedFileField, IDexterityContent, Interface)\n class FileFieldSerializer(DefaultFieldSerializer):\n-\n     def __call__(self):\n         namedfile = self.field.get(self.context)\n         if namedfile is None:\n             return None\n \n-        url = \'/\'.join((self.context.absolute_url(),\n-                        \'@@download\',\n-                        self.field.__name__))\n+        url = "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\n         result = {\n-            \'filename\': namedfile.filename,\n-            \'content-type\': namedfile.contentType,\n-            \'size\': namedfile.getSize(),\n-            \'download\': url\n+            "filename": namedfile.filename,\n+            "content-type": namedfile.contentType,\n+            "size": namedfile.getSize(),\n+            "download": url,\n         }\n         return json_compatible(result)\n \ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex e3cc3d13..901b1e92 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -7,7 +7,7 @@\n def expandable_elements(context, request):\n     """Returns a dict containing all expandable elements.\n     """\n-    expands = request.form.get(\'expand\', \'\').split(\',\')\n+    expands = request.form.get("expand", "").split(",")\n     elements = getAdapters((context, request), IExpandableElement)\n     res = {}\n     for element in elements:\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex a547787d..a91d2364 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -19,16 +19,13 @@ def __call__(self):\n         portal = getSite()\n \n         return {\n-            \'@id\': \'{}/@groups/{}\'.format(\n-                portal.absolute_url(),\n-                group.id\n-            ),\n-            \'id\': group.id,\n-            \'groupname\': group.getGroupName(),\n-            \'email\': group.getProperty(\'email\'),\n-            \'title\': group.getProperty(\'title\'),\n-            \'description\': group.getProperty(\'description\'),\n-            \'roles\': group.getRoles(),\n+            "@id": "{}/@groups/{}".format(portal.absolute_url(), group.id),\n+            "id": group.id,\n+            "groupname": group.getGroupName(),\n+            "email": group.getProperty("email"),\n+            "title": group.getProperty("title"),\n+            "description": group.getProperty("description"),\n+            "roles": group.getRoles(),\n         }\n \n \n@@ -41,7 +38,6 @@ class SerializeGroupToJsonSummary(BaseSerializer):\n @implementer(ISerializeToJson)\n @adapter(IGroupData, Interface)\n class SerializeGroupToJson(BaseSerializer):\n-\n     def __call__(self):\n         data = super(SerializeGroupToJson, self).__call__()\n         group = self.context\n@@ -49,12 +45,12 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, members)\n \n         users_data = {\n-            \'@id\': batch.canonical_url,\n-            \'items_total\': batch.items_total,\n-            \'items\': list(batch),\n+            "@id": batch.canonical_url,\n+            "items_total": batch.items_total,\n+            "items": list(batch),\n         }\n         if batch.links:\n-            users_data[\'batching\'] = batch.links\n+            users_data["batching"] = batch.links\n \n-        data[\'users\'] = users_data\n+        data["users"] = users_data\n         return data\ndiff --git a/src/plone/restapi/serializer/local_roles.py b/src/plone/restapi/serializer/local_roles.py\nindex 2add7a68..2ecec660 100644\n--- a/src/plone/restapi/serializer/local_roles.py\n+++ b/src/plone/restapi/serializer/local_roles.py\n@@ -15,7 +15,6 @@\n @adapter(IRoleManager, Interface)\n @implementer(ISerializeToJson)\n class SerializeLocalRolesToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -27,25 +26,24 @@ def _get_title(self, role_id):\n         return util.title\n \n     def __call__(self, search=None):\n-        self.request.form[\'search_term\'] = search\n-        sharing_view = getMultiAdapter((self.context, self.request),\n-                                       name=\'sharing\')\n+        self.request.form["search_term"] = search\n+        sharing_view = getMultiAdapter((self.context, self.request), name="sharing")\n         local_roles = sharing_view.role_settings()\n \n         available_roles = []\n-        for role in sorted(sharing_view.roles(), key=itemgetter(\'id\')):\n-            util = queryUtility(ISharingPageRole, name=role[\'id\'])\n+        for role in sorted(sharing_view.roles(), key=itemgetter("id")):\n+            util = queryUtility(ISharingPageRole, name=role["id"])\n             title = util.title\n-            available_roles.append({\n-                \'id\': role[\'id\'],\n-                \'title\': translate(title, context=self.request)})\n+            available_roles.append(\n+                {"id": role["id"], "title": translate(title, context=self.request)}\n+            )\n \n         blocked_roles = getattr(\n-            aq_base(self.context),\n-            \'__ac_local_roles_block__\',\n-            False,\n+            aq_base(self.context), "__ac_local_roles_block__", False\n         )\n \n-        return {\'inherit\': not blocked_roles,\n-                \'entries\': local_roles,\n-                \'available_roles\': available_roles}\n+        return {\n+            "inherit": not blocked_roles,\n+            "entries": local_roles,\n+            "available_roles": available_roles,\n+        }\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex 247ba2d3..a9014a74 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -11,7 +11,6 @@\n @implementer(ISerializeToJson)\n @adapter(IRegistry, IRequest)\n class SerializeRegistryToJson(object):\n-\n     def __init__(self, registry, request):\n         self.registry = registry\n         self.request = request\n@@ -22,26 +21,20 @@ def __call__(self):\n         batch = HypermediaBatch(self.request, list(records))\n \n         results = {}\n-        results[\'@id\'] = batch.canonical_url\n-        results[\'items_total\'] = batch.items_total\n+        results["@id"] = batch.canonical_url\n+        results["items_total"] = batch.items_total\n         if batch.links:\n-            results[\'batching\'] = batch.links\n+            results["batching"] = batch.links\n \n         def make_item(key):\n             record = records[key]\n             schema = getMultiAdapter(\n-                (record.field, record, self.request),\n-                IJsonSchemaProvider\n+                (record.field, record, self.request), IJsonSchemaProvider\n             )\n-            data = {\n-                \'name\': key,\n-                \'value\': self.registry[key]\n-            }\n+            data = {"name": key, "value": self.registry[key]}\n             __traceback_info__ = (record, record.field, schema)\n-            data[\'schema\'] = {\n-                \'properties\': schema.get_schema(),\n-            }\n+            data["schema"] = {"properties": schema.get_schema()}\n             return data\n \n-        results[\'items\'] = [make_item(key) for key in batch]\n+        results["items"] = [make_item(key) for key in batch]\n         return results\ndiff --git a/src/plone/restapi/serializer/relationfield.py b/src/plone/restapi/serializer/relationfield.py\nindex f229b60f..ab12e79d 100644\n--- a/src/plone/restapi/serializer/relationfield.py\n+++ b/src/plone/restapi/serializer/relationfield.py\n@@ -20,7 +20,8 @@\n def relationvalue_converter(value):\n     if value.to_object:\n         summary = getMultiAdapter(\n-            (value.to_object, getRequest()), ISerializeToJsonSummary)()\n+            (value.to_object, getRequest()), ISerializeToJsonSummary\n+        )()\n         return json_compatible(summary)\n \n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 41445a5c..0aeb3f71 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -16,50 +16,53 @@\n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n class SerializeSiteRootToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def _build_query(self):\n-        path = \'/\'.join(self.context.getPhysicalPath())\n-        query = {\'path\': {\'depth\': 1, \'query\': path},\n-                 \'sort_on\': \'getObjPositionInParent\'}\n+        path = "/".join(self.context.getPhysicalPath())\n+        query = {\n+            "path": {"depth": 1, "query": path},\n+            "sort_on": "getObjPositionInParent",\n+        }\n         return query\n \n     def __call__(self, version=None):\n-        version = \'current\' if version is None else version\n-        if version != \'current\':\n+        version = "current" if version is None else version\n+        if version != "current":\n             return {}\n \n         query = self._build_query()\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         brains = catalog(query)\n \n         batch = HypermediaBatch(self.request, brains)\n \n         result = {\n             # \'@context\': \'http://www.w3.org/ns/hydra/context.jsonld\',\n-            \'@id\': batch.canonical_url,\n-            \'id\': self.context.id,\n-            \'@type\': \'Plone Site\',\n-            \'title\': self.context.Title(),\n-            \'parent\': {},\n-            \'is_folderish\': True,\n-            \'description\': self.context.description,\n-            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n-            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n+            "@id": batch.canonical_url,\n+            "id": self.context.id,\n+            "@type": "Plone Site",\n+            "title": self.context.Title(),\n+            "parent": {},\n+            "is_folderish": True,\n+            "description": self.context.description,\n+            "tiles": json.loads(getattr(self.context, "tiles", "{}")),\n+            "tiles_layout": json.loads(\n+                getattr(self.context, "tiles_layout", "{}")\n+            ),  # noqa\n         }\n \n         # Insert expandable elements\n         result.update(expandable_elements(self.context, self.request))\n \n-        result[\'items_total\'] = batch.items_total\n+        result["items_total"] = batch.items_total\n         if batch.links:\n-            result[\'batching\'] = batch.links\n+            result["batching"] = batch.links\n \n-        result[\'items\'] = [\n+        result["items"] = [\n             getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n             for brain in batch\n         ]\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex a3ea13b7..4f94ba8a 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -23,13 +23,15 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         obj = IContentListingObject(self.context)\n-        summary = json_compatible({\n-            \'@id\': obj.getURL(),\n-            \'@type\': obj.PortalType(),\n-            \'title\': obj.Title(),\n-            \'description\': obj.Description(),\n-            \'review_state\': obj.review_state()\n-        })\n+        summary = json_compatible(\n+            {\n+                "@id": obj.getURL(),\n+                "@type": obj.PortalType(),\n+                "title": obj.Title(),\n+                "description": obj.Description(),\n+                "review_state": obj.review_state(),\n+            }\n+        )\n         return summary\n \n \n@@ -44,10 +46,12 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-        summary = json_compatible({\n-            \'@id\': self.context.absolute_url(),\n-            \'@type\': self.context.portal_type,\n-            \'title\': self.context.title,\n-            \'description\': self.context.description\n-        })\n+        summary = json_compatible(\n+            {\n+                "@id": self.context.absolute_url(),\n+                "@type": self.context.portal_type,\n+                "title": self.context.title,\n+                "description": self.context.description,\n+            }\n+        )\n         return summary\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex 89f0030c..df93e6f7 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -8,27 +8,24 @@\n from zope.component import adapter\n from zope.component.hooks import getSite\n \n-SERVICE_ID = \'@tiles\'\n+SERVICE_ID = "@tiles"\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(ITileType, Interface)\n class TileSummarySerializeToJson(object):\n-\n     def __init__(self, tile, request):\n         self.tile = tile\n \n     def __call__(self):\n         portal = getSite()\n         return {\n-            \'@id\': \'{}/{}/{}\'.format(\n-                portal.absolute_url(),\n-                SERVICE_ID,\n-                self.tile.__name__\n+            "@id": "{}/{}/{}".format(\n+                portal.absolute_url(), SERVICE_ID, self.tile.__name__\n             ),\n-            \'title\': self.tile.title,\n-            \'description\': self.tile.description,\n-            \'icon\': self.tile.icon,\n+            "title": self.tile.title,\n+            "description": self.tile.description,\n+            "icon": self.tile.icon,\n         }\n \n \n@@ -40,9 +37,7 @@ def get_jsonschema_for_tile(tile, context, request):\n     fieldsets = utils.get_fieldsets(context, request, schema)\n \n     # Build JSON schema properties\n-    properties = utils.get_jsonschema_properties(\n-        context, request, fieldsets\n-    )\n+    properties = utils.get_jsonschema_properties(context, request, fieldsets)\n \n     # Determine required fields\n     required = []\n@@ -53,21 +48,20 @@ def get_jsonschema_for_tile(tile, context, request):\n     # Include field modes\n     for field in utils.iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'title\': tile.title,\n-        \'properties\': properties,\n-        \'required\': required,\n-        \'fieldsets\': utils.get_fieldset_infos(fieldsets),\n+        "type": "object",\n+        "title": tile.title,\n+        "properties": properties,\n+        "required": required,\n+        "fieldsets": utils.get_fieldset_infos(fieldsets),\n     }\n \n \n @implementer(ISerializeToJson)\n @adapter(ITileType, Interface)\n class TileSerializeToJson(object):\n-\n     def __init__(self, tile, request):\n         self.tile = tile\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 0f153c8f..c4b06594 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -14,15 +14,16 @@\n try:\n     # Plone 5\n     from plone.app.users.browser.userdatapanel import getUserDataSchema\n+\n     HAS_TTW_SCHEMAS = True\n except ImportError:\n     # Plone 4.3\n     from plone.app.users.userdataschema import IUserDataSchemaProvider\n+\n     HAS_TTW_SCHEMAS = False\n \n \n class BaseSerializer(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -35,13 +36,13 @@ def __call__(self):\n         roles = user.getRoles()\n         # Anonymous and Authenticated are pseudo roles assign automatically\n         # to logged-in or logged-out users. They should not be exposed here\n-        roles = list(set(roles) - set([\'Anonymous\', \'Authenticated\', ]))\n+        roles = list(set(roles) - set(["Anonymous", "Authenticated"]))\n \n         data = {\n-            \'@id\': \'{}/@users/{}\'.format(portal.absolute_url(), user.id),\n-            \'id\': user.id,\n-            \'username\': user.getUserName(),\n-            \'roles\': roles,\n+            "@id": "{}/@users/{}".format(portal.absolute_url(), user.id),\n+            "id": user.id,\n+            "username": user.getUserName(),\n+            "roles": roles,\n         }\n \n         if HAS_TTW_SCHEMAS:\n@@ -51,18 +52,19 @@ def __call__(self):\n             schema = util.getSchema()\n \n         for name in getFieldNames(schema):\n-            if name == \'portrait\':\n-                memberdata = getToolByName(portal, \'portal_memberdata\')\n+            if name == "portrait":\n+                memberdata = getToolByName(portal, "portal_memberdata")\n                 if user.id in memberdata.portraits:\n-                    value = \'{}/portal_memberdata/portraits/{}\'.format(\n-                        portal.absolute_url(), user.id)\n+                    value = "{}/portal_memberdata/portraits/{}".format(\n+                        portal.absolute_url(), user.id\n+                    )\n                 else:\n                     value = None\n-            elif name == \'pdelete\':\n+            elif name == "pdelete":\n                 continue\n             else:\n-                value = user.getProperty(name, \'\')\n-                if value == \'\':\n+                value = user.getProperty(name, "")\n+                if value == "":\n                     value = None\n                 if value:\n                     value = safe_unicode(value)\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 181459c9..b9240f01 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -14,23 +14,24 @@\n @implementer(ISerializeToJson)\n @adapter(IVocabulary, Interface)\n class SerializeVocabularyToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, vocabulary_id):\n         vocabulary = self.context\n-        title = self.request.form.get(\'title\', \'\')\n-        token = self.request.form.get(\'token\', \'\')\n+        title = self.request.form.get("title", "")\n+        token = self.request.form.get("token", "")\n \n         terms = []\n         for term in vocabulary:\n             if title and token:\n                 self.request.response.setStatus(400)\n-                return dict(error=dict(\n-                    type=\'Invalid parameters\',\n-                    message=\'You can not filter by title and token at the same time.\')  # noqa\n+                return dict(\n+                    error=dict(\n+                        type="Invalid parameters",\n+                        message="You can not filter by title and token at the same time.",\n+                    )  # noqa\n                 )\n \n             if token:\n@@ -46,25 +47,25 @@ def __call__(self, vocabulary_id):\n \n         serialized_terms = []\n         for term in batch:\n-            serializer = getMultiAdapter((term, self.request),\n-                                         interface=ISerializeToJson)\n+            serializer = getMultiAdapter(\n+                (term, self.request), interface=ISerializeToJson\n+            )\n             serialized_terms.append(serializer())\n \n         result = {\n-            \'@id\': batch.canonical_url,\n-            \'items\': serialized_terms,\n-            \'items_total\': batch.items_total,\n+            "@id": batch.canonical_url,\n+            "items": serialized_terms,\n+            "items_total": batch.items_total,\n         }\n         links = batch.links\n         if links:\n-            result[\'batching\'] = links\n+            result["batching"] = links\n         return result\n \n \n @implementer(ISerializeToJson)\n @adapter(ITokenizedTerm, Interface)\n class SerializeTermToJson(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -73,7 +74,4 @@ def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n-        return {\n-            \'token\': token,\n-            \'title\': translate(title, context=self.request)\n-        }\n+        return {"token": token, "title": translate(title, context=self.request)}\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 48311be5..d2986d9d 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -12,7 +12,8 @@\n class Service(RestService):\n     """Base class for Plone REST API services\n     """\n-    content_type = \'application/json\'\n+\n+    content_type = "application/json"\n \n     def render(self):\n         self.check_permission()\n@@ -20,12 +21,13 @@ def render(self):\n         if content is not _no_content_marker:\n             self.request.response.setHeader("Content-Type", self.content_type)\n             return json.dumps(\n-                content, indent=2, sort_keys=True, separators=(\', \', \': \'))\n+                content, indent=2, sort_keys=True, separators=(", ", ": ")\n+            )\n \n     def check_permission(self):\n         sm = getSecurityManager()\n         if not sm.checkPermission(UseRESTAPI, self):\n-            raise Unauthorized(\'Missing %r permission\' % UseRESTAPI)\n+            raise Unauthorized("Missing %r permission" % UseRESTAPI)\n \n     def reply(self):\n         """Process the request and return a JSON serializable data structure or\ndiff --git a/src/plone/restapi/services/actions/get.py b/src/plone/restapi/services/actions/get.py\nindex c707c5bc..cb5f8111 100644\n--- a/src/plone/restapi/services/actions/get.py\n+++ b/src/plone/restapi/services/actions/get.py\n@@ -13,43 +13,38 @@\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Actions(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            \'actions\': {\n-                \'@id\': \'{}/@actions\'.format(self.context.absolute_url()),\n-            },\n-        }\n+        result = {"actions": {"@id": "{}/@actions".format(self.context.absolute_url())}}\n         if not expand:\n             return result\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_context_state\')\n-\n-        categories = self.request.form.get(\n-            \'categories\',\n-            self.all_categories\n+            (self.context, self.request), name="plone_context_state"\n         )\n+\n+        categories = self.request.form.get("categories", self.all_categories)\n         data = {}\n         for category in categories:\n             category_action_data = []\n             actions = context_state.actions(category=category)\n             for action in actions:\n-                category_action_data.append({\n-                    \'title\': translate(action[\'title\'], context=self.request),\n-                    \'id\': action[\'id\'],\n-                    \'icon\': action[\'icon\'],\n-                })\n+                category_action_data.append(\n+                    {\n+                        "title": translate(action["title"], context=self.request),\n+                        "id": action["id"],\n+                        "icon": action["icon"],\n+                    }\n+                )\n             data[category] = category_action_data\n-        return {\'actions\': data}\n+        return {"actions": data}\n \n     @property\n     def all_categories(self):\n-        portal_actions = getToolByName(self.context, \'portal_actions\')\n+        portal_actions = getToolByName(self.context, "portal_actions")\n         categories = []\n         for id, obj in portal_actions.objectItems():\n             if IActionCategory.providedBy(obj):\n@@ -58,7 +53,6 @@ def all_categories(self):\n \n \n class ActionsGet(Service):\n-\n     def reply(self):\n         actions = Actions(self.context, self.request)\n-        return actions(expand=True)[\'actions\']\n+        return actions(expand=True)["actions"]\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex 39568e24..aa618dd2 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -4,7 +4,9 @@\n from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)  # noqa\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n@@ -14,28 +16,31 @@\n class Login(Service):\n     """Handles login and returns a JSON web token (JWT).\n     """\n+\n     def reply(self):\n         data = json_body(self.request)\n-        if \'login\' not in data or \'password\' not in data:\n+        if "login" not in data or "password" not in data:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Missing credentials\',\n-                message=\'Login and password must be provided in body.\'))\n+            return dict(\n+                error=dict(\n+                    type="Missing credentials",\n+                    message="Login and password must be provided in body.",\n+                )\n+            )\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        userid = data[\'login\']\n-        password = data[\'password\']\n+        userid = data["login"]\n+        password = data["password"]\n         if six.PY2:\n-            userid = userid.encode(\'utf8\')\n-            password = password.encode(\'utf8\')\n+            userid = userid.encode("utf8")\n+            password = password.encode("utf8")\n         uf = self._find_userfolder(userid)\n \n         if uf is not None:\n-            plugins = uf._getOb(\'plugins\')\n+            plugins = uf._getOb("plugins")\n             authenticators = plugins.listPlugins(IAuthenticationPlugin)\n             plugin = None\n             for id_, authenticator in authenticators:\n@@ -45,26 +50,28 @@ def reply(self):\n \n             if plugin is None:\n                 self.request.response.setStatus(501)\n-                return dict(error=dict(\n-                    type=\'Login failed\',\n-                    message=\'JWT authentication plugin not installed.\'))\n+                return dict(\n+                    error=dict(\n+                        type="Login failed",\n+                        message="JWT authentication plugin not installed.",\n+                    )\n+                )\n \n-            user = uf.authenticate(\n-                userid, password, self.request)\n+            user = uf.authenticate(userid, password, self.request)\n         else:\n             user = None\n \n         if not user:\n             self.request.response.setStatus(401)\n-            return dict(error=dict(\n-                type=\'Invalid credentials\',\n-                message=\'Wrong login and/or password.\'))\n+            return dict(\n+                error=dict(\n+                    type="Invalid credentials", message="Wrong login and/or password."\n+                )\n+            )\n \n         payload = {}\n-        payload[\'fullname\'] = user.getProperty(\'fullname\')\n-        return {\n-            \'token\': plugin.create_token(user.getId(), data=payload)\n-        }\n+        payload["fullname"] = user.getProperty("fullname")\n+        return {"token": plugin.create_token(user.getId(), data=payload)}\n \n     def _find_userfolder(self, userid):\n         """Try to find a user folder that contains a user with the given\n@@ -74,7 +81,7 @@ def _find_userfolder(self, userid):\n         info = None\n \n         while not info:\n-            uf = getToolByName(uf_parent, \'acl_users\')\n+            uf = getToolByName(uf_parent, "acl_users")\n             if uf:\n                 info = uf._verifyUser(uf.plugins, login=userid)\n             if uf_parent is self.context.getPhysicalRoot():\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex fb868723..bbca18c3 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -1,17 +1,17 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import (\n-    IAuthenticationPlugin)\n+from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin\n from plone.restapi.services import Service\n \n \n class Logout(Service):\n     """Handles logout by invalidating the JWT\n     """\n+\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n-        plugins = acl_users._getOb(\'plugins\')\n+        plugins = acl_users._getOb("plugins")\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n         for id_, authenticator in authenticators:\n             if authenticator.meta_type == "JWT Authentication Plugin":\n@@ -20,20 +20,23 @@ def reply(self):\n \n         if plugin is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Logout failed\',\n-                message=\'JWT authentication plugin not installed.\'))\n+            return dict(\n+                error=dict(\n+                    type="Logout failed",\n+                    message="JWT authentication plugin not installed.",\n+                )\n+            )\n \n         if not plugin.store_tokens:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Logout failed\',\n-                message="Token can\'t be invalidated"))\n+            return dict(\n+                error=dict(type="Logout failed", message="Token can\'t be invalidated")\n+            )\n \n         creds = plugin.extractCredentials(self.request)\n-        if creds and \'token\' in creds and plugin.delete_token(creds[\'token\']):\n+        if creds and "token" in creds and plugin.delete_token(creds["token"]):\n             self.request.response.setStatus(200)\n             return super(Logout, self).reply()\n \n         self.request.response.setStatus(400)\n-        return dict(error=dict(type=\'Logout failed\', message="Unknown token"))\n+        return dict(error=dict(type="Logout failed", message="Unknown token"))\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex cbf18325..01362244 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n-from Products.PluggableAuthService.interfaces.plugins import IAuthenticationPlugin  # noqa\n+from Products.PluggableAuthService.interfaces.plugins import (\n+    IAuthenticationPlugin,\n+)  # noqa\n from zope.interface import alsoProvides\n \n import plone.protect.interfaces\n@@ -14,7 +16,7 @@ class Renew(Service):\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n-        plugins = acl_users._getOb(\'plugins\')\n+        plugins = acl_users._getOb("plugins")\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n         for id_, authenticator in authenticators:\n             if authenticator.meta_type == "JWT Authentication Plugin":\n@@ -23,29 +25,32 @@ def reply(self):\n \n         if plugin is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                type=\'Renew failed\',\n-                message=\'JWT authentication plugin not installed.\'))\n+            return dict(\n+                error=dict(\n+                    type="Renew failed",\n+                    message="JWT authentication plugin not installed.",\n+                )\n+            )\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        mtool = getToolByName(self.context, \'portal_membership\')\n-        if (bool(mtool.isAnonymousUser())):\n+        mtool = getToolByName(self.context, "portal_membership")\n+        if bool(mtool.isAnonymousUser()):\n             # Don\'t generate authentication tokens for anonymous users.\n             self.request.response.setStatus(401)\n-            return dict(error=dict(\n-                type=\'Invalid or expired authentication token\',\n-                message=\'The authentication token is invalid or expired.\'))\n+            return dict(\n+                error=dict(\n+                    type="Invalid or expired authentication token",\n+                    message="The authentication token is invalid or expired.",\n+                )\n+            )\n         user = mtool.getAuthenticatedMember()\n         payload = {}\n-        payload[\'fullname\'] = user.getProperty(\'fullname\')\n+        payload["fullname"] = user.getProperty("fullname")\n         new_token = plugin.create_token(user.getId(), data=payload)\n         if plugin.store_tokens and self.request._auth:\n             old_token = self.request._auth[7:]\n             plugin.delete_token(old_token)\n-        return {\n-            \'token\': new_token\n-        }\n+        return {"token": new_token}\ndiff --git a/src/plone/restapi/services/breadcrumbs/get.py b/src/plone/restapi/services/breadcrumbs/get.py\nindex a9b8c9d8..fff5bc6a 100644\n--- a/src/plone/restapi/services/breadcrumbs/get.py\n+++ b/src/plone/restapi/services/breadcrumbs/get.py\n@@ -10,35 +10,31 @@\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Breadcrumbs(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            \'breadcrumbs\': {\n-                \'@id\': \'{}/@breadcrumbs\'.format(self.context.absolute_url()),\n-            },\n+            "breadcrumbs": {\n+                "@id": "{}/@breadcrumbs".format(self.context.absolute_url())\n+            }\n         }\n         if not expand:\n             return result\n \n-        breadcrumbs_view = getMultiAdapter((self.context, self.request),\n-                                           name="breadcrumbs_view")\n+        breadcrumbs_view = getMultiAdapter(\n+            (self.context, self.request), name="breadcrumbs_view"\n+        )\n         items = []\n         for crumb in breadcrumbs_view.breadcrumbs():\n-            items.append({\n-                \'title\': crumb[\'Title\'],\n-                \'@id\': crumb[\'absolute_url\']\n-            })\n+            items.append({"title": crumb["Title"], "@id": crumb["absolute_url"]})\n \n-        result[\'breadcrumbs\'][\'items\'] = items\n+        result["breadcrumbs"]["items"] = items\n         return result\n \n \n class BreadcrumbsGet(Service):\n-\n     def reply(self):\n         breadcrumbs = Breadcrumbs(self.context, self.request)\n-        return breadcrumbs(expand=True)[\'breadcrumbs\']\n+        return breadcrumbs(expand=True)["breadcrumbs"]\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 1f51413f..30f6de2b 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -26,75 +26,65 @@ class FolderPost(Service):\n     def reply(self):\n         data = json_body(self.request)\n \n-        type_ = data.get(\'@type\', None)\n-        id_ = data.get(\'id\', None)\n-        title = data.get(\'title\', None)\n+        type_ = data.get("@type", None)\n+        id_ = data.get("id", None)\n+        title = data.get("title", None)\n \n         if not type_:\n             raise BadRequest("Property \'@type\' is required")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         try:\n             obj = create(self.context, type_, id_=id_, title=title)\n         except Unauthorized as exc:\n             self.request.response.setStatus(403)\n-            return dict(error=dict(\n-                type=\'Forbidden\',\n-                message=str(exc)))\n+            return dict(error=dict(type="Forbidden", message=str(exc)))\n         except BadRequest as exc:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Bad Request\',\n-                message=str(exc)))\n+            return dict(error=dict(type="Bad Request", message=str(exc)))\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\n         temporarily_wrapped = False\n-        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, "aq_base"):\n             obj = obj.__of__(self.context)\n             temporarily_wrapped = True\n \n         # Update fields\n-        deserializer = queryMultiAdapter((obj, self.request),\n-                                         IDeserializeFromJson)\n+        deserializer = queryMultiAdapter((obj, self.request), IDeserializeFromJson)\n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize type {}\'.format(obj.portal_type)))\n+            return dict(\n+                error=dict(message="Cannot deserialize type {}".format(obj.portal_type))\n+            )\n \n         try:\n             deserializer(validate_all=True, create=True)\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not getattr(deserializer, \'notifies_create\', False):\n+        if not getattr(deserializer, "notifies_create", False):\n             notify(ObjectCreatedEvent(obj))\n \n         obj = add(self.context, obj, rename=not bool(id_))\n \n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+        self.request.response.setHeader("Location", obj.absolute_url())\n \n-        serializer = queryMultiAdapter(\n-            (obj, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = queryMultiAdapter((obj, self.request), ISerializeToJson)\n \n         serialized_obj = serializer()\n \n         # HypermediaBatch can\'t determine the correct canonical URL for\n         # objects that have just been created via POST - so we make sure\n         # to set it here\n-        serialized_obj[\'@id\'] = obj.absolute_url()\n+        serialized_obj["@id"] = obj.absolute_url()\n \n         return serialized_obj\ndiff --git a/src/plone/restapi/services/content/delete.py b/src/plone/restapi/services/content/delete.py\nindex 33ad2605..33b032cf 100644\n--- a/src/plone/restapi/services/content/delete.py\n+++ b/src/plone/restapi/services/content/delete.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n-from plone.app.linkintegrity.exceptions import (\n-    LinkIntegrityNotificationException)\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.restapi.services import Service\n \n \ndiff --git a/src/plone/restapi/services/content/get.py b/src/plone/restapi/services/content/get.py\nindex 5e30d5a0..e8ce4354 100644\n--- a/src/plone/restapi/services/content/get.py\n+++ b/src/plone/restapi/services/content/get.py\n@@ -9,11 +9,10 @@ class ContentGet(Service):\n     """\n \n     def reply(self):\n-        serializer = queryMultiAdapter((self.context, self.request),\n-                                       ISerializeToJson)\n+        serializer = queryMultiAdapter((self.context, self.request), ISerializeToJson)\n \n         if serializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(message=\'No serializer available.\'))\n+            return dict(error=dict(message="No serializer available."))\n \n-        return serializer(version=self.request.get(\'version\'))\n+        return serializer(version=self.request.get("version"))\ndiff --git a/src/plone/restapi/services/content/sharing.py b/src/plone/restapi/services/content/sharing.py\nindex 72c40738..791add05 100644\n--- a/src/plone/restapi/services/content/sharing.py\n+++ b/src/plone/restapi/services/content/sharing.py\n@@ -16,48 +16,51 @@ class SharingGet(Service):\n \n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\n-        if not checkPermission(\'plone.DelegateRoles\', self.context):\n+        if not checkPermission("plone.DelegateRoles", self.context):\n             self.request.response.setStatus(403)\n             return\n-        serializer = queryMultiAdapter((self.context, self.request),\n-                                       interface=ISerializeToJson,\n-                                       name=\'local_roles\')\n+        serializer = queryMultiAdapter(\n+            (self.context, self.request), interface=ISerializeToJson, name="local_roles"\n+        )\n         if serializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(message=\'No serializer available.\'))\n+            return dict(error=dict(message="No serializer available."))\n \n-        search = self.request.form.get(\'search\')\n+        search = self.request.form.get("search")\n         return serializer(search=search)\n \n \n class SharingPost(Service):\n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\n-        if not checkPermission(\'plone.DelegateRoles\', self.context):\n+        if not checkPermission("plone.DelegateRoles", self.context):\n             self.request.response.setStatus(403)\n             return\n \n-        deserializer = queryMultiAdapter((self.context, self.request),\n-                                         interface=IDeserializeFromJson,\n-                                         name=\'local_roles\')\n+        deserializer = queryMultiAdapter(\n+            (self.context, self.request),\n+            interface=IDeserializeFromJson,\n+            name="local_roles",\n+        )\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize local roles for type {}\'.format(\n-                    self.context.portal_type)))\n+            return dict(\n+                error=dict(\n+                    message="Cannot deserialize local roles for type {}".format(\n+                        self.context.portal_type\n+                    )\n+                )\n+            )\n \n         try:\n             deserializer()\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n         # TODO: alternativley return the patched object with a 200\n         self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 524e7c57..4a8057e6 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -29,9 +29,9 @@\n import time\n \n TUS_OPTIONS_RESPONSE_HEADERS = {\n-    \'Tus-Resumable\': \'1.0.0\',\n-    \'Tus-Version\': \'1.0.0\',\n-    \'Tus-Extension\': \'creation,expiration\',\n+    "Tus-Resumable": "1.0.0",\n+    "Tus-Version": "1.0.0",\n+    "Tus-Extension": "creation,expiration",\n }\n \n \n@@ -45,7 +45,6 @@ def reply(self):\n \n \n class TUSBaseService(Service):\n-\n     def __call__(self):\n         # We need to add additional TUS headers if this is a CORS preflight\n         # request.\n@@ -66,16 +65,17 @@ def __call__(self):\n         return self.render()\n \n     def check_tus_version(self):\n-        version = self.request.getHeader(\'Tus-Resumable\')\n-        if version != \'1.0.0\':\n+        version = self.request.getHeader("Tus-Resumable")\n+        if version != "1.0.0":\n             return False\n         return True\n \n     def unsupported_version(self):\n-        self.request.response.setHeader(\'Tus-Version\', \'1.0.0\')\n+        self.request.response.setHeader("Tus-Version", "1.0.0")\n         self.request.response.setStatus(412)\n-        return {\'error\': {\'type\': \'Precondition Failed\',\n-                          \'message\': \'Unsupported version\'}}\n+        return {\n+            "error": {"type": "Precondition Failed", "message": "Unsupported version"}\n+        }\n \n     def error(self, type, message, status=400):\n         """\n@@ -84,10 +84,7 @@ def error(self, type, message, status=400):\n         conform error body.\n         """\n         self.request.response.setStatus(status)\n-        return {\'error\': {\n-                \'type\': type,\n-                \'message\': message,\n-                }}\n+        return {"error": {"type": type, "message": message}}\n \n \n class UploadPost(TUSBaseService):\n@@ -97,40 +94,40 @@ def reply(self):\n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        length = self.request.getHeader(\'Upload-Length\', \'\')\n+        length = self.request.getHeader("Upload-Length", "")\n         try:\n             length = int(length)\n         except ValueError:\n-            return self.error(\'Bad Request\',\n-                              \'Missing or invalid Upload-Length header\')\n+            return self.error("Bad Request", "Missing or invalid Upload-Length header")\n \n         # Parse metadata\n         metadata = {}\n-        for item in self.request.getHeader(\'Upload-Metadata\', \'\').split(\',\'):\n+        for item in self.request.getHeader("Upload-Metadata", "").split(","):\n             key_value = item.split()\n             if len(key_value) == 2:\n                 key = key_value[0].lower()\n-                value = b64decode(key_value[1]).decode(\'utf-8\')\n+                value = b64decode(key_value[1]).decode("utf-8")\n                 metadata[key] = value\n-        metadata[\'length\'] = length\n-        if self.__name__.endswith(\'@tus-replace\'):\n-            metadata[\'mode\'] = \'replace\'\n+        metadata["length"] = length\n+        if self.__name__.endswith("@tus-replace"):\n+            metadata["mode"] = "replace"\n         else:\n-            metadata[\'mode\'] = \'create\'\n+            metadata["mode"] = "create"\n \n         tus_upload = TUSUpload(uuid4().hex, metadata=metadata)\n \n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\'Location\', \'{}/@tus-upload/{}\'.format(\n-            self.context.absolute_url(), tus_upload.uid))\n-        self.request.response.setHeader(\'Upload-Expires\', tus_upload.expires())\n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n+        self.request.response.setHeader(\n+            "Location",\n+            "{}/@tus-upload/{}".format(self.context.absolute_url(), tus_upload.uid),\n+        )\n+        self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n         return super(UploadPost, self).reply()\n \n \n @implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n-\n     def __init__(self, context, request):\n         super(UploadFileBase, self).__init__(context, request)\n         self.uid = None\n@@ -155,11 +152,11 @@ def tus_upload(self):\n \n     def check_add_modify_permission(self, mode):\n         sm = getSecurityManager()\n-        if mode == \'create\':\n-            if not sm.checkPermission(\'Add portal content\', self.context):\n+        if mode == "create":\n+            if not sm.checkPermission("Add portal content", self.context):\n                 raise Unauthorized\n         else:\n-            if not sm.checkPermission(\'Modify portal content\', self.context):\n+            if not sm.checkPermission("Modify portal content", self.context):\n                 raise Unauthorized\n \n \n@@ -170,20 +167,22 @@ def reply(self):\n \n         tus_upload = self.tus_upload()\n         if tus_upload is None:\n-            return self.error(\'Not Found\', \'\', 404)\n+            return self.error("Not Found", "", 404)\n \n         metadata = tus_upload.metadata()\n-        self.check_add_modify_permission(metadata.get(\'mode\', \'create\'))\n+        self.check_add_modify_permission(metadata.get("mode", "create"))\n \n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        self.request.response.setHeader(\'Upload-Length\', \'{}\'.format(\n-            tus_upload.length()))\n-        self.request.response.setHeader(\'Upload-Offset\', \'{}\'.format(\n-            tus_upload.offset()))\n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n-        self.request.response.setHeader(\'Cache-Control\', \'no-store\')\n+        self.request.response.setHeader(\n+            "Upload-Length", "{}".format(tus_upload.length())\n+        )\n+        self.request.response.setHeader(\n+            "Upload-Offset", "{}".format(tus_upload.offset())\n+        )\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n+        self.request.response.setHeader("Cache-Control", "no-store")\n         self.request.response.setStatus(200, lock=1)\n         return super(UploadHead, self).reply()\n \n@@ -196,28 +195,26 @@ def reply(self):\n \n         tus_upload = self.tus_upload()\n         if tus_upload is None:\n-            return self.error(\'Not Found\', \'\', 404)\n+            return self.error("Not Found", "", 404)\n \n         metadata = tus_upload.metadata()\n-        self.check_add_modify_permission(metadata.get(\'mode\', \'create\'))\n+        self.check_add_modify_permission(metadata.get("mode", "create"))\n \n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        content_type = self.request.getHeader(\'Content-Type\')\n-        if content_type != \'application/offset+octet-stream\':\n-            return self.error(\n-                \'Bad Request\', \'Missing or invalid Content-Type header\')\n+        content_type = self.request.getHeader("Content-Type")\n+        if content_type != "application/offset+octet-stream":\n+            return self.error("Bad Request", "Missing or invalid Content-Type header")\n \n-        offset = self.request.getHeader(\'Upload-Offset\', \'\')\n+        offset = self.request.getHeader("Upload-Offset", "")\n         try:\n             offset = int(offset)\n         except ValueError:\n-            return self.error(\n-                \'Bad Request\', \'Missing or invalid Upload-Offset header\')\n+            return self.error("Bad Request", "Missing or invalid Upload-Offset header")\n \n         request_body = self.request._file\n-        if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n+        if hasattr(request_body, "raw"):  # Unwrap io.BufferedRandom\n             request_body = request_body.raw\n         tus_upload.write(request_body, offset)\n         offset = tus_upload.offset()\n@@ -225,28 +222,25 @@ def reply(self):\n         if tus_upload.finished:\n             self.create_or_modify_content(tus_upload)\n         else:\n-            self.request.response.setHeader(\n-                \'Upload-Expires\', tus_upload.expires())\n+            self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n \n-        self.request.response.setHeader(\'Tus-Resumable\', \'1.0.0\')\n-        self.request.response.setHeader(\'Upload-Offset\', \'{}\'.format(offset))\n+        self.request.response.setHeader("Tus-Resumable", "1.0.0")\n+        self.request.response.setHeader("Upload-Offset", "{}".format(offset))\n         self.request.response.setStatus(204, lock=1)\n         return super(UploadPatch, self).reply()\n \n     def create_or_modify_content(self, tus_upload):\n         metadata = tus_upload.metadata()\n-        filename = metadata.get(\'filename\', \'\')\n-        content_type = metadata.get(\'content-type\',\n-                                    \'application/octet-stream\')\n-        mode = metadata.get(\'mode\', \'create\')\n-        fieldname = metadata.get(\'fieldname\')\n-\n-        if mode == \'create\':\n-            type_ = metadata.get(\'@type\')\n+        filename = metadata.get("filename", "")\n+        content_type = metadata.get("content-type", "application/octet-stream")\n+        mode = metadata.get("mode", "create")\n+        fieldname = metadata.get("fieldname")\n+\n+        if mode == "create":\n+            type_ = metadata.get("@type")\n             if type_ is None:\n-                ctr = getToolByName(self.context, \'content_type_registry\')\n-                type_ = ctr.findTypeName(\n-                    filename.lower(), content_type, \'\') or \'File\'\n+                ctr = getToolByName(self.context, "content_type_registry")\n+                type_ = ctr.findTypeName(filename.lower(), content_type, "") or "File"\n \n             obj = create(self.context, type_)\n         else:\n@@ -256,66 +250,63 @@ def create_or_modify_content(self, tus_upload):\n             info = IPrimaryFieldInfo(obj, None)\n             if info is not None:\n                 fieldname = info.fieldname\n-            elif base_hasattr(obj, \'getPrimaryField\'):\n+            elif base_hasattr(obj, "getPrimaryField"):\n                 field = obj.getPrimaryField()\n                 fieldname = field.getName()\n \n         if not fieldname:\n-            return self.error(\'Bad Request\', \'Fieldname required\', 400)\n+            return self.error("Bad Request", "Fieldname required", 400)\n \n         # Acquisition wrap temporarily for deserialization\n         temporarily_wrapped = False\n-        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, "aq_base"):\n             obj = obj.__of__(self.context)\n             temporarily_wrapped = True\n \n         # Update field with file data\n-        deserializer = queryMultiAdapter(\n-            (obj, self.request), IDeserializeFromJson)\n+        deserializer = queryMultiAdapter((obj, self.request), IDeserializeFromJson)\n         if deserializer is None:\n             return self.error(\n-                \'Not Implemented\',\n-                \'Cannot deserialize type {}\'.format(\n-                    obj.portal_type),\n-                501)\n+                "Not Implemented",\n+                "Cannot deserialize type {}".format(obj.portal_type),\n+                501,\n+            )\n         try:\n-            deserializer(\n-                data={fieldname: tus_upload}, create=mode == \'create\')\n+            deserializer(data={fieldname: tus_upload}, create=mode == "create")\n         except DeserializationError as e:\n-            return self.error(\n-                \'Deserialization Error\', str(e), 400)\n+            return self.error("Deserialization Error", str(e), 400)\n \n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if mode == \'create\':\n-            if not getattr(deserializer, \'notifies_create\', False):\n+        if mode == "create":\n+            if not getattr(deserializer, "notifies_create", False):\n                 notify(ObjectCreatedEvent(obj))\n             obj = add(self.context, obj)\n \n         tus_upload.close()\n         tus_upload.cleanup()\n-        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+        self.request.response.setHeader("Location", obj.absolute_url())\n \n \n class TUSUpload(object):\n \n-    file_prefix = \'tus_upload_\'\n+    file_prefix = "tus_upload_"\n     expiration_period = 60 * 60\n     finished = False\n \n     def __init__(self, uid, metadata=None):\n         self.uid = uid\n \n-        self.tmp_dir = os.environ.get(\'TUS_TMP_FILE_DIR\')\n+        self.tmp_dir = os.environ.get("TUS_TMP_FILE_DIR")\n         if self.tmp_dir is None:\n-            client_home = os.environ.get(\'CLIENT_HOME\')\n-            self.tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+            client_home = os.environ.get("CLIENT_HOME")\n+            self.tmp_dir = os.path.join(client_home, "tus-uploads")\n         if not os.path.isdir(self.tmp_dir):\n             os.makedirs(self.tmp_dir)\n \n         self.filepath = os.path.join(self.tmp_dir, self.file_prefix + self.uid)\n-        self.metadata_path = self.filepath + \'.json\'\n+        self.metadata_path = self.filepath + ".json"\n         self._metadata = None\n \n         if metadata is not None:\n@@ -326,14 +317,14 @@ def __init__(self, uid, metadata=None):\n     def initalize(self, metadata):\n         """Initialize a new TUS upload by writing its metadata to disk."""\n         self.cleanup_expired()\n-        with open(self.metadata_path, \'w\') as f:\n+        with open(self.metadata_path, "w") as f:\n             json.dump(metadata, f)\n \n     def length(self):\n         """Returns the total upload length."""\n         metadata = self.metadata()\n-        if \'length\' in metadata:\n-            return metadata[\'length\']\n+        if "length" in metadata:\n+            return metadata["length"]\n         return 0\n \n     def offset(self):\n@@ -344,9 +335,9 @@ def offset(self):\n \n     def write(self, infile, offset=0):\n         """Write to uploaded file at the given offset."""\n-        mode = \'wb\'\n+        mode = "wb"\n         if os.path.exists(self.filepath):\n-            mode = \'ab+\'\n+            mode = "ab+"\n         with open(self.filepath, mode) as f:\n             f.seek(offset)\n             while True:\n@@ -362,7 +353,7 @@ def write(self, infile, offset=0):\n     def open(self):\n         """Open the uploaded file for reading and return it."""\n         if self._file is None or self._file.closed:\n-            self._file = open(self.filepath, \'rb\')\n+            self._file = open(self.filepath, "rb")\n         return self._file\n \n     def close(self):\n@@ -374,7 +365,7 @@ def metadata(self):\n         """Returns the metadata of the current upload."""\n         if self._metadata is None:\n             if os.path.exists(self.metadata_path):\n-                with open(self.metadata_path, \'rb\') as f:\n+                with open(self.metadata_path, "rb") as f:\n                     self._metadata = json.load(f)\n         return self._metadata or {}\n \n@@ -388,7 +379,7 @@ def cleanup(self):\n     def cleanup_expired(self):\n         """Cleanup unfinished uploads that have expired."""\n         for filename in os.listdir(self.tmp_dir):\n-            if fnmatch(filename, \'tus_upload_*.json\'):\n+            if fnmatch(filename, "tus_upload_*.json"):\n                 metadata_path = os.path.join(self.tmp_dir, filename)\n                 filepath = metadata_path[:-5]\n                 if os.path.exists(filepath):\n@@ -404,8 +395,7 @@ def cleanup_expired(self):\n     def expires(self):\n         """Returns the expiration time of the current upload."""\n         if os.path.exists(self.filepath):\n-            expiration = os.stat(\n-                self.filepath).st_mtime + self.expiration_period\n+            expiration = os.stat(self.filepath).st_mtime + self.expiration_period\n         else:\n             expiration = time.time() + self.expiration_period\n         return formatdate(expiration, False, True)\ndiff --git a/src/plone/restapi/services/content/update.py b/src/plone/restapi/services/content/update.py\nindex 63af95e8..b9d697eb 100644\n--- a/src/plone/restapi/services/content/update.py\n+++ b/src/plone/restapi/services/content/update.py\n@@ -14,32 +14,33 @@ def reply(self):\n \n         if is_locked(self.context, self.request):\n             self.request.response.setStatus(403)\n-            return dict(error=dict(\n-                type=\'Forbidden\', message=\'Resource is locked.\'))\n+            return dict(error=dict(type="Forbidden", message="Resource is locked."))\n \n-        deserializer = queryMultiAdapter((self.context, self.request),\n-                                         IDeserializeFromJson)\n+        deserializer = queryMultiAdapter(\n+            (self.context, self.request), IDeserializeFromJson\n+        )\n         if deserializer is None:\n             self.request.response.setStatus(501)\n-            return dict(error=dict(\n-                message=\'Cannot deserialize type {}\'.format(\n-                    self.context.portal_type)))\n+            return dict(\n+                error=dict(\n+                    message="Cannot deserialize type {}".format(\n+                        self.context.portal_type\n+                    )\n+                )\n+            )\n \n         try:\n             deserializer()\n         except DeserializationError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'DeserializationError\',\n-                message=str(e)))\n+            return dict(error=dict(type="DeserializationError", message=str(e)))\n \n-        prefer = self.request.getHeader(\'Prefer\')\n-        if prefer == \'return=representation\':\n+        prefer = self.request.getHeader("Prefer")\n+        if prefer == "return=representation":\n             self.request.response.setStatus(200)\n \n             serializer = queryMultiAdapter(\n-                (self.context, self.request),\n-                ISerializeToJson\n+                (self.context, self.request), ISerializeToJson\n             )\n \n             serialized_obj = serializer()\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex d4111d65..577d5e0e 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -24,32 +24,33 @@ def create(container, type_, id_=None, title=None):\n     # Generate a temporary id if the id is not given\n     if not id_:\n         now = DateTime()\n-        new_id = \'{}.{}.{}{:04d}\'.format(\n-            type_.lower().replace(\' \', \'_\'),\n-            now.strftime(\'%Y-%m-%d\'),\n+        new_id = "{}.{}.{}{:04d}".format(\n+            type_.lower().replace(" ", "_"),\n+            now.strftime("%Y-%m-%d"),\n             str(now.millis())[7:],\n-            randint(0, 9999))\n+            randint(0, 9999),\n+        )\n     else:\n         if six.PY2 and isinstance(id_, six.text_type):\n-            new_id = id_.encode(\'utf8\')\n+            new_id = id_.encode("utf8")\n         else:\n             new_id = id_\n \n-    portal_types = getToolByName(container, \'portal_types\')\n+    portal_types = getToolByName(container, "portal_types")\n     type_info = portal_types.getTypeInfo(type_)\n \n     # Check for add permission\n     if not type_info.isConstructionAllowed(container):\n-        raise Unauthorized(\'Cannot create %s\' % type_info.getId())\n+        raise Unauthorized("Cannot create %s" % type_info.getId())\n \n     # Check if allowed subobject type\n     container_type_info = portal_types.getTypeInfo(container)\n     if not container_type_info.allowType(type_):\n-        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+        raise Unauthorized("Disallowed subobject type: %s" % type_)\n \n     # Check for type constraints\n     if type_ not in [fti.getId() for fti in container.allowedContentTypes()]:\n-        raise Unauthorized(\'Disallowed subobject type: %s\' % type_)\n+        raise Unauthorized("Disallowed subobject type: %s" % type_)\n \n     if type_info.product:\n         # Oldstyle factory\n@@ -61,7 +62,7 @@ def create(container, type_, id_=None, title=None):\n         factory = getUtility(IFactory, type_info.factory)\n         obj = factory(new_id, title=title)\n \n-    if base_hasattr(obj, \'_setPortalTypeName\'):\n+    if base_hasattr(obj, "_setPortalTypeName"):\n         obj._setPortalTypeName(type_info.getId())\n \n     return obj\n@@ -69,11 +70,11 @@ def create(container, type_, id_=None, title=None):\n \n def add(container, obj, rename=True):\n     """Add an object to a container."""\n-    id_ = getattr(aq_base(obj), \'id\', None)\n+    id_ = getattr(aq_base(obj), "id", None)\n \n     # Archetypes objects are already created in a container thus we just fire\n     # the notification events and rename the object if necessary.\n-    if base_hasattr(obj, \'_at_rename_after_creation\'):\n+    if base_hasattr(obj, "_at_rename_after_creation"):\n         notify(ObjectAddedEvent(obj, container, id_))\n         notifyContainerModified(container)\n         if obj._at_rename_after_creation and rename:\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex 407b92bc..51286cd9 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -19,10 +19,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def get_controlpanel_adapters(self):\n-        adapters = getAdapters(\n-            (self.context, self.request),\n-            provided=IControlpanel\n-        )\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n         for name, panel in adapters:\n             panel.__name__ = name\n             yield name, panel\n@@ -33,10 +30,10 @@ def available_controlpanels(self):\n             [(p.configlet_id, name) for name, p in panels.items()]\n         )\n \n-        pctool = getToolByName(self.context, \'portal_controlpanel\')\n+        pctool = getToolByName(self.context, "portal_controlpanel")\n         for group in pctool.getGroups():\n-            for action_data in pctool.enumConfiglets(group=group[\'id\']):\n-                name = panels_by_configlet.get(action_data[\'id\'])\n+            for action_data in pctool.enumConfiglets(group=group["id"]):\n+                name = panels_by_configlet.get(action_data["id"])\n                 panel = panels.get(name)\n                 if panel:\n                     yield panel\ndiff --git a/src/plone/restapi/services/controlpanels/patch.py b/src/plone/restapi/services/controlpanels/patch.py\nindex b48a6f73..5bbcc6e3 100644\n--- a/src/plone/restapi/services/controlpanels/patch.py\n+++ b/src/plone/restapi/services/controlpanels/patch.py\n@@ -17,10 +17,7 @@ def publishTraverse(self, request, name):\n         return self\n \n     def get_controlpanel_adapters(self):\n-        adapters = getAdapters(\n-            (self.context, self.request),\n-            provided=IControlpanel\n-        )\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n         for name, panel in adapters:\n             panel.__name__ = name\n             yield name, panel\n@@ -31,7 +28,7 @@ def panel_by_name(self, name):\n \n     def reply(self):\n         if not self.controlpanel_name:\n-            raise BadRequest(\'Missing parameter controlpanelname\')\n+            raise BadRequest("Missing parameter controlpanelname")\n \n         panel = self.panel_by_name(self.controlpanel_name)\n         deserializer = IDeserializeFromJson(panel)\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 5e12ea4c..05e9374f 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -18,26 +18,26 @@ class BaseCopyMove(Service):\n \n     def __init__(self, context, request):\n         super(BaseCopyMove, self).__init__(context, request)\n-        self.portal = getMultiAdapter((self.context, self.request),\n-                                      name=\'plone_portal_state\').portal()\n+        self.portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         self.portal_url = self.portal.absolute_url()\n-        self.catalog = getToolByName(self.context, \'portal_catalog\')\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n         if isinstance(key, six.string_types):\n             if key.startswith(self.portal_url):\n                 # Resolve by URL\n-                key = key[len(self.portal_url) + 1:]\n+                key = key[len(self.portal_url) + 1 :]\n                 if six.PY2:\n-                    key = key.encode(\'utf8\')\n+                    key = key.encode("utf8")\n                 return self.portal.restrictedTraverse(key, None)\n-            elif key.startswith(\'/\'):\n+            elif key.startswith("/"):\n                 if six.PY2:\n-                    key = key.encode(\'utf8\')\n+                    key = key.encode("utf8")\n                 # Resolve by path\n-                return self.portal.restrictedTraverse(\n-                    key.lstrip(\'/\'), None)\n+                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n             else:\n                 # Resolve by UID\n                 brain = self.catalog(UID=key)\n@@ -46,8 +46,8 @@ def get_object(self, key):\n \n     def reply(self):\n         # return 401/403 Forbidden if the user has no permission\n-        if not checkPermission(\'cmf.AddPortalContent\', self.context):\n-            pm = getToolByName(self.context, \'portal_membership\')\n+        if not checkPermission("cmf.AddPortalContent", self.context):\n+            pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\n                 self.request.response.setStatus(401)\n             else:\n@@ -56,15 +56,14 @@ def reply(self):\n \n         data = json_body(self.request)\n \n-        source = data.get(\'source\', None)\n+        source = data.get("source", None)\n \n         if not source:\n             raise BadRequest("Property \'source\' is required")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         if not isinstance(source, list):\n             source = [source]\n@@ -76,9 +75,9 @@ def reply(self):\n                 if self.is_moving:\n                     # To be able to safely move the object, the user requires\n                     # permissions on the parent\n-                    if not checkPermission(\'zope2.DeleteObjects\', obj) and \\\n-                       not checkPermission(\n-                            \'zope2.DeleteObjects\', aq_parent(obj)):\n+                    if not checkPermission(\n+                        "zope2.DeleteObjects", obj\n+                    ) and not checkPermission("zope2.DeleteObjects", aq_parent(obj)):\n                         self.request.response.setStatus(403)\n                         return\n                 parent = aq_parent(obj)\n@@ -90,14 +89,17 @@ def reply(self):\n         results = []\n         for parent, ids in parents_ids.items():\n             result = self.context.manage_pasteObjects(\n-                cb_copy_data=self.clipboard(parent, ids))\n+                cb_copy_data=self.clipboard(parent, ids)\n+            )\n             for res in result:\n-                results.append({\n-                    \'source\': \'{}/{}\'.format(\n-                        parent.absolute_url(), res[\'id\']),\n-                    \'target\': \'{}/{}\'.format(\n-                        self.context.absolute_url(), res[\'new_id\']),\n-                })\n+                results.append(\n+                    {\n+                        "source": "{}/{}".format(parent.absolute_url(), res["id"]),\n+                        "target": "{}/{}".format(\n+                            self.context.absolute_url(), res["new_id"]\n+                        ),\n+                    }\n+                )\n         return results\n \n     def clipboard(self, parent, ids):\n@@ -108,6 +110,7 @@ def clipboard(self, parent, ids):\n class Copy(BaseCopyMove):\n     """Copies existing content objects.\n     """\n+\n     is_moving = False\n \n     def clipboard(self, parent, ids):\n@@ -117,6 +120,7 @@ def clipboard(self, parent, ids):\n class Move(BaseCopyMove):\n     """Moves existing content objects.\n     """\n+\n     is_moving = True\n \n     def clipboard(self, parent, ids):\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex 1857f226..e9899654 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -26,11 +26,11 @@\n def fix_location_header(context, request):\n     # This replaces the location header as sent by p.a.discussion\'s forms with\n     # a RESTapi compatible location.\n-    location = request.response.headers.get(\'location\')\n-    if location and \'#\' in location:\n-        comment_id = location.split(\'#\')[-1]\n-        url = \'{}/@comments/{}\'.format(context.absolute_url(), comment_id)\n-        request.response.headers[\'location\'] = url\n+    location = request.response.headers.get("location")\n+    if location and "#" in location:\n+        comment_id = location.split("#")[-1]\n+        url = "{}/@comments/{}".format(context.absolute_url(), comment_id)\n+        request.response.headers["location"] = url\n \n \n @implementer(IPublishTraverse)\n@@ -45,16 +45,10 @@ def publishTraverse(self, request, name):\n     def reply(self):\n         conversation = IConversation(self.context)\n         if not self.comment_id:\n-            serializer = getMultiAdapter(\n-                (conversation, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((conversation, self.request), ISerializeToJson)\n         else:\n             comment = conversation[self.comment_id]\n-            serializer = getMultiAdapter(\n-                (comment, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((comment, self.request), ISerializeToJson)\n         return serializer()\n \n \n@@ -65,14 +59,13 @@ class CommentsAdd(Service):\n     def publishTraverse(self, request, name):\n         if name:\n             self.comment_id = int(name)\n-            request[\'form.widgets.in_reply_to\'] = name\n+            request["form.widgets.in_reply_to"] = name\n         return self\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         conversation = IConversation(self.context)\n         if self.comment_id and self.comment_id not in list(conversation):\n@@ -82,15 +75,15 @@ def reply(self):\n         # Fake request data\n         body = json_body(self.request)\n         for key, value in body.items():\n-            self.request.form[\'form.widgets.\' + key] = value\n+            self.request.form["form.widgets." + key] = value\n \n         form = CommentForm(self.context, self.request)\n         form.update()\n \n-        action = form.actions[\'comment\']\n+        action = form.actions["comment"]\n         data, errors = form.extractData()\n         if errors:\n-            raise BadRequest({\'errors\': [err.error for err in errors]})\n+            raise BadRequest({"errors": [err.error for err in errors]})\n \n         form.handleComment(form=form, action=action)\n \n@@ -105,7 +98,7 @@ class CommentsUpdate(Service):\n     def publishTraverse(self, request, name):\n         if name:\n             self.comment_id = int(name)\n-            request[\'form.widgets.comment_id\'] = name\n+            request["form.widgets.comment_id"] = name\n         return self\n \n     def reply(self):\n@@ -125,16 +118,16 @@ def reply(self):\n         # Fake request data\n         body = json_body(self.request)\n         for key, value in body.items():\n-            self.request.form[\'form.widgets.\' + key] = value\n+            self.request.form["form.widgets." + key] = value\n \n         form = EditCommentForm(comment, self.request)\n         form.__parent__ = form.context.__parent__.__parent__\n         form.update()\n \n-        action = form.actions[\'comment\']\n+        action = form.actions["comment"]\n         data, errors = form.extractData()\n         if errors:\n-            raise BadRequest({\'errors\': [err.error for err in errors]})\n+            raise BadRequest({"errors": [err.error for err in errors]})\n \n         comment.modification_date = datetime.utcnow()\n         form.handleComment(form=form, action=action)\ndiff --git a/src/plone/restapi/services/discussion/utils.py b/src/plone/restapi/services/discussion/utils.py\nindex 7cdd2d61..2375c43f 100644\n--- a/src/plone/restapi/services/discussion/utils.py\n+++ b/src/plone/restapi/services/discussion/utils.py\n@@ -19,9 +19,9 @@ def can_edit(comment):\n     """Returns true if current user has the \'Edit comments\'\n     permission.\n     """\n-    return bool(getSecurityManager().checkPermission(\n-        \'Edit comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Edit comments", aq_inner(comment))\n+    )\n \n \n def permission_exists(permission_id):\n@@ -32,26 +32,26 @@ def permission_exists(permission_id):\n def can_review(comment):\n     """Returns true if current user has the \'Review comments\' permission.\n     """\n-    return bool(getSecurityManager().checkPermission(\n-        \'Review comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Review comments", aq_inner(comment))\n+    )\n \n \n def can_delete(comment):\n     """Returns true if current user has the \'Delete comments\'\n     permission.\n     """\n-    if not permission_exists(\'plone.app.discussion.DeleteComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return can_review(comment)\n \n-    return bool(getSecurityManager().checkPermission(\n-        \'Delete comments\', aq_inner(comment)\n-    ))\n+    return bool(\n+        getSecurityManager().checkPermission("Delete comments", aq_inner(comment))\n+    )\n \n \n def delete_own_comment_allowed():\n-    if not permission_exists(\'plone.app.discussion.DeleteOwnComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteOwnComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return False\n     # Check if delete own comments is allowed in the registry\n@@ -64,11 +64,10 @@ def can_delete_own(comment):\n     """Returns true if the current user could delete the comment if it had\n     no replies. This is used to prepare hidden form buttons for JS.\n     """\n-    if not permission_exists(\'plone.app.discussion.DeleteOwnComments\'):\n+    if not permission_exists("plone.app.discussion.DeleteOwnComments"):\n         # Older versions of p.a.discussion do not support this yet.\n         return False\n     try:\n-        return comment.restrictedTraverse(\n-            \'@@delete-own-comment\').could_delete()\n+        return comment.restrictedTraverse("@@delete-own-comment").could_delete()\n     except Unauthorized:\n         return False\ndiff --git a/src/plone/restapi/services/email_notification/post.py b/src/plone/restapi/services/email_notification/post.py\nindex 6c7681b9..5f0ea2da 100644\n--- a/src/plone/restapi/services/email_notification/post.py\n+++ b/src/plone/restapi/services/email_notification/post.py\n@@ -9,37 +9,37 @@\n \n \n class EmailNotificationPost(Service):\n-\n     def reply(self):\n         data = json_body(self.request)\n \n-        sender_from_address = data.get(\'from\', None)\n-        message = data.get(\'message\', None)\n-        sender_fullname = data.get(\'name\', \'\')\n-        subject = data.get(\'subject\', \'\')\n+        sender_from_address = data.get("from", None)\n+        message = data.get("message", None)\n+        sender_fullname = data.get("name", "")\n+        subject = data.get("subject", "")\n \n         if not sender_from_address or not message:\n-            raise BadRequest(\'Missing from or message parameters\')\n+            raise BadRequest("Missing from or message parameters")\n \n-        overview_controlpanel = getMultiAdapter((self.context, self.request),\n-                                                name=\'overview-controlpanel\')\n+        overview_controlpanel = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if overview_controlpanel.mailhost_warning():\n-            raise BadRequest(\'MailHost is not configured.\')\n+            raise BadRequest("MailHost is not configured.")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        contact_info_view = getMultiAdapter((self.context, self.request),\n-                                            name=\'contact-info\')\n+        contact_info_view = getMultiAdapter(\n+            (self.context, self.request), name="contact-info"\n+        )\n \n         contact_info_view.send_message(\n             dict(\n                 message=message,\n                 subject=subject,\n                 sender_from_address=sender_from_address,\n-                sender_fullname=sender_fullname\n+                sender_fullname=sender_fullname,\n             )\n         )\n \ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex f142e1be..61c1f61b 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -18,102 +18,106 @@\n \n \n class EmailSendPost(Service):\n-\n     def reply(self):\n         data = json_body(self.request)\n \n-        send_to_address = data.get(\'to\', None)\n-        sender_from_address = data.get(\'from\', None)\n-        message = data.get(\'message\', None)\n-        sender_fullname = data.get(\'name\', \'\')\n-        subject = data.get(\'subject\', \'\')\n+        send_to_address = data.get("to", None)\n+        sender_from_address = data.get("from", None)\n+        message = data.get("message", None)\n+        sender_fullname = data.get("name", "")\n+        subject = data.get("subject", "")\n \n         if not send_to_address or not sender_from_address or not message:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing "to", "from" or "message" parameters\'))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message=\'Missing "to", "from" or "message" parameters\',\n+                )\n+            )\n \n-        overview_controlpanel = getMultiAdapter((self.context, self.request),\n-                                                name=\'overview-controlpanel\')\n+        overview_controlpanel = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if overview_controlpanel.mailhost_warning():\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'MailHost is not configured.\'))\n+            return dict(\n+                error=dict(type="BadRequest", message="MailHost is not configured.")\n+            )\n \n         sm = getSecurityManager()\n         if not sm.checkPermission(use_mailhost_services, self.context):\n-            pm = getToolByName(self.context, \'portal_membership\')\n+            pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\n                 self.request.response.setStatus(401)\n-                error_type = \'Unauthorized\'\n+                error_type = "Unauthorized"\n             else:\n                 self.request.response.setStatus(403)\n-                error_type = \'Forbidden\'\n-            return dict(error=dict(\n-                type=error_type,\n-                message=message))\n+                error_type = "Forbidden"\n+            return dict(error=dict(type=error_type, message=message))\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_address = mail_settings.email_from_address\n-        encoding = registry.get(\'plone.email_charset\', \'utf-8\')\n-        host = getToolByName(self.context, \'MailHost\')\n+        encoding = registry.get("plone.email_charset", "utf-8")\n+        host = getToolByName(self.context, "MailHost")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         portal_title = site_settings.site_title\n \n         if not subject:\n             if not sender_fullname:\n                 subject = self.context.translate(\n-                    _(u\'A portal user via ${portal_title}\',\n-                      mapping={\'portal_title\': portal_title})\n+                    _(\n+                        u"A portal user via ${portal_title}",\n+                        mapping={"portal_title": portal_title},\n+                    )\n                 )\n             else:\n                 subject = self.context.translate(\n-                    _(u\'${sender_fullname} via ${portal_title}\',\n+                    _(\n+                        u"${sender_fullname} via ${portal_title}",\n                         mapping={\n-                            \'sender_fullname\': sender_fullname,\n-                            \'portal_title\': portal_title})\n+                            "sender_fullname": sender_fullname,\n+                            "portal_title": portal_title,\n+                        },\n+                    )\n                 )\n \n         message_intro = self.context.translate(\n-            _(u\'You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:\', # noqa\n-              mapping={\n-                \'sender_fullname\': sender_fullname or \'a portal user\',\n-                \'portal_title\': portal_title\n-              })\n+            _(\n+                u"You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n+                mapping={\n+                    "sender_fullname": sender_fullname or "a portal user",\n+                    "portal_title": portal_title,\n+                },\n+            )\n         )\n \n-        message = u\'{} \\n {}\'.format(message_intro, message)\n+        message = u"{} \\n {}".format(message_intro, message)\n \n-        message = MIMEText(message, \'plain\', encoding)\n-        message[\'Reply-To\'] = sender_from_address\n+        message = MIMEText(message, "plain", encoding)\n+        message["Reply-To"] = sender_from_address\n         try:\n             host.send(\n                 message,\n                 send_to_address,\n                 from_address,\n                 subject=subject,\n-                charset=encoding\n+                charset=encoding,\n             )\n \n         except (SMTPException, RuntimeError):\n-            plone_utils = getToolByName(self.context, \'plone_utils\')\n+            plone_utils = getToolByName(self.context, "plone_utils")\n             exception = plone_utils.exceptionString()\n-            message = \'Unable to send mail: {}\'.format(exception)\n+            message = "Unable to send mail: {}".format(exception)\n \n             self.request.response.setStatus(500)\n-            return dict(error=dict(\n-                type=\'InternalServerError\',\n-                message=message))\n+            return dict(error=dict(type="InternalServerError", message=message))\n \n         self.request.response.setStatus(204)\n         return\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex bb3e2acb..499d821f 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -19,26 +19,22 @@ def reply(self):\n         portal = getSite()\n         data = json_body(self.request)\n \n-        groupname = data.get(\'groupname\', None)\n+        groupname = data.get("groupname", None)\n \n         if not groupname:\n             raise BadRequest("Property \'groupname\' is required")\n \n-        email = data.get(\'email\', None)\n-        title = data.get(\'title\', None)\n-        description = data.get(\'description\', None)\n-        roles = data.get(\'roles\', None)\n-        groups = data.get(\'groups\', None)\n-        users = data.get(\'users\', [])\n+        email = data.get("email", None)\n+        title = data.get("title", None)\n+        description = data.get("description", None)\n+        roles = data.get("roles", None)\n+        groups = data.get("groups", None)\n+        users = data.get("users", [])\n \n-        properties = {\n-            \'title\': title,\n-            \'description\': description,\n-            \'email\': email,\n-        }\n+        properties = {"title": title, "description": description, "email": email}\n \n-        gtool = getToolByName(self.context, \'portal_groups\')\n-        regtool = getToolByName(self.context, \'portal_registration\')\n+        gtool = getToolByName(self.context, "portal_groups")\n+        regtool = getToolByName(self.context, "portal_registration")\n \n         if not regtool.isMemberIdAllowed(groupname):\n             raise BadRequest("The group name you entered is not valid.")\n@@ -48,17 +44,21 @@ def reply(self):\n             raise BadRequest("The group name you entered already exists.")\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        success = gtool.addGroup(groupname, roles, groups,\n-                                 properties=properties,\n-                                 title=title,\n-                                 description=description)\n+        success = gtool.addGroup(\n+            groupname,\n+            roles,\n+            groups,\n+            properties=properties,\n+            title=title,\n+            description=description,\n+        )\n         if not success:\n             raise BadRequest(\n-                "Error occurred, could not add group {}.".format(groupname))\n+                "Error occurred, could not add group {}.".format(groupname)\n+            )\n \n         # Add members\n         group = gtool.getGroupById(groupname)\n@@ -67,10 +67,7 @@ def reply(self):\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@groups/\' + groupname\n-        )\n-        serializer = queryMultiAdapter(\n-            (group, self.request),\n-            ISerializeToJson\n+            "Location", portal.absolute_url() + "/@groups/" + groupname\n         )\n+        serializer = queryMultiAdapter((group, self.request), ISerializeToJson)\n         return serializer()\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex 13b7046a..a05e780c 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -24,22 +24,21 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def reply(self):\n \n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n+        portal_groups = getToolByName(self.context, "portal_groups")\n         group = self._get_group(self._get_group_id)\n \n         if not group:\n-            raise NotFound(\'Trying to delete a non-existing group.\')\n+            raise NotFound("Trying to delete a non-existing group.")\n \n         delete_successful = portal_groups.removeGroup(self._get_group_id)\n         if delete_successful:\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 0b7c88cd..d1c5a570 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class GroupsGet(Service):\n-\n     def __init__(self, context, request):\n         super(GroupsGet, self).__init__(context, request)\n         self.params = []\n@@ -28,38 +27,35 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def _get_groups(self):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.listGroups()\n \n     def _get_filtered_groups(self, query, limit):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         results = portal_groups.searchGroups(id=query, max_results=limit)\n-        return [portal_groups.getGroupById(group[\'groupid\'])\n-                for group in results]\n+        return [portal_groups.getGroupById(group["groupid"]) for group in results]\n \n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n-            query = self.query.get(\'query\', \'\')\n-            limit = self.query.get(\'limit\', DEFAULT_SEARCH_RESULTS_LIMIT)\n+            query = self.query.get("query", "")\n+            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 groups = self._get_filtered_groups(query, limit)\n                 result = []\n                 for group in groups:\n                     serializer = queryMultiAdapter(\n-                        (group, self.request),\n-                        ISerializeToJsonSummary\n+                        (group, self.request), ISerializeToJsonSummary\n                     )\n                     result.append(serializer())\n                 return result\n@@ -70,8 +66,7 @@ def reply(self):\n             result = []\n             for group in self._get_groups():\n                 serializer = queryMultiAdapter(\n-                    (group, self.request),\n-                    ISerializeToJsonSummary\n+                    (group, self.request), ISerializeToJsonSummary\n                 )\n                 result.append(serializer())\n             return result\n@@ -80,8 +75,5 @@ def reply(self):\n         if not group:\n             self.request.response.setStatus(404)\n             return\n-        serializer = queryMultiAdapter(\n-            (group, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = queryMultiAdapter((group, self.request), ISerializeToJson)\n         return serializer()\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 46b22e09..f25b75ed 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -27,13 +27,12 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_group_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (group id)")\n+            raise Exception("Must supply exactly one parameter (group id)")\n         return self.params[0]\n \n     def _get_group(self, group_id):\n         portal = getSite()\n-        portal_groups = getToolByName(portal, \'portal_groups\')\n+        portal_groups = getToolByName(portal, "portal_groups")\n         return portal_groups.getGroupById(group_id)\n \n     def reply(self):\n@@ -41,23 +40,27 @@ def reply(self):\n         group = self._get_group(self._get_group_id)\n \n         if not group:\n-            raise BadRequest(\'Trying to update a non-existing group.\')\n+            raise BadRequest("Trying to update a non-existing group.")\n \n-        title = data.get(\'title\', None)\n-        description = data.get(\'description\', None)\n-        roles = data.get(\'roles\', None)\n-        groups = data.get(\'groups\', None)\n-        users = data.get(\'users\', {})\n+        title = data.get("title", None)\n+        description = data.get("description", None)\n+        roles = data.get("roles", None)\n+        groups = data.get("groups", None)\n+        users = data.get("users", {})\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n-\n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n-\n-        portal_groups.editGroup(self._get_group_id, roles=roles, groups=groups,\n-                                title=title, description=description)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        portal_groups = getToolByName(self.context, "portal_groups")\n+\n+        portal_groups.editGroup(\n+            self._get_group_id,\n+            roles=roles,\n+            groups=groups,\n+            title=title,\n+            description=description,\n+        )\n \n         properties = {}\n         for id, property in group.propertyItems():\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 4354a288..cdb5f67b 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class HistoryGet(Service):\n-\n     def __init__(self, context, request):\n         super(HistoryGet, self).__init__(context, request)\n         self.version = None\n@@ -34,10 +33,7 @@ def reply(self):\n \n         # Listing historical data\n         content_history_viewlet = ContentHistoryViewlet(\n-            self.context,\n-            self.request,\n-            None,\n-            None\n+            self.context, self.request, None, None\n         )\n         site_url = getSite().absolute_url()\n         content_history_viewlet.navigation_root_url = site_url\n@@ -45,61 +41,57 @@ def reply(self):\n         history = content_history_viewlet.fullHistory()\n \n         unwanted_keys = [\n-            \'diff_current_url\',\n-            \'diff_previous_url\',\n-            \'preview_url\',\n-            \'actor_home\',\n-            \'actorid\',\n-            \'revert_url\',\n-            \'version_id\',\n+            "diff_current_url",\n+            "diff_previous_url",\n+            "preview_url",\n+            "actor_home",\n+            "actorid",\n+            "revert_url",\n+            "version_id",\n         ]\n \n         for item in history:\n-            item[\'actor\'] = {\n-                \'@id\': \'{}/@users/{}\'.format(site_url, item[\'actorid\']),\n-                \'id\': item[\'actorid\'],\n-                \'fullname\': item[\'actor\'].get(\'fullname\'),\n-                \'username\': item[\'actor\'].get(\'username\'),\n+            item["actor"] = {\n+                "@id": "{}/@users/{}".format(site_url, item["actorid"]),\n+                "id": item["actorid"],\n+                "fullname": item["actor"].get("fullname"),\n+                "username": item["actor"].get("username"),\n             }\n \n-            if item[\'type\'] == \'versioning\':\n-                item[\'version\'] = item[\'version_id\']\n-                item[\'@id\'] = \'{}/@history/{}\'.format(\n-                    self.context.absolute_url(),\n-                    item[\'version\']\n+            if item["type"] == "versioning":\n+                item["version"] = item["version_id"]\n+                item["@id"] = "{}/@history/{}".format(\n+                    self.context.absolute_url(), item["version"]\n                 )\n \n                 # If a revert_url is present, then CMFEditions has checked our\n                 # permissions.\n-                item[\'may_revert\'] = bool(item.get(\'revert_url\'))\n+                item["may_revert"] = bool(item.get("revert_url"))\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item[\'time\'], six.string_types):\n-                item[\'time\'] = dt.fromtimestamp(item[\'time\']).isoformat()\n+            if not isinstance(item["time"], six.string_types):\n+                item["time"] = dt.fromtimestamp(item["time"]).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\n             # \'Create\', alike the transition_title\n-            if item[\'action\'] is None:\n-                item[\'action\'] = \'Create\'\n+            if item["action"] is None:\n+                item["action"] = "Create"\n \n             # We want action, state and transition names translated\n-            if \'state_title\' in item:\n-                item[\'state_title\'] = self.context.translate(\n-                    safe_unicode(item[\'state_title\']),\n-                    context=self.request\n+            if "state_title" in item:\n+                item["state_title"] = self.context.translate(\n+                    safe_unicode(item["state_title"]), context=self.request\n                 )\n \n-            if \'transition_title\' in item:\n-                item[\'transition_title\'] = self.context.translate(\n-                    safe_unicode(item[\'transition_title\']),\n-                    context=self.request\n+            if "transition_title" in item:\n+                item["transition_title"] = self.context.translate(\n+                    safe_unicode(item["transition_title"]), context=self.request\n                 )\n \n-            if \'action\' in item:\n-                item[\'action\'] = self.context.translate(\n-                    safe_unicode(item[\'action\']),\n-                    context=self.request\n+            if "action" in item:\n+                item["action"] = self.context.translate(\n+                    safe_unicode(item["action"]), context=self.request\n                 )\n \n             # clean up\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 0b759a2b..fe8cf314 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -10,33 +10,33 @@\n \n \n class HistoryPatch(Service):\n-\n     def reply(self):\n         body = json_body(self.request)\n-        message = revert(self.context, body[\'version\'])\n+        message = revert(self.context, body["version"])\n         return json_compatible(message)\n \n \n def revert(context, version):\n-    pr = getToolByName(context, \'portal_repository\')\n+    pr = getToolByName(context, "portal_repository")\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n     if not isinstance(title, six.text_type):\n-        title = six.text_type(title, \'utf-8\', \'ignore\')\n+        title = six.text_type(title, "utf-8", "ignore")\n \n-    if pr.supportsPolicy(context, \'version_on_revert\'):\n+    if pr.supportsPolicy(context, "version_on_revert"):\n         try:\n             commit_msg = context.translate(\n-                _(u\'Reverted to revision ${version}\',\n-                  mapping={\'version\': version})\n+                _(u"Reverted to revision ${version}", mapping={"version": version})\n             )\n             pr.save(obj=context, comment=commit_msg)\n         except FileTooLargeToVersionError:\n-            error_msg = \'The most current revision of the file could not \' + \\\n-                        \'be saved before reverting because the file is \' + \\\n-                        \'too large.\'\n-            raise BadRequest({\'errors\': error_msg, })\n+            error_msg = (\n+                "The most current revision of the file could not "\n+                + "be saved before reverting because the file is "\n+                + "too large."\n+            )\n+            raise BadRequest({"errors": error_msg})\n \n-    msg = u\'{} has been reverted to revision {}.\'.format(title, version)\n-    return {\'message\': msg}\n+    msg = u"{} has been reverted to revision {}.".format(title, version)\n+    return {"message": msg}\ndiff --git a/src/plone/restapi/services/locking/locking.py b/src/plone/restapi/services/locking/locking.py\nindex 9037879e..981d7447 100644\n--- a/src/plone/restapi/services/locking/locking.py\n+++ b/src/plone/restapi/services/locking/locking.py\n@@ -20,17 +20,18 @@ def reply(self):\n         if lockable is not None:\n             lockable.lock()\n \n-            if \'stealable\' in data and not data[\'stealable\']:\n+            if "stealable" in data and not data["stealable"]:\n                 alsoProvides(self.context, INonStealableLock)\n \n-            if \'timeout\' in data:\n+            if "timeout" in data:\n                 lock_item = webdav_lock(self.context)\n-                lock_item.setTimeout("Second-%s" % data[\'timeout\'])\n+                lock_item.setTimeout("Second-%s" % data["timeout"])\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -47,9 +48,10 @@ def reply(self):\n                 noLongerProvides(self.context, INonStealableLock)\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -63,9 +65,10 @@ def reply(self):\n             lockable.refresh_lock()\n \n             # Disable CSRF protection\n-            if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-                alsoProvides(self.request,\n-                             plone.protect.interfaces.IDisableCSRFProtection)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n \n         return lock_info(self.context)\n \n@@ -81,21 +84,18 @@ def lock_info(obj):\n     """Returns lock information about the given object."""\n     lockable = ILockable(obj, None)\n     if lockable is not None:\n-        info = {\n-            \'locked\': lockable.locked(),\n-            \'stealable\': lockable.stealable(),\n-        }\n+        info = {"locked": lockable.locked(), "stealable": lockable.stealable()}\n         lock_info = lockable.lock_info()\n         if len(lock_info) > 0:\n-            info[\'creator\'] = lock_info[0][\'creator\']\n-            info[\'time\'] = lock_info[0][\'time\']\n-            info[\'token\'] = lock_info[0][\'token\']\n-            lock_type = lock_info[0][\'type\']\n+            info["creator"] = lock_info[0]["creator"]\n+            info["time"] = lock_info[0]["time"]\n+            info["token"] = lock_info[0]["token"]\n+            lock_type = lock_info[0]["type"]\n             if lock_type:\n-                info[\'name\'] = lock_info[0][\'type\'].__name__\n+                info["name"] = lock_info[0]["type"].__name__\n             lock_item = webdav_lock(obj)\n             if lock_item:\n-                info[\'timeout\'] = lock_item.getTimeout()\n+                info["timeout"] = lock_item.getTimeout()\n         return info\n \n \n@@ -107,7 +107,7 @@ def webdav_lock(obj):\n \n     lock_info = lockable.lock_info()\n     if len(lock_info) > 0:\n-        token = lock_info[0][\'token\']\n+        token = lock_info[0]["token"]\n         return obj.wl_getLock(token)\n \n \n@@ -119,9 +119,9 @@ def is_locked(obj, request):\n     if lockable is None:\n         return False\n     if lockable.locked():\n-        token = request.getHeader(\'Lock-Token\', \'\')\n+        token = request.getHeader("Lock-Token", "")\n         lock_info = lockable.lock_info()\n-        if len(lock_info) > 0 and lock_info[0][\'token\'] == token:\n+        if len(lock_info) > 0 and lock_info[0]["token"] == token:\n             return False\n         return True\n     return False\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex bd2ec0e8..37fa6735 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -23,9 +23,9 @@ def __init__(self, context, request):\n \n     def __call__(self, expand=False):\n         result = {\n-            \'translations\': {\n-                \'@id\': \'{}/@translations\'.format(self.context.absolute_url()),\n-            },\n+            "translations": {\n+                "@id": "{}/@translations".format(self.context.absolute_url())\n+            }\n         }\n         if not expand:\n             return result\n@@ -34,12 +34,11 @@ def __call__(self, expand=False):\n         manager = ITranslationManager(self.context)\n         for language, translation in manager.get_translations().items():\n             if language != ILanguage(self.context).get_language():\n-                translations.append({\n-                    \'@id\': translation.absolute_url(),\n-                    \'language\': language,\n-                })\n+                translations.append(\n+                    {"@id": translation.absolute_url(), "language": language}\n+                )\n \n-        result[\'translations\'][\'items\'] = translations\n+        result["translations"]["items"] = translations\n         return result\n \n \n@@ -49,7 +48,7 @@ class TranslationInfo(Service):\n \n     def reply(self):\n         translations = Translations(self.context, self.request)\n-        return translations(expand=True)[\'translations\']\n+        return translations(expand=True)["translations"]\n \n \n class LinkTranslations(Service):\n@@ -58,48 +57,48 @@ class LinkTranslations(Service):\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         data = json_body(self.request)\n-        id_ = data.get(\'id\', None)\n+        id_ = data.get("id", None)\n         if id_ is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing content id to link to\'))\n+            return dict(\n+                error=dict(type="BadRequest", message="Missing content id to link to")\n+            )\n \n         target = self._traverse(id_)\n         if target is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Content does not exist\'))\n+            return dict(error=dict(type="BadRequest", message="Content does not exist"))\n \n         target_language = ILanguage(target).get_language()\n         manager = ITranslationManager(self.context)\n         current_translation = manager.get_translation(target_language)\n         if current_translation is not None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Already translated into language {}\'.format(\n-                    target_language)))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="Already translated into language {}".format(\n+                        target_language\n+                    ),\n+                )\n+            )\n \n         manager.register_translation(target_language, target)\n         self.request.response.setStatus(201)\n-        self.request.response.setHeader(\n-            \'Location\', self.context.absolute_url())\n+        self.request.response.setHeader("Location", self.context.absolute_url())\n         return {}\n \n     def _traverse(self, url):\n-        purl = getToolByName(self.context, \'portal_url\')\n+        purl = getToolByName(self.context, "portal_url")\n         portal = purl.getPortalObject()\n         portal_url = portal.absolute_url()\n         if url.startswith(portal_url):\n-            content_path = url[len(portal_url)+1:]\n-            content_path = content_path.split(\'/\')\n+            content_path = url[len(portal_url) + 1 :]\n+            content_path = content_path.split("/")\n             content_item = portal.restrictedTraverse(content_path)\n             return content_item\n \n@@ -112,25 +111,29 @@ class UnlinkTranslations(Service):\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         data = json_body(self.request)\n         manager = ITranslationManager(self.context)\n-        language = data.get(\'language\', None)\n+        language = data.get("language", None)\n         if language is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'You need to provide the language to unlink\'))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="You need to provide the language to unlink",\n+                )\n+            )\n \n         if language not in list(manager.get_translations()):\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'This objects is not translated into {}\'.format(\n-                    language)))\n+            return dict(\n+                error=dict(\n+                    type="BadRequest",\n+                    message="This objects is not translated into {}".format(language),\n+                )\n+            )\n \n         manager.remove_translation(language)\n         self.request.response.setStatus(204)\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 8e9e2e93..3bcc0d1e 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -18,9 +18,11 @@ class NavigationTreeQueryBuilder(NavtreeQueryBuilder):\n \n     def __init__(self, context, depth):\n         NavtreeQueryBuilder.__init__(self, context)\n-        self.query[\'path\'] = {\'query\': \'/\'.join(context.getPhysicalPath()),\n-                              \'navtree_start\': 1,\n-                              \'depth\': depth - 1}\n+        self.query["path"] = {\n+            "query": "/".join(context.getPhysicalPath()),\n+            "navtree_start": 1,\n+            "depth": depth - 1,\n+        }\n \n \n class CustomNavtreeStrategy(SitemapNavtreeStrategy):\n@@ -37,7 +39,7 @@ def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n         if sitemapDecision is False:\n             return False\n-        depth = node.get(\'depth\', 0)\n+        depth = node.get("depth", 0)\n         if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n             return False\n         else:\n@@ -46,15 +48,17 @@ def subtreeFilter(self, node):\n     def getRootPath(self, topLevel=1):\n         rootPath = getNavigationRoot(self.context)\n \n-        contextPath = \'/\'.join(self.context.getPhysicalPath())\n+        contextPath = "/".join(self.context.getPhysicalPath())\n         if not contextPath.startswith(rootPath):\n             return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1:]\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n         if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split(\'/\')\n+            contextSubPathElements = contextSubPathElements.split("/")\n             if len(contextSubPathElements) < topLevel:\n                 return None\n-            rootPath = rootPath + \'/\' + \'/\'.join(contextSubPathElements[:topLevel]) # noqa\n+            rootPath = (\n+                rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n+            )  # noqa\n         else:\n             return None\n \n@@ -64,98 +68,95 @@ def getRootPath(self, topLevel=1):\n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n class Navigation(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n         self.portal = getSite()\n \n     def __call__(self, expand=False):\n-        if self.request.form.get(\'expand.navigation.depth\', False):\n-            self.depth = int(self.request.form[\'expand.navigation.depth\'])\n+        if self.request.form.get("expand.navigation.depth", False):\n+            self.depth = int(self.request.form["expand.navigation.depth"])\n         else:\n             self.depth = 1\n \n         result = {\n-            \'navigation\': {\n-                \'@id\': \'{}/@navigation\'.format(self.context.absolute_url()),\n-            },\n+            "navigation": {"@id": "{}/@navigation".format(self.context.absolute_url())}\n         }\n         if not expand:\n             return result\n \n-        tabs = getMultiAdapter((self.context, self.request),\n-                               name="portal_tabs_view")\n+        tabs = getMultiAdapter((self.context, self.request), name="portal_tabs_view")\n         items = []\n         for tab in tabs.topLevelTabs():\n             if self.depth > 1:\n-                subitems = self.getTabSubTree(tabUrl=tab[\'url\'],\n-                                              tabPath=tab.get(\'path\'))\n-                items.append({\n-                    \'title\': tab.get(\'title\', tab.get(\'name\')),\n-                    \'@id\': tab[\'url\'] + \'\',\n-                    \'description\': tab.get(\'description\', \'\'),\n-                    \'items\': subitems,\n-                })\n+                subitems = self.getTabSubTree(\n+                    tabUrl=tab["url"], tabPath=tab.get("path")\n+                )\n+                items.append(\n+                    {\n+                        "title": tab.get("title", tab.get("name")),\n+                        "@id": tab["url"] + "",\n+                        "description": tab.get("description", ""),\n+                        "items": subitems,\n+                    }\n+                )\n             else:\n-                items.append({\n-                    \'title\': tab.get(\'title\', tab.get(\'name\')),\n-                    \'@id\': tab[\'url\'] + \'\',\n-                    \'description\': tab.get(\'description\', \'\'),\n-                })\n-        result[\'navigation\'][\'items\'] = items\n+                items.append(\n+                    {\n+                        "title": tab.get("title", tab.get("name")),\n+                        "@id": tab["url"] + "",\n+                        "description": tab.get("description", ""),\n+                    }\n+                )\n+        result["navigation"]["items"] = items\n         return result\n \n-    def getTabSubTree(self, tabUrl=\'\', tabPath=None):\n+    def getTabSubTree(self, tabUrl="", tabPath=None):\n         if tabPath is None:\n             # get path for current tab\'s object\n             tabPath = tabUrl.split(self.portal.absolute_url())[-1]\n \n-            if tabPath == \'\' or \'/view\' in tabPath:\n-                return \'\'\n+            if tabPath == "" or "/view" in tabPath:\n+                return ""\n \n-            if tabPath.startswith(\'/\'):\n+            if tabPath.startswith("/"):\n                 tabPath = tabPath[1:]\n-            elif tabPath.endswith(\'/\'):\n+            elif tabPath.endswith("/"):\n                 # we need a real path, without a slash that might appear\n                 # at the end of the path occasionally\n-                tabPath = str(tabPath.split(\'/\')[0])\n+                tabPath = str(tabPath.split("/")[0])\n \n-            if \'%20\' in tabPath:\n+            if "%20" in tabPath:\n                 # we have the space in object\'s ID that has to be\n                 # converted to the real spaces\n-                tabPath = tabPath.replace(\'%20\', \' \').strip()\n+                tabPath = tabPath.replace("%20", " ").strip()\n \n         tabObj = self.portal.restrictedTraverse(tabPath, None)\n         if tabObj is None:\n-            return \'\'\n+            return ""\n \n         strategy = CustomNavtreeStrategy(tabObj)\n         queryBuilder = NavigationTreeQueryBuilder(tabObj, self.depth)\n         query = queryBuilder()\n-        data = buildFolderTree(\n-            tabObj, obj=tabObj, query=query, strategy=strategy)\n+        data = buildFolderTree(tabObj, obj=tabObj, query=query, strategy=strategy)\n \n-        return self.recurse(\n-            children=data.get(\'children\', []),\n-            level=1)\n+        return self.recurse(children=data.get("children", []), level=1)\n \n     def recurse(self, children=None, level=0, bottomLevel=0):\n         li = []\n         for node in children:\n-            item = {\'title\': node[\'Title\'], \'description\': node[\'Description\']}\n-            item[\'@id\'] = node[\'getURL\']\n+            item = {"title": node["Title"], "description": node["Description"]}\n+            item["@id"] = node["getURL"]\n             if bottomLevel <= 0 or level <= bottomLevel:\n-                nc = node[\'children\']\n-                nc = self.recurse(nc, level+1, bottomLevel)\n+                nc = node["children"]\n+                nc = self.recurse(nc, level + 1, bottomLevel)\n                 if nc:\n-                    item[\'items\'] = nc\n+                    item["items"] = nc\n             li.append(item)\n         return li\n \n \n class NavigationGet(Service):\n-\n     def reply(self):\n         navigation = Navigation(self.context, self.request)\n-        return navigation(expand=True)[\'navigation\']\n+        return navigation(expand=True)["navigation"]\ndiff --git a/src/plone/restapi/services/principals/get.py b/src/plone/restapi/services/principals/get.py\nindex 658977e2..4473231e 100644\n--- a/src/plone/restapi/services/principals/get.py\n+++ b/src/plone/restapi/services/principals/get.py\n@@ -9,12 +9,11 @@\n \n \n class PrincipalsGet(Service):\n-\n     def reply(self):\n-        if self.request.form.get(\'search\', False):\n-            self.search_term = self.request.form[\'search\']\n+        if self.request.form.get("search", False):\n+            self.search_term = self.request.form["search"]\n         else:\n-            raise BadRequest(\'Required \\"search\\" parameter is missing.\')\n+            raise BadRequest(\'Required "search" parameter is missing.\')\n \n         users = self.serialize_principals(self.user_search_results())\n         groups = self.serialize_principals(self.group_search_results())\n@@ -27,8 +26,7 @@ def serialize_principals(self, principals):\n         result = []\n         for principal in principals:\n             serializer = getMultiAdapter(\n-                (principal, self.request),\n-                ISerializeToJsonSummary\n+                (principal, self.request), ISerializeToJsonSummary\n             )\n             result.append(serializer())\n         return result\n@@ -36,37 +34,48 @@ def serialize_principals(self, principals):\n     def user_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n-                chain(*[hunter.searchUsers(**{field: search_term})\n-                      for field in [\'name\', \'fullname\', \'email\']]), \'userid\')\n+                chain(\n+                    *[\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    ]\n+                ),\n+                "userid",\n+            )\n \n         def get_principal_by_id(user_id):\n-            mtool = getToolByName(self.context, \'portal_membership\')\n+            mtool = getToolByName(self.context, "portal_membership")\n             return mtool.getMemberById(user_id)\n \n         return self._principal_search_results(\n-            search_for_principal, get_principal_by_id, \'user\', \'userid\')\n+            search_for_principal, get_principal_by_id, "user", "userid"\n+        )\n \n     def group_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n-                chain(*[hunter.searchGroups(**{field: search_term})\n-                      for field in [\'id\', \'title\']]), \'groupid\')\n+                chain(\n+                    *[\n+                        hunter.searchGroups(**{field: search_term})\n+                        for field in ["id", "title"]\n+                    ]\n+                ),\n+                "groupid",\n+            )\n \n         def get_principal_by_id(group_id):\n-            portal_groups = getToolByName(self.context, \'portal_groups\')\n+            portal_groups = getToolByName(self.context, "portal_groups")\n             return portal_groups.getGroupById(group_id)\n \n         return self._principal_search_results(\n-            search_for_principal, get_principal_by_id, \'group\', \'groupid\')\n+            search_for_principal, get_principal_by_id, "group", "groupid"\n+        )\n \n     def _principal_search_results(\n-            self, search_for_principal,\n-            get_principal_by_id,\n-            principal_type,\n-            id_key):\n+        self, search_for_principal, get_principal_by_id, principal_type, id_key\n+    ):\n \n-        hunter = getMultiAdapter(\n-            (self.context, self.request), name=\'pas_search\')\n+        hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n \n         principals = []\n         for principal_info in search_for_principal(hunter, self.search_term):\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex ed53e17d..649ff88d 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -9,7 +9,6 @@\n \n @implementer(IPublishTraverse)\n class RegistryGet(Service):\n-\n     def __init__(self, context, request):\n         super(RegistryGet, self).__init__(context, request)\n         self.params = []\n@@ -24,7 +23,8 @@ def _get_record_name(self):\n         if len(self.params) != 1:\n             raise Exception(\n                 "Must supply exactly one parameter (dotted name of"\n-                "the record to be retrieved)")\n+                "the record to be retrieved)"\n+            )\n \n         return self.params[0]\n \n@@ -34,7 +34,5 @@ def reply(self):\n             value = registry[self._get_record_name]\n             return value\n         else:  # batched listing\n-            serializer = getMultiAdapter(\n-                (registry, self.request), ISerializeToJson\n-            )\n+            serializer = getMultiAdapter((registry, self.request), ISerializeToJson)\n             return serializer()\ndiff --git a/src/plone/restapi/services/registry/update.py b/src/plone/restapi/services/registry/update.py\nindex bc24f176..1cb6f754 100644\n--- a/src/plone/restapi/services/registry/update.py\n+++ b/src/plone/restapi/services/registry/update.py\n@@ -9,21 +9,20 @@\n \n \n class RegistryUpdate(Service):\n-\n     def reply(self):\n-        records_to_update = json.loads(self.request.get(\'BODY\', \'{}\'))\n+        records_to_update = json.loads(self.request.get("BODY", "{}"))\n         registry = getUtility(IRegistry)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         for key, value in records_to_update.items():\n             if key not in registry:\n                 raise NotImplementedError(\n                     "This endpoint is only intended to update existing "\n-                    "records! Couldn\'t find key %r" % key)\n+                    "records! Couldn\'t find key %r" % key\n+                )\n             registry[key] = value\n         self.request.response.setStatus(204)\n         return None\ndiff --git a/src/plone/restapi/services/roles/get.py b/src/plone/restapi/services/roles/get.py\nindex b51d69e6..aafc81e9 100644\n--- a/src/plone/restapi/services/roles/get.py\n+++ b/src/plone/restapi/services/roles/get.py\n@@ -6,16 +6,15 @@\n \n \n class RolesGet(Service):\n-\n     def reply(self):\n-        pmemb = getToolByName(aq_inner(self.context), \'portal_membership\')\n-        roles = [r for r in pmemb.getPortalRoles() if r != \'Owner\']\n+        pmemb = getToolByName(aq_inner(self.context), "portal_membership")\n+        roles = [r for r in pmemb.getPortalRoles() if r != "Owner"]\n         return [\n             {\n-                \'@type\': \'role\',\n-                \'@id\': \'{}/@roles/{}\'.format(self.context.absolute_url(), r),\n-                \'id\': r,\n-                \'title\': translate(r, context=self.request, domain=\'plone\'),\n+                "@type": "role",\n+                "@id": "{}/@roles/{}".format(self.context.absolute_url(), r),\n+                "id": r,\n+                "title": translate(r, context=self.request, domain="plone"),\n             }\n             for r in roles\n         ]\ndiff --git a/src/plone/restapi/services/search/get.py b/src/plone/restapi/services/search/get.py\nindex 2ddade4a..1135a1e8 100644\n--- a/src/plone/restapi/services/search/get.py\n+++ b/src/plone/restapi/services/search/get.py\n@@ -5,7 +5,6 @@\n \n \n class SearchGet(Service):\n-\n     def reply(self):\n         query = self.request.form.copy()\n         query = unflatten_dotted_dict(query)\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex 0da486c7..bc2541da 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -13,7 +13,6 @@\n \n @implementer(IPublishTraverse)\n class TilesGet(Service):\n-\n     def __init__(self, context, request):\n         super(TilesGet, self).__init__(context, request)\n         self.params = []\n@@ -28,23 +27,19 @@ def reply(self):\n             self.content_type = "application/json+schema"\n             try:\n                 tile = getUtility(ITileType, name=self.params[0])\n-                return getMultiAdapter(\n-                    (tile, self.request), ISerializeToJson)()\n+                return getMultiAdapter((tile, self.request), ISerializeToJson)()\n             except KeyError:\n                 self.content_type = "application/json"\n                 self.request.response.setStatus(404)\n                 return {\n-                    \'type\': \'NotFound\',\n-                    \'message\': \'Tile "{}" could not be found.\'.format(\n-                        self.params[0]\n-                    )\n+                    "type": "NotFound",\n+                    "message": \'Tile "{}" could not be found.\'.format(self.params[0]),\n                 }\n \n         result = []\n         tiles = getUtilitiesFor(ITileType, context=self.context)\n         for name, tile in tiles:\n-            serializer = getMultiAdapter(\n-                (tile, self.request), ISerializeToJsonSummary)\n+            serializer = getMultiAdapter((tile, self.request), ISerializeToJsonSummary)\n             if checkPermission(tile.add_permission, self.context):\n                 result.append(serializer())\n \ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 64da46ab..495a482d 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class TypesGet(Service):\n-\n     def __init__(self, context, request):\n         super(TypesGet, self).__init__(context, request)\n         self.params = []\n@@ -29,13 +28,14 @@ def _get_record_name(self):\n         if len(self.params) != 1:\n             raise Exception(\n                 "Must supply exactly one parameter (dotted name of"\n-                "the record to be retrieved)")\n+                "the record to be retrieved)"\n+            )\n \n         return self.params[0]\n \n     def check_security(self):\n         # Only expose type information to authenticated users\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         if portal_membership.isAnonymousUser():\n             raise Unauthorized\n \n@@ -47,31 +47,27 @@ def reply(self):\n             try:\n                 portal_type = self.params.pop()\n                 return get_jsonschema_for_portal_type(\n-                    portal_type,\n-                    self.context,\n-                    self.request\n+                    portal_type, self.context, self.request\n                 )\n             except KeyError:\n                 self.content_type = "application/json"\n                 self.request.response.setStatus(404)\n                 return {\n-                    \'type\': \'NotFound\',\n-                    \'message\': \'Type "{}" could not be found.\'.format(\n-                        portal_type\n-                    )\n+                    "type": "NotFound",\n+                    "message": \'Type "{}" could not be found.\'.format(portal_type),\n                 }\n         vocab_factory = getUtility(\n-            IVocabularyFactory,\n-            name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n+            IVocabularyFactory, name="plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n \n-        portal_types = getToolByName(self.context, \'portal_types\')\n+        portal_types = getToolByName(self.context, "portal_types")\n \n         # allowedContentTypes already checks for permissions\n         allowed_types = [x.getId() for x in self.context.allowedContentTypes()]\n \n-        portal = getMultiAdapter((self.context, self.request),\n-                                 name=\'plone_portal_state\').portal()\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n         portal_url = portal.absolute_url()\n \n         # only addables if the content type is folderish\n@@ -80,12 +76,13 @@ def reply(self):\n         # Filter out any type that doesn\'t have lookupSchema. We are depended\n         # on that in lower level code.\n         ftis = [portal_types[x.value] for x in vocab_factory(self.context)]\n-        ftis = [fti for fti in ftis if getattr(fti, \'lookupSchema\', None)]\n+        ftis = [fti for fti in ftis if getattr(fti, "lookupSchema", None)]\n \n         return [\n             {\n-                \'@id\': \'{}/@types/{}\'.format(portal_url, fti.getId()),\n-                \'title\': translate(fti.Title(), context=self.request),\n-                \'addable\': fti.getId() in allowed_types if can_add else False,\n-            } for fti in ftis\n+                "@id": "{}/@types/{}".format(portal_url, fti.getId()),\n+                "title": translate(fti.Title(), context=self.request),\n+                "addable": fti.getId() in allowed_types if can_add else False,\n+            }\n+            for fti in ftis\n         ]\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 8f924966..6faf296e 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -21,14 +21,14 @@\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     from plone.app.controlpanel.security import ISecuritySchema\n \n try:  # pragma: no cover\n     # Plone 5.1+\n     from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n     from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     # Plone 5.0 and earlier\n     from Products.PasswordResetTool.PasswordResetTool import ExpiredRequestError  # noqa\n     from Products.PasswordResetTool.PasswordResetTool import InvalidRequestError  # noqa\n@@ -51,68 +51,67 @@ def publishTraverse(self, request, name):\n         return self\n \n     def validate_input_data(self, portal, original_data):\n-        \'\'\'Returns a tuple of (required_fields, allowed_fields)\'\'\'\n+        """Returns a tuple of (required_fields, allowed_fields)"""\n         security = getAdapter(portal, ISecuritySchema)\n \n         # remove data we don\'t want to check for\n         data = {}\n-        for key in [\'username\', \'email\', \'password\',\n-                    \'roles\', \'sendPasswordReset\']:\n+        for key in ["username", "email", "password", "roles", "sendPasswordReset"]:\n             if key in original_data:\n                 data[key] = original_data[key]\n \n-        required = [\'email\']\n-        allowed = [\'email\']\n+        required = ["email"]\n+        allowed = ["email"]\n \n         if not security.use_email_as_login:\n-            required.append(\'username\')\n-            allowed.append(\'username\')\n+            required.append("username")\n+            allowed.append("username")\n \n         if self.can_manage_users:\n-            allowed.append(\'password\')\n-            allowed.append(\'sendPasswordReset\')\n-            allowed.append(\'roles\')\n+            allowed.append("password")\n+            allowed.append("sendPasswordReset")\n+            allowed.append("roles")\n         else:\n             if security.enable_user_pwd_choice:\n-                allowed.append(\'password\')\n-                required.append(\'password\')\n+                allowed.append("password")\n+                required.append("password")\n \n         # check input data\n         for fieldname in required:\n             if not data.get(fieldname, None):\n                 self.add_field_error(\n-                    fieldname,\n-                    \'Property \\\'{}\\\' is required.\'.format(fieldname))\n+                    fieldname, "Property \'{}\' is required.".format(fieldname)\n+                )\n         for fieldname in data:\n             if fieldname not in allowed:\n                 self.add_field_error(\n-                    fieldname,\n-                    \'Property \\\'{}\\\' is not allowed.\'.format(fieldname))\n+                    fieldname, "Property \'{}\' is not allowed.".format(fieldname)\n+                )\n \n-        password = data.get(\'password\')\n-        send_password_reset = data.get(\'sendPasswordReset\')\n+        password = data.get("password")\n+        send_password_reset = data.get("sendPasswordReset")\n         if self.can_manage_users:\n             if password is None and send_password_reset is None:\n                 self.add_field_error(\n-                    \'sendPasswordReset\',\n-                    \'You have to either send a password or sendPasswordReset.\')\n+                    "sendPasswordReset",\n+                    "You have to either send a password or sendPasswordReset.",\n+                )\n             if password and send_password_reset:\n                 self.add_field_error(\n-                    \'sendPasswordReset\',\n-                    \'You can\\\'t send both password and sendPasswordReset.\')\n+                    "sendPasswordReset",\n+                    "You can\'t send both password and sendPasswordReset.",\n+                )\n \n     def add_field_error(self, field, message):\n-        self.errors.append({\'field\': field,\n-                            \'message\': message})\n+        self.errors.append({"field": field, "message": message})\n \n     def errors_to_string(self):\n-        return \' \'.join([error[\'message\'] for error in self.errors])\n+        return " ".join([error["message"] for error in self.errors])\n \n     def reply(self):\n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         portal = getSite()\n \n@@ -121,36 +120,39 @@ def reply(self):\n         self.errors = []\n         self.validate_input_data(portal, data)\n         security = getAdapter(self.context, ISecuritySchema)\n-        registration = getToolByName(self.context, \'portal_registration\')\n+        registration = getToolByName(self.context, "portal_registration")\n \n         general_usage_error = (\n             "Either post to @users to create a user or use "\n-            "@users/<username>/reset-password to update the password.")\n+            "@users/<username>/reset-password to update the password."\n+        )\n         if len(self.params) not in [0, 2]:\n             raise Exception(general_usage_error)\n \n         if len(self.params) == 2:\n-            if self.params[1] == \'reset-password\':\n+            if self.params[1] == "reset-password":\n                 return self.update_password(data)\n-            raise Exception(\'Unknown Endpoint @users/%s/%s\' % self.params)\n+            raise Exception("Unknown Endpoint @users/%s/%s" % self.params)\n \n         # Add a portal member\n         if not self.can_add_member:\n-            return self._error(403, \'Forbidden\',\n-                               \'You need AddPortalMember permission.\')\n+            return self._error(403, "Forbidden", "You need AddPortalMember permission.")\n \n         if self.errors:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'WrongParameterError\',\n-                message=\'Error in fields. {}\'.format(self.errors_to_string()),\n-                errors=self.errors))\n-\n-        username = data.pop(\'username\', None)\n-        email = data.pop(\'email\', None)\n-        password = data.pop(\'password\', None)\n-        roles = data.pop(\'roles\', [\'Member\', ])\n-        send_password_reset = data.pop(\'sendPasswordReset\', None)\n+            return dict(\n+                error=dict(\n+                    type="WrongParameterError",\n+                    message="Error in fields. {}".format(self.errors_to_string()),\n+                    errors=self.errors,\n+                )\n+            )\n+\n+        username = data.pop("username", None)\n+        email = data.pop("email", None)\n+        password = data.pop("password", None)\n+        roles = data.pop("roles", ["Member"])\n+        send_password_reset = data.pop("sendPasswordReset", None)\n         properties = data\n \n         if PLONE5:\n@@ -159,39 +161,32 @@ def reply(self):\n             # login_name one, so we leave it as it is, improving the Plone 5\n             # story\n             user_id_login_name_data = {\n-                \'username\': username,\n-                \'email\': email,\n-                \'fullname\': data.get(\'fullname\', \'\')\n+                "username": username,\n+                "email": email,\n+                "fullname": data.get("fullname", ""),\n             }\n \n             register_view = getMultiAdapter(\n-                (self.context, self.request),\n-                name=\'register\'\n+                (self.context, self.request), name="register"\n             )\n \n             register_view.generate_user_id(user_id_login_name_data)\n             register_view.generate_login_name(user_id_login_name_data)\n \n-            user_id = user_id_login_name_data.get(\n-                \'user_id\',\n-                data.get(\'username\')\n-            )\n-            login_name = user_id_login_name_data.get(\n-                \'login_name\',\n-                data.get(\'username\')\n-            )\n+            user_id = user_id_login_name_data.get("user_id", data.get("username"))\n+            login_name = user_id_login_name_data.get("login_name", data.get("username"))\n \n             username = user_id\n-            properties[\'username\'] = user_id\n+            properties["username"] = user_id\n         else:\n             # set username based on the login settings (username or email)\n             if security.use_email_as_login:\n                 username = email\n-                properties[\'username\'] = email\n+                properties["username"] = email\n             else:\n-                properties[\'username\'] = username\n+                properties["username"] = username\n \n-        properties[\'email\'] = email\n+        properties["email"] = email\n \n         if not self.can_manage_users and not security.enable_user_pwd_choice:\n             send_password_reset = True\n@@ -199,18 +194,13 @@ def reply(self):\n             password = registration.generatePassword()\n         # Create user\n         try:\n-            registration = getToolByName(portal, \'portal_registration\')\n+            registration = getToolByName(portal, "portal_registration")\n             user = registration.addMember(\n-                username,\n-                password,\n-                roles,\n-                properties=properties\n+                username, password, roles, properties=properties\n             )\n         except ValueError as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'MissingParameterError\',\n-                message=str(e)))\n+            return dict(error=dict(type="MissingParameterError", message=str(e)))\n \n         if PLONE5:\n             # After user creation, we have to fix the login_name if it differs.\n@@ -219,40 +209,34 @@ def reply(self):\n             if user_id != login_name:\n                 # The user id differs from the login name.  Set the login\n                 # name correctly.\n-                pas = getToolByName(self.context, \'acl_users\')\n+                pas = getToolByName(self.context, "acl_users")\n                 pas.updateLoginName(user_id, login_name)\n \n         if send_password_reset:\n             registration.registeredNotify(username)\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n-            \'Location\', portal.absolute_url() + \'/@users/\' + username\n-        )\n-        serializer = queryMultiAdapter(\n-            (user, self.request),\n-            ISerializeToJson\n+            "Location", portal.absolute_url() + "/@users/" + username\n         )\n+        serializer = queryMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _get_user_by_login_name(self, user_id):\n-        return get_member_by_login_name(\n-            self.context, user_id, raise_exceptions=False)\n+        return get_member_by_login_name(self.context, user_id, raise_exceptions=False)\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\'error\': {\'type\': type,\n-                          \'message\': message}}\n+        return {"error": {"type": type, "message": message}}\n \n     @property\n     def can_manage_users(self):\n         sm = getSecurityManager()\n-        return sm.checkPermission(\'plone.app.controlpanel.UsersAndGroups\',\n-                                  self.context)\n+        return sm.checkPermission("plone.app.controlpanel.UsersAndGroups", self.context)\n \n     @property\n     def can_set_own_password(self):\n@@ -267,13 +251,13 @@ def can_add_member(self):\n     def update_password(self, data):\n         username = self.params[0]\n         target_user = self._get_user_by_login_name(username)\n-        reset_token = data.get(\'reset_token\', None)\n-        old_password = data.get(\'old_password\', None)\n-        new_password = data.get(\'new_password\', None)\n+        reset_token = data.get("reset_token", None)\n+        old_password = data.get("old_password", None)\n+        new_password = data.get("new_password", None)\n \n-        pas = getToolByName(self.context, \'acl_users\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n-        pwt = getToolByName(self.context, \'portal_password_reset\')\n+        pas = getToolByName(self.context, "acl_users")\n+        mt = getToolByName(self.context, "portal_membership")\n+        pwt = getToolByName(self.context, "portal_password_reset")\n \n         if target_user is None:\n             self.request.response.setStatus(404)\n@@ -281,58 +265,75 @@ def update_password(self, data):\n \n         # Send password reset mail\n         if list(data) == []:\n-            registration_tool = getToolByName(self.context,\n-                                              \'portal_registration\')\n+            registration_tool = getToolByName(self.context, "portal_registration")\n             registration_tool.mailPassword(username, self.request)\n             return\n \n         if reset_token and old_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "You can\'t use \'reset_token\' and \'old_password\' together.")\n+                400,\n+                "Invalid parameters",\n+                "You can\'t use \'reset_token\' and \'old_password\' together.",\n+            )\n         if reset_token and not new_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "If you pass \'reset_token\' you have to pass \'new_password\'")\n+                400,\n+                "Invalid parameters",\n+                "If you pass \'reset_token\' you have to pass \'new_password\'",\n+            )\n         if old_password and not new_password:\n             return self._error(\n-                400, \'Invalid parameters\',\n-                "If you pass \'old_password\' you have to pass \'new_password\'")\n+                400,\n+                "Invalid parameters",\n+                "If you pass \'old_password\' you have to pass \'new_password\'",\n+            )\n \n         # Reset the password with a reset token\n         if reset_token:\n             try:\n                 pwt.resetPassword(username, reset_token, new_password)\n             except InvalidRequestError:\n-                return self._error(403, \'Unknown Token\',\n-                                   \'The reset_token is unknown/not valid.\')\n+                return self._error(\n+                    403, "Unknown Token", "The reset_token is unknown/not valid."\n+                )\n             except ExpiredRequestError:\n-                return self._error(403, \'Expired Token\',\n-                                   \'The reset_token is expired.\')\n+                return self._error(403, "Expired Token", "The reset_token is expired.")\n             return\n \n         # set the new password by giving the old password\n         if old_password:\n             if not (self.can_manage_users or self.can_set_own_password):\n                 return self._error(\n-                    403, \'Not allowed\', \'You can\\\'t set a password without \'\n-                    \'a password reset token.\')\n+                    403,\n+                    "Not allowed",\n+                    "You can\'t set a password without " "a password reset token.",\n+                )\n             authenticated_user_id = mt.getAuthenticatedMember().getId()\n             if username != authenticated_user_id:\n                 return self._error(\n-                    403, "Wrong user",\n-                    ("You need to be logged in as the user \'%s\' to set "\n-                     "the password.") % username)\n+                    403,\n+                    "Wrong user",\n+                    (\n+                        "You need to be logged in as the user \'%s\' to set "\n+                        "the password."\n+                    )\n+                    % username,\n+                )\n \n             check_password_auth = pas.authenticate(\n-                username, old_password.encode(\'utf-8\'), self.request)\n+                username, old_password.encode("utf-8"), self.request\n+            )\n             if not check_password_auth:\n-                return self._error(403, "Wrong password",\n-                                   "The password passed as \'old_password\' "\n-                                   "is wrong.")\n+                return self._error(\n+                    403,\n+                    "Wrong password",\n+                    "The password passed as \'old_password\' " "is wrong.",\n+                )\n             mt.setPassword(new_password)\n             return\n \n-        return self._error(400, \'Invalid parameters\',\n-                           \'See the user endpoint documentation for the \'\n-                           \'valid parameters.\')\n+        return self._error(\n+            400,\n+            "Invalid parameters",\n+            "See the user endpoint documentation for the " "valid parameters.",\n+        )\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 35fc3145..d1e58292 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -23,16 +23,13 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def reply(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n-        delete_successful = portal_membership.deleteMembers(\n-            (self._get_user_id,)\n-        )\n+        portal_membership = getToolByName(portal, "portal_membership")\n+        delete_successful = portal_membership.deleteMembers((self._get_user_id,))\n         if delete_successful:\n             self.request.response.setStatus(204)\n         else:\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex fa91577a..d548ca71 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -14,7 +14,6 @@\n \n @implementer(IPublishTraverse)\n class UsersGet(Service):\n-\n     def __init__(self, context, request):\n         super(UsersGet, self).__init__(context, request)\n         self.params = []\n@@ -28,42 +27,39 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _get_users(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.listMembers()\n \n     def _get_filtered_users(self, query, limit):\n         portal = getSite()\n-        acl_users = getToolByName(portal, \'acl_users\')\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        acl_users = getToolByName(portal, "acl_users")\n+        portal_membership = getToolByName(portal, "portal_membership")\n         results = acl_users.searchUsers(id=query, max_results=limit)\n-        return [portal_membership.getMemberById(user[\'userid\'])\n-                for user in results]\n+        return [portal_membership.getMemberById(user["userid"]) for user in results]\n \n     def reply(self):\n         sm = getSecurityManager()\n         if len(self.query) > 0 and len(self.params) == 0:\n-            query = self.query.get(\'query\', \'\')\n-            limit = self.query.get(\'limit\', DEFAULT_SEARCH_RESULTS_LIMIT)\n+            query = self.query.get("query", "")\n+            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n                 # Someone is searching users, check if he is authorized\n-                if sm.checkPermission(\'Manage portal\', self.context):\n+                if sm.checkPermission("Manage portal", self.context):\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n-                            (user, self.request),\n-                            ISerializeToJson\n+                            (user, self.request), ISerializeToJson\n                         )\n                         result.append(serializer())\n                     return result\n@@ -75,12 +71,11 @@ def reply(self):\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if he is authorized\n-            if sm.checkPermission(\'Manage portal\', self.context):\n+            if sm.checkPermission("Manage portal", self.context):\n                 result = []\n                 for user in self._get_users():\n                     serializer = queryMultiAdapter(\n-                        (user, self.request),\n-                        ISerializeToJson\n+                        (user, self.request), ISerializeToJson\n                     )\n                     result.append(serializer())\n                 return result\n@@ -90,22 +85,19 @@ def reply(self):\n \n         # Some is asking one user, check if the logged in user is asking\n         # his own information or he is a Manager\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         current_user_id = mt.getAuthenticatedMember().getId()\n \n         if sm.checkPermission(\n-            \'plone.restapi: Access Plone user information\', self.context) or \\\n-           (current_user_id and current_user_id == self._get_user_id):\n+            "plone.restapi: Access Plone user information", self.context\n+        ) or (current_user_id and current_user_id == self._get_user_id):\n \n             # we retrieve the user on the user id not the username\n             user = self._get_user(self._get_user_id)\n             if not user:\n                 self.request.response.setStatus(404)\n                 return\n-            serializer = queryMultiAdapter(\n-                (user, self.request),\n-                ISerializeToJson\n-            )\n+            serializer = queryMultiAdapter((user, self.request), ISerializeToJson)\n             return serializer()\n         else:\n             self.request.response.setStatus(401)\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 42f46cd5..b6d61ca4 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -20,7 +20,7 @@\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:   # pragma: no cover\n+except ImportError:  # pragma: no cover\n     from plone.app.controlpanel.security import ISecuritySchema\n \n \n@@ -41,51 +41,48 @@ def publishTraverse(self, request, name):\n     @property\n     def _get_user_id(self):\n         if len(self.params) != 1:\n-            raise Exception(\n-                "Must supply exactly one parameter (user id)")\n+            raise Exception("Must supply exactly one parameter (user id)")\n         return self.params[0]\n \n     def _get_user(self, user_id):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getMemberById(user_id)\n \n     def _change_user_password(self, user, value):\n-        acl_users = getToolByName(self.context, \'acl_users\')\n+        acl_users = getToolByName(self.context, "acl_users")\n         acl_users.userSetPassword(user.getUserId(), value)\n \n     def reply(self):\n-        user_settings_to_update = json.loads(self.request.get(\'BODY\', \'{}\'))\n+        user_settings_to_update = json.loads(self.request.get("BODY", "{}"))\n         user = self._get_user(self._get_user_id)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         security = getAdapter(self.context, ISecuritySchema)\n \n         if self.can_manage_users:\n             for key, value in user_settings_to_update.items():\n-                if key == \'password\':\n+                if key == "password":\n                     self._change_user_password(user, value)\n-                elif key == \'username\':\n+                elif key == "username":\n                     set_own_login_name(user, value)\n                 else:\n-                    if key == \'portrait\' and value.get(\'data\'):\n+                    if key == "portrait" and value.get("data"):\n                         self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n-            roles = user_settings_to_update.get(\'roles\', {})\n+            roles = user_settings_to_update.get("roles", {})\n             if roles:\n                 to_add = [key for key, enabled in roles.items() if enabled]\n-                to_remove = [key for key, enabled in roles.items()\n-                             if not enabled]\n+                to_remove = [key for key, enabled in roles.items() if not enabled]\n \n                 target_roles = set(user.getRoles()) - set(to_remove)\n                 target_roles = target_roles | set(to_add)\n \n-                acl_users = getToolByName(self.context, \'acl_users\')\n+                acl_users = getToolByName(self.context, "acl_users")\n                 acl_users.userFolderEditUser(\n                     principal_id=user.id,\n                     password=None,\n@@ -94,23 +91,28 @@ def reply(self):\n                 )\n         elif self._get_current_user == self._get_user_id:\n             for key, value in user_settings_to_update.items():\n-                if key == \'password\' and \\\n-                   security.enable_user_pwd_choice and \\\n-                   self.can_set_own_password:\n+                if (\n+                    key == "password"\n+                    and security.enable_user_pwd_choice\n+                    and self.can_set_own_password\n+                ):\n                     self._change_user_password(user, value)\n                 else:\n-                    if key == \'portrait\' and value.get(\'data\'):\n+                    if key == "portrait" and value.get("data"):\n                         self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n         else:\n             if self._is_anonymous:\n-                return self._error(401, \'Unauthorized\',\n-                                   \'You are not authorized to perform this \'\n-                                   \'action\')\n+                return self._error(\n+                    401,\n+                    "Unauthorized",\n+                    "You are not authorized to perform this " "action",\n+                )\n             else:\n-                return self._error(403, \'Forbidden\', \'You can\\\'t update the \'\n-                                        \'properties of this user\')\n+                return self._error(\n+                    403, "Forbidden", "You can\'t update the " "properties of this user"\n+                )\n \n         self.request.response.setStatus(204)\n         return None\n@@ -118,8 +120,7 @@ def reply(self):\n     @property\n     def can_manage_users(self):\n         sm = getSecurityManager()\n-        return sm.checkPermission(\'plone.app.controlpanel.UsersAndGroups\',\n-                                  self.context)\n+        return sm.checkPermission("plone.app.controlpanel.UsersAndGroups", self.context)\n \n     @property\n     def can_set_own_password(self):\n@@ -128,39 +129,38 @@ def can_set_own_password(self):\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\'error\': {\'type\': type,\n-                          \'message\': message}}\n+        return {"error": {"type": type, "message": message}}\n \n     @property\n     def _get_current_user(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.getAuthenticatedMember().getId()\n \n     @property\n     def _is_anonymous(self):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         return portal_membership.isAnonymousUser()\n \n     def set_member_portrait(self, user, portrait):\n         portal = getSite()\n-        portal_membership = getToolByName(portal, \'portal_membership\')\n+        portal_membership = getToolByName(portal, "portal_membership")\n         safe_id = portal_membership._getSafeMemberId(user.getId())\n-        content_type = \'application/octet-stream\'\n+        content_type = "application/octet-stream"\n         filename = None\n \n-        content_type = portrait.get(\'content-type\', content_type)\n-        filename = portrait.get(\'filename\', filename)\n-        data = portrait.get(\'data\')\n+        content_type = portrait.get("content-type", content_type)\n+        filename = portrait.get("filename", filename)\n+        data = portrait.get("data")\n         if isinstance(data, six.text_type):\n-            data = data.encode(\'utf-8\')\n-        if \'encoding\' in portrait:\n-            data = codecs.decode(data, portrait[\'encoding\'])\n+            data = data.encode("utf-8")\n+        if "encoding" in portrait:\n+            data = codecs.decode(data, portrait["encoding"])\n         if isinstance(data, six.text_type):\n-            data = data.encode(\'utf-8\')\n+            data = data.encode("utf-8")\n \n-        if portrait.get(\'scale\', False):\n+        if portrait.get("scale", False):\n             # Only scale if the scale (default Plone behavior) boolean is set\n             # This should be handled by the core in the future\n             scaled, mimetype = scale_image(six.BytesIO(data))\n@@ -169,6 +169,6 @@ def set_member_portrait(self, user, portrait):\n             # frontend\n             scaled = data\n \n-        portrait = Image(id=safe_id, file=scaled, title=\'\')\n-        membertool = getToolByName(self, \'portal_memberdata\')\n+        portrait = Image(id=safe_id, file=scaled, title="")\n+        membertool = getToolByName(self, "portal_memberdata")\n         membertool._setPortrait(portrait, safe_id)\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex 48233e6d..3ebe5abe 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -12,7 +12,6 @@\n \n @implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n-\n     def __init__(self, context, request):\n         super(VocabulariesGet, self).__init__(context, request)\n         self.params = []\n@@ -24,22 +23,16 @@ def publishTraverse(self, request, name):\n \n     def _error(self, status, type, message):\n         self.request.response.setStatus(status)\n-        return {\n-            \'error\': {\n-                \'type\': type,\n-                \'message\': message\n-            }\n-        }\n+        return {"error": {"type": type, "message": message}}\n \n     def reply(self):\n         if len(self.params) == 0:\n             return [\n                 {\n-                    \'@id\': \'{}/@vocabularies/{}\'.format(\n-                        self.context.absolute_url(),\n-                        vocab[0]\n+                    "@id": "{}/@vocabularies/{}".format(\n+                        self.context.absolute_url(), vocab[0]\n                     ),\n-                    \'title\': vocab[0]\n+                    "title": vocab[0],\n                 }\n                 for vocab in getUtilitiesFor(IVocabularyFactory)\n             ]\n@@ -49,19 +42,14 @@ def reply(self):\n             factory = getUtility(IVocabularyFactory, name=name)\n         except ComponentLookupError:\n             return self._error(\n-                404, "Not Found",\n-                "The vocabulary \'{}\' does not exist".format(name)\n+                404, "Not Found", "The vocabulary \'{}\' does not exist".format(name)\n             )\n \n         vocabulary = factory(self.context)\n         vocabulary_name = self.params[0]\n         serializer = getMultiAdapter(\n-            (vocabulary, self.request),\n-            interface=ISerializeToJson\n+            (vocabulary, self.request), interface=ISerializeToJson\n         )\n         return serializer(\n-            \'{}/@vocabularies/{}\'.format(\n-                self.context.absolute_url(),\n-                vocabulary_name\n-            )\n+            "{}/@vocabularies/{}".format(self.context.absolute_url(), vocabulary_name)\n         )\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex a4cb0e54..13b828b8 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -15,16 +15,13 @@\n @implementer(IExpandableElement)\n @adapter(IWorkflowAware, Interface)\n class WorkflowInfo(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            \'workflow\': {\n-                "@id": \'{}/@workflow\'.format(self.context.absolute_url()),\n-            },\n+            "workflow": {"@id": "{}/@workflow".format(self.context.absolute_url())}\n         }\n         if not expand:\n             return result\n@@ -34,10 +31,10 @@ def __call__(self, expand=False):\n         # API we fake the response to the endpoint by providing an empty\n         # response instead of a 404.\n         if IPloneSiteRoot.providedBy(self.context):\n-            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            result["workflow"].update({"history": [], "transitions": []})\n             return result\n \n-        wftool = getToolByName(self.context, \'portal_workflow\')\n+        wftool = getToolByName(self.context, "portal_workflow")\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\n         except WorkflowException:\n@@ -46,32 +43,33 @@ def __call__(self, expand=False):\n         actions = wftool.listActionInfos(object=self.context)\n         transitions = []\n         for action in actions:\n-            if action[\'category\'] != \'workflow\':\n+            if action["category"] != "workflow":\n                 continue\n \n-            title = action[\'title\']\n+            title = action["title"]\n             if isinstance(title, six.binary_type):\n-                title = title.decode(\'utf8\')\n+                title = title.decode("utf8")\n \n-            transitions.append({\n-                \'@id\': \'{}/@workflow/{}\'.format(\n-                    self.context.absolute_url(), action[\'id\']),\n-                \'title\': self.context.translate(title),\n-            })\n+            transitions.append(\n+                {\n+                    "@id": "{}/@workflow/{}".format(\n+                        self.context.absolute_url(), action["id"]\n+                    ),\n+                    "title": self.context.translate(title),\n+                }\n+            )\n \n         for item, action in enumerate(history):\n             title = wftool.getTitleForStateOnType(\n-                action[\'review_state\'],\n-                self.context.portal_type\n+                action["review_state"], self.context.portal_type\n             )\n             if isinstance(title, six.binary_type):\n-                title = title.decode(\'utf8\')\n-            history[item][\'title\'] = self.context.translate(title)\n+                title = title.decode("utf8")\n+            history[item]["title"] = self.context.translate(title)\n \n-        result[\'workflow\'].update({\n-            \'history\': json_compatible(history),\n-            \'transitions\': transitions,\n-        })\n+        result["workflow"].update(\n+            {"history": json_compatible(history), "transitions": transitions}\n+        )\n         return result\n \n \n@@ -81,4 +79,4 @@ class WorkflowInfoService(Service):\n \n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n-        return info(expand=True)[\'workflow\']\n+        return info(expand=True)["workflow"]\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 945122c2..05cfb0ee 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -28,7 +28,7 @@ class WorkflowTransition(Service):\n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\n         self.transition = None\n-        self.wftool = getToolByName(context, \'portal_workflow\')\n+        self.wftool = getToolByName(context, "portal_workflow")\n \n     def publishTraverse(self, request, name):\n         if self.transition is None:\n@@ -40,70 +40,73 @@ def publishTraverse(self, request, name):\n     def reply(self):\n         if self.transition is None:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'BadRequest\',\n-                message=\'Missing transition\'))\n+            return dict(error=dict(type="BadRequest", message="Missing transition"))\n \n         data = json_body(self.request)\n \n         # Disable CSRF protection\n-        if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n-            alsoProvides(self.request,\n-                         plone.protect.interfaces.IDisableCSRFProtection)\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        comment = data.get(\'comment\', \'\')\n-        include_children = data.get(\'include_children\', False)\n+        comment = data.get("comment", "")\n+        include_children = data.get("include_children", False)\n         publication_dates = {}\n-        if \'effective\' in data:\n-            publication_dates[\'effective\'] = data[\'effective\']\n-        if \'expires\' in data:\n-            publication_dates[\'expires\'] = data[\'expires\']\n+        if "effective" in data:\n+            publication_dates["effective"] = data["effective"]\n+        if "expires" in data:\n+            publication_dates["expires"] = data["expires"]\n         # Archetypes has different field names\n-        if \'effectiveDate\' in data:\n-            publication_dates[\'effectiveDate\'] = data[\'effectiveDate\']\n-        if \'expirationDate\' in data:\n-            publication_dates[\'expirationDate\'] = data[\'expirationDate\']\n+        if "effectiveDate" in data:\n+            publication_dates["effectiveDate"] = data["effectiveDate"]\n+        if "expirationDate" in data:\n+            publication_dates["expirationDate"] = data["expirationDate"]\n \n         try:\n             self.recurse_transition(\n-                [self.context], comment, publication_dates, include_children)\n+                [self.context], comment, publication_dates, include_children\n+            )\n \n         except WorkflowException as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'WorkflowException\',\n-                message=translate(str(e), context=self.request)))\n+            return dict(\n+                error=dict(\n+                    type="WorkflowException",\n+                    message=translate(str(e), context=self.request),\n+                )\n+            )\n         except BadRequest as e:\n             self.request.response.setStatus(400)\n-            return dict(error=dict(\n-                type=\'Bad Request\',\n-                message=str(e)))\n+            return dict(error=dict(type="Bad Request", message=str(e)))\n \n         history = self.wftool.getInfoFor(self.context, "review_history")\n         action = history[-1]\n         if six.PY2:\n-            action[\'title\'] = self.context.translate(\n+            action["title"] = self.context.translate(\n                 self.wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type).decode(\'utf8\'))\n+                    action["review_state"], self.context.portal_type\n+                ).decode("utf8")\n+            )\n         else:\n-            action[\'title\'] = self.context.translate(\n+            action["title"] = self.context.translate(\n                 self.wftool.getTitleForStateOnType(\n-                    action[\'review_state\'],\n-                    self.context.portal_type))\n+                    action["review_state"], self.context.portal_type\n+                )\n+            )\n \n         return json_compatible(action)\n \n-    def recurse_transition(self, objs, comment, publication_dates,\n-                           include_children=False):\n+    def recurse_transition(\n+        self, objs, comment, publication_dates, include_children=False\n+    ):\n         for obj in objs:\n             if publication_dates:\n-                deserializer = queryMultiAdapter((obj, self.request),\n-                                                 IDeserializeFromJson)\n+                deserializer = queryMultiAdapter(\n+                    (obj, self.request), IDeserializeFromJson\n+                )\n                 deserializer(data=publication_dates)\n \n             self.wftool.doActionFor(obj, self.transition, comment=comment)\n             if include_children and IFolderish.providedBy(obj):\n                 self.recurse_transition(\n-                    obj.objectValues(), comment, publication_dates,\n-                    include_children)\n+                    obj.objectValues(), comment, publication_dates, include_children\n+                )\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex 73a41d2b..aaaf2165 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -4,20 +4,21 @@\n from plone.restapi.pas.plugin import JWTAuthenticationPlugin\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n-from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n+from Products.PluggableAuthService.interfaces.authservice import (\n+    IPluggableAuthService,\n+)  # noqa: E501\n from zope.interface import implementer\n \n \n @implementer(INonInstallable)\n class HiddenProfiles(object):\n-\n     def getNonInstallableProfiles(self):  # pragma: no cover\n         """Do not show on Plone\'s list of installable profiles."""\n         return [\n-            u\'plone.restapi:performance\',\n-            u\'plone.restapi:testing\',\n-            u\'plone.restapi:tiles\',\n-            u\'plone.restapi:uninstall\',\n+            u"plone.restapi:performance",\n+            u"plone.restapi:testing",\n+            u"plone.restapi:tiles",\n+            u"plone.restapi:uninstall",\n         ]\n \n     def getNonInstallableProducts(self):  # pragma: no cover\n@@ -25,23 +26,20 @@ def getNonInstallableProducts(self):  # pragma: no cover\n \n         This method is only used in Plone 5.1+.\n         """\n-        return [\n-            u\'plone.restapi.upgrades\',\n-        ]\n+        return [u"plone.restapi.upgrades"]\n \n \n def install_pas_plugin(context):\n     uf_parent = aq_inner(context)\n     while True:\n-        uf = getToolByName(uf_parent, \'acl_users\')\n-        if IPluggableAuthService.providedBy(uf) and \'jwt_auth\' not in uf:\n-            plugin = JWTAuthenticationPlugin(\'jwt_auth\')\n+        uf = getToolByName(uf_parent, "acl_users")\n+        if IPluggableAuthService.providedBy(uf) and "jwt_auth" not in uf:\n+            plugin = JWTAuthenticationPlugin("jwt_auth")\n             uf._setObject(plugin.getId(), plugin)\n-            plugin = uf[\'jwt_auth\']\n-            plugin.manage_activateInterfaces([\n-                \'IAuthenticationPlugin\',\n-                \'IExtractionPlugin\',\n-            ])\n+            plugin = uf["jwt_auth"]\n+            plugin.manage_activateInterfaces(\n+                ["IAuthenticationPlugin", "IExtractionPlugin"]\n+            )\n         if uf_parent is uf_parent.getPhysicalRoot():\n             break\n         uf_parent = aq_parent(uf_parent)\n@@ -50,7 +48,7 @@ def install_pas_plugin(context):\n def import_various(context):\n     """Miscellanous steps import handle\n     """\n-    if context.readDataFile(\'plone.restapi_various.txt\') is None:\n+    if context.readDataFile("plone.restapi_various.txt") is None:\n         return\n \n     site = context.getSite()\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 16552218..7f635685 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -43,7 +43,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.multilingual\')\n+    pkg_resources.get_distribution("plone.app.multilingual")\n     PAM_INSTALLED = True\n except pkg_resources.DistributionNotFound:\n     PAM_INSTALLED = False\n@@ -56,13 +56,13 @@\n     PLONE_5 = True  # pragma: no cover\n \n try:\n-    pkg_resources.get_distribution(\'Products.Archetypes\')\n+    pkg_resources.get_distribution("Products.Archetypes")\n except pkg_resources.DistributionNotFound:\n     HAS_AT = False\n else:\n     HAS_AT = True\n \n-ENABLED_LANGUAGES = [\'de\', \'en\', \'es\', \'fr\']\n+ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n def set_available_languages():\n@@ -79,7 +79,7 @@ def set_available_languages():\n def set_supported_languages(portal):\n     """Set supported languages to the same predictable set for all test layers.\n     """\n-    language_tool = getToolByName(portal, \'portal_languages\')\n+    language_tool = getToolByName(portal, "portal_languages")\n     for lang in ENABLED_LANGUAGES:\n         language_tool.addSupportedLanguage(lang)\n \n@@ -92,28 +92,31 @@ def enable_request_language_negotiation(portal):\n     """\n     if PLONE_5:\n         from Products.CMFPlone.interfaces import ILanguageSchema\n+\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.use_request_negotiation = True\n     else:\n-        lang_tool = getToolByName(portal, \'portal_languages\')\n+        lang_tool = getToolByName(portal, "portal_languages")\n         lang_tool.use_request_negotiation = True\n \n \n class DateTimeFixture(Layer):\n-\n     def setUp(self):\n-        tz = \'UTC\'\n+        tz = "UTC"\n         # Patch DateTime\'s timezone for deterministic behavior.\n         from DateTime import DateTime\n+\n         self.DT_orig_localZone = DateTime.localZone\n         DateTime.localZone = lambda cls=None, ltm=None: tz\n         from plone.dexterity import content\n+\n         content.FLOOR_DATE = DateTime(1970, 0)\n         content.CEILING_DATE = DateTime(2500, 0)\n \n     def tearDown(self):\n         from DateTime import DateTime\n+\n         DateTime.localZone = self.DT_orig_localZone\n \n \n@@ -123,29 +126,31 @@ def tearDown(self):\n import time  # noqa\n from persistent.TimeStamp import TimeStamp  # noqa\n \n+\n def patchedNewTid(old):  # noqa\n-    if getattr(time.time, \'previous_time_function\', False):\n+    if getattr(time.time, "previous_time_function", False):\n         t = time.time.previous_time_function()\n-        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5]+(t % 60,))\n+        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5] + (t % 60,))\n     else:\n         t = time.time()\n-        ts = TimeStamp(*time.gmtime(t)[:5]+(t % 60,))\n+        ts = TimeStamp(*time.gmtime(t)[:5] + (t % 60,))\n     if old is not None:\n         ts = ts.laterThan(TimeStamp(old))\n     return ts.raw()\n \n \n class FreezeTimeFixture(Layer):\n-\n     def setUp(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n+        if PLONE_VERSION.base_version >= "5.1":\n             from ZODB import utils\n+\n             self.ZODB_orig_newTid = utils.newTid\n             utils.newTid = patchedNewTid\n \n     def tearDown(self):\n-        if PLONE_VERSION.base_version >= \'5.1\':\n+        if PLONE_VERSION.base_version >= "5.1":\n             from ZODB import utils\n+\n             utils.newTid = self.ZODB_orig_newTid\n \n \n@@ -154,176 +159,168 @@ def tearDown(self):\n \n class PloneRestApiDXLayer(PloneSandboxLayer):\n \n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n+\n+        xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, \'plone.restapi\')\n+        z2.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         set_supported_languages(portal)\n \n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n+        applyProfile(portal, "plone.restapi:default")\n+        applyProfile(portal, "plone.restapi:testing")\n         add_catalog_indexes(portal, DX_TYPES_INDEXES)\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n-        quickInstallProduct(portal, \'collective.MockMailHost\')\n-        applyProfile(portal, \'collective.MockMailHost:default\')\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n+        quickInstallProduct(portal, "collective.MockMailHost")\n+        applyProfile(portal, "collective.MockMailHost:default")\n+        states = portal.portal_workflow["simple_publication_workflow"].states\n         if six.PY2:  # issue 676\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                "utf8"\n+            )  # noqa: E501\n         else:\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n-    name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXLayer:Functional"\n+    name="PloneRestApiDXLayer:Functional",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_DX_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXLayerFreeze:Functional",\n )\n \n \n class PloneRestApiDXPAMLayer(PloneSandboxLayer):\n \n-    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.restapi\n-        xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n-        xmlconfig.file(\n-            \'testing.zcml\',\n-            plone.restapi,\n-            context=configurationContext\n-        )\n \n-        z2.installProduct(app, \'plone.restapi\')\n+        xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n+        xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n+\n+        z2.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n         login(portal, SITE_OWNER_NAME)\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         set_supported_languages(portal)\n-        if portal.portal_setup.profileExists(\'plone.app.multilingual:default\'):\n-            applyProfile(portal, \'plone.app.multilingual:default\')\n-        applyProfile(portal, \'plone.restapi:default\')\n-        applyProfile(portal, \'plone.restapi:testing\')\n+        if portal.portal_setup.profileExists("plone.app.multilingual:default"):\n+            applyProfile(portal, "plone.app.multilingual:default")\n+        applyProfile(portal, "plone.restapi:default")\n+        applyProfile(portal, "plone.restapi:testing")\n         add_catalog_indexes(portal, DX_TYPES_INDEXES)\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n-        states = portal.portal_workflow[\'simple_publication_workflow\'].states\n+        states = portal.portal_workflow["simple_publication_workflow"].states\n         if six.PY2:  # issue 676\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                "utf8"\n+            )  # noqa: E501\n         else:\n-            states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_PAM_FIXTURE = PloneRestApiDXPAMLayer()\n PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,),\n-    name="PloneRestApiDXPAMLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXPAMLayer:Functional"\n+    name="PloneRestApiDXPAMLayer:Functional",\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_DX_PAM_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXPAMLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiDXPAMLayerFreeze:Functional",\n )\n \n \n if HAS_AT:\n+\n     class PloneRestApiATLayer(PloneSandboxLayer):\n \n-        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE,)\n+        defaultBases = (DATE_TIME_FIXTURE, PLONE_FIXTURE)\n \n         def setUpZope(self, app, configurationContext):\n             import Products.ATContentTypes\n+\n             self.loadZCML(package=Products.ATContentTypes)\n             import plone.app.dexterity\n+\n             self.loadZCML(package=plone.app.dexterity)\n \n             import plone.restapi\n+\n             xmlconfig.file(\n-                \'configure.zcml\',\n-                plone.restapi,\n-                context=configurationContext\n+                "configure.zcml", plone.restapi, context=configurationContext\n             )\n \n-            z2.installProduct(app, \'Products.Archetypes\')\n-            z2.installProduct(app, \'Products.ATContentTypes\')\n-            z2.installProduct(app, \'plone.app.collection\')\n-            z2.installProduct(app, \'plone.app.blob\')\n-            z2.installProduct(app, \'plone.restapi\')\n+            z2.installProduct(app, "Products.Archetypes")\n+            z2.installProduct(app, "Products.ATContentTypes")\n+            z2.installProduct(app, "plone.app.collection")\n+            z2.installProduct(app, "plone.app.blob")\n+            z2.installProduct(app, "plone.restapi")\n \n         def setUpPloneSite(self, portal):\n             portal.acl_users.userFolderAddUser(\n-                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n+                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+            )\n             set_supported_languages(portal)\n \n-            if portal.portal_setup.profileExists(\n-                    \'Products.ATContentTypes:default\'):\n-                applyProfile(portal, \'Products.ATContentTypes:default\')\n-            if portal.portal_setup.profileExists(\n-                    \'plone.app.collection:default\'):\n-                applyProfile(portal, \'plone.app.collection:default\')\n+            if portal.portal_setup.profileExists("Products.ATContentTypes:default"):\n+                applyProfile(portal, "Products.ATContentTypes:default")\n+            if portal.portal_setup.profileExists("plone.app.collection:default"):\n+                applyProfile(portal, "plone.app.collection:default")\n \n-            applyProfile(portal, \'plone.app.dexterity:default\')\n-            applyProfile(portal, \'plone.restapi:default\')\n-            applyProfile(portal, \'plone.restapi:testing\')\n+            applyProfile(portal, "plone.app.dexterity:default")\n+            applyProfile(portal, "plone.restapi:default")\n+            applyProfile(portal, "plone.restapi:testing")\n             set_available_languages()\n             enable_request_language_negotiation(portal)\n-            portal.portal_workflow.setDefaultChain(\'simple_publication_workflow\')  # noqa: E501\n-            states = portal.portal_workflow[\'simple_publication_workflow\'].states  # noqa: E501\n+            portal.portal_workflow.setDefaultChain(\n+                "simple_publication_workflow"\n+            )  # noqa: E501\n+            states = portal.portal_workflow[\n+                "simple_publication_workflow"\n+            ].states  # noqa: E501\n             if six.PY2:  # issue 676\n-                states[\'published\'].title = u\'Published with accent \xc3\xa9\'.encode(\'utf8\')  # noqa: E501\n+                states["published"].title = u"Published with accent \xc3\xa9".encode(\n+                    "utf8"\n+                )  # noqa: E501\n             else:\n-                states[\'published\'].title = u\'Published with accent \xc3\xa9\'  # noqa: E501\n+                states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n \n     PLONE_RESTAPI_AT_FIXTURE = PloneRestApiATLayer()\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = IntegrationTesting(\n-        bases=(PLONE_RESTAPI_AT_FIXTURE,),\n-        name="PloneRestApiATLayer:Integration"\n+        bases=(PLONE_RESTAPI_AT_FIXTURE,), name="PloneRestApiATLayer:Integration"\n     )\n     PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n         bases=(PLONE_RESTAPI_AT_FIXTURE, z2.ZSERVER_FIXTURE),\n-        name="PloneRestApiATLayer:Functional"\n+        name="PloneRestApiATLayer:Functional",\n     )\n else:\n     PLONE_RESTAPI_AT_INTEGRATION_TESTING = PLONE_FIXTURE\n@@ -335,23 +332,20 @@ class PloneRestApiTilesLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.restapi:tiles\')\n+        applyProfile(portal, "plone.restapi:tiles")\n \n \n PLONE_RESTAPI_TILES_FIXTURE = PloneRestApiTilesLayer()\n PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_TILES_FIXTURE,),\n-    name="PloneRestApiTilesLayer:Integration"\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE,), name="PloneRestApiTilesLayer:Integration"\n )\n PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayer:Functional"\n+    name="PloneRestApiTilesLayer:Functional",\n )\n PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE,\n-           PLONE_RESTAPI_TILES_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayerFreeze:Functional"\n+    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneRestApiTilesLayerFreeze:Functional",\n )\n \n \n@@ -362,13 +356,13 @@ class RelativeSession(requests.Session):\n \n     def __init__(self, base_url):\n         super(RelativeSession, self).__init__()\n-        if not base_url.endswith(\'/\'):\n-            base_url += \'/\'\n+        if not base_url.endswith("/"):\n+            base_url += "/"\n         self.__base_url = base_url\n \n     def request(self, method, url, **kwargs):\n-        if urlparse(url).scheme not in (\'http\', \'https\'):\n-            url = url.lstrip(\'/\')\n+        if urlparse(url).scheme not in ("http", "https"):\n+            url = url.lstrip("/")\n             url = urljoin(self.__base_url, url)\n         try:\n             return super(RelativeSession, self).request(method, url, **kwargs)\n@@ -393,11 +387,11 @@ def __init__(self, prefix):\n \n     def __call__(self):\n         self.counter += 1\n-        postfix = str(self.counter).rjust(32 - len(self.prefix), \'0\')\n+        postfix = str(self.counter).rjust(32 - len(self.prefix), "0")\n         return self.prefix + postfix\n \n \n def register_static_uuid_utility(prefix):\n-    prefix = re.sub(r\'[^a-zA-Z0-9\\-_]\', \'\', prefix)\n+    prefix = re.sub(r"[^a-zA-Z0-9\\-_]", "", prefix)\n     generator = StaticUUIDGenerator(prefix)\n     getGlobalSiteManager().registerUtility(component=generator)\ndiff --git a/src/plone/restapi/tests/attypes.py b/src/plone/restapi/tests/attypes.py\nindex b03641d7..7a76ba43 100644\n--- a/src/plone/restapi/tests/attypes.py\n+++ b/src/plone/restapi/tests/attypes.py\n@@ -9,6 +9,7 @@\n from plone.app.blob.field import ImageField\n from plone.app.folder.folder import ATFolder\n from plone.app.folder.folder import ATFolderSchema\n+\n try:\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n except ImportError:\n@@ -16,37 +17,40 @@\n else:\n     from plone.app.collection.field import QueryField\n \n-PROJECTNAME = \'plone.restapi.tests\'\n-\n-ATTestDocumentSchema = ATDocumentSchema.copy() + atapi.Schema((\n-\n-    atapi.StringField(\'testStringField\'),\n-    atapi.BooleanField(\'testBooleanField\'),\n-    atapi.IntegerField(\'testIntegerField\'),\n-    atapi.FloatField(\'testFloatField\'),\n-    atapi.FixedPointField(\'testFixedPointField\'),\n-    atapi.DateTimeField(\'testDateTimeField\'),\n-    atapi.LinesField(\'testLinesField\'),\n-    atapi.FileField(\'testFileField\'),\n-    atapi.TextField(\'testTextField\'),\n-    atapi.ImageField(\'testImageField\'),\n-    atapi.ReferenceField(\'testReferenceField\', relationship=\'testrelation\'),\n-    atapi.ReferenceField(\'testMVReferenceField\', relationship=\'testrelation\',\n-                         multiValued=True),\n-    BlobField(\'testBlobField\'),\n-    FileField(\'testBlobFileField\'),\n-    ImageField(\'testBlobImageField\'),\n-    QueryField(\'testQueryField\'),\n-\n-    atapi.StringField(\'testRequiredField\', required=True),\n-    atapi.StringField(\'testReadonlyField\', mode=\'r\'),\n-    atapi.StringField(\'testWriteonlyField\', mode=\'w\'),\n-    atapi.StringField(\'testReadPermissionField\',\n-                      read_permission=permissions.ManagePortal),\n-    atapi.StringField(\'testWritePermissionField\',\n-                      write_permission=permissions.ManagePortal),\n-    atapi.StringField(\'testURLField\', validators=(\'isURL\',)),\n-))\n+PROJECTNAME = "plone.restapi.tests"\n+\n+ATTestDocumentSchema = ATDocumentSchema.copy() + atapi.Schema(\n+    (\n+        atapi.StringField("testStringField"),\n+        atapi.BooleanField("testBooleanField"),\n+        atapi.IntegerField("testIntegerField"),\n+        atapi.FloatField("testFloatField"),\n+        atapi.FixedPointField("testFixedPointField"),\n+        atapi.DateTimeField("testDateTimeField"),\n+        atapi.LinesField("testLinesField"),\n+        atapi.FileField("testFileField"),\n+        atapi.TextField("testTextField"),\n+        atapi.ImageField("testImageField"),\n+        atapi.ReferenceField("testReferenceField", relationship="testrelation"),\n+        atapi.ReferenceField(\n+            "testMVReferenceField", relationship="testrelation", multiValued=True\n+        ),\n+        BlobField("testBlobField"),\n+        FileField("testBlobFileField"),\n+        ImageField("testBlobImageField"),\n+        QueryField("testQueryField"),\n+        atapi.StringField("testRequiredField", required=True),\n+        atapi.StringField("testReadonlyField", mode="r"),\n+        atapi.StringField("testWriteonlyField", mode="w"),\n+        atapi.StringField(\n+            "testReadPermissionField", read_permission=permissions.ManagePortal\n+        ),\n+        atapi.StringField(\n+            "testWritePermissionField", write_permission=permissions.ManagePortal\n+        ),\n+        atapi.StringField("testURLField", validators=("isURL",)),\n+    )\n+)\n \n \n class ATTestDocument(ATDocumentBase):\n@@ -54,7 +58,7 @@ class ATTestDocument(ATDocumentBase):\n \n     schema = ATTestDocumentSchema\n \n-    portal_type = \'ATTestDocument\'\n+    portal_type = "ATTestDocument"\n \n \n registerATCT(ATTestDocument, PROJECTNAME)\n@@ -65,7 +69,7 @@ class ATTestFolder(ATFolder):\n \n     schema = ATFolderSchema\n \n-    portal_type = \'ATTestFolder\'\n+    portal_type = "ATTestFolder"\n \n \n registerATCT(ATTestFolder, PROJECTNAME)\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex da5b3164..e4f7c301 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -31,10 +31,8 @@\n \n \n def vocabularyRequireingContextFactory(context):\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    return SimpleVocabulary([SimpleTerm(catalog.id,\n-                                        catalog.id,\n-                                        catalog.id)])\n+    catalog = getToolByName(context, "portal_catalog")\n+    return SimpleVocabulary([SimpleTerm(catalog.id, catalog.id, catalog.id)])\n \n \n class IDXTestDocumentSchema(model.Schema):\n@@ -45,18 +43,24 @@ class IDXTestDocumentSchema(model.Schema):\n     test_bool_field = schema.Bool(required=False)\n     test_bytes_field = schema.Bytes(required=False)\n     test_bytesline_field = schema.BytesLine(required=False)\n-    test_choice_field = schema.Choice(values=[u\'foo\', u\'bar\'], required=False)\n+    test_choice_field = schema.Choice(values=[u"foo", u"bar"], required=False)\n     test_choice_field_with_vocabulary = schema.Choice(\n-        vocabulary=SimpleVocabulary([\n-            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n-            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n-        ]),  required=False)\n+        vocabulary=SimpleVocabulary(\n+            [\n+                SimpleTerm(u"value1", "token1", u"title1"),\n+                SimpleTerm(u"value2", "token2", u"title2"),\n+            ]\n+        ),\n+        required=False,\n+    )\n     test_date_field = schema.Date(required=False)\n     test_datetime_field = schema.Datetime(required=False)\n     test_datetime_tz_field = schema.Datetime(\n         required=False,\n         defaultFactory=lambda: timezone("Europe/Zurich").localize(\n-            datetime(2017, 10, 31, 10, 0)))\n+            datetime(2017, 10, 31, 10, 0)\n+        ),\n+    )\n     test_decimal_field = schema.Decimal(required=False)\n     test_dict_field = schema.Dict(required=False)\n     test_float_field = schema.Float(required=False)\n@@ -64,30 +68,37 @@ class IDXTestDocumentSchema(model.Schema):\n     test_int_field = schema.Int(required=False)\n     test_list_field = schema.List(required=False)\n     test_list_field_with_choice_with_vocabulary = schema.List(\n-        value_type=schema.Choice(vocabulary=SimpleVocabulary([\n-            SimpleTerm(u\'value1\', \'token1\', u\'title1\'),\n-            SimpleTerm(u\'value2\', \'token2\', u\'title2\'),\n-            SimpleTerm(u\'value3\', \'token3\', u\'title3\'),\n-        ])), required=False)\n+        value_type=schema.Choice(\n+            vocabulary=SimpleVocabulary(\n+                [\n+                    SimpleTerm(u"value1", "token1", u"title1"),\n+                    SimpleTerm(u"value2", "token2", u"title2"),\n+                    SimpleTerm(u"value3", "token3", u"title3"),\n+                ]\n+            )\n+        ),\n+        required=False,\n+    )\n     test_set_field = schema.Set(required=False)\n     test_text_field = schema.Text(required=False)\n     test_textline_field = schema.TextLine(required=False)\n     test_time_field = schema.Time(required=False)\n     test_timedelta_field = schema.Timedelta(required=False)\n     test_tuple_field = schema.Tuple(required=False)\n-    test_nested_list_field = schema.List(\n-        required=False, value_type=schema.Tuple())\n+    test_nested_list_field = schema.List(required=False, value_type=schema.Tuple())\n     test_nested_dict_field = schema.Dict(\n-        required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple())\n+        required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple()\n+    )\n     test_list_choice_with_context_vocabulary_field = schema.List(\n-        title=u\'Field\',\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.restapi.testing.context_vocabulary\'),\n-        required=False)\n+        title=u"Field",\n+        value_type=schema.Choice(vocabulary="plone.restapi.testing.context_vocabulary"),\n+        required=False,\n+    )\n \n     # plone.app.textfield\n     test_richtext_field = RichText(\n-        required=False, allowed_mime_types=[\'text/html\', \'text/plain\'])\n+        required=False, allowed_mime_types=["text/html", "text/plain"]\n+    )\n \n     # plone.namedfile fields\n     test_namedfile_field = namedfile.NamedFile(required=False)\n@@ -97,60 +108,60 @@ class IDXTestDocumentSchema(model.Schema):\n \n     # z3c.relationfield\n     test_relationchoice_field = RelationChoice(\n-        required=False, source=CatalogSource(id=[\'doc1\', \'doc2\']))\n+        required=False, source=CatalogSource(id=["doc1", "doc2"])\n+    )\n     test_relationlist_field = RelationList(\n-        required=False, value_type=RelationChoice(\n-            vocabulary="plone.app.vocabularies.Catalog"))\n+        required=False,\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+    )\n \n     # Test fields for validation\n     test_required_field = schema.TextLine(required=True)\n     test_readonly_field = schema.TextLine(required=False, readonly=True)\n     test_maxlength_field = schema.TextLine(required=False, max_length=10)\n-    test_constraint_field = schema.TextLine(required=False,\n-                                            constraint=lambda x: u\'00\' in x)\n-    test_datetime_min_field = schema.Datetime(required=False,\n-                                              min=datetime(2000, 1, 1))\n+    test_constraint_field = schema.TextLine(\n+        required=False, constraint=lambda x: u"00" in x\n+    )\n+    test_datetime_min_field = schema.Datetime(required=False, min=datetime(2000, 1, 1))\n     test_time_min_field = schema.Time(required=False, min=time(1))\n-    test_timedelta_min_field = schema.Timedelta(required=False,\n-                                                min=timedelta(100))\n-    test_list_value_type_field = schema.List(required=False,\n-                                             value_type=schema.Int())\n-    test_dict_key_type_field = schema.Dict(required=False,\n-                                           key_type=schema.Int())\n-\n-    read_permission(test_read_permission_field=\'cmf.ManagePortal\')\n+    test_timedelta_min_field = schema.Timedelta(required=False, min=timedelta(100))\n+    test_list_value_type_field = schema.List(required=False, value_type=schema.Int())\n+    test_dict_key_type_field = schema.Dict(required=False, key_type=schema.Int())\n+\n+    read_permission(test_read_permission_field="cmf.ManagePortal")\n     test_read_permission_field = schema.TextLine(required=False)\n-    write_permission(test_write_permission_field=\'cmf.ManagePortal\')\n+    write_permission(test_write_permission_field="cmf.ManagePortal")\n     test_write_permission_field = schema.TextLine(required=False)\n \n-    read_permission(test_read_permission_field=\'cmf.ManagePortal\')\n+    read_permission(test_read_permission_field="cmf.ManagePortal")\n     test_read_permission_field = schema.TextLine(required=False)\n \n     test_invariant_field1 = schema.TextLine(required=False)\n     test_invariant_field2 = schema.TextLine(required=False)\n \n-    test_missing_value_field = schema.TextLine(required=False,\n-                                               missing_value=u\'missing\',\n-                                               default=u\'default\')\n+    test_missing_value_field = schema.TextLine(\n+        required=False, missing_value=u"missing", default=u"default"\n+    )\n \n     test_missing_value_required_field = schema.TextLine(\n-        required=True, missing_value=u\'missing\', default=u\'some value\')\n+        required=True, missing_value=u"missing", default=u"some value"\n+    )\n \n     @invariant\n     def validate_same_value(data):\n         if data.test_invariant_field1 != data.test_invariant_field2:\n-            raise Invalid(u\'Must have same values\')\n+            raise Invalid(u"Must have same values")\n \n     # Test fields with default values\n-    test_default_value_field = schema.TextLine(\n-        required=True, default=u\'Default\')\n+    test_default_value_field = schema.TextLine(required=True, default=u"Default")\n \n     @provider(IContextAwareDefaultFactory)\n     def default_factory(context):\n-        return u\'DefaultFactory\'\n+        return u"DefaultFactory"\n \n     test_default_factory_field = schema.TextLine(\n-        required=True, defaultFactory=default_factory)\n+        required=True, defaultFactory=default_factory\n+    )\n \n \n class DXTestDocument(Item):\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 49ea7049..92ba3339 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -7,12 +7,13 @@ def result_paths(results):\n     """Helper function to make it easier to write list-based assertions on\n     result sets from the search endpoint.\n     """\n+\n     def get_path(item):\n-        if \'getPath\' in item:\n-            return item[\'getPath\']\n-        return urlparse(item[\'@id\']).path\n+        if "getPath" in item:\n+            return item["getPath"]\n+        return urlparse(item["@id"]).path\n \n-    return [get_path(item) for item in results[\'items\']]\n+    return [get_path(item) for item in results["items"]]\n \n \n def add_catalog_indexes(portal, indexes):\n@@ -24,7 +25,7 @@ def add_catalog_indexes(portal, indexes):\n     `ZCTextIndex` index).\n \n     """\n-    catalog = getToolByName(portal, \'portal_catalog\')\n+    catalog = getToolByName(portal, "portal_catalog")\n     current_indexes = catalog.indexes()\n \n     indexables = []\ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex f6afbd29..3eea79c5 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -42,7 +42,7 @@ def getLanguageListing(self, combined=False):\n         available = self.getAvailableLanguages(combined=combined)\n         languages = {k: v for k, v in languages.items() if k in available}\n \n-        return [(code, languages[code][u\'name\']) for code in languages]\n+        return [(code, languages[code][u"name"]) for code in languages]\n \n \n class ModifiableContentLanguages(ModifiableLanguages, ContentLanguages):\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex e96de6ff..240f0137 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -4,96 +4,223 @@\n from zExceptions import BadRequest\n \n \n-class OrderingMixin():\n+class OrderingMixin:\n     # This assumes there is a self.folder with 9 documents in it.\n \n     def test_reorder(self):\n         # We run all this in one test, because of dependend ordering.\n         # initial situation\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Normal\n         # Move to top\n-        data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc9\'}}\n+        data = {"ordering": {"delta": "top", "obj_id": "doc9"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc9\', \'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc9",\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Move to bottom\n-        data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc9\'}}\n+        data = {"ordering": {"delta": "bottom", "obj_id": "doc9"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta up\n-        data = {\'ordering\': {\'delta\': -2, \'obj_id\': \'doc5\'}}\n+        data = {"ordering": {"delta": -2, "obj_id": "doc5"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc6\', \'doc7\', \'doc8\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta down\n-        data = {\'ordering\': {\'delta\': 2, \'obj_id\': \'doc6\'}}\n+        data = {"ordering": {"delta": 2, "obj_id": "doc6"}}\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\', ],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc7",\n+                "doc8",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # subset ids\n         # Move to top\n-        data = {\'ordering\': {\'delta\': \'top\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": "top",\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc3", "doc8"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc8",\n+                "doc5",\n+                "doc2",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Move to bottom\n-        data = {\'ordering\': {\'delta\': \'bottom\', \'obj_id\': \'doc8\', \'subset_ids\': [\'doc8\', \'doc2\', \'doc3\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": "bottom",\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc8", "doc2", "doc3"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc3\', \'doc4\', \'doc7\', \'doc8\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc3",\n+                "doc4",\n+                "doc7",\n+                "doc8",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta up\n-        data = {\'ordering\': {\'delta\': -1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc3\', \'doc8\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": -1,\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc3", "doc8"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc5\', \'doc8\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc5",\n+                "doc8",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n         # Delta down\n-        data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc2\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc3\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": 1,\n+                "obj_id": "doc2",\n+                "subset_ids": ["doc2", "doc8", "doc3"],\n+            }\n+        }  # noqa\n         self.deserialize(body=json.dumps(data), context=self.folder)\n         self.assertEqual(\n-            [\'doc1\', \'doc8\', \'doc5\', \'doc2\', \'doc4\', \'doc7\', \'doc3\', \'doc6\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc8",\n+                "doc5",\n+                "doc2",\n+                "doc4",\n+                "doc7",\n+                "doc3",\n+                "doc6",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n     def test_reorder_subsetids(self):\n         # sanity check, initial situation\n         self.assertEqual(\n-            [\'doc1\', \'doc2\', \'doc3\', \'doc4\', \'doc5\', \'doc6\', \'doc7\', \'doc8\', \'doc9\'],  # noqa\n-            self.folder.contentIds()\n+            [\n+                "doc1",\n+                "doc2",\n+                "doc3",\n+                "doc4",\n+                "doc5",\n+                "doc6",\n+                "doc7",\n+                "doc8",\n+                "doc9",\n+            ],  # noqa\n+            self.folder.contentIds(),\n         )\n \n-        data = {\'ordering\': {\'delta\': 1, \'obj_id\': \'doc8\', \'subset_ids\': [\'doc2\', \'doc8\', \'doc6\']}}  # noqa\n+        data = {\n+            "ordering": {\n+                "delta": 1,\n+                "obj_id": "doc8",\n+                "subset_ids": ["doc2", "doc8", "doc6"],\n+            }\n+        }  # noqa\n \n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEqual(\n-            u\'Client/server ordering mismatch\',\n-            str(cm.exception)\n-        )\n+        self.assertEqual(u"Client/server ordering mismatch", str(cm.exception))\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex c3e4b85b..776064aa 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -9,9 +9,9 @@\n import pytz\n from six.moves import range\n \n-LOREMIPSUM_HTML_10_PARAGRAPHS = \'\'\'<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\'\'\'  # noqa\n+LOREMIPSUM_HTML_10_PARAGRAPHS = """<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p><p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p><p>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.</p><p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.</p><p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p><p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.</p><p>Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi."""  # noqa\n \n-LOREMIPSUM_TEXT_PARAGRAPH = \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\'  # noqa\n+LOREMIPSUM_TEXT_PARAGRAPH = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum."  # noqa\n \n \n def set_description(obj):\n@@ -24,9 +24,7 @@ def set_description(obj):\n def set_text(obj):\n     if IDexterityContent.providedBy(obj):\n         obj.text = RichTextValue(\n-            LOREMIPSUM_HTML_10_PARAGRAPHS,\n-            \'text/html\',\n-            \'text/x-html-safe\'\n+            LOREMIPSUM_HTML_10_PARAGRAPHS, "text/html", "text/x-html-safe"\n         )\n     else:\n         obj.setText(LOREMIPSUM_HTML_10_PARAGRAPHS)\n@@ -35,64 +33,55 @@ def set_text(obj):\n def set_image(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobImage\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        obj.image = NamedBlobImage(\n-            data=open(filename, \'r\').read(),\n-            filename=filename\n-        )\n+\n+        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        obj.image = NamedBlobImage(data=open(filename, "r").read(), filename=filename)\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        obj.setImage(open(filename, \'r\').read())\n+        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        obj.setImage(open(filename, "r").read())\n \n \n def set_file(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobFile\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n+\n+        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n         obj.file = NamedBlobFile(\n-            data=open(filename, \'r\').read(),\n+            data=open(filename, "r").read(),\n             filename=filename,\n-            contentType=\'application/pdf\'\n+            contentType="application/pdf",\n         )\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        obj.setFile(open(filename, \'r\').read())\n+        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        obj.setFile(open(filename, "r").read())\n \n \n def publish(content):\n     """Publish the object if it hasn\'t been published."""\n     portal_workflow = getToolByName(getSite(), "portal_workflow")\n-    if portal_workflow.getInfoFor(content, \'review_state\') != \'published\':\n-        portal_workflow.doActionFor(content, \'publish\')\n+    if portal_workflow.getInfoFor(content, "review_state") != "published":\n+        portal_workflow.doActionFor(content, "publish")\n         return True\n     return False\n \n \n def step_setup_content(context):\n-    marker_file = \'plone.restapi_performance_testing.txt\'\n+    marker_file = "plone.restapi_performance_testing.txt"\n     if context.readDataFile(marker_file) is None:\n         return\n     portal = getSite()\n \n     # Testfolder WRITE\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'testfolder-write\',\n-        title=\'Testfolder Write\'\n-    )\n-    publish(portal[\'testfolder-write\'])\n+    portal.invokeFactory("Folder", id="testfolder-write", title="Testfolder Write")\n+    publish(portal["testfolder-write"])\n \n     # Testfolder READ\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'testfolder-read\',\n-        title=\'Testfolder Read\'\n-    )\n-    publish(portal[\'testfolder-read\'])\n-    portal = portal[\'testfolder-read\']\n+    portal.invokeFactory("Folder", id="testfolder-read", title="Testfolder Read")\n+    publish(portal["testfolder-read"])\n+    portal = portal["testfolder-read"]\n \n     # Document\n-    portal.invokeFactory(\'Document\', id=\'document\', title=\'Document\')\n+    portal.invokeFactory("Document", id="document", title="Document")\n     portal.document.description = LOREMIPSUM_TEXT_PARAGRAPH\n     set_description(portal.document)\n     set_text(portal.document)\n@@ -100,70 +89,52 @@ def step_setup_content(context):\n     portal.document.reindexObject()\n \n     # News Item\n-    portal.invokeFactory(\'News Item\', id=\'newsitem\', title=\'NewsItem\')\n+    portal.invokeFactory("News Item", id="newsitem", title="NewsItem")\n     set_description(portal.newsitem)\n     set_text(portal.newsitem)\n     publish(portal.newsitem)\n     portal.newsitem.reindexObject()\n \n     # Folder\n-    portal.invokeFactory(\'Folder\', id=\'folder\', title=\'Folder\')\n+    portal.invokeFactory("Folder", id="folder", title="Folder")\n     set_description(portal.folder)\n     publish(portal.folder)\n \n     # Folder with 10 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-10-items\',\n-        title=\'Folder 10\'\n-    )\n-    folder10 = portal[\'folder-with-10-items\']\n+    portal.invokeFactory("Folder", id="folder-with-10-items", title="Folder 10")\n+    folder10 = portal["folder-with-10-items"]\n     set_description(folder10)\n     publish(folder10)\n     for i in range(1, 11):\n         folder10.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder10[\'doc{}\'.format(i)])\n+        publish(folder10["doc{}".format(i)])\n \n     # Folder with 100 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-100-items\',\n-        title=\'Folder 100\'\n-    )\n-    folder100 = portal[\'folder-with-100-items\']\n+    portal.invokeFactory("Folder", id="folder-with-100-items", title="Folder 100")\n+    folder100 = portal["folder-with-100-items"]\n     set_description(folder100)\n     publish(folder100)\n     for i in range(1, 101):\n         folder100.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder100[\'doc{}\'.format(i)])\n+        publish(folder100["doc{}".format(i)])\n \n     # Folder with 1000 Items\n-    portal.invokeFactory(\n-        \'Folder\',\n-        id=\'folder-with-1000-items\',\n-        title=\'Folder 1000\'\n-    )\n-    folder1000 = portal[\'folder-with-1000-items\']\n+    portal.invokeFactory("Folder", id="folder-with-1000-items", title="Folder 1000")\n+    folder1000 = portal["folder-with-1000-items"]\n     set_description(folder1000)\n     publish(folder1000)\n     for i in range(1, 1001):\n         folder1000.invokeFactory(\n-            \'Document\',\n-            id=\'doc{}\'.format(i),\n-            title=\'Doc {}\'.format(i)\n+            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n         )\n-        publish(folder1000[\'doc{}\'.format(i)])\n+        publish(folder1000["doc{}".format(i)])\n \n     # Collection\n-    portal.invokeFactory(\'Collection\', id=\'collection\', title=\'Collection\')\n+    portal.invokeFactory("Collection", id="collection", title="Collection")\n     set_description(portal.collection)\n     set_text(portal.collection)\n     publish(portal.collection)\n@@ -171,43 +142,43 @@ def step_setup_content(context):\n \n     # Collection with Items\n     portal.invokeFactory(\n-        \'Collection\',\n-        id=\'collectionitems\',\n-        title=\'Collection with Items\'\n+        "Collection", id="collectionitems", title="Collection with Items"\n     )\n     set_description(portal.collectionitems)\n     set_text(portal.collectionitems)\n     if IDexterityContent.providedBy(portal.collectionitems):\n-        portal.collectionitems.query = [{\n-            \'i\': \'Type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n+        portal.collectionitems.query = [\n+            {\n+                "i": "Type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n     publish(portal.collectionitems)\n     portal.collectionitems.reindexObject()\n \n     # Event\n-    portal.invokeFactory(\'Event\', id=\'event\', title=\'Event\')\n+    portal.invokeFactory("Event", id="event", title="Event")\n     set_description(portal.event)\n     publish(portal.event)\n     if IDexterityContent.providedBy(portal.event):\n-        portal.event.timezone = \'Europe/Vienna\'\n+        portal.event.timezone = "Europe/Vienna"\n         tz = pytz.timezone("Europe/Vienna")\n         portal.event.start = tz.localize(datetime(2010, 10, 10, 12, 12))\n         portal.event.end = tz.localize(datetime(2010, 10, 10, 13, 13))\n \n     # Link\n-    portal.invokeFactory(\'Link\', id=\'link\', title=\'Link\')\n+    portal.invokeFactory("Link", id="link", title="Link")\n     set_description(portal.link)\n-    portal.link.remoteUrl = \'http://plone.org\'\n+    portal.link.remoteUrl = "http://plone.org"\n     publish(portal.link)\n \n     # Image\n-    portal.invokeFactory(\'Image\', id=\'image\', title=\'Image\')\n+    portal.invokeFactory("Image", id="image", title="Image")\n     set_description(portal.image)\n     set_image(portal.image)\n \n     # File\n-    portal.invokeFactory(\'File\', id=\'file\', title=\'File\')\n+    portal.invokeFactory("File", id="file", title="File")\n     set_description(portal.file)\n     set_file(portal.file)\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 00563641..f155aa8a 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -16,68 +16,78 @@ class TestATContentSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Collection\', id=\'collection\', title=\'Test Collection\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Collection", id="collection", title="Test Collection"\n+            )\n+        ]\n \n-        self.doc1.setCreationDate(DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.doc1.setModificationDate(DateTime(\'2016-01-21T01:24:11+00:00\'))\n-        self.doc1._setUID(\'76644b6611ab44c6881efd9cb17db12e\')\n+        self.doc1.setCreationDate(DateTime("2016-01-21T01:14:48+00:00"))\n+        self.doc1.setModificationDate(DateTime("2016-01-21T01:24:11+00:00"))\n+        self.doc1._setUID("76644b6611ab44c6881efd9cb17db12e")\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["ATTestFolder"]\n+                "v": ["ATTestFolder"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/plone/folder"\n-            }\n+                "v": "/plone/folder",\n+            },\n         ]\n \n         self.doc1.setQuery(query_data)\n-        self.doc1.setSort_on(\'created\')\n+        self.doc1.setSort_on("created")\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_includes_collection_items(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\n-            \'ATTestFolder\', id=\'subfolder-1\', title=\'Subfolder 1\')\n-        folder.invokeFactory(\n-            \'ATTestFolder\', id=\'subfolder-2\', title=\'Subfolder 2\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc\', title=\'A Document\')\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestFolder", id="subfolder-1", title="Subfolder 1")\n+        folder.invokeFactory("ATTestFolder", id="subfolder-2", title="Subfolder 2")\n+        folder.invokeFactory("ATTestDocument", id="doc", title="A Document")\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'items\', obj)\n-        items = obj[\'items\']\n-        items = sorted(items, key=lambda item: item[u\'@id\'])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Test Folder\',\n-            \'review_state\': \'private\'},\n-            items[0])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder/subfolder-1\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Subfolder 1\',\n-            \'review_state\': \'private\'},\n-            items[1])\n-        self.assertDictEqual({\n-            u\'@id\': u\'http://nohost/plone/folder/subfolder-2\',\n-            u\'@type\': u\'ATTestFolder\',\n-            u\'description\': u\'\',\n-            u\'title\': u\'Subfolder 2\',\n-            \'review_state\': \'private\'},\n-            items[2])\n+        self.assertIn("items", obj)\n+        items = obj["items"]\n+        items = sorted(items, key=lambda item: item[u"@id"])\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Test Folder",\n+                "review_state": "private",\n+            },\n+            items[0],\n+        )\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder/subfolder-1",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Subfolder 1",\n+                "review_state": "private",\n+            },\n+            items[1],\n+        )\n+        self.assertDictEqual(\n+            {\n+                u"@id": u"http://nohost/plone/folder/subfolder-2",\n+                u"@type": u"ATTestFolder",\n+                u"description": u"",\n+                u"title": u"Subfolder 2",\n+                "review_state": "private",\n+            },\n+            items[2],\n+        )\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 92ae9b45..aee241d8 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -30,135 +30,134 @@ class TestATContentDeserializer(unittest.TestCase, OrderingMixin):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n         # ordering setup\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder1\', title=\'Test folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder1", title="Test folder")\n+        ]\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'ATTestDocument\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "ATTestDocument", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, create=False,\n-                    context=None):\n+    def deserialize(self, body="{}", validate_all=False, create=False, context=None):\n         context = context or self.doc1\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all, create=create)\n \n     def test_deserializer_ignores_readonly_fields(self):\n-        self.doc1.getField(\'testReadonlyField\').set(self.doc1, \'Readonly\')\n+        self.doc1.getField("testReadonlyField").set(self.doc1, "Readonly")\n         self.deserialize(body=\'{"testReadonlyField": "Changed"}\')\n-        self.assertEqual(\'Readonly\', self.doc1.getTestReadonlyField())\n+        self.assertEqual("Readonly", self.doc1.getTestReadonlyField())\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertEqual(\'Updated\', self.doc1.getTestStringField())\n+        self.assertEqual("Updated", self.doc1.getTestStringField())\n \n     def test_deserializer_validates_content(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"testURLField": "Not an URL"}\')\n         self.assertEqual(\n             u"Validation failed(isURL): \'Not an URL\' is not a valid url.",\n-            cm.exception.args[0][0][\'message\'])\n+            cm.exception.args[0][0]["message"],\n+        )\n \n     def test_deserializer_clears_creation_flag(self):\n         self.doc1.markCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\', create=True)\n-        self.assertFalse(self.doc1.checkCreationFlag(),\n-                         \'Creation flag not cleared\')\n+        self.assertFalse(self.doc1.checkCreationFlag(), "Creation flag not cleared")\n \n     def test_deserializer_notifies_object_initialized(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IBaseObject, IObjectInitializedEvent,))\n+\n+        provideHandler(handler, (IBaseObject, IObjectInitializedEvent))\n         self.doc1.markCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertTrue(getattr(self.doc1, \'_handler_called\', False),\n-                        \'IObjectInitializedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.doc1, "_handler_called", False),\n+            "IObjectInitializedEvent not notified",\n+        )\n \n     def test_deserializer_notifies_object_edited(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IBaseObject, IObjectEditedEvent,))\n+\n+        provideHandler(handler, (IBaseObject, IObjectEditedEvent))\n         self.doc1.unmarkCreationFlag()\n         self.deserialize(body=\'{"testStringField": "Updated"}\')\n-        self.assertTrue(getattr(self.doc1, \'_handler_called\', False),\n-                        \'IObjectEditedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.doc1, "_handler_called", False),\n+            "IObjectEditedEvent not notified",\n+        )\n \n     def test_deserializer_raises_if_required_value_is_missing(self):\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testStringField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(body=\'{"testStringField": "My Value"}\', validate_all=True)\n         self.assertEqual(\n-            u\'TestRequiredField is required, please correct.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"TestRequiredField is required, please correct.",\n+            cm.exception.args[0][0]["message"],\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n-        self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(u\'My Value\', self.portal.doc1.getTestRequiredField())\n+        self.deserialize(body=\'{"testRequiredField": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"My Value", self.portal.doc1.getTestRequiredField())\n \n     def test_post_validation(self):\n-\n         @implementer(IObjectPostValidation)\n         @adapter(IBaseObject)\n         class PostValidator(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, request):\n-                return {\'post\': \'post_validation_error\'}\n+                return {"post": "post_validation_error"}\n \n         provideSubscriptionAdapter(PostValidator)\n \n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"testRequiredField": "My Value"}\', validate_all=True\n+            )\n \n-        self.assertEqual(\n-            \'post_validation_error\', cm.exception.args[0][0][\'message\'])\n+        self.assertEqual("post_validation_error", cm.exception.args[0][0]["message"])\n \n     def test_pre_validation(self):\n-\n         @implementer(IObjectPreValidation)\n         @adapter(IBaseObject)\n         class PreValidator(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, request):\n-                return {\'pre\': \'pre_validation_error\'}\n+                return {"pre": "pre_validation_error"}\n \n         provideSubscriptionAdapter(PreValidator)\n \n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"testRequiredField": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"testRequiredField": "My Value"}\', validate_all=True\n+            )\n \n-        self.assertEqual(\n-            \'pre_validation_error\', cm.exception.args[0][0][\'message\'])\n+        self.assertEqual("pre_validation_error", cm.exception.args[0][0]["message"])\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n+        self.assertEqual("my_new_layout", self.doc1.getLayout())\n \n \n class TestValidationRequest(unittest.TestCase):\n@@ -167,51 +166,54 @@ class TestValidationRequest(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n-        self.request = ValidationRequest(self.layer[\'request\'], self.doc1)\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n+        self.request = ValidationRequest(self.layer["request"], self.doc1)\n \n     def test_value_from_validation_request_using_key_access(self):\n-        self.assertEqual(\'Test Document\', self.request[\'title\'])\n+        self.assertEqual("Test Document", self.request["title"])\n \n     def test_value_from_validation_request_using_get(self):\n-        self.assertEqual(\'Test Document\', self.request.get(\'title\'))\n+        self.assertEqual("Test Document", self.request.get("title"))\n \n     def test_value_from_validation_request_form_using_key_access(self):\n-        self.assertEqual(\'Test Document\', self.request.form[\'title\'])\n+        self.assertEqual("Test Document", self.request.form["title"])\n \n     def test_value_from_validation_request_form_using_get(self):\n-        self.assertEqual(\'Test Document\', self.request.form.get(\'title\'))\n+        self.assertEqual("Test Document", self.request.form.get("title"))\n \n     def test_validation_request_contains_key(self):\n-        self.assertIn(\'title\', self.request)\n+        self.assertIn("title", self.request)\n \n     def test_validation_request_form_contains_key(self):\n-        self.assertIn(\'title\', self.request.form)\n+        self.assertIn("title", self.request.form)\n \n     def test_validation_request_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n-            self.request[\'foo\']\n+            self.request["foo"]\n \n     def test_validation_request_get_returns_default_value(self):\n-        self.assertEqual(None, self.request.get(\'foo\'))\n+        self.assertEqual(None, self.request.get("foo"))\n         marker = object()\n-        self.assertEqual(marker, self.request.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.get("foo", marker))\n \n     def test_validation_request_form_key_access_raises_keyerror(self):\n         with self.assertRaises(KeyError):\n-            self.request.form[\'foo\']\n+            self.request.form["foo"]\n \n     def test_validation_request_form_get_returns_default_value(self):\n-        self.assertEqual(None, self.request.form.get(\'foo\'))\n+        self.assertEqual(None, self.request.form.get("foo"))\n         marker = object()\n-        self.assertEqual(marker, self.request.form.get(\'foo\', marker))\n+        self.assertEqual(marker, self.request.form.get("foo", marker))\n \n     def test_value_from_real_request_using_key_access(self):\n-        self.assertEqual(\'GET\', self.request[\'REQUEST_METHOD\'])\n+        self.assertEqual("GET", self.request["REQUEST_METHOD"])\n \n     def test_value_form_real_request_using_get(self):\n-        self.assertEqual(\'GET\', self.request.get(\'REQUEST_METHOD\'))\n+        self.assertEqual("GET", self.request.get("REQUEST_METHOD"))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex 86f9958f..407e333b 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -23,163 +23,173 @@ class TestATContentSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n-        self.doc1.setCreationDate(DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.doc1.setModificationDate(DateTime(\'2016-01-21T01:24:11+00:00\'))\n-        self.doc1._setUID(\'76644b6611ab44c6881efd9cb17db12e\')\n+        self.doc1.setCreationDate(DateTime("2016-01-21T01:14:48+00:00"))\n+        self.doc1.setModificationDate(DateTime("2016-01-21T01:24:11+00:00"))\n+        self.doc1._setUID("76644b6611ab44c6881efd9cb17db12e")\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize(self.doc1)\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n-    @unittest.skip(\'We do not include the context at this point\')\n+    @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@context\', obj)\n-        self.assertEqual(u\'http://www.w3.org/ns/hydra/context.jsonld\',\n-                         obj[u\'@context\'])\n+        self.assertIn(u"@context", obj)\n+        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@id\', obj)\n-        self.assertEqual(self.doc1.absolute_url(), obj[u\'@id\'])\n+        self.assertIn(u"@id", obj)\n+        self.assertEqual(self.doc1.absolute_url(), obj[u"@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'id\', obj)\n-        self.assertEqual(self.doc1.id, obj[u\'id\'])\n+        self.assertIn(u"id", obj)\n+        self.assertEqual(self.doc1.id, obj[u"id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'@type\', obj)\n-        self.assertEqual(self.doc1.portal_type, obj[u\'@type\'])\n+        self.assertIn(u"@type", obj)\n+        self.assertEqual(self.doc1.portal_type, obj[u"@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'review_state\', obj)\n-        self.assertEqual(u\'private\', obj[u\'review_state\'])\n+        self.assertIn(u"review_state", obj)\n+        self.assertEqual(u"private", obj[u"review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'UID\', obj)\n-        self.assertEqual(u\'76644b6611ab44c6881efd9cb17db12e\', obj[u\'UID\'])\n+        self.assertIn(u"UID", obj)\n+        self.assertEqual(u"76644b6611ab44c6881efd9cb17db12e", obj[u"UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'creation_date\', obj)\n-        self.assertEqual(u\'2016-01-21T01:14:48+00:00\', obj[u\'creation_date\'])\n+        self.assertIn(u"creation_date", obj)\n+        self.assertEqual(u"2016-01-21T01:14:48+00:00", obj[u"creation_date"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize(self.doc1)\n-        self.assertIn(u\'modification_date\', obj)\n-        self.assertEqual(u\'2016-01-21T01:24:11+00:00\',\n-                         obj[u\'modification_date\'])\n+        self.assertIn(u"modification_date", obj)\n+        self.assertEqual(u"2016-01-21T01:24:11+00:00", obj[u"modification_date"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.doc1.setTestReadPermissionField(u\'Secret Stuff\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'testReadPermissionField\',\n-                         self.serialize(self.doc1))\n+        self.doc1.setTestReadPermissionField(u"Secret Stuff")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"testReadPermissionField", self.serialize(self.doc1))\n \n     def test_serializer_ignores_writeonly_field(self):\n-        self.doc1.setTestWriteonlyField(u\'Secret Stuff\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'testWriteonlyField\',\n-                         self.serialize(self.doc1))\n+        self.doc1.setTestWriteonlyField(u"Secret Stuff")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"testWriteonlyField", self.serialize(self.doc1))\n \n     def test_serializer_includes_folder_items(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\'ATTestFolder\', id=\'subfolder\', title=\'Subfolder\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc\', title=\'A Document\')\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestFolder", id="subfolder", title="Subfolder")\n+        folder.invokeFactory("ATTestDocument", id="doc", title="A Document")\n         obj = self.serialize(folder)\n-        self.assertIn(\'items\', obj)\n-        self.assertDictEqual({\n-            \'@id\': \'http://nohost/plone/folder/subfolder\',\n-            \'@type\': \'ATTestFolder\',\n-            \'description\': \'\',\n-            \'title\': u\'Subfolder\',\n-            \'review_state\': \'private\'},\n-            obj[\'items\'][0])\n-        self.assertDictEqual({\n-            \'@id\': \'http://nohost/plone/folder/doc\',\n-            \'@type\': \'ATTestDocument\',\n-            \'description\': \'\',\n-            \'title\': u\'A Document\',\n-            \'review_state\': \'private\'},\n-            obj[\'items\'][1])\n-\n-    def test_serializer_orders_folder_items_by_get_object_position_in_parent(self):  # noqa\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'ATTestFolder\', id=\'folder\', title=\'Test Folder\')]\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc1\', title=\'A Document\')\n-        folder.invokeFactory(\'ATTestDocument\', id=\'doc2\', title=\'Second doc\')\n+        self.assertIn("items", obj)\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/folder/subfolder",\n+                "@type": "ATTestFolder",\n+                "description": "",\n+                "title": u"Subfolder",\n+                "review_state": "private",\n+            },\n+            obj["items"][0],\n+        )\n+        self.assertDictEqual(\n+            {\n+                "@id": "http://nohost/plone/folder/doc",\n+                "@type": "ATTestDocument",\n+                "description": "",\n+                "title": u"A Document",\n+                "review_state": "private",\n+            },\n+            obj["items"][1],\n+        )\n+\n+    def test_serializer_orders_folder_items_by_get_object_position_in_parent(\n+        self\n+    ):  # noqa\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestDocument", id="doc1", title="A Document")\n+        folder.invokeFactory("ATTestDocument", id="doc2", title="Second doc")\n \n         # Change GOPIP (getObjectPositionInParent) based order\n-        folder.moveObjectsUp(\'doc2\')\n+        folder.moveObjectsUp("doc2")\n \n         obj = self.serialize(folder)\n \n-        self.assertIn(\'items\', obj)\n+        self.assertIn("items", obj)\n         self.assertEqual(\n-            obj[\'items\'],\n+            obj["items"],\n             [\n                 {\n-                    \'@id\': \'http://nohost/plone/folder/doc2\',\n-                    \'@type\': \'ATTestDocument\',\n-                    \'description\': \'\',\n-                    \'title\': u\'Second doc\',\n-                    \'review_state\': \'private\'\n+                    "@id": "http://nohost/plone/folder/doc2",\n+                    "@type": "ATTestDocument",\n+                    "description": "",\n+                    "title": u"Second doc",\n+                    "review_state": "private",\n                 },\n                 {\n-                    \'@id\': \'http://nohost/plone/folder/doc1\',\n-                    \'@type\': \'ATTestDocument\',\n-                    \'description\': \'\',\n-                    \'title\': u\'A Document\',\n-                    \'review_state\': \'private\'\n+                    "@id": "http://nohost/plone/folder/doc1",\n+                    "@type": "ATTestDocument",\n+                    "description": "",\n+                    "title": u"A Document",\n+                    "review_state": "private",\n                 },\n-            ])\n+            ],\n+        )\n \n     def test_get_layout(self):\n         current_layout = self.doc1.getLayout()\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'layout\', obj)\n-        self.assertEqual(current_layout, obj[\'layout\'])\n+        self.assertIn("layout", obj)\n+        self.assertEqual(current_layout, obj["layout"])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         obj = self.serialize(self.doc1)\n-        self.assertIn(\'foo\', obj[\'@components\'])\n-        self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        self.assertIn("foo", obj["@components"])\n+        self.assertEqual("collapsed", obj["@components"]["foo"])\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n-        serializer = getMultiAdapter((self.portal.folder, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Folder", id=u"folder")\n+        serializer = getMultiAdapter(\n+            (self.portal.folder, self.request), ISerializeToJson\n+        )\n         obj = serializer()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\ndiff --git a/src/plone/restapi/tests/test_atfield_deserializer.py b/src/plone/restapi/tests/test_atfield_deserializer.py\nindex 0d9d384f..3e880f66 100644\n--- a/src/plone/restapi/tests/test_atfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_atfield_deserializer.py\n@@ -16,218 +16,227 @@ class TestATFieldDeserializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')\n+        self.portal.invokeFactory("ATTestDocument", id="doc1", title="Test Document")\n \n     def deserialize(self, fieldname, value):\n         field = self.portal.doc1.getField(fieldname)\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n         return deserializer(value)\n \n     def test_string_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value, kwargs = self.deserialize("testStringField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_boolean_field_deserialization_returns_true(self):\n-        value, kwargs = self.deserialize(\'testBooleanField\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value, kwargs = self.deserialize("testBooleanField", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_boolean_field_deserialization_returns_false(self):\n-        value, kwargs = self.deserialize(\'testBooleanField\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value, kwargs = self.deserialize("testBooleanField", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_integer_field_deserialization_returns_integer_value(self):\n-        value, kwargs = self.deserialize(\'testIntegerField\', 777)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value, kwargs = self.deserialize("testIntegerField", 777)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(777, value)\n \n     def test_float_field_deserialization_returns_float_value(self):\n-        value, kwargs = self.deserialize(\'testFloatField\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value, kwargs = self.deserialize("testFloatField", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testFixedPointField\', u\'1.1\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'1.1\', value)\n+        value, kwargs = self.deserialize("testFixedPointField", u"1.1")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"1.1", value)\n \n     def test_datetime_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testDateTimeField\',\n-                                         u\'2015-12-20T19:51:06.375Z\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'2015-12-20T19:51:06.375Z\', value)\n+        value, kwargs = self.deserialize(\n+            "testDateTimeField", u"2015-12-20T19:51:06.375Z"\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"2015-12-20T19:51:06.375Z", value)\n \n     def test_lines_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testLinesField\', u\'line1\\nline2\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(\'line1\\nline2\', value)\n+        value, kwargs = self.deserialize("testLinesField", u"line1\\nline2")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual("line1\\nline2", value)\n \n     def test_lines_field_deserialization_returns_list(self):\n-        value, kwargs = self.deserialize(\'testLinesField\',\n-                                         [u\'line1\', u\'line2\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'line1\', u\'line2\'], value)\n+        value, kwargs = self.deserialize("testLinesField", [u"line1", u"line2"])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"line1", u"line2"], value)\n \n     def test_file_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testFileField\', u\'Spam and eggs!\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize("testFileField", u"Spam and eggs!")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n \n     def test_file_field_deserialization_returns_decoded_value(self):\n-        value, kwargs = self.deserialize(\'testFileField\', {\n-            u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n-            u\'encoding\': u\'base64\',\n-        })\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize(\n+            "testFileField", {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"}\n+        )\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Spam and eggs!", value)\n \n     def test_file_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testFileField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testFileField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n \n     def test_text_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testTextField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value, kwargs = self.deserialize("testTextField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_text_field_deserialization_returns_mimetype(self):\n-        value, kwargs = self.deserialize(\'testTextField\', {\n-            u\'data\': u\'K\xc3\xa4fer\',\n-            u\'content-type\': \'text/html\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n-        self.assertEqual(\'text/html\', kwargs[u\'mimetype\'])\n+        value, kwargs = self.deserialize(\n+            "testTextField", {u"data": u"K\xc3\xa4fer", u"content-type": "text/html"}\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n+        self.assertEqual("text/html", kwargs[u"mimetype"])\n \n     def test_image_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testImageField\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'filename\': \'image.gif\',\n-            u\'content-type\': \'image/gif\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testImageField",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"filename": "image.gif",\n+                u"content-type": "image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertTrue(value.startswith("GIF89a"))\n+        self.assertEqual("image/gif", kwargs[u"mimetype"])\n+        self.assertEqual("image.gif", kwargs[u"filename"])\n \n     def test_blob_field_deserialization_returns_string(self):\n-        value, kwargs = self.deserialize(\'testBlobField\', u\'Spam and eggs!\')\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n+        value, kwargs = self.deserialize("testBlobField", u"Spam and eggs!")\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n \n     def test_blob_field_deserialization_returns_mimetype_and_filename(self):\n-        value, kwargs = self.deserialize(\'testBlobField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n-\n-    def test_blobfile_field_deserialization_returns_mimetype_and_filename(\n-            self):\n-        value, kwargs = self.deserialize(\'testBlobFileField\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': \'doc.txt\',\n-            u\'content-type\': \'text/plain\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertEqual(u\'Spam and eggs!\', value)\n-        self.assertEqual(\'text/plain\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'doc.txt\', kwargs[u\'filename\'])\n-\n-    def test_blobimage_field_deserialization_returns_mimetype_and_filename(\n-            self):\n-        value, kwargs = self.deserialize(\'testBlobImageField\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'filename\': \'image.gif\',\n-            u\'content-type\': \'image/gif\',\n-        })\n-        self.assertTrue(\n-            isinstance(value, six.string_types), \'Not a <basestring>\')\n-        self.assertTrue(value.startswith(\'GIF89a\'))\n-        self.assertEqual(\'image/gif\', kwargs[u\'mimetype\'])\n-        self.assertEqual(\'image.gif\', kwargs[u\'filename\'])\n+        value, kwargs = self.deserialize(\n+            "testBlobField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n+\n+    def test_blobfile_field_deserialization_returns_mimetype_and_filename(self):\n+        value, kwargs = self.deserialize(\n+            "testBlobFileField",\n+            {\n+                u"data": u"Spam and eggs!",\n+                u"filename": "doc.txt",\n+                u"content-type": "text/plain",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertEqual(u"Spam and eggs!", value)\n+        self.assertEqual("text/plain", kwargs[u"mimetype"])\n+        self.assertEqual("doc.txt", kwargs[u"filename"])\n+\n+    def test_blobimage_field_deserialization_returns_mimetype_and_filename(self):\n+        value, kwargs = self.deserialize(\n+            "testBlobImageField",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"filename": "image.gif",\n+                u"content-type": "image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, six.string_types), "Not a <basestring>")\n+        self.assertTrue(value.startswith("GIF89a"))\n+        self.assertEqual("image/gif", kwargs[u"mimetype"])\n+        self.assertEqual("image.gif", kwargs[u"filename"])\n \n     def test_query_field_deserialization_requests_list(self):\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["News Item"]\n+                "v": ["News Item"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/Plone/news"\n-            }\n+                "v": "/Plone/news",\n+            },\n         ]\n-        value, kwargs = self.deserialize(\'testQueryField\', query_data)\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value, kwargs = self.deserialize("testQueryField", query_data)\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(value, query_data)\n \n     def test_reference_field_deserialization_returns_uid_in_list(self):\n-        value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         u\'0fc0dac495034b869b3b90c9179499a9\')\n-        self.assertTrue(isinstance(value, list), \'Not a <basestring>\')\n-        self.assertEqual([u\'0fc0dac495034b869b3b90c9179499a9\'], value)\n+        value, kwargs = self.deserialize(\n+            "testReferenceField", u"0fc0dac495034b869b3b90c9179499a9"\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <basestring>")\n+        self.assertEqual([u"0fc0dac495034b869b3b90c9179499a9"], value)\n \n     def test_reference_field_deserialization_returns_uids(self):\n-        value, kwargs = self.deserialize(\'testReferenceField\', [\n-            u\'0fc0dac495034b869b3b90c9179499a9\',\n-            u\'984c22058343453f997ef9e9de1e8136\',\n-        ])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertIn(u\'0fc0dac495034b869b3b90c9179499a9\', value)\n-        self.assertIn(u\'984c22058343453f997ef9e9de1e8136\', value)\n+        value, kwargs = self.deserialize(\n+            "testReferenceField",\n+            [u"0fc0dac495034b869b3b90c9179499a9", u"984c22058343453f997ef9e9de1e8136"],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertIn(u"0fc0dac495034b869b3b90c9179499a9", value)\n+        self.assertIn(u"984c22058343453f997ef9e9de1e8136", value)\n \n     def test_reference_field_deserialization_returns_object_in_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n-        value, kwargs = self.deserialize(\'testReferenceField\',\n-                                         six.text_type(doc2.absolute_url()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenced Document"\n+            )\n+        ]\n+        value, kwargs = self.deserialize(\n+            "testReferenceField", six.text_type(doc2.absolute_url())\n+        )\n         self.assertEqual(doc2, value[0])\n \n     def test_reference_field_deserialization_returns_objects(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenced Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc3\', title=\'Referenced Document\')]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenced Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc3", title="Referenced Document"\n+            )\n+        ]\n         value, kwargs = self.deserialize(\n-            \'testReferenceField\',\n-            [six.text_type(\n-                doc2.absolute_url()), six.text_type(doc3.absolute_url())])\n+            "testReferenceField",\n+            [six.text_type(doc2.absolute_url()), six.text_type(doc3.absolute_url())],\n+        )\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\ndiff --git a/src/plone/restapi/tests/test_atfield_serializer.py b/src/plone/restapi/tests/test_atfield_serializer.py\nindex 736001bb..6ca6fa28 100644\n--- a/src/plone/restapi/tests/test_atfield_serializer.py\n+++ b/src/plone/restapi/tests/test_atfield_serializer.py\n@@ -14,10 +14,10 @@\n import unittest\n import six\n \n-if PLONE_VERSION.base_version >= \'5.1\':\n-    GIF_SCALE_FORMAT = \'png\'\n+if PLONE_VERSION.base_version >= "5.1":\n+    GIF_SCALE_FORMAT = "png"\n else:\n-    GIF_SCALE_FORMAT = \'jpeg\'\n+    GIF_SCALE_FORMAT = "jpeg"\n \n \n class TestATFieldSerializer(unittest.TestCase):\n@@ -26,248 +26,242 @@ class TestATFieldSerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc1\', title=\'Test Document\')]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n     def serialize(self, fieldname, value, **kwargs):\n         field = self.doc1.getField(fieldname)\n         mutator = field.getMutator(self.doc1)\n         mutator(value, **kwargs)\n-        serializer = getMultiAdapter((field, self.doc1, self.request),\n-                                     IFieldSerializer)\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n         return serializer()\n \n     def test_string_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testStringField\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("testStringField", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_boolean_field_serialization_returns_true(self):\n-        value = self.serialize(\'testBooleanField\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("testBooleanField", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertTrue(value)\n \n     def test_boolean_field_serialization_returns_false(self):\n-        value = self.serialize(\'testBooleanField\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("testBooleanField", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertFalse(value)\n \n     def test_integer_field_serialization_returns_int(self):\n-        value = self.serialize(\'testIntegerField\', 333)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.serialize("testIntegerField", 333)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(333, value)\n \n     def test_float_field_serialization_returns_float(self):\n-        value = self.serialize(\'testFloatField\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not an <float>\')\n+        value = self.serialize("testFloatField", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not an <float>")\n         self.assertEqual(1.5, value)\n \n     def test_fixedpoint_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testFixedPointField\', u\'1.11\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'1.11\', value)\n+        value = self.serialize("testFixedPointField", u"1.11")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"1.11", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'testDateTimeField\',\n-                               DateTime(\'2016-01-21T01:14:48+00:00\'))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2016-01-21T01:14:48+00:00\', value)\n+        value = self.serialize(\n+            "testDateTimeField", DateTime("2016-01-21T01:14:48+00:00")\n+        )\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2016-01-21T01:14:48+00:00", value)\n \n     def test_lines_field_serialization_returns_list(self):\n-        value = self.serialize(\'testLinesField\', u\'foo\\nbar\')\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'foo\', u\'bar\'], value)\n+        value = self.serialize("testLinesField", u"foo\\nbar")\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"foo", u"bar"], value)\n \n     def test_file_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testFileField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+        value = self.serialize(\n+            "testFileField", "spam and eggs", filename="spam.txt", mimetype="text/plain"\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-        url = u\'http://nohost/plone/doc1/@@download/testFileField\'\n+        url = u"http://nohost/plone/doc1/@@download/testFileField"\n         self.assertEqual(\n-            {u\'filename\': u\'spam.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": u"spam.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_text_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testTextField\', \'<p>spam and eggs</p>\')\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertDictEqual({\n-            \'content-type\': u\'text/plain\',\n-            \'data\': u\' spam and eggs \'}, value)\n+        value = self.serialize("testTextField", "<p>spam and eggs</p>")\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertDictEqual(\n+            {"content-type": u"text/plain", "data": u" spam and eggs "}, value\n+        )\n \n     def test_image_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'testImageField\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "testImageField"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n-                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+                fn, image_data, filename="1024x768.gif", mimetype="image/gif"\n+            )\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n             self.maxDiff = 99999\n             obj_url = self.doc1.absolute_url()\n-            scale_url_uuid = \'uuid_1\'\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n-                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            scale_url_uuid = "uuid_1"\n+            download_url = u"{}/@@images/{}.{}".format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 80,\n-                    u\'height\': 60},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 80, u"height": 60},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_blob_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testBlobField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n-        self.assertTrue(isinstance(value, dict), \'Not an <dict>\')\n-        url = u\'http://nohost/plone/doc1/@@download/testBlobField\'\n+        value = self.serialize(\n+            "testBlobField", "spam and eggs", filename="spam.txt", mimetype="text/plain"\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not an <dict>")\n+        url = u"http://nohost/plone/doc1/@@download/testBlobField"\n         self.assertEqual(\n-            {u\'filename\': \'spam.txt\',\n-             u\'size\': 13,\n-             u\'content-type\': \'text/plain\',\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": "spam.txt",\n+                u"size": 13,\n+                u"content-type": "text/plain",\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_blobfile_field_serialization_returns_dict(self):\n-        value = self.serialize(\'testBlobFileField\', \'spam and eggs\',\n-                               filename=\'spam.txt\', mimetype=\'text/plain\')\n+        value = self.serialize(\n+            "testBlobFileField",\n+            "spam and eggs",\n+            filename="spam.txt",\n+            mimetype="text/plain",\n+        )\n \n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        url = u\'http://nohost/plone/doc1/@@download/testBlobFileField\'\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        url = u"http://nohost/plone/doc1/@@download/testBlobFileField"\n         self.assertEqual(\n-            {u\'filename\': \'spam.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': url},\n-            value)\n+            {\n+                u"filename": "spam.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": url,\n+            },\n+            value,\n+        )\n \n     def test_blobimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'testBlobImageField\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "testBlobImageField"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n-                fn, image_data, filename=\'1024x768.gif\', mimetype=\'image/gif\')\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-            scale_url_uuid = \'uuid_1\'\n+                fn, image_data, filename="1024x768.gif", mimetype="image/gif"\n+            )\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n-                obj_url, scale_url_uuid, GIF_SCALE_FORMAT)\n+            download_url = u"{}/@@images/{}.{}".format(\n+                obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n+            )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_query_field_serialization_returns_list(self):\n         query_data = [\n             {\n                 "i": "portal_type",\n                 "o": "plone.app.querystring.operation.selection.is",\n-                "v": ["News Item"]\n+                "v": ["News Item"],\n             },\n             {\n                 "i": "path",\n                 "o": "plone.app.querystring.operation.string.path",\n-                "v": "/Plone/news"\n-            }\n+                "v": "/Plone/news",\n+            },\n         ]\n-        value = self.serialize(\'testQueryField\', query_data)\n-        self.assertTrue(isinstance(value, list), \'Not a list\')\n+        value = self.serialize("testQueryField", query_data)\n+        self.assertTrue(isinstance(value, list), "Not a list")\n         self.assertEqual(value, query_data)\n \n     def test_reference_field_serialization_returns_unicode(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.serialize(\'testReferenceField\', doc2.UID())\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'http://nohost/plone/doc2\', value)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.serialize("testReferenceField", doc2.UID())\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"http://nohost/plone/doc2", value)\n \n     def test_reference_field_serialization_returns_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n-        value = self.serialize(\'testMVReferenceField\',\n-                               [doc2.UID(), doc3.UID()])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.serialize("testMVReferenceField", [doc2.UID(), doc3.UID()])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [u\'http://nohost/plone/doc2\', u\'http://nohost/plone/doc3\'],\n-            sorted(value))\n+            [u"http://nohost/plone/doc2", u"http://nohost/plone/doc3"], sorted(value)\n+        )\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 20889aa6..f66cda27 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -14,92 +14,92 @@ class TestLogin(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@login\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone/@login", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_login_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_login_without_credentials_fails(self):\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_login_with_invalid_credentials_fails(self):\n-        self.request[\'BODY\'] = \'{"login": "admin", "password": "admin"}\'\n+        self.request["BODY"] = \'{"login": "admin", "password": "admin"}\'\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertNotIn("token", res)\n \n     def test_successful_login_returns_token(self):\n-        self.request[\'BODY\'] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n             SITE_OWNER_NAME,\n-            SITE_OWNER_PASSWORD\n+            SITE_OWNER_PASSWORD,\n         )\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_invalid_token_returns_400(self):\n-        invalid_token = \'abc123\'\n-        self.request._auth = \'Bearer {}\'.format(invalid_token)\n-        self.assertRaises(Unauthorized, self.traverse, path=\'/plone\')\n+        invalid_token = "abc123"\n+        self.request._auth = "Bearer {}".format(invalid_token)\n+        self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_expired_token_returns_400(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\n-            \'admin\',\n-            timeout=-60\n-        )\n-        self.request._auth = \'Bearer {}\'.format(token)\n-        self.assertRaises(Unauthorized, self.traverse, path=\'/plone\')\n+        token = self.portal.acl_users.jwt_auth.create_token("admin", timeout=-60)\n+        self.request._auth = "Bearer {}".format(token)\n+        self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_login_without_api_permission(self):\n         self.portal.manage_permission(UseRESTAPI, roles=[])\n-        self.request[\'BODY\'] = \'{"login": "%s", "password": "%s"}\' % (\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+            SITE_OWNER_NAME,\n+            SITE_OWNER_PASSWORD,\n+        )\n         service = self.traverse()\n         res = service.render()\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_login_with_zope_user_fails_without_pas_plugin(self):\n-        uf = self.layer[\'app\'].acl_users\n-        uf.plugins.users.addUser(\'zopeuser\', \'zopeuser\', \'secret\')\n-        if \'jwt_auth\' in uf:\n-            uf[\'jwt_auth\'].manage_activateInterfaces([])\n-        self.request[\'BODY\'] = \'{"login": "zopeuser", "password": "secret"}\'\n+        uf = self.layer["app"].acl_users\n+        uf.plugins.users.addUser("zopeuser", "zopeuser", "secret")\n+        if "jwt_auth" in uf:\n+            uf["jwt_auth"].manage_activateInterfaces([])\n+        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n-        self.assertEqual(\'JWT authentication plugin not installed.\',\n-                         res[\'error\'][\'message\'])\n-        self.assertNotIn(\'token\', res)\n+        self.assertIn("error", res)\n+        self.assertEqual(\n+            "JWT authentication plugin not installed.", res["error"]["message"]\n+        )\n+        self.assertNotIn("token", res)\n \n     def test_login_with_zope_user(self):\n-        self.layer[\'app\'].acl_users.plugins.users.addUser(\n-            \'zopeuser\', \'zopeuser\', \'secret\')\n-        self.request[\'BODY\'] = \'{"login": "zopeuser", "password": "secret"}\'\n+        self.layer["app"].acl_users.plugins.users.addUser(\n+            "zopeuser", "zopeuser", "secret"\n+        )\n+        self.request["BODY"] = \'{"login": "zopeuser", "password": "secret"}\'\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n \n class TestLogout(TestCase):\n@@ -107,43 +107,42 @@ class TestLogout(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@logout\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(self, path="/plone/@logout", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_logout_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n+        self.assertIn("error", res)\n \n     def test_logout_with_not_stored_token_fails(self):\n         self.portal.acl_users.jwt_auth.store_tokens = False\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(501, self.request.response.getStatus())\n-        self.assertEqual("Token can\'t be invalidated", res[\'error\'][\'message\'])\n+        self.assertEqual("Token can\'t be invalidated", res["error"]["message"])\n \n     def test_logout_with_without_credentials_fails(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual("Unknown token", res[\'error\'][\'message\'])\n+        self.assertEqual("Unknown token", res["error"]["message"])\n \n     def test_logout_succeeds(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n@@ -154,53 +153,49 @@ class TestRenew(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def traverse(self, path=\'/plone/@login-renew\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def traverse(\n+        self, path="/plone/@login-renew", accept="application/json", method="POST"\n+    ):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_renew_without_pas_plugin_fails(self):\n-        self.portal.acl_users._delOb(\'jwt_auth\')\n+        self.portal.acl_users._delOb("jwt_auth")\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'error\', res)\n+        self.assertIn("error", res)\n \n     def test_renew_returns_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'token\', res)\n+        self.assertIn("token", res)\n \n     def test_renew_deletes_old_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        token = self.portal.acl_users.jwt_auth.create_token(\'admin\')\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = self.portal.acl_users.jwt_auth.create_token("admin")\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n-        self.assertIn(\'token\', res)\n-        self.assertEqual(\n-            1, len(self.portal.acl_users.jwt_auth._tokens[\'admin\']))\n+        self.assertIn("token", res)\n+        self.assertEqual(1, len(self.portal.acl_users.jwt_auth._tokens["admin"]))\n \n     def test_renew_fails_on_invalid_token(self):\n-        token = \'this is an invalid token\'\n-        self.request._auth = \'Bearer {}\'.format(token)\n+        token = "this is an invalid token"\n+        self.request._auth = "Bearer {}".format(token)\n         service = self.traverse()\n         res = service.reply()\n+        self.assertEqual(service.request.response.status, 401)\n         self.assertEqual(\n-            service.request.response.status,\n-            401\n-        )\n-        self.assertEqual(\n-            res[\'error\'][\'type\'],\n-            \'Invalid or expired authentication token\'\n+            res["error"]["type"], "Invalid or expired authentication token"\n         )\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 7852d5d8..9159aa72 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -26,13 +26,13 @@ class TestBatchingDXBase(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n@@ -40,9 +40,10 @@ def tearDown(self):\n \n     def _create_doc(self, container, number):\n         createContentInContainer(\n-            container, u\'DXTestDocument\',\n-            id=\'doc-%s\' % str(number + 1),\n-            title=u\'Document %s\' % str(number + 1),\n+            container,\n+            u"DXTestDocument",\n+            id="doc-%s" % str(number + 1),\n+            title=u"Document %s" % str(number + 1),\n             created=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -56,9 +57,7 @@ class TestBatchingSearch(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingSearch, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -66,60 +65,61 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder/@search\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder/@search")\n \n     def test_canonical_url_preserves_multiple_metadata_fields(self):\n-        qs = \'b_start=2&b_size=2&metadata_fields=one&metadata_fields=two\'\n-        response = self.api_session.get(\'/folder/@search?%s\' % qs)\n+        qs = "b_start=2&b_size=2&metadata_fields=one&metadata_fields=two"\n+        response = self.api_session.get("/folder/@search?%s" % qs)\n \n         # Response should contain canonical URL without batching params.\n         # Argument lists like metadata_fields (same query string parameter\n         # repeated multiple times) should be preserved.\n \n         original_qs = parse_qsl(qs)\n-        canonicalized_qs = parse_qsl(urlparse(response.json()[\'@id\']).query)\n+        canonicalized_qs = parse_qsl(urlparse(response.json()["@id"]).query)\n \n         self.assertEqual(\n-            set(original_qs) - set([(\'b_size\', \'2\'), (\'b_start\', \'2\')]),\n-            set(canonicalized_qs))\n+            set(original_qs) - set([("b_size", "2"), ("b_start", "2")]),\n+            set(canonicalized_qs),\n+        )\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder/@search?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder/@search?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder/@search?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder/@search?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder/@search?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-2\',\n-            u\'/plone/folder/doc-3\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder/@search?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder/@search?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(6, response.json()[\'items_total\'])\n+        self.assertEqual(6, response.json()["items_total"])\n \n \n class TestBatchingCollections(TestBatchingDXBase):\n@@ -129,68 +129,68 @@ class TestBatchingCollections(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingCollections, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n \n         collection = createContentInContainer(\n-            self.portal, u\'Collection\',\n-            id=\'collection\')\n+            self.portal, u"Collection", id="collection"\n+        )\n         collection.query = [\n-            {"i": "path",\n-             "o": "plone.app.querystring.operation.string.path",\n-             "v": "/plone/folder/"},\n+            {\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/plone/folder/",\n+            }\n         ]\n         transaction.commit()\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/collection\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/collection")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/collection?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/collection?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/collection?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/collection?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/collection?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/collection?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/collection?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/collection?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/collection?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/collection?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-2\',\n-            u\'/plone/folder/doc-3\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/collection?b_start=2&b_size=2\')\n+        response = self.api_session.get("/collection?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(6, response.json()[\'items_total\'])\n+        self.assertEqual(6, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/collection?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/collection?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestBatchingDXFolders(TestBatchingDXBase):\n@@ -200,9 +200,7 @@ class TestBatchingDXFolders(TestBatchingDXBase):\n     def setUp(self):\n         super(TestBatchingDXFolders, self).setUp()\n \n-        folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\')\n+        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -210,49 +208,49 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-3\',\n-            u\'/plone/folder/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-3", u"/plone/folder/doc-4"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestBatchingSiteRoot(TestBatchingDXBase):\n@@ -268,49 +266,48 @@ def setUp(self):\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + u\'/\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + u"/")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/doc-3\',\n-            u\'/plone/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/doc-3", u"/plone/doc-4"], result_paths(response.json())\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/?b_start=2&b_size=2\')\n+        response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestAABatchingArchetypes(unittest.TestCase):\n@@ -330,40 +327,38 @@ class TestAABatchingArchetypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor"])\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Some Folder\',\n-        )]\n+        self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Some Folder")\n+        ]\n         transaction.commit()\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        self.api_session.get("/folder?b_start=2&b_size=2")\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        self.api_session.get(\'/folder?b_size=100\')\n+        self.api_session.get("/folder?b_size=100")\n \n \n class TestBatchingArchetypes(unittest.TestCase):\n@@ -372,23 +367,21 @@ class TestBatchingArchetypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Contributor\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Some Folder\',\n-        )]\n+        folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Some Folder")\n+        ]\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -396,56 +389,56 @@ def setUp(self):\n \n     def _create_doc(self, container, number):\n         container.invokeFactory(\n-            \'Document\',\n-            id=\'doc-%s\' % str(number + 1),\n-            title=\'Document %s\' % str(number + 1),\n+            "Document",\n+            id="doc-%s" % str(number + 1),\n+            title="Document %s" % str(number + 1),\n         )\n \n     def test_contains_canonical_url(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal_url + \'/folder\')\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/folder")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Batch info in response should contain appropriate batching links\n-        batch_info = response.json()[\'batching\']\n+        batch_info = response.json()["batching"]\n \n         self.assertDictEqual(\n-            {u\'@id\': self.portal_url + \'/folder?b_start=2&b_size=2\',\n-             u\'first\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'next\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             u\'prev\': self.portal_url + \'/folder?b_start=0&b_size=2\',\n-             u\'last\': self.portal_url + \'/folder?b_start=4&b_size=2\',\n-             },\n-            batch_info)\n+            {\n+                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+            },\n+            batch_info,\n+        )\n \n     def test_contains_correct_batch_of_items(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Response should contain second batch of items\n-        self.assertEqual([\n-            u\'/plone/folder/doc-3\',\n-            u\'/plone/folder/doc-4\'],\n-            result_paths(response.json()))\n+        self.assertEqual(\n+            [u"/plone/folder/doc-3", u"/plone/folder/doc-4"],\n+            result_paths(response.json()),\n+        )\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n-        response = self.api_session.get(\'/folder?b_start=2&b_size=2\')\n+        response = self.api_session.get("/folder?b_start=2&b_size=2")\n \n         # Total count of items should be in items_total\n-        self.assertEqual(5, response.json()[\'items_total\'])\n+        self.assertEqual(5, response.json()["items_total"])\n \n     def test_batching_links_omitted_if_resulset_fits_in_single_batch(self):\n-        response = self.api_session.get(\'/folder?b_size=100\')\n-        self.assertNotIn(\'batching\', list(response.json()))\n+        response = self.api_session.get("/folder?b_size=100")\n+        self.assertNotIn("batching", list(response.json()))\n \n \n class TestHypermediaBatch(unittest.TestCase):\n@@ -453,16 +446,15 @@ class TestHypermediaBatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n \n     def test_items_total(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         # items_total should be total number of items in the sequence\n-        self.assertEqual(\n-            25, batch.items_total)\n+        self.assertEqual(25, batch.items_total)\n \n     def test_default_batch_size(self):\n         items = list(range(1, 27))\n@@ -471,196 +463,183 @@ def test_default_batch_size(self):\n \n     def test_custom_batch_size(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 5\n+        self.request.form["b_size"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch size should be customizable via request\n-        self.assertEqual(\n-            5, len(list(batch)))\n+        self.assertEqual(5, len(list(batch)))\n \n     def test_default_batch_start(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         # Batch should start on first item by default\n-        self.assertEqual(\n-            list(range(1, 11)), list(batch))\n+        self.assertEqual(list(range(1, 11)), list(batch))\n \n     def test_custom_batch_start(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Batch start should be customizable via request\n-        self.assertEqual(\n-            list(range(6, 16)), list(batch))\n+        self.assertEqual(list(range(6, 16)), list(batch))\n \n     def test_custom_start_and_size_can_be_combined(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 5\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 5\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n         # Should be able to combine custom batch start and size\n-        self.assertListEqual(\n-            list(range(6, 11)), list(batch))\n+        self.assertListEqual(list(range(6, 11)), list(batch))\n \n     def test_canonical_url(self):\n         items = list(range(1, 26))\n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\'http://nohost\', batch.canonical_url)\n+        self.assertEqual("http://nohost", batch.canonical_url)\n \n     def test_canonical_url_preserves_query_string_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'one=1&two=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "one=1&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_canonical_url_preserves_list_like_query_string_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "foolist=1&foolist=2"\n         batch = HypermediaBatch(self.request, items)\n \n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n         self.assertEqual(\n-            set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n-            set(parse_qsl(urlparse(batch.canonical_url).query))\n+            set([("foolist", "1"), ("foolist", "2")]),\n+            set(parse_qsl(urlparse(batch.canonical_url).query)),\n         )\n \n     def test_canonical_url_strips_batching_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'one=1&b_size=10&b_start=20&two=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "one=1&b_size=10&b_start=20&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_canonical_url_strips_sorting_params(self):\n         items = list(range(1, 26))\n \n-        self.request[\'QUERY_STRING\'] = \'one=1&sort_on=path&two=2\'\n+        self.request["QUERY_STRING"] = "one=1&sort_on=path&two=2"\n         batch = HypermediaBatch(self.request, items)\n \n         parsed_url = urlparse(batch.canonical_url)\n         qs_params = dict(parse_qsl(parsed_url.query))\n \n-        self.assertEqual({\'one\': \'1\', \'two\': \'2\'}, qs_params)\n-        self.assertEqual(\'nohost\', parsed_url.netloc)\n-        self.assertEqual(\'\', parsed_url.path)\n+        self.assertEqual({"one": "1", "two": "2"}, qs_params)\n+        self.assertEqual("nohost", parsed_url.netloc)\n+        self.assertEqual("", parsed_url.path)\n \n     def test_current_batch_url(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'ACTUAL_URL\'] = \'http://nohost\'\n-        self.request[\'QUERY_STRING\'] = \'b_size=10&b_start=20\'\n+        self.request.form["b_size"] = 10\n+        self.request["ACTUAL_URL"] = "http://nohost"\n+        self.request["QUERY_STRING"] = "b_size=10&b_start=20"\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\n-            \'http://nohost?b_size=10&b_start=20\', batch.current_batch_url)\n+        self.assertEqual("http://nohost?b_size=10&b_start=20", batch.current_batch_url)\n \n     def test_batching_links_omitted_if_resultset_fits_in_single_batch(self):\n         items = list(range(1, 5))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n         self.assertEqual(None, batch.links)\n \n     def test_first_link_contained(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'first\': \'http://nohost?b_start=0\'}, batch.links)\n+        self.assertDictContainsSubset({"first": "http://nohost?b_start=0"}, batch.links)\n \n     def test_first_link_preserves_list_like_querystring_params(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n-        self.request[\'QUERY_STRING\'] = \'foolist=1&foolist=2\'\n+        self.request.form["b_size"] = 10\n+        self.request["QUERY_STRING"] = "foolist=1&foolist=2"\n         batch = HypermediaBatch(self.request, items)\n \n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        batch_params = set([(\'b_start\', \'0\'), (\'b_size\', \'10\')])\n+        batch_params = set([("b_start", "0"), ("b_size", "10")])\n         self.assertEqual(\n-            set([(\'foolist\', \'1\'), (\'foolist\', \'2\')]),\n-            set(parse_qsl(urlparse(batch.links[\'first\']).query)) - batch_params\n+            set([("foolist", "1"), ("foolist", "2")]),\n+            set(parse_qsl(urlparse(batch.links["first"]).query)) - batch_params,\n         )\n \n     def test_last_link_contained(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'last\': \'http://nohost?b_start=20\'}, batch.links)\n+        self.assertDictContainsSubset({"last": "http://nohost?b_start=20"}, batch.links)\n \n     def test_next_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'next\': \'http://nohost?b_start=10\'}, batch.links)\n+        self.assertDictContainsSubset({"next": "http://nohost?b_start=10"}, batch.links)\n \n     def test_next_link_omitted_on_last_page(self):\n         items = list(range(1, 26))\n \n         # Start on last page\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 20\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(\n-            set([\'@id\', \'first\', \'prev\', \'last\']),\n-            set(batch.links))\n+        self.assertSetEqual(set(["@id", "first", "prev", "last"]), set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n \n         # Start on third page\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 20\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertDictContainsSubset(\n-            {\'prev\': \'http://nohost?b_start=10\'}, batch.links)\n+        self.assertDictContainsSubset({"prev": "http://nohost?b_start=10"}, batch.links)\n \n     def test_prev_link_omitted_on_first_page(self):\n         items = list(range(1, 26))\n \n-        self.request.form[\'b_size\'] = 10\n+        self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(\n-            set([\'@id\', \'first\', \'next\', \'last\']),\n-            set(batch.links))\n+        self.assertSetEqual(set(["@id", "first", "next", "last"]), set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n         items = list(range(1, 26))\n         items_from_all_batches = []\n \n         size = 10\n-        self.request.form[\'b_size\'] = size\n+        self.request.form["b_size"] = size\n \n         for pagenumber in range(3):\n-            self.request.form[\'b_start\'] = pagenumber * size\n+            self.request.form["b_start"] = pagenumber * size\n             batch = HypermediaBatch(self.request, items)\n             items_from_all_batches.extend(list(batch))\n \n@@ -670,8 +649,7 @@ def test_batch_start_never_drops_below_zero(self):\n         items = list(range(1, 26))\n \n         # Start in the middle of what would otherwise be the first batch\n-        self.request.form[\'b_size\'] = 10\n-        self.request.form[\'b_start\'] = 5\n+        self.request.form["b_size"] = 10\n+        self.request.form["b_start"] = 5\n         batch = HypermediaBatch(self.request, items)\n-        self.assertEqual(\n-            \'http://nohost?b_start=0\', batch.links[\'prev\'])\n+        self.assertEqual("http://nohost?b_start=0", batch.links["prev"])\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex 382c86a0..1367c401 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -16,41 +16,35 @@ class TestTilesBehavior(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'tiledfolder\')\n-        self.portal.portal_types._setObject(\'tiledfolder\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.behaviors = (\n-            \'plone.tiles\',\n-        )\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("tiledfolder")\n+        self.portal.portal_types._setObject("tiledfolder", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("plone.tiles",)\n         self.fti = fti\n         alsoProvides(self.request, ITiles)\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n-            \'tiledfolder\',\n-            id=\'tiledfolder\',\n-            title=u\'Folder with tiles\'\n+            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n         )\n \n-        self.portal[\'tiledfolder\'].tiles = {\n-            \'uuid1\': {\'@type\': \'title\'},\n-            \'uuid2\': {\'@type\': \'description\'}\n+        self.portal["tiledfolder"].tiles = {\n+            "uuid1": {"@type": "title"},\n+            "uuid2": {"@type": "description"},\n         }\n \n-        self.portal[\'tiledfolder\'].tiles_layout = {\n-            \'uuid1\': {\'@type\': \'title\'},\n-            \'uuid2\': {\'@type\': \'description\'}\n+        self.portal["tiledfolder"].tiles_layout = {\n+            "uuid1": {"@type": "title"},\n+            "uuid2": {"@type": "description"},\n         }\n \n     def test_behavior_provides(self):\n         self.portal.invokeFactory(\n-            \'tiledfolder\',\n-            id=\'tiledfolder\',\n-            title=u\'Folder with tiles\'\n+            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n         )\n \n-        ITiles.providedBy(self.portal[\'tiledfolder\'])\n+        ITiles.providedBy(self.portal["tiledfolder"])\ndiff --git a/src/plone/restapi/tests/test_boolean_value.py b/src/plone/restapi/tests/test_boolean_value.py\nindex 0bfd5b9b..72c308c0 100644\n--- a/src/plone/restapi/tests/test_boolean_value.py\n+++ b/src/plone/restapi/tests/test_boolean_value.py\n@@ -13,31 +13,31 @@ def test_true_bool(self):\n         self.assertTrue(boolean_value(True))\n \n     def test_true_string(self):\n-        self.assertTrue(boolean_value(\'true\'))\n+        self.assertTrue(boolean_value("true"))\n \n     def test_true_string_uppercase(self):\n-        self.assertTrue(boolean_value(\'True\'))\n+        self.assertTrue(boolean_value("True"))\n \n     def test_true_int(self):\n         self.assertTrue(boolean_value(1))\n \n     def test_true_int_string(self):\n-        self.assertTrue(boolean_value(\'1\'))\n+        self.assertTrue(boolean_value("1"))\n \n     def test_false_bool(self):\n         self.assertFalse(boolean_value(False))\n \n     def test_false_string(self):\n-        self.assertFalse(boolean_value(\'false\'))\n+        self.assertFalse(boolean_value("false"))\n \n     def test_false_string_uppercase(self):\n-        self.assertFalse(boolean_value(\'False\'))\n+        self.assertFalse(boolean_value("False"))\n \n     def test_false_int(self):\n         self.assertFalse(boolean_value(0))\n \n     def test_false_int_string(self):\n-        self.assertFalse(boolean_value(\'0\'))\n+        self.assertFalse(boolean_value("0"))\n \n     def test_true_other_value(self):\n-        self.assertTrue(boolean_value(\'foobar\'))\n+        self.assertTrue(boolean_value("foobar"))\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 69e7e44c..64cfdb20 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -19,9 +19,9 @@ class TestCommentsSerializers(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Allow discussion\n@@ -34,72 +34,58 @@ def setUp(self):\n         # doc with comments\n         self.doc = api.content.create(\n             container=self.portal,\n-            type=\'Document\',\n-            id=\'doc_with_comments\',\n-            title=\'Document with comments\',\n-            allow_discussion=True\n+            type="Document",\n+            id="doc_with_comments",\n+            title="Document with comments",\n+            allow_discussion=True,\n         )\n         self.conversation = IConversation(self.doc)\n         self.replies = IReplies(self.conversation)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment"\n         self.comment = self.replies[self.replies.addComment(comment)]\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment 2\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment 2"\n         self.replies.addComment(comment)\n \n     def test_conversation(self):\n         serializer = getMultiAdapter(\n-            (self.conversation, self.request),\n-            ISerializeToJson\n+            (self.conversation, self.request), ISerializeToJson\n         )\n \n         output = serializer()\n-        self.assertEqual(\n-            set(output),\n-            set([\'@id\', \'items_total\', \'items\'])\n-        )\n+        self.assertEqual(set(output), set(["@id", "items_total", "items"]))\n \n     def test_conversation_batched(self):\n-        self.request.form[\'b_size\'] = 1\n+        self.request.form["b_size"] = 1\n         serializer = getMultiAdapter(\n-            (self.conversation, self.request),\n-            ISerializeToJson\n+            (self.conversation, self.request), ISerializeToJson\n         )\n \n         output = serializer()\n-        self.assertIn(\'batching\', output)\n+        self.assertIn("batching", output)\n \n     def test_comment(self):\n-        serializer = getMultiAdapter(\n-            (self.comment, self.request),\n-            ISerializeToJson\n-        )\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n \n         output = serializer()\n \n         expected = [\n-            \'@id\',\n-            \'@type\',\n-            \'@parent\',\n-            \'comment_id\',\n-            \'in_reply_to\',\n-            \'text\',\n-            \'user_notification\',\n-            \'author_username\',\n-            \'author_name\',\n-            \'creation_date\',\n-            \'modification_date\',\n-            \'is_editable\',\n-            \'is_deletable\'\n+            "@id",\n+            "@type",\n+            "@parent",\n+            "comment_id",\n+            "in_reply_to",\n+            "text",\n+            "user_notification",\n+            "author_username",\n+            "author_name",\n+            "creation_date",\n+            "modification_date",\n+            "is_editable",\n+            "is_deletable",\n         ]\n-        self.assertEqual(\n-            set(output),\n-            set(expected)\n-        )\n+        self.assertEqual(set(output), set(expected))\n \n-        self.assertEqual(\n-            set(output[\'text\']),\n-            set([\'data\', \'mime-type\'])\n-        )\n+        self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\ndiff --git a/src/plone/restapi/tests/test_content_delete.py b/src/plone/restapi/tests/test_content_delete.py\nindex e7d39a92..fdaab9fd 100644\n--- a/src/plone/restapi/tests/test_content_delete.py\n+++ b/src/plone/restapi/tests/test_content_delete.py\n@@ -19,8 +19,8 @@\n import transaction\n import unittest\n \n-linkintegrity_version = get_distribution(\'plone.app.linkintegrity\').version\n-if parse_version(linkintegrity_version) >= parse_version(\'3.0.dev0\'):\n+linkintegrity_version = get_distribution("plone.app.linkintegrity").version\n+if parse_version(linkintegrity_version) >= parse_version("3.0.dev0"):\n     NEW_LINKINTEGRITY = True\n else:\n     NEW_LINKINTEGRITY = False\n@@ -31,73 +31,67 @@ class TestContentDelete(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         transaction.commit()\n \n     def test_delete_content_succeeds(self):\n         response = requests.delete(\n             self.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         self.assertEqual(204, response.status_code)\n         transaction.begin()\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n \n     def test_delete_content_returns_401_unauthorized(self):\n         response = requests.delete(\n             self.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n         )\n         self.assertEqual(401, response.status_code)\n \n \n-@unittest.skipIf(NEW_LINKINTEGRITY, \'Only affects p.a.linkintegrity<3.0\')\n+@unittest.skipIf(NEW_LINKINTEGRITY, "Only affects p.a.linkintegrity<3.0")\n class TestATContentDelete(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n \n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_delete_content_succeeds_with_link_integrity_breach(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document\',\n-        )]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="My Document")\n+        ]\n         from plone.app.linkintegrity.interfaces import ILinkIntegrityInfo\n-        info = ILinkIntegrityInfo(self.layer[\'request\'])\n+\n+        info = ILinkIntegrityInfo(self.layer["request"])\n         info.addBreach(doc2, self.doc1)\n-        service = self.traverse(\'/plone/doc1\', method=\'DELETE\')\n+        service = self.traverse("/plone/doc1", method="DELETE")\n         service()\n         self.assertEqual(204, info.context.response.status)\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 9504a305..3c38c829 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -24,148 +24,119 @@ class TestContentGet(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.text = RichTextValue(\n-            u"Lorem ipsum.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'My Folder 2\'\n+            u"Lorem ipsum.", "text/plain", "text/html"\n         )\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document 2\'\n+            "Document", id="doc2", title="My Document 2"\n         )\n         self.portal.folder1.invokeFactory(\n-            \'Collection\',\n-            id=\'collection\',\n-            title=\'My collection\'\n+            "Collection", id="collection", title="My collection"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n+        wftool.doActionFor(self.portal.folder1.doc1, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, "publish")\n         transaction.commit()\n \n     def test_get_content_returns_fullobjects(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\n-            \'title\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'description\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'text\' in list(response.json()[\'items\'][0])\n-        )\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("title" in list(response.json()["items"][0]))\n+        self.assertTrue("description" in list(response.json()["items"][0]))\n+        self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n             {\n-                u\'data\': u\'<p>Lorem ipsum.</p>\',\n-                u\'content-type\': u\'text/plain\',\n-                u\'encoding\': u\'utf-8\'\n+                u"data": u"<p>Lorem ipsum.</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n             },\n-            response.json()[\'items\'][0].get(\'text\')\n+            response.json()["items"][0].get("text"),\n         )\n \n         # make sure the single document response is the same as the items\n         response_doc = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertEqual(\n-            response.json()[\'items\'][0],\n-            response_doc.json()\n-        )\n+        self.assertEqual(response.json()["items"][0], response_doc.json())\n \n     def test_get_content_include_items(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?include_items=false\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?include_items=false",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertNotIn(\'items\', response.json())\n+        self.assertNotIn("items", response.json())\n \n     def test_get_content_returns_fullobjects_correct_id(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n-                         self.portal_url + u\'/folder1/folder2\')\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertEqual(\n+            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+        )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("items" not in response.json()["items"][1])\n \n     def test_get_content_includes_related_items(self):\n         intids = getUtility(IIntIds)\n         self.portal.folder1.doc1.relatedItems = [\n-            RelationValue(\n-                intids.getId(\n-                    self.portal.folder1.folder2.doc2\n-                )\n-            )\n-\n+            RelationValue(intids.getId(self.portal.folder1.folder2.doc2))\n         ]\n         transaction.commit()\n         response = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(1, len(response.json()[\'relatedItems\']))\n+        self.assertEqual(1, len(response.json()["relatedItems"]))\n         self.assertEqual(\n-            [{\n-                u\'@id\': self.portal_url + u\'/folder1/folder2/doc2\',\n-                u\'@type\': u\'Document\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'published\',\n-                u\'title\': u\'My Document 2\'\n-            }],\n-            response.json()[\'relatedItems\']\n+            [\n+                {\n+                    u"@id": self.portal_url + u"/folder1/folder2/doc2",\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"review_state": u"published",\n+                    u"title": u"My Document 2",\n+                }\n+            ],\n+            response.json()["relatedItems"],\n         )\n \n \n@@ -175,100 +146,73 @@ class TestContentATGet(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.setText(u"Lorem ipsum.")\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'My Folder 2\'\n-        )\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'My Document 2\'\n+            "Document", id="doc2", title="My Document 2"\n         )\n         self.portal.folder1.invokeFactory(\n-            \'Collection\',\n-            id=\'collection\',\n-            title=\'My collection\'\n+            "Collection", id="collection", title="My collection"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n-        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n+        wftool.doActionFor(self.portal.folder1.doc1, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2, "publish")\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, "publish")\n         transaction.commit()\n \n     def test_get_content_returns_fullobjects(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\n-            \'title\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'description\' in list(response.json()[\'items\'][0])\n-        )\n-        self.assertTrue(\n-            \'text\' in list(response.json()[\'items\'][0])\n-        )\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("title" in list(response.json()["items"][0]))\n+        self.assertTrue("description" in list(response.json()["items"][0]))\n+        self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n-            {\n-                u\'data\': u\'<p>Lorem ipsum.</p>\',\n-                u\'content-type\': u\'text/html\',\n-            },\n-            response.json()[\'items\'][0].get(\'text\')\n+            {u"data": u"<p>Lorem ipsum.</p>", u"content-type": u"text/html"},\n+            response.json()["items"][0].get("text"),\n         )\n \n         # make sure the single document response is the same as the items\n         response_doc = requests.get(\n             self.portal.folder1.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertEqual(\n-            response.json()[\'items\'][0],\n-            response_doc.json()\n-        )\n+        self.assertEqual(response.json()["items"][0], response_doc.json())\n \n     def test_get_content_returns_fullobjects_correct_id(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n-                         self.portal_url + u\'/folder1/folder2\')\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertEqual(\n+            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+        )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'?fullobjects\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "?fullobjects",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(3, len(response.json()[\'items\']))\n-        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n+        self.assertEqual(3, len(response.json()["items"]))\n+        self.assertTrue("items" not in response.json()["items"][1])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex e0cd27b6..608498e4 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -30,79 +30,68 @@ class TestFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n \n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n \n         transaction.commit()\n \n     def _get_ac_local_roles_block(self, obj):\n         return bool(\n-            getattr(aq_base(self.portal.folder1),\n-                    \'__ac_local_roles_block__\',\n-                    False))\n+            getattr(aq_base(self.portal.folder1), "__ac_local_roles_block__", False)\n+        )\n \n     def test_sharing_search(self):\n-        \'\'\'A request to @sharing should support the search parameter. \'\'\'\n+        """A request to @sharing should support the search parameter. """\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        non_search_entries = response.json()[\'entries\']\n+        non_search_entries = response.json()["entries"]\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing?search=admin\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing?search=admin",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        search_entries = response.json()[\'entries\']\n+        search_entries = response.json()["entries"]\n \n         # Did we find anything?\n         self.assertNotEqual(len(non_search_entries), len(search_entries))\n \n     def test_sharing_search_roundtrip(self):\n-        \'\'\'Search for a user and use save roles\n-        \'\'\'\n+        """Search for a user and use save roles\n+        """\n         # Make sure we don\'t already have admin\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertNotIn(\n-            \'admin\', [x[\'id\'] for x in response.json()[\'entries\']]\n-        )\n+        self.assertNotIn("admin", [x["id"] for x in response.json()["entries"]])\n \n         # Now find admin and set roles\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing?search=admin\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing?search=admin",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        roles = [x for x in response.json()[\'entries\'] if x[\'id\'] == \'admin\']\n-        roles = roles[0][\'roles\']\n+        roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n+        roles = roles[0]["roles"]\n \n         new_roles = dict([(key, not val) for key, val in roles.items()])\n-        payload = {\'entries\': [{\'id\': \'admin\', \'roles\': new_roles}]}\n+        payload = {"entries": [{"id": "admin", "roles": new_roles}]}\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json=payload,\n         )\n@@ -110,135 +99,158 @@ def test_sharing_search_roundtrip(self):\n \n         # Now we should have admin in @sharing\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        self.assertIn(\n-            \'admin\', [x[\'id\'] for x in response.json()[\'entries\']]\n-        )\n+        self.assertIn("admin", [x["id"] for x in response.json()["entries"]])\n \n         # with the same roles as set\n-        roles = [x for x in response.json()[\'entries\'] if x[\'id\'] == \'admin\']\n-        roles = roles[0][\'roles\']\n+        roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n+        roles = roles[0]["roles"]\n         self.assertEqual(new_roles, roles)\n \n     def test_sharing_titles_are_translated(self):\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\',\n-                     \'Accept-Language\': \'de\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json", "Accept-Language": "de"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n-        available_roles = response.json()[\'available_roles\']\n-        self.assertEqual([\n-            {u\'id\': u\'Contributor\', u\'title\': u\'Kann hinzuf\\xfcgen\'},\n-            {u\'id\': u\'Editor\', u\'title\': u\'Kann bearbeiten\'},\n-            {u\'id\': u\'Reader\', u\'title\': u\'Kann ansehen\'},\n-            {u\'id\': u\'Reviewer\', u\'title\': u\'Kann ver\\xf6ffentlichen\'}],\n-            available_roles)\n+        available_roles = response.json()["available_roles"]\n+        self.assertEqual(\n+            [\n+                {u"id": u"Contributor", u"title": u"Kann hinzuf\\xfcgen"},\n+                {u"id": u"Editor", u"title": u"Kann bearbeiten"},\n+                {u"id": u"Reader", u"title": u"Kann ansehen"},\n+                {u"id": u"Reviewer", u"title": u"Kann ver\\xf6ffentlichen"},\n+            ],\n+            available_roles,\n+        )\n \n     def test_sharing_requires_delegate_roles_permission(self):\n-        \'\'\'A response for an object without any roles assigned\'\'\'\n+        """A response for an object without any roles assigned"""\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_get_local_roles_none_assigned(self):\n-        \'\'\'A response for an object without any roles assigned\'\'\'\n+        """A response for an object without any roles assigned"""\n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [\n-                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n-                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n-                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n-                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n-             u\'entries\': [{\n-                 u\'disabled\': False,\n-                 u\'id\': u\'AuthenticatedUsers\',\n-                 u\'login\': None,\n-                 u\'roles\': {u\'Contributor\': False,\n-                            u\'Editor\': False,\n-                            u\'Reader\': False,\n-                            u\'Reviewer\': False},\n-                 u\'title\': u\'Logged-in users\',\n-                 u\'type\': u\'group\'}],\n-             u\'inherit\': True}\n+            {\n+                u"available_roles": [\n+                    {u"id": u"Contributor", u"title": u"Can add"},\n+                    {u"id": u"Editor", u"title": u"Can edit"},\n+                    {u"id": u"Reader", u"title": u"Can view"},\n+                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                ],\n+                u"entries": [\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"AuthenticatedUsers",\n+                        u"login": None,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": False,\n+                        },\n+                        u"title": u"Logged-in users",\n+                        u"type": u"group",\n+                    }\n+                ],\n+                u"inherit": True,\n+            },\n         )\n \n     def test_get_local_roles_with_user(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer"]\n+        )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n-            {u\'available_roles\': [\n-                {u\'id\': u\'Contributor\', u\'title\': u\'Can add\'},\n-                {u\'id\': u\'Editor\', u\'title\': u\'Can edit\'},\n-                {u\'id\': u\'Reader\', u\'title\': u\'Can view\'},\n-                {u\'id\': u\'Reviewer\', u\'title\': u\'Can review\'}],\n-             u\'entries\': [\n-                {\n-                    u\'disabled\': False,\n-                    u\'id\': u\'AuthenticatedUsers\',\n-                    u\'login\': None,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': False},\n-                    u\'title\': u\'Logged-in users\',\n-                    u\'type\': u\'group\'},\n-                {\n-                    u\'disabled\': False,\n-                    u\'id\': u\'test_user_1_\',\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': True},\n-                    u\'title\': u\'test-user\',\n-                    u\'type\': u\'user\'}],\n-             u\'inherit\': True}\n+            {\n+                u"available_roles": [\n+                    {u"id": u"Contributor", u"title": u"Can add"},\n+                    {u"id": u"Editor", u"title": u"Can edit"},\n+                    {u"id": u"Reader", u"title": u"Can view"},\n+                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                ],\n+                u"entries": [\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"AuthenticatedUsers",\n+                        u"login": None,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": False,\n+                        },\n+                        u"title": u"Logged-in users",\n+                        u"type": u"group",\n+                    },\n+                    {\n+                        u"disabled": False,\n+                        u"id": u"test_user_1_",\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": True,\n+                        },\n+                        u"title": u"test-user",\n+                        u"type": u"user",\n+                    },\n+                ],\n+                u"inherit": True,\n+            },\n         )\n \n     def test_set_local_roles_for_user(self):\n \n-        pas = getToolByName(self.portal, \'acl_users\')\n+        pas = getToolByName(self.portal, "acl_users")\n         self.assertEqual(\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),)\n+            (("admin", ("Owner",), "user", "admin"),),\n         )\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'entries\': [{\n-                    u\'id\': TEST_USER_ID,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': True,\n-                               u\'Reviewer\': True},\n-                    u\'type\': u\'user\'}],\n+                "entries": [\n+                    {\n+                        u"id": TEST_USER_ID,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": True,\n+                            u"Reviewer": True,\n+                        },\n+                        u"type": u"user",\n+                    }\n+                ]\n             },\n         )\n \n@@ -247,35 +259,44 @@ def test_set_local_roles_for_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n-             [\'test-user\', [u\'Reader\', u\'Reviewer\'], \'user\', u\'test_user_1_\']]\n+            [\n+                ["admin", ["Owner"], "user", "admin"],\n+                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+            ],\n         )\n \n     def test_unset_local_roles_for_user(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\', \'Reader\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer", "Reader"]\n+        )\n         transaction.commit()\n \n-        pas = getToolByName(self.portal, \'acl_users\')\n+        pas = getToolByName(self.portal, "acl_users")\n         self.assertEqual(\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n-            [[\'admin\', [\'Owner\', ], \'user\', \'admin\'],\n-             [\'test-user\', [\'Reader\', \'Reviewer\'], \'user\', \'test_user_1_\']]\n+            [\n+                ["admin", ["Owner"], "user", "admin"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n+            ],\n         )\n \n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'entries\': [{\n-                    u\'id\': TEST_USER_ID,\n-                    u\'roles\': {u\'Contributor\': False,\n-                               u\'Editor\': False,\n-                               u\'Reader\': False,\n-                               u\'Reviewer\': True},\n-                    u\'type\': u\'user\'}],\n+                "entries": [\n+                    {\n+                        u"id": TEST_USER_ID,\n+                        u"roles": {\n+                            u"Contributor": False,\n+                            u"Editor": False,\n+                            u"Reader": False,\n+                            u"Reviewer": True,\n+                        },\n+                        u"type": u"user",\n+                    }\n+                ]\n             },\n         )\n \n@@ -284,9 +305,10 @@ def test_unset_local_roles_for_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n-            ((\'admin\', (\'Owner\',), \'user\', \'admin\'),\n-             (\'test-user\', (u\'Reviewer\',),\n-              \'user\', u\'test_user_1_\'))\n+            (\n+                ("admin", ("Owner",), "user", "admin"),\n+                ("test-user", (u"Reviewer",), "user", u"test_user_1_"),\n+            ),\n         )\n \n     def test_get_local_roles_inherit_roles(self):\n@@ -296,124 +318,113 @@ def test_get_local_roles_inherit_roles(self):\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.json()[\'inherit\'], False)\n+        self.assertEqual(response.json()["inherit"], False)\n \n     def test_set_local_roles_inherit(self):\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         False)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), False)\n \n         # block local roles\n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'inherit\': False\n-            },\n+            json={"inherit": False},\n         )\n \n         transaction.commit()\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         True)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), True)\n         # unblock local roles\n         response = requests.post(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'inherit\': True\n-            },\n+            json={"inherit": True},\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1),\n-                         False)\n+        self.assertEqual(self._get_ac_local_roles_block(self.portal.folder1), False)\n \n     def test_get_available_roles(self):\n-        api.user.grant_roles(username=TEST_USER_ID,\n-                             obj=self.portal.folder1,\n-                             roles=[\'Reviewer\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Reviewer"]\n+        )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertIn(\'available_roles\', response)\n-        self.assertIn({\'id\': \'Reader\', \'title\': \'Can view\'},\n-                      response[\'available_roles\'])\n+        self.assertIn("available_roles", response)\n+        self.assertIn(\n+            {"id": "Reader", "title": "Can view"}, response["available_roles"]\n+        )\n \n     def test_inherited_global(self):\n-        api.user.grant_roles(username=TEST_USER_ID, roles=[\'Reviewer\'])\n+        api.user.grant_roles(username=TEST_USER_ID, roles=["Reviewer"])\n         api.user.grant_roles(\n-            username=TEST_USER_ID, obj=self.portal.folder1, roles=[\'Editor\']\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Editor"]\n         )\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.doc1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.doc1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         response = response.json()\n         # find our entry\n-        entry = [x for x in response[\'entries\'] if x[\'id\'] == TEST_USER_ID][0]\n+        entry = [x for x in response["entries"] if x["id"] == TEST_USER_ID][0]\n \n-        self.assertEqual(\'global\', entry[\'roles\'][\'Reviewer\'])\n-        self.assertEqual(\'acquired\', entry[\'roles\'][\'Editor\'])\n+        self.assertEqual("global", entry["roles"]["Reviewer"])\n+        self.assertEqual("acquired", entry["roles"]["Editor"])\n \n     def test_inherited_global_via_search(self):\n-        api.user.create(email=\'jos@henken.local\', username=\'jos\')\n-        api.user.grant_roles(username=\'jos\', roles=[\'Reviewer\'])\n-        api.user.grant_roles(\n-            username=\'jos\', roles=[\'Editor\'], obj=self.portal.folder1\n-        )\n+        api.user.create(email="jos@henken.local", username="jos")\n+        api.user.grant_roles(username="jos", roles=["Reviewer"])\n+        api.user.grant_roles(username="jos", roles=["Editor"], obj=self.portal.folder1)\n         transaction.commit()\n \n         response = requests.get(\n-            self.portal.folder1.doc1.absolute_url() + \'/@sharing?search=jos\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.doc1.absolute_url() + "/@sharing?search=jos",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         response = response.json()\n         # find our entry\n-        entry = [x for x in response[\'entries\'] if x[\'id\'] == \'jos\'][0]\n+        entry = [x for x in response["entries"] if x["id"] == "jos"][0]\n \n-        self.assertEqual(\'global\', entry[\'roles\'][\'Reviewer\'])\n-        self.assertEqual(\'acquired\', entry[\'roles\'][\'Editor\'])\n+        self.assertEqual("global", entry["roles"]["Reviewer"])\n+        self.assertEqual("acquired", entry["roles"]["Editor"])\n \n     def test_no_serializer_available_returns_501(self):\n         # This test unregisters the local_roles adapter. The testrunner can\n         # not auto-revert this on test tearDown. Therefore if we ever run\n         # into test isolation issues. Start to look here first.\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterAdapter(SerializeLocalRolesToJson, name=\'local_roles\')\n+        gsm.unregisterAdapter(SerializeLocalRolesToJson, name="local_roles")\n \n         response = requests.get(\n-            self.portal.folder1.absolute_url() + \'/@sharing\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal.folder1.absolute_url() + "/@sharing",\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n \n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n-        self.assertIn(\'error\', response)\n-        self.assertEqual(\n-            u\'No serializer available.\',\n-            response[\'error\'][\'message\']\n-        )\n+        self.assertIn("error", response)\n+        self.assertEqual(u"No serializer available.", response["error"]["message"])\n \n         # we need to re-register the adapter here for following tests\n-        gsm.registerAdapter(SerializeLocalRolesToJson, name=\'local_roles\')\n+        gsm.registerAdapter(SerializeLocalRolesToJson, name="local_roles")\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex ae29fd2d..370725da 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -27,24 +27,21 @@ class TestContentPatch(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\',\n-            description=\'Some Description\'\n+            "Document", id="doc1", title="My Document", description="Some Description"\n         )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n         transaction.commit()\n \n     def test_patch_document(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n@@ -53,10 +50,10 @@ def test_patch_document(self):\n         self.assertEqual("Patched Document", self.portal.doc1.Title())\n \n     def test_patch_document_will_delete_value_with_null(self):\n-        self.assertEqual(self.portal.doc1.description, \'Some Description\')\n+        self.assertEqual(self.portal.doc1.description, "Some Description")\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"description": null}\',\n         )\n@@ -64,12 +61,12 @@ def test_patch_document_will_delete_value_with_null(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(204, response.status_code)\n-        self.assertEqual(u\'\', self.portal.doc1.description)\n+        self.assertEqual(u"", self.portal.doc1.description)\n \n     def test_patch_document_will_not_delete_value_with_null_if_required(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": null}\',\n         )\n@@ -77,61 +74,52 @@ def test_patch_document_will_not_delete_value_with_null_if_required(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(400, response.status_code)\n-        self.assertTrue("\\\'field\\\': \\\'title\\\'" in response.text)\n-        self.assertTrue(\n-            \'title is a required field.\'\n-            in response.text\n-        )\n-        self.assertTrue(\n-             \'Setting it to null is not allowed.\'\n-             in response.text\n-        )\n+        self.assertTrue("\'field\': \'title\'" in response.text)\n+        self.assertTrue("title is a required field." in response.text)\n+        self.assertTrue("Setting it to null is not allowed." in response.text)\n \n     def test_patch_document_with_representation(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\n-                \'Accept\': \'application/json\',\n-                \'Prefer\': \'return=representation\'\n-            },\n+            headers={"Accept": "application/json", "Prefer": "return=representation"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertEqual(response.json()[\'title\'], "Patched Document")\n+        self.assertEqual(response.json()["title"], "Patched Document")\n         transaction.begin()\n         self.assertEqual("Patched Document", self.portal.doc1.Title())\n \n     def test_patch_document_with_invalid_body_returns_400(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            data=\'foo\',\n+            data="foo",\n         )\n         self.assertEqual(400, response.status_code)\n-        self.assertIn(\'DeserializationError\', response.text)\n+        self.assertIn("DeserializationError", response.text)\n \n     def test_patch_undeserializable_object_returns_501(self):\n         obj = PortalContent()\n-        obj.id = \'obj1\'\n-        obj.portal_type = \'Undeserializable Type\'\n+        obj.id = "obj1"\n+        obj.portal_type = "Undeserializable Type"\n         self.portal._setObject(obj.id, obj)\n         transaction.commit()\n \n         response = requests.patch(\n             self.portal.obj1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             data=\'{"id": "patched_obj1"}\',\n         )\n         self.assertEqual(501, response.status_code)\n-        self.assertIn(\'Undeserializable Type\', response.text)\n+        self.assertIn("Undeserializable Type", response.text)\n \n     def test_patch_document_returns_401_unauthorized(self):\n         response = requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n             data=\'{"title": "Patched Document"}\',\n         )\n@@ -140,35 +128,33 @@ def test_patch_document_returns_401_unauthorized(self):\n     def test_patch_image_with_the_contents_of_the_get_preserves_image(self):\n         response = requests.post(\n             self.portal.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n-                \'@type\': \'Image\',\n-                \'image\': {\n-                    \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',  # noqa\n-                    \'encoding\': u\'base64\',\n-                    \'content-type\': u\'image/gif\',\n-                }\n+                "@type": "Image",\n+                "image": {\n+                    "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n+                    "encoding": u"base64",\n+                    "content-type": u"image/gif",\n+                },\n             },\n         )\n         transaction.commit()\n \n         response = response.json()\n-        image_url = self.portal[response[\'id\']].absolute_url()\n+        image_url = self.portal[response["id"]].absolute_url()\n         response = requests.patch(\n             image_url,\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json=response\n+            json=response,\n         )\n         transaction.commit()\n-        response = requests.get(\n-            image_url,\n-            headers={\'Accept\': \'application/json\'})\n+        response = requests.get(image_url, headers={"Accept": "application/json"})\n \n-        self.assertTrue(response.json()[\'image\'])\n-        self.assertIn(\'content-type\', response.json()[\'image\'])\n-        self.assertIn(\'download\', response.json()[\'image\'])\n+        self.assertTrue(response.json()["image"])\n+        self.assertIn("content-type", response.json()["image"])\n+        self.assertIn("download", response.json()["image"])\n \n     def test_patch_document_fires_proper_events(self):\n         sm = getGlobalSiteManager()\n@@ -184,18 +170,12 @@ def record_event(event):\n \n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "description": "123",\n-            },\n+            json={"description": "123"},\n         )\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectModifiedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectModifiedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -209,17 +189,14 @@ class TestATContentPatch(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         self.portal.portal_repository._versionable_content_types = []\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\',\n-            description=\'Some Description\'\n+            "Document", id="doc1", title="My Document", description="Some Description"\n         )\n         self.portal.doc1.unmarkCreationFlag()\n         transaction.commit()\n@@ -227,15 +204,13 @@ def setUp(self):\n     def test_patch_reindexes_document(self):\n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "description": "Foo Bar",\n-            },\n+            json={"description": "Foo Bar"},\n         )\n         transaction.begin()\n         brain = self.portal.portal_catalog(UID=self.portal.doc1.UID())[0]\n-        self.assertEqual(brain.Description, \'Foo Bar\')\n+        self.assertEqual(brain.Description, "Foo Bar")\n \n     def test_patch_document_fires_proper_events(self):\n         sm = getGlobalSiteManager()\n@@ -251,18 +226,12 @@ def record_event(event):\n \n         requests.patch(\n             self.portal.doc1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "description": "123",\n-            },\n+            json={"description": "123"},\n         )\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectEditedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectEditedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 13ab90d6..d26f99aa 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -26,71 +26,56 @@ class TestFolderCreate(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n         transaction.commit()\n \n     def test_post_to_folder_creates_document(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n         self.assertEqual("My Document", self.portal.folder1.mydocument.Title())\n-        self.assertEqual("Document", response.json().get(\'@type\'))\n-        self.assertEqual("mydocument", response.json().get(\'id\'))\n-        self.assertEqual("My Document", response.json().get(\'title\'))\n+        self.assertEqual("Document", response.json().get("@type"))\n+        self.assertEqual("mydocument", response.json().get("id"))\n+        self.assertEqual("My Document", response.json().get("title"))\n \n         expected_url = self.portal_url + u"/folder1/mydocument"\n-        self.assertEqual(expected_url, response.json().get(\'@id\'))\n+        self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_to_folder_creates_folder(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Folder",\n-                "id": "myfolder",\n-                "title": "My Folder",\n-            },\n+            json={"@type": "Folder", "id": "myfolder", "title": "My Folder"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n         self.assertEqual("My Folder", self.portal.folder1.myfolder.Title())\n-        self.assertEqual("Folder", response.json().get(\'@type\'))\n-        self.assertEqual("myfolder", response.json().get(\'id\'))\n-        self.assertEqual("My Folder", response.json().get(\'title\'))\n+        self.assertEqual("Folder", response.json().get("@type"))\n+        self.assertEqual("myfolder", response.json().get("id"))\n+        self.assertEqual("My Folder", response.json().get("title"))\n \n         expected_url = self.portal_url + u"/folder1/myfolder"\n-        self.assertEqual(expected_url, response.json().get(\'@id\'))\n+        self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_without_type_returns_400(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertIn("Property \'@type\' is required", response.text)\n@@ -98,21 +83,18 @@ def test_post_without_type_returns_400(self):\n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "title": "My Document"},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'my-document\', self.portal.folder1)\n+        self.assertIn("my-document", self.portal.folder1)\n \n     def test_post_without_id_creates_id_from_filename(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "File",\n@@ -126,49 +108,38 @@ def test_post_without_id_creates_id_from_filename(self):\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'test.txt\', self.portal.folder1)\n+        self.assertIn("test.txt", self.portal.folder1)\n \n     def test_post_with_id_already_in_use_returns_400(self):\n-        self.portal.folder1.invokeFactory(\'Document\', \'mydocument\')\n+        self.portal.folder1.invokeFactory("Document", "mydocument")\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_post_to_folder_returns_401_unauthorized(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(401, response.status_code)\n \n     def test_post_to_folder_without_add_permission_returns_403_forbidden(self):\n         self.portal.folder1.manage_permission(\n-            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+            "plone.app.contenttypes: Add Document", [], acquire=False\n+        )\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(403, response.status_code)\n \n@@ -186,7 +157,7 @@ def record_event(event):\n \n         requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "Document",\n@@ -199,11 +170,12 @@ def record_event(event):\n         self.assertEqual(\n             fired_events,\n             [\n-                \'ObjectCreatedEvent\',\n-                \'ObjectWillBeAddedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+                "ObjectCreatedEvent",\n+                "ObjectWillBeAddedEvent",\n+                "ObjectAddedEvent",\n+                "ContainerModifiedEvent",\n+            ],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -217,16 +189,12 @@ class TestATFolderCreate(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         # wftool = getToolByName(self.portal, \'portal_workflow\')\n         # wftool.doActionFor(self.portal.folder1, \'publish\')\n         transaction.commit()\n@@ -234,44 +202,37 @@ def setUp(self):\n     def test_post_without_id_creates_id_from_title_for_archetypes(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n             json={\n                 "@type": "ATTestDocument",\n                 "title": "My Document",\n-                "testRequiredField": "My Value"\n+                "testRequiredField": "My Value",\n             },\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'my-document\', self.portal.folder1)\n+        self.assertIn("my-document", self.portal.folder1)\n \n     def test_id_from_filename(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "File",\n-                "file": {"filename": "test.txt", "data": "Foo bar"},\n-            },\n+            json={"@type": "File", "file": {"filename": "test.txt", "data": "Foo bar"}},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertIn(\'test.txt\', self.portal.folder1)\n+        self.assertIn("test.txt", self.portal.folder1)\n \n     def test_post_with_id_already_in_use_returns_400(self):\n-        self.portal.folder1.invokeFactory(\'Document\', \'mydocument\')\n+        self.portal.folder1.invokeFactory("Document", "mydocument")\n         transaction.commit()\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(TEST_USER_NAME, TEST_USER_PASSWORD),\n-            json={\n-                "@type": "Document",\n-                "id": "mydocument",\n-                "title": "My Document",\n-            },\n+            json={"@type": "Document", "id": "mydocument", "title": "My Document"},\n         )\n         self.assertEqual(400, response.status_code)\n \n@@ -289,7 +250,7 @@ def record_event(event):\n \n         requests.post(\n             self.portal.folder1.absolute_url(),\n-            headers={\'Accept\': \'application/json\'},\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n                 "@type": "Document",\n@@ -301,11 +262,8 @@ def record_event(event):\n \n         self.assertEqual(\n             fired_events,\n-            [\n-                \'ObjectInitializedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+            ["ObjectInitializedEvent", "ObjectAddedEvent", "ContainerModifiedEvent"],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 773b5d1d..66fd2afe 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -22,41 +22,42 @@ class TestCreateContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_create_content_with_provided_id(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_create_content_without_provided_id(self):\n-        obj = create(self.folder, \'Document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertTrue(obj.getId().startswith(\'document.\'))\n+        obj = create(self.folder, "Document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertTrue(obj.getId().startswith("document."))\n \n     def test_create_content_without_add_permission_raises_unauthorized(self):\n         self.folder.manage_permission(\n-            \'plone.app.contenttypes: Add Document\', [], acquire=False)\n+            "plone.app.contenttypes: Add Document", [], acquire=False\n+        )\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_disallowed_content_type_raises_unauthorized(self):\n         self.portal.portal_types.Folder.filter_content_types = True\n         self.portal.portal_types.Folder.allowed_content_types = ()\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_constrained_content_type_raises_unauthorized(self):\n         constrains = ISelectableConstrainTypes(self.folder)\n         constrains.setConstrainTypesMode(1)\n-        constrains.setLocallyAllowedTypes([\'File\'])\n+        constrains.setLocallyAllowedTypes(["File"])\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n \n class TestATCreateContent(unittest.TestCase):\n@@ -65,43 +66,42 @@ class TestATCreateContent(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_create_content_with_provided_id(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_create_content_without_provided_id(self):\n-        obj = create(self.folder, \'Document\')\n-        self.assertEqual(obj.portal_type, \'Document\')\n-        self.assertTrue(obj.getId().startswith(\'document.\'))\n+        obj = create(self.folder, "Document")\n+        self.assertEqual(obj.portal_type, "Document")\n+        self.assertTrue(obj.getId().startswith("document."))\n \n     def test_create_content_without_add_permission_raises_unauthorized(self):\n-        self.folder.manage_permission(\n-            \'ATContentTypes: Add Document\', [], acquire=False)\n+        self.folder.manage_permission("ATContentTypes: Add Document", [], acquire=False)\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_disallowed_content_type_raises_unauthorized(self):\n         self.portal.portal_types.Folder.filter_content_types = True\n         self.portal.portal_types.Folder.allowed_content_types = ()\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n     def test_create_of_constrained_content_type_raises_unauthorized(self):\n         constrains = ISelectableConstrainTypes(self.folder)\n         constrains.setConstrainTypesMode(1)\n-        constrains.setLocallyAllowedTypes([\'File\'])\n+        constrains.setLocallyAllowedTypes(["File"])\n         with self.assertRaises(Unauthorized):\n-            create(self.folder, \'Document\', \'my-document\')\n+            create(self.folder, "Document", "my-document")\n \n \n class TestAddContent(unittest.TestCase):\n@@ -109,38 +109,39 @@ class TestAddContent(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_add_content_to_container(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n     def test_add_content_to_container_renames_id(self):\n-        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = create(self.folder, "Document", title="My Document")\n         obj = add(self.folder, obj)\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_add_content_to_container_keeps_id(self):\n-        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = create(self.folder, "Document", "doc-1", "My Document")\n         obj = add(self.folder, obj, rename=False)\n-        self.assertEqual(obj.getId(), \'doc-1\')\n+        self.assertEqual(obj.getId(), "doc-1")\n \n     def test_add_content_to_container_and_move_on_added_event(self):\n         sm = getGlobalSiteManager()\n \n         def move_object(event):\n             self.portal.manage_pasteObjects(\n-                cb_copy_data=self.folder.manage_cutObjects(\n-                    ids=[\'my-document\']))\n+                cb_copy_data=self.folder.manage_cutObjects(ids=["my-document"])\n+            )\n+\n         sm.registerHandler(move_object, (IObjectAddedEvent,))\n \n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         notify(ObjectCreatedEvent(obj))\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.portal)\n@@ -154,26 +155,26 @@ class TestATAddContent(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n \n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="My Folder")\n+        ]\n \n     def test_add_content_to_container(self):\n-        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = create(self.folder, "Document", "my-document")\n         obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n     def test_add_content_to_container_renames_id(self):\n-        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = create(self.folder, "Document", title="My Document")\n         obj = add(self.folder, obj)\n-        self.assertEqual(obj.getId(), \'my-document\')\n+        self.assertEqual(obj.getId(), "my-document")\n \n     def test_add_content_to_container_keeps_id(self):\n-        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = create(self.folder, "Document", "doc-1", "My Document")\n         obj = add(self.folder, obj, rename=False)\n-        self.assertEqual(obj.getId(), \'doc-1\')\n+        self.assertEqual(obj.getId(), "doc-1")\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 6cc45052..8c610347 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -20,40 +20,41 @@ class TestCopyMove(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n-        self.folder1 = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'My Folder\')]\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n+        self.folder1 = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        ]\n+\n+    def traverse(self, path="/plone", accept="application/json", method="GET"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_get_object_by_url(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n+        service = self.traverse("/plone/@copy", method="POST")\n         obj = service.get_object(self.doc1.absolute_url())\n \n         self.assertEqual(self.doc1, obj)\n \n     def test_get_object_by_path(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n-        obj = service.get_object(\'/doc1\')\n+        service = self.traverse("/plone/@copy", method="POST")\n+        obj = service.get_object("/doc1")\n \n         self.assertEqual(self.doc1, obj)\n \n     def test_get_object_by_uid(self):\n-        service = self.traverse(\'/plone/@copy\', method=\'POST\')\n+        service = self.traverse("/plone/@copy", method="POST")\n         obj = service.get_object(self.doc1.UID())\n \n         self.assertEqual(self.doc1, obj)\n@@ -64,25 +65,26 @@ class TestCopyMoveFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n-        self.doc2 = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc2\', title=\'My Document\')]\n-        self.folder1 = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'My Folder\')]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n+        self.doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="My Document")\n+        ]\n+        self.folder1 = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        ]\n \n         api.user.create(\n-            email=\'memberuser@example.com\',\n-            username=\'memberuser\',\n-            password=\'secret\'\n+            email="memberuser@example.com", username="memberuser", password="secret"\n         )\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -92,128 +94,97 @@ def tearDown(self):\n \n     def test_copy_single_object(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n+        self.assertIn("copy_of_doc1", self.portal.objectIds())\n \n     def test_move_single_object(self):\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/folder1/@move", json={"source": self.doc1.absolute_url()}\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'doc1\', self.folder1.objectIds())\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n+        self.assertIn("doc1", self.folder1.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n \n     def test_move_multiple_objects(self):\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n-            }\n+            "/folder1/@move",\n+            json={"source": [self.doc1.absolute_url(), self.doc2.absolute_url()]},\n         )\n         self.assertEqual(response.status_code, 200)\n         transaction.commit()\n \n-        self.assertIn(\'doc1\', self.folder1.objectIds())\n-        self.assertIn(\'doc2\', self.folder1.objectIds())\n-        self.assertNotIn(\'doc1\', self.portal.objectIds())\n-        self.assertNotIn(\'doc2\', self.portal.objectIds())\n+        self.assertIn("doc1", self.folder1.objectIds())\n+        self.assertIn("doc2", self.folder1.objectIds())\n+        self.assertNotIn("doc1", self.portal.objectIds())\n+        self.assertNotIn("doc2", self.portal.objectIds())\n \n     def test_copy_without_source_raises_400(self):\n-        response = self.api_session.post(\'/folder1/@copy\')\n+        response = self.api_session.post("/folder1/@copy")\n         self.assertEqual(response.status_code, 400)\n \n     def test_copy_not_existing_object(self):\n-        response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": "does-not-exist"\n-            }\n-        )\n+        response = self.api_session.post("/@copy", json={"source": "does-not-exist"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual([], response.json())\n \n     def test_copy_multiple_objects(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": [self.doc1.absolute_url(), self.doc2.absolute_url()]\n-            }\n+            "/@copy",\n+            json={"source": [self.doc1.absolute_url(), self.doc2.absolute_url()]},\n         )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\'copy_of_doc1\', self.portal.objectIds())\n-        self.assertIn(\'copy_of_doc2\', self.portal.objectIds())\n+        self.assertIn("copy_of_doc1", self.portal.objectIds())\n+        self.assertIn("copy_of_doc2", self.portal.objectIds())\n \n     def test_copy_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_copy_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = (\'nonexistent\', \'secret\')\n+        self.api_session.auth = ("nonexistent", "secret")\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@copy", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permissions_raises_403(self):\n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_move_single_object_no_auth_raises_401(self):\n-        self.api_session.auth = (\'nonexistent\', \'secret\')\n+        self.api_session.auth = ("nonexistent", "secret")\n         response = self.api_session.post(\n-            \'/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_move_single_object_no_permission_delete_source_raises_403(self):\n-        api.user.grant_roles(\n-            username=\'memberuser\', obj=self.folder1, roles=[\'Manager\', ])\n-        api.content.transition(obj=self.doc1, transition=\'publish\')\n+        api.user.grant_roles(username="memberuser", obj=self.folder1, roles=["Manager"])\n+        api.content.transition(obj=self.doc1, transition="publish")\n         transaction.commit()\n \n-        self.api_session.auth = (\'memberuser\', \'secret\')\n+        self.api_session.auth = ("memberuser", "secret")\n         response = self.api_session.post(\n-            \'/folder1/@move\',\n-            json={\n-                "source": self.doc1.absolute_url()\n-            }\n+            "/folder1/@move", json={"source": self.doc1.absolute_url()}\n         )\n \n         self.assertEqual(response.status_code, 403)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 009e2036..b18064b9 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -26,7 +26,9 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PAM_INSTALLED\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n+from plone.restapi.testing import (\n+    PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME,\n+)  # noqa\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n from plone.scale import storage\n@@ -50,40 +52,35 @@\n \n \n TUS_HEADERS = [\n-    \'upload-offset\',\n-    \'upload-length\',\n-    \'upload-metadata\',\n-    \'tus-version\',\n-    \'tus-resumable\',\n-    \'tus-extension\',\n-    \'tus-max-size\',\n-\n+    "upload-offset",\n+    "upload-length",\n+    "upload-metadata",\n+    "tus-version",\n+    "tus-resumable",\n+    "tus-extension",\n+    "tus-max-size",\n ]\n \n REQUEST_HEADER_KEYS = [\n-    \'accept\',\n-    \'accept-language\',\n-    \'authorization\',\n-    \'lock-token\',\n-    \'prefer\',\n+    "accept",\n+    "accept-language",\n+    "authorization",\n+    "lock-token",\n+    "prefer",\n ] + TUS_HEADERS\n \n-RESPONSE_HEADER_KEYS = [\n-    \'content-type\',\n-    \'allow\',\n-    \'location\',\n-] + TUS_HEADERS\n+RESPONSE_HEADER_KEYS = ["content-type", "allow", "location"] + TUS_HEADERS\n \n \n-base_path = resource_filename(\'plone.restapi.tests\', \'http-examples\')\n+base_path = resource_filename("plone.restapi.tests", "http-examples")\n \n-UPLOAD_DATA = b\'abcdefgh\'\n-UPLOAD_MIMETYPE = b\'text/plain\'\n-UPLOAD_FILENAME = b\'test.txt\'\n+UPLOAD_DATA = b"abcdefgh"\n+UPLOAD_MIMETYPE = b"text/plain"\n+UPLOAD_FILENAME = b"test.txt"\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n-UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n-UPLOAD_PDF_FILENAME = \'file.pdf\'\n+UPLOAD_PDF_MIMETYPE = "application/pdf"\n+UPLOAD_PDF_FILENAME = "file.pdf"\n \n PLONE_VERSION = parse_version(api.env.plone_version())\n \n@@ -96,36 +93,37 @@\n \n \n def pretty_json(data):\n-    return json.dumps(data, sort_keys=True, indent=4, separators=(\',\', \': \'))\n+    return json.dumps(data, sort_keys=True, indent=4, separators=(",", ": "))\n \n \n def save_request_and_response_for_docs(name, response):\n     if six.PY2:\n         open_kw = {}\n     else:\n-        open_kw = {\'newline\': \'\\n\'}\n-    filename = \'{}/{}\'.format(base_path, \'%s.req\' % name)\n-    with open(filename, \'w\', **open_kw) as req:\n-        req.write(\'{} {} HTTP/1.1\\n\'.format(\n-            response.request.method,\n-            response.request.path_url\n-        ))\n+        open_kw = {"newline": "\\n"}\n+    filename = "{}/{}".format(base_path, "%s.req" % name)\n+    with open(filename, "w", **open_kw) as req:\n+        req.write(\n+            "{} {} HTTP/1.1\\n".format(\n+                response.request.method, response.request.path_url\n+            )\n+        )\n         ordered_request_headers = collections.OrderedDict(\n             sorted(response.request.headers.items())\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write(\'{}: {}\\n\'.format(key.title(), value))\n+                req.write("{}: {}\\n".format(key.title(), value))\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n-            if \'content-type\' not in REQUEST_HEADER_KEYS:\n-                content_type = response.request.headers[\'Content-Type\']\n-                req.write(\'Content-Type: %s\\n\' % content_type)\n+            if "content-type" not in REQUEST_HEADER_KEYS:\n+                content_type = response.request.headers["Content-Type"]\n+                req.write("Content-Type: %s\\n" % content_type)\n \n-            req.write(\'\\n\')\n+            req.write("\\n")\n \n             # Pretty print JSON request body\n-            if content_type == \'application/json\':\n+            if content_type == "application/json":\n                 json_body = json.loads(response.request.body)\n                 body = pretty_json(json_body)\n                 # Make sure Content-Length gets updated, just in case we\n@@ -133,22 +131,23 @@ def save_request_and_response_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if (isinstance(response.request.body, six.text_type)\n-                    or not hasattr(req, \'buffer\')):\n+            if isinstance(response.request.body, six.text_type) or not hasattr(\n+                req, "buffer"\n+            ):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n                 req.buffer.write(response.request.body)\n \n-    filename = \'{}/{}\'.format(base_path, \'%s.resp\' % name)\n-    with open(filename, \'w\', **open_kw) as resp:\n+    filename = "{}/{}".format(base_path, "%s.resp" % name)\n+    with open(filename, "w", **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n-        resp.write(\'HTTP/1.1 {} {}\\n\'.format(status, reason))\n+        resp.write("HTTP/1.1 {} {}\\n".format(status, reason))\n         for key, value in response.headers.items():\n             if key.lower() in RESPONSE_HEADER_KEYS:\n-                resp.write(\'{}: {}\\n\'.format(key.title(), value))\n-        resp.write(\'\\n\')\n+                resp.write("{}: {}\\n".format(key.title(), value))\n+        resp.write("\\n")\n         resp.write(response.text)\n \n \n@@ -157,23 +156,23 @@ class TestDocumentation(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Register custom UUID generator to produce stable UUIDs during tests\n         pushGlobalRegistry(getSite())\n-        register_static_uuid_utility(prefix=\'SomeUUID\')\n+        register_static_uuid_utility(prefix="SomeUUID")\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n@@ -181,48 +180,38 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def create_document(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n     def create_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        folder = self.portal[\'folder\']\n-        folder.title = \'My Folder\'\n-        folder.description = u\'This is a folder with two documents\'\n-        folder.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'A document within a folder\'\n-        )\n-        folder.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'A document within a folder\'\n-        )\n-        folder.creation_date = DateTime(\n-            \'2016-01-21T07:14:48+00:00\')\n-        folder.modification_date = DateTime(\n-            \'2016-01-21T07:24:11+00:00\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        folder = self.portal["folder"]\n+        folder.title = "My Folder"\n+        folder.description = u"This is a folder with two documents"\n+        folder.invokeFactory("Document", id="doc1", title="A document within a folder")\n+        folder.invokeFactory("Document", id="doc2", title="A document within a folder")\n+        folder.creation_date = DateTime("2016-01-21T07:14:48+00:00")\n+        folder.modification_date = DateTime("2016-01-21T07:24:11+00:00")\n         return folder\n \n     def tearDown(self):\n@@ -236,384 +225,316 @@ def test_documentation_content_crud(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            folder.absolute_url(),\n-            json={\n-                \'@type\': \'Document\',\n-                \'title\': \'My Document\',\n-            }\n+            folder.absolute_url(), json={"@type": "Document", "title": "My Document"}\n         )\n-        save_request_and_response_for_docs(\'content_post\', response)\n+        save_request_and_response_for_docs("content_post", response)\n \n         transaction.commit()\n-        document = folder[\'my-document\']\n+        document = folder["my-document"]\n         response = self.api_session.get(document.absolute_url())\n-        save_request_and_response_for_docs(\'content_get\', response)\n+        save_request_and_response_for_docs("content_get", response)\n \n         response = self.api_session.patch(\n-            document.absolute_url(),\n-            json={\n-                \'title\': \'My New Document Title\',\n-            }\n+            document.absolute_url(), json={"title": "My New Document Title"}\n         )\n-        save_request_and_response_for_docs(\'content_patch\', response)\n+        save_request_and_response_for_docs("content_patch", response)\n \n         response = self.api_session.patch(\n             document.absolute_url(),\n-            headers={\'Prefer\': \'return=representation\'},\n-            json={\n-                \'title\': \'My New Document Title\',\n-            }\n-        )\n-        save_request_and_response_for_docs(\n-            \'content_patch_representation\',\n-            response\n+            headers={"Prefer": "return=representation"},\n+            json={"title": "My New Document Title"},\n         )\n+        save_request_and_response_for_docs("content_patch_representation", response)\n \n         transaction.commit()\n         response = self.api_session.delete(document.absolute_url())\n-        save_request_and_response_for_docs(\'content_delete\', response)\n+        save_request_and_response_for_docs("content_delete", response)\n \n     def test_documentation_document(self):\n         response = self.api_session.get(self.document.absolute_url())\n-        save_request_and_response_for_docs(\'document\', response)\n+        save_request_and_response_for_docs("document", response)\n \n     def test_documentation_news_item(self):\n-        self.portal.invokeFactory(\'News Item\', id=\'newsitem\')\n-        self.portal.newsitem.title = \'My News Item\'\n-        self.portal.newsitem.description = u\'This is a news item\'\n+        self.portal.invokeFactory("News Item", id="newsitem")\n+        self.portal.newsitem.title = "My News Item"\n+        self.portal.newsitem.description = u"This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n-        )\n-        self.portal.newsitem.image_caption = u\'This is an image caption.\'\n-        self.portal.newsitem.creation_date = DateTime(\n-            \'2016-01-21T02:14:48+00:00\')\n-        self.portal.newsitem.modification_date = DateTime(\n-            \'2016-01-21T02:24:11+00:00\')\n+            data=image_data, contentType="image/png", filename=u"image.png"\n+        )\n+        self.portal.newsitem.image_caption = u"This is an image caption."\n+        self.portal.newsitem.creation_date = DateTime("2016-01-21T02:14:48+00:00")\n+        self.portal.newsitem.modification_date = DateTime("2016-01-21T02:24:11+00:00")\n         transaction.commit()\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n-            response = self.api_session.get(\n-                self.portal.newsitem.absolute_url()\n-            )\n-            save_request_and_response_for_docs(\'newsitem\', response)\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n+            response = self.api_session.get(self.portal.newsitem.absolute_url())\n+            save_request_and_response_for_docs("newsitem", response)\n \n     def test_documentation_event(self):\n-        self.portal.invokeFactory(\'Event\', id=\'event\')\n-        self.portal.event.title = \'Event\'\n-        self.portal.event.description = u\'This is an event\'\n+        self.portal.invokeFactory("Event", id="event")\n+        self.portal.event.title = "Event"\n+        self.portal.event.description = u"This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n-        self.portal.event.creation_date = DateTime(\'2016-01-21T03:14:48+00:00\')\n-        self.portal.event.modification_date = DateTime(\n-            \'2016-01-21T03:24:11+00:00\')\n+        self.portal.event.creation_date = DateTime("2016-01-21T03:14:48+00:00")\n+        self.portal.event.modification_date = DateTime("2016-01-21T03:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n-        save_request_and_response_for_docs(\'event\', response)\n+        save_request_and_response_for_docs("event", response)\n \n     def test_documentation_link(self):\n-        self.portal.invokeFactory(\'Link\', id=\'link\')\n-        self.portal.link.title = \'My Link\'\n-        self.portal.link.description = u\'This is a link\'\n-        self.portal.remoteUrl = \'http://plone.org\'\n-        self.portal.link.creation_date = DateTime(\'2016-01-21T04:14:48+00:00\')\n-        self.portal.link.modification_date = DateTime(\n-            \'2016-01-21T04:24:11+00:00\')\n+        self.portal.invokeFactory("Link", id="link")\n+        self.portal.link.title = "My Link"\n+        self.portal.link.description = u"This is a link"\n+        self.portal.remoteUrl = "http://plone.org"\n+        self.portal.link.creation_date = DateTime("2016-01-21T04:14:48+00:00")\n+        self.portal.link.modification_date = DateTime("2016-01-21T04:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n-        save_request_and_response_for_docs(\'link\', response)\n+        save_request_and_response_for_docs("link", response)\n \n     def test_documentation_file(self):\n-        self.portal.invokeFactory(\'File\', id=\'file\')\n-        self.portal.file.title = \'My File\'\n-        self.portal.file.description = u\'This is a file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        with open(pdf_file, \'rb\') as f:\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.file.title = "My File"\n+        self.portal.file.description = u"This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=pdf_data,\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n         )\n-        self.portal.file.creation_date = DateTime(\'2016-01-21T05:14:48+00:00\')\n-        self.portal.file.modification_date = DateTime(\n-            \'2016-01-21T05:24:11+00:00\')\n+        self.portal.file.creation_date = DateTime("2016-01-21T05:14:48+00:00")\n+        self.portal.file.modification_date = DateTime("2016-01-21T05:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n-        save_request_and_response_for_docs(\'file\', response)\n+        save_request_and_response_for_docs("file", response)\n \n     def test_documentation_image(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image\')\n-        self.portal.image.title = \'My Image\'\n-        self.portal.image.description = u\'This is an image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="image")\n+        self.portal.image.title = "My Image"\n+        self.portal.image.description = u"This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n-        self.portal.image.creation_date = DateTime(\'2016-01-21T06:14:48+00:00\')\n-        self.portal.image.modification_date = DateTime(\n-            \'2016-01-21T06:24:11+00:00\')\n+        self.portal.image.creation_date = DateTime("2016-01-21T06:14:48+00:00")\n+        self.portal.image.modification_date = DateTime("2016-01-21T06:24:11+00:00")\n         transaction.commit()\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n             response = self.api_session.get(self.portal.image.absolute_url())\n-            save_request_and_response_for_docs(\'image\', response)\n+            save_request_and_response_for_docs("image", response)\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n         transaction.commit()\n         response = self.api_session.get(folder.absolute_url())\n-        save_request_and_response_for_docs(\'folder\', response)\n+        save_request_and_response_for_docs("folder", response)\n \n     def test_documentation_collection(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection\')\n-        self.portal.collection.title = \'My Collection\'\n-        self.portal.collection.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Document 1\'\n-        )\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n-        self.portal.collection.creation_date = DateTime(\n-            \'2016-01-21T08:14:48+00:00\')\n-        self.portal.collection.modification_date = DateTime(\n-            \'2016-01-21T08:24:11+00:00\')\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.collection.title = "My Collection"\n+        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n+        self.portal.collection.creation_date = DateTime("2016-01-21T08:14:48+00:00")\n+        self.portal.collection.modification_date = DateTime("2016-01-21T08:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n-        save_request_and_response_for_docs(\'collection\', response)\n+        save_request_and_response_for_docs("collection", response)\n \n     def test_documentation_siteroot(self):\n         response = self.api_session.get(self.portal.absolute_url())\n-        save_request_and_response_for_docs(\'siteroot\', response)\n+        save_request_and_response_for_docs("siteroot", response)\n \n     def test_documentation_404_not_found(self):\n-        response = self.api_session.get(\'non-existing-resource\')\n-        save_request_and_response_for_docs(\'404_not_found\', response)\n+        response = self.api_session.get("non-existing-resource")\n+        save_request_and_response_for_docs("404_not_found", response)\n \n     def test_documentation_search(self):\n-        query = {\'sort_on\': \'path\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search\', response)\n+        query = {"sort_on": "path"}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search", response)\n \n     def test_documentation_search_options(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'Folder 1\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'Folder 2\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Folder", id="folder2", title="Folder 2")\n         transaction.commit()\n-        query = {\'sort_on\': \'path\',\n-                 \'path.query\': \'/plone/folder1\',\n-                 \'path.depth\': \'1\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_options\', response)\n+        query = {"sort_on": "path", "path.query": "/plone/folder1", "path.depth": "1"}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_options", response)\n \n     def test_documentation_search_multiple_paths(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'Folder 1\'\n-        )\n-        self.portal.folder1.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder2\',\n-            title=\'Folder 2\'\n-        )\n-        self.portal.folder2.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n+        self.portal.invokeFactory("Folder", id="folder2", title="Folder 2")\n+        self.portal.folder2.invokeFactory("Document", id="doc2", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'sort_on\': \'path\',\n-                 \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n-                 \'path.depth\': \'2\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_multiple_paths\', response)\n+        query = {\n+            "sort_on": "path",\n+            "path.query": ["/plone/folder1", "/plone/folder2"],\n+            "path.depth": "2",\n+        }\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_multiple_paths", response)\n \n     def test_documentation_search_metadata_fields(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'modified\', \'created\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_metadata_fields\', response)\n+        query = {"SearchableText": "lorem", "metadata_fields": ["modified", "created"]}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_metadata_fields", response)\n \n     def test_documentation_search_fullobjects(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="Lorem Ipsum")\n         transaction.commit()\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'fullobjects\': 1}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        save_request_and_response_for_docs(\'search_fullobjects\', response)\n+        query = {"SearchableText": "lorem", "fullobjects": 1}\n+        response = self.api_session.get("/@search", params=query)\n+        save_request_and_response_for_docs("search_fullobjects", response)\n \n     def test_documentation_workflow(self):\n         response = self.api_session.get(\n-            \'{}/@workflow\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'workflow_get\', response)\n+            "{}/@workflow".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n         self.frozen_time.tick(timedelta(minutes=5))\n         response = self.api_session.post(\n-            \'{}/@workflow/publish\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'workflow_post\', response)\n+            "{}/@workflow/publish".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("workflow_post", response)\n \n     def test_documentation_workflow_transition_with_body(self):\n         self.frozen_time.tick(timedelta(minutes=5))\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n         transaction.commit()\n         response = self.api_session.post(\n-            \'{}/@workflow/publish\'.format(folder.absolute_url()),\n+            "{}/@workflow/publish".format(folder.absolute_url()),\n             json={\n-                \'comment\': \'Publishing my folder...\',\n-                \'include_children\': True,\n-                \'effective\': \'2018-01-21T08:00:00\',\n-                \'expires\': \'2019-01-21T08:00:00\',\n-            })\n-        save_request_and_response_for_docs(\'workflow_post_with_body\', response)\n+                "comment": "Publishing my folder...",\n+                "include_children": True,\n+                "effective": "2018-01-21T08:00:00",\n+                "expires": "2019-01-21T08:00:00",\n+            },\n+        )\n+        save_request_and_response_for_docs("workflow_post_with_body", response)\n \n     def test_documentation_registry_get(self):\n         response = self.api_session.get(\n-            \'/@registry/plone.app.querystring.field.path.title\')\n-        save_request_and_response_for_docs(\'registry_get\', response)\n+            "/@registry/plone.app.querystring.field.path.title"\n+        )\n+        save_request_and_response_for_docs("registry_get", response)\n \n     def test_documentation_registry_update(self):\n         response = self.api_session.patch(\n-            \'/@registry/\',\n-            json={\'plone.app.querystring.field.path.title\': \'Value\'})\n-        save_request_and_response_for_docs(\'registry_update\', response)\n+            "/@registry/", json={"plone.app.querystring.field.path.title": "Value"}\n+        )\n+        save_request_and_response_for_docs("registry_update", response)\n \n     def test_documentation_registry_get_list(self):\n-        response = self.api_session.get(\'/@registry\')\n-        save_request_and_response_for_docs(\'registry_get_list\', response)\n+        response = self.api_session.get("/@registry")\n+        save_request_and_response_for_docs("registry_get_list", response)\n \n     def test_documentation_types(self):\n-        response = self.api_session.get(\'/@types\')\n-        save_request_and_response_for_docs(\'types\', response)\n+        response = self.api_session.get("/@types")\n+        save_request_and_response_for_docs("types", response)\n \n     def test_documentation_types_document(self):\n-        response = self.api_session.get(\'@types/Document\')\n-        save_request_and_response_for_docs(\'types_document\', response)\n+        response = self.api_session.get("@types/Document")\n+        save_request_and_response_for_docs("types_document", response)\n \n     def test_documentation_jwt_login(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        save_request_and_response_for_docs(\'jwt_login\', response)\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        save_request_and_response_for_docs("jwt_login", response)\n \n     def test_documentation_jwt_logged_in(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.get(\n-            \'/\',\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_logged_in\', response)\n+            "/", headers={"Authorization": "Bearer {}".format(token)}\n+        )\n+        save_request_and_response_for_docs("jwt_logged_in", response)\n \n     def test_documentation_jwt_login_renew(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            \'{}/@login-renew\'.format(self.portal.absolute_url()),\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_login_renew\', response)\n+            "{}/@login-renew".format(self.portal.absolute_url()),\n+            headers={"Authorization": "Bearer {}".format(token)},\n+        )\n+        save_request_and_response_for_docs("jwt_login_renew", response)\n \n     def test_documentation_jwt_logout(self):\n-        self.portal.acl_users.jwt_auth._secret = \'secret\'\n+        self.portal.acl_users.jwt_auth._secret = "secret"\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            \'{}/@login\'.format(self.portal.absolute_url()),\n-            json={\'login\': SITE_OWNER_NAME, \'password\': SITE_OWNER_PASSWORD})\n-        token = json.loads(response.content)[\'token\']\n+            "{}/@login".format(self.portal.absolute_url()),\n+            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+        )\n+        token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            \'{}/@logout\'.format(self.portal.absolute_url()),\n-            headers={\'Authorization\': \'Bearer {}\'.format(token)})\n-        save_request_and_response_for_docs(\'jwt_logout\', response)\n+            "{}/@logout".format(self.portal.absolute_url()),\n+            headers={"Authorization": "Bearer {}".format(token)},\n+        )\n+        save_request_and_response_for_docs("jwt_logout", response)\n \n     def test_documentation_batching(self):\n-        folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder\',\n-            title=\'Folder\'\n-        )]\n+        folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder", title="Folder")\n+        ]\n         for i in range(7):\n             folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc-%s\' % str(i + 1),\n-                title=\'Document %s\' % str(i + 1)\n+                "Document", id="doc-%s" % str(i + 1), title="Document %s" % str(i + 1)\n             )\n         transaction.commit()\n \n-        query = {\'sort_on\': \'path\'}\n-        response = self.api_session.get(\n-            \'/folder/@search?b_size=5\', params=query)\n-        save_request_and_response_for_docs(\'batching\', response)\n+        query = {"sort_on": "path"}\n+        response = self.api_session.get("/folder/@search?b_size=5", params=query)\n+        save_request_and_response_for_docs("batching", response)\n \n     def test_documentation_users(self):\n         test_user = api.user.get(username=TEST_USER_ID)\n@@ -623,533 +544,515 @@ def test_documentation_users(self):\n             "fullname": "Test User",\n             "home_page": "http://www.example.com",\n             "location": "Bonn",\n-            "username": "test-user"\n+            "username": "test-user",\n         }\n         test_user.setMemberProperties(mapping=properties)\n-        admin = api.user.get(username=\'admin\')\n+        admin = api.user.get(username="admin")\n         properties = {\n             "description": "This is an admin user",\n             "email": "admin@example.com",\n             "fullname": "Administrator",\n             "home_page": "http://www.example.com",\n             "location": "Berlin",\n-            "username": "admin"\n+            "username": "admin",\n         }\n         admin.setMemberProperties(mapping=properties)\n         transaction.commit()\n-        response = self.api_session.get(\'/@users\')\n-        save_request_and_response_for_docs(\'users\', response)\n+        response = self.api_session.get("/@users")\n+        save_request_and_response_for_docs("users", response)\n \n     def test_documentation_users_as_anonymous(self):\n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n \n-        response = logged_out_api_session.get(\'@users\')\n-        save_request_and_response_for_docs(\'users_anonymous\', response)\n+        response = logged_out_api_session.get("@users")\n+        save_request_and_response_for_docs("users_anonymous", response)\n         self.assertEqual(response.status_code, 401)\n         logged_out_api_session.close()\n \n     def test_documentations_users_as_unauthorized_user(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'password\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="password",\n+            properties=properties,\n         )\n         transaction.commit()\n \n         standard_api_session = RelativeSession(self.portal_url)\n-        standard_api_session.headers.update({\'Accept\': \'application/json\'})\n-        standard_api_session.auth = (\'noam\', \'password\')\n+        standard_api_session.headers.update({"Accept": "application/json"})\n+        standard_api_session.auth = ("noam", "password")\n \n-        response = standard_api_session.get(\'@users\')\n-        save_request_and_response_for_docs(\'users_unauthorized\', response)\n+        response = standard_api_session.get("@users")\n+        save_request_and_response_for_docs("users_unauthorized", response)\n         self.assertEqual(response.status_code, 401)\n         standard_api_session.close()\n \n     def test_documentation_users_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_get\', response)\n+        response = self.api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_get", response)\n \n     def test_documentation_users_anonymous_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n \n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_anonymous_get\', response)\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_anonymous_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_unauthorized_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="secret",\n+            properties=properties,\n         )\n \n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam-fake\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam-fake",\n+            password="secret",\n+            properties=properties,\n         )\n \n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n-        logged_out_api_session.auth = (\'noam-fake\', \'secret\')\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n+        logged_out_api_session.auth = ("noam-fake", "secret")\n \n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_unauthorized_get\', response)\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_unauthorized_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_authorized_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'secret\',\n-            properties=properties\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            password="secret",\n+            properties=properties,\n         )\n         transaction.commit()\n \n         logged_out_api_session = RelativeSession(self.portal_url)\n-        logged_out_api_session.headers.update({\'Accept\': \'application/json\'})\n-        logged_out_api_session.auth = (\'noam\', \'secret\')\n-        response = logged_out_api_session.get(\'@users/noam\')\n-        save_request_and_response_for_docs(\'users_authorized_get\', response)\n+        logged_out_api_session.headers.update({"Accept": "application/json"})\n+        logged_out_api_session.auth = ("noam", "secret")\n+        response = logged_out_api_session.get("@users/noam")\n+        save_request_and_response_for_docs("users_authorized_get", response)\n         logged_out_api_session.close()\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'@users\', params={\'query\': \'noa\'})\n-        save_request_and_response_for_docs(\'users_filtered_by_username\', response)  # noqa\n+        response = self.api_session.get("@users", params={"query": "noa"})\n+        save_request_and_response_for_docs(\n+            "users_filtered_by_username", response\n+        )  # noqa\n \n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n-                \'email\': \'noam.chomsky@example.com\',\n-                \'password\': \'colorlessgreenideas\',\n-                \'username\': \'noamchomsky\',\n-                \'fullname\': \'Noam Avram Chomsky\',\n-                \'home_page\': \'web.mit.edu/chomsky\',\n-                \'description\': \'Professor of Linguistics\',\n-                \'location\': \'Cambridge, MA\',\n-                \'roles\': [\'Contributor\', ],\n+                "email": "noam.chomsky@example.com",\n+                "password": "colorlessgreenideas",\n+                "username": "noamchomsky",\n+                "fullname": "Noam Avram Chomsky",\n+                "home_page": "web.mit.edu/chomsky",\n+                "description": "Professor of Linguistics",\n+                "location": "Cambridge, MA",\n+                "roles": ["Contributor"],\n             },\n         )\n-        save_request_and_response_for_docs(\'users_created\', response)\n+        save_request_and_response_for_docs("users_created", response)\n \n     def test_documentation_users_add(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n-                \'email\': \'noam.chomsky@example.com\',\n-                \'username\': \'noamchomsky\',\n-                \'fullname\': \'Noam Avram Chomsky\',\n-                \'home_page\': \'web.mit.edu/chomsky\',\n-                \'description\': \'Professor of Linguistics\',\n-                \'location\': \'Cambridge, MA\',\n-                \'sendPasswordReset\': True\n+                "email": "noam.chomsky@example.com",\n+                "username": "noamchomsky",\n+                "fullname": "Noam Avram Chomsky",\n+                "home_page": "web.mit.edu/chomsky",\n+                "description": "Professor of Linguistics",\n+                "location": "Cambridge, MA",\n+                "sendPasswordReset": True,\n             },\n         )\n-        save_request_and_response_for_docs(\'users_add\', response)\n+        save_request_and_response_for_docs("users_add", response)\n \n     def test_documentation_users_update(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n         response = self.api_session.patch(\n-            \'/@users/noam\',\n+            "/@users/noam",\n             json={\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'roles\': {\'Contributor\': False, },\n+                "email": "avram.chomsky@example.com",\n+                "roles": {"Contributor": False},\n             },\n         )\n-        save_request_and_response_for_docs(\'users_update\', response)\n+        save_request_and_response_for_docs("users_update", response)\n \n     def test_documentation_users_update_portrait(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\'\n-        )\n+        api.user.create(email="noam.chomsky@example.com", username="noam")\n         transaction.commit()\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n-        response_get = self.api_session.get(\'/@users/noam\', json=payload)\n+        response_get = self.api_session.get("/@users/noam", json=payload)\n \n-        save_request_and_response_for_docs(\'users_update_portrait\', response)\n-        save_request_and_response_for_docs(\n-            \'users_update_portrait_get\', response_get)\n+        save_request_and_response_for_docs("users_update_portrait", response)\n+        save_request_and_response_for_docs("users_update_portrait_get", response_get)\n \n     def test_documentation_users_update_portrait_with_scale(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\',\n-                \'scale\': True\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n+                "scale": True,\n             }\n         }\n-        api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\'\n-        )\n+        api.user.create(email="noam.chomsky@example.com", username="noam")\n         transaction.commit()\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n-        save_request_and_response_for_docs(\n-            \'users_update_portrait_scale\', response)\n+        save_request_and_response_for_docs("users_update_portrait_scale", response)\n \n     def test_documentation_users_delete(self):\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n         transaction.commit()\n \n-        response = self.api_session.delete(\n-            \'/@users/noam\')\n-        save_request_and_response_for_docs(\'users_delete\', response)\n+        response = self.api_session.delete("/@users/noam")\n+        save_request_and_response_for_docs("users_delete", response)\n \n     def test_documentation_groups(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'/@groups\')\n-        save_request_and_response_for_docs(\'groups\', response)\n+        response = self.api_session.get("/@groups")\n+        save_request_and_response_for_docs("groups", response)\n \n     def test_documentation_groups_get(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'@groups/ploneteam\')\n-        save_request_and_response_for_docs(\'groups_get\', response)\n+        response = self.api_session.get("@groups/ploneteam")\n+        save_request_and_response_for_docs("groups_get", response)\n \n     def test_documentation_groups_filtered_get(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n-        response = self.api_session.get(\'@groups\', params={\'query\': \'plo\'})\n-        save_request_and_response_for_docs(\'groups_filtered_by_groupname\', response)  # noqa\n+        response = self.api_session.get("@groups", params={"query": "plo"})\n+        save_request_and_response_for_docs(\n+            "groups_filtered_by_groupname", response\n+        )  # noqa\n \n     def test_documentation_groups_created(self):\n         response = self.api_session.post(\n-            \'/@groups\',\n+            "/@groups",\n             json={\n-                \'groupname\': \'fwt\',\n-                \'email\': \'fwt@plone.org\',\n-                \'title\': \'Framework Team\',\n-                \'description\': \'The Plone Framework Team\',\n-                \'roles\': [\'Manager\'],\n-                \'groups\': [\'Administrators\'],\n-                \'users\': [SITE_OWNER_NAME, TEST_USER_ID]\n+                "groupname": "fwt",\n+                "email": "fwt@plone.org",\n+                "title": "Framework Team",\n+                "description": "The Plone Framework Team",\n+                "roles": ["Manager"],\n+                "groups": ["Administrators"],\n+                "users": [SITE_OWNER_NAME, TEST_USER_ID],\n             },\n         )\n-        save_request_and_response_for_docs(\'groups_created\', response)\n+        save_request_and_response_for_docs("groups_created", response)\n \n     def test_documentation_groups_update(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n         response = self.api_session.patch(\n-            \'/@groups/ploneteam\',\n-            json={\n-                \'email\': \'ploneteam2@plone.org\',\n-                \'users\': {TEST_USER_ID: False}\n-            },\n+            "/@groups/ploneteam",\n+            json={"email": "ploneteam2@plone.org", "users": {TEST_USER_ID: False}},\n         )\n-        save_request_and_response_for_docs(\'groups_update\', response)\n+        save_request_and_response_for_docs("groups_update", response)\n \n     def test_documentation_groups_delete(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n-        response = self.api_session.delete(\n-            \'/@groups/ploneteam\')\n-        save_request_and_response_for_docs(\'groups_delete\', response)\n+        response = self.api_session.delete("/@groups/ploneteam")\n+        save_request_and_response_for_docs("groups_delete", response)\n \n     def test_documentation_breadcrumbs(self):\n         response = self.api_session.get(\n-            \'{}/@breadcrumbs\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'breadcrumbs\', response)\n+            "{}/@breadcrumbs".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("breadcrumbs", response)\n \n     def test_documentation_navigation(self):\n         response = self.api_session.get(\n-            \'{}/@navigation\'.format(self.document.absolute_url()))\n-        save_request_and_response_for_docs(\'navigation\', response)\n+            "{}/@navigation".format(self.document.absolute_url())\n+        )\n+        save_request_and_response_for_docs("navigation", response)\n \n     def test_documentation_navigation_tree(self):\n         folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         subfolder1 = createContentInContainer(\n-            folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         createContentInContainer(\n-            folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n-        createContentInContainer(\n-            thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+        )\n         createContentInContainer(\n-            folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n+        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n         transaction.commit()\n \n         response = self.api_session.get(\n-            \'{}/@navigation\'.format(self.document.absolute_url()),\n-            params={\n-                "expand.navigation.depth": 4\n-            })\n-        save_request_and_response_for_docs(\'navigation_tree\', response)\n+            "{}/@navigation".format(self.document.absolute_url()),\n+            params={"expand.navigation.depth": 4},\n+        )\n+        save_request_and_response_for_docs("navigation_tree", response)\n \n     def test_documentation_principals(self):\n-        gtool = api.portal.get_tool(\'portal_groups\')\n+        gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        gtool.addGroup(\'ploneteam\', (), (),\n-                       properties=properties,\n-                       title=properties[\'title\'],\n-                       description=properties[\'description\'])\n-        transaction.commit()\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "ploneteam"\n-            }\n+        gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n         )\n-        save_request_and_response_for_docs(\'principals\', response)\n+        transaction.commit()\n+        response = self.api_session.get("/@principals", params={"search": "ploneteam"})\n+        save_request_and_response_for_docs("principals", response)\n \n     def test_documentation_copy(self):\n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                \'source\': self.document.absolute_url(),\n-            },\n+            "/@copy", json={"source": self.document.absolute_url()}\n         )\n-        save_request_and_response_for_docs(\'copy\', response)\n+        save_request_and_response_for_docs("copy", response)\n \n     def test_documentation_copy_multiple(self):\n-        newsitem = self.portal[self.portal.invokeFactory(\n-            \'News Item\', id=\'newsitem\')]\n-        newsitem.title = \'My News Item\'\n+        newsitem = self.portal[self.portal.invokeFactory("News Item", id="newsitem")]\n+        newsitem.title = "My News Item"\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@copy\',\n-            json={\n-                \'source\': [\n-                    self.document.absolute_url(),\n-                    newsitem.absolute_url(),\n-                ],\n-            },\n+            "/@copy",\n+            json={"source": [self.document.absolute_url(), newsitem.absolute_url()]},\n         )\n-        save_request_and_response_for_docs(\'copy_multiple\', response)\n+        save_request_and_response_for_docs("copy_multiple", response)\n \n     def test_documentation_move(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/folder/@move\',\n-            json={\n-                \'source\': self.document.absolute_url(),\n-            },\n+            "/folder/@move", json={"source": self.document.absolute_url()}\n         )\n-        save_request_and_response_for_docs(\'move\', response)\n+        save_request_and_response_for_docs("move", response)\n \n     def test_documentation_vocabularies_all(self):\n-        response = self.api_session.get(\'/@vocabularies\')\n-        save_request_and_response_for_docs(\'vocabularies\', response)\n+        response = self.api_session.get("/@vocabularies")\n+        save_request_and_response_for_docs("vocabularies", response)\n \n     def test_documentation_vocabularies_get(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n-        save_request_and_response_for_docs(\'vocabularies_get\', response)\n+        save_request_and_response_for_docs("vocabularies_get", response)\n \n     def test_documentation_vocabularies_get_filtered_by_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'title=doc\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?" "title=doc"\n         )\n         save_request_and_response_for_docs(\n-            \'vocabularies_get_filtered_by_title\', response)\n+            "vocabularies_get_filtered_by_title", response\n+        )\n \n     def test_documentation_vocabularies_get_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?\'\n-            \'token=Document\'\n+            "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?"\n+            "token=Document"\n         )\n         save_request_and_response_for_docs(\n-            \'vocabularies_get_filtered_by_token\', response)\n+            "vocabularies_get_filtered_by_token", response\n+        )\n \n     def test_documentation_sharing_folder_get(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n-        response = self.api_session.get(\n-            \'/folder/@sharing\'\n-        )\n-        save_request_and_response_for_docs(\'sharing_folder_get\', response)\n+        response = self.api_session.get("/folder/@sharing")\n+        save_request_and_response_for_docs("sharing_folder_get", response)\n \n     def test_documentation_sharing_folder_post(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n         payload = {\n             "inherit": True,\n@@ -1160,73 +1063,62 @@ def test_documentation_sharing_folder_post(self):\n                         "Reviewer": True,\n                         "Editor": False,\n                         "Reader": True,\n-                        "Contributor": False\n+                        "Contributor": False,\n                     },\n-                    "type": "user"\n+                    "type": "user",\n                 }\n-            ]\n+            ],\n         }\n-        response = self.api_session.post(\n-            \'/folder/@sharing\',\n-            json=payload\n-        )\n-        save_request_and_response_for_docs(\'sharing_folder_post\', response)\n+        response = self.api_session.post("/folder/@sharing", json=payload)\n+        save_request_and_response_for_docs("sharing_folder_post", response)\n \n     def test_documentation_sharing_search(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'doc\')\n-        api.user.grant_roles(\'admin\', roles=[\'Contributor\'])\n-        api.user.grant_roles(\n-            \'admin\', roles=[\'Editor\'], obj=self.portal.folder\n-        )\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="doc")\n+        api.user.grant_roles("admin", roles=["Contributor"])\n+        api.user.grant_roles("admin", roles=["Editor"], obj=self.portal.folder)\n         transaction.commit()\n-        response = self.api_session.get(\n-            \'/folder/doc/@sharing?search=admin\'\n-        )\n-        save_request_and_response_for_docs(\'sharing_search\', response)\n+        response = self.api_session.get("/folder/doc/@sharing?search=admin")\n+        save_request_and_response_for_docs("sharing_search", response)\n \n     def test_documentation_expansion(self):\n-        response = self.api_session.get(\n-            \'/front-page\'\n-        )\n-        save_request_and_response_for_docs(\'expansion\', response)\n+        response = self.api_session.get("/front-page")\n+        save_request_and_response_for_docs("expansion", response)\n \n     def test_documentation_expansion_expanded(self):\n-        response = self.api_session.get(\n-            \'/front-page?expand=breadcrumbs\'\n-        )\n-        save_request_and_response_for_docs(\'expansion_expanded\', response)\n+        response = self.api_session.get("/front-page?expand=breadcrumbs")\n+        save_request_and_response_for_docs("expansion_expanded", response)\n \n     def test_documentation_expansion_expanded_full(self):\n         response = self.api_session.get(\n-            \'/front-page?expand=actions,breadcrumbs,navigation,schema,workflow\'\n+            "/front-page?expand=actions,breadcrumbs,navigation,schema,workflow"\n         )\n-        save_request_and_response_for_docs(\'expansion_expanded_full\', response)\n+        save_request_and_response_for_docs("expansion_expanded_full", response)\n \n     def test_history_get(self):\n-        self.document.setTitle(\'My new title\')\n-        url = \'{}/@history\'.format(self.document.absolute_url())\n+        self.document.setTitle("My new title")\n+        url = "{}/@history".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'history_get\', response)\n+        save_request_and_response_for_docs("history_get", response)\n \n     def test_history_revert(self):\n-        url = \'{}/@history\'.format(self.document.absolute_url())\n-        response = self.api_session.patch(url, json={\'version\': 0})\n-        save_request_and_response_for_docs(\'history_revert\', response)\n+        url = "{}/@history".format(self.document.absolute_url())\n+        response = self.api_session.patch(url, json={"version": 0})\n+        save_request_and_response_for_docs("history_revert", response)\n \n     def test_tusupload_options(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n-        response = self.api_session.options(\'/folder/@tus-upload\')\n-        save_request_and_response_for_docs(\'tusupload_options\', response)\n+        response = self.api_session.options("/folder/@tus-upload")\n+        save_request_and_response_for_docs("tusupload_options", response)\n \n     def test_tusupload_post_head_patch(self):\n         # We create both the POST and PATCH example here, because we need the\n         # temporary id\n \n-        def clean_upload_url(response, _id=\'032803b64ad746b3ab46d9223ea3d90f\'):\n-            pattern = r\'@tus-upload/(\\w+)\'\n-            repl = \'@tus-upload/\' + _id\n+        def clean_upload_url(response, _id="032803b64ad746b3ab46d9223ea3d90f"):\n+            pattern = r"@tus-upload/(\\w+)"\n+            repl = "@tus-upload/" + _id\n \n             # Replaces the dynamic part in the headers with a stable id\n             for target in [response, response.request]:\n@@ -1235,159 +1127,166 @@ def clean_upload_url(response, _id=\'032803b64ad746b3ab46d9223ea3d90f\'):\n \n                 target.url = re.sub(pattern, repl, target.url)\n \n-        def clean_final_url(response, _id=\'document-2016-10-21\'):\n-            url = self.portal.folder.absolute_url() + \'/\' + _id\n-            response.headers[\'Location\'] = url\n+        def clean_final_url(response, _id="document-2016-10-21"):\n+            url = self.portal.folder.absolute_url() + "/" + _id\n+            response.headers["Location"] = url\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Folder", id="folder")\n         transaction.commit()\n \n         # POST create an upload\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n-            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n+        metadata = "filename {},content-type {}".format(\n+            b64encode(UPLOAD_FILENAME).decode("utf-8"),\n+            b64encode(UPLOAD_MIMETYPE).decode("utf-8"),\n         )\n         response = self.api_session.post(\n-            \'/folder/@tus-upload\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            "/folder/@tus-upload",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n \n-        upload_url = response.headers[\'location\']\n+        upload_url = response.headers["location"]\n \n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_post\', response)\n+        save_request_and_response_for_docs("tusupload_post", response)\n \n         # PATCH upload a partial document\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=UPLOAD_DATA[:3]\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=UPLOAD_DATA[:3],\n         )\n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_patch\', response)\n+        save_request_and_response_for_docs("tusupload_patch", response)\n \n         # HEAD ask for much the server has\n-        response = self.api_session.head(\n-            upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\'}\n-        )\n+        response = self.api_session.head(upload_url, headers={"Tus-Resumable": "1.0.0"})\n         clean_upload_url(response)\n-        save_request_and_response_for_docs(\'tusupload_head\', response)\n+        save_request_and_response_for_docs("tusupload_head", response)\n \n         # Finalize the upload\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': response.headers[\'Upload-Offset\']},\n-            data=UPLOAD_DATA[3:]\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": response.headers["Upload-Offset"],\n+            },\n+            data=UPLOAD_DATA[3:],\n         )\n         clean_upload_url(response)\n         clean_final_url(response)\n-        save_request_and_response_for_docs(\n-            \'tusupload_patch_finalized\',\n-            response\n-        )\n+        save_request_and_response_for_docs("tusupload_patch_finalized", response)\n \n     def test_tusreplace_post_patch(self):\n-        self.portal.invokeFactory(\'File\', id=\'myfile\')\n+        self.portal.invokeFactory("File", id="myfile")\n         transaction.commit()\n \n         # POST create an upload\n-        metadata = \'filename {},content-type {}\'.format(\n-            b64encode(UPLOAD_FILENAME).decode(\'utf-8\'),\n-            b64encode(UPLOAD_MIMETYPE).decode(\'utf-8\'),\n+        metadata = "filename {},content-type {}".format(\n+            b64encode(UPLOAD_FILENAME).decode("utf-8"),\n+            b64encode(UPLOAD_MIMETYPE).decode("utf-8"),\n         )\n         response = self.api_session.post(\n-            \'/myfile/@tus-replace\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            "/myfile/@tus-replace",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n-        upload_url = response.headers[\'location\']\n+        upload_url = response.headers["location"]\n         # Replace dynamic uuid with a static one\n-        response.headers[\'location\'] = \'/\'.join(\n-            upload_url.split(\'/\')[:-1] + [\'4e465958b24a46ec8657e6f3be720991\'])\n-        save_request_and_response_for_docs(\'tusreplace_post\', response)\n+        response.headers["location"] = "/".join(\n+            upload_url.split("/")[:-1] + ["4e465958b24a46ec8657e6f3be720991"]\n+        )\n+        save_request_and_response_for_docs("tusreplace_post", response)\n \n         # PATCH upload file data\n         response = self.api_session.patch(\n             upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n             data=UPLOAD_DATA,\n         )\n         # Replace dynamic uuid with a static one\n-        response.request.url = \'/\'.join(\n-            upload_url.split(\'/\')[:-1] + [\'4e465958b24a46ec8657e6f3be720991\'])\n-        save_request_and_response_for_docs(\'tusreplace_patch\', response)\n+        response.request.url = "/".join(\n+            upload_url.split("/")[:-1] + ["4e465958b24a46ec8657e6f3be720991"]\n+        )\n+        save_request_and_response_for_docs("tusreplace_patch", response)\n \n     def test_locking_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\'lock\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("lock", response)\n \n     def test_locking_lock_nonstealable_and_timeout(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(\n-            url,\n-            json={\n-                \'stealable\': False,\n-                \'timeout\': 3600,\n-            },\n+            url, json={"stealable": False, "timeout": 3600}\n         )\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\n-            \'lock_nonstealable_timeout\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("lock_nonstealable_timeout", response)\n \n     def test_locking_unlock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        url = \'{}/@unlock\'.format(self.document.absolute_url())\n+        url = "{}/@unlock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        save_request_and_response_for_docs(\'unlock\', response)\n+        save_request_and_response_for_docs("unlock", response)\n \n     def test_locking_refresh_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        url = \'{}/@refresh-lock\'.format(self.document.absolute_url())\n+        url = "{}/@refresh-lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n             b\'"token": "[^"]+"\',\n             b\'"token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\',  # noqa\n-            response.content)\n-        save_request_and_response_for_docs(\'refresh_lock\', response)\n+            response.content,\n+        )\n+        save_request_and_response_for_docs("refresh_lock", response)\n \n     def test_locking_lockinfo(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'lock_get\', response)\n+        save_request_and_response_for_docs("lock_get", response)\n \n     def test_update_with_lock(self):\n-        url = \'{}/@lock\'.format(self.document.absolute_url())\n+        url = "{}/@lock".format(self.document.absolute_url())\n         response = self.api_session.post(url)\n-        token = response.json()[\'token\']\n+        token = response.json()["token"]\n         response = self.api_session.patch(\n             self.document.absolute_url(),\n-            headers={\'Lock-Token\': token},\n-            json={\'title\': \'New Title\'})\n-        response.request.headers[\'Lock-Token\'] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n-        save_request_and_response_for_docs(\'lock_update\', response)\n+            headers={"Lock-Token": token},\n+            json={"title": "New Title"},\n+        )\n+        response.request.headers[\n+            "Lock-Token"\n+        ] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n+        save_request_and_response_for_docs("lock_update", response)\n \n \n class TestDocumentationMessageTranslations(unittest.TestCase):\n@@ -1395,24 +1294,24 @@ class TestDocumentationMessageTranslations(unittest.TestCase):\n     layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Register custom UUID generator to produce stable UUIDs during tests\n         pushGlobalRegistry(getSite())\n-        register_static_uuid_utility(prefix=\'SomeUUID\')\n+        register_static_uuid_utility(prefix="SomeUUID")\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n@@ -1420,27 +1319,27 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def create_document(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n     def tearDown(self):\n@@ -1449,26 +1348,24 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_translate_messages_types(self):\n-        response = self.api_session.get(\'/@types\')\n-        save_request_and_response_for_docs(\n-            \'translated_messages_types\', response)\n+        response = self.api_session.get("/@types")\n+        save_request_and_response_for_docs("translated_messages_types", response)\n \n     def test_translate_messages_types_folder(self):\n-        response = self.api_session.get(\'/@types/Folder\')\n-        save_request_and_response_for_docs(\n-            \'translated_messages_types_folder\', response)\n+        response = self.api_session.get("/@types/Folder")\n+        save_request_and_response_for_docs("translated_messages_types_folder", response)\n \n     def test_translate_messages_object_workflow(self):\n-        response = self.api_session.get(\n-            \'{}/@workflow\'.format(self.document.id))\n+        response = self.api_session.get("{}/@workflow".format(self.document.id))\n         save_request_and_response_for_docs(\n-            \'translated_messages_object_workflow\', response)\n+            "translated_messages_object_workflow", response\n+        )\n \n     def test_translate_messages_object_history(self):\n-        response = self.api_session.get(\n-            \'{}/@history\'.format(self.document.id))\n+        response = self.api_session.get("{}/@history".format(self.document.id))\n         save_request_and_response_for_docs(\n-            \'translated_messages_object_history\', response)\n+            "translated_messages_object_history", response\n+        )\n \n \n class TestCommenting(unittest.TestCase):\n@@ -1476,9 +1373,9 @@ class TestCommenting(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n@@ -1491,18 +1388,17 @@ def setUp(self):\n         settings.delete_own_comment_enabled = True\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document_with_comments()\n \n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def tearDown(self):\n@@ -1510,47 +1406,48 @@ def tearDown(self):\n         self.api_session.close()\n \n     def create_document_with_comments(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        document = self.portal[\'front-page\']\n+        self.portal.invokeFactory("Document", id="front-page")\n+        document = self.portal["front-page"]\n         document.allow_discussion = True\n         document.title = u"Welcome to Plone"\n-        document.description = \\\n+        document.description = (\n             u"Congratulations! You have successfully installed Plone."\n+        )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were " +\n-            u"expecting, the owner of this web site has just installed " +\n-            u"Plone. Do not contact the Plone Team or the Plone mailing " +\n-            u"lists about this.",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        document.creation_date = DateTime(\'2016-01-21T01:14:48+00:00\')\n+            u"If you\'re seeing this instead of the web site you were "\n+            + u"expecting, the owner of this web site has just installed "\n+            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n+            + u"lists about this.",\n+            "text/plain",\n+            "text/html",\n+        )\n+        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n         document.reindexObject()\n-        document.modification_date = DateTime(\'2016-01-21T01:24:11+00:00\')\n+        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n \n         # Add a bunch of comments to the default conversation so we can do\n         # batching\n         self.conversation = conversation = IConversation(document)\n         self.replies = replies = IReplies(conversation)\n         for x in range(1, 2):\n-            comment = createObject(\'plone.Comment\')\n-            comment.text = \'Comment %d\' % x\n+            comment = createObject("plone.Comment")\n+            comment.text = "Comment %d" % x\n             comment = replies[replies.addComment(comment)]\n \n             comment_replies = IReplies(comment)\n             for y in range(1, 2):\n-                comment = createObject(\'plone.Comment\')\n-                comment.text = \'Comment %d.%d\' % (x, y)\n+                comment = createObject("plone.Comment")\n+                comment.text = "Comment %d.%d" % (x, y)\n                 comment_replies.addComment(comment)\n         self.comment_id, self.comment = list(replies.items())[0]\n \n         return document\n \n     @staticmethod\n-    def clean_comment_id(response, _id=\'123456\'):\n-        pattern = r\'@comments/(\\w+)\'\n-        pattern_bytes = b\'@comments/(\\\\w+)\'\n-        repl = \'@comments/\' + _id\n+    def clean_comment_id(response, _id="123456"):\n+        pattern = r"@comments/(\\w+)"\n+        pattern_bytes = b"@comments/(\\\\w+)"\n+        repl = "@comments/" + _id\n \n         # Replaces the dynamic part in the headers with a stable id\n         for target in [response, response.request]:\n@@ -1561,136 +1458,106 @@ def clean_comment_id(response, _id=\'123456\'):\n \n         # and the body\n         if response.request.body:\n-            response.request.body = re.sub(\n-                pattern_bytes, repl, response.request.body\n-            )\n+            response.request.body = re.sub(pattern_bytes, repl, response.request.body)\n \n         # and the response\n         if response.content:\n             response._content = re.sub(pattern_bytes, repl, response._content)\n \n     def test_comments_get(self):\n-        url = \'{}/@comments\'.format(self.document.absolute_url())\n+        url = "{}/@comments".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'comments_get\', response)\n+        save_request_and_response_for_docs("comments_get", response)\n \n     def test_comments_add_root(self):\n-        url = \'{}/@comments/\'.format(\n-            self.document.absolute_url()\n-        )\n-        payload = {\'text\': \'My comment\'}\n+        url = "{}/@comments/".format(self.document.absolute_url())\n+        payload = {"text": "My comment"}\n         response = self.api_session.post(url, json=payload)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_add_root\', response\n-        )\n+        save_request_and_response_for_docs("comments_add_root", response)\n \n     def test_comments_add_sub(self):\n         # Add a reply\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n-        payload = {\'text\': \'My reply\'}\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        payload = {"text": "My reply"}\n         response = self.api_session.post(url, json=payload)\n \n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_add_sub\', response\n-        )\n+        save_request_and_response_for_docs("comments_add_sub", response)\n \n     def test_comments_update(self):\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n-        payload = {\'text\': \'My NEW comment\'}\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        payload = {"text": "My NEW comment"}\n         response = self.api_session.patch(url, json=payload)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_update\', response\n-        )\n+        save_request_and_response_for_docs("comments_update", response)\n \n     def test_comments_delete(self):\n-        url = \'{}/@comments/{}\'.format(\n-            self.document.absolute_url(),\n-            self.comment_id\n-        )\n+        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n         response = self.api_session.delete(url)\n         self.clean_comment_id(response)\n-        save_request_and_response_for_docs(\n-            \'comments_delete\', response\n-        )\n+        save_request_and_response_for_docs("comments_delete", response)\n \n     def test_roles_get(self):\n-        url = \'{}/@roles\'.format(self.portal_url)\n+        url = "{}/@roles".format(self.portal_url)\n         response = self.api_session.get(url)\n-        save_request_and_response_for_docs(\'roles\', response)\n+        save_request_and_response_for_docs("roles", response)\n \n     def test_documentation_expansion(self):\n-        response = self.api_session.get(\n-            \'/front-page?expand=breadcrumbs,workflow\'\n-        )\n-        save_request_and_response_for_docs(\'expansion\', response)\n+        response = self.api_session.get("/front-page?expand=breadcrumbs,workflow")\n+        save_request_and_response_for_docs("expansion", response)\n \n-    @unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n     def test_controlpanels_get_listing(self):\n-        response = self.api_session.get(\n-            \'/@controlpanels\'\n-        )\n-        save_request_and_response_for_docs(\'controlpanels_get\', response)\n+        response = self.api_session.get("/@controlpanels")\n+        save_request_and_response_for_docs("controlpanels_get", response)\n \n-    @unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n     def test_controlpanels_get_item(self):\n-        response = self.api_session.get(\n-            \'/@controlpanels/editing\'\n-        )\n-        save_request_and_response_for_docs(\'controlpanels_get_item\', response)\n+        response = self.api_session.get("/@controlpanels/editing")\n+        save_request_and_response_for_docs("controlpanels_get_item", response)\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestPAMDocumentation(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.time_freezer = freeze_time("2016-10-21 19:00:00")\n         self.frozen_time = self.time_freezer.start()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        language_tool = api.portal.get_tool(\'portal_languages\')\n-        language_tool.addSupportedLanguage(\'en\')\n-        language_tool.addSupportedLanguage(\'es\')\n-        applyProfile(self.portal, \'plone.app.multilingual:default\')\n-        en_id = self.portal[\'en\'].invokeFactory(\n-            \'Document\',\n-            id=\'test-document\',\n-            title=\'Test document\'\n+        language_tool = api.portal.get_tool("portal_languages")\n+        language_tool.addSupportedLanguage("en")\n+        language_tool.addSupportedLanguage("es")\n+        applyProfile(self.portal, "plone.app.multilingual:default")\n+        en_id = self.portal["en"].invokeFactory(\n+            "Document", id="test-document", title="Test document"\n         )\n-        self.en_content = self.portal[\'en\'].get(en_id)\n-        es_id = self.portal[\'es\'].invokeFactory(\n-            \'Document\',\n-            id=\'test-document\',\n-            title=\'Test document\'\n+        self.en_content = self.portal["en"].get(en_id)\n+        es_id = self.portal["es"].invokeFactory(\n+            "Document", id="test-document", title="Test document"\n         )\n-        self.es_content = self.portal[\'es\'].get(es_id)\n+        self.es_content = self.portal["es"].get(es_id)\n \n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n     def tearDown(self):\n@@ -1699,29 +1566,25 @@ def tearDown(self):\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            json={\n-                \'id\': self.es_content.absolute_url()\n-            }\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.absolute_url()},\n         )\n-        save_request_and_response_for_docs(\'translations_post\', response)\n+        save_request_and_response_for_docs("translations_post", response)\n \n     def test_documentation_translations_get(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.get(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()))\n+            "{}/@translations".format(self.en_content.absolute_url())\n+        )\n \n-        save_request_and_response_for_docs(\'translations_get\', response)\n+        save_request_and_response_for_docs("translations_get", response)\n \n     def test_documentation_translations_delete(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            json={\n-                "language": "es"\n-            })\n-        save_request_and_response_for_docs(\'translations_delete\', response)\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"language": "es"},\n+        )\n+        save_request_and_response_for_docs("translations_delete", response)\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex b8def61d..223dbfdc 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -24,133 +24,128 @@ class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_textline_field=u\'Test Document\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_textline_field=u"Test Document",\n+            test_readonly_field=u"readonly",\n+        )\n \n         # ordering setup\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder1\', title=\'Test folder\'\n-        )]\n+        self.folder = self.portal[\n+            self.portal.invokeFactory("Folder", id="folder1", title="Test folder")\n+        ]\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "Document", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal.doc1\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n-            self.deserialize(body=\'Not a JSON object\')\n-        self.assertEqual(\'No JSON object could be decoded\', cm.exception.msg)\n+            self.deserialize(body="Not a JSON object")\n+        self.assertEqual("No JSON object could be decoded", cm.exception.msg)\n \n     def test_deserializer_raises_with_malformed_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n-            self.deserialize(body=\'[1,2,3]\')\n-        self.assertEqual(\'Malformed body\', cm.exception.msg)\n+            self.deserialize(body="[1,2,3]")\n+        self.assertEqual("Malformed body", cm.exception.msg)\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEqual(u\'My Item\', self.portal.doc1.test_textline_field)\n+        self.assertEqual(u"My Item", self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEqual(u\'readonly\', self.portal.doc1.test_readonly_field)\n+        self.assertEqual(u"readonly", self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n             obj._handler_called = True\n-        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n+\n+        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertTrue(getattr(self.portal.doc1, \'_handler_called\', False),\n-                        \'IObjectEditedEvent not notified\')\n+        self.assertTrue(\n+            getattr(self.portal.doc1, "_handler_called", False),\n+            "IObjectEditedEvent not notified",\n+        )\n \n     def test_deserializer_modified_event_contains_descriptions(self):\n         def handler(obj, event):\n             self.event = event\n-        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent,))\n+\n+        provideHandler(handler, (IDexterityItem, IObjectModifiedEvent))\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n         self.assertEqual(1, len(self.event.descriptions))\n         self.assertEqual(\n-            (\'IDXTestDocumentSchema.test_textline_field\',),\n-            self.event.descriptions[0].attributes)\n+            ("IDXTestDocumentSchema.test_textline_field",),\n+            self.event.descriptions[0].attributes,\n+        )\n \n     def test_deserializer_does_not_update_field_without_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n-        setRoles(self.portal,\n-                 TEST_USER_ID, [\'Member\', \'Contributor\', \'Editor\'])\n+        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor", "Editor"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n         self.assertEqual(\n-            u\'Test Write Permission\',\n-            self.portal.doc1.test_write_permission_field\n+            u"Test Write Permission", self.portal.doc1.test_write_permission_field\n         )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u\'Test Write Permission\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n+        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(\n-            u\'Foo\',\n-            self.portal.doc1.test_write_permission_field\n-        )\n+        self.assertEqual(u"Foo", self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_invariant_field1": "Foo",\'\n-                                  \' "test_invariant_field2": "Bar"}\')\n+            self.deserialize(\n+                body=\'{"test_invariant_field1": "Foo",\'\n+                \' "test_invariant_field2": "Bar"}\'\n+            )\n         self.assertEqual(\n-            u\'Must have same values\',\n-            str(cm.exception.args[0][0][\'message\'])\n+            u"Must have same values", str(cm.exception.args[0][0]["message"])\n         )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEqual(u\'My Value\', self.portal.doc1.test_behavior_field)\n+        self.assertEqual(u"My Value", self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n-        self.deserialize(\n-            body=\'{"test_annotations_behavior_field": "My Value"}\')\n+        self.deserialize(body=\'{"test_annotations_behavior_field": "My Value"}\')\n         self.assertEqual(\n-            u\'My Value\',\n-            ITestAnnotationsBehavior(self.portal.doc1)\n-            .test_annotations_behavior_field)\n+            u"My Value",\n+            ITestAnnotationsBehavior(self.portal.doc1).test_annotations_behavior_field,\n+        )\n \n     def test_deserializer_raises_if_required_value_is_missing(self):\n         # Value missing from request\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_textline_field": "My Value"}\',\n-                             validate_all=True)\n+            self.deserialize(\n+                body=\'{"test_textline_field": "My Value"}\', validate_all=True\n+            )\n         self.assertEqual(\n-            u\'Required input is missing.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(body=\'{"test_textline_field": ""}\',\n-                             validate_all=True)\n+            self.deserialize(body=\'{"test_textline_field": ""}\', validate_all=True)\n         self.assertEqual(\n-            u\'Required input is missing.\',\n-            cm.exception.args[0][0][\'message\']\n+            u"Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n-        self.deserialize(body=\'{"test_required_field": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(u\'My Value\', self.portal.doc1.test_required_field)\n+        self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"My Value", self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -163,56 +158,45 @@ def test_deserializer_does_not_store_default_value(self):\n         # Right now, we want to have the same behavior in the API for\n         # consistency reasons.\n         self.deserialize(body=\'{"test_default_value_field": "Default"}\')\n-        self.assertNotIn(\'test_default_value_field\', dir(self.portal.doc1),\n-                         \'Default value unexpectedly stored.\')\n+        self.assertNotIn(\n+            "test_default_value_field",\n+            dir(self.portal.doc1),\n+            "Default value unexpectedly stored.",\n+        )\n \n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n-        self.deserialize(body=\'{"test_required_field": "My Value"}\',\n-                         validate_all=True)\n-        self.assertEqual(\n-            u\'Default\',\n-            self.portal.doc1.test_default_value_field\n-        )\n-        self.assertEqual(\n-            u\'DefaultFactory\',\n-            self.portal.doc1.test_default_factory_field\n-        )\n+        self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n+        self.assertEqual(u"Default", self.portal.doc1.test_default_value_field)\n+        self.assertEqual(u"DefaultFactory", self.portal.doc1.test_default_factory_field)\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEqual(\n-            u\'missing\',\n-            self.portal.doc1.test_missing_value_field\n-        )\n+        self.assertEqual(u"missing", self.portal.doc1.test_missing_value_field)\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n-        \'\'\'We don\'t set missing_value if the field is required\'\'\'\n-        self.deserialize(\n-            body=\'{"test_missing_value_required_field": "valid value"}\')\n+        """We don\'t set missing_value if the field is required"""\n+        self.deserialize(body=\'{"test_missing_value_required_field": "valid value"}\')\n         with self.assertRaises(BadRequest) as cm:\n-            self.deserialize(\n-                body=\'{"test_missing_value_required_field": null}\')\n+            self.deserialize(body=\'{"test_missing_value_required_field": null}\')\n         self.assertEqual(\n-            u\'valid value\',\n-            self.portal.doc1.test_missing_value_required_field\n+            u"valid value", self.portal.doc1.test_missing_value_required_field\n         )\n         self.assertEqual(\n             (\n-                \'test_missing_value_required_field is a required field.\',\n-                \'Setting it to null is not allowed.\'\n+                "test_missing_value_required_field is a required field.",\n+                "Setting it to null is not allowed.",\n             ),\n-            cm.exception.args[0][0][\'message\']\n+            cm.exception.args[0][0]["message"],\n         )\n         self.assertEqual(\n-            u\'test_missing_value_required_field\',\n-            cm.exception.args[0][0][\'field\']\n+            u"test_missing_value_required_field", cm.exception.args[0][0]["field"]\n         )\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n+        self.assertEqual("my_new_layout", self.portal.doc1.getLayout())\n \n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n@@ -220,45 +204,45 @@ class TestDXContentSerializerDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_textline_field=u\'Test Document\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_textline_field=u"Test Document",\n+            test_readonly_field=u"readonly",\n+        )\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc2\',\n-            test_textline_field=u\'Test Document 2\',\n-            test_readonly_field=u\'readonly\')\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_textline_field=u"Test Document 2",\n+            test_readonly_field=u"readonly",\n+        )\n \n     def deserialize(self, field, value, validate_all=False, context=None):\n         context = context or self.portal.doc1\n         body = {}\n         body[field] = value\n         body = json.dumps(body)\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def serialize(self, field):\n-        serializer = getMultiAdapter((self.portal.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n         value = six.text_type(self.portal.doc2.UID())\n-        self.deserialize(\'test_relationchoice_field\', value)\n+        self.deserialize("test_relationchoice_field", value)\n \n-        serialization_value = self.serialize(\'test_relationchoice_field\')\n+        serialization_value = self.serialize("test_relationchoice_field")\n \n-        self.deserialize(\'test_relationchoice_field\', serialization_value)\n+        self.deserialize("test_relationchoice_field", serialization_value)\n \n         self.assertEqual(\n-            serialization_value[\'@id\'],\n-            self.portal.doc1.test_relationchoice_field.to_object.absolute_url()\n+            serialization_value["@id"],\n+            self.portal.doc1.test_relationchoice_field.to_object.absolute_url(),\n         )\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 7f393977..7382ba83 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -30,6 +30,7 @@\n class AdapterCM(object):\n     """Context manager that will temporarily register an adapter\n     """\n+\n     def __init__(self, adapter, from_, provides):\n         self.adapter = adapter\n         self.from_ = from_\n@@ -48,145 +49,140 @@ class TestDXContentSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        richtext_value = RichTextValue(\n-            u\'K\xc3\xa4fer\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        richtext_value = RichTextValue(u"K\xc3\xa4fer", "text/plain", "text/html")\n \n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=u\'doc1\',\n-            test_ascii_field=\'foo\',\n-            test_asciiline_field=\'foo\',\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_ascii_field="foo",\n+            test_asciiline_field="foo",\n             test_bool_field=True,\n-            test_bytes_field=\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\',\n-            test_bytesline_field=\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\',\n-            test_choice_field=u\'foo\',\n+            test_bytes_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n+            test_bytesline_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n+            test_choice_field=u"foo",\n             test_date_field=date(2015, 7, 15),\n             test_datetime_field=datetime(2015, 6, 20, 13, 22, 4),\n-            test_decimal_field=\'1.1\',\n-            test_dict_field={\'foo\': \'bar\', \'spam\': \'eggs\', \'1\': 1},\n+            test_decimal_field="1.1",\n+            test_dict_field={"foo": "bar", "spam": "eggs", "1": 1},\n             test_float_field=1.5,\n             test_frozenset_field=frozenset([1, 2, 3]),\n             test_int_field=500,\n-            test_list_field=[1, \'two\', 3],\n-            test_set_field=set([\'a\', \'b\', \'c\']),\n-            test_text_field=u\'K\xc3\xa4fer\',\n+            test_list_field=[1, "two", 3],\n+            test_set_field=set(["a", "b", "c"]),\n+            test_text_field=u"K\xc3\xa4fer",\n             test_richtext_field=richtext_value,\n-            test_textline_field=u\'K\xc3\xa4fer\',\n+            test_textline_field=u"K\xc3\xa4fer",\n             test_time_field=time(14, 15, 33),\n             test_timedelta_field=timedelta(44),\n             test_tuple_field=(1, 1),\n-            test_readonly_field=u\'readonly\',\n-            test_read_permission_field=u\'Secret Stuff\')\n+            test_readonly_field=u"readonly",\n+            test_read_permission_field=u"Secret Stuff",\n+        )\n \n-        self.portal.doc1.creation_date = DateTime(\'2015-04-27T10:14:48+00:00\')\n-        self.portal.doc1.modification_date = DateTime(\n-            \'2015-04-27T10:24:11+00:00\')\n-        IMutableUUID(self.portal.doc1).set(\'30314724b77a4ec0abbad03d262837aa\')\n+        self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n+        self.portal.doc1.modification_date = DateTime("2015-04-27T10:24:11+00:00")\n+        IMutableUUID(self.portal.doc1).set("30314724b77a4ec0abbad03d262837aa")\n \n     def serialize(self):\n-        serializer = getMultiAdapter((self.portal.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize()\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n-    @unittest.skip(\'We do not include the context at this point\')\n+    @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@context\', obj)\n-        self.assertEqual(u\'http://www.w3.org/ns/hydra/context.jsonld\',\n-                         obj[u\'@context\'])\n+        self.assertIn(u"@context", obj)\n+        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@id\', obj)\n-        self.assertEqual(self.portal.doc1.absolute_url(), obj[u\'@id\'])\n+        self.assertIn(u"@id", obj)\n+        self.assertEqual(self.portal.doc1.absolute_url(), obj[u"@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize()\n-        self.assertIn(u\'id\', obj)\n-        self.assertEqual(self.portal.doc1.id, obj[u\'id\'])\n+        self.assertIn(u"id", obj)\n+        self.assertEqual(self.portal.doc1.id, obj[u"id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize()\n-        self.assertIn(u\'@type\', obj)\n-        self.assertEqual(self.portal.doc1.portal_type, obj[u\'@type\'])\n+        self.assertIn(u"@type", obj)\n+        self.assertEqual(self.portal.doc1.portal_type, obj[u"@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize()\n-        self.assertIn(u\'review_state\', obj)\n-        self.assertEqual(u\'private\', obj[u\'review_state\'])\n+        self.assertIn(u"review_state", obj)\n+        self.assertEqual(u"private", obj[u"review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize()\n-        self.assertIn(u\'UID\', obj)\n-        self.assertEqual(u\'30314724b77a4ec0abbad03d262837aa\', obj[u\'UID\'])\n+        self.assertIn(u"UID", obj)\n+        self.assertEqual(u"30314724b77a4ec0abbad03d262837aa", obj[u"UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize()\n-        self.assertIn(u\'created\', obj)\n-        self.assertEqual(u\'2015-04-27T10:14:48+00:00\', obj[u\'created\'])\n+        self.assertIn(u"created", obj)\n+        self.assertEqual(u"2015-04-27T10:14:48+00:00", obj[u"created"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize()\n-        self.assertIn(u\'modified\', obj)\n-        self.assertEqual(u\'2015-04-27T10:24:11+00:00\', obj[u\'modified\'])\n+        self.assertIn(u"modified", obj)\n+        self.assertEqual(u"2015-04-27T10:24:11+00:00", obj[u"modified"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.portal.doc1.test_read_permission_field = u\'Secret Stuff\'\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.assertNotIn(u\'test_read_permission_field\', self.serialize())\n+        self.portal.doc1.test_read_permission_field = u"Secret Stuff"\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.assertNotIn(u"test_read_permission_field", self.serialize())\n \n     def test_serializer_includes_field_with_read_permission(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         obj = self.serialize()\n-        self.assertIn(u\'test_read_permission_field\', obj)\n-        self.assertEqual(u\'Secret Stuff\', obj[u\'test_read_permission_field\'])\n+        self.assertIn(u"test_read_permission_field", obj)\n+        self.assertEqual(u"Secret Stuff", obj[u"test_read_permission_field"])\n \n     def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n         obj = self.serialize()\n-        self.assertIn(\'layout\', obj)\n-        self.assertEqual(current_layout, obj[\'layout\'])\n+        self.assertIn("layout", obj)\n+        self.assertEqual(current_layout, obj["layout"])\n \n     def test_serializer_includes_expansion(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         obj = self.serialize()\n-        self.assertIn(\'foo\', obj[\'@components\'])\n-        self.assertEqual(\'collapsed\', obj[\'@components\'][\'foo\'])\n+        self.assertIn("foo", obj["@components"])\n+        self.assertEqual("collapsed", obj["@components"]["foo"])\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(False, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(False, obj["is_folderish"])\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory(\'Folder\', id=u\'folder\')\n-        serializer = getMultiAdapter((self.portal.folder, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Folder", id=u"folder")\n+        serializer = getMultiAdapter(\n+            (self.portal.folder, self.request), ISerializeToJson\n+        )\n         obj = serializer()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\n \n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n@@ -199,159 +195,157 @@ class RichtextTransform(object):\n             """RichttextValue to show that the context is correctly passed\n                in throughout the stack.\n             """\n+\n             def __init__(self, context):\n                 self.context = context\n \n             def __call__(self, value, mime_type):\n                 return self.context.portal_type\n \n-        with AdapterCM(RichtextTransform, (Interface, ), ITransformer):\n+        with AdapterCM(RichtextTransform, (Interface,), ITransformer):\n             obj = self.serialize()\n \n         self.assertEqual(\n-            obj[\'test_richtext_field\'][\'data\'],\n-            self.portal.doc1.portal_type\n+            obj["test_richtext_field"]["data"], self.portal.doc1.portal_type\n         )\n \n     def test_allow_discussion_by_default(self):\n         """ Not globally addable, not fti enabled, not obj instance enabled """\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        self.portal.invokeFactory("Document", id=u"doc2")\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         self.portal.doc2.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n         self.portal.doc2.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n         self.portal.doc2.allow_discussion = False\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(self): # noqa\n-        self.portal.invokeFactory(\'Document\', id=u\'doc2\')\n+    def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = False\n         self.portal.doc2.allow_discussion = True\n \n-        serializer = getMultiAdapter((self.portal.doc2, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(True, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(True, obj["allow_discussion"])\n \n-    def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(self): # noqa\n+    def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(\n+        self\n+    ):  # noqa\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n \n         obj = self.serialize()\n-        self.assertIn(\'allow_discussion\', obj)\n-        self.assertEqual(False, obj[\'allow_discussion\'])\n+        self.assertIn("allow_discussion", obj)\n+        self.assertEqual(False, obj["allow_discussion"])\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex d493b6a4..29740455 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -25,6 +25,7 @@\n class RequiredField(object):\n     """Context manager that will make a field required and back to old state.\n     """\n+\n     def __init__(self, field):\n         self.field = field\n         self.old_state = field.required\n@@ -41,488 +42,520 @@ class TestDXFieldDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\', title=\'Test Document\')\n+        self.portal.invokeFactory("DXTestDocument", id="doc1", title="Test Document")\n \n     def deserialize(self, fieldname, value):\n         for schema in iterSchemata(self.portal.doc1):\n             if fieldname in schema:\n                 field = schema.get(fieldname)\n                 break\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n         return deserializer(value)\n \n     def test_ascii_deserialization_returns_native_string(self):\n-        value = self.deserialize(\'test_ascii_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        value = self.deserialize("test_ascii_field", u"Foo")\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Foo", value)\n \n     def test_asciiline_deserialization_returns_native_string(self):\n-        value = self.deserialize(\'test_asciiline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, str), \'Not a <str>\')\n-        self.assertEqual(\'Foo\', value)\n+        value = self.deserialize("test_asciiline_field", u"Foo")\n+        self.assertTrue(isinstance(value, str), "Not a <str>")\n+        self.assertEqual("Foo", value)\n \n     def test_bool_deserialization_returns_true(self):\n-        value = self.deserialize(\'test_bool_field\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.deserialize("test_bool_field", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_bool_deserialization_returns_false(self):\n-        value = self.deserialize(\'test_bool_field\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.deserialize("test_bool_field", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_bytes_deserialization_returns_bytestring(self):\n-        value = self.deserialize(\'test_bytes_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n-        self.assertEqual(b\'Foo\', value)\n+        value = self.deserialize("test_bytes_field", u"Foo")\n+        self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n+        self.assertEqual(b"Foo", value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n-        value = self.deserialize(\'test_bytesline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, bytes), \'Not a <bytes>\')\n-        self.assertEqual(b\'Foo\', value)\n+        value = self.deserialize("test_bytesline_field", u"Foo")\n+        self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n+        self.assertEqual(b"Foo", value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n-        value = self.deserialize(\'test_choice_field\', u\'bar\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'bar\', value)\n+        value = self.deserialize("test_choice_field", u"bar")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"bar", value)\n \n     def test_choice_deserialization_from_token_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 u\'token1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", u"token1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 u\'value1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", u"value1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n-        value = self.deserialize(\'test_choice_field_with_vocabulary\',\n-                                 {u\'token\': u\'token1\', u\'title\': u\'title1\'})\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'value1\', value)\n+        value = self.deserialize(\n+            "test_choice_field_with_vocabulary",\n+            {u"token": u"token1", u"title": u"title1"},\n+        )\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"value1", value)\n \n     def test_date_deserialization_returns_date(self):\n-        value = self.deserialize(\'test_date_field\', u\'2015-12-20\')\n+        value = self.deserialize("test_date_field", u"2015-12-20")\n         self.assertTrue(isinstance(value, date))\n         self.assertEqual(date(2015, 12, 20), value)\n \n     def test_datetime_deserialization_returns_datetime(self):\n-        value = self.deserialize(\'test_datetime_field\',\n-                                 u\'2015-12-20T10:39:54.361Z\')\n-        self.assertTrue(isinstance(value, datetime), \'Not a <datetime>\')\n+        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361Z")\n+        self.assertTrue(isinstance(value, datetime), "Not a <datetime>")\n         self.assertEqual(datetime(2015, 12, 20, 10, 39, 54, 361000), value)\n \n     def test_datetime_deserialization_handles_timezone(self):\n-        value = self.deserialize(\'test_datetime_field\',\n-                                 u\'2015-12-20T10:39:54.361+01\')\n+        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361+01")\n         self.assertEqual(datetime(2015, 12, 20, 9, 39, 54, 361000), value)\n \n     def test_datetime_with_tz_deserialization_keeps_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361+01\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 10, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-12-20T10:39:54.361+01"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 10, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_converts_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361-04\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 15, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-12-20T10:39:54.361-04"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 15, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_adds_timezone(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-12-20T10:39:54.361\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 12, 20, 11, 39, 54, 361000)), value)\n+        value = self.deserialize("test_datetime_tz_field", u"2015-12-20T10:39:54.361")\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 12, 20, 11, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_with_tz_deserialization_handles_dst(self):\n-        value = self.deserialize(\'test_datetime_tz_field\',\n-                                 u\'2015-05-20T10:39:54.361+02\')\n-        self.assertEqual(timezone("Europe/Zurich").localize(\n-            datetime(2015, 5, 20, 10, 39, 54, 361000)), value)\n+        value = self.deserialize(\n+            "test_datetime_tz_field", u"2015-05-20T10:39:54.361+02"\n+        )\n+        self.assertEqual(\n+            timezone("Europe/Zurich").localize(\n+                datetime(2015, 5, 20, 10, 39, 54, 361000)\n+            ),\n+            value,\n+        )\n \n     def test_datetime_deserialization_none(self):\n         # Make sure we don\'t construct a datetime out of nothing\n-        value = self.deserialize(\'test_datetime_field\', None)\n+        value = self.deserialize("test_datetime_field", None)\n         self.assertEqual(value, None)\n \n     def test_datetime_deserialization_required(self):\n-        field_name = \'test_datetime_field\'\n+        field_name = "test_datetime_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_decimal_deserialization_returns_decimal(self):\n-        value = self.deserialize(\'test_decimal_field\', u\'1.1\')\n-        self.assertTrue(isinstance(value, Decimal), \'Not a <Decimal>\')\n-        self.assertEqual(Decimal(\'1.1\'), value)\n+        value = self.deserialize("test_decimal_field", u"1.1")\n+        self.assertTrue(isinstance(value, Decimal), "Not a <Decimal>")\n+        self.assertEqual(Decimal("1.1"), value)\n \n     def test_dict_deserialization_returns_dict(self):\n-        value = self.deserialize(\'test_dict_field\', {u\'key\': u\'value\'})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({u\'key\': u\'value\'}, value)\n+        value = self.deserialize("test_dict_field", {u"key": u"value"})\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual({u"key": u"value"}, value)\n \n     def test_float_deserialization_returns_float(self):\n-        value = self.deserialize(\'test_float_field\', 1.0)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.deserialize("test_float_field", 1.0)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.0, value)\n \n     def test_frozenset_deserialization_returns_frozenset(self):\n-        value = self.deserialize(\'test_frozenset_field\', [u\'foo\', u\'bar\'])\n-        self.assertTrue(isinstance(value, frozenset), \'Not a <frozenset>\')\n-        self.assertEqual(frozenset([u\'foo\', u\'bar\']), value)\n+        value = self.deserialize("test_frozenset_field", [u"foo", u"bar"])\n+        self.assertTrue(isinstance(value, frozenset), "Not a <frozenset>")\n+        self.assertEqual(frozenset([u"foo", u"bar"]), value)\n \n     def test_int_deserialization_returns_int(self):\n-        value = self.deserialize(\'test_int_field\', 22)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.deserialize("test_int_field", 22)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(22, value)\n \n     def test_list_deserialization_returns_list(self):\n-        value = self.deserialize(\'test_list_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.deserialize("test_list_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual([1, 2, 3], value)\n \n     def test_list_deserialization_from_tokens_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [u\'token1\', u\'token3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"token1", u"token3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_list_deserialization_from_values_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [u\'value1\', u\'value3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_list_deserialization_from_terms_returns_list_of_values(self):\n-        value = self.deserialize(\'test_list_field_with_choice_with_vocabulary\',\n-                                 [{u\'token\': u\'token1\', u\'title\': u\'title1\'},\n-                                  {u\'token\': u\'token3\', u\'title\': u\'title3\'}])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'value1\', u\'value3\'], value)\n+        value = self.deserialize(\n+            "test_list_field_with_choice_with_vocabulary",\n+            [\n+                {u"token": u"token1", u"title": u"title1"},\n+                {u"token": u"token3", u"title": u"title3"},\n+            ],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"value1", u"value3"], value)\n \n     def test_set_deserialization_returns_set(self):\n-        value = self.deserialize(\'test_set_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, set), \'Not a <set>\')\n+        value = self.deserialize("test_set_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, set), "Not a <set>")\n         self.assertEqual(set([1, 2, 3]), value)\n \n     def test_text_deserialization_returns_unicode(self):\n-        value = self.deserialize(\'test_text_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'Foo\', value)\n+        value = self.deserialize("test_text_field", u"Foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"Foo", value)\n \n     def test_textline_deserialization_returns_unicode(self):\n-        value = self.deserialize(\'test_textline_field\', u\'Foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'Foo\', value)\n+        value = self.deserialize("test_textline_field", u"Foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"Foo", value)\n \n     def test_time_deserialization_returns_time(self):\n-        value = self.deserialize(\'test_time_field\', u\'10:39:54.361Z\')\n-        self.assertTrue(isinstance(value, time), \'Not a <time>\')\n+        value = self.deserialize("test_time_field", u"10:39:54.361Z")\n+        self.assertTrue(isinstance(value, time), "Not a <time>")\n         self.assertEqual(time(10, 39, 54, 361000), value)\n \n     def test_timedelta_deserialization_returns_timedela(self):\n-        value = self.deserialize(\'test_timedelta_field\', 3600.0)\n-        self.assertTrue(isinstance(value, timedelta), \'Not a <timedelta>\')\n+        value = self.deserialize("test_timedelta_field", 3600.0)\n+        self.assertTrue(isinstance(value, timedelta), "Not a <timedelta>")\n         self.assertEqual(timedelta(seconds=3600), value)\n \n     def test_tuple_deserialization_returns_tuple(self):\n-        value = self.deserialize(\'test_tuple_field\', [1, 2, 3])\n-        self.assertTrue(isinstance(value, tuple), \'Not a <tuple>\')\n+        value = self.deserialize("test_tuple_field", [1, 2, 3])\n+        self.assertTrue(isinstance(value, tuple), "Not a <tuple>")\n         self.assertEqual((1, 2, 3), value)\n \n     def test_nested_list_deserialization_returns_nested_list(self):\n-        value = self.deserialize(\'test_nested_list_field\',\n-                                 [[1, u\'foo\'], [2, u\'bar\']])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertTrue(isinstance(value[0], tuple), \'Not a <tuple>\')\n-        self.assertTrue(isinstance(value[1], tuple), \'Not a <tuple>\')\n+        value = self.deserialize("test_nested_list_field", [[1, u"foo"], [2, u"bar"]])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertTrue(isinstance(value[0], tuple), "Not a <tuple>")\n+        self.assertTrue(isinstance(value[1], tuple), "Not a <tuple>")\n \n     def test_nested_dict_deserialization_returns_nested_dict(self):\n         value = self.deserialize(\n-            \'test_nested_dict_field\',\n-            {u\'1\': [u\'foo\', u\'bar\'], u\'2\': [u\'spam\', u\'eggs\']})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertIn(\'1\', value)\n-        self.assertTrue(isinstance(value[\'1\'], tuple), \'Not a <tuple>\')\n-        self.assertIn(\'2\', value)\n-        self.assertTrue(isinstance(value[\'2\'], tuple), \'Not a <tuple>\')\n+            "test_nested_dict_field", {u"1": [u"foo", u"bar"], u"2": [u"spam", u"eggs"]}\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertIn("1", value)\n+        self.assertTrue(isinstance(value["1"], tuple), "Not a <tuple>")\n+        self.assertIn("2", value)\n+        self.assertTrue(isinstance(value["2"], tuple), "Not a <tuple>")\n \n     def test_richtext_deserialization_from_unicode_returns_richtext(self):\n-        value = self.deserialize(\'test_richtext_field\', u\'<p>a paragraph</p>\')\n-        self.assertTrue(isinstance(value, RichTextValue),\n-                        \'Not a <RichTextValue>\')\n-        self.assertEqual(u\'<p>a paragraph</p>\', value.raw)\n+        value = self.deserialize("test_richtext_field", u"<p>a paragraph</p>")\n+        self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n+        self.assertEqual(u"<p>a paragraph</p>", value.raw)\n \n     def test_richtext_deserialization_from_dict_returns_richtext(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-        })\n-        self.assertTrue(isinstance(value, RichTextValue),\n-                        \'Not a <RichTextValue>\')\n-        self.assertEqual(u\'Some text\', value.raw)\n+        value = self.deserialize("test_richtext_field", {u"data": u"Some text"})\n+        self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n+        self.assertEqual(u"Some text", value.raw)\n \n     def test_richtext_deserialization_sets_mime_type(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n-        self.assertEqual(\'text/plain\', value.mimeType)\n+        value = self.deserialize(\n+            "test_richtext_field",\n+            {u"data": u"Some text", u"content-type": u"text/plain"},\n+        )\n+        self.assertEqual("text/plain", value.mimeType)\n \n     def test_richtext_deserialization_sets_encoding(self):\n-        value = self.deserialize(\'test_richtext_field\', {\n-            u\'data\': u\'Some text\',\n-            u\'encoding\': u\'latin1\',\n-        })\n-        self.assertEqual(\'latin1\', value.encoding)\n+        value = self.deserialize(\n+            "test_richtext_field", {u"data": u"Some text", u"encoding": u"latin1"}\n+        )\n+        self.assertEqual("latin1", value.encoding)\n \n     def test_namedfield_deserialization_decodes_value(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'U3BhbSBhbmQgZWdncyE=\',\n-            u\'encoding\': u\'base64\',\n-        })\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"},\n+        )\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n-        self.assertEqual(\'text/plain\', value.contentType)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+        )\n+        self.assertEqual("text/plain", value.contentType)\n \n     def test_namedfield_deserialization_sets_filename(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-            u\'filename\': u\'doc.txt\',\n-        })\n-        self.assertEqual(\'doc.txt\', value.filename)\n+        value = self.deserialize(\n+            "test_namedfile_field",\n+            {u"data": u"Spam and eggs!", u"filename": u"doc.txt"},\n+        )\n+        self.assertEqual("doc.txt", value.filename)\n \n     def test_namedfile_deserialization_returns_namedfile(self):\n-        value = self.deserialize(\'test_namedfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedFile),\n-                        \'Not a <NamedFile>\')\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize("test_namedfile_field", {u"data": u"Spam and eggs!"})\n+        self.assertTrue(isinstance(value, namedfile.NamedFile), "Not a <NamedFile>")\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedimage_deserialization_returns_namedimage(self):\n-        value = self.deserialize(\'test_namedimage_field\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'content-type\': u\'image/gif\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedImage),\n-                        \'Not a <NamedImage>\')\n-        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n+        value = self.deserialize(\n+            "test_namedimage_field",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"content-type": u"image/gif",\n+            },\n+        )\n+        self.assertTrue(isinstance(value, namedfile.NamedImage), "Not a <NamedImage>")\n+        self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n-        value = self.deserialize(\'test_namedblobfile_field\', {\n-            u\'data\': u\'Spam and eggs!\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedBlobFile),\n-                        \'Not a <NamedBlobFile>\')\n-        self.assertEqual(b\'Spam and eggs!\', value.data)\n+        value = self.deserialize(\n+            "test_namedblobfile_field", {u"data": u"Spam and eggs!"}\n+        )\n+        self.assertTrue(\n+            isinstance(value, namedfile.NamedBlobFile), "Not a <NamedBlobFile>"\n+        )\n+        self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedblobimage_deserialization_returns_namedblobimage(self):\n-        value = self.deserialize(\'test_namedblobimage_field\', {\n-            u\'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-            u\'encoding\': u\'base64\',\n-            u\'content-type\': u\'image/gif\',\n-        })\n-        self.assertTrue(isinstance(value, namedfile.NamedBlobImage),\n-                        \'Not a <NamedBlobImage>\')\n-        self.assertTrue(value.data.startswith(b\'GIF89a\'))\n+        value = self.deserialize(\n+            "test_namedblobimage_field",\n+            {\n+                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                u"encoding": u"base64",\n+                u"content-type": u"image/gif",\n+            },\n+        )\n+        self.assertTrue(\n+            isinstance(value, namedfile.NamedBlobImage), "Not a <NamedBlobImage>"\n+        )\n+        self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobimage_deserialization_fed_with_null_removes_image(self):\n         # null in json translates to None in python.\n-        value = self.deserialize(\'test_namedblobimage_field\', None)\n+        value = self.deserialize("test_namedblobimage_field", None)\n         self.assertFalse(value)\n \n     def test_namedblobfile_deserialization_fed_with_null_removes_file(self):\n         # null in json translates to None in python.\n-        value = self.deserialize(\'test_namedblobfile_field\', None)\n+        value = self.deserialize("test_namedblobfile_field", None)\n         self.assertFalse(value)\n \n     def test_namedblobfile_deserialize_required(self):\n-        field_name = \'test_namedblobfile_field\'\n+        field_name = "test_namedblobfile_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_namedblobimage_deserialize_required(self):\n-        field_name = \'test_namedblobimage_field\'\n+        field_name = "test_namedblobimage_field"\n         field = IDXTestDocumentSchema.get(field_name)\n         with RequiredField(field):\n             with self.assertRaises(RequiredMissing):\n                 self.deserialize(field_name, None)\n \n     def test_relationchoice_deserialization_from_uid_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\',\n-                                 six.text_type(doc2.UID()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize("test_relationchoice_field", six.text_type(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\',\n-                                 six.text_type(doc2.absolute_url()))\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize(\n+            "test_relationchoice_field", six.text_type(doc2.absolute_url())\n+        )\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        value = self.deserialize(\'test_relationchoice_field\', u\'/doc2\')\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        value = self.deserialize("test_relationchoice_field", u"/doc2")\n         self.assertEqual(doc2, value)\n \n     def test_relationlist_deserialization_returns_list_of_documents(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Referenceable Document\')]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Referenceable Document"\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n         value = self.deserialize(\n-            \'test_relationlist_field\',\n-            [six.text_type(doc2.UID()), six.text_type(doc3.UID())])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+            "test_relationlist_field",\n+            [six.text_type(doc2.UID()), six.text_type(doc3.UID())],\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(doc2, value[0])\n         self.assertEqual(doc3, value[1])\n \n     def test_default_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize(\'test_maxlength_field\', u\'01234567890\')\n+            self.deserialize("test_maxlength_field", u"01234567890")\n \n     def test_datetime_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_datetime_field\',\n-                             u\'2015-15-15T10:39:54.361Z\')\n-        self.assertEqual(u\'Invalid date: 2015-15-15T10:39:54.361Z\',\n-                         str(cm.exception))\n+            self.deserialize("test_datetime_field", u"2015-15-15T10:39:54.361Z")\n+        self.assertEqual(u"Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize(\'test_datetime_min_field\',\n-                             u\'1999-12-20T10:39:54.361Z\')\n+            self.deserialize("test_datetime_min_field", u"1999-12-20T10:39:54.361Z")\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_list_value_type_field\', [1, b\'2\', 3])\n+            self.deserialize("test_list_value_type_field", [1, b"2", 3])\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n-        self.assertEqual((b\'2\', six.integer_types, \'\'), cm.exception.args)\n+        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual((b"2", six.integer_types, ""), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_dict_key_type_field\', {\'k\': \'v\'})\n+            self.deserialize("test_dict_key_type_field", {"k": "v"})\n \n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the DictFieldSerializer will delegate\n         # to for deserializing keys and values.\n         # We check for two sets of exception details\n         # because zope.schema changed its exception...\n-        self.assertIn(cm.exception.doc(), (\n-            u\'Object is of wrong type.\',\n-            u\'Invalid int literal.\',\n-        ))\n-        self.assertIn(cm.exception.args, (\n-            (\'k\', six.integer_types, \'\'),\n-            ("invalid literal for int() with base 10: \'k\'",),\n-        ))\n+        self.assertIn(\n+            cm.exception.doc(), (u"Object is of wrong type.", u"Invalid int literal.")\n+        )\n+        self.assertIn(\n+            cm.exception.args,\n+            (\n+                ("k", six.integer_types, ""),\n+                ("invalid literal for int() with base 10: \'k\'",),\n+            ),\n+        )\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_time_field\',\n-                             u\'midnight\')\n-        self.assertEqual(u\'Invalid time: midnight\',\n-                         str(cm.exception))\n+            self.deserialize("test_time_field", u"midnight")\n+        self.assertEqual(u"Invalid time: midnight", str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_time_min_field\', u\'00:39:54.361Z\')\n-        self.assertEqual(u\'Value is too small\',\n-                         cm.exception.doc())\n+            self.deserialize("test_time_min_field", u"00:39:54.361Z")\n+        self.assertEqual(u"Value is too small", cm.exception.doc())\n \n     def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\'test_timedelta_field\',\n-                             u\'2h\')\n+            self.deserialize("test_timedelta_field", u"2h")\n         self.assertIn(\n-            u\'unsupported type for timedelta seconds component:\',\n-            str(cm.exception))\n+            u"unsupported type for timedelta seconds component:", str(cm.exception)\n+        )\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_timedelta_min_field\', 50)\n-        self.assertEqual(u\'Value is too small\',\n-                         cm.exception.doc())\n+            self.deserialize("test_timedelta_min_field", 50)\n+        self.assertEqual(u"Value is too small", cm.exception.doc())\n \n     def test_namedfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_namedimage_field\', {\n-                u\'data\': u\'Spam and eggs!\',\n-                u\'content-type\': u\'text/plain\',\n-            })\n-        self.assertEqual(u\'Invalid image file\', cm.exception.doc())\n+            self.deserialize(\n+                "test_namedimage_field",\n+                {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+            )\n+        self.assertEqual(u"Invalid image file", cm.exception.doc())\n \n     def test_namedfield_deserializer_download(self):\n         # Handle when we post back the GET results.\n         # This then has a \'download\' key, and not a \'data\' key.\n \n-        self.deserialize(\'test_namedfile_field\', {\n-            u\'download\': u\'some download link\',\n-            u\'content-type\': u\'text/plain\',\n-        })\n+        self.deserialize(\n+            "test_namedfile_field",\n+            {u"download": u"some download link", u"content-type": u"text/plain"},\n+        )\n \n     def test_richtextfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_richtext_field\', {\n-                u\'data\': u\'Spam and eggs!\',\n-                u\'content-type\': u\'text/xml\',\n-            })\n-        self.assertEqual(u\'Object is of wrong type.\', cm.exception.doc())\n+            self.deserialize(\n+                "test_richtext_field",\n+                {u"data": u"Spam and eggs!", u"content-type": u"text/xml"},\n+            )\n+        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n \n     def test_relationchoicefield_deserializer_validates_value(self):\n-        self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\', title=\'Referenceable Document\')]\n+        self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc3", title="Referenceable Document"\n+            )\n+        ]\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize(\'test_relationchoice_field\', u\'/doc3\')\n-        self.assertEqual(u\'Constraint not satisfied\', cm.exception.doc())\n+            self.deserialize("test_relationchoice_field", u"/doc3")\n+        self.assertEqual(u"Constraint not satisfied", cm.exception.doc())\n \n     def test_deserialize_with_context_bound_vocabulary(self):\n         value = self.deserialize(\n-            \'test_list_choice_with_context_vocabulary_field\',\n-            [u\'portal_catalog\'])\n-        self.assertEqual([u\'portal_catalog\'], value)\n+            "test_list_choice_with_context_vocabulary_field", [u"portal_catalog"]\n+        )\n+        self.assertEqual([u"portal_catalog"], value)\n \n     def test_textline_deserializer_strips_value(self):\n-        value = self.deserialize(\'test_textline_field\', u\'  aa  \')\n-        self.assertEqual(value, \'aa\')\n+        value = self.deserialize("test_textline_field", u"  aa  ")\n+        self.assertEqual(value, "aa")\n \n     def test_default_field_deserializer_validates_value(self):\n-\n         class CustomIntField(Field):\n-\n             def constraint(self, value):\n                 if not isinstance(value, int):\n                     raise ConstraintNotSatisfied\n                 return True\n \n         field = CustomIntField()\n-        deserializer = getMultiAdapter((field, self.portal.doc1, self.request),\n-                                       IFieldDeserializer)\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n \n         with self.assertRaises(ConstraintNotSatisfied):\n             deserializer(b"not an int")\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 39da5413..04edd751 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -23,10 +23,10 @@\n import os\n import six\n \n-if PLONE_VERSION.base_version >= \'5.1\':\n-    GIF_SCALE_FORMAT = \'png\'\n+if PLONE_VERSION.base_version >= "5.1":\n+    GIF_SCALE_FORMAT = "png"\n else:\n-    GIF_SCALE_FORMAT = \'jpeg\'\n+    GIF_SCALE_FORMAT = "jpeg"\n \n \n class TestDexterityFieldSerializing(TestCase):\n@@ -34,363 +34,352 @@ class TestDexterityFieldSerializing(TestCase):\n     maxDiff = None\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=\'doc1\',\n-            title=\'Test Document\'\n-        )]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n \n     def serialize(self, fieldname, value):\n         for schema in iterSchemata(self.doc1):\n             if fieldname in schema:\n                 field = schema.get(fieldname)\n                 break\n-        dm = getMultiAdapter(\n-            (self.doc1, field),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((self.doc1, field), IDataManager)\n         dm.set(value)\n-        serializer = getMultiAdapter(\n-            (field, self.doc1, self.request),\n-            IFieldSerializer\n-        )\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n         return serializer()\n \n     def test_ascii_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_ascii_field\', \'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        value = self.serialize("test_ascii_field", "foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"foo", value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_asciiline_field\', \'foo\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'foo\', value)\n+        value = self.serialize("test_asciiline_field", "foo")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"foo", value)\n \n     def test_bool_field_serialization_returns_true(self):\n-        value = self.serialize(\'test_bool_field\', True)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("test_bool_field", True)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(True, value)\n \n     def test_bool_field_serialization_returns_false(self):\n-        value = self.serialize(\'test_bool_field\', False)\n-        self.assertTrue(isinstance(value, bool), \'Not a <bool>\')\n+        value = self.serialize("test_bool_field", False)\n+        self.assertTrue(isinstance(value, bool), "Not a <bool>")\n         self.assertEqual(False, value)\n \n     def test_bytes_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytes_field\', b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n+        value = self.serialize("test_bytes_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_bytesline_field\',\n-                               b\'\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'\\xe4\\xf6\\xfc\', value)\n+        value = self.serialize("test_bytesline_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n \n     def test_choice_field_serialization_returns_vocabulary_term(self):\n-        value = self.serialize(\'test_choice_field\', u\'foo\')\n+        value = self.serialize("test_choice_field", u"foo")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u\'token\': u\'foo\', u\'title\': None}, value)\n+        self.assertEqual({u"token": u"foo", u"title": None}, value)\n \n-    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(self):  # noqa\n-        value = self.serialize(\'test_choice_field_with_vocabulary\', u\'value1\')\n+    def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(\n+        self\n+    ):  # noqa\n+        value = self.serialize("test_choice_field_with_vocabulary", u"value1")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u\'token\': u\'token1\', u\'title\': u\'title1\'}, value)\n+        self.assertEqual({u"token": u"token1", u"title": u"title1"}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_date_field\', date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2015-07-15\', value)\n+        value = self.serialize("test_date_field", date(2015, 7, 15))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2015-07-15", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_datetime_field\',\n-                               datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'2015-06-20T13:22:04\', value)\n+        value = self.serialize("test_datetime_field", datetime(2015, 6, 20, 13, 22, 4))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"2015-06-20T13:22:04", value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_decimal_field\', \'1.1\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'1.1\', value)\n+        value = self.serialize("test_decimal_field", "1.1")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"1.1", value)\n \n     def test_dict_field_serialization_returns_dict(self):\n-        value = self.serialize(\'test_dict_field\',\n-                               {\'foo\': \'bar\', \'spam\': \'eggs\', \'1\': 1})\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({u\'foo\': u\'bar\', u\'spam\': u\'eggs\', u\'1\': 1}, value)\n+        value = self.serialize(\n+            "test_dict_field", {"foo": "bar", "spam": "eggs", "1": 1}\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual({u"foo": u"bar", u"spam": u"eggs", u"1": 1}, value)\n \n     def test_float_field_serialization_returns_float(self):\n-        value = self.serialize(\'test_float_field\', 1.5)\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.serialize("test_float_field", 1.5)\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(1.5, value)\n \n     def test_frozenset_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_frozenset_field\', frozenset([1, 2, 3]))\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.serialize("test_frozenset_field", frozenset([1, 2, 3]))\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual([1, 2, 3], sorted(value))\n \n     def test_int_field_serialization_returns_int(self):\n-        value = self.serialize(\'test_int_field\', 500)\n-        self.assertTrue(isinstance(value, int), \'Not an <int>\')\n+        value = self.serialize("test_int_field", 500)\n+        self.assertTrue(isinstance(value, int), "Not an <int>")\n         self.assertEqual(500, value)\n \n     def test_list_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_list_field\', [1, \'two\', 3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([1, u\'two\', 3], value)\n-\n-    def test_list_field_with_vocabulary_choice_serialization_returns_terms(\n-            self):\n-        value = self.serialize(\'test_list_field_with_choice_with_vocabulary\',\n-                               [u\'value1\', u\'value3\'])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n+        value = self.serialize("test_list_field", [1, "two", 3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([1, u"two", 3], value)\n+\n+    def test_list_field_with_vocabulary_choice_serialization_returns_terms(self):\n+        value = self.serialize(\n+            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u\'token\': u\'token1\', u\'title\': u\'title1\'},\n-                {u\'token\': u\'token3\', u\'title\': u\'title3\'},\n+                {u"token": u"token1", u"title": u"title1"},\n+                {u"token": u"token3", u"title": u"title3"},\n             ],\n-            value)\n+            value,\n+        )\n \n     def test_set_field_serialization_returns_list(self):\n-        value = self.serialize(\'test_set_field\', set([\'a\', \'b\', \'c\']))\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([u\'a\', u\'b\', u\'c\'], sorted(value))\n+        value = self.serialize("test_set_field", set(["a", "b", "c"]))\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual([u"a", u"b", u"c"], sorted(value))\n \n     def test_text_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_text_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("test_text_field", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_textline_field\', u\'K\xc3\xa4fer\')\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'K\xc3\xa4fer\', value)\n+        value = self.serialize("test_textline_field", u"K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"K\xc3\xa4fer", value)\n \n     def test_time_field_serialization_returns_unicode(self):\n-        value = self.serialize(\'test_time_field\', time(14, 15, 33))\n-        self.assertTrue(isinstance(value, six.text_type), \'Not an <unicode>\')\n-        self.assertEqual(u\'14:15:33\', value)\n+        value = self.serialize("test_time_field", time(14, 15, 33))\n+        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n+        self.assertEqual(u"14:15:33", value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n-        value = self.serialize(\'test_timedelta_field\', timedelta(0.01))\n-        self.assertTrue(isinstance(value, float), \'Not a <float>\')\n+        value = self.serialize("test_timedelta_field", timedelta(0.01))\n+        self.assertTrue(isinstance(value, float), "Not a <float>")\n         self.assertEqual(864.0, value)\n \n     def test_richtext_field_serialization_returns_dict(self):\n-        value = self.serialize(\'test_richtext_field\', RichTextValue(\n-            raw=u\'<p>Some Text</p>\', mimeType=\'text/html\',\n-            outputMimeType=\'text/html\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        self.assertEqual({\n-            u\'content-type\': u\'text/html\',\n-            u\'data\': u\'<p>Some Text</p>\',\n-            u\'encoding\': u\'utf-8\'}, value)\n+        value = self.serialize(\n+            "test_richtext_field",\n+            RichTextValue(\n+                raw=u"<p>Some Text</p>",\n+                mimeType="text/html",\n+                outputMimeType="text/html",\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        self.assertEqual(\n+            {\n+                u"content-type": u"text/html",\n+                u"data": u"<p>Some Text</p>",\n+                u"encoding": u"utf-8",\n+            },\n+            value,\n+        )\n \n     def test_namedfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n-            \'test_namedfile_field\',\n-            NamedFile(data=u\'Spam and eggs\', contentType=u\'text/plain\',\n-                      filename=u\'test.txt\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-        download_url = u\'/\'.join([\n-            self.doc1.absolute_url(),\n-            u\'@@download/test_namedfile_field\'])\n+            "test_namedfile_field",\n+            NamedFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+        download_url = u"/".join(\n+            [self.doc1.absolute_url(), u"@@download/test_namedfile_field"]\n+        )\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': download_url},\n-            value)\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": download_url,\n+            },\n+            value,\n+        )\n \n     def test_namedimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'test_namedimage_field\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "test_namedimage_field"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data,\n-                    contentType=u\'image/gif\',\n-                    filename=u\'1024x768.gif\'\n-                )\n+                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                ),\n             )\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = \'uuid_1\'\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n+            download_url = u"{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n             )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_namedblobfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n-            \'test_namedblobfile_field\',\n-            NamedBlobFile(data=u\'Spam and eggs\', contentType=u\'text/plain\',\n-                          filename=u\'test.txt\'))\n-        self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n-\n-        download_url = u\'/\'.join([\n-            self.doc1.absolute_url(),\n-            u\'@@download/test_namedblobfile_field\'])\n+            "test_namedblobfile_field",\n+            NamedBlobFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+        self.assertTrue(isinstance(value, dict), "Not a <dict>")\n+\n+        download_url = u"/".join(\n+            [self.doc1.absolute_url(), u"@@download/test_namedblobfile_field"]\n+        )\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'size\': 13,\n-             u\'download\': download_url},\n-            value)\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"size": 13,\n+                u"download": download_url,\n+            },\n+            value,\n+        )\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n-        image_file = os.path.join(os.path.dirname(__file__), u\'1024x768.gif\')\n-        with open(image_file, \'rb\') as f:\n+        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n-        fn = \'test_namedblobimage_field\'\n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        fn = "test_namedblobimage_field"\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data,\n-                    contentType=u\'image/gif\',\n-                    filename=u\'1024x768.gif\'\n-                )\n+                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                ),\n             )\n-            self.assertTrue(isinstance(value, dict), \'Not a <dict>\')\n+            self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = \'uuid_1\'\n+            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n-            download_url = u\'{}/@@images/{}.{}\'.format(\n+            download_url = u"{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, GIF_SCALE_FORMAT\n             )\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 12},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 24},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 48},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 96},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 150},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 400,\n-                    u\'height\': 300},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 768,\n-                    u\'height\': 576},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 12},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 24},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 48},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 96},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 150},\n+                u"preview": {u"download": download_url, u"width": 400, u"height": 300},\n+                u"large": {u"download": download_url, u"width": 768, u"height": 576},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'1024x768.gif\',\n-                u\'content-type\': u\'image/gif\',\n-                u\'size\': 1514,\n-                u\'download\': download_url,\n-                u\'width\': 1024,\n-                u\'height\': 768,\n-                u\'scales\': scales},\n-                value)\n+            self.assertEqual(\n+                {\n+                    u"filename": u"1024x768.gif",\n+                    u"content-type": u"image/gif",\n+                    u"size": 1514,\n+                    u"download": download_url,\n+                    u"width": 1024,\n+                    u"height": 768,\n+                    u"scales": scales,\n+                },\n+                value,\n+            )\n \n     def test_relationchoice_field_serialization_returns_summary_dict(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 2\',\n-        )]\n-        value = self.serialize(\'test_relationchoice_field\', doc2)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc2",\n+                title="Referenceable Document",\n+                description="Description 2",\n+            )\n+        ]\n+        value = self.serialize("test_relationchoice_field", doc2)\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/doc2\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 2\',\n-             \'review_state\': \'private\'\n-             },\n-            value)\n+            {\n+                "@id": "http://nohost/plone/doc2",\n+                "@type": "DXTestDocument",\n+                "title": "Referenceable Document",\n+                "description": "Description 2",\n+                "review_state": "private",\n+            },\n+            value,\n+        )\n \n     def test_relationlist_field_serialization_returns_list(self):\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 2\',\n-        )]\n-        doc3 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc3\',\n-            title=\'Referenceable Document\',\n-            description=\'Description 3\',\n-        )]\n-        value = self.serialize(\'test_relationlist_field\', [doc2, doc3])\n-        self.assertTrue(isinstance(value, list), \'Not a <list>\')\n-        self.assertEqual([\n-            {\'@id\': \'http://nohost/plone/doc2\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 2\',\n-             \'review_state\': \'private\'\n-\n-             },\n-            {\'@id\': \'http://nohost/plone/doc3\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Referenceable Document\',\n-             \'description\': \'Description 3\',\n-             \'review_state\': \'private\'\n-             }],\n-            value)\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc2",\n+                title="Referenceable Document",\n+                description="Description 2",\n+            )\n+        ]\n+        doc3 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc3",\n+                title="Referenceable Document",\n+                description="Description 3",\n+            )\n+        ]\n+        value = self.serialize("test_relationlist_field", [doc2, doc3])\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual(\n+            [\n+                {\n+                    "@id": "http://nohost/plone/doc2",\n+                    "@type": "DXTestDocument",\n+                    "title": "Referenceable Document",\n+                    "description": "Description 2",\n+                    "review_state": "private",\n+                },\n+                {\n+                    "@id": "http://nohost/plone/doc3",\n+                    "@type": "DXTestDocument",\n+                    "title": "Referenceable Document",\n+                    "description": "Description 3",\n+                    "review_state": "private",\n+                },\n+            ],\n+            value,\n+        )\n \n \n class TestDexterityFieldSerializers(TestCase):\n-\n     def default_field_serializer(self):\n         verifyClass(IFieldSerializer, DefaultFieldSerializer)\ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex 7cb02d73..37cca4d8 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -16,15 +16,15 @@\n \n \n class InternalServerErrorView(BrowserView):\n-\n     def __call__(self):  # pragma: no cover\n         from six.moves.urllib.error import HTTPError\n+\n         raise HTTPError(\n-            \'http://nohost/plone/internal_server_error\',\n+            "http://nohost/plone/internal_server_error",\n             500,\n-            \'InternalServerError\',\n+            "InternalServerError",\n             {},\n-            None\n+            None,\n         )\n         raise HTTPError\n \n@@ -34,20 +34,20 @@ class TestErrorHandling(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', id=\'document1\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Document", id="document1")\n         self.document = self.portal.document1\n         self.document_url = self.document.absolute_url()\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\')\n+        self.portal.invokeFactory("Folder", id="folder1")\n         self.folder = self.portal.folder1\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n@@ -55,60 +55,52 @@ def setUp(self):\n     def tearDown(self):\n         self.api_session.close()\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_404_not_found(self):\n-        response = self.api_session.get(\'non-existing-resource\')\n+        response = self.api_session.get("non-existing-resource")\n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'NotFound\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("NotFound", response.json()["type"])\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_401_unauthorized(self):\n         response = self.api_session.get(self.document_url)\n         self.assertEqual(response.status_code, 401)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'Unauthorized\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("Unauthorized", response.json()["type"])\n \n-    @unittest.skip(\'Not working since we moved to plone.rest\')\n+    @unittest.skip("Not working since we moved to plone.rest")\n     def test_500_internal_server_error(self):\n         provideAdapter(\n             InternalServerErrorView,\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n-            name=\'internal_server_error\'\n+            name="internal_server_error",\n         )\n         import transaction\n+\n         transaction.commit()\n \n-        response = self.api_session.get(\'internal_server_error\')\n+        response = self.api_session.get("internal_server_error")\n \n         self.assertEqual(response.status_code, 500)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertTrue(json.loads(response.content))\n-        self.assertEqual(\n-            \'HTTPError\',\n-            response.json()[\'type\']\n-        )\n+        self.assertEqual("HTTPError", response.json()["type"])\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex de805d73..e372be25 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -27,64 +27,64 @@\n \n \n class ExpandableElementFoo(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         if expand:\n-            return {\'foo\': \'expanded\'}\n+            return {"foo": "expanded"}\n         else:\n-            return {\'foo\': \'collapsed\'}\n+            return {"foo": "collapsed"}\n \n \n class ExpandableElementBar(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         if expand:\n-            return {\'bar\': \'expanded\'}\n+            return {"bar": "expanded"}\n         else:\n-            return {\'bar\': \'collapsed\'}\n+            return {"bar": "collapsed"}\n \n \n class TestExpansion(unittest.TestCase):\n-\n     def setUp(self):\n         provideAdapter(\n             ExpandableElementFoo,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'foo\'\n+            name="foo",\n         )\n         provideAdapter(\n             ExpandableElementBar,\n             adapts=(Interface, IBrowserRequest),\n             provides=IExpandableElement,\n-            name=\'bar\'\n+            name="bar",\n         )\n \n     def test_expansion_returns_collapsed_elements(self):\n         request = TestRequest()\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'collapsed\', \'foo\': \'collapsed\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "collapsed", "foo": "collapsed"}},\n+            expandable_elements(None, request),\n+        )\n \n     def test_expansion_returns_expanded_element(self):\n-        request = TestRequest(form={\'expand\': \'foo\'})\n+        request = TestRequest(form={"expand": "foo"})\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'collapsed\', \'foo\': \'expanded\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "collapsed", "foo": "expanded"}},\n+            expandable_elements(None, request),\n+        )\n \n     def test_expansion_returns_multiple_expanded_elements(self):\n-        request = TestRequest(form={\'expand\': \'foo,bar\'})\n+        request = TestRequest(form={"expand": "foo,bar"})\n         self.assertEqual(\n-            {\'@components\': {\'bar\': \'expanded\', \'foo\': \'expanded\'}},\n-            expandable_elements(None, request))\n+            {"@components": {"bar": "expanded", "foo": "expanded"}},\n+            expandable_elements(None, request),\n+        )\n \n     def tearDown(self):\n         gsm = getGlobalSiteManager()\n@@ -92,12 +92,14 @@ def tearDown(self):\n             ExpandableElementFoo,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'foo\')\n+            "foo",\n+        )\n         gsm.unregisterAdapter(\n             ExpandableElementBar,\n             (Interface, IBrowserRequest),\n             IExpandableElement,\n-            \'bar\')\n+            "bar",\n+        )\n \n \n class TestExpansionFunctional(unittest.TestCase):\n@@ -105,232 +107,182 @@ class TestExpansionFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_actions_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'actions\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("actions", list(response.json().get("@components")))\n \n     def test_actions_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "actions"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "actions"})\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(\n-            \'object\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'object_buttons\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'portal_tabs\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'site_actions\' in response.json()[\'@components\'][\'actions\']\n-        )\n-        self.assertTrue(\n-            \'user\' in response.json()[\'@components\'][\'actions\']\n-        )\n+        self.assertTrue("object" in response.json()["@components"]["actions"])\n+        self.assertTrue("object_buttons" in response.json()["@components"]["actions"])\n+        self.assertTrue("portal_tabs" in response.json()["@components"]["actions"])\n+        self.assertTrue("site_actions" in response.json()["@components"]["actions"])\n+        self.assertTrue("user" in response.json()["@components"]["actions"])\n \n     def test_navigation_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'navigation\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("navigation", list(response.json().get("@components")))\n \n     def test_navigation_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "navigation"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "navigation"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             [\n+                {u"title": u"Home", u"@id": self.portal_url + u"", u"description": u""},\n                 {\n-                    u\'title\': u\'Home\',\n-                    u\'@id\': self.portal_url + u\'\',\n-                    u\'description\': u\'\',\n+                    u"title": u"Some Folder",\n+                    u"@id": self.portal_url + u"/folder",\n+                    u"description": u"",\n                 },\n-                {\n-                    u\'title\': u\'Some Folder\',\n-                    u\'@id\': self.portal_url + u\'/folder\',\n-                    u\'description\': u\'\',\n-                }\n             ],\n-            response.json()[\'@components\'][\'navigation\'][\'items\']\n+            response.json()["@components"]["navigation"]["items"],\n         )\n \n     def test_navigation_expanded_with_depth(self):\n         createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         subfolder1 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n+            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+        )\n         createContentInContainer(\n-            thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n         response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "navigation",\n-                "expand.navigation.depth": 3\n-            }\n+            "/folder", params={"expand": "navigation", "expand.navigation.depth": 3}\n         )\n \n         self.assertEqual(response.status_code, 200)\n+        self.assertEqual(len(response.json()["@components"]["navigation"]["items"]), 3)\n         self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\']), 3\n-        )\n-        self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\'][1][\'items\']), 3 # noqa\n+            len(response.json()["@components"]["navigation"]["items"][1]["items"]),\n+            3,  # noqa\n         )\n         self.assertEqual(\n-            len(response.json()[\'@components\'][\'navigation\'][\'items\'][1][\'items\'][0][\'items\']), 1 # noqa\n+            len(\n+                response.json()["@components"]["navigation"]["items"][1]["items"][0][\n+                    "items"\n+                ]\n+            ),\n+            1,  # noqa\n         )\n \n     def test_breadcrumbs_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'breadcrumbs\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("breadcrumbs", list(response.json().get("@components")))\n \n     def test_breadcrumbs_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "breadcrumbs"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "breadcrumbs"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            [\n-                {\n-                    u\'title\': u\'Some Folder\',\n-                    u\'@id\': self.portal_url + u\'/folder\'\n-                }\n-            ],\n-            response.json()[\'@components\'][\'breadcrumbs\'][\'items\']\n+            [{u"title": u"Some Folder", u"@id": self.portal_url + u"/folder"}],\n+            response.json()["@components"]["breadcrumbs"]["items"],\n         )\n \n     def test_workflow_is_expandable(self):\n-        response = self.api_session.get(\'/folder\')\n+        response = self.api_session.get("/folder")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'workflow\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("workflow", list(response.json().get("@components")))\n \n     def test_workflow_expanded(self):\n-        response = self.api_session.get(\n-            \'/folder\',\n-            params={\n-                "expand": "workflow"\n-            }\n-        )\n+        response = self.api_session.get("/folder", params={"expand": "workflow"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            self.portal_url + u\'/folder/@workflow\',\n-            response.json().get(\'@components\').get(\'workflow\').get(\'@id\')\n+            self.portal_url + u"/folder/@workflow",\n+            response.json().get("@components").get("workflow").get("@id"),\n         )\n         self.assertEqual(\n-            u\'private\',\n-            response.json()[\'@components\'][\'workflow\'][\'history\'][0][\'review_state\']  # noqa\n+            u"private",\n+            response.json()["@components"]["workflow"]["history"][0][\n+                "review_state"\n+            ],  # noqa\n         )\n         self.assertEqual(\n-            u\'Private\',\n-            response.json()[\'@components\'][\'workflow\'][\'history\'][0][\'title\']\n+            u"Private",\n+            response.json()["@components"]["workflow"]["history"][0]["title"],\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal_url + u\'/folder/@workflow/publish\',  # noqa\n-                    u\'title\': u\'Publish\'\n+                    u"@id": self.portal_url + u"/folder/@workflow/publish",  # noqa\n+                    u"title": u"Publish",\n                 },\n                 {\n-                    u\'@id\': self.portal_url + u\'/folder/@workflow/submit\',  # noqa\n-                    u\'title\': u\'Submit for publication\'\n-                }\n+                    u"@id": self.portal_url + u"/folder/@workflow/submit",  # noqa\n+                    u"title": u"Submit for publication",\n+                },\n             ],\n-            response.json()[\'@components\'][\'workflow\'][\'transitions\']\n+            response.json()["@components"]["workflow"]["transitions"],\n         )\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestTranslationExpansionFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n         transaction.commit()\n \n@@ -338,28 +290,18 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_translations_is_expandable(self):\n-        response = self.api_session.get(\'/en/test-document\')\n+        response = self.api_session.get("/en/test-document")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertIn(\n-            \'translations\',\n-            list(response.json().get(\'@components\'))\n-        )\n+        self.assertIn("translations", list(response.json().get("@components")))\n \n     def test_translations_expanded(self):\n         response = self.api_session.get(\n-            \'/en/test-document\',\n-            params={\n-                "expand": "translations"\n-            }\n+            "/en/test-document", params={"expand": "translations"}\n         )\n \n         self.assertEqual(response.status_code, 200)\n-        translation_dict = {\n-            \'@id\': self.es_content.absolute_url(),\n-            \'language\': \'es\'\n-        }\n+        translation_dict = {"@id": self.es_content.absolute_url(), "language": "es"}\n         self.assertIn(\n-            translation_dict,\n-            response.json()[\'@components\'][\'translations\'][\'items\']\n+            translation_dict, response.json()["@components"]["translations"]["items"]\n         )\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 1d8543ab..9a9972a1 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -17,133 +17,109 @@ class TestFunctionalAuth(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, SITE_OWNER_NAME)\n-        self.private_document = self.portal[self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )]\n+        self.private_document = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         self.private_document_url = self.private_document.absolute_url()\n         transaction.commit()\n \n     def test_login_without_credentials_fails(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n+            self.portal_url + "/@login", headers={"Accept": "application/json"}\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            u\'Missing credentials\',\n-            response.json().get(\'error\').get(\'type\')\n+            u"Missing credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u\'Login and password must be provided in body.\',\n-            response.json().get(\'error\').get(\'message\')\n+            u"Login and password must be provided in body.",\n+            response.json().get("error").get("message"),\n         )\n \n     def test_login_with_invalid_credentials_fails(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": "invalid",\n-                "password": "invalid",\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": "invalid", "password": "invalid"},\n         )\n         self.assertEqual(401, response.status_code)\n         self.assertEqual(\n-            u\'Invalid credentials\',\n-            response.json().get(\'error\').get(\'type\')\n+            u"Invalid credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u\'Wrong login and/or password.\',\n-            response.json().get(\'error\').get(\'message\')\n+            u"Wrong login and/or password.", response.json().get("error").get("message")\n         )\n \n     def test_login_with_valid_credentials_returns_token(self):\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": TEST_USER_NAME,\n-                "password": TEST_USER_PASSWORD,\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": TEST_USER_NAME, "password": TEST_USER_PASSWORD},\n         )\n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(\n-            u\'token\' in response.json()\n-        )\n+        self.assertTrue(u"token" in response.json())\n \n     def test_accessing_private_document_with_valid_token_succeeds(self):\n         # login and generate a valid token\n         response = requests.post(\n-            self.portal_url + \'/@login\',\n-            headers={\'Accept\': \'application/json\'},\n-            json={\n-                "login": TEST_USER_NAME,\n-                "password": TEST_USER_PASSWORD,\n-            },\n+            self.portal_url + "/@login",\n+            headers={"Accept": "application/json"},\n+            json={"login": TEST_USER_NAME, "password": TEST_USER_PASSWORD},\n         )\n-        valid_token = response.json().get(\'token\')\n+        valid_token = response.json().get("token")\n \n         # use valid token to access a private resource\n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + valid_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + valid_token,\n             },\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(u\'@id\' in response.json())\n+        self.assertTrue(u"@id" in response.json())\n \n     def test_accessing_private_document_with_invalid_token_fails(self):\n-        invalid_token = \'abcd1234\'\n+        invalid_token = "abcd1234"\n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + invalid_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + invalid_token,\n             },\n         )\n \n         self.assertEqual(401, response.status_code)\n+        self.assertEqual(u"Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u\'Unauthorized\',\n-            response.json().get(\'type\')\n-        )\n-        self.assertEqual(\n-            u\'You are not authorized to access this resource.\',\n-            response.json().get(\'message\')\n+            u"You are not authorized to access this resource.",\n+            response.json().get("message"),\n         )\n \n     def test_accessing_private_document_with_expired_token_fails(self):\n         # generate an expired token\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         expired_token = self.portal.acl_users.jwt_auth.create_token(\n-            \'admin\',\n-            timeout=-60\n+            "admin", timeout=-60\n         )\n         transaction.commit()\n \n         response = requests.get(\n             self.private_document_url,\n             headers={\n-                \'Accept\': \'application/json\',\n-                \'Authorization\': \'Bearer \' + expired_token\n+                "Accept": "application/json",\n+                "Authorization": "Bearer " + expired_token,\n             },\n         )\n \n         self.assertEqual(401, response.status_code)\n+        self.assertEqual(u"Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u\'Unauthorized\',\n-            response.json().get(\'type\')\n-        )\n-        self.assertEqual(\n-            u\'You are not authorized to access this resource.\',\n-            response.json().get(\'message\')\n+            u"You are not authorized to access this resource.",\n+            response.json().get("message"),\n         )\ndiff --git a/src/plone/restapi/tests/test_imaging.py b/src/plone/restapi/tests/test_imaging.py\nindex b1ff6abf..84394674 100644\n--- a/src/plone/restapi/tests/test_imaging.py\n+++ b/src/plone/restapi/tests/test_imaging.py\n@@ -4,7 +4,6 @@\n \n \n class TestGetActualScale(TestCase):\n-\n     def test_constrains_landscape_to_width(self):\n         img = (800, 400)\n         bbox = (200, 200)\ndiff --git a/src/plone/restapi/tests/test_locking.py b/src/plone/restapi/tests/test_locking.py\nindex 44e57653..c738dca4 100644\n--- a/src/plone/restapi/tests/test_locking.py\n+++ b/src/plone/restapi/tests/test_locking.py\n@@ -19,15 +19,16 @@ class TestLocking(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         login(self.portal, SITE_OWNER_NAME)\n-        self.doc = self.portal[self.portal.invokeFactory(\n-            \'Document\', id=\'doc1\', title=\'My Document\')]\n+        self.doc = self.portal[\n+            self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        ]\n         alsoProvides(self.doc, ITTWLockable)\n \n         self.api_session = RelativeSession(self.doc.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -36,21 +37,21 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_lock_object(self):\n-        response = self.api_session.post(\'/@lock\',)\n+        response = self.api_session.post("/@lock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         self.assertTrue(ILockable(self.doc).locked())\n \n     def test_lock_object_non_stealable(self):\n-        response = self.api_session.post(\'/@lock\', json={\'stealable\': False})\n+        response = self.api_session.post("/@lock", json={"stealable": False})\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         self.assertTrue(INonStealableLock.providedBy(self.doc))\n \n     def test_lock_object_with_custom_timeout(self):\n-        response = self.api_session.post(\'/@lock\', json={\'timeout\': 86400})\n+        response = self.api_session.post("/@lock", json={"timeout": 86400})\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n@@ -60,7 +61,7 @@ def test_unlock_object(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.post(\'/@unlock\')\n+        response = self.api_session.post("/@unlock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n@@ -71,45 +72,45 @@ def test_refresh_lock(self):\n         lockable.lock()\n         modified = self.doc.wl_lockValues()[0].getModifiedTime()\n         transaction.commit()\n-        response = self.api_session.post(\'/@refresh-lock\')\n+        response = self.api_session.post("/@refresh-lock")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(\n-            self.doc.wl_lockValues()[0].getModifiedTime() > modified)\n+        self.assertTrue(self.doc.wl_lockValues()[0].getModifiedTime() > modified)\n \n     def test_lock_info_for_locked_object(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.get(\'/@lock\')\n+        response = self.api_session.get("/@lock")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertTrue(response.json()[\'locked\'])\n+        self.assertTrue(response.json()["locked"])\n \n     def test_lock_info_for_unlocked_object(self):\n-        response = self.api_session.get(\'/@lock\')\n+        response = self.api_session.get("/@lock")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertFalse(response.json()[\'locked\'])\n+        self.assertFalse(response.json()["locked"])\n \n     def test_update_locked_object_without_token_fails(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n-        response = self.api_session.patch(\'/\', json={\'title\': \'New Title\'})\n+        response = self.api_session.patch("/", json={"title": "New Title"})\n         transaction.commit()\n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(self.doc.Title(), \'My Document\')\n+        self.assertEqual(self.doc.Title(), "My Document")\n \n     def test_update_locked_object_with_token_succeeds(self):\n         lockable = ILockable(self.doc)\n         lockable.lock()\n         transaction.commit()\n         response = self.api_session.patch(\n-            \'/\',\n-            headers={\'Lock-Token\': lockable.lock_info()[0][\'token\']},\n-            json={\'title\': \'New Title\'})\n+            "/",\n+            headers={"Lock-Token": lockable.lock_info()[0]["token"]},\n+            json={"title": "New Title"},\n+        )\n         transaction.commit()\n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(self.doc.Title(), \'New Title\')\n+        self.assertEqual(self.doc.Title(), "New Title")\ndiff --git a/src/plone/restapi/tests/test_pas.py b/src/plone/restapi/tests/test_pas.py\nindex 4a30e18d..a9a2f7ae 100644\n--- a/src/plone/restapi/tests/test_pas.py\n+++ b/src/plone/restapi/tests/test_pas.py\n@@ -13,100 +13,93 @@ class TestJWTAuthenticationPlugin(unittest.TestCase):\n \n     def setUp(self):\n \n-        self.portal = self.layer[\'portal\']\n-        uf = getToolByName(self.portal, \'acl_users\')\n-        self.plugin = uf[\'jwt_auth\']\n+        self.portal = self.layer["portal"]\n+        uf = getToolByName(self.portal, "acl_users")\n+        self.plugin = uf["jwt_auth"]\n \n     def test_challenge(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         response = request.response\n         self.plugin.challenge(request, request.response)\n         self.assertEqual(401, response.getStatus())\n-        self.assertEqual(\n-            \'Bearer realm="Zope"\', response.getHeader(\'WWW-Authenticate\'))\n+        self.assertEqual(\'Bearer realm="Zope"\', response.getHeader("WWW-Authenticate"))\n \n     def test_extract_credentials_without_authorization_header(self):\n-        request = self.layer[\'request\']\n-        request._auth = \'\'\n+        request = self.layer["request"]\n+        request._auth = ""\n         self.assertEqual(None, self.plugin.extractCredentials(request))\n \n     def test_extract_credentials_with_other_authorization_header(self):\n-        request = self.layer[\'request\']\n-        request._auth = \'Basic YWRtaW46YWRtaW4=\'\n+        request = self.layer["request"]\n+        request._auth = "Basic YWRtaW46YWRtaW4="\n         self.assertEqual(None, self.plugin.extractCredentials(request))\n \n     def test_extract_credentials_with_bearer_authorization_header(self):\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         request._auth = (\n-            \'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.\'\n-            \'PGnRccPTXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw\')\n+            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9."\n+            "PGnRccPTXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw"\n+        )\n         self.assertEqual(\n-            \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.PGnRccP\'\n-            \'TXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw\',\n-            self.plugin.extractCredentials(request)[\'token\'])\n+            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.PGnRccP"\n+            "TXeaxA8nzfytWewWRkizJa_ihI_3H6ec-Zbw",\n+            self.plugin.extractCredentials(request)["token"],\n+        )\n \n     def test_authenticate_credentials_from_unknown_extractor(self):\n         creds = {}\n-        creds[\'extractor\'] = \'credentials_basic_auth\'\n+        creds["extractor"] = "credentials_basic_auth"\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_invalid_token(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = \'invalid\'\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = "invalid"\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_without_subject(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = (\n-            \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.t-IDcSemACt8x4iTMCda8Yhe\'\n-            \'3iZaWbvV5XKSTbuAn0M\')\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = (\n+            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.t-IDcSemACt8x4iTMCda8Yhe"\n+            "3iZaWbvV5XKSTbuAn0M"\n+        )\n         self.assertEqual(None, self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_valid_token(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertEqual(\n-            (\'admin\', \'admin\'),\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertEqual(("admin", "admin"), self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_returns_native_string(self):\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertIsInstance(\n-            self.plugin.authenticateCredentials(creds)[0],\n-            str,\n-        )\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertIsInstance(self.plugin.authenticateCredentials(creds)[0], str)\n \n     def test_decode_token_after_key_rotation(self):\n-        token = self.plugin.create_token(\'admin\', timeout=0)\n+        token = self.plugin.create_token("admin", timeout=0)\n         key_manager = getUtility(IKeyManager)\n         key_manager.rotate()\n-        self.assertEqual({\'sub\': \'admin\'}, self.plugin._decode_token(token))\n+        self.assertEqual({"sub": "admin"}, self.plugin._decode_token(token))\n \n     def test_decode_with_static_secret(self):\n         self.plugin.use_keyring = False\n-        token = self.plugin.create_token(\'admin\', timeout=0)\n-        self.assertEqual({\'sub\': \'admin\'}, self.plugin._decode_token(token))\n+        token = self.plugin.create_token("admin", timeout=0)\n+        self.assertEqual({"sub": "admin"}, self.plugin._decode_token(token))\n \n     def test_authenticate_credentials_with_stored_token(self):\n         self.plugin.store_tokens = True\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.assertEqual(\n-            (\'admin\', \'admin\'),\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.assertEqual(("admin", "admin"), self.plugin.authenticateCredentials(creds))\n \n     def test_authenticate_credentials_with_deleted_token_fails(self):\n         self.plugin.store_tokens = True\n         creds = {}\n-        creds[\'extractor\'] = \'jwt_auth\'\n-        creds[\'token\'] = self.plugin.create_token(\'admin\')\n-        self.plugin.delete_token(creds[\'token\'])\n-        self.assertEqual(\n-            None,\n-            self.plugin.authenticateCredentials(creds))\n+        creds["extractor"] = "jwt_auth"\n+        creds["token"] = self.plugin.create_token("admin")\n+        self.plugin.delete_token(creds["token"])\n+        self.assertEqual(None, self.plugin.authenticateCredentials(creds))\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 84a94c9b..80fe21f2 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -16,33 +16,33 @@ class TestPermissions(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_anonymous_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Anonymous\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Anonymous"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n \n     def test_authenticated_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Authenticated\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Authenticated"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n \n     def test_manager_allowed_to_use_api_by_default(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n@@ -57,6 +57,9 @@ def test_unauthorized_if_missing_permission(self):\n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 401)\n         self.assertDictContainsSubset(\n-            {u\'type\': u\'Unauthorized\',\n-             u\'message\': u"Missing \'plone.restapi: Use REST API\' permission"},\n-            response.json())\n+            {\n+                u"type": u"Unauthorized",\n+                u"message": u"Missing \'plone.restapi: Use REST API\' permission",\n+            },\n+            response.json(),\n+        )\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nindex dbeccb14..8875cf07 100644\n--- a/src/plone/restapi/tests/test_profile_tiles.py\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -15,20 +15,18 @@ class TestProfileTiles(unittest.TestCase):\n     layer = PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n \n     def test_document_type_has_tiles_behavior_enabled(self):\n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'tileddoc\',\n-            title=\'Document with Tiles\'\n+            "Document", id="tileddoc", title="Document with Tiles"\n         )\n-        ITiles.providedBy(self.portal[\'tileddoc\'])\n+        ITiles.providedBy(self.portal["tileddoc"])\n \n     def test_plone_restapi_base_profile_applied(self):\n-        uf = getToolByName(self.portal, \'acl_users\')\n-        self.assertTrue(\'jwt_auth\' in uf)\n+        uf = getToolByName(self.portal, "acl_users")\n+        self.assertTrue("jwt_auth" in uf)\ndiff --git a/src/plone/restapi/tests/test_query_parsers.py b/src/plone/restapi/tests/test_query_parsers.py\nindex 681c43e9..c3369614 100644\n--- a/src/plone/restapi/tests/test_query_parsers.py\n+++ b/src/plone/restapi/tests/test_query_parsers.py\n@@ -14,19 +14,18 @@\n \n \n class TestBaseIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_query_values_in_sequences(self):\n         qp = BaseIndexQueryParser()\n-        self.assertEqual([\'23\', \'42\'], qp.parse([23, 42]))\n-        self.assertEqual([\'23\', \'42\'], qp.parse((23, 42)))\n+        self.assertEqual(["23", "42"], qp.parse([23, 42]))\n+        self.assertEqual(["23", "42"], qp.parse((23, 42)))\n \n     def test_raises_on_missing_query_key_for_complex_queries(self):\n         qp = BaseIndexQueryParser()\n@@ -35,60 +34,59 @@ def test_raises_on_missing_query_key_for_complex_queries(self):\n \n \n class TestZCTextIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = ZCTextIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = ZCTextIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n \n class TestKeywordIndexQueryParser(unittest.TestCase):\n-\n     def test_returns_simple_query_unchanged(self):\n         qp = KeywordIndexQueryParser()\n-        self.assertEqual(\'keyword\', qp.parse(\'keyword\'))\n+        self.assertEqual("keyword", qp.parse("keyword"))\n         self.assertEqual(42, qp.parse(42))\n \n     def test_returns_complex_query_values_unchanged(self):\n         qp = KeywordIndexQueryParser()\n-        self.assertEqual({\'query\': \'keyword\'}, qp.parse({\'query\': \'keyword\'}))\n-        self.assertEqual({\'query\': 42}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "keyword"}, qp.parse({"query": "keyword"}))\n+        self.assertEqual({"query": 42}, qp.parse({"query": 42}))\n \n     def test_casts_operator_option_to_string(self):\n         qp = KeywordIndexQueryParser()\n         self.assertEqual(\n-            {\'operator\': \'42\', \'query\': \'keyword\'},\n-            qp.parse({\'operator\': 42, \'query\': \'keyword\'}))\n+            {"operator": "42", "query": "keyword"},\n+            qp.parse({"operator": 42, "query": "keyword"}),\n+        )\n \n     def test_casts_range_option_to_string(self):\n         qp = KeywordIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'keyword\'},\n-            qp.parse({\'range\': 42, \'query\': \'keyword\'}))\n+            {"range": "42", "query": "keyword"},\n+            qp.parse({"range": 42, "query": "keyword"}),\n+        )\n \n \n class TestBooleanIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_boolean(self):\n         qp = BooleanIndexQueryParser()\n-        self.assertEqual(True, qp.parse(\'True\'))\n-        self.assertEqual(True, qp.parse(\'true\'))\n-        self.assertEqual(True, qp.parse(\'1\'))\n-        self.assertEqual(False, qp.parse(\'False\'))\n-        self.assertEqual(False, qp.parse(\'false\'))\n-        self.assertEqual(False, qp.parse(\'0\'))\n+        self.assertEqual(True, qp.parse("True"))\n+        self.assertEqual(True, qp.parse("true"))\n+        self.assertEqual(True, qp.parse("1"))\n+        self.assertEqual(False, qp.parse("False"))\n+        self.assertEqual(False, qp.parse("false"))\n+        self.assertEqual(False, qp.parse("0"))\n \n     def test_casts_complex_query_values_to_boolean(self):\n         qp = BooleanIndexQueryParser()\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'True\'}))\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'true\'}))\n-        self.assertEqual({\'query\': True}, qp.parse({\'query\': \'1\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'False\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'false\'}))\n-        self.assertEqual({\'query\': False}, qp.parse({\'query\': \'0\'}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "True"}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "true"}))\n+        self.assertEqual({"query": True}, qp.parse({"query": "1"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "False"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "false"}))\n+        self.assertEqual({"query": False}, qp.parse({"query": "0"}))\n \n     def test_raises_for_invalid_query_type(self):\n         qp = BooleanIndexQueryParser()\n@@ -97,116 +95,114 @@ def test_raises_for_invalid_query_type(self):\n \n \n class TestFieldIndexQueryParser(unittest.TestCase):\n-\n     def test_returns_simple_query_unchanged(self):\n         qp = FieldIndexQueryParser()\n-        self.assertEqual(\'foo\', qp.parse(\'foo\'))\n+        self.assertEqual("foo", qp.parse("foo"))\n         self.assertEqual(42, qp.parse(42))\n \n     def test_returns_complex_query_values_unchanged(self):\n         qp = FieldIndexQueryParser()\n-        self.assertEqual({\'query\': \'foo\'}, qp.parse({\'query\': \'foo\'}))\n-        self.assertEqual({\'query\': 42}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "foo"}, qp.parse({"query": "foo"}))\n+        self.assertEqual({"query": 42}, qp.parse({"query": 42}))\n \n     def test_casts_range_option_to_string(self):\n         qp = FieldIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'/path\'},\n-            qp.parse({\'range\': 42, \'query\': \'/path\'}))\n+            {"range": "42", "query": "/path"}, qp.parse({"range": 42, "query": "/path"})\n+        )\n \n \n class TestExtendedPathIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_level_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'level\': 3, \'query\': \'/path\'},\n-            qp.parse({\'level\': \'3\', \'query\': \'/path\'}))\n+            {"level": 3, "query": "/path"}, qp.parse({"level": "3", "query": "/path"})\n+        )\n \n     def test_casts_operator_option_to_string(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'operator\': \'42\', \'query\': \'/path\'},\n-            qp.parse({\'operator\': 42, \'query\': \'/path\'}))\n+            {"operator": "42", "query": "/path"},\n+            qp.parse({"operator": 42, "query": "/path"}),\n+        )\n \n     def test_casts_depth_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'depth\': 3, \'query\': \'/path\'},\n-            qp.parse({\'depth\': \'3\', \'query\': \'/path\'}))\n+            {"depth": 3, "query": "/path"}, qp.parse({"depth": "3", "query": "/path"})\n+        )\n \n     def test_casts_navtree_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'navtree\': False, \'query\': \'/path\'},\n-            qp.parse({\'navtree\': 0, \'query\': \'/path\'}))\n+            {"navtree": False, "query": "/path"},\n+            qp.parse({"navtree": 0, "query": "/path"}),\n+        )\n         self.assertEqual(\n-            {\'navtree\': True, \'query\': \'/path\'},\n-            qp.parse({\'navtree\': 1, \'query\': \'/path\'}))\n+            {"navtree": True, "query": "/path"},\n+            qp.parse({"navtree": 1, "query": "/path"}),\n+        )\n \n     def test_casts_navtree_start_option_to_int(self):\n         qp = ExtendedPathIndexQueryParser()\n         self.assertEqual(\n-            {\'navtree_start\': 42, \'query\': \'/path\'},\n-            qp.parse({\'navtree_start\': \'42\', \'query\': \'/path\'}))\n+            {"navtree_start": 42, "query": "/path"},\n+            qp.parse({"navtree_start": "42", "query": "/path"}),\n+        )\n \n \n class TestDateIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_zope_date_time(self):\n         qp = DateIndexQueryParser()\n-        self.assertEqual(\n-            DateTime(\'2016/12/24 00:00:00 GMT+0\'),\n-            qp.parse(\'2016-12-24\'))\n+        self.assertEqual(DateTime("2016/12/24 00:00:00 GMT+0"), qp.parse("2016-12-24"))\n \n     def test_casts_complex_query_values_to_zope_date_time(self):\n         qp = DateIndexQueryParser()\n         self.assertEqual(\n-            {\'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'query\': \'2016-12-24\'}))\n+            {"query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"query": "2016-12-24"}),\n+        )\n \n     def test_casts_range_option_to_string(self):\n         qp = DateIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'range\': 42, \'query\': \'2016-12-24\'}))\n+            {"range": "42", "query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"range": 42, "query": "2016-12-24"}),\n+        )\n \n \n class TestDateRangeIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_zope_date_time(self):\n         qp = DateRangeIndexQueryParser()\n-        self.assertEqual(\n-            DateTime(\'2016/12/24 00:00:00 GMT+0\'),\n-            qp.parse(\'2016-12-24\'))\n+        self.assertEqual(DateTime("2016/12/24 00:00:00 GMT+0"), qp.parse("2016-12-24"))\n \n     def test_casts_complex_query_values_to_zope_date_time(self):\n         qp = DateRangeIndexQueryParser()\n         self.assertEqual(\n-            {\'query\': DateTime(\'2016/12/24 00:00:00 GMT+0\')},\n-            qp.parse({\'query\': \'2016-12-24\'}))\n+            {"query": DateTime("2016/12/24 00:00:00 GMT+0")},\n+            qp.parse({"query": "2016-12-24"}),\n+        )\n \n \n class TestUUIDIndexQueryParser(unittest.TestCase):\n-\n     def test_casts_simple_query_to_string(self):\n         qp = UUIDIndexQueryParser()\n-        self.assertEqual(\'42\', qp.parse(42))\n+        self.assertEqual("42", qp.parse(42))\n \n     def test_casts_complex_query_values_to_string(self):\n         qp = UUIDIndexQueryParser()\n-        self.assertEqual({\'query\': \'42\'}, qp.parse({\'query\': 42}))\n+        self.assertEqual({"query": "42"}, qp.parse({"query": 42}))\n \n     def test_casts_range_option_to_string(self):\n         qp = UUIDIndexQueryParser()\n         self.assertEqual(\n-            {\'range\': \'42\', \'query\': \'<UID>\'},\n-            qp.parse({\'range\': 42, \'query\': \'<UID>\'}))\n+            {"range": "42", "query": "<UID>"}, qp.parse({"range": 42, "query": "<UID>"})\n+        )\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex 7bb89ba9..3f76ba74 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -20,22 +20,22 @@ class TestRegistry(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         registry = getUtility(IRegistry)\n         record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-        registry.records[\'foo.bar\'] = record\n+        registry.records["foo.bar"] = record\n \n         for counter in range(1, 100):\n             record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-            registry.records[\'foo.bar\' + str(counter)] = record\n+            registry.records["foo.bar" + str(counter)] = record\n \n         transaction.commit()\n \n@@ -43,45 +43,43 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_registry_record(self):\n-        response = self.api_session.get(\'/@registry/foo.bar\')\n+        response = self.api_session.get("/@registry/foo.bar")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.json(), \'Lorem Ipsum\')\n+        self.assertEqual(response.json(), "Lorem Ipsum")\n \n     def test_update_registry_record(self):\n         registry = getUtility(IRegistry)\n-        payload = {\'foo.bar\': \'lorem ipsum\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar": "lorem ipsum"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(registry[\'foo.bar\'], \'lorem ipsum\')\n+        self.assertEqual(registry["foo.bar"], "lorem ipsum")\n \n     def test_update_several_registry_records(self):\n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar Baz"),\n-                        u"Lorem Ipsum Dolor")\n-        registry.records[\'foo.bar.baz\'] = record\n+        record = Record(field.TextLine(title=u"Foo Bar Baz"), u"Lorem Ipsum Dolor")\n+        registry.records["foo.bar.baz"] = record\n         transaction.commit()\n-        payload = {\'foo.bar\': \'lorem ipsum\',\n-                   \'foo.bar.baz\': \'lorem ipsum dolor\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar": "lorem ipsum", "foo.bar.baz": "lorem ipsum dolor"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(registry[\'foo.bar\'], \'lorem ipsum\')\n-        self.assertEqual(registry[\'foo.bar.baz\'], \'lorem ipsum dolor\')\n+        self.assertEqual(registry["foo.bar"], "lorem ipsum")\n+        self.assertEqual(registry["foo.bar.baz"], "lorem ipsum dolor")\n \n     def test_update_non_existing_registry_record(self):\n-        payload = {\'foo.bar.baz\': \'lorem ipsum\'}\n-        response = self.api_session.patch(\'/@registry\', json=payload)\n+        payload = {"foo.bar.baz": "lorem ipsum"}\n+        response = self.api_session.patch("/@registry", json=payload)\n         self.assertEqual(response.status_code, 500)\n \n     def test_get_listing(self):\n-        response = self.api_session.get(\'/@registry\')\n+        response = self.api_session.get("/@registry")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertIn(\'items\', response)\n-        self.assertIn(\'batching\', response)\n-        self.assertIn(\'next\', response[\'batching\'])\n+        self.assertIn("items", response)\n+        self.assertIn("batching", response)\n+        self.assertIn("next", response["batching"])\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex e6774412..76b0e769 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -17,43 +17,42 @@ class TestRegistrySerializer(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_empty(self):\n         registry = Registry()\n         obj = self.serialize(registry)\n-        expected = [\'@id\', \'items_total\', \'items\']\n+        expected = ["@id", "items_total", "items"]\n         self.assertEqual(set(obj), set(expected))\n-        self.assertNotIn(\'batching\', list(obj))\n+        self.assertNotIn("batching", list(obj))\n \n     def test_batched(self):\n         registry = Registry()\n \n         for counter in range(1, 100):\n             record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-            registry.records[\'foo.bar\' + str(counter)] = record\n+            registry.records["foo.bar" + str(counter)] = record\n \n         obj = self.serialize(registry)\n-        expected = [\'@id\', \'items_total\', \'items\', \'batching\']\n+        expected = ["@id", "items_total", "items", "batching"]\n         self.assertEqual(set(expected), set(obj))\n-        self.assertEqual(obj[\'items_total\'], len(list(range(1, 100))))\n+        self.assertEqual(obj["items_total"], len(list(range(1, 100))))\n \n     def test_structure(self):\n         registry = Registry()\n \n         record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n-        registry.records[\'foo.bar\'] = record\n+        registry.records["foo.bar"] = record\n \n         obj = self.serialize(registry)\n-        item = obj[\'items\'][0]\n-        self.assertEqual(set(item), set([\'name\', \'value\', \'schema\']))\n-        self.assertEqual(set(item[\'schema\']), set([\'properties\']))\n-        self.assertEqual(item[\'name\'], \'foo.bar\')\n-        self.assertEqual(item[\'value\'], u"Lorem Ipsum")\n+        item = obj["items"][0]\n+        self.assertEqual(set(item), set(["name", "value", "schema"]))\n+        self.assertEqual(set(item["schema"]), set(["properties"]))\n+        self.assertEqual(item["name"], "foo.bar")\n+        self.assertEqual(item["value"], u"Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 474dd4cc..00c15aea 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -12,48 +12,62 @@ class TestRolesGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_roles_endpoint_lists_roles(self):\n-        response = self.api_session.get(\'/@roles\')\n+        response = self.api_session.get("/@roles")\n \n         expected = (\n-            {u\'@id\': self.portal_url + u\'/@roles/Contributor\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Contributor\',\n-             u\'title\': u\'Contributor\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Editor\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Editor\',\n-             u\'title\': u\'Editor\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Member\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Member\',\n-             u\'title\': u\'Member\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Reader\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Reader\',\n-             u\'title\': u\'Reader\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Reviewer\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Reviewer\',\n-             u\'title\': u\'Reviewer\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Site Administrator\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Site Administrator\',\n-             u\'title\': u\'Site Administrator\'},\n-            {u\'@id\': self.portal_url + u\'/@roles/Manager\',\n-             u\'@type\': u\'role\',\n-             u\'id\': u\'Manager\',\n-             u\'title\': u\'Manager\'},\n+            {\n+                u"@id": self.portal_url + u"/@roles/Contributor",\n+                u"@type": u"role",\n+                u"id": u"Contributor",\n+                u"title": u"Contributor",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Editor",\n+                u"@type": u"role",\n+                u"id": u"Editor",\n+                u"title": u"Editor",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Member",\n+                u"@type": u"role",\n+                u"id": u"Member",\n+                u"title": u"Member",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Reader",\n+                u"@type": u"role",\n+                u"id": u"Reader",\n+                u"title": u"Reader",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Reviewer",\n+                u"@type": u"role",\n+                u"id": u"Reviewer",\n+                u"title": u"Reviewer",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Site Administrator",\n+                u"@type": u"role",\n+                u"id": u"Site Administrator",\n+                u"title": u"Site Administrator",\n+            },\n+            {\n+                u"@id": self.portal_url + u"/@roles/Manager",\n+                u"@type": u"role",\n+                u"id": u"Manager",\n+                u"title": u"Manager",\n+            },\n         )\n         result = response.json()\n         self.assertEqual(len(expected), len(result))\n@@ -61,21 +75,24 @@ def test_roles_endpoint_lists_roles(self):\n             self.assertIn(item, expected)\n \n     def test_roles_endpoint_translates_role_titles(self):\n-        self.api_session.headers.update({\'Accept-Language\': \'de\'})\n-        response = self.api_session.get(\'/@roles\')\n+        self.api_session.headers.update({"Accept-Language": "de"})\n+        response = self.api_session.get("/@roles")\n         # One of the roles has changed translation in German.\n         # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n-        titles = {item[\'title\'] for item in response.json()}\n-        options = {u\'Ver\\xf6ffentlichen\', u\'Reviewer\'}\n+        titles = {item["title"] for item in response.json()}\n+        options = {u"Ver\\xf6ffentlichen", u"Reviewer"}\n         # One of the options must match:\n         self.assertTrue(titles.intersection(options))\n         # Discard them:\n         titles = titles.difference(options)\n-        self.assertEqual({\n-            u\'Hinzuf\\xfcgen\',\n-            u\'Bearbeiten\',\n-            u\'Benutzer\',\n-            u\'Ansehen\',\n-            u\'Website-Administrator\',\n-            u\'Verwalten\'},\n-            titles)\n+        self.assertEqual(\n+            {\n+                u"Hinzuf\\xfcgen",\n+                u"Bearbeiten",\n+                u"Benutzer",\n+                u"Ansehen",\n+                u"Website-Administrator",\n+                u"Verwalten",\n+            },\n+            titles,\n+        )\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 827d1526..2b732248 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -27,66 +27,67 @@ class TestSearchFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # /plone/folder\n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n \n         # /plone/folder/doc\n         self.doc = createContentInContainer(\n-            self.folder, u\'DXTestDocument\',\n-            id=\'doc\',\n-            title=u\'Lorem Ipsum\',\n+            self.folder,\n+            u"DXTestDocument",\n+            id="doc",\n+            title=u"Lorem Ipsum",\n             start=DateTime(1950, 1, 1, 0, 0),\n             effective=DateTime(1995, 1, 1, 0, 0),\n             expires=DateTime(1999, 1, 1, 0, 0),\n             test_int_field=42,\n-            test_list_field=[\'Keyword1\', \'Keyword2\', \'Keyword3\'],\n+            test_list_field=["Keyword1", "Keyword2", "Keyword3"],\n             test_bool_field=True,\n             test_richtext_field=RichTextValue(\n-                raw=u\'<p>Some Text</p>\',\n-                mimeType=\'text/html\',\n-                outputMimeType=\'text/html\'\n+                raw=u"<p>Some Text</p>",\n+                mimeType="text/html",\n+                outputMimeType="text/html",\n             ),\n         )\n-        IMutableUUID(self.doc).set(\'77779ffa110e45afb1ba502f75f77777\')\n+        IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n         self.doc.reindexObject()\n \n         # /plone/folder/other-document\n         self.doc2 = createContentInContainer(\n-            self.folder, u\'DXTestDocument\',\n-            id=\'other-document\',\n-            title=u\'Other Document\',\n-            description=u\'\\xdcbersicht\',\n+            self.folder,\n+            u"DXTestDocument",\n+            id="other-document",\n+            title=u"Other Document",\n+            description=u"\\xdcbersicht",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n-            test_list_field=[\'Keyword2\', \'Keyword3\'],\n+            test_list_field=["Keyword2", "Keyword3"],\n             test_bool_field=False,\n         )\n \n         # /plone/folder2\n         self.folder2 = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Another Folder\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Another Folder"\n+        )\n \n         # /plone/folder2/doc\n         createContentInContainer(\n-            self.folder2, u\'DXTestDocument\',\n-            id=\'doc\',\n-            title=u\'Document in second folder\',\n+            self.folder2,\n+            u"DXTestDocument",\n+            id="doc",\n+            title=u"Document in second folder",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -95,9 +96,10 @@ def setUp(self):\n \n         # /plone/doc-outside-folder\n         createContentInContainer(\n-            self.portal, u\'DXTestDocument\',\n-            id=\'doc-outside-folder\',\n-            title=u\'Doc outside folder\',\n+            self.portal,\n+            u"DXTestDocument",\n+            id="doc-outside-folder",\n+            title=u"Doc outside folder",\n         )\n \n         transaction.commit()\n@@ -106,182 +108,194 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_overall_response_format(self):\n-        response = self.api_session.get(\'/@search\')\n+        response = self.api_session.get("/@search")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-        )\n+        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n         self.assertEqual(\n-            results[u\'items_total\'],\n-            len(results[u\'items\']),\n-            \'items_total property should match actual item count.\'\n+            results[u"items_total"],\n+            len(results[u"items"]),\n+            "items_total property should match actual item count.",\n         )\n \n     def test_search_on_context_constrains_query_by_path(self):\n-        response = self.api_session.get(\'/folder/@search\')\n+        response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_search_in_vhm(self):\n         # Install a Virtual Host Monster\n-        if \'virtual_hosting\' not in self.app.objectIds():\n+        if "virtual_hosting" not in self.app.objectIds():\n             # If ZopeLite was imported, we have no default virtual\n             # host monster\n-            from Products.SiteAccess.VirtualHostMonster \\\n-                import manage_addVirtualHostMonster\n-            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+            from Products.SiteAccess.VirtualHostMonster import (\n+                manage_addVirtualHostMonster,\n+            )\n+\n+            manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n         # we don\'t get a result if we do not provide the full physical path\n-        response = self.api_session.get(\'/@search?path=/folder\',)\n+        response = self.api_session.get("/@search?path=/folder")\n         self.assertSetEqual(set(), set(result_paths(response.json())))\n \n         # If we go through the VHM will will get results if we only use\n         # the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search?path=/folder\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search?path=/folder",\n+        )\n         response = self.api_session.get(vhm_url)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\'},\n-            set(result_paths(response.json())))\n+            {u"/folder", u"/folder/doc", u"/folder/other-document"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_search_in_vhm_multiple_paths(self):\n         # Install a Virtual Host Monster\n-        if \'virtual_hosting\' not in self.app.objectIds():\n+        if "virtual_hosting" not in self.app.objectIds():\n             # If ZopeLite was imported, we have no default virtual\n             # host monster\n-            from Products.SiteAccess.VirtualHostMonster \\\n-                import manage_addVirtualHostMonster\n-            manage_addVirtualHostMonster(self.app, \'virtual_hosting\')\n+            from Products.SiteAccess.VirtualHostMonster import (\n+                manage_addVirtualHostMonster,\n+            )\n+\n+            manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n         # path as a list\n-        query = {\'path\': [\n-            \'/folder\',\n-            \'/folder2\']\n-        }\n+        query = {"path": ["/folder", "/folder2"]}\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search",\n+        )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\',\n-             u\'/folder2\',\n-             u\'/folder2/doc\'},\n-            set(result_paths(response.json())))\n+            {\n+                u"/folder",\n+                u"/folder/doc",\n+                u"/folder/other-document",\n+                u"/folder2",\n+                u"/folder2/doc",\n+            },\n+            set(result_paths(response.json())),\n+        )\n \n         # path as a dict with a query list\n-        query = {\'path.query\': [\n-            \'/folder\',\n-            \'/folder2\']\n-        }\n+        query = {"path.query": ["/folder", "/folder2"]}\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = (\n-            \'%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s\' %\n-            (self.app.absolute_url(), \'@search\'))\n+        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+            self.app.absolute_url(),\n+            "@search",\n+        )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n-            {u\'/folder\',\n-             u\'/folder/doc\',\n-             u\'/folder/other-document\',\n-             u\'/folder2\',\n-             u\'/folder2/doc\'},\n-            set(result_paths(response.json())))\n+            {\n+                u"/folder",\n+                u"/folder/doc",\n+                u"/folder/other-document",\n+                u"/folder2",\n+                u"/folder2/doc",\n+            },\n+            set(result_paths(response.json())),\n+        )\n \n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n-        response = self.api_session.get(\'/@search?path.depth=1\')\n+        response = self.api_session.get("/@search?path.depth=1")\n         self.assertSetEqual(\n-            {u\'/plone/folder\',\n-             u\'/plone/folder2\',\n-             u\'/plone/doc-outside-folder\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/folder", u"/plone/folder2", u"/plone/doc-outside-folder"},\n+            set(result_paths(response.json())),\n+        )\n \n     def test_partial_metadata_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertDictContainsSubset(\n-            {u\'@id\': self.portal_url + u\'/folder/doc\',\n-             u\'title\': u\'Lorem Ipsum\',\n-             u\'portal_type\': u\'DXTestDocument\',\n-             u\'review_state\': u\'private\'},\n-            response.json()[\'items\'][0])\n+            {\n+                u"@id": self.portal_url + u"/folder/doc",\n+                u"title": u"Lorem Ipsum",\n+                u"portal_type": u"DXTestDocument",\n+                u"review_state": u"private",\n+            },\n+            response.json()["items"][0],\n+        )\n \n     def test_full_metadata_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\', \'metadata_fields\': \'_all\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": "lorem", "metadata_fields": "_all"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        first_item = response.json()[\'items\'][0]\n+        first_item = response.json()["items"][0]\n         self.assertDictContainsSubset(\n-            {u\'@id\': self.portal_url + u\'/folder/doc\',\n-             u\'Creator\': u\'test_user_1_\',\n-             u\'Description\': u\'\',\n-             u\'EffectiveDate\': u\'None\',\n-             u\'ExpirationDate\': u\'None\',\n-             u\'Subject\': [],\n-             u\'Title\': u\'Lorem Ipsum\',\n-             u\'Type\': u\'DX Test Document\',\n-             u\'UID\': u\'77779ffa110e45afb1ba502f75f77777\',\n-             u\'author_name\': None,\n-             u\'cmf_uid\': None,\n-             u\'commentators\': [],\n-             u\'description\': u\'\',\n-             u\'effective\': u\'1995-01-01T00:00:00+00:00\',\n-             u\'end\': None,\n-             u\'exclude_from_nav\': False,\n-             u\'expires\': u\'1999-01-01T00:00:00+00:00\',\n-             u\'getId\': u\'doc\',\n-             u\'getPath\': u\'/plone/folder/doc\',\n-             u\'getRemoteUrl\': None,\n-             u\'getURL\': self.portal_url + u\'/folder/doc\',\n-             u\'id\': u\'doc\',\n-             u\'in_response_to\': None,\n-             u\'is_folderish\': False,\n-             u\'last_comment_date\': None,\n-             u\'listCreators\': [u\'test_user_1_\'],\n-             u\'location\': None,\n-             u\'meta_type\': u\'Dexterity Item\',\n-             u\'portal_type\': u\'DXTestDocument\',\n-             u\'review_state\': u\'private\',\n-             u\'start\': u\'1950-01-01T00:00:00+00:00\',\n-             u\'sync_uid\': None,\n-             u\'title\': u\'Lorem Ipsum\',\n-             u\'total_comments\': 0},\n-            first_item)\n+            {\n+                u"@id": self.portal_url + u"/folder/doc",\n+                u"Creator": u"test_user_1_",\n+                u"Description": u"",\n+                u"EffectiveDate": u"None",\n+                u"ExpirationDate": u"None",\n+                u"Subject": [],\n+                u"Title": u"Lorem Ipsum",\n+                u"Type": u"DX Test Document",\n+                u"UID": u"77779ffa110e45afb1ba502f75f77777",\n+                u"author_name": None,\n+                u"cmf_uid": None,\n+                u"commentators": [],\n+                u"description": u"",\n+                u"effective": u"1995-01-01T00:00:00+00:00",\n+                u"end": None,\n+                u"exclude_from_nav": False,\n+                u"expires": u"1999-01-01T00:00:00+00:00",\n+                u"getId": u"doc",\n+                u"getPath": u"/plone/folder/doc",\n+                u"getRemoteUrl": None,\n+                u"getURL": self.portal_url + u"/folder/doc",\n+                u"id": u"doc",\n+                u"in_response_to": None,\n+                u"is_folderish": False,\n+                u"last_comment_date": None,\n+                u"listCreators": [u"test_user_1_"],\n+                u"location": None,\n+                u"meta_type": u"Dexterity Item",\n+                u"portal_type": u"DXTestDocument",\n+                u"review_state": u"private",\n+                u"start": u"1950-01-01T00:00:00+00:00",\n+                u"sync_uid": None,\n+                u"title": u"Lorem Ipsum",\n+                u"total_comments": 0,\n+            },\n+            first_item,\n+        )\n         # This value changed in Plone 5.2\n         # (Dexterity gained support for getObjSize)\n-        self.assertIn(first_item[u\'getObjSize\'], (u\'0 KB\', u\'1 KB\'))\n+        self.assertIn(first_item[u"getObjSize"], (u"0 KB", u"1 KB"))\n \n     def test_full_objects_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\'],\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+            "fullobjects": True,\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            u\'<p>Some Text</p>\',\n-            response.json()[\'items\'][0][\'test_richtext_field\'][\'data\'])\n+            u"<p>Some Text</p>",\n+            response.json()["items"][0]["test_richtext_field"]["data"],\n+        )\n         self.assertEqual(\n-            self.portal_url + u\'/folder/doc\',\n-            response.json()[\'items\'][0][\'@id\'])\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+        )\n \n     def test_full_objects_retrieval_discussion(self):\n         # Allow discussion\n@@ -292,83 +306,69 @@ def test_full_objects_retrieval_discussion(self):\n \n         transaction.commit()\n \n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n-        self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        url = "{}/@comments".format(self.doc.absolute_url())\n+        self.api_session.post(url, json={"text": "comment 1"})\n         transaction.commit()\n \n-        query = {\'portal_type\': \'Discussion Item\',\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"portal_type": "Discussion Item", "fullobjects": True}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n-            self.folder, u\'Collection\',\n-            id=\'collection\',\n+            self.folder, u"Collection", id="collection"\n         )\n         transaction.commit()\n \n-        query = {\'portal_type\': \'Collection\',\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"portal_type": "Collection", "fullobjects": True}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n \n     # ZCTextIndex\n \n     def test_fulltext_search(self):\n-        query = {\'SearchableText\': \'lorem\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": "lorem"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_fulltext_search_with_non_ascii_characters(self):\n-        query = {\'SearchableText\': u\'\\xfcbersicht\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"SearchableText": u"\\xfcbersicht"}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # KeywordIndex\n \n     def test_keyword_index_str_query(self):\n-        query = {\'test_list_field\': \'Keyword1\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field": "Keyword1"}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_keyword_index_str_query_or(self):\n-        query = {\'test_list_field\': [\'Keyword2\', \'Keyword3\']}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field": ["Keyword2", "Keyword3"]}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            result_paths(response.json()),\n         )\n \n     def test_keyword_index_str_query_and(self):\n         query = {\n-            \'test_list_field.query\': [\'Keyword1\', \'Keyword2\'],\n-            \'test_list_field.operator\': \'and\',\n+            "test_list_field.query": ["Keyword1", "Keyword2"],\n+            "test_list_field.operator": "and",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n@@ -376,240 +376,207 @@ def test_keyword_index_int_query(self):\n         self.doc.reindexObject()\n         transaction.commit()\n \n-        query = {\'test_list_field:int\': 42}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_list_field:int": 42}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # BooleanIndex\n \n     def test_boolean_index_query(self):\n-        query = {\'test_bool_field\': True, \'portal_type\': \'DXTestDocument\'}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        query = {"test_bool_field": True, "portal_type": "DXTestDocument"}\n+        response = self.api_session.get("/folder/@search", params=query)\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n-        query = {\'test_bool_field\': False, \'portal_type\': \'DXTestDocument\'}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"test_bool_field": False, "portal_type": "DXTestDocument"}\n+        response = self.api_session.get("/folder/@search", params=query)\n         self.assertEqual(\n-            [u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # FieldIndex\n \n     def test_field_index_int_query(self):\n-        query = {\'test_int_field:int\': 42}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"test_int_field:int": 42}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_field_index_int_range_query(self):\n         query = {\n-            \'test_int_field.query:int\': [41, 43],\n-            \'test_int_field.range\': \'min:max\',\n+            "test_int_field.query:int": [41, 43],\n+            "test_int_field.range": "min:max",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # ExtendedPathIndex\n \n     def test_extended_path_index_query(self):\n-        query = {\'path\': \'/\'.join(self.folder.getPhysicalPath())}\n+        query = {"path": "/".join(self.folder.getPhysicalPath())}\n \n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\'],\n-            result_paths(response.json())\n+            [u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            result_paths(response.json()),\n         )\n \n     def test_extended_path_index_query_multiple(self):\n         # path as a list\n-        query = {\'path\': [\n-                \'/\'.join(self.folder.getPhysicalPath()),\n-                \'/\'.join(self.folder2.getPhysicalPath())]\n+        query = {\n+            "path": [\n+                "/".join(self.folder.getPhysicalPath()),\n+                "/".join(self.folder2.getPhysicalPath()),\n+            ]\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\',\n-             u\'/plone/folder2\',\n-             u\'/plone/folder2/doc\'],\n-            result_paths(response.json())\n+            [\n+                u"/plone/folder",\n+                u"/plone/folder/doc",\n+                u"/plone/folder/other-document",\n+                u"/plone/folder2",\n+                u"/plone/folder2/doc",\n+            ],\n+            result_paths(response.json()),\n         )\n \n         # path as a dict with a query list\n-        query = {\'path.query\': [\n-                \'/\'.join(self.folder.getPhysicalPath()),\n-                \'/\'.join(self.folder2.getPhysicalPath())]\n+        query = {\n+            "path.query": [\n+                "/".join(self.folder.getPhysicalPath()),\n+                "/".join(self.folder2.getPhysicalPath()),\n+            ]\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\',\n-             u\'/plone/folder/other-document\',\n-             u\'/plone/folder2\',\n-             u\'/plone/folder2/doc\'],\n-            result_paths(response.json())\n+            [\n+                u"/plone/folder",\n+                u"/plone/folder/doc",\n+                u"/plone/folder/other-document",\n+                u"/plone/folder2",\n+                u"/plone/folder2/doc",\n+            ],\n+            result_paths(response.json()),\n         )\n \n     def test_extended_path_index_depth_limiting(self):\n-        lvl1 = createContentInContainer(self.portal, u\'Folder\', id=u\'lvl1\')\n-        lvl2 = createContentInContainer(lvl1, u\'Folder\', id=u\'lvl2\')\n-        createContentInContainer(lvl2, u\'Folder\', id=u\'lvl3\')\n+        lvl1 = createContentInContainer(self.portal, u"Folder", id=u"lvl1")\n+        lvl2 = createContentInContainer(lvl1, u"Folder", id=u"lvl2")\n+        createContentInContainer(lvl2, u"Folder", id=u"lvl3")\n         transaction.commit()\n \n-        path = \'/plone/lvl1\'\n+        path = "/plone/lvl1"\n \n         # Depth 0 - only object identified by path\n-        query = {\'path.query\': path, \'path.depth\': 0}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path.query": path, "path.depth": 0}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/lvl1\'],\n-            result_paths(response.json()))\n+        self.assertEqual([u"/plone/lvl1"], result_paths(response.json()))\n \n         # Depth 1 - immediate children\n-        query = {\'path.query\': path, \'path.depth\': 1}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path.query": path, "path.depth": 1}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/lvl1/lvl2\'],\n-            result_paths(response.json()))\n+        self.assertEqual([u"/plone/lvl1/lvl2"], result_paths(response.json()))\n \n         # No depth - object itself and all children\n-        query = {\'path\': path}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"path": path}\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertSetEqual(\n-            {u\'/plone/lvl1\', u\'/plone/lvl1/lvl2\', u\'/plone/lvl1/lvl2/lvl3\'},\n-            set(result_paths(response.json())))\n+            {u"/plone/lvl1", u"/plone/lvl1/lvl2", u"/plone/lvl1/lvl2/lvl3"},\n+            set(result_paths(response.json())),\n+        )\n \n     # DateIndex\n \n     def test_date_index_query(self):\n-        query = {\'start\': date(1950, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {"start": date(1950, 1, 1).isoformat()}\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     def test_date_index_ranged_query(self):\n         query = {\n-            \'start.query\': [\n-                date(1949, 1, 1).isoformat(),\n-                date(1951, 1, 1).isoformat(),\n-            ],\n-            \'start.range\': \'min:max\',\n+            "start.query": [date(1949, 1, 1).isoformat(), date(1951, 1, 1).isoformat()],\n+            "start.range": "min:max",\n         }\n-        response = self.api_session.get(\'/@search\', params=query)\n+        response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n     # DateRangeIndex\n \n     def test_date_range_index_query(self):\n-        query = {\'effectiveRange\': date(1997, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"effectiveRange": date(1997, 1, 1).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder\',\n-             u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual(2, len(result_paths(response.json())))\n+        self.assertTrue(u"/plone/folder" in result_paths(response.json()))\n+        self.assertTrue(u"/plone/folder/doc" in result_paths(response.json()))\n \n     # DateRecurringIndex\n \n     def test_date_recurring_index_query(self):\n         from datetime import datetime\n+\n         createContentInContainer(\n-            self.folder, u\'Event\', id=u\'event\',\n-            title=u\'Event\',\n+            self.folder,\n+            u"Event",\n+            id=u"event",\n+            title=u"Event",\n             start=datetime(2013, 1, 1, 0, 0),\n             end=datetime(2013, 1, 1, 23, 59),\n             whole_day=True,\n-            recurrence=\'FREQ=DAILY;COUNT=10;INTERVAL=2\',\n-            timezone=\'UTC\',\n+            recurrence="FREQ=DAILY;COUNT=10;INTERVAL=2",\n+            timezone="UTC",\n         )\n         import transaction\n+\n         transaction.commit()\n \n         # First occurrence\n-        query = {\'start\': date(2013, 1, 1).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 1).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # No event that day\n-        query = {\'start\': date(2013, 1, 2).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 2).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([], result_paths(response.json()))\n \n         # Second occurrence\n-        query = {\'start\': date(2013, 1, 3).isoformat()}\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        query = {"start": date(2013, 1, 3).isoformat()}\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n         # Ranged query\n         query = {\n-            \'start.query\': [date(2013, 1, 1).isoformat(),\n-                            date(2013, 1, 5).isoformat()],\n-            \'start.range\': \'min:max\',\n+            "start.query": [date(2013, 1, 1).isoformat(), date(2013, 1, 5).isoformat()],\n+            "start.range": "min:max",\n         }\n-        response = self.api_session.get(\'/folder/@search\', params=query)\n+        response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual(\n-            [u\'/plone/folder/event\'],\n-            result_paths(response.json())\n-        )\n+        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n \n     # UUIDIndex\n \n     def test_uuid_index_query(self):\n-        IMutableUUID(self.doc).set(\'7777a074cb4240d08c9a129e3a837777\')\n+        IMutableUUID(self.doc).set("7777a074cb4240d08c9a129e3a837777")\n         self.doc.reindexObject()\n         transaction.commit()\n \n-        query = {\'UID\': \'7777a074cb4240d08c9a129e3a837777\'}\n-        response = self.api_session.get(\'/@search\', params=query)\n-        self.assertEqual(\n-            [u\'/plone/folder/doc\'],\n-            result_paths(response.json())\n-        )\n+        query = {"UID": "7777a074cb4240d08c9a129e3a837777"}\n+        response = self.api_session.get("/@search", params=query)\n+        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n \n \n class TestSearchATFunctional(unittest.TestCase):\n@@ -617,74 +584,77 @@ class TestSearchATFunctional(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # /plone/folder\n-        with api.env.adopt_roles([\'Manager\']):\n+        with api.env.adopt_roles(["Manager"]):\n             self.folder = api.content.create(\n-                type=u\'ATTestFolder\',\n-                id=u\'folder\',\n-                title=u\'Some Folder\',\n+                type=u"ATTestFolder",\n+                id=u"folder",\n+                title=u"Some Folder",\n                 container=self.portal,\n             )\n \n             # /plone/folder/doc\n             self.doc = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                id=\'doc\',\n-                title=u\'Lorem Ipsum\',\n+                type=u"ATTestDocument",\n+                id="doc",\n+                title=u"Lorem Ipsum",\n                 start=DateTime(1950, 1, 1, 0, 0),\n                 effective=DateTime(1995, 1, 1, 0, 0),\n                 expires=DateTime(1999, 1, 1, 0, 0),\n                 testIntegerField=42,\n-                testLinesField=[\'Keyword1\', \'Keyword2\', \'Keyword3\'],\n+                testLinesField=["Keyword1", "Keyword2", "Keyword3"],\n                 testBooleanField=True,\n-                testTextField=u\'<p>Some Text</p>\',\n+                testTextField=u"<p>Some Text</p>",\n             )\n \n             # /plone/folder/other-document\n             self.doc2 = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                id=\'other-document\',\n-                title=u\'Other Document\',\n-                description=u\'\\xdcbersicht\',\n+                type=u"ATTestDocument",\n+                id="other-document",\n+                title=u"Other Document",\n+                description=u"\\xdcbersicht",\n                 start=DateTime(1975, 1, 1, 0, 0),\n                 effective=DateTime(2015, 1, 1, 0, 0),\n                 expires=DateTime(2020, 1, 1, 0, 0),\n-                testLinesField=[\'Keyword2\', \'Keyword3\'],\n+                testLinesField=["Keyword2", "Keyword3"],\n                 testBooleanField=False,\n             )\n \n             # /plone/doc-outside-folder\n             api.content.create(\n                 container=self.portal,\n-                type=u\'ATTestDocument\',\n-                id=\'doc-outside-folder\',\n-                title=u\'Doc outside folder\',\n+                type=u"ATTestDocument",\n+                id="doc-outside-folder",\n+                title=u"Doc outside folder",\n             )\n \n         transaction.commit()\n \n     def test_full_objects_retrieval(self):\n-        query = {\'SearchableText\': \'lorem\',\n-                 \'metadata_fields\': [\'portal_type\', \'review_state\'],\n-                 \'fullobjects\': True}\n-        response = self.api_session.get(\'/@search\', params=query)\n+        query = {\n+            "SearchableText": "lorem",\n+            "metadata_fields": ["portal_type", "review_state"],\n+            "fullobjects": True,\n+        }\n+        response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            {u\'data\': u\' Some Text \', u\'content-type\': u\'text/plain\'},\n-            response.json()[\'items\'][0][\'testTextField\'])\n+            {u"data": u" Some Text ", u"content-type": u"text/plain"},\n+            response.json()["items"][0]["testTextField"],\n+        )\n         self.assertEqual(\n-            self.portal_url + u\'/folder/doc\',\n-            response.json()[\'items\'][0][\'@id\'])\n+            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+        )\ndiff --git a/src/plone/restapi/tests/test_search_utils.py b/src/plone/restapi/tests/test_search_utils.py\nindex 65a92378..7de60ce9 100644\n--- a/src/plone/restapi/tests/test_search_utils.py\n+++ b/src/plone/restapi/tests/test_search_utils.py\n@@ -5,36 +5,22 @@\n \n \n class TestUnflattenDottedDict(unittest.TestCase):\n-\n     def test_unflattens_dotted_dict(self):\n-        dct = {\n-            \'a.b.X\': 1,\n-            \'a.b.Y\': 2,\n-            \'a.foo\': 3,\n-            \'bar\': 4,\n-        }\n+        dct = {"a.b.X": 1, "a.b.Y": 2, "a.foo": 3, "bar": 4}\n         self.assertEqual(\n-            {\'a\': {\'b\': {\'X\': 1,\n-                         \'Y\': 2},\n-                   \'foo\': 3},\n-             \'bar\': 4},\n-            unflatten_dotted_dict(dct)\n+            {"a": {"b": {"X": 1, "Y": 2}, "foo": 3}, "bar": 4},\n+            unflatten_dotted_dict(dct),\n         )\n \n     def test_works_on_empty_dict(self):\n         self.assertEqual({}, unflatten_dotted_dict({}))\n \n     def test_works_with_list_values(self):\n-        dct = {\n-            \'path.query\': [\'foo\', \'bar\'],\n-            \'path.depth\': 2,\n-        }\n+        dct = {"path.query": ["foo", "bar"], "path.depth": 2}\n         self.assertEqual(\n-            {\'path\': {\'query\': [\'foo\', \'bar\'],\n-                      \'depth\': 2}},\n-            unflatten_dotted_dict(dct)\n+            {"path": {"query": ["foo", "bar"], "depth": 2}}, unflatten_dotted_dict(dct)\n         )\n \n     def test_leaves_regular_keys_untouched(self):\n-        dct = {\'foo\': 1, \'bar\': 2}\n+        dct = {"foo": 1, "bar": 2}\n         self.assertEqual(dct, unflatten_dotted_dict(dct))\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 6d1748e1..2b529399 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -22,401 +22,333 @@ class TestSerializeToJsonAdapter(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.workflowTool = getToolByName(self.portal, "portal_workflow")\n         self.portal_url = self.portal.absolute_url()\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\', title=\'Document 1\')\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n         self.portal.invokeFactory(\n-            \'DXTestDocument\',\n-            id=\'dxdoc\',\n-            title=\'DX Test Document\'\n+            "DXTestDocument", id="dxdoc", title="DX Test Document"\n         )\n \n     def serialize(self, obj):\n-        serializer = getMultiAdapter((obj, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'@id\'],\n-            self.portal_url + \'/doc1\'\n+            self.serialize(self.portal.doc1)["@id"], self.portal_url + "/doc1"\n         )\n \n     def test_serialize_returns_type(self):\n         self.assertTrue(\n-            self.serialize(self.portal.doc1).get(\'@type\'),\n-            \'The @type attribute should be present.\'\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'@type\'],\n-            u\'Document\'\n+            self.serialize(self.portal.doc1).get("@type"),\n+            "The @type attribute should be present.",\n         )\n+        self.assertEqual(self.serialize(self.portal.doc1)["@type"], u"Document")\n \n     def test_serialize_returns_title(self):\n-        self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'title\'],\n-            u\'Document 1\'\n-        )\n+        self.assertEqual(self.serialize(self.portal.doc1)["title"], u"Document 1")\n \n     def test_serialize_can_read_as_manager(self):\n-        self.portal.dxdoc.test_read_permission_field = u\'Test Read Permission\'\n-        self.workflowTool.doActionFor(self.portal.dxdoc, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\', \'Manager\'])\n+        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.assertIn(\n-            \'Test Read Permission\',\n-            list(self.serialize(self.portal.dxdoc).values())\n+            "Test Read Permission", list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n-        self.portal.dxdoc.test_read_permission_field = u\'Test Read Permission\'\n-        self.workflowTool.doActionFor(self.portal.dxdoc, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertNotIn(\n-            \'Test Read Permission\',\n-            list(self.serialize(self.portal.dxdoc).values())\n+            "Test Read Permission", list(self.serialize(self.portal.dxdoc).values())\n         )\n \n     def test_serialize_returns_desciption(self):\n-        self.portal.doc1.description = u\'This is a document\'\n+        self.portal.doc1.description = u"This is a document"\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'description\'],\n-            u\'This is a document\'\n+            self.serialize(self.portal.doc1)["description"], u"This is a document"\n         )\n \n     def test_serialize_returns_rich_text(self):\n         self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum.",\n-            \'text/plain\',\n-            \'text/html\'\n+            u"Lorem ipsum.", "text/plain", "text/html"\n         )\n         self.assertEqual(\n-            self.serialize(self.portal.doc1).get(\'text\'),\n-            {u\'data\': u\'<p>Lorem ipsum.</p>\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'encoding\': u\'utf-8\'}\n+            self.serialize(self.portal.doc1).get("text"),\n+            {\n+                u"data": u"<p>Lorem ipsum.</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n+            },\n         )\n \n     def test_serialize_returns_effective(self):\n-        self.portal.doc1.setEffectiveDate(DateTime(\'2014/04/04\'))\n+        self.portal.doc1.setEffectiveDate(DateTime("2014/04/04"))\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'effective\'],\n-            \'2014-04-04T00:00:00\'\n+            self.serialize(self.portal.doc1)["effective"], "2014-04-04T00:00:00"\n         )\n \n     def test_serialize_returns_expires(self):\n-        self.portal.doc1.setExpirationDate(DateTime(\'2017/01/01\'))\n+        self.portal.doc1.setExpirationDate(DateTime("2017/01/01"))\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)[\'expires\'],\n-            \'2017-01-01T00:00:00\'\n+            self.serialize(self.portal.doc1)["expires"], "2017-01-01T00:00:00"\n         )\n \n     def test_serialize_on_folder_returns_items_attr(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\', title=\'Folder 1\')\n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.folder1.doc1.title = u\'Document 1\'\n-        self.portal.folder1.doc1.description = u\'This is a document\'\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1")\n+        self.portal.folder1.doc1.title = u"Document 1"\n+        self.portal.folder1.doc1.description = u"This is a document"\n         self.portal.folder1.doc1.reindexObject()\n         self.assertEqual(\n-            self.serialize(self.portal.folder1)[\'items\'],\n+            self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'This is a document\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/folder1/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"This is a document",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 }\n-            ]\n+            ],\n         )\n \n-    def test_serialize_folder_orders_items_by_get_object_position_in_parent(self):  # noqa\n-        self.portal.invokeFactory(\'Folder\', id=\'folder1\', title=\'Folder 1\')\n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc1\')\n-        self.portal.folder1.doc1.title = u\'Document 1\'\n-        self.portal.folder1.doc1.description = u\'This is a document\'\n+    def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n+        self\n+    ):  # noqa\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+        self.portal.folder1.invokeFactory("Document", id="doc1")\n+        self.portal.folder1.doc1.title = u"Document 1"\n+        self.portal.folder1.doc1.description = u"This is a document"\n         self.portal.folder1.doc1.reindexObject()\n \n-        self.portal.folder1.invokeFactory(\'Document\', id=\'doc2\')\n-        self.portal.folder1.doc2.title = u\'Document 2\'\n-        self.portal.folder1.doc2.description = u\'Second doc\'\n+        self.portal.folder1.invokeFactory("Document", id="doc2")\n+        self.portal.folder1.doc2.title = u"Document 2"\n+        self.portal.folder1.doc2.description = u"Second doc"\n         self.portal.folder1.doc2.reindexObject()\n \n         # Change GOPIP (getObjectPositionInParent) based order\n-        self.portal.folder1.moveObjectsUp(\'doc2\')\n+        self.portal.folder1.moveObjectsUp("doc2")\n \n         self.assertEqual(\n-            self.serialize(self.portal.folder1)[\'items\'],\n+            self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc2\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'Second doc\',\n-                    u\'title\': u\'Document 2\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/folder1/doc2",\n+                    u"@type": u"Document",\n+                    u"description": u"Second doc",\n+                    u"title": u"Document 2",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': u\'http://nohost/plone/folder1/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'This is a document\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n-                }\n-            ]\n+                    u"@id": u"http://nohost/plone/folder1/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"This is a document",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n+                },\n+            ],\n         )\n \n     def test_serialize_returns_parent(self):\n         self.assertTrue(\n-            self.serialize(self.portal.doc1).get(\'parent\'),\n-            \'The parent attribute should be present.\'\n+            self.serialize(self.portal.doc1).get("parent"),\n+            "The parent attribute should be present.",\n         )\n         self.assertEqual(\n             {\n-                \'@id\': self.portal.absolute_url(),\n-                \'@type\': self.portal.portal_type,\n-                \'title\': self.portal.title,\n-                \'description\': self.portal.description\n+                "@id": self.portal.absolute_url(),\n+                "@type": self.portal.portal_type,\n+                "title": self.portal.title,\n+                "description": self.portal.description,\n             },\n-            self.serialize(self.portal.doc1)[\'parent\']\n+            self.serialize(self.portal.doc1)["parent"],\n         )\n \n     def test_serialize_does_not_returns_parent_on_root(self):\n         self.assertEqual(\n             {},\n-            self.serialize(self.portal).get(\'parent\'),\n-            \'The parent attribute should be present, even on portal root.\'\n+            self.serialize(self.portal).get("parent"),\n+            "The parent attribute should be present, even on portal root.",\n         )\n         self.assertEqual(\n             {\n-                \'@id\': self.portal.absolute_url(),\n-                \'@type\': self.portal.portal_type,\n-                \'title\': self.portal.title,\n-                \'description\': self.portal.description\n+                "@id": self.portal.absolute_url(),\n+                "@type": self.portal.portal_type,\n+                "title": self.portal.title,\n+                "description": self.portal.description,\n             },\n-            self.serialize(self.portal.doc1)[\'parent\'],\n-            \'The parent attribute on portal root should be None\'\n+            self.serialize(self.portal.doc1)["parent"],\n+            "The parent attribute on portal root should be None",\n         )\n \n     def test_serialize_returns_site_root_type(self):\n         self.assertTrue(\n-            self.serialize(self.portal).get(\'@type\'),\n-            \'The @type attribute should be present.\'\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'@type\'],\n-            u\'Plone Site\'\n+            self.serialize(self.portal).get("@type"),\n+            "The @type attribute should be present.",\n         )\n+        self.assertEqual(self.serialize(self.portal)["@type"], u"Plone Site")\n \n     def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  # noqa\n         # Change GOPIP (getObjectPositionInParent) based order\n-        self.portal.moveObjectsUp(\'dxdoc\')\n+        self.portal.moveObjectsUp("dxdoc")\n \n         self.assertEqual(\n-            self.serialize(self.portal)[\'items\'],\n+            self.serialize(self.portal)["items"],\n             [\n                 {\n-                    u\'@id\': u\'http://nohost/plone/dxdoc\',\n-                    u\'@type\': u\'DXTestDocument\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'DX Test Document\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/dxdoc",\n+                    u"@type": u"DXTestDocument",\n+                    u"description": u"",\n+                    u"title": u"DX Test Document",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': u\'http://nohost/plone/doc1\',\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": u"http://nohost/plone/doc1",\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 },\n-            ]\n+            ],\n         )\n \n     def test_serialize_ignores_underscore_values(self):\n-        self.assertFalse(\n-            \'__name__\' in self.serialize(self.portal.doc1)\n-        )\n-        self.assertFalse(\n-            \'manage_options\' in self.serialize(self.portal.doc1)\n-        )\n+        self.assertFalse("__name__" in self.serialize(self.portal.doc1))\n+        self.assertFalse("manage_options" in self.serialize(self.portal.doc1))\n \n     def test_serialize_file(self):\n-        self.portal.invokeFactory(\'File\', id=\'file1\', title=\'File 1\')\n+        self.portal.invokeFactory("File", id="file1", title="File 1")\n         self.portal.file1.file = NamedFile(\n-            data=u\'Spam and eggs\',\n-            contentType=u\'text/plain\',\n-            filename=u\'test.txt\')\n+            data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+        )\n \n         file_url = self.portal.file1.absolute_url()\n-        download_url = \'{0}/@@download/file\'.format(file_url)\n+        download_url = "{0}/@@download/file".format(file_url)\n         self.assertEqual(\n-            {u\'filename\': u\'test.txt\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'download\': download_url,\n-             u\'size\': 13},\n-            self.serialize(self.portal.file1).get(\'file\')\n+            {\n+                u"filename": u"test.txt",\n+                u"content-type": u"text/plain",\n+                u"download": download_url,\n+                u"size": 13,\n+            },\n+            self.serialize(self.portal.file1).get("file"),\n         )\n \n     def test_serialize_empty_file_returns_none(self):\n-        self.portal.invokeFactory(\'File\', id=\'file1\', title=\'File 1\')\n+        self.portal.invokeFactory("File", id="file1", title="File 1")\n \n-        self.assertEqual(None, self.serialize(self.portal.file1).get(\'file\'))\n+        self.assertEqual(None, self.serialize(self.portal.file1).get("file"))\n \n     def test_serialize_image(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="image1", title="Image 1")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n \n         self.maxDiff = 99999\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid_1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid_1"):\n             obj_url = self.portal.image1.absolute_url()\n-            scale_url_uuid = \'uuid_1\'\n-            download_url = u\'{}/@@images/{}.png\'.format(\n-                obj_url, scale_url_uuid\n-            )\n+            scale_url_uuid = "uuid_1"\n+            download_url = u"{}/@@images/{}.png".format(obj_url, scale_url_uuid)\n             scales = {\n-                u\'listing\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 16,\n-                    u\'height\': 4},\n-                u\'icon\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 32,\n-                    u\'height\': 8},\n-                u\'tile\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 64,\n-                    u\'height\': 16},\n-                u\'thumb\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 128,\n-                    u\'height\': 33},\n-                u\'mini\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 200,\n-                    u\'height\': 52},\n-                u\'preview\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 215,\n-                    u\'height\': 56},\n-                u\'large\': {\n-                    u\'download\': download_url,\n-                    u\'width\': 215,\n-                    u\'height\': 56},\n+                u"listing": {u"download": download_url, u"width": 16, u"height": 4},\n+                u"icon": {u"download": download_url, u"width": 32, u"height": 8},\n+                u"tile": {u"download": download_url, u"width": 64, u"height": 16},\n+                u"thumb": {u"download": download_url, u"width": 128, u"height": 33},\n+                u"mini": {u"download": download_url, u"width": 200, u"height": 52},\n+                u"preview": {u"download": download_url, u"width": 215, u"height": 56},\n+                u"large": {u"download": download_url, u"width": 215, u"height": 56},\n             }\n-            self.assertEqual({\n-                u\'filename\': u\'image.png\',\n-                u\'content-type\': u\'image/png\',\n-                u\'size\': 1185,\n-                u\'download\': download_url,\n-                u\'width\': 215,\n-                u\'height\': 56,\n-                u\'scales\': scales},\n-                self.serialize(self.portal.image1)[\'image\'])\n+            self.assertEqual(\n+                {\n+                    u"filename": u"image.png",\n+                    u"content-type": u"image/png",\n+                    u"size": 1185,\n+                    u"download": download_url,\n+                    u"width": 215,\n+                    u"height": 56,\n+                    u"scales": scales,\n+                },\n+                self.serialize(self.portal.image1)["image"],\n+            )\n \n     def test_serialize_empty_image_returns_none(self):\n-        self.portal.invokeFactory(\'Image\', id=\'image1\', title=\'Image 1\')\n-        self.assertEqual(None, self.serialize(self.portal.image1)[\'image\'])\n+        self.portal.invokeFactory("Image", id="image1", title="Image 1")\n+        self.assertEqual(None, self.serialize(self.portal.image1)["image"])\n \n     def test_serialize_to_json_collection(self):\n-        self.portal.invokeFactory(\'Collection\', id=\'collection1\')\n-        self.portal.collection1.title = \'My Collection\'\n-        self.portal.collection1.description = \\\n-            u\'This is a collection with two documents\'\n-        self.portal.collection1.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Document\',\n-        }]\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc2\',\n-            title=\'Document 2\'\n-        )\n+        self.portal.invokeFactory("Collection", id="collection1")\n+        self.portal.collection1.title = "My Collection"\n+        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n         self.portal.doc1.reindexObject()\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u\'Collection\',\n-            self.serialize(self.portal.collection1).get(\'@type\')\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u\'Collection\',\n-            self.serialize(self.portal.collection1).get(\'@type\')\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal.doc1.absolute_url(),\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 1\',\n-                    u\'review_state\': u\'private\'\n+                    u"@id": self.portal.doc1.absolute_url(),\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 1",\n+                    u"review_state": u"private",\n                 },\n                 {\n-                    u\'@id\': self.portal.doc2.absolute_url(),\n-                    u\'@type\': u\'Document\',\n-                    u\'description\': u\'\',\n-                    u\'title\': u\'Document 2\',\n-                    u\'review_state\': u\'private\'\n-                }\n+                    u"@id": self.portal.doc2.absolute_url(),\n+                    u"@type": u"Document",\n+                    u"description": u"",\n+                    u"title": u"Document 2",\n+                    u"review_state": u"private",\n+                },\n             ],\n-            self.serialize(self.portal.collection1).get(\'items\')\n+            self.serialize(self.portal.collection1).get("items"),\n         )\n \n     def test_serialize_returns_site_root_common(self):\n-        self.assertIn(\n-            \'title\',\n-            self.serialize(self.portal),\n-        )\n-        self.assertIn(\n-            \'description\',\n-            self.serialize(self.portal)\n-        )\n+        self.assertIn("title", self.serialize(self.portal))\n+        self.assertIn("description", self.serialize(self.portal))\n \n     def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles\'],\n-            {}\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles_layout\'],\n-            {}\n-        )\n+        self.assertEqual(self.serialize(self.portal)["tiles"], {})\n+        self.assertEqual(self.serialize(self.portal)["tiles_layout"], {})\n \n     def test_serialize_returns_site_root_opt_in_tiles_present(self):\n         tiles = {\n-            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n-                "@type": "description"\n-            },\n-            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n-                "@type": "title"\n-            }\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n         tiles_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n-                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n             ]\n         }\n+        self.portal.manage_addProperty("tiles", json.dumps(tiles), "string")\n         self.portal.manage_addProperty(\n-            \'tiles\', json.dumps(tiles), \'string\')\n-        self.portal.manage_addProperty(\n-            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n-\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles\'],\n-            tiles\n-        )\n-        self.assertEqual(\n-            self.serialize(self.portal)[\'tiles_layout\'],\n-            tiles_layout\n+            "tiles_layout", json.dumps(tiles_layout), "string"\n         )\n+\n+        self.assertEqual(self.serialize(self.portal)["tiles"], tiles)\n+        self.assertEqual(self.serialize(self.portal)["tiles_layout"], tiles_layout)\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex a873dd8a..e8c64311 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -19,158 +19,173 @@ class TestCatalogSerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         # /plone/my-folder\n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            title=u\'My Folder\')\n+            self.portal, u"Folder", title=u"My Folder"\n+        )\n \n         # /plone/my-folder/my-document\n         self.doc = createContentInContainer(\n-            self.folder, u\'Document\',\n+            self.folder,\n+            u"Document",\n             creation_date=DateTime(2015, 12, 31, 23, 45),\n-            title=u\'My Document\')\n+            title=u"My Document",\n+        )\n \n-        IMutableUUID(self.doc).set(\'77779ffa110e45afb1ba502f75f77777\')\n+        IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n         self.doc.reindexObject()\n \n     def test_lazy_cat_serialization_empty_resultset(self):\n         # Force an empty resultset (Products.ZCatalog.Lazy.LazyCat)\n-        lazy_cat = self.catalog(path=\'doesnt-exist\')\n+        lazy_cat = self.catalog(path="doesnt-exist")\n         results = getMultiAdapter((lazy_cat, self.request), ISerializeToJson)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost\', \'items\': [], \'items_total\': 0},\n-            results)\n+            {"@id": "http://nohost", "items": [], "items_total": 0}, results\n+        )\n \n     def test_lazy_map_serialization(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n         lazy_map = self.catalog()\n         results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 2}, results)\n-        self.assertEqual(2, len(results[\'items\']))\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 2}, results)\n+        self.assertEqual(2, len(results["items"]))\n \n     def test_lazy_map_serialization_with_fullobjects(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n-        results = getMultiAdapter(\n-            (lazy_map, self.request), ISerializeToJson)(fullobjects=True)\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)(\n+            fullobjects=True\n+        )\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 1}, results)\n-        self.assertEqual(1, len(results[\'items\']))\n-        result_item = results[\'items\'][0]\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 1}, results)\n+        self.assertEqual(1, len(results["items"]))\n+        result_item = results["items"][0]\n \n-        self.assertDictContainsSubset({\n-            \'@id\': \'http://nohost/plone/my-folder/my-document\',\n-            \'@type\': \'Document\',\n-            u\'changeNote\': u\'\',\n-            u\'contributors\': [],\n-            u\'creators\': [u\'test_user_1_\'],\n-            u\'description\': u\'\',\n-            u\'effective\': None,\n-            u\'exclude_from_nav\': False,\n-            u\'expires\': None,\n-            \'id\': u\'my-document\',\n-            \'is_folderish\': False,\n-            u\'language\': u\'\',\n-            \'layout\': \'document_view\',\n-            \'parent\': {\n-                u\'@id\': u\'http://nohost/plone/my-folder\',\n-                u\'@type\': u\'Folder\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'private\',\n-                u\'title\': u\'My Folder\'},\n-            u\'relatedItems\': [],\n-            \'review_state\': \'private\',\n-            u\'rights\': u\'\',\n-            u\'subjects\': [],\n-            u\'table_of_contents\': None,\n-            u\'text\': None,\n-            u\'title\': u\'My Document\',\n-            \'version\': \'current\'},\n-            result_item)\n+        self.assertDictContainsSubset(\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                u"changeNote": u"",\n+                u"contributors": [],\n+                u"creators": [u"test_user_1_"],\n+                u"description": u"",\n+                u"effective": None,\n+                u"exclude_from_nav": False,\n+                u"expires": None,\n+                "id": u"my-document",\n+                "is_folderish": False,\n+                u"language": u"",\n+                "layout": "document_view",\n+                "parent": {\n+                    u"@id": u"http://nohost/plone/my-folder",\n+                    u"@type": u"Folder",\n+                    u"description": u"",\n+                    u"review_state": u"private",\n+                    u"title": u"My Folder",\n+                },\n+                u"relatedItems": [],\n+                "review_state": "private",\n+                u"rights": u"",\n+                u"subjects": [],\n+                u"table_of_contents": None,\n+                u"text": None,\n+                u"title": u"My Document",\n+                "version": "current",\n+            },\n+            result_item,\n+        )\n \n     def test_brain_summary_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        result = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'@type\': \'Document\',\n-             \'title\': \'My Document\',\n-             \'description\': \'\',\n-             \'review_state\': \'private\'},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                "title": "My Document",\n+                "description": "",\n+                "review_state": "private",\n+            },\n+            result,\n+        )\n \n     def test_brain_partial_metadata_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request),\n-            ISerializeToJson)(metadata_fields=[\'portal_type\', \'review_state\'])\n+        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+            metadata_fields=["portal_type", "review_state"]\n+        )\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'@type\': \'Document\',\n-             \'title\': \'My Document\',\n-             \'description\': \'\',\n-             \'portal_type\': u\'Document\',\n-             \'review_state\': u\'private\'},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "Document",\n+                "title": "My Document",\n+                "description": "",\n+                "portal_type": u"Document",\n+                "review_state": u"private",\n+            },\n+            result,\n+        )\n \n     def test_brain_full_metadata_representation(self):\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n         brain = lazy_map[0]\n-        result = getMultiAdapter(\n-            (brain, self.request),\n-            ISerializeToJson)(metadata_fields=[\'_all\'])\n+        result = getMultiAdapter((brain, self.request), ISerializeToJson)(\n+            metadata_fields=["_all"]\n+        )\n \n         self.assertDictContainsSubset(\n-            {\'@id\': \'http://nohost/plone/my-folder/my-document\',\n-             \'Creator\': u\'test_user_1_\',\n-             \'Description\': u\'\',\n-             \'EffectiveDate\': u\'None\',\n-             \'ExpirationDate\': u\'None\',\n-             \'Subject\': [],\n-             \'Title\': u\'My Document\',\n-             \'Type\': u\'Page\',\n-             \'UID\': u\'77779ffa110e45afb1ba502f75f77777\',\n-             \'author_name\': None,\n-             \'cmf_uid\': 1,\n-             \'commentators\': [],\n-             \'created\': u\'2015-12-31T23:45:00+00:00\',\n-             \'description\': \'\',\n-             \'effective\': u\'1969-12-31T00:00:00+00:00\',\n-             \'end\': None,\n-             \'exclude_from_nav\': False,\n-             \'expires\': u\'2499-12-31T00:00:00+00:00\',\n-             \'getId\': u\'my-document\',\n-             \'getObjSize\': u\'0 KB\',\n-             \'getPath\': \'/plone/my-folder/my-document\',\n-             \'getRemoteUrl\': None,\n-             \'getURL\': \'http://nohost/plone/my-folder/my-document\',\n-             \'id\': u\'my-document\',\n-             \'in_response_to\': None,\n-             \'is_folderish\': False,\n-             \'last_comment_date\': None,\n-             \'listCreators\': [u\'test_user_1_\'],\n-             \'location\': None,\n-             \'meta_type\': u\'Dexterity Item\',\n-             \'portal_type\': u\'Document\',\n-             \'review_state\': u\'private\',\n-             \'start\': None,\n-             \'sync_uid\': None,\n-             \'title\': \'My Document\',\n-             \'total_comments\': 0},\n-            result)\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "Creator": u"test_user_1_",\n+                "Description": u"",\n+                "EffectiveDate": u"None",\n+                "ExpirationDate": u"None",\n+                "Subject": [],\n+                "Title": u"My Document",\n+                "Type": u"Page",\n+                "UID": u"77779ffa110e45afb1ba502f75f77777",\n+                "author_name": None,\n+                "cmf_uid": 1,\n+                "commentators": [],\n+                "created": u"2015-12-31T23:45:00+00:00",\n+                "description": "",\n+                "effective": u"1969-12-31T00:00:00+00:00",\n+                "end": None,\n+                "exclude_from_nav": False,\n+                "expires": u"2499-12-31T00:00:00+00:00",\n+                "getId": u"my-document",\n+                "getObjSize": u"0 KB",\n+                "getPath": "/plone/my-folder/my-document",\n+                "getRemoteUrl": None,\n+                "getURL": "http://nohost/plone/my-folder/my-document",\n+                "id": u"my-document",\n+                "in_response_to": None,\n+                "is_folderish": False,\n+                "last_comment_date": None,\n+                "listCreators": [u"test_user_1_"],\n+                "location": None,\n+                "meta_type": u"Dexterity Item",\n+                "portal_type": u"Document",\n+                "review_state": u"private",\n+                "start": None,\n+                "sync_uid": None,\n+                "title": "My Document",\n+                "total_comments": 0,\n+            },\n+            result,\n+        )\n \n \n class TestCatalogATSerializers(unittest.TestCase):\n@@ -179,82 +194,85 @@ class TestCatalogATSerializers(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.request = self.portal.REQUEST\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n-        with api.env.adopt_roles([\'Manager\']):\n+        with api.env.adopt_roles(["Manager"]):\n             # /plone/my-folder\n             self.folder = api.content.create(\n-                container=self.portal,\n-                type=u\'ATTestFolder\',\n-                title=u\'My Folder\')\n+                container=self.portal, type=u"ATTestFolder", title=u"My Folder"\n+            )\n \n             # /plone/my-folder/my-document\n             self.doc = api.content.create(\n                 container=self.folder,\n-                type=u\'ATTestDocument\',\n-                testTextField=\'My content\',\n+                type=u"ATTestDocument",\n+                testTextField="My content",\n                 testIntegerField=42,\n-                title=u\'My Document\')\n+                title=u"My Document",\n+            )\n \n     def test_lazy_map_serialization_with_fullobjects(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n-        lazy_map = self.catalog(path=\'/plone/my-folder/my-document\')\n-        results = getMultiAdapter(\n-            (lazy_map, self.request), ISerializeToJson)(fullobjects=True)\n+        lazy_map = self.catalog(path="/plone/my-folder/my-document")\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)(\n+            fullobjects=True\n+        )\n \n-        self.assertDictContainsSubset({\'@id\': \'http://nohost\'}, results)\n-        self.assertDictContainsSubset({\'items_total\': 1}, results)\n-        self.assertEqual(1, len(results[\'items\']))\n-        result_item = results[\'items\'][0]\n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 1}, results)\n+        self.assertEqual(1, len(results["items"]))\n+        result_item = results["items"][0]\n \n-        self.assertDictContainsSubset({\n-            \'@id\': \'http://nohost/plone/my-folder/my-document\',\n-            \'@type\': \'ATTestDocument\',\n-            \'contributors\': [],\n-            \'creators\': [u\'test_user_1_\'],\n-            \'description\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'effectiveDate\': None,\n-            \'excludeFromNav\': False,\n-            \'expirationDate\': None,\n-            \'id\': u\'my-document\',\n-            \'is_folderish\': False,\n-            \'language\': u\'en\',\n-            \'layout\': \'base_view\',\n-            \'location\': u\'\',\n-            \'parent\': {\n-                u\'@id\': u\'http://nohost/plone/my-folder\',\n-                u\'@type\': u\'ATTestFolder\',\n-                u\'description\': u\'\',\n-                u\'review_state\': u\'private\',\n-                u\'title\': u\'My Folder\'},\n-            \'relatedItems\': [],\n-            \'review_state\': \'private\',\n-            \'rights\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'subject\': [],\n-            \'tableContents\': False,\n-            \'testBlobImageField\': None,\n-            \'testBooleanField\': False,\n-            \'testDateTimeField\': None,\n-            \'testFixedPointField\': None,\n-            \'testFloatField\': None,\n-            \'testImageField\': None,\n-            \'testIntegerField\': 42,\n-            \'testLinesField\': [],\n-            \'testMVReferenceField\': [],\n-            \'testQueryField\': [],\n-            \'testReadonlyField\': u\'\',\n-            \'testReferenceField\': None,\n-            \'testRequiredField\': u\'\',\n-            \'testStringField\': u\'\',\n-            \'testTextField\': {\n-                \'content-type\': u\'text/plain\',\n-                \'data\': u\'My content\'},\n-            \'testURLField\': u\'\',\n-            \'testWritePermissionField\': u\'\',\n-            \'text\': {\'content-type\': u\'text/plain\', \'data\': u\'\'},\n-            \'title\': u\'My Document\'},\n-            result_item)\n+        self.assertDictContainsSubset(\n+            {\n+                "@id": "http://nohost/plone/my-folder/my-document",\n+                "@type": "ATTestDocument",\n+                "contributors": [],\n+                "creators": [u"test_user_1_"],\n+                "description": {"content-type": u"text/plain", "data": u""},\n+                "effectiveDate": None,\n+                "excludeFromNav": False,\n+                "expirationDate": None,\n+                "id": u"my-document",\n+                "is_folderish": False,\n+                "language": u"en",\n+                "layout": "base_view",\n+                "location": u"",\n+                "parent": {\n+                    u"@id": u"http://nohost/plone/my-folder",\n+                    u"@type": u"ATTestFolder",\n+                    u"description": u"",\n+                    u"review_state": u"private",\n+                    u"title": u"My Folder",\n+                },\n+                "relatedItems": [],\n+                "review_state": "private",\n+                "rights": {"content-type": u"text/plain", "data": u""},\n+                "subject": [],\n+                "tableContents": False,\n+                "testBlobImageField": None,\n+                "testBooleanField": False,\n+                "testDateTimeField": None,\n+                "testFixedPointField": None,\n+                "testFloatField": None,\n+                "testImageField": None,\n+                "testIntegerField": 42,\n+                "testLinesField": [],\n+                "testMVReferenceField": [],\n+                "testQueryField": [],\n+                "testReadonlyField": u"",\n+                "testReferenceField": None,\n+                "testRequiredField": u"",\n+                "testStringField": u"",\n+                "testTextField": {"content-type": u"text/plain", "data": u"My content"},\n+                "testURLField": u"",\n+                "testWritePermissionField": u"",\n+                "text": {"content-type": u"text/plain", "data": u""},\n+                "title": u"My Document",\n+            },\n+            result_item,\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 289fee0c..d53d5dec 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -23,56 +23,54 @@ class TestJsonCompatibleConverters(TestCase):\n \n     def test_None(self):\n         self.assertEqual(None, json_compatible(None))\n-        self.assertEqual(\'null\', json.dumps(json_compatible(None)))\n+        self.assertEqual("null", json.dumps(json_compatible(None)))\n \n     def test_error_when_type_unknown(self):\n-        err_regex = r\'^No converter for making <object object at [^>]*>\' + \\\n-                    r\' \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$\'\n+        err_regex = (\n+            r"^No converter for making <object object at [^>]*>"\n+            + r" \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$"\n+        )\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n             json_compatible(object())\n \n         with self.assertRaisesRegexp(TypeError, err_regex):\n-            json_compatible({\'foo\': [object()]})\n+            json_compatible({"foo": [object()]})\n \n     def test_True(self):\n         self.assertEqual(True, json_compatible(True))\n-        self.assertEqual(\'true\', json.dumps(json_compatible(True)))\n+        self.assertEqual("true", json.dumps(json_compatible(True)))\n \n     def test_False(self):\n         self.assertEqual(False, json_compatible(False))\n-        self.assertEqual(\'false\', json.dumps(json_compatible(False)))\n+        self.assertEqual("false", json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEqual(u\'foo\', json_compatible(u\'foo\'))\n-        self.assertIsInstance(json_compatible(u\'foo\'), six.text_type)\n-        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u"foo", json_compatible(u"foo"))\n+        self.assertIsInstance(json_compatible(u"foo"), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(u\'Hall\\xf6chen\'))\n+        self.assertEqual(u"Hall\\xf6chen", json_compatible(u"Hall\\xf6chen"))\n         self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\',\n-            json.dumps(json_compatible(u\'Hall\\xf6chen\'))\n+            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible(u"Hall\\xf6chen"))\n         )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u\'foo\', json_compatible(\'foo\'))\n-        self.assertIsInstance(json_compatible(\'foo\'), six.text_type)\n-        self.assertEqual(\'"foo"\', json.dumps(json_compatible(\'foo\')))\n+        self.assertEqual(u"foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), six.text_type)\n+        self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u\'Hall\\xf6chen\', json_compatible(\'Hall\xc3\xb6chen\'))\n-        self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\',\n-            json.dumps(json_compatible(\'Hall\xc3\xb6chen\'))\n-        )\n+        self.assertEqual(u"Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n+        self.assertEqual(\'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\xc3\xb6chen")))\n \n     def test_int(self):\n         self.assertEqual(42, json_compatible(42))\n         self.assertIsInstance(json_compatible(42), int)\n-        self.assertEqual(\'42\', json.dumps(json_compatible(42)))\n+        self.assertEqual("42", json.dumps(json_compatible(42)))\n \n     def test_long(self):\n         def _long(val):\n@@ -80,124 +78,114 @@ def _long(val):\n                 return int(val)\n             else:\n                 return int(val)\n+\n         self.assertEqual(_long(10), json_compatible(_long(10)))\n         self.assertIsInstance(json_compatible(_long(10)), int)\n-        self.assertEqual(\'10\', json.dumps(json_compatible(_long(10))))\n+        self.assertEqual("10", json.dumps(json_compatible(_long(10))))\n \n     def test_float(self):\n         self.assertEqual(1.4, json_compatible(1.4))\n         self.assertIsInstance(json_compatible(1.4), float)\n-        self.assertEqual(\'1.4\', json.dumps(json_compatible(1.4)))\n+        self.assertEqual("1.4", json.dumps(json_compatible(1.4)))\n \n     def test_list(self):\n-        self.assertEqual([\'foo\'], json_compatible([\'foo\']))\n-        self.assertEqual(\'["foo"]\', json.dumps(json_compatible([\'foo\'])))\n-        self.assertIsInstance(json_compatible([\'foo\'])[0],\n-                              six.text_type,\n-                              \'List values should be converted recursively.\')\n+        self.assertEqual(["foo"], json_compatible(["foo"]))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(["foo"])))\n+        self.assertIsInstance(\n+            json_compatible(["foo"])[0],\n+            six.text_type,\n+            "List values should be converted recursively.",\n+        )\n \n     def test_persistent_list(self):\n-        value = PersistentList([\'foo\'])\n-        self.assertEqual([\'foo\'], json_compatible(value))\n+        value = PersistentList(["foo"])\n+        self.assertEqual(["foo"], json_compatible(value))\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(value)[0],\n-                              six.text_type,\n-                              \'PersistentList values should be converted\'\n-                              \' recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(value)[0],\n+            six.text_type,\n+            "PersistentList values should be converted" " recursively.",\n+        )\n \n     def test_tuple(self):\n         # Tuples are converted to list (json would do that anyway and\n         # it is easier to implement it with map).\n-        self.assertEqual([\'foo\', None], json_compatible((\'foo\', None)))\n-        self.assertEqual(\'["foo"]\', json.dumps(json_compatible((\'foo\', ))))\n-        self.assertIsInstance(json_compatible((\'foo\',))[0],\n-                              six.text_type,\n-                              \'Tuple values should be converted recursively.\')\n+        self.assertEqual(["foo", None], json_compatible(("foo", None)))\n+        self.assertEqual(\'["foo"]\', json.dumps(json_compatible(("foo",))))\n+        self.assertIsInstance(\n+            json_compatible(("foo",))[0],\n+            six.text_type,\n+            "Tuple values should be converted recursively.",\n+        )\n \n     def test_frozenset(self):\n         self.assertEqual(\n-            [[1, 1], [2, 2]],\n-            sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n+            [[1, 1], [2, 2]], sorted(json_compatible(frozenset([(1, 1), (2, 2)])))\n         )\n \n     def test_set(self):\n         self.assertEqual(\n-            [[1, 1], [2, 2]],\n-            sorted(json_compatible(set([(1, 1), (2, 2)])))\n+            [[1, 1], [2, 2]], sorted(json_compatible(set([(1, 1), (2, 2)])))\n         )\n \n     def test_dict(self):\n         self.assertEqual(\n-            {\n-                u\'foo\': True,\n-                u\'bar\': None,\n-                u\'baz\': 3\n-            },\n-            json_compatible(\n-                {\n-                    \'foo\': True,\n-                    \'bar\': None,\n-                    \'baz\': 3\n-                }\n-            )\n+            {u"foo": True, u"bar": None, u"baz": 3},\n+            json_compatible({"foo": True, "bar": None, "baz": 3}),\n         )\n-        self.assertEqual(\n-            \'{"foo": "bar"}\',\n-            json.dumps(json_compatible({\'foo\': \'bar\'}))\n+        self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible({"foo": "bar"})))\n+        self.assertIsInstance(\n+            json_compatible(list({"foo": "bar"})[0]),\n+            six.text_type,\n+            "Dict keys should be converted recursively.",\n         )\n-        self.assertIsInstance(json_compatible(list({\'foo\': \'bar\'})[0]),\n-                              six.text_type,\n-                              \'Dict keys should be converted recursively.\')\n         self.assertIsInstance(\n-            json_compatible(list({\'foo\': \'bar\'}.values())[0]),\n+            json_compatible(list({"foo": "bar"}.values())[0]),\n             six.text_type,\n-            \'Dict values should be converted recursively.\')\n+            "Dict values should be converted recursively.",\n+        )\n \n     def test_dict_empty(self):\n         self.assertEqual({}, json_compatible({}))\n-        self.assertEqual(\'{}\', json.dumps(json_compatible({})))\n+        self.assertEqual("{}", json.dumps(json_compatible({})))\n \n     def test_persistent_mapping(self):\n-        value = PersistentMapping({\'foo\': \'bar\'})\n-        self.assertEqual({u\'foo\': u\'bar\'}, json_compatible(value))\n+        value = PersistentMapping({"foo": "bar"})\n+        self.assertEqual({u"foo": u"bar"}, json_compatible(value))\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n-        self.assertIsInstance(json_compatible(list(value)[0]),\n-                              six.text_type,\n-                              \'Dict keys should be converted recursively.\')\n-        self.assertIsInstance(json_compatible(list(value.values())[0]),\n-                              six.text_type,\n-                              \'Dict values should be converted recursively.\')\n+        self.assertIsInstance(\n+            json_compatible(list(value)[0]),\n+            six.text_type,\n+            "Dict keys should be converted recursively.",\n+        )\n+        self.assertIsInstance(\n+            json_compatible(list(value.values())[0]),\n+            six.text_type,\n+            "Dict values should be converted recursively.",\n+        )\n \n     def test_python_datetime(self):\n-        value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\').asdatetime()\n+        value = DateTime("2015/11/23 19:45:55.649027 GMT+3").asdatetime()\n+        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n-            u\'2015-11-23T16:45:55+00:00\',\n-            json_compatible(value)\n-        )\n-        self.assertEqual(\n-            \'"2015-11-23T16:45:55+00:00"\',\n-            json.dumps(json_compatible(value))\n+            \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_zope_DateTime(self):\n-        value = DateTime(\'2015/11/23 19:45:55.649027 GMT+3\')\n-        self.assertEqual(\n-            u\'2015-11-23T16:45:55+00:00\',\n-            json_compatible(value)\n-        )\n+        value = DateTime("2015/11/23 19:45:55.649027 GMT+3")\n+        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n-            \'"2015-11-23T16:45:55+00:00"\',\n-            json.dumps(json_compatible(value))\n+            \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEqual(u\'2015-11-23\', json_compatible(value))\n+        self.assertEqual(u"2015-11-23", json_compatible(value))\n         self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEqual(u\'19:45:55\', json_compatible(value))\n+        self.assertEqual(u"19:45:55", json_compatible(value))\n         self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n@@ -207,25 +195,31 @@ def test_broken_relation_value(self):\n         self.assertEqual(None, json_compatible(RelationValue(12345)))\n \n     def test_relation_value(self):\n-        portal = self.layer[\'portal\']\n-        doc1 = portal[portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\',\n-            title=\'Document 1\',\n-            description=\'Description\',\n-        )]\n+        portal = self.layer["portal"]\n+        doc1 = portal[\n+            portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc1",\n+                title="Document 1",\n+                description="Description",\n+            )\n+        ]\n         intids = getUtility(IIntIds)\n         self.assertEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Document 1\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            json_compatible(RelationValue(intids.getId(doc1))))\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Document 1",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            json_compatible(RelationValue(intids.getId(doc1))),\n+        )\n \n     def test_i18n_message(self):\n-        _ = MessageFactory(\'plone.restapi.tests\')\n-        msg = _(u\'message_id\', default=u\'default message\')\n-        self.assertEqual(u\'default message\', json_compatible(msg))\n+        _ = MessageFactory("plone.restapi.tests")\n+        msg = _(u"message_id", default=u"default message")\n+        self.assertEqual(u"default message", json_compatible(msg))\n \n     def test_missing_value(self):\n         self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 977fb7ca..3ecbe1b8 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -14,50 +14,48 @@ class TestSerializeUserToJsonAdapters(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n         self.gtool.addGroup(\n-            \'ploneteam\', (), (),\n+            "ploneteam",\n+            (),\n+            (),\n             properties=properties,\n-            title=properties[\'title\'],\n-            description=properties[\'description\'])\n-        self.group = self.gtool.getGroupById(\'ploneteam\')\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n+        self.group = self.gtool.getGroupById("ploneteam")\n         self.group.addMember(TEST_USER_ID)\n \n     def serialize(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def serialize_summary(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJsonSummary)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJsonSummary)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         group = self.serialize(self.group)\n         self.assertTrue(group)\n-        self.assertEqual(\'ploneteam\', group.get(\'id\'))\n-        self.assertEqual(\'ploneteam@plone.org\', group.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', group.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', group.get(\'description\'))\n-        self.assertEqual(\n-            set(group[\'users\']),\n-            set([\'@id\', \'items_total\', \'items\'])\n-        )\n+        self.assertEqual("ploneteam", group.get("id"))\n+        self.assertEqual("ploneteam@plone.org", group.get("email"))\n+        self.assertEqual("Plone Team", group.get("title"))\n+        self.assertEqual("We are Plone", group.get("description"))\n+        self.assertEqual(set(group["users"]), set(["@id", "items_total", "items"]))\n \n     def test_summary(self):\n         group = self.serialize_summary(self.group)\n         self.assertTrue(group)\n-        self.assertEqual(\'ploneteam\', group.get(\'id\'))\n-        self.assertEqual(\'ploneteam@plone.org\', group.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', group.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', group.get(\'description\'))\n-        self.assertNotIn(\'users\', group)\n+        self.assertEqual("ploneteam", group.get("id"))\n+        self.assertEqual("ploneteam@plone.org", group.get("email"))\n+        self.assertEqual("Plone Team", group.get("title"))\n+        self.assertEqual("We are Plone", group.get("description"))\n+        self.assertNotIn("users", group)\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 235a041f..a8647e5e 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -19,81 +19,97 @@ class TestSummarySerializers(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         self.doc1 = createContentInContainer(\n-            self.portal, u\'DXTestDocument\',\n-            id=u\'doc1\',\n-            title=u\'Lorem Ipsum\',\n-            description=u\'Description\')\n+            self.portal,\n+            u"DXTestDocument",\n+            id=u"doc1",\n+            title=u"Lorem Ipsum",\n+            description=u"Description",\n+        )\n \n     def test_site_root_summary(self):\n         summary = getMultiAdapter(\n-            (self.portal, self.request), ISerializeToJsonSummary)()\n+            (self.portal, self.request), ISerializeToJsonSummary\n+        )()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone\',\n-             \'@type\': \'Plone Site\',\n-             \'title\': \'Plone site\',\n-             \'description\': \'\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone",\n+                "@type": "Plone Site",\n+                "title": "Plone site",\n+                "description": "",\n+            },\n+            summary,\n+        )\n \n     def test_brain_summary(self):\n         brain = self.catalog(UID=self.doc1.UID())[0]\n-        summary = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n         # Must also work if we\'re dealing with a CatalogContentListingObject\n         # (because the brain has already been adapted to IContentListingObject,\n         # as is the case for collection results)\n         listing_obj = IContentListingObject(brain)\n         summary = getMultiAdapter(\n-            (listing_obj, self.request), ISerializeToJsonSummary)()\n+            (listing_obj, self.request), ISerializeToJsonSummary\n+        )()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n     def test_brain_summary_with_missing_value(self):\n         brain = self.catalog(UID=self.doc1.UID())[0]\n         brain.Description = Missing.Value\n \n-        summary = getMultiAdapter(\n-            (brain, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': None,\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": None,\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n     def test_dx_type_summary(self):\n-        summary = getMultiAdapter(\n-            (self.doc1, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'DXTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\n \n \n class TestSummarySerializersATTypes(unittest.TestCase):\n@@ -102,25 +118,30 @@ class TestSummarySerializersATTypes(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'ATTestDocument\',\n-            id=\'doc1\',\n-            title=\'Lorem Ipsum\',\n-            description=\'Description\')]\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Contributor"])\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "ATTestDocument",\n+                id="doc1",\n+                title="Lorem Ipsum",\n+                description="Description",\n+            )\n+        ]\n \n     def test_at_type_summary(self):\n-        summary = getMultiAdapter(\n-            (self.doc1, self.request), ISerializeToJsonSummary)()\n+        summary = getMultiAdapter((self.doc1, self.request), ISerializeToJsonSummary)()\n \n         self.assertDictEqual(\n-            {\'@id\': \'http://nohost/plone/doc1\',\n-             \'@type\': \'ATTestDocument\',\n-             \'title\': \'Lorem Ipsum\',\n-             \'description\': \'Description\',\n-             \'review_state\': \'private\'},\n-            summary)\n+            {\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "ATTestDocument",\n+                "title": "Lorem Ipsum",\n+                "description": "Description",\n+                "review_state": "private",\n+            },\n+            summary,\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer_user.py b/src/plone/restapi/tests/test_serializer_user.py\nindex b32d9041..42063b85 100644\n--- a/src/plone/restapi/tests/test_serializer_user.py\n+++ b/src/plone/restapi/tests/test_serializer_user.py\n@@ -13,47 +13,45 @@ class TestSerializeUserToJsonAdapter(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         self.user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n \n     def serialize(self, user):\n-        serializer = getMultiAdapter((user, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((user, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serialize_returns_id(self):\n         user = self.serialize(self.user)\n         self.assertTrue(user)\n-        self.assertEqual(\'noam\', user.get(\'id\'))\n-        self.assertEqual(\'noam.chomsky@example.com\', user.get(\'email\'))\n-        self.assertEqual(\'Noam Avram Chomsky\', user.get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', user.get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', user.get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', user.get(\'location\'))\n+        self.assertEqual("noam", user.get("id"))\n+        self.assertEqual("noam.chomsky@example.com", user.get("email"))\n+        self.assertEqual("Noam Avram Chomsky", user.get("fullname"))\n+        self.assertEqual("web.mit.edu/chomsky", user.get("home_page"))  # noqa\n+        self.assertEqual("Professor of Linguistics", user.get("description"))  # noqa\n+        self.assertEqual("Cambridge, MA", user.get("location"))\n \n     def test_serialize_roles(self):\n         user = self.serialize(self.user)\n-        self.assertIn(\'roles\', user)\n-        self.assertNotIn(\'Authenticated\', user[\'roles\'])\n-        self.assertNotIn(\'Anonymous\', user[\'roles\'])\n+        self.assertIn("roles", user)\n+        self.assertNotIn("Authenticated", user["roles"])\n+        self.assertNotIn("Anonymous", user["roles"])\n \n-    @unittest.skipUnless(HAS_TTW_SCHEMAS, \'Requires TTW user schemas\')\n+    @unittest.skipUnless(HAS_TTW_SCHEMAS, "Requires TTW user schemas")\n     def test_serialize_custom_member_schema(self):\n         from plone.app.users.browser.schemaeditor import applySchema\n+\n         member_schema = """\n             <model xmlns="http://namespaces.plone.org/supermodel/schema"\n                 xmlns:form="http://namespaces.plone.org/supermodel/form"\n@@ -74,9 +72,10 @@ def test_serialize_custom_member_schema(self):\n         """\n         applySchema(member_schema)\n         user = api.user.create(\n-            email=\'donald.duck@example.com\',\n-            username=\'donald\',\n-            properties={\'twitter\': \'TheRealDuck\'})\n+            email="donald.duck@example.com",\n+            username="donald",\n+            properties={"twitter": "TheRealDuck"},\n+        )\n         res = self.serialize(user)\n-        self.assertIn(\'twitter\', res)\n-        self.assertEqual(res[\'twitter\'], \'TheRealDuck\')\n+        self.assertIn("twitter", res)\n+        self.assertEqual(res["twitter"], "TheRealDuck")\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 9a68830c..4b630309 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -24,210 +24,160 @@ class TestTraversal(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_document(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.doc1.description = u"This is a document"\n-        self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum",\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n+        self.portal.doc1.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.doc1.absolute_url())\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Accept: application/json \' +\n-            \'the server should respond with sending back application/json: \' +\n-            \'{}\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Accept: application/json "\n+            + "the server should respond with sending back application/json: "\n+            + "{}".format(response.headers.get("Content-Type")),\n         )\n         self.assertEqual(\n-            \'Document\',\n-            response.json().get(\'@type\'),\n+            "Document",\n+            response.json().get("@type"),\n             "Response should be @type \'Document\', not \'{}\'".format(\n-                response.json().get(\'@type\')\n-            )\n+                response.json().get("@type")\n+            ),\n         )\n         self.assertEqual(\n-            response.json().get(\'@id\'),\n+            response.json().get("@id"),\n             self.portal.doc1.absolute_url(),\n-            \'@id attribute != {}: {}\'.format(\n-                self.portal.doc1.absolute_url(),\n-                response.json()\n-            )\n-        )\n-        self.assertEqual(\n-            \'My Document\',\n-            response.json().get(\'title\'),\n-        )\n-        self.assertEqual(\n-            \'This is a document\',\n-            response.json().get(\'description\')\n+            "@id attribute != {}: {}".format(\n+                self.portal.doc1.absolute_url(), response.json()\n+            ),\n         )\n+        self.assertEqual("My Document", response.json().get("title"))\n+        self.assertEqual("This is a document", response.json().get("description"))\n         self.assertEqual(\n-            {u\'data\': u\'<p>Lorem ipsum</p>\',\n-             u\'content-type\': u\'text/plain\',\n-             u\'encoding\': u\'utf-8\'},\n-            response.json().get(\'text\')\n+            {\n+                u"data": u"<p>Lorem ipsum</p>",\n+                u"content-type": u"text/plain",\n+                u"encoding": u"utf-8",\n+            },\n+            response.json().get("text"),\n         )\n \n     def test_get_news_item(self):\n-        self.portal.invokeFactory(\n-            \'News Item\',\n-            id=\'news1\',\n-            title=\'News Item 1\'\n-        )\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n-        self.portal.news1.image_caption = u\'This is an image caption.\'\n+        self.portal.news1.image_caption = u"This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n+        with patch.object(storage, "uuid4", return_value="uuid1"):\n             response = self.api_session.get(self.portal.news1.absolute_url())\n \n             self.assertEqual(response.status_code, 200)\n             self.assertEqual(\n-                response.headers.get(\'Content-Type\'),\n-                \'application/json\',\n-                \'When sending a GET request with Content-Type: application/json \' + # noqa\n-                \'the server should respond with sending back application/json.\'\n+                response.headers.get("Content-Type"),\n+                "application/json",\n+                "When sending a GET request with Content-Type: application/json "\n+                + "the server should respond with sending back application/json.",  # noqa\n             )\n             self.assertEqual(\n-                \'News Item\',\n-                response.json().get(\'@type\'),\n+                "News Item",\n+                response.json().get("@type"),\n                 "Response should be @type \'News Item\', not \'{}\'".format(\n-                    response.json().get(\'@type\')\n-                )\n-            )\n-            self.assertEqual(\n-                response.json().get(\'@id\'),\n-                self.portal.news1.absolute_url()\n+                    response.json().get("@type")\n+                ),\n             )\n             self.assertEqual(\n-                \'News Item 1\',\n-                response.json().get(\'title\')\n+                response.json().get("@id"), self.portal.news1.absolute_url()\n             )\n+            self.assertEqual("News Item 1", response.json().get("title"))\n             self.assertEqual(\n-                u\'This is an image caption.\',\n-                response.json()[\'image_caption\']\n+                u"This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {\'download\': self.portal_url + u\'/news1/@@images/uuid1.png\'},  # noqa\n-                response.json()[\'image\']\n+                {"download": self.portal_url + u"/news1/@@images/uuid1.png"},  # noqa\n+                response.json()["image"],\n             )\n \n     def test_get_folder(self):\n-        self.portal.invokeFactory(\n-            \'Folder\',\n-            id=\'folder1\',\n-            title=\'My Folder\'\n-        )\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.folder1.absolute_url())\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n         self.assertEqual(\n-            \'Folder\',\n-            response.json().get(\'@type\'),\n+            "Folder",\n+            response.json().get("@type"),\n             "Response should be @type \'Folder\', not \'{}\'".format(\n-                response.json().get(\'@type\')\n-            )\n-        )\n-        self.assertEqual(\n-            self.portal.folder1.absolute_url(),\n-            response.json().get(\'@id\')\n-        )\n-        self.assertEqual(\n-            \'My Folder\',\n-            response.json().get(\'title\')\n+                response.json().get("@type")\n+            ),\n         )\n+        self.assertEqual(self.portal.folder1.absolute_url(), response.json().get("@id"))\n+        self.assertEqual("My Folder", response.json().get("title"))\n \n     def test_get_site_root(self):\n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            self.portal_url,\n-            response.json().get(\'@id\')\n-        )\n-        self.assertEqual(\n-            \'Plone Site\',\n-            response.json().get(\'@type\')\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(self.portal_url, response.json().get("@id"))\n+        self.assertEqual("Plone Site", response.json().get("@type"))\n \n     def test_get_site_root_with_default_page(self):\n-        self.portal.invokeFactory(\'Document\', id=\'front-page\')\n-        self.portal.setDefaultPage(\'front-page\')\n+        self.portal.invokeFactory("Document", id="front-page")\n+        self.portal.setDefaultPage("front-page")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal_url)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json().get(\'@id\'),\n-            self.portal_url\n-        )\n-        self.assertEqual(\n-            \'Plone Site\',\n-            response.json().get(\'@type\')\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json().get("@id"), self.portal_url)\n+        self.assertEqual("Plone Site", response.json().get("@type"))\n \n-    @unittest.skip(\'Not implemented yet.\')\n+    @unittest.skip("Not implemented yet.")\n     def test_get_file(self):  # pragma: no cover\n-        self.portal.invokeFactory(\'File\', id=\'file1\')\n-        self.portal.file1.title = \'File\'\n-        self.portal.file1.description = u\'A file\'\n-        pdf_file = os.path.join(\n-            os.path.dirname(__file__), u\'file.pdf\'\n-        )\n-        with open(pdf_file, \'rb\') as f:\n+        self.portal.invokeFactory("File", id="file1")\n+        self.portal.file1.title = "File"\n+        self.portal.file1.description = u"A file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=pdf_data,\n-            contentType=\'application/pdf\',\n-            filename=u\'file.pdf\'\n+            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n         )\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file1)\n@@ -238,40 +188,32 @@ def test_get_file(self):  # pragma: no cover\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal.file1.absolute_url()\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json()["@id"], self.portal.file1.absolute_url())\n \n-    @unittest.skip(\'Not implemented yet.\')\n+    @unittest.skip("Not implemented yet.")\n     def test_get_image(self):  # pragma: no cover\n-        self.portal.invokeFactory(\'Image\', id=\'img1\')\n-        self.portal.img1.title = \'Image\'\n-        self.portal.img1.description = u\'An image\'\n-        image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        with open(image_file, \'rb\') as f:\n+        self.portal.invokeFactory("Image", id="img1")\n+        self.portal.img1.title = "Image"\n+        self.portal.img1.description = u"An image"\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=image_data,\n-            contentType=\'image/png\',\n-            filename=u\'image.png\'\n+            data=image_data, contentType="image/png", filename=u"image.png"\n         )\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.img1.absolute_url())\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'When sending a GET request with Content-Type: application/json \' +\n-            \'the server should respond with sending back application/json.\'\n-        )\n-        self.assertEqual(\n-            response.json()[\'@id\'],\n-            self.portal.img1.absolute_url()\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "When sending a GET request with Content-Type: application/json "\n+            + "the server should respond with sending back application/json.",\n         )\n+        self.assertEqual(response.json()["@id"], self.portal.img1.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex e90688ce..5a16a7b6 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -14,7 +14,7 @@\n import unittest\n \n \n-TEST_CATEGORY_ID = \'testcategory\'\n+TEST_CATEGORY_ID = "testcategory"\n \n \n class TestActions(unittest.TestCase):\n@@ -27,42 +27,57 @@ def add_category(self, name):\n         self.portal_actions._setObject(name, category)\n         return category\n \n-    def add_action(self, category, name, title, icon_expr=\'\',\n-                   available_expr=\'\',\n-                   permissions=()):\n-        action = Action(name, title=title, icon_expr=icon_expr,\n-                        available_expr=available_expr, permissions=permissions)\n+    def add_action(\n+        self, category, name, title, icon_expr="", available_expr="", permissions=()\n+    ):\n+        action = Action(\n+            name,\n+            title=title,\n+            icon_expr=icon_expr,\n+            available_expr=available_expr,\n+            permissions=permissions,\n+        )\n         action.id = name\n         category._setObject(name, action)\n         return action\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n-        self.portal_actions = api.portal.get_tool(name=\'portal_actions\')\n+        self.portal_actions = api.portal.get_tool(name="portal_actions")\n         existing_ids = self.portal_actions.objectIds()\n         self.portal_actions.manage_delObjects(ids=existing_ids)\n-        self.cat1 = self.add_category(\'category1\')\n-        self.add_action(self.cat1, \'member_action\', \'Members only\',\n-                        available_expr=\'python:member is not None\')\n-        self.add_action(self.cat1, \'view_action\',\n-                        \'Action with view permission\',\n-                        permissions=(permissions.View,))\n-        self.add_action(self.cat1, \'manage_action\',\n-                        \'Action with Manage Portal Content permission\',\n-                        permissions=(permissions.ManagePortal,))\n-        self.cat2 = self.add_category(\'category2\')\n-        self.cat3 = self.add_category(\'category3\')\n+        self.cat1 = self.add_category("category1")\n+        self.add_action(\n+            self.cat1,\n+            "member_action",\n+            "Members only",\n+            available_expr="python:member is not None",\n+        )\n+        self.add_action(\n+            self.cat1,\n+            "view_action",\n+            "Action with view permission",\n+            permissions=(permissions.View,),\n+        )\n+        self.add_action(\n+            self.cat1,\n+            "manage_action",\n+            "Action with Manage Portal Content permission",\n+            permissions=(permissions.ManagePortal,),\n+        )\n+        self.cat2 = self.add_category("category2")\n+        self.cat3 = self.add_category("category3")\n \n         transaction.commit()\n \n@@ -71,89 +86,92 @@ def tearDown(self):\n         self.anon_api_session.close()\n \n     def test_actions_all_categories(self):\n-        response = self.api_session.get(\'/@actions\')\n+        response = self.api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual([\'category1\', \'category2\', \'category3\'],\n-                         sorted(response))\n+        self.assertEqual(["category1", "category2", "category3"], sorted(response))\n \n     def test_actions_selected_categories(self):\n         response = self.api_session.get(\n-            \'/@actions?categories:list=category1&categories:list=category2\')\n+            "/@actions?categories:list=category1&categories:list=category2"\n+        )\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual([\'category1\', \'category2\'],\n-                         sorted(response))\n+        self.assertEqual(["category1", "category2"], sorted(response))\n \n     def test_actions_siteroot(self):\n-        response = self.api_session.get(\'/@actions\')\n+        response = self.api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'category1\': [\n-                {u\'title\': u\'Members only\',\n-                 u\'id\': u\'member_action\',\n-                 u\'icon\': u\'\'},\n-                {u\'title\': u\'Action with view permission\',\n-                 u\'id\': u\'view_action\',\n-                 u\'icon\': u\'\'},\n-                {u\'title\': u\'Action with Manage Portal Content permission\',\n-                 u\'id\': u\'manage_action\',\n-                 u\'icon\': u\'\'}],\n-             u\'category2\': [],\n-             u\'category3\': []})\n+            {\n+                u"category1": [\n+                    {u"title": u"Members only", u"id": u"member_action", u"icon": u""},\n+                    {\n+                        u"title": u"Action with view permission",\n+                        u"id": u"view_action",\n+                        u"icon": u"",\n+                    },\n+                    {\n+                        u"title": u"Action with Manage Portal Content permission",\n+                        u"id": u"manage_action",\n+                        u"icon": u"",\n+                    },\n+                ],\n+                u"category2": [],\n+                u"category3": [],\n+            },\n+        )\n \n     def test_actions_siteroot_anon(self):\n-        response = self.anon_api_session.get(\'/@actions\')\n+        response = self.anon_api_session.get("/@actions")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(\n             response,\n-            {u\'category1\': [\n-                {u\'title\': u\'Action with view permission\',\n-                 u\'id\': u\'view_action\',\n-                 u\'icon\': u\'\'}],\n-             u\'category2\': [],\n-             u\'category3\': []})\n+            {\n+                u"category1": [\n+                    {\n+                        u"title": u"Action with view permission",\n+                        u"id": u"view_action",\n+                        u"icon": u"",\n+                    }\n+                ],\n+                u"category2": [],\n+                u"category3": [],\n+            },\n+        )\n \n     def test_actions_on_content_object(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n         # we need the category in portal_actions to get additional actions\n         # from portal_types\n-        self.cat_object = self.add_category(\'object\')\n+        self.cat_object = self.add_category("object")\n         transaction.commit()\n-        url = \'%s/@actions\' % self.portal.doc1.absolute_url()\n+        url = "%s/@actions" % self.portal.doc1.absolute_url()\n         response = self.api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u\'id\'] for action in response[\'object\']]\n-        self.assertTrue(u\'view\' in object_action_ids)\n-        self.assertTrue(u\'edit\' in object_action_ids)\n+        object_action_ids = [action[u"id"] for action in response["object"]]\n+        self.assertTrue(u"view" in object_action_ids)\n+        self.assertTrue(u"edit" in object_action_ids)\n \n     def test_actions_on_content_object_anon(self):\n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc1\',\n-            title=\'My Document\'\n-        )\n-        api.content.transition(obj=self.portal.doc1, transition=\'publish\')\n+        self.portal.invokeFactory("Document", id="doc1", title="My Document")\n+        api.content.transition(obj=self.portal.doc1, transition="publish")\n         # we need the category in portal_actions to get additional actions\n         # from portal_types\n-        self.cat_object = self.add_category(\'object\')\n+        self.cat_object = self.add_category("object")\n         transaction.commit()\n-        url = \'%s/@actions\' % self.portal.doc1.absolute_url()\n+        url = "%s/@actions" % self.portal.doc1.absolute_url()\n         response = self.anon_api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u\'id\'] for action in response[\'object\']]\n-        self.assertTrue(u\'view\' in object_action_ids)\n-        self.assertTrue(u\'edit\' not in object_action_ids)\n+        object_action_ids = [action[u"id"] for action in response["object"]]\n+        self.assertTrue(u"view" in object_action_ids)\n+        self.assertTrue(u"edit" not in object_action_ids)\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex 190e6a0d..82091933 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -16,44 +16,40 @@ class TestServicesBreadcrumbs(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_breadcrumbs(self):\n-        response = self.api_session.get(\'/folder/doc1/@breadcrumbs\')\n+        response = self.api_session.get("/folder/doc1/@breadcrumbs")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': self.portal_url + u\'/folder/doc1/@breadcrumbs\',\n-                \'items\': [\n+                "@id": self.portal_url + u"/folder/doc1/@breadcrumbs",\n+                "items": [\n+                    {u"@id": self.portal_url + u"/folder", u"title": u"Some Folder"},\n                     {\n-                        u\'@id\': self.portal_url + u\'/folder\',\n-                        u\'title\': u\'Some Folder\'\n-                    }, {\n-                        u\'@id\': self.portal_url + u\'/folder/doc1\',\n-                        u\'title\': u\'A document\'\n-                    }\n-                ]\n-            }\n+                        u"@id": self.portal_url + u"/folder/doc1",\n+                        u"title": u"A document",\n+                    },\n+                ],\n+            },\n         )\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 0eb86824..4a8e134f 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -19,9 +19,9 @@ class TestCommentsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n \n         # Allow discussion\n@@ -34,24 +34,24 @@ def setUp(self):\n         # doc with comments\n         self.doc = api.content.create(\n             container=self.portal,\n-            type=\'Document\',\n-            id=\'doc_with_comments\',\n-            title=\'Document with comments\',\n-            allow_discussion=True\n+            type="Document",\n+            id="doc_with_comments",\n+            title="Document with comments",\n+            allow_discussion=True,\n         )\n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        api.user.create(username=\'jos\', password=\'jos\', email=\'jos@plone.org\')\n+        api.user.create(username="jos", password="jos", email="jos@plone.org")\n \n         # Admin session\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         # User session\n         self.user_session = RelativeSession(self.portal_url)\n-        self.user_session.headers.update({\'Accept\': \'application/json\'})\n-        self.user_session.auth = (\'jos\', \'jos\')\n+        self.user_session.headers.update({"Accept": "application/json"})\n+        self.user_session.auth = ("jos", "jos")\n \n         transaction.commit()\n \n@@ -60,129 +60,126 @@ def tearDown(self):\n         self.user_session.close()\n \n     def test_list_datastructure(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n         response = self.api_session.get(url)\n \n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertEqual(\n-            set([\'items_total\', \'items\', \'@id\']),\n-            set(data)\n-        )\n+        self.assertEqual(set(["items_total", "items", "@id"]), set(data))\n \n     def test_list_batching(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        self.api_session.post(url, json={\'text\': \'comment 1\'})\n-        self.api_session.post(url, json={\'text\': \'comment 2\'})\n+        self.api_session.post(url, json={"text": "comment 1"})\n+        self.api_session.post(url, json={"text": "comment 2"})\n \n-        response = self.api_session.get(url, params={\'b_size\': 1})\n+        response = self.api_session.get(url, params={"b_size": 1})\n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertIn(\'batching\', data)\n+        self.assertIn("batching", data)\n \n     def test_add_comment_to_root(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n         response = self.api_session.get(url)\n-        self.assertEqual(0, response.json()[\'items_total\'])\n+        self.assertEqual(0, response.json()["items_total"])\n \n-        response = self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'location\', response.headers)\n+        self.assertIn("location", response.headers)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        self.assertEqual(1, data[\'items_total\'])\n-        self.assertIsNone(data[\'items\'][0][\'in_reply_to\'])\n-        self.assertIsNone(data[\'items\'][0][\'@parent\'])\n+        self.assertEqual(1, data["items_total"])\n+        self.assertIsNone(data["items"][0]["in_reply_to"])\n+        self.assertIsNone(data["items"][0]["@parent"])\n \n     def test_add_comment_to_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment 1\'})\n+        response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        parent_id = data[\'items\'][0][\'comment_id\']\n+        parent_id = data["items"][0]["comment_id"]\n \n-        SUBTEXT = \'sub comment\'\n+        SUBTEXT = "sub comment"\n \n-        payload = {\'text\': SUBTEXT, \'in_reply_to\': parent_id}\n+        payload = {"text": SUBTEXT, "in_reply_to": parent_id}\n         response = self.api_session.post(url, json=payload)\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        sub = [x for x in data[\'items\'] if x[\'text\'][\'data\'] == SUBTEXT][0]\n-        self.assertEqual(parent_id, sub[\'in_reply_to\'])\n+        sub = [x for x in data["items"] if x["text"]["data"] == SUBTEXT][0]\n+        self.assertEqual(parent_id, sub["in_reply_to"])\n \n     def test_update(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n-        OLD_TEXT = \'comment 1\'\n-        NEW_TEXT = \'new text\'\n+        url = "{}/@comments".format(self.doc.absolute_url())\n+        OLD_TEXT = "comment 1"\n+        NEW_TEXT = "new text"\n \n-        self.api_session.post(url, json={\'text\': OLD_TEXT})\n+        self.api_session.post(url, json={"text": OLD_TEXT})\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        item_texts = [x[\'text\'][\'data\'] for x in data[\'items\']]\n+        item_texts = [x["text"]["data"] for x in data["items"]]\n         self.assertNotIn(NEW_TEXT, item_texts)\n         self.assertIn(OLD_TEXT, item_texts)\n-        comment = data[\'items\'][0]\n+        comment = data["items"][0]\n \n-        payload = {\'text\': NEW_TEXT}\n-        response = self.api_session.patch(comment[\'@id\'], json=payload)\n+        payload = {"text": NEW_TEXT}\n+        response = self.api_session.patch(comment["@id"], json=payload)\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'location\', response.headers)\n+        self.assertIn("location", response.headers)\n \n         response = self.api_session.get(url)\n         data = response.json()\n-        item_texts = [x[\'text\'][\'data\'] for x in data[\'items\']]\n+        item_texts = [x["text"]["data"] for x in data["items"]]\n         self.assertIn(NEW_TEXT, item_texts)\n         self.assertNotIn(OLD_TEXT, item_texts)\n \n     def test_permissions_delete_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment\'})\n+        response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n-        comment_url = response.json()[\'items\'][0][\'@id\']\n-        self.assertFalse(comment_url.endswith(\'@comments\'))\n-        self.assertTrue(response.json()[\'items\'][0][\'is_deletable\'])\n+        comment_url = response.json()["items"][0]["@id"]\n+        self.assertFalse(comment_url.endswith("@comments"))\n+        self.assertTrue(response.json()["items"][0]["is_deletable"])\n \n         # Other user may not delete this\n         response = self.user_session.delete(comment_url)\n         self.assertEqual(401, response.status_code)\n \n         response = self.user_session.get(url)\n-        self.assertFalse(response.json()[\'items\'][0][\'is_deletable\'])\n+        self.assertFalse(response.json()["items"][0]["is_deletable"])\n \n         # The owner may\n         response = self.api_session.delete(comment_url)\n         self.assertEqual(204, response.status_code)\n \n     def test_permissions_update_comment(self):\n-        url = \'{}/@comments\'.format(self.doc.absolute_url())\n+        url = "{}/@comments".format(self.doc.absolute_url())\n \n-        response = self.api_session.post(url, json={\'text\': \'comment\'})\n+        response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n \n         response = self.api_session.get(url)\n-        comment_url = response.json()[\'items\'][0][\'@id\']\n-        self.assertFalse(comment_url.endswith(\'@comments\'))\n-        self.assertTrue(response.json()[\'items\'][0][\'is_editable\'])\n+        comment_url = response.json()["items"][0]["@id"]\n+        self.assertFalse(comment_url.endswith("@comments"))\n+        self.assertTrue(response.json()["items"][0]["is_editable"])\n \n         # Other user may not update this\n-        response = self.user_session.patch(comment_url, json={\'text\': \'new\'})\n+        response = self.user_session.patch(comment_url, json={"text": "new"})\n         self.assertEqual(401, response.status_code)\n \n         response = self.user_session.get(url)\n-        self.assertFalse(response.json()[\'items\'][0][\'is_editable\'])\n+        self.assertFalse(response.json()["items"][0]["is_editable"])\n \n         # The owner may\n-        response = self.api_session.patch(comment_url, json={\'text\': \'new\'})\n+        response = self.api_session.patch(comment_url, json={"text": "new"})\n         self.assertEqual(204, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_services_content.py b/src/plone/restapi/tests/test_services_content.py\nindex 54b12521..fe6ba842 100644\n--- a/src/plone/restapi/tests/test_services_content.py\n+++ b/src/plone/restapi/tests/test_services_content.py\n@@ -15,22 +15,20 @@ class TestHistoryVersioning(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n         transaction.commit()\n \n@@ -39,4 +37,4 @@ def tearDown(self):\n \n     def test_response(self):\n         response = self.api_session.get(self.doc.absolute_url())\n-        self.assertIn(\'version\', response.json())\n+        self.assertIn("version", response.json())\ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex 4955e5da..cda2cebc 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -16,20 +16,20 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'Just Plone 5 currently.\')\n+@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n class TestControlpanelsEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n@@ -37,94 +37,89 @@ def tearDown(self):\n \n     def test_get_listing(self):\n         # Do we get a list with at least one item?\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         self.assertEqual(200, response.status_code)\n         data = response.json()\n         self.assertIs(type(data), list)\n         self.assertGreater(len(data), 0)\n \n     def test_get_item_nonexisting(self):\n-        response = self.api_session.get(\'/@controlpanels/no-way-jose\')\n+        response = self.api_session.get("/@controlpanels/no-way-jose")\n         self.assertEqual(404, response.status_code)\n \n     def test_get_item(self):\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n+        response = self.api_session.get("/@controlpanels/editing")\n         self.assertEqual(200, response.status_code)\n \n     def test_all_controlpanels(self):\n         # make sure all define controlpanels serialize\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         for item in response.json():\n-            response = self.api_session.get(item[\'@id\'])\n+            response = self.api_session.get(item["@id"])\n             self.assertEqual(\n                 200,\n                 response.status_code,\n-                \'{} failed: {}\'.format(item[\'@id\'], response.json())\n+                "{} failed: {}".format(item["@id"], response.json()),\n             )\n \n     def test_patch_needs_parameter(self):\n-        response = self.api_session.patch(\'/@controlpanels\')\n+        response = self.api_session.patch("/@controlpanels")\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            \'Missing parameter controlpanelname\', response.json()[\'message\']\n+            "Missing parameter controlpanelname", response.json()["message"]\n         )\n \n     def test_update(self):\n         # get current settings, switch them and check if it changed\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n-        old_data = response.json()[\'data\']\n+        response = self.api_session.get("/@controlpanels/editing")\n+        old_data = response.json()["data"]\n \n         # switch values and set\n         new_values = {\n-            \'ext_editor\': not old_data[\'ext_editor\'],\n-            \'lock_on_ttw_edit\': not old_data[\'lock_on_ttw_edit\']\n+            "ext_editor": not old_data["ext_editor"],\n+            "lock_on_ttw_edit": not old_data["lock_on_ttw_edit"],\n         }\n-        response = self.api_session.patch(\n-            \'/@controlpanels/editing\', json=new_values\n-        )\n+        response = self.api_session.patch("/@controlpanels/editing", json=new_values)\n \n         # check if the values changed\n-        response = self.api_session.get(\'/@controlpanels/editing\')\n+        response = self.api_session.get("/@controlpanels/editing")\n         self.assertNotEqual(response.json(), old_data)\n \n     def test_update_all(self):\n         # Mail is in faulty state by default\n         self.api_session.patch(\n-            \'/@controlpanels/mail\',\n+            "/@controlpanels/mail",\n             json={\n-                \'email_from_address\': \'admin@local.local\',\n-                \'email_from_name\': \'Jos Henken\',\n-            }\n+                "email_from_address": "admin@local.local",\n+                "email_from_name": "Jos Henken",\n+            },\n         )\n \n         # make sure all define controlpanels deserialize\n-        response = self.api_session.get(\'/@controlpanels\')\n+        response = self.api_session.get("/@controlpanels")\n         for item in response.json():\n             # get current data\n-            response = self.api_session.get(item[\'@id\'])\n+            response = self.api_session.get(item["@id"])\n \n             # store the outputted data\n-            response = self.api_session.patch(\n-                item[\'@id\'],\n-                json=response.json()[\'data\']\n-            )\n+            response = self.api_session.patch(item["@id"], json=response.json()["data"])\n             self.assertEqual(\n                 204,\n                 response.status_code,\n-                \'{} failed: {}\'.format(item[\'@id\'], response.content)\n+                "{} failed: {}".format(item["@id"], response.content),\n             )\n \n     def test_update_required(self):\n-        KEY = \'email_charset\'\n-        URL = \'/@controlpanels/mail\'\n+        KEY = "email_charset"\n+        URL = "/@controlpanels/mail"\n         # sanity check\n         response = self.api_session.get(URL)\n         response = response.json()\n-        self.assertIn(KEY, response[\'schema\'][\'required\'])\n+        self.assertIn(KEY, response["schema"]["required"])\n \n         response = self.api_session.patch(URL, json={KEY: None})\n \n         self.assertEqual(response.status_code, 400)\n         response = response.json()\n-        self.assertIn(\'message\', response)\n-        self.assertIn(\'Required input is missing.\', response[\'message\'])\n+        self.assertIn("message", response)\n+        self.assertIn("Required input is missing.", response["message"])\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 0e6ce006..a0b05b80 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -21,28 +21,30 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email notification not implemented for Plone < 5.\')  # noqa\n+@unittest.skipIf(\n+    not PLONE5, "email notification not implemented for Plone < 5."\n+)  # noqa\n class EmailNotificationEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         registry = getUtility(IRegistry)\n-        registry[\'plone.email_from_address\'] = \'info@plone.org\'\n-        registry[\'plone.email_from_name\'] = u\'Plone test site\'\n+        registry["plone.email_from_address"] = "info@plone.org"\n+        registry["plone.email_from_name"] = u"Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         transaction.commit()\n \n@@ -51,55 +53,42 @@ def tearDown(self):\n \n     def test_email_notification_missing_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n-            json={\n-                \'message\': \'Just want to say hi.\'\n-            })\n+            "/@email-notification", json={"message": "Just want to say hi."}\n+        )\n         transaction.commit()\n         self.assertEqual(response.status_code, 400)\n         self.assertEqual(self.mailhost.messages, [])\n         error = response.json()\n-        self.assertEqual(error[\'message\'],\n-                         \'Missing from or message parameters\')\n+        self.assertEqual(error["message"], "Missing from or message parameters")\n \n     def test_email_notification(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n-            json={\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\'\n-            })\n+            "/@email-notification",\n+            json={"from": "john@doe.com", "message": "Just want to say hi."},\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'Subject: [No Subject]\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'To: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("Subject: [No Subject]" in self.mailhost.messages[0])\n+        self.assertTrue("To: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_notification_all_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-notification\',\n+            "/@email-notification",\n             json={\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'To: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'John Doe\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("=?utf-8?q?This_is_the_subject" in self.mailhost.messages[0])\n+        self.assertTrue("To: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("John Doe" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 9fe77368..2d24eb01 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -21,28 +21,28 @@\n     PLONE5 = True\n \n \n-@unittest.skipIf(not PLONE5, \'email send not implemented for Plone < 5.\') # noqa\n+@unittest.skipIf(not PLONE5, "email send not implemented for Plone < 5.")  # noqa\n class EmailSendEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         registry = getUtility(IRegistry)\n-        registry[\'plone.email_from_address\'] = \'info@plone.org\'\n-        registry[\'plone.email_from_name\'] = u\'Plone test site\'\n+        registry["plone.email_from_address"] = "info@plone.org"\n+        registry["plone.email_from_name"] = u"Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         transaction.commit()\n \n@@ -52,57 +52,54 @@ def tearDown(self):\n \n     def test_email_send(self):\n         response = self.api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'Subject: =?utf-8?q?A_portal_user_via_Plone_site?=\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'From: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue(\n+            "Subject: =?utf-8?q?A_portal_user_via_Plone_site?="\n+            in self.mailhost.messages[0]\n+        )\n+        self.assertTrue("From: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_send_all_parameters(self):\n         response = self.api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertTrue(\'=?utf-8?q?This_is_the_subject\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'From: info@plone.org\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'John Doe\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Reply-To: john@doe.com\' in\n-                        self.mailhost.messages[0])\n-        self.assertTrue(\'Just want to say hi.\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("=?utf-8?q?This_is_the_subject" in self.mailhost.messages[0])\n+        self.assertTrue("From: info@plone.org" in self.mailhost.messages[0])\n+        self.assertTrue("John Doe" in self.mailhost.messages[0])\n+        self.assertTrue("Reply-To: john@doe.com" in self.mailhost.messages[0])\n+        self.assertTrue("Just want to say hi." in self.mailhost.messages[0])\n \n     def test_email_send_anonymous(self):\n         response = self.anon_api_session.post(\n-            \'/@email-send\',\n+            "/@email-send",\n             json={\n-                \'to\': \'jane@doe.com\',\n-                \'from\': \'john@doe.com\',\n-                \'message\': \'Just want to say hi.\',\n-                \'name\': \'John Doe\',\n-                \'subject\': \'This is the subject.\'\n-            })\n+                "to": "jane@doe.com",\n+                "from": "john@doe.com",\n+                "message": "Just want to say hi.",\n+                "name": "John Doe",\n+                "subject": "This is the subject.",\n+            },\n+        )\n \n         self.assertEqual(response.status_code, 401)\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex d4735d86..df3a34c3 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -16,181 +16,162 @@ class TestGroupsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        self.gtool.addGroup(\'ploneteam\', (), (),\n-                            properties=properties,\n-                            title=properties[\'title\'],\n-                            description=properties[\'description\'])\n+        self.gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_list_groups(self):\n-        response = self.api_session.get(\'/@groups\')\n+        response = self.api_session.get("/@groups")\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(5, len(response.json()))\n-        user_ids = [group[\'id\'] for group in response.json()]\n-        self.assertIn(\'Administrators\', user_ids)\n-        self.assertIn(\'Reviewers\', user_ids)\n-        self.assertIn(\'AuthenticatedUsers\', user_ids)\n-        self.assertIn(\'ploneteam\', user_ids)\n-        ptgroup = [x for x in response.json()\n-                   if x.get(\'groupname\') == \'ploneteam\'][0]\n-        self.assertEqual(\'ploneteam\', ptgroup.get(\'id\'))\n+        user_ids = [group["id"] for group in response.json()]\n+        self.assertIn("Administrators", user_ids)\n+        self.assertIn("Reviewers", user_ids)\n+        self.assertIn("AuthenticatedUsers", user_ids)\n+        self.assertIn("ploneteam", user_ids)\n+        ptgroup = [x for x in response.json() if x.get("groupname") == "ploneteam"][0]\n+        self.assertEqual("ploneteam", ptgroup.get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            ptgroup.get(\'@id\')\n+            self.portal.absolute_url() + "/@groups/ploneteam", ptgroup.get("@id")\n         )\n-        self.assertEqual(\'ploneteam@plone.org\', ptgroup.get(\'email\'))\n-        self.assertEqual(\'Plone Team\', ptgroup.get(\'title\'))\n-        self.assertEqual(\'We are Plone\', ptgroup.get(\'description\'))\n+        self.assertEqual("ploneteam@plone.org", ptgroup.get("email"))\n+        self.assertEqual("Plone Team", ptgroup.get("title"))\n+        self.assertEqual("We are Plone", ptgroup.get("description"))\n \n-        self.assertEqual(ptgroup.get(\'roles\'), [\'Authenticated\'])\n+        self.assertEqual(ptgroup.get("roles"), ["Authenticated"])\n \n         # We don\'t want the group members listed in the overview as there\n         # might be loads.\n         self.assertTrue(\n-            not any([\'users\' in group for group in response.json()]),\n-            "Users key found in groups listing"\n+            not any(["users" in group for group in response.json()]),\n+            "Users key found in groups listing",\n         )\n \n     def test_add_group(self):\n         response = self.api_session.post(\n-            \'/@groups\',\n+            "/@groups",\n             json={\n-                \'groupname\': \'fwt\',\n-                \'email\': \'fwt@plone.org\',\n-                \'title\': \'Framework Team\',\n-                \'description\': \'The Plone Framework Team\',\n-                \'roles\': [\'Manager\'],\n-                \'groups\': [\'Administrators\'],\n-                \'users\': [SITE_OWNER_NAME, TEST_USER_ID]\n+                "groupname": "fwt",\n+                "email": "fwt@plone.org",\n+                "title": "Framework Team",\n+                "description": "The Plone Framework Team",\n+                "roles": ["Manager"],\n+                "groups": ["Administrators"],\n+                "users": [SITE_OWNER_NAME, TEST_USER_ID],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        fwt = self.gtool.getGroupById(\'fwt\')\n-        self.assertEqual(\n-            "fwt@plone.org", fwt.getProperty(\'email\')\n-        )\n+        fwt = self.gtool.getGroupById("fwt")\n+        self.assertEqual("fwt@plone.org", fwt.getProperty("email"))\n         self.assertTrue(\n-            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(\n-                set(fwt.getGroupMemberIds())\n-            ),\n-            "Userids not found in group"\n+            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(set(fwt.getGroupMemberIds())),\n+            "Userids not found in group",\n         )\n \n     def test_add_group_groupname_is_required(self):\n-        response = self.api_session.post(\n-            \'/@groups\',\n-            json={\n-                "title": "Framework Team"\n-            },\n-        )\n+        response = self.api_session.post("/@groups", json={"title": "Framework Team"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'"Property \\\'groupname\\\' is required\' in response.text)\n+        self.assertTrue("\\"Property \'groupname\' is required" in response.text)\n \n     def test_get_group(self):\n-        response = self.api_session.get(\'/@groups/ploneteam\')\n+        response = self.api_session.get("/@groups/ploneteam")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\'ploneteam\', response.json().get(\'id\'))\n+        self.assertEqual("ploneteam", response.json().get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            response.json().get(\'@id\')\n+            self.portal.absolute_url() + "/@groups/ploneteam",\n+            response.json().get("@id"),\n         )\n-        self.assertEqual(\n-            \'ploneteam@plone.org\',\n-            response.json().get(\'email\')\n-        )\n-        self.assertEqual(\'ploneteam@plone.org\', response.json().get(\'email\'))\n-        self.assertEqual(\'Plone Team\', response.json().get(\'title\'))\n-        self.assertEqual(\'We are Plone\', response.json().get(\'description\'))\n-        self.assertIn(\'users\', response.json())\n+        self.assertEqual("ploneteam@plone.org", response.json().get("email"))\n+        self.assertEqual("ploneteam@plone.org", response.json().get("email"))\n+        self.assertEqual("Plone Team", response.json().get("title"))\n+        self.assertEqual("We are Plone", response.json().get("description"))\n+        self.assertIn("users", response.json())\n \n     def test_get_search_group_with_filter(self):\n-        response = self.api_session.get(\'/@groups\', params={\'query\': \'plo\'})\n+        response = self.api_session.get("/@groups", params={"query": "plo"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'ploneteam\', response.json()[0].get(\'id\'))\n-        self.assertEqual(\n-            self.portal.absolute_url() + \'/@groups/ploneteam\',\n-            response.json()[0].get(\'@id\')\n-        )\n+        self.assertEqual("ploneteam", response.json()[0].get("id"))\n         self.assertEqual(\n-            \'ploneteam@plone.org\',\n-            response.json()[0].get(\'email\')\n+            self.portal.absolute_url() + "/@groups/ploneteam",\n+            response.json()[0].get("@id"),\n         )\n+        self.assertEqual("ploneteam@plone.org", response.json()[0].get("email"))\n \n-        response = self.api_session.get(\'/@groups\', params={\'query\': \'Auth\'})\n+        response = self.api_session.get("/@groups", params={"query": "Auth"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'AuthenticatedUsers\', response.json()[0].get(\'id\'))\n+        self.assertEqual("AuthenticatedUsers", response.json()[0].get("id"))\n \n     def test_get_non_existing_group(self):\n-        response = self.api_session.get(\'/@groups/non-existing-group\')\n+        response = self.api_session.get("/@groups/non-existing-group")\n \n         self.assertEqual(response.status_code, 404)\n \n     def test_update_group(self):\n-        ploneteam = self.gtool.getGroupById(\'ploneteam\')\n+        ploneteam = self.gtool.getGroupById("ploneteam")\n         ploneteam.addMember(SITE_OWNER_NAME)\n         transaction.commit()\n         self.assertNotIn(TEST_USER_ID, ploneteam.getGroupMemberIds())\n         self.assertIn(SITE_OWNER_NAME, ploneteam.getGroupMemberIds())\n \n         payload = {\n-            \'groupname\': \'ploneteam\',\n-            \'email\': \'ploneteam2@plone.org\',\n-            \'users\': {\n-                TEST_USER_ID: True,\n-                SITE_OWNER_NAME: False,\n-            }\n+            "groupname": "ploneteam",\n+            "email": "ploneteam2@plone.org",\n+            "users": {TEST_USER_ID: True, SITE_OWNER_NAME: False},\n         }\n-        response = self.api_session.patch(\'/@groups/ploneteam\', json=payload)\n+        response = self.api_session.patch("/@groups/ploneteam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        ploneteam = self.gtool.getGroupById(\'ploneteam\')\n-        self.assertEqual(\'ploneteam\', ploneteam.id)\n-        self.assertEqual(\'Plone Team\', ploneteam.getProperty(\'title\'))\n-        self.assertEqual(\n-            \'ploneteam2@plone.org\',\n-            ploneteam.getProperty(\'email\')\n-        )\n+        ploneteam = self.gtool.getGroupById("ploneteam")\n+        self.assertEqual("ploneteam", ploneteam.id)\n+        self.assertEqual("Plone Team", ploneteam.getProperty("title"))\n+        self.assertEqual("ploneteam2@plone.org", ploneteam.getProperty("email"))\n         self.assertIn(TEST_USER_ID, ploneteam.getGroupMemberIds())\n         self.assertNotIn(SITE_OWNER_NAME, ploneteam.getGroupMemberIds())\n \n     def test_delete_group(self):\n-        response = self.api_session.delete(\'/@groups/ploneteam\')\n+        response = self.api_session.delete("/@groups/ploneteam")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(None, self.gtool.getGroupById(\'ploneteam\'))\n+        self.assertEqual(None, self.gtool.getGroupById("ploneteam"))\n \n     def test_delete_non_existing_group(self):\n-        response = self.api_session.delete(\'/@groups/non-existing-group\')\n+        response = self.api_session.delete("/@groups/non-existing-group")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 404)\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 0d262098..e4d2f0e8 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -17,26 +17,24 @@ class TestHistoryEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = \'{}/@history\'.format(self.doc.absolute_url())\n+        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n \n         transaction.commit()\n \n@@ -48,66 +46,52 @@ def test_get_types(self):\n         response = self.api_session.get(self.endpoint_url)\n         data = response.json()\n \n-        types = [item[\'type\'] for item in data]\n+        types = [item["type"] for item in data]\n \n-        self.assertEqual(set([\'versioning\', \'workflow\']), set(types))\n+        self.assertEqual(set(["versioning", "workflow"]), set(types))\n \n     def test_get_datastructure(self):\n         response = self.api_session.get(self.endpoint_url)\n         data = response.json()\n \n-        actor_keys = [\'@id\', \'id\', \'fullname\', \'username\']\n+        actor_keys = ["@id", "id", "fullname", "username"]\n \n-        main_keys = [\n-            \'action\',\n-            \'actor\',\n-            \'comments\',\n-            \'time\',\n-            \'transition_title\',\n-            \'type\',\n-        ]\n+        main_keys = ["action", "actor", "comments", "time", "transition_title", "type"]\n \n-        history_keys = main_keys + [\n-            \'@id\',\n-            \'may_revert\',\n-            \'version\'\n-        ]\n+        history_keys = main_keys + ["@id", "may_revert", "version"]\n \n-        workflow_keys = main_keys + [\n-            \'review_state\',\n-            \'state_title\',\n-        ]\n+        workflow_keys = main_keys + ["review_state", "state_title"]\n \n         for item in data:\n             # Make sure we\'ll add tests when new history types are added.\n-            self.assertIn(item[\'type\'], [\'versioning\', \'workflow\'])\n+            self.assertIn(item["type"], ["versioning", "workflow"])\n \n-            if item[\'type\'] == \'versioning\':\n+            if item["type"] == "versioning":\n                 self.assertEqual(set(item), set(history_keys))\n             else:\n                 self.assertEqual(set(item), set(workflow_keys))\n \n-            self.assertEqual(set(item[\'actor\']), set(actor_keys))\n+            self.assertEqual(set(item["actor"]), set(actor_keys))\n \n-            self.assertIsNotNone(item[\'action\'])\n+            self.assertIsNotNone(item["action"])\n \n     def test_revert(self):\n-        url = \'{}/@history\'.format(self.doc.absolute_url())\n-        response = self.api_session.patch(url, json={\'version\': 0})\n+        url = "{}/@history".format(self.doc.absolute_url())\n+        response = self.api_session.patch(url, json={"version": 0})\n         self.assertEqual(response.status_code, 200)\n \n         # My Document is the old title\n         self.assertEqual(\n             response.json(),\n-            {u\'message\': u\'My Document has been reverted to revision 0.\'}\n+            {u"message": u"My Document has been reverted to revision 0."},\n         )\n \n     def test_time_field(self):\n-        url = \'{}/@history\'.format(self.doc.absolute_url())\n+        url = "{}/@history".format(self.doc.absolute_url())\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item[\'time\'], six.string_types))\n+            self.assertTrue(isinstance(item["time"], six.string_types))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -115,56 +99,54 @@ def test_get_historical_link(self):\n         data = response.json()\n \n         for item in data:\n-            if item[\'type\'] == \'versioning\':\n+            if item["type"] == "versioning":\n                 self.assertTrue(\n-                    item[\'@id\'].endswith(\'@history/\' + str(item[\'version\']))\n+                    item["@id"].endswith("@history/" + str(item["version"]))\n                 )\n             else:\n-                self.assertNotIn(\'@id\', list(item))\n+                self.assertNotIn("@id", list(item))\n \n     def test_explicit_current(self):\n         # Does version=current get the current version\n-        url = self.doc.absolute_url() + \'/@history/current\'\n+        url = self.doc.absolute_url() + "/@history/current"\n         response = self.api_session.get(url)\n-        self.assertEqual(response.json()[\'title\'], \'Current version\')\n+        self.assertEqual(response.json()["title"], "Current version")\n \n     def test_previous_version(self):\n         # Does version=0 get the older version?\n-        url = self.doc.absolute_url() + \'/@history/0\'\n+        url = self.doc.absolute_url() + "/@history/0"\n         response = self.api_session.get(url)\n-        self.assertEqual(response.json()[\'title\'], \'My Document\')\n+        self.assertEqual(response.json()["title"], "My Document")\n \n     def test_no_sharing(self):\n-        url = self.doc.absolute_url() + \'/@history/0\'\n+        url = self.doc.absolute_url() + "/@history/0"\n         response = self.api_session.get(url)\n-        self.assertNotIn(\'sharing\', response.json())\n+        self.assertNotIn("sharing", response.json())\n \n \n class TestHistoryEndpointTranslatedMessages(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_with_history\',\n-            title=\'My Document\'\n+            "Document", id="doc_with_history", title="My Document"\n         )\n         self.doc = self.portal.doc_with_history\n-        self.doc.setTitle(\'Current version\')\n+        self.doc.setTitle("Current version")\n \n-        api.content.transition(self.doc, \'publish\')\n+        api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = \'{}/@history\'.format(self.doc.absolute_url())\n+        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n \n         transaction.commit()\n \n@@ -172,28 +154,19 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_actions_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Crear\',\n-            first_action[\'action\'],\n-        )\n+        self.assertEqual(u"Crear", first_action["action"])\n \n     def test_state_titles_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Privado\',\n-            first_action[\'state_title\'],\n-        )\n+        self.assertEqual(u"Privado", first_action["state_title"])\n \n     def test_transition_titles_are_translated(self):\n-        url = self.doc.absolute_url() + \'/@history\'\n+        url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(\n-            u\'Crear\',\n-            first_action[\'transition_title\'],\n-        )\n+        self.assertEqual(u"Crear", first_action["transition_title"])\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex e7c08903..dbbecb3f 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -16,113 +16,103 @@ class TestServicesNavigation(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder\',\n-            title=u\'Some Folder\')\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n         self.folder2 = createContentInContainer(\n-            self.portal, u\'Folder\',\n-            id=u\'folder2\',\n-            title=u\'Some Folder 2\')\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n         self.subfolder1 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder1\',\n-            title=u\'SubFolder 1\')\n+            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n         self.subfolder2 = createContentInContainer(\n-            self.folder, u\'Folder\',\n-            id=u\'subfolder2\',\n-            title=u\'SubFolder 2\')\n+            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n         self.thirdlevelfolder = createContentInContainer(\n-            self.subfolder1, u\'Folder\',\n-            id=u\'thirdlevelfolder\',\n-            title=u\'Third Level Folder\')\n+            self.subfolder1,\n+            u"Folder",\n+            id=u"thirdlevelfolder",\n+            title=u"Third Level Folder",\n+        )\n         self.fourthlevelfolder = createContentInContainer(\n-            self.thirdlevelfolder, u\'Folder\',\n-            id=u\'fourthlevelfolder\',\n-            title=u\'Fourth Level Folder\')\n+            self.thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n         createContentInContainer(\n-            self.folder, u\'Document\',\n-            id=u\'doc1\',\n-            title=u\'A document\')\n+            self.folder, u"Document", id=u"doc1", title=u"A document"\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_navigation_with_no_params_gets_only_top_level(self):\n-        response = self.api_session.get(\'/folder/@navigation\')\n+        response = self.api_session.get("/folder/@navigation")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                \'@id\': self.portal_url + u\'/folder/@navigation\',\n-                \'items\': [\n+                "@id": self.portal_url + u"/folder/@navigation",\n+                "items": [\n+                    {u"title": u"Home", u"@id": self.portal_url, u"description": u""},\n                     {\n-                        u\'title\': u\'Home\',\n-                        u\'@id\': self.portal_url,\n-                        u\'description\': u\'\',\n+                        u"title": u"Some Folder",\n+                        u"@id": self.portal_url + u"/folder",\n+                        u"description": u"",\n                     },\n                     {\n-                        u\'title\': u\'Some Folder\',\n-                        u\'@id\': self.portal_url + u\'/folder\',\n-                        u\'description\': u\'\',\n+                        u"@id": self.portal_url + u"/folder2",\n+                        u"description": u"",\n+                        u"title": u"Some Folder 2",\n                     },\n-                    {\n-                        u\'@id\': self.portal_url + u\'/folder2\',\n-                        u\'description\': u\'\',\n-                        u\'title\': u\'Some Folder 2\'\n-                    }\n-                ]\n-            }\n+                ],\n+            },\n         )\n \n     def test_navigation_service(self):\n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 2\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 2}\n+        )\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(len(response.json()[\'items\']), 3)\n-        self.assertEqual(\n-            response.json()[\'items\'][1][\'title\'], u\'Some Folder\')\n-        self.assertEqual(len(response.json()[\'items\'][1][\'items\']), 3)\n-        self.assertEqual(len(response.json()[\'items\'][2][\'items\']), 0)\n+        self.assertEqual(len(response.json()["items"]), 3)\n+        self.assertEqual(response.json()["items"][1]["title"], u"Some Folder")\n+        self.assertEqual(len(response.json()["items"][1]["items"]), 3)\n+        self.assertEqual(len(response.json()["items"][2]["items"]), 0)\n \n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 3\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 3}\n+        )\n \n+        self.assertEqual(len(response.json()["items"][1]["items"][0]["items"]), 1)\n         self.assertEqual(\n-            len(response.json()[\'items\'][1][\'items\'][0][\'items\']), 1)\n-        self.assertEqual(\n-            response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'title\'],\n-            u\'Third Level Folder\')\n-        self.assertNotIn(\n-            \'items\', response.json()[\'items\'][1][\'items\'][0][\'items\'][0])\n+            response.json()["items"][1]["items"][0]["items"][0]["title"],\n+            u"Third Level Folder",\n+        )\n+        self.assertNotIn("items", response.json()["items"][1]["items"][0]["items"][0])\n \n         response = self.api_session.get(\n-            \'/folder/@navigation\',\n-            params={\n-                "expand.navigation.depth": 4\n-            })\n+            "/folder/@navigation", params={"expand.navigation.depth": 4}\n+        )\n \n         self.assertEqual(\n-            len(response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'items\']),\n-            1)\n+            len(response.json()["items"][1]["items"][0]["items"][0]["items"]), 1\n+        )\n         self.assertEqual(\n-            response.json()[\'items\'][1][\'items\'][0][\'items\'][0][\'items\'][0][\'title\'], # noqa\n-            u\'Fourth Level Folder\')\n+            response.json()["items"][1]["items"][0]["items"][0]["items"][0][\n+                "title"\n+            ],  # noqa\n+            u"Fourth Level Folder",\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex 2aaaf608..735e9263 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -16,90 +16,76 @@ class TestPrincipalsEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         self.user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            properties=properties\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n \n-        self.gtool = api.portal.get_tool(\'portal_groups\')\n+        self.gtool = api.portal.get_tool("portal_groups")\n         properties = {\n-            \'title\': \'Plone Team\',\n-            \'description\': \'We are Plone\',\n-            \'email\': \'ploneteam@plone.org\',\n+            "title": "Plone Team",\n+            "description": "We are Plone",\n+            "email": "ploneteam@plone.org",\n         }\n-        self.gtool.addGroup(\'ploneteam\', (), (),\n-                            properties=properties,\n-                            title=properties[\'title\'],\n-                            description=properties[\'description\'])\n+        self.gtool.addGroup(\n+            "ploneteam",\n+            (),\n+            (),\n+            properties=properties,\n+            title=properties["title"],\n+            description=properties["description"],\n+        )\n         transaction.commit()\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_principals(self):\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "noam"\n-            }\n-        )\n+        response = self.api_session.get("/@principals", params={"search": "noam"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'users\']))\n-        self.assertEqual(\'noam\', response[\'users\'][0][\'id\'])\n-\n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "plone"\n-            }\n-        )\n+        self.assertEqual(1, len(response["users"]))\n+        self.assertEqual("noam", response["users"][0]["id"])\n+\n+        response = self.api_session.get("/@principals", params={"search": "plone"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'groups\']))\n-        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response["groups"]))\n+        self.assertEqual("ploneteam", response["groups"][0]["id"])\n \n     def test_get_principals_response_both(self):\n         self.user = api.user.create(\n-            email=\'plone.user@example.com\',\n-            username=\'plone.user\'\n+            email="plone.user@example.com", username="plone.user"\n         )\n         transaction.commit()\n \n-        response = self.api_session.get(\n-            \'/@principals\',\n-            params={\n-                "search": "plone"\n-            }\n-        )\n+        response = self.api_session.get("/@principals", params={"search": "plone"})\n         self.assertEqual(200, response.status_code)\n \n         response = response.json()\n         self.assertEqual(2, len(response))\n-        self.assertEqual(1, len(response[\'users\']))\n-        self.assertEqual(1, len(response[\'groups\']))\n-        self.assertEqual(\'plone.user\', response[\'users\'][0][\'id\'])\n-        self.assertEqual(\'ploneteam\', response[\'groups\'][0][\'id\'])\n+        self.assertEqual(1, len(response["users"]))\n+        self.assertEqual(1, len(response["groups"]))\n+        self.assertEqual("plone.user", response["users"][0]["id"])\n+        self.assertEqual("ploneteam", response["groups"][0]["id"])\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 7e6adf17..514d27ff 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -21,18 +21,15 @@\n \n \n class ISampleTile(Interface):\n-    title = zope.schema.TextLine(\n-        title=u\'Title\',\n-        required=False\n-    )\n+    title = zope.schema.TextLine(title=u"Title", required=False)\n \n \n class SampleTile(Tile):\n \n-    __name__ = \'sample.tile\'  # would normally be set by a ZCML handler\n+    __name__ = "sample.tile"  # would normally be set by a ZCML handler\n \n     def __call__(self):\n-        return \'<html><body><b>My tile</b></body></html>\'\n+        return "<html><body><b>My tile</b></body></html>"\n \n \n class TestServicesTiles(unittest.TestCase):\n@@ -40,115 +37,98 @@ class TestServicesTiles(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\')\n+        fti = queryUtility(IDexterityFTI, name="Document")\n         behavior_list = [a for a in fti.behaviors]\n-        behavior_list.append(\'plone.tiles\')\n-        behavior_list.append(\'plone.leadimage\')\n+        behavior_list.append("plone.tiles")\n+        behavior_list.append("plone.leadimage")\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u\'Document\',\n-            id=u\'doc\',\n-            title=u\'A document\')\n+            self.portal, u"Document", id=u"doc", title=u"A document"\n+        )\n         transaction.commit()\n \n         sampleTileType = TileType(\n-            u\'sample.tile\',\n-            u\'Sample tile\',\n-            \'cmf.ModifyPortalContent\',\n-            \'zope.Public\',\n-            description=u\'A tile used for testing\',\n+            u"sample.tile",\n+            u"Sample tile",\n+            "cmf.ModifyPortalContent",\n+            "zope.Public",\n+            description=u"A tile used for testing",\n             schema=ISampleTile,\n-            icon=\'testicon\')\n-        provideUtility(sampleTileType, name=u\'sample.tile\')\n-        provideAdapter(SampleTile, (Interface, Interface),\n-                       IBasicTile, name=u\'sample.tile\')\n+            icon="testicon",\n+        )\n+        provideUtility(sampleTileType, name=u"sample.tile")\n+        provideAdapter(\n+            SampleTile, (Interface, Interface), IBasicTile, name=u"sample.tile"\n+        )\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_available_tiles(self):\n-        response = self.api_session.get(\'/@tiles\')\n+        response = self.api_session.get("/@tiles")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(len(response), 1)\n-        self.assertEqual(\n-            response[0][\'@id\'],\n-            self.portal_url + u\'/@tiles/sample.tile\')\n-        self.assertEqual(response[0][\'title\'], u\'Sample tile\')\n-        self.assertEqual(\n-            response[0][\'description\'], u\'A tile used for testing\')\n-        self.assertEqual(response[0][\'icon\'], \'testicon\')\n+        self.assertEqual(response[0]["@id"], self.portal_url + u"/@tiles/sample.tile")\n+        self.assertEqual(response[0]["title"], u"Sample tile")\n+        self.assertEqual(response[0]["description"], u"A tile used for testing")\n+        self.assertEqual(response[0]["icon"], "testicon")\n \n     def test_get_tile(self):\n-        response = self.api_session.get(\'/@tiles/sample.tile\')\n+        response = self.api_session.get("/@tiles/sample.tile")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual(response[\'title\'], u\'Sample tile\')\n-        self.assertEqual(\n-            response[\'properties\'][\'title\'][\'title\'], u\'Title\')\n-        self.assertEqual(\n-            response[\'properties\'][\'title\'][\'type\'], u\'string\')\n+        self.assertEqual(response["title"], u"Sample tile")\n+        self.assertEqual(response["properties"]["title"]["title"], u"Title")\n+        self.assertEqual(response["properties"]["title"]["type"], u"string")\n \n     def test_patch_tiles_list(self):\n         response = self.api_session.patch(\n-            \'/doc\',\n+            "/doc",\n             json={\n                 "tiles": {\n-                    \'uuid1\': {\'@type\': \'title\'},\n-                    \'uuid2\': {\'@type\': \'description\'}\n-                },\n-            })\n+                    "uuid1": {"@type": "title"},\n+                    "uuid2": {"@type": "description"},\n+                }\n+            },\n+        )\n \n         self.assertEqual(response.status_code, 204)\n \n-        response = self.api_session.get(\'/doc\')\n+        response = self.api_session.get("/doc")\n         response = response.json()\n \n         self.assertEqual(\n-            response[\'tiles\'],\n-            {\n-                \'uuid1\': {\'@type\': \'title\'},\n-                \'uuid2\': {\'@type\': \'description\'}\n-            }\n+            response["tiles"],\n+            {"uuid1": {"@type": "title"}, "uuid2": {"@type": "description"}},\n         )\n \n     def test_patch_tiles_layout(self):\n         response = self.api_session.patch(\n-            \'/doc\',\n-            json={\n-                "tiles_layout": {\n-                    "items": ["#uuid1", "#uuid2"]\n-                }\n-            })\n+            "/doc", json={"tiles_layout": {"items": ["#uuid1", "#uuid2"]}}\n+        )\n \n         self.assertEqual(response.status_code, 204)\n \n-        response = self.api_session.get(\'/doc\')\n+        response = self.api_session.get("/doc")\n         response = response.json()\n \n-        self.assertEqual(\n-            response[\'tiles_layout\'],\n-            {\n-                "items": ["#uuid1", "#uuid2"]\n-            }\n-        )\n+        self.assertEqual(response["tiles_layout"], {"items": ["#uuid1", "#uuid2"]})\n \n     def test_get_tiles_layout_schema(self):\n-        response = self.api_session.get(\'/@types/Document\')\n+        response = self.api_session.get("/@types/Document")\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex bb83e4f1..9ef8357c 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -17,83 +17,72 @@ class TestServicesTypes(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json\',\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json",\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n         for item in response.json():\n-            self.assertEqual(\n-                sorted(item),\n-                sorted([\'@id\', \'title\', \'addable\'])\n-            )\n+            self.assertEqual(sorted(item), sorted(["@id", "title", "addable"]))\n \n     def test_get_types_document(self):\n         response = self.api_session.get(\n-            \'{}/@types/Document\'.format(self.portal.absolute_url())\n+            "{}/@types/Document".format(self.portal.absolute_url())\n         )\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            response.headers.get(\'Content-Type\'),\n-            \'application/json+schema\',\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json+schema", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            response.headers.get("Content-Type"),\n+            "application/json+schema",\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json+schema", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n \n     def test_get_types_with_unknown_type(self):\n         response = self.api_session.get(\n-            \'{}/@types/UnknownType\'.format(self.portal.absolute_url())\n+            "{}/@types/UnknownType".format(self.portal.absolute_url())\n         )\n \n         self.assertEqual(response.status_code, 404)\n         self.assertEqual(\n-            \'application/json\',\n-            response.headers.get(\'Content-Type\'),\n-            \'Sending a GET request to @types endpoint should respond with \' +\n-            \'Content-Type: "application/json", not \' +\n-            \'"{}"\'.format(response.headers.get(\'Content-Type\'))\n+            "application/json",\n+            response.headers.get("Content-Type"),\n+            "Sending a GET request to @types endpoint should respond with "\n+            + \'Content-Type: "application/json", not \'\n+            + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n \n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n \n         response_allowed_ids = [\n-            x[\'@id\'].split(\'/\')[-1]\n-            for x in response.json()\n-            if x[\'addable\']\n+            x["@id"].split("/")[-1] for x in response.json() if x["addable"]\n         ]\n \n         # We check subset here, because only DX types are returned by the\n@@ -102,78 +91,65 @@ def test_contextaware_addable(self):\n         self.assertTrue(set(response_allowed_ids).issubset(set(allowed_ids)))\n \n     def test_image_type(self):\n-        response = self.api_session.get(\'/@types/Image\')\n+        response = self.api_session.get("/@types/Image")\n         response = response.json()\n-        self.assertIn(\'fieldsets\', response)\n-        self.assertIn(\n-            \'image.data\', response[\'properties\'][\'image\'][\'properties\'])\n+        self.assertIn("fieldsets", response)\n+        self.assertIn("image.data", response["properties"]["image"]["properties"])\n \n     def test_file_type(self):\n-        response = self.api_session.get(\'/@types/File\')\n+        response = self.api_session.get("/@types/File")\n         response = response.json()\n-        self.assertIn(\'fieldsets\', response)\n-        self.assertIn(\n-            \'file.data\', response[\'properties\'][\'file\'][\'properties\'])\n+        self.assertIn("fieldsets", response)\n+        self.assertIn("file.data", response["properties"]["file"]["properties"])\n \n     def test_event_type(self):\n-        response = self.api_session.get(\'/@types/Event\')\n+        response = self.api_session.get("/@types/Event")\n         response = response.json()\n-        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n+        self.assertIn("title", response["properties"]["start"])\n \n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n-            password=\'1234\'\n+            email="noam.chomsky@example.com", username="noam", password="1234"\n         )\n \n         folder = api.content.create(\n-            container=self.portal,\n-            id="folder",\n-            type=\'Folder\',\n-            title=u\'folder\',)\n+            container=self.portal, id="folder", type="Folder", title=u"folder"\n+        )\n \n         folder_cant_add = api.content.create(\n             container=self.portal,\n             id="folder_cant_add",\n-            type=\'Folder\',\n-            title=u\'folder_cant_add\',)\n+            type="Folder",\n+            title=u"folder_cant_add",\n+        )\n \n-        api.user.grant_roles(\n-            user=user,\n-            obj=folder,\n-            roles=[\'Contributor\', ])\n+        api.user.grant_roles(user=user, obj=folder, roles=["Contributor"])\n \n-        api.user.grant_roles(\n-            user=user,\n-            obj=folder_cant_add,\n-            roles=[\'Reader\', ])\n+        api.user.grant_roles(user=user, obj=folder_cant_add, roles=["Reader"])\n \n         transaction.commit()\n \n-        self.api_session.auth = (\'noam\', \'1234\')\n+        self.api_session.auth = ("noam", "1234")\n         # In the folder, the user should be able to add types since we granted\n         # Contributor role on it\n-        response = self.api_session.get(\'/folder/@types\')\n+        response = self.api_session.get("/folder/@types")\n         response = response.json()\n \n         # Any addable type will do.\n-        self.assertTrue(any(a[\'addable\'] for a in response))\n+        self.assertTrue(any(a["addable"] for a in response))\n \n         # In the folder where the user only have Reader role, no types are\n         # addable\n-        response = self.api_session.get(\'/folder_cant_add/@types\')\n+        response = self.api_session.get("/folder_cant_add/@types")\n         response = response.json()\n \n-        self.assertEqual(\n-            len([a for a in response if a[\'addable\']]), 0)\n+        self.assertEqual(len([a for a in response if a["addable"]]), 0)\n \n         # and in the root Plone site there\'s no addable types\n-        response = self.api_session.get(\'/@types\')\n+        response = self.api_session.get("/@types")\n         response = response.json()\n \n-        self.assertEqual(\n-            len([a for a in response if a[\'addable\']]), 0)\n+        self.assertEqual(len([a for a in response if a["addable"]]), 0)\n \n \n class TestServicesTypesTranslatedTitles(unittest.TestCase):\n@@ -181,13 +157,13 @@ class TestServicesTypesTranslatedTitles(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n-        self.api_session.headers.update({\'Accept-Language\': \'es\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.headers.update({"Accept-Language": "es"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         transaction.commit()\n@@ -196,20 +172,21 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types_translated(self):\n-        response = self.api_session.get(\n-            \'{}/@types\'.format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n \n         self.assertEqual(response.status_code, 200)\n \n-        self.assertEqual({\n-            u\'Archivo\',\n-            u\'Carpeta\',\n-            u\'Colecci\xc3\xb3n\',\n-            u\'DX Test Document\',\n-            u\'Enlace\',\n-            u\'Evento\',\n-            u\'Imagen\',\n-            u\'Noticia\',\n-            u\'P\xc3\xa1gina\'},\n-            set(item[\'title\'] for item in response.json()))\n+        self.assertEqual(\n+            {\n+                u"Archivo",\n+                u"Carpeta",\n+                u"Colecci\xc3\xb3n",\n+                u"DX Test Document",\n+                u"Enlace",\n+                u"Evento",\n+                u"Imagen",\n+                u"Noticia",\n+                u"P\xc3\xa1gina",\n+            },\n+            set(item["title"] for item in response.json()),\n+        )\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 191fb186..186f067b 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -27,43 +27,43 @@ class TestUsersEndpoint(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.mailhost = getUtility(IMailHost)\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         self.anon_api_session = RelativeSession(self.portal_url)\n-        self.anon_api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.anon_api_session.headers.update({"Accept": "application/json"})\n \n         properties = {\n-            \'email\': \'noam.chomsky@example.com\',\n-            \'username\': \'noamchomsky\',\n-            \'fullname\': \'Noam Avram Chomsky\',\n-            \'home_page\': \'web.mit.edu/chomsky\',\n-            \'description\': \'Professor of Linguistics\',\n-            \'location\': \'Cambridge, MA\'\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n         }\n         api.user.create(\n-            email=\'noam.chomsky@example.com\',\n-            username=\'noam\',\n+            email="noam.chomsky@example.com",\n+            username="noam",\n             properties=properties,\n-            password=u\'password\'\n+            password=u"password",\n         )\n         properties = {\n-            \'email\': \'otheruser@example.com\',\n-            \'username\': \'otheruser\',\n-            \'fullname\': \'Other user\',\n+            "email": "otheruser@example.com",\n+            "username": "otheruser",\n+            "fullname": "Other user",\n         }\n         api.user.create(\n-            email=\'otheruser@example.com\',\n-            username=\'otheruser\',\n+            email="otheruser@example.com",\n+            username="otheruser",\n             properties=properties,\n-            password=u\'otherpassword\'\n+            password=u"otherpassword",\n         )\n         transaction.commit()\n \n@@ -72,84 +72,70 @@ def tearDown(self):\n         self.anon_api_session.close()\n \n     def test_list_users(self):\n-        response = self.api_session.get(\'/@users\')\n+        response = self.api_session.get("/@users")\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(4, len(response.json()))\n-        user_ids = [user[\'id\'] for user in response.json()]\n-        self.assertIn(\'admin\', user_ids)\n-        self.assertIn(\'test_user_1_\', user_ids)\n-        self.assertIn(\'noam\', user_ids)\n-        noam = [x for x in response.json() if x.get(\'username\') == \'noam\'][0]\n-        self.assertEqual(\'noam\', noam.get(\'id\'))\n-        self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            noam.get(\'@id\')\n-        )\n-        self.assertEqual(\'noam.chomsky@example.com\', noam.get(\'email\'))\n-        self.assertEqual(\'Noam Avram Chomsky\', noam.get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', noam.get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', noam.get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', noam.get(\'location\'))\n+        user_ids = [user["id"] for user in response.json()]\n+        self.assertIn("admin", user_ids)\n+        self.assertIn("test_user_1_", user_ids)\n+        self.assertIn("noam", user_ids)\n+        noam = [x for x in response.json() if x.get("username") == "noam"][0]\n+        self.assertEqual("noam", noam.get("id"))\n+        self.assertEqual(self.portal.absolute_url() + "/@users/noam", noam.get("@id"))\n+        self.assertEqual("noam.chomsky@example.com", noam.get("email"))\n+        self.assertEqual("Noam Avram Chomsky", noam.get("fullname"))\n+        self.assertEqual("web.mit.edu/chomsky", noam.get("home_page"))  # noqa\n+        self.assertEqual("Professor of Linguistics", noam.get("description"))  # noqa\n+        self.assertEqual("Cambridge, MA", noam.get("location"))\n \n     def test_list_users_without_being_manager(self):\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users\')\n+        response = noam_api_session.get("/@users")\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_list_users_as_anonymous(self):\n \n-        response = self.anon_api_session.get(\'/@users\')\n+        response = self.anon_api_session.get("/@users")\n         self.assertEqual(response.status_code, 401)\n \n     def test_add_user(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n                 "password": "peopleshistory",\n-                "roles": ["Contributor", ],\n+                "roles": ["Contributor"],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        howard = api.user.get(userid=\'howard\')\n-        self.assertEqual(\n-            "howard.zinn@example.com", howard.getProperty(\'email\')\n-        )\n-        self.assertIn(\'Contributor\', api.user.get_roles(username="howard"))\n+        howard = api.user.get(userid="howard")\n+        self.assertEqual("howard.zinn@example.com", howard.getProperty("email"))\n+        self.assertIn("Contributor", api.user.get_roles(username="howard"))\n \n     def test_add_user_username_is_required(self):\n-        response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "password": "noamchomsky"\n-            },\n-        )\n+        response = self.api_session.post("/@users", json={"password": "noamchomsky"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is required\' in response.text)\n+        self.assertTrue("Property \'username\' is required" in response.text)\n \n     def test_add_user_password_is_required(self):\n-        response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "noamchomsky"\n-            },\n-        )\n+        response = self.api_session.post("/@users", json={"username": "noamchomsky"})\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n         self.assertTrue(\n-            (\'You have to either send a \'\n-             \'password or sendPasswordReset\') in response.text)\n+            ("You have to either send a " "password or sendPasswordReset")\n+            in response.text\n+        )\n \n     def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         # enable use_email_as_login\n@@ -157,16 +143,11 @@ def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "noam",\n-                "password": "secret"\n-            },\n+            "/@users", json={"username": "noam", "password": "secret"}\n         )\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is not allowed\' in\n-                        response.text)\n+        self.assertTrue("Property \'username\' is not allowed" in response.text)\n \n     def test_add_user_email_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -174,16 +155,12 @@ def test_add_user_email_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(api.user.get(userid=\'howard.zinn@example.com\'))\n+        self.assertTrue(api.user.get(userid="howard.zinn@example.com"))\n \n     def test_username_is_not_allowed_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -191,18 +168,17 @@ def test_username_is_not_allowed_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "secret"\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'username\\\' is not allowed\'\n-                        in response.text)\n+        self.assertTrue("Property \'username\' is not allowed" in response.text)\n \n     def test_add_user_with_email_login_enabled(self):\n         # enable use_email_as_login\n@@ -210,38 +186,33 @@ def test_add_user_with_email_login_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user = api.user.get(userid=\'howard.zinn@example.com\')\n+        user = api.user.get(userid="howard.zinn@example.com")\n         self.assertTrue(user)\n-        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n-        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+        self.assertEqual("howard.zinn@example.com", user.getUserName())\n+        self.assertEqual("howard.zinn@example.com", user.getProperty("email"))\n \n     def test_add_user_with_sendPasswordRest_sends_email(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "sendPasswordReset": True\n+                "sendPasswordReset": True,\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(\'To: howard.zinn@example.com\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("To: howard.zinn@example.com" in self.mailhost.messages[0])\n \n     def test_add_user_send_properties(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "password": "secret",\n@@ -252,8 +223,8 @@ def test_add_user_send_properties(self):\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        member = api.user.get(username=\'howard\')\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Howard Zinn\')\n+        member = api.user.get(username="howard")\n+        self.assertEqual(member.getProperty("fullname"), "Howard Zinn")\n \n     def test_add_anon_user_sends_properties_are_saved(self):\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n@@ -261,7 +232,7 @@ def test_add_anon_user_sends_properties_are_saved(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n@@ -271,8 +242,8 @@ def test_add_anon_user_sends_properties_are_saved(self):\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        member = api.user.get(username=\'howard\')\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Howard Zinn\')\n+        member = api.user.get(username="howard")\n+        self.assertEqual(member.getProperty("fullname"), "Howard Zinn")\n \n     def test_add_anon_no_roles(self):\n         """Make sure anonymous users cannot set their own roles.\n@@ -283,19 +254,19 @@ def test_add_anon_no_roles(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "roles": [\'Manager\'],\n+                "roles": ["Manager"],\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        errors = response.json()[\'error\'][\'errors\']\n-        fields = [x[\'field\'] for x in errors]\n-        self.assertEqual([\'roles\'], fields)\n+        errors = response.json()["error"]["errors"]\n+        fields = [x["field"] for x in errors]\n+        self.assertEqual(["roles"], fields)\n \n     def test_add_user_with_uuid_as_userid_enabled(self):\n         # enable use_email_as_login\n@@ -304,389 +275,341 @@ def test_add_user_with_uuid_as_userid_enabled(self):\n         security_settings.use_uuid_as_userid = True\n         transaction.commit()\n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n-        self.assertEqual(\'howard.zinn@example.com\', user.getUserName())\n-        self.assertEqual(\'howard.zinn@example.com\', user.getProperty(\'email\'))\n+        self.assertEqual("howard.zinn@example.com", user.getUserName())\n+        self.assertEqual("howard.zinn@example.com", user.getProperty("email"))\n \n     def test_get_user(self):\n-        response = self.api_session.get(\'/@users/noam\')\n+        response = self.api_session.get("/@users/noam")\n \n         self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\'noam\', response.json().get(\'id\'))\n+        self.assertEqual("noam", response.json().get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            response.json().get(\'@id\')\n+            self.portal.absolute_url() + "/@users/noam", response.json().get("@id")\n         )\n+        self.assertEqual("noam.chomsky@example.com", response.json().get("email"))\n+        self.assertEqual("Noam Avram Chomsky", response.json().get("fullname"))\n         self.assertEqual(\n-            \'noam.chomsky@example.com\',\n-            response.json().get(\'email\')\n-        )\n-        self.assertEqual(\'Noam Avram Chomsky\', response.json().get(\'fullname\'))\n-        self.assertEqual(\'web.mit.edu/chomsky\', response.json().get(\'home_page\'))  # noqa\n-        self.assertEqual(\'Professor of Linguistics\', response.json().get(\'description\'))  # noqa\n-        self.assertEqual(\'Cambridge, MA\', response.json().get(\'location\'))\n+            "web.mit.edu/chomsky", response.json().get("home_page")\n+        )  # noqa\n+        self.assertEqual(\n+            "Professor of Linguistics", response.json().get("description")\n+        )  # noqa\n+        self.assertEqual("Cambridge, MA", response.json().get("location"))\n \n     def test_get_user_as_anonymous(self):\n-        response = self.anon_api_session.get(\'/@users/noam\')\n+        response = self.anon_api_session.get("/@users/noam")\n         self.assertEqual(response.status_code, 401)\n \n     def test_get_other_user_info_when_logged_in(self):\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users/otheruser\')\n+        response = noam_api_session.get("/@users/otheruser")\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n-        response = self.api_session.get(\'/@users\', params={\'query\': \'noa\'})\n+        response = self.api_session.get("/@users", params={"query": "noa"})\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'noam\', response.json()[0].get(\'id\'))\n+        self.assertEqual("noam", response.json()[0].get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + \'/@users/noam\',\n-            response.json()[0].get(\'@id\')\n+            self.portal.absolute_url() + "/@users/noam", response.json()[0].get("@id")\n         )\n+        self.assertEqual("noam.chomsky@example.com", response.json()[0].get("email"))\n         self.assertEqual(\n-            \'noam.chomsky@example.com\',\n-            response.json()[0].get(\'email\')\n-        )\n-        self.assertEqual(\'Noam Avram Chomsky\', response.json()[0].get(\'fullname\'))  # noqa\n+            "Noam Avram Chomsky", response.json()[0].get("fullname")\n+        )  # noqa\n \n-        response = self.api_session.get(\'/@users\', params={\'query\': \'howa\'})\n+        response = self.api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()), 1)\n-        self.assertEqual(\'howard\', response.json()[0].get(\'id\'))\n+        self.assertEqual("howard", response.json()[0].get("id"))\n \n     def test_get_search_user_with_filter_as_anonymous(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n-        response = self.anon_api_session.get(\n-            \'/@users\',\n-            params={\'query\': \'howa\'}\n-        )\n+        response = self.anon_api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 401)\n \n     def test_get_search_user_with_filter_as_unauthorized_user(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n         noam_api_session = RelativeSession(self.portal_url)\n-        noam_api_session.headers.update({\'Accept\': \'application/json\'})\n-        noam_api_session.auth = (\'noam\', \'password\')\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n \n-        response = noam_api_session.get(\'/@users\', params={\'query\': \'howa\'})\n+        response = noam_api_session.get("/@users", params={"query": "howa"})\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n     def test_get_non_existing_user(self):\n-        response = self.api_session.get(\'/@users/non-existing-user\')\n+        response = self.api_session.get("/@users/non-existing-user")\n \n         self.assertEqual(response.status_code, 404)\n \n     def test_update_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'avram\',\n-            \'email\': \'avram.chomsky@example.com\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "avram",\n+            "email": "avram.chomsky@example.com",\n         }\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        noam = api.user.get(userid=\'noam\')\n-        self.assertEqual(\'noam\', noam.getUserId())  # user id never changes\n-        self.assertEqual(\'avram\', noam.getUserName())\n-        self.assertEqual(\'Noam A. Chomsky\', noam.getProperty(\'fullname\'))\n-        self.assertEqual(\n-            \'avram.chomsky@example.com\',\n-            noam.getProperty(\'email\')\n-        )\n+        noam = api.user.get(userid="noam")\n+        self.assertEqual("noam", noam.getUserId())  # user id never changes\n+        self.assertEqual("avram", noam.getUserName())\n+        self.assertEqual("Noam A. Chomsky", noam.getProperty("fullname"))\n+        self.assertEqual("avram.chomsky@example.com", noam.getProperty("email"))\n \n     def test_user_can_update_himself(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        noam = api.user.get(userid=\'noam\')\n-        self.assertEqual(\'noam\', noam.getUserId())  # user id never changes\n-        self.assertEqual(\'Noam A. Chomsky\', noam.getProperty(\'fullname\'))\n-        self.assertEqual(\n-            \'avram.chomsky@plone.org\',\n-            noam.getProperty(\'email\')\n-        )\n+        noam = api.user.get(userid="noam")\n+        self.assertEqual("noam", noam.getUserId())  # user id never changes\n+        self.assertEqual("Noam A. Chomsky", noam.getProperty("fullname"))\n+        self.assertEqual("avram.chomsky@plone.org", noam.getProperty("email"))\n \n     def test_update_roles(self):\n-        self.assertNotIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertNotIn("Contributor", api.user.get_roles(username="noam"))\n \n-        self.api_session.patch(\n-            \'/@users/noam\',\n-            json={\'roles\': {\'Contributor\': True}}\n-        )\n+        self.api_session.patch("/@users/noam", json={"roles": {"Contributor": True}})\n         transaction.commit()\n-        self.assertIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertIn("Contributor", api.user.get_roles(username="noam"))\n \n-        self.api_session.patch(\n-            \'/@users/noam\',\n-            json={\'roles\': {\'Contributor\': False}}\n-        )\n+        self.api_session.patch("/@users/noam", json={"roles": {"Contributor": False}})\n         transaction.commit()\n-        self.assertNotIn(\'Contributor\', api.user.get_roles(username=\'noam\'))\n+        self.assertNotIn("Contributor", api.user.get_roles(username="noam"))\n \n     def test_update_user_password(self):\n-        old_password_hashes = dict(\n-            self.portal.acl_users.source_users._user_passwords\n-        )\n-        payload = {\'password\': \'secret\'}\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        old_password_hashes = dict(self.portal.acl_users.source_users._user_passwords)\n+        payload = {"password": "secret"}\n+        response = self.api_session.patch("/@users/noam", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n \n-        new_password_hashes = dict(\n-            self.portal.acl_users.source_users._user_passwords\n-        )\n-        self.assertNotEqual(\n-            old_password_hashes[\'noam\'], new_password_hashes[\'noam\']\n-        )\n+        new_password_hashes = dict(self.portal.acl_users.source_users._user_passwords)\n+        self.assertNotEqual(old_password_hashes["noam"], new_password_hashes["noam"])\n \n     def test_update_portrait(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_update_portrait_with_default_plone_scaling(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\',\n-                \'scale\': True\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n+                "scale": True,\n             }\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_update_portrait_by_manager(self):\n         payload = {\n-            \'portrait\': {\n-                \'filename\': \'image.png\',\n-                \'encoding\': \'base64\',\n-                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n-                \'content-type\': \'image/png\'\n+            "portrait": {\n+                "filename": "image.png",\n+                "encoding": "base64",\n+                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "content-type": "image/png",\n             }\n         }\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 204)\n         transaction.commit()\n \n-        user = self.api_session.get(\'/@users/noam\').json()\n+        user = self.api_session.get("/@users/noam").json()\n         self.assertTrue(\n-            user.get(\'portrait\').endswith(\n-                \'plone/portal_memberdata/portraits/noam\'),\n+            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n         )\n \n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'noam\', \'password\')\n-        response = self.anon_api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        response = self.anon_api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 401)\n \n     def test_user_can_not_update_another_user(self):\n         payload = {\n-            \'fullname\': \'Noam A. Chomsky\',\n-            \'username\': \'noam\',\n-            \'email\': \'avram.chomsky@plone.org\'\n+            "fullname": "Noam A. Chomsky",\n+            "username": "noam",\n+            "email": "avram.chomsky@plone.org",\n         }\n-        self.api_session.auth = (\'otheruser\', \'otherpassword\')\n-        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        self.api_session.auth = ("otheruser", "otherpassword")\n+        response = self.api_session.patch("/@users/noam", json=payload)\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_user_requests_password_sends_password_via_mail(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         payload = {}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n         # FIXME: Test that mail is sent\n \n     def test_user_can_set_her_own_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         self.portal.manage_permission(\n-            SetOwnPassword, roles=[\'Authenticated\', \'Manager\'], acquire=False)\n+            SetOwnPassword, roles=["Authenticated", "Manager"], acquire=False\n+        )\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        authed = self.portal.acl_users.authenticate(\'noam\', \'new_password\',\n-                                                    {})\n+        authed = self.portal.acl_users.authenticate("noam", "new_password", {})\n         self.assertTrue(authed)\n \n     def test_normal_authenticated_user_cannot_set_other_users_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n+        self.api_session.auth = ("noam", "password")\n         self.portal.manage_permission(\n-            SetOwnPassword, roles=[\'Authenticated\', \'Manager\'], acquire=False)\n+            SetOwnPassword, roles=["Authenticated", "Manager"], acquire=False\n+        )\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/otheruser/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post(\n+            "/@users/otheruser/reset-password", json=payload\n+        )\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Wrong user\')\n+        self.assertEqual(response.json()["error"]["type"], "Wrong user")\n \n     def test_user_set_own_password_requires_set_own_password_permission(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        self.portal.manage_permission(SetOwnPassword, roles=[\'Manager\'],\n-                                      acquire=False)\n+        self.api_session.auth = ("noam", "password")\n+        self.portal.manage_permission(SetOwnPassword, roles=["Manager"], acquire=False)\n         transaction.commit()\n \n-        payload = {\'old_password\': \'password\',\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"old_password": "password", "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 403)\n \n     def test_user_set_own_password_requires_old_and_new_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'old_password\': \'password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"old_password": "password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n-        payload = {\'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n+        payload = {"new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n \n     def test_user_set_own_password_checks_old_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'new_password\': \'new_password\',\n-                   \'old_password\': \'wrong_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"new_password": "new_password", "old_password": "wrong_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 403)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Wrong password\')\n+        self.assertEqual(response.json()["error"]["type"], "Wrong password")\n \n     def test_user_set_reset_token_requires_new_password(self):\n-        self.api_session.auth = (\'noam\', \'password\')\n-        payload = {\'reset_token\': \'abc\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        self.api_session.auth = ("noam", "password")\n+        payload = {"reset_token": "abc"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 400)\n-        self.assertEqual(response.json()[\'error\'][\'type\'],\n-                         \'Invalid parameters\')\n+        self.assertEqual(response.json()["error"]["type"], "Invalid parameters")\n \n     def test_reset_with_token(self):\n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n-        reset_info = reset_tool.requestReset(\'noam\')\n-        token = reset_info[\'randomstring\']\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n+        reset_info = reset_tool.requestReset("noam")\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n-        response = self.api_session.post(\'/@users/noam/reset-password\',\n-                                         json=payload)\n+        payload = {"reset_token": token, "new_password": "new_password"}\n+        response = self.api_session.post("/@users/noam/reset-password", json=payload)\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 200)\n-        authed = self.portal.acl_users.authenticate(\'noam\', \'new_password\',\n-                                                    {})\n+        authed = self.portal.acl_users.authenticate("noam", "new_password", {})\n         self.assertTrue(authed)\n \n     def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n@@ -697,29 +620,24 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.id),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.id), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n@@ -731,29 +649,24 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.getUserName()),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n@@ -764,41 +677,36 @@ def test_reset_and_login_email_using_mail(self):\n         transaction.commit()\n \n         response = self.api_session.post(\n-            \'/@users\',\n-            json={\n-                "email": "howard.zinn@example.com",\n-                "password": "secret"\n-            },\n+            "/@users", json={"email": "howard.zinn@example.com", "password": "secret"}\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        user_id = response.json()[\'id\']\n+        user_id = response.json()["id"]\n         user = api.user.get(userid=user_id)\n         self.assertTrue(user)\n \n-        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_tool = getToolByName(self.portal, "portal_password_reset")\n         reset_info = reset_tool.requestReset(user.id)\n-        token = reset_info[\'randomstring\']\n+        token = reset_info["randomstring"]\n         transaction.commit()\n \n-        payload = {\'reset_token\': token,\n-                   \'new_password\': \'new_password\'}\n+        payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            \'/@users/{}/reset-password\'.format(user.getUserName()),\n-            json=payload)\n+            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+        )\n \n         self.assertEqual(response.status_code, 200)\n \n     def test_delete_user(self):\n-        response = self.api_session.delete(\'/@users/noam\')\n+        response = self.api_session.delete("/@users/noam")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(None, api.user.get(userid=\'noam\'))\n+        self.assertEqual(None, api.user.get(userid="noam"))\n \n     def test_delete_non_existing_user(self):\n-        response = self.api_session.delete(\'/@users/non-existing-user\')\n+        response = self.api_session.delete("/@users/non-existing-user")\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 404)\n@@ -809,10 +717,7 @@ def test_anonymous_requires_enable_self_reg(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "password": "noamchomsky"\n-            },\n+            "/@users", json={"password": "noamchomsky"}\n         )\n         transaction.commit()\n \n@@ -822,11 +727,8 @@ def test_anonymous_requires_enable_self_reg(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\'\n-            },\n+            "/@users",\n+            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n         )\n         transaction.commit()\n \n@@ -838,17 +740,13 @@ def test_anonymous_without_enable_user_pwd_choice_sends_mail(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n-            json={\n-                "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\'\n-            },\n+            "/@users",\n+            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n         )\n         transaction.commit()\n \n         self.assertEqual(201, response.status_code)\n-        self.assertTrue(\'To: avram.chomsky@example.com\' in\n-                        self.mailhost.messages[0])\n+        self.assertTrue("To: avram.chomsky@example.com" in self.mailhost.messages[0])\n \n     def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n@@ -856,28 +754,27 @@ def test_anonymous_can_set_password_with_enable_user_pwd_choice(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n \n         self.assertEqual(400, response.status_code)\n-        self.assertTrue(\'Property \\\'password\\\' is not allowed\'\n-                        in response.text)\n+        self.assertTrue("Property \'password\' is not allowed" in response.text)\n \n         security_settings.enable_user_pwd_choice = True\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n@@ -891,11 +788,11 @@ def test_anonymous_with_enable_user_pwd_choice_doent_send_email(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n         transaction.commit()\n@@ -910,25 +807,25 @@ def test_anonymous_with_enable_user_sets_only_member_role(self):\n         transaction.commit()\n \n         response = self.anon_api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "new_user",\n-                \'email\': \'avram.chomsky@example.com\',\n-                \'password\': \'secret\'\n+                "email": "avram.chomsky@example.com",\n+                "password": "secret",\n             },\n         )\n \n         response = response.json()\n-        self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEqual(1, len(response[\'roles\']))\n+        self.assertIn("Member", response["roles"])\n+        self.assertEqual(1, len(response["roles"]))\n \n     def test_add_user_no_roles_sets_member_as_sensible_default(self):\n         response = self.api_session.post(\n-            \'/@users\',\n+            "/@users",\n             json={\n                 "username": "howard",\n                 "email": "howard.zinn@example.com",\n-                "password": "peopleshistory"\n+                "password": "peopleshistory",\n             },\n         )\n         transaction.commit()\n@@ -937,5 +834,5 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n \n         response = response.json()\n \n-        self.assertIn(\'Member\', response[\'roles\'])\n-        self.assertEqual(1, len(response[\'roles\']))\n+        self.assertIn("Member", response["roles"])\n+        self.assertEqual(1, len(response["roles"]))\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 69a9a8d0..8e7d0391 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -16,8 +16,8 @@\n import unittest\n \n \n-TEST_TERM_1 = SimpleTerm(42, token=\'token1\', title=u\'Title 1\')\n-TEST_TERM_2 = SimpleTerm(43, token=\'token2\', title=u\'Title 2\')\n+TEST_TERM_1 = SimpleTerm(42, token="token1", title=u"Title 1")\n+TEST_TERM_2 = SimpleTerm(43, token="token2", title=u"Title 2")\n TEST_VOCABULARY = SimpleVocabulary([TEST_TERM_1, TEST_TERM_2])\n \n \n@@ -26,10 +26,12 @@ def test_vocabulary_factory(context):\n \n \n def test_context_vocabulary_factory(context):\n-    return SimpleVocabulary([\n-        SimpleTerm(context.id, token=\'id\', title=context.id),\n-        SimpleTerm(context.title, token=\'title\', title=context.title)\n-    ])\n+    return SimpleVocabulary(\n+        [\n+            SimpleTerm(context.id, token="id", title=context.id),\n+            SimpleTerm(context.title, token="title", title=context.title),\n+        ]\n+    )\n \n \n class TestVocabularyEndpoint(unittest.TestCase):\n@@ -39,23 +41,23 @@ class TestVocabularyEndpoint(unittest.TestCase):\n     maxDiff = None\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         provideUtility(\n             test_vocabulary_factory,\n             provides=IVocabularyFactory,\n-            name=\'plone.restapi.tests.test_vocabulary\'\n+            name="plone.restapi.tests.test_vocabulary",\n         )\n \n     def test_get_vocabulary(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -63,18 +65,19 @@ def test_get_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                u\'items\': [\n-                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n-                    {u\'title\': u\'Title 2\', u\'token\': u\'token2\'},\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                u"items": [\n+                    {u"title": u"Title 1", u"token": u"token1"},\n+                    {u"title": u"Title 2", u"token": u"token2"},\n                 ],\n-                u\'items_total\': 2,\n-            }\n+                u"items_total": 2,\n+            },\n         )\n \n     def test_get_vocabulary_batched(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -82,23 +85,26 @@ def test_get_vocabulary_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                u\'batching\': {\n-                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1\',  # noqa\n-                    u\'first\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1\',  # noqa\n-                    u\'last\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n-                    u\'next\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1\',  # noqa\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                u"batching": {\n+                    u"@id": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n+                    u"first": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n+                    u"last": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n+                    u"next": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n                 },\n-                u\'items\': [\n-                    {u\'title\': u\'Title 1\', u\'token\': u\'token1\'},\n-                ],\n-                u\'items_total\': 2,\n-            }\n+                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n+                u"items_total": 2,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_title(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?title=2"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -106,20 +112,16 @@ def test_get_vocabulary_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?title=2\',  # noqa\n-                u\'items\': [\n-                    {\n-                        u\'title\': u\'Title 2\',\n-                        u\'token\': u\'token2\',\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n+                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -127,20 +129,16 @@ def test_get_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1\',  # noqa\n-                u\'items\': [\n-                    {\n-                        u\'title\': u\'Title 1\',\n-                        u\'token\': u\'token1\',\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n+                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\'\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -148,30 +146,31 @@ def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token\',  # noqa\n-                u\'items\': [],\n-                u\'items_total\': 0,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n+                u"items": [],\n+                u"items_total": 0,\n+            },\n         )\n \n     def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title\'  # noqa\n+            "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1&title=Title"  # noqa\n         )\n \n         self.assertEqual(400, response.status_code)\n         response = response.json()\n         self.assertEqual(\n-            response.get(\'error\'),\n+            response.get("error"),\n             {\n-                u\'message\': u\'You can not filter by title and token at the same time.\',  # noqa\n-                u\'type\': u\'Invalid parameters\'\n-            }\n+                u"message": u"You can not filter by title and token at the same time.",  # noqa\n+                u"type": u"Invalid parameters",\n+            },\n         )\n \n     def test_get_corner_case_vocabulary_filtered_by_token(self):\n         response = self.api_session.get(\n-            \'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\'\n+            "/@vocabularies/plone.app.vocabularies.Weekdays?token=0"\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -179,85 +178,79 @@ def test_get_corner_case_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u\'@id\': self.portal_url + u\'/@vocabularies/plone.app.vocabularies.Weekdays?token=0\',  # noqa\n-                u\'items\': [\n-                    {\n-                        \'title\': \'Monday\',\n-                        \'token\': \'0\'\n-                    }\n-                ],\n-                u\'items_total\': 1,\n-            }\n+                u"@id": self.portal_url\n+                + u"/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n+                u"items": [{"title": "Monday", "token": "0"}],\n+                u"items_total": 1,\n+            },\n         )\n \n     def test_get_unknown_vocabulary(self):\n-        response = self.api_session.get(\n-            \'/@vocabularies/unknown.vocabulary\')\n+        response = self.api_session.get("/@vocabularies/unknown.vocabulary")\n \n         self.assertEqual(404, response.status_code)\n         response = response.json()\n-        self.assertEqual(response[\'error\'][\'type\'], u"Not Found")\n+        self.assertEqual(response["error"]["type"], u"Not Found")\n \n     def test_get_all_vocabularies(self):\n-        response = self.api_session.get(\'/@vocabularies\')\n+        response = self.api_session.get("/@vocabularies")\n \n         self.assertEqual(200, response.status_code)\n         response = response.json()\n         self.assertTrue(len(response) > 0)\n-        self.assertTrue(\n-            \'@id\' in list(response[0])\n-        )\n-        self.assertTrue(\n-            \'title\' in list(response[0])\n-        )\n+        self.assertTrue("@id" in list(response[0]))\n+        self.assertTrue("title" in list(response[0]))\n         self.assertEqual(\n             [\n                 {\n-                    u\'@id\': self.portal_url + u\'/@vocabularies/plone.restapi.tests.test_vocabulary\',  # noqa\n-                    u\'title\': u\'plone.restapi.tests.test_vocabulary\'\n+                    u"@id": self.portal_url\n+                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                    u"title": u"plone.restapi.tests.test_vocabulary",\n                 }\n             ],\n             [\n-                x for x in response\n-                if x.get(\'title\') == \'plone.restapi.tests.test_vocabulary\'\n-            ]\n+                x\n+                for x in response\n+                if x.get("title") == "plone.restapi.tests.test_vocabulary"\n+            ],\n         )\n \n     def test_context_vocabulary(self):\n         api.content.create(\n-            container=self.portal,\n-            id="testdoc",\n-            type=\'Document\',\n-            title=u\'Document 1\',\n+            container=self.portal, id="testdoc", type="Document", title=u"Document 1"\n         )\n         transaction.commit()\n \n-        context_vocab_name = \'plone.restapi.tests.test_context_vocabulary\'\n-        provideUtility(test_context_vocabulary_factory,\n-                       provides=IVocabularyFactory,\n-                       name=context_vocab_name)\n+        context_vocab_name = "plone.restapi.tests.test_context_vocabulary"\n+        provideUtility(\n+            test_context_vocabulary_factory,\n+            provides=IVocabularyFactory,\n+            name=context_vocab_name,\n+        )\n \n         response = self.api_session.get(\n-            \'testdoc/@vocabularies/{}\'.format(context_vocab_name))\n+            "testdoc/@vocabularies/{}".format(context_vocab_name)\n+        )\n \n         gsm = getGlobalSiteManager()\n-        gsm.unregisterUtility(provided=IVocabularyFactory,\n-                              name=context_vocab_name)\n+        gsm.unregisterUtility(provided=IVocabularyFactory, name=context_vocab_name)\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             response.json(),\n             {\n-                u\'@id\': self.portal_url + u\'/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary\',  # noqa\n-                u\'items\': [\n-                    {u\'title\': u\'testdoc\', u\'token\': u\'id\'},\n-                    {u\'title\': u\'Document 1\', u\'token\': u\'title\'},\n+                u"@id": self.portal_url\n+                + u"/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n+                u"items": [\n+                    {u"title": u"testdoc", u"token": u"id"},\n+                    {u"title": u"Document 1", u"token": u"title"},\n                 ],\n-                u\'items_total\': 2,\n-\n-            })\n+                u"items_total": 2,\n+            },\n+        )\n \n     def tearDown(self):\n         self.api_session.close()\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterUtility(provided=IVocabularyFactory,\n-                              name=\'plone.restapi.tests.test_vocabulary\')\n+        gsm.unregisterUtility(\n+            provided=IVocabularyFactory, name="plone.restapi.tests.test_vocabulary"\n+        )\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex 20719007..5357e39b 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -21,8 +21,8 @@ class TestInstall(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n \n     def test_product_is_installed(self):\n         """ Validate that our products GS profile has been run and the product\n@@ -32,11 +32,11 @@ def test_product_is_installed(self):\n             qi = get_installer(self.portal)\n             installed = qi.is_product_installed(PROJECT_NAME)\n         else:\n-            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n+            qi_tool = getToolByName(self.portal, "portal_quickinstaller")\n             installed = PROJECT_NAME in [\n-                p[\'id\'] for p in qi_tool.listInstalledProducts()]\n-        self.assertTrue(\n-            installed, \'package appears not to have been installed\')\n+                p["id"] for p in qi_tool.listInstalledProducts()\n+            ]\n+        self.assertTrue(installed, "package appears not to have been installed")\n \n \n class TestUninstall(unittest.TestCase):\n@@ -44,16 +44,16 @@ class TestUninstall(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n \n         if HAS_INSTALLER:\n             qi = get_installer(self.portal)\n             qi.uninstall_product(PROJECT_NAME)\n             self.installed = qi.is_product_installed(PROJECT_NAME)\n         else:\n-            qi_tool = getToolByName(self.portal, \'portal_quickinstaller\')\n-            with api.env.adopt_roles([\'Manager\']):\n+            qi_tool = getToolByName(self.portal, "portal_quickinstaller")\n+            with api.env.adopt_roles(["Manager"]):\n                 qi_tool.uninstallProducts(products=[PROJECT_NAME])\n             self.installed = qi_tool.isProductInstalled(PROJECT_NAME)\n \n@@ -62,4 +62,4 @@ def test_uninstalled(self):\n \n     def test_addon_layer_removed(self):\n         layers = [l.getName() for l in registered_layers()]\n-        self.assertNotIn(\'IPloneRestapiLayer\', layers)\n+        self.assertNotIn("IPloneRestapiLayer", layers)\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 4b7a81f0..5cb9ba40 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -14,31 +14,28 @@ class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # ordering setup\n         self.folder = self.portal\n \n         for x in range(1, 10):\n             self.folder.invokeFactory(\n-                \'Document\',\n-                id=\'doc\' + str(x),\n-                title=\'Test doc \' + str(x)\n+                "Document", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n-        self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+        self.assertEqual("my_new_layout", self.portal.getLayout())\n \n \n class TestSiteRootDeserializer(unittest.TestCase):\n@@ -46,35 +43,32 @@ class TestSiteRootDeserializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n+        self.request["BODY"] = body\n+        deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n     def test_opt_in_tiles_deserializer(self):\n         tiles = {\n-            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n-                "@type": "description"\n-            },\n-            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n-                "@type": "title"\n-            }\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n         tiles_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n-                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n             ]\n         }\n \n         self.deserialize(\n             body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n-                json.dumps(tiles), json.dumps(tiles_layout)))\n+                json.dumps(tiles), json.dumps(tiles_layout)\n+            )\n+        )\n \n         self.assertEqual(tiles, json.loads(self.portal.tiles))\n         self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 8d0cb15f..8e7070a5 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -13,25 +13,23 @@ class TestSiteSerializer(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def serialize(self):\n-        serializer = getMultiAdapter((self.portal, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.portal, self.request), ISerializeToJson)\n         return serializer()\n \n     def test_serializer_returns_json_serializeable_object(self):\n         obj = self.serialize()\n-        self.assertTrue(isinstance(json.dumps(obj), str),\n-                        \'Not JSON serializable\')\n+        self.assertTrue(isinstance(json.dumps(obj), str), "Not JSON serializable")\n \n     def test_serializer_includes_title(self):\n         obj = self.serialize()\n-        self.assertIn(u\'title\', obj)\n-        self.assertEqual(u\'Plone site\', obj[u\'title\'])\n+        self.assertIn(u"title", obj)\n+        self.assertEqual(u"Plone site", obj[u"title"])\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n-        self.assertIn(\'is_folderish\', obj)\n-        self.assertEqual(True, obj[\'is_folderish\'])\n+        self.assertIn("is_folderish", obj)\n+        self.assertEqual(True, obj["is_folderish"])\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex eccd3025..d586b253 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -20,70 +20,73 @@\n     from plone.app.multilingual.interfaces import ITranslationManager\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestTranslationInfo(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n     def test_translation_info_includes_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request),\n-            name=u\'GET_application_json_@translations\')\n+            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+        )\n \n         info = tinfo.reply()\n-        self.assertIn(\'items\', info)\n-        self.assertEqual(1, len(info[\'items\']))\n+        self.assertIn("items", info)\n+        self.assertEqual(1, len(info["items"]))\n \n     def test_correct_translation_information(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request),\n-            name=u\'GET_application_json_@translations\')\n+            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+        )\n \n         info = tinfo.reply()\n-        tinfo_es = info[\'items\'][0]\n-        self.assertEqual(\n-            self.es_content.absolute_url(),\n-            tinfo_es[\'@id\'])\n+        tinfo_es = info["items"][0]\n+        self.assertEqual(self.es_content.absolute_url(), tinfo_es["@id"])\n         self.assertEqual(\n-            ILanguage(self.es_content).get_language(),\n-            tinfo_es[\'language\'])\n+            ILanguage(self.es_content).get_language(), tinfo_es["language"]\n+        )\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestLinkContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n         transaction.commit()\n \n     def test_translation_linking_succeeds(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "id": self.es_content.absolute_url(),\n-            },\n+            json={"id": self.es_content.absolute_url()},\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n@@ -94,80 +97,74 @@ def test_translation_linking_succeeds(self):\n \n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-            },\n+            json={},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_calling_with_an_already_translated_content_gives_400(self):\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'id\': self.es_content.absolute_url()\n-            },\n+            json={"id": self.es_content.absolute_url()},\n         )\n         self.assertEqual(400, response.status_code)\n \n     def test_calling_with_inexistent_content_gives_400(self):\n         response = requests.post(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                \'id\': \'http://this-content-does-not-exist\',\n-            },\n+            json={"id": "http://this-content-does-not-exist"},\n         )\n         self.assertEqual(400, response.status_code)\n \n \n-@unittest.skipUnless(PAM_INSTALLED, \'plone.app.multilingual is installed by default only in Plone 5\')  # NOQA\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n class TestUnLinkContentTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test document\')\n+            self.portal["en"], "Document", title=u"Test document"\n+        )\n         self.es_content = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u\'Test document\')\n-        ITranslationManager(self.en_content).register_translation(\n-            \'es\', self.es_content)\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n \n     def test_translation_unlinking_succeeds(self):\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "language": "es",\n-            },\n+            json={"language": "es"},\n         )\n         self.assertEqual(204, response.status_code)\n         transaction.begin()\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n-            ILanguage(self.es_content).get_language(),\n-            list(manager.get_translations()))\n+            ILanguage(self.es_content).get_language(), list(manager.get_translations())\n+        )\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-            },\n+            json={},\n         )\n         self.assertEqual(400, response.status_code)\n \n@@ -175,11 +172,9 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n         ITranslationManager(self.en_content).remove_translation("es")\n         transaction.commit()\n         response = requests.delete(\n-            \'{}/@translations\'.format(self.en_content.absolute_url()),\n-            headers={\'Accept\': \'application/json\'},\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            json={\n-                "language": "es",\n-            },\n+            json={"language": "es"},\n         )\n         self.assertEqual(400, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 8a2eb839..08aca316 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -32,28 +32,27 @@\n import transaction\n import unittest\n \n-UPLOAD_DATA = b\'abcdefgh\'\n-UPLOAD_MIMETYPE = \'text/plain\'\n-UPLOAD_FILENAME = \'test.txt\'\n+UPLOAD_DATA = b"abcdefgh"\n+UPLOAD_MIMETYPE = "text/plain"\n+UPLOAD_FILENAME = "test.txt"\n UPLOAD_LENGTH = len(UPLOAD_DATA)\n \n-UPLOAD_PDF_MIMETYPE = \'application/pdf\'\n-UPLOAD_PDF_FILENAME = \'file.pdf\'\n+UPLOAD_PDF_MIMETYPE = "application/pdf"\n+UPLOAD_PDF_FILENAME = "file.pdf"\n \n \n def _base64_str(s):\n     if not isinstance(s, bytes):\n-        s = s.encode(\'utf-8\')\n+        s = s.encode("utf-8")\n     s = b64encode(s)\n     if not isinstance(s, str):\n-        s = s.decode(\'utf-8\')\n+        s = s.decode("utf-8")\n     return s\n \n \n def _prepare_metadata(filename, content_type):\n-    return \'filename {},content-type {}\'.format(\n-        _base64_str(filename),\n-        _base64_str(content_type),\n+    return "filename {},content-type {}".format(\n+        _base64_str(filename), _base64_str(content_type)\n     )\n \n \n@@ -62,23 +61,22 @@ class TestTUS(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n         login(self.portal, SITE_OWNER_NAME)\n \n-        self.folder = api.content.create(container=self.portal,\n-                                         type=\'Folder\',\n-                                         id=\'testfolder\',\n-                                         title=\'Testfolder\')\n-        self.upload_url = \'{}/@tus-upload\'.format(self.folder.absolute_url())\n+        self.folder = api.content.create(\n+            container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n+        )\n+        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n     def get_tus_uid_from_url(self, url):\n-        uid = url.rsplit(\'/\', 1)[-1]\n+        uid = url.rsplit("/", 1)[-1]\n         assert len(uid) == 32\n         return uid\n \n@@ -89,9 +87,9 @@ def test_tus_option_headers(self):\n         response = self.api_session.options(self.upload_url)\n         headers = response.headers\n         self.assertEqual(response.status_code, 204)\n-        self.assertEqual(headers[\'Tus-Version\'], \'1.0.0\')\n-        self.assertEqual(headers[\'Tus-Extension\'], \'creation,expiration\')\n-        self.assertEqual(headers[\'Tus-Resumable\'], \'1.0.0\')\n+        self.assertEqual(headers["Tus-Version"], "1.0.0")\n+        self.assertEqual(headers["Tus-Extension"], "creation,expiration")\n+        self.assertEqual(headers["Tus-Resumable"], "1.0.0")\n \n     def test_tus_post_without_version_header_returns_412(self):\n         response = self.api_session.post(self.upload_url)\n@@ -99,247 +97,279 @@ def test_tus_post_without_version_header_returns_412(self):\n \n     def test_tus_post_with_wrong_version_header_returns_412(self):\n         response = self.api_session.post(\n-            self.upload_url, headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url, headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n \n     def test_tus_post_initialization_requires_header_length(self):\n         response = self.api_session.post(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n-        self.assertEqual(response.json()[\'error\'][\'type\'], \'Bad Request\')\n-        self.assertEqual(response.json()[\'error\'][\'message\'],\n-                         \'Missing or invalid Upload-Length header\')\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n+        self.assertEqual(response.json()["error"]["type"], "Bad Request")\n+        self.assertEqual(\n+            response.json()["error"]["message"],\n+            "Missing or invalid Upload-Length header",\n+        )\n         self.assertEqual(response.status_code, 400)\n \n     def test_tus_post_initialization(self):\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\n-                \'Tus-Resumable\': \'1.0.0\',\n-                \'Upload-Length\': str(UPLOAD_LENGTH),\n-            })\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n+        )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n-        url_base, uid = location.rsplit(\'/\', 1)\n+        location = response.headers["Location"]\n+        url_base, uid = location.rsplit("/", 1)\n         self.assertEqual(url_base, self.upload_url)\n         self.assertEqual(len(uid), 32)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'length\': 8, u\'mode\': u\'create\'})\n+        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"create"})\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n         metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        uid = self.get_tus_uid_from_url(response.headers[\'Location\'])\n+        uid = self.get_tus_uid_from_url(response.headers["Location"])\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'content-type\': u\'text/plain\',\n-                          u\'filename\': u\'test.txt\',\n-                          u\'length\': 8,\n-                          u\'mode\': u\'create\'})\n+        self.assertEqual(\n+            stored_metadata,\n+            {\n+                u"content-type": u"text/plain",\n+                u"filename": u"test.txt",\n+                u"length": 8,\n+                u"mode": u"create",\n+            },\n+        )\n         upload.cleanup()\n \n     def test_tus_post_replace(self):\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\n-                \'Tus-Resumable\': \'1.0.0\',\n-                \'Upload-Length\': str(UPLOAD_LENGTH),\n-            })\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n+        )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n-        url_base, uid = location.rsplit(\'/\', 1)\n+        location = response.headers["Location"]\n+        url_base, uid = location.rsplit("/", 1)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata,\n-                         {u\'length\': 8, u\'mode\': u\'replace\'})\n+        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"replace"})\n         upload.cleanup()\n \n     def test_tus_head_on_not_existing_resource_returns_404(self):\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid/123\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid/123", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n-            self.upload_url + \'/non-existing-uid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\'}\n+            self.upload_url + "/non-existing-uid", headers={"Tus-Resumable": "1.0.0"}\n         )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.head(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n \n     def test_tus_head_with_unsupported_version_returns_412(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n         tus.cleanup()\n \n     def test_tus_head_response_includes_required_headers(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'1.0.0\'})\n-        self.assertIn(\'Upload-Length\', response.headers)\n-        self.assertEqual(\'2048\', response.headers[\'Upload-Length\'])\n-        self.assertIn(\'Upload-Offset\', response.headers)\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Cache-Control\', response.headers)\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "1.0.0"}\n+        )\n+        self.assertIn("Upload-Length", response.headers)\n+        self.assertEqual("2048", response.headers["Upload-Length"])\n+        self.assertIn("Upload-Offset", response.headers)\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Cache-Control", response.headers)\n         tus.cleanup()\n \n     def test_head_in_create_mode_without_add_permission_raises_401(self):\n-        self.folder.manage_permission(\'Add portal content\', [], 0)\n+        self.folder.manage_permission("Add portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "create", "length": 12})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Offset\': \'0\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Offset": "0"},\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_head_in_replace_mode_without_modify_permission_raises_401(self):\n-        self.folder.manage_permission(\'Modify portal content\', [], 0)\n+        self.folder.manage_permission("Modify portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "replace", "length": 12})\n         response = self.api_session.head(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Offset\': \'0\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Upload-Offset": "0"},\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_on_not_existing_resource_returns_404(self):\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid/123\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid/123", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n         response = self.api_session.patch(\n-            self.upload_url, headers={\'Tus-Resumable\': \'1.0.0\'})\n+            self.upload_url, headers={"Tus-Resumable": "1.0.0"}\n+        )\n         self.assertEqual(404, response.status_code)\n \n     def test_tus_patch_with_unsupported_version_returns_412(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\', headers={\'Tus-Resumable\': \'0.2.2\'})\n+            self.upload_url + "/myuid", headers={"Tus-Resumable": "0.2.2"}\n+        )\n         self.assertEqual(412, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_with_unsupported_content_type_returns_400(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/json\'})\n+            self.upload_url + "/myuid",\n+            headers={"Tus-Resumable": "1.0.0", "Content-Type": "application/json"},\n+        )\n         self.assertEqual(400, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_with_invalid_offset_returns_400(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\'})\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+            },\n+        )\n         self.assertEqual(400, response.status_code)\n         tus.cleanup()\n \n     def test_tus_patch_unfinished_upload_returns_expires_header(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 2048})\n+        tus = TUSUpload("myuid", {"length": 2048})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(204, response.status_code)\n-        self.assertIn(\'Upload-Expires\', response.headers)\n+        self.assertIn("Upload-Expires", response.headers)\n         tus.cleanup()\n \n     def test_tus_patch_non_primary_field(self):\n-        tus = TUSUpload(\'myuid\', {\n-            \'@type\': \'DXTestDocument\',\n-            \'length\': 12,\n-            \'fieldname\': \'test_namedblobfile_field\'})\n+        tus = TUSUpload(\n+            "myuid",\n+            {\n+                "@type": "DXTestDocument",\n+                "length": 12,\n+                "fieldname": "test_namedblobfile_field",\n+            },\n+        )\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n \n         self.assertEqual(204, response.status_code)\n         transaction.commit()\n         self.assertEqual(1, len(self.folder.objectIds()))\n         id_ = self.folder.objectIds()[0]\n         self.assertEqual(\n-            b\'abcdefghijkl\', self.folder[id_].test_namedblobfile_field.data)\n+            b"abcdefghijkl", self.folder[id_].test_namedblobfile_field.data\n+        )\n         tus.cleanup()\n \n     def test_patch_in_create_mode_without_add_permission_raises_401(self):\n-        self.folder.manage_permission(\'Add portal content\', [], 0)\n+        self.folder.manage_permission("Add portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'create\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "create", "length": 12})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_patch_in_replace_mode_without_modify_permission_raises_401(self):\n-        self.folder.manage_permission(\'Modify portal content\', [], 0)\n+        self.folder.manage_permission("Modify portal content", [], 0)\n         transaction.commit()\n-        tus = TUSUpload(\'myuid\', {\'mode\': \'replace\', \'length\': 12})\n+        tus = TUSUpload("myuid", {"mode": "replace", "length": 12})\n         response = self.api_session.patch(\n-            self.upload_url + \'/myuid\',\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\'},\n-            data=BytesIO(b\'abcdefghijkl\'))\n+            self.upload_url + "/myuid",\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+            },\n+            data=BytesIO(b"abcdefghijkl"),\n+        )\n         self.assertEqual(401, response.status_code)\n         tus.cleanup()\n \n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -350,53 +380,59 @@ def test_tus_can_upload_text_file(self):\n         metadata = _prepare_metadata(UPLOAD_FILENAME, UPLOAD_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(UPLOAD_LENGTH),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(UPLOAD_LENGTH),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n         response = self.api_session.patch(\n             location,\n-            headers={\'Content-Type\': \'application/offset+octet-stream\',\n-                     \'Upload-Offset\': \'0\',\n-                     \'Tus-Resumable\': \'1.0.0\'},\n-            data=BytesIO(UPLOAD_DATA))\n+            headers={\n+                "Content-Type": "application/offset+octet-stream",\n+                "Upload-Offset": "0",\n+                "Tus-Resumable": "1.0.0",\n+            },\n+            data=BytesIO(UPLOAD_DATA),\n+        )\n         self.assertEqual(response.status_code, 204)\n \n     def test_tus_can_replace_pdf_file(self):\n         # Create a test file\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\n@@ -416,39 +452,42 @@ def record_event(event):\n         sm.registerHandler(record_event, (IObjectModifiedEvent,))\n \n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         self.assertEqual(\n             fired_events,\n             [\n-                \'ObjectCreatedEvent\',\n-                \'ObjectWillBeAddedEvent\',\n-                \'ObjectAddedEvent\',\n-                \'ContainerModifiedEvent\',\n-            ])\n+                "ObjectCreatedEvent",\n+                "ObjectWillBeAddedEvent",\n+                "ObjectAddedEvent",\n+                "ContainerModifiedEvent",\n+            ],\n+        )\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -457,10 +496,9 @@ def record_event(event):\n \n     def test_replace_with_tus_fires_proper_events(self):\n         # Create a test file\n-        self.file = api.content.create(container=self.portal,\n-                                       type=\'File\',\n-                                       id=\'testfile\',\n-                                       title=\'Testfile\')\n+        self.file = api.content.create(\n+            container=self.portal, type="File", id="testfile", title="Testfile"\n+        )\n         transaction.commit()\n \n         sm = getGlobalSiteManager()\n@@ -475,36 +513,34 @@ def record_event(event):\n         sm.registerHandler(record_event, (IObjectModifiedEvent,))\n \n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            "{}/@tus-replace".format(self.file.absolute_url()),\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n-        self.assertEqual(\n-            fired_events,\n-            [\n-                \'ObjectModifiedEvent\',\n-            ])\n+        self.assertEqual(fired_events, ["ObjectModifiedEvent"])\n \n         sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n         sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n@@ -513,19 +549,25 @@ def record_event(event):\n \n     def tearDown(self):\n         self.api_session.close()\n-        client_home = os.environ.get(\'CLIENT_HOME\')\n-        tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+        client_home = os.environ.get("CLIENT_HOME")\n+        tmp_dir = os.path.join(client_home, "tus-uploads")\n         if os.path.isdir(tmp_dir):\n             shutil.rmtree(tmp_dir)\n \n \n class CORSTestPolicy(CORSPolicy):\n-    allow_origin = [\'*\']\n-    allow_methods = [\'DELETE\', \'GET\', \'OPTIONS\', \'PATCH\', \'POST\', \'PUT\']\n+    allow_origin = ["*"]\n+    allow_methods = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]\n     allow_credentials = True\n     allow_headers = [\n-        \'Accept\', \'Authorization\', \'Origin\', \'X-Requested-With\',\n-        \'Content-Type\', \'Tus-Resumable\', \'Upload-Length\', \'Upload-Offset\',\n+        "Accept",\n+        "Authorization",\n+        "Origin",\n+        "X-Requested-With",\n+        "Content-Type",\n+        "Tus-Resumable",\n+        "Upload-Length",\n+        "Upload-Offset",\n     ]\n     expose_header = []\n     max_age = 3600\n@@ -537,154 +579,153 @@ class TestTUSUploadWithCORS(unittest.TestCase):\n \n     def setUp(self):\n         provideAdapter(\n-            CORSTestPolicy,\n-            adapts=(Interface, IBrowserRequest),\n-            provides=ICORSPolicy,\n+            CORSTestPolicy, adapts=(Interface, IBrowserRequest), provides=ICORSPolicy\n         )\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        self.upload_url = \'{}/@tus-upload\'.format(self.portal.absolute_url())\n+        self.upload_url = "{}/@tus-upload".format(self.portal.absolute_url())\n \n     def test_cors_preflight_for_post_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'POST\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Tus-Resumable,Upload-Length\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "POST",\n+                "Access-Control-Request-Headers": "Tus-Resumable,Upload-Length",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def test_cors_preflight_for_patch_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'PATCH\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Content-Type,Tus-Resumable,Upload-Offset\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "PATCH",\n+                "Access-Control-Request-Headers": "Content-Type,Tus-Resumable,Upload-Offset",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def test_cors_preflight_for_head_contains_tus_headers(self):\n         response = self.api_session.options(\n-            self.upload_url, headers={\n-                \'Origin\': \'http://myhost.net\',\n-                \'Access-Control-Request-Method\': \'HEAD\',\n-                \'Access-Control-Request-Headers\':\n-                    \'Tus-Resumable\',\n-            })\n-        self.assertIn(\'Tus-Resumable\', response.headers)\n-        self.assertIn(\'Tus-Version\', response.headers)\n-        self.assertIn(\'Tus-Extension\', response.headers)\n+            self.upload_url,\n+            headers={\n+                "Origin": "http://myhost.net",\n+                "Access-Control-Request-Method": "HEAD",\n+                "Access-Control-Request-Headers": "Tus-Resumable",\n+            },\n+        )\n+        self.assertIn("Tus-Resumable", response.headers)\n+        self.assertIn("Tus-Version", response.headers)\n+        self.assertIn("Tus-Extension", response.headers)\n \n     def tearDown(self):\n         self.api_session.close()\n         gsm = getGlobalSiteManager()\n-        gsm.unregisterAdapter(\n-            CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n+        gsm.unregisterAdapter(CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n \n \n class TestTUSUpload(unittest.TestCase):\n-\n     def test_tmp_dir_gets_created_in_client_home(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertTrue(os.path.isdir(tus.tmp_dir))\n         tus.cleanup()\n \n     def test_use_tus_tmp_dir_if_provided(self):\n         tus_upload_dir = tempfile.mkdtemp()\n-        os.environ[\'TUS_TMP_FILE_DIR\'] = tus_upload_dir\n-        tus = TUSUpload(\'myuid\')\n+        os.environ["TUS_TMP_FILE_DIR"] = tus_upload_dir\n+        tus = TUSUpload("myuid")\n         self.assertEqual(tus_upload_dir, tus.tmp_dir)\n         tus.cleanup()\n \n     def test_metadata_gets_stored_if_provided(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024, \'filename\': \'test.pdf\'})\n-        self.assertIn(\'filename\', tus.metadata())\n-        self.assertEqual(\'test.pdf\', tus.metadata()[\'filename\'])\n+        tus = TUSUpload("myuid", {"length": 1024, "filename": "test.pdf"})\n+        self.assertIn("filename", tus.metadata())\n+        self.assertEqual("test.pdf", tus.metadata()["filename"])\n         tus.cleanup()\n \n     def test_length_returns_total_length_if_set(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         self.assertEqual(1024, tus.length())\n         tus.cleanup()\n \n     def test_length_returns_zero_if_not_set(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertEqual(0, tus.length())\n         tus.cleanup()\n \n     def test_offset_returns_zero_if_file_doesnt_exist(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         self.assertEqual(0, tus.offset())\n         tus.cleanup()\n \n     def test_offset_returns_size_of_current_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertEqual(10, tus.offset())\n         tus.cleanup()\n \n     def test_write_creates_new_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertTrue(os.path.isfile(tus.filepath))\n         tus.cleanup()\n \n     def test_write_appends_to_file_at_given_offset(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n-        tus.write(BytesIO(b\'abc\'), 10)\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n+        tus.write(BytesIO(b"abc"), 10)\n         self.assertEqual(13, tus.offset())\n-        with open(tus.filepath, \'rb\') as f:\n+        with open(tus.filepath, "rb") as f:\n             data = f.read()\n-        self.assertEqual(b\'0123456789abc\', data)\n+        self.assertEqual(b"0123456789abc", data)\n         tus.cleanup()\n \n     def test_write_sets_finished_flag(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 10})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 10})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertTrue(tus.finished)\n         tus.cleanup()\n \n     def test_metadata_returns_empty_dict_if_no_metadata_has_been_set(self):\n-        tus = TUSUpload(\'myuid\')\n+        tus = TUSUpload("myuid")\n         self.assertEqual({}, tus.metadata())\n         tus.cleanup()\n \n     def test_expires_returns_expiration_time_of_current_upload(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         self.assertGreater(DateTime(tus.expires()), DateTime())\n         tus.cleanup()\n \n     def test_cleanup_removes_upload_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n-        tus.write(BytesIO(b\'0123456789\'))\n+        tus = TUSUpload("myuid", {"length": 1024})\n+        tus.write(BytesIO(b"0123456789"))\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.filepath))\n \n     def test_cleanup_removes_metadata_file(self):\n-        tus = TUSUpload(\'myuid\', {\'length\': 1024})\n+        tus = TUSUpload("myuid", {"length": 1024})\n         tus.cleanup()\n         self.assertFalse(os.path.exists(tus.metadata_path))\n \n     def test_cleanup_expired_files(self):\n-        tus = TUSUpload(\'myuid\')\n-        filepath = os.path.join(tus.tmp_dir, \'tus_upload_12345\')\n-        metadata_path = os.path.join(tus.tmp_dir, \'tus_upload_12345.json\')\n-        metadata_only_path = os.path.join(tus.tmp_dir, \'tus_upload_67890.json\')\n-        open(filepath, \'wb\').close()\n+        tus = TUSUpload("myuid")\n+        filepath = os.path.join(tus.tmp_dir, "tus_upload_12345")\n+        metadata_path = os.path.join(tus.tmp_dir, "tus_upload_12345.json")\n+        metadata_only_path = os.path.join(tus.tmp_dir, "tus_upload_67890.json")\n+        open(filepath, "wb").close()\n         os.utime(filepath, (946684800.0, 946684800.0))\n-        open(metadata_path, \'wb\').close()\n+        open(metadata_path, "wb").close()\n         os.utime(metadata_path, (946684800.0, 946684800.0))\n-        open(metadata_only_path, \'wb\').close()\n+        open(metadata_only_path, "wb").close()\n         os.utime(metadata_only_path, (946684800.0, 946684800.0))\n         tus.cleanup_expired()\n         self.assertFalse(os.path.exists(filepath))\n@@ -693,8 +734,8 @@ def test_cleanup_expired_files(self):\n         tus.cleanup()\n \n     def tearDown(self):\n-        client_home = os.environ.get(\'CLIENT_HOME\')\n-        tmp_dir = os.path.join(client_home, \'tus-uploads\')\n+        client_home = os.environ.get("CLIENT_HOME")\n+        tmp_dir = os.path.join(client_home, "tus-uploads")\n         if os.path.isdir(tmp_dir):\n             shutil.rmtree(tmp_dir)\n \n@@ -705,20 +746,19 @@ class TestTUSWithAT(unittest.TestCase):\n \n     def setUp(self):\n         if not HAS_AT:\n-            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+            raise unittest.SkipTest("Skip tests if Archetypes is not present")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n-        self.folder = api.content.create(container=self.portal,\n-                                         type=\'Folder\',\n-                                         id=\'testfolder\',\n-                                         title=\'Testfolder\')\n-        self.upload_url = \'{}/@tus-upload\'.format(self.folder.absolute_url())\n+        self.folder = api.content.create(\n+            container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n+        )\n+        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n-        self.api_session.headers.update({\'Accept\': \'application/json\'})\n+        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n     def tearDown(self):\n@@ -726,29 +766,31 @@ def tearDown(self):\n \n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n-        pdf_file_path = os.path.join(os.path.dirname(__file__),\n-                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_path = os.path.join(os.path.dirname(__file__), UPLOAD_PDF_FILENAME)\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n             self.upload_url,\n-            headers={\'Tus-Resumable\': \'1.0.0\',\n-                     \'Upload-Length\': str(pdf_file_size),\n-                     \'Upload-Metadata\': metadata}\n+            headers={\n+                "Tus-Resumable": "1.0.0",\n+                "Upload-Length": str(pdf_file_size),\n+                "Upload-Metadata": metadata,\n+            },\n         )\n         self.assertEqual(response.status_code, 201)\n-        location = response.headers[\'Location\']\n+        location = response.headers["Location"]\n \n         # upload the data with PATCH\n-        with open(pdf_file_path, \'rb\') as pdf_file:\n+        with open(pdf_file_path, "rb") as pdf_file:\n             response = self.api_session.patch(\n                 location,\n                 headers={\n-                    \'Content-Type\': \'application/offset+octet-stream\',\n-                    \'Upload-Offset\': \'0\',\n-                    \'Tus-Resumable\': \'1.0.0\'\n+                    "Content-Type": "application/offset+octet-stream",\n+                    "Upload-Offset": "0",\n+                    "Tus-Resumable": "1.0.0",\n                 },\n-                data=pdf_file)\n+                data=pdf_file,\n+            )\n         self.assertEqual(response.status_code, 204)\n \n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex c637e071..546c2480 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -23,49 +23,32 @@\n \n class IDummySchema(model.Schema):\n \n-    field1 = schema.Bool(\n-        title=u"Foo",\n-        description=u"",\n-    )\n+    field1 = schema.Bool(title=u"Foo", description=u"")\n \n-    field2 = schema.TextLine(\n-        title=u"Bar",\n-        description=u"",\n-    )\n+    field2 = schema.TextLine(title=u"Bar", description=u"")\n \n \n class ITaggedValuesSchema(model.Schema):\n \n-    form.mode(field_mode_hidden=\'hidden\')\n-    field_mode_hidden = schema.TextLine(\n-        title=u"ModeHidden",\n-        description=u"",\n-    )\n+    form.mode(field_mode_hidden="hidden")\n+    field_mode_hidden = schema.TextLine(title=u"ModeHidden", description=u"")\n \n-    form.mode(field_mode_display=\'display\')\n-    field_mode_display = schema.TextLine(\n-        title=u"ModeDisplay",\n-        description=u"",\n-    )\n+    form.mode(field_mode_display="display")\n+    field_mode_display = schema.TextLine(title=u"ModeDisplay", description=u"")\n \n-    form.mode(field_mode_input=\'input\')\n-    field_mode_input = schema.TextLine(\n-        title=u"ModeInput",\n-        description=u"",\n-    )\n+    form.mode(field_mode_input="input")\n+    field_mode_input = schema.TextLine(title=u"ModeInput", description=u"")\n \n-    field_mode_default = schema.TextLine(\n-        title=u"ModeInput",\n-        description=u"",\n-    )\n+    field_mode_default = schema.TextLine(title=u"ModeInput", description=u"")\n \n-    parametrized_widget_field = schema.TextLine(\n-        title=u"Parametrized widget field")\n-    form.widget(\'parametrized_widget_field\',\n-                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n+    parametrized_widget_field = schema.TextLine(title=u"Parametrized widget field")\n+    form.widget(\n+        "parametrized_widget_field", a_param="some_value", defaultFactory=lambda: "Foo"\n+    )\n \n     not_parametrized_widget_field = schema.TextLine(\n-        title=u"No parametrized widget field")\n+        title=u"No parametrized widget field"\n+    )\n     form.widget(not_parametrized_widget_field=TextWidget)\n \n \n@@ -74,55 +57,41 @@ class TestJsonSchemaUtils(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def test_get_jsonschema_properties(self):\n         fieldsets = get_fieldsets(self.portal, self.request, IDummySchema)\n         info = get_jsonschema_properties(self.portal, self.request, fieldsets)\n         expected = {\n-            \'field1\': {\n-                \'title\': u\'Foo\',\n-                \'description\': u\'\',\n-                \'type\': \'boolean\'\n-            },\n-            \'field2\': {\n-                \'title\': u\'Bar\',\n-                \'description\': u\'\',\n-                \'type\': \'string\'\n-            },\n+            "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n+            "field2": {"title": u"Bar", "description": u"", "type": "string"},\n         }\n         self.assertEqual(info, expected)\n \n     def test_get_jsonschema_for_fti(self):\n         portal = self.portal\n         request = self.request\n-        ttool = getToolByName(portal, \'portal_types\')\n-        jsonschema = get_jsonschema_for_fti(\n-            ttool[\'Document\'],\n-            portal, request\n-        )\n-        self.assertEqual(jsonschema[\'title\'], \'Page\')\n-        self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n-        self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n-        self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n-        self.assertIn(\'layouts\', jsonschema)\n+        ttool = getToolByName(portal, "portal_types")\n+        jsonschema = get_jsonschema_for_fti(ttool["Document"], portal, request)\n+        self.assertEqual(jsonschema["title"], "Page")\n+        self.assertEqual(jsonschema["type"], "object")\n+        self.assertIn("title", list(jsonschema["properties"]))\n+        self.assertIn("title", jsonschema["required"])\n+        self.assertEqual("default", jsonschema["fieldsets"][0]["id"])\n+        self.assertIn("title", jsonschema["fieldsets"][0]["fields"])\n+        self.assertIn("layouts", jsonschema)\n \n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'Document\'],\n-            portal,\n-            request,\n-            excluded_fields=[\'title\']\n+            ttool["Document"], portal, request, excluded_fields=["title"]\n         )\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n+        self.assertNotIn("title", list(jsonschema["properties"]))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n         """Make sure FTIs without lookupSchema are supported.\n         """\n-        fti = self.portal.portal_types[\'Plone Site\']\n-        self.assertFalse(hasattr(fti, \'lookupSchema\'))\n+        fti = self.portal.portal_types["Plone Site"]\n+        self.assertFalse(hasattr(fti, "lookupSchema"))\n \n         # This shouldn\'t raise an error.\n         get_jsonschema_for_fti(fti, self.portal, self.request)\n@@ -130,21 +99,18 @@ def test_get_jsonschema_for_fti_non_dx(self):\n     def test_get_jsonschema_for_portal_type(self):\n         portal = self.portal\n         request = self.request\n-        jsonschema = get_jsonschema_for_portal_type(\n-            \'Document\',\n-            portal,\n-            request\n-        )\n-        self.assertEqual(jsonschema[\'title\'], \'Page\')\n-        self.assertEqual(jsonschema[\'type\'], \'object\')\n-        self.assertIn(\'title\', list(jsonschema[\'properties\']))\n-        self.assertIn(\'title\', jsonschema[\'required\'])\n-        self.assertEqual(\'default\', jsonschema[\'fieldsets\'][0][\'id\'])\n-        self.assertIn(\'title\', jsonschema[\'fieldsets\'][0][\'fields\'])\n+        jsonschema = get_jsonschema_for_portal_type("Document", portal, request)\n+        self.assertEqual(jsonschema["title"], "Page")\n+        self.assertEqual(jsonschema["type"], "object")\n+        self.assertIn("title", list(jsonschema["properties"]))\n+        self.assertIn("title", jsonschema["required"])\n+        self.assertEqual("default", jsonschema["fieldsets"][0]["id"])\n+        self.assertIn("title", jsonschema["fieldsets"][0]["fields"])\n \n         jsonschema = get_jsonschema_for_portal_type(\n-            \'Document\', portal, request, excluded_fields=[\'title\'])\n-        self.assertNotIn(\'title\', list(jsonschema[\'properties\']))\n+            "Document", portal, request, excluded_fields=["title"]\n+        )\n+        self.assertNotIn("title", list(jsonschema["properties"]))\n \n \n class TestTaggedValuesJsonSchemaUtils(TestCase):\n@@ -152,71 +118,60 @@ class TestTaggedValuesJsonSchemaUtils(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        fti = DexterityFTI(\'TaggedDocument\')\n-        self.portal.portal_types._setObject(\'TaggedDocument\', fti)\n-        fti.klass = \'plone.dexterity.content.Container\'\n-        fti.schema = \'plone.restapi.tests.test_types.ITaggedValuesSchema\'\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        fti = DexterityFTI("TaggedDocument")\n+        self.portal.portal_types._setObject("TaggedDocument", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.schema = "plone.restapi.tests.test_types.ITaggedValuesSchema"\n \n     def test_get_jsonschema_with_hidden_field(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n \n         self.assertEqual(\n-            \'hidden\',\n-            jsonschema[\'properties\'][\'field_mode_hidden\'][\'mode\']\n+            "hidden", jsonschema["properties"]["field_mode_hidden"]["mode"]\n         )\n         self.assertEqual(\n-            \'display\',\n-            jsonschema[\'properties\'][\'field_mode_display\'][\'mode\']\n-        )\n-        self.assertEqual(\n-            \'input\',\n-            jsonschema[\'properties\'][\'field_mode_input\'][\'mode\']\n+            "display", jsonschema["properties"]["field_mode_display"]["mode"]\n         )\n+        self.assertEqual("input", jsonschema["properties"]["field_mode_input"]["mode"])\n \n     def test_get_jsonschema_with_widget_params(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            \'some_value\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n-                \'widgetOptions\'][\'a_param\']\n+            "some_value",\n+            jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"][\n+                "a_param"\n+            ],\n         )\n \n     def test_do_not_fail_with_non_parametrized_widget(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            u\'No parametrized widget field\',\n-            jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n+            u"No parametrized widget field",\n+            jsonschema["properties"]["not_parametrized_widget_field"]["title"],\n         )\n \n     def test_resolve_callable_widget_params(self):\n-        ttool = getToolByName(self.portal, \'portal_types\')\n+        ttool = getToolByName(self.portal, "portal_types")\n         jsonschema = get_jsonschema_for_fti(\n-            ttool[\'TaggedDocument\'],\n-            self.portal,\n-            self.request\n+            ttool["TaggedDocument"], self.portal, self.request\n         )\n \n         self.assertEqual(\n-            u\'Foo\',\n-            jsonschema[\'properties\'][\'parametrized_widget_field\'][\n-                \'widgetOptions\'].get(\'defaultFactory\')\n+            u"Foo",\n+            jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"].get(\n+                "defaultFactory"\n+            ),\n         )\n \n \n@@ -225,12 +180,12 @@ class TestJsonSchemaProviders(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.dummy_vocabulary = SimpleVocabulary(\n             [\n-                SimpleTerm(value=u\'foo\', title=u\'Foo\'),\n-                SimpleTerm(value=u\'bar\', title=u\'Bar\')\n+                SimpleTerm(value=u"foo", title=u"Foo"),\n+                SimpleTerm(value=u"bar", title=u"Bar"),\n             ]\n         )\n \n@@ -241,406 +196,370 @@ def setUp(self):\n     def dummy_source_vocab(self, context):\n         return SimpleVocabulary(\n             [\n-                SimpleTerm(value=u\'foo\', title=u\'Foo\'),\n-                SimpleTerm(value=u\'bar\', title=u\'Bar\')\n+                SimpleTerm(value=u"foo", title=u"Foo"),\n+                SimpleTerm(value=u"bar", title=u"Bar"),\n             ]\n         )\n \n     def test_textline(self):\n         field = schema.TextLine(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=u\'foobar\'\n+            title=u"My field", description=u"My great field", default=u"foobar"\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': u\'foobar\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": u"foobar",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_text(self):\n         field = schema.Text(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=u\'Lorem ipsum dolor sit amet\',\n+            title=u"My field",\n+            description=u"My great field",\n+            default=u"Lorem ipsum dolor sit amet",\n             min_length=10,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': \'textarea\',\n-                \'default\': u\'Lorem ipsum dolor sit amet\',\n-                \'minLength\': 10,\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": "textarea",\n+                "default": u"Lorem ipsum dolor sit amet",\n+                "minLength": 10,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_bool(self):\n         field = schema.Bool(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=False,\n+            title=u"My field", description=u"My great field", default=False\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'boolean\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': False,\n+                "type": "boolean",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": False,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_float(self):\n         field = schema.Float(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min=0.0,\n             max=1.0,\n             default=0.5,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0.0,\n-                \'maximum\': 1.0,\n-                \'type\': \'number\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 0.5,\n+                "minimum": 0.0,\n+                "maximum": 1.0,\n+                "type": "number",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 0.5,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_decimal(self):\n         field = schema.Decimal(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min=Decimal(0),\n             max=Decimal(1),\n             default=Decimal(0.5),\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0.0,\n-                \'maximum\': 1.0,\n-                \'type\': \'number\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 0.5,\n+                "minimum": 0.0,\n+                "maximum": 1.0,\n+                "type": "number",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 0.5,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_int(self):\n         field = schema.Int(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            min=0,\n-            max=100,\n-            default=50,\n+            title=u"My field", description=u"My great field", min=0, max=100, default=50\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'minimum\': 0,\n-                \'maximum\': 100,\n-                \'type\': \'integer\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': 50,\n+                "minimum": 0,\n+                "maximum": 100,\n+                "type": "integer",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": 50,\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             vocabulary=self.dummy_vocabulary,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'enum\': [\'foo\', \'bar\'],\n-                \'enumNames\': [\'Foo\', \'Bar\'],\n-                \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "enum": ["foo", "bar"],\n+                "enumNames": ["Foo", "Bar"],\n+                "choices": [("foo", "Foo"), ("bar", "Bar")],\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice_named_vocab(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+            title=u"My field",\n+            description=u"My great field",\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'vocabulary\': { \'@id\': u\'http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes\' }  # noqa\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "vocabulary": {\n+                    "@id": u"http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+                },  # noqa\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             source=self.dummy_source_vocab,\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n+        )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'enum\': [\'foo\', \'bar\'],\n-                \'enumNames\': [\'Foo\', \'Bar\'],\n-                \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "enum": ["foo", "bar"],\n+                "enumNames": ["Foo", "Bar"],\n+                "choices": [("foo", "Foo"), ("bar", "Bar")],\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_collection(self):\n         field = schema.List(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n+            title=u"My field",\n+            description=u"My great field",\n             min_length=1,\n             value_type=schema.TextLine(\n-                title=u\'Text\',\n-                description=u\'Text field\',\n-                default=u\'Default text\'\n+                title=u"Text", description=u"Text field", default=u"Default text"\n             ),\n-            default=[\'foobar\'],\n+            default=["foobar"],\n+        )\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': [\'foobar\'],\n-                \'minItems\': 1,\n-                \'uniqueItems\': False,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'type\': \'string\',\n-                    \'title\': u\'Text\',\n-                    \'description\': u\'Text field\',\n-                    \'default\': u\'Default text\',\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": ["foobar"],\n+                "minItems": 1,\n+                "uniqueItems": False,\n+                "additionalItems": True,\n+                "items": {\n+                    "type": "string",\n+                    "title": u"Text",\n+                    "description": u"Text field",\n+                    "default": u"Default text",\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # Test Tuple\n-        field = schema.Tuple(\n-            title=u\'My field\',\n-            value_type=schema.Int(),\n-            default=(1, 2),\n+        field = schema.Tuple(title=u"My field", value_type=schema.Int(), default=(1, 2))\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'integer\',\n-                },\n-                \'default\': (1, 2),\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {"title": u"", "description": u"", "type": "integer"},\n+                "default": (1, 2),\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # Test Set\n-        field = schema.Set(\n-            title=u\'My field\',\n-            value_type=schema.TextLine(),\n+        field = schema.Set(title=u"My field", value_type=schema.TextLine())\n+        adapter = getMultiAdapter(\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n-        adapter = getMultiAdapter((field, self.portal, self.request),\n-                                  IJsonSchemaProvider)\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'string\',\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {"title": u"", "description": u"", "type": "string"},\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n         # List of choices\n         field = schema.List(\n-            title=u\'My field\',\n-            value_type=schema.Choice(\n-                vocabulary=self.dummy_vocabulary,\n-            ),\n+            title=u"My field",\n+            value_type=schema.Choice(vocabulary=self.dummy_vocabulary),\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'array\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'\',\n-                \'uniqueItems\': True,\n-                \'additionalItems\': True,\n-                \'items\': {\n-                    \'title\': u\'\',\n-                    \'description\': u\'\',\n-                    \'type\': \'string\',\n-                    \'enum\': [\'foo\', \'bar\'],\n-                    \'enumNames\': [\'Foo\', \'Bar\'],\n-                    \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-                }\n+                "type": "array",\n+                "title": u"My field",\n+                "description": u"",\n+                "uniqueItems": True,\n+                "additionalItems": True,\n+                "items": {\n+                    "title": u"",\n+                    "description": u"",\n+                    "type": "string",\n+                    "enum": ["foo", "bar"],\n+                    "enumNames": ["Foo", "Bar"],\n+                    "choices": [("foo", "Foo"), ("bar", "Bar")],\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_object(self):\n         field = schema.Object(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            schema=IDummySchema,\n+            title=u"My field", description=u"My great field", schema=IDummySchema\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'object\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'properties\': {\n-                    \'field1\': {\n-                        \'title\': u\'Foo\',\n-                        \'description\': u\'\',\n-                        \'type\': \'boolean\'\n-                    },\n-                    \'field2\': {\n-                        \'title\': u\'Bar\',\n-                        \'description\': u\'\',\n-                        \'type\': \'string\'\n-                    },\n-                }\n+                "type": "object",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "properties": {\n+                    "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n+                    "field2": {"title": u"Bar", "description": u"", "type": "string"},\n+                },\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_richtext(self):\n-        field = RichText(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-        )\n+        field = RichText(title=u"My field", description=u"My great field")\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': \'richtext\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": "richtext",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_date(self):\n         field = schema.Date(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-            default=date(2016, 1, 1),\n+            title=u"My field", description=u"My great field", default=date(2016, 1, 1)\n         )\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'default\': date(2016, 1, 1),\n-                \'widget\': u\'date\'\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "default": date(2016, 1, 1),\n+                "widget": u"date",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\n \n     def test_datetime(self):\n-        field = schema.Datetime(\n-            title=u\'My field\',\n-            description=u\'My great field\',\n-        )\n+        field = schema.Datetime(title=u"My field", description=u"My great field")\n         adapter = getMultiAdapter(\n-            (field, self.portal, self.request),\n-            IJsonSchemaProvider\n+            (field, self.portal, self.request), IJsonSchemaProvider\n         )\n \n         self.assertEqual(\n             {\n-                \'type\': \'string\',\n-                \'title\': u\'My field\',\n-                \'description\': u\'My great field\',\n-                \'widget\': u\'datetime\',\n+                "type": "string",\n+                "title": u"My field",\n+                "description": u"My great field",\n+                "widget": u"datetime",\n             },\n-            adapter.get_schema()\n+            adapter.get_schema(),\n         )\ndiff --git a/src/plone/restapi/tests/test_upgrades.py b/src/plone/restapi/tests/test_upgrades.py\nindex 4e6c23d6..b15ac6b3 100644\n--- a/src/plone/restapi/tests/test_upgrades.py\n+++ b/src/plone/restapi/tests/test_upgrades.py\n@@ -10,31 +10,27 @@ class TestUpgrades(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n     def test_migration_profile_to_0002_can_be_loaded(self):\n-        loadMigrationProfile(\n-            self.portal,\n-            \'profile-plone.restapi.upgrades:0002\'\n-        )\n+        loadMigrationProfile(self.portal, "profile-plone.restapi.upgrades:0002")\n         self.assertTrue(True)\n \n     def test_run_migration_profile_to_0002(self):\n         from plone.restapi.upgrades.to0002 import assign_use_api_permission\n-        portal_setup = getToolByName(self.portal, \'portal_setup\')\n+\n+        portal_setup = getToolByName(self.portal, "portal_setup")\n         assign_use_api_permission(portal_setup)\n         self.assertTrue(True)\n \n     def test_migration_profile_to_0004_can_be_loaded(self):\n-        loadMigrationProfile(\n-            self.portal,\n-            \'profile-plone.restapi.upgrades:0004\'\n-        )\n+        loadMigrationProfile(self.portal, "profile-plone.restapi.upgrades:0004")\n         self.assertTrue(True)\n \n     def test_run_migration_profile_to_0004(self):\n         from plone.restapi.upgrades.to0004 import assign_get_users_permission\n-        portal_setup = getToolByName(self.portal, \'portal_setup\')\n+\n+        portal_setup = getToolByName(self.portal, "portal_setup")\n         assign_get_users_permission(portal_setup)\n         self.assertTrue(True)\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 0f4d0558..659e530f 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -21,71 +21,79 @@ class TestWorkflowInfo(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.doc1 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc1\', title=\'Test Document\')]\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, \'submit\')\n-        wftool.doActionFor(self.portal.doc1, \'publish\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc1", title="Test Document"\n+            )\n+        ]\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, "submit")\n+        wftool.doActionFor(self.portal.doc1, "publish")\n \n     def test_workflow_info_includes_history(self):\n-        wfinfo = getMultiAdapter((self.doc1, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'history\', info)\n-        history = info[\'history\']\n+        self.assertIn("history", info)\n+        history = info["history"]\n         self.assertEqual(3, len(history))\n-        self.assertEqual(\'published\', history[-1][u\'review_state\'])\n-        self.assertEqual(u\'Published with accent \xc3\xa9\', history[-1][u\'title\'])\n+        self.assertEqual("published", history[-1][u"review_state"])\n+        self.assertEqual(u"Published with accent \xc3\xa9", history[-1][u"title"])\n \n     def test_workflow_info_unauthorized_history(self):\n         login(self.portal, SITE_OWNER_NAME)\n-        doc2 = self.portal[self.portal.invokeFactory(\n-            \'DXTestDocument\', id=\'doc2\', title=\'Test Document\')]\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(doc2, \'submit\')\n-        wftool.doActionFor(doc2, \'publish\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        doc2 = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument", id="doc2", title="Test Document"\n+            )\n+        ]\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(doc2, "submit")\n+        wftool.doActionFor(doc2, "publish")\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, TEST_USER_NAME)\n-        wfinfo = getMultiAdapter((doc2, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (doc2, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'history\', info)\n-        history = info[\'history\']\n+        self.assertIn("history", info)\n+        history = info["history"]\n         self.assertEqual(0, len(history))\n \n     def test_workflow_info_includes_transitions(self):\n-        wfinfo = getMultiAdapter((self.doc1, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+        )\n         info = wfinfo.reply()\n-        self.assertIn(\'transitions\', info)\n-        transitions = info[\'transitions\']\n+        self.assertIn("transitions", info)\n+        transitions = info["transitions"]\n         self.assertEqual(2, len(transitions))\n \n     def test_collapsed_workflow_info_in_content_serialization(self):\n-        serializer = getMultiAdapter((self.doc1, self.request),\n-                                     ISerializeToJson)\n+        serializer = getMultiAdapter((self.doc1, self.request), ISerializeToJson)\n         obj = serializer()\n-        self.assertIn(\'workflow\', obj[\'@components\'])\n-        self.assertIn(\'@id\', obj[\'@components\'][\'workflow\'])\n+        self.assertIn("workflow", obj["@components"])\n+        self.assertIn("@id", obj["@components"]["workflow"])\n \n     def test_expanded_workflow_info_in_content_serialization(self):\n-        self.request.form.update({\'expand\': \'workflow\'})\n-        serializer = getMultiAdapter((self.doc1, self.request),\n-                                     ISerializeToJson)\n+        self.request.form.update({"expand": "workflow"})\n+        serializer = getMultiAdapter((self.doc1, self.request), ISerializeToJson)\n         obj = serializer()\n-        self.assertIn(\'workflow\', obj[\'@components\'])\n-        self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n-        self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n+        self.assertIn("workflow", obj["@components"])\n+        self.assertIn("transitions", obj["@components"]["workflow"])\n+        self.assertIn("history", obj["@components"]["workflow"])\n \n     def test_workflow_info_empty_on_siteroot(self):\n-        wfinfo = getMultiAdapter((self.portal, self.request),\n-                                 name=u\'GET_application_json_@workflow\')\n+        wfinfo = getMultiAdapter(\n+            (self.portal, self.request), name=u"GET_application_json_@workflow"\n+        )\n         obj = wfinfo.reply()\n \n-        self.assertEquals(obj[\'transitions\'], [])\n-        self.assertEquals(obj[\'history\'], [])\n+        self.assertEquals(obj["transitions"], [])\n+        self.assertEquals(obj["history"], [])\n \n \n class TestWorkflowTransition(TestCase):\n@@ -93,90 +101,84 @@ class TestWorkflowTransition(TestCase):\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n         login(self.portal, SITE_OWNER_NAME)\n-        self.portal.invokeFactory(\'Document\', id=\'doc1\')\n-\n-    def traverse(self, path=\'/plone\', accept=\'application/json\',\n-                 method=\'POST\'):\n-        request = self.layer[\'request\']\n-        request.environ[\'PATH_INFO\'] = path\n-        request.environ[\'PATH_TRANSLATED\'] = path\n-        request.environ[\'HTTP_ACCEPT\'] = accept\n-        request.environ[\'REQUEST_METHOD\'] = method\n-        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        request._auth = \'Basic %s\' % b64encode(\n-            auth.encode(\'utf8\')).decode(\'utf8\')\n+        self.portal.invokeFactory("Document", id="doc1")\n+\n+    def traverse(self, path="/plone", accept="application/json", method="POST"):\n+        request = self.layer["request"]\n+        request.environ["PATH_INFO"] = path\n+        request.environ["PATH_TRANSLATED"] = path\n+        request.environ["HTTP_ACCEPT"] = accept\n+        request.environ["REQUEST_METHOD"] = method\n+        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n \n     def test_transition_action_succeeds(self):\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u\'published\', res[u\'review_state\'])\n+        self.assertEqual(u"published", res[u"review_state"])\n         self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(self.portal.doc1, u\'review_state\'))\n+            u"published", self.wftool.getInfoFor(self.portal.doc1, u"review_state")\n+        )\n \n     def test_calling_endpoint_without_transition_gives_400(self):\n-        service = self.traverse(\'/plone/doc1/@workflow\')\n+        service = self.traverse("/plone/doc1/@workflow")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'Missing transition\', res[\'error\'][\'message\'])\n+        self.assertEqual("Missing transition", res["error"]["message"])\n \n-    def test_calling_workflow_with_additional_path_segments_results_in_404(\n-            self):\n+    def test_calling_workflow_with_additional_path_segments_results_in_404(self):\n         with self.assertRaises(NotFound):\n-            self.traverse(\'/plone/doc1/@workflow/publish/test\')\n+            self.traverse("/plone/doc1/@workflow/publish/test")\n \n     def test_transition_with_comment(self):\n-        self.request[\'BODY\'] = \'{"comment": "A comment"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"comment": "A comment"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u\'A comment\', res[u\'comments\'])\n+        self.assertEqual(u"A comment", res[u"comments"])\n \n     def test_transition_including_children(self):\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', id=\'folder\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', id=\'subfolder\')]\n-        self.request[\'BODY\'] = (\n-            \'{"comment": "A comment", "include_children": true}\')\n-        service = self.traverse(\'/plone/folder/@workflow/publish\')\n+        folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n+        subfolder = folder[folder.invokeFactory("Folder", id="subfolder")]\n+        self.request["BODY"] = \'{"comment": "A comment", "include_children": true}\'\n+        service = self.traverse("/plone/folder/@workflow/publish")\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n+        self.assertEqual(u"published", self.wftool.getInfoFor(folder, u"review_state"))\n         self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(folder, u\'review_state\'))\n-        self.assertEqual(\n-            u\'published\',\n-            self.wftool.getInfoFor(subfolder, u\'review_state\'))\n+            u"published", self.wftool.getInfoFor(subfolder, u"review_state")\n+        )\n \n     def test_transition_with_effective_date(self):\n-        self.request[\'BODY\'] = \'{"effective": "2018-06-24T09:17:02"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"effective": "2018-06-24T09:17:02"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         service.reply()\n         self.assertEqual(\n-            \'2018-06-24T09:17:00+00:00\',\n-            self.portal.doc1.effective().ISO8601())\n+            "2018-06-24T09:17:00+00:00", self.portal.doc1.effective().ISO8601()\n+        )\n \n     def test_transition_with_expiration_date(self):\n-        self.request[\'BODY\'] = \'{"expires": "2019-06-20T18:00:00"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"expires": "2019-06-20T18:00:00"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         service.reply()\n         self.assertEqual(\n-            \'2019-06-20T18:00:00+00:00\',\n-            self.portal.doc1.expires().ISO8601())\n+            "2019-06-20T18:00:00+00:00", self.portal.doc1.expires().ISO8601()\n+        )\n \n     def test_invalid_transition_results_in_400(self):\n-        service = self.traverse(\'/plone/doc1/@workflow/foo\')\n+        service = self.traverse("/plone/doc1/@workflow/foo")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'WorkflowException\', res[\'error\'][\'type\'])\n+        self.assertEqual("WorkflowException", res["error"]["type"])\n \n     def test_invalid_effective_date_results_in_400(self):\n-        self.request[\'BODY\'] = \'{"effective": "now"}\'\n-        service = self.traverse(\'/plone/doc1/@workflow/publish\')\n+        self.request["BODY"] = \'{"effective": "now"}\'\n+        service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n         self.assertEqual(400, self.request.response.getStatus())\n-        self.assertEqual(\'Bad Request\', res[\'error\'][\'type\'])\n+        self.assertEqual("Bad Request", res["error"]["type"])\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 677c3aa6..d26c2b25 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -37,7 +37,6 @@\n @adapter(IField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DefaultJsonSchemaProvider(object):\n-\n     def __init__(self, field, context, request):\n         self.field = field\n         self.context = context\n@@ -52,7 +51,7 @@ def get_title(self):\n \n     def get_description(self):\n         if self.field.description is None:\n-            return u\'\'\n+            return u""\n \n         return translate(self.field.description, context=self.request)\n \n@@ -62,21 +61,21 @@ def get_schema(self):\n         You should override `additional` method to provide more properties\n         about the field."""\n         schema = {\n-            \'type\': self.get_type(),\n-            \'title\': self.get_title(),\n-            \'description\': self.get_description(),\n+            "type": self.get_type(),\n+            "title": self.get_title(),\n+            "description": self.get_description(),\n         }\n \n         widget = self.get_widget()\n         if widget:\n-            schema[\'widget\'] = widget\n+            schema["widget"] = widget\n \n         widget_options = self.get_widget_params()\n         if widget_options:\n-            schema[\'widgetOptions\'] = widget_options\n+            schema["widgetOptions"] = widget_options\n \n         if self.field.default is not None:\n-            schema[\'default\'] = self.field.default\n+            schema["default"] = self.field.default\n \n         schema.update(self.additional())\n         return schema\n@@ -90,46 +89,43 @@ def get_widget(self):\n     def get_widget_params(self):\n         all_params = get_widget_params([self.field.interface])\n         params = all_params.get(self.field.getName(), {})\n-        if \'vocabulary\' in params:\n-            vocab_name = params[\'vocabulary\']\n-            params[\'vocabulary\'] = {\n-                    \'@id\': get_vocabulary_url(\n-                        vocab_name, self.context, self.request)}\n+        if "vocabulary" in params:\n+            vocab_name = params["vocabulary"]\n+            params["vocabulary"] = {\n+                "@id": get_vocabulary_url(vocab_name, self.context, self.request)\n+            }\n         return params\n \n \n @adapter(IBytes, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class BytesLineJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n \n @adapter(ITextLine, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TextLineJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n \n @adapter(IText, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class TextJsonSchemaProvider(TextLineJsonSchemaProvider):\n-\n     def additional(self):\n         info = {}\n         if self.field.min_length is not None:\n-            info[\'minLength\'] = self.field.min_length\n+            info["minLength"] = self.field.min_length\n \n         if self.field.max_length is not None:\n-            info[\'maxLength\'] = self.field.max_length\n+            info["maxLength"] = self.field.max_length\n \n         return info\n \n     def get_widget(self):\n-        return \'textarea\'\n+        return "textarea"\n \n \n @adapter(IASCII, Interface, Interface)\n@@ -149,17 +145,16 @@ class ASCIILineJsonSchemaProvider(TextLineJsonSchemaProvider):\n @adapter(IFloat, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class FloatJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'number\'\n+        return "number"\n \n     def additional(self):\n         info = {}\n         if self.field.min is not None:\n-            info[\'minimum\'] = self.field.min\n+            info["minimum"] = self.field.min\n \n         if self.field.max is not None:\n-            info[\'maximum\'] = self.field.max\n+            info["maximum"] = self.field.max\n \n         return info\n \n@@ -174,44 +169,41 @@ class DecimalJsonSchemaProvider(FloatJsonSchemaProvider):\n @adapter(IInt, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class IntegerJsonSchemaProvider(FloatJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'integer\'\n+        return "integer"\n \n \n @adapter(IBool, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class BoolJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'boolean\'\n+        return "boolean"\n \n \n @adapter(ICollection, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class CollectionJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'array\'\n+        return "array"\n \n     def get_items(self):\n         """Get items properties."""\n         value_type_adapter = getMultiAdapter(\n-            (self.field.value_type, self.context, self.request),\n-            IJsonSchemaProvider)\n+            (self.field.value_type, self.context, self.request), IJsonSchemaProvider\n+        )\n \n         return value_type_adapter.get_schema()\n \n     def additional(self):\n         info = {}\n-        info[\'additionalItems\'] = True\n+        info["additionalItems"] = True\n         if self.field.min_length:\n-            info[\'minItems\'] = self.field.min_length\n+            info["minItems"] = self.field.min_length\n \n         if self.field.max_length:\n-            info[\'maxItems\'] = self.field.max_length\n+            info["maxItems"] = self.field.max_length\n \n-        info[\'items\'] = self.get_items()\n+        info["items"] = self.get_items()\n \n         return info\n \n@@ -219,13 +211,12 @@ def additional(self):\n @adapter(IList, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class ListJsonSchemaProvider(CollectionJsonSchemaProvider):\n-\n     def additional(self):\n         info = super(ListJsonSchemaProvider, self).additional()\n         if IChoice.providedBy(self.field.value_type):\n-            info[\'uniqueItems\'] = True\n+            info["uniqueItems"] = True\n         else:\n-            info[\'uniqueItems\'] = False\n+            info["uniqueItems"] = False\n \n         return info\n \n@@ -233,10 +224,9 @@ def additional(self):\n @adapter(ISet, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class SetJsonSchemaProvider(CollectionJsonSchemaProvider):\n-\n     def additional(self):\n         info = super(SetJsonSchemaProvider, self).additional()\n-        info[\'uniqueItems\'] = True\n+        info["uniqueItems"] = True\n         return info\n \n \n@@ -255,28 +245,24 @@ class ChoiceJsonSchemaProvider(DefaultJsonSchemaProvider):\n     should_render_choices = True\n \n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def additional(self):\n-        vocab_name = getattr(self.field, \'vocabularyName\', None)\n+        vocab_name = getattr(self.field, "vocabularyName", None)\n         if vocab_name:\n             return {\n-                \'vocabulary\': {\n-                    \'@id\': get_vocabulary_url(\n-                        vocab_name,\n-                        self.context,\n-                        self.request\n-                    )\n+                "vocabulary": {\n+                    "@id": get_vocabulary_url(vocab_name, self.context, self.request)\n                 }\n             }\n \n         # Maybe we have an unnamed vocabulary or source.\n \n-        vocabulary = getattr(self.field, \'vocabulary\', None)\n+        vocabulary = getattr(self.field, "vocabulary", None)\n         if IContextSourceBinder.providedBy(vocabulary):\n             vocabulary = vocabulary(self.context)\n \n-        if hasattr(vocabulary, \'__iter__\') and self.should_render_choices:\n+        if hasattr(vocabulary, "__iter__") and self.should_render_choices:\n             # choices and enumNames are v5 proposals, for now we implement both\n             choices = []\n             enum = []\n@@ -288,11 +274,7 @@ def additional(self):\n                 enum.append(term.token)\n                 enum_names.append(title)\n \n-            return {\n-                \'enum\': enum,\n-                \'enumNames\': enum_names,\n-                \'choices\': choices,\n-            }\n+            return {"enum": enum, "enumNames": enum_names, "choices": choices}\n         else:\n             return {}\n \n@@ -301,14 +283,14 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class ObjectJsonSchemaProvider(DefaultJsonSchemaProvider):\n \n-    prefix = \'\'\n+    prefix = ""\n \n     def get_type(self):\n-        return \'object\'\n+        return "object"\n \n     def get_properties(self):\n         if self.prefix:\n-            prefix = \'.\'.join([self.prefix, self.field.__name__])\n+            prefix = ".".join([self.prefix, self.field.__name__])\n         else:\n             prefix = self.field.__name__\n \n@@ -319,34 +301,31 @@ def get_properties(self):\n \n     def additional(self):\n         info = super(ObjectJsonSchemaProvider, self).additional()\n-        info[\'properties\'] = self.get_properties()\n+        info["properties"] = self.get_properties()\n         return info\n \n \n @adapter(IDict, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DictJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'dict\'\n+        return "dict"\n \n     def additional(self):\n         info = {}\n         key_type = getMultiAdapter(\n-            (self.field.key_type, self.context, self.request),\n-            IJsonSchemaProvider\n+            (self.field.key_type, self.context, self.request), IJsonSchemaProvider\n         )\n-        info[\'key_type\'] = {\n-            \'schema\': key_type.get_schema(),\n-            \'additional\': key_type.additional(),\n+        info["key_type"] = {\n+            "schema": key_type.get_schema(),\n+            "additional": key_type.additional(),\n         }\n         value_type = getMultiAdapter(\n-            (self.field.key_type, self.context, self.request),\n-            IJsonSchemaProvider\n+            (self.field.key_type, self.context, self.request), IJsonSchemaProvider\n         )\n-        info[\'value_type\'] = {\n-            \'schema\': value_type.get_schema(),\n-            \'additional\': value_type.additional(),\n+        info["value_type"] = {\n+            "schema": value_type.get_schema(),\n+            "additional": value_type.additional(),\n         }\n         return info\n \n@@ -355,42 +334,40 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class RichTextJsonSchemaProvider(DefaultJsonSchemaProvider):\n \n-    prefix = \'\'\n+    prefix = ""\n \n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def get_widget(self):\n-        return \'richtext\'\n+        return "richtext"\n \n \n @adapter(IDate, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DateJsonSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'string\'\n+        return "string"\n \n     def additional(self):\n         info = {}\n         if self.field.min is not None:\n-            info[\'minimum\'] = self.field.min\n+            info["minimum"] = self.field.min\n \n         if self.field.max is not None:\n-            info[\'maximum\'] = self.field.max\n+            info["maximum"] = self.field.max\n \n         return info\n \n     def get_widget(self):\n-        return \'date\'\n+        return "date"\n \n \n @adapter(IDatetime, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DatetimeJsonSchemaProvider(DateJsonSchemaProvider):\n-\n     def get_widget(self):\n-        return \'datetime\'\n+        return "datetime"\n \n \n @adapter(ITuple, Interface, Interface)\n@@ -402,9 +379,8 @@ class SubjectsFieldJsonSchemaProvider(ChoiceJsonSchemaProvider):\n @adapter(IJSONField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class JSONFieldSchemaProvider(DefaultJsonSchemaProvider):\n-\n     def get_type(self):\n-        return \'dict\'\n+        return "dict"\n \n     def get_widget(self):\n-        return \'json\'\n+        return "json"\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 8243778c..82e2e2dd 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -53,7 +53,7 @@ def iter_fields(fieldsets):\n     as returned by `get_fieldsets`.\n     """\n     for fieldset in fieldsets:\n-        for field in fieldset[\'fields\']:\n+        for field in fieldset["fields"]:\n             yield field\n \n \n@@ -64,18 +64,16 @@ def get_fieldsets(context, request, schema, additional_schemata=None):\n     form = create_form(context, request, schema, additional_schemata)\n \n     # Default fieldset\n-    fieldsets = [{\n-        \'id\': \'default\',\n-        \'title\': u\'Default\',\n-        \'fields\': list(form.fields.values()),\n-    }]\n+    fieldsets = [\n+        {"id": "default", "title": u"Default", "fields": list(form.fields.values())}\n+    ]\n \n     # Additional fieldsets (AKA z3c.form groups)\n     for group in form.groups:\n         fieldset = {\n-            \'id\': group.__name__,\n-            \'title\': translate(group.label, context=getRequest()),\n-            \'fields\': list(group.fields.values()),\n+            "id": group.__name__,\n+            "title": translate(group.label, context=getRequest()),\n+            "fields": list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n \n@@ -90,13 +88,14 @@ def get_fieldset_infos(fieldsets):\n     fieldset_infos = []\n     for fieldset in fieldsets:\n         fs_info = copy(fieldset)\n-        fs_info[\'fields\'] = [f.field.getName() for f in fs_info[\'fields\']]\n+        fs_info["fields"] = [f.field.getName() for f in fs_info["fields"]]\n         fieldset_infos.append(fs_info)\n     return fieldset_infos\n \n \n-def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n-                              excluded_fields=None):\n+def get_jsonschema_properties(\n+    context, request, fieldsets, prefix="", excluded_fields=None\n+):\n     """Build a JSON schema \'properties\' list, based on a list of fieldset\n     dicts as returned by `get_fieldsets()`.\n     """\n@@ -113,15 +112,16 @@ def get_jsonschema_properties(context, request, fieldsets, prefix=\'\',\n             adapter = queryMultiAdapter(\n                 (field.field, context, request),\n                 interface=IJsonSchemaProvider,\n-                name=field.__name__)\n+                name=field.__name__,\n+            )\n \n             adapter = adapter or getMultiAdapter(\n-                (field.field, context, request),\n-                interface=IJsonSchemaProvider)\n+                (field.field, context, request), interface=IJsonSchemaProvider\n+            )\n \n             adapter.prefix = prefix\n             if prefix:\n-                fieldname = \'.\'.join([prefix, fieldname])\n+                fieldname = ".".join([prefix, fieldname])\n \n             properties[fieldname] = adapter.get_schema()\n \n@@ -161,16 +161,11 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n         additional_schemata = ()\n     else:\n         additional_schemata = tuple(getAdditionalSchemata(portal_type=fti.id))\n-        fieldsets = get_fieldsets(\n-            context, request, schema, additional_schemata\n-        )\n+        fieldsets = get_fieldsets(context, request, schema, additional_schemata)\n \n     # Build JSON schema properties\n     properties = get_jsonschema_properties(\n-        context,\n-        request,\n-        fieldsets,\n-        excluded_fields=excluded_fields,\n+        context, request, fieldsets, excluded_fields=excluded_fields\n     )\n \n     # Determine required fields\n@@ -182,26 +177,26 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n     # Include field modes\n     for field in iter_fields(fieldsets):\n         if field.mode:\n-            properties[field.field.getName()][\'mode\'] = field.mode\n+            properties[field.field.getName()]["mode"] = field.mode\n \n     return {\n-        \'type\': \'object\',\n-        \'title\': translate(fti.Title(), context=getRequest()),\n-        \'properties\': IJsonCompatible(properties),\n-        \'required\': required,\n-        \'fieldsets\': get_fieldset_infos(fieldsets),\n-        \'layouts\': getattr(fti, \'view_methods\', []),\n+        "type": "object",\n+        "title": translate(fti.Title(), context=getRequest()),\n+        "properties": IJsonCompatible(properties),\n+        "required": required,\n+        "fieldsets": get_fieldset_infos(fieldsets),\n+        "layouts": getattr(fti, "view_methods", []),\n     }\n \n \n-def get_jsonschema_for_portal_type(portal_type, context, request,\n-                                   excluded_fields=None):\n+def get_jsonschema_for_portal_type(portal_type, context, request, excluded_fields=None):\n     """Build a complete JSON schema for the given portal_type.\n     """\n-    ttool = getToolByName(context, \'portal_types\')\n+    ttool = getToolByName(context, "portal_types")\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\n-        fti, context, request, excluded_fields=excluded_fields)\n+        fti, context, request, excluded_fields=excluded_fields\n+    )\n \n \n def get_vocabulary_url(vocab_name, context, request):\n@@ -210,7 +205,4 @@ def get_vocabulary_url(vocab_name, context, request):\n     except AttributeError:\n         portal = getSite()\n         context_url = portal.absolute_url()\n-    return \'{}/@vocabularies/{}\'.format(\n-        context_url,\n-        vocab_name,\n-    )\n+    return "{}/@vocabularies/{}".format(context_url, vocab_name)\ndiff --git a/src/plone/restapi/types/z3crelationadapter.py b/src/plone/restapi/types/z3crelationadapter.py\nindex ea5181d0..4bba58eb 100644\n--- a/src/plone/restapi/types/z3crelationadapter.py\n+++ b/src/plone/restapi/types/z3crelationadapter.py\n@@ -12,12 +12,11 @@\n @adapter(IRelationList, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class ChoiceslessRelationListSchemaProvider(ListJsonSchemaProvider):\n-\n     def get_items(self):\n         """Get items properties."""\n         value_type_adapter = getMultiAdapter(\n-            (self.field.value_type, self.context, self.request),\n-            IJsonSchemaProvider)\n+            (self.field.value_type, self.context, self.request), IJsonSchemaProvider\n+        )\n \n         # Prevent rendering all choices.\n         value_type_adapter.should_render_choices = False\ndiff --git a/src/plone/restapi/upgrades/to0002.py b/src/plone/restapi/upgrades/to0002.py\nindex 5f5dddd3..0231f2fc 100644\n--- a/src/plone/restapi/upgrades/to0002.py\n+++ b/src/plone/restapi/upgrades/to0002.py\n@@ -5,7 +5,8 @@ def assign_use_api_permission(setup_context):\n     """Assign the \'plone.restapi: Use REST API\' permission to Anonymous.\n     """\n     setup_context.runImportStepFromProfile(\n-        \'profile-plone.restapi.upgrades:0002\',\n-        \'rolemap\',\n+        "profile-plone.restapi.upgrades:0002",\n+        "rolemap",\n         run_dependencies=False,\n-        purge_old=False)\n+        purge_old=False,\n+    )\ndiff --git a/src/plone/restapi/upgrades/to0003.py b/src/plone/restapi/upgrades/to0003.py\nindex 0cf67476..132f9755 100644\n--- a/src/plone/restapi/upgrades/to0003.py\n+++ b/src/plone/restapi/upgrades/to0003.py\n@@ -6,5 +6,5 @@\n def install_pas_plugin_in_zope_root(setup_context):\n     """Install PAS plugin in Zope root\n     """\n-    portal = getToolByName(setup_context, \'portal_url\').getPortalObject()\n+    portal = getToolByName(setup_context, "portal_url").getPortalObject()\n     install_pas_plugin(portal)\ndiff --git a/src/plone/restapi/upgrades/to0004.py b/src/plone/restapi/upgrades/to0004.py\nindex 697b25d6..6fac3ce7 100644\n--- a/src/plone/restapi/upgrades/to0004.py\n+++ b/src/plone/restapi/upgrades/to0004.py\n@@ -6,7 +6,8 @@ def assign_get_users_permission(setup_context):\n        to Managers by default.\n     """\n     setup_context.runImportStepFromProfile(\n-        \'profile-plone.restapi.upgrades:0004\',\n-        \'rolemap\',\n+        "profile-plone.restapi.upgrades:0004",\n+        "rolemap",\n         run_dependencies=False,\n-        purge_old=False)\n+        purge_old=False,\n+    )\n'

