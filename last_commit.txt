Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-09-22T17:04:52+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/a88db1d8f40c97ac27d48fc8e8656fb0d3977b09

Testing: Drop freezegun and instead selectively patch some timestamp accessors. (#805)

* Drop freezegun.

* Tests: Freeze creation and modification dates in a more targeted way:

Instead of using a library like `freezegun` to freeze time
entirely during tests, be more selective in our patching.

Specifically monkey-patching a few accessors (getter methods) in a
targeted way like this was chosen as an alternative to freezing time
entirely using libraries like `freezegun`, because that approach has
caused issues in the past with code that assumes a monotonic clock, like
the generation of ZODB transaction IDs.

* Remove traces of attempts to manually control times.

* Update http-examples.

* TestDocumentation: Move duplicated setUp and tearDown into a base class.

* TestDocumentation: Set up StaticTime as an actual context manager,

and use a cleanUp hook to make sure our monkey patches always get
reverted. We don't want plone.restapi leaving any monkey patches
behind if there's a failure in setUp() or tearDown().

* Add changelog entry.

Files changed:
A news/803.misc
A src/plone/restapi/tests/statictime.py
A src/plone/restapi/tests/test_statictime.py
M setup.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/comments_get.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_get_folder.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/history_get.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/lock.resp
M src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/refresh_lock.resp
M src/plone/restapi/tests/http-examples/search_fullobjects.resp
M src/plone/restapi/tests/http-examples/search_metadata_fields.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_history.resp
M src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp
M src/plone/restapi/tests/http-examples/workflow_get.resp
M src/plone/restapi/tests/http-examples/workflow_post.resp
M src/plone/restapi/tests/http-examples/workflow_post_with_body.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_serializer_summary.py
D src/plone/restapi/tests/test_time_freezing.py

b'diff --git a/news/803.misc b/news/803.misc\nnew file mode 100644\nindex 00000000..80b2e06c\n--- /dev/null\n+++ b/news/803.misc\n@@ -0,0 +1,2 @@\n+Testing: Drop freezegun and instead selectively patch some timestamp accessors.\n+[lgraf]\ndiff --git a/setup.py b/setup.py\nindex 34d76e6a..04177d78 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -19,7 +19,6 @@\n     \'plone.app.testing [robot] >= 4.2.2\',  # ROBOT_TEST_LEVEL added\n     \'plone.api\',\n     \'requests\',\n-    \'freezegun\',\n     \'plone.tiles\',\n     \'mock\',\n     \'archetypes.schemaextender ; python_version<"3"\',\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex f857fd97..0486eb17 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -137,42 +137,6 @@ def tearDown(self):\n DATE_TIME_FIXTURE = DateTimeFixture()\n \n \n-def patchedNewTid(old):  # noqa\n-    """Make sure ZODB.utils.newTid always uses the real time functions\n-\n-    instead of the ones possibly patched by freezegun.\n-    This is necessary because ZODB seems to be relying on time being monotonic\n-    for its transaction IDs, and freezing time results in\n-    POSException.ReadConflictErrors.\n-    """\n-    from persistent.TimeStamp import TimeStamp  # noqa\n-    import freezegun  # noqa\n-\n-    t = freezegun.api.real_time()\n-    ts = TimeStamp(*freezegun.api.real_gmtime(t)[:5] + (t % 60,))\n-    if old is not None:\n-        ts = ts.laterThan(TimeStamp(old))\n-    return ts.raw()\n-\n-\n-class FreezeTimeFixture(Layer):\n-    def setUp(self):\n-        if PLONE_VERSION.base_version >= "5.1":\n-            from ZODB import utils\n-\n-            self.ZODB_orig_newTid = utils.newTid\n-            utils.newTid = patchedNewTid\n-\n-    def tearDown(self):\n-        if PLONE_VERSION.base_version >= "5.1":\n-            from ZODB import utils\n-\n-            utils.newTid = self.ZODB_orig_newTid\n-\n-\n-FREEZE_TIME_FIXTURE = FreezeTimeFixture()\n-\n-\n class PloneRestApiDXLayer(PloneSandboxLayer):\n \n     defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n@@ -219,10 +183,6 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n-PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXLayerFreeze:Functional",\n-)\n \n \n class PloneRestApiDXPAMLayer(PloneSandboxLayer):\n@@ -269,10 +229,6 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n-PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiDXPAMLayerFreeze:Functional",\n-)\n \n \n if HAS_AT:\n@@ -359,10 +315,6 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApiTilesLayer:Functional",\n )\n-PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING_FREEZETIME = FunctionalTesting(\n-    bases=(FREEZE_TIME_FIXTURE, PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayerFreeze:Functional",\n-)\n \n \n class RelativeSession(requests.Session):\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 9d950dac..06c7ab16 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -24,7 +24,7 @@ Content-Type: application/json\n   "UID": "SomeUUID000000000000000000000002", \n   "allow_discussion": false, \n   "contributors": [], \n-  "created": "2016-01-21T08:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -80,7 +80,7 @@ Content-Type: application/json\n   "language": "", \n   "layout": "listing_view", \n   "limit": 1000, \n-  "modified": "2016-01-21T08:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nindex 5f4813b0..2779fb5a 100644\n--- a/src/plone/restapi/tests/http-examples/comments_get.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_get.resp\n@@ -5,17 +5,17 @@ Content-Type: application/json\n   "@id": "http://localhost:55001/plone/front-page/@comments", \n   "items": [\n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n+      "@id": "http://localhost:55001/plone/front-page/@comments/1400000000000000", \n       "@parent": null, \n       "@type": "Discussion Item", \n       "author_name": null, \n       "author_username": null, \n-      "comment_id": "1477076400000000", \n-      "creation_date": "2016-10-21T19:00:00", \n+      "comment_id": "1400000000000000", \n+      "creation_date": "1995-07-31T13:45:00", \n       "in_reply_to": null, \n       "is_deletable": true, \n       "is_editable": true, \n-      "modification_date": "2016-10-21T19:00:00", \n+      "modification_date": "1995-07-31T17:30:00", \n       "text": {\n         "data": "Comment 1", \n         "mime-type": "text/plain"\n@@ -23,17 +23,17 @@ Content-Type: application/json\n       "user_notification": null\n     }, \n     {\n-      "@id": "http://localhost:55001/plone/front-page/@comments/1477076400000001", \n-      "@parent": "http://localhost:55001/plone/front-page/@comments/1477076400000000", \n+      "@id": "http://localhost:55001/plone/front-page/@comments/1400000000000001", \n+      "@parent": "http://localhost:55001/plone/front-page/@comments/1400000000000000", \n       "@type": "Discussion Item", \n       "author_name": null, \n       "author_username": null, \n-      "comment_id": "1477076400000001", \n-      "creation_date": "2016-10-21T19:00:00", \n-      "in_reply_to": "1477076400000000", \n+      "comment_id": "1400000000000001", \n+      "creation_date": "1995-07-31T13:45:00", \n+      "in_reply_to": "1400000000000000", \n       "is_deletable": true, \n       "is_editable": true, \n-      "modification_date": "2016-10-21T19:00:00", \n+      "modification_date": "1995-07-31T17:30:00", \n       "text": {\n         "data": "Comment 1.1", \n         "mime-type": "text/plain"\ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex fb30f741..8d9de0ef 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "admin"\n   ], \n@@ -37,7 +37,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone/folder", \n     "@type": "Folder", \ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nindex 2ae7b5c7..9cb293ac 100644\n--- a/src/plone/restapi/tests/http-examples/content_get_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -24,7 +24,7 @@ Content-Type: application/json\n   "UID": "SomeUUID000000000000000000000002", \n   "allow_discussion": false, \n   "contributors": [], \n-  "created": "2016-01-21T07:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -66,7 +66,7 @@ Content-Type: application/json\n   "items_total": 3, \n   "language": "", \n   "layout": "listing_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "nextPreviousEnabled": false, \n   "parent": {\n     "@id": "http://localhost:55001/plone", \ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex e738c14a..73502381 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "admin"\n   ], \n@@ -37,7 +37,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone/folder", \n     "@type": "Folder", \ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 95d6e5ed..6125a412 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -26,7 +26,7 @@ Location: http://localhost:55001/plone/folder/my-document\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-10-21T19:00:00+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "admin"\n   ], \n@@ -38,7 +38,7 @@ Location: http://localhost:55001/plone/folder/my-document\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-10-21T19:00:00+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone/folder", \n     "@type": "Folder", \ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 433ffa61..ff48ef82 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -37,7 +37,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex ead362ec..fb5ccd52 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -29,7 +29,7 @@ Content-Type: application/json\n   "contact_name": null, \n   "contact_phone": null, \n   "contributors": [], \n-  "created": "2016-01-21T03:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -44,7 +44,7 @@ Content-Type: application/json\n   "language": "", \n   "layout": "event_view", \n   "location": null, \n-  "modified": "2016-01-21T03:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "open_end": false, \n   "parent": {\n     "@id": "http://localhost:55001/plone", \ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 433ffa61..ff48ef82 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -37,7 +37,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex d7a6f2e0..0d7d884e 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -31,7 +31,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -43,7 +43,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 15fef604..5226e53d 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -185,7 +185,7 @@ Content-Type: application/json\n           "actor": "test_user_1_", \n           "comments": "", \n           "review_state": "private", \n-          "time": "2016-10-21T19:00:00+00:00", \n+          "time": "1995-07-31T17:30:00", \n           "title": "Private"\n         }\n       ], \n@@ -207,7 +207,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T01:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -219,7 +219,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "document_view", \n-  "modified": "2016-01-21T01:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex 2c1db3ed..18d9b3ff 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -24,7 +24,7 @@ Content-Type: application/json\n   "UID": "SomeUUID000000000000000000000002", \n   "allow_discussion": false, \n   "contributors": [], \n-  "created": "2016-01-21T05:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -42,7 +42,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "file_view", \n-  "modified": "2016-01-21T05:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 93656a16..6552c62c 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -24,7 +24,7 @@ Content-Type: application/json\n   "UID": "SomeUUID000000000000000000000002", \n   "allow_discussion": false, \n   "contributors": [], \n-  "created": "2016-01-21T07:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -53,7 +53,7 @@ Content-Type: application/json\n   "items_total": 2, \n   "language": "", \n   "layout": "listing_view", \n-  "modified": "2016-01-21T07:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "nextPreviousEnabled": false, \n   "parent": {\n     "@id": "http://localhost:55001/plone", \ndiff --git a/src/plone/restapi/tests/http-examples/history_get.resp b/src/plone/restapi/tests/http-examples/history_get.resp\nindex 8c3b0812..2fc40e7a 100644\n--- a/src/plone/restapi/tests/http-examples/history_get.resp\n+++ b/src/plone/restapi/tests/http-examples/history_get.resp\n@@ -2,21 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n [\n-  {\n-    "action": "Create", \n-    "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n-      "fullname": "", \n-      "id": "test_user_1_", \n-      "username": "test-user"\n-    }, \n-    "comments": "", \n-    "review_state": "private", \n-    "state_title": "Private", \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Create", \n-    "type": "workflow"\n-  }, \n   {\n     "@id": "http://localhost:55001/plone/front-page/@history/0", \n     "action": "Edited", \n@@ -28,9 +13,24 @@ Content-Type: application/json\n     }, \n     "comments": "Initial version", \n     "may_revert": true, \n-    "time": "2016-10-21T19:00:00", \n+    "time": "1995-07-31T17:30:00", \n     "transition_title": "Edited", \n     "type": "versioning", \n     "version": 0\n+  }, \n+  {\n+    "action": "Create", \n+    "actor": {\n+      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+      "fullname": "", \n+      "id": "test_user_1_", \n+      "username": "test-user"\n+    }, \n+    "comments": "", \n+    "review_state": "private", \n+    "state_title": "Private", \n+    "time": "1995-07-31T18:30:00", \n+    "transition_title": "Create", \n+    "type": "workflow"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex 5039415c..709cc737 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -24,7 +24,7 @@ Content-Type: application/json\n   "UID": "SomeUUID000000000000000000000002", \n   "allow_discussion": false, \n   "contributors": [], \n-  "created": "2016-01-21T06:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -81,7 +81,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "image_view", \n-  "modified": "2016-01-21T06:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex c20050e3..c2aa29fa 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T04:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -37,7 +37,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "link_redirect_view", \n-  "modified": "2016-01-21T04:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/lock.resp b/src/plone/restapi/tests/http-examples/lock.resp\nindex 06da01d4..adca88ae 100644\n--- a/src/plone/restapi/tests/http-examples/lock.resp\n+++ b/src/plone/restapi/tests/http-examples/lock.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "locked": true, \n   "name": "plone.locking.stealable", \n   "stealable": true, \n-  "time": 1477076400.0, \n+  "time": 807211800.0, \n   "timeout": 600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\nindex e3927240..120219af 100644\n--- a/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n+++ b/src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "locked": true, \n   "name": "plone.locking.stealable", \n   "stealable": true, \n-  "time": 1477076400.0, \n+  "time": 807211800.0, \n   "timeout": 3600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex f9a0d0af..d70b314a 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -25,7 +25,7 @@ Content-Type: application/json\n   "allow_discussion": false, \n   "changeNote": "", \n   "contributors": [], \n-  "created": "2016-01-21T02:14:48+00:00", \n+  "created": "1995-07-31T13:45:00", \n   "creators": [\n     "test_user_1_"\n   ], \n@@ -83,7 +83,7 @@ Content-Type: application/json\n   "is_folderish": false, \n   "language": "", \n   "layout": "newsitem_view", \n-  "modified": "2016-01-21T02:24:11+00:00", \n+  "modified": "1995-07-31T17:30:00", \n   "parent": {\n     "@id": "http://localhost:55001/plone", \n     "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/refresh_lock.resp b/src/plone/restapi/tests/http-examples/refresh_lock.resp\nindex 06da01d4..adca88ae 100644\n--- a/src/plone/restapi/tests/http-examples/refresh_lock.resp\n+++ b/src/plone/restapi/tests/http-examples/refresh_lock.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "locked": true, \n   "name": "plone.locking.stealable", \n   "stealable": true, \n-  "time": 1477076400.0, \n+  "time": 807211800.0, \n   "timeout": 600, \n   "token": "0.684672730996-0.25195226375-00105A989226:1477076400.000"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nindex 05887970..34670ad7 100644\n--- a/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -28,7 +28,7 @@ Content-Type: application/json\n       "allow_discussion": false, \n       "changeNote": "", \n       "contributors": [], \n-      "created": "2016-10-21T19:00:00+00:00", \n+      "created": "1995-07-31T13:45:00", \n       "creators": [\n         "test_user_1_"\n       ], \n@@ -40,7 +40,7 @@ Content-Type: application/json\n       "is_folderish": false, \n       "language": "", \n       "layout": "document_view", \n-      "modified": "2016-10-21T19:00:00+00:00", \n+      "modified": "1995-07-31T17:30:00", \n       "parent": {\n         "@id": "http://localhost:55001/plone", \n         "@type": "Plone Site", \ndiff --git a/src/plone/restapi/tests/http-examples/search_metadata_fields.resp b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\nindex 9f560a9b..dad22a79 100644\n--- a/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n+++ b/src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n@@ -7,9 +7,9 @@ Content-Type: application/json\n     {\n       "@id": "http://localhost:55001/plone/doc1", \n       "@type": "Document", \n-      "created": "2016-10-21T19:00:00+00:00", \n+      "created": "1995-07-31T13:45:00", \n       "description": "", \n-      "modified": "2016-10-21T19:00:00+00:00", \n+      "modified": "1995-07-31T17:30:00", \n       "review_state": "private", \n       "title": "Lorem Ipsum"\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\nindex 03dc25b8..01a9f0c5 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n@@ -2,21 +2,6 @@ HTTP/1.1 200 OK\n Content-Type: application/json\n \n [\n-  {\n-    "action": "Crear", \n-    "actor": {\n-      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n-      "fullname": "", \n-      "id": "test_user_1_", \n-      "username": "test-user"\n-    }, \n-    "comments": "", \n-    "review_state": "private", \n-    "state_title": "Privado", \n-    "time": "2016-10-21T19:00:00", \n-    "transition_title": "Crear", \n-    "type": "workflow"\n-  }, \n   {\n     "@id": "http://localhost:55001/plone/front-page/@history/0", \n     "action": "Editado", \n@@ -28,9 +13,24 @@ Content-Type: application/json\n     }, \n     "comments": "Versi\\u00f3n inicial", \n     "may_revert": true, \n-    "time": "2016-10-21T19:00:00", \n+    "time": "1995-07-31T17:30:00", \n     "transition_title": "Editado", \n     "type": "versioning", \n     "version": 0\n+  }, \n+  {\n+    "action": "Crear", \n+    "actor": {\n+      "@id": "http://localhost:55001/plone/@users/test_user_1_", \n+      "fullname": "", \n+      "id": "test_user_1_", \n+      "username": "test-user"\n+    }, \n+    "comments": "", \n+    "review_state": "private", \n+    "state_title": "Privado", \n+    "time": "1995-07-31T18:30:00", \n+    "transition_title": "Crear", \n+    "type": "workflow"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\nindex abc02d33..b43e107c 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n@@ -9,7 +9,7 @@ Content-Type: application/json\n       "actor": "test_user_1_", \n       "comments": "", \n       "review_state": "private", \n-      "time": "2016-10-21T19:00:00+00:00", \n+      "time": "1995-07-31T17:30:00", \n       "title": "Privado"\n     }\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/workflow_get.resp b/src/plone/restapi/tests/http-examples/workflow_get.resp\nindex 6c365e9e..08d04316 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_get.resp\n@@ -9,7 +9,7 @@ Content-Type: application/json\n       "actor": "test_user_1_", \n       "comments": "", \n       "review_state": "private", \n-      "time": "2016-10-21T19:00:00+00:00", \n+      "time": "1995-07-31T17:30:00", \n       "title": "Private"\n     }\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post.resp b/src/plone/restapi/tests/http-examples/workflow_post.resp\nindex 01375c56..8d123d2a 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post.resp\n@@ -6,6 +6,6 @@ Content-Type: application/json\n   "actor": "admin", \n   "comments": "", \n   "review_state": "published", \n-  "time": "2016-10-21T19:05:00+00:00", \n+  "time": "1995-07-31T18:30:00", \n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\nindex 1f3582d7..cfc56945 100644\n--- a/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n+++ b/src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n@@ -6,6 +6,6 @@ Content-Type: application/json\n   "actor": "admin", \n   "comments": "Publishing my folder...", \n   "review_state": "published", \n-  "time": "2016-10-21T19:05:00+00:00", \n+  "time": "1995-07-31T18:30:00", \n   "title": "Published with accent \\u00e9"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nnew file mode 100644\nindex 00000000..a3a2b2dc\n--- /dev/null\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -0,0 +1,295 @@\n+# -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from datetime import datetime\n+from plone.app.discussion.comment import Comment\n+from plone.app.layout.viewlets.content import ContentHistoryViewlet\n+from plone.dexterity.content import DexterityContent\n+from plone.locking.lockable import TTWLockable\n+from Products.CMFCore.WorkflowTool import _marker\n+from Products.CMFCore.WorkflowTool import WorkflowTool\n+\n+\n+_originals = {\n+    \'WorkflowTool.getInfoFor\': WorkflowTool.getInfoFor,\n+    \'ContentHistoryViewlet.fullHistory\': ContentHistoryViewlet.fullHistory,\n+    \'TTWLockable.lock_info\': TTWLockable.lock_info,\n+}\n+\n+\n+class StaticTime(object):\n+    """ContextManager to patch accessor methods that return dynamic timestamps,\n+    like creation and modification dates, with ones that return static\n+    timestamps.\n+\n+    This is needed during testing to get stable serialization output,\n+    especially during the tests that dump HTTP response examples to the\n+    filesystem, because the content of those responses would otherwise\n+    change all the time.\n+\n+    Specifically monkey-patching a few accessors (getter methods) in a\n+    targeted way like this was chosen as an alternative to freezing time\n+    entirely using libraries like `freezegun`, because that approach has\n+    caused issues in the past with code that assumes a monotonic clock, like\n+    the generation of ZODB transaction IDs.\n+\n+    Instead, this helper aims to selectively patch only what we currently\n+    need to get stable test runs and HTTP response examples.\n+\n+    The bulk of cases is addressed by patching `creation_date` and\n+    `modification_date` for Dexterity objects to return static times. In\n+    addition, a couple other places need some attention.\n+\n+    These places will be patched on start() (and unpatched on stop()):\n+\n+    - DexterityContent\n+        - creation_date\n+        - modification_date\n+\n+    - p.a.discussion Comment\n+        - creation_date\n+        - modification_date\n+\n+    - WorkflowTool.getInfoFor\n+        - (if asked for \'review_history\')\n+\n+    - ContentHistoryViewlet\n+        - fullHistory\n+\n+    - TTWLockable\n+        - lock_info\n+\n+    """\n+\n+    def __enter__(self):\n+        self.start()\n+        return self\n+\n+    def __exit__(self, _type, exc, _traceback):\n+        self.stop()\n+\n+    def __init__(self,\n+                 created=datetime(1995, 7, 31, 13, 45),\n+                 modified=datetime(1995, 7, 31, 17, 30)):\n+        self.static_created = created\n+        self.static_modified = modified\n+        """Set up a static time helper.\n+\n+        If given, the Python datetimes for `created` and `modified` will be\n+        used to determine the timestamps that should be returned by the\n+        static getters.\n+\n+        Ensuring the appropriate type (Python datetime vs. Zope DateTime\n+        vs. float) is the responsiblity of the patched getter method. The user\n+        of the StaticTime class shouldn\'t need to care about it, and be able\n+        to pass Python datetimes that then will be casted appropriately if\n+        necessary.\n+\n+        The `modified` timestamp will also be used as a basis when producing\n+        a sequence of fake times, for example when patching times for\n+        successive events in the review history.\n+        """\n+\n+    def start(self):\n+        """Patch the respective getters so that they return static times.\n+        """\n+        # Patch created and modified times for DexterityContent.\n+        # creation_date and modification_date are instance-level attributes\n+        # on DX object that get initialized with datetime.now() during\n+        # __init__. In order to fake the returned times we patch a property\n+        # onto the class which will shadow these instance attributes.\n+        DexterityContent.creation_date = property(\n+            static_creation_date_getter_factory(self.static_created),\n+            nop_setter)\n+        DexterityContent.modification_date = property(\n+            static_modification_date_getter_factory(self.static_modified),\n+            nop_setter)\n+\n+        # Patch the lightweight p.a.discussion \'Comment\' type. Its dates are\n+        # Python datetimes, unlike DX Content types which use zope DateTimes.\n+        Comment.creation_date = property(\n+            static_creation_date_getter_factory(\n+                self.static_created, type_=datetime),\n+            nop_setter)\n+        Comment.modification_date = property(\n+            static_modification_date_getter_factory(\n+                self.static_modified, type_=datetime),\n+            nop_setter)\n+\n+        WorkflowTool.getInfoFor = static_get_info_for_factory(\n+            self.static_modified)\n+\n+        ContentHistoryViewlet.fullHistory = static_full_history_factory(\n+            self.static_modified)\n+\n+        TTWLockable.lock_info = static_lock_info_factory(\n+            self.static_modified)\n+\n+    def stop(self):\n+        """Undo all the patches.\n+        """\n+        TTWLockable.lock_info = _originals[\'TTWLockable.lock_info\']\n+        ContentHistoryViewlet.fullHistory = _originals[\'ContentHistoryViewlet.fullHistory\']\n+        WorkflowTool.getInfoFor = _originals[\'WorkflowTool.getInfoFor\']\n+\n+        Comment.modification_date = None\n+        Comment.creation_date = None\n+\n+        del DexterityContent.modification_date\n+        del DexterityContent.creation_date\n+\n+\n+def static_get_info_for_factory(dt_value):\n+    """Returns a static time replacement for WorkflowTool.getInfoFor\n+    configured with the given datetime value as a base.\n+    """\n+    if isinstance(dt_value, datetime):\n+        dt_value = DateTime(dt_value)\n+\n+    def static_get_info_for(self, ob, name, default=_marker, wf_id=None, *args, **kw):\n+        """This replacement function will, if \'review_history\' is requested,\n+        replace timestamps in the returned list of dicts with static times.\n+\n+        The timestamps for the successive events in this list will use the\n+        dt_value (which defaults to modification date) as a base, and then\n+        move forward in hourly steps to retain the chronological sequence of\n+        events.\n+\n+        In other words, they will be stable (static), but different for each\n+        event, and should still reflect proper order of events.\n+        """\n+        res = _originals[\'WorkflowTool.getInfoFor\'](\n+            self, ob, name, default=default, wf_id=wf_id, *args, **kw)\n+        if name == \'review_history\':\n+            base_date = dt_value\n+\n+            # The ContentHistoryViewlet.fullHistory method assembles results\n+            # from both the review_history (i.e., this method\'s result) and\n+            # the revision history, and intertwines their elements in\n+            # chronological order. That doesn\'t work if we already return\n+            # faked timestamps here in that case.\n+            #\n+            # We therefore need to recognize this case by inspecting the call\n+            # stack to check whether we got called by the fullHistory method,\n+            # and in that case return the original results. (Since fullHistory\n+            # will also be patched, timestamps in the combined results will be\n+            # replaced there.)\n+            import traceback\n+            stack = traceback.format_stack()\n+            if \'static_full_history\' in str(stack):\n+                return res\n+\n+            for idx, item in enumerate(res):\n+                fake_date = base_date + (idx / 24.0)  # plus one hour\n+                if \'time\' in item:\n+                    item[\'time\'] = fake_date\n+\n+        return res\n+\n+    return static_get_info_for\n+\n+\n+def static_full_history_factory(dt_value):\n+    """Returns a static time replacement for ContentHistoryViewlet.fullHistory\n+    configured with the given datetime value as a base.\n+    """\n+    if isinstance(dt_value, datetime):\n+        dt_value = DateTime(dt_value)\n+\n+    def static_full_history(self):\n+        """This replacement function will replace timestamps in the returned\n+        list of dicts with static times.\n+\n+        The timestamps for the successive events in this list will use the\n+        dt_value (which defaults to modification date) as a base, and then\n+        move forward in hourly steps to retain the chronological sequence of\n+        events.\n+\n+        In other words, they will be stable (static), but different for each\n+        event, and should still reflect proper order of events.\n+        """\n+        actions = _originals[\'ContentHistoryViewlet.fullHistory\'](self)\n+\n+        base_date = dt_value\n+        for idx, action in enumerate(actions):\n+            if \'time\' in action:\n+                fake_date = base_date + (idx / 24.0)  # plus one hour\n+\n+                # Depending on the kind of action, timestamps may either\n+                # be zope DateTimes or floats. Let\'s reserve the same type.\n+                if isinstance(action[\'time\'], float):\n+                    action[\'time\'] = float(fake_date)\n+                elif isinstance(action[\'time\'], DateTime):\n+                    action[\'time\'] = fake_date\n+                else:\n+                    raise Exception("Don\'t know how to patch %r" % action[\'time\'])\n+\n+        return actions\n+\n+    return static_full_history\n+\n+\n+def static_creation_date_getter_factory(dt_value, type_=DateTime):\n+    """Returns a static time replacement for creation date accessors,\n+    configured with the given datetime value and the indicated type_.\n+    """\n+    if isinstance(dt_value, datetime) and type_ is DateTime:\n+        dt_value = DateTime(dt_value)\n+\n+    elif isinstance(dt_value, DateTime) and type_ is datetime:\n+        dt_value = dt_value.asdatetime()\n+\n+    def static_creation_date_getter(self):\n+        return dt_value\n+\n+    return static_creation_date_getter\n+\n+\n+def static_modification_date_getter_factory(dt_value, type_=DateTime):\n+    """Returns a static time replacement for modification date accessors,\n+    configured with the given datetime value and the indicated type_.\n+    """\n+    if isinstance(dt_value, datetime) and type_ is DateTime:\n+        dt_value = DateTime(dt_value)\n+\n+    elif isinstance(dt_value, DateTime) and type_ is datetime:\n+        dt_value = dt_value.asdatetime()\n+\n+    def static_modification_date_getter(self, value=None):\n+        return dt_value\n+\n+    return static_modification_date_getter\n+\n+\n+def static_lock_info_factory(dt_value):\n+    """Returns a static time replacement for TTWLockable.lock_info\n+    configured with the given datetime value as a base.\n+    """\n+    if isinstance(dt_value, datetime):\n+        dt_value = DateTime(dt_value)\n+\n+    def static_lock_info(self):\n+        """This replacement function will replace timestamps in the returned\n+        list of lock_info dicts with static times.\n+\n+        The timestamps for the successive lock_infos in this list will use the\n+        dt_value (which defaults to modification date) as a base, and then\n+        move forward in hourly steps to retain the chronological sequence of\n+        events.\n+\n+        In other words, they will be stable (static), but different for each\n+        lock_info, and should still reflect proper order of events.\n+        """\n+        infos = _originals[\'TTWLockable.lock_info\'](self)\n+        base_date = dt_value\n+        for idx, info in enumerate(infos):\n+            fake_date = base_date + (idx / 24.0)  # plus one hour\n+            if \'time\' in info:\n+                info[\'time\'] = float(fake_date)\n+\n+        return infos\n+\n+    return static_lock_info\n+\n+\n+def nop_setter(self, value):\n+    pass\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 1ff89a0a..586c2ff5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,9 +1,6 @@\n # -*- coding: utf-8 -*-\n from base64 import b64encode\n from datetime import datetime\n-from datetime import timedelta\n-from DateTime import DateTime\n-from freezegun import freeze_time\n from mock import patch\n from pkg_resources import parse_version\n from pkg_resources import resource_filename\n@@ -25,10 +22,11 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.registry.interfaces import IRegistry\n from plone.restapi.testing import PAM_INSTALLED  # noqa\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME  # noqa\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n+from plone.restapi.tests.statictime import StaticTime\n from plone.scale import storage\n from plone.testing.z2 import Browser\n from six.moves import range\n@@ -150,11 +148,11 @@ def save_request_and_response_for_docs(name, response):\n         resp.write(response.text)\n \n \n-class TestDocumentation(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n+class TestDocumentationBase(unittest.TestCase):\n \n     def setUp(self):\n+        self.statictime = self.setup_with_context_manager(StaticTime())\n+\n         self.app = self.layer["app"]\n         self.request = self.layer["request"]\n         self.portal = self.layer["portal"]\n@@ -164,24 +162,50 @@ def setUp(self):\n         pushGlobalRegistry(getSite())\n         register_static_uuid_utility(prefix="SomeUUID")\n \n-        self.time_freezer = freeze_time("2016-10-21 19:00:00")\n-        self.frozen_time = self.time_freezer.start()\n-\n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.document = self.create_document()\n-        alsoProvides(self.document, ITTWLockable)\n-\n-        transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n             "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n \n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+    def setup_with_context_manager(self, cm):\n+        """Use a contextmanager to setUp a test case.\n+\n+        Registering the cm\'s __exit__ as a cleanup hook *guarantees* that it\n+        will be called after a test run, unlike tearDown().\n+\n+        This is used to make sure plone.restapi never leaves behind any time\n+        freezing monkey patches that haven\'t gotten reverted.\n+        """\n+        val = cm.__enter__()\n+        self.addCleanup(cm.__exit__, None, None, None)\n+        return val\n+\n+    def tearDown(self):\n+        popGlobalRegistry(getSite())\n+        self.api_session.close()\n+\n+\n+class TestDocumentation(TestDocumentationBase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        super(TestDocumentation, self).setUp()\n+        self.document = self.create_document()\n+        alsoProvides(self.document, ITTWLockable)\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        super(TestDocumentation, self).tearDown()\n+\n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n@@ -197,9 +221,6 @@ def create_document(self):\n             "text/plain",\n             "text/html",\n         )\n-        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n-        document.reindexObject()\n-        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n     def create_folder(self):\n@@ -209,16 +230,8 @@ def create_folder(self):\n         folder.description = u"This is a folder with two documents"\n         folder.invokeFactory("Document", id="doc1", title="A document within a folder")\n         folder.invokeFactory("Document", id="doc2", title="A document within a folder")\n-        folder.creation_date = DateTime("2016-01-21T07:14:48+00:00")\n-        folder.modification_date = DateTime("2016-01-21T07:24:11+00:00")\n         return folder\n \n-    def tearDown(self):\n-        self.api_session.close()\n-        self.time_freezer.stop()\n-        popGlobalRegistry(getSite())\n-        self.api_session.close()\n-\n     def test_documentation_content_crud(self):\n         folder = self.create_folder()\n         transaction.commit()\n@@ -272,8 +285,6 @@ def test_documentation_news_item(self):\n             data=image_data, contentType="image/png", filename=u"image.png"\n         )\n         self.portal.newsitem.image_caption = u"This is an image caption."\n-        self.portal.newsitem.creation_date = DateTime("2016-01-21T02:14:48+00:00")\n-        self.portal.newsitem.modification_date = DateTime("2016-01-21T02:24:11+00:00")\n         transaction.commit()\n \n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -286,8 +297,6 @@ def test_documentation_event(self):\n         self.portal.event.description = u"This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n-        self.portal.event.creation_date = DateTime("2016-01-21T03:14:48+00:00")\n-        self.portal.event.modification_date = DateTime("2016-01-21T03:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n         save_request_and_response_for_docs("event", response)\n@@ -297,8 +306,6 @@ def test_documentation_link(self):\n         self.portal.link.title = "My Link"\n         self.portal.link.description = u"This is a link"\n         self.portal.remoteUrl = "http://plone.org"\n-        self.portal.link.creation_date = DateTime("2016-01-21T04:14:48+00:00")\n-        self.portal.link.modification_date = DateTime("2016-01-21T04:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n         save_request_and_response_for_docs("link", response)\n@@ -313,8 +320,6 @@ def test_documentation_file(self):\n         self.portal.file.file = NamedBlobFile(\n             data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n         )\n-        self.portal.file.creation_date = DateTime("2016-01-21T05:14:48+00:00")\n-        self.portal.file.modification_date = DateTime("2016-01-21T05:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n         save_request_and_response_for_docs("file", response)\n@@ -329,8 +334,6 @@ def test_documentation_image(self):\n         self.portal.image.image = NamedBlobImage(\n             data=image_data, contentType="image/png", filename=u"image.png"\n         )\n-        self.portal.image.creation_date = DateTime("2016-01-21T06:14:48+00:00")\n-        self.portal.image.modification_date = DateTime("2016-01-21T06:24:11+00:00")\n         transaction.commit()\n         with patch.object(storage, "uuid4", return_value="uuid1"):\n             response = self.api_session.get(self.portal.image.absolute_url())\n@@ -355,8 +358,6 @@ def test_documentation_collection(self):\n         ]\n         self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n         self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n-        self.portal.collection.creation_date = DateTime("2016-01-21T08:14:48+00:00")\n-        self.portal.collection.modification_date = DateTime("2016-01-21T08:24:11+00:00")\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n         save_request_and_response_for_docs("collection", response)\n@@ -417,14 +418,12 @@ def test_documentation_workflow(self):\n         save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n-        self.frozen_time.tick(timedelta(minutes=5))\n         response = self.api_session.post(\n             "{}/@workflow/publish".format(self.document.absolute_url())\n         )\n         save_request_and_response_for_docs("workflow_post", response)\n \n     def test_documentation_workflow_transition_with_body(self):\n-        self.frozen_time.tick(timedelta(minutes=5))\n         folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n         transaction.commit()\n         response = self.api_session.post(\n@@ -1319,38 +1318,21 @@ def test_querystringsearch_post(self):\n         save_request_and_response_for_docs("querystringsearch_post", response)\n \n \n-class TestDocumentationMessageTranslations(unittest.TestCase):\n+class TestDocumentationMessageTranslations(TestDocumentationBase):\n \n-    layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n+    layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer["app"]\n-        self.request = self.layer["request"]\n-        self.portal = self.layer["portal"]\n-        self.portal_url = self.portal.absolute_url()\n+        super(TestDocumentationMessageTranslations, self).setUp()\n \n-        # Register custom UUID generator to produce stable UUIDs during tests\n-        pushGlobalRegistry(getSite())\n-        register_static_uuid_utility(prefix="SomeUUID")\n-\n-        self.time_freezer = freeze_time("2016-10-21 19:00:00")\n-        self.frozen_time = self.time_freezer.start()\n-\n-        self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.headers.update({"Accept-Language": "es"})\n-        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n-\n         transaction.commit()\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = False\n-        self.browser.addHeader(\n-            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        )\n+\n+    def tearDown(self):\n+        super(TestDocumentationMessageTranslations, self).tearDown()\n \n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n@@ -1367,16 +1349,8 @@ def create_document(self):\n             "text/plain",\n             "text/html",\n         )\n-        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n-        document.reindexObject()\n-        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n         return document\n \n-    def tearDown(self):\n-        self.time_freezer.stop()\n-        popGlobalRegistry(getSite())\n-        self.api_session.close()\n-\n     def test_translate_messages_types(self):\n         response = self.api_session.get("/@types")\n         save_request_and_response_for_docs("translated_messages_types", response)\n@@ -1398,18 +1372,12 @@ def test_translate_messages_object_history(self):\n         )\n \n \n-class TestCommenting(unittest.TestCase):\n+class TestCommenting(TestDocumentationBase):\n \n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING_FREEZETIME\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer["app"]\n-        self.request = self.layer["request"]\n-        self.portal = self.layer["portal"]\n-        self.portal_url = self.portal.absolute_url()\n-\n-        self.time_freezer = freeze_time("2016-10-21 19:00:00")\n-        self.frozen_time = self.time_freezer.start()\n+        super(TestCommenting, self).setUp()\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -1417,23 +1385,11 @@ def setUp(self):\n         settings.edit_comment_enabled = True\n         settings.delete_own_comment_enabled = True\n \n-        self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({"Accept": "application/json"})\n-        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.document = self.create_document_with_comments()\n-\n         transaction.commit()\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = False\n-        self.browser.addHeader(\n-            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        )\n \n     def tearDown(self):\n-        self.time_freezer.stop()\n-        self.api_session.close()\n+        super(TestCommenting, self).tearDown()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory("Document", id="front-page")\n@@ -1451,9 +1407,6 @@ def create_document_with_comments(self):\n             "text/plain",\n             "text/html",\n         )\n-        document.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n-        document.reindexObject()\n-        document.modification_date = DateTime("2016-01-21T01:24:11+00:00")\n \n         # Add a bunch of comments to the default conversation so we can do\n         # batching\n@@ -1474,7 +1427,7 @@ def create_document_with_comments(self):\n         return document\n \n     @staticmethod\n-    def clean_comment_id(response, _id="123456"):\n+    def clean_comment_id_from_urls(response, _id="123456"):\n         pattern = r"@comments/(\\w+)"\n         pattern_bytes = b"@comments/(\\\\w+)"\n         repl = "@comments/" + _id\n@@ -1492,18 +1445,36 @@ def clean_comment_id(response, _id="123456"):\n \n         # and the response\n         if response.content:\n-            response._content = re.sub(pattern_bytes, repl, response._content)\n+            response._content = re.sub(pattern_bytes, repl.encode(\'utf-8\'), response._content)\n+\n+    @staticmethod\n+    def clean_comment_id_from_body(response):\n+        # Build a mapping of all comment IDs found in the response, and\n+        # replace them with static ones.\n+        # Assumption: comment IDs are long enough to be unique.\n+        pattern_bytes = re.compile(b\'"comment_id": "(\\\\w+)"\')\n+        comment_ids = re.findall(pattern_bytes, response._content)\n+\n+        def new_cid(idx):\n+            return str(idx + 1400000000000000).encode(\'ascii\')\n+\n+        static_comment_ids = {old_cid: new_cid(idx)\n+                              for idx, old_cid in enumerate(comment_ids)}\n+\n+        for cid, idx in static_comment_ids.items():\n+            response._content = re.sub(cid, idx, response._content)\n \n     def test_comments_get(self):\n         url = "{}/@comments".format(self.document.absolute_url())\n         response = self.api_session.get(url)\n+        self.clean_comment_id_from_body(response)\n         save_request_and_response_for_docs("comments_get", response)\n \n     def test_comments_add_root(self):\n         url = "{}/@comments/".format(self.document.absolute_url())\n         payload = {"text": "My comment"}\n         response = self.api_session.post(url, json=payload)\n-        self.clean_comment_id(response)\n+        self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_add_root", response)\n \n     def test_comments_add_sub(self):\n@@ -1512,20 +1483,20 @@ def test_comments_add_sub(self):\n         payload = {"text": "My reply"}\n         response = self.api_session.post(url, json=payload)\n \n-        self.clean_comment_id(response)\n+        self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_add_sub", response)\n \n     def test_comments_update(self):\n         url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n         payload = {"text": "My NEW comment"}\n         response = self.api_session.patch(url, json=payload)\n-        self.clean_comment_id(response)\n+        self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_update", response)\n \n     def test_comments_delete(self):\n         url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n         response = self.api_session.delete(url)\n-        self.clean_comment_id(response)\n+        self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_delete", response)\n \n     def test_roles_get(self):\n@@ -1551,29 +1522,18 @@ def test_controlpanels_get_item(self):\n @unittest.skipUnless(\n     PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n )  # NOQA\n-class TestPAMDocumentation(unittest.TestCase):\n+class TestPAMDocumentation(TestDocumentationBase):\n \n-    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING_FREEZETIME\n+    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer["app"]\n-        self.request = self.layer["request"]\n-        self.portal = self.layer["portal"]\n-        self.portal_url = self.portal.absolute_url()\n-\n-        self.time_freezer = freeze_time("2016-10-21 19:00:00")\n-        self.frozen_time = self.time_freezer.start()\n-\n-        self.api_session = RelativeSession(self.portal_url)\n-        self.api_session.headers.update({"Accept": "application/json"})\n-        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        super(TestPAMDocumentation, self).setUp()\n \n         language_tool = api.portal.get_tool("portal_languages")\n         language_tool.addSupportedLanguage("en")\n         language_tool.addSupportedLanguage("es")\n         applyProfile(self.portal, "plone.app.multilingual:default")\n+\n         en_id = self.portal["en"].invokeFactory(\n             "Document", id="test-document", title="Test document"\n         )\n@@ -1582,17 +1542,10 @@ def setUp(self):\n             "Document", id="test-document", title="Test document"\n         )\n         self.es_content = self.portal["es"].get(es_id)\n-\n         transaction.commit()\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = False\n-        self.browser.addHeader(\n-            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        )\n \n     def tearDown(self):\n-        self.time_freezer.stop()\n-        self.api_session.close()\n+        super(TestPAMDocumentation, self).tearDown()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex c60ecf57..4df69407 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from freezegun import freeze_time\n+from DateTime import DateTime\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.testing import popGlobalRegistry\n from plone.app.testing import pushGlobalRegistry\n@@ -15,7 +15,6 @@\n from zope.component import getMultiAdapter\n from zope.site.hooks import getSite\n \n-\n import Missing\n import unittest\n \n@@ -30,8 +29,6 @@ def setUp(self):\n \n         pushGlobalRegistry(getSite())\n         register_static_uuid_utility(prefix="c6dcbd55ab2746e199cd4ed458")\n-        self.time_freezer = freeze_time("2019-06-22 12:47:03")\n-        self.time_freezer.start()\n \n         self.catalog = getToolByName(self.portal, "portal_catalog")\n \n@@ -43,8 +40,11 @@ def setUp(self):\n             description=u"Description",\n         )\n \n+        self.doc1.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n+        self.doc1.modification_date = DateTime("2017-01-21T01:14:48+00:00")\n+        self.doc1.reindexObject([\'modified\'])\n+\n     def tearDown(self):\n-        self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n \n     def test_site_root_summary(self):\n@@ -141,17 +141,18 @@ def test_brain_summary_includes_all_metadata_fields(self):\n         if \'mime_type\' not in summary:\n             summary[\'mime_type\'] = u\'text/plain\'\n \n+        self.maxDiff = None\n         self.assertDictEqual(\n             {\n                 \'@id\': u\'http://nohost/plone/doc1\',\n                 \'@type\': u\'DXTestDocument\',\n-                \'CreationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'CreationDate\': u\'2016-01-21T01:14:48+00:00\',\n                 \'Creator\': u\'test_user_1_\',\n-                \'Date\': u\'2019-06-22T12:47:03+00:00\',\n+                \'Date\': u\'2017-01-21T01:14:48+00:00\',\n                 \'Description\': u\'Description\',\n                 \'EffectiveDate\': u\'None\',\n                 \'ExpirationDate\': u\'None\',\n-                \'ModificationDate\': u\'2019-06-22T12:47:03+00:00\',\n+                \'ModificationDate\': u\'2017-01-21T01:14:48+00:00\',\n                 \'Subject\': [],\n                 \'Title\': u\'Lorem Ipsum\',\n                 \'Type\': u\'DX Test Document\',\n@@ -159,7 +160,7 @@ def test_brain_summary_includes_all_metadata_fields(self):\n                 \'author_name\': None,\n                 \'cmf_uid\': None,\n                 \'commentators\': [],\n-                \'created\': u\'2019-06-22T12:47:03+00:00\',\n+                \'created\': u\'2016-01-21T01:14:48+00:00\',\n                 \'description\': u\'Description\',\n                 \'effective\': u\'1969-12-31T00:00:00+00:00\',\n                 \'end\': None,\n@@ -179,7 +180,7 @@ def test_brain_summary_includes_all_metadata_fields(self):\n                 \'location\': None,\n                 \'meta_type\': u\'Dexterity Item\',\n                 \'mime_type\': u\'text/plain\',\n-                \'modified\': u\'2019-06-22T12:47:03+00:00\',\n+                \'modified\': u\'2017-01-21T01:14:48+00:00\',\n                 \'portal_type\': u\'DXTestDocument\',\n                 \'review_state\': u\'private\',\n                 \'start\': None,\ndiff --git a/src/plone/restapi/tests/test_statictime.py b/src/plone/restapi/tests/test_statictime.py\nnew file mode 100644\nindex 00000000..ff8cd7b7\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_statictime.py\n@@ -0,0 +1,253 @@\n+# -*- coding: utf-8 -*-\n+from datetime import datetime\n+from DateTime import DateTime\n+from datetime import timedelta\n+from operator import itemgetter\n+from plone import api\n+from plone.app.discussion.interfaces import IConversation\n+from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.discussion.interfaces import IReplies\n+from plone.app.layout.viewlets.content import ContentHistoryViewlet\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.locking.interfaces import ILockable\n+from plone.locking.interfaces import ITTWLockable\n+from plone.registry.interfaces import IRegistry\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.tests.statictime import StaticTime\n+from zope.component import createObject\n+from zope.component import getUtility\n+from zope.interface import alsoProvides\n+\n+import transaction\n+import unittest\n+\n+\n+class TestStaticTime(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.request = self.layer["request"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IDiscussionSettings, check=False)\n+        settings.globally_enabled = True\n+\n+        transaction.commit()\n+\n+    def create_document(self, id_):\n+        self.portal.invokeFactory("Document", id=id_)\n+        document = self.portal[id_]\n+        document.title = u"My title"\n+        return document\n+\n+    def create_comments(self, document):\n+        document.allow_discussion = True\n+\n+        conversation = IConversation(document)\n+        replies = IReplies(conversation)\n+        comments = []\n+        for x in range(1, 2):\n+            comment = createObject("plone.Comment")\n+            comment.text = "Comment %d" % x\n+            comment = replies[replies.addComment(comment)]\n+\n+            comment_replies = IReplies(comment)\n+            for y in range(1, 2):\n+                comment = createObject("plone.Comment")\n+                comment.text = "Comment %d.%d" % (x, y)\n+                comment_replies.addComment(comment)\n+                comments.append(comment)\n+\n+        return comments\n+\n+    def assert_roughly_now(self, dt):\n+        pydt = dt\n+        if isinstance(pydt, DateTime):\n+            pydt = pydt.asdatetime()\n+        elif isinstance(pydt, float):\n+            pydt = datetime.fromtimestamp(pydt)\n+\n+        epsilon = timedelta(minutes=5)\n+        now = datetime.now()\n+        if pydt.tzinfo is not None:\n+            now = pydt.tzinfo.localize(now)\n+\n+        upper = now + epsilon\n+        lower = now - epsilon\n+\n+        self.assertTrue(\n+            lower < pydt < upper,\n+            "Expected %r to be now (within +/- %r). "\n+            "It\'s currently %s though, and the date time is off by %r" % (\n+                pydt, epsilon, now, now - pydt))\n+\n+    def assert_of_same_type(self, fake_datetimes, real_datetimes):\n+        for fake, real in zip(fake_datetimes, real_datetimes):\n+            # Guard against accidentally comparing the same objects\n+            self.assertNotEqual(fake, real)\n+            self.assertIsInstance(fake, real.__class__,\n+                                  "Faked static time %r is of a different "\n+                                  "type than the real %r" % (fake, real))\n+\n+    def test_statictime_dxcontent_created(self):\n+        frozen_time = datetime(1950, 7, 31, 13, 45)\n+        statictime = StaticTime(created=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        self.assertEqual(DateTime(frozen_time), doc1.creation_date)\n+        fake_datetimes = [doc1.creation_date]\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        self.assert_roughly_now(doc2.creation_date)\n+        real_datetimes = [doc2.creation_date]\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_dxcontent_modified(self):\n+        frozen_time = datetime(1950, 7, 31, 17, 30)\n+        statictime = StaticTime(modified=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        self.assertEqual(DateTime(frozen_time), doc1.modification_date)\n+        fake_datetimes = [doc1.modification_date]\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        self.assert_roughly_now(doc2.modification_date)\n+        real_datetimes = [doc2.modification_date]\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_comment_created(self):\n+        frozen_time = datetime(1950, 7, 31, 13, 45)\n+        statictime = StaticTime(created=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        comments = self.create_comments(doc1)\n+        self.assertEqual(frozen_time, comments[0].creation_date)\n+        fake_datetimes = [comments[0].creation_date]\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        comments = self.create_comments(doc2)\n+        self.assert_roughly_now(comments[0].creation_date)\n+        real_datetimes = [comments[0].creation_date]\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_comment_modified(self):\n+        frozen_time = datetime(1950, 7, 31, 17, 30)\n+        statictime = StaticTime(modified=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        comments = self.create_comments(doc1)\n+        self.assertEqual(frozen_time, comments[0].modification_date)\n+        fake_datetimes = [comments[0].modification_date]\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        comments = self.create_comments(doc2)\n+        self.assert_roughly_now(comments[0].modification_date)\n+        real_datetimes = [comments[0].modification_date]\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_get_info_for(self):\n+        frozen_time = datetime(1950, 7, 31, 17, 30)\n+        wftool = api.portal.get_tool(\'portal_workflow\')\n+        statictime = StaticTime(modified=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        api.content.transition(doc1, \'publish\')\n+\n+        history = wftool.getInfoFor(doc1, \'review_history\')\n+\n+        fake_datetimes = list(map(itemgetter(\'time\'), history))\n+        self.assertEqual(\n+            fake_datetimes,\n+            [DateTime(\'1950/07/31 17:30:00 UTC\'),\n+             DateTime(\'1950/07/31 18:30:00 UTC\')]\n+        )\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        api.content.transition(doc2, \'publish\')\n+\n+        history = wftool.getInfoFor(doc2, \'review_history\')\n+        real_datetimes = list(map(itemgetter(\'time\'), history))\n+        for ts in real_datetimes:\n+            self.assert_roughly_now(ts)\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_full_history(self):\n+        frozen_time = datetime(1950, 7, 31, 17, 30)\n+        statictime = StaticTime(modified=frozen_time)\n+\n+        statictime.start()\n+        doc1 = self.create_document(\'doc1\')\n+        doc1.setTitle("Current version")\n+        api.content.transition(doc1, "publish")\n+        viewlet = ContentHistoryViewlet(doc1, doc1.REQUEST, None)\n+        viewlet.update()\n+\n+        history = viewlet.fullHistory()\n+\n+        real_datetimes = list(map(itemgetter(\'time\'), history))\n+        self.assertEqual(\n+            real_datetimes,\n+            [DateTime(\'1950/07/31 17:30:00 UTC\'),\n+             -612855000.0,\n+             DateTime(\'1950/07/31 19:30:00 UTC\')]\n+        )\n+\n+        statictime.stop()\n+        doc2 = self.create_document(\'doc2\')\n+        doc2.setTitle("Current version")\n+        api.content.transition(doc2, "publish")\n+        viewlet = ContentHistoryViewlet(doc2, doc2.REQUEST, None)\n+        viewlet.update()\n+\n+        history = viewlet.fullHistory()\n+\n+        fake_datetimes = list(map(itemgetter(\'time\'), history))\n+        for ts in fake_datetimes:\n+            self.assert_roughly_now(ts)\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\n+\n+    def test_statictime_lockinfo(self):\n+        frozen_time = datetime(1950, 7, 31, 17, 30)\n+        statictime = StaticTime(modified=frozen_time)\n+\n+        doc1 = self.create_document(\'doc1\')\n+        alsoProvides(doc1, ITTWLockable)\n+        lockable = ILockable(doc1)\n+        lockable.lock()\n+\n+        statictime.start()\n+        lock_infos = lockable.lock_info()\n+        self.assertEqual(1, len(lock_infos))\n+        self.assertEqual(-612858600.0, lock_infos[0][\'time\'])\n+        fake_datetimes = [lock_infos[0][\'time\']]\n+\n+        statictime.stop()\n+        lock_infos = lockable.lock_info()\n+        self.assertEqual(1, len(lock_infos))\n+        self.assert_roughly_now(lock_infos[0][\'time\'])\n+        real_datetimes = [lock_infos[0][\'time\']]\n+\n+        self.assert_of_same_type(fake_datetimes, real_datetimes)\ndiff --git a/src/plone/restapi/tests/test_time_freezing.py b/src/plone/restapi/tests/test_time_freezing.py\ndeleted file mode 100644\nindex 0e28dd33..00000000\n--- a/src/plone/restapi/tests/test_time_freezing.py\n+++ /dev/null\n@@ -1,26 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from freezegun import freeze_time\n-\n-import freezegun\n-import time\n-import unittest\n-\n-\n-class TestTimeFreezing(unittest.TestCase):\n-    def test_freezegun_provides_original_time_functions(self):\n-        """This test guards against future API changes in freezegun.\n-        """\n-        # These module globals in freezegun.api provide access to the\n-        # original time functions.\n-        self.assertTrue(hasattr(freezegun.api, "real_time"))\n-        self.assertTrue(hasattr(freezegun.api, "real_gmtime"))\n-\n-        # Before freezing time, they should be references to the\n-        # real time functions\n-        self.assertTrue(freezegun.api.real_time is time.time)\n-        self.assertTrue(freezegun.api.real_gmtime is time.gmtime)\n-\n-        # After freezing, we expect them to differ\n-        with freeze_time("2016-10-21 19:00:00"):\n-            self.assertFalse(freezegun.api.real_time is time.time)\n-            self.assertFalse(freezegun.api.real_gmtime is time.gmtime)\n'

