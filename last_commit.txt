Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-04T00:17:40+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/36b28edf9b8da13c45d49733cfdb1e600f8a62d4

fix problem on looking up a workflow state on related items

Files changed:
M plone/app/contentlisting/realobject.py

diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index c05a15d..14ab62a 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
+from plone import api
 from plone.app.contentlisting.contentlisting import BaseContentListingObject
 from plone.app.contentlisting.interfaces import IContentListingObject
 from plone.rfc822.interfaces import IPrimaryFieldInfo
@@ -83,8 +84,7 @@ def getSize(self):
 
     def review_state(self):
         obj = self.getObject()
-        wftool = getToolByName(obj, 'portal_workflow')
-        return wftool.getInfoFor(obj, 'review_state')
+        return api.content.get_state(obj=obj, default=None)
 
     def Type(self):
         # Dublin Core element - Object type.


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-04T00:28:25+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/0643ab23a8b92db933106aa0f8253c96b2b44b32

Changelog Entry

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 28a58d9..c5aa29d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix Lookup of review_state on objects that do not have an review_state, example related_items that are files could be such.
+  [loechel]
 
 
 1.3.0 (2017-07-03)


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-04T22:27:49+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/3dcb6741d1c54e83c7af02065d6fd73c254fe12e

fix problem on looking up a workflow state on related items

Files changed:
M plone/app/contentlisting/realobject.py

diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 8434f9d..8852bb5 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
+from plone import api
 from plone.app.contentlisting.contentlisting import BaseContentListingObject
 from plone.app.contentlisting.interfaces import IContentListingObject
 from plone.rfc822.interfaces import IPrimaryFieldInfo
@@ -83,8 +84,7 @@ def getSize(self):
 
     def review_state(self):
         obj = self.getObject()
-        wftool = getToolByName(obj, 'portal_workflow')
-        return wftool.getInfoFor(obj, 'review_state')
+        return api.content.get_state(obj=obj, default=None)
 
     def Type(self):
         # Dublin Core element - Object type.


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-04T22:28:37+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/e53b3f3c785ef73ece78d653e80f442a76a0f54f

Changelog Entry

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 6394e42..4fadcf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - fixes code conventions
   [loechel]
 
+- Fix Lookup of review_state on objects that do not have an review_state, example related_items that are files could be such.
+  [loechel]
+
 
 1.3.0 (2017-07-03)
 ------------------


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-07T10:42:56+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/dc1d437b3fa1a70577e456f4249690ab67745bdd

change workflow lookup again, so that plone.api is not used in core, but error is fixed.

Files changed:
M plone/app/contentlisting/realobject.py

diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 14ab62a..437d470 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
-from plone import api
+#from plone import api
 from plone.app.contentlisting.contentlisting import BaseContentListingObject
 from plone.app.contentlisting.interfaces import IContentListingObject
 from plone.rfc822.interfaces import IPrimaryFieldInfo
@@ -84,7 +84,10 @@ def getSize(self):
 
     def review_state(self):
         obj = self.getObject()
-        return api.content.get_state(obj=obj, default=None)
+        wftool = getToolByName(obj, 'portal_workflow')
+        return wftool.getInfoFor(obj, 'review_state', default=None)
+        # NOTE: Potential candidat for plone.api replacement.
+        # return api.content.get_state(obj=obj, default=None)
 
     def Type(self):
         # Dublin Core element - Object type.


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-07T10:44:10+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/59c90c377e5011558e475e9ee1a067633f33bf4f

resolve merge conflicts

Files changed:
M CHANGES.rst
M plone/app/contentlisting/browser.py
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c5aa29d..4fadcf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- fixes code conventions
+  [loechel]
+
 - Fix Lookup of review_state on objects that do not have an review_state, example related_items that are files could be such.
   [loechel]
 
diff --git a/plone/app/contentlisting/browser.py b/plone/app/contentlisting/browser.py
index 8fabcbf..2116ec4 100644
--- a/plone/app/contentlisting/browser.py
+++ b/plone/app/contentlisting/browser.py
@@ -10,8 +10,10 @@ def __call__(self, batch=False, b_size=20, b_start=0, orphan=0, **kw):
         query = {}
         query.update(kw)
 
-        query['path'] = {'query': '/'.join(self.context.getPhysicalPath()),
-                         'depth': 1}
+        query['path'] = {
+            'query': '/'.join(self.context.getPhysicalPath()),
+            'depth': 1,
+        }
 
         # if we don't have asked explicitly for other sorting, we'll want
         # it by position in parent
@@ -42,6 +44,6 @@ def __call__(self, batch=False, b_size=20, b_start=0, **kw):
             batch=batch,
             b_size=b_size,
             b_start=b_start,
-            custom_query=kw
+            custom_query=kw,
         )
         return res
diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index c233a73..77341bd 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -30,7 +30,7 @@ def __init__(self, brain):
     def __repr__(self):
         return '<plone.app.contentlisting.catalog.'\
             'CatalogContentListingObject instance at {0}>'.format(
-                self.getPath()
+                self.getPath(),
             )
 
     __str__ = __repr__
@@ -137,7 +137,7 @@ def getUserData(self, username):
                     # string:${navigation_root_url}/author/${item_creator}
                     'home_page': '/HOMEPAGEURL',
                     'location': '',
-                    'fullname': username
+                    'fullname': username,
                 }
             self.request.usercache[username] = userdata
         return userdata
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 1230719..597f3c8 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -113,12 +113,14 @@ def ContentTypeClass(self):
         # A normalised type name that identifies the object in listings.
         # Used for CSS styling.
         return 'contenttype-' + queryUtility(IIDNormalizer).normalize(
-            self.PortalType())
+            self.PortalType(),
+        )
 
     def ReviewStateClass(self):
         # A normalised review state string for CSS styling use in listings.
         return 'state-' + queryUtility(IIDNormalizer).normalize(
-            self.review_state())
+            self.review_state(),
+        )
 
     def appendViewAction(self):
         # Decide whether to produce a string /view to append to links in
@@ -142,7 +144,7 @@ def isVisibleInNav(self):
         registry = getUtility(IRegistry)
         navigation_settings = registry.forInterface(
             INavigationSchema,
-            prefix='plone'
+            prefix='plone',
         )
         if self.portal_type not in navigation_settings.displayed_types:
             return False
@@ -153,13 +155,17 @@ def MimeTypeIcon(self):
         mimeicon = None
         navroot = getNavigationRoot(self._brain)
         contenttype = aq_base(
-            getattr(self._brain, 'mime_type', None))
+            getattr(self._brain, 'mime_type', None),
+        )
         if contenttype:
             mtt = getToolByName(
-                self._brain, 'mimetypes_registry')
+                self._brain,
+                'mimetypes_registry',
+            )
             ctype = mtt.lookup(contenttype)
             mimeicon = os.path.join(
                 navroot,
-                guess_icon_path(ctype[0]))
+                guess_icon_path(ctype[0]),
+            )
 
         return mimeicon
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 437d470..e5bf812 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
-#from plone import api
 from plone.app.contentlisting.contentlisting import BaseContentListingObject
 from plone.app.contentlisting.interfaces import IContentListingObject
 from plone.rfc822.interfaces import IPrimaryFieldInfo
@@ -22,7 +21,7 @@ def __init__(self, obj):
     def __repr__(self):
         return '<plone.app.contentlisting.realobject.'\
             'RealContentListingObject instance at {0}>'.format(
-                self.getPath()
+                self.getPath(),
             )
 
     __str__ = __repr__
@@ -79,7 +78,7 @@ def getSize(self):
             return 0
         return obj.getObjSize(
             None,
-            getattr(primary_field_info.value, 'size', 0)
+            getattr(primary_field_info.value, 'size', 0),
         )
 
     def review_state(self):
diff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py
index 35ae724..ff8c435 100644
--- a/plone/app/contentlisting/tests/base.py
+++ b/plone/app/contentlisting/tests/base.py
@@ -42,9 +42,9 @@ def setUpPloneSite(self, portal):
 CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()
 CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
     bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
-    name='ContentListing:Integration'
+    name='ContentListing:Integration',
 )
 CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
-    name='ContentListing:Functional'
+    name='ContentListing:Functional',
 )
diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py
index 77ddaab..838db03 100644
--- a/plone/app/contentlisting/tests/test_integration_doctest.py
+++ b/plone/app/contentlisting/tests/test_integration_doctest.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
+
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501
 from plone.testing import layered
 
 import doctest
@@ -7,11 +8,14 @@
 
 
 def test_suite():
-    return unittest.TestSuite([
-        layered(doctest.DocFileSuite(
-            'tests/integration.rst',
-            package='plone.app.contentlisting',
-            optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),
-            layer=CONTENTLISTING_FUNCTIONAL_TESTING,
-        ),
-    ])
+    return unittest.TestSuite(
+        [
+            layered(
+                doctest.DocFileSuite(
+                    'tests/integration.rst',
+                    package='plone.app.contentlisting',
+                    optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,  # NOQA: E501
+                ),
+                layer=CONTENTLISTING_FUNCTIONAL_TESTING,
+            ),
+        ])
diff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py
index 2fa9994..1f1b2a6 100644
--- a/plone/app/contentlisting/tests/test_integration_unit.py
+++ b/plone/app/contentlisting/tests/test_integration_unit.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.contentlisting.interfaces import IContentListing
 from plone.app.contentlisting.interfaces import IContentListingObject
-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.batching.interfaces import IBatch
@@ -46,12 +46,20 @@ def test_making_contentlistingobjects(self):
         self.assertTrue(isinstance(listing[0], CatalogContentListingObject))
 
     def test_listing_interface(self):
-        self.assertTrue(verifyObject(IContentListing,
-                                     IContentListing(self.catalog())))
+        self.assertTrue(
+            verifyObject(
+                IContentListing,
+                IContentListing(self.catalog()),
+            ),
+        )
 
     def test_listing_object_interface(self):
-        self.assertTrue(verifyObject(IContentListingObject,
-                                     IContentListing(self.catalog())[0]))
+        self.assertTrue(
+            verifyObject(
+                IContentListingObject,
+                IContentListing(self.catalog())[0],
+            ),
+        )
 
 
 class TestIndividualCatalogContentItems(unittest.TestCase):
@@ -62,7 +70,11 @@ def setUp(self):
         self.portal = self.layer['portal']
         self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
-            'Document', 'mypage', title='My Page', description='blah')
+            'Document',
+            'mypage',
+            title='My Page',
+            description='blah',
+        )
         self.item = self.folder.restrictedTraverse('@@folderListing')()[0]
         self.realitem = self.folder.mypage
 
@@ -70,12 +82,12 @@ def test_printing_item(self):
         self.assertEqual(
             repr(self.item),
             '<plone.app.contentlisting.catalog.CatalogContentListingObject '
-            'instance at /plone/test-folder/mypage>'
+            'instance at /plone/test-folder/mypage>',
         )
         self.assertEqual(
             str(self.item),
             '<plone.app.contentlisting.catalog.CatalogContentListingObject '
-            'instance at /plone/test-folder/mypage>'
+            'instance at /plone/test-folder/mypage>',
         )
 
     def test_special_getattr_with_underscore(self):
@@ -89,7 +101,7 @@ def test_special_getattr_from_brain(self):
         self.assertEqual(self.item.is_folderish, False)
         self.assertTrue(
             repr(self.item.getDataOrigin())[:35],
-            '<Products.ZCatalog.Catalog.mybrains'
+            '<Products.ZCatalog.Catalog.mybrains',
         )
 
     def test_special_getattr_from_object(self):
@@ -98,7 +110,7 @@ def test_special_getattr_from_object(self):
         self.assertEqual(self.item.absolute_url(), '')
         self.assertEqual(
             repr(self.item.getDataOrigin()),
-            '<Document at /plone/test-folder/mypage>'
+            '<Document at /plone/test-folder/mypage>',
         )
 
     def test_item_Title(self):
@@ -115,7 +127,7 @@ def test_item_Creator(self):
     def test_item_getURL(self):
         self.assertEqual(
             self.item.getURL(),
-            'http://nohost/plone/test-folder/mypage'
+            'http://nohost/plone/test-folder/mypage',
         )
         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())
 
@@ -135,7 +147,11 @@ def test_appendViewAction(self):
         # checking that we append the view action to urls when needed
         self.assertEqual(self.item.appendViewAction(), '')
         self.folder.invokeFactory(
-            'Image', 'myimage', title='My Image', description='blah')
+            'Image',
+            'myimage',
+            title='My Image',
+            description='blah',
+        )
         self.item = self.folder.restrictedTraverse('@@contentlisting')()[1]
         self.assertEqual(self.item.appendViewAction(), '/view')
 
@@ -149,8 +165,10 @@ def test_comparision(self):
     def test_containment(self):
         # we can test containment for normal content objects against
         # contentlistings
-        self.assertTrue(self.folder.mypage in
-                        self.folder.restrictedTraverse('@@contentlisting')())
+        self.assertTrue(
+            self.folder.mypage in
+            self.folder.restrictedTraverse('@@contentlisting')(),
+        )
 
 
 class TestIndividualRealContentItems(unittest.TestCase):
@@ -161,7 +179,11 @@ def setUp(self):
         self.portal = self.layer['portal']
         self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
-            'Document', 'mypage', title='My Page', description='blah')
+            'Document',
+            'mypage',
+            title='My Page',
+            description='blah',
+        )
         self.item = IContentListingObject(self.folder.mypage)
         self.realitem = self.folder.mypage
 
@@ -169,12 +191,12 @@ def test_printing_item(self):
         self.assertEqual(
             repr(self.item),
             '<plone.app.contentlisting.realobject.RealContentListingObject '
-            'instance at /plone/test-folder/mypage>'
+            'instance at /plone/test-folder/mypage>',
         )
         self.assertEqual(
             str(self.item),
             '<plone.app.contentlisting.realobject.RealContentListingObject '
-            'instance at /plone/test-folder/mypage>'
+            'instance at /plone/test-folder/mypage>',
         )
 
     def test_special_getattr_with_underscore(self):
@@ -186,8 +208,10 @@ def test_special_getattr_from_object(self):
         # Asking for an attribute not in the contentlistingobject, should
         # defer lookup to the brain
         self.assertEqual(self.item.absolute_url(), '')
-        self.assertEqual(repr(self.item.getDataOrigin()),
-                         '<Document at /plone/test-folder/mypage>')
+        self.assertEqual(
+            repr(self.item.getDataOrigin()),
+            '<Document at /plone/test-folder/mypage>',
+        )
 
     def test_item_Title(self):
         self.assertEqual(self.item.Title(), 'My Page')
@@ -201,8 +225,10 @@ def test_item_Creator(self):
         self.assertEqual(self.item.Creator(), 'test_user_1_')
 
     def test_item_getURL(self):
-        self.assertEqual(self.item.getURL(),
-                         'http://nohost/plone/test-folder/mypage')
+        self.assertEqual(
+            self.item.getURL(),
+            'http://nohost/plone/test-folder/mypage',
+        )
         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())
 
     def test_item_reviewState(self):
@@ -259,7 +285,9 @@ def test_batching_folder_contents(self):
         # the results a contentlisting, regardless of batching
         self.folder.invokeFactory('Document', 'mypage')
         contentlisting = self.folder.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1)
+            batch=True,
+            b_size=1,
+        )
         self.assertTrue(verifyObject(IContentListing, contentlisting))
         self.assertEqual(len(contentlisting), 1)
 
@@ -269,13 +297,18 @@ def test_batching_folder_contents_2(self):
         new_id = self.folder.invokeFactory('Document', 'mypage')
         new_id2 = self.folder.invokeFactory('Document', 'mypage2')
         contentlisting = self.folder.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1)
+            batch=True,
+            b_size=1,
+        )
         self.assertTrue(contentlisting[0].getId() == new_id)
         self.assertEqual(len(contentlisting), 1)
         self.assertEqual(contentlisting.actual_result_count, 2)
 
         contentlisting = self.folder.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1, b_start=1)
+            batch=True,
+            b_size=1,
+            b_start=1,
+        )
         self.assertEqual(contentlisting[0].getId(), new_id2)
         self.assertEqual(len(contentlisting), 1)
         self.assertEqual(contentlisting.actual_result_count, 2)
@@ -294,9 +327,10 @@ def setUp(self):
         self.portal.invokeFactory('Collection', 'collection', title=u'Col')
         collection = self.portal.collection
         collection.query = [
-            {'i': 'portal_type',
-             'o': 'plone.app.querystring.operation.selection.any',
-             'v': ['Event', 'Event']
+            {
+                'i': 'portal_type',
+                'o': 'plone.app.querystring.operation.selection.any',
+                'v': ['Event', 'Event'],
              },
         ]
         collection.reindexObject()
@@ -312,7 +346,7 @@ def test_collection_results_is_contentlisting(self):
 
     def test_filtering_collection_results_to_empty(self):
         contentlisting = self.col.restrictedTraverse('@@contentlisting')(
-            portal_type='NotExistent'
+            portal_type='NotExistent',
         )
 
         self.assertEqual(len(contentlisting), 0)
@@ -321,7 +355,7 @@ def test_filtering_collection_results_to_empty(self):
     def test_filtering_collection_results_to_news_items(self):
         self.folder.invokeFactory('Link', 'mylink')
         contentlisting = self.col.restrictedTraverse('@@contentlisting')(
-            portal_type='Link'
+            portal_type='Link',
         )
 
         self.assertEqual(len(contentlisting), 1)
@@ -340,7 +374,9 @@ def test_batching_collection_results(self):
         # the results a contentlisting, regardless of batching
         self.folder.invokeFactory('Event', 'myevent')
         contentlisting = self.col.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1)
+            batch=True,
+            b_size=1,
+        )
 
         # In case of Collections, the result is a plone.batching object
         self.assertTrue(IBatch.providedBy(contentlisting))
@@ -353,7 +389,9 @@ def test_batching_collection_results_2(self):
         new_id = self.folder.invokeFactory('Event', 'myevent')
         new_id2 = self.folder.invokeFactory('Event', 'myevent2')
         contentlisting = self.col.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1)
+            batch=True,
+            b_size=1,
+        )
 
         self.assertTrue(contentlisting[0].getId() == new_id)
         self.assertEqual(contentlisting.items_on_page, 1)
@@ -361,7 +399,10 @@ def test_batching_collection_results_2(self):
         self.assertEqual(contentlisting.has_next, True)
 
         contentlisting = self.col.restrictedTraverse('@@contentlisting')(
-            batch=True, b_size=1, b_start=1)
+            batch=True,
+            b_size=1,
+            b_start=1,
+        )
 
         self.assertEqual(contentlisting[0].getId(), new_id2)
         self.assertEqual(contentlisting.items_on_page, 1)


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-07T15:33:25+02:00
Author: Alexander Loechel (loechel) <Alexander.Loechel@lmu.de>
Commit: https://github.com/plone/plone.app.contentlisting/commit/8c5c4644c785dca3d13c2ea94283454c24de8fbe

remove note for plone.api

Files changed:
M plone/app/contentlisting/realobject.py

diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index e5bf812..5b6ca58 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -85,8 +85,6 @@ def review_state(self):
         obj = self.getObject()
         wftool = getToolByName(obj, 'portal_workflow')
         return wftool.getInfoFor(obj, 'review_state', default=None)
-        # NOTE: Potential candidat for plone.api replacement.
-        # return api.content.get_state(obj=obj, default=None)
 
     def Type(self):
         # Dublin Core element - Object type.


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2017-08-07T22:54:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/0fedc9c2328ea3e9ac487eda1a6deab90ce322ed

Merge pull request #22 from plone/fix_workflow_lookup

fix problem on looking up a workflow state on related items

Files changed:
M CHANGES.rst
M plone/app/contentlisting/realobject.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6394e42..4fadcf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - fixes code conventions
   [loechel]
 
+- Fix Lookup of review_state on objects that do not have an review_state, example related_items that are files could be such.
+  [loechel]
+
 
 1.3.0 (2017-07-03)
 ------------------
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 8434f9d..5b6ca58 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -84,7 +84,7 @@ def getSize(self):
     def review_state(self):
         obj = self.getObject()
         wftool = getToolByName(obj, 'portal_workflow')
-        return wftool.getInfoFor(obj, 'review_state')
+        return wftool.getInfoFor(obj, 'review_state', default=None)
 
     def Type(self):
         # Dublin Core element - Object type.


