Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-16T23:51:03+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/1c92b69cd22b25bd82884468203aa2cb083f79e0

Moved getToolByName early patch to the later patches.

This fixes a circular import.
See https://github.com/plone/Products.CMFPlone/issues/1950

Files changed:
A Products/CMFPlone/patches/gtbn.py
M CHANGES.rst
M Products/CMFPlone/earlypatches/security.py
M Products/CMFPlone/patches/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0c59567..9c9e08c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -153,6 +153,12 @@ New features:
 
 Bug fixes:
 
+
+- Moved getToolByName early patch to the later patches.
+  This fixes a circular import.
+  See `issue #1950 <https://github.com/plone/Products.CMFPlone/issues/1950>`_.
+  [maurits]
+
 - Include JS Patterns when loading a page via ajax or an iframe [displacedaussie]
 
 - Restore ability to include head when loading via ajax [displacedaussie]
diff --git a/Products/CMFPlone/earlypatches/security.py b/Products/CMFPlone/earlypatches/security.py
index 8985591..dde89c4 100644
--- a/Products/CMFPlone/earlypatches/security.py
+++ b/Products/CMFPlone/earlypatches/security.py
@@ -49,44 +49,7 @@ def require(self, *args, **kw):
 ClassDirective.require = require
 
 # 5. Check return value of getToolByName
-# This is an unusual sort of monkey patching...we replace just the func_code
-# rather than the entire function, to make sure that aliases to the function
-# that were imported prior to this patch will still run the patched code.
-code = """
-from persistent.interfaces import IPersistent
-from OFS.interfaces import IItem
-try:
-    from Products.ATContentTypes.tool.factory import FauxArchetypeTool
-except ImportError:
-    FauxArchetypeTool = type('FauxArchetypeTool')
-
-def _getToolByName(self, name, default=_marker):
-    pass
-
-def check_getToolByName(obj, name, default=_marker):
-    result = _getToolByName(obj, name, default)
-    if IPersistent.providedBy(result) or \
-            IItem.providedBy(result) or \
-            name in _tool_interface_registry or \
-            (isinstance(result, FauxArchetypeTool)) or \
-            '.test' in result.__class__.__module__ or \
-            result.__class__.__module__ == 'mock' or \
-            result is _marker or \
-            result is default:
-        return result
-    else:
-        raise TypeError("Object found is not a portal tool (%s)" % (name,))
-    return result
-"""
-from Products.CMFCore import utils
-if '_marker' not in utils.getToolByName.func_globals:
-    raise Exception("This Version of Products.CMFPlone is not compatible "
-                    "with Products.PloneHotfix20121106, the fixes are "
-                    "included already in Products.CMFPlone, please remove "
-                    "the hotfix")
-exec code in utils.getToolByName.func_globals
-utils._getToolByName.func_code = utils.getToolByName.func_code
-utils.getToolByName.func_code = utils.check_getToolByName.func_code
+# Moved to patches/gtbn.py due to circular imports.
 
 # 6. Protect some methods in ZCatalog
 from Products.ZCatalog.ZCatalog import ZCatalog
diff --git a/Products/CMFPlone/patches/__init__.py b/Products/CMFPlone/patches/__init__.py
index d4de5f7..4da5cc0 100644
--- a/Products/CMFPlone/patches/__init__.py
+++ b/Products/CMFPlone/patches/__init__.py
@@ -27,3 +27,5 @@
 import publishing
 
 import z3c_form
+
+import gtbn
diff --git a/Products/CMFPlone/patches/gtbn.py b/Products/CMFPlone/patches/gtbn.py
new file mode 100644
index 0000000..94027a3
--- /dev/null
+++ b/Products/CMFPlone/patches/gtbn.py
@@ -0,0 +1,43 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore import utils
+
+# Check return value of getToolByName
+# this used to be step 5 in earlypatches, but was moved to avoid
+# circular imports.
+# This is an unusual sort of monkey patching...we replace just the func_code
+# rather than the entire function, to make sure that aliases to the function
+# that were imported prior to this patch will still run the patched code.
+code = """
+from persistent.interfaces import IPersistent
+from OFS.interfaces import IItem
+try:
+    from Products.ATContentTypes.tool.factory import FauxArchetypeTool
+except ImportError:
+    FauxArchetypeTool = type('FauxArchetypeTool')
+
+def _getToolByName(self, name, default=_marker):
+    pass
+
+def check_getToolByName(obj, name, default=_marker):
+    result = _getToolByName(obj, name, default)
+    if IPersistent.providedBy(result) or \
+            IItem.providedBy(result) or \
+            name in _tool_interface_registry or \
+            (isinstance(result, FauxArchetypeTool)) or \
+            '.test' in result.__class__.__module__ or \
+            result.__class__.__module__ == 'mock' or \
+            result is _marker or \
+            result is default:
+        return result
+    else:
+        raise TypeError("Object found is not a portal tool (%s)" % (name,))
+    return result
+"""
+if '_marker' not in utils.getToolByName.func_globals:
+    raise Exception("This Version of Products.CMFPlone is not compatible "
+                    "with Products.PloneHotfix20121106, the fixes are "
+                    "included already in Products.CMFPlone, please remove "
+                    "the hotfix")
+exec code in utils.getToolByName.func_globals
+utils._getToolByName.func_code = utils.getToolByName.func_code
+utils.getToolByName.func_code = utils.check_getToolByName.func_code


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-02-20T01:16:32+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/f8be19ab18027ba36215f949199546a55a01641d

Merge pull request #1951 from plone/issue-1950-gtbn-circular-import

Moved getToolByName early patch to the later patches.

Files changed:
A Products/CMFPlone/patches/gtbn.py
M CHANGES.rst
M Products/CMFPlone/earlypatches/security.py
M Products/CMFPlone/patches/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0c59567..9c9e08c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -153,6 +153,12 @@ New features:
 
 Bug fixes:
 
+
+- Moved getToolByName early patch to the later patches.
+  This fixes a circular import.
+  See `issue #1950 <https://github.com/plone/Products.CMFPlone/issues/1950>`_.
+  [maurits]
+
 - Include JS Patterns when loading a page via ajax or an iframe [displacedaussie]
 
 - Restore ability to include head when loading via ajax [displacedaussie]
diff --git a/Products/CMFPlone/earlypatches/security.py b/Products/CMFPlone/earlypatches/security.py
index 8985591..dde89c4 100644
--- a/Products/CMFPlone/earlypatches/security.py
+++ b/Products/CMFPlone/earlypatches/security.py
@@ -49,44 +49,7 @@ def require(self, *args, **kw):
 ClassDirective.require = require
 
 # 5. Check return value of getToolByName
-# This is an unusual sort of monkey patching...we replace just the func_code
-# rather than the entire function, to make sure that aliases to the function
-# that were imported prior to this patch will still run the patched code.
-code = """
-from persistent.interfaces import IPersistent
-from OFS.interfaces import IItem
-try:
-    from Products.ATContentTypes.tool.factory import FauxArchetypeTool
-except ImportError:
-    FauxArchetypeTool = type('FauxArchetypeTool')
-
-def _getToolByName(self, name, default=_marker):
-    pass
-
-def check_getToolByName(obj, name, default=_marker):
-    result = _getToolByName(obj, name, default)
-    if IPersistent.providedBy(result) or \
-            IItem.providedBy(result) or \
-            name in _tool_interface_registry or \
-            (isinstance(result, FauxArchetypeTool)) or \
-            '.test' in result.__class__.__module__ or \
-            result.__class__.__module__ == 'mock' or \
-            result is _marker or \
-            result is default:
-        return result
-    else:
-        raise TypeError("Object found is not a portal tool (%s)" % (name,))
-    return result
-"""
-from Products.CMFCore import utils
-if '_marker' not in utils.getToolByName.func_globals:
-    raise Exception("This Version of Products.CMFPlone is not compatible "
-                    "with Products.PloneHotfix20121106, the fixes are "
-                    "included already in Products.CMFPlone, please remove "
-                    "the hotfix")
-exec code in utils.getToolByName.func_globals
-utils._getToolByName.func_code = utils.getToolByName.func_code
-utils.getToolByName.func_code = utils.check_getToolByName.func_code
+# Moved to patches/gtbn.py due to circular imports.
 
 # 6. Protect some methods in ZCatalog
 from Products.ZCatalog.ZCatalog import ZCatalog
diff --git a/Products/CMFPlone/patches/__init__.py b/Products/CMFPlone/patches/__init__.py
index d4de5f7..4da5cc0 100644
--- a/Products/CMFPlone/patches/__init__.py
+++ b/Products/CMFPlone/patches/__init__.py
@@ -27,3 +27,5 @@
 import publishing
 
 import z3c_form
+
+import gtbn
diff --git a/Products/CMFPlone/patches/gtbn.py b/Products/CMFPlone/patches/gtbn.py
new file mode 100644
index 0000000..94027a3
--- /dev/null
+++ b/Products/CMFPlone/patches/gtbn.py
@@ -0,0 +1,43 @@
+# -*- coding: utf-8 -*-
+from Products.CMFCore import utils
+
+# Check return value of getToolByName
+# this used to be step 5 in earlypatches, but was moved to avoid
+# circular imports.
+# This is an unusual sort of monkey patching...we replace just the func_code
+# rather than the entire function, to make sure that aliases to the function
+# that were imported prior to this patch will still run the patched code.
+code = """
+from persistent.interfaces import IPersistent
+from OFS.interfaces import IItem
+try:
+    from Products.ATContentTypes.tool.factory import FauxArchetypeTool
+except ImportError:
+    FauxArchetypeTool = type('FauxArchetypeTool')
+
+def _getToolByName(self, name, default=_marker):
+    pass
+
+def check_getToolByName(obj, name, default=_marker):
+    result = _getToolByName(obj, name, default)
+    if IPersistent.providedBy(result) or \
+            IItem.providedBy(result) or \
+            name in _tool_interface_registry or \
+            (isinstance(result, FauxArchetypeTool)) or \
+            '.test' in result.__class__.__module__ or \
+            result.__class__.__module__ == 'mock' or \
+            result is _marker or \
+            result is default:
+        return result
+    else:
+        raise TypeError("Object found is not a portal tool (%s)" % (name,))
+    return result
+"""
+if '_marker' not in utils.getToolByName.func_globals:
+    raise Exception("This Version of Products.CMFPlone is not compatible "
+                    "with Products.PloneHotfix20121106, the fixes are "
+                    "included already in Products.CMFPlone, please remove "
+                    "the hotfix")
+exec code in utils.getToolByName.func_globals
+utils._getToolByName.func_code = utils.getToolByName.func_code
+utils.getToolByName.func_code = utils.check_getToolByName.func_code


