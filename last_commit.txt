Repository: plone.api


Branch: refs/heads/master
Date: 2023-03-28T13:18:41+02:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/d426183e0e72647f6095d50eef4cacdd35499773

Fix api.relation.delete by relation name, by source, by target (instead of single relation defined by source, target, relation name)

Files changed:
A news/501.bugfix
M src/plone/api/relation.py
M src/plone/api/tests/test_relation.py

b'diff --git a/news/501.bugfix b/news/501.bugfix\nnew file mode 100644\nindex 00000000..cb9758a7\n--- /dev/null\n+++ b/news/501.bugfix\n@@ -0,0 +1 @@\n+Fix deletion of relations by relation name. @ksuess\n\\ No newline at end of file\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 3291c88b..6879cca6 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -281,7 +281,8 @@ def delete(source=None, target=None, relationship=None):\n         query["to_id"] = intids.getId(target)\n     if relationship is not None:\n         query["from_attribute"] = relationship\n-    for rel in relation_catalog.findRelations(query):\n+    # We\'ll change the bucket in the loop\n+    for rel in [rel for rel in relation_catalog.findRelations(query)]:\n         source = rel.from_object\n         from_attribute = rel.from_attribute\n         field_and_schema = _get_field_and_schema_for_fieldname(\n@@ -292,7 +293,7 @@ def delete(source=None, target=None, relationship=None):\n             # The relationship is not the name of a dexterity field.\n             # Only purge relation from relation-catalog.\n             relation_catalog.unindex(rel)\n-            return\n+            continue\n \n         target = rel.to_object\n         field, _schema = field_and_schema\ndiff --git a/src/plone/api/tests/test_relation.py b/src/plone/api/tests/test_relation.py\nindex 24dd4f99..3072e04f 100644\n--- a/src/plone/api/tests/test_relation.py\n+++ b/src/plone/api/tests/test_relation.py\n@@ -272,6 +272,150 @@ def test_delete_one_fieldrelation(self):\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertEqual(len(self.about.relatedItems), 1)\n \n+    def test_delete_by_relation(self):\n+        """Test deleting relations by relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(source=self.about)), 2)\n+\n+        api.relation.delete(\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(source=self.about)), 0)\n+        self.assertEqual(len(self.about.relatedItems), 0)\n+\n+    def test_delete_by_source_and_relation(self):\n+        """Test deleting relations by source and relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+\n+        api.relation.delete(\n+            source=self.about,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+\n+    def test_delete_by_target_and_relation(self):\n+        """Test deleting relations by target and relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+        api.relation.delete(\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+    def test_delete_by_source(self):\n+        """Test deleting relations by source."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="link",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 2)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+\n+        api.relation.delete(\n+            source=self.about,\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+    def test_delete_by_target(self):\n+        """Test deleting relations by target."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.team,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="link",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+\n+        api.relation.delete(\n+            target=self.events,\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n     def test_deleted_relation_is_purged(self):\n         """Test that relations that have the name of a non-relation-field are purged."""\n         relation_catalog = getUtility(ICatalog)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2023-03-28T13:26:04+02:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/91367e6c0382fc77b4f6d59da88eb7d20f048bb8

black

Files changed:
M src/plone/api/portal.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_portal.py

b'diff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex ac5b028b..7de203db 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -103,7 +103,6 @@ def get_tool(name=None):\n     try:\n         return getToolByName(get(), name)\n     except AttributeError:\n-\n         # get a list of all tools to display their names in the error msg\n         portal = get()\n         tools = []\n@@ -365,7 +364,6 @@ def set_registry_record(name=None, value=None, interface=None):\n             )\n \n     elif isinstance(name, str):\n-\n         # confirm that the record exists before setting the value\n         get_registry_record(name)\n \ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex e39c2a90..a29fcf5c 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -11,7 +11,6 @@\n \n \n class PloneApiLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 95af825c..c02145dd 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -1129,7 +1129,6 @@ def test_find_dict(self):\n         self.assertEqual(len(documents), 0)\n \n     def test_find_parse_object_provides_query(self):\n-\n         parse = api.content._parse_object_provides_query\n \n         # single interface\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 66dcdd05..f18037ce 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -33,7 +33,6 @@ class TestException(Exception):\n \n \n class HasProtectedMethods(SimpleItem):\n-\n     security = AccessControl.ClassSecurityInfo()\n \n     def __init__(self, id):\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 40ff53a3..83f19886 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -37,7 +37,6 @@\n \n \n class IMyRegistrySettings(Interface):\n-\n     field_one = schema.TextLine(\n         title="something",\n         description="something else",\n@@ -50,7 +49,6 @@ class IMyRegistrySettings(Interface):\n \n \n class IMyOtherRegistrySettings(Interface):\n-\n     field_three = schema.TextLine(\n         title="something",\n         description="something else",\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2023-03-28T07:43:27-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.api/commit/f707daa5f7af1f2b331ba28fc960297eab1a7712

Merge pull request #502 from plone/delete-relations

Fix api.relation.delete by relation name, by source, by target (inste…

Files changed:
A news/501.bugfix
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_relation.py

b'diff --git a/news/501.bugfix b/news/501.bugfix\nnew file mode 100644\nindex 00000000..cb9758a7\n--- /dev/null\n+++ b/news/501.bugfix\n@@ -0,0 +1 @@\n+Fix deletion of relations by relation name. @ksuess\n\\ No newline at end of file\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex ac5b028b..7de203db 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -103,7 +103,6 @@ def get_tool(name=None):\n     try:\n         return getToolByName(get(), name)\n     except AttributeError:\n-\n         # get a list of all tools to display their names in the error msg\n         portal = get()\n         tools = []\n@@ -365,7 +364,6 @@ def set_registry_record(name=None, value=None, interface=None):\n             )\n \n     elif isinstance(name, str):\n-\n         # confirm that the record exists before setting the value\n         get_registry_record(name)\n \ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 3291c88b..6879cca6 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -281,7 +281,8 @@ def delete(source=None, target=None, relationship=None):\n         query["to_id"] = intids.getId(target)\n     if relationship is not None:\n         query["from_attribute"] = relationship\n-    for rel in relation_catalog.findRelations(query):\n+    # We\'ll change the bucket in the loop\n+    for rel in [rel for rel in relation_catalog.findRelations(query)]:\n         source = rel.from_object\n         from_attribute = rel.from_attribute\n         field_and_schema = _get_field_and_schema_for_fieldname(\n@@ -292,7 +293,7 @@ def delete(source=None, target=None, relationship=None):\n             # The relationship is not the name of a dexterity field.\n             # Only purge relation from relation-catalog.\n             relation_catalog.unindex(rel)\n-            return\n+            continue\n \n         target = rel.to_object\n         field, _schema = field_and_schema\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex e39c2a90..a29fcf5c 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -11,7 +11,6 @@\n \n \n class PloneApiLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 95af825c..c02145dd 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -1129,7 +1129,6 @@ def test_find_dict(self):\n         self.assertEqual(len(documents), 0)\n \n     def test_find_parse_object_provides_query(self):\n-\n         parse = api.content._parse_object_provides_query\n \n         # single interface\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 66dcdd05..f18037ce 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -33,7 +33,6 @@ class TestException(Exception):\n \n \n class HasProtectedMethods(SimpleItem):\n-\n     security = AccessControl.ClassSecurityInfo()\n \n     def __init__(self, id):\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 40ff53a3..83f19886 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -37,7 +37,6 @@\n \n \n class IMyRegistrySettings(Interface):\n-\n     field_one = schema.TextLine(\n         title="something",\n         description="something else",\n@@ -50,7 +49,6 @@ class IMyRegistrySettings(Interface):\n \n \n class IMyOtherRegistrySettings(Interface):\n-\n     field_three = schema.TextLine(\n         title="something",\n         description="something else",\ndiff --git a/src/plone/api/tests/test_relation.py b/src/plone/api/tests/test_relation.py\nindex 24dd4f99..3072e04f 100644\n--- a/src/plone/api/tests/test_relation.py\n+++ b/src/plone/api/tests/test_relation.py\n@@ -272,6 +272,150 @@ def test_delete_one_fieldrelation(self):\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertEqual(len(self.about.relatedItems), 1)\n \n+    def test_delete_by_relation(self):\n+        """Test deleting relations by relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(source=self.about)), 2)\n+\n+        api.relation.delete(\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(source=self.about)), 0)\n+        self.assertEqual(len(self.about.relatedItems), 0)\n+\n+    def test_delete_by_source_and_relation(self):\n+        """Test deleting relations by source and relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+\n+        api.relation.delete(\n+            source=self.about,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+\n+    def test_delete_by_target_and_relation(self):\n+        """Test deleting relations by target and relation name."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+        api.relation.delete(\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+    def test_delete_by_source(self):\n+        """Test deleting relations by source."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="link",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 2)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+\n+        api.relation.delete(\n+            source=self.about,\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n+    def test_delete_by_target(self):\n+        """Test deleting relations by target."""\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.team,\n+            target=self.events,\n+            relationship="relatedItems",\n+        )\n+        api.relation.create(\n+            source=self.about,\n+            target=self.blog,\n+            relationship="link",\n+        )\n+        api.relation.create(\n+            source=self.blog,\n+            target=self.events,\n+            relationship="link",\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+\n+        api.relation.delete(\n+            target=self.events,\n+        )\n+        self.assertEqual(len(api.relation.get(relationship="relatedItems")), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n+\n     def test_deleted_relation_is_purged(self):\n         """Test that relations that have the name of a non-relation-field are purged."""\n         relation_catalog = getUtility(ICatalog)\n'

