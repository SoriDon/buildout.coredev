Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-09-13T15:43:39+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/8f092e25c3d125a884f479d64fa4b4fb5f327459

Fix #1199: @users endpoint should use acl_users.searchUsers.

Files changed:
A news/1199.bugfix
M src/plone/restapi/services/users/get.py

b'diff --git a/news/1199.bugfix b/news/1199.bugfix\nnew file mode 100644\nindex 000000000..91fcaad4d\n--- /dev/null\n+++ b/news/1199.bugfix\n@@ -0,0 +1,2 @@\n+Fix @users endpoint to use acl_users.searchResults instead of portal_membership.listMembers\n+[ericof]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex ff64385ea..49f0423c2 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -17,6 +17,9 @@ class UsersGet(Service):\n     def __init__(self, context, request):\n         super().__init__(context, request)\n         self.params = []\n+        portal = getSite()\n+        self.portal_membership = getToolByName(portal, "portal_membership")\n+        self.acl_users = getToolByName(portal, "acl_users")\n         self.query = self.request.form.copy()\n \n     def publishTraverse(self, request, name):\n@@ -31,21 +34,15 @@ def _get_user_id(self):\n         return self.params[0]\n \n     def _get_user(self, user_id):\n-        portal = getSite()\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        return portal_membership.getMemberById(user_id)\n+        return self.portal_membership.getMemberById(user_id)\n \n     def _get_users(self):\n-        portal = getSite()\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        return portal_membership.listMembers()\n+        results = {user["userid"] for user in self.acl_users.searchUsers()}\n+        return [self.portal_membership.getMemberById(userid) for userid in results]\n \n     def _get_filtered_users(self, query, limit):\n-        portal = getSite()\n-        acl_users = getToolByName(portal, "acl_users")\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        results = acl_users.searchUsers(id=query, max_results=limit)\n-        return [portal_membership.getMemberById(user["userid"]) for user in results]\n+        results = self.acl_users.searchUsers(id=query, max_results=limit)\n+        return [self.portal_membership.getMemberById(user["userid"]) for user in results]\n \n     def has_permission_to_query(self):\n         sm = getSecurityManager()\n@@ -66,7 +63,7 @@ def reply(self):\n             query = self.query.get("query", "")\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n-                # Someone is searching users, check if he is authorized\n+                # Someone is searching users, check if they are authorized\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n@@ -83,7 +80,7 @@ def reply(self):\n                 raise BadRequest("Query string supplied is not valid")\n \n         if len(self.params) == 0:\n-            # Someone is asking for all users, check if he is authorized\n+            # Someone is asking for all users, check if they are authorized\n             if self.has_permission_to_enumerate():\n                 result = []\n                 for user in self._get_users():\n@@ -97,9 +94,8 @@ def reply(self):\n                 return\n \n         # Some is asking one user, check if the logged in user is asking\n-        # his own information or he is a Manager\n-        mt = getToolByName(self.context, "portal_membership")\n-        current_user_id = mt.getAuthenticatedMember().getId()\n+        # their own information or if they are a Manager\n+        current_user_id = self.portal_membership.getAuthenticatedMember().getId()\n \n         if self.has_permission_to_access_user_info() or (\n             current_user_id and current_user_id == self._get_user_id\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-09-13T15:46:08+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/84319eb6d96e1ba8be1bd605152d69541707bf7a

Apply Black.

Files changed:
M src/plone/restapi/services/users/get.py

b'diff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 49f0423c2..cf29d5c9f 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -42,7 +42,9 @@ def _get_users(self):\n \n     def _get_filtered_users(self, query, limit):\n         results = self.acl_users.searchUsers(id=query, max_results=limit)\n-        return [self.portal_membership.getMemberById(user["userid"]) for user in results]\n+        return [\n+            self.portal_membership.getMemberById(user["userid"]) for user in results\n+        ]\n \n     def has_permission_to_query(self):\n         sm = getSecurityManager()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-09-13T18:00:48+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/da01f01f35331a46c8bcb958e7c06a7f9c1e0dc7

Merge pull request #1221 from plone/issue-1199-refactor-users-endpoint

@users endpoint should use acl_users.searchUsers.

Files changed:
A news/1199.bugfix
M src/plone/restapi/services/users/get.py

b'diff --git a/news/1199.bugfix b/news/1199.bugfix\nnew file mode 100644\nindex 000000000..91fcaad4d\n--- /dev/null\n+++ b/news/1199.bugfix\n@@ -0,0 +1,2 @@\n+Fix @users endpoint to use acl_users.searchResults instead of portal_membership.listMembers\n+[ericof]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex ff64385ea..cf29d5c9f 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -17,6 +17,9 @@ class UsersGet(Service):\n     def __init__(self, context, request):\n         super().__init__(context, request)\n         self.params = []\n+        portal = getSite()\n+        self.portal_membership = getToolByName(portal, "portal_membership")\n+        self.acl_users = getToolByName(portal, "acl_users")\n         self.query = self.request.form.copy()\n \n     def publishTraverse(self, request, name):\n@@ -31,21 +34,17 @@ def _get_user_id(self):\n         return self.params[0]\n \n     def _get_user(self, user_id):\n-        portal = getSite()\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        return portal_membership.getMemberById(user_id)\n+        return self.portal_membership.getMemberById(user_id)\n \n     def _get_users(self):\n-        portal = getSite()\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        return portal_membership.listMembers()\n+        results = {user["userid"] for user in self.acl_users.searchUsers()}\n+        return [self.portal_membership.getMemberById(userid) for userid in results]\n \n     def _get_filtered_users(self, query, limit):\n-        portal = getSite()\n-        acl_users = getToolByName(portal, "acl_users")\n-        portal_membership = getToolByName(portal, "portal_membership")\n-        results = acl_users.searchUsers(id=query, max_results=limit)\n-        return [portal_membership.getMemberById(user["userid"]) for user in results]\n+        results = self.acl_users.searchUsers(id=query, max_results=limit)\n+        return [\n+            self.portal_membership.getMemberById(user["userid"]) for user in results\n+        ]\n \n     def has_permission_to_query(self):\n         sm = getSecurityManager()\n@@ -66,7 +65,7 @@ def reply(self):\n             query = self.query.get("query", "")\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n             if query:\n-                # Someone is searching users, check if he is authorized\n+                # Someone is searching users, check if they are authorized\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(query, limit)\n                     result = []\n@@ -83,7 +82,7 @@ def reply(self):\n                 raise BadRequest("Query string supplied is not valid")\n \n         if len(self.params) == 0:\n-            # Someone is asking for all users, check if he is authorized\n+            # Someone is asking for all users, check if they are authorized\n             if self.has_permission_to_enumerate():\n                 result = []\n                 for user in self._get_users():\n@@ -97,9 +96,8 @@ def reply(self):\n                 return\n \n         # Some is asking one user, check if the logged in user is asking\n-        # his own information or he is a Manager\n-        mt = getToolByName(self.context, "portal_membership")\n-        current_user_id = mt.getAuthenticatedMember().getId()\n+        # their own information or if they are a Manager\n+        current_user_id = self.portal_membership.getAuthenticatedMember().getId()\n \n         if self.has_permission_to_access_user_info() or (\n             current_user_id and current_user_id == self._get_user_id\n'

