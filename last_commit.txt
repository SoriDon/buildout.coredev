Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-11T17:48:08Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/65bb66fd053b65f8efc12f2dc69244ca677a1f42

Fix plone.base test by adding an unrestrictedTraverse method to the mock.

Files changed:
M src/plone/base/tests/test_utils.py

b'diff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex bd953e1..fc61a11 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -82,6 +82,9 @@ def absolute_url(self):\n             def restrictedTraverse(self, path):\n                 return MockContext(self.vh_root + path)\n \n+            def unrestrictedTraverse(self, path):\n+                return self.restrictedTraverse(path)\n+\n         class MockRequest:\n             vh_url = "http://nohost"\n             vh_root = ""\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-11T18:02:45Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/26e67a0a44dcb6bd6fb9451fc58b0dbd63ba277f

Protect the unrestricted traverse with an exception guard, for if the object cannot be found (a legitimate case), then it should not be considered as an object to return as ISite.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex f96cf5d..bb4ffe8 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -9,6 +9,7 @@\n from Products.CMFCore.interfaces import ITypesTool\n from Products.CMFCore.utils import getToolByName\n from urllib.parse import urlparse\n+from zExceptions import NotFound\n from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -316,7 +317,12 @@ def get_top_site_from_url(context, request):\n             # below to resolve the actual object, so the user (technically,\n             # the browser) cannot ever get a reference to an object it does\n             # not have permission to.\n-            _site = context.unrestrictedTraverse(site_path)\n+            try:\n+                _site = context.unrestrictedTraverse(site_path)\n+            except NotFound:\n+                # Oh.  This path is not findable.  So we will not consider\n+                # it below as a thing we can return to stand in for ISite.\n+                continue\n             if ISite.providedBy(_site):\n                 subsites.append(idx)\n             else:\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-11T18:08:48Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/665297b650ced55cdd58bf892ccbf73fd0876d19

Add towncrier.

Files changed:
A news/20.bugfix

b'diff --git a/news/20.bugfix b/news/20.bugfix\nnew file mode 100644\nindex 0000000..3d618cb\n--- /dev/null\n+++ b/news/20.bugfix\n@@ -0,0 +1 @@\n+* Fix `get_top_site_from_url()` when the path contains nonexistent objects (e.g. when creating a new Dexterity type or adding a new content instance). [Rudd-O]\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-11T23:10:54Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/f02bd670bc5dfb63f9fcebbfc9d52f3cd60d17d0

Merge pull request #20 from plone/myfix

Fix uses of unrestrictedTraverse in get_top_site_from_url()

Files changed:
A news/20.bugfix
M src/plone/base/tests/test_utils.py
M src/plone/base/utils.py

b'diff --git a/news/20.bugfix b/news/20.bugfix\nnew file mode 100644\nindex 0000000..3d618cb\n--- /dev/null\n+++ b/news/20.bugfix\n@@ -0,0 +1 @@\n+* Fix `get_top_site_from_url()` when the path contains nonexistent objects (e.g. when creating a new Dexterity type or adding a new content instance). [Rudd-O]\ndiff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex bd953e1..fc61a11 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -82,6 +82,9 @@ def absolute_url(self):\n             def restrictedTraverse(self, path):\n                 return MockContext(self.vh_root + path)\n \n+            def unrestrictedTraverse(self, path):\n+                return self.restrictedTraverse(path)\n+\n         class MockRequest:\n             vh_url = "http://nohost"\n             vh_root = ""\ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex f96cf5d..bb4ffe8 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -9,6 +9,7 @@\n from Products.CMFCore.interfaces import ITypesTool\n from Products.CMFCore.utils import getToolByName\n from urllib.parse import urlparse\n+from zExceptions import NotFound\n from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -316,7 +317,12 @@ def get_top_site_from_url(context, request):\n             # below to resolve the actual object, so the user (technically,\n             # the browser) cannot ever get a reference to an object it does\n             # not have permission to.\n-            _site = context.unrestrictedTraverse(site_path)\n+            try:\n+                _site = context.unrestrictedTraverse(site_path)\n+            except NotFound:\n+                # Oh.  This path is not findable.  So we will not consider\n+                # it below as a thing we can return to stand in for ISite.\n+                continue\n             if ISite.providedBy(_site):\n                 subsites.append(idx)\n             else:\n'

