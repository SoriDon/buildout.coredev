Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-11-03T14:25:07-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/e53552270a439a79da8b600b948cfed207124fe9

Add utility method to retrieve the top most parent request from a sub request.

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/test_utils.py
M Products/CMFPlone/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 604f482..9f6267e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -46,6 +46,9 @@ Breaking changes:
 
 New features:
 
+- Add utility method to retrieve the top most parent request from a sub request.
+  [thet]
+
 - Add sort_on field to search controlpanel.
   [rodfersou]
 
diff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py
index f902b2e..7fcbc97 100644
--- a/Products/CMFPlone/tests/test_utils.py
+++ b/Products/CMFPlone/tests/test_utils.py
@@ -24,7 +24,9 @@
 
 from Products.CMFPlone.interfaces import ISiteSchema
 from zope.component import getUtility
+from zope.interface import alsoProvides
 from plone.registry.interfaces import IRegistry
+from plone.subrequest.interfaces import ISubRequest
 
 
 SITE_LOGO_BASE64 = 'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA'\
@@ -48,6 +50,31 @@ def test_bodyfinder(self):
         self.assertEqual(bodyfinder(STX_WITH_HTML),
                          '<p>Hello world, I am Bruce.</p>')
 
+    def test_get_top_request(self):
+        """If in a subrequest, ``get_top_request`` should always return the top
+        most request.
+        """
+        from Products.CMFPlone.utils import get_top_request
+
+        class MockRequest(object):
+
+            def __init__(self, parent_request=None):
+                self._dict = {}
+                if parent_request:
+                    self._dict['PARENT_REQUEST'] = parent_request
+                    alsoProvides(self, ISubRequest)
+
+            def get(self, key, default=None):
+                return self._dict.get(key, default)
+
+        req0 = MockRequest()
+        req1 = MockRequest(req0)
+        req2 = MockRequest(req1)
+
+        self.assertEqual(get_top_request(req0), req0)
+        self.assertEqual(get_top_request(req1), req0)
+        self.assertEqual(get_top_request(req2), req0)
+
 
 class LogoTests(PloneTestCase.PloneTestCase):
 
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 3beaf5e..771f43d 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -16,6 +16,7 @@
 from os.path import join, abspath, split
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
+from plone.subrequest.interfaces import ISubRequest
 from Products.CMFCore.permissions import ManageUsers
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
@@ -716,3 +717,13 @@ def get_installer(context, request=None):
         request = aq_get(context, 'REQUEST', None)
     view = getMultiAdapter((context, request), name='installer')
     return view
+
+
+def get_top_request(request):
+    """Get highest request from a subrequest.
+    """
+    def _top_request(req):
+        if ISubRequest.providedBy(req):
+            return _top_request(req.get('PARENT_REQUEST', None))
+        return req
+    return _top_request(request)
diff --git a/setup.py b/setup.py
index 9052c5d..7c1ae06 100644
--- a/setup.py
+++ b/setup.py
@@ -117,6 +117,7 @@
         'plone.registry',
         'plone.schema',
         'plone.session',
+        'plone.subrequest',
         'plone.theme',
         'plonetheme.barceloneta',
         'slimit',


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-11-04T14:04:59-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1fec0121178fa6c5ef48f608efdbabc6101bae65

Support adding or removing bundles and resources on a request when working with resource tiles in a subrequest.

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9f6267e..2d19800 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -81,6 +81,9 @@ New features:
 
 Bug fixes:
 
+- Support adding or removing bundles and resources on a request when working with resource tiles in a subrequest.
+  [thet]
+
 - Remove jquery.cookie from plone-logged-in bundle's stub_js_modules.
   The toolbar, which has a dependency on jquery.cookie,
   was moved from the plone bundle to plone-logged-in in CMPlone 5.1a2.
diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py
index 9b2b55d..47f3d2f 100644
--- a/Products/CMFPlone/resources/browser/resource.py
+++ b/Products/CMFPlone/resources/browser/resource.py
@@ -15,6 +15,7 @@
 from Products.CMFCore.utils import _getAuthenticatedUser
 from plone.memoize.view import memoize
 from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
+from Products.CMFPlone.utils import get_top_request
 
 from .combine import get_production_resource_directory
 
@@ -134,13 +135,14 @@ def get_cooked_bundles(self):
             disabled_diazo_bundles = self.themeObj.disabled_bundles
 
         # Request set bundles
+        request = get_top_request(self.request)  # might be a subrequest
         enabled_request_bundles = []
         disabled_request_bundles = []
-        if hasattr(self.request, 'enabled_bundles'):
-            enabled_request_bundles.extend(self.request.enabled_bundles)
+        if hasattr(request, 'enabled_bundles'):
+            enabled_request_bundles.extend(request.enabled_bundles)
 
-        if hasattr(self.request, 'disabled_bundles'):
-            disabled_request_bundles.extend(self.request.disabled_bundles)
+        if hasattr(request, 'disabled_bundles'):
+            disabled_request_bundles.extend(request.disabled_bundles)
 
         for key, bundle in bundles.items():
             # The diazo manifest and request bundles are more important than
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index f49bcdf..a6df2c7 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -4,6 +4,7 @@
 
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.utils import get_top_request
 from zope.component import getMultiAdapter
 
 
@@ -149,9 +150,10 @@ def scripts(self):
             result.extend(self.ordered_bundles_result(production=True))
 
         # Add manual added resources
-        if hasattr(self.request, 'enabled_resources'):
+        request = get_top_request(self.request)  # might be a subrequest
+        if hasattr(request, 'enabled_resources'):
             resources = self.get_resources()
-            for resource in self.request.enabled_resources:
+            for resource in request.enabled_resources:
                 if resource in resources:
                     data = resources[resource]
                     if data.js:
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index 7561e91..ce5f316 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -4,6 +4,7 @@
 
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.utils import get_top_request
 
 
 class StylesView(ResourceView):
@@ -116,8 +117,9 @@ def styles(self):
 
         # Add manual added resources
         resources = self.get_resources()
-        if hasattr(self.request, 'enabled_resources'):
-            for resource in self.request.enabled_resources:
+        request = get_top_request(self.request)  # might be a subrequest
+        if hasattr(request, 'enabled_resources'):
+            for resource in request.enabled_resources:
                 if resource in resources:
                     for data in self.get_urls(resources[resource], None):
                         result.append(data)
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 21a145a..6beeea9 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -11,8 +11,10 @@
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
 from Products.CMFPlone.resources import add_bundle_on_request
 from Products.CMFPlone.resources import add_resource_on_request
+from Products.CMFPlone.resources import remove_bundle_on_request
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
+from Products.CMFPlone.resources.browser.styles import StylesView
 from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
@@ -301,9 +303,23 @@ def test_get_require_js_config_uses_stub_modules(self):
 
 
 class DummyResource(object):
+    def __init__(self, name):
+        self.js = name
+        self.css = [name, ]
 
-    def __init__(self, js):
-        self.js = js
+
+class DummyBundle(object):
+    def __init__(self, name, enabled=True):
+        self.__prefix__ = 'test/' + name
+        self.compile = True
+        self.conditionalcomment = None
+        self.csscompilation = '++resource++' + name + '.css'
+        self.depends = None
+        self.enabled = enabled
+        self.expression = None
+        self.jscompilation = '++resource++' + name + '.js'
+        self.last_compilation = '123'
+        self.resources = []
 
 
 class TestScriptsViewlet(PloneTestCase.PloneTestCase):
@@ -359,3 +375,135 @@ def test_request_bundles_not_add_same_twice(self):
         add_bundle_on_request(req, 'foo')
 
         self.assertEqual(len(req.enabled_bundles), 1)
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_bundles',
+        new=lambda self: {'foo': DummyBundle('foo', enabled=False)}
+    )
+    def test_add_bundle_on_request_with_subrequest(self):
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # add a bundle via the main request
+        add_bundle_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+
+        # Send resource registry in development mode
+        # Via a fake registry to allow accessing like this:
+        # self.registry.records['plone.resources.development'].value
+        scripts.registry = type(
+            'reg',
+            (object, ),
+            {'records': {
+                'plone.resources.development': type(
+                    'val',
+                    (object, ),
+                    {'value': True}
+                )()
+            }}
+        )()
+        self.assertTrue(scripts.development)
+
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1],
+            {
+                'src': 'http://nohost/plone/++resource++foo.js?version=123',
+                'conditionalcomment': None,
+                'bundle': 'foo'
+            }
+        )
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_bundles',
+        new=lambda self: {'foo': DummyBundle('foo', enabled=True)}
+    )
+    def test_remove_bundle_on_request_with_subrequest(self):
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # remove the enabled 'foo' bundle
+        remove_bundle_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+
+        # Send resource registry in development mode
+        # Via a fake registry to allow accessing like this:
+        # self.registry.records['plone.resources.development'].value
+        scripts.registry = type(
+            'reg',
+            (object, ),
+            {'records': {
+                'plone.resources.development': type(
+                    'val',
+                    (object, ),
+                    {'value': True}
+                )()
+            }}
+        )()
+        self.assertTrue(scripts.development)
+
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            filter(lambda it: 'foo' in it['src'], results),
+            []
+        )
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.js')}
+    )
+    @mock.patch.object(
+        StylesView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.css')}
+    )
+    def test_add_resource_on_request_with_subrequest(self):
+        """Check, if a resource added at a main request is picked up from a
+        subrequest for creating the header scripts section.
+        """
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # add a resource to main request
+        add_resource_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1],
+            {
+                'src': 'http://nohost/plone/++resource++foo.js',
+                'conditionalcomment': '',
+                'bundle': 'none'
+            }
+        )
+
+        styles = StylesView(self.layer['portal'], subreq, None)
+        styles.update()
+        results = styles.styles()
+        self.assertEqual(
+            filter(lambda it: 'foo' in it['src'], results)[0],
+            {
+                'src': 'http://nohost/plone/++resource++foo.css',
+                'conditionalcomment': '',
+                'rel': 'stylesheet',
+                'bundle': 'none',
+            }
+        )
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 771f43d..922ef00 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -16,7 +16,6 @@
 from os.path import join, abspath, split
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
-from plone.subrequest.interfaces import ISubRequest
 from Products.CMFCore.permissions import ManageUsers
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
@@ -722,8 +721,8 @@ def get_installer(context, request=None):
 def get_top_request(request):
     """Get highest request from a subrequest.
     """
+
     def _top_request(req):
-        if ISubRequest.providedBy(req):
-            return _top_request(req.get('PARENT_REQUEST', None))
-        return req
+        parent_request = req.get('PARENT_REQUEST', None)
+        return _top_request(parent_request) if parent_request else req
     return _top_request(request)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-11-06T16:55:21+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/aadf2d1e2708826da8fbb35ba2ff53c24b207e00

Merge pull request #1825 from plone/thet-cookbundle-subrequest

FIX: adding resources on request when using tiles with subrequests

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_utils.py
M Products/CMFPlone/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 604f482..2d19800 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -46,6 +46,9 @@ Breaking changes:
 
 New features:
 
+- Add utility method to retrieve the top most parent request from a sub request.
+  [thet]
+
 - Add sort_on field to search controlpanel.
   [rodfersou]
 
@@ -78,6 +81,9 @@ New features:
 
 Bug fixes:
 
+- Support adding or removing bundles and resources on a request when working with resource tiles in a subrequest.
+  [thet]
+
 - Remove jquery.cookie from plone-logged-in bundle's stub_js_modules.
   The toolbar, which has a dependency on jquery.cookie,
   was moved from the plone bundle to plone-logged-in in CMPlone 5.1a2.
diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py
index 9b2b55d..47f3d2f 100644
--- a/Products/CMFPlone/resources/browser/resource.py
+++ b/Products/CMFPlone/resources/browser/resource.py
@@ -15,6 +15,7 @@
 from Products.CMFCore.utils import _getAuthenticatedUser
 from plone.memoize.view import memoize
 from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
+from Products.CMFPlone.utils import get_top_request
 
 from .combine import get_production_resource_directory
 
@@ -134,13 +135,14 @@ def get_cooked_bundles(self):
             disabled_diazo_bundles = self.themeObj.disabled_bundles
 
         # Request set bundles
+        request = get_top_request(self.request)  # might be a subrequest
         enabled_request_bundles = []
         disabled_request_bundles = []
-        if hasattr(self.request, 'enabled_bundles'):
-            enabled_request_bundles.extend(self.request.enabled_bundles)
+        if hasattr(request, 'enabled_bundles'):
+            enabled_request_bundles.extend(request.enabled_bundles)
 
-        if hasattr(self.request, 'disabled_bundles'):
-            disabled_request_bundles.extend(self.request.disabled_bundles)
+        if hasattr(request, 'disabled_bundles'):
+            disabled_request_bundles.extend(request.disabled_bundles)
 
         for key, bundle in bundles.items():
             # The diazo manifest and request bundles are more important than
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index f49bcdf..a6df2c7 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -4,6 +4,7 @@
 
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.utils import get_top_request
 from zope.component import getMultiAdapter
 
 
@@ -149,9 +150,10 @@ def scripts(self):
             result.extend(self.ordered_bundles_result(production=True))
 
         # Add manual added resources
-        if hasattr(self.request, 'enabled_resources'):
+        request = get_top_request(self.request)  # might be a subrequest
+        if hasattr(request, 'enabled_resources'):
             resources = self.get_resources()
-            for resource in self.request.enabled_resources:
+            for resource in request.enabled_resources:
                 if resource in resources:
                     data = resources[resource]
                     if data.js:
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index 7561e91..ce5f316 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -4,6 +4,7 @@
 
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.utils import get_top_request
 
 
 class StylesView(ResourceView):
@@ -116,8 +117,9 @@ def styles(self):
 
         # Add manual added resources
         resources = self.get_resources()
-        if hasattr(self.request, 'enabled_resources'):
-            for resource in self.request.enabled_resources:
+        request = get_top_request(self.request)  # might be a subrequest
+        if hasattr(request, 'enabled_resources'):
+            for resource in request.enabled_resources:
                 if resource in resources:
                     for data in self.get_urls(resources[resource], None):
                         result.append(data)
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 21a145a..6beeea9 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -11,8 +11,10 @@
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME
 from Products.CMFPlone.resources import add_bundle_on_request
 from Products.CMFPlone.resources import add_resource_on_request
+from Products.CMFPlone.resources import remove_bundle_on_request
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
+from Products.CMFPlone.resources.browser.styles import StylesView
 from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
@@ -301,9 +303,23 @@ def test_get_require_js_config_uses_stub_modules(self):
 
 
 class DummyResource(object):
+    def __init__(self, name):
+        self.js = name
+        self.css = [name, ]
 
-    def __init__(self, js):
-        self.js = js
+
+class DummyBundle(object):
+    def __init__(self, name, enabled=True):
+        self.__prefix__ = 'test/' + name
+        self.compile = True
+        self.conditionalcomment = None
+        self.csscompilation = '++resource++' + name + '.css'
+        self.depends = None
+        self.enabled = enabled
+        self.expression = None
+        self.jscompilation = '++resource++' + name + '.js'
+        self.last_compilation = '123'
+        self.resources = []
 
 
 class TestScriptsViewlet(PloneTestCase.PloneTestCase):
@@ -359,3 +375,135 @@ def test_request_bundles_not_add_same_twice(self):
         add_bundle_on_request(req, 'foo')
 
         self.assertEqual(len(req.enabled_bundles), 1)
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_bundles',
+        new=lambda self: {'foo': DummyBundle('foo', enabled=False)}
+    )
+    def test_add_bundle_on_request_with_subrequest(self):
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # add a bundle via the main request
+        add_bundle_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+
+        # Send resource registry in development mode
+        # Via a fake registry to allow accessing like this:
+        # self.registry.records['plone.resources.development'].value
+        scripts.registry = type(
+            'reg',
+            (object, ),
+            {'records': {
+                'plone.resources.development': type(
+                    'val',
+                    (object, ),
+                    {'value': True}
+                )()
+            }}
+        )()
+        self.assertTrue(scripts.development)
+
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1],
+            {
+                'src': 'http://nohost/plone/++resource++foo.js?version=123',
+                'conditionalcomment': None,
+                'bundle': 'foo'
+            }
+        )
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_bundles',
+        new=lambda self: {'foo': DummyBundle('foo', enabled=True)}
+    )
+    def test_remove_bundle_on_request_with_subrequest(self):
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # remove the enabled 'foo' bundle
+        remove_bundle_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+
+        # Send resource registry in development mode
+        # Via a fake registry to allow accessing like this:
+        # self.registry.records['plone.resources.development'].value
+        scripts.registry = type(
+            'reg',
+            (object, ),
+            {'records': {
+                'plone.resources.development': type(
+                    'val',
+                    (object, ),
+                    {'value': True}
+                )()
+            }}
+        )()
+        self.assertTrue(scripts.development)
+
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            filter(lambda it: 'foo' in it['src'], results),
+            []
+        )
+
+    @mock.patch.object(
+        ScriptsView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.js')}
+    )
+    @mock.patch.object(
+        StylesView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.css')}
+    )
+    def test_add_resource_on_request_with_subrequest(self):
+        """Check, if a resource added at a main request is picked up from a
+        subrequest for creating the header scripts section.
+        """
+        req = self.layer['request']
+
+        # create a subrequest.
+        subreq = req.clone()
+        subreq['PARENT_REQUEST'] = req
+
+        # add a resource to main request
+        add_resource_on_request(req, 'foo')
+
+        scripts = ScriptsView(self.layer['portal'], subreq, None)
+        scripts.update()
+        results = scripts.scripts()
+        self.assertEqual(
+            results[-1],
+            {
+                'src': 'http://nohost/plone/++resource++foo.js',
+                'conditionalcomment': '',
+                'bundle': 'none'
+            }
+        )
+
+        styles = StylesView(self.layer['portal'], subreq, None)
+        styles.update()
+        results = styles.styles()
+        self.assertEqual(
+            filter(lambda it: 'foo' in it['src'], results)[0],
+            {
+                'src': 'http://nohost/plone/++resource++foo.css',
+                'conditionalcomment': '',
+                'rel': 'stylesheet',
+                'bundle': 'none',
+            }
+        )
diff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py
index f902b2e..7fcbc97 100644
--- a/Products/CMFPlone/tests/test_utils.py
+++ b/Products/CMFPlone/tests/test_utils.py
@@ -24,7 +24,9 @@
 
 from Products.CMFPlone.interfaces import ISiteSchema
 from zope.component import getUtility
+from zope.interface import alsoProvides
 from plone.registry.interfaces import IRegistry
+from plone.subrequest.interfaces import ISubRequest
 
 
 SITE_LOGO_BASE64 = 'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA'\
@@ -48,6 +50,31 @@ def test_bodyfinder(self):
         self.assertEqual(bodyfinder(STX_WITH_HTML),
                          '<p>Hello world, I am Bruce.</p>')
 
+    def test_get_top_request(self):
+        """If in a subrequest, ``get_top_request`` should always return the top
+        most request.
+        """
+        from Products.CMFPlone.utils import get_top_request
+
+        class MockRequest(object):
+
+            def __init__(self, parent_request=None):
+                self._dict = {}
+                if parent_request:
+                    self._dict['PARENT_REQUEST'] = parent_request
+                    alsoProvides(self, ISubRequest)
+
+            def get(self, key, default=None):
+                return self._dict.get(key, default)
+
+        req0 = MockRequest()
+        req1 = MockRequest(req0)
+        req2 = MockRequest(req1)
+
+        self.assertEqual(get_top_request(req0), req0)
+        self.assertEqual(get_top_request(req1), req0)
+        self.assertEqual(get_top_request(req2), req0)
+
 
 class LogoTests(PloneTestCase.PloneTestCase):
 
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 3beaf5e..922ef00 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -716,3 +716,13 @@ def get_installer(context, request=None):
         request = aq_get(context, 'REQUEST', None)
     view = getMultiAdapter((context, request), name='installer')
     return view
+
+
+def get_top_request(request):
+    """Get highest request from a subrequest.
+    """
+
+    def _top_request(req):
+        parent_request = req.get('PARENT_REQUEST', None)
+        return _top_request(parent_request) if parent_request else req
+    return _top_request(request)
diff --git a/setup.py b/setup.py
index 9052c5d..7c1ae06 100644
--- a/setup.py
+++ b/setup.py
@@ -117,6 +117,7 @@
         'plone.registry',
         'plone.schema',
         'plone.session',
+        'plone.subrequest',
         'plone.theme',
         'plonetheme.barceloneta',
         'slimit',


