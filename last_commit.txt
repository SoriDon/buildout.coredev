Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-03T20:04:32+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/cb90a5ab98b01cc2fd83db61af6a1406f8c858ac

Add coresandbox fixture for Volto's Cypress tests

Files changed:
A src/plone/volto/coresandbox/__init__.py
A src/plone/volto/coresandbox/configure.zcml
A src/plone/volto/coresandbox/example.py
A src/plone/volto/coresandbox/vocabularies.py
A src/plone/volto/profiles/coresandbox/diff_tool.xml
A src/plone/volto/profiles/coresandbox/metadata.xml
A src/plone/volto/profiles/coresandbox/repositorytool.xml
A src/plone/volto/profiles/coresandbox/types.xml
A src/plone/volto/profiles/coresandbox/types/example.xml
A src/plone/volto/tests/test_coresandbox.py
M CHANGES.rst
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/setuphandlers.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d411198..48ffcd5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 3.1.0a7 (unreleased)\n --------------------\n \n-- Nothing changed yet.\n+- Added coresandbox fixture for Volto\'s cypress tests\n+  [sneridagh]\n \n \n 3.1.0a6 (2021-11-22)\ndiff --git a/setup.py b/setup.py\nindex 89e82f2..cb979b2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,6 +58,7 @@ def readfile(name):\n         "setuptools",\n         "plone.restapi>=8.13.0",\n         "collective.folderishtypes[dexterity]",\n+        "plone.app.vocabularies>=4.3.0",\n     ],\n     extras_require={\n         "test": [\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex df6c21a..41793a9 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -63,6 +63,17 @@\n       post_handler=".setuphandlers.create_demo_homepage"\n       />\n \n+  <!-- Fixture for coresandbox Cypress tests in Volto repo -->\n+  <genericsetup:registerProfile\n+      name="coresandbox"\n+      title="plone.volto coresandbox Cypress tests fixtures"\n+      description="Special test fixture for coresandbox use cases"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/coresandbox"\n+      post_handler=".setuphandlers.post_install_coresandbox"\n+      />\n+\n+  <!-- Fixture for multilingual Cypress tests in Volto repo -->\n   <genericsetup:registerProfile\n       name="multilingual"\n       title="plone.volto multilingual Cypress tests fixtures"\ndiff --git a/src/plone/volto/coresandbox/__init__.py b/src/plone/volto/coresandbox/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/plone/volto/coresandbox/configure.zcml b/src/plone/volto/coresandbox/configure.zcml\nnew file mode 100644\nindex 0000000..b597667\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/configure.zcml\n@@ -0,0 +1,12 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    i18n_domain="plone.volto">\n+\n+  <utility\n+      name="plone.volto.coresandbox.vocabularies.documents"\n+      component=".vocabularies.DocumentVocabularyFactory" />\n+\n+</configure>\ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nnew file mode 100644\nindex 0000000..f45706c\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -0,0 +1,835 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.multilingual.browser.interfaces import make_relation_root_path\n+from plone.app.textfield import RichText\n+from plone.app.vocabularies.catalog import CatalogSource\n+from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n+from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+from plone.app.z3cform.widget import RelatedItemsFieldWidget\n+from plone.app.z3cform.widget import SelectFieldWidget\n+from plone.autoform import directives\n+from plone.dexterity.content import Container\n+\n+from plone.namedfile.field import NamedBlobFile\n+from plone.namedfile.field import NamedBlobImage\n+from plone.schema import Email\n+\n+# from plone.schema import (\n+#     Dict,\n+# )  # take Dict field from plone.schema to use the widget attribute\n+from plone.supermodel import model\n+from plone.supermodel.directives import fieldset\n+from plone.supermodel.directives import primary\n+\n+from z3c.form.browser.checkbox import CheckBoxFieldWidget\n+from z3c.form.browser.radio import RadioFieldWidget\n+\n+from z3c.relationfield.schema import RelationChoice\n+from z3c.relationfield.schema import RelationList\n+from zope import schema\n+from zope.interface import implementer\n+\n+from zope.interface import Interface\n+\n+\n+class IExample(model.Schema):\n+    """Dexterity-Schema with all field-types."""\n+\n+    # The most used fields\n+    # textline, text, bool, richtext, email\n+\n+    fieldset(\n+        "numberfields",\n+        label=u"Number fields",\n+        fields=("int_field", "float_field"),\n+    )\n+\n+    fieldset(\n+        "datetimefields",\n+        label=u"Date and time fields",\n+        fields=(\n+            "datetime_field",\n+            "date_field",\n+            # "time_field", # Not supported by plone.restapi yet\n+            # "timedelta_field", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "choicefields",\n+        label=u"Choice and Multiple Choice fields",\n+        fields=(\n+            "choice_field",\n+            "choice_field_radio",\n+            "choice_field_select",\n+            "choice_field_voc",\n+            "list_field",\n+            "list_field_checkbox",\n+            "list_field_select",\n+            "list_field_voc_unconstrained",\n+            "tuple_field",\n+            "set_field",\n+            "set_field_checkbox",\n+        ),\n+    )\n+\n+    fieldset(\n+        "relationfields",\n+        label=u"Relation fields",\n+        fields=(\n+            "relationchoice_field",\n+            "relationlist_field",\n+            "relationchoice_field_constrained",\n+            "relationlist_field_constrained",\n+            "relationlist_field_search_mode",\n+            "relationchoice_field_select",\n+            "relationchoice_field_radio",\n+            "relationlist_field_select",\n+            "relationlist_field_checkbox",\n+            # "relationchoice_field_ajax_select", # Not supported by plone.restapi yet\n+            # "relationlist_field_ajax_select", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "uuidrelationfields",\n+        label=u"Relation widgets with uuids",\n+        fields=(\n+            "uuid_choice_field",\n+            "uuid_list_field",\n+            "uuid_choice_field_constrained",\n+            "uuid_list_field_constrained",\n+            "uuid_list_field_search_mode",\n+            "uuid_choice_field_select",\n+            "uuid_choice_field_radio",\n+            "uuid_list_field_select",\n+            "uuid_list_field_checkbox",\n+            # "uuid_choice_field_ajax_select", # Not supported by plone.restapi yet\n+            # "uuid_list_field_ajax_select", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "filefields",\n+        label=u"File fields",\n+        fields=("file_field", "image_field"),\n+    )\n+\n+    fieldset(\n+        "otherfields",\n+        label=u"Other fields",\n+        fields=(\n+            "uri_field",\n+            "sourcetext_field",\n+            "ascii_field",\n+            "bytesline_field",\n+            "asciiline_field",\n+            "pythonidentifier_field",\n+            "dottedname_field",\n+            "dict_field",\n+            # "vocabularyterms_field", # Not supported by plone.restapi yet\n+            # "vocabularytermstranslation_field", # Not supported by plone.restapi yet\n+            "dict_field_with_choice",\n+        ),\n+    )\n+\n+    primary("title")\n+    title = schema.TextLine(\n+        title=u"Primary Field (Textline)",\n+        description=u"zope.schema.TextLine",\n+        required=True,\n+    )\n+\n+    description = schema.TextLine(\n+        title=u"Description (Textline)",\n+        description=u"zope.schema.TextLine",\n+        required=False,\n+    )\n+\n+    text_field = schema.Text(\n+        title=u"Text Field",\n+        description=u"zope.schema.Text",\n+        required=False,\n+        missing_value=u"",\n+    )\n+\n+    textline_field = schema.TextLine(\n+        title=u"Textline field",\n+        description=u"A simple input field (schema.TextLine)",\n+        required=False,\n+    )\n+\n+    bool_field = schema.Bool(\n+        title=u"Boolean field",\n+        description=u"zope.schema.Bool",\n+        required=False,\n+    )\n+\n+    choice_field = schema.Choice(\n+        title=u"Choice field",\n+        description=u"zope.schema.Choice",\n+        values=[u"One", u"Two", u"Three"],\n+        required=True,\n+    )\n+\n+    directives.widget(choice_field_radio=RadioFieldWidget)\n+    choice_field_radio = schema.Choice(\n+        title=u"Choice field with radio boxes",\n+        description=u"zope.schema.Choice",\n+        values=[u"One", u"Two", u"Three"],\n+        required=False,\n+    )\n+\n+    choice_field_voc = schema.Choice(\n+        title=u"Choicefield with values from named vocabulary",\n+        description=u"zope.schema.Choice",\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        required=False,\n+    )\n+\n+    directives.widget(choice_field_select=SelectFieldWidget)\n+    choice_field_select = schema.Choice(\n+        title=u"Choicefield with select2 widget",\n+        description=u"zope.schema.Choice",\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        required=False,\n+    )\n+\n+    list_field = schema.List(\n+        title=u"List field",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+\n+    directives.widget(list_field_checkbox=CheckBoxFieldWidget)\n+    list_field_checkbox = schema.List(\n+        title=u"List field with checkboxes",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+\n+    directives.widget(list_field_select=SelectFieldWidget)\n+    list_field_select = schema.List(\n+        title=u"List field with select widget",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+\n+    list_field_voc_unconstrained = schema.List(\n+        title=u"List field with values from vocabulary but not constrained to them.",\n+        description=u"zope.schema.List",\n+        value_type=schema.TextLine(),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "list_field_voc_unconstrained",\n+        AjaxSelectFieldWidget,\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    tuple_field = schema.Tuple(\n+        title=u"Tuple field",\n+        description=u"zope.schema.Tuple",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=(),\n+    )\n+\n+    set_field = schema.Set(\n+        title=u"Set field",\n+        description=u"zope.schema.Set",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value={},\n+    )\n+\n+    directives.widget(set_field_checkbox=CheckBoxFieldWidget)\n+    set_field_checkbox = schema.Set(\n+        title=u"Set field with checkboxes",\n+        description=u"zope.schema.Set",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value={},\n+    )\n+\n+    # File fields\n+    image_field = NamedBlobImage(\n+        title=u"Image field",\n+        description=u"A upload field for images (plone.namedfile.field.NamedBlobImage)",\n+        required=False,\n+    )\n+\n+    file_field = NamedBlobFile(\n+        title=u"File field",\n+        description=u"A upload field for files (plone.namedfile.field.NamedBlobFile)",\n+        required=False,\n+    )\n+\n+    # Date and Time fields\n+    datetime_field = schema.Datetime(\n+        title=u"Datetime field",\n+        description=u"Uses a date and time picker (zope.schema.Datetime)",\n+        required=False,\n+    )\n+\n+    date_field = schema.Date(\n+        title=u"Date field",\n+        description=u"Uses a date picker (zope.schema.Date)",\n+        required=False,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # time_field = schema.Time(\n+    #     title=u"Time field",\n+    #     description=u"zope.schema.Time",\n+    #     required=False,\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # timedelta_field = schema.Timedelta(\n+    #     title=u"Timedelta field",\n+    #     description=u"zope.schema.Timedelta",\n+    #     required=False,\n+    # )\n+\n+    # # Relation Fields\n+    relationchoice_field = RelationChoice(\n+        title=u"Relationchoice field",\n+        description=u"z3c.relationfield.schema.RelationChoice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+\n+    relationlist_field = RelationList(\n+        title=u"Relationlist Field",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+\n+    relationchoice_field_constrained = RelationChoice(\n+        title=u"Relationchoice field (only allows Documents)",\n+        description=u"z3c.relationfield.schema.RelationChoice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document"]},\n+    )\n+\n+    relationlist_field_constrained = RelationList(\n+        title=u"Relationlist Field (only allows Documents and Events)",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "relationlist_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document", "Event"]},\n+    )\n+\n+    relationlist_field_search_mode = RelationList(\n+        title=u"Relationlist Field in Search Mode (constrained to published Documents and Events)",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(\n+            source=CatalogSource(\n+                portal_type=["Document", "Event"], review_state="published"\n+            )\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "relationlist_field_search_mode",\n+        RelatedItemsFieldWidget,\n+        pattern_options={\n+            "baseCriteria": [  # This is a optimization that limits the catalog-query\n+                {\n+                    "i": "portal_type",\n+                    "o": "plone.app.querystring.operation.selection.any",\n+                    "v": ["Document", "Event"],\n+                },\n+                {\n+                    "i": "review_state",\n+                    "o": "plone.app.querystring.operation.selection.any",\n+                    "v": "published",\n+                },\n+            ],\n+            "mode": "search",\n+        },\n+    )\n+\n+    # From here on we use other widgets than the default RelatedItemsFieldWidget\n+\n+    # This one also works in Volto!\n+    # All other options use the default ObjectWidget in Volto so far.\n+    relationchoice_field_select = RelationChoice(\n+        title=u"RelationChoice with Select Widget",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            }\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_select",\n+        SelectFieldWidget,\n+    )\n+\n+    relationchoice_field_radio = RelationChoice(\n+        title=u"RelationChoice with Radio Widget (and customized title-template)",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            },\n+            title_template="{brain.Title}",\n+        ),  # Set a custom vocabulary item title\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_radio",\n+        RadioFieldWidget,\n+    )\n+\n+    relationlist_field_select = RelationList(\n+        title=u"RelationList with select widget with items from a named vocabulary",\n+        value_type=RelationChoice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationlist_field_select",\n+        SelectFieldWidget,\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    relationlist_field_checkbox = RelationList(\n+        title=u"RelationList with Checkboxes",\n+        value_type=RelationChoice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationlist_field_checkbox",\n+        CheckBoxFieldWidget,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # relationchoice_field_ajax_select = RelationChoice(\n+    #     title=u"Relationchoice Field with AJAXSelect",\n+    #     description=u"z3c.relationfield.schema.RelationChoice",\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "relationchoice_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # relationlist_field_ajax_select = RelationList(\n+    #     title=u"Relationlist Field with AJAXSelect",\n+    #     description=u"z3c.relationfield.schema.RelationList",\n+    #     value_type=RelationChoice(\n+    #         vocabulary=StaticCatalogVocabulary(\n+    #             {\n+    #                 "portal_type": ["Document", "Event"],\n+    #                 "review_state": "published",\n+    #             }\n+    #         )\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "relationlist_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event", "Folder"],\n+    #         },\n+    #         title_template="{brain.Type}: {brain.Title} at {path}",\n+    #     ),  # Custom item rendering\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # These look like relationsfields (see above) but only store the uuid(s) of the selected target\n+    # as a string in a the field instead of a RelationValue.\n+    # A good way to use these is in combination with a index that allows you to query these connenctions.\n+    uuid_choice_field = schema.Choice(\n+        title=u"Choice field with RelatedItems widget storing uuids",\n+        description=u"schema.Choice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget("uuid_choice_field", RelatedItemsFieldWidget)\n+\n+    uuid_list_field = schema.List(\n+        title=u"List Field with RelatedItems widget storing uuids",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget("uuid_list_field", RelatedItemsFieldWidget)\n+\n+    uuid_choice_field_constrained = schema.Choice(\n+        title=u"Choice field with RelatedItems widget storing uuids (only allows Documents)",\n+        description=u"schema.Choice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document"]},\n+    )\n+\n+    uuid_list_field_constrained = schema.List(\n+        title=u"List Field with RelatedItems widget storing uuids (only allows Documents and Events)",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "uuid_list_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document", "Folder"]},\n+    )\n+\n+    uuid_list_field_search_mode = schema.List(\n+        title=u"List Field with RelatedItems widget in Search Mode storing uuids",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(\n+            source=CatalogSource(\n+                portal_type=["Document", "Event"], review_state="published"\n+            )\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "uuid_list_field_search_mode",\n+        RelatedItemsFieldWidget,\n+        pattern_options={\n+            "selectableTypes": ["Document", "Folder"],\n+            "basePath": "",  # Start the search at the portal root\n+            "mode": "search",\n+        },\n+    )\n+\n+    # From here on we use other widgets than the default RelatedItemsFieldWidget\n+\n+    uuid_choice_field_select = schema.Choice(\n+        title=u"UUID Choice with select widget storing uuids",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            }\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_select",\n+        SelectFieldWidget,\n+    )\n+\n+    uuid_choice_field_radio = schema.Choice(\n+        title=u"RelationChoice with Radio widget storing uuids",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            },\n+            title_template="{brain.Title}",\n+        ),  # Set a custom vocabulary item title\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_radio",\n+        RadioFieldWidget,\n+    )\n+\n+    uuid_list_field_select = schema.List(\n+        title=u"RelationList with select widget with items from a named vocabulary storing uuids",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_list_field_select",\n+        SelectFieldWidget,\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    uuid_list_field_checkbox = schema.List(\n+        title=u"RelationList with Checkboxes storing uuids",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_list_field_checkbox",\n+        CheckBoxFieldWidget,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # uuid_choice_field_ajax_select = schema.Choice(\n+    #     title=u"Relationchoice Field with AJAXSelect storing uuids",\n+    #     description=u"z3c.relationfield.schema.RelationChoice",\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "uuid_choice_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # uuid_list_field_ajax_select = schema.List(\n+    #     title=u"Relationlist Field with AJAXSelect storing uuids",\n+    #     description=u"z3c.relationfield.schema.RelationList",\n+    #     value_type=schema.Choice(\n+    #         vocabulary=StaticCatalogVocabulary(\n+    #             {\n+    #                 "portal_type": ["Document", "Event"],\n+    #                 "review_state": "published",\n+    #             }\n+    #         )\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "uuid_list_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         },\n+    #         title_template="{brain.Type}: {brain.Title} at {path}",\n+    #     ),  # Custom item rendering\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #         "closeOnSelect": False,  # - Leave dropdown open for multiple selection\n+    #     },\n+    # )\n+\n+    # Number fields\n+    int_field = schema.Int(\n+        title=u"Integer Field (e.g. 12)",\n+        description=u"zope.schema.Int",\n+        required=False,\n+    )\n+\n+    float_field = schema.Float(\n+        title=u"Float field, e.g. 12.7",\n+        description=u"zope.schema.Float",\n+        required=False,\n+    )\n+\n+    # Text fields\n+    email_field = Email(\n+        title=u"Email field",\n+        description=u"A simple input field for a email (plone.schema.email.Email)",\n+        required=False,\n+    )\n+\n+    uri_field = schema.URI(\n+        title=u"URI field",\n+        description=u"A simple input field for a URLs (zope.schema.URI)",\n+        required=False,\n+    )\n+\n+    richtext_field = RichText(\n+        title=u"RichText field",\n+        description=u"This uses a richtext editor. (plone.app.textfield.RichText)",\n+        max_length=2000,\n+        required=False,\n+    )\n+\n+    sourcetext_field = schema.SourceText(\n+        title=u"SourceText field",\n+        description=u"zope.schema.SourceText",\n+        required=False,\n+    )\n+\n+    ascii_field = schema.ASCII(\n+        title=u"ASCII field",\n+        description=u"zope.schema.ASCII",\n+        required=False,\n+    )\n+\n+    bytesline_field = schema.BytesLine(\n+        title=u"BytesLine field",\n+        description=u"zope.schema.BytesLine",\n+        required=False,\n+    )\n+\n+    asciiline_field = schema.ASCIILine(\n+        title=u"ASCIILine field",\n+        description=u"zope.schema.ASCIILine",\n+        required=False,\n+    )\n+\n+    pythonidentifier_field = schema.PythonIdentifier(\n+        title=u"PythonIdentifier field",\n+        description=u"zope.schema.PythonIdentifier",\n+        required=False,\n+    )\n+\n+    dottedname_field = schema.DottedName(\n+        title=u"DottedName field",\n+        description=u"zope.schema.DottedName",\n+        required=False,\n+    )\n+\n+    dict_field = schema.Dict(\n+        title=u"Dict field",\n+        description=u"zope.schema.Dict",\n+        required=False,\n+        key_type=schema.TextLine(\n+            title=u"Key",\n+            required=False,\n+        ),\n+        value_type=schema.TextLine(\n+            title=u"Value",\n+            required=False,\n+        ),\n+    )\n+\n+    # vocabularyterms_field = Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #     title=u"Vocabulary terms field",\n+    #     description=u"plone.schema.Dict field with value_type schema.TextLine and frontend widget \'VocabularyTermsWidget\'",\n+    #     required=False,\n+    #     key_type=schema.TextLine(\n+    #         title=u"Key",\n+    #         required=False,\n+    #     ),\n+    #     value_type=schema.TextLine(\n+    #         title=u"Value",\n+    #         required=False,\n+    #     ),\n+    #     widget="vocabularyterms",  # we use the widget attribute to apply the frontend widget VocabularyWidget\n+    # )\n+\n+    # vocabularytermstranslation_field = Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #     title=u"Vocabulary terms field with translations",\n+    #     description=u"plone.schema.Dict field with value_type Dict and frontend widget \'VocabularyTermsWidget\'",\n+    #     required=False,\n+    #     key_type=schema.TextLine(\n+    #         title=u"Key",\n+    #         required=False,\n+    #     ),\n+    #     value_type=Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #         title=u"Term translation",\n+    #         description=u"plone.schema.Dict field for translations of vocabulary term",\n+    #         required=True,\n+    #         key_type=schema.TextLine(\n+    #             title=u"Key",\n+    #             required=False,\n+    #         ),\n+    #         value_type=schema.TextLine(\n+    #             title=u"Value",\n+    #             required=False,\n+    #         ),\n+    #     ),\n+    #     widget="vocabularyterms",  # we use the widget attribute to apply the frontend widget VocabularyWidget\n+    # )\n+\n+    dict_field_with_choice = schema.Dict(\n+        title=u"Dict field with key and value as choice",\n+        description=u"zope.schema.Dict",\n+        required=False,\n+        key_type=schema.Choice(\n+            title=u"Key",\n+            values=[u"One", u"Two", u"Three"],\n+            required=False,\n+        ),\n+        value_type=schema.Set(\n+            title=u"Value",\n+            value_type=schema.Choice(\n+                values=[u"Beginner", u"Advanced", u"Professional"],\n+            ),\n+            required=False,\n+            missing_value={},\n+        ),\n+    )\n+\n+\n+@implementer(IExample)\n+class Example(Container):\n+    """Example instance class"""\ndiff --git a/src/plone/volto/coresandbox/vocabularies.py b/src/plone/volto/coresandbox/vocabularies.py\nnew file mode 100644\nindex 0000000..48096d6\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/vocabularies.py\n@@ -0,0 +1,13 @@\n+from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n+from zope.interface import provider\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+\n+@provider(IVocabularyFactory)\n+def DocumentVocabularyFactory(context=None):\n+    return StaticCatalogVocabulary(\n+        {\n+            "portal_type": ["Document", "News Item"],\n+            "sort_on": "sortable_title",\n+        }\n+    )\ndiff --git a/src/plone/volto/profiles/coresandbox/diff_tool.xml b/src/plone/volto/profiles/coresandbox/diff_tool.xml\nnew file mode 100644\nindex 0000000..fd83ec9\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/diff_tool.xml\n@@ -0,0 +1,8 @@\n+<?xml version="1.0"?>\n+<object>\n+  <difftypes>\n+    <type portal_type="example">\n+      <field name="any" difftype="Compound Diff for Dexterity types"/>\n+    </type>\n+  </difftypes>\n+</object>\n\\ No newline at end of file\ndiff --git a/src/plone/volto/profiles/coresandbox/metadata.xml b/src/plone/volto/profiles/coresandbox/metadata.xml\nnew file mode 100644\nindex 0000000..cae22a3\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/metadata.xml\n@@ -0,0 +1,6 @@\n+<metadata>\n+ <version>1000</version>\n+ <dependencies>\n+   <dependency>profile-plone.volto:default</dependency>\n+ </dependencies>\n+</metadata>\ndiff --git a/src/plone/volto/profiles/coresandbox/repositorytool.xml b/src/plone/volto/profiles/coresandbox/repositorytool.xml\nnew file mode 100644\nindex 0000000..5889d93\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/repositorytool.xml\n@@ -0,0 +1,10 @@\n+<?xml version="1.0"?>\n+<repositorytool>\n+  <policymap>\n+    <type name="example">\n+      <policy name="at_edit_autoversion"/>\n+      <policy name="version_on_revert"/>\n+    </type>\n+  </policymap>\n+</repositorytool>\n+\ndiff --git a/src/plone/volto/profiles/coresandbox/types.xml b/src/plone/volto/profiles/coresandbox/types.xml\nnew file mode 100644\nindex 0000000..d7f2fba\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/types.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<object name="portal_types" meta_type="Plone Types Tool">\n+ <object name="example" meta_type="Dexterity FTI"/>\n+</object>\ndiff --git a/src/plone/volto/profiles/coresandbox/types/example.xml b/src/plone/volto/profiles/coresandbox/types/example.xml\nnew file mode 100644\nindex 0000000..630ea2b\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/types/example.xml\n@@ -0,0 +1,49 @@\n+<?xml version="1.0"?>\n+<object name="example" meta_type="Dexterity FTI" i18n:domain="plone"\n+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="title" i18n:translate="">Example</property>\n+ <property name="description" i18n:translate=""></property>\n+ <property name="icon_expr"></property>\n+ <property name="factory">example</property>\n+ <property name="add_view_expr">string:${folder_url}/++add++example</property>\n+ <property name="link_target"></property>\n+ <property name="immediate_view">view</property>\n+ <property name="global_allow">True</property>\n+ <property name="filter_content_types">False</property>\n+ <property name="allowed_content_types" />\n+ <property name="allow_discussion">False</property>\n+ <property name="default_view">view</property>\n+ <property name="view_methods">\n+  <element value="view"/>\n+ </property>\n+ <property name="default_view_fallback">False</property>\n+ <property name="add_permission">cmf.AddPortalContent</property>\n+ <property name="klass">plone.volto.coresandbox.example.Example</property>\n+ <property name="schema">plone.volto.coresandbox.example.IExample</property>\n+ <property name="behaviors">\n+  <element value="plone.namefromtitle" />\n+  <element value="plone.allowdiscussion" />\n+  <element value="plone.excludefromnavigation" />\n+  <element value="plone.shortname" />\n+  <element value="plone.versioning" />\n+  <element value="plone.tableofcontents" />\n+  <element value="plone.locking" />\n+ </property>\n+ <property name="model_source"></property>\n+ <property name="model_file"></property>\n+ <property name="schema_policy">dexterity</property>\n+ <alias from="(Default)" to="(dynamic view)"/>\n+ <alias from="edit" to="@@edit"/>\n+ <alias from="sharing" to="@@sharing"/>\n+ <alias from="view" to="(selected layout)"/>\n+ <action title="View" action_id="view" category="object" condition_expr=""\n+    description="" icon_expr="" link_target="" url_expr="string:${object_url}"\n+    visible="True">\n+  <permission value="View"/>\n+ </action>\n+ <action title="Edit" action_id="edit" category="object" condition_expr=""\n+    description="" icon_expr="" link_target=""\n+    url_expr="string:${object_url}/edit" visible="True">\n+  <permission value="Modify portal content"/>\n+ </action>\n+</object>\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex c5f5d9a..8568fee 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -42,6 +42,10 @@ def uninstall(context):\n     # Do something at the end of the uninstallation of this package.\n \n \n+def post_install_coresandbox(context):\n+    """Post install script for multilingual fixture"""\n+\n+\n def post_install_multilingual(context):\n     """Post install script for multilingual fixture"""\n     enable_pam(context)\ndiff --git a/src/plone/volto/tests/test_coresandbox.py b/src/plone/volto/tests/test_coresandbox.py\nnew file mode 100644\nindex 0000000..9ceb6b2\n--- /dev/null\n+++ b/src/plone/volto/tests/test_coresandbox.py\n@@ -0,0 +1,36 @@\n+# -*- coding: utf-8 -*-\n+from fzj.internet.testing import PLONE_VOLTO_CORE_FUNCTIONAL_TESTING\n+from plone import api\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import RelativeSession\n+\n+import transaction\n+import unittest\n+\n+\n+class TestCoresandbox(unittest.TestCase):\n+\n+    layer = PLONE_VOLTO_CORE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        # transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_coresandbox_example_content_schema_endpoint(self):\n+        response = self.api_session.get("/@types/Example")\n+\n+        self.assertEqual(response.status_code, 200)\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-03T20:21:36+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/c12509e4e401da73231de178342236b9dc3fc815

Setup Testing

Files changed:
M plone-5.2.x.cfg
M setup.py
M src/plone/volto/coresandbox/example.py
M src/plone/volto/testing.py
M src/plone/volto/tests/test_coresandbox.py

b'diff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex b1fde4a..f0b45f7 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2.5/versions.cfg\n+    http://dist.plone.org/release/5.2.6/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n \n [versions]\n@@ -15,4 +15,4 @@ importlib-metadata = 1.7.0\n # Error: The requirement (\'importlib-metadata>=3.6\') is not allowed by your [versions] constraint (1.7.0)\n keyring = 22.0.1\n secretstorage = 3.3.1\n-jeepney = 0.7.1\n\\ No newline at end of file\n+jeepney = 0.7.1\ndiff --git a/setup.py b/setup.py\nindex cb979b2..15bedf7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -66,6 +66,7 @@ def readfile(name):\n             "plone.testing",\n             "plone.app.contenttypes",\n             "plone.app.robotframework[debug]",\n+            "collective.MockMailHost",\n         ]\n     },\n     entry_points="""\ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nindex f45706c..528658c 100644\n--- a/src/plone/volto/coresandbox/example.py\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.multilingual.browser.interfaces import make_relation_root_path\n from plone.app.textfield import RichText\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n@@ -28,8 +27,6 @@\n from zope import schema\n from zope.interface import implementer\n \n-from zope.interface import Interface\n-\n \n class IExample(model.Schema):\n     """Dexterity-Schema with all field-types."""\ndiff --git a/src/plone/volto/testing.py b/src/plone/volto/testing.py\nindex ac84d62..8565585 100644\n--- a/src/plone/volto/testing.py\n+++ b/src/plone/volto/testing.py\n@@ -14,6 +14,7 @@\n from plone.testing import z2\n \n import plone.volto\n+import plone.volto.coresandbox\n \n \n class PloneVoltoCoreLayer(PloneSandboxLayer):\n@@ -54,3 +55,49 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_VOLTO_CORE_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneVoltoCoreLayer:AcceptanceTesting",\n )\n+\n+\n+class PloneVoltoCoreSandboxLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=plone.volto)\n+        self.loadZCML(package=plone.volto.coresandbox)\n+\n+    def setUpPloneSite(self, portal):\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        login(portal, TEST_USER_NAME)\n+        api.content.create(\n+            type="Document", id="front-page", title="Welcome", container=portal\n+        )\n+        logout()\n+        applyProfile(portal, "plone.volto:coresandbox")\n+\n+\n+PLONE_VOLTO_CORESANDBOX_FIXTURE = PloneVoltoCoreSandboxLayer()\n+\n+\n+PLONE_VOLTO_CORESANDBOX_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_VOLTO_CORESANDBOX_FIXTURE,),\n+    name="PloneVoltoCoreSandboxLayer:IntegrationTesting",\n+)\n+\n+\n+PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_VOLTO_CORESANDBOX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneVoltoCoreSandboxLayer:FunctionalTesting",\n+)\n+\n+\n+PLONE_VOLTO_CORESANDBOX_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PLONE_VOLTO_CORESANDBOX_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="PloneVoltoCoreSandboxLayer:AcceptanceTesting",\n+)\ndiff --git a/src/plone/volto/tests/test_coresandbox.py b/src/plone/volto/tests/test_coresandbox.py\nindex 9ceb6b2..2dd4143 100644\n--- a/src/plone/volto/tests/test_coresandbox.py\n+++ b/src/plone/volto/tests/test_coresandbox.py\n@@ -1,19 +1,20 @@\n # -*- coding: utf-8 -*-\n-from fzj.internet.testing import PLONE_VOLTO_CORE_FUNCTIONAL_TESTING\n-from plone import api\n+from plone.volto.testing import PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n+\n+# from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import RelativeSession\n \n-import transaction\n+# import transaction\n import unittest\n \n \n class TestCoresandbox(unittest.TestCase):\n \n-    layer = PLONE_VOLTO_CORE_FUNCTIONAL_TESTING\n+    layer = PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.app = self.layer["app"]\n@@ -31,6 +32,6 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_coresandbox_example_content_schema_endpoint(self):\n-        response = self.api_session.get("/@types/Example")\n+        response = self.api_session.get("/@types/example")\n \n         self.assertEqual(response.status_code, 200)\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-03T20:27:33+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/ae5e1ebe06967bb5f22dfae15583f27c5b04246f

Make happy zpretty

Files changed:
M src/plone/volto/coresandbox/configure.zcml

b'diff --git a/src/plone/volto/coresandbox/configure.zcml b/src/plone/volto/coresandbox/configure.zcml\nindex b597667..97d4e25 100644\n--- a/src/plone/volto/coresandbox/configure.zcml\n+++ b/src/plone/volto/coresandbox/configure.zcml\n@@ -3,10 +3,12 @@\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone.volto">\n+    i18n_domain="plone.volto"\n+    >\n \n   <utility\n       name="plone.volto.coresandbox.vocabularies.documents"\n-      component=".vocabularies.DocumentVocabularyFactory" />\n+      component=".vocabularies.DocumentVocabularyFactory"\n+      />\n \n </configure>\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-07T13:29:24+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/2c487aa307f54d5400bf6f670684a28d5eb646c3

Merge branch 'main' into coresandboxtests

* main:
  Support Plone 6.0.0a2

Files changed:
M .github/workflows/tests.yml
M CHANGES.rst
M Makefile
M plone-6.0.x.cfg
M requirements/plone-6.0.txt

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 5b4b9c4..a024e3c 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -7,7 +7,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         python: [3.7, 3.8, 3.9]\n-        plone: ["6.0.0a1", "5.2-latest"]\n+        plone: ["6.0.0a2", "5.2-latest"]\n         exclude:\n           - plone: "5.2-latest"\n             python: 3.9\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 48ffcd5..e362da1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,9 +4,16 @@ Changelog\n 3.1.0a7 (unreleased)\n --------------------\n \n+Feature:\n+\n - Added coresandbox fixture for Volto\'s cypress tests\n   [sneridagh]\n \n+Internal:\n+\n+- Test with Plone 6.0.0a2\n+  [ericof]\n+\n \n 3.1.0a6 (2021-11-22)\n --------------------\ndiff --git a/Makefile b/Makefile\nindex d499918..46483d7 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -51,7 +51,7 @@ build: .installed.cfg  ## Build Plone 5.2\n .PHONY: Build Plone 6.0\n build-plone-6.0:  bin/pip ## Build Plone 6.0\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r https://dist.plone.org/release/6.0.0a1/requirements.txt\n+\tbin/pip install -r https://dist.plone.org/release/6.0.0a2/requirements.txt\n \tbin/buildout -c plone-6.0.x.cfg\n \n .PHONY: Test\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 3444dcd..351f975 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,9 +1,9 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0a1/versions.cfg\n+    https://dist.plone.org/release/6.0.0a2/versions.cfg\n     base.cfg\n-find-links = https://dist.plone.org/release/6.0.0a1/\n-versions=versions\n+\n+find-links += https://dist.plone.org/release/6.0.0a2/\n \n \n [instance]\n@@ -11,6 +11,7 @@ recipe = plone.recipe.zope2instance\n zodb-temporary-storage = off\n \n [versions]\n+plone.volto =\n black = 21.7b0\n \n # cffi 1.14.3 fails on apple m1\ndiff --git a/requirements/plone-6.0.txt b/requirements/plone-6.0.txt\nindex e073f36..3a0e3a8 100644\n--- a/requirements/plone-6.0.txt\n+++ b/requirements/plone-6.0.txt\n@@ -1,3 +1,3 @@\n--c https://dist.plone.org/release/6.0.0a1/constraints.txt\n+-c https://dist.plone.org/release/6.0.0a2/constraints.txt\n wheel\n Plone\n\\ No newline at end of file\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-08T20:44:38+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/8fd5ded40e3e567707b4734ff5c8a76941b282b4

Add huge vocabulary, and related field. Add available_languages

Files changed:
M src/plone/volto/coresandbox/configure.zcml
M src/plone/volto/coresandbox/example.py
M src/plone/volto/coresandbox/vocabularies.py

b'diff --git a/src/plone/volto/coresandbox/configure.zcml b/src/plone/volto/coresandbox/configure.zcml\nindex 97d4e25..d336e0b 100644\n--- a/src/plone/volto/coresandbox/configure.zcml\n+++ b/src/plone/volto/coresandbox/configure.zcml\n@@ -11,4 +11,9 @@\n       component=".vocabularies.DocumentVocabularyFactory"\n       />\n \n+  <utility\n+      name="plone.volto.coresandbox.vocabularies.huge"\n+      component=".vocabularies.HugeVocabularyFactory"\n+      />\n+\n </configure>\ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nindex 528658c..49501f8 100644\n--- a/src/plone/volto/coresandbox/example.py\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -27,6 +27,10 @@\n from zope import schema\n from zope.interface import implementer\n \n+from zope.i18nmessageid import MessageFactory\n+\n+_ = PloneMessageFactory = MessageFactory("plone")\n+\n \n class IExample(model.Schema):\n     """Dexterity-Schema with all field-types."""\n@@ -63,6 +67,7 @@ class IExample(model.Schema):\n             "list_field_checkbox",\n             "list_field_select",\n             "list_field_voc_unconstrained",\n+            "list_field_voc_huge",\n             "tuple_field",\n             "set_field",\n             "set_field_checkbox",\n@@ -115,6 +120,7 @@ class IExample(model.Schema):\n         "otherfields",\n         label=u"Other fields",\n         fields=(\n+            "available_languages",\n             "uri_field",\n             "sourcetext_field",\n             "ascii_field",\n@@ -165,7 +171,7 @@ class IExample(model.Schema):\n         title=u"Choice field",\n         description=u"zope.schema.Choice",\n         values=[u"One", u"Two", u"Three"],\n-        required=True,\n+        required=False,\n     )\n \n     directives.widget(choice_field_radio=RadioFieldWidget)\n@@ -239,6 +245,20 @@ class IExample(model.Schema):\n         },\n     )\n \n+    list_field_voc_huge = schema.List(\n+        title=u"List field with values from a huge vocabulary",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.huge",\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "list_field_voc_huge",\n+        frontendOptions={"widget": "autocomplete", "widgetProps": {"prop1": "text"}},\n+    )\n+\n     tuple_field = schema.Tuple(\n         title=u"Tuple field",\n         description=u"zope.schema.Tuple",\n@@ -768,6 +788,21 @@ class IExample(model.Schema):\n         ),\n     )\n \n+    # Special (control panel) fields\n+    available_languages = schema.List(\n+        title=_(u"heading_available_languages", default=u"Available languages"),\n+        description=_(\n+            u"description_available_languages",\n+            default=u"The languages in which the site should be " u"translatable.",\n+        ),\n+        required=True,\n+        default=["en"],\n+        missing_value=[],\n+        value_type=schema.Choice(\n+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"\n+        ),\n+    )\n+\n     # vocabularyterms_field = Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n     #     title=u"Vocabulary terms field",\n     #     description=u"plone.schema.Dict field with value_type schema.TextLine and frontend widget \'VocabularyTermsWidget\'",\ndiff --git a/src/plone/volto/coresandbox/vocabularies.py b/src/plone/volto/coresandbox/vocabularies.py\nindex 48096d6..bf79e5e 100644\n--- a/src/plone/volto/coresandbox/vocabularies.py\n+++ b/src/plone/volto/coresandbox/vocabularies.py\n@@ -1,6 +1,7 @@\n from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n from zope.interface import provider\n from zope.schema.interfaces import IVocabularyFactory\n+from zope.schema.vocabulary import SimpleVocabulary\n \n \n @provider(IVocabularyFactory)\n@@ -11,3 +12,14 @@ def DocumentVocabularyFactory(context=None):\n             "sort_on": "sortable_title",\n         }\n     )\n+\n+\n+@provider(IVocabularyFactory)\n+def HugeVocabularyFactory(context=None):\n+    terms = []\n+    for a in range(1000):\n+        terms.append(\n+            SimpleVocabulary.createTerm(f"option{a}", f"option{a}", f"Option {a}")\n+        )\n+\n+    return SimpleVocabulary(sorted(terms, key=lambda term: term.title))\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-09T19:14:29+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/759ad85c7a6ce50406a69ca2deae80c16dfb7006

fi xfields

Files changed:
M src/plone/volto/coresandbox/example.py

b'diff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nindex 49501f8..ff94c0f 100644\n--- a/src/plone/volto/coresandbox/example.py\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -149,10 +149,7 @@ class IExample(model.Schema):\n     )\n \n     text_field = schema.Text(\n-        title=u"Text Field",\n-        description=u"zope.schema.Text",\n-        required=False,\n-        missing_value=u"",\n+        title=u"Text Field", description=u"zope.schema.Text", required=False\n     )\n \n     textline_field = schema.TextLine(\n@@ -205,6 +202,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value=[],\n+        default=[],\n     )\n \n     directives.widget(list_field_checkbox=CheckBoxFieldWidget)\n@@ -216,6 +214,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value=[],\n+        default=[],\n     )\n \n     directives.widget(list_field_select=SelectFieldWidget)\n@@ -227,6 +226,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value=[],\n+        default=[],\n     )\n \n     list_field_voc_unconstrained = schema.List(\n@@ -235,6 +235,7 @@ class IExample(model.Schema):\n         value_type=schema.TextLine(),\n         required=False,\n         missing_value=[],\n+        default=[],\n     )\n     directives.widget(\n         "list_field_voc_unconstrained",\n@@ -253,6 +254,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value=[],\n+        default=[],\n     )\n     directives.widget(\n         "list_field_voc_huge",\n@@ -267,6 +269,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value=(),\n+        default=(),\n     )\n \n     set_field = schema.Set(\n@@ -277,6 +280,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value={},\n+        default=set(),\n     )\n \n     directives.widget(set_field_checkbox=CheckBoxFieldWidget)\n@@ -288,6 +292,7 @@ class IExample(model.Schema):\n         ),\n         required=False,\n         missing_value={},\n+        default=set(),\n     )\n \n     # File fields\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2021-12-11T11:16:22+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.volto/commit/552d7035100bcb43ac03e41121017424482399d6

Merge pull request #30 from plone/coresandboxtests

Add coresandbox fixture for Volto's Cypress tests

Files changed:
A src/plone/volto/coresandbox/__init__.py
A src/plone/volto/coresandbox/configure.zcml
A src/plone/volto/coresandbox/example.py
A src/plone/volto/coresandbox/vocabularies.py
A src/plone/volto/profiles/coresandbox/diff_tool.xml
A src/plone/volto/profiles/coresandbox/metadata.xml
A src/plone/volto/profiles/coresandbox/repositorytool.xml
A src/plone/volto/profiles/coresandbox/types.xml
A src/plone/volto/profiles/coresandbox/types/example.xml
A src/plone/volto/tests/test_coresandbox.py
M CHANGES.rst
M plone-5.2.x.cfg
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/setuphandlers.py
M src/plone/volto/testing.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 045e2a1..e362da1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,11 @@ Changelog\n 3.1.0a7 (unreleased)\n --------------------\n \n+Feature:\n+\n+- Added coresandbox fixture for Volto\'s cypress tests\n+  [sneridagh]\n+\n Internal:\n \n - Test with Plone 6.0.0a2\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 876cba2..f0b45f7 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,8 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2.5/versions.cfg\n-\n+    http://dist.plone.org/release/5.2.6/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n \n [versions]\n@@ -16,4 +15,4 @@ importlib-metadata = 1.7.0\n # Error: The requirement (\'importlib-metadata>=3.6\') is not allowed by your [versions] constraint (1.7.0)\n keyring = 22.0.1\n secretstorage = 3.3.1\n-jeepney = 0.7.1\n\\ No newline at end of file\n+jeepney = 0.7.1\ndiff --git a/setup.py b/setup.py\nindex 89e82f2..15bedf7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -58,6 +58,7 @@ def readfile(name):\n         "setuptools",\n         "plone.restapi>=8.13.0",\n         "collective.folderishtypes[dexterity]",\n+        "plone.app.vocabularies>=4.3.0",\n     ],\n     extras_require={\n         "test": [\n@@ -65,6 +66,7 @@ def readfile(name):\n             "plone.testing",\n             "plone.app.contenttypes",\n             "plone.app.robotframework[debug]",\n+            "collective.MockMailHost",\n         ]\n     },\n     entry_points="""\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex df6c21a..41793a9 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -63,6 +63,17 @@\n       post_handler=".setuphandlers.create_demo_homepage"\n       />\n \n+  <!-- Fixture for coresandbox Cypress tests in Volto repo -->\n+  <genericsetup:registerProfile\n+      name="coresandbox"\n+      title="plone.volto coresandbox Cypress tests fixtures"\n+      description="Special test fixture for coresandbox use cases"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/coresandbox"\n+      post_handler=".setuphandlers.post_install_coresandbox"\n+      />\n+\n+  <!-- Fixture for multilingual Cypress tests in Volto repo -->\n   <genericsetup:registerProfile\n       name="multilingual"\n       title="plone.volto multilingual Cypress tests fixtures"\ndiff --git a/src/plone/volto/coresandbox/__init__.py b/src/plone/volto/coresandbox/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/plone/volto/coresandbox/configure.zcml b/src/plone/volto/coresandbox/configure.zcml\nnew file mode 100644\nindex 0000000..d336e0b\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/configure.zcml\n@@ -0,0 +1,19 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    i18n_domain="plone.volto"\n+    >\n+\n+  <utility\n+      name="plone.volto.coresandbox.vocabularies.documents"\n+      component=".vocabularies.DocumentVocabularyFactory"\n+      />\n+\n+  <utility\n+      name="plone.volto.coresandbox.vocabularies.huge"\n+      component=".vocabularies.HugeVocabularyFactory"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/volto/coresandbox/example.py b/src/plone/volto/coresandbox/example.py\nnew file mode 100644\nindex 0000000..ff94c0f\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/example.py\n@@ -0,0 +1,872 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.textfield import RichText\n+from plone.app.vocabularies.catalog import CatalogSource\n+from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n+from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+from plone.app.z3cform.widget import RelatedItemsFieldWidget\n+from plone.app.z3cform.widget import SelectFieldWidget\n+from plone.autoform import directives\n+from plone.dexterity.content import Container\n+\n+from plone.namedfile.field import NamedBlobFile\n+from plone.namedfile.field import NamedBlobImage\n+from plone.schema import Email\n+\n+# from plone.schema import (\n+#     Dict,\n+# )  # take Dict field from plone.schema to use the widget attribute\n+from plone.supermodel import model\n+from plone.supermodel.directives import fieldset\n+from plone.supermodel.directives import primary\n+\n+from z3c.form.browser.checkbox import CheckBoxFieldWidget\n+from z3c.form.browser.radio import RadioFieldWidget\n+\n+from z3c.relationfield.schema import RelationChoice\n+from z3c.relationfield.schema import RelationList\n+from zope import schema\n+from zope.interface import implementer\n+\n+from zope.i18nmessageid import MessageFactory\n+\n+_ = PloneMessageFactory = MessageFactory("plone")\n+\n+\n+class IExample(model.Schema):\n+    """Dexterity-Schema with all field-types."""\n+\n+    # The most used fields\n+    # textline, text, bool, richtext, email\n+\n+    fieldset(\n+        "numberfields",\n+        label=u"Number fields",\n+        fields=("int_field", "float_field"),\n+    )\n+\n+    fieldset(\n+        "datetimefields",\n+        label=u"Date and time fields",\n+        fields=(\n+            "datetime_field",\n+            "date_field",\n+            # "time_field", # Not supported by plone.restapi yet\n+            # "timedelta_field", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "choicefields",\n+        label=u"Choice and Multiple Choice fields",\n+        fields=(\n+            "choice_field",\n+            "choice_field_radio",\n+            "choice_field_select",\n+            "choice_field_voc",\n+            "list_field",\n+            "list_field_checkbox",\n+            "list_field_select",\n+            "list_field_voc_unconstrained",\n+            "list_field_voc_huge",\n+            "tuple_field",\n+            "set_field",\n+            "set_field_checkbox",\n+        ),\n+    )\n+\n+    fieldset(\n+        "relationfields",\n+        label=u"Relation fields",\n+        fields=(\n+            "relationchoice_field",\n+            "relationlist_field",\n+            "relationchoice_field_constrained",\n+            "relationlist_field_constrained",\n+            "relationlist_field_search_mode",\n+            "relationchoice_field_select",\n+            "relationchoice_field_radio",\n+            "relationlist_field_select",\n+            "relationlist_field_checkbox",\n+            # "relationchoice_field_ajax_select", # Not supported by plone.restapi yet\n+            # "relationlist_field_ajax_select", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "uuidrelationfields",\n+        label=u"Relation widgets with uuids",\n+        fields=(\n+            "uuid_choice_field",\n+            "uuid_list_field",\n+            "uuid_choice_field_constrained",\n+            "uuid_list_field_constrained",\n+            "uuid_list_field_search_mode",\n+            "uuid_choice_field_select",\n+            "uuid_choice_field_radio",\n+            "uuid_list_field_select",\n+            "uuid_list_field_checkbox",\n+            # "uuid_choice_field_ajax_select", # Not supported by plone.restapi yet\n+            # "uuid_list_field_ajax_select", # Not supported by plone.restapi yet\n+        ),\n+    )\n+\n+    fieldset(\n+        "filefields",\n+        label=u"File fields",\n+        fields=("file_field", "image_field"),\n+    )\n+\n+    fieldset(\n+        "otherfields",\n+        label=u"Other fields",\n+        fields=(\n+            "available_languages",\n+            "uri_field",\n+            "sourcetext_field",\n+            "ascii_field",\n+            "bytesline_field",\n+            "asciiline_field",\n+            "pythonidentifier_field",\n+            "dottedname_field",\n+            "dict_field",\n+            # "vocabularyterms_field", # Not supported by plone.restapi yet\n+            # "vocabularytermstranslation_field", # Not supported by plone.restapi yet\n+            "dict_field_with_choice",\n+        ),\n+    )\n+\n+    primary("title")\n+    title = schema.TextLine(\n+        title=u"Primary Field (Textline)",\n+        description=u"zope.schema.TextLine",\n+        required=True,\n+    )\n+\n+    description = schema.TextLine(\n+        title=u"Description (Textline)",\n+        description=u"zope.schema.TextLine",\n+        required=False,\n+    )\n+\n+    text_field = schema.Text(\n+        title=u"Text Field", description=u"zope.schema.Text", required=False\n+    )\n+\n+    textline_field = schema.TextLine(\n+        title=u"Textline field",\n+        description=u"A simple input field (schema.TextLine)",\n+        required=False,\n+    )\n+\n+    bool_field = schema.Bool(\n+        title=u"Boolean field",\n+        description=u"zope.schema.Bool",\n+        required=False,\n+    )\n+\n+    choice_field = schema.Choice(\n+        title=u"Choice field",\n+        description=u"zope.schema.Choice",\n+        values=[u"One", u"Two", u"Three"],\n+        required=False,\n+    )\n+\n+    directives.widget(choice_field_radio=RadioFieldWidget)\n+    choice_field_radio = schema.Choice(\n+        title=u"Choice field with radio boxes",\n+        description=u"zope.schema.Choice",\n+        values=[u"One", u"Two", u"Three"],\n+        required=False,\n+    )\n+\n+    choice_field_voc = schema.Choice(\n+        title=u"Choicefield with values from named vocabulary",\n+        description=u"zope.schema.Choice",\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        required=False,\n+    )\n+\n+    directives.widget(choice_field_select=SelectFieldWidget)\n+    choice_field_select = schema.Choice(\n+        title=u"Choicefield with select2 widget",\n+        description=u"zope.schema.Choice",\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        required=False,\n+    )\n+\n+    list_field = schema.List(\n+        title=u"List field",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+        default=[],\n+    )\n+\n+    directives.widget(list_field_checkbox=CheckBoxFieldWidget)\n+    list_field_checkbox = schema.List(\n+        title=u"List field with checkboxes",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+        default=[],\n+    )\n+\n+    directives.widget(list_field_select=SelectFieldWidget)\n+    list_field_select = schema.List(\n+        title=u"List field with select widget",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=[],\n+        default=[],\n+    )\n+\n+    list_field_voc_unconstrained = schema.List(\n+        title=u"List field with values from vocabulary but not constrained to them.",\n+        description=u"zope.schema.List",\n+        value_type=schema.TextLine(),\n+        required=False,\n+        missing_value=[],\n+        default=[],\n+    )\n+    directives.widget(\n+        "list_field_voc_unconstrained",\n+        AjaxSelectFieldWidget,\n+        vocabulary="plone.app.vocabularies.PortalTypes",\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    list_field_voc_huge = schema.List(\n+        title=u"List field with values from a huge vocabulary",\n+        description=u"zope.schema.List",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.huge",\n+        ),\n+        required=False,\n+        missing_value=[],\n+        default=[],\n+    )\n+    directives.widget(\n+        "list_field_voc_huge",\n+        frontendOptions={"widget": "autocomplete", "widgetProps": {"prop1": "text"}},\n+    )\n+\n+    tuple_field = schema.Tuple(\n+        title=u"Tuple field",\n+        description=u"zope.schema.Tuple",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value=(),\n+        default=(),\n+    )\n+\n+    set_field = schema.Set(\n+        title=u"Set field",\n+        description=u"zope.schema.Set",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value={},\n+        default=set(),\n+    )\n+\n+    directives.widget(set_field_checkbox=CheckBoxFieldWidget)\n+    set_field_checkbox = schema.Set(\n+        title=u"Set field with checkboxes",\n+        description=u"zope.schema.Set",\n+        value_type=schema.Choice(\n+            values=[u"Beginner", u"Advanced", u"Professional"],\n+        ),\n+        required=False,\n+        missing_value={},\n+        default=set(),\n+    )\n+\n+    # File fields\n+    image_field = NamedBlobImage(\n+        title=u"Image field",\n+        description=u"A upload field for images (plone.namedfile.field.NamedBlobImage)",\n+        required=False,\n+    )\n+\n+    file_field = NamedBlobFile(\n+        title=u"File field",\n+        description=u"A upload field for files (plone.namedfile.field.NamedBlobFile)",\n+        required=False,\n+    )\n+\n+    # Date and Time fields\n+    datetime_field = schema.Datetime(\n+        title=u"Datetime field",\n+        description=u"Uses a date and time picker (zope.schema.Datetime)",\n+        required=False,\n+    )\n+\n+    date_field = schema.Date(\n+        title=u"Date field",\n+        description=u"Uses a date picker (zope.schema.Date)",\n+        required=False,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # time_field = schema.Time(\n+    #     title=u"Time field",\n+    #     description=u"zope.schema.Time",\n+    #     required=False,\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # timedelta_field = schema.Timedelta(\n+    #     title=u"Timedelta field",\n+    #     description=u"zope.schema.Timedelta",\n+    #     required=False,\n+    # )\n+\n+    # # Relation Fields\n+    relationchoice_field = RelationChoice(\n+        title=u"Relationchoice field",\n+        description=u"z3c.relationfield.schema.RelationChoice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+\n+    relationlist_field = RelationList(\n+        title=u"Relationlist Field",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+\n+    relationchoice_field_constrained = RelationChoice(\n+        title=u"Relationchoice field (only allows Documents)",\n+        description=u"z3c.relationfield.schema.RelationChoice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document"]},\n+    )\n+\n+    relationlist_field_constrained = RelationList(\n+        title=u"Relationlist Field (only allows Documents and Events)",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "relationlist_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document", "Event"]},\n+    )\n+\n+    relationlist_field_search_mode = RelationList(\n+        title=u"Relationlist Field in Search Mode (constrained to published Documents and Events)",\n+        description=u"z3c.relationfield.schema.RelationList",\n+        default=[],\n+        value_type=RelationChoice(\n+            source=CatalogSource(\n+                portal_type=["Document", "Event"], review_state="published"\n+            )\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "relationlist_field_search_mode",\n+        RelatedItemsFieldWidget,\n+        pattern_options={\n+            "baseCriteria": [  # This is a optimization that limits the catalog-query\n+                {\n+                    "i": "portal_type",\n+                    "o": "plone.app.querystring.operation.selection.any",\n+                    "v": ["Document", "Event"],\n+                },\n+                {\n+                    "i": "review_state",\n+                    "o": "plone.app.querystring.operation.selection.any",\n+                    "v": "published",\n+                },\n+            ],\n+            "mode": "search",\n+        },\n+    )\n+\n+    # From here on we use other widgets than the default RelatedItemsFieldWidget\n+\n+    # This one also works in Volto!\n+    # All other options use the default ObjectWidget in Volto so far.\n+    relationchoice_field_select = RelationChoice(\n+        title=u"RelationChoice with Select Widget",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            }\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_select",\n+        SelectFieldWidget,\n+    )\n+\n+    relationchoice_field_radio = RelationChoice(\n+        title=u"RelationChoice with Radio Widget (and customized title-template)",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            },\n+            title_template="{brain.Title}",\n+        ),  # Set a custom vocabulary item title\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationchoice_field_radio",\n+        RadioFieldWidget,\n+    )\n+\n+    relationlist_field_select = RelationList(\n+        title=u"RelationList with select widget with items from a named vocabulary",\n+        value_type=RelationChoice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationlist_field_select",\n+        SelectFieldWidget,\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    relationlist_field_checkbox = RelationList(\n+        title=u"RelationList with Checkboxes",\n+        value_type=RelationChoice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "relationlist_field_checkbox",\n+        CheckBoxFieldWidget,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # relationchoice_field_ajax_select = RelationChoice(\n+    #     title=u"Relationchoice Field with AJAXSelect",\n+    #     description=u"z3c.relationfield.schema.RelationChoice",\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "relationchoice_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # relationlist_field_ajax_select = RelationList(\n+    #     title=u"Relationlist Field with AJAXSelect",\n+    #     description=u"z3c.relationfield.schema.RelationList",\n+    #     value_type=RelationChoice(\n+    #         vocabulary=StaticCatalogVocabulary(\n+    #             {\n+    #                 "portal_type": ["Document", "Event"],\n+    #                 "review_state": "published",\n+    #             }\n+    #         )\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "relationlist_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event", "Folder"],\n+    #         },\n+    #         title_template="{brain.Type}: {brain.Title} at {path}",\n+    #     ),  # Custom item rendering\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # These look like relationsfields (see above) but only store the uuid(s) of the selected target\n+    # as a string in a the field instead of a RelationValue.\n+    # A good way to use these is in combination with a index that allows you to query these connenctions.\n+    uuid_choice_field = schema.Choice(\n+        title=u"Choice field with RelatedItems widget storing uuids",\n+        description=u"schema.Choice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget("uuid_choice_field", RelatedItemsFieldWidget)\n+\n+    uuid_list_field = schema.List(\n+        title=u"List Field with RelatedItems widget storing uuids",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget("uuid_list_field", RelatedItemsFieldWidget)\n+\n+    uuid_choice_field_constrained = schema.Choice(\n+        title=u"Choice field with RelatedItems widget storing uuids (only allows Documents)",\n+        description=u"schema.Choice",\n+        vocabulary="plone.app.vocabularies.Catalog",\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document"]},\n+    )\n+\n+    uuid_list_field_constrained = schema.List(\n+        title=u"List Field with RelatedItems widget storing uuids (only allows Documents and Events)",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Catalog"),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "uuid_list_field_constrained",\n+        RelatedItemsFieldWidget,\n+        pattern_options={"selectableTypes": ["Document", "Folder"]},\n+    )\n+\n+    uuid_list_field_search_mode = schema.List(\n+        title=u"List Field with RelatedItems widget in Search Mode storing uuids",\n+        description=u"schema.List",\n+        default=[],\n+        value_type=schema.Choice(\n+            source=CatalogSource(\n+                portal_type=["Document", "Event"], review_state="published"\n+            )\n+        ),\n+        required=False,\n+        missing_value=[],\n+    )\n+    directives.widget(\n+        "uuid_list_field_search_mode",\n+        RelatedItemsFieldWidget,\n+        pattern_options={\n+            "selectableTypes": ["Document", "Folder"],\n+            "basePath": "",  # Start the search at the portal root\n+            "mode": "search",\n+        },\n+    )\n+\n+    # From here on we use other widgets than the default RelatedItemsFieldWidget\n+\n+    uuid_choice_field_select = schema.Choice(\n+        title=u"UUID Choice with select widget storing uuids",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            }\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_select",\n+        SelectFieldWidget,\n+    )\n+\n+    uuid_choice_field_radio = schema.Choice(\n+        title=u"RelationChoice with Radio widget storing uuids",\n+        vocabulary=StaticCatalogVocabulary(\n+            {\n+                "portal_type": ["Document", "Event"],\n+                "review_state": "published",\n+            },\n+            title_template="{brain.Title}",\n+        ),  # Set a custom vocabulary item title\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_choice_field_radio",\n+        RadioFieldWidget,\n+    )\n+\n+    uuid_list_field_select = schema.List(\n+        title=u"RelationList with select widget with items from a named vocabulary storing uuids",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_list_field_select",\n+        SelectFieldWidget,\n+        pattern_options={\n+            "closeOnSelect": False,  # Select2 option to leave dropdown open for multiple selection\n+        },\n+    )\n+\n+    uuid_list_field_checkbox = schema.List(\n+        title=u"RelationList with Checkboxes storing uuids",\n+        value_type=schema.Choice(\n+            vocabulary="plone.volto.coresandbox.vocabularies.documents",\n+        ),\n+        required=False,\n+    )\n+    directives.widget(\n+        "uuid_list_field_checkbox",\n+        CheckBoxFieldWidget,\n+    )\n+\n+    # Not supported by plone.restapi yet\n+    # uuid_choice_field_ajax_select = schema.Choice(\n+    #     title=u"Relationchoice Field with AJAXSelect storing uuids",\n+    #     description=u"z3c.relationfield.schema.RelationChoice",\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "uuid_choice_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         }\n+    #     ),\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #     },\n+    # )\n+\n+    # Not supported by plone.restapi yet\n+    # uuid_list_field_ajax_select = schema.List(\n+    #     title=u"Relationlist Field with AJAXSelect storing uuids",\n+    #     description=u"z3c.relationfield.schema.RelationList",\n+    #     value_type=schema.Choice(\n+    #         vocabulary=StaticCatalogVocabulary(\n+    #             {\n+    #                 "portal_type": ["Document", "Event"],\n+    #                 "review_state": "published",\n+    #             }\n+    #         )\n+    #     ),\n+    #     required=False,\n+    # )\n+    # directives.widget(\n+    #     "uuid_list_field_ajax_select",\n+    #     AjaxSelectFieldWidget,\n+    #     vocabulary=StaticCatalogVocabulary(\n+    #         {\n+    #             "portal_type": ["Document", "Event"],\n+    #         },\n+    #         title_template="{brain.Type}: {brain.Title} at {path}",\n+    #     ),  # Custom item rendering\n+    #     pattern_options={  # Options for Select2\n+    #         "minimumInputLength": 2,  # - Don\'t query until at least two characters have been typed\n+    #         "ajax": {"quietMillis": 500},  # - Wait 500ms after typing to make query\n+    #         "closeOnSelect": False,  # - Leave dropdown open for multiple selection\n+    #     },\n+    # )\n+\n+    # Number fields\n+    int_field = schema.Int(\n+        title=u"Integer Field (e.g. 12)",\n+        description=u"zope.schema.Int",\n+        required=False,\n+    )\n+\n+    float_field = schema.Float(\n+        title=u"Float field, e.g. 12.7",\n+        description=u"zope.schema.Float",\n+        required=False,\n+    )\n+\n+    # Text fields\n+    email_field = Email(\n+        title=u"Email field",\n+        description=u"A simple input field for a email (plone.schema.email.Email)",\n+        required=False,\n+    )\n+\n+    uri_field = schema.URI(\n+        title=u"URI field",\n+        description=u"A simple input field for a URLs (zope.schema.URI)",\n+        required=False,\n+    )\n+\n+    richtext_field = RichText(\n+        title=u"RichText field",\n+        description=u"This uses a richtext editor. (plone.app.textfield.RichText)",\n+        max_length=2000,\n+        required=False,\n+    )\n+\n+    sourcetext_field = schema.SourceText(\n+        title=u"SourceText field",\n+        description=u"zope.schema.SourceText",\n+        required=False,\n+    )\n+\n+    ascii_field = schema.ASCII(\n+        title=u"ASCII field",\n+        description=u"zope.schema.ASCII",\n+        required=False,\n+    )\n+\n+    bytesline_field = schema.BytesLine(\n+        title=u"BytesLine field",\n+        description=u"zope.schema.BytesLine",\n+        required=False,\n+    )\n+\n+    asciiline_field = schema.ASCIILine(\n+        title=u"ASCIILine field",\n+        description=u"zope.schema.ASCIILine",\n+        required=False,\n+    )\n+\n+    pythonidentifier_field = schema.PythonIdentifier(\n+        title=u"PythonIdentifier field",\n+        description=u"zope.schema.PythonIdentifier",\n+        required=False,\n+    )\n+\n+    dottedname_field = schema.DottedName(\n+        title=u"DottedName field",\n+        description=u"zope.schema.DottedName",\n+        required=False,\n+    )\n+\n+    dict_field = schema.Dict(\n+        title=u"Dict field",\n+        description=u"zope.schema.Dict",\n+        required=False,\n+        key_type=schema.TextLine(\n+            title=u"Key",\n+            required=False,\n+        ),\n+        value_type=schema.TextLine(\n+            title=u"Value",\n+            required=False,\n+        ),\n+    )\n+\n+    # Special (control panel) fields\n+    available_languages = schema.List(\n+        title=_(u"heading_available_languages", default=u"Available languages"),\n+        description=_(\n+            u"description_available_languages",\n+            default=u"The languages in which the site should be " u"translatable.",\n+        ),\n+        required=True,\n+        default=["en"],\n+        missing_value=[],\n+        value_type=schema.Choice(\n+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"\n+        ),\n+    )\n+\n+    # vocabularyterms_field = Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #     title=u"Vocabulary terms field",\n+    #     description=u"plone.schema.Dict field with value_type schema.TextLine and frontend widget \'VocabularyTermsWidget\'",\n+    #     required=False,\n+    #     key_type=schema.TextLine(\n+    #         title=u"Key",\n+    #         required=False,\n+    #     ),\n+    #     value_type=schema.TextLine(\n+    #         title=u"Value",\n+    #         required=False,\n+    #     ),\n+    #     widget="vocabularyterms",  # we use the widget attribute to apply the frontend widget VocabularyWidget\n+    # )\n+\n+    # vocabularytermstranslation_field = Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #     title=u"Vocabulary terms field with translations",\n+    #     description=u"plone.schema.Dict field with value_type Dict and frontend widget \'VocabularyTermsWidget\'",\n+    #     required=False,\n+    #     key_type=schema.TextLine(\n+    #         title=u"Key",\n+    #         required=False,\n+    #     ),\n+    #     value_type=Dict(  # we use the plone.schema field Dict not zope.schema field to use the attribute \'widget\'\n+    #         title=u"Term translation",\n+    #         description=u"plone.schema.Dict field for translations of vocabulary term",\n+    #         required=True,\n+    #         key_type=schema.TextLine(\n+    #             title=u"Key",\n+    #             required=False,\n+    #         ),\n+    #         value_type=schema.TextLine(\n+    #             title=u"Value",\n+    #             required=False,\n+    #         ),\n+    #     ),\n+    #     widget="vocabularyterms",  # we use the widget attribute to apply the frontend widget VocabularyWidget\n+    # )\n+\n+    dict_field_with_choice = schema.Dict(\n+        title=u"Dict field with key and value as choice",\n+        description=u"zope.schema.Dict",\n+        required=False,\n+        key_type=schema.Choice(\n+            title=u"Key",\n+            values=[u"One", u"Two", u"Three"],\n+            required=False,\n+        ),\n+        value_type=schema.Set(\n+            title=u"Value",\n+            value_type=schema.Choice(\n+                values=[u"Beginner", u"Advanced", u"Professional"],\n+            ),\n+            required=False,\n+            missing_value={},\n+        ),\n+    )\n+\n+\n+@implementer(IExample)\n+class Example(Container):\n+    """Example instance class"""\ndiff --git a/src/plone/volto/coresandbox/vocabularies.py b/src/plone/volto/coresandbox/vocabularies.py\nnew file mode 100644\nindex 0000000..bf79e5e\n--- /dev/null\n+++ b/src/plone/volto/coresandbox/vocabularies.py\n@@ -0,0 +1,25 @@\n+from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n+from zope.interface import provider\n+from zope.schema.interfaces import IVocabularyFactory\n+from zope.schema.vocabulary import SimpleVocabulary\n+\n+\n+@provider(IVocabularyFactory)\n+def DocumentVocabularyFactory(context=None):\n+    return StaticCatalogVocabulary(\n+        {\n+            "portal_type": ["Document", "News Item"],\n+            "sort_on": "sortable_title",\n+        }\n+    )\n+\n+\n+@provider(IVocabularyFactory)\n+def HugeVocabularyFactory(context=None):\n+    terms = []\n+    for a in range(1000):\n+        terms.append(\n+            SimpleVocabulary.createTerm(f"option{a}", f"option{a}", f"Option {a}")\n+        )\n+\n+    return SimpleVocabulary(sorted(terms, key=lambda term: term.title))\ndiff --git a/src/plone/volto/profiles/coresandbox/diff_tool.xml b/src/plone/volto/profiles/coresandbox/diff_tool.xml\nnew file mode 100644\nindex 0000000..fd83ec9\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/diff_tool.xml\n@@ -0,0 +1,8 @@\n+<?xml version="1.0"?>\n+<object>\n+  <difftypes>\n+    <type portal_type="example">\n+      <field name="any" difftype="Compound Diff for Dexterity types"/>\n+    </type>\n+  </difftypes>\n+</object>\n\\ No newline at end of file\ndiff --git a/src/plone/volto/profiles/coresandbox/metadata.xml b/src/plone/volto/profiles/coresandbox/metadata.xml\nnew file mode 100644\nindex 0000000..cae22a3\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/metadata.xml\n@@ -0,0 +1,6 @@\n+<metadata>\n+ <version>1000</version>\n+ <dependencies>\n+   <dependency>profile-plone.volto:default</dependency>\n+ </dependencies>\n+</metadata>\ndiff --git a/src/plone/volto/profiles/coresandbox/repositorytool.xml b/src/plone/volto/profiles/coresandbox/repositorytool.xml\nnew file mode 100644\nindex 0000000..5889d93\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/repositorytool.xml\n@@ -0,0 +1,10 @@\n+<?xml version="1.0"?>\n+<repositorytool>\n+  <policymap>\n+    <type name="example">\n+      <policy name="at_edit_autoversion"/>\n+      <policy name="version_on_revert"/>\n+    </type>\n+  </policymap>\n+</repositorytool>\n+\ndiff --git a/src/plone/volto/profiles/coresandbox/types.xml b/src/plone/volto/profiles/coresandbox/types.xml\nnew file mode 100644\nindex 0000000..d7f2fba\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/types.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<object name="portal_types" meta_type="Plone Types Tool">\n+ <object name="example" meta_type="Dexterity FTI"/>\n+</object>\ndiff --git a/src/plone/volto/profiles/coresandbox/types/example.xml b/src/plone/volto/profiles/coresandbox/types/example.xml\nnew file mode 100644\nindex 0000000..630ea2b\n--- /dev/null\n+++ b/src/plone/volto/profiles/coresandbox/types/example.xml\n@@ -0,0 +1,49 @@\n+<?xml version="1.0"?>\n+<object name="example" meta_type="Dexterity FTI" i18n:domain="plone"\n+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="title" i18n:translate="">Example</property>\n+ <property name="description" i18n:translate=""></property>\n+ <property name="icon_expr"></property>\n+ <property name="factory">example</property>\n+ <property name="add_view_expr">string:${folder_url}/++add++example</property>\n+ <property name="link_target"></property>\n+ <property name="immediate_view">view</property>\n+ <property name="global_allow">True</property>\n+ <property name="filter_content_types">False</property>\n+ <property name="allowed_content_types" />\n+ <property name="allow_discussion">False</property>\n+ <property name="default_view">view</property>\n+ <property name="view_methods">\n+  <element value="view"/>\n+ </property>\n+ <property name="default_view_fallback">False</property>\n+ <property name="add_permission">cmf.AddPortalContent</property>\n+ <property name="klass">plone.volto.coresandbox.example.Example</property>\n+ <property name="schema">plone.volto.coresandbox.example.IExample</property>\n+ <property name="behaviors">\n+  <element value="plone.namefromtitle" />\n+  <element value="plone.allowdiscussion" />\n+  <element value="plone.excludefromnavigation" />\n+  <element value="plone.shortname" />\n+  <element value="plone.versioning" />\n+  <element value="plone.tableofcontents" />\n+  <element value="plone.locking" />\n+ </property>\n+ <property name="model_source"></property>\n+ <property name="model_file"></property>\n+ <property name="schema_policy">dexterity</property>\n+ <alias from="(Default)" to="(dynamic view)"/>\n+ <alias from="edit" to="@@edit"/>\n+ <alias from="sharing" to="@@sharing"/>\n+ <alias from="view" to="(selected layout)"/>\n+ <action title="View" action_id="view" category="object" condition_expr=""\n+    description="" icon_expr="" link_target="" url_expr="string:${object_url}"\n+    visible="True">\n+  <permission value="View"/>\n+ </action>\n+ <action title="Edit" action_id="edit" category="object" condition_expr=""\n+    description="" icon_expr="" link_target=""\n+    url_expr="string:${object_url}/edit" visible="True">\n+  <permission value="Modify portal content"/>\n+ </action>\n+</object>\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex c5f5d9a..8568fee 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -42,6 +42,10 @@ def uninstall(context):\n     # Do something at the end of the uninstallation of this package.\n \n \n+def post_install_coresandbox(context):\n+    """Post install script for multilingual fixture"""\n+\n+\n def post_install_multilingual(context):\n     """Post install script for multilingual fixture"""\n     enable_pam(context)\ndiff --git a/src/plone/volto/testing.py b/src/plone/volto/testing.py\nindex ac84d62..8565585 100644\n--- a/src/plone/volto/testing.py\n+++ b/src/plone/volto/testing.py\n@@ -14,6 +14,7 @@\n from plone.testing import z2\n \n import plone.volto\n+import plone.volto.coresandbox\n \n \n class PloneVoltoCoreLayer(PloneSandboxLayer):\n@@ -54,3 +55,49 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_VOLTO_CORE_FIXTURE, REMOTE_LIBRARY_BUNDLE_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneVoltoCoreLayer:AcceptanceTesting",\n )\n+\n+\n+class PloneVoltoCoreSandboxLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=plone.volto)\n+        self.loadZCML(package=plone.volto.coresandbox)\n+\n+    def setUpPloneSite(self, portal):\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        login(portal, TEST_USER_NAME)\n+        api.content.create(\n+            type="Document", id="front-page", title="Welcome", container=portal\n+        )\n+        logout()\n+        applyProfile(portal, "plone.volto:coresandbox")\n+\n+\n+PLONE_VOLTO_CORESANDBOX_FIXTURE = PloneVoltoCoreSandboxLayer()\n+\n+\n+PLONE_VOLTO_CORESANDBOX_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_VOLTO_CORESANDBOX_FIXTURE,),\n+    name="PloneVoltoCoreSandboxLayer:IntegrationTesting",\n+)\n+\n+\n+PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_VOLTO_CORESANDBOX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="PloneVoltoCoreSandboxLayer:FunctionalTesting",\n+)\n+\n+\n+PLONE_VOLTO_CORESANDBOX_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PLONE_VOLTO_CORESANDBOX_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="PloneVoltoCoreSandboxLayer:AcceptanceTesting",\n+)\ndiff --git a/src/plone/volto/tests/test_coresandbox.py b/src/plone/volto/tests/test_coresandbox.py\nnew file mode 100644\nindex 0000000..2dd4143\n--- /dev/null\n+++ b/src/plone/volto/tests/test_coresandbox.py\n@@ -0,0 +1,37 @@\n+# -*- coding: utf-8 -*-\n+from plone.volto.testing import PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n+\n+# from plone import api\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import RelativeSession\n+\n+# import transaction\n+import unittest\n+\n+\n+class TestCoresandbox(unittest.TestCase):\n+\n+    layer = PLONE_VOLTO_CORESANDBOX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        # transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_coresandbox_example_content_schema_endpoint(self):\n+        response = self.api_session.get("/@types/example")\n+\n+        self.assertEqual(response.status_code, 200)\n'

