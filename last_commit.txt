Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-04-01T01:11:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/2a7d0f88c4927f119f29e4db134db8660801c736

fix storage for python3

Files changed:
M plone/namedfile/file.py
M plone/namedfile/storages.py
M plone/namedfile/z3c-blobfile.zcml

b'diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 8b17cae..92703e4 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -320,7 +320,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n         self.contentType = contentType\n         self._blob = Blob()\n         f = self._blob.open(\'w\')\n-        f.write(\'\')\n+        f.write(b\'\')\n         f.close()\n         self._setData(data)\n         self.filename = filename\n@@ -372,7 +372,7 @@ class NamedBlobImage(NamedBlobFile):\n     """An image stored in a ZODB BLOB with a filename\n     """\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         super(NamedBlobImage, self).__init__(data,\n                                              contentType=contentType,\n                                              filename=filename)\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 9a9403b..94f37a1 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -14,25 +14,35 @@\n \n \n @implementer(IStorage)\n-class StringStorable(object):\n+class BytesStorable(object):\n \n     def store(self, data, blob):\n-        if not isinstance(data, str):\n-            raise NotStorable(\'Could not store data (not of "str" type).\')\n+        if not isinstance(data, six.binary_type):\n+            raise NotStorable(\'Could not store data (not of bytes type).\')\n \n         with blob.open(\'w\') as fp:\n             fp.write(data)\n \n \n @implementer(IStorage)\n-class UnicodeStorable(StringStorable):\n+class TextStorable(BytesStorable):\n \n     def store(self, data, blob):\n         if not isinstance(data, six.text_type):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n         data = data.encode(\'UTF-8\')\n-        StringStorable.store(self, data, blob)\n+        BytesStorable.store(self, data, blob)\n+\n+\n+@implementer(IStorage)\n+class UnicodeStorable(TextStorable):\n+    pass\n+\n+\n+@implementer(IStorage)\n+class StringStorable(BytesStorable):\n+    pass\n \n \n @implementer(IStorage)\ndiff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml\nindex 282dbad..ea54b30 100644\n--- a/plone/namedfile/z3c-blobfile.zcml\n+++ b/plone/namedfile/z3c-blobfile.zcml\n@@ -1,5 +1,19 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n+  <!-- text for py3 -->\n+  <utility\n+      name="builtins.str"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.TextStorable"\n+      />\n+\n+  <!-- bytes for py3 -->\n+  <utility\n+      name="builtins.bytes"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BytesStorable"\n+      />\n+\n   <utility\n       name="__builtin__.str"\n       provides=".interfaces.IStorage"\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-05-09T13:51:32+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.namedfile/commit/32e35dba7c9a18e124b4f34aa6fcdae10aa7b00c

Fix _setData to allow strings/bytes on Python3

Files changed:
M CHANGES.rst
M plone/namedfile/file.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5437dc4..b10a903 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,7 +15,7 @@ New features:\n Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n-  [ale-rt, pbauer]\n+  [ale-rt, pbauer, MatthewWilkes]\n \n - remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)\n   [tkimnguyen]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 92703e4..a601ac6 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -182,7 +182,7 @@ def _setData(self, data):\n         if isinstance(data, six.text_type):\n             data = data.encode(\'UTF-8\')\n \n-        if isinstance(data, str):\n+        if isinstance(data, six.binary_type):\n             self._data, self._size = FileChunk(data), len(data)\n             return\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-05-09T16:13:46+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.namedfile/commit/a641325644bf15409faa56ea04632a5bcf77fe78

Improve Python3 compatibility around bytestring handling

NamedFile should be mostly using bytestrings rather that text string as
it is not textlike. Many instances of str or text_type have been replaced
with explicit bytes references. Also, improved cleanup over handling
closing files.

Files changed:
M plone/namedfile/file.py
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M plone/namedfile/utils/tiff_utils.py

b'diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex a601ac6..df2b962 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -42,10 +42,10 @@ def __getslice__(self, i, j):\n         return self._data[i:j]\n \n     def __len__(self):\n-        data = str(self)\n+        data = bytes(self)\n         return len(data)\n \n-    def __str__(self):\n+    def __bytes__(self):\n         next = self.next\n         if next is None:\n             return self._data\n@@ -56,7 +56,7 @@ def __str__(self):\n             result.append(self._data)\n             next = self.next\n \n-        return \'\'.join(result)\n+        return b\'\'.join(result)\n \n \n FILECHUNK_CLASSES = [FileChunk]\n@@ -160,7 +160,7 @@ class NamedFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\n@@ -172,7 +172,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n \n     def _getData(self):\n         if isinstance(self._data, tuple(FILECHUNK_CLASSES)):\n-            return str(self._data)\n+            return bytes(self._data)\n         else:\n             return self._data\n \n@@ -271,7 +271,7 @@ class NamedImage(NamedFile):\n     """\n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         self.contentType, self._width, self._height = getImageInfo(data)\n         self.filename = filename\n         self._setData(data)\n@@ -311,7 +311,7 @@ class NamedBlobFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 534b2a6..1248d5a 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -113,7 +113,7 @@ def tag(self, height=_marker, width=_marker, alt=_marker,\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n-            elif isinstance(v, str):\n+            elif isinstance(v, six.binary_type):\n                 v = six.text_type(v, \'utf8\')\n             parts.append(u\'{0}={1}\'.format(k, quoteattr(v)))\n         parts.append(\'/>\')\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 94f37a1..d611fee 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -94,5 +94,5 @@ def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\n         fp = blob.open(\'w\')\n-        fp.write(str(pdata))\n+        fp.write(bytes(pdata))\n         fp.close()\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 3e18472..f8dadbb 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -5,4 +5,5 @@\n def getFile(filename):\n     """ return contents of the file with the given name """\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    return open(filename, \'rb\')\n+    with open(filename, \'rb\') as data_file:\n+        return data_file.read()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex ec14bfd..1949038 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -69,12 +69,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file = self._makeImage()\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'\')\n+        self.assertEqual(file.data, b\'\')\n \n     def testConstructor(self):\n-        file = self._makeImage(\'Data\')\n+        file = self._makeImage(b\'Data\')\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'Data\')\n+        self.assertEqual(file.data, b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -97,9 +97,9 @@ def testInterface(self):\n     def testDataMutatorWithLargeHeader(self):\n         from plone.namedfile.file import IMAGE_INFO_BYTES\n         bogus_header_length = struct.pack(\'>H\', IMAGE_INFO_BYTES * 2)\n-        data = (\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n-                \'\\x00\' * IMAGE_INFO_BYTES * 2 +\n-                \'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n+        data = (b\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n+                b\'\\x00\' * IMAGE_INFO_BYTES * 2 +\n+                b\'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n         image = self._makeImage()\n         image._setData(data)\n         self.assertEqual(image.getImageSize(), (1024, 680))\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex eb458e1..11598ee 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -11,23 +11,23 @@\n \n \n zptlogo = (\n-    \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    \'\\x00A\\x00;\'\n+    b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    b\'\\x00A\\x00;\'\n )\n \n \n@@ -39,12 +39,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file_img = self._makeImage()\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'\')\n+        self.assertEqual(bytes(file_img.data), b\'\')\n \n     def testConstructor(self):\n-        file_img = self._makeImage(\'Data\')\n+        file_img = self._makeImage(b\'Data\')\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'Data\')\n+        self.assertEqual(bytes(file_img.data), b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -65,17 +65,17 @@ def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     contentType=\'image/gif\')),\n             \'image/gif\')\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     filename=u\'image.gif\')),\n             \'image/gif\')\n         self.assertEqual(get_contenttype(\n-            NamedImage(getFile(\'notimage.doc\').read(),\n+            NamedImage(getFile(\'notimage.doc\'),\n                        filename=u\'notimage.doc\')),\n             \'application/msword\')\n \n@@ -101,7 +101,7 @@ class FakeField(object):\n         image._setData(zptlogo)\n         validate_image_field(FakeField(), image)\n \n-        notimage = NamedImage(getFile(\'notimage.doc\').read(),\n+        notimage = NamedImage(getFile(\'notimage.doc\'),\n                               filename=u\'notimage.doc\')\n         self.assertRaises(\n             InvalidImageFile,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex a9ae071..8e68794 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -10,7 +10,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.scale.interfaces import IScaledImageQuality\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import getGlobalSiteManager\n@@ -34,7 +34,7 @@ class IHasImage(IImageScaleTraversable):\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -63,7 +63,7 @@ class ImageScalingTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -228,7 +228,7 @@ def testScaleInvalidation(self):\n         foo1 = self.scaling.scale(\'image\', scale=\'foo\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the scale has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         foo2 = self.scaling.scale(\'image\', scale=\'foo\')\n         self.assertFalse(foo1.data == foo2.data, \'scale not updated?\')\n@@ -288,7 +288,7 @@ def testGetOriginalScaleTag(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithNonASCIITitle(self):\n-        self.item.title = \'\\xc3\\xbc\'\n+        self.item.title = u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -299,7 +299,7 @@ def testScaleOnItemWithNonASCIITitle(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithUnicodeTitle(self):\n-        self.item.Title = lambda: \'\\xc3\\xbc\'.decode(\'utf8\')\n+        self.item.Title = lambda: u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -313,7 +313,7 @@ def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n         Image quality not available for PNG images.\n         """\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.jpg\')\n         scaling = ImageScaling(item, None)\n@@ -349,7 +349,7 @@ class ImageTraverseTests(unittest.TestCase):\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.app._setOb(\'item\', item)\n@@ -397,7 +397,7 @@ def testScaleInvalidation(self):\n         uid1, ext, width1, height1 = self.traverse(\'image/thumb\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the thumbnail has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         uid2, ext, width2, height2 = self.traverse(\'image/thumb\')\n         self.assertNotEqual(uid1, uid2, \'thumb not updated?\')\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 889d3bc..b2dd3fb 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -10,7 +10,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n from plone.testing.z2 import Browser\n-from six import StringIO\n+from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\n \n@@ -31,7 +31,7 @@ class IHasImage(IImageScaleTraversable):\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -52,7 +52,7 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -115,7 +115,7 @@ def make_head_request(args):\n             self.browser.headers[\'Content-Length\'],\n             str(GET_length)\n         )\n-        self.assertEqual(self.browser.contents, \'\')\n+        self.assertEqual(self.browser.contents, b\'\')\n \n     def testPublishThumbViaUID(self):\n         ImageScaling._sizes = {\'thumb\': (128, 128)}\n@@ -146,7 +146,7 @@ def testPublishThumbViaName(self):\n             self.layer[\'app\'].absolute_url() + \'/item/@@images/image\'\n         )\n         self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(self.browser.contents, getFile(\'image.png\').read())\n+        self.assertEqual(self.browser.contents, getFile(\'image.png\'))\n \n         # and last a scaled version\n         self.browser.open(\ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex fe94a28..400bb2e 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -33,15 +33,15 @@ def setUp(self):\n         pass\n \n     def test_pdata_storable(self):\n-        pdata = Pdata(getFile(\'image.gif\').read())\n+        pdata = Pdata(getFile(\'image.gif\'))\n         fi = NamedBlobImage(pdata, filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\').read(), filename=u\'image.gif\')\n+        fi = NamedBlobImage(getFile(\'image.gif\'), filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n-        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\').read()),\n+        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n                             filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex ec62738..4a4c31e 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -5,7 +5,7 @@\n from plone.namedfile.utils.png_utils import process_png\n from plone.namedfile.utils.tiff_utils import process_tiff\n from plone.registry.interfaces import IRegistry\n-from six import StringIO\n+from six import BytesIO\n from six.moves import urllib\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n@@ -104,7 +104,7 @@ def _ensure_data(image):\n         image.seek(0)\n     else:\n         data = image\n-    return str(data)\n+    return bytes(data)\n \n \n def getImageInfo(data):\n@@ -114,36 +114,36 @@ def getImageInfo(data):\n     width = -1\n     content_type = \'\'\n \n-    if (size >= 10) and data[:6] in (\'GIF87a\', \'GIF89a\'):\n+    if (size >= 10) and data[:6] in (b\'GIF87a\', b\'GIF89a\'):\n         # handle GIFs\n         content_type = \'image/gif\'\n         w, h = struct.unpack(\'<HH\', data[6:10])\n         width = int(w)\n         height = int(h)\n \n-    elif data[:8] == \'\\211PNG\\r\\n\\032\\n\':\n+    elif data[:8] == b\'\\211PNG\\r\\n\\032\\n\':\n         # handle PNG\n         content_type, width, height = process_png(data)\n \n-    elif data[:2] == \'\\377\\330\':\n+    elif data[:2] == b\'\\377\\330\':\n         # handle JPEGs\n         content_type, width, height = process_jpeg(data)\n \n-    elif (size >= 30) and data.startswith(\'BM\'):\n+    elif (size >= 30) and data.startswith(b\'BM\'):\n         # handle BMPs\n         kind = struct.unpack(\'<H\', data[14:16])[0]\n         if kind == 40:  # Windows 3.x bitmap\n             content_type = \'image/x-ms-bmp\'\n             width, height = struct.unpack(\'<LL\', data[18:26])\n \n-    elif (size >= 4) and data[:4] in [\'MM\\x00*\', \'II*\\x00\']:\n+    elif (size >= 4) and data[:4] in [b\'MM\\x00*\', b\'II*\\x00\']:\n         # handle TIFFs\n         content_type, width, height = process_tiff(data)\n \n     else:\n         # Use PIL / Pillow to determ Image Information\n         try:\n-            img = PIL.Image.open(StringIO(data))\n+            img = PIL.Image.open(BytesIO(data))\n             width, height = img.size\n             content_type = img.format\n         except Exception:\n@@ -193,7 +193,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     """\n     orientation = 1  # if not set assume correct orrinetation --> 1\n     data = _ensure_data(image_data)\n-    img = PIL.Image.open(StringIO(data))\n+    img = PIL.Image.open(BytesIO(data))\n \n     exif_data = None\n     if \'exif\' in img.info:\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 6f49de0..31037c3 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -15,9 +15,9 @@ def process_jpeg(data):\n     h = -1\n     size = len(data)\n \n-    if (size >= 2) and data.startswith(\'\\377\\330\'):  # handle JPEGs\n+    if (size >= 2) and data.startswith(b\'\\377\\330\'):  # handle JPEGs\n         content_type = \'image/jpeg\'\n-        jpeg = StringIO(data)\n+        jpeg = BytesIO(data)\n         jpeg.read(2)\n         b = jpeg.read(1)\n         try:\ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex 1d42984..172402c 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -17,17 +17,17 @@ def process_png(data):\n     # Bytes 0-7 are below, 4-byte chunk length, then \'IHDR\'\n     # and finally the 4-byte width, height\n     if (\n-        (size >= 24) and data.startswith(\'\\211PNG\\r\\n\\032\\n\') and\n-        (data[12:16] == \'IHDR\')\n+        (size >= 24) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\') and\n+        (data[12:16] == b\'IHDR\')\n     ):\n         content_type = \'image/png\'\n         w, h = struct.unpack(\'>LL\', data[16:24])\n \n     # Maybe this is for an older PNG version.\n-    elif (size >= 16) and data.startswith(\'\\211PNG\\r\\n\\032\\n\'):\n+    elif (size >= 16) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\'):\n         # Check to see if we have the right content type\n         content_type = \'image/png\'\n-        w, h = struct.unpack(\'>LL\', data[8:16])\n+        w, h = struct.unpack(b\'>LL\', data[8:16])\n \n     width = int(w)\n     height = int(h)\ndiff --git a/plone/namedfile/utils/tiff_utils.py b/plone/namedfile/utils/tiff_utils.py\nindex 416831f..bfdd01c 100644\n--- a/plone/namedfile/utils/tiff_utils.py\n+++ b/plone/namedfile/utils/tiff_utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -42,7 +42,7 @@ def process_tiff(data):\n             log.info(\'Endian or 42 Check failed\')\n \n         if endian:\n-            tiff = StringIO(data)\n+            tiff = BytesIO(data)\n             tiff.read(4)  # Magic Header, could be skipped, already processed\n             offset = struct.unpack_from(endian + \'I\', tiff)  # first IFD offset\n             b = tiff.read(offset)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-05-09T16:29:32+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.namedfile/commit/60fcd52e1f469dc89db6bc9c73662cb34ea969de

Fix on Python 2 by conditionally choosing between providing __bytes__ and __str__

Files changed:
M plone/namedfile/file.py

b"diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex df2b962..0804edb 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -45,7 +45,7 @@ def __len__(self):\n         data = bytes(self)\n         return len(data)\n \n-    def __bytes__(self):\n+    def _get_contents(self):\n         next = self.next\n         if next is None:\n             return self._data\n@@ -58,6 +58,11 @@ def __bytes__(self):\n \n         return b''.join(result)\n \n+    if six.PY2:\n+        __str__ = _get_contents\n+    else:\n+        __bytes__ = _get_contents\n+\n \n FILECHUNK_CLASSES = [FileChunk]\n try:\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-05-09T16:48:53+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.namedfile/commit/b2f0651362e1e25cb52c85b4d47abccda42e3daf

Part-way to working doctests in Python3

Files changed:
M plone/namedfile/handler.rst
M plone/namedfile/marshaler.rst
M plone/namedfile/usage.rst

b'diff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex 5087b52..b1e6143 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -19,7 +19,7 @@ First, we wire up the handlers::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> from six import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -46,7 +46,7 @@ Named file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -69,10 +69,10 @@ Named file\n     <class \'plone.namedfile.field.NamedFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -89,7 +89,7 @@ Named image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -112,10 +112,10 @@ Named image\n     <class \'plone.namedfile.field.NamedImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -132,7 +132,7 @@ Named blob file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -155,10 +155,10 @@ Named blob file\n     <class \'plone.namedfile.field.NamedBlobFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -175,7 +175,7 @@ Named blob image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -198,10 +198,10 @@ Named blob image\n     <class \'plone.namedfile.field.NamedBlobImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex ca64bdf..7c6b651 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,7 +21,7 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> from six import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -39,23 +39,23 @@ We\'ll create an instance with some data, too::\n     >>> from plone.namedfile import NamedFile, NamedImage\n     >>> fileValue = NamedFile(\'dummy test data\', \'text/plain\', filename=u"test.txt")\n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n     >>> imageValue = NamedImage(zptlogo, \'image/gif\', filename=u\'zptl\\xf8go.gif\')\n \n@@ -103,8 +103,8 @@ binary data into a UTF-8 string in a header::\n Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n-    >>> marshaler.marshal(primary=True)\n-    \'dummy test data\'\n+    >>> bytearray(marshaler.marshal(primary=True))\n+    bytearray(b\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -143,7 +143,7 @@ refuses to encode non-primary fields::\n \n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = renderMessage(message)\n-    >>> print messageBody\n+    >>> print(messageBody)\n     MIME-Version: 1.0\n     Content-Type: text/plain\n     Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n@@ -162,8 +162,8 @@ Let\'s now use this message to construct a new object::\n \n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n@@ -178,7 +178,7 @@ If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = renderMessage(message)\n-    >>> print messageBody # doctest: +ELLIPSIS\n+    >>> print(messageBody) # doctest: +ELLIPSIS\n     MIME-Version: 1.0\n     Content-Type: multipart/mixed; boundary="===============...=="\n     <BLANKLINE>\n@@ -209,8 +209,8 @@ Of course, we will also be able to load this data from a message::\n     >>> newContent = TestContent()\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(b\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 580847c..06c1ab0 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -43,28 +43,28 @@ The FileContainer class creates empty objects to start with::\n \n     >>> container = FileContainer()\n \n-    >>> container.simple.data\n-    \'\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(b\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n     True\n \n-    >>> container.image.data\n-    \'\'\n+    >>> len(container.image.data)\n+    0\n     >>> container.image.contentType\n     \'\'\n     >>> container.image.filename is None\n     True\n \n-    >>> container.blob.data\n-    \'\'\n+    >>> len(container.blob.data)\n+    0\n     >>> container.blob.contentType\n     \'\'\n     >>> container.blob.filename is None\n     True\n-    >>> container.blobimage.data\n-    \'\'\n+    >>> len(container.blobimage.data)\n+    0\n     >>> container.blobimage.contentType\n     \'\'\n     >>> container.blobimage.filename is None\n@@ -74,41 +74,41 @@ Let\'s now set some actual data in these files. Notice how the constructor\n will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.simple.data\n-    \'dummy test data\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(b\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n-    >>> container.simple.filename\n-    u\'test.txt\'\n+    >>> print(container.simple.filename)\n+    test.txt\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.blob.data\n-    \'dummy test data\'\n+    >>> bytearray(container.blob.data)\n+    bytearray(b\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n-    >>> container.blob.filename\n-    u\'test.txt\'\n+    >>> print(container.blob.filename)\n+    test.txt\n \n Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n \n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n \n     >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")\n@@ -116,16 +116,16 @@ Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n     True\n     >>> container.image.contentType\n     \'image/gif\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/gif\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n Note that is possible for force the mimetype::\n \n@@ -134,20 +134,20 @@ Note that is possible for force the mimetype::\n     True\n     >>> container.image.contentType\n     \'image/foo\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType=\'image/foo\', filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/foo\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n The filename must be set to a unicode string, not a bytestring::\n \n-    >>> container.image.filename = \'foo\'\n+    >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n     WrongType: (\'foo\', <type \'unicode\'>, \'filename\')\n@@ -169,8 +169,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -181,8 +181,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -230,8 +230,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n-    >>> display_file()\n-    \'dummy test data\'\n+    >>> bytearray(display_file())\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -241,8 +241,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -298,8 +298,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(b\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-05-16T11:18:39+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/9d89e9c09359723f00698a6a0dce62e7893c8709

contentType is text in py3. fixes creating files and images

Files changed:
M plone/namedfile/interfaces.py

b"diff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 2003cc0..455904e 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -9,10 +9,10 @@\n \n class IFile(Interface):\n \n-    contentType = schema.BytesLine(\n+    contentType = schema.NativeStringLine(\n         title=u'Content Type',\n         description=u'The content type identifies the type of data.',\n-        default=b'',\n+        default='',\n         required=False,\n         missing_value=''\n     )\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-06-15T11:56:49+02:00
Author: Franz Gerhard Reinisch (fgrcon) <franz@fgrcon.net>
Commit: https://github.com/plone/plone.namedfile/commit/a7ae5f3759881c5862f0f16f65aa32a0cd6cdc85

python3 testfixes WIP

Files changed:
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/usage.rst

b'diff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 392700b..0b930c5 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -12,6 +12,7 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n+import six\n \n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n@@ -56,17 +57,21 @@ def postProcessMessage(self, message):\n         """Encode message as base64 and set content disposition\n         """\n         value = self._query()\n+        import pdb; pdb.set_trace\n+\n         if value is not None:\n             filename = value.filename\n+\n             if filename:\n+                import pdb; pdb.set_trace\n+\n                 message.add_header(\'Content-Disposition\', \'attachment\')\n                 message.set_param(\n                     \'filename\',\n-                    filename.encode(\'utf-8\'),\n+                    filename.encode(\'utf-8\') if six.PY2 else filename,\n                     header=\'Content-Disposition\',\n                     charset=\'utf-8\'\n                 )\n-\n         encode_base64(message)\n \n \ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 7c6b651..6dbe877 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -140,8 +140,8 @@ refuses to encode non-primary fields::\n \n     >>> from zope.interface import alsoProvides\n     >>> alsoProvides(ITestContent[\'_file\'], IPrimaryField)\n-\n     >>> message = constructMessageFromSchema(t, ITestContent)\n+    >>> import pdb; pdb.set_trace()\n     >>> messageBody = renderMessage(message)\n     >>> print(messageBody)\n     MIME-Version: 1.0\n@@ -175,7 +175,7 @@ Let\'s now use this message to construct a new object::\n If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n-\n+    >>> import pdb; pdb.set_trace();\n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = renderMessage(message)\n     >>> print(messageBody) # doctest: +ELLIPSIS\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex ae5b267..f5697cd 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -3,6 +3,7 @@\n from plone.testing import layered\n \n import doctest\n+import six\n import unittest\n \n \n@@ -13,6 +14,18 @@\n     \'utils.rst\',\n ]\n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            got = re.sub(\n+                r"WrongType: \\(\'(.*?)\', <type \'unicode\'>, \'(.*?)\'\\)",\n+                r"zope.schema._bootstrapinterfaces.WrongType: (b\'\\1\', <class \'str\'>, \'\\2\')",    # noqa E508\n+                got\n+            )\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n \n def test_suite():\n     return unittest.TestSuite(\n@@ -21,6 +34,7 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     testfile,\n                     package=\'plone.namedfile\',\n+                    checker=Py23DocChecker(),\n                 ),\n                 PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n             ) for testfile in TEST_FILES\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 06c1ab0..8e17454 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -150,7 +150,7 @@ The filename must be set to a unicode string, not a bytestring::\n     >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n-    WrongType: (\'foo\', <type \'unicode\'>, \'filename\')\n+    zope.schema._bootstrapinterfaces.WrongType: (b\'foo\', <class \'str\'>, \'filename\')\n \n \n Download view\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-06-15T20:41:44+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/5c43c5f8f2ddba3763c25cd583bbccb94d309e90

remove pdb's

Files changed:
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst

b'diff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 0b930c5..f878797 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -57,13 +57,11 @@ def postProcessMessage(self, message):\n         """Encode message as base64 and set content disposition\n         """\n         value = self._query()\n-        import pdb; pdb.set_trace\n \n         if value is not None:\n             filename = value.filename\n \n             if filename:\n-                import pdb; pdb.set_trace\n \n                 message.add_header(\'Content-Disposition\', \'attachment\')\n                 message.set_param(\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 6dbe877..4936434 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -141,7 +141,6 @@ refuses to encode non-primary fields::\n     >>> from zope.interface import alsoProvides\n     >>> alsoProvides(ITestContent[\'_file\'], IPrimaryField)\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> import pdb; pdb.set_trace()\n     >>> messageBody = renderMessage(message)\n     >>> print(messageBody)\n     MIME-Version: 1.0\n@@ -175,7 +174,6 @@ Let\'s now use this message to construct a new object::\n If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n-    >>> import pdb; pdb.set_trace();\n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = renderMessage(message)\n     >>> print(messageBody) # doctest: +ELLIPSIS\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-06-16T10:07:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/6d8eea621352dc419b6c776deb469e3633286c77

fix tests for py2

Files changed:
M plone/namedfile/marshaler.rst
M plone/namedfile/tests/test_doctests.py

b'diff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 4936434..1f055a9 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -166,7 +166,7 @@ Let\'s now use this message to construct a new object::\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image is None\n     True\n@@ -212,11 +212,11 @@ Of course, we will also be able to load this data from a message::\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image.data == zptlogo\n     True\n     >>> newContent._image.contentType\n     \'image/gif\'\n     >>> newContent._image.filename\n-    u\'zptl\\xf8go.gif\'\n+    \'zptl\\xf8go.gif\'\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex f5697cd..d3d1a1d 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -3,6 +3,7 @@\n from plone.testing import layered\n \n import doctest\n+import re\n import six\n import unittest\n \n@@ -18,7 +19,7 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n             got = re.sub(\n                 r"WrongType: \\(\'(.*?)\', <type \'unicode\'>, \'(.*?)\'\\)",\n                 r"zope.schema._bootstrapinterfaces.WrongType: (b\'\\1\', <class \'str\'>, \'\\2\')",    # noqa E508\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-06-26T22:09:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/1df4f359e457eddfe8a6f085b5ffdeca80bcd71a

warn is deprecated, use warning instead

Files changed:
M plone/namedfile/utils/__init__.py

b"diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 4a4c31e..d68e9dd 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -150,7 +150,7 @@ def getImageInfo(data):\n             # TODO: determ wich error really happens\n             # Should happen if data is to short --> first_bytes\n             # happens also if data is an svg or another special format.\n-            log.warn(\n+            log.warning(\n                 'PIL can not recognize the image. '\n                 'Image is probably broken or of a non-supported format.'\n             )\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-07-02T14:17:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/7027ce13cd1601c87d934b2947f5f0b192ed6156

fix logic + doctests for python 3

Files changed:
M CHANGES.rst
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/scaling.py
M plone/namedfile/testing.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/usage.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b10a903..23751bd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,12 +10,12 @@ Breaking changes:\n \n New features:\n \n-- Target Zope 4 (test chnages only).\n+- Target Zope 4 (test changes only).\n \n Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n-  [ale-rt, pbauer, MatthewWilkes]\n+  [ale-rt, pbauer, MatthewWilkes, jensens]\n \n - remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)\n   [tkimnguyen]\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex f878797..cac6799 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from email.encoders import encode_base64\n from plone.namedfile import NamedBlobFile\n from plone.namedfile import NamedBlobImage\n from plone.namedfile import NamedFile\n@@ -14,6 +13,7 @@\n \n import six\n \n+\n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n     registered as subclasses.\n@@ -27,18 +27,20 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                \'File fields can only be marshaled as primary fields\')\n+                \'File fields can only be marshaled as primary fields\'\n+            )\n         if value is None:\n             return None\n         return value.data\n \n     def decode(\n-            self,\n-            value,\n-            message=None,\n-            charset=\'utf-8\',\n-            contentType=None,\n-            primary=False):\n+        self,\n+        value,\n+        message=None,\n+        charset=\'utf-8\',\n+        contentType=None,\n+        primary=False,\n+    ):\n         filename = None\n         if primary and message is not None:\n             filename = message.get_filename(None)\n@@ -48,21 +50,17 @@ def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n+        if not isinstance(value.contentType, six.text_type):\n+            return value.contentType.decode(\'utf8\')\n         return value.contentType\n \n-    def getCharset(self, default=\'utf-8\'):\n-        return None\n-\n     def postProcessMessage(self, message):\n         """Encode message as base64 and set content disposition\n         """\n         value = self._query()\n-\n         if value is not None:\n             filename = value.filename\n-\n             if filename:\n-\n                 message.add_header(\'Content-Disposition\', \'attachment\')\n                 message.set_param(\n                     \'filename\',\n@@ -70,7 +68,6 @@ def postProcessMessage(self, message):\n                     header=\'Content-Disposition\',\n                     charset=\'utf-8\'\n                 )\n-        encode_base64(message)\n \n \n @adapter(Interface, INamedFileField)\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 1f055a9..4b7e7d7 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,9 +21,9 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from six import StringIO\n+    >>> import six\n     >>> from zope.configuration import xmlconfig\n-    >>> xmlconfig.xmlconfig(StringIO(configuration))\n+    >>> xmlconfig.xmlconfig(six.StringIO(configuration))\n \n Next, we will create a schema with which to test the marshaler::\n \n@@ -86,6 +86,7 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n+\n     >>> marshaler.ascii\n     False\n \n@@ -97,6 +98,7 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'image/gif\'\n+\n     >>> marshaler.ascii\n     False\n \n@@ -104,7 +106,7 @@ Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n     >>> bytearray(marshaler.marshal(primary=True))\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -124,31 +126,29 @@ Let\'s try it with primary fields::\n     >>> marshaler.ascii\n     False\n \n-This marshaler will also post-process a message to encode the filename in\n-the Content-Disposition header, and base64-encode the payload.\n-\n-To illustrate that, as well as parsing of the message, let\'s construct\n-a full message and look at the output.\n+This marshaler will also post-process a message to encode the filename in the Content-Disposition header.\n+To illustrate that, as well as parsing of the message,\n+let\'s construct a full message and look at the output.\n \n-First, we need to mark one of the fields as primary. In this case, we will\n-use the file field. The image will will now be ignored, since our marshaler\n-refuses to encode non-primary fields::\n+First, we need to mark one of the fields as primary.\n+In this case, we will use the file field.\n+The image will will now be ignored, since our marshaler refuses to encode non-primary fields::\n \n     >>> from plone.rfc822.interfaces import IPrimaryField\n-    >>> from plone.rfc822 import constructMessageFromSchema\n-    >>> from plone.rfc822 import renderMessage\n-\n     >>> from zope.interface import alsoProvides\n     >>> alsoProvides(ITestContent[\'_file\'], IPrimaryField)\n+\n+    >>> from plone.rfc822 import constructMessageFromSchema\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n+    >>> messageBody = message.as_string()\n     >>> print(messageBody)\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n     <BLANKLINE>\n     ZHVtbXkgdGVzdCBkYXRh\n+    <BLANKLINE>\n \n You can see here that we have a transfer encoding and a content disposition.\n \n@@ -162,7 +162,7 @@ Let\'s now use this message to construct a new object::\n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n     >>> bytearray(newContent._file.data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n@@ -175,7 +175,7 @@ If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n+    >>> messageBody = message.as_string()\n     >>> print(messageBody) # doctest: +ELLIPSIS\n     MIME-Version: 1.0\n     Content-Type: multipart/mixed; boundary="===============...=="\n@@ -183,15 +183,16 @@ If we have two primary fields, they will be encoded as a multipart message::\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n     <BLANKLINE>\n     ZHVtbXkgdGVzdCBkYXRh\n+    <BLANKLINE>\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: image/gif\n-    Content-Disposition: attachment; filename*="utf-8\'\'zptl%C3%B8go.gif"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=utf-8\'\'zptl%C3%B8go.gif\n     <BLANKLINE>\n     R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi\n     5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM\n@@ -199,7 +200,10 @@ If we have two primary fields, they will be encoded as a multipart message::\n     wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm\n     BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D\n     hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=\n-    --===============...==--...\n+    <BLANKLINE>\n+    --===============...==--\n+    <BLANKLINE>\n+\n \n Of course, we will also be able to load this data from a message::\n \n@@ -208,7 +212,7 @@ Of course, we will also be able to load this data from a message::\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n     >>> bytearray(newContent._file.data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 1248d5a..b3c3b1d 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -341,7 +341,7 @@ def traverse(self, name, furtherPath):\n     @deprecate(\'use property available_sizes instead\')\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n-            logger.warn(\n+            logger.warning(\n                 \'fieldname was passed to deprecated getAvailableSizes, but \'\n                 \'will be ignored.\',\n             )\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 1581cd3..ba1a193 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing import zca\n from plone.testing import zodb\n from zope.configuration import xmlconfig\n@@ -9,7 +9,7 @@\n \n class NamedFileTestLayer(Layer):\n \n-    defaultBases = (z2.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n+    defaultBases = (zope.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n \n     def setUp(self):\n         zca.pushGlobalRegistry()\n@@ -33,12 +33,12 @@ def tearDown(self):\n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n-PLONE_NAMEDFILE_INTEGRATION_TESTING = z2.IntegrationTesting(\n+PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n )\n \n-PLONE_NAMEDFILE_FUNCTIONAL_TESTING = z2.FunctionalTesting(\n+PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n )\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex d3d1a1d..c01cadf 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -15,16 +15,19 @@\n     \'utils.rst\',\n ]\n \n+\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n             got = re.sub(\n                 r"WrongType: \\(\'(.*?)\', <type \'unicode\'>, \'(.*?)\'\\)",\n                 r"zope.schema._bootstrapinterfaces.WrongType: (b\'\\1\', <class \'str\'>, \'\\2\')",    # noqa E508\n                 got\n             )\n+        if six.PY3:\n+            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex b2dd3fb..5729be0 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -9,7 +9,7 @@\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 8e17454..4effec3 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -44,7 +44,7 @@ The FileContainer class creates empty objects to start with::\n     >>> container = FileContainer()\n \n     >>> bytearray(container.simple.data)\n-    bytearray(b\'\')\n+    bytearray(\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n@@ -75,7 +75,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.simple.data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n     >>> print(container.simple.filename)\n@@ -83,7 +83,7 @@ will attempt to guess the filename from the file extension::\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n     >>> bytearray(container.blob.data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n     >>> print(container.blob.filename)\n@@ -150,7 +150,7 @@ The filename must be set to a unicode string, not a bytestring::\n     >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n-    zope.schema._bootstrapinterfaces.WrongType: (b\'foo\', <class \'str\'>, \'filename\')\n+    zope.schema._bootstrapinterfaces.WrongType: (\'foo\', <class \'str\'>, \'filename\')\n \n \n Download view\n@@ -170,7 +170,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(download())\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -182,7 +182,7 @@ We will test this with a dummy request, faking traversal::\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -231,7 +231,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n     >>> bytearray(display_file())\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -242,7 +242,7 @@ We will test this with a dummy request, faking traversal::\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n     >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -299,7 +299,7 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n     >>> bytearray(download())\n-    bytearray(b\'dummy test data\')\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\ndiff --git a/setup.py b/setup.py\nindex 0ecb963..5846bce 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -23,8 +23,10 @@\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n+        # "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n@@ -38,7 +40,8 @@\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'plone.rfc822>=1.0b2\',\n+        \'piexif\',\n+        \'plone.rfc822>=2.0a1\',\n         \'plone.scale[storage] >=1.4.999\',\n         \'plone.schemaeditor\',\n         \'plone.supermodel\',\n@@ -49,7 +52,6 @@\n         \'zope.copy\',\n         \'zope.security\',\n         \'zope.traversing\',\n-        \'piexif\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-07-02T14:22:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/b3279fddb758c058be17a2b0e079751120d60efe

isort

Files changed:
M plone/namedfile/file.py
M plone/namedfile/marshaler.py
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/utils/__init__.py

b"diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 0804edb..e97db54 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -22,6 +22,7 @@\n import six\n import transaction\n \n+\n log = getLogger(__name__)\n \n \ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex cac6799..6e5c64e 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -27,7 +27,7 @@ def encode(self, value, charset='utf-8', primary=False):\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                'File fields can only be marshaled as primary fields'\n+                'File fields can only be marshaled as primary fields',\n             )\n         if value is None:\n             return None\n@@ -66,7 +66,7 @@ def postProcessMessage(self, message):\n                     'filename',\n                     filename.encode('utf-8') if six.PY2 else filename,\n                     header='Content-Disposition',\n-                    charset='utf-8'\n+                    charset='utf-8',\n                 )\n \n \ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex b3c3b1d..62b4a8c 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,7 @@\n import logging\n import six\n \n+\n logger = logging.getLogger(__name__)\n _marker = object()\n \ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex d611fee..d6a9db1 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -10,6 +10,7 @@\n \n import six\n \n+\n MAXCHUNKSIZE = 1 << 16\n \n \ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex ba1a193..4c2605c 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n-from plone.testing import zope\n from plone.testing import zca\n from plone.testing import zodb\n+from plone.testing import zope\n from zope.configuration import xmlconfig\n \n \ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex d68e9dd..9c7ddad 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -17,6 +17,7 @@\n import six\n import struct\n \n+\n log = getLogger(__name__)\n \n try:\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-07-03T11:41:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/33bd03feb6b4151e55cd2098154662c0817705ec

output fixes for python 2.7

Files changed:
M plone/namedfile/marshaler.rst

b'diff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex 4b7e7d7..26825ed 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -141,14 +141,13 @@ The image will will now be ignored, since our marshaler refuses to encode non-pr\n     >>> from plone.rfc822 import constructMessageFromSchema\n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = message.as_string()\n-    >>> print(messageBody)\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: text/plain\n     Content-Transfer-Encoding: base64\n     Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n     <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n-    <BLANKLINE>\n+    ZHVtbXkgdGVzdCBkYXRh...\n \n You can see here that we have a transfer encoding and a content disposition.\n \n@@ -176,7 +175,7 @@ If we have two primary fields, they will be encoded as a multipart message::\n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n     >>> message = constructMessageFromSchema(t, ITestContent)\n     >>> messageBody = message.as_string()\n-    >>> print(messageBody) # doctest: +ELLIPSIS\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: multipart/mixed; boundary="===============...=="\n     <BLANKLINE>\n@@ -184,23 +183,21 @@ If we have two primary fields, they will be encoded as a multipart message::\n     MIME-Version: 1.0\n     Content-Type: text/plain\n     Content-Transfer-Encoding: base64\n-    Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n-    <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n+    Content-Disposition: attachment; filename*=...utf-8\'\'test.txt...\n     <BLANKLINE>\n+    ZHVtbXkgdGVzdCBkYXRh...\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: image/gif\n     Content-Transfer-Encoding: base64\n-    Content-Disposition: attachment; filename*=utf-8\'\'zptl%C3%B8go.gif\n+    Content-Disposition: attachment; filename*=...utf-8\'\'zptl%C3%B8go.gif...\n     <BLANKLINE>\n     R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi\n     5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM\n     1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2\n     wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm\n     BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D\n-    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=\n-    <BLANKLINE>\n+    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=...\n     --===============...==--\n     <BLANKLINE>\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-09-17T15:19:03+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/ad0a909e4857330d777b60e8f862df5c834caa31

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 23751bd..3b63ab5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,6 +12,9 @@ New features:\n \n - Target Zope 4 (test changes only).\n \n+- Python 3 compatibility\n+  [pbauer, matthewwilkes, fgrcon, jensens]\n+\n Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\ndiff --git a/setup.py b/setup.py\nindex 5846bce..50164b3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -23,10 +23,11 @@\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n-        # "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-09-30T10:28:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/d12d33549b49eb9ada18310d363e6724222de3ee

fix tests in py2

Files changed:
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/usage.rst

b'diff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex c01cadf..eb85b9c 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -21,11 +21,12 @@ def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n             got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n+            got = got.replace(\'bytearray(b\', \'bytearray(\')\n             got = re.sub(\n-                r"WrongType: \\(\'(.*?)\', <type \'unicode\'>, \'(.*?)\'\\)",\n-                r"zope.schema._bootstrapinterfaces.WrongType: (b\'\\1\', <class \'str\'>, \'\\2\')",    # noqa E508\n-                got\n-            )\n+                "WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n+            got = got.replace(\n+                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n+\n         if six.PY3:\n             got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n@@ -39,8 +40,9 @@ def test_suite():\n                     testfile,\n                     package=\'plone.namedfile\',\n                     checker=Py23DocChecker(),\n+                    optionflags=doctest.ELLIPSIS,\n                 ),\n-                PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n+                PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n             ) for testfile in TEST_FILES\n         ]\n \ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 4effec3..f55ab21 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -150,7 +150,7 @@ The filename must be set to a unicode string, not a bytestring::\n     >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n-    zope.schema._bootstrapinterfaces.WrongType: (\'foo\', <class \'str\'>, \'filename\')\n+    zope.schema._bootstrapinterfaces.WrongType: ...\n \n \n Download view\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-01T14:27:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/921b30ef712fad1e2769471ca975f9cc02f3b899

try to fix the closed ZODB thing

Files changed:
M plone/namedfile/testing.py

b"diff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 4c2605c..688221c 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -17,19 +17,23 @@ def setUp(self):\n         import plone.namedfile\n         xmlconfig.file('testing.zcml', plone.namedfile)\n \n+    def testSetUp(self):\n+        self['zodbDB_before_namedfile'] = self.get('zodbDB')\n         self['zodbDB'] = zodb.stackDemoStorage(\n             self.get('zodbDB'),\n             name='NamedFileFixture'\n         )\n \n     def tearDown(self):\n-        # Zap the stacked ZODB\n-        self['zodbDB'].close()\n-        del self['zodbDB']\n-\n         # Zap the stacked zca context\n         zca.popGlobalRegistry()\n \n+    def testTearDown(self):\n+        # Zap the stacked ZODB\n+        self['zodbDB'].close()\n+        self['zodbDB'] = self['zodbDB_before_namedfile']\n+        del self['zodbDB_before_namedfile']\n+\n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-01T15:05:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/0846690b9ef739ee0274d9387f68112bb8ed8738

revert last and fix

Files changed:
M plone/namedfile/testing.py

b"diff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 688221c..29624be 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -17,7 +17,6 @@ def setUp(self):\n         import plone.namedfile\n         xmlconfig.file('testing.zcml', plone.namedfile)\n \n-    def testSetUp(self):\n         self['zodbDB_before_namedfile'] = self.get('zodbDB')\n         self['zodbDB'] = zodb.stackDemoStorage(\n             self.get('zodbDB'),\n@@ -25,15 +24,14 @@ def testSetUp(self):\n         )\n \n     def tearDown(self):\n-        # Zap the stacked zca context\n-        zca.popGlobalRegistry()\n-\n-    def testTearDown(self):\n         # Zap the stacked ZODB\n         self['zodbDB'].close()\n         self['zodbDB'] = self['zodbDB_before_namedfile']\n         del self['zodbDB_before_namedfile']\n \n+        # Zap the stacked zca context\n+        zca.popGlobalRegistry()\n+\n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-01T15:53:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/fc1faab945bb17c93fe30e40d7fcff1b46a96d6a

stack demostorage only for one test, where it is needed.

Files changed:
M plone/namedfile/testing.py
M plone/namedfile/tests/test_scaling_functional.py

b"diff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 29624be..a1c3885 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -2,7 +2,7 @@\n from plone.testing import Layer\n from plone.testing import publisher\n from plone.testing import zca\n-from plone.testing import zodb\n+\n from plone.testing import zope\n from zope.configuration import xmlconfig\n \n@@ -17,18 +17,7 @@ def setUp(self):\n         import plone.namedfile\n         xmlconfig.file('testing.zcml', plone.namedfile)\n \n-        self['zodbDB_before_namedfile'] = self.get('zodbDB')\n-        self['zodbDB'] = zodb.stackDemoStorage(\n-            self.get('zodbDB'),\n-            name='NamedFileFixture'\n-        )\n-\n     def tearDown(self):\n-        # Zap the stacked ZODB\n-        self['zodbDB'].close()\n-        self['zodbDB'] = self['zodbDB_before_namedfile']\n-        del self['zodbDB_before_namedfile']\n-\n         # Zap the stacked zca context\n         zca.popGlobalRegistry()\n \ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 5729be0..1e03d25 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -9,6 +9,7 @@\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n+from plone.testing import zodb\n from plone.testing.zope import Browser\n from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n@@ -52,6 +53,11 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        self.layer['zodbDB_before_namedfile'] = self.layer.get('zodbDB')\n+        self.layer['zodbDB'] = zodb.stackDemoStorage(\n+            self.layer.get('zodbDB'),\n+            name='NamedFileFixture'\n+        )\n         data = getFile('image.png')\n         item = DummyContent()\n         item.image = NamedImage(data, 'image/png', u'image.png')\n@@ -67,6 +73,11 @@ def setUp(self):\n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n+        # Zap the stacked ZODB\n+        # self['zodbDB'].close()\n+        self.layer['zodbDB'] = self.layer['zodbDB_before_namedfile']\n+        del self.layer['zodbDB_before_namedfile']\n+\n     def testPublishScaleViaUID(self):\n         scale = self.view.scale('image', width=64, height=64)\n         transaction.commit()\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-01T17:27:38+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/b82f13d31f4443664169dbf45a8e6ea6f2747e90

skip all tests in test_scaling_functional because of test-isolation issues in py2

Files changed:
M plone/namedfile/tests/test_scaling_functional.py

b"diff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 1e03d25..a5dfa17 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -16,6 +16,7 @@\n from zope.interface import implementer\n \n import PIL\n+import six\n import time\n import transaction\n import unittest\n@@ -53,6 +54,8 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if six.PY2:\n+            raise unittest.SkipTest('Disabled in py2 for now.')\n         self.layer['zodbDB_before_namedfile'] = self.layer.get('zodbDB')\n         self.layer['zodbDB'] = zodb.stackDemoStorage(\n             self.layer.get('zodbDB'),\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-02T08:53:51-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.namedfile/commit/2c2d7192eafc9fcc0047a37e2f3a41530383f6c5

Add IStorable for io.BufferedReader

Files changed:
M plone/namedfile/storages.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/z3c-blobfile.zcml

b'diff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex d6a9db1..b4a08c7 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -8,6 +8,7 @@\n from zope.interface import implementer\n from zope.publisher.browser import FileUpload\n \n+import io\n import six\n \n \n@@ -73,6 +74,19 @@ def store(self, data, blob):\n             return\n \n \n+class BufferedReaderStorable(object):\n+\n+    def store(self, data, blob):\n+        raw = data.raw\n+        if not isinstance(raw, io.FileIO):\n+            raise NotStorable(\'Could not store data (not of type "io.FileIO")\')\n+\n+        filename = getattr(data.raw, \'name\', None)\n+        if filename is not None:\n+            blob.consumeFile(filename)\n+            return\n+\n+\n @implementer(IStorage)\n class FileUploadStorable(object):\n \ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex 400bb2e..a8a4fed 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -22,6 +22,8 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n \n+import os\n+import tempfile\n import unittest\n \n \n@@ -45,3 +47,17 @@ def test_filechunk_storable(self):\n         fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n                             filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n+\n+    def test_opened_file_storable(self):\n+        data = getFile(\'image.gif\')\n+        f = tempfile.NamedTemporaryFile(delete=False)\n+        try:\n+            path = f.name\n+            f.write(data)\n+            f.close()\n+            with open(path, \'rb\') as f:\n+                fi = NamedBlobImage(f, filename=u\'image.gif\')\n+        finally:\n+            if os.path.exists(path):\n+                os.remove(path)\n+        self.assertEqual(303, fi.getSize())\ndiff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml\nindex ea54b30..3b2ceb3 100644\n--- a/plone/namedfile/z3c-blobfile.zcml\n+++ b/plone/namedfile/z3c-blobfile.zcml\n@@ -38,11 +38,18 @@\n       factory=".storages.FileDescriptorStorable"\n       />\n \n+  <utility\n+      name="_io.BufferedReader"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BufferedReaderStorable"\n+      />\n+\n   <utility\n       name="zope.publisher.browser.FileUpload"\n       provides=".interfaces.IStorage"\n       factory=".storages.FileUploadStorable"\n       />\n+\n   <utility\n       name="OFS.Image.Pdata"\n       provides=".interfaces.IStorage"\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-04T00:33:14-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.namedfile/commit/d72e28a818f2f96144b7f0027fb99ed07382e1d1

clean up tests

Files changed:
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py

b"diff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex a5dfa17..ac4282d 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -9,7 +9,6 @@\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n-from plone.testing import zodb\n from plone.testing.zope import Browser\n from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n@@ -17,17 +16,10 @@\n \n import PIL\n import six\n-import time\n import transaction\n import unittest\n \n \n-def wait_to_ensure_modified():\n-    # modified is measured in milliseconds\n-    # wait 5ms to ensure modified will have changed\n-    time.sleep(0.005)\n-\n-\n class IHasImage(IImageScaleTraversable):\n     image = NamedImageField()\n \n@@ -56,11 +48,6 @@ class ImagePublisherTests(unittest.TestCase):\n     def setUp(self):\n         if six.PY2:\n             raise unittest.SkipTest('Disabled in py2 for now.')\n-        self.layer['zodbDB_before_namedfile'] = self.layer.get('zodbDB')\n-        self.layer['zodbDB'] = zodb.stackDemoStorage(\n-            self.layer.get('zodbDB'),\n-            name='NamedFileFixture'\n-        )\n         data = getFile('image.png')\n         item = DummyContent()\n         item.image = NamedImage(data, 'image/png', u'image.png')\n@@ -76,11 +63,6 @@ def setUp(self):\n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n-        # Zap the stacked ZODB\n-        # self['zodbDB'].close()\n-        self.layer['zodbDB'] = self.layer['zodbDB_before_namedfile']\n-        del self.layer['zodbDB_before_namedfile']\n-\n     def testPublishScaleViaUID(self):\n         scale = self.view.scale('image', width=64, height=64)\n         transaction.commit()\ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex a8a4fed..504b206 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -31,9 +31,6 @@ class TestStorable(unittest.TestCase):\n \n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n-    def setUp(self):\n-        pass\n-\n     def test_pdata_storable(self):\n         pdata = Pdata(getFile('image.gif'))\n         fi = NamedBlobImage(pdata, filename=u'image.gif')\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2018-10-17T13:18:46+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.namedfile/commit/242fe534ddb734c47fd313daa6eccd2175044e28

Merge pull request #66 from plone/python3

Python 3

Files changed:
M CHANGES.rst
M plone/namedfile/file.py
M plone/namedfile/handler.rst
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.rst
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/testing.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/test_scaling_functional.py
M plone/namedfile/tests/test_storable.py
M plone/namedfile/usage.rst
M plone/namedfile/utils/__init__.py
M plone/namedfile/utils/jpeg_utils.py
M plone/namedfile/utils/png_utils.py
M plone/namedfile/utils/tiff_utils.py
M plone/namedfile/z3c-blobfile.zcml
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5437dc4..3b63ab5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,12 +10,15 @@ Breaking changes:\n \n New features:\n \n-- Target Zope 4 (test chnages only).\n+- Target Zope 4 (test changes only).\n+\n+- Python 3 compatibility\n+  [pbauer, matthewwilkes, fgrcon, jensens]\n \n Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n-  [ale-rt, pbauer]\n+  [ale-rt, pbauer, MatthewWilkes, jensens]\n \n - remove mention of "retina" (https://github.com/plone/Products.CMFPlone/issues/2123)\n   [tkimnguyen]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex 8b17cae..e97db54 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -22,6 +22,7 @@\n import six\n import transaction\n \n+\n log = getLogger(__name__)\n \n \n@@ -42,10 +43,10 @@ def __getslice__(self, i, j):\n         return self._data[i:j]\n \n     def __len__(self):\n-        data = str(self)\n+        data = bytes(self)\n         return len(data)\n \n-    def __str__(self):\n+    def _get_contents(self):\n         next = self.next\n         if next is None:\n             return self._data\n@@ -56,7 +57,12 @@ def __str__(self):\n             result.append(self._data)\n             next = self.next\n \n-        return \'\'.join(result)\n+        return b\'\'.join(result)\n+\n+    if six.PY2:\n+        __str__ = _get_contents\n+    else:\n+        __bytes__ = _get_contents\n \n \n FILECHUNK_CLASSES = [FileChunk]\n@@ -160,7 +166,7 @@ class NamedFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\n@@ -172,7 +178,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n \n     def _getData(self):\n         if isinstance(self._data, tuple(FILECHUNK_CLASSES)):\n-            return str(self._data)\n+            return bytes(self._data)\n         else:\n             return self._data\n \n@@ -182,7 +188,7 @@ def _setData(self, data):\n         if isinstance(data, six.text_type):\n             data = data.encode(\'UTF-8\')\n \n-        if isinstance(data, str):\n+        if isinstance(data, six.binary_type):\n             self._data, self._size = FileChunk(data), len(data)\n             return\n \n@@ -271,7 +277,7 @@ class NamedImage(NamedFile):\n     """\n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         self.contentType, self._width, self._height = getImageInfo(data)\n         self.filename = filename\n         self._setData(data)\n@@ -311,7 +317,7 @@ class NamedBlobFile(Persistent):\n \n     filename = FieldProperty(INamedFile[\'filename\'])\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         if (\n             filename is not None and\n             contentType in (\'\', \'application/octet-stream\')\n@@ -320,7 +326,7 @@ def __init__(self, data=\'\', contentType=\'\', filename=None):\n         self.contentType = contentType\n         self._blob = Blob()\n         f = self._blob.open(\'w\')\n-        f.write(\'\')\n+        f.write(b\'\')\n         f.close()\n         self._setData(data)\n         self.filename = filename\n@@ -372,7 +378,7 @@ class NamedBlobImage(NamedBlobFile):\n     """An image stored in a ZODB BLOB with a filename\n     """\n \n-    def __init__(self, data=\'\', contentType=\'\', filename=None):\n+    def __init__(self, data=b\'\', contentType=\'\', filename=None):\n         super(NamedBlobImage, self).__init__(data,\n                                              contentType=contentType,\n                                              filename=filename)\ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex 5087b52..b1e6143 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -19,7 +19,7 @@ First, we wire up the handlers::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> from six import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -46,7 +46,7 @@ Named file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -69,10 +69,10 @@ Named file\n     <class \'plone.namedfile.field.NamedFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -89,7 +89,7 @@ Named image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -112,10 +112,10 @@ Named image\n     <class \'plone.namedfile.field.NamedImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -132,7 +132,7 @@ Named blob file\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -155,10 +155,10 @@ Named blob file\n     <class \'plone.namedfile.field.NamedBlobFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\n@@ -175,7 +175,7 @@ Named blob image\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n-    >>> print prettyXML(element)\n+    >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n       <description>Test desc</description>\n       <readonly>True</readonly>\n@@ -198,10 +198,10 @@ Named blob image\n     <class \'plone.namedfile.field.NamedBlobImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n-    >>> reciprocal.title\n-    u\'Test\'\n-    >>> reciprocal.description\n-    u\'Test desc\'\n+    >>> print(reciprocal.title)\n+    Test\n+    >>> print(reciprocal.description)\n+    Test desc\n     >>> reciprocal.required\n     False\n     >>> reciprocal.readonly\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 2003cc0..455904e 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -9,10 +9,10 @@\n \n class IFile(Interface):\n \n-    contentType = schema.BytesLine(\n+    contentType = schema.NativeStringLine(\n         title=u\'Content Type\',\n         description=u\'The content type identifies the type of data.\',\n-        default=b\'\',\n+        default=\'\',\n         required=False,\n         missing_value=\'\'\n     )\ndiff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py\nindex 392700b..6e5c64e 100644\n--- a/plone/namedfile/marshaler.py\n+++ b/plone/namedfile/marshaler.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from email.encoders import encode_base64\n from plone.namedfile import NamedBlobFile\n from plone.namedfile import NamedBlobImage\n from plone.namedfile import NamedFile\n@@ -12,6 +11,8 @@\n from zope.component import adapter\n from zope.interface import Interface\n \n+import six\n+\n \n class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):\n     """Base marshaler for plone.namedfile values. Actual adapters are\n@@ -26,18 +27,20 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n         # never in a header\n         if not primary:\n             raise ValueError(\n-                \'File fields can only be marshaled as primary fields\')\n+                \'File fields can only be marshaled as primary fields\',\n+            )\n         if value is None:\n             return None\n         return value.data\n \n     def decode(\n-            self,\n-            value,\n-            message=None,\n-            charset=\'utf-8\',\n-            contentType=None,\n-            primary=False):\n+        self,\n+        value,\n+        message=None,\n+        charset=\'utf-8\',\n+        contentType=None,\n+        primary=False,\n+    ):\n         filename = None\n         if primary and message is not None:\n             filename = message.get_filename(None)\n@@ -47,11 +50,10 @@ def getContentType(self):\n         value = self._query()\n         if value is None:\n             return None\n+        if not isinstance(value.contentType, six.text_type):\n+            return value.contentType.decode(\'utf8\')\n         return value.contentType\n \n-    def getCharset(self, default=\'utf-8\'):\n-        return None\n-\n     def postProcessMessage(self, message):\n         """Encode message as base64 and set content disposition\n         """\n@@ -62,13 +64,11 @@ def postProcessMessage(self, message):\n                 message.add_header(\'Content-Disposition\', \'attachment\')\n                 message.set_param(\n                     \'filename\',\n-                    filename.encode(\'utf-8\'),\n+                    filename.encode(\'utf-8\') if six.PY2 else filename,\n                     header=\'Content-Disposition\',\n-                    charset=\'utf-8\'\n+                    charset=\'utf-8\',\n                 )\n \n-        encode_base64(message)\n-\n \n @adapter(Interface, INamedFileField)\n class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):\ndiff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst\nindex ca64bdf..26825ed 100644\n--- a/plone/namedfile/marshaler.rst\n+++ b/plone/namedfile/marshaler.rst\n@@ -21,9 +21,9 @@ To test this, we must first load some configuration::\n     ... </configure>\n     ... """\n \n-    >>> from StringIO import StringIO\n+    >>> import six\n     >>> from zope.configuration import xmlconfig\n-    >>> xmlconfig.xmlconfig(StringIO(configuration))\n+    >>> xmlconfig.xmlconfig(six.StringIO(configuration))\n \n Next, we will create a schema with which to test the marshaler::\n \n@@ -39,23 +39,23 @@ We\'ll create an instance with some data, too::\n     >>> from plone.namedfile import NamedFile, NamedImage\n     >>> fileValue = NamedFile(\'dummy test data\', \'text/plain\', filename=u"test.txt")\n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n     >>> imageValue = NamedImage(zptlogo, \'image/gif\', filename=u\'zptl\\xf8go.gif\')\n \n@@ -86,6 +86,7 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n+\n     >>> marshaler.ascii\n     False\n \n@@ -97,14 +98,15 @@ binary data into a UTF-8 string in a header::\n \n     >>> marshaler.getContentType()\n     \'image/gif\'\n+\n     >>> marshaler.ascii\n     False\n \n Let\'s try it with primary fields::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_file\']), IFieldMarshaler)\n-    >>> marshaler.marshal(primary=True)\n-    \'dummy test data\'\n+    >>> bytearray(marshaler.marshal(primary=True))\n+    bytearray(\'dummy test data\')\n \n     >>> marshaler.getContentType()\n     \'text/plain\'\n@@ -124,32 +126,28 @@ Let\'s try it with primary fields::\n     >>> marshaler.ascii\n     False\n \n-This marshaler will also post-process a message to encode the filename in\n-the Content-Disposition header, and base64-encode the payload.\n-\n-To illustrate that, as well as parsing of the message, let\'s construct\n-a full message and look at the output.\n+This marshaler will also post-process a message to encode the filename in the Content-Disposition header.\n+To illustrate that, as well as parsing of the message,\n+let\'s construct a full message and look at the output.\n \n-First, we need to mark one of the fields as primary. In this case, we will\n-use the file field. The image will will now be ignored, since our marshaler\n-refuses to encode non-primary fields::\n+First, we need to mark one of the fields as primary.\n+In this case, we will use the file field.\n+The image will will now be ignored, since our marshaler refuses to encode non-primary fields::\n \n     >>> from plone.rfc822.interfaces import IPrimaryField\n-    >>> from plone.rfc822 import constructMessageFromSchema\n-    >>> from plone.rfc822 import renderMessage\n-\n     >>> from zope.interface import alsoProvides\n     >>> alsoProvides(ITestContent[\'_file\'], IPrimaryField)\n \n+    >>> from plone.rfc822 import constructMessageFromSchema\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n-    >>> print messageBody\n+    >>> messageBody = message.as_string()\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=utf-8\'\'test.txt\n     <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n+    ZHVtbXkgdGVzdCBkYXRh...\n \n You can see here that we have a transfer encoding and a content disposition.\n \n@@ -162,12 +160,12 @@ Let\'s now use this message to construct a new object::\n \n     >>> from plone.rfc822 import initializeObjectFromSchema\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image is None\n     True\n@@ -175,33 +173,34 @@ Let\'s now use this message to construct a new object::\n If we have two primary fields, they will be encoded as a multipart message::\n \n     >>> alsoProvides(ITestContent[\'_image\'], IPrimaryField)\n-\n     >>> message = constructMessageFromSchema(t, ITestContent)\n-    >>> messageBody = renderMessage(message)\n-    >>> print messageBody # doctest: +ELLIPSIS\n+    >>> messageBody = message.as_string()\n+    >>> print(messageBody) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n     MIME-Version: 1.0\n     Content-Type: multipart/mixed; boundary="===============...=="\n     <BLANKLINE>\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: text/plain\n-    Content-Disposition: attachment; filename*="utf-8\'\'test.txt"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=...utf-8\'\'test.txt...\n     <BLANKLINE>\n-    ZHVtbXkgdGVzdCBkYXRh\n+    ZHVtbXkgdGVzdCBkYXRh...\n     --===============...==\n     MIME-Version: 1.0\n     Content-Type: image/gif\n-    Content-Disposition: attachment; filename*="utf-8\'\'zptl%C3%B8go.gif"\n     Content-Transfer-Encoding: base64\n+    Content-Disposition: attachment; filename*=...utf-8\'\'zptl%C3%B8go.gif...\n     <BLANKLINE>\n     R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi\n     5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM\n     1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2\n     wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm\n     BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D\n-    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=\n-    --===============...==--...\n+    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=...\n+    --===============...==--\n+    <BLANKLINE>\n+\n \n Of course, we will also be able to load this data from a message::\n \n@@ -209,16 +208,16 @@ Of course, we will also be able to load this data from a message::\n     >>> newContent = TestContent()\n     >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)\n \n-    >>> newContent._file.data\n-    \'dummy test data\'\n+    >>> bytearray(newContent._file.data)\n+    bytearray(\'dummy test data\')\n     >>> newContent._file.contentType\n     \'text/plain\'\n     >>> newContent._file.filename\n-    u\'test.txt\'\n+    \'test.txt\'\n \n     >>> newContent._image.data == zptlogo\n     True\n     >>> newContent._image.contentType\n     \'image/gif\'\n     >>> newContent._image.filename\n-    u\'zptl\\xf8go.gif\'\n+    \'zptl\\xf8go.gif\'\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 534b2a6..62b4a8c 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,7 @@\n import logging\n import six\n \n+\n logger = logging.getLogger(__name__)\n _marker = object()\n \n@@ -113,7 +114,7 @@ def tag(self, height=_marker, width=_marker, alt=_marker,\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n-            elif isinstance(v, str):\n+            elif isinstance(v, six.binary_type):\n                 v = six.text_type(v, \'utf8\')\n             parts.append(u\'{0}={1}\'.format(k, quoteattr(v)))\n         parts.append(\'/>\')\n@@ -341,7 +342,7 @@ def traverse(self, name, furtherPath):\n     @deprecate(\'use property available_sizes instead\')\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n-            logger.warn(\n+            logger.warning(\n                 \'fieldname was passed to deprecated getAvailableSizes, but \'\n                 \'will be ignored.\',\n             )\ndiff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py\nindex 9a9403b..b4a08c7 100644\n--- a/plone/namedfile/storages.py\n+++ b/plone/namedfile/storages.py\n@@ -8,31 +8,43 @@\n from zope.interface import implementer\n from zope.publisher.browser import FileUpload\n \n+import io\n import six\n \n+\n MAXCHUNKSIZE = 1 << 16\n \n \n @implementer(IStorage)\n-class StringStorable(object):\n+class BytesStorable(object):\n \n     def store(self, data, blob):\n-        if not isinstance(data, str):\n-            raise NotStorable(\'Could not store data (not of "str" type).\')\n+        if not isinstance(data, six.binary_type):\n+            raise NotStorable(\'Could not store data (not of bytes type).\')\n \n         with blob.open(\'w\') as fp:\n             fp.write(data)\n \n \n @implementer(IStorage)\n-class UnicodeStorable(StringStorable):\n+class TextStorable(BytesStorable):\n \n     def store(self, data, blob):\n         if not isinstance(data, six.text_type):\n             raise NotStorable(\'Could not store data (not of "unicode" type).\')\n \n         data = data.encode(\'UTF-8\')\n-        StringStorable.store(self, data, blob)\n+        BytesStorable.store(self, data, blob)\n+\n+\n+@implementer(IStorage)\n+class UnicodeStorable(TextStorable):\n+    pass\n+\n+\n+@implementer(IStorage)\n+class StringStorable(BytesStorable):\n+    pass\n \n \n @implementer(IStorage)\n@@ -62,6 +74,19 @@ def store(self, data, blob):\n             return\n \n \n+class BufferedReaderStorable(object):\n+\n+    def store(self, data, blob):\n+        raw = data.raw\n+        if not isinstance(raw, io.FileIO):\n+            raise NotStorable(\'Could not store data (not of type "io.FileIO")\')\n+\n+        filename = getattr(data.raw, \'name\', None)\n+        if filename is not None:\n+            blob.consumeFile(filename)\n+            return\n+\n+\n @implementer(IStorage)\n class FileUploadStorable(object):\n \n@@ -84,5 +109,5 @@ def store(self, pdata, blob):\n         if not isinstance(pdata, Pdata):\n             raise NotStorable(\'Could not store data (not of "Pdata").\')\n         fp = blob.open(\'w\')\n-        fp.write(str(pdata))\n+        fp.write(bytes(pdata))\n         fp.close()\ndiff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex 1581cd3..a1c3885 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing import publisher\n-from plone.testing import z2\n from plone.testing import zca\n-from plone.testing import zodb\n+\n+from plone.testing import zope\n from zope.configuration import xmlconfig\n \n \n class NamedFileTestLayer(Layer):\n \n-    defaultBases = (z2.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n+    defaultBases = (zope.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n \n     def setUp(self):\n         zca.pushGlobalRegistry()\n@@ -17,28 +17,19 @@ def setUp(self):\n         import plone.namedfile\n         xmlconfig.file(\'testing.zcml\', plone.namedfile)\n \n-        self[\'zodbDB\'] = zodb.stackDemoStorage(\n-            self.get(\'zodbDB\'),\n-            name=\'NamedFileFixture\'\n-        )\n-\n     def tearDown(self):\n-        # Zap the stacked ZODB\n-        self[\'zodbDB\'].close()\n-        del self[\'zodbDB\']\n-\n         # Zap the stacked zca context\n         zca.popGlobalRegistry()\n \n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n-PLONE_NAMEDFILE_INTEGRATION_TESTING = z2.IntegrationTesting(\n+PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n )\n \n-PLONE_NAMEDFILE_FUNCTIONAL_TESTING = z2.FunctionalTesting(\n+PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n     name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n )\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 3e18472..f8dadbb 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -5,4 +5,5 @@\n def getFile(filename):\n     """ return contents of the file with the given name """\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    return open(filename, \'rb\')\n+    with open(filename, \'rb\') as data_file:\n+        return data_file.read()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex ec14bfd..1949038 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -69,12 +69,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file = self._makeImage()\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'\')\n+        self.assertEqual(file.data, b\'\')\n \n     def testConstructor(self):\n-        file = self._makeImage(\'Data\')\n+        file = self._makeImage(b\'Data\')\n         self.assertEqual(file.contentType, \'\')\n-        self.assertEqual(file.data, \'Data\')\n+        self.assertEqual(file.data, b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -97,9 +97,9 @@ def testInterface(self):\n     def testDataMutatorWithLargeHeader(self):\n         from plone.namedfile.file import IMAGE_INFO_BYTES\n         bogus_header_length = struct.pack(\'>H\', IMAGE_INFO_BYTES * 2)\n-        data = (\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n-                \'\\x00\' * IMAGE_INFO_BYTES * 2 +\n-                \'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n+        data = (b\'\\xff\\xd8\\xff\\xe0\' + bogus_header_length +\n+                b\'\\x00\' * IMAGE_INFO_BYTES * 2 +\n+                b\'\\xff\\xc0\\x00\\x11\\x08\\x02\\xa8\\x04\\x00\')\n         image = self._makeImage()\n         image._setData(data)\n         self.assertEqual(image.getImageSize(), (1024, 680))\ndiff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py\nindex ae5b267..eb85b9c 100644\n--- a/plone/namedfile/tests/test_doctests.py\n+++ b/plone/namedfile/tests/test_doctests.py\n@@ -3,6 +3,8 @@\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -14,6 +16,22 @@\n ]\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n+            got = got.replace(\'bytearray(b\', \'bytearray(\')\n+            got = re.sub(\n+                "WrongType", "zope.schema._bootstrapinterfaces.WrongType", got)\n+            got = got.replace(\n+                "filename*=\\"utf-8\'\'test.txt\\"", "filename*=utf-8\'\'test.txt")\n+\n+        if six.PY3:\n+            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -21,8 +39,10 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     testfile,\n                     package=\'plone.namedfile\',\n+                    checker=Py23DocChecker(),\n+                    optionflags=doctest.ELLIPSIS,\n                 ),\n-                PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n+                PLONE_NAMEDFILE_FUNCTIONAL_TESTING,\n             ) for testfile in TEST_FILES\n         ]\n \ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex eb458e1..11598ee 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -11,23 +11,23 @@\n \n \n zptlogo = (\n-    \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    \'\\x00A\\x00;\'\n+    b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    b\'\\x00A\\x00;\'\n )\n \n \n@@ -39,12 +39,12 @@ def _makeImage(self, *args, **kw):\n     def testEmpty(self):\n         file_img = self._makeImage()\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'\')\n+        self.assertEqual(bytes(file_img.data), b\'\')\n \n     def testConstructor(self):\n-        file_img = self._makeImage(\'Data\')\n+        file_img = self._makeImage(b\'Data\')\n         self.assertEqual(file_img.contentType, \'\')\n-        self.assertEqual(file_img.data, \'Data\')\n+        self.assertEqual(bytes(file_img.data), b\'Data\')\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -65,17 +65,17 @@ def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     contentType=\'image/gif\')),\n             \'image/gif\')\n         self.assertEqual(\n             get_contenttype(\n                 NamedImage(\n-                    getFile(\'image.gif\').read(),\n+                    getFile(\'image.gif\'),\n                     filename=u\'image.gif\')),\n             \'image/gif\')\n         self.assertEqual(get_contenttype(\n-            NamedImage(getFile(\'notimage.doc\').read(),\n+            NamedImage(getFile(\'notimage.doc\'),\n                        filename=u\'notimage.doc\')),\n             \'application/msword\')\n \n@@ -101,7 +101,7 @@ class FakeField(object):\n         image._setData(zptlogo)\n         validate_image_field(FakeField(), image)\n \n-        notimage = NamedImage(getFile(\'notimage.doc\').read(),\n+        notimage = NamedImage(getFile(\'notimage.doc\'),\n                               filename=u\'notimage.doc\')\n         self.assertRaises(\n             InvalidImageFile,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex a9ae071..8e68794 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -10,7 +10,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.scale.interfaces import IScaledImageQuality\n-from six import StringIO\n+from six import BytesIO\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import getGlobalSiteManager\n@@ -34,7 +34,7 @@ class IHasImage(IImageScaleTraversable):\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -63,7 +63,7 @@ class ImageScalingTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -228,7 +228,7 @@ def testScaleInvalidation(self):\n         foo1 = self.scaling.scale(\'image\', scale=\'foo\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the scale has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         foo2 = self.scaling.scale(\'image\', scale=\'foo\')\n         self.assertFalse(foo1.data == foo2.data, \'scale not updated?\')\n@@ -288,7 +288,7 @@ def testGetOriginalScaleTag(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithNonASCIITitle(self):\n-        self.item.title = \'\\xc3\\xbc\'\n+        self.item.title = u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -299,7 +299,7 @@ def testScaleOnItemWithNonASCIITitle(self):\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithUnicodeTitle(self):\n-        self.item.Title = lambda: \'\\xc3\\xbc\'.decode(\'utf8\')\n+        self.item.Title = lambda: u\'\xc3\xbc\'\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n@@ -313,7 +313,7 @@ def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n         Image quality not available for PNG images.\n         """\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.jpg\')\n         scaling = ImageScaling(item, None)\n@@ -349,7 +349,7 @@ class ImageTraverseTests(unittest.TestCase):\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n-        data = getFile(\'image.png\').read()\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.app._setOb(\'item\', item)\n@@ -397,7 +397,7 @@ def testScaleInvalidation(self):\n         uid1, ext, width1, height1 = self.traverse(\'image/thumb\')\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the thumbnail has changed\n-        data = getFile(\'image.jpg\').read()\n+        data = getFile(\'image.jpg\')\n         self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n         uid2, ext, width2, height2 = self.traverse(\'image/thumb\')\n         self.assertNotEqual(uid1, uid2, \'thumb not updated?\')\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex 889d3bc..ac4282d 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -9,29 +9,23 @@\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n-from plone.testing.z2 import Browser\n-from six import StringIO\n+from plone.testing.zope import Browser\n+from six import BytesIO\n from zope.annotation import IAttributeAnnotatable\n from zope.interface import implementer\n \n import PIL\n-import time\n+import six\n import transaction\n import unittest\n \n \n-def wait_to_ensure_modified():\n-    # modified is measured in milliseconds\n-    # wait 5ms to ensure modified will have changed\n-    time.sleep(0.005)\n-\n-\n class IHasImage(IImageScaleTraversable):\n     image = NamedImageField()\n \n \n def assertImage(testcase, data, format_, size):\n-    image = PIL.Image.open(StringIO(data))\n+    image = PIL.Image.open(BytesIO(data))\n     testcase.assertEqual(image.format, format_)\n     testcase.assertEqual(image.size, size)\n \n@@ -52,7 +46,9 @@ class ImagePublisherTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\').read()\n+        if six.PY2:\n+            raise unittest.SkipTest(\'Disabled in py2 for now.\')\n+        data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = NamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n@@ -115,7 +111,7 @@ def make_head_request(args):\n             self.browser.headers[\'Content-Length\'],\n             str(GET_length)\n         )\n-        self.assertEqual(self.browser.contents, \'\')\n+        self.assertEqual(self.browser.contents, b\'\')\n \n     def testPublishThumbViaUID(self):\n         ImageScaling._sizes = {\'thumb\': (128, 128)}\n@@ -146,7 +142,7 @@ def testPublishThumbViaName(self):\n             self.layer[\'app\'].absolute_url() + \'/item/@@images/image\'\n         )\n         self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(self.browser.contents, getFile(\'image.png\').read())\n+        self.assertEqual(self.browser.contents, getFile(\'image.png\'))\n \n         # and last a scaled version\n         self.browser.open(\ndiff --git a/plone/namedfile/tests/test_storable.py b/plone/namedfile/tests/test_storable.py\nindex fe94a28..504b206 100644\n--- a/plone/namedfile/tests/test_storable.py\n+++ b/plone/namedfile/tests/test_storable.py\n@@ -22,6 +22,8 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.tests import getFile\n \n+import os\n+import tempfile\n import unittest\n \n \n@@ -29,19 +31,30 @@ class TestStorable(unittest.TestCase):\n \n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n-    def setUp(self):\n-        pass\n-\n     def test_pdata_storable(self):\n-        pdata = Pdata(getFile(\'image.gif\').read())\n+        pdata = Pdata(getFile(\'image.gif\'))\n         fi = NamedBlobImage(pdata, filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_str_storable(self):\n-        fi = NamedBlobImage(getFile(\'image.gif\').read(), filename=u\'image.gif\')\n+        fi = NamedBlobImage(getFile(\'image.gif\'), filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n \n     def test_filechunk_storable(self):\n-        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\').read()),\n+        fi = NamedBlobImage(FileChunk(getFile(\'image.gif\')),\n                             filename=u\'image.gif\')\n         self.assertEqual(303, fi.getSize())\n+\n+    def test_opened_file_storable(self):\n+        data = getFile(\'image.gif\')\n+        f = tempfile.NamedTemporaryFile(delete=False)\n+        try:\n+            path = f.name\n+            f.write(data)\n+            f.close()\n+            with open(path, \'rb\') as f:\n+                fi = NamedBlobImage(f, filename=u\'image.gif\')\n+        finally:\n+            if os.path.exists(path):\n+                os.remove(path)\n+        self.assertEqual(303, fi.getSize())\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex 580847c..f55ab21 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -43,28 +43,28 @@ The FileContainer class creates empty objects to start with::\n \n     >>> container = FileContainer()\n \n-    >>> container.simple.data\n-    \'\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(\'\')\n     >>> container.simple.contentType\n     \'\'\n     >>> container.simple.filename is None\n     True\n \n-    >>> container.image.data\n-    \'\'\n+    >>> len(container.image.data)\n+    0\n     >>> container.image.contentType\n     \'\'\n     >>> container.image.filename is None\n     True\n \n-    >>> container.blob.data\n-    \'\'\n+    >>> len(container.blob.data)\n+    0\n     >>> container.blob.contentType\n     \'\'\n     >>> container.blob.filename is None\n     True\n-    >>> container.blobimage.data\n-    \'\'\n+    >>> len(container.blobimage.data)\n+    0\n     >>> container.blobimage.contentType\n     \'\'\n     >>> container.blobimage.filename is None\n@@ -74,41 +74,41 @@ Let\'s now set some actual data in these files. Notice how the constructor\n will attempt to guess the filename from the file extension::\n \n     >>> container.simple = namedfile.NamedFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.simple.data\n-    \'dummy test data\'\n+    >>> bytearray(container.simple.data)\n+    bytearray(\'dummy test data\')\n     >>> container.simple.contentType\n     \'text/plain\'\n-    >>> container.simple.filename\n-    u\'test.txt\'\n+    >>> print(container.simple.filename)\n+    test.txt\n \n     >>> container.blob = namedfile.NamedBlobFile(\'dummy test data\', filename=u"test.txt")\n-    >>> container.blob.data\n-    \'dummy test data\'\n+    >>> bytearray(container.blob.data)\n+    bytearray(\'dummy test data\')\n     >>> container.blob.contentType\n     \'text/plain\'\n-    >>> container.blob.filename\n-    u\'test.txt\'\n+    >>> print(container.blob.filename)\n+    test.txt\n \n Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n \n     >>> zptlogo = (\n-    ...     \'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n-    ...     \'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n-    ...     \'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n-    ...     \'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n-    ...     \'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n-    ...     \'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n-    ...     \'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n-    ...     \'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n-    ...     \'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n-    ...     \'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n-    ...     \'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n-    ...     \'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n-    ...     \'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n-    ...     \'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n-    ...     \'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n-    ...     \'\\x00A\\x00;\'\n+    ...     b\'GIF89a\\x10\\x00\\x10\\x00\\xd5\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xfe\\xfc\\xfd\\xfd\'\n+    ...     b\'\\xfa\\xfb\\xfc\\xf7\\xf9\\xfa\\xf5\\xf8\\xf9\\xf3\\xf6\\xf8\\xf2\\xf5\\xf7\\xf0\\xf4\\xf6\'\n+    ...     b\'\\xeb\\xf1\\xf3\\xe5\\xed\\xef\\xde\\xe8\\xeb\\xdc\\xe6\\xea\\xd9\\xe4\\xe8\\xd7\\xe2\\xe6\'\n+    ...     b\'\\xd2\\xdf\\xe3\\xd0\\xdd\\xe3\\xcd\\xdc\\xe1\\xcb\\xda\\xdf\\xc9\\xd9\\xdf\\xc8\\xd8\\xdd\'\n+    ...     b\'\\xc6\\xd7\\xdc\\xc4\\xd6\\xdc\\xc3\\xd4\\xda\\xc2\\xd3\\xd9\\xc1\\xd3\\xd9\\xc0\\xd2\\xd9\'\n+    ...     b\'\\xbd\\xd1\\xd8\\xbd\\xd0\\xd7\\xbc\\xcf\\xd7\\xbb\\xcf\\xd6\\xbb\\xce\\xd5\\xb9\\xcd\\xd4\'\n+    ...     b\'\\xb6\\xcc\\xd4\\xb6\\xcb\\xd3\\xb5\\xcb\\xd2\\xb4\\xca\\xd1\\xb2\\xc8\\xd0\\xb1\\xc7\\xd0\'\n+    ...     b\'\\xb0\\xc7\\xcf\\xaf\\xc6\\xce\\xae\\xc4\\xce\\xad\\xc4\\xcd\\xab\\xc3\\xcc\\xa9\\xc2\\xcb\'\n+    ...     b\'\\xa8\\xc1\\xca\\xa6\\xc0\\xc9\\xa4\\xbe\\xc8\\xa2\\xbd\\xc7\\xa0\\xbb\\xc5\\x9e\\xba\\xc4\'\n+    ...     b\'\\x9b\\xbf\\xcc\\x98\\xb6\\xc1\\x8d\\xae\\xbaFgs\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'\n+    ...     b\'\\x00,\\x00\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x06z@\\x80pH,\\x12k\\xc8$\\xd2f\\x04\'\n+    ...     b\'\\xd4\\x84\\x01\\x01\\xe1\\xf0d\\x16\\x9f\\x80A\\x01\\x91\\xc0ZmL\\xb0\\xcd\\x00V\\xd4\'\n+    ...     b\'\\xc4a\\x87z\\xed\\xb0-\\x1a\\xb3\\xb8\\x95\\xbdf8\\x1e\\x11\\xca,MoC$\\x15\\x18{\'\n+    ...     b\'\\x006}m\\x13\\x16\\x1a\\x1f\\x83\\x85}6\\x17\\x1b $\\x83\\x00\\x86\\x19\\x1d!%)\\x8c\'\n+    ...     b\'\\x866#\\\'+.\\x8ca`\\x1c`(,/1\\x94B5\\x19\\x1e"&*-024\\xacNq\\xba\\xbb\\xb8h\\xbeb\'\n+    ...     b\'\\x00A\\x00;\'\n     ...     )\n \n     >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")\n@@ -116,16 +116,16 @@ Let\'s also try to read a GIF, courtesy of the zope.app.file tests::\n     True\n     >>> container.image.contentType\n     \'image/gif\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/gif\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n Note that is possible for force the mimetype::\n \n@@ -134,23 +134,23 @@ Note that is possible for force the mimetype::\n     True\n     >>> container.image.contentType\n     \'image/foo\'\n-    >>> container.image.filename\n-    u\'zpt.gif\'\n+    >>> print(container.image.filename)\n+    zpt.gif\n \n     >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType=\'image/foo\', filename=u"zpt.gif")\n     >>> container.blobimage.data == zptlogo\n     True\n     >>> container.blobimage.contentType\n     \'image/foo\'\n-    >>> container.blobimage.filename\n-    u\'zpt.gif\'\n+    >>> print(container.blobimage.filename)\n+    zpt.gif\n \n The filename must be set to a unicode string, not a bytestring::\n \n-    >>> container.image.filename = \'foo\'\n+    >>> container.image.filename = b\'foo\'\n     Traceback (most recent call last):\n     ...\n-    WrongType: (\'foo\', <type \'unicode\'>, \'filename\')\n+    zope.schema._bootstrapinterfaces.WrongType: ...\n \n \n Download view\n@@ -169,8 +169,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'simple\')\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -181,8 +181,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> download = Download(container, request).publishTraverse(request, \'blob\')\n     >>> data = download()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -230,8 +230,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'simple\')\n-    >>> display_file()\n-    \'dummy test data\'\n+    >>> bytearray(display_file())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -241,8 +241,8 @@ We will test this with a dummy request, faking traversal::\n     >>> request = TestRequest()\n     >>> display_file = DisplayFile(container, request).publishTraverse(request, \'blob\')\n     >>> data = display_file()\n-    >>> hasattr(data, \'read\') and data.read() or data\n-    \'dummy test data\'\n+    >>> bytearray(hasattr(data, \'read\') and data.read() or data)\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\n@@ -298,8 +298,8 @@ We will test this with a dummy request, faking traversal::\n \n     >>> request = TestRequest()\n     >>> download = Download(container, request)\n-    >>> download()\n-    \'dummy test data\'\n+    >>> bytearray(download())\n+    bytearray(\'dummy test data\')\n     >>> request.response.getHeader(\'Content-Length\')\n     \'15\'\n     >>> request.response.getHeader(\'Content-Type\')\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex ec62738..9c7ddad 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -5,7 +5,7 @@\n from plone.namedfile.utils.png_utils import process_png\n from plone.namedfile.utils.tiff_utils import process_tiff\n from plone.registry.interfaces import IRegistry\n-from six import StringIO\n+from six import BytesIO\n from six.moves import urllib\n from zope.component import queryUtility\n from zope.deprecation import deprecate\n@@ -17,6 +17,7 @@\n import six\n import struct\n \n+\n log = getLogger(__name__)\n \n try:\n@@ -104,7 +105,7 @@ def _ensure_data(image):\n         image.seek(0)\n     else:\n         data = image\n-    return str(data)\n+    return bytes(data)\n \n \n def getImageInfo(data):\n@@ -114,43 +115,43 @@ def getImageInfo(data):\n     width = -1\n     content_type = \'\'\n \n-    if (size >= 10) and data[:6] in (\'GIF87a\', \'GIF89a\'):\n+    if (size >= 10) and data[:6] in (b\'GIF87a\', b\'GIF89a\'):\n         # handle GIFs\n         content_type = \'image/gif\'\n         w, h = struct.unpack(\'<HH\', data[6:10])\n         width = int(w)\n         height = int(h)\n \n-    elif data[:8] == \'\\211PNG\\r\\n\\032\\n\':\n+    elif data[:8] == b\'\\211PNG\\r\\n\\032\\n\':\n         # handle PNG\n         content_type, width, height = process_png(data)\n \n-    elif data[:2] == \'\\377\\330\':\n+    elif data[:2] == b\'\\377\\330\':\n         # handle JPEGs\n         content_type, width, height = process_jpeg(data)\n \n-    elif (size >= 30) and data.startswith(\'BM\'):\n+    elif (size >= 30) and data.startswith(b\'BM\'):\n         # handle BMPs\n         kind = struct.unpack(\'<H\', data[14:16])[0]\n         if kind == 40:  # Windows 3.x bitmap\n             content_type = \'image/x-ms-bmp\'\n             width, height = struct.unpack(\'<LL\', data[18:26])\n \n-    elif (size >= 4) and data[:4] in [\'MM\\x00*\', \'II*\\x00\']:\n+    elif (size >= 4) and data[:4] in [b\'MM\\x00*\', b\'II*\\x00\']:\n         # handle TIFFs\n         content_type, width, height = process_tiff(data)\n \n     else:\n         # Use PIL / Pillow to determ Image Information\n         try:\n-            img = PIL.Image.open(StringIO(data))\n+            img = PIL.Image.open(BytesIO(data))\n             width, height = img.size\n             content_type = img.format\n         except Exception:\n             # TODO: determ wich error really happens\n             # Should happen if data is to short --> first_bytes\n             # happens also if data is an svg or another special format.\n-            log.warn(\n+            log.warning(\n                 \'PIL can not recognize the image. \'\n                 \'Image is probably broken or of a non-supported format.\'\n             )\n@@ -193,7 +194,7 @@ def rotate_image(image_data, method=None, REQUEST=None):\n     """\n     orientation = 1  # if not set assume correct orrinetation --> 1\n     data = _ensure_data(image_data)\n-    img = PIL.Image.open(StringIO(data))\n+    img = PIL.Image.open(BytesIO(data))\n \n     exif_data = None\n     if \'exif\' in img.info:\ndiff --git a/plone/namedfile/utils/jpeg_utils.py b/plone/namedfile/utils/jpeg_utils.py\nindex 6f49de0..31037c3 100644\n--- a/plone/namedfile/utils/jpeg_utils.py\n+++ b/plone/namedfile/utils/jpeg_utils.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -15,9 +15,9 @@ def process_jpeg(data):\n     h = -1\n     size = len(data)\n \n-    if (size >= 2) and data.startswith(\'\\377\\330\'):  # handle JPEGs\n+    if (size >= 2) and data.startswith(b\'\\377\\330\'):  # handle JPEGs\n         content_type = \'image/jpeg\'\n-        jpeg = StringIO(data)\n+        jpeg = BytesIO(data)\n         jpeg.read(2)\n         b = jpeg.read(1)\n         try:\ndiff --git a/plone/namedfile/utils/png_utils.py b/plone/namedfile/utils/png_utils.py\nindex 1d42984..172402c 100644\n--- a/plone/namedfile/utils/png_utils.py\n+++ b/plone/namedfile/utils/png_utils.py\n@@ -17,17 +17,17 @@ def process_png(data):\n     # Bytes 0-7 are below, 4-byte chunk length, then \'IHDR\'\n     # and finally the 4-byte width, height\n     if (\n-        (size >= 24) and data.startswith(\'\\211PNG\\r\\n\\032\\n\') and\n-        (data[12:16] == \'IHDR\')\n+        (size >= 24) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\') and\n+        (data[12:16] == b\'IHDR\')\n     ):\n         content_type = \'image/png\'\n         w, h = struct.unpack(\'>LL\', data[16:24])\n \n     # Maybe this is for an older PNG version.\n-    elif (size >= 16) and data.startswith(\'\\211PNG\\r\\n\\032\\n\'):\n+    elif (size >= 16) and data.startswith(b\'\\211PNG\\r\\n\\032\\n\'):\n         # Check to see if we have the right content type\n         content_type = \'image/png\'\n-        w, h = struct.unpack(\'>LL\', data[8:16])\n+        w, h = struct.unpack(b\'>LL\', data[8:16])\n \n     width = int(w)\n     height = int(h)\ndiff --git a/plone/namedfile/utils/tiff_utils.py b/plone/namedfile/utils/tiff_utils.py\nindex 416831f..bfdd01c 100644\n--- a/plone/namedfile/utils/tiff_utils.py\n+++ b/plone/namedfile/utils/tiff_utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from logging import getLogger\n-from six import StringIO\n+from six import BytesIO\n \n import struct\n \n@@ -42,7 +42,7 @@ def process_tiff(data):\n             log.info(\'Endian or 42 Check failed\')\n \n         if endian:\n-            tiff = StringIO(data)\n+            tiff = BytesIO(data)\n             tiff.read(4)  # Magic Header, could be skipped, already processed\n             offset = struct.unpack_from(endian + \'I\', tiff)  # first IFD offset\n             b = tiff.read(offset)\ndiff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml\nindex 282dbad..3b2ceb3 100644\n--- a/plone/namedfile/z3c-blobfile.zcml\n+++ b/plone/namedfile/z3c-blobfile.zcml\n@@ -1,5 +1,19 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n+  <!-- text for py3 -->\n+  <utility\n+      name="builtins.str"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.TextStorable"\n+      />\n+\n+  <!-- bytes for py3 -->\n+  <utility\n+      name="builtins.bytes"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BytesStorable"\n+      />\n+\n   <utility\n       name="__builtin__.str"\n       provides=".interfaces.IStorage"\n@@ -24,11 +38,18 @@\n       factory=".storages.FileDescriptorStorable"\n       />\n \n+  <utility\n+      name="_io.BufferedReader"\n+      provides=".interfaces.IStorage"\n+      factory=".storages.BufferedReaderStorable"\n+      />\n+\n   <utility\n       name="zope.publisher.browser.FileUpload"\n       provides=".interfaces.IStorage"\n       factory=".storages.FileUploadStorable"\n       />\n+\n   <utility\n       name="OFS.Image.Pdata"\n       provides=".interfaces.IStorage"\ndiff --git a/setup.py b/setup.py\nindex 93ef0e1..47e9c58 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,6 +26,8 @@\n         "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n@@ -39,7 +41,8 @@\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'plone.rfc822>=1.0b2\',\n+        \'piexif\',\n+        \'plone.rfc822>=2.0a1\',\n         \'plone.scale[storage] >=1.4.999\',\n         \'plone.schemaeditor\',\n         \'plone.supermodel\',\n@@ -50,7 +53,6 @@\n         \'zope.copy\',\n         \'zope.security\',\n         \'zope.traversing\',\n-        \'piexif\',\n     ],\n     extras_require={\n         \'test\': [\n'

