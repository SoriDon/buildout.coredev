Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:18:30+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/036efb81fe1e19dc642b52fd664033f09992c769

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 450b1d8..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -19,6 +21,42 @@ directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n \n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n [tool.black]\n-line-length = 79\n-skip-string-normalization = true\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 68a6b90..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,16 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.py\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n\\ No newline at end of file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0fd5963\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.relationfield {posargs}\n+extras =\n+    test\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:20:55+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/9bcb1d15dae62fa4d5e9e280601abbe87cf04679

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/relationfield/__init__.py
M plone/app/relationfield/adapter.py
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/event.py
M plone/app/relationfield/interfaces.py
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/monkey.py
M plone/app/relationfield/path.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M plone/app/relationfield/widget.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py\nindex 567321c..91ad7cb 100644\n--- a/plone/app/relationfield/__init__.py\n+++ b/plone/app/relationfield/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.monkey import PATCHES\n \n import pkg_resources\ndiff --git a/plone/app/relationfield/adapter.py b/plone/app/relationfield/adapter.py\nindex f953bd3..f66c8c0 100644\n--- a/plone/app/relationfield/adapter.py\n+++ b/plone/app/relationfield/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IUUID\ndiff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py\nindex d05e501..c311d79 100644\n--- a/plone/app/relationfield/behavior.py\n+++ b/plone/app/relationfield/behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.z3cform.widget import RelatedItemsFieldWidget\n from plone.autoform import directives as form\n@@ -16,10 +15,10 @@ class IRelatedItems(model.Schema):\n     """\n \n     relatedItems = RelationList(\n-        title=_(u\'label_related_items\', default=u\'Related Items\'),\n+        title=_(\'label_related_items\', default=\'Related Items\'),\n         default=[],\n         value_type=RelationChoice(\n-            title=u\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title=\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n         ),\n         required=False,\n     )\n@@ -33,5 +32,5 @@ class IRelatedItems(model.Schema):\n     )\n \n     fieldset(\n-        \'categorization\', label=_(u\'Categorization\'), fields=[\'relatedItems\']\n+        \'categorization\', label=_(\'Categorization\'), fields=[\'relatedItems\']\n     )\ndiff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py\nindex 3ca6349..191ae47 100644\n--- a/plone/app/relationfield/demo.py\n+++ b/plone/app/relationfield/demo.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform import layout\n from z3c.form import field\n from z3c.form import form\n@@ -9,14 +8,14 @@\n \n class ITestForm(IFormLayer):\n     multiple = RelationList(\n-        title=u\'Multiple (Relations field)\',\n+        title=\'Multiple (Relations field)\',\n         required=False,\n         value_type=RelationChoice(\n-            title=u\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title=\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n         ),\n     )\n     single = RelationChoice(\n-        title=u\'Single\',\n+        title=\'Single\',\n         required=False,\n         vocabulary=\'plone.app.vocabularies.Catalog\',\n     )\ndiff --git a/plone/app/relationfield/event.py b/plone/app/relationfield/event.py\nindex e2d2a16..b141e95 100644\n--- a/plone/app/relationfield/event.py\n+++ b/plone/app/relationfield/event.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from z3c.relationfield.event import _setRelation\n from z3c.relationfield.interfaces import IRelation\ndiff --git a/plone/app/relationfield/interfaces.py b/plone/app/relationfield/interfaces.py\nindex e9079ed..ef06fa9 100644\n--- a/plone/app/relationfield/interfaces.py\n+++ b/plone/app/relationfield/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.relationfield.interfaces import IHasRelations\n \n \ndiff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py\nindex 00d221a..1475bb2 100644\n--- a/plone/app/relationfield/marshaler.py\n+++ b/plone/app/relationfield/marshaler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822.defaultfields import BaseFieldMarshaler\n from z3c.relationfield import RelationValue\n \n@@ -25,7 +24,7 @@ def decode(\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         try:\n             toId = int(value)\ndiff --git a/plone/app/relationfield/monkey.py b/plone/app/relationfield/monkey.py\nindex 4186195..cb430b0 100644\n--- a/plone/app/relationfield/monkey.py\n+++ b/plone/app/relationfield/monkey.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.relationfield.relation import _object\n from z3c.relationfield.relation import RelationValue\n from zope.component import getUtility\ndiff --git a/plone/app/relationfield/path.py b/plone/app/relationfield/path.py\nindex 31fffe8..398105a 100644\n--- a/plone/app/relationfield/path.py\n+++ b/plone/app/relationfield/path.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.objpath.interfaces import IObjectPath\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n@@ -6,7 +5,7 @@\n \n \n @implementer(IObjectPath)\n-class Zope2ObjectPath(object):\n+class Zope2ObjectPath:\n     """Path representation for Zope 2 objects.\n     """\n \ndiff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py\nindex 167c20b..69c156c 100644\n--- a/plone/app/relationfield/schemaeditor.py\n+++ b/plone/app/relationfield/schemaeditor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.schemaeditor.fields import FieldFactory\n from plone.schemaeditor.interfaces import IFieldEditFormSchema\n@@ -26,10 +25,10 @@ def available(self):\n class IRelationFieldSettings(schema.interfaces.IField):\n \n     portal_type = schema.Set(\n-        title=_(u\'Types\'),\n-        description=_(u\'Allowed target types\'),\n+        title=_(\'Types\'),\n+        description=_(\'Allowed target types\'),\n         value_type=schema.Choice(\n-            title=_(u\'Type\'),\n+            title=_(\'Type\'),\n             vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n         ),\n         required=False,\n@@ -42,7 +41,7 @@ def getRelationChoiceEditFormSchema(field):\n     return IRelationFieldSettings\n \n \n-class RelationChoiceEditFormAdapter(object):\n+class RelationChoiceEditFormAdapter:\n     def __init__(self, field):\n         self.field = field\n \n@@ -73,7 +72,7 @@ def getRelationListEditFormSchema(field):\n     return IRelationFieldSettings\n \n \n-class RelationListEditFormAdapter(object):\n+class RelationListEditFormAdapter:\n     def __init__(self, field):\n         self.field = field\n \n@@ -97,6 +96,6 @@ def portal_type(self, value):\n     RelationList,\n     _(\'Relation List\'),\n     value_type=RelationChoice(\n-        title=_(u\'Relation Choice\'), source=CatalogSource()\n+        title=_(\'Relation Choice\'), source=CatalogSource()\n     ),\n )\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex 56200f9..fd43cc3 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from z3c.relationfield.index import RelationCatalog\ndiff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py\nindex 6a6ae25..781064e 100644\n--- a/plone/app/relationfield/source.py\n+++ b/plone/app/relationfield/source.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from z3c.formwidget.query.interfaces import IQuerySource\n from zope.component import getUtility\n@@ -8,7 +7,7 @@\n \n \n @implementer(IQuerySource)\n-class CMFContentSearchSource(object):\n+class CMFContentSearchSource:\n     def __init__(self, context):\n         self.context = context\n         self.intid_utility = getUtility(IIntIds)\n@@ -33,7 +32,7 @@ def getTermByToken(self, value):\n     def search(self, query_string):\n         catalog = getToolByName(self.context, \'portal_catalog\')\n         result = catalog(\n-            SearchableText=\'{0:s}*\'.format(query_string), sort_limit=20\n+            SearchableText=f\'{query_string:s}*\', sort_limit=20\n         )\n         terms = []\n         for brain in result:\ndiff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py\nindex 70ef6c9..fa3a363 100644\n--- a/plone/app/relationfield/supermodel.py\n+++ b/plone/app/relationfield/supermodel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.supermodel.exportimport import BaseHandler\n from plone.supermodel.utils import valueToElement\n@@ -20,12 +19,12 @@ class RelationChoiceBaseHandler(BaseHandler):\n     )\n \n     def __init__(self, klass):\n-        super(RelationChoiceBaseHandler, self).__init__(klass)\n+        super().__init__(klass)\n \n         self.fieldAttributes[\'portal_type\'] = schema.List(\n             __name__=\'portal_type\',\n-            title=u\'Allowed target types\',\n-            value_type=schema.Text(title=u\'Type\'),\n+            title=\'Allowed target types\',\n+            value_type=schema.Text(title=\'Type\'),\n         )\n \n     def _constructField(self, attributes):\n@@ -42,12 +41,12 @@ def _constructField(self, attributes):\n         else:\n             attributes[\'source\'] = CatalogSource(portal_type=portal_type)\n \n-        return super(RelationChoiceBaseHandler, self)._constructField(\n+        return super()._constructField(\n             attributes\n         )\n \n     def write(self, field, name, type, elementName=\'field\'):\n-        element = super(RelationChoiceBaseHandler, self).write(\n+        element = super().write(\n             field, name, type, elementName\n         )\n         portal_type = []\ndiff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex 51ab0fa..8fa4844 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.app.relationfield import HAS_CONTENTTYPES\n from plone.app.testing import FunctionalTesting\n@@ -17,31 +16,31 @@\n \n \n class IAddress(Interface):\n-    streetname = zope.schema.TextLine(title=u\'Street name\')\n-    city = zope.schema.TextLine(title=u\'City\')\n+    streetname = zope.schema.TextLine(title=\'Street name\')\n+    city = zope.schema.TextLine(title=\'City\')\n \n \n @implementer(IAddress, IHasRelations)\n class Address(Persistent):\n-    __name__ = u\'\'\n-    streetname = u\'\'\n-    city = u\'\'\n+    __name__ = \'\'\n+    streetname = \'\'\n+    city = \'\'\n \n     def __init__(self, streetname, city):\n         self.streetname = streetname\n         self.city = city\n-        __name__ = \'{streetname} - {city}\'.format(**locals())\n+        __name__ = f\'{streetname} - {city}\'\n \n \n class IPerson(zope.interface.Interface):\n-    name = zope.schema.TextLine(title=u\'Name\', default=u\'<no name>\')\n-    phone = zope.schema.TextLine(title=u\'Phone\')\n-    addresses = RelationList(title=u\'Addresses\')\n+    name = zope.schema.TextLine(title=\'Name\', default=\'<no name>\')\n+    phone = zope.schema.TextLine(title=\'Phone\')\n+    addresses = RelationList(title=\'Addresses\')\n \n \n @implementer(IPerson, IHasRelations)\n class Person(Persistent):\n-    name = u\'\'\n+    name = \'\'\n \n     def __init__(self, name):\n         self.name = name\ndiff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py\nindex 8881030..e45d001 100644\n--- a/plone/app/relationfield/tests/test_marshall.py\n+++ b/plone/app/relationfield/tests/test_marshall.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import layered\n from plone.testing.zca import ZCMLSandbox\n from unittest import TestSuite\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 2da2132..2f06968 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex 66cb7df..3f87e90 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py\nindex ff54f16..170ae5b 100644\n--- a/plone/app/relationfield/tests/test_widget.py\n+++ b/plone/app/relationfield/tests/test_widget.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import Address\n from plone.app.relationfield.testing import FUNCTIONAL_TESTING\n from plone.app.relationfield.testing import IPerson\ndiff --git a/plone/app/relationfield/widget.py b/plone/app/relationfield/widget.py\nindex 70340d4..df1b2ad 100644\n--- a/plone/app/relationfield/widget.py\n+++ b/plone/app/relationfield/widget.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.form.datamanager import AttributeField\n from z3c.form.datamanager import DictionaryField\n from z3c.form.interfaces import NO_VALUE\n@@ -22,7 +21,7 @@ def get(self):\n         """Gets the target"""\n         rel = None\n         try:\n-            rel = super(RelationDataManager, self).get()\n+            rel = super().get()\n         except AttributeError:\n             # Not set yet\n             pass\n@@ -35,11 +34,11 @@ def get(self):\n     def set(self, value):\n         """Sets the relationship target"""\n         if value is None:\n-            return super(RelationDataManager, self).set(None)\n+            return super().set(None)\n \n         current = None\n         try:\n-            current = super(RelationDataManager, self).get()\n+            current = super().get()\n         except AttributeError:\n             pass\n         intids = getUtility(IIntIds)\n@@ -50,7 +49,7 @@ def set(self, value):\n         else:\n             # otherwise create a relationship\n             rel = RelationValue(to_id)\n-            super(RelationDataManager, self).set(rel)\n+            super().set(rel)\n \n \n @adapter(dict, IRelation)\n@@ -62,7 +61,7 @@ def get(self):\n         """Gets the target"""\n         rel = None\n         try:\n-            rel = super(RelationDictDataManager, self).get()\n+            rel = super().get()\n         except AttributeError:\n             # Not set yet\n             pass\n@@ -80,18 +79,18 @@ def query(self, default=NO_VALUE):\n             raise e\n         except AttributeError:\n             if default == NO_VALUE:\n-                return super(RelationDictDataManager, self).query()\n+                return super().query()\n             else:\n                 return default\n \n     def set(self, value):\n         """Sets the relationship target"""\n         if value is None:\n-            return super(RelationDictDataManager, self).set(None)\n+            return super().set(None)\n \n         current = None\n         try:\n-            current = super(RelationDictDataManager, self).get()\n+            current = super().get()\n         except AttributeError:\n             pass\n         intids = getUtility(IIntIds)\n@@ -102,7 +101,7 @@ def set(self, value):\n         else:\n             # otherwise create a relationship\n             rel = RelationValue(to_id)\n-            super(RelationDictDataManager, self).set(rel)\n+            super().set(rel)\n \n \n @adapter(Interface, IRelationList)\n@@ -115,7 +114,7 @@ def get(self):\n \n         # Calling query() here will lead to infinite recursion!\n         try:\n-            rel_list = super(RelationListDataManager, self).get()\n+            rel_list = super().get()\n \n         except AttributeError:\n             rel_list = None\n@@ -140,7 +139,7 @@ def set(self, value):\n             # otherwise create one\n             to_id = intids.getId(item)\n             new_relationships.append(RelationValue(to_id))\n-        super(RelationListDataManager, self).set(new_relationships)\n+        super().set(new_relationships)\n \n \n @adapter(dict, IRelationList)\n@@ -153,7 +152,7 @@ def get(self):\n \n         # Calling query() here will lead to infinite recursion!\n         try:\n-            rel_list = super(RelationListDictDataManager, self).get()\n+            rel_list = super().get()\n         except AttributeError:\n             rel_list = None\n \n@@ -186,4 +185,4 @@ def set(self, value):\n             # otherwise create one\n             to_id = intids.getId(item)\n             new_relationships.append(RelationValue(to_id))\n-        super(RelationListDictDataManager, self).set(new_relationships)\n+        super().set(new_relationships)\ndiff --git a/setup.py b/setup.py\nindex 2e72dc4..5e5dc36 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:21:15+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/0266c3b2beb9631228fbe35016fc035a95aded00

chore: isort

Files changed:
M plone/app/relationfield/tests/test_schemaeditor.py

b'diff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 2f06968..651a776 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -3,8 +3,8 @@\n \n import doctest\n import os\n-import six\n import re\n+import six\n import unittest\n \n \n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:22:03+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/5592fc42e732685a4313b6b2f5e7534c60dd9cc8

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/relationfield/__init__.py
M plone/app/relationfield/adapter.py
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/event.py
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/monkey.py
M plone/app/relationfield/path.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py\nindex 91ad7cb..5c268dd 100644\n--- a/plone/app/relationfield/__init__.py\n+++ b/plone/app/relationfield/__init__.py\n@@ -7,7 +7,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_CONTENTTYPES = False\n else:\ndiff --git a/plone/app/relationfield/adapter.py b/plone/app/relationfield/adapter.py\nindex f66c8c0..9be365c 100644\n--- a/plone/app/relationfield/adapter.py\n+++ b/plone/app/relationfield/adapter.py\n@@ -9,7 +9,7 @@\n @implementer(IUUID)\n @adapter(IRelationValue)\n def rvUUID(context):\n-    """ Vocabulary validation via p.a.vocabularies CatalogSource\n-        requires the UUID of the target object to verify membership\n+    """Vocabulary validation via p.a.vocabularies CatalogSource\n+    requires the UUID of the target object to verify membership\n     """\n     return getattr(aq_base(context.to_object), ATTRIBUTE_NAME, None)\ndiff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py\nindex c311d79..5ac5c7e 100644\n--- a/plone/app/relationfield/behavior.py\n+++ b/plone/app/relationfield/behavior.py\n@@ -11,26 +11,23 @@\n \n @provider(IFormFieldProvider)\n class IRelatedItems(model.Schema):\n-    """Behavior interface to make a Dexterity type support related items.\n-    """\n+    """Behavior interface to make a Dexterity type support related items."""\n \n     relatedItems = RelationList(\n-        title=_(\'label_related_items\', default=\'Related Items\'),\n+        title=_("label_related_items", default="Related Items"),\n         default=[],\n         value_type=RelationChoice(\n-            title=\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title="Related", vocabulary="plone.app.vocabularies.Catalog"\n         ),\n         required=False,\n     )\n     form.widget(\n-        \'relatedItems\',\n+        "relatedItems",\n         RelatedItemsFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n         pattern_options={\n-            \'recentlyUsed\': True  # Just turn on. Config in plone.app.widgets.\n+            "recentlyUsed": True  # Just turn on. Config in plone.app.widgets.\n         },\n     )\n \n-    fieldset(\n-        \'categorization\', label=_(\'Categorization\'), fields=[\'relatedItems\']\n-    )\n+    fieldset("categorization", label=_("Categorization"), fields=["relatedItems"])\ndiff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py\nindex 191ae47..89d6afd 100644\n--- a/plone/app/relationfield/demo.py\n+++ b/plone/app/relationfield/demo.py\n@@ -8,16 +8,16 @@\n \n class ITestForm(IFormLayer):\n     multiple = RelationList(\n-        title=\'Multiple (Relations field)\',\n+        title="Multiple (Relations field)",\n         required=False,\n         value_type=RelationChoice(\n-            title=\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title="Multiple", vocabulary="plone.app.vocabularies.Catalog"\n         ),\n     )\n     single = RelationChoice(\n-        title=\'Single\',\n+        title="Single",\n         required=False,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n     )\n \n \ndiff --git a/plone/app/relationfield/event.py b/plone/app/relationfield/event.py\nindex b141e95..0e0a4f9 100644\n--- a/plone/app/relationfield/event.py\n+++ b/plone/app/relationfield/event.py\n@@ -30,7 +30,6 @@ def extract_relations(obj):\n \n \n def update_behavior_relations(obj, event):\n-    """Re-register relations in behaviors\n-    """\n+    """Re-register relations in behaviors"""\n     for behavior_interface, name, relation in extract_relations(obj):\n         _setRelation(obj, name, relation)\ndiff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py\nindex 1475bb2..d50b635 100644\n--- a/plone/app/relationfield/marshaler.py\n+++ b/plone/app/relationfield/marshaler.py\n@@ -11,7 +11,7 @@ class RelationFieldMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return str(value.to_id)\n@@ -20,7 +20,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\ndiff --git a/plone/app/relationfield/monkey.py b/plone/app/relationfield/monkey.py\nindex cb430b0..cd61b4e 100644\n--- a/plone/app/relationfield/monkey.py\n+++ b/plone/app/relationfield/monkey.py\n@@ -8,14 +8,14 @@\n \n \n def get_from_object(self):\n-    if getattr(self, \'_from_id\', None):\n+    if getattr(self, "_from_id", None):\n         return _object(self._from_id)\n     else:\n         intids = getUtility(IIntIds)\n \n         # Heya, is there no from_object? Please have a look at #12802\n \n-        self._from_id = intids.register(self.__dict__[\'from_object\'])\n+        self._from_id = intids.register(self.__dict__["from_object"])\n         return _object(self._from_id)\n \n \ndiff --git a/plone/app/relationfield/path.py b/plone/app/relationfield/path.py\nindex 398105a..8287627 100644\n--- a/plone/app/relationfield/path.py\n+++ b/plone/app/relationfield/path.py\n@@ -6,12 +6,11 @@\n \n @implementer(IObjectPath)\n class Zope2ObjectPath:\n-    """Path representation for Zope 2 objects.\n-    """\n+    """Path representation for Zope 2 objects."""\n \n     def path(self, obj):\n         try:\n-            return \'/\'.join(obj.getPhysicalPath())\n+            return "/".join(obj.getPhysicalPath())\n         except AttributeError:\n             raise ValueError(obj)\n \ndiff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py\nindex 69c156c..b729501 100644\n--- a/plone/app/relationfield/schemaeditor.py\n+++ b/plone/app/relationfield/schemaeditor.py\n@@ -13,7 +13,7 @@\n from zope.intid.interfaces import IIntIds\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @implementer(IFieldFactory)\n@@ -23,13 +23,12 @@ def available(self):\n \n \n class IRelationFieldSettings(schema.interfaces.IField):\n-\n     portal_type = schema.Set(\n-        title=_(\'Types\'),\n-        description=_(\'Allowed target types\'),\n+        title=_("Types"),\n+        description=_("Allowed target types"),\n         value_type=schema.Choice(\n-            title=_(\'Type\'),\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+            title=_("Type"),\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n         ),\n         required=False,\n     )\n@@ -49,20 +48,20 @@ def __init__(self, field):\n     def portal_type(self):\n         field = self.field\n         types = []\n-        types.extend(field.source.query.get(\'portal_type\') or [])\n+        types.extend(field.source.query.get("portal_type") or [])\n         return types\n \n     @portal_type.setter\n     def portal_type(self, value):\n         field = self.field\n         if value:\n-            field.source.query[\'portal_type\'] = list(value)\n-        elif \'portal_type\' in field.source.query:\n-            del field.source.query[\'portal_type\']\n+            field.source.query["portal_type"] = list(value)\n+        elif "portal_type" in field.source.query:\n+            del field.source.query["portal_type"]\n \n \n RelationChoiceFactory = RelationFieldFactory(\n-    RelationChoice, _(\'Relation Choice\'), source=CatalogSource()\n+    RelationChoice, _("Relation Choice"), source=CatalogSource()\n )\n \n \n@@ -80,22 +79,20 @@ def __init__(self, field):\n     def portal_type(self):\n         field = self.field.value_type\n         types = []\n-        types.extend(field.source.query.get(\'portal_type\') or [])\n+        types.extend(field.source.query.get("portal_type") or [])\n         return set(types)\n \n     @portal_type.setter\n     def portal_type(self, value):\n         field = self.field.value_type\n         if value:\n-            field.source.query[\'portal_type\'] = list(value)\n-        elif \'portal_type\' in field.source.query:\n-            del field.source.query[\'portal_type\']\n+            field.source.query["portal_type"] = list(value)\n+        elif "portal_type" in field.source.query:\n+            del field.source.query["portal_type"]\n \n \n RelationListFactory = RelationFieldFactory(\n     RelationList,\n-    _(\'Relation List\'),\n-    value_type=RelationChoice(\n-        title=_(\'Relation Choice\'), source=CatalogSource()\n-    ),\n+    _("Relation List"),\n+    value_type=RelationChoice(title=_("Relation Choice"), source=CatalogSource()),\n )\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex fd43cc3..ab3c0fb 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -9,11 +9,11 @@\n \n \n PLONE_RELATION_INDEXES = [\n-    {\'element\': IRelationValue[\'from_id\']},\n-    {\'element\': IRelationValue[\'to_id\']},\n+    {"element": IRelationValue["from_id"]},\n+    {"element": IRelationValue["to_id"]},\n     {\n-        \'element\': IRelationValue[\'from_attribute\'],\n-        \'kwargs\': {\'btree\': BTrees.family32.OI},\n+        "element": IRelationValue["from_attribute"],\n+        "kwargs": {"btree": BTrees.family32.OI},\n     },\n ]\n \n@@ -27,18 +27,18 @@ def add_relations(context):\n         context,\n         ICatalog,\n         relation_catalog_factory,\n-        ofs_name=\'relations\',\n+        ofs_name="relations",\n         findroot=False,\n     )\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n \n def installRelations(context):\n-    if context.readDataFile(\'install_relations.txt\') is None:\n+    if context.readDataFile("install_relations.txt") is None:\n         return\n     portal = context.getSite()\n     add_relations(portal)\n-    return \'Added relations utility.\'\n+    return "Added relations utility."\ndiff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py\nindex 781064e..38dd780 100644\n--- a/plone/app/relationfield/source.py\n+++ b/plone/app/relationfield/source.py\n@@ -30,10 +30,8 @@ def getTermByToken(self, value):\n         return self.getTerm(self.intid_utility.getObject(int(value)))\n \n     def search(self, query_string):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        result = catalog(\n-            SearchableText=f\'{query_string:s}*\', sort_limit=20\n-        )\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        result = catalog(SearchableText=f"{query_string:s}*", sort_limit=20)\n         terms = []\n         for brain in result:\n             try:\ndiff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py\nindex fa3a363..58a7853 100644\n--- a/plone/app/relationfield/supermodel.py\n+++ b/plone/app/relationfield/supermodel.py\n@@ -7,56 +7,49 @@\n \n \n class RelationChoiceBaseHandler(BaseHandler):\n-\n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n     filteredAttributes.update(\n         {\n-            \'portal_type\': \'w\',\n-            \'source\': \'rw\',\n-            \'vocabulary\': \'rw\',\n-            \'vocabularyName\': \'rw\',\n+            "portal_type": "w",\n+            "source": "rw",\n+            "vocabulary": "rw",\n+            "vocabularyName": "rw",\n         }\n     )\n \n     def __init__(self, klass):\n         super().__init__(klass)\n \n-        self.fieldAttributes[\'portal_type\'] = schema.List(\n-            __name__=\'portal_type\',\n-            title=\'Allowed target types\',\n-            value_type=schema.Text(title=\'Type\'),\n+        self.fieldAttributes["portal_type"] = schema.List(\n+            __name__="portal_type",\n+            title="Allowed target types",\n+            value_type=schema.Text(title="Type"),\n         )\n \n     def _constructField(self, attributes):\n         portal_type = (\n-            attributes.get(\'portal_type\')\n-            or attributes.get(\'portal_types\')\n-            or []\n+            attributes.get("portal_type") or attributes.get("portal_types") or []\n         )\n-        if \'portal_type\' in attributes:\n-            del attributes[\'portal_type\']\n+        if "portal_type" in attributes:\n+            del attributes["portal_type"]\n \n         if not portal_type:\n-            attributes[\'source\'] = CatalogSource()\n+            attributes["source"] = CatalogSource()\n         else:\n-            attributes[\'source\'] = CatalogSource(portal_type=portal_type)\n+            attributes["source"] = CatalogSource(portal_type=portal_type)\n \n-        return super()._constructField(\n-            attributes\n-        )\n+        return super()._constructField(attributes)\n \n-    def write(self, field, name, type, elementName=\'field\'):\n-        element = super().write(\n-            field, name, type, elementName\n-        )\n+    def write(self, field, name, type, elementName="field"):\n+        element = super().write(field, name, type, elementName)\n         portal_type = []\n \n-        portal_type.extend(field.source.query.get(\'portal_type\') or [])\n+        portal_type.extend(field.source.query.get("portal_type") or [])\n \n         if portal_type:\n-            attributeField = self.fieldAttributes[\'portal_type\']\n+            attributeField = self.fieldAttributes["portal_type"]\n             child = valueToElement(\n-                attributeField, portal_type, name=\'portal_type\', force=True\n+                attributeField, portal_type, name="portal_type", force=True\n             )\n             element.append(child)\n \ndiff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex 8fa4844..56e4c14 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -16,31 +16,31 @@\n \n \n class IAddress(Interface):\n-    streetname = zope.schema.TextLine(title=\'Street name\')\n-    city = zope.schema.TextLine(title=\'City\')\n+    streetname = zope.schema.TextLine(title="Street name")\n+    city = zope.schema.TextLine(title="City")\n \n \n @implementer(IAddress, IHasRelations)\n class Address(Persistent):\n-    __name__ = \'\'\n-    streetname = \'\'\n-    city = \'\'\n+    __name__ = ""\n+    streetname = ""\n+    city = ""\n \n     def __init__(self, streetname, city):\n         self.streetname = streetname\n         self.city = city\n-        __name__ = f\'{streetname} - {city}\'\n+        __name__ = f"{streetname} - {city}"\n \n \n class IPerson(zope.interface.Interface):\n-    name = zope.schema.TextLine(title=\'Name\', default=\'<no name>\')\n-    phone = zope.schema.TextLine(title=\'Phone\')\n-    addresses = RelationList(title=\'Addresses\')\n+    name = zope.schema.TextLine(title="Name", default="<no name>")\n+    phone = zope.schema.TextLine(title="Phone")\n+    addresses = RelationList(title="Addresses")\n \n \n @implementer(IPerson, IHasRelations)\n class Person(Persistent):\n-    name = \'\'\n+    name = ""\n \n     def __init__(self, name):\n         self.name = name\n@@ -58,17 +58,16 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n FIXTURE = PloneAppRelationfieldFixture()\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,), name=\'plone.app.relationfield:Functional\'\n+    bases=(FIXTURE,), name="plone.app.relationfield:Functional"\n )\n \n \n class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):\n-\n     if HAS_CONTENTTYPES:\n         defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n@@ -88,21 +87,20 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:default\')\n-        self.applyProfile(portal, \'plone.formwidget.contenttree:default\')\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.dexterity:default")\n+        self.applyProfile(portal, "plone.formwidget.contenttree:default")\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n CONTENTTREE_FIXTURE = PloneAppRelationfieldContentTreeFixture()\n \n FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(\n     bases=(CONTENTTREE_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\',\n+    name="plone.app.relationfield.contenttree:Functional",\n )\n \n \n class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):\n-\n     if HAS_CONTENTTYPES:\n         defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n@@ -118,13 +116,13 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:default\')\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.dexterity:default")\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n WIDGETS_FIXTURE = PloneAppRelationfieldWidgetsFixture()\n \n FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(\n     bases=(WIDGETS_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\',\n+    name="plone.app.relationfield.contenttree:Functional",\n )\ndiff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py\nindex e45d001..2c8a42f 100644\n--- a/plone/app/relationfield/tests/test_marshall.py\n+++ b/plone/app/relationfield/tests/test_marshall.py\n@@ -7,7 +7,7 @@\n \n \n ZCML_SANDBOX = ZCMLSandbox(\n-    filename=\'test_marshall.zcml\', package=plone.app.relationfield.tests\n+    filename="test_marshall.zcml", package=plone.app.relationfield.tests\n )\n \n \n@@ -17,9 +17,9 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'../marshaler.rst\',\n+                "../marshaler.rst",\n                 optionflags=OPTIONFLAGS,\n-                package=\'plone.app.relationfield.tests\',\n+                package="plone.app.relationfield.tests",\n             ),\n             layer=ZCML_SANDBOX,\n         )\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 651a776..6c54940 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -24,7 +24,7 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n+                    os.path.join(os.path.pardir, "schemaeditor.txt"),\n                     optionflags=optionflags,\n                     checker=Py23DocChecker(),\n                 ),\n@@ -35,5 +35,5 @@ def test_suite():\n     return suite\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(default=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(default="test_suite")\ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex 3f87e90..5fe8072 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -24,7 +24,7 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    os.path.join(os.path.pardir, \'supermodel.txt\'),\n+                    os.path.join(os.path.pardir, "supermodel.txt"),\n                     optionflags=optionflags,\n                     checker=Py23DocChecker(),\n                 ),\n@@ -35,5 +35,5 @@ def test_suite():\n     return suite\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(default=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(default="test_suite")\ndiff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py\nindex 170ae5b..cea588a 100644\n--- a/plone/app/relationfield/tests/test_widget.py\n+++ b/plone/app/relationfield/tests/test_widget.py\n@@ -16,15 +16,15 @@ class RelationListDictDataManagerTest(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         intids = getUtility(IIntIds)\n \n-        self.person = portal.person = person = Person(\'Roel Bruggink\')\n+        self.person = portal.person = person = Person("Roel Bruggink")\n         person.__parent__ = portal\n \n         self.addresses = person.addresses = addresses = []\n-        for streetname in [\'Jansbinnensingel\', \'Willemsplein\']:\n-            address = Address(streetname, \'Arnhem\')\n+        for streetname in ["Jansbinnensingel", "Willemsplein"]:\n+            address = Address(streetname, "Arnhem")\n             addresses.append(address)\n \n             # five.intids\' register expect aq wrapped objects, but __parent__\n@@ -34,27 +34,27 @@ def setUp(self):\n             intids.register(address)\n \n     def test_get_datamanger(self):\n-        dm = getMultiAdapter(({}, IPerson[\'addresses\']), IDataManager)\n+        dm = getMultiAdapter(({}, IPerson["addresses"]), IDataManager)\n         self.assertTrue(isinstance(dm, RelationListDictDataManager))\n \n     def test_datamanager_get_empty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         self.assertEqual(dm.get(), [])\n \n     def test_datamanager_set_empty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set([])\n         self.assertEqual(dm.get(), [])\n \n     def test_datamanager_set_nonempty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set(self.person.addresses)\n         self.assertEqual(dm.get(), self.person.addresses)\n \n     def test_datamanager_should_contain_relationvalues(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set(self.person.addresses)\n \n-        storage = dm.data[\'addresses\']\n+        storage = dm.data["addresses"]\n         self.assertNotEqual(storage, [])\n         self.assertNotEqual(filter(IRelationValue.providedBy, storage), [])\ndiff --git a/setup.py b/setup.py\nindex 5e5dc36..eb17b01 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,64 +2,62 @@\n from setuptools import setup\n \n \n-version = \'3.0.2.dev0\'\n+version = "3.0.2.dev0"\n \n setup(\n-    name=\'plone.app.relationfield\',\n+    name="plone.app.relationfield",\n     version=version,\n-    description=\'Plone support for z3c.relationfield\',\n-    long_description=(\n-        open(\'README.rst\').read() + \'\\n\' + open(\'CHANGES.rst\').read()\n-    ),\n+    description="Plone support for z3c.relationfield",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Programming Language :: Python :: 3.10\',\n-        \'Programming Language :: Python :: 3.11\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'dexterity relations plone zc.relation\',\n-    author=\'Alec Mitchell\',\n-    author_email=\'apm13@columbia.edu\',\n-    url=\'https://pypi.org/project/plone.app.relationfield\',\n-    license=\'GPL\',\n+    keywords="dexterity relations plone zc.relation",\n+    author="Alec Mitchell",\n+    author_email="apm13@columbia.edu",\n+    url="https://pypi.org/project/plone.app.relationfield",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.schema\',\n-        \'zope.intid\',\n-        \'five.intid\',\n-        \'plone.app.intid\',\n-        \'z3c.form\',\n-        \'z3c.relationfield>0.7.999\',\n-        \'z3c.formwidget.query\',\n-        \'plone.autoform\',\n-        \'plone.supermodel\',\n-        \'plone.app.vocabularies\',\n-        \'plone.schemaeditor>=1.3.5\',\n-        \'Products.CMFCore\',\n-        \'plone.rfc822\',\n-        \'plone.app.z3cform>=1.1.0\',\n+        "setuptools",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.schema",\n+        "zope.intid",\n+        "five.intid",\n+        "plone.app.intid",\n+        "z3c.form",\n+        "z3c.relationfield>0.7.999",\n+        "z3c.formwidget.query",\n+        "plone.autoform",\n+        "plone.supermodel",\n+        "plone.app.vocabularies",\n+        "plone.schemaeditor>=1.3.5",\n+        "Products.CMFCore",\n+        "plone.rfc822",\n+        "plone.app.z3cform>=1.1.0",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.robotframework\',\n+        "test": [\n+            "plone.app.testing",\n+            "plone.app.dexterity",\n+            "plone.app.robotframework",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:22:25+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/1eb8cce2093017d959312e3811795c2d252b4c74

chore: zptlint

Files changed:
M plone/app/relationfield/configure.zcml
M plone/app/relationfield/demo.zcml
M plone/app/relationfield/marshaler.zcml
M plone/app/relationfield/profiles/default/metadata.xml
M plone/app/relationfield/schemaeditor.zcml
M plone/app/relationfield/supermodel.zcml
M plone/app/relationfield/tests/test_marshall.zcml
M plone/app/relationfield/widget.zcml

b'diff --git a/plone/app/relationfield/configure.zcml b/plone/app/relationfield/configure.zcml\nindex a14273b..f4383b8 100644\n--- a/plone/app/relationfield/configure.zcml\n+++ b/plone/app/relationfield/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    >\n \n   <!-- Only use intids for objects with relations -->\n   <include package="plone.app.intid" />\n@@ -15,43 +16,49 @@\n       name="default"\n       title="Relation Field"\n       description="Adds support for content relationships defined using z3c.relationfield"\n-      directory="profiles/default"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n       />\n \n   <genericsetup:importStep\n       name="import-relations-utils"\n       title="Import Relations Utils"\n       description="Import relation utility."\n-      handler=".setuphandlers.installRelations">\n-     <depends name="toolset"/>\n+      handler=".setuphandlers.installRelations"\n+      >\n+    <depends name="toolset" />\n   </genericsetup:importStep>\n \n   <!-- Dexterity Content will support incoming and outgoing relations -->\n   <configure zcml:condition="installed plone.dexterity">\n-    <include package="plone.behavior" file="meta.zcml" />\n+    <include\n+        package="plone.behavior"\n+        file="meta.zcml"\n+        />\n     <class class="plone.dexterity.content.DexterityContent">\n       <implements interface=".interfaces.IDexterityHasRelations" />\n     </class>\n     <subscriber\n-      for="plone.dexterity.interfaces.IDexterityContent\n-           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-      handler=".event.update_behavior_relations"\n-      />\n+        for="plone.dexterity.interfaces.IDexterityContent\n+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+        handler=".event.update_behavior_relations"\n+        />\n     <!-- Make \'related items\' behavior available if plone.behavior is present. -->\n     <plone:behavior\n-        zcml:condition="installed plone.behavior"\n-        title="Related items"\n         name="plone.relateditems"\n+        title="Related items"\n         description="Adds the ability to assign related items"\n         provides=".behavior.IRelatedItems"\n+        zcml:condition="installed plone.behavior"\n         />\n   </configure>\n \n   <!-- Archetypes Content will support incoming relations -->\n-  <class zcml:condition="installed Products.Archetypes"\n-         class="Products.Archetypes.BaseObject.BaseObject">\n+  <class\n+      class="Products.Archetypes.BaseObject.BaseObject"\n+      zcml:condition="installed Products.Archetypes"\n+      >\n     <implements interface="z3c.relationfield.interfaces.IHasIncomingRelations" />\n   </class>\n \ndiff --git a/plone/app/relationfield/demo.zcml b/plone/app/relationfield/demo.zcml\nindex 1e19ab9..4137235 100644\n--- a/plone/app/relationfield/demo.zcml\n+++ b/plone/app/relationfield/demo.zcml\n@@ -1,7 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <!-- Demo Page -->\n \n@@ -9,9 +10,10 @@\n     <implements interface=".demo.ITestForm" />\n   </class>\n \n-  <browser:page for="*"\n-                name="test-relation-widget"\n-                class=".demo.TestView"\n-                permission="cmf.ModifyPortalContent"\n-                />\n-</configure>\n\\ No newline at end of file\n+  <browser:page\n+      name="test-relation-widget"\n+      for="*"\n+      class=".demo.TestView"\n+      permission="cmf.ModifyPortalContent"\n+      />\n+</configure>\ndiff --git a/plone/app/relationfield/marshaler.zcml b/plone/app/relationfield/marshaler.zcml\nindex 113c8b9..00d4865 100644\n--- a/plone/app/relationfield/marshaler.zcml\n+++ b/plone/app/relationfield/marshaler.zcml\n@@ -1,15 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n-    <adapter\n-        for="* z3c.relationfield.interfaces.IRelation"\n-        factory=".marshaler.RelationFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".marshaler.RelationFieldMarshaler"\n+      for="*\n+           z3c.relationfield.interfaces.IRelation"\n+      />\n \n-    <adapter\n-        for="* z3c.relationfield.interfaces.IRelationChoice"\n-        factory=".marshaler.RelationFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".marshaler.RelationFieldMarshaler"\n+      for="*\n+           z3c.relationfield.interfaces.IRelationChoice"\n+      />\n \n </configure>\ndiff --git a/plone/app/relationfield/profiles/default/metadata.xml b/plone/app/relationfield/profiles/default/metadata.xml\nindex 5deb0de..c22163f 100644\n--- a/plone/app/relationfield/profiles/default/metadata.xml\n+++ b/plone/app/relationfield/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n   <dependencies>\ndiff --git a/plone/app/relationfield/schemaeditor.zcml b/plone/app/relationfield/schemaeditor.zcml\nindex ef72e41..a8c3753 100644\n--- a/plone/app/relationfield/schemaeditor.zcml\n+++ b/plone/app/relationfield/schemaeditor.zcml\n@@ -1,19 +1,20 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <include package="plone.schemaeditor" />\n \n   <adapter\n+      factory=".schemaeditor.getRelationChoiceEditFormSchema"\n       provides="plone.schemaeditor.interfaces.IFieldEditFormSchema"\n       for="z3c.relationfield.interfaces.IRelationChoice"\n-      factory=".schemaeditor.getRelationChoiceEditFormSchema"\n       />\n \n   <adapter\n+      factory=".schemaeditor.RelationChoiceEditFormAdapter"\n       provides=".schemaeditor.IRelationFieldSettings"\n       for="z3c.relationfield.interfaces.IRelationChoice"\n-      factory=".schemaeditor.RelationChoiceEditFormAdapter"\n       />\n \n   <utility\n@@ -22,15 +23,15 @@\n       />\n \n   <adapter\n+      factory=".schemaeditor.getRelationListEditFormSchema"\n       provides="plone.schemaeditor.interfaces.IFieldEditFormSchema"\n       for="z3c.relationfield.interfaces.IRelationList"\n-      factory=".schemaeditor.getRelationListEditFormSchema"\n       />\n \n   <adapter\n+      factory=".schemaeditor.RelationListEditFormAdapter"\n       provides=".schemaeditor.IRelationFieldSettings"\n       for="z3c.relationfield.interfaces.IRelationList"\n-      factory=".schemaeditor.RelationListEditFormAdapter"\n       />\n \n   <utility\ndiff --git a/plone/app/relationfield/supermodel.zcml b/plone/app/relationfield/supermodel.zcml\nindex 41c83a3..f0ed573 100644\n--- a/plone/app/relationfield/supermodel.zcml\n+++ b/plone/app/relationfield/supermodel.zcml\n@@ -1,14 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <include package="plone.supermodel" />\n \n-  <utility component=".supermodel.RelationChoiceHandler"\n-           name="z3c.relationfield.schema.RelationChoice"\n-           />\n-  <utility component=".supermodel.RelationListHandler"\n-           name="z3c.relationfield.schema.RelationList"\n-           />\n+  <utility\n+      name="z3c.relationfield.schema.RelationChoice"\n+      component=".supermodel.RelationChoiceHandler"\n+      />\n+  <utility\n+      name="z3c.relationfield.schema.RelationList"\n+      component=".supermodel.RelationListHandler"\n+      />\n \n </configure>\ndiff --git a/plone/app/relationfield/tests/test_marshall.zcml b/plone/app/relationfield/tests/test_marshall.zcml\nindex 4ed32e1..8b49072 100644\n--- a/plone/app/relationfield/tests/test_marshall.zcml\n+++ b/plone/app/relationfield/tests/test_marshall.zcml\n@@ -1,7 +1,14 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield.tests">\n-     <include package="zope.component" file="meta.zcml" />\n-     <include package="plone.rfc822" />\n-     <include package="plone.app.relationfield" file="marshaler.zcml" />\n+    i18n_domain="plone.app.relationfield.tests"\n+    >\n+  <include\n+      package="zope.component"\n+      file="meta.zcml"\n+      />\n+  <include package="plone.rfc822" />\n+  <include\n+      package="plone.app.relationfield"\n+      file="marshaler.zcml"\n+      />\n </configure>\ndiff --git a/plone/app/relationfield/widget.zcml b/plone/app/relationfield/widget.zcml\nindex 830fb4d..c3d1366 100644\n--- a/plone/app/relationfield/widget.zcml\n+++ b/plone/app/relationfield/widget.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.app.relationfield">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <!-- Widget setup -->\n \n@@ -11,21 +12,24 @@\n   <adapter factory=".widget.RelationListDataManager" />\n   <adapter factory=".widget.RelationListDictDataManager" />\n \n-  <utility component=".source.CMFContentSearchSource"\n-           name="plone.formwidget.relations.cmfcontentsearch"\n-           provides="zope.schema.interfaces.IVocabularyFactory"\n-           />\n+  <utility\n+      provides="zope.schema.interfaces.IVocabularyFactory"\n+      name="plone.formwidget.relations.cmfcontentsearch"\n+      component=".source.CMFContentSearchSource"\n+      />\n \n   <configure zcml:condition="installed plone.formwidget.contenttree">\n-    <adapter factory="plone.formwidget.contenttree.ContentTreeFieldWidget"\n-             for="z3c.relationfield.interfaces.IRelationChoice\n-                  z3c.form.interfaces.IFormLayer"\n-             />\n+    <adapter\n+        factory="plone.formwidget.contenttree.ContentTreeFieldWidget"\n+        for="z3c.relationfield.interfaces.IRelationChoice\n+             z3c.form.interfaces.IFormLayer"\n+        />\n \n-    <adapter factory="plone.formwidget.contenttree.MultiContentTreeFieldWidget"\n-             for="z3c.relationfield.interfaces.IRelationList\n-                  z3c.form.interfaces.IFormLayer"\n-             />\n+    <adapter\n+        factory="plone.formwidget.contenttree.MultiContentTreeFieldWidget"\n+        for="z3c.relationfield.interfaces.IRelationList\n+             z3c.form.interfaces.IFormLayer"\n+        />\n   </configure>\n \n </configure>\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:24:33+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/c73032f32bb1ef1ccebae9c704bad3cc30ecdd3e

feat: drop six

Files changed:
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py

b'diff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py\nindex d50b635..c4bbefc 100644\n--- a/plone/app/relationfield/marshaler.py\n+++ b/plone/app/relationfield/marshaler.py\n@@ -1,8 +1,6 @@\n from plone.rfc822.defaultfields import BaseFieldMarshaler\n from z3c.relationfield import RelationValue\n \n-import six\n-\n \n class RelationFieldMarshaler(BaseFieldMarshaler):\n     """Field marshaler for z3c.relationfield IRelation and IRelationChoice\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 6c54940..56112f4 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -3,21 +3,12 @@\n \n import doctest\n import os\n-import re\n-import six\n import unittest\n \n \n optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests(\n@@ -26,7 +17,6 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     os.path.join(os.path.pardir, "schemaeditor.txt"),\n                     optionflags=optionflags,\n-                    checker=Py23DocChecker(),\n                 ),\n                 FUNCTIONAL_WIDGETS_TESTING,\n             )\ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex 5fe8072..68bea17 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -3,21 +3,12 @@\n \n import doctest\n import os\n-import re\n-import six\n import unittest\n \n \n optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests(\n@@ -26,7 +17,6 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     os.path.join(os.path.pardir, "supermodel.txt"),\n                     optionflags=optionflags,\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=FUNCTIONAL_WIDGETS_TESTING,\n             )\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-01T20:26:26+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/133a8e299aab6efab88df590a5fb5225fb5a699f

feat: flake8

Files changed:
M plone/app/relationfield/testing.py

b'diff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex 56e4c14..9ee5da2 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -29,7 +29,7 @@ class Address(Persistent):\n     def __init__(self, streetname, city):\n         self.streetname = streetname\n         self.city = city\n-        __name__ = f"{streetname} - {city}"\n+        self.__name__ = f"{streetname} - {city}"\n \n \n class IPerson(zope.interface.Interface):\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-07T14:58:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/4a6b020b824d9f9a0332cd8c31bc25b0d22cf0cb

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..078bf8d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,4 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+ignore-packages = ['plone.formwidget.contenttree']\n"

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-07T14:58:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/695f5a055886207d1ebd20b5342923ef45be41a8

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex eb17b01..80dcf84 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -52,12 +52,23 @@\n         "Products.CMFCore",\n         "plone.rfc822",\n         "plone.app.z3cform>=1.1.0",\n+        "BTrees",\n+        "Products.GenericSetup",\n+        "plone.app.dexterity",\n+        "plone.behavior",\n+        "plone.dexterity",\n+        "plone.uuid",\n+        "plone.z3cform",\n+        "z3c.objpath",\n+        "zc.relation",\n     ],\n     extras_require={\n         "test": [\n+            "persistent",\n+            "plone.app.contenttypes[test]",\n             "plone.app.testing",\n             "plone.app.dexterity",\n-            "plone.app.robotframework",\n+            "plone.testing",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2023-04-10T03:06:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.relationfield/commit/6215e5bc66bc89e9afaa64fefde2b829b0fa9a47

Merge pull request #37 from plone/config-with-default-template-6ebb0ee3

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5623f8b3.internal
A tox.ini
M plone/__init__.py
M plone/app/__init__.py
M plone/app/relationfield/__init__.py
M plone/app/relationfield/adapter.py
M plone/app/relationfield/behavior.py
M plone/app/relationfield/configure.zcml
M plone/app/relationfield/demo.py
M plone/app/relationfield/demo.zcml
M plone/app/relationfield/event.py
M plone/app/relationfield/interfaces.py
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/marshaler.zcml
M plone/app/relationfield/monkey.py
M plone/app/relationfield/path.py
M plone/app/relationfield/profiles/default/metadata.xml
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/schemaeditor.zcml
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/supermodel.zcml
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_marshall.zcml
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M plone/app/relationfield/widget.py
M plone/app/relationfield/widget.zcml
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4f67994\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5623f8b3.internal b/news/5623f8b3.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5623f8b3.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py\nindex 567321c..5c268dd 100644\n--- a/plone/app/relationfield/__init__.py\n+++ b/plone/app/relationfield/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.monkey import PATCHES\n \n import pkg_resources\n@@ -8,7 +7,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_CONTENTTYPES = False\n else:\ndiff --git a/plone/app/relationfield/adapter.py b/plone/app/relationfield/adapter.py\nindex f953bd3..9be365c 100644\n--- a/plone/app/relationfield/adapter.py\n+++ b/plone/app/relationfield/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IUUID\n@@ -10,7 +9,7 @@\n @implementer(IUUID)\n @adapter(IRelationValue)\n def rvUUID(context):\n-    """ Vocabulary validation via p.a.vocabularies CatalogSource\n-        requires the UUID of the target object to verify membership\n+    """Vocabulary validation via p.a.vocabularies CatalogSource\n+    requires the UUID of the target object to verify membership\n     """\n     return getattr(aq_base(context.to_object), ATTRIBUTE_NAME, None)\ndiff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py\nindex d05e501..5ac5c7e 100644\n--- a/plone/app/relationfield/behavior.py\n+++ b/plone/app/relationfield/behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.dexterity import _\n from plone.app.z3cform.widget import RelatedItemsFieldWidget\n from plone.autoform import directives as form\n@@ -12,26 +11,23 @@\n \n @provider(IFormFieldProvider)\n class IRelatedItems(model.Schema):\n-    """Behavior interface to make a Dexterity type support related items.\n-    """\n+    """Behavior interface to make a Dexterity type support related items."""\n \n     relatedItems = RelationList(\n-        title=_(u\'label_related_items\', default=u\'Related Items\'),\n+        title=_("label_related_items", default="Related Items"),\n         default=[],\n         value_type=RelationChoice(\n-            title=u\'Related\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title="Related", vocabulary="plone.app.vocabularies.Catalog"\n         ),\n         required=False,\n     )\n     form.widget(\n-        \'relatedItems\',\n+        "relatedItems",\n         RelatedItemsFieldWidget,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n         pattern_options={\n-            \'recentlyUsed\': True  # Just turn on. Config in plone.app.widgets.\n+            "recentlyUsed": True  # Just turn on. Config in plone.app.widgets.\n         },\n     )\n \n-    fieldset(\n-        \'categorization\', label=_(u\'Categorization\'), fields=[\'relatedItems\']\n-    )\n+    fieldset("categorization", label=_("Categorization"), fields=["relatedItems"])\ndiff --git a/plone/app/relationfield/configure.zcml b/plone/app/relationfield/configure.zcml\nindex a14273b..f4383b8 100644\n--- a/plone/app/relationfield/configure.zcml\n+++ b/plone/app/relationfield/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n+    >\n \n   <!-- Only use intids for objects with relations -->\n   <include package="plone.app.intid" />\n@@ -15,43 +16,49 @@\n       name="default"\n       title="Relation Field"\n       description="Adds support for content relationships defined using z3c.relationfield"\n-      directory="profiles/default"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      directory="profiles/default"\n       />\n \n   <genericsetup:importStep\n       name="import-relations-utils"\n       title="Import Relations Utils"\n       description="Import relation utility."\n-      handler=".setuphandlers.installRelations">\n-     <depends name="toolset"/>\n+      handler=".setuphandlers.installRelations"\n+      >\n+    <depends name="toolset" />\n   </genericsetup:importStep>\n \n   <!-- Dexterity Content will support incoming and outgoing relations -->\n   <configure zcml:condition="installed plone.dexterity">\n-    <include package="plone.behavior" file="meta.zcml" />\n+    <include\n+        package="plone.behavior"\n+        file="meta.zcml"\n+        />\n     <class class="plone.dexterity.content.DexterityContent">\n       <implements interface=".interfaces.IDexterityHasRelations" />\n     </class>\n     <subscriber\n-      for="plone.dexterity.interfaces.IDexterityContent\n-           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-      handler=".event.update_behavior_relations"\n-      />\n+        for="plone.dexterity.interfaces.IDexterityContent\n+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+        handler=".event.update_behavior_relations"\n+        />\n     <!-- Make \'related items\' behavior available if plone.behavior is present. -->\n     <plone:behavior\n-        zcml:condition="installed plone.behavior"\n-        title="Related items"\n         name="plone.relateditems"\n+        title="Related items"\n         description="Adds the ability to assign related items"\n         provides=".behavior.IRelatedItems"\n+        zcml:condition="installed plone.behavior"\n         />\n   </configure>\n \n   <!-- Archetypes Content will support incoming relations -->\n-  <class zcml:condition="installed Products.Archetypes"\n-         class="Products.Archetypes.BaseObject.BaseObject">\n+  <class\n+      class="Products.Archetypes.BaseObject.BaseObject"\n+      zcml:condition="installed Products.Archetypes"\n+      >\n     <implements interface="z3c.relationfield.interfaces.IHasIncomingRelations" />\n   </class>\n \ndiff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py\nindex 3ca6349..89d6afd 100644\n--- a/plone/app/relationfield/demo.py\n+++ b/plone/app/relationfield/demo.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.z3cform import layout\n from z3c.form import field\n from z3c.form import form\n@@ -9,16 +8,16 @@\n \n class ITestForm(IFormLayer):\n     multiple = RelationList(\n-        title=u\'Multiple (Relations field)\',\n+        title="Multiple (Relations field)",\n         required=False,\n         value_type=RelationChoice(\n-            title=u\'Multiple\', vocabulary=\'plone.app.vocabularies.Catalog\'\n+            title="Multiple", vocabulary="plone.app.vocabularies.Catalog"\n         ),\n     )\n     single = RelationChoice(\n-        title=u\'Single\',\n+        title="Single",\n         required=False,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n     )\n \n \ndiff --git a/plone/app/relationfield/demo.zcml b/plone/app/relationfield/demo.zcml\nindex 1e19ab9..4137235 100644\n--- a/plone/app/relationfield/demo.zcml\n+++ b/plone/app/relationfield/demo.zcml\n@@ -1,7 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <!-- Demo Page -->\n \n@@ -9,9 +10,10 @@\n     <implements interface=".demo.ITestForm" />\n   </class>\n \n-  <browser:page for="*"\n-                name="test-relation-widget"\n-                class=".demo.TestView"\n-                permission="cmf.ModifyPortalContent"\n-                />\n-</configure>\n\\ No newline at end of file\n+  <browser:page\n+      name="test-relation-widget"\n+      for="*"\n+      class=".demo.TestView"\n+      permission="cmf.ModifyPortalContent"\n+      />\n+</configure>\ndiff --git a/plone/app/relationfield/event.py b/plone/app/relationfield/event.py\nindex e2d2a16..0e0a4f9 100644\n--- a/plone/app/relationfield/event.py\n+++ b/plone/app/relationfield/event.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from z3c.relationfield.event import _setRelation\n from z3c.relationfield.interfaces import IRelation\n@@ -31,7 +30,6 @@ def extract_relations(obj):\n \n \n def update_behavior_relations(obj, event):\n-    """Re-register relations in behaviors\n-    """\n+    """Re-register relations in behaviors"""\n     for behavior_interface, name, relation in extract_relations(obj):\n         _setRelation(obj, name, relation)\ndiff --git a/plone/app/relationfield/interfaces.py b/plone/app/relationfield/interfaces.py\nindex e9079ed..ef06fa9 100644\n--- a/plone/app/relationfield/interfaces.py\n+++ b/plone/app/relationfield/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.relationfield.interfaces import IHasRelations\n \n \ndiff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py\nindex 00d221a..c4bbefc 100644\n--- a/plone/app/relationfield/marshaler.py\n+++ b/plone/app/relationfield/marshaler.py\n@@ -1,9 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822.defaultfields import BaseFieldMarshaler\n from z3c.relationfield import RelationValue\n \n-import six\n-\n \n class RelationFieldMarshaler(BaseFieldMarshaler):\n     """Field marshaler for z3c.relationfield IRelation and IRelationChoice\n@@ -12,7 +9,7 @@ class RelationFieldMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return str(value.to_id)\n@@ -21,11 +18,11 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         try:\n             toId = int(value)\ndiff --git a/plone/app/relationfield/marshaler.zcml b/plone/app/relationfield/marshaler.zcml\nindex 113c8b9..00d4865 100644\n--- a/plone/app/relationfield/marshaler.zcml\n+++ b/plone/app/relationfield/marshaler.zcml\n@@ -1,15 +1,18 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n-    <adapter\n-        for="* z3c.relationfield.interfaces.IRelation"\n-        factory=".marshaler.RelationFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".marshaler.RelationFieldMarshaler"\n+      for="*\n+           z3c.relationfield.interfaces.IRelation"\n+      />\n \n-    <adapter\n-        for="* z3c.relationfield.interfaces.IRelationChoice"\n-        factory=".marshaler.RelationFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".marshaler.RelationFieldMarshaler"\n+      for="*\n+           z3c.relationfield.interfaces.IRelationChoice"\n+      />\n \n </configure>\ndiff --git a/plone/app/relationfield/monkey.py b/plone/app/relationfield/monkey.py\nindex 4186195..cd61b4e 100644\n--- a/plone/app/relationfield/monkey.py\n+++ b/plone/app/relationfield/monkey.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.relationfield.relation import _object\n from z3c.relationfield.relation import RelationValue\n from zope.component import getUtility\n@@ -9,14 +8,14 @@\n \n \n def get_from_object(self):\n-    if getattr(self, \'_from_id\', None):\n+    if getattr(self, "_from_id", None):\n         return _object(self._from_id)\n     else:\n         intids = getUtility(IIntIds)\n \n         # Heya, is there no from_object? Please have a look at #12802\n \n-        self._from_id = intids.register(self.__dict__[\'from_object\'])\n+        self._from_id = intids.register(self.__dict__["from_object"])\n         return _object(self._from_id)\n \n \ndiff --git a/plone/app/relationfield/path.py b/plone/app/relationfield/path.py\nindex 31fffe8..8287627 100644\n--- a/plone/app/relationfield/path.py\n+++ b/plone/app/relationfield/path.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.objpath.interfaces import IObjectPath\n from zExceptions import NotFound\n from zope.component.hooks import getSite\n@@ -6,13 +5,12 @@\n \n \n @implementer(IObjectPath)\n-class Zope2ObjectPath(object):\n-    """Path representation for Zope 2 objects.\n-    """\n+class Zope2ObjectPath:\n+    """Path representation for Zope 2 objects."""\n \n     def path(self, obj):\n         try:\n-            return \'/\'.join(obj.getPhysicalPath())\n+            return "/".join(obj.getPhysicalPath())\n         except AttributeError:\n             raise ValueError(obj)\n \ndiff --git a/plone/app/relationfield/profiles/default/metadata.xml b/plone/app/relationfield/profiles/default/metadata.xml\nindex 5deb0de..c22163f 100644\n--- a/plone/app/relationfield/profiles/default/metadata.xml\n+++ b/plone/app/relationfield/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n   <dependencies>\ndiff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py\nindex 167c20b..b729501 100644\n--- a/plone/app/relationfield/schemaeditor.py\n+++ b/plone/app/relationfield/schemaeditor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.schemaeditor.fields import FieldFactory\n from plone.schemaeditor.interfaces import IFieldEditFormSchema\n@@ -14,7 +13,7 @@\n from zope.intid.interfaces import IIntIds\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @implementer(IFieldFactory)\n@@ -24,13 +23,12 @@ def available(self):\n \n \n class IRelationFieldSettings(schema.interfaces.IField):\n-\n     portal_type = schema.Set(\n-        title=_(u\'Types\'),\n-        description=_(u\'Allowed target types\'),\n+        title=_("Types"),\n+        description=_("Allowed target types"),\n         value_type=schema.Choice(\n-            title=_(u\'Type\'),\n-            vocabulary=\'plone.app.vocabularies.ReallyUserFriendlyTypes\',\n+            title=_("Type"),\n+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n         ),\n         required=False,\n     )\n@@ -42,7 +40,7 @@ def getRelationChoiceEditFormSchema(field):\n     return IRelationFieldSettings\n \n \n-class RelationChoiceEditFormAdapter(object):\n+class RelationChoiceEditFormAdapter:\n     def __init__(self, field):\n         self.field = field\n \n@@ -50,20 +48,20 @@ def __init__(self, field):\n     def portal_type(self):\n         field = self.field\n         types = []\n-        types.extend(field.source.query.get(\'portal_type\') or [])\n+        types.extend(field.source.query.get("portal_type") or [])\n         return types\n \n     @portal_type.setter\n     def portal_type(self, value):\n         field = self.field\n         if value:\n-            field.source.query[\'portal_type\'] = list(value)\n-        elif \'portal_type\' in field.source.query:\n-            del field.source.query[\'portal_type\']\n+            field.source.query["portal_type"] = list(value)\n+        elif "portal_type" in field.source.query:\n+            del field.source.query["portal_type"]\n \n \n RelationChoiceFactory = RelationFieldFactory(\n-    RelationChoice, _(\'Relation Choice\'), source=CatalogSource()\n+    RelationChoice, _("Relation Choice"), source=CatalogSource()\n )\n \n \n@@ -73,7 +71,7 @@ def getRelationListEditFormSchema(field):\n     return IRelationFieldSettings\n \n \n-class RelationListEditFormAdapter(object):\n+class RelationListEditFormAdapter:\n     def __init__(self, field):\n         self.field = field\n \n@@ -81,22 +79,20 @@ def __init__(self, field):\n     def portal_type(self):\n         field = self.field.value_type\n         types = []\n-        types.extend(field.source.query.get(\'portal_type\') or [])\n+        types.extend(field.source.query.get("portal_type") or [])\n         return set(types)\n \n     @portal_type.setter\n     def portal_type(self, value):\n         field = self.field.value_type\n         if value:\n-            field.source.query[\'portal_type\'] = list(value)\n-        elif \'portal_type\' in field.source.query:\n-            del field.source.query[\'portal_type\']\n+            field.source.query["portal_type"] = list(value)\n+        elif "portal_type" in field.source.query:\n+            del field.source.query["portal_type"]\n \n \n RelationListFactory = RelationFieldFactory(\n     RelationList,\n-    _(\'Relation List\'),\n-    value_type=RelationChoice(\n-        title=_(u\'Relation Choice\'), source=CatalogSource()\n-    ),\n+    _("Relation List"),\n+    value_type=RelationChoice(title=_("Relation Choice"), source=CatalogSource()),\n )\ndiff --git a/plone/app/relationfield/schemaeditor.zcml b/plone/app/relationfield/schemaeditor.zcml\nindex ef72e41..a8c3753 100644\n--- a/plone/app/relationfield/schemaeditor.zcml\n+++ b/plone/app/relationfield/schemaeditor.zcml\n@@ -1,19 +1,20 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <include package="plone.schemaeditor" />\n \n   <adapter\n+      factory=".schemaeditor.getRelationChoiceEditFormSchema"\n       provides="plone.schemaeditor.interfaces.IFieldEditFormSchema"\n       for="z3c.relationfield.interfaces.IRelationChoice"\n-      factory=".schemaeditor.getRelationChoiceEditFormSchema"\n       />\n \n   <adapter\n+      factory=".schemaeditor.RelationChoiceEditFormAdapter"\n       provides=".schemaeditor.IRelationFieldSettings"\n       for="z3c.relationfield.interfaces.IRelationChoice"\n-      factory=".schemaeditor.RelationChoiceEditFormAdapter"\n       />\n \n   <utility\n@@ -22,15 +23,15 @@\n       />\n \n   <adapter\n+      factory=".schemaeditor.getRelationListEditFormSchema"\n       provides="plone.schemaeditor.interfaces.IFieldEditFormSchema"\n       for="z3c.relationfield.interfaces.IRelationList"\n-      factory=".schemaeditor.getRelationListEditFormSchema"\n       />\n \n   <adapter\n+      factory=".schemaeditor.RelationListEditFormAdapter"\n       provides=".schemaeditor.IRelationFieldSettings"\n       for="z3c.relationfield.interfaces.IRelationList"\n-      factory=".schemaeditor.RelationListEditFormAdapter"\n       />\n \n   <utility\ndiff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py\nindex 56200f9..ab3c0fb 100644\n--- a/plone/app/relationfield/setuphandlers.py\n+++ b/plone/app/relationfield/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from z3c.relationfield.index import RelationCatalog\n@@ -10,11 +9,11 @@\n \n \n PLONE_RELATION_INDEXES = [\n-    {\'element\': IRelationValue[\'from_id\']},\n-    {\'element\': IRelationValue[\'to_id\']},\n+    {"element": IRelationValue["from_id"]},\n+    {"element": IRelationValue["to_id"]},\n     {\n-        \'element\': IRelationValue[\'from_attribute\'],\n-        \'kwargs\': {\'btree\': BTrees.family32.OI},\n+        "element": IRelationValue["from_attribute"],\n+        "kwargs": {"btree": BTrees.family32.OI},\n     },\n ]\n \n@@ -28,18 +27,18 @@ def add_relations(context):\n         context,\n         ICatalog,\n         relation_catalog_factory,\n-        ofs_name=\'relations\',\n+        ofs_name="relations",\n         findroot=False,\n     )\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\', findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n \n def installRelations(context):\n-    if context.readDataFile(\'install_relations.txt\') is None:\n+    if context.readDataFile("install_relations.txt") is None:\n         return\n     portal = context.getSite()\n     add_relations(portal)\n-    return \'Added relations utility.\'\n+    return "Added relations utility."\ndiff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py\nindex 6a6ae25..38dd780 100644\n--- a/plone/app/relationfield/source.py\n+++ b/plone/app/relationfield/source.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from z3c.formwidget.query.interfaces import IQuerySource\n from zope.component import getUtility\n@@ -8,7 +7,7 @@\n \n \n @implementer(IQuerySource)\n-class CMFContentSearchSource(object):\n+class CMFContentSearchSource:\n     def __init__(self, context):\n         self.context = context\n         self.intid_utility = getUtility(IIntIds)\n@@ -31,10 +30,8 @@ def getTermByToken(self, value):\n         return self.getTerm(self.intid_utility.getObject(int(value)))\n \n     def search(self, query_string):\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        result = catalog(\n-            SearchableText=\'{0:s}*\'.format(query_string), sort_limit=20\n-        )\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        result = catalog(SearchableText=f"{query_string:s}*", sort_limit=20)\n         terms = []\n         for brain in result:\n             try:\ndiff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py\nindex 70ef6c9..58a7853 100644\n--- a/plone/app/relationfield/supermodel.py\n+++ b/plone/app/relationfield/supermodel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.supermodel.exportimport import BaseHandler\n from plone.supermodel.utils import valueToElement\n@@ -8,56 +7,49 @@\n \n \n class RelationChoiceBaseHandler(BaseHandler):\n-\n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n     filteredAttributes.update(\n         {\n-            \'portal_type\': \'w\',\n-            \'source\': \'rw\',\n-            \'vocabulary\': \'rw\',\n-            \'vocabularyName\': \'rw\',\n+            "portal_type": "w",\n+            "source": "rw",\n+            "vocabulary": "rw",\n+            "vocabularyName": "rw",\n         }\n     )\n \n     def __init__(self, klass):\n-        super(RelationChoiceBaseHandler, self).__init__(klass)\n+        super().__init__(klass)\n \n-        self.fieldAttributes[\'portal_type\'] = schema.List(\n-            __name__=\'portal_type\',\n-            title=u\'Allowed target types\',\n-            value_type=schema.Text(title=u\'Type\'),\n+        self.fieldAttributes["portal_type"] = schema.List(\n+            __name__="portal_type",\n+            title="Allowed target types",\n+            value_type=schema.Text(title="Type"),\n         )\n \n     def _constructField(self, attributes):\n         portal_type = (\n-            attributes.get(\'portal_type\')\n-            or attributes.get(\'portal_types\')\n-            or []\n+            attributes.get("portal_type") or attributes.get("portal_types") or []\n         )\n-        if \'portal_type\' in attributes:\n-            del attributes[\'portal_type\']\n+        if "portal_type" in attributes:\n+            del attributes["portal_type"]\n \n         if not portal_type:\n-            attributes[\'source\'] = CatalogSource()\n+            attributes["source"] = CatalogSource()\n         else:\n-            attributes[\'source\'] = CatalogSource(portal_type=portal_type)\n+            attributes["source"] = CatalogSource(portal_type=portal_type)\n \n-        return super(RelationChoiceBaseHandler, self)._constructField(\n-            attributes\n-        )\n+        return super()._constructField(attributes)\n \n-    def write(self, field, name, type, elementName=\'field\'):\n-        element = super(RelationChoiceBaseHandler, self).write(\n-            field, name, type, elementName\n-        )\n+    def write(self, field, name, type, elementName="field"):\n+        element = super().write(field, name, type, elementName)\n         portal_type = []\n \n-        portal_type.extend(field.source.query.get(\'portal_type\') or [])\n+        portal_type.extend(field.source.query.get("portal_type") or [])\n \n         if portal_type:\n-            attributeField = self.fieldAttributes[\'portal_type\']\n+            attributeField = self.fieldAttributes["portal_type"]\n             child = valueToElement(\n-                attributeField, portal_type, name=\'portal_type\', force=True\n+                attributeField, portal_type, name="portal_type", force=True\n             )\n             element.append(child)\n \ndiff --git a/plone/app/relationfield/supermodel.zcml b/plone/app/relationfield/supermodel.zcml\nindex 41c83a3..f0ed573 100644\n--- a/plone/app/relationfield/supermodel.zcml\n+++ b/plone/app/relationfield/supermodel.zcml\n@@ -1,14 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield">\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <include package="plone.supermodel" />\n \n-  <utility component=".supermodel.RelationChoiceHandler"\n-           name="z3c.relationfield.schema.RelationChoice"\n-           />\n-  <utility component=".supermodel.RelationListHandler"\n-           name="z3c.relationfield.schema.RelationList"\n-           />\n+  <utility\n+      name="z3c.relationfield.schema.RelationChoice"\n+      component=".supermodel.RelationChoiceHandler"\n+      />\n+  <utility\n+      name="z3c.relationfield.schema.RelationList"\n+      component=".supermodel.RelationListHandler"\n+      />\n \n </configure>\ndiff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py\nindex 51ab0fa..9ee5da2 100644\n--- a/plone/app/relationfield/testing.py\n+++ b/plone/app/relationfield/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.app.relationfield import HAS_CONTENTTYPES\n from plone.app.testing import FunctionalTesting\n@@ -17,31 +16,31 @@\n \n \n class IAddress(Interface):\n-    streetname = zope.schema.TextLine(title=u\'Street name\')\n-    city = zope.schema.TextLine(title=u\'City\')\n+    streetname = zope.schema.TextLine(title="Street name")\n+    city = zope.schema.TextLine(title="City")\n \n \n @implementer(IAddress, IHasRelations)\n class Address(Persistent):\n-    __name__ = u\'\'\n-    streetname = u\'\'\n-    city = u\'\'\n+    __name__ = ""\n+    streetname = ""\n+    city = ""\n \n     def __init__(self, streetname, city):\n         self.streetname = streetname\n         self.city = city\n-        __name__ = \'{streetname} - {city}\'.format(**locals())\n+        self.__name__ = f"{streetname} - {city}"\n \n \n class IPerson(zope.interface.Interface):\n-    name = zope.schema.TextLine(title=u\'Name\', default=u\'<no name>\')\n-    phone = zope.schema.TextLine(title=u\'Phone\')\n-    addresses = RelationList(title=u\'Addresses\')\n+    name = zope.schema.TextLine(title="Name", default="<no name>")\n+    phone = zope.schema.TextLine(title="Phone")\n+    addresses = RelationList(title="Addresses")\n \n \n @implementer(IPerson, IHasRelations)\n class Person(Persistent):\n-    name = u\'\'\n+    name = ""\n \n     def __init__(self, name):\n         self.name = name\n@@ -59,17 +58,16 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n FIXTURE = PloneAppRelationfieldFixture()\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,), name=\'plone.app.relationfield:Functional\'\n+    bases=(FIXTURE,), name="plone.app.relationfield:Functional"\n )\n \n \n class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):\n-\n     if HAS_CONTENTTYPES:\n         defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n@@ -89,21 +87,20 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:default\')\n-        self.applyProfile(portal, \'plone.formwidget.contenttree:default\')\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.dexterity:default")\n+        self.applyProfile(portal, "plone.formwidget.contenttree:default")\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n CONTENTTREE_FIXTURE = PloneAppRelationfieldContentTreeFixture()\n \n FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(\n     bases=(CONTENTTREE_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\',\n+    name="plone.app.relationfield.contenttree:Functional",\n )\n \n \n class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):\n-\n     if HAS_CONTENTTYPES:\n         defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n     else:\n@@ -119,13 +116,13 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.relationfield)\n \n     def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'plone.app.dexterity:default\')\n-        self.applyProfile(portal, \'plone.app.relationfield:default\')\n+        self.applyProfile(portal, "plone.app.dexterity:default")\n+        self.applyProfile(portal, "plone.app.relationfield:default")\n \n \n WIDGETS_FIXTURE = PloneAppRelationfieldWidgetsFixture()\n \n FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(\n     bases=(WIDGETS_FIXTURE,),\n-    name=\'plone.app.relationfield.contenttree:Functional\',\n+    name="plone.app.relationfield.contenttree:Functional",\n )\ndiff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py\nindex 8881030..2c8a42f 100644\n--- a/plone/app/relationfield/tests/test_marshall.py\n+++ b/plone/app/relationfield/tests/test_marshall.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import layered\n from plone.testing.zca import ZCMLSandbox\n from unittest import TestSuite\n@@ -8,7 +7,7 @@\n \n \n ZCML_SANDBOX = ZCMLSandbox(\n-    filename=\'test_marshall.zcml\', package=plone.app.relationfield.tests\n+    filename="test_marshall.zcml", package=plone.app.relationfield.tests\n )\n \n \n@@ -18,9 +17,9 @@ def test_suite():\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n-                \'../marshaler.rst\',\n+                "../marshaler.rst",\n                 optionflags=OPTIONFLAGS,\n-                package=\'plone.app.relationfield.tests\',\n+                package="plone.app.relationfield.tests",\n             ),\n             layer=ZCML_SANDBOX,\n         )\ndiff --git a/plone/app/relationfield/tests/test_marshall.zcml b/plone/app/relationfield/tests/test_marshall.zcml\nindex 4ed32e1..8b49072 100644\n--- a/plone/app/relationfield/tests/test_marshall.zcml\n+++ b/plone/app/relationfield/tests/test_marshall.zcml\n@@ -1,7 +1,14 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.app.relationfield.tests">\n-     <include package="zope.component" file="meta.zcml" />\n-     <include package="plone.rfc822" />\n-     <include package="plone.app.relationfield" file="marshaler.zcml" />\n+    i18n_domain="plone.app.relationfield.tests"\n+    >\n+  <include\n+      package="zope.component"\n+      file="meta.zcml"\n+      />\n+  <include package="plone.rfc822" />\n+  <include\n+      package="plone.app.relationfield"\n+      file="marshaler.zcml"\n+      />\n </configure>\ndiff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py\nindex 2da2132..56112f4 100644\n--- a/plone/app/relationfield/tests/test_schemaeditor.py\n+++ b/plone/app/relationfield/tests/test_schemaeditor.py\n@@ -1,33 +1,22 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING\n from plone.testing import layered\n \n import doctest\n import os\n-import six\n-import re\n import unittest\n \n \n optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests(\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    os.path.join(os.path.pardir, \'schemaeditor.txt\'),\n+                    os.path.join(os.path.pardir, "schemaeditor.txt"),\n                     optionflags=optionflags,\n-                    checker=Py23DocChecker(),\n                 ),\n                 FUNCTIONAL_WIDGETS_TESTING,\n             )\n@@ -36,5 +25,5 @@ def test_suite():\n     return suite\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(default=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(default="test_suite")\ndiff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py\nindex 66cb7df..68bea17 100644\n--- a/plone/app/relationfield/tests/test_supermodel.py\n+++ b/plone/app/relationfield/tests/test_supermodel.py\n@@ -1,33 +1,22 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING\n from plone.testing import layered\n \n import doctest\n import os\n-import re\n-import six\n import unittest\n \n \n optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests(\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    os.path.join(os.path.pardir, \'supermodel.txt\'),\n+                    os.path.join(os.path.pardir, "supermodel.txt"),\n                     optionflags=optionflags,\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=FUNCTIONAL_WIDGETS_TESTING,\n             )\n@@ -36,5 +25,5 @@ def test_suite():\n     return suite\n \n \n-if __name__ == \'__main__\':\n-    unittest.main(default=\'test_suite\')\n+if __name__ == "__main__":\n+    unittest.main(default="test_suite")\ndiff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py\nindex ff54f16..cea588a 100644\n--- a/plone/app/relationfield/tests/test_widget.py\n+++ b/plone/app/relationfield/tests/test_widget.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.relationfield.testing import Address\n from plone.app.relationfield.testing import FUNCTIONAL_TESTING\n from plone.app.relationfield.testing import IPerson\n@@ -17,15 +16,15 @@ class RelationListDictDataManagerTest(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        portal = self.layer[\'portal\']\n+        portal = self.layer["portal"]\n         intids = getUtility(IIntIds)\n \n-        self.person = portal.person = person = Person(\'Roel Bruggink\')\n+        self.person = portal.person = person = Person("Roel Bruggink")\n         person.__parent__ = portal\n \n         self.addresses = person.addresses = addresses = []\n-        for streetname in [\'Jansbinnensingel\', \'Willemsplein\']:\n-            address = Address(streetname, \'Arnhem\')\n+        for streetname in ["Jansbinnensingel", "Willemsplein"]:\n+            address = Address(streetname, "Arnhem")\n             addresses.append(address)\n \n             # five.intids\' register expect aq wrapped objects, but __parent__\n@@ -35,27 +34,27 @@ def setUp(self):\n             intids.register(address)\n \n     def test_get_datamanger(self):\n-        dm = getMultiAdapter(({}, IPerson[\'addresses\']), IDataManager)\n+        dm = getMultiAdapter(({}, IPerson["addresses"]), IDataManager)\n         self.assertTrue(isinstance(dm, RelationListDictDataManager))\n \n     def test_datamanager_get_empty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         self.assertEqual(dm.get(), [])\n \n     def test_datamanager_set_empty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set([])\n         self.assertEqual(dm.get(), [])\n \n     def test_datamanager_set_nonempty(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set(self.person.addresses)\n         self.assertEqual(dm.get(), self.person.addresses)\n \n     def test_datamanager_should_contain_relationvalues(self):\n-        dm = RelationListDictDataManager({}, IPerson[\'addresses\'])\n+        dm = RelationListDictDataManager({}, IPerson["addresses"])\n         dm.set(self.person.addresses)\n \n-        storage = dm.data[\'addresses\']\n+        storage = dm.data["addresses"]\n         self.assertNotEqual(storage, [])\n         self.assertNotEqual(filter(IRelationValue.providedBy, storage), [])\ndiff --git a/plone/app/relationfield/widget.py b/plone/app/relationfield/widget.py\nindex 70340d4..df1b2ad 100644\n--- a/plone/app/relationfield/widget.py\n+++ b/plone/app/relationfield/widget.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from z3c.form.datamanager import AttributeField\n from z3c.form.datamanager import DictionaryField\n from z3c.form.interfaces import NO_VALUE\n@@ -22,7 +21,7 @@ def get(self):\n         """Gets the target"""\n         rel = None\n         try:\n-            rel = super(RelationDataManager, self).get()\n+            rel = super().get()\n         except AttributeError:\n             # Not set yet\n             pass\n@@ -35,11 +34,11 @@ def get(self):\n     def set(self, value):\n         """Sets the relationship target"""\n         if value is None:\n-            return super(RelationDataManager, self).set(None)\n+            return super().set(None)\n \n         current = None\n         try:\n-            current = super(RelationDataManager, self).get()\n+            current = super().get()\n         except AttributeError:\n             pass\n         intids = getUtility(IIntIds)\n@@ -50,7 +49,7 @@ def set(self, value):\n         else:\n             # otherwise create a relationship\n             rel = RelationValue(to_id)\n-            super(RelationDataManager, self).set(rel)\n+            super().set(rel)\n \n \n @adapter(dict, IRelation)\n@@ -62,7 +61,7 @@ def get(self):\n         """Gets the target"""\n         rel = None\n         try:\n-            rel = super(RelationDictDataManager, self).get()\n+            rel = super().get()\n         except AttributeError:\n             # Not set yet\n             pass\n@@ -80,18 +79,18 @@ def query(self, default=NO_VALUE):\n             raise e\n         except AttributeError:\n             if default == NO_VALUE:\n-                return super(RelationDictDataManager, self).query()\n+                return super().query()\n             else:\n                 return default\n \n     def set(self, value):\n         """Sets the relationship target"""\n         if value is None:\n-            return super(RelationDictDataManager, self).set(None)\n+            return super().set(None)\n \n         current = None\n         try:\n-            current = super(RelationDictDataManager, self).get()\n+            current = super().get()\n         except AttributeError:\n             pass\n         intids = getUtility(IIntIds)\n@@ -102,7 +101,7 @@ def set(self, value):\n         else:\n             # otherwise create a relationship\n             rel = RelationValue(to_id)\n-            super(RelationDictDataManager, self).set(rel)\n+            super().set(rel)\n \n \n @adapter(Interface, IRelationList)\n@@ -115,7 +114,7 @@ def get(self):\n \n         # Calling query() here will lead to infinite recursion!\n         try:\n-            rel_list = super(RelationListDataManager, self).get()\n+            rel_list = super().get()\n \n         except AttributeError:\n             rel_list = None\n@@ -140,7 +139,7 @@ def set(self, value):\n             # otherwise create one\n             to_id = intids.getId(item)\n             new_relationships.append(RelationValue(to_id))\n-        super(RelationListDataManager, self).set(new_relationships)\n+        super().set(new_relationships)\n \n \n @adapter(dict, IRelationList)\n@@ -153,7 +152,7 @@ def get(self):\n \n         # Calling query() here will lead to infinite recursion!\n         try:\n-            rel_list = super(RelationListDictDataManager, self).get()\n+            rel_list = super().get()\n         except AttributeError:\n             rel_list = None\n \n@@ -186,4 +185,4 @@ def set(self, value):\n             # otherwise create one\n             to_id = intids.getId(item)\n             new_relationships.append(RelationValue(to_id))\n-        super(RelationListDictDataManager, self).set(new_relationships)\n+        super().set(new_relationships)\ndiff --git a/plone/app/relationfield/widget.zcml b/plone/app/relationfield/widget.zcml\nindex 830fb4d..c3d1366 100644\n--- a/plone/app/relationfield/widget.zcml\n+++ b/plone/app/relationfield/widget.zcml\n@@ -1,8 +1,9 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone.app.relationfield">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.app.relationfield"\n+    >\n \n   <!-- Widget setup -->\n \n@@ -11,21 +12,24 @@\n   <adapter factory=".widget.RelationListDataManager" />\n   <adapter factory=".widget.RelationListDictDataManager" />\n \n-  <utility component=".source.CMFContentSearchSource"\n-           name="plone.formwidget.relations.cmfcontentsearch"\n-           provides="zope.schema.interfaces.IVocabularyFactory"\n-           />\n+  <utility\n+      provides="zope.schema.interfaces.IVocabularyFactory"\n+      name="plone.formwidget.relations.cmfcontentsearch"\n+      component=".source.CMFContentSearchSource"\n+      />\n \n   <configure zcml:condition="installed plone.formwidget.contenttree">\n-    <adapter factory="plone.formwidget.contenttree.ContentTreeFieldWidget"\n-             for="z3c.relationfield.interfaces.IRelationChoice\n-                  z3c.form.interfaces.IFormLayer"\n-             />\n+    <adapter\n+        factory="plone.formwidget.contenttree.ContentTreeFieldWidget"\n+        for="z3c.relationfield.interfaces.IRelationChoice\n+             z3c.form.interfaces.IFormLayer"\n+        />\n \n-    <adapter factory="plone.formwidget.contenttree.MultiContentTreeFieldWidget"\n-             for="z3c.relationfield.interfaces.IRelationList\n-                  z3c.form.interfaces.IFormLayer"\n-             />\n+    <adapter\n+        factory="plone.formwidget.contenttree.MultiContentTreeFieldWidget"\n+        for="z3c.relationfield.interfaces.IRelationList\n+             z3c.form.interfaces.IFormLayer"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 450b1d8..078bf8d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -19,6 +21,43 @@ directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n \n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n [tool.black]\n-line-length = 79\n-skip-string-normalization = true\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'plone.formwidget.contenttree\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 68a6b90..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,16 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.py\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n\\ No newline at end of file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 2e72dc4..80dcf84 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,66 +1,74 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'3.0.2.dev0\'\n+version = "3.0.2.dev0"\n \n setup(\n-    name=\'plone.app.relationfield\',\n+    name="plone.app.relationfield",\n     version=version,\n-    description=\'Plone support for z3c.relationfield\',\n-    long_description=(\n-        open(\'README.rst\').read() + \'\\n\' + open(\'CHANGES.rst\').read()\n-    ),\n+    description="Plone support for z3c.relationfield",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n-        \'Programming Language :: Python :: 3.10\',\n-        \'Programming Language :: Python :: 3.11\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'dexterity relations plone zc.relation\',\n-    author=\'Alec Mitchell\',\n-    author_email=\'apm13@columbia.edu\',\n-    url=\'https://pypi.org/project/plone.app.relationfield\',\n-    license=\'GPL\',\n+    keywords="dexterity relations plone zc.relation",\n+    author="Alec Mitchell",\n+    author_email="apm13@columbia.edu",\n+    url="https://pypi.org/project/plone.app.relationfield",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.schema\',\n-        \'zope.intid\',\n-        \'five.intid\',\n-        \'plone.app.intid\',\n-        \'z3c.form\',\n-        \'z3c.relationfield>0.7.999\',\n-        \'z3c.formwidget.query\',\n-        \'plone.autoform\',\n-        \'plone.supermodel\',\n-        \'plone.app.vocabularies\',\n-        \'plone.schemaeditor>=1.3.5\',\n-        \'Products.CMFCore\',\n-        \'plone.rfc822\',\n-        \'plone.app.z3cform>=1.1.0\',\n+        "setuptools",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.schema",\n+        "zope.intid",\n+        "five.intid",\n+        "plone.app.intid",\n+        "z3c.form",\n+        "z3c.relationfield>0.7.999",\n+        "z3c.formwidget.query",\n+        "plone.autoform",\n+        "plone.supermodel",\n+        "plone.app.vocabularies",\n+        "plone.schemaeditor>=1.3.5",\n+        "Products.CMFCore",\n+        "plone.rfc822",\n+        "plone.app.z3cform>=1.1.0",\n+        "BTrees",\n+        "Products.GenericSetup",\n+        "plone.app.dexterity",\n+        "plone.behavior",\n+        "plone.dexterity",\n+        "plone.uuid",\n+        "plone.z3cform",\n+        "z3c.objpath",\n+        "zc.relation",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.robotframework\',\n+        "test": [\n+            "persistent",\n+            "plone.app.contenttypes[test]",\n+            "plone.app.testing",\n+            "plone.app.dexterity",\n+            "plone.testing",\n         ]\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..0fd5963\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,54 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.relationfield {posargs}\n+extras =\n+    test\n'

