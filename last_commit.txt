Repository: plone.namedfile


Branch: refs/heads/master
Date: 2016-02-23T11:55:23+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/fa876b3fc3f5fbb166584efbcc0fad20f2dda07c

PEP 8, UTF-8 headers, implements/adapts to decorators, doctest formating.

Files changed:
A plone/namedfile/handler.rst
A plone/namedfile/marshaler.rst
A plone/namedfile/usage.rst
A plone/namedfile/utils.rst
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/namedfile/__init__.py
M plone/namedfile/browser.py
M plone/namedfile/configure.zcml
M plone/namedfile/copy.py
M plone/namedfile/editor.py
M plone/namedfile/editor.zcml
M plone/namedfile/field.py
M plone/namedfile/file.py
M plone/namedfile/handler.py
M plone/namedfile/handler.zcml
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.zcml
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml
M plone/namedfile/storages.py
M plone/namedfile/tests/base.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/testing.zcml
M plone/namedfile/utils.py
M plone/namedfile/z3c-blobfile.zcml
M setup.py
D plone/namedfile/handler.txt
D plone/namedfile/marshaler.txt
D plone/namedfile/usage.txt
D plone/namedfile/utils.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index efef160..f28ed16 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,9 @@ New:
 
 Fixes:
 
+- PEP 8, UTF-8 headers, implements/adapts to decorators, doctest formating.
+  [thet, jensens]
+
 - Workarround for method getImageSize.
   Prevent returning (-1, -1) as the size of the image.
   [andreesg]
diff --git a/README.rst b/README.rst
index 1bee8f9..f7a60bd 100644
--- a/README.rst
+++ b/README.rst
@@ -13,7 +13,7 @@ and BLOBs to be configured in zope.conf.
 plone.supermodel handlers are registered if plone.supermodel is installed.
 The [supermodel] extra will ensure this.
 
-See the usage.txt doctest for more details.
+See the ``usage.rst`` doctest for more details.
 
 Note: This packages is licensed under a BSD license. Contributors, please do
 not add dependencies on GPL code.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/namedfile/__init__.py b/plone/namedfile/__init__.py
index 6fcd4c8..2e59844 100644
--- a/plone/namedfile/__init__.py
+++ b/plone/namedfile/__init__.py
@@ -1,2 +1,5 @@
-from plone.namedfile.file import NamedFile, NamedImage
-from plone.namedfile.file import NamedBlobFile, NamedBlobImage
+# -*- coding: utf-8 -*-
+from plone.namedfile.file import NamedBlobFile    # noqa
+from plone.namedfile.file import NamedBlobImage   # noqa
+from plone.namedfile.file import NamedFile        # noqa
+from plone.namedfile.file import NamedImage       # noqa
diff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py
index 4fadcc1..63da817 100644
--- a/plone/namedfile/browser.py
+++ b/plone/namedfile/browser.py
@@ -1,12 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl.ZopeGuards import guarded_getattr
-from Products.Five.browser import BrowserView
-from plone.namedfile.utils import set_headers, stream_data
+from plone.namedfile.utils import set_headers
+from plone.namedfile.utils import stream_data
 from plone.rfc822.interfaces import IPrimaryFieldInfo
-from zope.interface import implements
-from zope.publisher.interfaces import IPublishTraverse, NotFound
+from Products.Five.browser import BrowserView
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+from zope.publisher.interfaces import NotFound
 
 
+@implementer(IPublishTraverse)
 class Download(BrowserView):
     """Download a file, via ../context/@@download/fieldname/filename
 
@@ -21,8 +24,6 @@ class Download(BrowserView):
     adaption to `plone.rfc822.interfaces.IPrimaryFieldInfo`.
     """
 
-    implements(IPublishTraverse)
-
     def __init__(self, context, request):
         super(Download, self).__init__(context, request)
         self.fieldname = None
diff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml
index c31ea88..ae665c2 100644
--- a/plone/namedfile/configure.zcml
+++ b/plone/namedfile/configure.zcml
@@ -1,27 +1,26 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
     xmlns:zcml="http://namespaces.zope.org/zcml"
-    xmlns:browser="http://namespaces.zope.org/browser"
-    i18n_domain="plone.namedfile">
+    xmlns:browser="http://namespaces.zope.org/browser">
 
-    <browser:page
-        name="download"
-        for="*"
-        class=".browser.Download"
-        permission="zope2.View"
-        />
+  <browser:page
+      name="download"
+      for="*"
+      class=".browser.Download"
+      permission="zope2.View"
+      />
 
-    <browser:page
-        name="display-file"
-        for="*"
-        class=".browser.DisplayFile"
-        permission="zope2.View"
-        />
+  <browser:page
+      name="display-file"
+      for="*"
+      class=".browser.DisplayFile"
+      permission="zope2.View"
+      />
 
-    <include file="z3c-blobfile.zcml" />
-    <include zcml:condition="installed plone.supermodel" file="handler.zcml" />
-    <include zcml:condition="installed plone.rfc822" file="marshaler.zcml" />
-    <include zcml:condition="installed plone.schemaeditor" file="editor.zcml" />
-    <include zcml:condition="installed plone.scale" file="scaling.zcml" />
+  <include file="z3c-blobfile.zcml" />
+  <include zcml:condition="installed plone.supermodel" file="handler.zcml" />
+  <include zcml:condition="installed plone.rfc822" file="marshaler.zcml" />
+  <include zcml:condition="installed plone.schemaeditor" file="editor.zcml" />
+  <include zcml:condition="installed plone.scale" file="scaling.zcml" />
 
 </configure>
diff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py
index eec8d29..87c2d53 100644
--- a/plone/namedfile/copy.py
+++ b/plone/namedfile/copy.py
@@ -1,6 +1,4 @@
-# This file was borrowed from z3c.blobfile and is licensed under the terms of
-# the ZPL.
-
+# -*- coding: utf-8 -*-
 ##############################################################################
 #
 # Copyright (c) 2009 Zope Foundation and Contributors.
@@ -16,21 +14,23 @@
 ##############################################################################
 """Copy hook for proper copying blob data
 """
-import shutil
-
-from ZODB.blob import Blob
-from zope.component import adapts
-from zope.interface import implements
-from zope.copy.interfaces import ICopyHook, ResumeCopy
+# This file was borrowed from z3c.blobfile and is licensed under the terms of
+# the ZPL.
 from plone.namedfile.interfaces import INamedBlobFile
+from ZODB.blob import Blob
+from zope.component import adapter
+from zope.copy.interfaces import ICopyHook
+from zope.copy.interfaces import ResumeCopy
+from zope.interface import implementer
+
+import shutil
 
 
+@implementer(ICopyHook)
+@adapter(INamedBlobFile)
 class BlobFileCopyHook(object):
     """A copy hook that fixes the blob after copying"""
 
-    implements(ICopyHook)
-    adapts(INamedBlobFile)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/namedfile/editor.py b/plone/namedfile/editor.py
index 9bbfeee..e589465 100644
--- a/plone/namedfile/editor.py
+++ b/plone/namedfile/editor.py
@@ -1,7 +1,9 @@
-from zope.i18nmessageid.message import MessageFactory
-from plone.namedfile import interfaces
+# -*- coding: utf-8 -*-
 from plone.namedfile import field
+from plone.namedfile import interfaces
 from plone.schemaeditor.fields import FieldFactory
+from zope.i18nmessageid.message import MessageFactory
+
 
 _ = MessageFactory('plone')
 
diff --git a/plone/namedfile/editor.zcml b/plone/namedfile/editor.zcml
index aa7cf23..a7a5879 100644
--- a/plone/namedfile/editor.zcml
+++ b/plone/namedfile/editor.zcml
@@ -1,21 +1,19 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml">
+<configure xmlns="http://namespaces.zope.org/zope">
 
   <class class=".field.NamedBlobFile">
     <implements interface=".editor.INamedBlobFileField" />
   </class>
   <utility
-     name="plone.namedfile.field.NamedBlobFile"
-     component=".editor.NamedBlobFileFactory"
-     />
+      name="plone.namedfile.field.NamedBlobFile"
+      component=".editor.NamedBlobFileFactory"
+      />
 
   <class class=".field.NamedBlobImage">
     <implements interface=".editor.INamedBlobImageField" />
   </class>
   <utility
-     name="plone.namedfile.field.NamedBlobImage"
-     component=".editor.NamedBlobImageFactory"
-     />
+      name="plone.namedfile.field.NamedBlobImage"
+      component=".editor.NamedBlobImageFactory"
+      />
 
 </configure>
diff --git a/plone/namedfile/field.py b/plone/namedfile/field.py
index da677c8..059b091 100644
--- a/plone/namedfile/field.py
+++ b/plone/namedfile/field.py
@@ -1,23 +1,26 @@
-from zope.interface import implements
-from zope.schema import Object, ValidationError
-from zope.i18nmessageid import MessageFactory
-
-from plone.namedfile.interfaces import INamedFileField, INamedImageField
-
-from plone.namedfile.interfaces import INamedFile, INamedImage
-from plone.namedfile.file import NamedFile as FileValueType
-from plone.namedfile.file import NamedImage as ImageValueType
-
-from plone.namedfile.interfaces import INamedBlobFileField, INamedBlobImageField
-from plone.namedfile.interfaces import INamedBlobFile, INamedBlobImage
-
+# -*- coding: utf-8 -*-
 from plone.namedfile.file import NamedBlobFile as BlobFileValueType
 from plone.namedfile.file import NamedBlobImage as BlobImageValueType
+from plone.namedfile.file import NamedFile as FileValueType
+from plone.namedfile.file import NamedImage as ImageValueType
+from plone.namedfile.interfaces import INamedBlobFile
+from plone.namedfile.interfaces import INamedBlobFileField
+from plone.namedfile.interfaces import INamedBlobImage
+from plone.namedfile.interfaces import INamedBlobImageField
+from plone.namedfile.interfaces import INamedFile
+from plone.namedfile.interfaces import INamedFileField
+from plone.namedfile.interfaces import INamedImage
+from plone.namedfile.interfaces import INamedImageField
 from plone.namedfile.utils import get_contenttype
+from zope.i18nmessageid import MessageFactory
+from zope.interface import implementer
+from zope.schema import Object
+from zope.schema import ValidationError
 
 
 _ = MessageFactory('plone')
 
+
 class InvalidImageFile(ValidationError):
     """Exception for invalid image file"""
     __doc__ = _(u"Invalid image file")
@@ -30,10 +33,10 @@ def validate_image_field(field, value):
             raise InvalidImageFile(mimetype, field.__name__)
 
 
+@implementer(INamedFileField)
 class NamedFile(Object):
     """A NamedFile field
     """
-    implements(INamedFileField)
 
     _type = FileValueType
     schema = INamedFile
@@ -44,10 +47,10 @@ def __init__(self, **kw):
         super(NamedFile, self).__init__(schema=self.schema, **kw)
 
 
+@implementer(INamedImageField)
 class NamedImage(Object):
     """A NamedImage field
     """
-    implements(INamedImageField)
 
     _type = ImageValueType
     schema = INamedImage
@@ -62,10 +65,10 @@ def _validate(self, value):
         validate_image_field(self, value)
 
 
+@implementer(INamedBlobFileField)
 class NamedBlobFile(Object):
     """A NamedBlobFile field
     """
-    implements(INamedBlobFileField)
 
     _type = BlobFileValueType
     schema = INamedBlobFile
@@ -76,10 +79,10 @@ def __init__(self, **kw):
         super(NamedBlobFile, self).__init__(schema=self.schema, **kw)
 
 
+@implementer(INamedBlobImageField)
 class NamedBlobImage(Object):
     """A NamedBlobImage field
     """
-    implements(INamedBlobImageField)
 
     _type = BlobImageValueType
     schema = INamedBlobImage
@@ -92,4 +95,3 @@ def __init__(self, **kw):
     def _validate(self, value):
         super(NamedBlobImage, self)._validate(value)
         validate_image_field(self, value)
-
diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py
index 61eeac3..82b62c6 100644
--- a/plone/namedfile/file.py
+++ b/plone/namedfile/file.py
@@ -14,9 +14,11 @@
 from zope.component import getUtility
 from zope.interface import implementer
 from zope.schema.fieldproperty import FieldProperty
+
 import struct
 import transaction
 
+
 MAXCHUNKSIZE = 1 << 16
 IMAGE_INFO_BYTES = 1024
 MAX_INFO_BYTES = 1 << 16
@@ -195,7 +197,7 @@ def _setData(self, data):
         seek(0, 2)
         size = end = data.tell()
 
-        if size <= 2*MAXCHUNKSIZE:
+        if size <= 2 * MAXCHUNKSIZE:
             seek(0)
             if size < MAXCHUNKSIZE:
                 self._data, self._size = read(size), size
@@ -340,7 +342,7 @@ def getImageInfo(data):
                     h, w = struct.unpack(">HH", jpeg.read(4))
                     break
                 else:
-                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0])-2)
+                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0]) - 2)
                 b = jpeg.read(1)
             width = int(w)
             height = int(h)
diff --git a/plone/namedfile/handler.py b/plone/namedfile/handler.py
index 51d3bb9..0c50755 100644
--- a/plone/namedfile/handler.py
+++ b/plone/namedfile/handler.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 try:
     from plone.supermodel.exportimport import ObjectHandler
     HAVE_SUPERMODEL = True
@@ -5,13 +6,15 @@
     HAVE_SUPERMODEL = False
 
 if HAVE_SUPERMODEL:
-
     from plone.namedfile import field
 
     class FileFieldHandler(ObjectHandler):
-
         filteredAttributes = ObjectHandler.filteredAttributes.copy()
-        filteredAttributes.update({'default': 'rw', 'missing_value': 'rw', 'schema': 'rw'})
+        filteredAttributes.update({
+            'default': 'rw',
+            'missing_value': 'rw',
+            'schema': 'rw'
+        })
 
     NamedFileHandler = FileFieldHandler(field.NamedFile)
     NamedImageHandler = FileFieldHandler(field.NamedImage)
diff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst
new file mode 100644
index 0000000..5087b52
--- /dev/null
+++ b/plone/namedfile/handler.rst
@@ -0,0 +1,208 @@
+plone.supermodel handler
+========================
+
+If plone.supermodel is installed, this package will register a handler
+for the RichText field.
+
+First, we wire up the handlers::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile">
+    ...
+    ...     <include package="zope.component" file="meta.zcml" />
+    ...     <include package="zope.security" file="meta.zcml" />
+    ...
+    ...     <include package="plone.namedfile" file="handler.zcml" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+Then, let's test the fields. Note that 'default' and 'missing_value' are
+unsupported::
+
+    >>> from zope.component import getUtility
+    >>> from plone.namedfile.field import NamedFile, NamedImage, NamedBlobFile, NamedBlobImage
+
+    >>> from plone.supermodel.interfaces import IFieldExportImportHandler
+    >>> from plone.supermodel.interfaces import IFieldNameExtractor
+    >>> from plone.supermodel.utils import prettyXML
+
+    >>> from lxml import etree
+
+
+Named file
+----------
+
+::
+
+    >>> field = NamedFile(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedFile">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedFile">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedFile'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named image
+-----------
+
+::
+
+    >>> field = NamedImage(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedImage">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedImage">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedImage'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named blob file
+---------------
+
+::
+
+    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedBlobFile'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named blob image
+----------------
+
+::
+
+    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedBlobImage'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
diff --git a/plone/namedfile/handler.txt b/plone/namedfile/handler.txt
deleted file mode 100644
index 7beae38..0000000
--- a/plone/namedfile/handler.txt
+++ /dev/null
@@ -1,196 +0,0 @@
-plone.supermodel handler
-========================
-
-If plone.supermodel is installed, this package will register a handler
-for the RichText field.
-
-First, we wire up the handlers
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...     <include package="zope.security" file="meta.zcml" />
-    ...
-    ...     <include package="plone.namedfile" file="handler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Then, let's test the fields. Note that 'default' and 'missing_value' are
-unsupported.
-
-    >>> from zope.component import getUtility
-    >>> from plone.namedfile.field import NamedFile, NamedImage, NamedBlobFile, NamedBlobImage
-
-    >>> from plone.supermodel.interfaces import IFieldExportImportHandler
-    >>> from plone.supermodel.interfaces import IFieldNameExtractor
-    >>> from plone.supermodel.utils import prettyXML
-
-    >>> from lxml import etree
-
-Named file
------------
-
-    >>> field = NamedFile(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedFile">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedFile">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedFile'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named image
------------
-
-    >>> field = NamedImage(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedImage">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedImage">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedImage'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named blob file
----------------
-
-    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedBlobFile'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named blob image
-----------------
-
-    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedBlobImage'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
diff --git a/plone/namedfile/handler.zcml b/plone/namedfile/handler.zcml
index fa52c3f..cf436a3 100644
--- a/plone/namedfile/handler.zcml
+++ b/plone/namedfile/handler.zcml
@@ -1,28 +1,25 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml"
-    i18n_domain="plone.namedfile">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <include package="plone.supermodel" />
+  <include package="plone.supermodel" />
 
-    <!-- plone.supermodel configuration -->
+  <!-- plone.supermodel configuration -->
 
-    <utility
-        component=".handler.NamedFileHandler"
-        name="plone.namedfile.field.NamedFile"
-        />
-    <utility
-        component=".handler.NamedImageHandler"
-        name="plone.namedfile.field.NamedImage"
-        />
+  <utility
+      component=".handler.NamedFileHandler"
+      name="plone.namedfile.field.NamedFile"
+      />
+  <utility
+      component=".handler.NamedImageHandler"
+      name="plone.namedfile.field.NamedImage"
+      />
 
-    <utility
-        component=".handler.NamedBlobFileHandler"
-        name="plone.namedfile.field.NamedBlobFile"
-        />
-    <utility
-        component=".handler.NamedBlobImageHandler"
-        name="plone.namedfile.field.NamedBlobImage"
-        />
+  <utility
+      component=".handler.NamedBlobFileHandler"
+      name="plone.namedfile.field.NamedBlobFile"
+      />
+  <utility
+      component=".handler.NamedBlobImageHandler"
+      name="plone.namedfile.field.NamedBlobImage"
+      />
 
-</configure>
\ No newline at end of file
+</configure>
diff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py
index cea5a5c..dc4a643 100644
--- a/plone/namedfile/interfaces.py
+++ b/plone/namedfile/interfaces.py
@@ -1,20 +1,21 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 from zope.schema.interfaces import IObject
 
+
 HAVE_BLOBS = True
 
 
 class IFile(Interface):
 
     contentType = schema.BytesLine(
-        title = u'Content Type',
+        title=u'Content Type',
         description=u'The content type identifies the type of data.',
         default='',
         required=False,
         missing_value=''
-        )
+    )
 
     data = schema.Bytes(
         title=u'Data',
@@ -22,7 +23,7 @@ class IFile(Interface):
         default='',
         missing_value='',
         required=False,
-        )
+    )
 
     def getSize():
         """Return the byte-size of the data of the object."""
@@ -43,6 +44,7 @@ class IImageScaleTraversable(Interface):
     image fields via the @@images view.
     """
 
+
 class IAvailableSizes(Interface):
     """A callable returning a dictionary of scale name => (width, height)
     """
@@ -53,7 +55,6 @@ class IAvailableSizes(Interface):
 except ImportError:
     class IStableImageScale(Interface):
         """ Marker for image scales when accessed with a UID-based URL.
-
         These can be cached forever using the plone.stableResource ruleset.
         """
 
@@ -66,38 +67,44 @@ class INamed(Interface):
 
     filename = schema.TextLine(title=u"Filename", required=False, default=None)
 
+
 class INamedFile(INamed, IFile):
     """A non-BLOB file with a filename
     """
 
+
 class INamedImage(INamed, IImage):
     """A non-BLOB image with a filename
     """
 
+
 # Fields
 
 class INamedField(IObject):
     """Base field type
     """
 
+
 class INamedFileField(INamedField):
     """Field for storing INamedFile objects.
     """
 
+
 class INamedImageField(INamedField):
     """Field for storing INamedImage objects.
     """
 
+
 class IStorage(Interface):
     """Store file data
     """
 
     def store(data, blob):
         """Store the data into the blob
-
         Raises NonStorable if data is not storable.
         """
 
+
 class NotStorable(Exception):
     """Data is not storable
     """
@@ -109,20 +116,24 @@ class IBlobby(Interface):
     """Marker interface for objects that support blobs.
     """
 
+
 class INamedBlobFile(INamedFile, IBlobby):
     """A BLOB file with a filename
     """
 
+
 class INamedBlobImage(INamedImage, IBlobby):
     """A BLOB image with a filename
     """
 
+
 # Fields
 
 class INamedBlobFileField(INamedFileField):
     """Field for storing INamedBlobFile objects.
     """
 
+
 class INamedBlobImageField(INamedImageField):
     """Field for storing INamedBlobImage objects.
     """
diff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py
index d2fd1a7..31316d3 100644
--- a/plone/namedfile/marshaler.py
+++ b/plone/namedfile/marshaler.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 try:
     from plone.rfc822.defaultfields import BaseFieldMarshaler
     HAVE_MARSHALER = True
@@ -7,14 +8,16 @@
 if HAVE_MARSHALER:
 
     from email.Encoders import encode_base64
-
-    from zope.interface import Interface
-    from zope.component import adapts
-
+    from plone.namedfile import NamedBlobFile
+    from plone.namedfile import NamedBlobImage
+    from plone.namedfile import NamedFile
+    from plone.namedfile import NamedImage
+    from plone.namedfile.interfaces import INamedBlobFileField
+    from plone.namedfile.interfaces import INamedBlobImageField
     from plone.namedfile.interfaces import INamedFileField
     from plone.namedfile.interfaces import INamedImageField
-
-    from plone.namedfile import NamedFile, NamedImage
+    from zope.component import adapter
+    from zope.interface import Interface
 
     class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):
         """Base marshaler for plone.namedfile values. Actual adapters are
@@ -28,12 +31,19 @@ def encode(self, value, charset='utf-8', primary=False):
             # we only support encoding a file value in the body of a message,
             # never in a header
             if not primary:
-                raise ValueError("File fields can only be marshaled as primary fields")
+                raise ValueError(
+                    "File fields can only be marshaled as primary fields")
             if value is None:
                 return None
             return value.data
 
-        def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
+        def decode(
+                self,
+                value,
+                message=None,
+                charset='utf-8',
+                contentType=None,
+                primary=False):
             filename = None
             if primary and message is not None:
                 filename = message.get_filename(None)
@@ -56,43 +66,35 @@ def postProcessMessage(self, message):
                 filename = value.filename
                 if filename:
                     message.add_header('Content-Disposition', 'attachment')
-                    message.set_param('filename',
+                    message.set_param(
+                        'filename',
                         filename.encode('utf-8'),
                         header='Content-Disposition',
                         charset='utf-8'
-                        )
+                    )
 
             encode_base64(message)
 
+    @adapter(Interface, INamedFileField)
     class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedFile field
         """
-
-        adapts(Interface, INamedFileField)
         factory = NamedFile
 
+    @adapter(Interface, INamedImageField)
     class NamedImageFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedImage field
         """
-
-        adapts(Interface, INamedImageField)
         factory = NamedImage
 
-    from plone.namedfile.interfaces import INamedBlobFileField
-    from plone.namedfile.interfaces import INamedBlobImageField
-
-    from plone.namedfile import NamedBlobFile, NamedBlobImage
-
+    @adapter(Interface, INamedBlobFileField)
     class NamedBlobFileFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedBlobFile field
         """
-
-        adapts(Interface, INamedBlobFileField)
         factory = NamedBlobFile
 
+    @adapter(Interface, INamedBlobImageField)
     class NamedBlobImageFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedBlobImage field
         """
-
-        adapts(Interface, INamedBlobImageField)
         factory = NamedBlobImage
diff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst
new file mode 100644
index 0000000..ca64bdf
--- /dev/null
+++ b/plone/namedfile/marshaler.rst
@@ -0,0 +1,224 @@
+plone.rfc822 marshaler
+======================
+
+This package includes a field marshaler for ``plone.rfc822``, which will be
+installed if that package is installed.
+
+To test this, we must first load some configuration::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile.tests">
+    ...
+    ...     <include package="zope.component" file="meta.zcml" />
+    ...     <include package="zope.security" file="meta.zcml" />
+    ...
+    ...     <include package="plone.rfc822" />
+    ...
+    ...     <include package="plone.namedfile" file="marshaler.zcml" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+Next, we will create a schema with which to test the marshaler::
+
+    >>> from zope.interface import Interface
+    >>> from plone.namedfile import field
+
+    >>> class ITestContent(Interface):
+    ...     _file = field.NamedFile()
+    ...     _image = field.NamedImage()
+
+We'll create an instance with some data, too::
+
+    >>> from plone.namedfile import NamedFile, NamedImage
+    >>> fileValue = NamedFile('dummy test data', 'text/plain', filename=u"test.txt")
+    >>> zptlogo = (
+    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
+    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
+    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
+    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
+    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
+    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
+    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
+    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
+    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
+    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
+    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
+    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
+    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
+    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
+    ...     '\x00A\x00;'
+    ...     )
+    >>> imageValue = NamedImage(zptlogo, 'image/gif', filename=u'zptl\xf8go.gif')
+
+    >>> from zope.interface import implementer
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
+    ...     _file = None
+    ...     _image = None
+
+    >>> t = TestContent()
+    >>> t._file = fileValue
+    >>> t._image = imageValue
+
+We can now look up and test the marshaler::
+
+    >>> from zope.component import getMultiAdapter
+    >>> from plone.rfc822.interfaces import IFieldMarshaler
+
+For the moment, fields are not marked as primary. Our marshaller will refuse
+to marshal a non-primary field, as it does not make much sense to encode
+binary data into a UTF-8 string in a header::
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
+    >>> marshaler.marshal()
+    Traceback (most recent call last):
+    ...
+    ValueError: File fields can only be marshaled as primary fields
+
+    >>> marshaler.getContentType()
+    'text/plain'
+    >>> marshaler.ascii
+    False
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
+    >>> marshaler.marshal() is None
+    Traceback (most recent call last):
+    ...
+    ValueError: File fields can only be marshaled as primary fields
+
+    >>> marshaler.getContentType()
+    'image/gif'
+    >>> marshaler.ascii
+    False
+
+Let's try it with primary fields::
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
+    >>> marshaler.marshal(primary=True)
+    'dummy test data'
+
+    >>> marshaler.getContentType()
+    'text/plain'
+    >>> marshaler.getCharset('utf-8') is None
+    True
+    >>> marshaler.ascii
+    False
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
+    >>> marshaler.marshal(primary=True) == zptlogo
+    True
+
+    >>> marshaler.getContentType()
+    'image/gif'
+    >>> marshaler.getCharset('utf-8') is None
+    True
+    >>> marshaler.ascii
+    False
+
+This marshaler will also post-process a message to encode the filename in
+the Content-Disposition header, and base64-encode the payload.
+
+To illustrate that, as well as parsing of the message, let's construct
+a full message and look at the output.
+
+First, we need to mark one of the fields as primary. In this case, we will
+use the file field. The image will will now be ignored, since our marshaler
+refuses to encode non-primary fields::
+
+    >>> from plone.rfc822.interfaces import IPrimaryField
+    >>> from plone.rfc822 import constructMessageFromSchema
+    >>> from plone.rfc822 import renderMessage
+
+    >>> from zope.interface import alsoProvides
+    >>> alsoProvides(ITestContent['_file'], IPrimaryField)
+
+    >>> message = constructMessageFromSchema(t, ITestContent)
+    >>> messageBody = renderMessage(message)
+    >>> print messageBody
+    MIME-Version: 1.0
+    Content-Type: text/plain
+    Content-Disposition: attachment; filename*="utf-8''test.txt"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    ZHVtbXkgdGVzdCBkYXRh
+
+You can see here that we have a transfer encoding and a content disposition.
+
+Let's now use this message to construct a new object::
+
+    >>> from email import message_from_string
+    >>> inputMessage = message_from_string(messageBody)
+
+    >>> newContent = TestContent()
+
+    >>> from plone.rfc822 import initializeObjectFromSchema
+    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
+    >>> newContent._file.data
+    'dummy test data'
+    >>> newContent._file.contentType
+    'text/plain'
+    >>> newContent._file.filename
+    u'test.txt'
+
+    >>> newContent._image is None
+    True
+
+If we have two primary fields, they will be encoded as a multipart message::
+
+    >>> alsoProvides(ITestContent['_image'], IPrimaryField)
+
+    >>> message = constructMessageFromSchema(t, ITestContent)
+    >>> messageBody = renderMessage(message)
+    >>> print messageBody # doctest: +ELLIPSIS
+    MIME-Version: 1.0
+    Content-Type: multipart/mixed; boundary="===============...=="
+    <BLANKLINE>
+    --===============...==
+    MIME-Version: 1.0
+    Content-Type: text/plain
+    Content-Disposition: attachment; filename*="utf-8''test.txt"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    ZHVtbXkgdGVzdCBkYXRh
+    --===============...==
+    MIME-Version: 1.0
+    Content-Type: image/gif
+    Content-Disposition: attachment; filename*="utf-8''zptl%C3%B8go.gif"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi
+    5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM
+    1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2
+    wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm
+    BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D
+    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=
+    --===============...==--...
+
+Of course, we will also be able to load this data from a message::
+
+    >>> inputMessage = message_from_string(messageBody)
+    >>> newContent = TestContent()
+    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
+
+    >>> newContent._file.data
+    'dummy test data'
+    >>> newContent._file.contentType
+    'text/plain'
+    >>> newContent._file.filename
+    u'test.txt'
+
+    >>> newContent._image.data == zptlogo
+    True
+    >>> newContent._image.contentType
+    'image/gif'
+    >>> newContent._image.filename
+    u'zptl\xf8go.gif'
diff --git a/plone/namedfile/marshaler.txt b/plone/namedfile/marshaler.txt
deleted file mode 100644
index 5ae0020..0000000
--- a/plone/namedfile/marshaler.txt
+++ /dev/null
@@ -1,224 +0,0 @@
-plone.rfc822 marshaler
-======================
-
-This package includes a field marshaler for ``plone.rfc822``, which will be
-installed if that package is installed.
-
-To test this, we must first load some configuration:
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile.tests">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...     <include package="zope.security" file="meta.zcml" />
-    ...
-    ...     <include package="plone.rfc822" />
-    ...
-    ...     <include package="plone.namedfile" file="marshaler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Next, we will create a schema with which to test the marshaler
-
-    >>> from zope.interface import Interface
-    >>> from plone.namedfile import field
-
-    >>> class ITestContent(Interface):
-    ...     _file = field.NamedFile()
-    ...     _image = field.NamedImage()
-
-We'll create an instance with some data, too.
-
-    >>> from plone.namedfile import NamedFile, NamedImage
-    >>> fileValue = NamedFile('dummy test data', 'text/plain', filename=u"test.txt")
-    >>> zptlogo = (
-    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
-    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
-    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
-    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
-    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
-    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
-    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
-    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
-    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
-    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
-    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
-    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
-    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
-    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
-    ...     '\x00A\x00;'
-    ...     )
-    >>> imageValue = NamedImage(zptlogo, 'image/gif', filename=u'zptl\xf8go.gif')
-
-    >>> from zope.interface import implements
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
-    ...     _file = None
-    ...     _image = None
-
-    >>> t = TestContent()
-    >>> t._file = fileValue
-    >>> t._image = imageValue
-
-We can now look up and test the marshaler.
-
-    >>> from zope.component import getMultiAdapter
-    >>> from plone.rfc822.interfaces import IFieldMarshaler
-
-For the moment, fields are not marked as primary. Our marshaller will refuse
-to marshal a non-primary field, as it does not make much sense to encode
-binary data into a UTF-8 string in a header.
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
-    >>> marshaler.marshal()
-    Traceback (most recent call last):
-    ...
-    ValueError: File fields can only be marshaled as primary fields
-
-    >>> marshaler.getContentType()
-    'text/plain'
-    >>> marshaler.ascii
-    False
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
-    >>> marshaler.marshal() is None
-    Traceback (most recent call last):
-    ...
-    ValueError: File fields can only be marshaled as primary fields
-
-    >>> marshaler.getContentType()
-    'image/gif'
-    >>> marshaler.ascii
-    False
-
-Let's try it with primary fields:
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
-    >>> marshaler.marshal(primary=True)
-    'dummy test data'
-
-    >>> marshaler.getContentType()
-    'text/plain'
-    >>> marshaler.getCharset('utf-8') is None
-    True
-    >>> marshaler.ascii
-    False
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
-    >>> marshaler.marshal(primary=True) == zptlogo
-    True
-
-    >>> marshaler.getContentType()
-    'image/gif'
-    >>> marshaler.getCharset('utf-8') is None
-    True
-    >>> marshaler.ascii
-    False
-
-This marshaler will also post-process a message to encode the filename in
-the Content-Disposition header, and base64-encode the payload.
-
-To illustrate that, as well as parsing of the message, let's construct
-a full message and look at the output.
-
-First, we need to mark one of the fields as primary. In this case, we will
-use the file field. The image will will now be ignored, since our marshaler
-refuses to encode non-primary fields.
-
-    >>> from plone.rfc822.interfaces import IPrimaryField
-    >>> from plone.rfc822 import constructMessageFromSchema
-    >>> from plone.rfc822 import renderMessage
-
-    >>> from zope.interface import alsoProvides
-    >>> alsoProvides(ITestContent['_file'], IPrimaryField)
-
-    >>> message = constructMessageFromSchema(t, ITestContent)
-    >>> messageBody = renderMessage(message)
-    >>> print messageBody
-    MIME-Version: 1.0
-    Content-Type: text/plain
-    Content-Disposition: attachment; filename*="utf-8''test.txt"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    ZHVtbXkgdGVzdCBkYXRh
-
-You can see here that we have a transfer encoding and a content disposition.
-
-Let's now use this message to construct a new object.
-
-    >>> from email import message_from_string
-    >>> inputMessage = message_from_string(messageBody)
-
-    >>> newContent = TestContent()
-
-    >>> from plone.rfc822 import initializeObjectFromSchema
-    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
-    >>> newContent._file.data
-    'dummy test data'
-    >>> newContent._file.contentType
-    'text/plain'
-    >>> newContent._file.filename
-    u'test.txt'
-
-    >>> newContent._image is None
-    True
-
-If we have two primary fields, they will be encoded as a multipart message.
-
-    >>> alsoProvides(ITestContent['_image'], IPrimaryField)
-
-    >>> message = constructMessageFromSchema(t, ITestContent)
-    >>> messageBody = renderMessage(message)
-    >>> print messageBody # doctest: +ELLIPSIS
-    MIME-Version: 1.0
-    Content-Type: multipart/mixed; boundary="===============...=="
-    <BLANKLINE>
-    --===============...==
-    MIME-Version: 1.0
-    Content-Type: text/plain
-    Content-Disposition: attachment; filename*="utf-8''test.txt"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    ZHVtbXkgdGVzdCBkYXRh
-    --===============...==
-    MIME-Version: 1.0
-    Content-Type: image/gif
-    Content-Disposition: attachment; filename*="utf-8''zptl%C3%B8go.gif"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi
-    5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM
-    1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2
-    wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm
-    BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D
-    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=
-    --===============...==--...
-
-Of course, we will also be able to load this data from a message.
-
-    >>> inputMessage = message_from_string(messageBody)
-    >>> newContent = TestContent()
-    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
-
-    >>> newContent._file.data
-    'dummy test data'
-    >>> newContent._file.contentType
-    'text/plain'
-    >>> newContent._file.filename
-    u'test.txt'
-
-    >>> newContent._image.data == zptlogo
-    True
-    >>> newContent._image.contentType
-    'image/gif'
-    >>> newContent._image.filename
-    u'zptl\xf8go.gif'
diff --git a/plone/namedfile/marshaler.zcml b/plone/namedfile/marshaler.zcml
index f310089..a12614c 100644
--- a/plone/namedfile/marshaler.zcml
+++ b/plone/namedfile/marshaler.zcml
@@ -1,11 +1,8 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml"
-    i18n_domain="plone.namedfile">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <adapter factory=".marshaler.NamedFileFieldMarshaler" />
-    <adapter factory=".marshaler.NamedImageFieldMarshaler" />
-    <adapter factory=".marshaler.NamedBlobFileFieldMarshaler" />
-    <adapter factory=".marshaler.NamedBlobImageFieldMarshaler" />
+  <adapter factory=".marshaler.NamedFileFieldMarshaler" />
+  <adapter factory=".marshaler.NamedImageFieldMarshaler" />
+  <adapter factory=".marshaler.NamedBlobFileFieldMarshaler" />
+  <adapter factory=".marshaler.NamedBlobImageFieldMarshaler" />
 
 </configure>
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 6e26795..5e6162f 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -1,24 +1,30 @@
-from Acquisition import aq_base
+# -*- coding: utf-8 -*-
 from AccessControl.ZopeGuards import guarded_getattr
+from Acquisition import aq_base
 from DateTime import DateTime
 from logging import exception
 from plone.namedfile.interfaces import IAvailableSizes
 from plone.namedfile.interfaces import IStableImageScale
-from plone.namedfile.utils import set_headers, stream_data
+from plone.namedfile.utils import set_headers
+from plone.namedfile.utils import stream_data
 from plone.rfc822.interfaces import IPrimaryFieldInfo
-from plone.scale.storage import AnnotationStorage
 from plone.scale.scale import scaleImage
+from plone.scale.storage import AnnotationStorage
 from Products.Five import BrowserView
 from xml.sax.saxutils import quoteattr
 from ZODB.POSException import ConflictError
+from zope.app.file.file import FileChunk
 from zope.component import queryUtility
 from zope.interface import alsoProvides
-from zope.interface import implements
-from zope.traversing.interfaces import ITraversable, TraversalError
-from zope.publisher.interfaces import IPublishTraverse, NotFound
-from zope.app.file.file import FileChunk
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+from zope.publisher.interfaces import NotFound
+from zope.traversing.interfaces import ITraversable
+from zope.traversing.interfaces import TraversalError
+
 import pkg_resources
 
+
 try:
     pkg_resources.get_distribution('plone.protect>=3.0')
 except (pkg_resources.DistributionNotFound, pkg_resources.VersionConflict):
@@ -130,8 +136,8 @@ def HEAD(self, REQUEST, RESPONSE=None):
     HEAD.__roles__ = ('Anonymous',)
 
 
+@implementer(ITraversable)
 class ImmutableTraverser(object):
-    implements(ITraversable)
 
     def __init__(self, scale):
         self.scale = scale
@@ -146,9 +152,9 @@ def traverse(self, name, furtherPath):
                 raise TraversalError(name)
 
 
+@implementer(ITraversable, IPublishTraverse)
 class ImageScaling(BrowserView):
     """ view used for generating (and storing) image scales """
-    implements(ITraversable, IPublishTraverse)
     # Ignore some stacks to help with accessing via webdav, otherwise you get a
     # 404 NotFound error.
     _ignored_stacks = ('manage_DAVget', 'manage_FTPget')
diff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml
index a2ec18d..a962979 100644
--- a/plone/namedfile/scaling.zcml
+++ b/plone/namedfile/scaling.zcml
@@ -1,16 +1,15 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
-    xmlns:browser="http://namespaces.zope.org/browser"
-    xmlns:zcml="http://namespaces.zope.org/zcml">
+    xmlns:browser="http://namespaces.zope.org/browser">
 
   <include package="zope.annotation"/>
 
   <browser:page
-    name="images"
-    for=".interfaces.IImageScaleTraversable"
-    class=".scaling.ImageScaling"
-    allowed_attributes="scale"
-    permission="zope2.View"
-    />
+      name="images"
+      for=".interfaces.IImageScaleTraversable"
+      class=".scaling.ImageScaling"
+      allowed_attributes="scale"
+      permission="zope2.View"
+      />
 
 </configure>
diff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py
index 75cf4c7..e7e12e5 100644
--- a/plone/namedfile/storages.py
+++ b/plone/namedfile/storages.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
 
@@ -15,17 +16,18 @@
 #
 ##############################################################################
 
-from zope.interface import implements
 from plone.namedfile.file import FileChunk
-from zope.publisher.browser import FileUpload
 from plone.namedfile.interfaces import IStorage
 from plone.namedfile.interfaces import NotStorable
+from zope.interface import implementer
+from zope.publisher.browser import FileUpload
+
 
 MAXCHUNKSIZE = 1 << 16
 
 
+@implementer(IStorage)
 class StringStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, str):
@@ -36,8 +38,8 @@ def store(self, data, blob):
         fp.close()
 
 
+@implementer(IStorage)
 class UnicodeStorable(StringStorable):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, unicode):
@@ -48,8 +50,8 @@ def store(self, data, blob):
         StringStorable.store(self, data, blob)
 
 
+@implementer(IStorage)
 class FileChunkStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, FileChunk):
@@ -64,8 +66,8 @@ def store(self, data, blob):
         fp.close()
 
 
+@implementer(IStorage)
 class FileDescriptorStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, file):
@@ -77,8 +79,8 @@ def store(self, data, blob):
             return
 
 
+@implementer(IStorage)
 class FileUploadStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, FileUpload):
diff --git a/plone/namedfile/tests/base.py b/plone/namedfile/tests/base.py
index 668669e..69a4b89 100644
--- a/plone/namedfile/tests/base.py
+++ b/plone/namedfile/tests/base.py
@@ -1,20 +1,25 @@
-import os
+# -*- coding: utf-8 -*-
 from StringIO import StringIO
-import PIL.Image
 from Testing import ZopeTestCase as ztc
+from Testing.testbrowser import Browser
 from zope.component import testing
 from zope.configuration import xmlconfig
-from Testing.testbrowser import Browser
+
+import os
+import PIL.Image
+
 
 def getFile(filename):
     """ return contents of the file with the given name """
     filename = os.path.join(os.path.dirname(__file__), filename)
     return open(filename, 'r')
 
+
 def setUp(self=None):
     testing.setUp()
     xmlconfig.xmlconfig(getFile('testing.zcml'))
 
+
 class NamedFileLayer:
     setUp = classmethod(setUp)
     tearDown = classmethod(testing.tearDown)
@@ -26,16 +31,23 @@ class NamedFileLayer:
 else:
     NamedFileLayer.__bases__ = (ZopeLite,)
 
+
 class ImageTestMixin(object):
+
     def assertImage(self, data, format, size):
         image = PIL.Image.open(StringIO(data))
         self.assertEqual(image.format, format)
         self.assertEqual(image.size, size)
 
+
 class NamedFileTestCase(ztc.TestCase, ImageTestMixin):
     layer = NamedFileLayer
 
-class NamedFileFunctionalTestCase(ztc.Functional, ztc.ZopeTestCase, ImageTestMixin):
+
+class NamedFileFunctionalTestCase(
+        ztc.Functional,
+        ztc.ZopeTestCase,
+        ImageTestMixin):
     layer = NamedFileLayer
 
     def getCredentials(self):
diff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py
index 420a06a..e8f532f 100644
--- a/plone/namedfile/tests/test_blobfile.py
+++ b/plone/namedfile/tests/test_blobfile.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
 
@@ -14,27 +15,28 @@
 # FOR A PARTICULAR PURPOSE.
 #
 ##############################################################################
-import unittest
-import struct
-import transaction
 
-from zope.component import provideUtility
-from zope.interface.verify import verifyClass
+from plone.namedfile import storages
 from plone.namedfile.file import NamedBlobFile
 from plone.namedfile.file import NamedBlobImage
 from plone.namedfile.interfaces import INamedBlobFile
 from plone.namedfile.interfaces import INamedBlobImage
 from plone.namedfile.interfaces import IStorage
-from plone.namedfile import storages
 from plone.namedfile.tests.base import NamedFileLayer
 from plone.namedfile.tests.test_image import zptlogo
+from zope.component import provideUtility
+from zope.interface.verify import verifyClass
+
+import struct
+import transaction
+import unittest
 
 
 def registerUtilities():
-     provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")
-     provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")
-     provideUtility(storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk")
-     provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")
+    provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")  # noqa
+    provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")  # noqa
+    provideUtility(storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk")  # noqa
+    provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")  # noqa
 
 
 class TestImage(unittest.TestCase):
diff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py
index cfdc67e..e639110 100644
--- a/plone/namedfile/tests/test_doctests.py
+++ b/plone/namedfile/tests/test_doctests.py
@@ -1,30 +1,32 @@
-import doctest
-import unittest
 from plone.namedfile.tests.base import setUp
 from zope.component.testing import tearDown
 
+import doctest
+import unittest
+
+
 def test_suite():
     return unittest.TestSuite([
 
         doctest.DocFileSuite(
-            'usage.txt', package='plone.namedfile',
+            'usage.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'handler.txt', package='plone.namedfile',
+            'handler.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'marshaler.txt', package='plone.namedfile',
+            'marshaler.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'utils.txt', package='plone.namedfile',
+            'utils.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocTestSuite('plone.namedfile.file'),
 
-        ])
+    ])
 
 if __name__ == '__main__':
     unittest.main(defaultTest='test_suite')
diff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py
index 1cdf258..0d2eccc 100644
--- a/plone/namedfile/tests/test_image.py
+++ b/plone/namedfile/tests/test_image.py
@@ -1,11 +1,13 @@
+# -*- coding: utf-8 -*-
 # This file is borrowed from zope.app.file and licensed ZPL.
 
-import unittest
-from zope.interface.verify import verifyClass
 from plone.namedfile.file import NamedImage
 from plone.namedfile.interfaces import INamedImage
 from plone.namedfile.tests.base import getFile
 from plone.namedfile.utils import get_contenttype
+from zope.interface.verify import verifyClass
+
+import unittest
 
 
 zptlogo = (
@@ -26,7 +28,8 @@
     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
     '\x00A\x00;'
-    )
+)
+
 
 class TestImage(unittest.TestCase):
 
@@ -59,16 +62,22 @@ def testInterface(self):
         self.failUnless(verifyClass(INamedImage, NamedImage))
 
     def test_get_contenttype(self):
-        self.assertEqual(get_contenttype(NamedImage(getFile('image.gif').read(),
-                                                    contentType='image/gif')),
-                         'image/gif')
-        self.assertEqual(get_contenttype(NamedImage(getFile('image.gif').read(),
-                                                    filename=u'image.gif')),
-                         'image/gif')
+        self.assertEqual(
+            get_contenttype(
+                NamedImage(
+                    getFile('image.gif').read(),
+                    contentType='image/gif')),
+            'image/gif')
+        self.assertEqual(
+            get_contenttype(
+                NamedImage(
+                    getFile('image.gif').read(),
+                    filename=u'image.gif')),
+            'image/gif')
         self.assertEqual(get_contenttype(
-                                     NamedImage(getFile('notimage.doc').read(),
-                                                filename=u'notimage.doc')),
-                         'application/msword')
+            NamedImage(getFile('notimage.doc').read(),
+                       filename=u'notimage.doc')),
+            'application/msword')
 
     def testImageValidation(self):
         from plone.namedfile.field import InvalidImageFile,\
@@ -82,7 +91,11 @@ class FakeField(object):
 
         # field has an empty file
         image = self._makeImage()
-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)
+        self.assertRaises(
+            InvalidImageFile,
+            validate_image_field,
+            FakeField(),
+            image)
 
         # field has an image file
         image._setData(zptlogo)
@@ -90,4 +103,8 @@ class FakeField(object):
 
         notimage = NamedImage(getFile('notimage.doc').read(),
                               filename=u'notimage.doc')
-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)
+        self.assertRaises(
+            InvalidImageFile,
+            validate_image_field,
+            FakeField(),
+            notimage)
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 9109bb4..ae4bbf1 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -1,19 +1,23 @@
-import time
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from OFS.SimpleItem import SimpleItem
-from plone.namedfile.interfaces import IImageScaleTraversable, IAvailableSizes
 from plone.namedfile.field import NamedImage as NamedImageField
 from plone.namedfile.file import NamedImage
-from plone.namedfile.tests.base import NamedFileTestCase, getFile
-from plone.namedfile.tests.base import NamedFileFunctionalTestCase
+from plone.namedfile.interfaces import IAvailableSizes
+from plone.namedfile.interfaces import IImageScaleTraversable
 from plone.namedfile.scaling import ImageScaling
+from plone.namedfile.tests.base import getFile
+from plone.namedfile.tests.base import NamedFileFunctionalTestCase
+from plone.namedfile.tests.base import NamedFileTestCase
 from plone.scale.interfaces import IScaledImageQuality
 from zExceptions import Unauthorized
 from zope.annotation import IAttributeAnnotatable
-from zope.component import getSiteManager, getGlobalSiteManager
-from zope.interface import implements
+from zope.component import getGlobalSiteManager
+from zope.component import getSiteManager
+from zope.interface import implementer
 
 import re
+import time
 
 
 def wait_to_ensure_modified():
@@ -26,8 +30,8 @@ class IHasImage(IImageScaleTraversable):
     image = NamedImageField()
 
 
+@implementer(IAttributeAnnotatable, IHasImage)
 class DummyContent(SimpleItem):
-    implements(IAttributeAnnotatable, IHasImage)
     image = None
     modified = DateTime
     id = __name__ = 'item'
@@ -37,9 +41,9 @@ def Title(self):
         return self.title
 
 
+@implementer(IScaledImageQuality)
 class DummyQualitySupplier(object):
     """ fake utility for plone.app.imaging's scaling quality """
-    implements(IScaledImageQuality)
 
     def getQuality(self):
         return 1  # as bad as it gets
@@ -327,7 +331,9 @@ def testHeadRequestMethod(self):
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
         self.assertEqual(
-            response.getHeader('Content-Length'), str(len(get_response.getBody())))
+            response.getHeader('Content-Length'),
+            str(len(get_response.getBody()))
+        )
         self.assertEqual(response.getBody(), '')
 
     def testPublishThumbViaUID(self):
diff --git a/plone/namedfile/tests/testing.zcml b/plone/namedfile/tests/testing.zcml
index f33711b..c8ac4f0 100644
--- a/plone/namedfile/tests/testing.zcml
+++ b/plone/namedfile/tests/testing.zcml
@@ -1,14 +1,12 @@
-<configure
-     xmlns="http://namespaces.zope.org/zope"
-     i18n_domain="plone.namedfile.tests">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <include package="zope.security" file="meta.zcml" />
-    <include package="zope.component" file="meta.zcml" />
-    <include package="zope.browserpage" file="meta.zcml" />
-    <include package="zope.traversing" file="configure.zcml" />
+  <include package="zope.security" file="meta.zcml" />
+  <include package="zope.component" file="meta.zcml" />
+  <include package="zope.browserpage" file="meta.zcml" />
+  <include package="zope.traversing" file="configure.zcml" />
 
-    <permission id="zope2.View" title="View" />
+  <permission id="zope2.View" title="View" />
 
-    <include package="plone.namedfile" />
+  <include package="plone.namedfile" />
 
-</configure>
\ No newline at end of file
+</configure>
diff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst
new file mode 100644
index 0000000..e691f24
--- /dev/null
+++ b/plone/namedfile/usage.rst
@@ -0,0 +1,392 @@
+Usage
+=====
+
+This demonstrates how to use the package.
+
+
+Test setup
+----------
+
+We must first load the package's ZCML::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile.tests">
+    ...
+    ...     <include package="plone.namedfile" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+
+Schema fields
+-------------
+
+The following schema fields can be used to describe file data. We'll only
+test the BLOB versions of the fields if z3c.blobfile is installed::
+
+    >>> from zope.interface import Interface
+    >>> from plone.namedfile import field
+
+    >>> class IFileContainer(Interface):
+    ...     simple = field.NamedFile(title=u"Named file")
+    ...     image = field.NamedImage(title=u"Named image file")
+    ...     blob = field.NamedBlobFile(title=u"Named blob file")
+    ...     blobimage = field.NamedBlobImage(title=u"Named blob image file")
+
+These store data with the following types::
+
+    >>> from zope.interface import implementer
+    >>> from plone import namedfile
+
+    
+    >>> @implementer(IFileContainer)
+    ... class FileContainer(object):
+    ...     __allow_access_to_unprotected_subobjects__ = 1
+    ...     def __init__(self):
+    ...         self.simple = namedfile.NamedFile()
+    ...         self.image = namedfile.NamedImage()
+    ...         self.blob = namedfile.NamedBlobFile()
+    ...         self.blobimage = namedfile.NamedBlobImage()
+
+
+File data and content type
+--------------------------
+
+Let's now show how to get and set file data.
+
+The FileContainer class creates empty objects to start with::
+
+    >>> container = FileContainer()
+
+    >>> container.simple.data
+    ''
+    >>> container.simple.contentType
+    ''
+    >>> container.simple.filename is None
+    True
+
+    >>> container.image.data
+    ''
+    >>> container.image.contentType
+    ''
+    >>> container.image.filename is None
+    True
+
+    >>> container.blob.data
+    ''
+    >>> container.blob.contentType
+    ''
+    >>> container.blob.filename is None
+    True
+    >>> container.blobimage.data
+    ''
+    >>> container.blobimage.contentType
+    ''
+    >>> container.blobimage.filename is None
+    True
+
+Let's now set some actual data in these files. Notice how the constructor
+will attempt to guess the filename from the file extension::
+
+    >>> container.simple = namedfile.NamedFile('dummy test data', filename=u"test.txt")
+    >>> container.simple.data
+    'dummy test data'
+    >>> container.simple.contentType
+    'text/plain'
+    >>> container.simple.filename
+    u'test.txt'
+
+    >>> container.blob = namedfile.NamedBlobFile('dummy test data', filename=u"test.txt")
+    >>> container.blob.data
+    'dummy test data'
+    >>> container.blob.contentType
+    'text/plain'
+    >>> container.blob.filename
+    u'test.txt'
+
+Let's also try to read a GIF, courtesy of the zope.app.file tests::
+
+    >>> zptlogo = (
+    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
+    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
+    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
+    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
+    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
+    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
+    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
+    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
+    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
+    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
+    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
+    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
+    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
+    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
+    ...     '\x00A\x00;'
+    ...     )
+
+    >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")
+    >>> container.image.data == zptlogo
+    True
+    >>> container.image.contentType
+    'image/gif'
+    >>> container.image.filename
+    u'zpt.gif'
+
+    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")
+    >>> container.blobimage.data == zptlogo
+    True
+    >>> container.blobimage.contentType
+    'image/gif'
+    >>> container.blobimage.filename
+    u'zpt.gif'
+
+Note that is possible for force the mimetype::
+
+    >>> container.image = namedfile.NamedImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
+    >>> container.image.data == zptlogo
+    True
+    >>> container.image.contentType
+    'image/foo'
+    >>> container.image.filename
+    u'zpt.gif'
+
+    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
+    >>> container.blobimage.data == zptlogo
+    True
+    >>> container.blobimage.contentType
+    'image/foo'
+    >>> container.blobimage.filename
+    u'zpt.gif'
+
+The filename must be set to a unicode string, not a bytestring::
+
+    >>> container.image.filename = 'foo'
+    Traceback (most recent call last):
+    ...
+    WrongType: ('foo', <type 'unicode'>, 'filename')
+
+
+Download view
+-------------
+
+This package also comes with a view that can be used to download files. This
+will set Content-Disposition to ensure the browser downloads the file rather
+than displaying it. To use it, link to ../context-object/@@download/fieldname,
+where `fieldname` is the name of the attribute on the context-object where the
+named file is stored.
+
+We will test this with a dummy request, faking traversal::
+
+    >>> from plone.namedfile.browser import Download
+    >>> from zope.publisher.browser import TestRequest
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'simple')
+    >>> download()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'blob')
+    >>> data = download()
+    >>> isinstance(data, file)
+    True
+    >>> data.read()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'image')
+    >>> download() == zptlogo
+    True
+
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''zpt.gif"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'blobimage')
+    >>> data = download()
+    >>> isinstance(data, file)
+    True
+    >>> data.read() == zptlogo
+    True
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''zpt.gif"
+
+
+Display-file view
+-----------------
+
+This package also comes with a view that can be used to display files in the
+browser. To use it, link to ../context-object/@@display-file/fieldname, where
+`fieldname` is the name of the attribute on the context-object where the named
+file is stored.
+
+We will test this with a dummy request, faking traversal::
+
+    >>> from plone.namedfile.browser import DisplayFile
+    >>> from zope.publisher.browser import TestRequest
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'simple')
+    >>> display_file()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blob')
+    >>> data = display_file()
+    >>> isinstance(data, file)
+    True
+    >>> data.read()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'image')
+    >>> display_file() == zptlogo
+    True
+
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blobimage')
+    >>> data = display_file()
+    >>> isinstance(data, file)
+    True
+    >>> data.read() == zptlogo
+    True
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+
+
+Specifying the primary field
+----------------------------
+
+To use the @@download view without specifying the field in the URL, the
+primary field information must be registered with an adapter. (Frameworks such
+as plone.dexterity may already have done this for you.)::
+
+    >>> from plone.rfc822.interfaces import IPrimaryFieldInfo
+    >>> from zope.component import adapter
+
+    >>> @implementer(IPrimaryFieldInfo)
+    ... @adapter(IFileContainer)
+    ... class FieldContainerPrimaryFieldInfo(object):
+    ...     fieldname = 'simple'
+    ...     field = IFileContainer['simple']
+    ...     def __init__(self, context):
+    ...         self.value = context.simple
+
+    >>> from zope.component import getSiteManager
+    >>> components = getSiteManager()
+    >>> components.registerAdapter(FieldContainerPrimaryFieldInfo)
+
+We will test this with a dummy request, faking traversal::
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request)
+    >>> download()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+
+Image scales
+------------
+
+This package can handle the creation, storage, and retrieval of arbitrarily
+sized scaled versions of images stored in NamedImage or NamedBlobImage fields.
+
+Image scales are accessed via an @@images view that is available for any item
+providing ``plone.namedfile.interfaces.IImageScaleTraversable``.  There are
+several ways that you may reference scales from page templates.
+
+1. for full control you may do the tag generation explicitly::
+
+     <img tal:define="scales context/@@images;
+                      thumbnail python: scales.scale('image', width=64, height=64);"
+          tal:condition="thumbnail"
+          tal:attributes="src thumbnail/url;
+                          width thumbnail/width;
+                          height thumbnail/height" />
+
+   This would create an up to 64 by 64 pixel scaled down version of the image
+   stored in the "image" field.  It also allows for passing in additional
+   parameters support by `plone.scale`_'s ``scaleImage`` function, e.g.
+   ``direction`` or ``quality``.
+
+   .. _`plone.scale`: http://pypi.python.org/pypi/plone.scale
+
+2. for automatic tag generation with extra parameters you would use::
+
+     <img tal:define="scale context/@@images"
+          tal:replace="structure python: scale.scale('image',
+                       width=1200, height=800, direction='down').tag()" />
+
+3. It is possible to access scales via predefined named scale sizes, rather
+   than hardcoding the dimensions every time you access a scale.  The scale
+   sizes are found via calling a utility providing
+   ``plone.namedfile.interfaces.IAvailableSizes``, which should return a dict of
+   scale name => (width, height).  A scale called 'mini' could then be accessed
+   like this::
+
+     <img tal:define="scale context/@@images"
+          tal:replace="structure python: scale.scale('image',
+                       scale='mini').tag()" />
+
+   This would use the predefined scale size "mini" to determine the desired
+   image dimensions, but still allow to pass in extra parameters.
+
+4. a convenience short-cut for option 3 can be used::
+
+     <img tal:replace="structure context/@@images/image/mini" />
+
+5. and lastly, the short-cut can also be used to render the unscaled image::
+
+     <img tal:replace="structure context/@@images/image" />
diff --git a/plone/namedfile/usage.txt b/plone/namedfile/usage.txt
deleted file mode 100644
index 03b601d..0000000
--- a/plone/namedfile/usage.txt
+++ /dev/null
@@ -1,384 +0,0 @@
-Usage
-=====
-
-This demonstrates how to use the package.
-
-Test setup
-----------
-
-We must first load the package's ZCML.
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile.tests">
-    ...
-    ...     <include package="plone.namedfile" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Schema fields
--------------
-
-The following schema fields can be used to describe file data. We'll only
-test the BLOB versions of the fields if z3c.blobfile is installed.
-
-    >>> from zope.interface import Interface
-    >>> from plone.namedfile import field
-
-    >>> class IFileContainer(Interface):
-    ...     simple = field.NamedFile(title=u"Named file")
-    ...     image = field.NamedImage(title=u"Named image file")
-    ...     blob = field.NamedBlobFile(title=u"Named blob file")
-    ...     blobimage = field.NamedBlobImage(title=u"Named blob image file")
-
-These store data with the following types.
-
-    >>> from zope.interface import implements
-    >>> from plone import namedfile
-
-    >>> class FileContainer(object):
-    ...     implements(IFileContainer)
-    ...     __allow_access_to_unprotected_subobjects__ = 1
-    ...     def __init__(self):
-    ...         self.simple = namedfile.NamedFile()
-    ...         self.image = namedfile.NamedImage()
-    ...         self.blob = namedfile.NamedBlobFile()
-    ...         self.blobimage = namedfile.NamedBlobImage()
-
-File data and content type
---------------------------
-
-Let's now show how to get and set file data.
-
-The FileContainer class creates empty objects to start with.
-
-    >>> container = FileContainer()
-
-    >>> container.simple.data
-    ''
-    >>> container.simple.contentType
-    ''
-    >>> container.simple.filename is None
-    True
-
-    >>> container.image.data
-    ''
-    >>> container.image.contentType
-    ''
-    >>> container.image.filename is None
-    True
-
-    >>> container.blob.data
-    ''
-    >>> container.blob.contentType
-    ''
-    >>> container.blob.filename is None
-    True
-    >>> container.blobimage.data
-    ''
-    >>> container.blobimage.contentType
-    ''
-    >>> container.blobimage.filename is None
-    True
-
-Let's now set some actual data in these files. Notice how the constructor
-will attempt to guess the filename from the file extension.
-
-    >>> container.simple = namedfile.NamedFile('dummy test data', filename=u"test.txt")
-    >>> container.simple.data
-    'dummy test data'
-    >>> container.simple.contentType
-    'text/plain'
-    >>> container.simple.filename
-    u'test.txt'
-
-    >>> container.blob = namedfile.NamedBlobFile('dummy test data', filename=u"test.txt")
-    >>> container.blob.data
-    'dummy test data'
-    >>> container.blob.contentType
-    'text/plain'
-    >>> container.blob.filename
-    u'test.txt'
-
-Let's also try to read a GIF, courtesy of the zope.app.file tests:
-
-    >>> zptlogo = (
-    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
-    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
-    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
-    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
-    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
-    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
-    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
-    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
-    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
-    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
-    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
-    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
-    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
-    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
-    ...     '\x00A\x00;'
-    ...     )
-
-    >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")
-    >>> container.image.data == zptlogo
-    True
-    >>> container.image.contentType
-    'image/gif'
-    >>> container.image.filename
-    u'zpt.gif'
-
-    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")
-    >>> container.blobimage.data == zptlogo
-    True
-    >>> container.blobimage.contentType
-    'image/gif'
-    >>> container.blobimage.filename
-    u'zpt.gif'
-
-Note that is possible for force the mimetype:
-
-    >>> container.image = namedfile.NamedImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
-    >>> container.image.data == zptlogo
-    True
-    >>> container.image.contentType
-    'image/foo'
-    >>> container.image.filename
-    u'zpt.gif'
-
-    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
-    >>> container.blobimage.data == zptlogo
-    True
-    >>> container.blobimage.contentType
-    'image/foo'
-    >>> container.blobimage.filename
-    u'zpt.gif'
-
-The filename must be set to a unicode string, not a bytestring:
-
-    >>> container.image.filename = 'foo'
-    Traceback (most recent call last):
-    ...
-    WrongType: ('foo', <type 'unicode'>, 'filename')
-
-Download view
--------------
-
-This package also comes with a view that can be used to download files. This
-will set Content-Disposition to ensure the browser downloads the file rather
-than displaying it. To use it, link to ../context-object/@@download/fieldname,
-where `fieldname` is the name of the attribute on the context-object where the
-named file is stored.
-
-We will test this with a dummy request, faking traversal.
-
-    >>> from plone.namedfile.browser import Download
-    >>> from zope.publisher.browser import TestRequest
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'simple')
-    >>> download()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'blob')
-    >>> data = download()
-    >>> isinstance(data, file)
-    True
-    >>> data.read()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'image')
-    >>> download() == zptlogo
-    True
-
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''zpt.gif"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'blobimage')
-    >>> data = download()
-    >>> isinstance(data, file)
-    True
-    >>> data.read() == zptlogo
-    True
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''zpt.gif"
-
-Display-file view
------------------
-
-This package also comes with a view that can be used to display files in the
-browser. To use it, link to ../context-object/@@display-file/fieldname, where
-`fieldname` is the name of the attribute on the context-object where the named
-file is stored.
-
-We will test this with a dummy request, faking traversal.
-
-    >>> from plone.namedfile.browser import DisplayFile
-    >>> from zope.publisher.browser import TestRequest
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'simple')
-    >>> display_file()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blob')
-    >>> data = display_file()
-    >>> isinstance(data, file)
-    True
-    >>> data.read()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'image')
-    >>> display_file() == zptlogo
-    True
-
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blobimage')
-    >>> data = display_file()
-    >>> isinstance(data, file)
-    True
-    >>> data.read() == zptlogo
-    True
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-
-Specifying the primary field
-----------------------------
-
-To use the @@download view without specifying the field in the URL, the
-primary field information must be registered with an adapter. (Frameworks such
-as plone.dexterity may already have done this for you.)
-
-    >>> from plone.rfc822.interfaces import IPrimaryFieldInfo
-    >>> from zope.component import adapts
-
-    >>> class FieldContainerPrimaryFieldInfo(object):
-    ...     implements(IPrimaryFieldInfo)
-    ...     adapts(IFileContainer)
-    ...     fieldname = 'simple'
-    ...     field = IFileContainer['simple']
-    ...     def __init__(self, context):
-    ...         self.value = context.simple
-
-    >>> from zope.component import getSiteManager
-    >>> components = getSiteManager()
-    >>> components.registerAdapter(FieldContainerPrimaryFieldInfo)
-
-We will test this with a dummy request, faking traversal.
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request)
-    >>> download()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-Image scales
-------------
-
-This package can handle the creation, storage, and retrieval of arbitrarily
-sized scaled versions of images stored in NamedImage or NamedBlobImage fields.
-
-Image scales are accessed via an @@images view that is available for any item
-providing ``plone.namedfile.interfaces.IImageScaleTraversable``.  There are
-several ways that you may reference scales from page templates.
-
-1. for full control you may do the tag generation explicitly::
-
-     <img tal:define="scales context/@@images;
-                      thumbnail python: scales.scale('image', width=64, height=64);"
-          tal:condition="thumbnail"
-          tal:attributes="src thumbnail/url;
-                          width thumbnail/width;
-                          height thumbnail/height" />
-
-   This would create an up to 64 by 64 pixel scaled down version of the image
-   stored in the "image" field.  It also allows for passing in additional
-   parameters support by `plone.scale`_'s ``scaleImage`` function, e.g.
-   ``direction`` or ``quality``.
-
-   .. _`plone.scale`: http://pypi.python.org/pypi/plone.scale
-
-2. for automatic tag generation with extra parameters you would use::
-
-     <img tal:define="scale context/@@images"
-          tal:replace="structure python: scale.scale('image',
-                       width=1200, height=800, direction='down').tag()" />
-
-3. It is possible to access scales via predefined named scale sizes, rather
-   than hardcoding the dimensions every time you access a scale.  The scale
-   sizes are found via calling a utility providing
-   ``plone.namedfile.interfaces.IAvailableSizes``, which should return a dict of
-   scale name => (width, height).  A scale called 'mini' could then be accessed
-   like this::
-
-     <img tal:define="scale context/@@images"
-          tal:replace="structure python: scale.scale('image',
-                       scale='mini').tag()" />
-
-   This would use the predefined scale size "mini" to determine the desired
-   image dimensions, but still allow to pass in extra parameters.
-
-4. a convenience short-cut for option 3 can be used::
-
-     <img tal:replace="structure context/@@images/image/mini" />
-
-5. and lastly, the short-cut can also be used to render the unscaled image::
-
-     <img tal:replace="structure context/@@images/image" />
diff --git a/plone/namedfile/utils.py b/plone/namedfile/utils.py
index 8d53684..5ac5bdd 100644
--- a/plone/namedfile/utils.py
+++ b/plone/namedfile/utils.py
@@ -1,8 +1,10 @@
-import os.path
+# -*- coding: utf-8 -*-
+from plone.namedfile.interfaces import IBlobby
+
 import mimetypes
+import os.path
 import urllib
 
-from plone.namedfile.interfaces import IBlobby
 
 try:
     # use this to stream data if we can
@@ -10,16 +12,23 @@
 except ImportError:
     filestream_iterator = None
 
+
 def safe_basename(filename):
     """Get the basename of the given filename, regardless of which platform
     (Windows or Unix) it originated from.
     """
-    return filename[max(filename.rfind('/'),
-                        filename.rfind('\\'),
-                        filename.rfind(':'),
-                        )+1:]
+    fslice = max(
+        filename.rfind('/'),
+        filename.rfind('\\'),
+        filename.rfind(':'),
+    ) + 1
+    return filename[fslice:]
+
 
-def get_contenttype(file=None, filename=None, default='application/octet-stream'):
+def get_contenttype(
+        file=None,
+        filename=None,
+        default='application/octet-stream'):
     """Get the MIME content type of the given file and/or filename.
     """
 
@@ -34,6 +43,7 @@ def get_contenttype(file=None, filename=None, default='application/octet-stream'
 
     return default
 
+
 def set_headers(file, response, filename=None):
     """Set response headers for the given file. If filename is given, set
     the Content-Disposition to attachment.
@@ -48,7 +58,11 @@ def set_headers(file, response, filename=None):
         if not isinstance(filename, unicode):
             filename = unicode(filename, 'utf-8', errors="ignore")
         filename = urllib.quote(filename.encode("utf8"))
-        response.setHeader("Content-Disposition", "attachment; filename*=UTF-8''%s" % filename)
+        response.setHeader(
+            "Content-Disposition",
+            "attachment; filename*=UTF-8''%s" %
+            filename)
+
 
 def stream_data(file):
     """Return the given file as a stream if possible.
diff --git a/plone/namedfile/utils.rst b/plone/namedfile/utils.rst
new file mode 100644
index 0000000..c5833ca
--- /dev/null
+++ b/plone/namedfile/utils.rst
@@ -0,0 +1,20 @@
+Utility functions
+=================
+
+safe_basename
+-------------
+
+::
+
+    >>> from plone.namedfile.utils import safe_basename
+
+Used in the widget itself to strip off any path, regardless of platform::
+
+    >>> safe_basename('/farmyard/cows/daisy')
+    'daisy'
+
+    >>> safe_basename('F:\FARMYARD\COWS\DAISY.TXT')
+    'DAISY.TXT'
+
+    >>> safe_basename('Macintosh Farmyard:Cows:Daisy Text File')
+    'Daisy Text File'
diff --git a/plone/namedfile/utils.txt b/plone/namedfile/utils.txt
deleted file mode 100644
index a880ba3..0000000
--- a/plone/namedfile/utils.txt
+++ /dev/null
@@ -1,18 +0,0 @@
-Utility functions
-=================
-
-safe_basename
--------------
-
-    >>> from plone.namedfile.utils import safe_basename
-
-Used in the widget itself to strip off any path, regardless of platform.
-
-    >>> safe_basename('/farmyard/cows/daisy')
-    'daisy'
-
-    >>> safe_basename('F:\FARMYARD\COWS\DAISY.TXT')
-    'DAISY.TXT'
-
-    >>> safe_basename('Macintosh Farmyard:Cows:Daisy Text File')
-    'Daisy Text File'
diff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml
index de812ab..b3083fa 100644
--- a/plone/namedfile/z3c-blobfile.zcml
+++ b/plone/namedfile/z3c-blobfile.zcml
@@ -1,6 +1,4 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    i18n_domain='zope'>
+<configure xmlns="http://namespaces.zope.org/zope">
 
   <utility
       name="__builtin__.str"
diff --git a/setup.py b/setup.py
index 1c2e4c5..0c450af 100644
--- a/setup.py
+++ b/setup.py
@@ -1,54 +1,62 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 import os
 
+
 version = '3.0.8.dev0'
+description = "File types and fields for images, files and blob files with filenames"  # noqa
+long_description = ('\n\n'.join([
+    open('README.rst').read(),
+    open('CHANGES.rst').read(),
+    open(os.path.join("plone", "namedfile", "usage.rst")).read(),
+]))
 
-long_description = open("README.rst").read()
-long_description += "\n"
-long_description += open("CHANGES.rst").read()
-long_description += "\n"
-long_description += open(os.path.join("plone", "namedfile", "usage.txt")).read()
 
-setup(name='plone.namedfile',
-      version=version,
-      description="File types and fields for images, files and blob files with filenames",
-      long_description=long_description,
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          "License :: OSI Approved :: BSD License",
-          ],
-      keywords='plone named file image blob',
-      author='Laurence Rowe, Martin Aspeli',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.namedfile',
-      license='BSD',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'zope.app.file',
-          'zope.browserpage',
-          'zope.component',
-          'zope.copy',
-          'zope.security',
-          'zope.traversing',
-          'plone.rfc822>=1.0b2',
-      ],
-      extras_require={
-          'blobs': [],  # BBB
-          'editor': ['plone.schemaeditor'],
-          'supermodel': ['plone.supermodel'],
-          'marshaler': [],  # for BBB, we now depend on this
-          'scales': ['plone.scale[storage] >=1.1'],
-          'test': [
-              'plone.namedfile[supermodel, scales]',
-              'lxml', 'Pillow', 'Zope2',
-          ],
-      },
-      )
+setup(
+    name='plone.namedfile',
+    version=version,
+    description=description,
+    long_description=long_description,
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Software Development :: Libraries :: Python Modules",
+        "License :: OSI Approved :: BSD License",
+    ],
+    keywords='plone named file image blob',
+    author='Laurence Rowe, Martin Aspeli',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.namedfile',
+    license='BSD',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'plone.rfc822>=1.0b2',
+        'zope.app.file',
+        'zope.browserpage',
+        'zope.component',
+        'zope.copy',
+        'zope.security',
+        'zope.traversing',
+    ],
+    extras_require={
+        'editor': ['plone.schemaeditor'],
+        'scales': ['plone.scale[storage] >=1.1'],
+        'supermodel': ['plone.supermodel'],
+        'test': [
+            'lxml',
+            'Pillow',
+            'plone.namedfile[supermodel, scales]',
+            'Zope2',
+        ],
+        # BBB
+        'blobs': [],
+        'marshaler': [],
+    },
+)


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2016-02-23T12:50:36+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/33df023d09c3d18df14f7f93feeca2ba5bf19c88

fix jenkins QA failures. also remove context.modified() in favor of context._p_mtime for Zope 4 forward compatibility

Files changed:
A docs/ZPL.txt
M plone/namedfile/copy.py
M plone/namedfile/file.py
M plone/namedfile/marshaler.py
M plone/namedfile/scaling.py
M plone/namedfile/storages.py
M plone/namedfile/tests/base.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/utils.py

diff --git a/docs/ZPL.txt b/docs/ZPL.txt
new file mode 100644
index 0000000..a6e9fc9
--- /dev/null
+++ b/docs/ZPL.txt
@@ -0,0 +1,9 @@
+Copyright (c) 2009 Zope Foundation and Contributors.
+All Rights Reserved.
+
+This software is subject to the provisions of the Zope Public License,
+Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+FOR A PARTICULAR PURPOSE.
diff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py
index 87c2d53..525cc5a 100644
--- a/plone/namedfile/copy.py
+++ b/plone/namedfile/copy.py
@@ -1,17 +1,4 @@
 # -*- coding: utf-8 -*-
-##############################################################################
-#
-# Copyright (c) 2009 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
 """Copy hook for proper copying blob data
 """
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py
index 82b62c6..bef3519 100644
--- a/plone/namedfile/file.py
+++ b/plone/namedfile/file.py
@@ -299,7 +299,7 @@ def getImageInfo(data):
     if (size >= 10) and data[:6] in ('GIF87a', 'GIF89a'):
         # Check to see if content_type is correct
         content_type = 'image/gif'
-        w, h = struct.unpack("<HH", data[6:10])
+        w, h = struct.unpack('<HH', data[6:10])
         width = int(w)
         height = int(h)
 
@@ -311,7 +311,7 @@ def getImageInfo(data):
         (data[12:16] == 'IHDR')
     ):
         content_type = 'image/png'
-        w, h = struct.unpack(">LL", data[16:24])
+        w, h = struct.unpack('>LL', data[16:24])
         width = int(w)
         height = int(h)
 
@@ -319,7 +319,7 @@ def getImageInfo(data):
     elif (size >= 16) and data.startswith('\211PNG\r\n\032\n'):
         # Check to see if we have the right content type
         content_type = 'image/png'
-        w, h = struct.unpack(">LL", data[8:16])
+        w, h = struct.unpack('>LL', data[8:16])
         width = int(w)
         height = int(h)
 
@@ -339,10 +339,10 @@ def getImageInfo(data):
                     b = jpeg.read(1)
                 if (ord(b) >= 0xC0 and ord(b) <= 0xC3):
                     jpeg.read(3)
-                    h, w = struct.unpack(">HH", jpeg.read(4))
+                    h, w = struct.unpack('>HH', jpeg.read(4))
                     break
                 else:
-                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0]) - 2)
+                    jpeg.read(int(struct.unpack('>H', jpeg.read(2))[0]) - 2)
                 b = jpeg.read(1)
             width = int(w)
             height = int(h)
@@ -355,10 +355,10 @@ def getImageInfo(data):
 
     # handle BMPs
     elif (size >= 30) and data.startswith('BM'):
-        kind = struct.unpack("<H", data[14:16])[0]
+        kind = struct.unpack('<H', data[14:16])[0]
         if kind == 40:  # Windows 3.x bitmap
             content_type = 'image/x-ms-bmp'
-            width, height = struct.unpack("<LL", data[18:26])
+            width, height = struct.unpack('<LL', data[18:26])
 
     return content_type, width, height
 
@@ -395,7 +395,7 @@ def _setData(self, data):
         if 'size' in self.__dict__:
             del self.__dict__['size']
         # Search for a storable that is able to store the data
-        dottedName = ".".join((data.__class__.__module__,
+        dottedName = '.'.join((data.__class__.__module__,
                                data.__class__.__name__))
         storable = getUtility(IStorage, name=dottedName)
         storable.store(data, self._blob)
diff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py
index 31316d3..4602664 100644
--- a/plone/namedfile/marshaler.py
+++ b/plone/namedfile/marshaler.py
@@ -32,7 +32,7 @@ def encode(self, value, charset='utf-8', primary=False):
             # never in a header
             if not primary:
                 raise ValueError(
-                    "File fields can only be marshaled as primary fields")
+                    'File fields can only be marshaled as primary fields')
             if value is None:
                 return None
             return value.data
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 5e6162f..c60bb42 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -59,8 +59,8 @@ def __init__(self, context, request, **info):
             name = info['uid']
         else:
             name = info['fieldname']
-        self.__name__ = '%s.%s' % (name, extension)
-        self.url = '%s/@@images/%s' % (url, self.__name__)
+        self.__name__ = u'{0}.{1}'.format(name, extension)
+        self.url = u'{0}/@@images/{1}'.format(url, self.__name__)
 
     def absolute_url(self):
         return self.url
@@ -97,7 +97,7 @@ def tag(self, height=_marker, width=_marker, alt=_marker,
                 v = str(v)
             elif isinstance(v, str):
                 v = unicode(v, 'utf8')
-            parts.append("%s=%s" % (k, quoteattr(v)))
+            parts.append(u'{0}={1}'.format(k, quoteattr(v)))
         parts.append('/>')
 
         return u' '.join(parts)
@@ -144,7 +144,7 @@ def __init__(self, scale):
 
     def traverse(self, name, furtherPath):
         if furtherPath:
-            raise TraversalError("Do not know how to handle further path")
+            raise TraversalError('Do not know how to handle further path')
         else:
             if self.scale:
                 return self.scale.tag()
@@ -251,17 +251,19 @@ def create(self,
                height=None,
                width=None,
                **parameters):
-        """ factory for image scales, see `IImageScaleStorage.scale` """
+        """Factory for image scales, see `IImageScaleStorage.scale`.
+        """
         orig_value = getattr(self.context, fieldname)
         if orig_value is None:
             return
 
         if height is None and width is None:
-            _, format = orig_value.contentType.split('/', 1)
-            return None, format, (orig_value._width, orig_value._height)
-        if hasattr(aq_base(orig_value), 'open'):
+            _, format_ = orig_value.contentType.split('/', 1)
+            return None, format_, (orig_value._width, orig_value._height)
+        orig_data = None
+        try:
             orig_data = orig_value.open()
-        else:
+        except AttributeError:
             orig_data = getattr(aq_base(orig_value), 'data', orig_value)
         if not orig_data:
             return
@@ -293,24 +295,19 @@ def create(self,
                       orig_value, self.context.absolute_url())
             return
         if result is not None:
-            data, format, dimensions = result
-            mimetype = 'image/%s' % format.lower()
+            data, format_, dimensions = result
+            mimetype = u'image/{0}'.format(format_.lower())
             value = orig_value.__class__(
                 data, contentType=mimetype, filename=orig_value.filename)
             value.fieldname = fieldname
-            return value, format, dimensions
+            return value, format_, dimensions
 
     def modified(self):
-        """ provide a callable to return the modification time of content
-            items, so stored image scales can be invalidated """
+        """Provide a callable to return the modification time of content
+        items, so stored image scales can be invalidated.
+        """
         context = aq_base(self.context)
-        try:
-            if hasattr(context, 'modified') and callable(context.modified):
-                date = context.modified()
-            else:
-                date = DateTime(context._p_mtime)
-        except AttributeError:
-            date = self.context.modified().millis()
+        date = DateTime(context._p_mtime)
         return date.millis()
 
     def scale(self,
diff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py
index e7e12e5..f3be5ba 100644
--- a/plone/namedfile/storages.py
+++ b/plone/namedfile/storages.py
@@ -1,21 +1,6 @@
 # -*- coding: utf-8 -*-
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
-
-##############################################################################
-#
-# Copyright (c) 2008 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-
 from plone.namedfile.file import FileChunk
 from plone.namedfile.interfaces import IStorage
 from plone.namedfile.interfaces import NotStorable
@@ -31,7 +16,7 @@ class StringStorable(object):
 
     def store(self, data, blob):
         if not isinstance(data, str):
-            raise NotStorable("Could not store data (not of 'str' type).")
+            raise NotStorable('Could not store data (not of "str" type).')
 
         fp = blob.open('w')
         fp.write(data)
@@ -43,8 +28,7 @@ class UnicodeStorable(StringStorable):
 
     def store(self, data, blob):
         if not isinstance(data, unicode):
-            raise NotStorable("Could not store data (not of 'unicode' "
-                              "type).")
+            raise NotStorable('Could not store data (not of "unicode" type).')
 
         data = data.encode('UTF-8')
         StringStorable.store(self, data, blob)
@@ -55,8 +39,7 @@ class FileChunkStorable(object):
 
     def store(self, data, blob):
         if not isinstance(data, FileChunk):
-            raise NotStorable("Could not store data (not a of 'FileChunk' "
-                              "type).")
+            raise NotStorable('Could not store data (not a of "FileChunk" type).')  # noqa
 
         fp = blob.open('w')
         chunk = data
@@ -71,9 +54,9 @@ class FileDescriptorStorable(object):
 
     def store(self, data, blob):
         if not isinstance(data, file):
-            raise NotStorable("Could not store data (not of 'file').")
+            raise NotStorable('Could not store data (not of "file").')
 
-        filename = getattr(data, "name", None)
+        filename = getattr(data, 'name', None)
         if filename is not None:
             blob.consumeFile(filename)
             return
@@ -84,7 +67,7 @@ class FileUploadStorable(object):
 
     def store(self, data, blob):
         if not isinstance(data, FileUpload):
-            raise NotStorable("Could not store data (not of 'FileUpload').")
+            raise NotStorable('Could not store data (not of "FileUpload").')
 
         data.seek(0)
 
diff --git a/plone/namedfile/tests/base.py b/plone/namedfile/tests/base.py
index 69a4b89..53e6a1c 100644
--- a/plone/namedfile/tests/base.py
+++ b/plone/namedfile/tests/base.py
@@ -34,9 +34,9 @@ class NamedFileLayer:
 
 class ImageTestMixin(object):
 
-    def assertImage(self, data, format, size):
+    def assertImage(self, data, format_, size):
         image = PIL.Image.open(StringIO(data))
-        self.assertEqual(image.format, format)
+        self.assertEqual(image.format, format_)
         self.assertEqual(image.size, size)
 
 
@@ -51,12 +51,12 @@ class NamedFileFunctionalTestCase(
     layer = NamedFileLayer
 
     def getCredentials(self):
-        return '%s:%s' % (ztc.user_name, ztc.user_password)
+        return u'{0}:{0}'.format(ztc.user_name, ztc.user_password)
 
     def getBrowser(self, loggedIn=True):
         """ instantiate and return a testbrowser for convenience """
         browser = Browser()
         if loggedIn:
-            auth = 'Basic %s' % self.getCredentials()
+            auth = u'Basic {0}'.format(self.getCredentials())
             browser.addHeader('Authorization', auth)
         return browser
diff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py
index e8f532f..346766d 100644
--- a/plone/namedfile/tests/test_blobfile.py
+++ b/plone/namedfile/tests/test_blobfile.py
@@ -71,11 +71,11 @@ def testMutators(self):
         self.assertEqual(image.getImageSize(), (16, 16))
 
     def testInterface(self):
-        self.failUnless(INamedBlobImage.implementedBy(NamedBlobImage))
-        self.failUnless(verifyClass(INamedBlobImage, NamedBlobImage))
-        self.failUnless(INamedBlobFile.implementedBy(NamedBlobImage))
-        self.failUnless(INamedBlobImage.implementedBy(NamedBlobImage))
-        self.failUnless(verifyClass(INamedBlobFile, NamedBlobImage))
+        self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))
+        self.assertTrue(verifyClass(INamedBlobImage, NamedBlobImage))
+        self.assertTrue(INamedBlobFile.implementedBy(NamedBlobImage))
+        self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))
+        self.assertTrue(verifyClass(INamedBlobFile, NamedBlobImage))
 
     def testDataMutatorWithLargeHeader(self):
         from plone.namedfile.file import IMAGE_INFO_BYTES
diff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py
index e639110..81fd07a 100644
--- a/plone/namedfile/tests/test_doctests.py
+++ b/plone/namedfile/tests/test_doctests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.namedfile.tests.base import setUp
 from zope.component.testing import tearDown
 
diff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py
index 0d2eccc..cd03c11 100644
--- a/plone/namedfile/tests/test_image.py
+++ b/plone/namedfile/tests/test_image.py
@@ -58,8 +58,8 @@ def testMutators(self):
         self.assertEqual(image.getImageSize(), (16, 16))
 
     def testInterface(self):
-        self.failUnless(INamedImage.implementedBy(NamedImage))
-        self.failUnless(verifyClass(INamedImage, NamedImage))
+        self.assertTrue(INamedImage.implementedBy(NamedImage))
+        self.assertTrue(verifyClass(INamedImage, NamedImage))
 
     def test_get_contenttype(self):
         self.assertEqual(
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index ae4bbf1..9eeaf31 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -61,7 +61,7 @@ def afterSetUp(self):
 
     def testCreateScale(self):
         foo = self.scaling.scale('image', width=100, height=80)
-        self.failUnless(foo.uid)
+        self.assertTrue(foo.uid)
         self.assertEqual(foo.mimetype, 'image/jpeg')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
@@ -76,14 +76,14 @@ def testCreateScaleWithoutData(self):
     def testGetScaleByName(self):
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
-        self.failUnless(foo.uid)
+        self.assertTrue(foo.uid)
         self.assertEqual(foo.mimetype, 'image/jpeg')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
         self.assertImage(foo.data.data, 'JPEG', (60, 60))
         expected_url = re.compile(
             r'http://nohost/item/@@images/[-a-z0-9]{36}\.jpeg')
-        self.failUnless(expected_url.match(foo.absolute_url()))
+        self.assertTrue(expected_url.match(foo.absolute_url()))
         self.assertEqual(foo.url, foo.absolute_url())
 
         tag = foo.tag()
@@ -91,7 +91,7 @@ def testGetScaleByName(self):
         expected = r'<img src="%s/@@images/([-0-9a-f]{36}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />' % base
         groups = re.match(expected, tag).groups()
-        self.failUnless(groups, tag)
+        self.assertTrue(groups, tag)
 
     def testGetUnknownScale(self):
         foo = self.scaling.scale('image', scale='foo?')
@@ -215,7 +215,7 @@ def traverse(self, path=''):
         expected = r'<img src="%s/@@images/([-0-9a-f]{36}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />' % base
         groups = re.match(expected, tag).groups()
-        self.failUnless(groups, tag)
+        self.assertTrue(groups, tag)
         uid, ext, height, width = groups
         return uid, ext, int(width), int(height)
 
diff --git a/plone/namedfile/utils.py b/plone/namedfile/utils.py
index 5ac5bdd..08317b2 100644
--- a/plone/namedfile/utils.py
+++ b/plone/namedfile/utils.py
@@ -51,17 +51,17 @@ def set_headers(file, response, filename=None):
 
     contenttype = get_contenttype(file)
 
-    response.setHeader("Content-Type", contenttype)
-    response.setHeader("Content-Length", file.getSize())
+    response.setHeader('Content-Type', contenttype)
+    response.setHeader('Content-Length', file.getSize())
 
     if filename is not None:
         if not isinstance(filename, unicode):
-            filename = unicode(filename, 'utf-8', errors="ignore")
-        filename = urllib.quote(filename.encode("utf8"))
+            filename = unicode(filename, 'utf-8', errors='ignore')
+        filename = urllib.quote(filename.encode('utf8'))
         response.setHeader(
-            "Content-Disposition",
-            "attachment; filename*=UTF-8''%s" %
-            filename)
+            'Content-Disposition',
+            'attachment; filename*=UTF-8\'\'{0}'.format(filename)
+        )
 
 
 def stream_data(file):


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2016-02-23T15:10:16+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/2bc6cacf242bf26f7376bd7c999960c7ae632846

Merge pull request #19 from plone/thet-pep8

pep 8

Files changed:
A docs/ZPL.txt
A plone/namedfile/handler.rst
A plone/namedfile/marshaler.rst
A plone/namedfile/usage.rst
A plone/namedfile/utils.rst
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/namedfile/__init__.py
M plone/namedfile/browser.py
M plone/namedfile/configure.zcml
M plone/namedfile/copy.py
M plone/namedfile/editor.py
M plone/namedfile/editor.zcml
M plone/namedfile/field.py
M plone/namedfile/file.py
M plone/namedfile/handler.py
M plone/namedfile/handler.zcml
M plone/namedfile/interfaces.py
M plone/namedfile/marshaler.py
M plone/namedfile/marshaler.zcml
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml
M plone/namedfile/storages.py
M plone/namedfile/tests/base.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_doctests.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/tests/testing.zcml
M plone/namedfile/utils.py
M plone/namedfile/z3c-blobfile.zcml
M setup.py
D plone/namedfile/handler.txt
D plone/namedfile/marshaler.txt
D plone/namedfile/usage.txt
D plone/namedfile/utils.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index efef160..f28ed16 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,9 @@ New:
 
 Fixes:
 
+- PEP 8, UTF-8 headers, implements/adapts to decorators, doctest formating.
+  [thet, jensens]
+
 - Workarround for method getImageSize.
   Prevent returning (-1, -1) as the size of the image.
   [andreesg]
diff --git a/README.rst b/README.rst
index 1bee8f9..f7a60bd 100644
--- a/README.rst
+++ b/README.rst
@@ -13,7 +13,7 @@ and BLOBs to be configured in zope.conf.
 plone.supermodel handlers are registered if plone.supermodel is installed.
 The [supermodel] extra will ensure this.
 
-See the usage.txt doctest for more details.
+See the ``usage.rst`` doctest for more details.
 
 Note: This packages is licensed under a BSD license. Contributors, please do
 not add dependencies on GPL code.
diff --git a/docs/ZPL.txt b/docs/ZPL.txt
new file mode 100644
index 0000000..a6e9fc9
--- /dev/null
+++ b/docs/ZPL.txt
@@ -0,0 +1,9 @@
+Copyright (c) 2009 Zope Foundation and Contributors.
+All Rights Reserved.
+
+This software is subject to the provisions of the Zope Public License,
+Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+FOR A PARTICULAR PURPOSE.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/namedfile/__init__.py b/plone/namedfile/__init__.py
index 6fcd4c8..2e59844 100644
--- a/plone/namedfile/__init__.py
+++ b/plone/namedfile/__init__.py
@@ -1,2 +1,5 @@
-from plone.namedfile.file import NamedFile, NamedImage
-from plone.namedfile.file import NamedBlobFile, NamedBlobImage
+# -*- coding: utf-8 -*-
+from plone.namedfile.file import NamedBlobFile    # noqa
+from plone.namedfile.file import NamedBlobImage   # noqa
+from plone.namedfile.file import NamedFile        # noqa
+from plone.namedfile.file import NamedImage       # noqa
diff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py
index 4fadcc1..63da817 100644
--- a/plone/namedfile/browser.py
+++ b/plone/namedfile/browser.py
@@ -1,12 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl.ZopeGuards import guarded_getattr
-from Products.Five.browser import BrowserView
-from plone.namedfile.utils import set_headers, stream_data
+from plone.namedfile.utils import set_headers
+from plone.namedfile.utils import stream_data
 from plone.rfc822.interfaces import IPrimaryFieldInfo
-from zope.interface import implements
-from zope.publisher.interfaces import IPublishTraverse, NotFound
+from Products.Five.browser import BrowserView
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+from zope.publisher.interfaces import NotFound
 
 
+@implementer(IPublishTraverse)
 class Download(BrowserView):
     """Download a file, via ../context/@@download/fieldname/filename
 
@@ -21,8 +24,6 @@ class Download(BrowserView):
     adaption to `plone.rfc822.interfaces.IPrimaryFieldInfo`.
     """
 
-    implements(IPublishTraverse)
-
     def __init__(self, context, request):
         super(Download, self).__init__(context, request)
         self.fieldname = None
diff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml
index c31ea88..ae665c2 100644
--- a/plone/namedfile/configure.zcml
+++ b/plone/namedfile/configure.zcml
@@ -1,27 +1,26 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
     xmlns:zcml="http://namespaces.zope.org/zcml"
-    xmlns:browser="http://namespaces.zope.org/browser"
-    i18n_domain="plone.namedfile">
+    xmlns:browser="http://namespaces.zope.org/browser">
 
-    <browser:page
-        name="download"
-        for="*"
-        class=".browser.Download"
-        permission="zope2.View"
-        />
+  <browser:page
+      name="download"
+      for="*"
+      class=".browser.Download"
+      permission="zope2.View"
+      />
 
-    <browser:page
-        name="display-file"
-        for="*"
-        class=".browser.DisplayFile"
-        permission="zope2.View"
-        />
+  <browser:page
+      name="display-file"
+      for="*"
+      class=".browser.DisplayFile"
+      permission="zope2.View"
+      />
 
-    <include file="z3c-blobfile.zcml" />
-    <include zcml:condition="installed plone.supermodel" file="handler.zcml" />
-    <include zcml:condition="installed plone.rfc822" file="marshaler.zcml" />
-    <include zcml:condition="installed plone.schemaeditor" file="editor.zcml" />
-    <include zcml:condition="installed plone.scale" file="scaling.zcml" />
+  <include file="z3c-blobfile.zcml" />
+  <include zcml:condition="installed plone.supermodel" file="handler.zcml" />
+  <include zcml:condition="installed plone.rfc822" file="marshaler.zcml" />
+  <include zcml:condition="installed plone.schemaeditor" file="editor.zcml" />
+  <include zcml:condition="installed plone.scale" file="scaling.zcml" />
 
 </configure>
diff --git a/plone/namedfile/copy.py b/plone/namedfile/copy.py
index eec8d29..525cc5a 100644
--- a/plone/namedfile/copy.py
+++ b/plone/namedfile/copy.py
@@ -1,36 +1,23 @@
+# -*- coding: utf-8 -*-
+"""Copy hook for proper copying blob data
+"""
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
+from plone.namedfile.interfaces import INamedBlobFile
+from ZODB.blob import Blob
+from zope.component import adapter
+from zope.copy.interfaces import ICopyHook
+from zope.copy.interfaces import ResumeCopy
+from zope.interface import implementer
 
-##############################################################################
-#
-# Copyright (c) 2009 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Copy hook for proper copying blob data
-"""
 import shutil
 
-from ZODB.blob import Blob
-from zope.component import adapts
-from zope.interface import implements
-from zope.copy.interfaces import ICopyHook, ResumeCopy
-from plone.namedfile.interfaces import INamedBlobFile
-
 
+@implementer(ICopyHook)
+@adapter(INamedBlobFile)
 class BlobFileCopyHook(object):
     """A copy hook that fixes the blob after copying"""
 
-    implements(ICopyHook)
-    adapts(INamedBlobFile)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/namedfile/editor.py b/plone/namedfile/editor.py
index 9bbfeee..e589465 100644
--- a/plone/namedfile/editor.py
+++ b/plone/namedfile/editor.py
@@ -1,7 +1,9 @@
-from zope.i18nmessageid.message import MessageFactory
-from plone.namedfile import interfaces
+# -*- coding: utf-8 -*-
 from plone.namedfile import field
+from plone.namedfile import interfaces
 from plone.schemaeditor.fields import FieldFactory
+from zope.i18nmessageid.message import MessageFactory
+
 
 _ = MessageFactory('plone')
 
diff --git a/plone/namedfile/editor.zcml b/plone/namedfile/editor.zcml
index aa7cf23..a7a5879 100644
--- a/plone/namedfile/editor.zcml
+++ b/plone/namedfile/editor.zcml
@@ -1,21 +1,19 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml">
+<configure xmlns="http://namespaces.zope.org/zope">
 
   <class class=".field.NamedBlobFile">
     <implements interface=".editor.INamedBlobFileField" />
   </class>
   <utility
-     name="plone.namedfile.field.NamedBlobFile"
-     component=".editor.NamedBlobFileFactory"
-     />
+      name="plone.namedfile.field.NamedBlobFile"
+      component=".editor.NamedBlobFileFactory"
+      />
 
   <class class=".field.NamedBlobImage">
     <implements interface=".editor.INamedBlobImageField" />
   </class>
   <utility
-     name="plone.namedfile.field.NamedBlobImage"
-     component=".editor.NamedBlobImageFactory"
-     />
+      name="plone.namedfile.field.NamedBlobImage"
+      component=".editor.NamedBlobImageFactory"
+      />
 
 </configure>
diff --git a/plone/namedfile/field.py b/plone/namedfile/field.py
index da677c8..059b091 100644
--- a/plone/namedfile/field.py
+++ b/plone/namedfile/field.py
@@ -1,23 +1,26 @@
-from zope.interface import implements
-from zope.schema import Object, ValidationError
-from zope.i18nmessageid import MessageFactory
-
-from plone.namedfile.interfaces import INamedFileField, INamedImageField
-
-from plone.namedfile.interfaces import INamedFile, INamedImage
-from plone.namedfile.file import NamedFile as FileValueType
-from plone.namedfile.file import NamedImage as ImageValueType
-
-from plone.namedfile.interfaces import INamedBlobFileField, INamedBlobImageField
-from plone.namedfile.interfaces import INamedBlobFile, INamedBlobImage
-
+# -*- coding: utf-8 -*-
 from plone.namedfile.file import NamedBlobFile as BlobFileValueType
 from plone.namedfile.file import NamedBlobImage as BlobImageValueType
+from plone.namedfile.file import NamedFile as FileValueType
+from plone.namedfile.file import NamedImage as ImageValueType
+from plone.namedfile.interfaces import INamedBlobFile
+from plone.namedfile.interfaces import INamedBlobFileField
+from plone.namedfile.interfaces import INamedBlobImage
+from plone.namedfile.interfaces import INamedBlobImageField
+from plone.namedfile.interfaces import INamedFile
+from plone.namedfile.interfaces import INamedFileField
+from plone.namedfile.interfaces import INamedImage
+from plone.namedfile.interfaces import INamedImageField
 from plone.namedfile.utils import get_contenttype
+from zope.i18nmessageid import MessageFactory
+from zope.interface import implementer
+from zope.schema import Object
+from zope.schema import ValidationError
 
 
 _ = MessageFactory('plone')
 
+
 class InvalidImageFile(ValidationError):
     """Exception for invalid image file"""
     __doc__ = _(u"Invalid image file")
@@ -30,10 +33,10 @@ def validate_image_field(field, value):
             raise InvalidImageFile(mimetype, field.__name__)
 
 
+@implementer(INamedFileField)
 class NamedFile(Object):
     """A NamedFile field
     """
-    implements(INamedFileField)
 
     _type = FileValueType
     schema = INamedFile
@@ -44,10 +47,10 @@ def __init__(self, **kw):
         super(NamedFile, self).__init__(schema=self.schema, **kw)
 
 
+@implementer(INamedImageField)
 class NamedImage(Object):
     """A NamedImage field
     """
-    implements(INamedImageField)
 
     _type = ImageValueType
     schema = INamedImage
@@ -62,10 +65,10 @@ def _validate(self, value):
         validate_image_field(self, value)
 
 
+@implementer(INamedBlobFileField)
 class NamedBlobFile(Object):
     """A NamedBlobFile field
     """
-    implements(INamedBlobFileField)
 
     _type = BlobFileValueType
     schema = INamedBlobFile
@@ -76,10 +79,10 @@ def __init__(self, **kw):
         super(NamedBlobFile, self).__init__(schema=self.schema, **kw)
 
 
+@implementer(INamedBlobImageField)
 class NamedBlobImage(Object):
     """A NamedBlobImage field
     """
-    implements(INamedBlobImageField)
 
     _type = BlobImageValueType
     schema = INamedBlobImage
@@ -92,4 +95,3 @@ def __init__(self, **kw):
     def _validate(self, value):
         super(NamedBlobImage, self)._validate(value)
         validate_image_field(self, value)
-
diff --git a/plone/namedfile/file.py b/plone/namedfile/file.py
index 61eeac3..bef3519 100644
--- a/plone/namedfile/file.py
+++ b/plone/namedfile/file.py
@@ -14,9 +14,11 @@
 from zope.component import getUtility
 from zope.interface import implementer
 from zope.schema.fieldproperty import FieldProperty
+
 import struct
 import transaction
 
+
 MAXCHUNKSIZE = 1 << 16
 IMAGE_INFO_BYTES = 1024
 MAX_INFO_BYTES = 1 << 16
@@ -195,7 +197,7 @@ def _setData(self, data):
         seek(0, 2)
         size = end = data.tell()
 
-        if size <= 2*MAXCHUNKSIZE:
+        if size <= 2 * MAXCHUNKSIZE:
             seek(0)
             if size < MAXCHUNKSIZE:
                 self._data, self._size = read(size), size
@@ -297,7 +299,7 @@ def getImageInfo(data):
     if (size >= 10) and data[:6] in ('GIF87a', 'GIF89a'):
         # Check to see if content_type is correct
         content_type = 'image/gif'
-        w, h = struct.unpack("<HH", data[6:10])
+        w, h = struct.unpack('<HH', data[6:10])
         width = int(w)
         height = int(h)
 
@@ -309,7 +311,7 @@ def getImageInfo(data):
         (data[12:16] == 'IHDR')
     ):
         content_type = 'image/png'
-        w, h = struct.unpack(">LL", data[16:24])
+        w, h = struct.unpack('>LL', data[16:24])
         width = int(w)
         height = int(h)
 
@@ -317,7 +319,7 @@ def getImageInfo(data):
     elif (size >= 16) and data.startswith('\211PNG\r\n\032\n'):
         # Check to see if we have the right content type
         content_type = 'image/png'
-        w, h = struct.unpack(">LL", data[8:16])
+        w, h = struct.unpack('>LL', data[8:16])
         width = int(w)
         height = int(h)
 
@@ -337,10 +339,10 @@ def getImageInfo(data):
                     b = jpeg.read(1)
                 if (ord(b) >= 0xC0 and ord(b) <= 0xC3):
                     jpeg.read(3)
-                    h, w = struct.unpack(">HH", jpeg.read(4))
+                    h, w = struct.unpack('>HH', jpeg.read(4))
                     break
                 else:
-                    jpeg.read(int(struct.unpack(">H", jpeg.read(2))[0])-2)
+                    jpeg.read(int(struct.unpack('>H', jpeg.read(2))[0]) - 2)
                 b = jpeg.read(1)
             width = int(w)
             height = int(h)
@@ -353,10 +355,10 @@ def getImageInfo(data):
 
     # handle BMPs
     elif (size >= 30) and data.startswith('BM'):
-        kind = struct.unpack("<H", data[14:16])[0]
+        kind = struct.unpack('<H', data[14:16])[0]
         if kind == 40:  # Windows 3.x bitmap
             content_type = 'image/x-ms-bmp'
-            width, height = struct.unpack("<LL", data[18:26])
+            width, height = struct.unpack('<LL', data[18:26])
 
     return content_type, width, height
 
@@ -393,7 +395,7 @@ def _setData(self, data):
         if 'size' in self.__dict__:
             del self.__dict__['size']
         # Search for a storable that is able to store the data
-        dottedName = ".".join((data.__class__.__module__,
+        dottedName = '.'.join((data.__class__.__module__,
                                data.__class__.__name__))
         storable = getUtility(IStorage, name=dottedName)
         storable.store(data, self._blob)
diff --git a/plone/namedfile/handler.py b/plone/namedfile/handler.py
index 51d3bb9..0c50755 100644
--- a/plone/namedfile/handler.py
+++ b/plone/namedfile/handler.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 try:
     from plone.supermodel.exportimport import ObjectHandler
     HAVE_SUPERMODEL = True
@@ -5,13 +6,15 @@
     HAVE_SUPERMODEL = False
 
 if HAVE_SUPERMODEL:
-
     from plone.namedfile import field
 
     class FileFieldHandler(ObjectHandler):
-
         filteredAttributes = ObjectHandler.filteredAttributes.copy()
-        filteredAttributes.update({'default': 'rw', 'missing_value': 'rw', 'schema': 'rw'})
+        filteredAttributes.update({
+            'default': 'rw',
+            'missing_value': 'rw',
+            'schema': 'rw'
+        })
 
     NamedFileHandler = FileFieldHandler(field.NamedFile)
     NamedImageHandler = FileFieldHandler(field.NamedImage)
diff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst
new file mode 100644
index 0000000..5087b52
--- /dev/null
+++ b/plone/namedfile/handler.rst
@@ -0,0 +1,208 @@
+plone.supermodel handler
+========================
+
+If plone.supermodel is installed, this package will register a handler
+for the RichText field.
+
+First, we wire up the handlers::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile">
+    ...
+    ...     <include package="zope.component" file="meta.zcml" />
+    ...     <include package="zope.security" file="meta.zcml" />
+    ...
+    ...     <include package="plone.namedfile" file="handler.zcml" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+Then, let's test the fields. Note that 'default' and 'missing_value' are
+unsupported::
+
+    >>> from zope.component import getUtility
+    >>> from plone.namedfile.field import NamedFile, NamedImage, NamedBlobFile, NamedBlobImage
+
+    >>> from plone.supermodel.interfaces import IFieldExportImportHandler
+    >>> from plone.supermodel.interfaces import IFieldNameExtractor
+    >>> from plone.supermodel.utils import prettyXML
+
+    >>> from lxml import etree
+
+
+Named file
+----------
+
+::
+
+    >>> field = NamedFile(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedFile">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedFile">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedFile'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named image
+-----------
+
+::
+
+    >>> field = NamedImage(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedImage">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedImage">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedImage'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named blob file
+---------------
+
+::
+
+    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedBlobFile'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
+
+
+Named blob image
+----------------
+
+::
+
+    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",
+    ...     description=u"Test desc", required=False, readonly=True)
+    >>> fieldType = IFieldNameExtractor(field)()
+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
+    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
+    >>> print prettyXML(element)
+    <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
+      <description>Test desc</description>
+      <readonly>True</readonly>
+      <required>False</required>
+      <title>Test</title>
+    </field>
+
+    >>> element = etree.XML("""\
+    ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
+    ...   <description>Test desc</description>
+    ...   <missing_value />
+    ...   <readonly>True</readonly>
+    ...   <required>False</required>
+    ...   <title>Test</title>
+    ... </field>
+    ... """)
+
+    >>> reciprocal = handler.read(element)
+    >>> reciprocal.__class__
+    <class 'plone.namedfile.field.NamedBlobImage'>
+    >>> reciprocal.__name__
+    'dummy'
+    >>> reciprocal.title
+    u'Test'
+    >>> reciprocal.description
+    u'Test desc'
+    >>> reciprocal.required
+    False
+    >>> reciprocal.readonly
+    True
diff --git a/plone/namedfile/handler.txt b/plone/namedfile/handler.txt
deleted file mode 100644
index 7beae38..0000000
--- a/plone/namedfile/handler.txt
+++ /dev/null
@@ -1,196 +0,0 @@
-plone.supermodel handler
-========================
-
-If plone.supermodel is installed, this package will register a handler
-for the RichText field.
-
-First, we wire up the handlers
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...     <include package="zope.security" file="meta.zcml" />
-    ...
-    ...     <include package="plone.namedfile" file="handler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Then, let's test the fields. Note that 'default' and 'missing_value' are
-unsupported.
-
-    >>> from zope.component import getUtility
-    >>> from plone.namedfile.field import NamedFile, NamedImage, NamedBlobFile, NamedBlobImage
-
-    >>> from plone.supermodel.interfaces import IFieldExportImportHandler
-    >>> from plone.supermodel.interfaces import IFieldNameExtractor
-    >>> from plone.supermodel.utils import prettyXML
-
-    >>> from lxml import etree
-
-Named file
------------
-
-    >>> field = NamedFile(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedFile">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedFile">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedFile'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named image
------------
-
-    >>> field = NamedImage(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedImage">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedImage">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedImage'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named blob file
----------------
-
-    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedBlobFile'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
-
-Named blob image
-----------------
-
-    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",
-    ...     description=u"Test desc", required=False, readonly=True)
-    >>> fieldType = IFieldNameExtractor(field)()
-    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)
-    >>> element = handler.write(field, u'dummy', fieldType) #doctest: +ELLIPSIS
-    >>> print prettyXML(element)
-    <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
-      <description>Test desc</description>
-      <readonly>True</readonly>
-      <required>False</required>
-      <title>Test</title>
-    </field>
-
-    >>> element = etree.XML("""\
-    ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">
-    ...   <description>Test desc</description>
-    ...   <missing_value />
-    ...   <readonly>True</readonly>
-    ...   <required>False</required>
-    ...   <title>Test</title>
-    ... </field>
-    ... """)
-
-    >>> reciprocal = handler.read(element)
-    >>> reciprocal.__class__
-    <class 'plone.namedfile.field.NamedBlobImage'>
-    >>> reciprocal.__name__
-    'dummy'
-    >>> reciprocal.title
-    u'Test'
-    >>> reciprocal.description
-    u'Test desc'
-    >>> reciprocal.required
-    False
-    >>> reciprocal.readonly
-    True
diff --git a/plone/namedfile/handler.zcml b/plone/namedfile/handler.zcml
index fa52c3f..cf436a3 100644
--- a/plone/namedfile/handler.zcml
+++ b/plone/namedfile/handler.zcml
@@ -1,28 +1,25 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml"
-    i18n_domain="plone.namedfile">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <include package="plone.supermodel" />
+  <include package="plone.supermodel" />
 
-    <!-- plone.supermodel configuration -->
+  <!-- plone.supermodel configuration -->
 
-    <utility
-        component=".handler.NamedFileHandler"
-        name="plone.namedfile.field.NamedFile"
-        />
-    <utility
-        component=".handler.NamedImageHandler"
-        name="plone.namedfile.field.NamedImage"
-        />
+  <utility
+      component=".handler.NamedFileHandler"
+      name="plone.namedfile.field.NamedFile"
+      />
+  <utility
+      component=".handler.NamedImageHandler"
+      name="plone.namedfile.field.NamedImage"
+      />
 
-    <utility
-        component=".handler.NamedBlobFileHandler"
-        name="plone.namedfile.field.NamedBlobFile"
-        />
-    <utility
-        component=".handler.NamedBlobImageHandler"
-        name="plone.namedfile.field.NamedBlobImage"
-        />
+  <utility
+      component=".handler.NamedBlobFileHandler"
+      name="plone.namedfile.field.NamedBlobFile"
+      />
+  <utility
+      component=".handler.NamedBlobImageHandler"
+      name="plone.namedfile.field.NamedBlobImage"
+      />
 
-</configure>
\ No newline at end of file
+</configure>
diff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py
index cea5a5c..dc4a643 100644
--- a/plone/namedfile/interfaces.py
+++ b/plone/namedfile/interfaces.py
@@ -1,20 +1,21 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 from zope.schema.interfaces import IObject
 
+
 HAVE_BLOBS = True
 
 
 class IFile(Interface):
 
     contentType = schema.BytesLine(
-        title = u'Content Type',
+        title=u'Content Type',
         description=u'The content type identifies the type of data.',
         default='',
         required=False,
         missing_value=''
-        )
+    )
 
     data = schema.Bytes(
         title=u'Data',
@@ -22,7 +23,7 @@ class IFile(Interface):
         default='',
         missing_value='',
         required=False,
-        )
+    )
 
     def getSize():
         """Return the byte-size of the data of the object."""
@@ -43,6 +44,7 @@ class IImageScaleTraversable(Interface):
     image fields via the @@images view.
     """
 
+
 class IAvailableSizes(Interface):
     """A callable returning a dictionary of scale name => (width, height)
     """
@@ -53,7 +55,6 @@ class IAvailableSizes(Interface):
 except ImportError:
     class IStableImageScale(Interface):
         """ Marker for image scales when accessed with a UID-based URL.
-
         These can be cached forever using the plone.stableResource ruleset.
         """
 
@@ -66,38 +67,44 @@ class INamed(Interface):
 
     filename = schema.TextLine(title=u"Filename", required=False, default=None)
 
+
 class INamedFile(INamed, IFile):
     """A non-BLOB file with a filename
     """
 
+
 class INamedImage(INamed, IImage):
     """A non-BLOB image with a filename
     """
 
+
 # Fields
 
 class INamedField(IObject):
     """Base field type
     """
 
+
 class INamedFileField(INamedField):
     """Field for storing INamedFile objects.
     """
 
+
 class INamedImageField(INamedField):
     """Field for storing INamedImage objects.
     """
 
+
 class IStorage(Interface):
     """Store file data
     """
 
     def store(data, blob):
         """Store the data into the blob
-
         Raises NonStorable if data is not storable.
         """
 
+
 class NotStorable(Exception):
     """Data is not storable
     """
@@ -109,20 +116,24 @@ class IBlobby(Interface):
     """Marker interface for objects that support blobs.
     """
 
+
 class INamedBlobFile(INamedFile, IBlobby):
     """A BLOB file with a filename
     """
 
+
 class INamedBlobImage(INamedImage, IBlobby):
     """A BLOB image with a filename
     """
 
+
 # Fields
 
 class INamedBlobFileField(INamedFileField):
     """Field for storing INamedBlobFile objects.
     """
 
+
 class INamedBlobImageField(INamedImageField):
     """Field for storing INamedBlobImage objects.
     """
diff --git a/plone/namedfile/marshaler.py b/plone/namedfile/marshaler.py
index d2fd1a7..4602664 100644
--- a/plone/namedfile/marshaler.py
+++ b/plone/namedfile/marshaler.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 try:
     from plone.rfc822.defaultfields import BaseFieldMarshaler
     HAVE_MARSHALER = True
@@ -7,14 +8,16 @@
 if HAVE_MARSHALER:
 
     from email.Encoders import encode_base64
-
-    from zope.interface import Interface
-    from zope.component import adapts
-
+    from plone.namedfile import NamedBlobFile
+    from plone.namedfile import NamedBlobImage
+    from plone.namedfile import NamedFile
+    from plone.namedfile import NamedImage
+    from plone.namedfile.interfaces import INamedBlobFileField
+    from plone.namedfile.interfaces import INamedBlobImageField
     from plone.namedfile.interfaces import INamedFileField
     from plone.namedfile.interfaces import INamedImageField
-
-    from plone.namedfile import NamedFile, NamedImage
+    from zope.component import adapter
+    from zope.interface import Interface
 
     class BaseNamedFileFieldMarshaler(BaseFieldMarshaler):
         """Base marshaler for plone.namedfile values. Actual adapters are
@@ -28,12 +31,19 @@ def encode(self, value, charset='utf-8', primary=False):
             # we only support encoding a file value in the body of a message,
             # never in a header
             if not primary:
-                raise ValueError("File fields can only be marshaled as primary fields")
+                raise ValueError(
+                    'File fields can only be marshaled as primary fields')
             if value is None:
                 return None
             return value.data
 
-        def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
+        def decode(
+                self,
+                value,
+                message=None,
+                charset='utf-8',
+                contentType=None,
+                primary=False):
             filename = None
             if primary and message is not None:
                 filename = message.get_filename(None)
@@ -56,43 +66,35 @@ def postProcessMessage(self, message):
                 filename = value.filename
                 if filename:
                     message.add_header('Content-Disposition', 'attachment')
-                    message.set_param('filename',
+                    message.set_param(
+                        'filename',
                         filename.encode('utf-8'),
                         header='Content-Disposition',
                         charset='utf-8'
-                        )
+                    )
 
             encode_base64(message)
 
+    @adapter(Interface, INamedFileField)
     class NamedFileFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedFile field
         """
-
-        adapts(Interface, INamedFileField)
         factory = NamedFile
 
+    @adapter(Interface, INamedImageField)
     class NamedImageFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedImage field
         """
-
-        adapts(Interface, INamedImageField)
         factory = NamedImage
 
-    from plone.namedfile.interfaces import INamedBlobFileField
-    from plone.namedfile.interfaces import INamedBlobImageField
-
-    from plone.namedfile import NamedBlobFile, NamedBlobImage
-
+    @adapter(Interface, INamedBlobFileField)
     class NamedBlobFileFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedBlobFile field
         """
-
-        adapts(Interface, INamedBlobFileField)
         factory = NamedBlobFile
 
+    @adapter(Interface, INamedBlobImageField)
     class NamedBlobImageFieldMarshaler(BaseNamedFileFieldMarshaler):
         """Marshaler for an INamedBlobImage field
         """
-
-        adapts(Interface, INamedBlobImageField)
         factory = NamedBlobImage
diff --git a/plone/namedfile/marshaler.rst b/plone/namedfile/marshaler.rst
new file mode 100644
index 0000000..ca64bdf
--- /dev/null
+++ b/plone/namedfile/marshaler.rst
@@ -0,0 +1,224 @@
+plone.rfc822 marshaler
+======================
+
+This package includes a field marshaler for ``plone.rfc822``, which will be
+installed if that package is installed.
+
+To test this, we must first load some configuration::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile.tests">
+    ...
+    ...     <include package="zope.component" file="meta.zcml" />
+    ...     <include package="zope.security" file="meta.zcml" />
+    ...
+    ...     <include package="plone.rfc822" />
+    ...
+    ...     <include package="plone.namedfile" file="marshaler.zcml" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+Next, we will create a schema with which to test the marshaler::
+
+    >>> from zope.interface import Interface
+    >>> from plone.namedfile import field
+
+    >>> class ITestContent(Interface):
+    ...     _file = field.NamedFile()
+    ...     _image = field.NamedImage()
+
+We'll create an instance with some data, too::
+
+    >>> from plone.namedfile import NamedFile, NamedImage
+    >>> fileValue = NamedFile('dummy test data', 'text/plain', filename=u"test.txt")
+    >>> zptlogo = (
+    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
+    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
+    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
+    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
+    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
+    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
+    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
+    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
+    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
+    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
+    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
+    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
+    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
+    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
+    ...     '\x00A\x00;'
+    ...     )
+    >>> imageValue = NamedImage(zptlogo, 'image/gif', filename=u'zptl\xf8go.gif')
+
+    >>> from zope.interface import implementer
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
+    ...     _file = None
+    ...     _image = None
+
+    >>> t = TestContent()
+    >>> t._file = fileValue
+    >>> t._image = imageValue
+
+We can now look up and test the marshaler::
+
+    >>> from zope.component import getMultiAdapter
+    >>> from plone.rfc822.interfaces import IFieldMarshaler
+
+For the moment, fields are not marked as primary. Our marshaller will refuse
+to marshal a non-primary field, as it does not make much sense to encode
+binary data into a UTF-8 string in a header::
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
+    >>> marshaler.marshal()
+    Traceback (most recent call last):
+    ...
+    ValueError: File fields can only be marshaled as primary fields
+
+    >>> marshaler.getContentType()
+    'text/plain'
+    >>> marshaler.ascii
+    False
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
+    >>> marshaler.marshal() is None
+    Traceback (most recent call last):
+    ...
+    ValueError: File fields can only be marshaled as primary fields
+
+    >>> marshaler.getContentType()
+    'image/gif'
+    >>> marshaler.ascii
+    False
+
+Let's try it with primary fields::
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
+    >>> marshaler.marshal(primary=True)
+    'dummy test data'
+
+    >>> marshaler.getContentType()
+    'text/plain'
+    >>> marshaler.getCharset('utf-8') is None
+    True
+    >>> marshaler.ascii
+    False
+
+    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
+    >>> marshaler.marshal(primary=True) == zptlogo
+    True
+
+    >>> marshaler.getContentType()
+    'image/gif'
+    >>> marshaler.getCharset('utf-8') is None
+    True
+    >>> marshaler.ascii
+    False
+
+This marshaler will also post-process a message to encode the filename in
+the Content-Disposition header, and base64-encode the payload.
+
+To illustrate that, as well as parsing of the message, let's construct
+a full message and look at the output.
+
+First, we need to mark one of the fields as primary. In this case, we will
+use the file field. The image will will now be ignored, since our marshaler
+refuses to encode non-primary fields::
+
+    >>> from plone.rfc822.interfaces import IPrimaryField
+    >>> from plone.rfc822 import constructMessageFromSchema
+    >>> from plone.rfc822 import renderMessage
+
+    >>> from zope.interface import alsoProvides
+    >>> alsoProvides(ITestContent['_file'], IPrimaryField)
+
+    >>> message = constructMessageFromSchema(t, ITestContent)
+    >>> messageBody = renderMessage(message)
+    >>> print messageBody
+    MIME-Version: 1.0
+    Content-Type: text/plain
+    Content-Disposition: attachment; filename*="utf-8''test.txt"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    ZHVtbXkgdGVzdCBkYXRh
+
+You can see here that we have a transfer encoding and a content disposition.
+
+Let's now use this message to construct a new object::
+
+    >>> from email import message_from_string
+    >>> inputMessage = message_from_string(messageBody)
+
+    >>> newContent = TestContent()
+
+    >>> from plone.rfc822 import initializeObjectFromSchema
+    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
+    >>> newContent._file.data
+    'dummy test data'
+    >>> newContent._file.contentType
+    'text/plain'
+    >>> newContent._file.filename
+    u'test.txt'
+
+    >>> newContent._image is None
+    True
+
+If we have two primary fields, they will be encoded as a multipart message::
+
+    >>> alsoProvides(ITestContent['_image'], IPrimaryField)
+
+    >>> message = constructMessageFromSchema(t, ITestContent)
+    >>> messageBody = renderMessage(message)
+    >>> print messageBody # doctest: +ELLIPSIS
+    MIME-Version: 1.0
+    Content-Type: multipart/mixed; boundary="===============...=="
+    <BLANKLINE>
+    --===============...==
+    MIME-Version: 1.0
+    Content-Type: text/plain
+    Content-Disposition: attachment; filename*="utf-8''test.txt"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    ZHVtbXkgdGVzdCBkYXRh
+    --===============...==
+    MIME-Version: 1.0
+    Content-Type: image/gif
+    Content-Disposition: attachment; filename*="utf-8''zptl%C3%B8go.gif"
+    Content-Transfer-Encoding: base64
+    <BLANKLINE>
+    R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi
+    5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM
+    1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2
+    wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm
+    BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D
+    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=
+    --===============...==--...
+
+Of course, we will also be able to load this data from a message::
+
+    >>> inputMessage = message_from_string(messageBody)
+    >>> newContent = TestContent()
+    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
+
+    >>> newContent._file.data
+    'dummy test data'
+    >>> newContent._file.contentType
+    'text/plain'
+    >>> newContent._file.filename
+    u'test.txt'
+
+    >>> newContent._image.data == zptlogo
+    True
+    >>> newContent._image.contentType
+    'image/gif'
+    >>> newContent._image.filename
+    u'zptl\xf8go.gif'
diff --git a/plone/namedfile/marshaler.txt b/plone/namedfile/marshaler.txt
deleted file mode 100644
index 5ae0020..0000000
--- a/plone/namedfile/marshaler.txt
+++ /dev/null
@@ -1,224 +0,0 @@
-plone.rfc822 marshaler
-======================
-
-This package includes a field marshaler for ``plone.rfc822``, which will be
-installed if that package is installed.
-
-To test this, we must first load some configuration:
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile.tests">
-    ...
-    ...     <include package="zope.component" file="meta.zcml" />
-    ...     <include package="zope.security" file="meta.zcml" />
-    ...
-    ...     <include package="plone.rfc822" />
-    ...
-    ...     <include package="plone.namedfile" file="marshaler.zcml" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Next, we will create a schema with which to test the marshaler
-
-    >>> from zope.interface import Interface
-    >>> from plone.namedfile import field
-
-    >>> class ITestContent(Interface):
-    ...     _file = field.NamedFile()
-    ...     _image = field.NamedImage()
-
-We'll create an instance with some data, too.
-
-    >>> from plone.namedfile import NamedFile, NamedImage
-    >>> fileValue = NamedFile('dummy test data', 'text/plain', filename=u"test.txt")
-    >>> zptlogo = (
-    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
-    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
-    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
-    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
-    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
-    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
-    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
-    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
-    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
-    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
-    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
-    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
-    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
-    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
-    ...     '\x00A\x00;'
-    ...     )
-    >>> imageValue = NamedImage(zptlogo, 'image/gif', filename=u'zptl\xf8go.gif')
-
-    >>> from zope.interface import implements
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
-    ...     _file = None
-    ...     _image = None
-
-    >>> t = TestContent()
-    >>> t._file = fileValue
-    >>> t._image = imageValue
-
-We can now look up and test the marshaler.
-
-    >>> from zope.component import getMultiAdapter
-    >>> from plone.rfc822.interfaces import IFieldMarshaler
-
-For the moment, fields are not marked as primary. Our marshaller will refuse
-to marshal a non-primary field, as it does not make much sense to encode
-binary data into a UTF-8 string in a header.
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
-    >>> marshaler.marshal()
-    Traceback (most recent call last):
-    ...
-    ValueError: File fields can only be marshaled as primary fields
-
-    >>> marshaler.getContentType()
-    'text/plain'
-    >>> marshaler.ascii
-    False
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
-    >>> marshaler.marshal() is None
-    Traceback (most recent call last):
-    ...
-    ValueError: File fields can only be marshaled as primary fields
-
-    >>> marshaler.getContentType()
-    'image/gif'
-    >>> marshaler.ascii
-    False
-
-Let's try it with primary fields:
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_file']), IFieldMarshaler)
-    >>> marshaler.marshal(primary=True)
-    'dummy test data'
-
-    >>> marshaler.getContentType()
-    'text/plain'
-    >>> marshaler.getCharset('utf-8') is None
-    True
-    >>> marshaler.ascii
-    False
-
-    >>> marshaler = getMultiAdapter((t, ITestContent['_image']), IFieldMarshaler)
-    >>> marshaler.marshal(primary=True) == zptlogo
-    True
-
-    >>> marshaler.getContentType()
-    'image/gif'
-    >>> marshaler.getCharset('utf-8') is None
-    True
-    >>> marshaler.ascii
-    False
-
-This marshaler will also post-process a message to encode the filename in
-the Content-Disposition header, and base64-encode the payload.
-
-To illustrate that, as well as parsing of the message, let's construct
-a full message and look at the output.
-
-First, we need to mark one of the fields as primary. In this case, we will
-use the file field. The image will will now be ignored, since our marshaler
-refuses to encode non-primary fields.
-
-    >>> from plone.rfc822.interfaces import IPrimaryField
-    >>> from plone.rfc822 import constructMessageFromSchema
-    >>> from plone.rfc822 import renderMessage
-
-    >>> from zope.interface import alsoProvides
-    >>> alsoProvides(ITestContent['_file'], IPrimaryField)
-
-    >>> message = constructMessageFromSchema(t, ITestContent)
-    >>> messageBody = renderMessage(message)
-    >>> print messageBody
-    MIME-Version: 1.0
-    Content-Type: text/plain
-    Content-Disposition: attachment; filename*="utf-8''test.txt"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    ZHVtbXkgdGVzdCBkYXRh
-
-You can see here that we have a transfer encoding and a content disposition.
-
-Let's now use this message to construct a new object.
-
-    >>> from email import message_from_string
-    >>> inputMessage = message_from_string(messageBody)
-
-    >>> newContent = TestContent()
-
-    >>> from plone.rfc822 import initializeObjectFromSchema
-    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
-    >>> newContent._file.data
-    'dummy test data'
-    >>> newContent._file.contentType
-    'text/plain'
-    >>> newContent._file.filename
-    u'test.txt'
-
-    >>> newContent._image is None
-    True
-
-If we have two primary fields, they will be encoded as a multipart message.
-
-    >>> alsoProvides(ITestContent['_image'], IPrimaryField)
-
-    >>> message = constructMessageFromSchema(t, ITestContent)
-    >>> messageBody = renderMessage(message)
-    >>> print messageBody # doctest: +ELLIPSIS
-    MIME-Version: 1.0
-    Content-Type: multipart/mixed; boundary="===============...=="
-    <BLANKLINE>
-    --===============...==
-    MIME-Version: 1.0
-    Content-Type: text/plain
-    Content-Disposition: attachment; filename*="utf-8''test.txt"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    ZHVtbXkgdGVzdCBkYXRh
-    --===============...==
-    MIME-Version: 1.0
-    Content-Type: image/gif
-    Content-Disposition: attachment; filename*="utf-8''zptl%C3%B8go.gif"
-    Content-Transfer-Encoding: base64
-    <BLANKLINE>
-    R0lGODlhEAAQANUAAP///////vz9/fr7/Pf5+vX4+fP2+PL19/D09uvx8+Xt797o69zm6tnk6Nfi
-    5tLf49Dd483c4cva38nZ38jY3cbX3MTW3MPU2sLT2cHT2cDS2b3R2L3Q17zP17vP1rvO1bnN1LbM
-    1LbL07XL0rTK0bLI0LHH0LDHz6/Gzq7Ezq3EzavDzKnCy6jByqbAyaS+yKK9x6C7xZ66xJu/zJi2
-    wY2uukZncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAEAAQAAAGekCAcEgsEmvIJNJm
-    BNSEAQHh8GQWn4BBAZHAWm1MsM0AVtTEYYd67bAtGrO4lb1mOB4RyixNb0MkFRh7ADZ9bRMWGh+D
-    hX02FxsgJIMAhhkdISUpjIY2IycrLoxhYBxgKCwvMZRCNRkeIiYqLTAyNKxOcbq7uGi+YgBBADs=
-    --===============...==--...
-
-Of course, we will also be able to load this data from a message.
-
-    >>> inputMessage = message_from_string(messageBody)
-    >>> newContent = TestContent()
-    >>> initializeObjectFromSchema(newContent, ITestContent, inputMessage)
-
-    >>> newContent._file.data
-    'dummy test data'
-    >>> newContent._file.contentType
-    'text/plain'
-    >>> newContent._file.filename
-    u'test.txt'
-
-    >>> newContent._image.data == zptlogo
-    True
-    >>> newContent._image.contentType
-    'image/gif'
-    >>> newContent._image.filename
-    u'zptl\xf8go.gif'
diff --git a/plone/namedfile/marshaler.zcml b/plone/namedfile/marshaler.zcml
index f310089..a12614c 100644
--- a/plone/namedfile/marshaler.zcml
+++ b/plone/namedfile/marshaler.zcml
@@ -1,11 +1,8 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:zcml="http://namespaces.zope.org/zcml"
-    i18n_domain="plone.namedfile">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <adapter factory=".marshaler.NamedFileFieldMarshaler" />
-    <adapter factory=".marshaler.NamedImageFieldMarshaler" />
-    <adapter factory=".marshaler.NamedBlobFileFieldMarshaler" />
-    <adapter factory=".marshaler.NamedBlobImageFieldMarshaler" />
+  <adapter factory=".marshaler.NamedFileFieldMarshaler" />
+  <adapter factory=".marshaler.NamedImageFieldMarshaler" />
+  <adapter factory=".marshaler.NamedBlobFileFieldMarshaler" />
+  <adapter factory=".marshaler.NamedBlobImageFieldMarshaler" />
 
 </configure>
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 6e26795..c60bb42 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -1,24 +1,30 @@
-from Acquisition import aq_base
+# -*- coding: utf-8 -*-
 from AccessControl.ZopeGuards import guarded_getattr
+from Acquisition import aq_base
 from DateTime import DateTime
 from logging import exception
 from plone.namedfile.interfaces import IAvailableSizes
 from plone.namedfile.interfaces import IStableImageScale
-from plone.namedfile.utils import set_headers, stream_data
+from plone.namedfile.utils import set_headers
+from plone.namedfile.utils import stream_data
 from plone.rfc822.interfaces import IPrimaryFieldInfo
-from plone.scale.storage import AnnotationStorage
 from plone.scale.scale import scaleImage
+from plone.scale.storage import AnnotationStorage
 from Products.Five import BrowserView
 from xml.sax.saxutils import quoteattr
 from ZODB.POSException import ConflictError
+from zope.app.file.file import FileChunk
 from zope.component import queryUtility
 from zope.interface import alsoProvides
-from zope.interface import implements
-from zope.traversing.interfaces import ITraversable, TraversalError
-from zope.publisher.interfaces import IPublishTraverse, NotFound
-from zope.app.file.file import FileChunk
+from zope.interface import implementer
+from zope.publisher.interfaces import IPublishTraverse
+from zope.publisher.interfaces import NotFound
+from zope.traversing.interfaces import ITraversable
+from zope.traversing.interfaces import TraversalError
+
 import pkg_resources
 
+
 try:
     pkg_resources.get_distribution('plone.protect>=3.0')
 except (pkg_resources.DistributionNotFound, pkg_resources.VersionConflict):
@@ -53,8 +59,8 @@ def __init__(self, context, request, **info):
             name = info['uid']
         else:
             name = info['fieldname']
-        self.__name__ = '%s.%s' % (name, extension)
-        self.url = '%s/@@images/%s' % (url, self.__name__)
+        self.__name__ = u'{0}.{1}'.format(name, extension)
+        self.url = u'{0}/@@images/{1}'.format(url, self.__name__)
 
     def absolute_url(self):
         return self.url
@@ -91,7 +97,7 @@ def tag(self, height=_marker, width=_marker, alt=_marker,
                 v = str(v)
             elif isinstance(v, str):
                 v = unicode(v, 'utf8')
-            parts.append("%s=%s" % (k, quoteattr(v)))
+            parts.append(u'{0}={1}'.format(k, quoteattr(v)))
         parts.append('/>')
 
         return u' '.join(parts)
@@ -130,15 +136,15 @@ def HEAD(self, REQUEST, RESPONSE=None):
     HEAD.__roles__ = ('Anonymous',)
 
 
+@implementer(ITraversable)
 class ImmutableTraverser(object):
-    implements(ITraversable)
 
     def __init__(self, scale):
         self.scale = scale
 
     def traverse(self, name, furtherPath):
         if furtherPath:
-            raise TraversalError("Do not know how to handle further path")
+            raise TraversalError('Do not know how to handle further path')
         else:
             if self.scale:
                 return self.scale.tag()
@@ -146,9 +152,9 @@ def traverse(self, name, furtherPath):
                 raise TraversalError(name)
 
 
+@implementer(ITraversable, IPublishTraverse)
 class ImageScaling(BrowserView):
     """ view used for generating (and storing) image scales """
-    implements(ITraversable, IPublishTraverse)
     # Ignore some stacks to help with accessing via webdav, otherwise you get a
     # 404 NotFound error.
     _ignored_stacks = ('manage_DAVget', 'manage_FTPget')
@@ -245,17 +251,19 @@ def create(self,
                height=None,
                width=None,
                **parameters):
-        """ factory for image scales, see `IImageScaleStorage.scale` """
+        """Factory for image scales, see `IImageScaleStorage.scale`.
+        """
         orig_value = getattr(self.context, fieldname)
         if orig_value is None:
             return
 
         if height is None and width is None:
-            _, format = orig_value.contentType.split('/', 1)
-            return None, format, (orig_value._width, orig_value._height)
-        if hasattr(aq_base(orig_value), 'open'):
+            _, format_ = orig_value.contentType.split('/', 1)
+            return None, format_, (orig_value._width, orig_value._height)
+        orig_data = None
+        try:
             orig_data = orig_value.open()
-        else:
+        except AttributeError:
             orig_data = getattr(aq_base(orig_value), 'data', orig_value)
         if not orig_data:
             return
@@ -287,24 +295,19 @@ def create(self,
                       orig_value, self.context.absolute_url())
             return
         if result is not None:
-            data, format, dimensions = result
-            mimetype = 'image/%s' % format.lower()
+            data, format_, dimensions = result
+            mimetype = u'image/{0}'.format(format_.lower())
             value = orig_value.__class__(
                 data, contentType=mimetype, filename=orig_value.filename)
             value.fieldname = fieldname
-            return value, format, dimensions
+            return value, format_, dimensions
 
     def modified(self):
-        """ provide a callable to return the modification time of content
-            items, so stored image scales can be invalidated """
+        """Provide a callable to return the modification time of content
+        items, so stored image scales can be invalidated.
+        """
         context = aq_base(self.context)
-        try:
-            if hasattr(context, 'modified') and callable(context.modified):
-                date = context.modified()
-            else:
-                date = DateTime(context._p_mtime)
-        except AttributeError:
-            date = self.context.modified().millis()
+        date = DateTime(context._p_mtime)
         return date.millis()
 
     def scale(self,
diff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml
index a2ec18d..a962979 100644
--- a/plone/namedfile/scaling.zcml
+++ b/plone/namedfile/scaling.zcml
@@ -1,16 +1,15 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
-    xmlns:browser="http://namespaces.zope.org/browser"
-    xmlns:zcml="http://namespaces.zope.org/zcml">
+    xmlns:browser="http://namespaces.zope.org/browser">
 
   <include package="zope.annotation"/>
 
   <browser:page
-    name="images"
-    for=".interfaces.IImageScaleTraversable"
-    class=".scaling.ImageScaling"
-    allowed_attributes="scale"
-    permission="zope2.View"
-    />
+      name="images"
+      for=".interfaces.IImageScaleTraversable"
+      class=".scaling.ImageScaling"
+      allowed_attributes="scale"
+      permission="zope2.View"
+      />
 
 </configure>
diff --git a/plone/namedfile/storages.py b/plone/namedfile/storages.py
index 75cf4c7..f3be5ba 100644
--- a/plone/namedfile/storages.py
+++ b/plone/namedfile/storages.py
@@ -1,60 +1,45 @@
+# -*- coding: utf-8 -*-
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
-
-##############################################################################
-#
-# Copyright (c) 2008 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-
-from zope.interface import implements
 from plone.namedfile.file import FileChunk
-from zope.publisher.browser import FileUpload
 from plone.namedfile.interfaces import IStorage
 from plone.namedfile.interfaces import NotStorable
+from zope.interface import implementer
+from zope.publisher.browser import FileUpload
+
 
 MAXCHUNKSIZE = 1 << 16
 
 
+@implementer(IStorage)
 class StringStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, str):
-            raise NotStorable("Could not store data (not of 'str' type).")
+            raise NotStorable('Could not store data (not of "str" type).')
 
         fp = blob.open('w')
         fp.write(data)
         fp.close()
 
 
+@implementer(IStorage)
 class UnicodeStorable(StringStorable):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, unicode):
-            raise NotStorable("Could not store data (not of 'unicode' "
-                              "type).")
+            raise NotStorable('Could not store data (not of "unicode" type).')
 
         data = data.encode('UTF-8')
         StringStorable.store(self, data, blob)
 
 
+@implementer(IStorage)
 class FileChunkStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, FileChunk):
-            raise NotStorable("Could not store data (not a of 'FileChunk' "
-                              "type).")
+            raise NotStorable('Could not store data (not a of "FileChunk" type).')  # noqa
 
         fp = blob.open('w')
         chunk = data
@@ -64,25 +49,25 @@ def store(self, data, blob):
         fp.close()
 
 
+@implementer(IStorage)
 class FileDescriptorStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, file):
-            raise NotStorable("Could not store data (not of 'file').")
+            raise NotStorable('Could not store data (not of "file").')
 
-        filename = getattr(data, "name", None)
+        filename = getattr(data, 'name', None)
         if filename is not None:
             blob.consumeFile(filename)
             return
 
 
+@implementer(IStorage)
 class FileUploadStorable(object):
-    implements(IStorage)
 
     def store(self, data, blob):
         if not isinstance(data, FileUpload):
-            raise NotStorable("Could not store data (not of 'FileUpload').")
+            raise NotStorable('Could not store data (not of "FileUpload").')
 
         data.seek(0)
 
diff --git a/plone/namedfile/tests/base.py b/plone/namedfile/tests/base.py
index 668669e..53e6a1c 100644
--- a/plone/namedfile/tests/base.py
+++ b/plone/namedfile/tests/base.py
@@ -1,20 +1,25 @@
-import os
+# -*- coding: utf-8 -*-
 from StringIO import StringIO
-import PIL.Image
 from Testing import ZopeTestCase as ztc
+from Testing.testbrowser import Browser
 from zope.component import testing
 from zope.configuration import xmlconfig
-from Testing.testbrowser import Browser
+
+import os
+import PIL.Image
+
 
 def getFile(filename):
     """ return contents of the file with the given name """
     filename = os.path.join(os.path.dirname(__file__), filename)
     return open(filename, 'r')
 
+
 def setUp(self=None):
     testing.setUp()
     xmlconfig.xmlconfig(getFile('testing.zcml'))
 
+
 class NamedFileLayer:
     setUp = classmethod(setUp)
     tearDown = classmethod(testing.tearDown)
@@ -26,25 +31,32 @@ class NamedFileLayer:
 else:
     NamedFileLayer.__bases__ = (ZopeLite,)
 
+
 class ImageTestMixin(object):
-    def assertImage(self, data, format, size):
+
+    def assertImage(self, data, format_, size):
         image = PIL.Image.open(StringIO(data))
-        self.assertEqual(image.format, format)
+        self.assertEqual(image.format, format_)
         self.assertEqual(image.size, size)
 
+
 class NamedFileTestCase(ztc.TestCase, ImageTestMixin):
     layer = NamedFileLayer
 
-class NamedFileFunctionalTestCase(ztc.Functional, ztc.ZopeTestCase, ImageTestMixin):
+
+class NamedFileFunctionalTestCase(
+        ztc.Functional,
+        ztc.ZopeTestCase,
+        ImageTestMixin):
     layer = NamedFileLayer
 
     def getCredentials(self):
-        return '%s:%s' % (ztc.user_name, ztc.user_password)
+        return u'{0}:{0}'.format(ztc.user_name, ztc.user_password)
 
     def getBrowser(self, loggedIn=True):
         """ instantiate and return a testbrowser for convenience """
         browser = Browser()
         if loggedIn:
-            auth = 'Basic %s' % self.getCredentials()
+            auth = u'Basic {0}'.format(self.getCredentials())
             browser.addHeader('Authorization', auth)
         return browser
diff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py
index 420a06a..346766d 100644
--- a/plone/namedfile/tests/test_blobfile.py
+++ b/plone/namedfile/tests/test_blobfile.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # This file was borrowed from z3c.blobfile and is licensed under the terms of
 # the ZPL.
 
@@ -14,27 +15,28 @@
 # FOR A PARTICULAR PURPOSE.
 #
 ##############################################################################
-import unittest
-import struct
-import transaction
 
-from zope.component import provideUtility
-from zope.interface.verify import verifyClass
+from plone.namedfile import storages
 from plone.namedfile.file import NamedBlobFile
 from plone.namedfile.file import NamedBlobImage
 from plone.namedfile.interfaces import INamedBlobFile
 from plone.namedfile.interfaces import INamedBlobImage
 from plone.namedfile.interfaces import IStorage
-from plone.namedfile import storages
 from plone.namedfile.tests.base import NamedFileLayer
 from plone.namedfile.tests.test_image import zptlogo
+from zope.component import provideUtility
+from zope.interface.verify import verifyClass
+
+import struct
+import transaction
+import unittest
 
 
 def registerUtilities():
-     provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")
-     provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")
-     provideUtility(storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk")
-     provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")
+    provideUtility(storages.StringStorable(), IStorage, name="__builtin__.str")  # noqa
+    provideUtility(storages.UnicodeStorable(), IStorage, name="__builtin__.unicode")  # noqa
+    provideUtility(storages.FileChunkStorable(), IStorage, name="plone.namedfile.file.FileChunk")  # noqa
+    provideUtility(storages.FileDescriptorStorable(), IStorage, name="__builtin__.file")  # noqa
 
 
 class TestImage(unittest.TestCase):
@@ -69,11 +71,11 @@ def testMutators(self):
         self.assertEqual(image.getImageSize(), (16, 16))
 
     def testInterface(self):
-        self.failUnless(INamedBlobImage.implementedBy(NamedBlobImage))
-        self.failUnless(verifyClass(INamedBlobImage, NamedBlobImage))
-        self.failUnless(INamedBlobFile.implementedBy(NamedBlobImage))
-        self.failUnless(INamedBlobImage.implementedBy(NamedBlobImage))
-        self.failUnless(verifyClass(INamedBlobFile, NamedBlobImage))
+        self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))
+        self.assertTrue(verifyClass(INamedBlobImage, NamedBlobImage))
+        self.assertTrue(INamedBlobFile.implementedBy(NamedBlobImage))
+        self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))
+        self.assertTrue(verifyClass(INamedBlobFile, NamedBlobImage))
 
     def testDataMutatorWithLargeHeader(self):
         from plone.namedfile.file import IMAGE_INFO_BYTES
diff --git a/plone/namedfile/tests/test_doctests.py b/plone/namedfile/tests/test_doctests.py
index cfdc67e..81fd07a 100644
--- a/plone/namedfile/tests/test_doctests.py
+++ b/plone/namedfile/tests/test_doctests.py
@@ -1,30 +1,33 @@
-import doctest
-import unittest
+# -*- coding: utf-8 -*-
 from plone.namedfile.tests.base import setUp
 from zope.component.testing import tearDown
 
+import doctest
+import unittest
+
+
 def test_suite():
     return unittest.TestSuite([
 
         doctest.DocFileSuite(
-            'usage.txt', package='plone.namedfile',
+            'usage.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'handler.txt', package='plone.namedfile',
+            'handler.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'marshaler.txt', package='plone.namedfile',
+            'marshaler.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocFileSuite(
-            'utils.txt', package='plone.namedfile',
+            'utils.rst', package='plone.namedfile',
             setUp=setUp, tearDown=tearDown),
 
         doctest.DocTestSuite('plone.namedfile.file'),
 
-        ])
+    ])
 
 if __name__ == '__main__':
     unittest.main(defaultTest='test_suite')
diff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py
index 1cdf258..cd03c11 100644
--- a/plone/namedfile/tests/test_image.py
+++ b/plone/namedfile/tests/test_image.py
@@ -1,11 +1,13 @@
+# -*- coding: utf-8 -*-
 # This file is borrowed from zope.app.file and licensed ZPL.
 
-import unittest
-from zope.interface.verify import verifyClass
 from plone.namedfile.file import NamedImage
 from plone.namedfile.interfaces import INamedImage
 from plone.namedfile.tests.base import getFile
 from plone.namedfile.utils import get_contenttype
+from zope.interface.verify import verifyClass
+
+import unittest
 
 
 zptlogo = (
@@ -26,7 +28,8 @@
     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
     '\x00A\x00;'
-    )
+)
+
 
 class TestImage(unittest.TestCase):
 
@@ -55,20 +58,26 @@ def testMutators(self):
         self.assertEqual(image.getImageSize(), (16, 16))
 
     def testInterface(self):
-        self.failUnless(INamedImage.implementedBy(NamedImage))
-        self.failUnless(verifyClass(INamedImage, NamedImage))
+        self.assertTrue(INamedImage.implementedBy(NamedImage))
+        self.assertTrue(verifyClass(INamedImage, NamedImage))
 
     def test_get_contenttype(self):
-        self.assertEqual(get_contenttype(NamedImage(getFile('image.gif').read(),
-                                                    contentType='image/gif')),
-                         'image/gif')
-        self.assertEqual(get_contenttype(NamedImage(getFile('image.gif').read(),
-                                                    filename=u'image.gif')),
-                         'image/gif')
+        self.assertEqual(
+            get_contenttype(
+                NamedImage(
+                    getFile('image.gif').read(),
+                    contentType='image/gif')),
+            'image/gif')
+        self.assertEqual(
+            get_contenttype(
+                NamedImage(
+                    getFile('image.gif').read(),
+                    filename=u'image.gif')),
+            'image/gif')
         self.assertEqual(get_contenttype(
-                                     NamedImage(getFile('notimage.doc').read(),
-                                                filename=u'notimage.doc')),
-                         'application/msword')
+            NamedImage(getFile('notimage.doc').read(),
+                       filename=u'notimage.doc')),
+            'application/msword')
 
     def testImageValidation(self):
         from plone.namedfile.field import InvalidImageFile,\
@@ -82,7 +91,11 @@ class FakeField(object):
 
         # field has an empty file
         image = self._makeImage()
-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)
+        self.assertRaises(
+            InvalidImageFile,
+            validate_image_field,
+            FakeField(),
+            image)
 
         # field has an image file
         image._setData(zptlogo)
@@ -90,4 +103,8 @@ class FakeField(object):
 
         notimage = NamedImage(getFile('notimage.doc').read(),
                               filename=u'notimage.doc')
-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)
+        self.assertRaises(
+            InvalidImageFile,
+            validate_image_field,
+            FakeField(),
+            notimage)
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 9109bb4..9eeaf31 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -1,19 +1,23 @@
-import time
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from OFS.SimpleItem import SimpleItem
-from plone.namedfile.interfaces import IImageScaleTraversable, IAvailableSizes
 from plone.namedfile.field import NamedImage as NamedImageField
 from plone.namedfile.file import NamedImage
-from plone.namedfile.tests.base import NamedFileTestCase, getFile
-from plone.namedfile.tests.base import NamedFileFunctionalTestCase
+from plone.namedfile.interfaces import IAvailableSizes
+from plone.namedfile.interfaces import IImageScaleTraversable
 from plone.namedfile.scaling import ImageScaling
+from plone.namedfile.tests.base import getFile
+from plone.namedfile.tests.base import NamedFileFunctionalTestCase
+from plone.namedfile.tests.base import NamedFileTestCase
 from plone.scale.interfaces import IScaledImageQuality
 from zExceptions import Unauthorized
 from zope.annotation import IAttributeAnnotatable
-from zope.component import getSiteManager, getGlobalSiteManager
-from zope.interface import implements
+from zope.component import getGlobalSiteManager
+from zope.component import getSiteManager
+from zope.interface import implementer
 
 import re
+import time
 
 
 def wait_to_ensure_modified():
@@ -26,8 +30,8 @@ class IHasImage(IImageScaleTraversable):
     image = NamedImageField()
 
 
+@implementer(IAttributeAnnotatable, IHasImage)
 class DummyContent(SimpleItem):
-    implements(IAttributeAnnotatable, IHasImage)
     image = None
     modified = DateTime
     id = __name__ = 'item'
@@ -37,9 +41,9 @@ def Title(self):
         return self.title
 
 
+@implementer(IScaledImageQuality)
 class DummyQualitySupplier(object):
     """ fake utility for plone.app.imaging's scaling quality """
-    implements(IScaledImageQuality)
 
     def getQuality(self):
         return 1  # as bad as it gets
@@ -57,7 +61,7 @@ def afterSetUp(self):
 
     def testCreateScale(self):
         foo = self.scaling.scale('image', width=100, height=80)
-        self.failUnless(foo.uid)
+        self.assertTrue(foo.uid)
         self.assertEqual(foo.mimetype, 'image/jpeg')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
@@ -72,14 +76,14 @@ def testCreateScaleWithoutData(self):
     def testGetScaleByName(self):
         self.scaling.available_sizes = {'foo': (60, 60)}
         foo = self.scaling.scale('image', scale='foo')
-        self.failUnless(foo.uid)
+        self.assertTrue(foo.uid)
         self.assertEqual(foo.mimetype, 'image/jpeg')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
         self.assertImage(foo.data.data, 'JPEG', (60, 60))
         expected_url = re.compile(
             r'http://nohost/item/@@images/[-a-z0-9]{36}\.jpeg')
-        self.failUnless(expected_url.match(foo.absolute_url()))
+        self.assertTrue(expected_url.match(foo.absolute_url()))
         self.assertEqual(foo.url, foo.absolute_url())
 
         tag = foo.tag()
@@ -87,7 +91,7 @@ def testGetScaleByName(self):
         expected = r'<img src="%s/@@images/([-0-9a-f]{36}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />' % base
         groups = re.match(expected, tag).groups()
-        self.failUnless(groups, tag)
+        self.assertTrue(groups, tag)
 
     def testGetUnknownScale(self):
         foo = self.scaling.scale('image', scale='foo?')
@@ -211,7 +215,7 @@ def traverse(self, path=''):
         expected = r'<img src="%s/@@images/([-0-9a-f]{36}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />' % base
         groups = re.match(expected, tag).groups()
-        self.failUnless(groups, tag)
+        self.assertTrue(groups, tag)
         uid, ext, height, width = groups
         return uid, ext, int(width), int(height)
 
@@ -327,7 +331,9 @@ def testHeadRequestMethod(self):
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
         self.assertEqual(
-            response.getHeader('Content-Length'), str(len(get_response.getBody())))
+            response.getHeader('Content-Length'),
+            str(len(get_response.getBody()))
+        )
         self.assertEqual(response.getBody(), '')
 
     def testPublishThumbViaUID(self):
diff --git a/plone/namedfile/tests/testing.zcml b/plone/namedfile/tests/testing.zcml
index f33711b..c8ac4f0 100644
--- a/plone/namedfile/tests/testing.zcml
+++ b/plone/namedfile/tests/testing.zcml
@@ -1,14 +1,12 @@
-<configure
-     xmlns="http://namespaces.zope.org/zope"
-     i18n_domain="plone.namedfile.tests">
+<configure xmlns="http://namespaces.zope.org/zope">
 
-    <include package="zope.security" file="meta.zcml" />
-    <include package="zope.component" file="meta.zcml" />
-    <include package="zope.browserpage" file="meta.zcml" />
-    <include package="zope.traversing" file="configure.zcml" />
+  <include package="zope.security" file="meta.zcml" />
+  <include package="zope.component" file="meta.zcml" />
+  <include package="zope.browserpage" file="meta.zcml" />
+  <include package="zope.traversing" file="configure.zcml" />
 
-    <permission id="zope2.View" title="View" />
+  <permission id="zope2.View" title="View" />
 
-    <include package="plone.namedfile" />
+  <include package="plone.namedfile" />
 
-</configure>
\ No newline at end of file
+</configure>
diff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst
new file mode 100644
index 0000000..e691f24
--- /dev/null
+++ b/plone/namedfile/usage.rst
@@ -0,0 +1,392 @@
+Usage
+=====
+
+This demonstrates how to use the package.
+
+
+Test setup
+----------
+
+We must first load the package's ZCML::
+
+    >>> configuration = """\
+    ... <configure
+    ...      xmlns="http://namespaces.zope.org/zope"
+    ...      i18n_domain="plone.namedfile.tests">
+    ...
+    ...     <include package="plone.namedfile" />
+    ...
+    ... </configure>
+    ... """
+
+    >>> from StringIO import StringIO
+    >>> from zope.configuration import xmlconfig
+    >>> xmlconfig.xmlconfig(StringIO(configuration))
+
+
+Schema fields
+-------------
+
+The following schema fields can be used to describe file data. We'll only
+test the BLOB versions of the fields if z3c.blobfile is installed::
+
+    >>> from zope.interface import Interface
+    >>> from plone.namedfile import field
+
+    >>> class IFileContainer(Interface):
+    ...     simple = field.NamedFile(title=u"Named file")
+    ...     image = field.NamedImage(title=u"Named image file")
+    ...     blob = field.NamedBlobFile(title=u"Named blob file")
+    ...     blobimage = field.NamedBlobImage(title=u"Named blob image file")
+
+These store data with the following types::
+
+    >>> from zope.interface import implementer
+    >>> from plone import namedfile
+
+    
+    >>> @implementer(IFileContainer)
+    ... class FileContainer(object):
+    ...     __allow_access_to_unprotected_subobjects__ = 1
+    ...     def __init__(self):
+    ...         self.simple = namedfile.NamedFile()
+    ...         self.image = namedfile.NamedImage()
+    ...         self.blob = namedfile.NamedBlobFile()
+    ...         self.blobimage = namedfile.NamedBlobImage()
+
+
+File data and content type
+--------------------------
+
+Let's now show how to get and set file data.
+
+The FileContainer class creates empty objects to start with::
+
+    >>> container = FileContainer()
+
+    >>> container.simple.data
+    ''
+    >>> container.simple.contentType
+    ''
+    >>> container.simple.filename is None
+    True
+
+    >>> container.image.data
+    ''
+    >>> container.image.contentType
+    ''
+    >>> container.image.filename is None
+    True
+
+    >>> container.blob.data
+    ''
+    >>> container.blob.contentType
+    ''
+    >>> container.blob.filename is None
+    True
+    >>> container.blobimage.data
+    ''
+    >>> container.blobimage.contentType
+    ''
+    >>> container.blobimage.filename is None
+    True
+
+Let's now set some actual data in these files. Notice how the constructor
+will attempt to guess the filename from the file extension::
+
+    >>> container.simple = namedfile.NamedFile('dummy test data', filename=u"test.txt")
+    >>> container.simple.data
+    'dummy test data'
+    >>> container.simple.contentType
+    'text/plain'
+    >>> container.simple.filename
+    u'test.txt'
+
+    >>> container.blob = namedfile.NamedBlobFile('dummy test data', filename=u"test.txt")
+    >>> container.blob.data
+    'dummy test data'
+    >>> container.blob.contentType
+    'text/plain'
+    >>> container.blob.filename
+    u'test.txt'
+
+Let's also try to read a GIF, courtesy of the zope.app.file tests::
+
+    >>> zptlogo = (
+    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
+    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
+    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
+    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
+    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
+    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
+    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
+    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
+    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
+    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
+    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
+    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
+    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
+    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
+    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
+    ...     '\x00A\x00;'
+    ...     )
+
+    >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")
+    >>> container.image.data == zptlogo
+    True
+    >>> container.image.contentType
+    'image/gif'
+    >>> container.image.filename
+    u'zpt.gif'
+
+    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")
+    >>> container.blobimage.data == zptlogo
+    True
+    >>> container.blobimage.contentType
+    'image/gif'
+    >>> container.blobimage.filename
+    u'zpt.gif'
+
+Note that is possible for force the mimetype::
+
+    >>> container.image = namedfile.NamedImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
+    >>> container.image.data == zptlogo
+    True
+    >>> container.image.contentType
+    'image/foo'
+    >>> container.image.filename
+    u'zpt.gif'
+
+    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
+    >>> container.blobimage.data == zptlogo
+    True
+    >>> container.blobimage.contentType
+    'image/foo'
+    >>> container.blobimage.filename
+    u'zpt.gif'
+
+The filename must be set to a unicode string, not a bytestring::
+
+    >>> container.image.filename = 'foo'
+    Traceback (most recent call last):
+    ...
+    WrongType: ('foo', <type 'unicode'>, 'filename')
+
+
+Download view
+-------------
+
+This package also comes with a view that can be used to download files. This
+will set Content-Disposition to ensure the browser downloads the file rather
+than displaying it. To use it, link to ../context-object/@@download/fieldname,
+where `fieldname` is the name of the attribute on the context-object where the
+named file is stored.
+
+We will test this with a dummy request, faking traversal::
+
+    >>> from plone.namedfile.browser import Download
+    >>> from zope.publisher.browser import TestRequest
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'simple')
+    >>> download()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'blob')
+    >>> data = download()
+    >>> isinstance(data, file)
+    True
+    >>> data.read()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'image')
+    >>> download() == zptlogo
+    True
+
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''zpt.gif"
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request).publishTraverse(request, 'blobimage')
+    >>> data = download()
+    >>> isinstance(data, file)
+    True
+    >>> data.read() == zptlogo
+    True
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''zpt.gif"
+
+
+Display-file view
+-----------------
+
+This package also comes with a view that can be used to display files in the
+browser. To use it, link to ../context-object/@@display-file/fieldname, where
+`fieldname` is the name of the attribute on the context-object where the named
+file is stored.
+
+We will test this with a dummy request, faking traversal::
+
+    >>> from plone.namedfile.browser import DisplayFile
+    >>> from zope.publisher.browser import TestRequest
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'simple')
+    >>> display_file()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blob')
+    >>> data = display_file()
+    >>> isinstance(data, file)
+    True
+    >>> data.read()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'image')
+    >>> display_file() == zptlogo
+    True
+
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+
+    >>> request = TestRequest()
+    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blobimage')
+    >>> data = display_file()
+    >>> isinstance(data, file)
+    True
+    >>> data.read() == zptlogo
+    True
+    >>> request.response.getHeader('Content-Length')
+    '341'
+    >>> request.response.getHeader('Content-Type')
+    'image/foo'
+    >>> request.response.getHeader('Content-Disposition')
+
+
+Specifying the primary field
+----------------------------
+
+To use the @@download view without specifying the field in the URL, the
+primary field information must be registered with an adapter. (Frameworks such
+as plone.dexterity may already have done this for you.)::
+
+    >>> from plone.rfc822.interfaces import IPrimaryFieldInfo
+    >>> from zope.component import adapter
+
+    >>> @implementer(IPrimaryFieldInfo)
+    ... @adapter(IFileContainer)
+    ... class FieldContainerPrimaryFieldInfo(object):
+    ...     fieldname = 'simple'
+    ...     field = IFileContainer['simple']
+    ...     def __init__(self, context):
+    ...         self.value = context.simple
+
+    >>> from zope.component import getSiteManager
+    >>> components = getSiteManager()
+    >>> components.registerAdapter(FieldContainerPrimaryFieldInfo)
+
+We will test this with a dummy request, faking traversal::
+
+    >>> request = TestRequest()
+    >>> download = Download(container, request)
+    >>> download()
+    'dummy test data'
+    >>> request.response.getHeader('Content-Length')
+    '15'
+    >>> request.response.getHeader('Content-Type')
+    'text/plain'
+    >>> request.response.getHeader('Content-Disposition')
+    "attachment; filename*=UTF-8''test.txt"
+
+
+Image scales
+------------
+
+This package can handle the creation, storage, and retrieval of arbitrarily
+sized scaled versions of images stored in NamedImage or NamedBlobImage fields.
+
+Image scales are accessed via an @@images view that is available for any item
+providing ``plone.namedfile.interfaces.IImageScaleTraversable``.  There are
+several ways that you may reference scales from page templates.
+
+1. for full control you may do the tag generation explicitly::
+
+     <img tal:define="scales context/@@images;
+                      thumbnail python: scales.scale('image', width=64, height=64);"
+          tal:condition="thumbnail"
+          tal:attributes="src thumbnail/url;
+                          width thumbnail/width;
+                          height thumbnail/height" />
+
+   This would create an up to 64 by 64 pixel scaled down version of the image
+   stored in the "image" field.  It also allows for passing in additional
+   parameters support by `plone.scale`_'s ``scaleImage`` function, e.g.
+   ``direction`` or ``quality``.
+
+   .. _`plone.scale`: http://pypi.python.org/pypi/plone.scale
+
+2. for automatic tag generation with extra parameters you would use::
+
+     <img tal:define="scale context/@@images"
+          tal:replace="structure python: scale.scale('image',
+                       width=1200, height=800, direction='down').tag()" />
+
+3. It is possible to access scales via predefined named scale sizes, rather
+   than hardcoding the dimensions every time you access a scale.  The scale
+   sizes are found via calling a utility providing
+   ``plone.namedfile.interfaces.IAvailableSizes``, which should return a dict of
+   scale name => (width, height).  A scale called 'mini' could then be accessed
+   like this::
+
+     <img tal:define="scale context/@@images"
+          tal:replace="structure python: scale.scale('image',
+                       scale='mini').tag()" />
+
+   This would use the predefined scale size "mini" to determine the desired
+   image dimensions, but still allow to pass in extra parameters.
+
+4. a convenience short-cut for option 3 can be used::
+
+     <img tal:replace="structure context/@@images/image/mini" />
+
+5. and lastly, the short-cut can also be used to render the unscaled image::
+
+     <img tal:replace="structure context/@@images/image" />
diff --git a/plone/namedfile/usage.txt b/plone/namedfile/usage.txt
deleted file mode 100644
index 03b601d..0000000
--- a/plone/namedfile/usage.txt
+++ /dev/null
@@ -1,384 +0,0 @@
-Usage
-=====
-
-This demonstrates how to use the package.
-
-Test setup
-----------
-
-We must first load the package's ZCML.
-
-    >>> configuration = """\
-    ... <configure
-    ...      xmlns="http://namespaces.zope.org/zope"
-    ...      i18n_domain="plone.namedfile.tests">
-    ...
-    ...     <include package="plone.namedfile" />
-    ...
-    ... </configure>
-    ... """
-
-    >>> from StringIO import StringIO
-    >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
-
-Schema fields
--------------
-
-The following schema fields can be used to describe file data. We'll only
-test the BLOB versions of the fields if z3c.blobfile is installed.
-
-    >>> from zope.interface import Interface
-    >>> from plone.namedfile import field
-
-    >>> class IFileContainer(Interface):
-    ...     simple = field.NamedFile(title=u"Named file")
-    ...     image = field.NamedImage(title=u"Named image file")
-    ...     blob = field.NamedBlobFile(title=u"Named blob file")
-    ...     blobimage = field.NamedBlobImage(title=u"Named blob image file")
-
-These store data with the following types.
-
-    >>> from zope.interface import implements
-    >>> from plone import namedfile
-
-    >>> class FileContainer(object):
-    ...     implements(IFileContainer)
-    ...     __allow_access_to_unprotected_subobjects__ = 1
-    ...     def __init__(self):
-    ...         self.simple = namedfile.NamedFile()
-    ...         self.image = namedfile.NamedImage()
-    ...         self.blob = namedfile.NamedBlobFile()
-    ...         self.blobimage = namedfile.NamedBlobImage()
-
-File data and content type
---------------------------
-
-Let's now show how to get and set file data.
-
-The FileContainer class creates empty objects to start with.
-
-    >>> container = FileContainer()
-
-    >>> container.simple.data
-    ''
-    >>> container.simple.contentType
-    ''
-    >>> container.simple.filename is None
-    True
-
-    >>> container.image.data
-    ''
-    >>> container.image.contentType
-    ''
-    >>> container.image.filename is None
-    True
-
-    >>> container.blob.data
-    ''
-    >>> container.blob.contentType
-    ''
-    >>> container.blob.filename is None
-    True
-    >>> container.blobimage.data
-    ''
-    >>> container.blobimage.contentType
-    ''
-    >>> container.blobimage.filename is None
-    True
-
-Let's now set some actual data in these files. Notice how the constructor
-will attempt to guess the filename from the file extension.
-
-    >>> container.simple = namedfile.NamedFile('dummy test data', filename=u"test.txt")
-    >>> container.simple.data
-    'dummy test data'
-    >>> container.simple.contentType
-    'text/plain'
-    >>> container.simple.filename
-    u'test.txt'
-
-    >>> container.blob = namedfile.NamedBlobFile('dummy test data', filename=u"test.txt")
-    >>> container.blob.data
-    'dummy test data'
-    >>> container.blob.contentType
-    'text/plain'
-    >>> container.blob.filename
-    u'test.txt'
-
-Let's also try to read a GIF, courtesy of the zope.app.file tests:
-
-    >>> zptlogo = (
-    ...     'GIF89a\x10\x00\x10\x00\xd5\x00\x00\xff\xff\xff\xff\xff\xfe\xfc\xfd\xfd'
-    ...     '\xfa\xfb\xfc\xf7\xf9\xfa\xf5\xf8\xf9\xf3\xf6\xf8\xf2\xf5\xf7\xf0\xf4\xf6'
-    ...     '\xeb\xf1\xf3\xe5\xed\xef\xde\xe8\xeb\xdc\xe6\xea\xd9\xe4\xe8\xd7\xe2\xe6'
-    ...     '\xd2\xdf\xe3\xd0\xdd\xe3\xcd\xdc\xe1\xcb\xda\xdf\xc9\xd9\xdf\xc8\xd8\xdd'
-    ...     '\xc6\xd7\xdc\xc4\xd6\xdc\xc3\xd4\xda\xc2\xd3\xd9\xc1\xd3\xd9\xc0\xd2\xd9'
-    ...     '\xbd\xd1\xd8\xbd\xd0\xd7\xbc\xcf\xd7\xbb\xcf\xd6\xbb\xce\xd5\xb9\xcd\xd4'
-    ...     '\xb6\xcc\xd4\xb6\xcb\xd3\xb5\xcb\xd2\xb4\xca\xd1\xb2\xc8\xd0\xb1\xc7\xd0'
-    ...     '\xb0\xc7\xcf\xaf\xc6\xce\xae\xc4\xce\xad\xc4\xcd\xab\xc3\xcc\xa9\xc2\xcb'
-    ...     '\xa8\xc1\xca\xa6\xc0\xc9\xa4\xbe\xc8\xa2\xbd\xc7\xa0\xbb\xc5\x9e\xba\xc4'
-    ...     '\x9b\xbf\xcc\x98\xb6\xc1\x8d\xae\xbaFgs\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
-    ...     '\x00,\x00\x00\x00\x00\x10\x00\x10\x00\x00\x06z@\x80pH,\x12k\xc8$\xd2f\x04'
-    ...     '\xd4\x84\x01\x01\xe1\xf0d\x16\x9f\x80A\x01\x91\xc0ZmL\xb0\xcd\x00V\xd4'
-    ...     '\xc4a\x87z\xed\xb0-\x1a\xb3\xb8\x95\xbdf8\x1e\x11\xca,MoC$\x15\x18{'
-    ...     '\x006}m\x13\x16\x1a\x1f\x83\x85}6\x17\x1b $\x83\x00\x86\x19\x1d!%)\x8c'
-    ...     '\x866#\'+.\x8ca`\x1c`(,/1\x94B5\x19\x1e"&*-024\xacNq\xba\xbb\xb8h\xbeb'
-    ...     '\x00A\x00;'
-    ...     )
-
-    >>> container.image = namedfile.NamedImage(zptlogo, filename=u"zpt.gif")
-    >>> container.image.data == zptlogo
-    True
-    >>> container.image.contentType
-    'image/gif'
-    >>> container.image.filename
-    u'zpt.gif'
-
-    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, filename=u"zpt.gif")
-    >>> container.blobimage.data == zptlogo
-    True
-    >>> container.blobimage.contentType
-    'image/gif'
-    >>> container.blobimage.filename
-    u'zpt.gif'
-
-Note that is possible for force the mimetype:
-
-    >>> container.image = namedfile.NamedImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
-    >>> container.image.data == zptlogo
-    True
-    >>> container.image.contentType
-    'image/foo'
-    >>> container.image.filename
-    u'zpt.gif'
-
-    >>> container.blobimage = namedfile.NamedBlobImage(zptlogo, contentType='image/foo', filename=u"zpt.gif")
-    >>> container.blobimage.data == zptlogo
-    True
-    >>> container.blobimage.contentType
-    'image/foo'
-    >>> container.blobimage.filename
-    u'zpt.gif'
-
-The filename must be set to a unicode string, not a bytestring:
-
-    >>> container.image.filename = 'foo'
-    Traceback (most recent call last):
-    ...
-    WrongType: ('foo', <type 'unicode'>, 'filename')
-
-Download view
--------------
-
-This package also comes with a view that can be used to download files. This
-will set Content-Disposition to ensure the browser downloads the file rather
-than displaying it. To use it, link to ../context-object/@@download/fieldname,
-where `fieldname` is the name of the attribute on the context-object where the
-named file is stored.
-
-We will test this with a dummy request, faking traversal.
-
-    >>> from plone.namedfile.browser import Download
-    >>> from zope.publisher.browser import TestRequest
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'simple')
-    >>> download()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'blob')
-    >>> data = download()
-    >>> isinstance(data, file)
-    True
-    >>> data.read()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'image')
-    >>> download() == zptlogo
-    True
-
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''zpt.gif"
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request).publishTraverse(request, 'blobimage')
-    >>> data = download()
-    >>> isinstance(data, file)
-    True
-    >>> data.read() == zptlogo
-    True
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''zpt.gif"
-
-Display-file view
------------------
-
-This package also comes with a view that can be used to display files in the
-browser. To use it, link to ../context-object/@@display-file/fieldname, where
-`fieldname` is the name of the attribute on the context-object where the named
-file is stored.
-
-We will test this with a dummy request, faking traversal.
-
-    >>> from plone.namedfile.browser import DisplayFile
-    >>> from zope.publisher.browser import TestRequest
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'simple')
-    >>> display_file()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blob')
-    >>> data = display_file()
-    >>> isinstance(data, file)
-    True
-    >>> data.read()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'image')
-    >>> display_file() == zptlogo
-    True
-
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-
-    >>> request = TestRequest()
-    >>> display_file = DisplayFile(container, request).publishTraverse(request, 'blobimage')
-    >>> data = display_file()
-    >>> isinstance(data, file)
-    True
-    >>> data.read() == zptlogo
-    True
-    >>> request.response.getHeader('Content-Length')
-    '341'
-    >>> request.response.getHeader('Content-Type')
-    'image/foo'
-    >>> request.response.getHeader('Content-Disposition')
-
-Specifying the primary field
-----------------------------
-
-To use the @@download view without specifying the field in the URL, the
-primary field information must be registered with an adapter. (Frameworks such
-as plone.dexterity may already have done this for you.)
-
-    >>> from plone.rfc822.interfaces import IPrimaryFieldInfo
-    >>> from zope.component import adapts
-
-    >>> class FieldContainerPrimaryFieldInfo(object):
-    ...     implements(IPrimaryFieldInfo)
-    ...     adapts(IFileContainer)
-    ...     fieldname = 'simple'
-    ...     field = IFileContainer['simple']
-    ...     def __init__(self, context):
-    ...         self.value = context.simple
-
-    >>> from zope.component import getSiteManager
-    >>> components = getSiteManager()
-    >>> components.registerAdapter(FieldContainerPrimaryFieldInfo)
-
-We will test this with a dummy request, faking traversal.
-
-    >>> request = TestRequest()
-    >>> download = Download(container, request)
-    >>> download()
-    'dummy test data'
-    >>> request.response.getHeader('Content-Length')
-    '15'
-    >>> request.response.getHeader('Content-Type')
-    'text/plain'
-    >>> request.response.getHeader('Content-Disposition')
-    "attachment; filename*=UTF-8''test.txt"
-
-Image scales
-------------
-
-This package can handle the creation, storage, and retrieval of arbitrarily
-sized scaled versions of images stored in NamedImage or NamedBlobImage fields.
-
-Image scales are accessed via an @@images view that is available for any item
-providing ``plone.namedfile.interfaces.IImageScaleTraversable``.  There are
-several ways that you may reference scales from page templates.
-
-1. for full control you may do the tag generation explicitly::
-
-     <img tal:define="scales context/@@images;
-                      thumbnail python: scales.scale('image', width=64, height=64);"
-          tal:condition="thumbnail"
-          tal:attributes="src thumbnail/url;
-                          width thumbnail/width;
-                          height thumbnail/height" />
-
-   This would create an up to 64 by 64 pixel scaled down version of the image
-   stored in the "image" field.  It also allows for passing in additional
-   parameters support by `plone.scale`_'s ``scaleImage`` function, e.g.
-   ``direction`` or ``quality``.
-
-   .. _`plone.scale`: http://pypi.python.org/pypi/plone.scale
-
-2. for automatic tag generation with extra parameters you would use::
-
-     <img tal:define="scale context/@@images"
-          tal:replace="structure python: scale.scale('image',
-                       width=1200, height=800, direction='down').tag()" />
-
-3. It is possible to access scales via predefined named scale sizes, rather
-   than hardcoding the dimensions every time you access a scale.  The scale
-   sizes are found via calling a utility providing
-   ``plone.namedfile.interfaces.IAvailableSizes``, which should return a dict of
-   scale name => (width, height).  A scale called 'mini' could then be accessed
-   like this::
-
-     <img tal:define="scale context/@@images"
-          tal:replace="structure python: scale.scale('image',
-                       scale='mini').tag()" />
-
-   This would use the predefined scale size "mini" to determine the desired
-   image dimensions, but still allow to pass in extra parameters.
-
-4. a convenience short-cut for option 3 can be used::
-
-     <img tal:replace="structure context/@@images/image/mini" />
-
-5. and lastly, the short-cut can also be used to render the unscaled image::
-
-     <img tal:replace="structure context/@@images/image" />
diff --git a/plone/namedfile/utils.py b/plone/namedfile/utils.py
index 8d53684..08317b2 100644
--- a/plone/namedfile/utils.py
+++ b/plone/namedfile/utils.py
@@ -1,8 +1,10 @@
-import os.path
+# -*- coding: utf-8 -*-
+from plone.namedfile.interfaces import IBlobby
+
 import mimetypes
+import os.path
 import urllib
 
-from plone.namedfile.interfaces import IBlobby
 
 try:
     # use this to stream data if we can
@@ -10,16 +12,23 @@
 except ImportError:
     filestream_iterator = None
 
+
 def safe_basename(filename):
     """Get the basename of the given filename, regardless of which platform
     (Windows or Unix) it originated from.
     """
-    return filename[max(filename.rfind('/'),
-                        filename.rfind('\\'),
-                        filename.rfind(':'),
-                        )+1:]
+    fslice = max(
+        filename.rfind('/'),
+        filename.rfind('\\'),
+        filename.rfind(':'),
+    ) + 1
+    return filename[fslice:]
+
 
-def get_contenttype(file=None, filename=None, default='application/octet-stream'):
+def get_contenttype(
+        file=None,
+        filename=None,
+        default='application/octet-stream'):
     """Get the MIME content type of the given file and/or filename.
     """
 
@@ -34,6 +43,7 @@ def get_contenttype(file=None, filename=None, default='application/octet-stream'
 
     return default
 
+
 def set_headers(file, response, filename=None):
     """Set response headers for the given file. If filename is given, set
     the Content-Disposition to attachment.
@@ -41,14 +51,18 @@ def set_headers(file, response, filename=None):
 
     contenttype = get_contenttype(file)
 
-    response.setHeader("Content-Type", contenttype)
-    response.setHeader("Content-Length", file.getSize())
+    response.setHeader('Content-Type', contenttype)
+    response.setHeader('Content-Length', file.getSize())
 
     if filename is not None:
         if not isinstance(filename, unicode):
-            filename = unicode(filename, 'utf-8', errors="ignore")
-        filename = urllib.quote(filename.encode("utf8"))
-        response.setHeader("Content-Disposition", "attachment; filename*=UTF-8''%s" % filename)
+            filename = unicode(filename, 'utf-8', errors='ignore')
+        filename = urllib.quote(filename.encode('utf8'))
+        response.setHeader(
+            'Content-Disposition',
+            'attachment; filename*=UTF-8\'\'{0}'.format(filename)
+        )
+
 
 def stream_data(file):
     """Return the given file as a stream if possible.
diff --git a/plone/namedfile/utils.rst b/plone/namedfile/utils.rst
new file mode 100644
index 0000000..c5833ca
--- /dev/null
+++ b/plone/namedfile/utils.rst
@@ -0,0 +1,20 @@
+Utility functions
+=================
+
+safe_basename
+-------------
+
+::
+
+    >>> from plone.namedfile.utils import safe_basename
+
+Used in the widget itself to strip off any path, regardless of platform::
+
+    >>> safe_basename('/farmyard/cows/daisy')
+    'daisy'
+
+    >>> safe_basename('F:\FARMYARD\COWS\DAISY.TXT')
+    'DAISY.TXT'
+
+    >>> safe_basename('Macintosh Farmyard:Cows:Daisy Text File')
+    'Daisy Text File'
diff --git a/plone/namedfile/utils.txt b/plone/namedfile/utils.txt
deleted file mode 100644
index a880ba3..0000000
--- a/plone/namedfile/utils.txt
+++ /dev/null
@@ -1,18 +0,0 @@
-Utility functions
-=================
-
-safe_basename
--------------
-
-    >>> from plone.namedfile.utils import safe_basename
-
-Used in the widget itself to strip off any path, regardless of platform.
-
-    >>> safe_basename('/farmyard/cows/daisy')
-    'daisy'
-
-    >>> safe_basename('F:\FARMYARD\COWS\DAISY.TXT')
-    'DAISY.TXT'
-
-    >>> safe_basename('Macintosh Farmyard:Cows:Daisy Text File')
-    'Daisy Text File'
diff --git a/plone/namedfile/z3c-blobfile.zcml b/plone/namedfile/z3c-blobfile.zcml
index de812ab..b3083fa 100644
--- a/plone/namedfile/z3c-blobfile.zcml
+++ b/plone/namedfile/z3c-blobfile.zcml
@@ -1,6 +1,4 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    i18n_domain='zope'>
+<configure xmlns="http://namespaces.zope.org/zope">
 
   <utility
       name="__builtin__.str"
diff --git a/setup.py b/setup.py
index 1c2e4c5..0c450af 100644
--- a/setup.py
+++ b/setup.py
@@ -1,54 +1,62 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 import os
 
+
 version = '3.0.8.dev0'
+description = "File types and fields for images, files and blob files with filenames"  # noqa
+long_description = ('\n\n'.join([
+    open('README.rst').read(),
+    open('CHANGES.rst').read(),
+    open(os.path.join("plone", "namedfile", "usage.rst")).read(),
+]))
 
-long_description = open("README.rst").read()
-long_description += "\n"
-long_description += open("CHANGES.rst").read()
-long_description += "\n"
-long_description += open(os.path.join("plone", "namedfile", "usage.txt")).read()
 
-setup(name='plone.namedfile',
-      version=version,
-      description="File types and fields for images, files and blob files with filenames",
-      long_description=long_description,
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          "License :: OSI Approved :: BSD License",
-          ],
-      keywords='plone named file image blob',
-      author='Laurence Rowe, Martin Aspeli',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.namedfile',
-      license='BSD',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'zope.app.file',
-          'zope.browserpage',
-          'zope.component',
-          'zope.copy',
-          'zope.security',
-          'zope.traversing',
-          'plone.rfc822>=1.0b2',
-      ],
-      extras_require={
-          'blobs': [],  # BBB
-          'editor': ['plone.schemaeditor'],
-          'supermodel': ['plone.supermodel'],
-          'marshaler': [],  # for BBB, we now depend on this
-          'scales': ['plone.scale[storage] >=1.1'],
-          'test': [
-              'plone.namedfile[supermodel, scales]',
-              'lxml', 'Pillow', 'Zope2',
-          ],
-      },
-      )
+setup(
+    name='plone.namedfile',
+    version=version,
+    description=description,
+    long_description=long_description,
+    classifiers=[
+        "Framework :: Plone",
+        "Framework :: Plone :: 5.0",
+        "Programming Language :: Python",
+        "Programming Language :: Python :: 2.7",
+        "Topic :: Software Development :: Libraries :: Python Modules",
+        "License :: OSI Approved :: BSD License",
+    ],
+    keywords='plone named file image blob',
+    author='Laurence Rowe, Martin Aspeli',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.namedfile',
+    license='BSD',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'plone.rfc822>=1.0b2',
+        'zope.app.file',
+        'zope.browserpage',
+        'zope.component',
+        'zope.copy',
+        'zope.security',
+        'zope.traversing',
+    ],
+    extras_require={
+        'editor': ['plone.schemaeditor'],
+        'scales': ['plone.scale[storage] >=1.1'],
+        'supermodel': ['plone.supermodel'],
+        'test': [
+            'lxml',
+            'Pillow',
+            'plone.namedfile[supermodel, scales]',
+            'Zope2',
+        ],
+        # BBB
+        'blobs': [],
+        'marshaler': [],
+    },
+)


