Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-10T04:47:29+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/12277ad50f6a8c30425333b50c9d7ac334eeca4f

Require Python 3.8 or higher.

Files changed:
A news/3635.bugfix
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/Portal.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/browser/icons.py
M Products/CMFPlone/browser/login/login.py
M Products/CMFPlone/browser/login/login_help.py
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/browser/test_rendering.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
M Products/CMFPlone/patches/unicodehacks.py
M Products/CMFPlone/relationhelper.py
M Products/CMFPlone/resources/utils.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testSearch.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/test_expressions.py
M Products/CMFPlone/utils.py
M setup.py

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 54a24caf45..e0114c5f38 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -151,8 +151,8 @@ def allowedRolesAndUsers(obj):\n @indexer(Interface)\n def object_provides(obj):\n     return tuple(\n-        [i.__identifier__ for i in providedBy(obj).flattened()\n-         if i.__identifier__ not in DENIED_INTERFACES]\n+        i.__identifier__ for i in providedBy(obj).flattened()\n+         if i.__identifier__ not in DENIED_INTERFACES\n     )\n \n \ndiff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py\nindex a3057b0a6a..15541f38b8 100644\n--- a/Products/CMFPlone/Portal.py\n+++ b/Products/CMFPlone/Portal.py\n@@ -116,7 +116,7 @@ def __delattr__(self, name):\n \n     # From PortalObjectBase\n     def __init__(self, id, title=\'\'):\n-        super(PloneSite, self).__init__(id, title=title)\n+        super().__init__(id, title=title)\n         components = PersistentComponents(\'++etc++site\')\n         components.__parent__ = self\n         self.setSiteManager(components)\n@@ -135,7 +135,7 @@ def __before_publishing_traverse__(self, arg1, arg2=None):\n             pass\n         self.setupCurrentSkin(REQUEST)\n \n-        super(PloneSite, self).__before_publishing_traverse__(arg1, arg2)\n+        super().__before_publishing_traverse__(arg1, arg2)\n \n     # Concept from OFS.OrderSupport\n     @security.protected(permissions.AccessContentsInformation)\ndiff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py\nindex 7085bb42c5..8ca1e2e124 100644\n--- a/Products/CMFPlone/WorkflowTool.py\n+++ b/Products/CMFPlone/WorkflowTool.py\n@@ -258,7 +258,7 @@ def getWorklistsResults(self):\n                                 objects_by_path[absurl] = (o.modified(), o)\n \n         results = objects_by_path.values()\n-        return tuple([obj[1] for obj in sorted(results)])\n+        return tuple(obj[1] for obj in sorted(results))\n \n     security.declareProtected(ManagePortal, \'getChainForPortalType\')\n \ndiff --git a/Products/CMFPlone/browser/icons.py b/Products/CMFPlone/browser/icons.py\nindex 572fe3cf1c..b0d1d9e568 100644\n--- a/Products/CMFPlone/browser/icons.py\n+++ b/Products/CMFPlone/browser/icons.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from OFS.Image import File\n from plone.registry.interfaces import IRegistry\ndiff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex d655c226ea..31c0cdf72a 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -251,7 +251,7 @@ def __call__(self):\n             url = f\'{portal.absolute_url():s}/login\'\n             came_from = self.request.get(\'came_from\', None)\n             if came_from:\n-                url += \'?came_from={:s}\'.format(parse.quote(came_from))\n+                url += f\'?came_from={parse.quote(came_from):s}\'\n         else:\n             url = f\'{portal.absolute_url():s}/insufficient-privileges\'\n \ndiff --git a/Products/CMFPlone/browser/login/login_help.py b/Products/CMFPlone/browser/login/login_help.py\nindex 7409a585e8..6ad2dd8d76 100644\n--- a/Products/CMFPlone/browser/login/login_help.py\n+++ b/Products/CMFPlone/browser/login/login_help.py\n@@ -54,7 +54,7 @@ class RequestResetPassword(form.Form):\n     render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n \n     def updateActions(self):\n-        super(RequestResetPassword, self).updateActions()\n+        super().updateActions()\n         self.actions[\'reset\'].addClass(\'btn-primary\')\n \n     def updateWidgets(self):\n@@ -107,7 +107,7 @@ class RequestUsername(form.Form):\n     render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n \n     def updateActions(self):\n-        super(RequestUsername, self).updateActions()\n+        super().updateActions()\n         self.actions[\'get_username\'].addClass(\'btn-primary\')\n \n     @button.buttonAndHandler(\n@@ -188,7 +188,7 @@ def encoded_mail_sender(self):\n         mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_ = mail_settings.email_from_name\n         mail = mail_settings.email_from_address\n-        return \'"{}" <{}>\'.format(self.encode_mail_header(from_), mail)\n+        return f\'"{self.encode_mail_header(from_)}" <{mail}>\'\n \n \n @implementer(ILoginHelpForm)\ndiff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex f2369f35d6..ec543900cd 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -48,7 +48,7 @@ def encoded_mail_sender(self):\n         mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_ = mail_settings.email_from_name\n         mail = mail_settings.email_from_address\n-        return \'"{}" <{}>\'.format(self.encode_mail_header(from_).encode(), mail)\n+        return f\'"{self.encode_mail_header(from_).encode()}" <{mail}>\'\n \n     def registered_notify_subject(self):\n         portal_name = self.portal_state().portal_title()\ndiff --git a/Products/CMFPlone/browser/test_rendering.py b/Products/CMFPlone/browser/test_rendering.py\nindex b3c567068d..b4c42e9cc0 100644\n--- a/Products/CMFPlone/browser/test_rendering.py\n+++ b/Products/CMFPlone/browser/test_rendering.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex abf44c5cdd..5bd1f178cd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -139,8 +139,8 @@ def test_redirection_controlpanel_set(self):\n         now = DateTime(\'2022-02-03\')\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=now,\n             )\n         redirects = RedirectionSet()\n@@ -182,8 +182,8 @@ def test_redirection_controlpanel_batching(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n         view = getMultiAdapter(\n             (self.layer[\'portal\'], self.layer[\'request\']),\n@@ -225,13 +225,13 @@ def test_redirection_controlpanel_filtering(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo1/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo1/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo2/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo2/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n \n         redirects = RedirectionSet()\n@@ -282,14 +282,14 @@ def test_redirection_controlpanel_filter_manual(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(100):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 manual=False,\n             )\n         for i in range(100, 300):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 manual=True,\n             )\n \n@@ -333,8 +333,8 @@ def test_redirection_controlpanel_filter_date(self):\n         time0 = DateTime(\'2001-01-01\')\n         for i in range(400):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=time0 + i,\n             )\n \n@@ -802,8 +802,8 @@ def test_download_bigger(self):\n         now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n         for i in range(2000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=now,\n                 manual=True,\n             )\n@@ -839,7 +839,7 @@ def test_download_upload(self):\n         now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n         for i in range(10):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n                 f\'{portal_path:s}/test-folder\',\n                 now=now,\n                 manual=True,\ndiff --git a/Products/CMFPlone/patches/unicodehacks.py b/Products/CMFPlone/patches/unicodehacks.py\nindex ab13277482..c6ebf7499f 100644\n--- a/Products/CMFPlone/patches/unicodehacks.py\n+++ b/Products/CMFPlone/patches/unicodehacks.py\n@@ -14,11 +14,11 @@ def _nulljoin(valuelist):\n \n def new__call__(self, econtext):\n     try:\n-        return self._expr % tuple([var(econtext) for var in self._vars])\n+        return self._expr % tuple(var(econtext) for var in self._vars)\n     except UnicodeDecodeError:\n         pass\n-    return self._expr % tuple([_unicode_replace(var(econtext))\n-                               for var in self._vars])\n+    return self._expr % tuple(_unicode_replace(var(econtext))\n+                               for var in self._vars)\n \n \n class FasterStringIO(list):\ndiff --git a/Products/CMFPlone/relationhelper.py b/Products/CMFPlone/relationhelper.py\nindex da92cccb97..a30a43edc4 100644\n--- a/Products/CMFPlone/relationhelper.py\n+++ b/Products/CMFPlone/relationhelper.py\n@@ -62,7 +62,7 @@ def get_relations_stats():\n             rel = relation_catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n             broken[\'Object is missing\'] += 1\n-            logger.info(\'Token {} has no object.\'.format(token))\n+            logger.info(f\'Token {token} has no object.\')\n             continue\n \n         if rel.isBroken():\n@@ -84,7 +84,7 @@ def get_all_relations():\n         try:\n             rel = relation_catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n-            logger.info(\'Token {} has no object.\'.format(token))\n+            logger.info(f\'Token {token} has no object.\')\n             continue\n \n         if rel.from_object and rel.to_object:\ndiff --git a/Products/CMFPlone/resources/utils.py b/Products/CMFPlone/resources/utils.py\nindex 3409e53549..e72f9553fe 100644\n--- a/Products/CMFPlone/resources/utils.py\n+++ b/Products/CMFPlone/resources/utils.py\n@@ -30,7 +30,7 @@ def get_production_resource_directory():\n     timestamp = production_folder.readFile("timestamp.txt")\n     if isinstance(timestamp, bytes):\n         timestamp = timestamp.decode()\n-    return "{}/++unique++{}".format(PRODUCTION_RESOURCE_DIRECTORY, timestamp)\n+    return f"{PRODUCTION_RESOURCE_DIRECTORY}/++unique++{timestamp}"\n \n \n def get_resource(context, path):\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex 833ef3b456..685029014b 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -297,5 +297,5 @@ class KlassInterfaceTest(zope_interface_test):\n def test_suite():\n     suite = unittest.TestSuite()\n     for test in tests:\n-        suite.addTest(unittest.makeSuite(test))\n+        suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(test))\n     return suite\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 0e6f786e55..45a9057579 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -366,5 +366,5 @@ def test_suite():\n     above\n     """\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestSection))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestSection))\n     return suite\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex dc1eff08c1..9ba5eceefb 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -156,7 +156,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \ndiff --git a/Products/CMFPlone/tests/test_expressions.py b/Products/CMFPlone/tests/test_expressions.py\nindex 9d950fae46..fbec4e5c5b 100644\n--- a/Products/CMFPlone/tests/test_expressions.py\n+++ b/Products/CMFPlone/tests/test_expressions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from AccessControl.Permissions import view_management_screens\n from AccessControl.SecurityInfo import ClassSecurityInfo\n@@ -29,7 +28,7 @@\n path = os.path.dirname(__file__)\n \n \n-class DummyView(object):\n+class DummyView:\n \n     __name__ = "dummy-view"\n     _authenticator = "secret"\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 6a2da74b8e..45a651fb95 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -400,7 +400,7 @@ def _unrestricted_rename(container, id, new_id):\n             action=\'manage_main\'))\n     ob = container._getOb(id)\n     if not ob.cb_isMoveable():\n-        raise CopyError(\'Not Supported {}\'.format(escape(id)))\n+        raise CopyError(f\'Not Supported {escape(id)}\')\n     try:\n         ob._notifyOfCopyTo(container, op=1)\n     except:\ndiff --git a/news/3635.bugfix b/news/3635.bugfix\nnew file mode 100644\nindex 0000000000..0b65b9fba5\n--- /dev/null\n+++ b/news/3635.bugfix\n@@ -0,0 +1 @@\n+Require Python 3.8 or higher.  [maurits]\ndiff --git a/setup.py b/setup.py\nindex 0087a15be4..38a617c0bf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,6 +24,7 @@\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n     ],\n+    python_requires=\'>=3.8\',\n     keywords=\'Plone CMF Python Zope CMS Webapplication\',\n     author=\'Plone Foundation\',\n     author_email=\'releasemanager@plone.org\',\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-09-12T10:29:50+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/fc593968d54a11d6746ffdc7d59cde0b54e38926

Merge pull request #3639 from plone/maurits-require-python38

Require Python 3.8 or higher.

Files changed:
A news/3635.bugfix
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/Portal.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/browser/icons.py
M Products/CMFPlone/browser/login/login.py
M Products/CMFPlone/browser/login/login_help.py
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/browser/test_rendering.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
M Products/CMFPlone/patches/unicodehacks.py
M Products/CMFPlone/relationhelper.py
M Products/CMFPlone/resources/utils.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testSearch.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/test_expressions.py
M Products/CMFPlone/utils.py
M setup.py

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 54a24caf45..e0114c5f38 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -151,8 +151,8 @@ def allowedRolesAndUsers(obj):\n @indexer(Interface)\n def object_provides(obj):\n     return tuple(\n-        [i.__identifier__ for i in providedBy(obj).flattened()\n-         if i.__identifier__ not in DENIED_INTERFACES]\n+        i.__identifier__ for i in providedBy(obj).flattened()\n+         if i.__identifier__ not in DENIED_INTERFACES\n     )\n \n \ndiff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py\nindex a3057b0a6a..15541f38b8 100644\n--- a/Products/CMFPlone/Portal.py\n+++ b/Products/CMFPlone/Portal.py\n@@ -116,7 +116,7 @@ def __delattr__(self, name):\n \n     # From PortalObjectBase\n     def __init__(self, id, title=\'\'):\n-        super(PloneSite, self).__init__(id, title=title)\n+        super().__init__(id, title=title)\n         components = PersistentComponents(\'++etc++site\')\n         components.__parent__ = self\n         self.setSiteManager(components)\n@@ -135,7 +135,7 @@ def __before_publishing_traverse__(self, arg1, arg2=None):\n             pass\n         self.setupCurrentSkin(REQUEST)\n \n-        super(PloneSite, self).__before_publishing_traverse__(arg1, arg2)\n+        super().__before_publishing_traverse__(arg1, arg2)\n \n     # Concept from OFS.OrderSupport\n     @security.protected(permissions.AccessContentsInformation)\ndiff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py\nindex 7085bb42c5..8ca1e2e124 100644\n--- a/Products/CMFPlone/WorkflowTool.py\n+++ b/Products/CMFPlone/WorkflowTool.py\n@@ -258,7 +258,7 @@ def getWorklistsResults(self):\n                                 objects_by_path[absurl] = (o.modified(), o)\n \n         results = objects_by_path.values()\n-        return tuple([obj[1] for obj in sorted(results)])\n+        return tuple(obj[1] for obj in sorted(results))\n \n     security.declareProtected(ManagePortal, \'getChainForPortalType\')\n \ndiff --git a/Products/CMFPlone/browser/icons.py b/Products/CMFPlone/browser/icons.py\nindex 572fe3cf1c..b0d1d9e568 100644\n--- a/Products/CMFPlone/browser/icons.py\n+++ b/Products/CMFPlone/browser/icons.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from OFS.Image import File\n from plone.registry.interfaces import IRegistry\ndiff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex d655c226ea..31c0cdf72a 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -251,7 +251,7 @@ def __call__(self):\n             url = f\'{portal.absolute_url():s}/login\'\n             came_from = self.request.get(\'came_from\', None)\n             if came_from:\n-                url += \'?came_from={:s}\'.format(parse.quote(came_from))\n+                url += f\'?came_from={parse.quote(came_from):s}\'\n         else:\n             url = f\'{portal.absolute_url():s}/insufficient-privileges\'\n \ndiff --git a/Products/CMFPlone/browser/login/login_help.py b/Products/CMFPlone/browser/login/login_help.py\nindex 7409a585e8..6ad2dd8d76 100644\n--- a/Products/CMFPlone/browser/login/login_help.py\n+++ b/Products/CMFPlone/browser/login/login_help.py\n@@ -54,7 +54,7 @@ class RequestResetPassword(form.Form):\n     render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n \n     def updateActions(self):\n-        super(RequestResetPassword, self).updateActions()\n+        super().updateActions()\n         self.actions[\'reset\'].addClass(\'btn-primary\')\n \n     def updateWidgets(self):\n@@ -107,7 +107,7 @@ class RequestUsername(form.Form):\n     render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n \n     def updateActions(self):\n-        super(RequestUsername, self).updateActions()\n+        super().updateActions()\n         self.actions[\'get_username\'].addClass(\'btn-primary\')\n \n     @button.buttonAndHandler(\n@@ -188,7 +188,7 @@ def encoded_mail_sender(self):\n         mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_ = mail_settings.email_from_name\n         mail = mail_settings.email_from_address\n-        return \'"{}" <{}>\'.format(self.encode_mail_header(from_), mail)\n+        return f\'"{self.encode_mail_header(from_)}" <{mail}>\'\n \n \n @implementer(ILoginHelpForm)\ndiff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex f2369f35d6..ec543900cd 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -48,7 +48,7 @@ def encoded_mail_sender(self):\n         mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_ = mail_settings.email_from_name\n         mail = mail_settings.email_from_address\n-        return \'"{}" <{}>\'.format(self.encode_mail_header(from_).encode(), mail)\n+        return f\'"{self.encode_mail_header(from_).encode()}" <{mail}>\'\n \n     def registered_notify_subject(self):\n         portal_name = self.portal_state().portal_title()\ndiff --git a/Products/CMFPlone/browser/test_rendering.py b/Products/CMFPlone/browser/test_rendering.py\nindex b3c567068d..b4c42e9cc0 100644\n--- a/Products/CMFPlone/browser/test_rendering.py\n+++ b/Products/CMFPlone/browser/test_rendering.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex abf44c5cdd..5bd1f178cd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -139,8 +139,8 @@ def test_redirection_controlpanel_set(self):\n         now = DateTime(\'2022-02-03\')\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=now,\n             )\n         redirects = RedirectionSet()\n@@ -182,8 +182,8 @@ def test_redirection_controlpanel_batching(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n         view = getMultiAdapter(\n             (self.layer[\'portal\'], self.layer[\'request\']),\n@@ -225,13 +225,13 @@ def test_redirection_controlpanel_filtering(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo1/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo1/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n         for i in range(1000):\n             storage.add(\n-                \'{:s}/foo2/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo2/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n             )\n \n         redirects = RedirectionSet()\n@@ -282,14 +282,14 @@ def test_redirection_controlpanel_filter_manual(self):\n         portal_path = self.layer[\'portal\'].absolute_url_path()\n         for i in range(100):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 manual=False,\n             )\n         for i in range(100, 300):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 manual=True,\n             )\n \n@@ -333,8 +333,8 @@ def test_redirection_controlpanel_filter_date(self):\n         time0 = DateTime(\'2001-01-01\')\n         for i in range(400):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=time0 + i,\n             )\n \n@@ -802,8 +802,8 @@ def test_download_bigger(self):\n         now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n         for i in range(2000):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n-                \'{:s}/bar/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n+                f\'{portal_path:s}/bar/{str(i):s}\',\n                 now=now,\n                 manual=True,\n             )\n@@ -839,7 +839,7 @@ def test_download_upload(self):\n         now = DateTime(\'2019/01/27 10:00:00 GMT-3\')\n         for i in range(10):\n             storage.add(\n-                \'{:s}/foo/{:s}\'.format(portal_path, str(i)),\n+                f\'{portal_path:s}/foo/{str(i):s}\',\n                 f\'{portal_path:s}/test-folder\',\n                 now=now,\n                 manual=True,\ndiff --git a/Products/CMFPlone/patches/unicodehacks.py b/Products/CMFPlone/patches/unicodehacks.py\nindex ab13277482..c6ebf7499f 100644\n--- a/Products/CMFPlone/patches/unicodehacks.py\n+++ b/Products/CMFPlone/patches/unicodehacks.py\n@@ -14,11 +14,11 @@ def _nulljoin(valuelist):\n \n def new__call__(self, econtext):\n     try:\n-        return self._expr % tuple([var(econtext) for var in self._vars])\n+        return self._expr % tuple(var(econtext) for var in self._vars)\n     except UnicodeDecodeError:\n         pass\n-    return self._expr % tuple([_unicode_replace(var(econtext))\n-                               for var in self._vars])\n+    return self._expr % tuple(_unicode_replace(var(econtext))\n+                               for var in self._vars)\n \n \n class FasterStringIO(list):\ndiff --git a/Products/CMFPlone/relationhelper.py b/Products/CMFPlone/relationhelper.py\nindex da92cccb97..a30a43edc4 100644\n--- a/Products/CMFPlone/relationhelper.py\n+++ b/Products/CMFPlone/relationhelper.py\n@@ -62,7 +62,7 @@ def get_relations_stats():\n             rel = relation_catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n             broken[\'Object is missing\'] += 1\n-            logger.info(\'Token {} has no object.\'.format(token))\n+            logger.info(f\'Token {token} has no object.\')\n             continue\n \n         if rel.isBroken():\n@@ -84,7 +84,7 @@ def get_all_relations():\n         try:\n             rel = relation_catalog.resolveRelationToken(token)\n         except ObjectMissingError:\n-            logger.info(\'Token {} has no object.\'.format(token))\n+            logger.info(f\'Token {token} has no object.\')\n             continue\n \n         if rel.from_object and rel.to_object:\ndiff --git a/Products/CMFPlone/resources/utils.py b/Products/CMFPlone/resources/utils.py\nindex 3409e53549..e72f9553fe 100644\n--- a/Products/CMFPlone/resources/utils.py\n+++ b/Products/CMFPlone/resources/utils.py\n@@ -30,7 +30,7 @@ def get_production_resource_directory():\n     timestamp = production_folder.readFile("timestamp.txt")\n     if isinstance(timestamp, bytes):\n         timestamp = timestamp.decode()\n-    return "{}/++unique++{}".format(PRODUCTION_RESOURCE_DIRECTORY, timestamp)\n+    return f"{PRODUCTION_RESOURCE_DIRECTORY}/++unique++{timestamp}"\n \n \n def get_resource(context, path):\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex 833ef3b456..685029014b 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -297,5 +297,5 @@ class KlassInterfaceTest(zope_interface_test):\n def test_suite():\n     suite = unittest.TestSuite()\n     for test in tests:\n-        suite.addTest(unittest.makeSuite(test))\n+        suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(test))\n     return suite\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 0e6f786e55..45a9057579 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -366,5 +366,5 @@ def test_suite():\n     above\n     """\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestSection))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestSection))\n     return suite\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex dc1eff08c1..9ba5eceefb 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -156,7 +156,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \ndiff --git a/Products/CMFPlone/tests/test_expressions.py b/Products/CMFPlone/tests/test_expressions.py\nindex 9d950fae46..fbec4e5c5b 100644\n--- a/Products/CMFPlone/tests/test_expressions.py\n+++ b/Products/CMFPlone/tests/test_expressions.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from AccessControl.Permissions import view_management_screens\n from AccessControl.SecurityInfo import ClassSecurityInfo\n@@ -29,7 +28,7 @@\n path = os.path.dirname(__file__)\n \n \n-class DummyView(object):\n+class DummyView:\n \n     __name__ = "dummy-view"\n     _authenticator = "secret"\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 6a2da74b8e..45a651fb95 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -400,7 +400,7 @@ def _unrestricted_rename(container, id, new_id):\n             action=\'manage_main\'))\n     ob = container._getOb(id)\n     if not ob.cb_isMoveable():\n-        raise CopyError(\'Not Supported {}\'.format(escape(id)))\n+        raise CopyError(f\'Not Supported {escape(id)}\')\n     try:\n         ob._notifyOfCopyTo(container, op=1)\n     except:\ndiff --git a/news/3635.bugfix b/news/3635.bugfix\nnew file mode 100644\nindex 0000000000..0b65b9fba5\n--- /dev/null\n+++ b/news/3635.bugfix\n@@ -0,0 +1 @@\n+Require Python 3.8 or higher.  [maurits]\ndiff --git a/setup.py b/setup.py\nindex 0087a15be4..38a617c0bf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,6 +24,7 @@\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n     ],\n+    python_requires=\'>=3.8\',\n     keywords=\'Plone CMF Python Zope CMS Webapplication\',\n     author=\'Plone Foundation\',\n     author_email=\'releasemanager@plone.org\',\n'

