Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/8e35d6cf0e62fd7c9d335fb6120532f3a7538219

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M pyproject.toml
M setup.cfg
D .isort.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.isort.cfg b/.isort.cfg\ndeleted file mode 100644\nindex fb79921..0000000\n--- a/.isort.cfg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[settings]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex a76531e..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..23c0b58\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.transformchain {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.transformchain {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/34688d8e3c8d1e5c4085b30d2cd4bcbdbdf6f498

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/transformchain/__init__.py
M plone/transformchain/events.py
M plone/transformchain/interfaces.py
M plone/transformchain/tests.py
M plone/transformchain/transformer.py
M plone/transformchain/zpublisher.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/transformchain/__init__.py b/plone/transformchain/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/transformchain/__init__.py\n+++ b/plone/transformchain/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/transformchain/events.py b/plone/transformchain/events.py\nindex b49267b..61ae45e 100644\n--- a/plone/transformchain/events.py\n+++ b/plone/transformchain/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain.interfaces import IAfterSingleTransformEvent\n from plone.transformchain.interfaces import IAfterTransformsEvent\n from plone.transformchain.interfaces import IBeforeSingleTransformEvent\n@@ -6,7 +5,7 @@\n from zope.interface import implementer\n \n \n-class BaseTransformEvent(object):\n+class BaseTransformEvent:\n \n     def __init__(self, request):\n         self.request = request\n@@ -15,7 +14,7 @@ def __init__(self, request):\n class BaseSingleTransformEvent(BaseTransformEvent):\n \n     def __init__(self, request, name, handler):\n-        super(BaseSingleTransformEvent, self).__init__(request)\n+        super().__init__(request)\n         self.name = name\n         self.handler = handler\n \ndiff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py\nindex 7b69196..41f0746 100644\n--- a/plone/transformchain/interfaces.py\n+++ b/plone/transformchain/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Attribute\n from zope.interface import Interface\n@@ -25,7 +24,7 @@ class ITransform(Interface):\n     positive or negative.\n     """\n \n-    order = schema.Int(title=u"Order")\n+    order = schema.Int(title="Order")\n \n     def transformUnicode(result, encoding):\n         """Called to allow the transformer to modify the result if the result\ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex e606e06..ba9f540 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n from plone.transformchain.interfaces import ITransform\n from plone.transformchain.interfaces import ITransformer\n@@ -30,7 +29,7 @@\n     from ZServer.FTPRequest import FTPRequest\n \n \n-class FauxPubEvent(object):\n+class FauxPubEvent:\n \n     def __init__(self, request):\n         self.request = request\n@@ -44,7 +43,7 @@ class IPublishedMarker(Interface):\n     pass\n \n \n-class FauxResponse(object):\n+class FauxResponse:\n \n     def __init__(self, body=\'\'):\n         self._body = body\n@@ -73,13 +72,13 @@ class FauxFTPRequest(FauxRequest, FTPRequest):\n         pass\n \n \n-class FauxPublished(object):\n+class FauxPublished:\n     pass\n \n \n @implementer(ITransform)\n @adapter(Interface, Interface)\n-class FauxTransformBase(object):\n+class FauxTransformBase:\n \n     order = 0\n \n@@ -112,12 +111,12 @@ def transformBytes(self, result, encoding):\n                 return result + b\' transformed\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' transformed\'\n+                return result + \' transformed\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' transformed\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -137,12 +136,12 @@ def transformBytes(self, result, encoding):\n                 return result + b\' transformed\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' transformed\'\n+                return result + \' transformed\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' transformed\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -168,7 +167,7 @@ class Transform1(FauxTransformBase):\n             def transformBytes(self, result, encoding):\n                 return result + b\' One\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -183,17 +182,17 @@ def test_transform_text(self):\n         class Transform1(FauxTransformBase):\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + \' One\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = u\'Blah\'\n+        result = \'Blah\'\n         encoding = \'utf-8\'\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(u\'Blah One\', new_result)\n+        self.assertEqual(\'Blah One\', new_result)\n \n     def test_transform_iterable(self):\n \n@@ -202,7 +201,7 @@ class Transform1(FauxTransformBase):\n             def transformIterable(self, result, encoding):\n                 return result + [\' One\']\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -217,25 +216,25 @@ def test_transform_mixed(self):\n         class Transform1(FauxTransformBase):\n \n             def transformIterable(self, result, encoding):\n-                return u\'\'.join(result) + u\' One\'\n+                return \'\'.join(result) + \' One\'\n \n         class Transform2(FauxTransformBase):\n \n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + u\' Two\'.encode(encoding)\n+                return result.encode(encoding) + \' Two\'.encode(encoding)\n \n         class Transform3(FauxTransformBase):\n \n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result.decode(encoding) + u\' Three\'\n+                return result.decode(encoding) + \' Three\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform2, name=\'test.two\')\n+        provideAdapter(Transform3, name=\'test.three\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -243,14 +242,14 @@ def transformBytes(self, result, encoding):\n         encoding = \'utf-8\'\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(u\'Blah One Two Three\', new_result)\n+        self.assertEqual(\'Blah One Two Three\', new_result)\n \n     def test_abort(self):\n \n         class Transform1(FauxTransformBase):\n             pass\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name=\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -268,7 +267,7 @@ def transformBytes(self, result, encoding):\n                 return b\'One\'\n \n             def transformUnicode(self, result, encoding):\n-                return u\'One\'\n+                return \'One\'\n \n             def transformIterable(self, result, encoding):\n                 return \'One\'\n@@ -284,14 +283,14 @@ def transformBytes(self, result, encoding):\n                 return result + b\' three\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' three\'\n+                return result + \' three\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' three\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform2, name=\'test.two\')\n+        provideAdapter(Transform3, name=\'test.three\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -311,7 +310,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + \' One\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' One\'\n@@ -324,7 +323,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + \' Two\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Two\'\n@@ -337,14 +336,14 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + \' Three\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Three\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform2, name=\'test.two\')\n+        provideAdapter(Transform3, name=\'test.three\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -364,7 +363,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + \' One\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' One\'\n@@ -377,7 +376,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + \' Two\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Two\'\n@@ -392,14 +391,14 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + \' Three\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Three\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform2, name=\'test.two\')\n+        provideAdapter(Transform3, name=\'test.three\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -428,7 +427,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + \' One\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' One\'\n@@ -441,7 +440,7 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + \' Two\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Two\'\n@@ -456,14 +455,14 @@ def transformBytes(self, result, encoding):\n                 return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + \' Three\'\n \n             def transformIterable(self, result, encoding):\n                 return \'\'.join(result) + \' Three\'\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform2, name=\'test.two\')\n+        provideAdapter(Transform3, name=\'test.three\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n@@ -493,7 +492,7 @@ def setUp(self):\n     def test_applyTransform_webdav_port(self):\n \n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -509,7 +508,7 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_webdav_method(self):\n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -526,7 +525,7 @@ def __call__(self, request, result, encoding):\n     def test_applyTransform_webdav_pathinfo(self):\n \n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -548,7 +547,7 @@ def test_applyTransform_no_utility(self):\n     def test_applyTransform_default_encoding(self):\n \n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -565,7 +564,7 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_other_encoding(self):\n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -583,7 +582,7 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_other_encoding_with_header_missing_space(self):\n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -601,7 +600,7 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_str(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n+        class FauxTransformer:\n \n             def __call__(self, request, result, encoding):\n                 return \'dummystr\'\n@@ -617,10 +616,10 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_unicode(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n+        class FauxTransformer:\n \n             def __call__(self, request, result, encoding):\n-                return u\'dummystr\'\n+                return \'dummystr\'\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -630,11 +629,11 @@ def __call__(self, request, result, encoding):\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(u\'dummystr\', request.response.getBody())\n+        self.assertEqual(\'dummystr\', request.response.getBody())\n \n     def test_applyTransform_iterable(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n+        class FauxTransformer:\n \n             def __call__(self, request, result, encoding):\n                 return [\'iter\', \'one\']\n@@ -656,7 +655,7 @@ def test_applyTransform_streamiterator(self):\n                 out.write(\'foo\')\n \n             @implementer(ITransformer)\n-            class FauxTransformer(object):\n+            class FauxTransformer:\n \n                 def __call__(self, request, result, encoding):\n                     return filestream_iterator(tmp)\n@@ -679,11 +678,11 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_str_input_body(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n+        class FauxTransformer:\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], six.binary_type)\n+                assert isinstance(result[0], bytes)\n                 return \'dummystr\'\n \n         transformer = FauxTransformer()\n@@ -700,21 +699,21 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_unicode_input_body(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n+        class FauxTransformer:\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], six.binary_type)\n-                return u\'dummystr\'\n+                assert isinstance(result[0], bytes)\n+                return \'dummystr\'\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.setBody(u\'<html />\')\n+        request.response.setBody(\'<html />\')\n \n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(u\'dummystr\', request.response.getBody())\n+        self.assertEqual(\'dummystr\', request.response.getBody())\ndiff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex 135a199..7734b2a 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain import events\n from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY\n from plone.transformchain.interfaces import ITransform\n@@ -30,7 +29,7 @@ def _order_getter(pair):\n \n \n @implementer(ITransformer)\n-class Transformer(object):\n+class Transformer:\n     """Delegate the opportunity to transform the response to multiple,\n     ordered adapters.\n     """\n@@ -51,9 +50,9 @@ def __call__(self, request, result, encoding):\n             )\n             for name, handler in handlers:\n                 notify(events.BeforeSingleTransform(request, name, handler))\n-                if isinstance(result, six.text_type):\n+                if isinstance(result, str):\n                     newResult = handler.transformUnicode(result, encoding)\n-                elif isinstance(result, six.binary_type):\n+                elif isinstance(result, bytes):\n                     newResult = handler.transformBytes(result, encoding)\n                 else:\n                     newResult = handler.transformIterable(result, encoding)\n@@ -67,5 +66,5 @@ def __call__(self, request, result, encoding):\n             raise\n         except Exception:\n             LOGGER.exception(\n-                u"Unexpected error whilst trying to apply transform chain"\n+                "Unexpected error whilst trying to apply transform chain"\n             )\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex 5141b93..afc42bf 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain.interfaces import ITransformer\n from zope.component import adapter\n from zope.component import queryUtility\n@@ -67,9 +66,9 @@ def applyTransform(request, body=None):\n             body = response.getBody()\n \n         result = body\n-        if isinstance(result, six.binary_type):\n+        if isinstance(result, bytes):\n             result = [result]\n-        elif isinstance(result, six.text_type):\n+        elif isinstance(result, str):\n             result = [result.encode(encoding)]\n \n         transformed = transformer(request, result, encoding)\n@@ -92,14 +91,14 @@ def applyTransformOnSuccess(event):\n         response.setBody(transformed)\n     # setBody() can deal with byte and unicode strings (and will encode as\n     # necessary)...\n-    elif isinstance(transformed, six.string_types)\\\n-            or isinstance(transformed, six.binary_type):\n+    elif isinstance(transformed, str)\\\n+            or isinstance(transformed, bytes):\n         response.setBody(transformed)\n     # ... but not with iterables\n     else:\n         transformed = map(\n             lambda it: it.decode(\'utf-8\')\n-            if isinstance(it, six.binary_type)\n+            if isinstance(it, bytes)\n             else it,\n             transformed\n         )\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/7e0bb9a0ee341a095d1a077c61668e329f1f70f8

chore: isort

Files changed:
M plone/transformchain/transformer.py

b"diff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex 7734b2a..ee54c15 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -7,10 +7,11 @@\n from zope.event import notify\n from zope.interface import implementer\n \n-import six\n import logging\n-\n import pkg_resources\n+import six\n+\n+\n HAS_ZSERVER = True\n try:\n     dist = pkg_resources.get_distribution('ZServer')\n"

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/18f38bb43a02ff778e0ac03cae2ffb24ff98ff7c

chore: black

Files changed:
M plone/__init__.py
M plone/transformchain/events.py
M plone/transformchain/interfaces.py
M plone/transformchain/tests.py
M plone/transformchain/transformer.py
M plone/transformchain/zpublisher.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/transformchain/events.py b/plone/transformchain/events.py\nindex 61ae45e..8ee6d84 100644\n--- a/plone/transformchain/events.py\n+++ b/plone/transformchain/events.py\n@@ -6,13 +6,11 @@\n \n \n class BaseTransformEvent:\n-\n     def __init__(self, request):\n         self.request = request\n \n \n class BaseSingleTransformEvent(BaseTransformEvent):\n-\n     def __init__(self, request, name, handler):\n         super().__init__(request)\n         self.name = name\ndiff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py\nindex 41f0746..0f3dfc7 100644\n--- a/plone/transformchain/interfaces.py\n+++ b/plone/transformchain/interfaces.py\n@@ -8,7 +8,7 @@\n except ImportError:\n     IBaseTransformer = Interface\n \n-DISABLE_TRANSFORM_REQUEST_KEY = \'plone.transformchain.disable\'\n+DISABLE_TRANSFORM_REQUEST_KEY = "plone.transformchain.disable"\n \n \n class ITransform(Interface):\n@@ -86,32 +86,28 @@ class IBaseTransformEvent(Interface):\n \n     Transform events are notified at different points in transformations.\n     """\n-    request = Attribute(\'The request being affected\')\n+\n+    request = Attribute("The request being affected")\n \n \n class IBeforeTransformsEvent(IBaseTransformEvent):\n-    """Notified before any transforms are started.\n-    """\n+    """Notified before any transforms are started."""\n \n \n class IAfterTransformsEvent(IBaseTransformEvent):\n-    """Notified after all transforms are finished.\n-    """\n+    """Notified after all transforms are finished."""\n \n \n class IBaseSingleTransformEvent(IBaseTransformEvent):\n-    """Base class for a single transformation notification.\n-    """\n+    """Base class for a single transformation notification."""\n \n-    name = Attribute(\'the name of the transformation\')\n-    handler = Attribute(\'the transformation handler\')\n+    name = Attribute("the name of the transformation")\n+    handler = Attribute("the transformation handler")\n \n \n class IBeforeSingleTransformEvent(IBaseSingleTransformEvent):\n-    """Notified before a single Transformation is executed.\n-    """\n+    """Notified before a single Transformation is executed."""\n \n \n class IAfterSingleTransformEvent(IBaseSingleTransformEvent):\n-    """Notified after a single Transformation is executed.\n-    """\n+    """Notified after a single Transformation is executed."""\ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex ba9f540..c9ef79c 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -21,7 +21,7 @@\n \n HAS_ZSERVER = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n+    dist = pkg_resources.get_distribution("ZServer")\n except pkg_resources.DistributionNotFound:\n     HAS_ZSERVER = False\n \n@@ -30,7 +30,6 @@\n \n \n class FauxPubEvent:\n-\n     def __init__(self, request):\n         self.request = request\n \n@@ -44,8 +43,7 @@ class IPublishedMarker(Interface):\n \n \n class FauxResponse:\n-\n-    def __init__(self, body=\'\'):\n+    def __init__(self, body=""):\n         self._body = body\n         self.headers = {}\n \n@@ -57,17 +55,17 @@ def setBody(self, body):\n \n \n class FauxRequest(dict):\n-\n     def __init__(self, published, response=None):\n         if response is None:\n-            response = FauxResponse(\'<html/>\')\n+            response = FauxResponse("<html/>")\n \n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n         self.environ = {}\n \n \n if HAS_ZSERVER:\n+\n     class FauxFTPRequest(FauxRequest, FTPRequest):\n         pass\n \n@@ -79,7 +77,6 @@ class FauxPublished:\n @implementer(ITransform)\n @adapter(Interface, Interface)\n class FauxTransformBase:\n-\n     order = 0\n \n     def __init__(self, published, request):\n@@ -97,413 +94,380 @@ def transformIterable(self, result, encoding):\n \n \n class TestTransformChain(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def setUp(self):\n         self.t = Transformer()\n \n     def test_simple(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return result + b\' transformed\'\n+                return result + b" transformed"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' transformed\'\n+                return result + " transformed"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' transformed\'\n+                return "".join(result) + " transformed"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Blah transformed\', new_result)\n+        self.assertEqual("Blah transformed", new_result)\n \n     def test_off_switch(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 0\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' transformed\'\n+                return result + b" transformed"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' transformed\'\n+                return result + " transformed"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' transformed\'\n+                return "".join(result) + " transformed"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.environ[\'plone.transformchain.disable\'] = True\n+        request.environ["plone.transformchain.disable"] = True\n \n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n         self.assertEqual(None, new_result)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'ZServer is optional\')\n+    @unittest.skipUnless(HAS_ZSERVER, "ZServer is optional")\n     def test_ftp_request_not_transformed(self):\n         request = FauxFTPRequest(FauxPublished())\n-        result = [\'Blah\']\n-        new_result = self.t(request, result, \'utf8\')\n+        result = ["Blah"]\n+        new_result = self.t(request, result, "utf8")\n         self.assertEqual(None, new_result)\n \n     def test_transform_bytes(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = b\'Blah\'\n-        encoding = \'utf-8\'\n+        result = b"Blah"\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(b\'Blah One\', new_result)\n+        self.assertEqual(b"Blah One", new_result)\n \n     def test_transform_text(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformUnicode(self, result, encoding):\n-                return result + \' One\'\n+                return result + " One"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = \'Blah\'\n-        encoding = \'utf-8\'\n+        result = "Blah"\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Blah One\', new_result)\n+        self.assertEqual("Blah One", new_result)\n \n     def test_transform_iterable(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformIterable(self, result, encoding):\n-                return result + [\' One\']\n+                return result + [" One"]\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual([\'Blah\', \' One\'], new_result)\n+        self.assertEqual(["Blah", " One"], new_result)\n \n     def test_transform_mixed(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + \' Two\'.encode(encoding)\n+                return result.encode(encoding) + " Two".encode(encoding)\n \n         class Transform3(FauxTransformBase):\n-\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result.decode(encoding) + \' Three\'\n+                return result.decode(encoding) + " Three"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n-        provideAdapter(Transform2, name=\'test.two\')\n-        provideAdapter(Transform3, name=\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Blah One Two Three\', new_result)\n+        self.assertEqual("Blah One Two Three", new_result)\n \n     def test_abort(self):\n-\n         class Transform1(FauxTransformBase):\n             pass\n \n-        provideAdapter(Transform1, name=\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual([\'Blah\'], new_result)\n+        self.assertEqual(["Blah"], new_result)\n \n     def test_abort_chain(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return b\'One\'\n+                return b"One"\n \n             def transformUnicode(self, result, encoding):\n-                return \'One\'\n+                return "One"\n \n             def transformIterable(self, result, encoding):\n-                return \'One\'\n+                return "One"\n \n         class Transform2(FauxTransformBase):\n             pass\n \n         class Transform3(FauxTransformBase):\n-\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' three\'\n+                return result + b" three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' three\'\n+                return result + " three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' three\'\n+                return "".join(result) + " three"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n-        provideAdapter(Transform2, name=\'test.two\')\n-        provideAdapter(Transform3, name=\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'One three\', new_result)\n+        self.assertEqual("One three", new_result)\n \n     def test_ordering(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n-        provideAdapter(Transform2, name=\'test.two\')\n-        provideAdapter(Transform3, name=\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n     def test_request_marker(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         @implementer(ITransform)\n         @adapter(Interface, IRequestMarker)\n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n-        provideAdapter(Transform2, name=\'test.two\')\n-        provideAdapter(Transform3, name=\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One\', new_result)\n+        self.assertEqual("Initial Two One", new_result)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n         alsoProvides(request, IRequestMarker)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n     def test_published_marker(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         @implementer(ITransform)\n         @adapter(IPublishedMarker, Interface)\n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + \' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=\'test.one\')\n-        provideAdapter(Transform2, name=\'test.two\')\n-        provideAdapter(Transform3, name=\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One\', new_result)\n+        self.assertEqual("Initial Two One", new_result)\n \n         published = FauxPublished()\n         alsoProvides(published, IPublishedMarker)\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n \n class TestZPublisherTransforms(unittest.TestCase):\n-\n     UNIT_TESTING\n \n     def setUp(self):\n         self.t = Transformer()\n \n     def test_applyTransform_webdav_port(self):\n-\n         @implementer(ITransformer)\n         class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'WEBDAV_SOURCE_PORT\'] = \'8081\'\n+        request["WEBDAV_SOURCE_PORT"] = "8081"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_webdav_method(self):\n@@ -512,31 +476,30 @@ class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'REQUEST_METHOD\'] = \'PUT\'\n+        request["REQUEST_METHOD"] = "PUT"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_webdav_pathinfo(self):\n-\n         @implementer(ITransformer)\n         class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'PATH_INFO\'] = \'/foo/bar/manage_DAVget\'\n+        request["PATH_INFO"] = "/foo/bar/manage_DAVget"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_no_utility(self):\n@@ -545,7 +508,6 @@ def test_applyTransform_no_utility(self):\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_default_encoding(self):\n-\n         @implementer(ITransformer)\n         class EncodingCaptureTransformer:\n             encoding = None\n@@ -575,10 +537,10 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html; charset=utf-16\'\n+        request.response.headers["content-type"] = "text/html; charset=utf-16"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'utf-16\', transformer.encoding)\n+        self.assertEqual("utf-16", transformer.encoding)\n \n     def test_applyTransform_other_encoding_with_header_missing_space(self):\n         @implementer(ITransformer)\n@@ -593,17 +555,16 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html;charset=utf-16\'\n+        request.response.headers["content-type"] = "text/html;charset=utf-16"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'utf-16\', transformer.encoding)\n+        self.assertEqual("utf-16", transformer.encoding)\n \n     def test_applyTransform_str(self):\n         @implementer(ITransformer)\n         class FauxTransformer:\n-\n             def __call__(self, request, result, encoding):\n-                return \'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -612,14 +573,13 @@ def __call__(self, request, result, encoding):\n         request = FauxRequest(published)\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_unicode(self):\n         @implementer(ITransformer)\n         class FauxTransformer:\n-\n             def __call__(self, request, result, encoding):\n-                return \'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -629,14 +589,13 @@ def __call__(self, request, result, encoding):\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_iterable(self):\n         @implementer(ITransformer)\n         class FauxTransformer:\n-\n             def __call__(self, request, result, encoding):\n-                return [\'iter\', \'one\']\n+                return ["iter", "one"]\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -645,18 +604,16 @@ def __call__(self, request, result, encoding):\n         request = FauxRequest(published)\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'iterone\', request.response.getBody())\n+        self.assertEqual("iterone", request.response.getBody())\n \n     def test_applyTransform_streamiterator(self):\n         tmp = tempfile.mkstemp()[1]\n         try:\n-\n-            with open(tmp, \'w\') as out:\n-                out.write(\'foo\')\n+            with open(tmp, "w") as out:\n+                out.write("foo")\n \n             @implementer(ITransformer)\n             class FauxTransformer:\n-\n                 def __call__(self, request, result, encoding):\n                     return filestream_iterator(tmp)\n \n@@ -667,53 +624,46 @@ def __call__(self, request, result, encoding):\n             request = FauxRequest(published)\n             applyTransformOnSuccess(FauxPubEvent(request))\n \n-            self.assertTrue(\n-                isinstance(\n-                    request.response.getBody(),\n-                    filestream_iterator\n-                )\n-            )\n+            self.assertTrue(isinstance(request.response.getBody(), filestream_iterator))\n         finally:\n             os.unlink(tmp)\n \n     def test_applyTransform_str_input_body(self):\n         @implementer(ITransformer)\n         class FauxTransformer:\n-\n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n                 assert isinstance(result[0], bytes)\n-                return \'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.setBody(\'<html />\')\n+        request.response.setBody("<html />")\n \n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_unicode_input_body(self):\n         @implementer(ITransformer)\n         class FauxTransformer:\n-\n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n                 assert isinstance(result[0], bytes)\n-                return \'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.setBody(\'<html />\')\n+        request.response.setBody("<html />")\n \n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\ndiff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex ee54c15..3f98a96 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -14,7 +14,7 @@\n \n HAS_ZSERVER = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n+    dist = pkg_resources.get_distribution("ZServer")\n except pkg_resources.DistributionNotFound:\n     HAS_ZSERVER = False\n \n@@ -22,7 +22,7 @@\n     from ZServer.FTPRequest import FTPRequest\n \n \n-LOGGER = logging.getLogger(\'plone.transformchain\')\n+LOGGER = logging.getLogger("plone.transformchain")\n \n \n def _order_getter(pair):\n@@ -44,10 +44,16 @@ def __call__(self, request, result, encoding):\n             return None\n         notify(events.BeforeTransforms(request))\n         try:\n-            published = request.get(\'PUBLISHED\', None)\n+            published = request.get("PUBLISHED", None)\n             handlers = sorted(\n-                getAdapters((published, request,), ITransform),\n-                key=_order_getter\n+                getAdapters(\n+                    (\n+                        published,\n+                        request,\n+                    ),\n+                    ITransform,\n+                ),\n+                key=_order_getter,\n             )\n             for name, handler in handlers:\n                 notify(events.BeforeSingleTransform(request, name, handler))\n@@ -66,6 +72,4 @@ def __call__(self, request, result, encoding):\n         except ConflictError:\n             raise\n         except Exception:\n-            LOGGER.exception(\n-                "Unexpected error whilst trying to apply transform chain"\n-            )\n+            LOGGER.exception("Unexpected error whilst trying to apply transform chain")\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex afc42bf..c439794 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -18,18 +18,17 @@\n     class IPubBeforeAbort(Interface):\n         pass\n \n+\n CHARSET_RE = re.compile(\n-    r\'(?:application|text)/[-+0-9a-z]+\\s*;\\s?charset=([-_0-9a-z]+)\'\n-    r\'(?:(?:\\s*;)|\\Z)\',\n-    re.IGNORECASE\n+    r"(?:application|text)/[-+0-9a-z]+\\s*;\\s?charset=([-_0-9a-z]+)" r"(?:(?:\\s*;)|\\Z)",\n+    re.IGNORECASE,\n )\n \n \n def extractEncoding(response):\n-    """Get the content encoding for the response body\n-    """\n+    """Get the content encoding for the response body"""\n     encoding = default_encoding\n-    ct = response.headers.get(\'content-type\')\n+    ct = response.headers.get("content-type")\n     if ct:\n         match = CHARSET_RE.match(ct)\n         if match:\n@@ -38,21 +37,23 @@ def extractEncoding(response):\n \n \n def isEvilWebDAVRequest(request):\n-    if request.get(\'WEBDAV_SOURCE_PORT\', None):\n+    if request.get("WEBDAV_SOURCE_PORT", None):\n         return True\n \n-    if request.get(\'REQUEST_METHOD\', \'GET\').upper() not in (\'GET\', \'POST\',):\n+    if request.get("REQUEST_METHOD", "GET").upper() not in (\n+        "GET",\n+        "POST",\n+    ):\n         return True\n \n-    if request.get(\'PATH_INFO\', \'\').endswith(\'manage_DAVget\'):\n+    if request.get("PATH_INFO", "").endswith("manage_DAVget"):\n         return True\n \n     return False\n \n \n def applyTransform(request, body=None):\n-    """Apply any transforms by delegating to the ITransformer utility\n-    """\n+    """Apply any transforms by delegating to the ITransformer utility"""\n \n     if isEvilWebDAVRequest(request):\n         return None\n@@ -80,8 +81,7 @@ def applyTransform(request, body=None):\n \n @adapter(IPubBeforeCommit)\n def applyTransformOnSuccess(event):\n-    """Apply the transform after a successful request\n-    """\n+    """Apply the transform after a successful request"""\n     transformed = applyTransform(event.request)\n     if transformed is None:\n         return\n@@ -91,24 +91,19 @@ def applyTransformOnSuccess(event):\n         response.setBody(transformed)\n     # setBody() can deal with byte and unicode strings (and will encode as\n     # necessary)...\n-    elif isinstance(transformed, str)\\\n-            or isinstance(transformed, bytes):\n+    elif isinstance(transformed, str) or isinstance(transformed, bytes):\n         response.setBody(transformed)\n     # ... but not with iterables\n     else:\n         transformed = map(\n-            lambda it: it.decode(\'utf-8\')\n-            if isinstance(it, bytes)\n-            else it,\n-            transformed\n+            lambda it: it.decode("utf-8") if isinstance(it, bytes) else it, transformed\n         )\n-        response.setBody(\'\'.join(transformed))\n+        response.setBody("".join(transformed))\n \n \n @adapter(IPubBeforeAbort)\n def applyTransformOnFailure(event):\n-    """Apply the transform to the error html output\n-    """\n+    """Apply the transform to the error html output"""\n     if event.retry:\n         return\n     # response.status might still be 200 because\ndiff --git a/setup.py b/setup.py\nindex 5c2e9cc..a36b2a4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,16 +2,17 @@\n from setuptools import setup\n \n \n-version = \'2.0.3.dev0\'\n+version = "2.0.3.dev0"\n \n setup(\n-    name=\'plone.transformchain\',\n+    name="plone.transformchain",\n     version=version,\n-    description=("Hook into repoze.zope2 that allows third party packages "\n-                 "to register a sequence of hooks that will be allowed to "\n-                 "modify the response before it is returned to the browser"),\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    description=(\n+        "Hook into repoze.zope2 that allows third party packages "\n+        "to register a sequence of hooks that will be allowed to "\n+        "modify the response before it is returned to the browser"\n+    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n@@ -33,26 +34,26 @@\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'zope2 repoze transform\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.transformchain\',\n-    license=\'BSD\',\n+    keywords="zope2 repoze transform",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.transformchain",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require={\n-        \'repoze\': [\'repoze.zope2\'],\n-        \'test\': \'plone.testing [zca]\',\n+        "repoze": ["repoze.zope2"],\n+        "test": "plone.testing [zca]",\n     },\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.schema\',\n-        \'Zope2>=2.13.23\'\n+        "setuptools",\n+        "six",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.schema",\n+        "Zope2>=2.13.23",\n     ],\n     entry_points="""\n     """,\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/3d6cebc90f211f1f6da2eca8a41a9264e6566f57

chore: zpretty

Files changed:
M plone/transformchain/configure.zcml

b'diff --git a/plone/transformchain/configure.zcml b/plone/transformchain/configure.zcml\nindex 0d8d97b..add5716 100644\n--- a/plone/transformchain/configure.zcml\n+++ b/plone/transformchain/configure.zcml\n@@ -1,12 +1,13 @@\n <configure\n-    i18n_domain="plone.transformchain"\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.transformchain"\n+    >\n   <!-- For Zope 2.10, we need to backport the relevant events -->\n   <include\n       package="ZPublisherEventsBackport"\n       zcml:condition="installed ZPublisherEventsBackport"\n-  />\n+      />\n   <!-- Default transformation utility which delegates to ITransform adapters -->\n   <utility factory=".transformer.Transformer" />\n   <!-- Hooks for ZPublisher -->\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/cbc3a6ca807de929672b689710b566fef3bd81d6

chore: drop six, it was not used already

Files changed:
M plone/transformchain/interfaces.py
M plone/transformchain/tests.py
M plone/transformchain/transformer.py
M plone/transformchain/zpublisher.py
M setup.py

b'diff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py\nindex 0f3dfc7..3915880 100644\n--- a/plone/transformchain/interfaces.py\n+++ b/plone/transformchain/interfaces.py\n@@ -28,9 +28,9 @@ class ITransform(Interface):\n \n     def transformUnicode(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n-        is a six.text_type string.\n+        is text string.\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n@@ -39,7 +39,7 @@ def transformBytes(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n         is an encoded string.\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n@@ -48,7 +48,7 @@ def transformIterable(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n         is an iterable of strings (as per the WSGI specification).\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n@@ -73,7 +73,7 @@ def __call__(request, result, encoding):\n         `encoding` is the default encoding used.\n \n         Return the new result iterable, or a string. If a string is returned,\n-        the Content-Type header will be updated automatically. If a six.text_type\n+        the Content-Type header will be updated automatically. If a text\n         string is returned, it will be encoded with the current content\n         encoding.\n \ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex c9ef79c..52ae707 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -14,7 +14,6 @@\n \n import os\n import pkg_resources\n-import six\n import tempfile\n import unittest\n \ndiff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex 3f98a96..da5bb88 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -9,7 +9,6 @@\n \n import logging\n import pkg_resources\n-import six\n \n \n HAS_ZSERVER = True\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex c439794..9981d18 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -7,7 +7,6 @@\n from ZPublisher.Iterators import IStreamIterator\n \n import re\n-import six\n \n \n try:\ndiff --git a/setup.py b/setup.py\nindex a36b2a4..501e8bf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -49,7 +49,6 @@\n     },\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.interface",\n         "zope.component",\n         "zope.schema",\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/53967415f56a69d4048fb6019a7f69759566a450

feat: drop ZServer optional code path

Files changed:
M plone/transformchain/tests.py
M plone/transformchain/transformer.py

b'diff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex 52ae707..2cc672a 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -13,21 +13,10 @@\n from ZPublisher.Iterators import filestream_iterator\n \n import os\n-import pkg_resources\n import tempfile\n import unittest\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution("ZServer")\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n-if HAS_ZSERVER:\n-    from ZServer.FTPRequest import FTPRequest\n-\n-\n class FauxPubEvent:\n     def __init__(self, request):\n         self.request = request\n@@ -63,12 +52,6 @@ def __init__(self, published, response=None):\n         self.environ = {}\n \n \n-if HAS_ZSERVER:\n-\n-    class FauxFTPRequest(FauxRequest, FTPRequest):\n-        pass\n-\n-\n class FauxPublished:\n     pass\n \n@@ -144,13 +127,6 @@ def transformIterable(self, result, encoding):\n         new_result = self.t(request, result, encoding)\n         self.assertEqual(None, new_result)\n \n-    @unittest.skipUnless(HAS_ZSERVER, "ZServer is optional")\n-    def test_ftp_request_not_transformed(self):\n-        request = FauxFTPRequest(FauxPublished())\n-        result = ["Blah"]\n-        new_result = self.t(request, result, "utf8")\n-        self.assertEqual(None, new_result)\n-\n     def test_transform_bytes(self):\n         class Transform1(FauxTransformBase):\n             def transformBytes(self, result, encoding):\ndiff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex da5bb88..a0898ad 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -8,17 +8,6 @@\n from zope.interface import implementer\n \n import logging\n-import pkg_resources\n-\n-\n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution("ZServer")\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n-if HAS_ZSERVER:\n-    from ZServer.FTPRequest import FTPRequest\n \n \n LOGGER = logging.getLogger("plone.transformchain")\n@@ -35,9 +24,6 @@ class Transformer:\n     """\n \n     def __call__(self, request, result, encoding):\n-        if HAS_ZSERVER and isinstance(request, FTPRequest):\n-            # Don\'t transform FTP requests\n-            return None\n         if request.environ.get(DISABLE_TRANSFORM_REQUEST_KEY, False):\n             # Off switch\n             return None\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/6a22f47bf478a90969a486c45b2901b146c425f7

feat: pyroma (and trove classifiers)

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 501e8bf..dcf1c7b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -18,16 +18,10 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -43,6 +37,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require={\n         "repoze": ["repoze.zope2"],\n         "test": "plone.testing [zca]",\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/7e593785c4c3720cd8b333d7145bff0135860c31

feat: drop repoze.zope2 optional codepath

Last release of repoze.zope2 is from 2009.

Files changed:
M plone/transformchain/interfaces.py

b'diff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py\nindex 3915880..8acbe6d 100644\n--- a/plone/transformchain/interfaces.py\n+++ b/plone/transformchain/interfaces.py\n@@ -3,11 +3,6 @@\n from zope.interface import Interface\n \n \n-try:\n-    from repoze.zope2.interfaces import ITransformer as IBaseTransformer\n-except ImportError:\n-    IBaseTransformer = Interface\n-\n DISABLE_TRANSFORM_REQUEST_KEY = "plone.transformchain.disable"\n \n \n@@ -54,7 +49,7 @@ def transformIterable(result, encoding):\n         """\n \n \n-class ITransformer(IBaseTransformer):\n+class ITransformer(Interface):\n     """Low-level hook. This interface is defined in repoze.zope2, but since\n     this package can be used with the classic ZPublisher as well, we redefine\n     it here. You probably don\'t want to use this directly; you want to use\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:50:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/35d16a9c2b408d456ab6c2527e9f99a80d469e76

feat: drop Zope 2.10 compatibility

On setup.py there was already a version specifier for Zope 2.13 or
higher anyway.

Files changed:
M plone/transformchain/configure.zcml

b'diff --git a/plone/transformchain/configure.zcml b/plone/transformchain/configure.zcml\nindex add5716..da58eaa 100644\n--- a/plone/transformchain/configure.zcml\n+++ b/plone/transformchain/configure.zcml\n@@ -3,11 +3,6 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone.transformchain"\n     >\n-  <!-- For Zope 2.10, we need to backport the relevant events -->\n-  <include\n-      package="ZPublisherEventsBackport"\n-      zcml:condition="installed ZPublisherEventsBackport"\n-      />\n   <!-- Default transformation utility which delegates to ITransform adapters -->\n   <utility factory=".transformer.Transformer" />\n   <!-- Hooks for ZPublisher -->\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-24T23:54:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/6b2ee8172f7128d4de72073128397dff19bf1232

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex dcf1c7b..74f151b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,15 +39,11 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     extras_require={\n-        "repoze": ["repoze.zope2"],\n         "test": "plone.testing [zca]",\n     },\n     install_requires=[\n         "setuptools",\n-        "zope.interface",\n-        "zope.component",\n-        "zope.schema",\n-        "Zope2>=2.13.23",\n+        "Zope",\n     ],\n     entry_points="""\n     """,\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-25T00:01:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/249d90b1daabd714311e81506f094ccaf5c71a30

fix: drop a fallback import

Files changed:
M plone/transformchain/zpublisher.py

b'diff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex 9981d18..1aeb5d5 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -1,23 +1,14 @@\n from plone.transformchain.interfaces import ITransformer\n from zope.component import adapter\n from zope.component import queryUtility\n-from zope.interface import Interface\n from ZPublisher.HTTPResponse import default_encoding\n+from ZPublisher.interfaces import IPubBeforeAbort\n from ZPublisher.interfaces import IPubBeforeCommit\n from ZPublisher.Iterators import IStreamIterator\n \n import re\n \n \n-try:\n-    from ZPublisher.interfaces import IPubBeforeAbort\n-except ImportError:\n-    # old Zope 2.12 or old ZPublisherBackport - this interface won\'t be\n-    # used, most likely, so the effect is that error messages aren\'t styled.\n-    class IPubBeforeAbort(Interface):\n-        pass\n-\n-\n CHARSET_RE = re.compile(\n     r"(?:application|text)/[-+0-9a-z]+\\s*;\\s?charset=([-_0-9a-z]+)" r"(?:(?:\\s*;)|\\Z)",\n     re.IGNORECASE,\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-25T00:01:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/4879111c39ce5357afe0e65055b0227f04505ba3

chore: bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 74f151b..147b821 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "2.0.3.dev0"\n+version = "3.0.0.dev0"\n \n setup(\n     name="plone.transformchain",\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2023-04-25T16:10:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.transformchain/commit/ba6729cfad8f171cdd8c865b3f1a0d78fc3c89b2

Merge pull request #12 from plone/config-with-default-template-8dd36413

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M plone/__init__.py
M plone/transformchain/__init__.py
M plone/transformchain/configure.zcml
M plone/transformchain/events.py
M plone/transformchain/interfaces.py
M plone/transformchain/tests.py
M plone/transformchain/transformer.py
M plone/transformchain/zpublisher.py
M pyproject.toml
M setup.cfg
M setup.py
D .isort.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.isort.cfg b/.isort.cfg\ndeleted file mode 100644\nindex fb79921..0000000\n--- a/.isort.cfg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[settings]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/transformchain/__init__.py b/plone/transformchain/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/transformchain/__init__.py\n+++ b/plone/transformchain/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/transformchain/configure.zcml b/plone/transformchain/configure.zcml\nindex 0d8d97b..da58eaa 100644\n--- a/plone/transformchain/configure.zcml\n+++ b/plone/transformchain/configure.zcml\n@@ -1,12 +1,8 @@\n <configure\n-    i18n_domain="plone.transformchain"\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n-  <!-- For Zope 2.10, we need to backport the relevant events -->\n-  <include\n-      package="ZPublisherEventsBackport"\n-      zcml:condition="installed ZPublisherEventsBackport"\n-  />\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.transformchain"\n+    >\n   <!-- Default transformation utility which delegates to ITransform adapters -->\n   <utility factory=".transformer.Transformer" />\n   <!-- Hooks for ZPublisher -->\ndiff --git a/plone/transformchain/events.py b/plone/transformchain/events.py\nindex b49267b..8ee6d84 100644\n--- a/plone/transformchain/events.py\n+++ b/plone/transformchain/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain.interfaces import IAfterSingleTransformEvent\n from plone.transformchain.interfaces import IAfterTransformsEvent\n from plone.transformchain.interfaces import IBeforeSingleTransformEvent\n@@ -6,16 +5,14 @@\n from zope.interface import implementer\n \n \n-class BaseTransformEvent(object):\n-\n+class BaseTransformEvent:\n     def __init__(self, request):\n         self.request = request\n \n \n class BaseSingleTransformEvent(BaseTransformEvent):\n-\n     def __init__(self, request, name, handler):\n-        super(BaseSingleTransformEvent, self).__init__(request)\n+        super().__init__(request)\n         self.name = name\n         self.handler = handler\n \ndiff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py\nindex 7b69196..8acbe6d 100644\n--- a/plone/transformchain/interfaces.py\n+++ b/plone/transformchain/interfaces.py\n@@ -1,15 +1,9 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Attribute\n from zope.interface import Interface\n \n \n-try:\n-    from repoze.zope2.interfaces import ITransformer as IBaseTransformer\n-except ImportError:\n-    IBaseTransformer = Interface\n-\n-DISABLE_TRANSFORM_REQUEST_KEY = \'plone.transformchain.disable\'\n+DISABLE_TRANSFORM_REQUEST_KEY = "plone.transformchain.disable"\n \n \n class ITransform(Interface):\n@@ -25,13 +19,13 @@ class ITransform(Interface):\n     positive or negative.\n     """\n \n-    order = schema.Int(title=u"Order")\n+    order = schema.Int(title="Order")\n \n     def transformUnicode(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n-        is a six.text_type string.\n+        is text string.\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n@@ -40,7 +34,7 @@ def transformBytes(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n         is an encoded string.\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n@@ -49,13 +43,13 @@ def transformIterable(result, encoding):\n         """Called to allow the transformer to modify the result if the result\n         is an iterable of strings (as per the WSGI specification).\n \n-        Return a new six.text_type string, encoded string or iterable.\n+        Return a new text string, encoded string or iterable.\n \n         Return None to indicate that the response should not be modified.\n         """\n \n \n-class ITransformer(IBaseTransformer):\n+class ITransformer(Interface):\n     """Low-level hook. This interface is defined in repoze.zope2, but since\n     this package can be used with the classic ZPublisher as well, we redefine\n     it here. You probably don\'t want to use this directly; you want to use\n@@ -74,7 +68,7 @@ def __call__(request, result, encoding):\n         `encoding` is the default encoding used.\n \n         Return the new result iterable, or a string. If a string is returned,\n-        the Content-Type header will be updated automatically. If a six.text_type\n+        the Content-Type header will be updated automatically. If a text\n         string is returned, it will be encoded with the current content\n         encoding.\n \n@@ -87,32 +81,28 @@ class IBaseTransformEvent(Interface):\n \n     Transform events are notified at different points in transformations.\n     """\n-    request = Attribute(\'The request being affected\')\n+\n+    request = Attribute("The request being affected")\n \n \n class IBeforeTransformsEvent(IBaseTransformEvent):\n-    """Notified before any transforms are started.\n-    """\n+    """Notified before any transforms are started."""\n \n \n class IAfterTransformsEvent(IBaseTransformEvent):\n-    """Notified after all transforms are finished.\n-    """\n+    """Notified after all transforms are finished."""\n \n \n class IBaseSingleTransformEvent(IBaseTransformEvent):\n-    """Base class for a single transformation notification.\n-    """\n+    """Base class for a single transformation notification."""\n \n-    name = Attribute(\'the name of the transformation\')\n-    handler = Attribute(\'the transformation handler\')\n+    name = Attribute("the name of the transformation")\n+    handler = Attribute("the transformation handler")\n \n \n class IBeforeSingleTransformEvent(IBaseSingleTransformEvent):\n-    """Notified before a single Transformation is executed.\n-    """\n+    """Notified before a single Transformation is executed."""\n \n \n class IAfterSingleTransformEvent(IBaseSingleTransformEvent):\n-    """Notified after a single Transformation is executed.\n-    """\n+    """Notified after a single Transformation is executed."""\ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex e606e06..2cc672a 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n from plone.transformchain.interfaces import ITransform\n from plone.transformchain.interfaces import ITransformer\n@@ -14,24 +13,11 @@\n from ZPublisher.Iterators import filestream_iterator\n \n import os\n-import pkg_resources\n-import six\n import tempfile\n import unittest\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n-if HAS_ZSERVER:\n-    from ZServer.FTPRequest import FTPRequest\n-\n-\n-class FauxPubEvent(object):\n-\n+class FauxPubEvent:\n     def __init__(self, request):\n         self.request = request\n \n@@ -44,9 +30,8 @@ class IPublishedMarker(Interface):\n     pass\n \n \n-class FauxResponse(object):\n-\n-    def __init__(self, body=\'\'):\n+class FauxResponse:\n+    def __init__(self, body=""):\n         self._body = body\n         self.headers = {}\n \n@@ -58,29 +43,22 @@ def setBody(self, body):\n \n \n class FauxRequest(dict):\n-\n     def __init__(self, published, response=None):\n         if response is None:\n-            response = FauxResponse(\'<html/>\')\n+            response = FauxResponse("<html/>")\n \n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n         self.environ = {}\n \n \n-if HAS_ZSERVER:\n-    class FauxFTPRequest(FauxRequest, FTPRequest):\n-        pass\n-\n-\n-class FauxPublished(object):\n+class FauxPublished:\n     pass\n \n \n @implementer(ITransform)\n @adapter(Interface, Interface)\n-class FauxTransformBase(object):\n-\n+class FauxTransformBase:\n     order = 0\n \n     def __init__(self, published, request):\n@@ -98,446 +76,405 @@ def transformIterable(self, result, encoding):\n \n \n class TestTransformChain(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def setUp(self):\n         self.t = Transformer()\n \n     def test_simple(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return result + b\' transformed\'\n+                return result + b" transformed"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' transformed\'\n+                return result + " transformed"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' transformed\'\n+                return "".join(result) + " transformed"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Blah transformed\', new_result)\n+        self.assertEqual("Blah transformed", new_result)\n \n     def test_off_switch(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 0\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' transformed\'\n+                return result + b" transformed"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' transformed\'\n+                return result + " transformed"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' transformed\'\n+                return "".join(result) + " transformed"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.environ[\'plone.transformchain.disable\'] = True\n+        request.environ["plone.transformchain.disable"] = True\n \n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n         self.assertEqual(None, new_result)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'ZServer is optional\')\n-    def test_ftp_request_not_transformed(self):\n-        request = FauxFTPRequest(FauxPublished())\n-        result = [\'Blah\']\n-        new_result = self.t(request, result, \'utf8\')\n-        self.assertEqual(None, new_result)\n-\n     def test_transform_bytes(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = b\'Blah\'\n-        encoding = \'utf-8\'\n+        result = b"Blah"\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(b\'Blah One\', new_result)\n+        self.assertEqual(b"Blah One", new_result)\n \n     def test_transform_text(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + " One"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = u\'Blah\'\n-        encoding = \'utf-8\'\n+        result = "Blah"\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(u\'Blah One\', new_result)\n+        self.assertEqual("Blah One", new_result)\n \n     def test_transform_iterable(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformIterable(self, result, encoding):\n-                return result + [\' One\']\n+                return result + [" One"]\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual([\'Blah\', \' One\'], new_result)\n+        self.assertEqual(["Blah", " One"], new_result)\n \n     def test_transform_mixed(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformIterable(self, result, encoding):\n-                return u\'\'.join(result) + u\' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + u\' Two\'.encode(encoding)\n+                return result.encode(encoding) + " Two".encode(encoding)\n \n         class Transform3(FauxTransformBase):\n-\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result.decode(encoding) + u\' Three\'\n+                return result.decode(encoding) + " Three"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(u\'Blah One Two Three\', new_result)\n+        self.assertEqual("Blah One Two Three", new_result)\n \n     def test_abort(self):\n-\n         class Transform1(FauxTransformBase):\n             pass\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n+        provideAdapter(Transform1, name="test.one")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual([\'Blah\'], new_result)\n+        self.assertEqual(["Blah"], new_result)\n \n     def test_abort_chain(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             def transformBytes(self, result, encoding):\n-                return b\'One\'\n+                return b"One"\n \n             def transformUnicode(self, result, encoding):\n-                return u\'One\'\n+                return "One"\n \n             def transformIterable(self, result, encoding):\n-                return \'One\'\n+                return "One"\n \n         class Transform2(FauxTransformBase):\n             pass\n \n         class Transform3(FauxTransformBase):\n-\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' three\'\n+                return result + b" three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' three\'\n+                return result + " three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' three\'\n+                return "".join(result) + " three"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Blah\']\n-        encoding = \'utf-8\'\n+        result = ["Blah"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'One three\', new_result)\n+        self.assertEqual("One three", new_result)\n \n     def test_ordering(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n     def test_request_marker(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         @implementer(ITransform)\n         @adapter(Interface, IRequestMarker)\n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One\', new_result)\n+        self.assertEqual("Initial Two One", new_result)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n         alsoProvides(request, IRequestMarker)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n     def test_published_marker(self):\n-\n         class Transform1(FauxTransformBase):\n-\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' One\'\n+                return result + b" One"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' One\'\n+                return result + " One"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' One\'\n+                return "".join(result) + " One"\n \n         class Transform2(FauxTransformBase):\n-\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Two\'\n+                return result + b" Two"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Two\'\n+                return result + " Two"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Two\'\n+                return "".join(result) + " Two"\n \n         @implementer(ITransform)\n         @adapter(IPublishedMarker, Interface)\n         class Transform3(FauxTransformBase):\n-\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + b\' Three\'\n+                return result + b" Three"\n \n             def transformUnicode(self, result, encoding):\n-                return result + u\' Three\'\n+                return result + " Three"\n \n             def transformIterable(self, result, encoding):\n-                return \'\'.join(result) + \' Three\'\n+                return "".join(result) + " Three"\n \n-        provideAdapter(Transform1, name=u\'test.one\')\n-        provideAdapter(Transform2, name=u\'test.two\')\n-        provideAdapter(Transform3, name=u\'test.three\')\n+        provideAdapter(Transform1, name="test.one")\n+        provideAdapter(Transform2, name="test.two")\n+        provideAdapter(Transform3, name="test.three")\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One\', new_result)\n+        self.assertEqual("Initial Two One", new_result)\n \n         published = FauxPublished()\n         alsoProvides(published, IPublishedMarker)\n         request = FauxRequest(published)\n-        result = [\'Initial\']\n-        encoding = \'utf-8\'\n+        result = ["Initial"]\n+        encoding = "utf-8"\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Initial Two One Three\', new_result)\n+        self.assertEqual("Initial Two One Three", new_result)\n \n \n class TestZPublisherTransforms(unittest.TestCase):\n-\n     UNIT_TESTING\n \n     def setUp(self):\n         self.t = Transformer()\n \n     def test_applyTransform_webdav_port(self):\n-\n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'WEBDAV_SOURCE_PORT\'] = \'8081\'\n+        request["WEBDAV_SOURCE_PORT"] = "8081"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_webdav_method(self):\n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'REQUEST_METHOD\'] = \'PUT\'\n+        request["REQUEST_METHOD"] = "PUT"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_webdav_pathinfo(self):\n-\n         @implementer(ITransformer)\n-        class DoNotCallTransformer(object):\n+        class DoNotCallTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n-                raise AssertionError(\'Should not have been called\')\n+                raise AssertionError("Should not have been called")\n \n         transformer = DoNotCallTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request[\'PATH_INFO\'] = \'/foo/bar/manage_DAVget\'\n+        request["PATH_INFO"] = "/foo/bar/manage_DAVget"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_no_utility(self):\n@@ -546,9 +483,8 @@ def test_applyTransform_no_utility(self):\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n     def test_applyTransform_default_encoding(self):\n-\n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -565,7 +501,7 @@ def __call__(self, request, result, encoding):\n \n     def test_applyTransform_other_encoding(self):\n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -576,14 +512,14 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html; charset=utf-16\'\n+        request.response.headers["content-type"] = "text/html; charset=utf-16"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'utf-16\', transformer.encoding)\n+        self.assertEqual("utf-16", transformer.encoding)\n \n     def test_applyTransform_other_encoding_with_header_missing_space(self):\n         @implementer(ITransformer)\n-        class EncodingCaptureTransformer(object):\n+        class EncodingCaptureTransformer:\n             encoding = None\n \n             def __call__(self, request, result, encoding):\n@@ -594,17 +530,16 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html;charset=utf-16\'\n+        request.response.headers["content-type"] = "text/html;charset=utf-16"\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'utf-16\', transformer.encoding)\n+        self.assertEqual("utf-16", transformer.encoding)\n \n     def test_applyTransform_str(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n-\n+        class FauxTransformer:\n             def __call__(self, request, result, encoding):\n-                return \'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -613,14 +548,13 @@ def __call__(self, request, result, encoding):\n         request = FauxRequest(published)\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_unicode(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n-\n+        class FauxTransformer:\n             def __call__(self, request, result, encoding):\n-                return u\'dummystr\'\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -630,14 +564,13 @@ def __call__(self, request, result, encoding):\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(u\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_iterable(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n-\n+        class FauxTransformer:\n             def __call__(self, request, result, encoding):\n-                return [\'iter\', \'one\']\n+                return ["iter", "one"]\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n@@ -646,18 +579,16 @@ def __call__(self, request, result, encoding):\n         request = FauxRequest(published)\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'iterone\', request.response.getBody())\n+        self.assertEqual("iterone", request.response.getBody())\n \n     def test_applyTransform_streamiterator(self):\n         tmp = tempfile.mkstemp()[1]\n         try:\n-\n-            with open(tmp, \'w\') as out:\n-                out.write(\'foo\')\n+            with open(tmp, "w") as out:\n+                out.write("foo")\n \n             @implementer(ITransformer)\n-            class FauxTransformer(object):\n-\n+            class FauxTransformer:\n                 def __call__(self, request, result, encoding):\n                     return filestream_iterator(tmp)\n \n@@ -668,53 +599,46 @@ def __call__(self, request, result, encoding):\n             request = FauxRequest(published)\n             applyTransformOnSuccess(FauxPubEvent(request))\n \n-            self.assertTrue(\n-                isinstance(\n-                    request.response.getBody(),\n-                    filestream_iterator\n-                )\n-            )\n+            self.assertTrue(isinstance(request.response.getBody(), filestream_iterator))\n         finally:\n             os.unlink(tmp)\n \n     def test_applyTransform_str_input_body(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n-\n+        class FauxTransformer:\n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], six.binary_type)\n-                return \'dummystr\'\n+                assert isinstance(result[0], bytes)\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.setBody(\'<html />\')\n+        request.response.setBody("<html />")\n \n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\n \n     def test_applyTransform_unicode_input_body(self):\n         @implementer(ITransformer)\n-        class FauxTransformer(object):\n-\n+        class FauxTransformer:\n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], six.binary_type)\n-                return u\'dummystr\'\n+                assert isinstance(result[0], bytes)\n+                return "dummystr"\n \n         transformer = FauxTransformer()\n         provideUtility(transformer)\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.setBody(u\'<html />\')\n+        request.response.setBody("<html />")\n \n         applyTransformOnSuccess(FauxPubEvent(request))\n \n         # note: the real setBody would encode here\n-        self.assertEqual(u\'dummystr\', request.response.getBody())\n+        self.assertEqual("dummystr", request.response.getBody())\ndiff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py\nindex 135a199..a0898ad 100644\n--- a/plone/transformchain/transformer.py\n+++ b/plone/transformchain/transformer.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain import events\n from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY\n from plone.transformchain.interfaces import ITransform\n@@ -8,21 +7,10 @@\n from zope.event import notify\n from zope.interface import implementer\n \n-import six\n import logging\n \n-import pkg_resources\n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n \n-if HAS_ZSERVER:\n-    from ZServer.FTPRequest import FTPRequest\n-\n-\n-LOGGER = logging.getLogger(\'plone.transformchain\')\n+LOGGER = logging.getLogger("plone.transformchain")\n \n \n def _order_getter(pair):\n@@ -30,30 +18,33 @@ def _order_getter(pair):\n \n \n @implementer(ITransformer)\n-class Transformer(object):\n+class Transformer:\n     """Delegate the opportunity to transform the response to multiple,\n     ordered adapters.\n     """\n \n     def __call__(self, request, result, encoding):\n-        if HAS_ZSERVER and isinstance(request, FTPRequest):\n-            # Don\'t transform FTP requests\n-            return None\n         if request.environ.get(DISABLE_TRANSFORM_REQUEST_KEY, False):\n             # Off switch\n             return None\n         notify(events.BeforeTransforms(request))\n         try:\n-            published = request.get(\'PUBLISHED\', None)\n+            published = request.get("PUBLISHED", None)\n             handlers = sorted(\n-                getAdapters((published, request,), ITransform),\n-                key=_order_getter\n+                getAdapters(\n+                    (\n+                        published,\n+                        request,\n+                    ),\n+                    ITransform,\n+                ),\n+                key=_order_getter,\n             )\n             for name, handler in handlers:\n                 notify(events.BeforeSingleTransform(request, name, handler))\n-                if isinstance(result, six.text_type):\n+                if isinstance(result, str):\n                     newResult = handler.transformUnicode(result, encoding)\n-                elif isinstance(result, six.binary_type):\n+                elif isinstance(result, bytes):\n                     newResult = handler.transformBytes(result, encoding)\n                 else:\n                     newResult = handler.transformIterable(result, encoding)\n@@ -66,6 +57,4 @@ def __call__(self, request, result, encoding):\n         except ConflictError:\n             raise\n         except Exception:\n-            LOGGER.exception(\n-                u"Unexpected error whilst trying to apply transform chain"\n-            )\n+            LOGGER.exception("Unexpected error whilst trying to apply transform chain")\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex 5141b93..1aeb5d5 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -1,36 +1,24 @@\n-# -*- coding: utf-8 -*-\n from plone.transformchain.interfaces import ITransformer\n from zope.component import adapter\n from zope.component import queryUtility\n-from zope.interface import Interface\n from ZPublisher.HTTPResponse import default_encoding\n+from ZPublisher.interfaces import IPubBeforeAbort\n from ZPublisher.interfaces import IPubBeforeCommit\n from ZPublisher.Iterators import IStreamIterator\n \n import re\n-import six\n \n \n-try:\n-    from ZPublisher.interfaces import IPubBeforeAbort\n-except ImportError:\n-    # old Zope 2.12 or old ZPublisherBackport - this interface won\'t be\n-    # used, most likely, so the effect is that error messages aren\'t styled.\n-    class IPubBeforeAbort(Interface):\n-        pass\n-\n CHARSET_RE = re.compile(\n-    r\'(?:application|text)/[-+0-9a-z]+\\s*;\\s?charset=([-_0-9a-z]+)\'\n-    r\'(?:(?:\\s*;)|\\Z)\',\n-    re.IGNORECASE\n+    r"(?:application|text)/[-+0-9a-z]+\\s*;\\s?charset=([-_0-9a-z]+)" r"(?:(?:\\s*;)|\\Z)",\n+    re.IGNORECASE,\n )\n \n \n def extractEncoding(response):\n-    """Get the content encoding for the response body\n-    """\n+    """Get the content encoding for the response body"""\n     encoding = default_encoding\n-    ct = response.headers.get(\'content-type\')\n+    ct = response.headers.get("content-type")\n     if ct:\n         match = CHARSET_RE.match(ct)\n         if match:\n@@ -39,21 +27,23 @@ def extractEncoding(response):\n \n \n def isEvilWebDAVRequest(request):\n-    if request.get(\'WEBDAV_SOURCE_PORT\', None):\n+    if request.get("WEBDAV_SOURCE_PORT", None):\n         return True\n \n-    if request.get(\'REQUEST_METHOD\', \'GET\').upper() not in (\'GET\', \'POST\',):\n+    if request.get("REQUEST_METHOD", "GET").upper() not in (\n+        "GET",\n+        "POST",\n+    ):\n         return True\n \n-    if request.get(\'PATH_INFO\', \'\').endswith(\'manage_DAVget\'):\n+    if request.get("PATH_INFO", "").endswith("manage_DAVget"):\n         return True\n \n     return False\n \n \n def applyTransform(request, body=None):\n-    """Apply any transforms by delegating to the ITransformer utility\n-    """\n+    """Apply any transforms by delegating to the ITransformer utility"""\n \n     if isEvilWebDAVRequest(request):\n         return None\n@@ -67,9 +57,9 @@ def applyTransform(request, body=None):\n             body = response.getBody()\n \n         result = body\n-        if isinstance(result, six.binary_type):\n+        if isinstance(result, bytes):\n             result = [result]\n-        elif isinstance(result, six.text_type):\n+        elif isinstance(result, str):\n             result = [result.encode(encoding)]\n \n         transformed = transformer(request, result, encoding)\n@@ -81,8 +71,7 @@ def applyTransform(request, body=None):\n \n @adapter(IPubBeforeCommit)\n def applyTransformOnSuccess(event):\n-    """Apply the transform after a successful request\n-    """\n+    """Apply the transform after a successful request"""\n     transformed = applyTransform(event.request)\n     if transformed is None:\n         return\n@@ -92,24 +81,19 @@ def applyTransformOnSuccess(event):\n         response.setBody(transformed)\n     # setBody() can deal with byte and unicode strings (and will encode as\n     # necessary)...\n-    elif isinstance(transformed, six.string_types)\\\n-            or isinstance(transformed, six.binary_type):\n+    elif isinstance(transformed, str) or isinstance(transformed, bytes):\n         response.setBody(transformed)\n     # ... but not with iterables\n     else:\n         transformed = map(\n-            lambda it: it.decode(\'utf-8\')\n-            if isinstance(it, six.binary_type)\n-            else it,\n-            transformed\n+            lambda it: it.decode("utf-8") if isinstance(it, bytes) else it, transformed\n         )\n-        response.setBody(\'\'.join(transformed))\n+        response.setBody("".join(transformed))\n \n \n @adapter(IPubBeforeAbort)\n def applyTransformOnFailure(event):\n-    """Apply the transform to the error html output\n-    """\n+    """Apply the transform to the error html output"""\n     if event.retry:\n         return\n     # response.status might still be 200 because\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex a76531e..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 5c2e9cc..147b821 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,57 +2,48 @@\n from setuptools import setup\n \n \n-version = \'2.0.3.dev0\'\n+version = "3.0.0.dev0"\n \n setup(\n-    name=\'plone.transformchain\',\n+    name="plone.transformchain",\n     version=version,\n-    description=("Hook into repoze.zope2 that allows third party packages "\n-                 "to register a sequence of hooks that will be allowed to "\n-                 "modify the response before it is returned to the browser"),\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    description=(\n+        "Hook into repoze.zope2 that allows third party packages "\n+        "to register a sequence of hooks that will be allowed to "\n+        "modify the response before it is returned to the browser"\n+    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'zope2 repoze transform\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.transformchain\',\n-    license=\'BSD\',\n+    keywords="zope2 repoze transform",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.transformchain",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require={\n-        \'repoze\': [\'repoze.zope2\'],\n-        \'test\': \'plone.testing [zca]\',\n+        "test": "plone.testing [zca]",\n     },\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'zope.schema\',\n-        \'Zope2>=2.13.23\'\n+        "setuptools",\n+        "Zope",\n     ],\n     entry_points="""\n     """,\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..23c0b58\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.transformchain {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.transformchain {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

