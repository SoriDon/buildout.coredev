Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T16:49:49+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/5176028029846318f2b049c2297157fa63d190aa

cd src &amp;&amp; find . -name "*.py"|xargs pyupgrade --py36-plus

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/behaviors.py
M src/plone/restapi/controlpanels/__init__.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/controlpanels/__init__.py
M src/plone/restapi/deserializer/controlpanels/types.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/imaging.py
M src/plone/restapi/indexers.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/search/query.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/collection.py
M src/plone/restapi/serializer/controlpanels/__init__.py
M src/plone/restapi/serializer/controlpanels/types.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/local_roles.py
M src/plone/restapi/serializer/nextprev.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/serializer/working_copy.py
M src/plone/restapi/services/actions/get.py
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/addons/get.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/breadcrumbs/get.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/contextnavigation/get.py
M src/plone/restapi/services/controlpanels/add.py
M src/plone/restapi/services/controlpanels/delete.py
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/services/controlpanels/update.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/database/get.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/principals/get.py
M src/plone/restapi/services/querysources/get.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/roles/get.py
M src/plone/restapi/services/sources/get.py
M src/plone/restapi/services/system/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/add.py
M src/plone/restapi/services/types/delete.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/types/put.py
M src/plone/restapi/services/types/update.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/services/workingcopy/create.py
M src/plone/restapi/services/workingcopy/delete.py
M src/plone/restapi/services/workingcopy/update.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_addons.py
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_blocks_serializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_blocks.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_resolveuid.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_contextnavigation.py
M src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py
M src/plone/restapi/tests/test_services_database.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_querysources.py
M src/plone/restapi/tests/test_services_querystring.py
M src/plone/restapi/tests/test_services_querystringsearch.py
M src/plone/restapi/tests/test_services_sources.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_services_workingcopy.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_statictime.py
M src/plone/restapi/tests/test_system.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/upgrades/ordering.py
M src/plone/restapi/upgrades/to0005.py
M src/plone/restapi/upgrades/to0006.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 58c6d1e43..8a79bf4c2 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -7,7 +7,7 @@\n DEFAULT_BATCH_SIZE = 25\n \n \n-class HypermediaBatch(object):\n+class HypermediaBatch:\n     def __init__(self, request, results):\n         self.request = request\n \ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex 138498373..af59e503a 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -20,19 +20,19 @@\n @provider(IFormFieldProvider)\n class IBlocks(model.Schema):\n \n-    model.fieldset("layout", label=_(u"Layout"), fields=["blocks", "blocks_layout"])\n+    model.fieldset("layout", label=_("Layout"), fields=["blocks", "blocks_layout"])\n \n     blocks = JSONField(\n-        title=u"Blocks",\n-        description=u"The JSON representation of the object blocks information. Must be a JSON object.",  # noqa\n+        title="Blocks",\n+        description="The JSON representation of the object blocks information. Must be a JSON object.",  # noqa\n         schema=BLOCKS_SCHEMA,\n         default={},\n         required=False,\n     )\n \n     blocks_layout = JSONField(\n-        title=u"Blocks Layout",\n-        description=u"The JSON representation of the object blocks layout. Must be a JSON array.",  # noqa\n+        title="Blocks Layout",\n+        description="The JSON representation of the object blocks layout. Must be a JSON array.",  # noqa\n         schema=LAYOUT_SCHEMA,\n         default={"items": []},\n         required=False,\ndiff --git a/src/plone/restapi/controlpanels/__init__.py b/src/plone/restapi/controlpanels/__init__.py\nindex ff0664975..993eca30f 100644\n--- a/src/plone/restapi/controlpanels/__init__.py\n+++ b/src/plone/restapi/controlpanels/__init__.py\n@@ -5,7 +5,7 @@\n \n \n @implementer(IControlpanel)\n-class RegistryConfigletPanel(object):\n+class RegistryConfigletPanel:\n     configlet = None\n     configlet_id = None\n     configlet_category_id = None\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 9b1e2b750..619fd8197 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -100,7 +100,7 @@ def handle_subblocks(self, block_value):\n             block_value["blocks"] = self._transform(block_value["blocks"])\n \n     def __call__(self, value):\n-        value = super(BlocksJSONFieldDeserializer, self).__call__(value)\n+        value = super().__call__(value)\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n@@ -125,7 +125,7 @@ def __call__(self, value):\n         return value\n \n \n-class ResolveUIDDeserializerBase(object):\n+class ResolveUIDDeserializerBase:\n     """The "url" smart block field.\n \n     This is a generic handler. In all blocks, it converts any "url"\n@@ -144,7 +144,7 @@ def __call__(self, block):\n         # Convert absolute links to resolveuid\n         for field in ["url", "href"]:\n             link = block.get(field, "")\n-            if link and isinstance(link, string_types):\n+            if link and isinstance(link, str):\n                 block[field] = path2uid(context=self.context, link=link)\n             elif link and isinstance(link, list):\n                 # Detect if it has an object inside with an "@id" key (object_widget)\n@@ -158,14 +158,14 @@ def __call__(self, block):\n                         result.append(item_clone)\n \n                     block[field] = result\n-                elif len(link) > 0 and isinstance(link[0], string_types):\n+                elif len(link) > 0 and isinstance(link[0], str):\n                     block[field] = [\n                         path2uid(context=self.context, link=item) for item in link\n                     ]\n         return block\n \n \n-class TextBlockDeserializerBase(object):\n+class TextBlockDeserializerBase:\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -187,7 +187,7 @@ def __call__(self, block):\n         return block\n \n \n-class HTMLBlockDeserializerBase(object):\n+class HTMLBlockDeserializerBase:\n     order = 100\n     block_type = "html"\n     disabled = os.environ.get("disable_transform_html", False)\n@@ -209,7 +209,7 @@ def __call__(self, block):\n         return block\n \n \n-class ImageBlockDeserializerBase(object):\n+class ImageBlockDeserializerBase:\n     order = 100\n     block_type = "image"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -284,7 +284,7 @@ def transform_links(context, value, transformer):\n             link["@id"] = transformer(context, link["@id"])\n \n \n-class SlateBlockTransformer(object):\n+class SlateBlockTransformer:\n     """SlateBlockTransformer."""\n \n     field = "value"\n@@ -300,7 +300,7 @@ def __call__(self, block):\n         for child in children:\n             node_type = child.get("type")\n             if node_type:\n-                handler = getattr(self, "handle_{}".format(node_type), None)\n+                handler = getattr(self, f"handle_{node_type}", None)\n                 if handler:\n                     handler(child)\n \ndiff --git a/src/plone/restapi/deserializer/controlpanels/__init__.py b/src/plone/restapi/deserializer/controlpanels/__init__.py\nindex 499efa66d..53b9a2a07 100644\n--- a/src/plone/restapi/deserializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/deserializer/controlpanels/__init__.py\n@@ -15,13 +15,13 @@\n \n \n @implementer(IDexterityContent)\n-class FakeDXContext(object):\n+class FakeDXContext:\n     """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n @implementer(IDeserializeFromJson)\n @adapter(IControlpanel)\n-class ControlpanelDeserializeFromJson(object):\n+class ControlpanelDeserializeFromJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\ndiff --git a/src/plone/restapi/deserializer/controlpanels/types.py b/src/plone/restapi/deserializer/controlpanels/types.py\nindex 516b17fad..13c188fa5 100644\n--- a/src/plone/restapi/deserializer/controlpanels/types.py\n+++ b/src/plone/restapi/deserializer/controlpanels/types.py\n@@ -19,4 +19,4 @@ def deserialize_item(self, proxy):\n     def __call__(self, item=None):\n         if item is not None:\n             return self.deserialize_item(item)\n-        return super(DexterityTypesControlpanelDeserializeFromJson, self).__call__()\n+        return super().__call__()\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 87670fefd..affe7b770 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -25,7 +25,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IDexterityContent, Interface)\n-class DeserializeFromJson(OrderingMixin, object):\n+class DeserializeFromJson(OrderingMixin):\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -83,7 +83,7 @@ def get_schema_data(self, data, validate_all):\n             write_permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n-                __traceback_info__ = "field={}".format(field)\n+                __traceback_info__ = f"field={field}"\n \n                 field_data = schema_data.setdefault(schema, {})\n \ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 317ba37dc..838d5672c 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -29,17 +29,12 @@\n import dateutil\n import six\n \n-if six.PY2:\n-    import HTMLParser\n-\n-    html_parser = HTMLParser.HTMLParser()\n-else:\n-    import html as html_parser\n+import html as html_parser\n \n \n @implementer(IFieldDeserializer)\n @adapter(IField, IDexterityContent, IBrowserRequest)\n-class DefaultFieldDeserializer(object):\n+class DefaultFieldDeserializer:\n     def __init__(self, field, context, request):\n         self.field = field\n         if IField.providedBy(self.field):\n@@ -48,7 +43,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, six.text_type):\n+        if not isinstance(value, str):\n             self.field.validate(value)\n             return value\n \n@@ -61,13 +56,13 @@ def __call__(self, value):\n @adapter(ITextLine, IDexterityContent, IBrowserRequest)\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n     def __call__(self, value):\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             value = value.strip()\n-            if value == u"":\n+            if value == "":\n                 value = self.field.missing_value\n \n         self.field.validate(value)\n@@ -78,7 +73,7 @@ def __call__(self, value):\n @adapter(ITextLine, ILink, IBrowserRequest)\n class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n     def __call__(self, value):\n-        value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n+        value = super().__call__(value)\n         if self.field.getName() == "remoteUrl":\n             portal = getMultiAdapter(\n                 (self.context, self.context.REQUEST), name="plone_portal_state"\n@@ -119,7 +114,7 @@ def __call__(self, value):\n         try:\n             dt = dateutil.parser.parse(value)\n         except ValueError:\n-            raise ValueError(u"Invalid date: {}".format(value))\n+            raise ValueError(f"Invalid date: {value}")\n \n         # Convert to TZ aware in UTC\n         if dt.tzinfo is not None:\n@@ -219,7 +214,7 @@ def __call__(self, value):\n             # using ``timetz()`` would be timezone aware.\n             value = dateutil.parser.parse(value).time()\n         except ValueError:\n-            raise ValueError(u"Invalid time: {}".format(value))\n+            raise ValueError(f"Invalid time: {value}")\n \n         self.field.validate(value)\n         return value\n@@ -254,11 +249,11 @@ def __call__(self, value):\n             content_type = value.get("content-type", content_type)\n             filename = value.get("filename", filename)\n             data = value.get("data", "")\n-            if isinstance(data, six.text_type):\n+            if isinstance(data, str):\n                 data = data.encode("utf-8")\n             if "encoding" in value:\n                 data = codecs.decode(data, value["encoding"])\n-            if isinstance(data, six.text_type):\n+            if isinstance(data, str):\n                 data = data.encode("utf-8")\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get("content-type", content_type)\n@@ -291,7 +286,7 @@ def __call__(self, value):\n         if isinstance(value, dict):\n             content_type = value.get("content-type", content_type)\n             encoding = value.get("encoding", encoding)\n-            data = value.get("data", u"")\n+            data = value.get("data", "")\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get("content-type", content_type)\n             with open(value.filepath, "rb") as f:\ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 2d009db93..b1e167db5 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -24,7 +24,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IRoleManager, Interface)\n-class DeserializeFromJson(object):\n+class DeserializeFromJson:\n     """JSON deserializer for local roles"""\n \n     def __init__(self, context, request):\n@@ -45,7 +45,7 @@ def __call__(self):\n         # roles\n         roles_reindex = False\n         new_roles = data.get("entries", None)\n-        managed_roles = frozenset([r["id"] for r in sharing_view.roles()])\n+        managed_roles = frozenset(r["id"] for r in sharing_view.roles())\n \n         if new_roles is not None:\n             # the roles are converted into a FrozenSet so we have to filter\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex fa07f4e92..899bd414a 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -6,7 +6,7 @@\n import six\n \n \n-class OrderingMixin(object):\n+class OrderingMixin:\n     def handle_ordering(self, data):\n         if "ordering" in data:\n             obj_id = data["ordering"]["obj_id"]\n@@ -43,11 +43,11 @@ def reorderItems(self, obj_id, delta, subset_ids):\n \n         # Make sure we use bytestring ids for PY2.\n         if six.PY2:\n-            if isinstance(obj_id, six.text_type):\n+            if isinstance(obj_id, str):\n                 obj_id = obj_id.encode("utf-8")\n             if subset_ids:\n                 subset_ids = [\n-                    id_.encode("utf-8") if isinstance(id_, six.text_type) else id_\n+                    id_.encode("utf-8") if isinstance(id_, str) else id_\n                     for id_ in subset_ids\n                 ]\n \ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex 9521d8b36..8f2065da8 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -29,8 +29,8 @@ def __call__(self, value):\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n             resolved_by = "intid"\n-        elif isinstance(value, six.string_types):\n-            if six.PY2 and isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n+            if six.PY2 and isinstance(value, str):\n                 value = value.encode("utf8")\n             portal = getMultiAdapter(\n                 (self.context, self.request), name="plone_portal_state"\n@@ -55,7 +55,7 @@ def __call__(self, value):\n         if obj is None:\n             self.request.response.setStatus(400)\n             raise ValueError(\n-                u"Could not resolve object for {}={}".format(resolved_by, value)\n+                f"Could not resolve object for {resolved_by}={value}"\n             )\n \n         self.field.validate(obj)\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex d4ea72cb1..10e09989e 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -13,7 +13,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n-class DeserializeSiteRootFromJson(OrderingMixin, object):\n+class DeserializeSiteRootFromJson(OrderingMixin):\n     """JSON deserializer for the Plone site root"""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 68c1a40e8..bca29ada0 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,5 +1,3 @@\n-from __future__ import division\n-from six.moves import map\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n@@ -32,9 +30,9 @@ def get_scales(context, field, width, height):\n         actual_height = scale.height\n \n         scales[name] = {\n-            u"download": url,\n-            u"width": actual_width,\n-            u"height": actual_height,\n+            "download": url,\n+            "width": actual_width,\n+            "height": actual_height,\n         }\n \n     return scales\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex bc0861f0f..efe213c44 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -22,19 +22,13 @@ def _extract_text(block):\n     result = ""\n     for paragraph in block.get("text", {}).get("blocks", {}):\n         text = paragraph["text"]\n-        if six.PY2:\n-            if isinstance(text, six.text_type):\n-                text = text.encode("utf-8", "replace")\n-            if text:\n-                result = " ".join((result, text))\n-        else:\n-            result = " ".join((result, text))\n+        result = " ".join((result, text))\n     return result\n \n \n @implementer(IBlockSearchableText)\n @adapter(IBlocks, IBrowserRequest)\n-class TextBlockSearchableText(object):\n+class TextBlockSearchableText:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -74,7 +68,7 @@ def SearchableText_blocks(obj):\n     return " ".join(blocks_text)\n \n \n-class SlateTextIndexer(object):\n+class SlateTextIndexer:\n     """SlateTextIndexer."""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex f91188f80..183076ddd 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -150,7 +150,7 @@ def manage_updateConfig(self, REQUEST):\n     def _decode_token(self, token, verify=True):\n         if self.use_keyring:\n             manager = getUtility(IKeyManager)\n-            for secret in manager[u"_system"]:\n+            for secret in manager["_system"]:\n                 if secret is None:\n                     continue\n                 payload = self._jwt_decode(token, secret + self._path(), verify=verify)\n@@ -160,7 +160,7 @@ def _decode_token(self, token, verify=True):\n             return self._jwt_decode(token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n-        if isinstance(token, six.text_type):\n+        if isinstance(token, str):\n             token = token.encode("utf-8")\n         try:\n             return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n@@ -197,8 +197,7 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm="HS256")\n-        if not six.PY2:\n-            token = token.decode("utf-8")\n+        token = token.decode("utf-8")\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex 2e94cbb9f..ca9367501 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -16,7 +16,7 @@\n     PLONE5 = True\n \n \n-class SearchHandler(object):\n+class SearchHandler:\n     """Executes a catalog search based on a query dict, and returns\n     JSON compatible results.\n     """\ndiff --git a/src/plone/restapi/search/query.py b/src/plone/restapi/search/query.py\nindex 2a1413c8d..ad89461b0 100644\n--- a/src/plone/restapi/search/query.py\n+++ b/src/plone/restapi/search/query.py\n@@ -59,7 +59,7 @@\n \n @implementer(IZCatalogCompatibleQuery)\n @adapter(Interface, Interface)\n-class ZCatalogCompatibleQueryAdapter(object):\n+class ZCatalogCompatibleQueryAdapter:\n     """Converts a Python dictionary representing a catalog query, but with\n     possibly wrong value types, to a ZCatalog compatible query dict suitable\n     for passing to catalog.searchResults().\n@@ -116,7 +116,7 @@ def __call__(self, query):\n         return query\n \n \n-class BaseIndexQueryParser(object):\n+class BaseIndexQueryParser:\n     """Base class for IIndexQueryParser adapters.\n \n     See the IIndexQueryParser interface documentation for details.\n@@ -177,7 +177,7 @@ def parse_complex_query(self, idx_query):\n                     )\n             else:\n                 log.warning(\n-                    "Unrecognized query option %r for index %r" % (opt_key, self.index)\n+                    f"Unrecognized query option {opt_key!r} for index {self.index!r}"\n                 )\n                 # Pass along unknown option without modification\n                 parsed_query[opt_key] = opt_value\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex e403e4768..c9b9dee17 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -108,7 +108,7 @@ def __call__(self):\n         return json_compatible(value)\n \n \n-class ResolveUIDSerializerBase(object):\n+class ResolveUIDSerializerBase:\n     order = 1\n     block_type = None\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -121,7 +121,7 @@ def __call__(self, value):\n         for field in ["url", "href"]:\n             if field in value.keys():\n                 link = value.get(field, "")\n-                if isinstance(link, string_types):\n+                if isinstance(link, str):\n                     value[field] = uid_to_url(link)\n                 elif isinstance(link, list):\n                     if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n@@ -132,12 +132,12 @@ def __call__(self, value):\n                             result.append(item_clone)\n \n                         value[field] = result\n-                    elif len(link) > 0 and isinstance(link[0], string_types):\n+                    elif len(link) > 0 and isinstance(link[0], str):\n                         value[field] = [uid_to_url(item) for item in link]\n         return value\n \n \n-class TextBlockSerializerBase(object):\n+class TextBlockSerializerBase:\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 38aad7bd6..d73bb46d8 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -18,7 +18,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(Lazy, Interface)\n-class LazyCatalogResultSerializer(object):\n+class LazyCatalogResultSerializer:\n     """Serializes a ZCatalog resultset (one of the subclasses of `Lazy`) to\n     a Python data structure that can in turn be serialized to JSON.\n     """\ndiff --git a/src/plone/restapi/serializer/collection.py b/src/plone/restapi/serializer/collection.py\nindex 94d72940b..c061195c0 100644\n--- a/src/plone/restapi/serializer/collection.py\n+++ b/src/plone/restapi/serializer/collection.py\n@@ -14,7 +14,7 @@\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n     def __call__(self, version=None, include_items=True):\n-        result = super(SerializeCollectionToJson, self).__call__(version=version)\n+        result = super().__call__(version=version)\n \n         include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\ndiff --git a/src/plone/restapi/serializer/controlpanels/__init__.py b/src/plone/restapi/serializer/controlpanels/__init__.py\nindex ad3508e3d..addd73246 100644\n--- a/src/plone/restapi/serializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/serializer/controlpanels/__init__.py\n@@ -21,7 +21,7 @@\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IControlpanel)\n-class ControlpanelSummarySerializeToJson(object):\n+class ControlpanelSummarySerializeToJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n \n@@ -69,7 +69,7 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request, form=None):\n \n @implementer(ISerializeToJson)\n @adapter(IControlpanel)\n-class ControlpanelSerializeToJson(object):\n+class ControlpanelSerializeToJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\ndiff --git a/src/plone/restapi/serializer/controlpanels/types.py b/src/plone/restapi/serializer/controlpanels/types.py\nindex 5cdf6c059..6e33b4178 100644\n--- a/src/plone/restapi/serializer/controlpanels/types.py\n+++ b/src/plone/restapi/serializer/controlpanels/types.py\n@@ -91,7 +91,7 @@ def __call__(self, item=None):\n         if item is not None:\n             return self.serialize_item(item)\n \n-        json = super(DexterityTypesControlpanelSerializeToJson, self).__call__()\n+        json = super().__call__()\n         json["items"] = []\n \n         portal = getSite()\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex dcc2cc0dc..57fe5cd86 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -11,8 +11,6 @@\n from plone.restapi.interfaces import IContextawareJsonCompatible\n from plone.restapi.interfaces import IJsonCompatible\n from Products.CMFPlone.utils import safe_unicode\n-from six.moves import map\n-from six.moves import zip\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n@@ -77,12 +75,12 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (six.text_type, bool, int, float, int):\n+    if type(value) in (str, bool, int, float, int):\n         return value\n \n     raise TypeError(\n         "No converter for making"\n-        " {0!r} ({1}) JSON compatible.".format(value, type(value))\n+        " {!r} ({}) JSON compatible.".format(value, type(value))\n     )\n \n \n@@ -178,7 +176,7 @@ def timedelta_converter(value):\n \n @adapter(IRichTextValue, IDexterityContent)\n @implementer(IContextawareJsonCompatible)\n-class RichtextDXContextConverter(object):\n+class RichtextDXContextConverter:\n     def __init__(self, value, context):\n         self.value = value\n         self.context = context\n@@ -187,9 +185,9 @@ def __call__(self):\n         value = self.value\n         output = value.output_relative_to(self.context)\n         return {\n-            u"data": json_compatible(output),\n-            u"content-type": json_compatible(value.mimeType),\n-            u"encoding": json_compatible(value.encoding),\n+            "data": json_compatible(output),\n+            "content-type": json_compatible(value.mimeType),\n+            "encoding": json_compatible(value.encoding),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 2e3ada2e3..c4fc8ff5a 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -17,7 +17,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IConversation, IRequest)\n-class ConversationSerializer(object):\n+class ConversationSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -44,18 +44,18 @@ def __call__(self):\n \n @implementer(ISerializeToJson)\n @adapter(IComment, IRequest)\n-class CommentSerializer(object):\n+class CommentSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, include_items=True):\n         content_url = self.context.__parent__.__parent__.absolute_url()\n-        comments_url = "{}/@comments".format(content_url)\n-        url = "{}/{}".format(comments_url, self.context.id)\n+        comments_url = f"{content_url}/@comments"\n+        url = f"{comments_url}/{self.context.id}"\n \n         if self.context.in_reply_to:\n-            parent_url = "{}/{}".format(comments_url, self.context.in_reply_to)\n+            parent_url = f"{comments_url}/{self.context.in_reply_to}"\n             in_reply_to = str(self.context.in_reply_to)\n         else:\n             parent_url = None\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex b7690932f..9632e1043 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -32,7 +32,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n-class SerializeToJson(object):\n+class SerializeToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -143,7 +143,7 @@ def _build_query(self):\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n+        folder_metadata = super().__call__(version=version)\n \n         folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n@@ -176,7 +176,7 @@ def __call__(self, version=None, include_items=True):\n \n @adapter(IDexterityContent, Interface)\n @implementer(IObjectPrimaryFieldTarget)\n-class DexterityObjectPrimaryFieldTarget(object):\n+class DexterityObjectPrimaryFieldTarget:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 06043fa07..edd7d103a 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -28,7 +28,7 @@\n \n @adapter(IField, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n-class DefaultFieldSerializer(object):\n+class DefaultFieldSerializer:\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -78,7 +78,7 @@ def __call__(self):\n             for v in value:\n                 try:\n                     term = value_type.vocabulary.getTerm(v)\n-                    values.append({u"token": term.token, u"title": term.title})\n+                    values.append({"token": term.token, "title": term.title})\n                 except LookupError:\n                     log.warning("Term lookup error: %r" % v)\n             value = values\n@@ -137,7 +137,7 @@ def __call__(self):\n class TextLineFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         if self.field.getName() != "remoteUrl":\n-            return super(TextLineFieldSerializer, self).__call__()\n+            return super().__call__()\n         value = self.get_value()\n         path = replace_link_variables_by_paths(context=self.context, url=value)\n         portal = getMultiAdapter(\n@@ -151,7 +151,7 @@ def __call__(self):\n \n @adapter(IField, IDexterityContent, Interface)\n @implementer(IPrimaryFieldTarget)\n-class DefaultPrimaryFieldTarget(object):\n+class DefaultPrimaryFieldTarget:\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex 930b5b7db..12e21fee3 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -18,7 +18,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in six.iteritems(u):\n+    for key, value in u.items():\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex 618726ebe..c9656f155 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -8,7 +8,7 @@\n from zope.interface import Interface\n \n \n-class BaseSerializer(object):\n+class BaseSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -18,7 +18,7 @@ def __call__(self):\n         portal = getSite()\n \n         return {\n-            "@id": "{}/@groups/{}".format(portal.absolute_url(), group.id),\n+            "@id": f"{portal.absolute_url()}/@groups/{group.id}",\n             "id": group.id,\n             "groupname": group.getGroupName(),\n             "email": group.getProperty("email"),\n@@ -38,7 +38,7 @@ class SerializeGroupToJsonSummary(BaseSerializer):\n @adapter(IGroupData, Interface)\n class SerializeGroupToJson(BaseSerializer):\n     def __call__(self):\n-        data = super(SerializeGroupToJson, self).__call__()\n+        data = super().__call__()\n         group = self.context\n         members = group.getGroupMemberIds()\n         batch = HypermediaBatch(self.request, members)\ndiff --git a/src/plone/restapi/serializer/local_roles.py b/src/plone/restapi/serializer/local_roles.py\nindex 5cea4d757..f4d374f53 100644\n--- a/src/plone/restapi/serializer/local_roles.py\n+++ b/src/plone/restapi/serializer/local_roles.py\n@@ -13,7 +13,7 @@\n \n @adapter(IRoleManager, Interface)\n @implementer(ISerializeToJson)\n-class SerializeLocalRolesToJson(object):\n+class SerializeLocalRolesToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/nextprev.py b/src/plone/restapi/serializer/nextprev.py\nindex b9f491ba0..5671dbd82 100644\n--- a/src/plone/restapi/serializer/nextprev.py\n+++ b/src/plone/restapi/serializer/nextprev.py\n@@ -20,7 +20,7 @@ def __init__(self, context):\n         self.order = self.context.objectIds()\n \n \n-class NextPrevious(object):\n+class NextPrevious:\n     """Facade with more pythonic interface"""\n \n     def __init__(self, context):\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex fc9676092..943033ad5 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -10,7 +10,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IRegistry, IRequest)\n-class SerializeRegistryToJson(object):\n+class SerializeRegistryToJson:\n     def __init__(self, registry, request):\n         self.registry = registry\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 2c6b62d06..40d1a03e8 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -16,7 +16,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n-class SerializeSiteRootToJson(object):\n+class SerializeSiteRootToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex 7b64e8720..52768ef7a 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -9,13 +9,13 @@\n from zope.interface import Interface\n \n # fmt: off\n-DEFAULT_METADATA_FIELDS = set([\n+DEFAULT_METADATA_FIELDS = {\n     \'@id\',\n     \'@type\',\n     \'description\',\n     \'review_state\',\n     \'title\',\n-])\n+}\n \n FIELD_ACCESSORS = {\n     "@id": "getURL",\n@@ -24,22 +24,22 @@\n     "title": "Title",\n }\n \n-NON_METADATA_ATTRIBUTES = set([\n+NON_METADATA_ATTRIBUTES = {\n     "getPath",\n     "getURL",\n-])\n+}\n \n-BLACKLISTED_ATTRIBUTES = set([\n+BLACKLISTED_ATTRIBUTES = {\n     \'getDataOrigin\',\n     \'getObject\',\n     \'getUserData\',\n-])\n+}\n # fmt: on\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(Interface, Interface)\n-class DefaultJSONSummarySerializer(object):\n+class DefaultJSONSummarySerializer:\n     """Default ISerializeToJsonSummary adapter.\n \n     Requires context to be adaptable to IContentListingObject, which is\n@@ -87,7 +87,7 @@ def metadata_fields(self):\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\n-class SiteRootJSONSummarySerializer(object):\n+class SiteRootJSONSummarySerializer:\n     """ISerializeToJsonSummary adapter for the Plone Site root."""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex b9882790c..195e3ee31 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -13,7 +13,7 @@\n \n @implementer(ISerializeToJsonSummary)\n @adapter(ITileType, Interface)\n-class TileSummarySerializeToJson(object):\n+class TileSummarySerializeToJson:\n     def __init__(self, tile, request):\n         self.tile = tile\n \n@@ -60,7 +60,7 @@ def get_jsonschema_for_tile(tile, context, request):\n \n @implementer(ISerializeToJson)\n @adapter(ITileType, Interface)\n-class TileSerializeToJson(object):\n+class TileSerializeToJson:\n     def __init__(self, tile, request):\n         self.tile = tile\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 21e206eca..1dbae7cc6 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -11,7 +11,7 @@\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n \n \n-class BaseSerializer(object):\n+class BaseSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -24,10 +24,10 @@ def __call__(self):\n         roles = user.getRoles()\n         # Anonymous and Authenticated are pseudo roles assign automatically\n         # to logged-in or logged-out users. They should not be exposed here\n-        roles = list(set(roles) - set(["Anonymous", "Authenticated"]))\n+        roles = list(set(roles) - {"Anonymous", "Authenticated"})\n \n         data = {\n-            "@id": "{}/@users/{}".format(portal.absolute_url(), user.id),\n+            "@id": f"{portal.absolute_url()}/@users/{user.id}",\n             "id": user.id,\n             "username": user.getUserName(),\n             "roles": roles,\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 097edc9eb..e74812d87 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -15,7 +15,7 @@\n \n \n @implementer(ISerializeToJson)\n-class SerializeVocabLikeToJson(object):\n+class SerializeVocabLikeToJson:\n     """Base implementation to serialize vocabularies and sources to JSON.\n \n     Implements server-side filtering as well as batching.\n@@ -83,7 +83,7 @@ class SerializeSourceToJson(SerializeVocabLikeToJson):\n \n @implementer(ISerializeToJson)\n @adapter(ITokenizedTerm, Interface)\n-class SerializeTermToJson(object):\n+class SerializeTermToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -92,6 +92,6 @@ def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n-        if isinstance(title, six.binary_type):\n+        if isinstance(title, bytes):\n             title = title.decode("UTF-8")\n         return {"token": token, "title": translate(title, context=self.request)}\ndiff --git a/src/plone/restapi/serializer/working_copy.py b/src/plone/restapi/serializer/working_copy.py\nindex caf9f1765..785f377e0 100644\n--- a/src/plone/restapi/serializer/working_copy.py\n+++ b/src/plone/restapi/serializer/working_copy.py\n@@ -103,7 +103,7 @@ def creator_url(self):\n         creator = self.creator()\n         if creator is not None:\n             portal_url = getToolByName(self.context, "portal_url")\n-            return "{0}/author/{1}".format(portal_url(), creator.getId())\n+            return f"{portal_url()}/author/{creator.getId()}"\n \n     @memoize\n     def creator_name(self):\ndiff --git a/src/plone/restapi/services/actions/get.py b/src/plone/restapi/services/actions/get.py\nindex 72be50d33..a14c3e581 100644\n--- a/src/plone/restapi/services/actions/get.py\n+++ b/src/plone/restapi/services/actions/get.py\n@@ -11,13 +11,13 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Actions(object):\n+class Actions:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {"actions": {"@id": "{}/@actions".format(self.context.absolute_url())}}\n+        result = {"actions": {"@id": f"{self.context.absolute_url()}/@actions"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 9e1a676f5..678076a12 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -16,7 +16,7 @@\n logger = logging.getLogger("Plone")\n \n \n-class Addons(object):\n+class Addons:\n     """Performs install/upgrade/uninstall functions on an addon.\n     Pulled, mostly intact, from Plone 5.1\'s products control panel.\n     If we reach the point when plone.restapi isn\'t supporting releases\n@@ -70,7 +70,7 @@ def _install_profile_info(self, product_id):\n                 prof["product"]\n                 in (\n                     product_id,\n-                    "Products.{0}".format(product_id),\n+                    f"Products.{product_id}",\n                 )\n             )\n         ]\n@@ -224,13 +224,13 @@ def is_product_installable(self, product_id, allow_hidden=False):\n                     return False\n                 # A new error is found, register it\n                 self.errors[product_id] = dict(\n-                    type=_(u"dependency_missing", default=u"Missing dependency"),\n+                    type=_("dependency_missing", default="Missing dependency"),\n                     value=e.args[0],\n                     product_id=product_id,\n                 )\n             else:\n                 self.errors[product_id] = dict(\n-                    type=_(u"dependency_missing", default=u"Missing dependency"),\n+                    type=_("dependency_missing", default="Missing dependency"),\n                     value=e.args[0],\n                     product_id=product_id,\n                 )\ndiff --git a/src/plone/restapi/services/addons/get.py b/src/plone/restapi/services/addons/get.py\nindex 905b68682..1cc00fe53 100644\n--- a/src/plone/restapi/services/addons/get.py\n+++ b/src/plone/restapi/services/addons/get.py\n@@ -7,7 +7,7 @@\n @implementer(IPublishTraverse)\n class AddonsGet(Service):\n     def __init__(self, context, request):\n-        super(AddonsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.addons = Addons(context, request)\n \n@@ -26,7 +26,7 @@ def reply(self):\n                 return []\n \n         result = {\n-            "items": {"@id": "{}/@addons".format(self.context.absolute_url())},\n+            "items": {"@id": f"{self.context.absolute_url()}/@addons"},\n         }\n         addons_data = []\n         for addon in all_addons.values():\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex 06df83e07..d99561131 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -17,7 +17,7 @@ class AddonsPost(Service):\n     """Performs install/upgrade/uninstall functions on an addon."""\n \n     def __init__(self, context, request):\n-        super(AddonsPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.errors = {}\n         self.addons = Addons(context, request)\n@@ -41,7 +41,7 @@ def reply(self):\n         elif action == "upgrade":\n             result = self.addons.upgrade_product(addon)\n         else:\n-            raise Exception("Unknown action {}".format(action))\n+            raise Exception(f"Unknown action {action}")\n \n         prefer = self.request.getHeader("Prefer")\n         if prefer == "return=representation":\n@@ -51,7 +51,7 @@ def reply(self):\n             all_addons = control_panel.get_addons()\n \n             result = {\n-                "items": {"@id": "{}/@addons".format(self.context.absolute_url())}\n+                "items": {"@id": f"{self.context.absolute_url()}/@addons"}\n             }\n             addons_data = []\n             for a in all_addons.values():\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex 8ff040830..0862471da 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -34,7 +34,7 @@ def reply(self):\n         creds = plugin.extractCredentials(self.request)\n         if creds and "token" in creds and plugin.delete_token(creds["token"]):\n             self.request.response.setStatus(200)\n-            return super(Logout, self).reply()\n+            return super().reply()\n \n         self.request.response.setStatus(400)\n         return dict(error=dict(type="Logout failed", message="Unknown token"))\ndiff --git a/src/plone/restapi/services/breadcrumbs/get.py b/src/plone/restapi/services/breadcrumbs/get.py\nindex f37b6eddf..787182cdf 100644\n--- a/src/plone/restapi/services/breadcrumbs/get.py\n+++ b/src/plone/restapi/services/breadcrumbs/get.py\n@@ -8,7 +8,7 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Breadcrumbs(object):\n+class Breadcrumbs:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -16,7 +16,7 @@ def __init__(self, context, request):\n     def __call__(self, expand=False):\n         result = {\n             "breadcrumbs": {\n-                "@id": "{}/@breadcrumbs".format(self.context.absolute_url())\n+                "@id": f"{self.context.absolute_url()}/@breadcrumbs"\n             }\n         }\n         if not expand:\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 71f22c8ad..1f1a52e97 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -72,7 +72,7 @@ def reply(self):\n         if deserializer is None:\n             self.request.response.setStatus(501)\n             return dict(\n-                error=dict(message="Cannot deserialize type {}".format(obj.portal_type))\n+                error=dict(message=f"Cannot deserialize type {obj.portal_type}")\n             )\n \n         try:\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 19c2c4a38..826770420 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -41,7 +41,7 @@ class UploadOptions(Service):\n     def reply(self):\n         for name, value in TUS_OPTIONS_RESPONSE_HEADERS.items():\n             self.request.response.setHeader(name, value)\n-        return super(UploadOptions, self).reply()\n+        return super().reply()\n \n \n class TUSBaseService(Service):\n@@ -119,17 +119,17 @@ def reply(self):\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n             "Location",\n-            "{}/@tus-upload/{}".format(self.context.absolute_url(), tus_upload.uid),\n+            f"{self.context.absolute_url()}/@tus-upload/{tus_upload.uid}",\n         )\n         self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n-        return super(UploadPost, self).reply()\n+        return super().reply()\n \n \n @implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n     def __init__(self, context, request):\n-        super(UploadFileBase, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.uid = None\n \n     def publishTraverse(self, request, name):\n@@ -176,15 +176,15 @@ def reply(self):\n             return self.unsupported_version()\n \n         self.request.response.setHeader(\n-            "Upload-Length", "{}".format(tus_upload.length())\n+            "Upload-Length", f"{tus_upload.length()}"\n         )\n         self.request.response.setHeader(\n-            "Upload-Offset", "{}".format(tus_upload.offset())\n+            "Upload-Offset", f"{tus_upload.offset()}"\n         )\n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n         self.request.response.setHeader("Cache-Control", "no-store")\n         self.request.response.setStatus(200, lock=1)\n-        return super(UploadHead, self).reply()\n+        return super().reply()\n \n \n @implementer(IPublishTraverse)\n@@ -225,7 +225,7 @@ def reply(self):\n             self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n \n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n-        self.request.response.setHeader("Upload-Offset", "{}".format(offset))\n+        self.request.response.setHeader("Upload-Offset", f"{offset}")\n         return self.reply_no_content()\n \n     def create_or_modify_content(self, tus_upload):\n@@ -267,7 +267,7 @@ def create_or_modify_content(self, tus_upload):\n         if deserializer is None:\n             return self.error(\n                 "Not Implemented",\n-                "Cannot deserialize type {}".format(obj.portal_type),\n+                f"Cannot deserialize type {obj.portal_type}",\n                 501,\n             )\n         try:\n@@ -288,7 +288,7 @@ def create_or_modify_content(self, tus_upload):\n         self.request.response.setHeader("Location", obj.absolute_url())\n \n \n-class TUSUpload(object):\n+class TUSUpload:\n \n     file_prefix = "tus_upload_"\n     expiration_period = 60 * 60\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 06da93c64..eff6cacdc 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -30,7 +30,7 @@ def create(container, type_, id_=None, title=None):\n             randint(0, 9999),\n         )\n     else:\n-        if six.PY2 and isinstance(id_, six.text_type):\n+        if six.PY2 and isinstance(id_, str):\n             new_id = id_.encode("utf8")\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nindex a26de6b2c..048aa4f38 100644\n--- a/src/plone/restapi/services/contextnavigation/get.py\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -52,19 +52,19 @@ class INavigationPortlet(Interface):\n     """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-        title=_(u"label_navigation_title", default=u"Title"),\n+        title=_("label_navigation_title", default="Title"),\n         description=_(\n-            u"help_navigation_title", default=u"The title of the navigation tree."\n+            "help_navigation_title", default="The title of the navigation tree."\n         ),\n-        default=u"",\n+        default="",\n         required=False,\n     )\n \n     root_path = schema.TextLine(\n-        title=_(u"label_navigation_root_path", default=u"Root node"),\n+        title=_("label_navigation_root_path", default="Root node"),\n         description=_(\n-            u"help_navigation_root",\n-            default=u"You may search for and choose a folder "\n+            "help_navigation_root",\n+            default="You may search for and choose a folder "\n             "to act as the root of the navigation tree. "\n             "Leave blank to use the Plone site root.",\n         ),\n@@ -72,10 +72,10 @@ class INavigationPortlet(Interface):\n     )\n \n     includeTop = schema.Bool(\n-        title=_(u"label_include_top_node", default=u"Include top node"),\n+        title=_("label_include_top_node", default="Include top node"),\n         description=_(\n-            u"help_include_top_node",\n-            default=u"Whether or not to show the top, or \'root\', "\n+            "help_include_top_node",\n+            default="Whether or not to show the top, or \'root\', "\n             "node in the navigation tree. This is affected "\n             "by the \'Start level\' setting.",\n         ),\n@@ -85,12 +85,12 @@ class INavigationPortlet(Interface):\n \n     currentFolderOnly = schema.Bool(\n         title=_(\n-            u"label_current_folder_only",\n-            default=u"Only show the contents of the current folder.",\n+            "label_current_folder_only",\n+            default="Only show the contents of the current folder.",\n         ),\n         description=_(\n-            u"help_current_folder_only",\n-            default=u"If selected, the navigation tree will "\n+            "help_current_folder_only",\n+            default="If selected, the navigation tree will "\n             "only show the current folder and its "\n             "children at all times.",\n         ),\n@@ -99,10 +99,10 @@ class INavigationPortlet(Interface):\n     )\n \n     topLevel = schema.Int(\n-        title=_(u"label_navigation_startlevel", default=u"Start level"),\n+        title=_("label_navigation_startlevel", default="Start level"),\n         description=_(\n-            u"help_navigation_start_level",\n-            default=u"An integer value that specifies the number of folder "\n+            "help_navigation_start_level",\n+            default="An integer value that specifies the number of folder "\n             "levels below the site root that must be exceeded "\n             "before the navigation tree will display. 0 means "\n             "that the navigation tree should be displayed "\n@@ -116,10 +116,10 @@ class INavigationPortlet(Interface):\n     )\n \n     bottomLevel = schema.Int(\n-        title=_(u"label_navigation_tree_depth", default=u"Navigation tree depth"),\n+        title=_("label_navigation_tree_depth", default="Navigation tree depth"),\n         description=_(\n-            u"help_navigation_tree_depth",\n-            default=u"How many folders should be included "\n+            "help_navigation_tree_depth",\n+            default="How many folders should be included "\n             "before the navigation tree stops. 0 "\n             "means no limit. 1 only includes the "\n             "root folder.",\n@@ -129,27 +129,27 @@ class INavigationPortlet(Interface):\n     )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(u"If enabled, the portlet will not show document type icons."),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n         required=True,\n         default=False,\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=True,\n         default=False,\n     )\n@@ -165,7 +165,7 @@ def reply(self):\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class ContextNavigation(object):\n+class ContextNavigation:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -173,7 +173,7 @@ def __init__(self, context, request):\n     def __call__(self, expand=False, prefix="expand.contextnavigation."):\n         result = {\n             "contextnavigation": {\n-                "@id": "{}/@contextnavigation".format(self.context.absolute_url())\n+                "@id": f"{self.context.absolute_url()}/@contextnavigation"\n             }\n         }\n         if not expand:\n@@ -190,7 +190,7 @@ def getNavTree(self):\n         return self.__call__(expand=True)["contextnavigation"]\n \n \n-class NavigationPortletRenderer(object):\n+class NavigationPortletRenderer:\n     def __init__(self, context, request, data):\n \n         self.context = context\n@@ -605,7 +605,7 @@ def extract_data(schema, raw_data, prefix):\n         field = schema[name]\n         raw_value = raw_data.get(prefix + name, field.default)\n \n-        if isinstance(raw_value, six.string_types):\n+        if isinstance(raw_value, str):\n             raw_value = six.ensure_text(raw_value)\n \n         value = IFromUnicode(field).fromUnicode(raw_value)\n@@ -631,7 +631,7 @@ def get_root(context, root_path):\n     return root\n \n \n-class QueryBuilder(object):\n+class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\ndiff --git a/src/plone/restapi/services/controlpanels/add.py b/src/plone/restapi/services/controlpanels/add.py\nindex 27f133d12..7c51e50d4 100644\n--- a/src/plone/restapi/services/controlpanels/add.py\n+++ b/src/plone/restapi/services/controlpanels/add.py\n@@ -9,7 +9,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsAdd(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsAdd, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/controlpanels/delete.py b/src/plone/restapi/services/controlpanels/delete.py\nindex 73d9ea301..ec4d41d3a 100644\n--- a/src/plone/restapi/services/controlpanels/delete.py\n+++ b/src/plone/restapi/services/controlpanels/delete.py\n@@ -9,7 +9,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsDelete(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex c9ac5c4aa..82d96de91 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsGet(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -27,9 +27,9 @@ def get_controlpanel_adapters(self):\n \n     def available_controlpanels(self):\n         panels = dict(self.get_controlpanel_adapters())\n-        panels_by_configlet = dict(\n-            [(p.configlet_id, name) for name, p in panels.items()]\n-        )\n+        panels_by_configlet = {\n+            p.configlet_id: name for name, p in panels.items()\n+        }\n \n         pctool = getToolByName(self.context, "portal_controlpanel")\n         for group in pctool.getGroups():\ndiff --git a/src/plone/restapi/services/controlpanels/update.py b/src/plone/restapi/services/controlpanels/update.py\nindex 878d45f18..49db942fb 100644\n--- a/src/plone/restapi/services/controlpanels/update.py\n+++ b/src/plone/restapi/services/controlpanels/update.py\n@@ -10,7 +10,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsUpdate(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsUpdate, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 8fc4cd06d..d1303b43d 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -15,7 +15,7 @@ class BaseCopyMove(Service):\n     """Base service for copy/move operations."""\n \n     def __init__(self, context, request):\n-        super(BaseCopyMove, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.portal = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n         ).portal()\ndiff --git a/src/plone/restapi/services/database/get.py b/src/plone/restapi/services/database/get.py\nindex 4e24e90aa..4c174d7d8 100644\n--- a/src/plone/restapi/services/database/get.py\n+++ b/src/plone/restapi/services/database/get.py\n@@ -5,7 +5,7 @@ class DatabaseGet(Service):\n     def reply(self):\n         db = self.context._p_jar.db()\n         return {\n-            "@id": "{}/@database".format(self.context.absolute_url()),\n+            "@id": f"{self.context.absolute_url()}/@database",\n             "cache_length": db.cacheSize(),\n             "cache_length_bytes": db.getCacheSizeBytes(),\n             "cache_detail_length": db.cacheDetailSize(),\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex e6fa33285..071d75b04 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -28,7 +28,7 @@ def fix_location_header(context, request):\n     location = request.response.headers.get("location")\n     if location and "#" in location:\n         comment_id = location.split("#")[-1]\n-        url = "{}/@comments/{}".format(context.absolute_url(), comment_id)\n+        url = f"{context.absolute_url()}/@comments/{comment_id}"\n         request.response.headers["location"] = url\n \n \ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex c870a3242..03c0be33d 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -72,14 +72,14 @@ def reply(self):\n             if not sender_fullname:\n                 subject = self.context.translate(\n                     _(\n-                        u"A portal user via ${portal_title}",\n+                        "A portal user via ${portal_title}",\n                         mapping={"portal_title": portal_title},\n                     )\n                 )\n             else:\n                 subject = self.context.translate(\n                     _(\n-                        u"${sender_fullname} via ${portal_title}",\n+                        "${sender_fullname} via ${portal_title}",\n                         mapping={\n                             "sender_fullname": sender_fullname,\n                             "portal_title": portal_title,\n@@ -89,7 +89,7 @@ def reply(self):\n \n         message_intro = self.context.translate(\n             _(\n-                u"You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n+                "You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n                 mapping={\n                     "sender_fullname": sender_fullname or "a portal user",\n                     "portal_title": portal_title,\n@@ -97,7 +97,7 @@ def reply(self):\n             )\n         )\n \n-        message = u"{} \\n {}".format(message_intro, message)\n+        message = f"{message_intro} \\n {message}"\n \n         message = MIMEText(message, "plain", encoding)\n         message["Reply-To"] = sender_from_address\n@@ -113,7 +113,7 @@ def reply(self):\n         except (SMTPException, RuntimeError):\n             plone_utils = getToolByName(self.context, "plone_utils")\n             exception = plone_utils.exceptionString()\n-            message = "Unable to send mail: {}".format(exception)\n+            message = f"Unable to send mail: {exception}"\n \n             self.request.response.setStatus(500)\n             return dict(error=dict(type="InternalServerError", message=message))\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex 048bddaf7..b78f681f8 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -56,7 +56,7 @@ def reply(self):\n         )\n         if not success:\n             raise BadRequest(\n-                "Error occurred, could not add group {}.".format(groupname)\n+                f"Error occurred, could not add group {groupname}."\n             )\n \n         # Add members\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex e925e9cf4..395d33f3d 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -11,7 +11,7 @@ class GroupsDelete(Service):\n     """Deletes a user."""\n \n     def __init__(self, context, request):\n-        super(GroupsDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 00e81495d..e15ce54dd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -15,7 +15,7 @@\n @implementer(IPublishTraverse)\n class GroupsGet(Service):\n     def __init__(self, context, request):\n-        super(GroupsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.query = self.request.form.copy()\n \ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 8882d4d9c..1940cf14e 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -15,7 +15,7 @@ class GroupsPatch(Service):\n     """Updates an existing group."""\n \n     def __init__(self, context, request):\n-        super(GroupsPatch, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 3323badfd..26131893b 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -15,7 +15,7 @@\n @implementer(IPublishTraverse)\n class HistoryGet(Service):\n     def __init__(self, context, request):\n-        super(HistoryGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.version = None\n \n     def publishTraverse(self, request, name):\n@@ -72,7 +72,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item["time"], six.string_types):\n+            if not isinstance(item["time"], str):\n                 item["time"] = dt.fromtimestamp(item["time"]).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 80623391a..c8f2640fa 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -21,13 +21,13 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, six.text_type):\n-        title = six.text_type(title, "utf-8", "ignore")\n+    if not isinstance(title, str):\n+        title = str(title, "utf-8", "ignore")\n \n     if pr.supportsPolicy(context, "version_on_revert"):\n         try:\n             commit_msg = context.translate(\n-                _(u"Reverted to revision ${version}", mapping={"version": version})\n+                _("Reverted to revision ${version}", mapping={"version": version})\n             )\n             pr.save(obj=context, comment=commit_msg)\n         except FileTooLargeToVersionError:\n@@ -38,5 +38,5 @@ def revert(context, version):\n             )\n             raise BadRequest({"errors": error_msg})\n \n-    msg = u"{} has been reverted to revision {}.".format(title, version)\n+    msg = f"{title} has been reverted to revision {version}."\n     return {"message": msg}\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 2cc4b122f..0ebcb63ea 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -17,7 +17,7 @@\n \n @implementer(IExpandableElement)\n @adapter(ITranslatable, Interface)\n-class Translations(object):\n+class Translations:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -25,7 +25,7 @@ def __init__(self, context, request):\n     def __call__(self, expand=False):\n         result = {\n             "translations": {\n-                "@id": "{}/@translations".format(self.context.absolute_url())\n+                "@id": f"{self.context.absolute_url()}/@translations"\n             }\n         }\n         if not expand:\n@@ -55,7 +55,7 @@ class LinkTranslations(Service):\n     """Link two content objects as translations of each other"""\n \n     def __init__(self, context, request):\n-        super(LinkTranslations, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.portal = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n         ).portal()\n@@ -143,7 +143,7 @@ def reply(self):\n             return dict(\n                 error=dict(\n                     type="BadRequest",\n-                    message="This objects is not translated into {}".format(language),\n+                    message=f"This objects is not translated into {language}",\n                 )\n             )\n \ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 566b6b6f9..d0dae1b78 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -29,7 +29,7 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Navigation(object):\n+class Navigation:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -42,7 +42,7 @@ def __call__(self, expand=False):\n             self.depth = 1\n \n         result = {\n-            "navigation": {"@id": "{}/@navigation".format(self.context.absolute_url())}\n+            "navigation": {"@id": f"{self.context.absolute_url()}/@navigation"}\n         }\n         if not expand:\n             return result\n@@ -85,7 +85,7 @@ def settings(self):\n     @property\n     def default_language(self):\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         return portal_state.default_language()\n \ndiff --git a/src/plone/restapi/services/principals/get.py b/src/plone/restapi/services/principals/get.py\nindex 1ab866d95..c9615862c 100644\n--- a/src/plone/restapi/services/principals/get.py\n+++ b/src/plone/restapi/services/principals/get.py\n@@ -34,10 +34,10 @@ def user_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n                 chain(\n-                    *[\n+                    *(\n                         hunter.searchUsers(**{field: search_term})\n                         for field in ["name", "fullname", "email"]\n-                    ]\n+                    )\n                 ),\n                 "userid",\n             )\n@@ -54,10 +54,10 @@ def group_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n                 chain(\n-                    *[\n+                    *(\n                         hunter.searchGroups(**{field: search_term})\n                         for field in ["id", "title"]\n-                    ]\n+                    )\n                 ),\n                 "groupid",\n             )\ndiff --git a/src/plone/restapi/services/querysources/get.py b/src/plone/restapi/services/querysources/get.py\nindex 893b63ab6..47d7c513f 100644\n--- a/src/plone/restapi/services/querysources/get.py\n+++ b/src/plone/restapi/services/querysources/get.py\n@@ -32,8 +32,8 @@ def reply(self):\n             return self._error(\n                 400,\n                 "Bad Request",\n-                u"Enumerating querysources is not supported. Please search "\n-                u"the source using the ?query= QS parameter",\n+                "Enumerating querysources is not supported. Please search "\n+                "the source using the ?query= QS parameter",\n             )\n \n         query = self.request.form["query"]\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5b74093dc..8ba0ac2cd 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -10,7 +10,7 @@\n @implementer(IPublishTraverse)\n class RegistryGet(Service):\n     def __init__(self, context, request):\n-        super(RegistryGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/roles/get.py b/src/plone/restapi/services/roles/get.py\nindex de257ce5c..1e84c7854 100644\n--- a/src/plone/restapi/services/roles/get.py\n+++ b/src/plone/restapi/services/roles/get.py\n@@ -11,7 +11,7 @@ def reply(self):\n         return [\n             {\n                 "@type": "role",\n-                "@id": "{}/@roles/{}".format(self.context.absolute_url(), r),\n+                "@id": f"{self.context.absolute_url()}/@roles/{r}",\n                 "id": r,\n                 "title": translate(r, context=self.request, domain="plone"),\n             }\ndiff --git a/src/plone/restapi/services/sources/get.py b/src/plone/restapi/services/sources/get.py\nindex 58cf381b6..d7ba61f79 100644\n--- a/src/plone/restapi/services/sources/get.py\n+++ b/src/plone/restapi/services/sources/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class SourcesGet(Service):\n     def __init__(self, context, request):\n-        super(SourcesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -49,7 +49,7 @@ def reply(self):\n \n         serializer = getMultiAdapter((source, self.request), interface=ISerializeToJson)\n         return serializer(\n-            "{}/@sources/{}".format(self.context.absolute_url(), fieldname)\n+            f"{self.context.absolute_url()}/@sources/{fieldname}"\n         )\n \n \ndiff --git a/src/plone/restapi/services/system/get.py b/src/plone/restapi/services/system/get.py\nindex 41b6dce80..1a19462e0 100644\n--- a/src/plone/restapi/services/system/get.py\n+++ b/src/plone/restapi/services/system/get.py\n@@ -15,7 +15,7 @@ def reply(self):\n         overview_control_panel = OverviewControlPanel(self.context, self.request)\n         core_versions = overview_control_panel.core_versions()\n         return {\n-            "@id": "{}/@system".format(self.context.absolute_url()),\n+            "@id": f"{self.context.absolute_url()}/@system",\n             "zope_version": core_versions.get("Zope"),\n             "plone_version": core_versions.get("Plone"),\n             "plone_restapi_version": plone_restapi_version,\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex b9eedf943..d2ad76606 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -13,7 +13,7 @@\n @implementer(IPublishTraverse)\n class TilesGet(Service):\n     def __init__(self, context, request):\n-        super(TilesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -32,7 +32,7 @@ def reply(self):\n                 self.request.response.setStatus(404)\n                 return {\n                     "type": "NotFound",\n-                    "message": \'Tile "{}" could not be found.\'.format(self.params[0]),\n+                    "message": f\'Tile "{self.params[0]}" could not be found.\',\n                 }\n \n         result = []\ndiff --git a/src/plone/restapi/services/types/add.py b/src/plone/restapi/services/types/add.py\nindex 32673a94f..56150ce81 100644\n--- a/src/plone/restapi/services/types/add.py\n+++ b/src/plone/restapi/services/types/add.py\n@@ -17,7 +17,7 @@ class TypesPost(Service):\n     """Creates a new field/fieldset"""\n \n     def __init__(self, context, request):\n-        super(TypesPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/delete.py b/src/plone/restapi/services/types/delete.py\nindex 41b03dda4..183049a4b 100644\n--- a/src/plone/restapi/services/types/delete.py\n+++ b/src/plone/restapi/services/types/delete.py\n@@ -16,7 +16,7 @@ class TypesDelete(Service):\n     """Deletes a field/fieldset from content type"""\n \n     def __init__(self, context, request):\n-        super(TypesDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex d4ab0ad03..508793dd1 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -28,13 +28,13 @@ def check_security(context):\n \n @implementer(IExpandableElement)\n @adapter(IDexterityContent, Interface)\n-class TypesInfo(object):\n+class TypesInfo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {"types": {"@id": "{}/@types".format(self.context.absolute_url())}}\n+        result = {"types": {"@id": f"{self.context.absolute_url()}/@types"}}\n         if not expand:\n             return result\n \n@@ -64,7 +64,7 @@ def __call__(self, expand=False):\n \n         result["types"] = [\n             {\n-                "@id": "{}/@types/{}".format(portal_url, fti.getId()),\n+                "@id": f"{portal_url}/@types/{fti.getId()}",\n                 "title": translate(fti.Title(), context=self.request),\n                 "addable": fti.getId() in allowed_types if can_add else False,\n             }\n@@ -77,7 +77,7 @@ def __call__(self, expand=False):\n @implementer(IPublishTraverse)\n class TypesGet(Service):\n     def __init__(self, context, request):\n-        super(TypesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/put.py b/src/plone/restapi/services/types/put.py\nindex 9ccfd1170..0c5db709e 100644\n--- a/src/plone/restapi/services/types/put.py\n+++ b/src/plone/restapi/services/types/put.py\n@@ -24,7 +24,7 @@\n @implementer(IPublishTraverse)\n class TypesPut(Service):\n     def __init__(self, context, request):\n-        super(TypesPut, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -42,9 +42,9 @@ def update_layouts(self, name, data):\n \n     def remove_fieldsets(self, ctype, data):\n         fieldsets = [f.get("id") for f in data.get("fieldsets", [])]\n-        existing = set(\n+        existing = {\n             f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n-        )\n+        }\n \n         for fieldset in existing:\n             if fieldset not in fieldsets:\n@@ -53,14 +53,14 @@ def remove_fieldsets(self, ctype, data):\n     def add_fieldsets(self, ctype, data):\n         fieldsets = OrderedDict((f.get("id"), f) for f in data.get("fieldsets", []))\n         info = get_info_for_type(ctype, self.request, ctype.getId())\n-        existing = set(f.get("id") for f in info.get("fieldsets", []))\n+        existing = {f.get("id") for f in info.get("fieldsets", [])}\n         for name, fieldset in fieldsets.items():\n             if name not in existing:\n                 add_fieldset(ctype, self.request, fieldset)\n \n     def remove_fields(self, ctype, data):\n         fields = data.get("properties", {})\n-        existing = set(name for name in ctype.schema)\n+        existing = {name for name in ctype.schema}\n         for name in existing:\n             if name not in fields:\n                 delete_field(ctype, self.request, name)\n@@ -82,9 +82,9 @@ def add_fields(self, ctype, data):\n             add_field(ctype, self.request, field)\n \n     def update_fieldsets(self, ctype, data):\n-        existing = set(\n+        existing = {\n             f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n-        )\n+        }\n         existing.add("default")\n         for fieldset in data.get("fieldsets", []):\n             if fieldset.get("id") not in existing:\ndiff --git a/src/plone/restapi/services/types/update.py b/src/plone/restapi/services/types/update.py\nindex bcc8baa18..fd28c044b 100644\n--- a/src/plone/restapi/services/types/update.py\n+++ b/src/plone/restapi/services/types/update.py\n@@ -19,7 +19,7 @@\n @implementer(IPublishTraverse)\n class TypesUpdate(Service):\n     def __init__(self, context, request):\n-        super(TypesUpdate, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -83,7 +83,7 @@ def reply_for_fieldset(self, name, fieldset_name, data, create=False):\n \n         if create:\n             info = get_info_for_type(context, self.request, name)\n-            existing = set(f.get("id") for f in info.get("fieldsets", []))\n+            existing = {f.get("id") for f in info.get("fieldsets", [])}\n             if fieldset_name not in existing:\n                 add_fieldset(context, self.request, data)\n         update_fieldset(context, self.request, data)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 8c52dee73..be125b530 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -41,7 +41,7 @@ class UsersPost(Service):\n     """Creates a new user."""\n \n     def __init__(self, context, request):\n-        super(UsersPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -79,12 +79,12 @@ def validate_input_data(self, portal, original_data):\n         for fieldname in required:\n             if not data.get(fieldname, None):\n                 self.add_field_error(\n-                    fieldname, "Property \'{}\' is required.".format(fieldname)\n+                    fieldname, f"Property \'{fieldname}\' is required."\n                 )\n         for fieldname in data:\n             if fieldname not in allowed:\n                 self.add_field_error(\n-                    fieldname, "Property \'{}\' is not allowed.".format(fieldname)\n+                    fieldname, f"Property \'{fieldname}\' is not allowed."\n                 )\n \n         password = data.get("password")\n@@ -142,7 +142,7 @@ def reply(self):\n             return dict(\n                 error=dict(\n                     type="WrongParameterError",\n-                    message="Error in fields. {}".format(self.errors_to_string()),\n+                    message=f"Error in fields. {self.errors_to_string()}",\n                     errors=self.errors,\n                 )\n             )\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 5649ae447..905de65d1 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -10,7 +10,7 @@ class UsersDelete(Service):\n     """Deletes a user."""\n \n     def __init__(self, context, request):\n-        super(UsersDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex d8d2bca34..ff64385ea 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -15,7 +15,7 @@\n @implementer(IPublishTraverse)\n class UsersGet(Service):\n     def __init__(self, context, request):\n-        super(UsersGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.query = self.request.form.copy()\n \ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 12a81a31f..e12f3bfca 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -30,7 +30,7 @@ class UsersPatch(Service):\n     """Updates an existing user."""\n \n     def __init__(self, context, request):\n-        super(UsersPatch, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -166,7 +166,7 @@ def set_member_portrait(self, user, portrait):\n         content_type = portrait.get("content-type", content_type)\n         filename = portrait.get("filename", filename)\n         data = portrait.get("data")\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode("utf-8")\n         if "encoding" in portrait:\n             data = codecs.decode(data, portrait["encoding"])\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex 8d7b781e1..3905db087 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n     def __init__(self, context, request):\n-        super(VocabulariesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -41,7 +41,7 @@ def reply(self):\n             factory = getUtility(IVocabularyFactory, name=name)\n         except ComponentLookupError:\n             return self._error(\n-                404, "Not Found", "The vocabulary \'{}\' does not exist".format(name)\n+                404, "Not Found", f"The vocabulary \'{name}\' does not exist"\n             )\n \n         vocabulary = factory(self.context)\n@@ -50,5 +50,5 @@ def reply(self):\n             (vocabulary, self.request), interface=ISerializeToJson\n         )\n         return serializer(\n-            "{}/@vocabularies/{}".format(self.context.absolute_url(), vocabulary_name)\n+            f"{self.context.absolute_url()}/@vocabularies/{vocabulary_name}"\n         )\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex f7e28bab4..0c294e418 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -14,14 +14,14 @@\n \n @implementer(IExpandableElement)\n @adapter(IWorkflowAware, Interface)\n-class WorkflowInfo(object):\n+class WorkflowInfo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            "workflow": {"@id": "{}/@workflow".format(self.context.absolute_url())}\n+            "workflow": {"@id": f"{self.context.absolute_url()}/@workflow"}\n         }\n         if not expand:\n             return result\n@@ -47,7 +47,7 @@ def __call__(self, expand=False):\n                 continue\n \n             title = action["title"]\n-            if isinstance(title, six.binary_type):\n+            if isinstance(title, bytes):\n                 title = title.decode("utf8")\n \n             transitions.append(\n@@ -63,7 +63,7 @@ def __call__(self, expand=False):\n             title = wftool.getTitleForStateOnType(\n                 action["review_state"], self.context.portal_type\n             )\n-            if isinstance(title, six.binary_type):\n+            if isinstance(title, bytes):\n                 title = title.decode("utf8")\n             history[item]["title"] = self.context.translate(title)\n \ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex b09dc3b32..c3aa82a57 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -24,7 +24,7 @@ class WorkflowTransition(Service):\n     """Trigger workflow transition"""\n \n     def __init__(self, context, request):\n-        super(WorkflowTransition, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.transition = None\n         self.wftool = getToolByName(context, "portal_workflow")\n \n@@ -80,18 +80,11 @@ def reply(self):\n             try:\n                 history = self.wftool.getInfoFor(self.context, "review_history")\n                 action = history[-1]\n-                if six.PY2:\n-                    action["title"] = self.context.translate(\n-                        self.wftool.getTitleForStateOnType(\n-                            action["review_state"], self.context.portal_type\n-                        ).decode("utf8")\n-                    )\n-                else:\n-                    action["title"] = self.context.translate(\n-                        self.wftool.getTitleForStateOnType(\n-                            action["review_state"], self.context.portal_type\n-                        )\n+                action["title"] = self.context.translate(\n+                    self.wftool.getTitleForStateOnType(\n+                        action["review_state"], self.context.portal_type\n                     )\n+                )\n             except WorkflowException as e:\n                 self.request.response.setStatus(400)\n                 action = dict(\ndiff --git a/src/plone/restapi/services/workingcopy/create.py b/src/plone/restapi/services/workingcopy/create.py\nindex 20466143f..2bc8846e5 100644\n--- a/src/plone/restapi/services/workingcopy/create.py\n+++ b/src/plone/restapi/services/workingcopy/create.py\n@@ -21,7 +21,7 @@ def reply(self):\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        control = getMultiAdapter((self.context, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((self.context, self.request), name="iterate_control")\n         if not control.checkout_allowed():\n             pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\ndiff --git a/src/plone/restapi/services/workingcopy/delete.py b/src/plone/restapi/services/workingcopy/delete.py\nindex 77b4f21b8..6e102a71c 100644\n--- a/src/plone/restapi/services/workingcopy/delete.py\n+++ b/src/plone/restapi/services/workingcopy/delete.py\n@@ -11,7 +11,7 @@ def reply(self):\n             # We are in the baseline, get the working copy policy\n             policy = ICheckinCheckoutPolicy(working_copy)\n \n-        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((working_copy, self.request), name="iterate_control")\n \n         if not control.cancel_allowed():\n             return self._error(403, "Not authorized", "Cancel not allowed")\ndiff --git a/src/plone/restapi/services/workingcopy/update.py b/src/plone/restapi/services/workingcopy/update.py\nindex 824ea61b7..7dd56c9ff 100644\n--- a/src/plone/restapi/services/workingcopy/update.py\n+++ b/src/plone/restapi/services/workingcopy/update.py\n@@ -19,7 +19,7 @@ def reply(self):\n             # We are in the baseline, get the working copy policy\n             policy = ICheckinCheckoutPolicy(working_copy)\n \n-        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((working_copy, self.request), name="iterate_control")\n         if not control.checkin_allowed():\n             pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex c33ef7682..661f7eea7 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -10,15 +10,15 @@\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):  # pragma: no cover\n         """Do not show on Plone\'s list of installable profiles."""\n         return [\n-            u"plone.restapi:blocks",\n-            u"plone.restapi:performance",\n-            u"plone.restapi:testing",\n-            u"plone.restapi:testing-workflows",\n-            u"plone.restapi:uninstall",\n+            "plone.restapi:blocks",\n+            "plone.restapi:performance",\n+            "plone.restapi:testing",\n+            "plone.restapi:testing-workflows",\n+            "plone.restapi:uninstall",\n         ]\n \n     def getNonInstallableProducts(self):  # pragma: no cover\n@@ -26,7 +26,7 @@ def getNonInstallableProducts(self):  # pragma: no cover\n \n         This method is only used in Plone 5.1+.\n         """\n-        return [u"plone.restapi.upgrades"]\n+        return ["plone.restapi.upgrades"]\n \n \n def install_pas_plugin(context):\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex d713e46a6..ae2a750ae 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -151,12 +151,7 @@ def setUpPloneSite(self, portal):\n         quickInstallProduct(portal, "collective.MockMailHost")\n         applyProfile(portal, "collective.MockMailHost:default")\n         states = portal.portal_workflow["simple_publication_workflow"].states\n-        if six.PY2:  # issue 676\n-            states["published"].title = u"Published with accent \xc3\xa9".encode(\n-                "utf8"\n-            )  # noqa: E501\n-        else:\n-            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n+        states["published"].title = "Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n@@ -212,12 +207,7 @@ def setUpPloneSite(self, portal):\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n         states = portal.portal_workflow["simple_publication_workflow"].states\n-        if six.PY2:  # issue 676\n-            states["published"].title = u"Published with accent \xc3\xa9".encode(\n-                "utf8"\n-            )  # noqa: E501\n-        else:\n-            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n+        states["published"].title = "Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_PAM_FIXTURE = PloneRestApiDXPAMLayer()\n@@ -278,7 +268,7 @@ class RelativeSession(requests.Session):\n     """\n \n     def __init__(self, base_url):\n-        super(RelativeSession, self).__init__()\n+        super().__init__()\n         if not base_url.endswith("/"):\n             base_url += "/"\n         self.__base_url = base_url\n@@ -288,17 +278,17 @@ def request(self, method, url, **kwargs):\n             url = url.lstrip("/")\n             url = urljoin(self.__base_url, url)\n         try:\n-            return super(RelativeSession, self).request(method, url, **kwargs)\n+            return super().request(method, url, **kwargs)\n         except ConnectionError:\n             # On Jenkins we often get one ConnectionError in a seemingly\n             # random test, mostly in test_documentation.py.\n             # The server is still listening: the port is open.  We retry once.\n             time.sleep(1)\n-            return super(RelativeSession, self).request(method, url, **kwargs)\n+            return super().request(method, url, **kwargs)\n \n \n @implementer(IUUIDGenerator)\n-class StaticUUIDGenerator(object):\n+class StaticUUIDGenerator:\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex b1bfe6185..a71d5fd9d 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -38,7 +38,7 @@\n \n \n @implementer(ISource)\n-class MyNonIterableSource(object):\n+class MyNonIterableSource:\n     divisor = 2\n \n     def __contains__(self, value):\n@@ -46,7 +46,7 @@ def __contains__(self, value):\n \n \n @implementer(IIterableSource)\n-class MyIterableSource(object):\n+class MyIterableSource:\n     values = [1, 2, 3]\n \n     def __contains__(self, value):\n@@ -61,7 +61,7 @@ def __iter__(self):\n \n \n @implementer(IQuerySource)\n-class MyIterableQuerySource(object):\n+class MyIterableQuerySource:\n     values = [1, 2, 3]\n \n     def __contains__(self, value):\n@@ -80,7 +80,7 @@ def __iter__(self):\n \n \n @implementer(IIterableSource)\n-class MyIterableContextSource(object):\n+class MyIterableContextSource:\n     def __init__(self, context):\n         self.context = context\n \n@@ -98,7 +98,7 @@ def __iter__(self):\n \n \n @implementer(IQuerySource)\n-class MyContextQuerySource(object):\n+class MyContextQuerySource:\n     def __init__(self, context):\n         self.context = context\n \n@@ -151,12 +151,12 @@ class IDXTestDocumentSchema(model.Schema):\n     test_bool_field = schema.Bool(required=False)\n     test_bytes_field = schema.Bytes(required=False)\n     test_bytesline_field = schema.BytesLine(required=False)\n-    test_choice_field = schema.Choice(values=[u"foo", u"bar"], required=False)\n+    test_choice_field = schema.Choice(values=["foo", "bar"], required=False)\n     test_choice_field_with_vocabulary = schema.Choice(\n         vocabulary=SimpleVocabulary(\n             [\n-                SimpleTerm(u"value1", "token1", u"title1"),\n-                SimpleTerm(u"value2", "token2", u"title2"),\n+                SimpleTerm("value1", "token1", "title1"),\n+                SimpleTerm("value2", "token2", "title2"),\n             ]\n         ),\n         required=False,\n@@ -192,9 +192,9 @@ class IDXTestDocumentSchema(model.Schema):\n         value_type=schema.Choice(\n             vocabulary=SimpleVocabulary(\n                 [\n-                    SimpleTerm(u"value1", "token1", u"title1"),\n-                    SimpleTerm(u"value2", "token2", u"title2"),\n-                    SimpleTerm(u"value3", "token3", u"title3"),\n+                    SimpleTerm("value1", "token1", "title1"),\n+                    SimpleTerm("value2", "token2", "title2"),\n+                    SimpleTerm("value3", "token3", "title3"),\n                 ]\n             )\n         ),\n@@ -205,9 +205,9 @@ class IDXTestDocumentSchema(model.Schema):\n         value_type=schema.Choice(\n             vocabulary=SimpleVocabulary(\n                 [\n-                    SimpleTerm(u"value1", "token1", u"title1"),\n-                    SimpleTerm(u"value2", "token2", u"title2"),\n-                    SimpleTerm(u"value3", "token3", u"title3"),\n+                    SimpleTerm("value1", "token1", "title1"),\n+                    SimpleTerm("value2", "token2", "title2"),\n+                    SimpleTerm("value3", "token3", "title3"),\n                 ]\n             )\n         ),\n@@ -223,7 +223,7 @@ class IDXTestDocumentSchema(model.Schema):\n         required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple()\n     )\n     test_list_choice_with_context_vocabulary_field = schema.List(\n-        title=u"Field",\n+        title="Field",\n         value_type=schema.Choice(vocabulary="plone.restapi.testing.context_vocabulary"),\n         required=False,\n     )\n@@ -256,7 +256,7 @@ class IDXTestDocumentSchema(model.Schema):\n     test_readonly_field = schema.TextLine(required=False, readonly=True)\n     test_maxlength_field = schema.TextLine(required=False, max_length=10)\n     test_constraint_field = schema.TextLine(\n-        required=False, constraint=lambda x: u"00" in x\n+        required=False, constraint=lambda x: "00" in x\n     )\n     test_datetime_min_field = schema.Datetime(required=False, min=datetime(2000, 1, 1))\n     test_time_min_field = schema.Time(required=False, min=time(1))\n@@ -276,24 +276,24 @@ class IDXTestDocumentSchema(model.Schema):\n     test_invariant_field2 = schema.TextLine(required=False)\n \n     test_missing_value_field = schema.TextLine(\n-        required=False, missing_value=u"missing", default=u"default"\n+        required=False, missing_value="missing", default="default"\n     )\n \n     test_missing_value_required_field = schema.TextLine(\n-        required=True, missing_value=u"missing", default=u"some value"\n+        required=True, missing_value="missing", default="some value"\n     )\n \n     @invariant\n     def validate_same_value(data):\n         if data.test_invariant_field1 != data.test_invariant_field2:\n-            raise Invalid(u"Must have same values")\n+            raise Invalid("Must have same values")\n \n     # Test fields with default values\n-    test_default_value_field = schema.TextLine(required=True, default=u"Default")\n+    test_default_value_field = schema.TextLine(required=True, default="Default")\n \n     @provider(IContextAwareDefaultFactory)\n     def default_factory(context):\n-        return u"DefaultFactory"\n+        return "DefaultFactory"\n \n     test_default_factory_field = schema.TextLine(\n         required=True, defaultFactory=default_factory\ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex 592ef45e2..ff4426400 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -4,7 +4,7 @@\n from plone.i18n.locales.languages import _languagelist\n \n \n-class ModifiableLanguages(object):\n+class ModifiableLanguages:\n     """Mixin for the `IModifiableLanguageAvailability` based local utilities\n     that makes the getLanguages and getLanguageListing methods\n     (queried by portal_languages) also respect *modifiable* language\n@@ -38,7 +38,7 @@ def getLanguageListing(self, combined=False):\n         available = self.getAvailableLanguages(combined=combined)\n         languages = {k: v for k, v in languages.items() if k in available}\n \n-        return [(code, languages[code][u"name"]) for code in languages]\n+        return [(code, languages[code]["name"]) for code in languages]\n \n \n class ModifiableContentLanguages(ModifiableLanguages, ContentLanguages):\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex f314800bf..bf8eba40e 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -254,7 +254,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEqual(u"Client/server ordering mismatch", str(cm.exception))\n+        self.assertEqual("Client/server ordering mismatch", str(cm.exception))\n \n     def test_resort_all_items(self):\n         self.assertEqual(\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 9063579ca..47d97de4c 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -3,7 +3,6 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n-from six.moves import range\n from zope.component.hooks import getSite\n \n import os\n@@ -35,10 +34,10 @@ def set_image(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobImage\n \n-        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n         obj.image = NamedBlobImage(data=open(filename, "rb").read(), filename=filename)\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n         obj.setImage(open(filename, "rb").read())\n \n \n@@ -46,14 +45,14 @@ def set_file(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobFile\n \n-        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n         obj.file = NamedBlobFile(\n             data=open(filename, "rb").read(),\n             filename=filename,\n             contentType="application/pdf",\n         )\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n         obj.setFile(open(filename, "rb").read())\n \n \n@@ -109,9 +108,9 @@ def step_setup_content(context):\n     publish(folder10)\n     for i in range(1, 11):\n         folder10.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n+            "Document", id=f"doc{i}", title=f"Doc {i}"\n         )\n-        publish(folder10["doc{}".format(i)])\n+        publish(folder10[f"doc{i}"])\n \n     # Folder with 100 Items\n     portal.invokeFactory("Folder", id="folder-with-100-items", title="Folder 100")\n@@ -120,9 +119,9 @@ def step_setup_content(context):\n     publish(folder100)\n     for i in range(1, 101):\n         folder100.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n+            "Document", id=f"doc{i}", title=f"Doc {i}"\n         )\n-        publish(folder100["doc{}".format(i)])\n+        publish(folder100[f"doc{i}"])\n \n     # Folder with 1000 Items\n     portal.invokeFactory("Folder", id="folder-with-1000-items", title="Folder 1000")\n@@ -131,9 +130,9 @@ def step_setup_content(context):\n     publish(folder1000)\n     for i in range(1, 1001):\n         folder1000.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n+            "Document", id=f"doc{i}", title=f"Doc {i}"\n         )\n-        publish(folder1000["doc{}".format(i)])\n+        publish(folder1000[f"doc{i}"])\n \n     # Folder with 10 Items and next/previous enabled\n     portal.invokeFactory(\n@@ -147,9 +146,9 @@ def step_setup_content(context):\n     publish(folder10np)\n     for i in range(1, 11):\n         folder10np.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n+            "Document", id=f"doc{i}", title=f"Doc {i}"\n         )\n-        publish(folder10np["doc{}".format(i)])\n+        publish(folder10np[f"doc{i}"])\n \n     # Collection\n     portal.invokeFactory("Collection", id="collection", title="Collection")\n@@ -203,28 +202,28 @@ def step_setup_content(context):\n \n     # Image 1 MB\n     portal.invokeFactory("Image", id="image-1mb", title="Image 1 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-1mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-1mb.jpg")\n     portal.get("image-1mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 2 MB\n     portal.invokeFactory("Image", id="image-2mb", title="Image 2 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-2mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-2mb.jpg")\n     portal.get("image-2mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 3 MB\n     portal.invokeFactory("Image", id="image-3mb", title="Image 3 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-3mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-3mb.jpg")\n     portal.get("image-3mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 10 MB\n     portal.invokeFactory("Image", id="image-10mb", title="Image 10 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-10mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-10mb.jpg")\n     portal.get("image-10mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n@@ -236,29 +235,29 @@ def step_setup_content(context):\n \n     for i in range(1, 31):\n         volto_page.invokeFactory(\n-            "News Item", id="newsitem{}".format(i), title="NewsItem {}".format(i)\n+            "News Item", id=f"newsitem{i}", title=f"NewsItem {i}"\n         )\n-        newsitem = volto_page.get("newsitem{}".format(i))\n+        newsitem = volto_page.get(f"newsitem{i}")\n         set_description(newsitem)\n         set_text(newsitem)\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.jpeg")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         newsitem.image = NamedBlobImage(\n-            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+            data=image_data, contentType="image/jpeg", filename="image.jpeg"\n         )\n         publish(newsitem)\n         newsitem.reindexObject()\n \n     for i in range(1, 31):\n         volto_page.invokeFactory(\n-            "Image", id="image{}".format(i), title="Image {}".format(i)\n+            "Image", id=f"image{i}", title=f"Image {i}"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.jpeg")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n-        volto_page.get("image{}".format(i)).image = NamedBlobImage(\n-            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+        volto_page.get(f"image{i}").image = NamedBlobImage(\n+            data=image_data, contentType="image/jpeg", filename="image.jpeg"\n         )\n \n     # Volto\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 7cc56af76..34e0bf5f5 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -17,7 +17,7 @@\n }\n \n \n-class StaticTime(object):\n+class StaticTime:\n     """ContextManager to patch accessor methods that return dynamic timestamps,\n     like creation and modification dates, with ones that return static\n     timestamps.\ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex 1e057e038..d607bd49a 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -45,16 +45,16 @@ def test_get_addon_record(self):\n         self.assertEqual(response.status_code, 200)\n         result = response.json()\n \n-        self.assertEqual(result["@id"], self.portal_url + u"/@addons/plone.session")\n-        self.assertEqual(result["id"], u"plone.session")\n+        self.assertEqual(result["@id"], self.portal_url + "/@addons/plone.session")\n+        self.assertEqual(result["id"], "plone.session")\n         # self.assertEqual(result[\'is_installed\'], False)\n-        self.assertEqual(result["title"], u"Session refresh support")\n+        self.assertEqual(result["title"], "Session refresh support")\n         self.assertEqual(\n-            result["description"], u"Optional plone.session refresh support."\n+            result["description"], "Optional plone.session refresh support."\n         )\n-        self.assertEqual(result["profile_type"], u"default")\n+        self.assertEqual(result["profile_type"], "default")\n         self.assertEqual(result["upgrade_info"], {})\n-        self.assertEqual(result["install_profile_id"], u"plone.session:default")\n+        self.assertEqual(result["install_profile_id"], "plone.session:default")\n \n     def test_get_addon_listing(self):\n         response = self.api_session.get("/@addons")\n@@ -103,7 +103,7 @@ def test_install_uninstall_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is currently shown as installed\n-        session = [a for a in result["items"] if a["id"] == u"plone.session"]\n+        session = [a for a in result["items"] if a["id"] == "plone.session"]\n         self.assertEqual(len(session), 1)\n         self.assertTrue(session[0]["is_installed"])\n \n@@ -116,7 +116,7 @@ def test_install_uninstall_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is currently shown as not installed\n-        session = [a for a in result["items"] if a["id"] == u"plone.session"]\n+        session = [a for a in result["items"] if a["id"] == "plone.session"]\n         self.assertEqual(len(session), 1)\n         self.assertFalse(session[0]["is_installed"])\n \n@@ -185,6 +185,6 @@ def test_upgrade_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is at last version\n-        session = [a for a in result["items"] if a["id"] == u"plone.restapi"]\n+        session = [a for a in result["items"] if a["id"] == "plone.restapi"]\n         self.assertEqual(len(session), 1)\n         self.assertEqual(last_version, session[0]["upgrade_info"])\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 10b86b451..7246d0145 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -46,7 +46,7 @@ def test_login_with_invalid_credentials_fails(self):\n         self.assertNotIn("token", res)\n \n     def test_successful_login_returns_token(self):\n-        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{{"login": "{}", "password": "{}"}}\'.format(\n             SITE_OWNER_NAME,\n             SITE_OWNER_PASSWORD,\n         )\n@@ -57,18 +57,18 @@ def test_successful_login_returns_token(self):\n \n     def test_invalid_token_returns_400(self):\n         invalid_token = "abc123"\n-        self.request._auth = "Bearer {}".format(invalid_token)\n+        self.request._auth = f"Bearer {invalid_token}"\n         self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_expired_token_returns_400(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin", timeout=-60)\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_login_without_api_permission(self):\n         self.portal.manage_permission(UseRESTAPI, roles=[])\n-        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{{"login": "{}", "password": "{}"}}\'.format(\n             SITE_OWNER_NAME,\n             SITE_OWNER_PASSWORD,\n         )\n@@ -141,7 +141,7 @@ def test_logout_with_without_credentials_fails(self):\n     def test_logout_succeeds(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n@@ -175,7 +175,7 @@ def test_renew_without_pas_plugin_fails(self):\n     def test_renew_returns_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn("token", res)\n@@ -183,7 +183,7 @@ def test_renew_returns_token(self):\n     def test_renew_deletes_old_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn("token", res)\n@@ -191,7 +191,7 @@ def test_renew_deletes_old_token(self):\n \n     def test_renew_fails_on_invalid_token(self):\n         token = "this is an invalid token"\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(service.request.response.status, 401)\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 29b9d1910..83bc9a89f 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -7,7 +7,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from six.moves import range\n from six.moves.urllib.parse import parse_qsl\n from six.moves.urllib.parse import urlparse\n \n@@ -35,9 +34,9 @@ def tearDown(self):\n     def _create_doc(self, container, number):\n         createContentInContainer(\n             container,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc-%s" % str(number + 1),\n-            title=u"Document %s" % str(number + 1),\n+            title="Document %s" % str(number + 1),\n         )\n \n \n@@ -46,9 +45,9 @@ class TestBatchingSearch(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingSearch, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -73,7 +72,7 @@ def test_canonical_url_preserves_multiple_metadata_fields(self):\n         canonicalized_qs = parse_qsl(urlparse(response.json()["@id"]).query)\n \n         self.assertEqual(\n-            set(original_qs) - set([("b_size", "2"), ("b_start", "2")]),\n+            set(original_qs) - {("b_size", "2"), ("b_start", "2")},\n             set(canonicalized_qs),\n         )\n \n@@ -86,11 +85,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n+                "first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                "next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                "last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -103,7 +102,7 @@ def test_contains_correct_batch_of_items(self):\n \n         # Response should contain second batch of items\n         self.assertEqual(\n-            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            ["/plone/folder/doc-2", "/plone/folder/doc-3"],\n             result_paths(response.json()),\n         )\n \n@@ -120,15 +119,15 @@ class TestBatchingCollections(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingCollections, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n \n         collection = createContentInContainer(\n-            self.portal, u"Collection", id="collection"\n+            self.portal, "Collection", id="collection"\n         )\n         collection.query = [\n             {\n@@ -155,11 +154,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/collection?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/collection?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/collection?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/collection?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/collection?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/collection?b_start=2&b_size=2",\n+                "first": self.portal_url + "/collection?b_start=0&b_size=2",\n+                "next": self.portal_url + "/collection?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/collection?b_start=0&b_size=2",\n+                "last": self.portal_url + "/collection?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -172,7 +171,7 @@ def test_contains_correct_batch_of_items(self):\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n         self.assertTrue(\n-            all(path.startswith(u"/plone/folder/doc-") for path in _result_paths)\n+            all(path.startswith("/plone/folder/doc-") for path in _result_paths)\n         )\n \n     def test_total_item_count_is_correct(self):\n@@ -192,9 +191,9 @@ class TestBatchingDXFolders(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingDXFolders, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -216,11 +215,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                "first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                "next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                "last": self.portal_url + "/folder?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -233,7 +232,7 @@ def test_contains_correct_batch_of_items(self):\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n         self.assertTrue(\n-            all(path.startswith(u"/plone/folder/doc-") for path in _result_paths)\n+            all(path.startswith("/plone/folder/doc-") for path in _result_paths)\n         )\n \n     def test_total_item_count_is_correct(self):\n@@ -256,11 +255,11 @@ def test_contains_batching_links_using_fullobjects(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder?b_start=2&b_size=2&fullobjects",\n-                u"first": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n-                u"next": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n-                u"prev": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n-                u"last": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n+                "@id": self.portal_url + "/folder?b_start=2&b_size=2&fullobjects",\n+                "first": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n+                "next": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n+                "prev": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n+                "last": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n             },\n             batch_info,\n         )\n@@ -271,7 +270,7 @@ class TestBatchingSiteRoot(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingSiteRoot, self).setUp()\n+        super().setUp()\n \n         for i in range(5):\n             self._create_doc(self.portal, i)\n@@ -282,7 +281,7 @@ def test_contains_canonical_url(self):\n         response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(response.json()["@id"], self.portal_url + u"/")\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n@@ -293,11 +292,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/?b_start=2&b_size=2",\n+                "first": self.portal_url + "/?b_start=0&b_size=2",\n+                "next": self.portal_url + "/?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/?b_start=0&b_size=2",\n+                "last": self.portal_url + "/?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -309,7 +308,7 @@ def test_contains_correct_batch_of_items(self):\n         # Response should contain second batch of items\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n-        self.assertTrue(all(path.startswith(u"/plone/doc-") for path in _result_paths))\n+        self.assertTrue(all(path.startswith("/plone/doc-") for path in _result_paths))\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n@@ -404,7 +403,7 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # times) should be preserved.\n \n         self.assertEqual(\n-            set([("foolist", "1"), ("foolist", "2")]),\n+            {("foolist", "1"), ("foolist", "2")},\n             set(parse_qsl(urlparse(batch.canonical_url).query)),\n         )\n \n@@ -468,9 +467,9 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        batch_params = set([("b_start", "0"), ("b_size", "10")])\n+        batch_params = {("b_start", "0"), ("b_size", "10")}\n         self.assertEqual(\n-            set([("foolist", "1"), ("foolist", "2")]),\n+            {("foolist", "1"), ("foolist", "2")},\n             set(parse_qsl(urlparse(batch.links["first"]).query)) - batch_params,\n         )\n \n@@ -495,7 +494,7 @@ def test_next_link_omitted_on_last_page(self):\n         self.request.form["b_size"] = 10\n         self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(set(["@id", "first", "prev", "last"]), set(batch.links))\n+        self.assertSetEqual({"@id", "first", "prev", "last"}, set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n@@ -511,7 +510,7 @@ def test_prev_link_omitted_on_first_page(self):\n \n         self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(set(["@id", "first", "next", "last"]), set(batch.links))\n+        self.assertSetEqual({"@id", "first", "next", "last"}, set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n         items = list(range(1, 26))\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex 50b8698e8..489695baa 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -25,7 +25,7 @@ def setUp(self):\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n-            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n+            "blocksfolder", id="blocksfolder", title="Folder with blocks"\n         )\n \n         self.portal["blocksfolder"].blocks = {\n@@ -40,7 +40,7 @@ def test_basic_fields(self):\n \n     def test_behavior_provides(self):\n         self.portal.invokeFactory(\n-            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n+            "blocksfolder", id="blocksfolder", title="Folder with blocks"\n         )\n \n         assert IBlocks.providedBy(self.portal["blocksfolder"])\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex db5992279..f92e6c7c0 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -33,7 +33,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n@@ -50,7 +50,7 @@ def deserialize(self, blocks=None, validate_all=False, context=None):\n     def test_register_deserializer(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n \n@@ -61,7 +61,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -70,10 +70,10 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n+        self.deserialize(blocks={"123": {"@type": "test", "value": "text"}})\n \n         assert self.portal.doc1._handler_called is True\n-        assert self.portal.doc1.blocks["123"]["value"] == u"changed: text"\n+        assert self.portal.doc1.blocks["123"]["value"] == "changed: text"\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -85,7 +85,7 @@ def __call__(self, value):\n     def test_disabled_deserializer(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n             disabled = True\n@@ -97,7 +97,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -106,10 +106,10 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n+        self.deserialize(blocks={"123": {"@type": "test", "value": "text"}})\n \n         assert not getattr(self.portal.doc1, "_handler_called", False)\n-        assert self.portal.doc1.blocks["123"]["value"] == u"text"\n+        assert self.portal.doc1.blocks["123"]["value"] == "text"\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -121,7 +121,7 @@ def __call__(self, value):\n     def test_register_multiple_transform(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapterA(object):\n+        class TestAdapterA:\n             order = 10\n             block_type = "test_multi"\n \n@@ -132,13 +132,13 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_a = True\n \n-                value["value"] = value["value"].replace(u"a", u"b")\n+                value["value"] = value["value"].replace("a", "b")\n \n                 return value\n \n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapterB(object):\n+        class TestAdapterB:\n             order = 11\n             block_type = "test_multi"\n \n@@ -149,7 +149,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_b = True\n \n-                value["value"] = value["value"].replace(u"b", u"c")\n+                value["value"] = value["value"].replace("b", "c")\n \n                 return value\n \n@@ -163,11 +163,11 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test_multi", "value": u"a"}})\n+        self.deserialize(blocks={"123": {"@type": "test_multi", "value": "a"}})\n \n         self.assertTrue(self.portal.doc1._handler_called_a)\n         self.assertTrue(self.portal.doc1._handler_called_b)\n-        self.assertEqual(self.portal.doc1.blocks["123"]["value"], u"c")\n+        self.assertEqual(self.portal.doc1.blocks["123"]["value"], "c")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -186,13 +186,13 @@ def test_blocks_html_cleanup(self):\n             blocks={\n                 "123": {\n                     "@type": "html",\n-                    "html": u"<script>nasty</script><div>This stays</div>",\n+                    "html": "<script>nasty</script><div>This stays</div>",\n                 }\n             }\n         )\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["html"], u"<div>This stays</div>"\n+            self.portal.doc1.blocks["123"]["html"], "<div>This stays</div>"\n         )\n \n     def test_blocks_image_resolve2uid(self):\n@@ -202,7 +202,7 @@ def test_blocks_image_resolve2uid(self):\n         )\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(image_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{image_uid}"\n         )\n \n     def test_blocks_image_href(self):\n@@ -219,7 +219,7 @@ def test_blocks_doc_relative(self):\n         self.deserialize(blocks={"123": {"@type": "foo", "url": "/doc1"}})\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{doc_uid}"\n         )\n \n     def test_blocks_image_relative(self):\n@@ -227,7 +227,7 @@ def test_blocks_image_relative(self):\n         self.deserialize(blocks={"123": {"@type": "image", "url": "/image-1"}})\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(image_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{image_uid}"\n         )\n \n     def test_blocks_custom_block_resolve_standard_fields(self):\n@@ -237,7 +237,7 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n         doc_uid = IUUID(self.portal.doc1)\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{doc_uid}"\n         )\n \n         self.deserialize(\n@@ -246,7 +246,7 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n         doc_uid = IUUID(self.portal.doc1)\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["href"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["href"], f"../resolveuid/{doc_uid}"\n         )\n \n     def test_blocks_custom_block_doesnt_resolve_non_standard_fields(self):\n@@ -271,7 +271,7 @@ def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n \n         self.assertEqual(\n             self.portal.doc1.blocks["123"]["href"][0]["@id"],\n-            "../resolveuid/{}".format(doc_uid),\n+            f"../resolveuid/{doc_uid}",\n         )\n \n     def test_deserialize_blocks_smart_href_array(self):\n@@ -282,14 +282,14 @@ def test_deserialize_blocks_smart_href_array(self):\n \n         self.assertEqual(\n             self.portal.doc1.blocks["123"]["href"][0],\n-            "../resolveuid/{}".format(doc_uid),\n+            f"../resolveuid/{doc_uid}",\n         )\n \n     def test_deserialize_subblocks_transformers(self):\n         # use the html transformer to test subblocks transformers\n         subblock = {\n             "@type": "html",\n-            "html": u"<script>nasty</script><div>This stays</div>",\n+            "html": "<script>nasty</script><div>This stays</div>",\n         }\n         self.deserialize(\n             blocks={\n@@ -305,7 +305,7 @@ def test_deserialize_subblocks_transformers(self):\n         block = self.portal.doc1.blocks["1"]["data"]["blocks"]["2"]["blocks"]["3"][\n             "html"\n         ]\n-        self.assertEqual(block, u"<div>This stays</div>")\n+        self.assertEqual(block, "<div>This stays</div>")\n \n     def test_slate_internal_link_deserializer(self):\n         blocks = {\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex 00115c6d1..5404fe743 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -39,7 +39,7 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \n@@ -106,7 +106,7 @@ def test_search_text(self):\n     def test_register_block_searchabletext(self):\n         @implementer(IBlockSearchableText)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestSearchableTextAdapter(object):\n+        class TestSearchableTextAdapter:\n             def __init__(self, context, request):\n                 self.context = context\n                 self.request = request\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex 85fa940d2..47b7b2f10 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -32,7 +32,7 @@ def setUp(self):\n         behavior_list.append("volto.blocks")\n         fti.behaviors = tuple(behavior_list)\n \n-        self.portal.invokeFactory("Document", id=u"doc1")\n+        self.portal.invokeFactory("Document", id="doc1")\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n         ]\n@@ -54,7 +54,7 @@ def serialize(self, context, blocks):\n     def test_register_serializer(self):\n         @adapter(IBlocks, IBrowserRequest)\n         @implementer(IBlockFieldSerializationTransformer)\n-        class TestAdapterA(object):\n+        class TestAdapterA:\n             order = 10\n             block_type = "test_multi"\n \n@@ -65,13 +65,13 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_a = True\n \n-                value["value"] = value["value"].replace(u"a", u"b")\n+                value["value"] = value["value"].replace("a", "b")\n \n                 return value\n \n         @adapter(IBlocks, IBrowserRequest)\n         @implementer(IBlockFieldSerializationTransformer)\n-        class TestAdapterB(object):\n+        class TestAdapterB:\n             order = 11\n             block_type = "test_multi"\n \n@@ -82,7 +82,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_b = True\n \n-                value["value"] = value["value"].replace(u"b", u"c")\n+                value["value"] = value["value"].replace("b", "c")\n \n                 return value\n \n@@ -90,9 +90,9 @@ def __call__(self, value):\n         provideSubscriptionAdapter(TestAdapterB, (IDexterityItem, IBrowserRequest))\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={"123": {"@type": "test_multi", "value": u"a"}},\n+            blocks={"123": {"@type": "test_multi", "value": "a"}},\n         )\n-        self.assertEqual(value["123"]["value"], u"c")\n+        self.assertEqual(value["123"]["value"], "c")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -109,7 +109,7 @@ def __call__(self, value):\n     def test_disabled_serializer(self):\n         @implementer(IBlockFieldSerializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n             disabled = True\n@@ -121,7 +121,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -131,11 +131,11 @@ def __call__(self, value):\n         )\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={"123": {"@type": "test", "value": u"text"}},\n+            blocks={"123": {"@type": "test", "value": "text"}},\n         )\n \n         assert not getattr(self.portal.doc1, "_handler_called", False)\n-        self.assertEqual(value["123"]["value"], u"text")\n+        self.assertEqual(value["123"]["value"], "text")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -151,7 +151,7 @@ def test_serialize_blocks_smart_href_array_volto_object_browser(self):\n             blocks={\n                 "123": {\n                     "@type": "foo",\n-                    "href": [{"@id": "../resolveuid/{}".format(doc_uid)}],\n+                    "href": [{"@id": f"../resolveuid/{doc_uid}"}],\n                 }\n             },\n         )\n@@ -165,7 +165,7 @@ def test_serialize_blocks_smart_href_array(self):\n         value = self.serialize(\n             context=self.portal.doc1,\n             blocks={\n-                "123": {"@type": "foo", "href": ["../resolveuid/{}".format(doc_uid)]}\n+                "123": {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}\n             },\n         )\n \n@@ -174,7 +174,7 @@ def test_serialize_blocks_smart_href_array(self):\n     def test_serialize_subblocks_transformers(self):\n         # use the href smart field transformer for testing subblocks transformers\n         doc_uid = IUUID(self.portal.doc1)\n-        subblock = {"@type": "foo", "href": ["../resolveuid/{}".format(doc_uid)]}\n+        subblock = {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}\n         value = self.serialize(\n             context=self.portal.doc1,\n             blocks={\n@@ -194,7 +194,7 @@ def test_serialize_subblocks_transformers(self):\n     def test_internal_link_serializer(self):\n         doc_uid = IUUID(self.portal["doc1"])\n         resolve_uid_link = {\n-            "@id": "../resolveuid/{}".format(doc_uid),\n+            "@id": f"../resolveuid/{doc_uid}",\n             "title": "Welcome to Plone",\n         }\n         blocks = {\n@@ -245,7 +245,7 @@ def test_internal_link_serializer(self):\n \n     def test_simple_link_serializer(self):\n         doc_uid = IUUID(self.portal["doc1"])\n-        resolve_uid_link = "../resolveuid/{}".format(doc_uid)\n+        resolve_uid_link = f"../resolveuid/{doc_uid}"\n \n         blocks = {\n             "abc": {\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 070b4c753..90507f108 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n         )\n \n         output = serializer()\n-        self.assertEqual(set(output), set(["@id", "items_total", "items"]))\n+        self.assertEqual(set(output), {"@id", "items_total", "items"})\n \n     def test_conversation_batched(self):\n         self.request.form["b_size"] = 1\n@@ -91,7 +91,7 @@ def test_comment(self):\n         ]\n         self.assertEqual(set(output), set(expected))\n \n-        self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\n+        self.assertEqual(set(output["text"]), {"data", "mime-type"})\n \n     def test_comment_with_author_image(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n@@ -109,7 +109,7 @@ def test_comment_with_author_image(self):\n \n         serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n         self.assertEqual(\n-            "{}/portal_memberdata/portraits/test_user_1_".format(self.portal_url),\n+            f"{self.portal_url}/portal_memberdata/portraits/test_user_1_",\n             serializer().get("author_image"),\n         )\n \ndiff --git a/src/plone/restapi/tests/test_content_blocks.py b/src/plone/restapi/tests/test_content_blocks.py\nindex 284dbc7cb..e8915ad4b 100644\n--- a/src/plone/restapi/tests/test_content_blocks.py\n+++ b/src/plone/restapi/tests/test_content_blocks.py\n@@ -33,7 +33,7 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 7264ce5f9..0bd9e0cde 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -30,7 +30,7 @@ def setUp(self):\n         self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.text = RichTextValue(\n-            u"Lorem ipsum.", "text/plain", "text/html"\n+            "Lorem ipsum.", "text/plain", "text/html"\n         )\n         self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n@@ -60,9 +60,9 @@ def test_get_content_returns_fullobjects(self):\n         self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n             {\n-                u"data": u"<p>Lorem ipsum.</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum.</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n             response.json()["items"][0].get("text"),\n         )\n@@ -95,7 +95,7 @@ def test_get_content_returns_fullobjects_correct_id(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()["items"]))\n         self.assertEqual(\n-            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+            response.json()["items"][1]["@id"], self.portal_url + "/folder1/folder2"\n         )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n@@ -126,11 +126,11 @@ def test_get_content_includes_related_items(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/folder1/folder2/doc2",\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"review_state": u"published",\n-                    u"title": u"My Document 2",\n+                    "@id": self.portal_url + "/folder1/folder2/doc2",\n+                    "@type": "Document",\n+                    "description": "",\n+                    "review_state": "published",\n+                    "title": "My Document 2",\n                 }\n             ],\n             response.json()["relatedItems"],\n@@ -141,12 +141,12 @@ def test_get_content_related_items_without_workflow(self):\n \n         self.portal.invokeFactory("Image", id="imagewf")\n         self.portal.imagewf.title = "Image without workflow"\n-        self.portal.imagewf.description = u"This is an image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.imagewf.description = "This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.imagewf.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n \n@@ -164,11 +164,11 @@ def test_get_content_related_items_without_workflow(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/imagewf",\n-                    u"@type": u"Image",\n-                    u"description": u"This is an image",\n-                    u"review_state": None,\n-                    u"title": u"Image without workflow",\n+                    "@id": self.portal_url + "/imagewf",\n+                    "@type": "Image",\n+                    "description": "This is an image",\n+                    "review_state": None,\n+                    "title": "Image without workflow",\n                 }\n             ],\n             response.json()["relatedItems"],\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex 499cd4e8e..21c9fbef7 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -86,7 +86,7 @@ def test_sharing_search_roundtrip(self):\n         roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n         roles = roles[0]["roles"]\n \n-        new_roles = dict([(key, not val) for key, val in roles.items()])\n+        new_roles = {key: not val for key, val in roles.items()}\n         payload = {"entries": [{"id": "admin", "roles": new_roles}]}\n \n         response = requests.post(\n@@ -119,10 +119,10 @@ def test_sharing_titles_are_translated(self):\n         available_roles = response.json()["available_roles"]\n         self.assertEqual(\n             [\n-                {u"id": u"Contributor", u"title": u"Kann hinzuf\\xfcgen"},\n-                {u"id": u"Editor", u"title": u"Kann bearbeiten"},\n-                {u"id": u"Reader", u"title": u"Kann ansehen"},\n-                {u"id": u"Reviewer", u"title": u"Kann ver\\xf6ffentlichen"},\n+                {"id": "Contributor", "title": "Kann hinzuf\\xfcgen"},\n+                {"id": "Editor", "title": "Kann bearbeiten"},\n+                {"id": "Reader", "title": "Kann ansehen"},\n+                {"id": "Reviewer", "title": "Kann ver\\xf6ffentlichen"},\n             ],\n             available_roles,\n         )\n@@ -148,28 +148,28 @@ def test_get_local_roles_none_assigned(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"available_roles": [\n-                    {u"id": u"Contributor", u"title": u"Can add"},\n-                    {u"id": u"Editor", u"title": u"Can edit"},\n-                    {u"id": u"Reader", u"title": u"Can view"},\n-                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                "available_roles": [\n+                    {"id": "Contributor", "title": "Can add"},\n+                    {"id": "Editor", "title": "Can edit"},\n+                    {"id": "Reader", "title": "Can view"},\n+                    {"id": "Reviewer", "title": "Can review"},\n                 ],\n-                u"entries": [\n+                "entries": [\n                     {\n-                        u"disabled": False,\n-                        u"id": u"AuthenticatedUsers",\n-                        u"login": None,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": False,\n+                        "disabled": False,\n+                        "id": "AuthenticatedUsers",\n+                        "login": None,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": False,\n                         },\n-                        u"title": u"Logged-in users",\n-                        u"type": u"group",\n+                        "title": "Logged-in users",\n+                        "type": "group",\n                     }\n                 ],\n-                u"inherit": True,\n+                "inherit": True,\n             },\n         )\n \n@@ -189,40 +189,40 @@ def test_get_local_roles_with_user(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"available_roles": [\n-                    {u"id": u"Contributor", u"title": u"Can add"},\n-                    {u"id": u"Editor", u"title": u"Can edit"},\n-                    {u"id": u"Reader", u"title": u"Can view"},\n-                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                "available_roles": [\n+                    {"id": "Contributor", "title": "Can add"},\n+                    {"id": "Editor", "title": "Can edit"},\n+                    {"id": "Reader", "title": "Can view"},\n+                    {"id": "Reviewer", "title": "Can review"},\n                 ],\n-                u"entries": [\n+                "entries": [\n                     {\n-                        u"disabled": False,\n-                        u"id": u"AuthenticatedUsers",\n-                        u"login": None,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": False,\n+                        "disabled": False,\n+                        "id": "AuthenticatedUsers",\n+                        "login": None,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": False,\n                         },\n-                        u"title": u"Logged-in users",\n-                        u"type": u"group",\n+                        "title": "Logged-in users",\n+                        "type": "group",\n                     },\n                     {\n-                        u"disabled": False,\n-                        u"id": u"test_user_1_",\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": True,\n+                        "disabled": False,\n+                        "id": "test_user_1_",\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": True,\n                         },\n-                        u"title": u"test-user",\n-                        u"type": u"user",\n+                        "title": "test-user",\n+                        "type": "user",\n                     },\n                 ],\n-                u"inherit": True,\n+                "inherit": True,\n             },\n         )\n \n@@ -241,14 +241,14 @@ def test_set_local_roles_for_user(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": True,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": True,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -261,7 +261,7 @@ def test_set_local_roles_for_user(self):\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n             [\n                 ["admin", ["Owner"], "user", "admin"],\n-                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n             ],\n         )\n \n@@ -289,16 +289,16 @@ def test_may_only_manage_roles_already_held(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": True,\n-                            u"Editor": True,\n-                            u"Reader": True,\n-                            u"Publisher": True,\n-                            u"Reviewer": True,\n-                            u"Manager": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": True,\n+                            "Editor": True,\n+                            "Reader": True,\n+                            "Publisher": True,\n+                            "Reviewer": True,\n+                            "Manager": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -311,10 +311,10 @@ def test_may_only_manage_roles_already_held(self):\n \n         # New roles should not contain any new roles that the user didn\'t\n         # have permission to delegate.\n-        self.assertNotIn(u"Manager", new_roles)\n-        self.assertNotIn(u"Publisher", new_roles)\n-        self.assertNotIn(u"Reviewer", new_roles)\n-        self.assertNotIn(u"Contributor", new_roles)\n+        self.assertNotIn("Manager", new_roles)\n+        self.assertNotIn("Publisher", new_roles)\n+        self.assertNotIn("Reviewer", new_roles)\n+        self.assertNotIn("Contributor", new_roles)\n \n         # \'Reader\' gets added because the permission to delegate it is\n         # assigned to \'Editor\' by default (see p.a.workflow.permissions)\n@@ -373,16 +373,16 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": "peter",\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": True,\n-                            u"Reader": True,\n-                            u"Publisher": False,\n-                            u"Reviewer": True,\n-                            u"Manager": False,\n+                        "id": "peter",\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": True,\n+                            "Reader": True,\n+                            "Publisher": False,\n+                            "Reviewer": True,\n+                            "Manager": False,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -393,7 +393,7 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n         self.assertEqual(response.status_code, 204)\n         new_roles = api.user.get_roles(username="peter", obj=self.portal.folder1)\n \n-        self.assertIn(u"Reviewer", new_roles)\n+        self.assertIn("Reviewer", new_roles)\n         self.assertEqual(\n             sorted(["Member", "Authenticated", "Editor", "Reader", "Reviewer"]),\n             sorted(new_roles),\n@@ -421,14 +421,14 @@ def test_unset_local_roles_for_user(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -441,7 +441,7 @@ def test_unset_local_roles_for_user(self):\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n             (\n                 ("admin", ("Owner",), "user", "admin"),\n-                ("test-user", (u"Reviewer",), "user", u"test_user_1_"),\n+                ("test-user", ("Reviewer",), "user", "test_user_1_"),\n             ),\n         )\n \n@@ -460,14 +460,14 @@ def test_set_local_roles_on_site_root(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": True,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": True,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -479,7 +479,7 @@ def test_set_local_roles_on_site_root(self):\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal)),\n             [\n                 ["admin", ["Owner"], "user", "admin"],\n-                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n             ],\n         )\n \n@@ -596,7 +596,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn("error", response)\n-        self.assertEqual(u"No serializer available.", response["error"]["message"])\n+        self.assertEqual("No serializer available.", response["error"]["message"])\n \n         # we need to re-register the adapter here for following tests\n         gsm.registerAdapter(SerializeLocalRolesToJson, name="local_roles")\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex b94cef096..067b33c30 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -59,7 +59,7 @@ def test_patch_document_will_delete_value_with_null(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(204, response.status_code)\n-        self.assertEqual(u"", self.portal.doc1.description)\n+        self.assertEqual("", self.portal.doc1.description)\n \n     def test_patch_document_will_not_delete_value_with_null_if_required(self):\n         response = requests.patch(\n@@ -131,9 +131,9 @@ def test_patch_image_with_the_contents_of_the_get_preserves_image(self):\n             json={\n                 "@type": "Image",\n                 "image": {\n-                    "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n-                    "encoding": u"base64",\n-                    "content-type": u"image/gif",\n+                    "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n+                    "encoding": "base64",\n+                    "content-type": "image/gif",\n                 },\n             },\n         )\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 7a548dd53..e42dfb3cf 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -47,7 +47,7 @@ def test_post_to_folder_creates_document(self):\n         self.assertEqual("mydocument", response.json().get("id"))\n         self.assertEqual("My Document", response.json().get("title"))\n \n-        expected_url = self.portal_url + u"/folder1/mydocument"\n+        expected_url = self.portal_url + "/folder1/mydocument"\n         self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_to_folder_creates_folder(self):\n@@ -64,7 +64,7 @@ def test_post_to_folder_creates_folder(self):\n         self.assertEqual("myfolder", response.json().get("id"))\n         self.assertEqual("My Folder", response.json().get("title"))\n \n-        expected_url = self.portal_url + u"/folder1/myfolder"\n+        expected_url = self.portal_url + "/folder1/myfolder"\n         self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_without_type_returns_400(self):\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 8bd74a50e..07edcb86c 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -35,7 +35,7 @@ def traverse(self, path="/plone", accept="application/json", method="GET"):\n         request.environ["PATH_TRANSLATED"] = path\n         request.environ["HTTP_ACCEPT"] = accept\n         request.environ["REQUEST_METHOD"] = method\n-        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        auth = f"{SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 09ca25cd0..9cc35cb51 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,6 @@\n from base64 import b64encode\n from datetime import datetime\n-from mock import patch\n+from unittest.mock import patch\n from pkg_resources import parse_version\n from pkg_resources import resource_filename\n from plone import api\n@@ -29,7 +29,6 @@\n from plone.restapi.tests.statictime import StaticTime\n from plone.scale import storage\n from plone.testing.z2 import Browser\n-from six.moves import range\n from zope.component import createObject\n from zope.component import getUtility\n from zope.component.hooks import getSite\n@@ -94,10 +93,7 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    if six.PY2:\n-        open_kw = {}\n-    else:\n-        open_kw = {"newline": "\\n"}\n+    open_kw = {"newline": "\\n"}\n     filename = "{}/{}".format(base_path, "%s.req" % name)\n     with open(filename, "w", **open_kw) as req:\n         req.write(\n@@ -110,7 +106,7 @@ def save_request_and_response_for_docs(name, response):\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write("{}: {}\\n".format(key.title(), value))\n+                req.write(f"{key.title()}: {value}\\n")\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n             if "content-type" not in REQUEST_HEADER_KEYS:\n@@ -128,7 +124,7 @@ def save_request_and_response_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, six.text_type) or not hasattr(\n+            if isinstance(response.request.body, str) or not hasattr(\n                 req, "buffer"\n             ):\n                 req.write(response.request.body)\n@@ -140,19 +136,16 @@ def save_request_and_response_for_docs(name, response):\n     with open(filename, "w", **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n-        resp.write("HTTP/1.1 {} {}\\n".format(status, reason))\n+        resp.write(f"HTTP/1.1 {status} {reason}\\n")\n         for key, value in response.headers.items():\n             if key.lower() in RESPONSE_HEADER_KEYS:\n-                resp.write("{}: {}\\n".format(key.title(), value))\n+                resp.write(f"{key.title()}: {value}\\n")\n         resp.write("\\n")\n         resp.write(response.text)\n \n \n def save_request_for_docs(name, response):\n-    if six.PY2:\n-        open_kw = {}\n-    else:\n-        open_kw = {"newline": "\\n"}\n+    open_kw = {"newline": "\\n"}\n     filename = "{}/{}".format(base_path, "%s.req" % name)\n     with open(filename, "w", **open_kw) as req:\n         req.write(\n@@ -165,7 +158,7 @@ def save_request_for_docs(name, response):\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write("{}: {}\\n".format(key.title(), value))\n+                req.write(f"{key.title()}: {value}\\n")\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n             if "content-type" not in REQUEST_HEADER_KEYS:\n@@ -183,7 +176,7 @@ def save_request_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, six.text_type) or not hasattr(\n+            if isinstance(response.request.body, str) or not hasattr(\n                 req, "buffer"\n             ):\n                 req.write(response.request.body)\n@@ -212,7 +205,7 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n@@ -240,27 +233,27 @@ class TestDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestDocumentation, self).setUp()\n+        super().setUp()\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n-        document.title = u"Welcome to Plone"\n+        document.title = "Welcome to Plone"\n         document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n+            "Congratulations! You have successfully installed Plone."\n         )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -270,7 +263,7 @@ def create_folder(self):\n         self.portal.invokeFactory("Folder", id="folder")\n         folder = self.portal["folder"]\n         folder.title = "My Folder"\n-        folder.description = u"This is a folder with two documents"\n+        folder.description = "This is a folder with two documents"\n         folder.invokeFactory("Document", id="doc1", title="A document within a folder")\n         folder.invokeFactory("Document", id="doc2", title="A document within a folder")\n         return folder\n@@ -317,17 +310,17 @@ def test_documentation_document(self):\n     def test_documentation_news_item(self):\n         self.portal.invokeFactory("News Item", id="newsitem")\n         self.portal.newsitem.title = "My News Item"\n-        self.portal.newsitem.description = u"This is a news item"\n+        self.portal.newsitem.description = "This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum", "text/plain", "text/html"\n+            "Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.newsitem.image_caption = u"This is an image caption."\n+        self.portal.newsitem.image_caption = "This is an image caption."\n         transaction.commit()\n \n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -337,7 +330,7 @@ def test_documentation_news_item(self):\n     def test_documentation_event(self):\n         self.portal.invokeFactory("Event", id="event")\n         self.portal.event.title = "Event"\n-        self.portal.event.description = u"This is an event"\n+        self.portal.event.description = "This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n         transaction.commit()\n@@ -347,7 +340,7 @@ def test_documentation_event(self):\n     def test_documentation_link(self):\n         self.portal.invokeFactory("Link", id="link")\n         self.portal.link.title = "My Link"\n-        self.portal.link.description = u"This is a link"\n+        self.portal.link.description = "This is a link"\n         self.portal.remoteUrl = "http://plone.org"\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n@@ -356,12 +349,12 @@ def test_documentation_link(self):\n     def test_documentation_file(self):\n         self.portal.invokeFactory("File", id="file")\n         self.portal.file.title = "My File"\n-        self.portal.file.description = u"This is a file"\n-        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        self.portal.file.description = "This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), "file.pdf")\n         with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n+            data=pdf_data, contentType="application/pdf", filename="file.pdf"\n         )\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n@@ -370,12 +363,12 @@ def test_documentation_file(self):\n     def test_documentation_image(self):\n         self.portal.invokeFactory("Image", id="image")\n         self.portal.image.title = "My Image"\n-        self.portal.image.description = u"This is an image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.image.description = "This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -391,7 +384,7 @@ def test_documentation_folder(self):\n     def test_documentation_collection(self):\n         self.portal.invokeFactory("Collection", id="collection")\n         self.portal.collection.title = "My Collection"\n-        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.description = "This is a collection with two documents"\n         self.portal.collection.query = [\n             {\n                 "i": "portal_type",\n@@ -408,7 +401,7 @@ def test_documentation_collection(self):\n     def test_documentation_collection_fullobjects(self):\n         self.portal.invokeFactory("Collection", id="collection")\n         self.portal.collection.title = "My Collection"\n-        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.description = "This is a collection with two documents"\n         self.portal.collection.query = [\n             {\n                 "i": "portal_type",\n@@ -475,13 +468,13 @@ def test_documentation_search_fullobjects(self):\n \n     def test_documentation_workflow(self):\n         response = self.api_session.get(\n-            "{}/@workflow".format(self.document.absolute_url())\n+            f"{self.document.absolute_url()}/@workflow"\n         )\n         save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n         response = self.api_session.post(\n-            "{}/@workflow/publish".format(self.document.absolute_url())\n+            f"{self.document.absolute_url()}/@workflow/publish"\n         )\n         save_request_and_response_for_docs("workflow_post", response)\n \n@@ -489,7 +482,7 @@ def test_documentation_workflow_transition_with_body(self):\n         folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n         transaction.commit()\n         response = self.api_session.post(\n-            "{}/@workflow/publish".format(folder.absolute_url()),\n+            f"{folder.absolute_url()}/@workflow/publish",\n             json={\n                 "comment": "Publishing my folder...",\n                 "include_children": True,\n@@ -676,7 +669,7 @@ def test_documentation_jwt_login(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         save_request_and_response_for_docs("jwt_login", response)\n@@ -689,12 +682,12 @@ def test_documentation_jwt_logged_in(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.get(\n-            "/", headers={"Authorization": "Bearer {}".format(token)}\n+            "/", headers={"Authorization": f"Bearer {token}"}\n         )\n         save_request_and_response_for_docs("jwt_logged_in", response)\n \n@@ -705,13 +698,13 @@ def test_documentation_jwt_login_renew(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            "{}/@login-renew".format(self.portal.absolute_url()),\n-            headers={"Authorization": "Bearer {}".format(token)},\n+            f"{self.portal.absolute_url()}/@login-renew",\n+            headers={"Authorization": f"Bearer {token}"},\n         )\n         save_request_and_response_for_docs("jwt_login_renew", response)\n \n@@ -723,13 +716,13 @@ def test_documentation_jwt_logout(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            "{}/@logout".format(self.portal.absolute_url()),\n-            headers={"Authorization": "Bearer {}".format(token)},\n+            f"{self.portal.absolute_url()}/@logout",\n+            headers={"Authorization": f"Bearer {token}"},\n         )\n         save_request_and_response_for_docs("jwt_logout", response)\n \n@@ -1144,73 +1137,73 @@ def test_documentation_groups_delete(self):\n \n     def test_documentation_breadcrumbs(self):\n         response = self.api_session.get(\n-            "{}/@breadcrumbs".format(self.document.absolute_url())\n+            f"{self.document.absolute_url()}/@breadcrumbs"\n         )\n         save_request_and_response_for_docs("breadcrumbs", response)\n \n     def test_documentation_navigation(self):\n         response = self.api_session.get(\n-            "{}/@navigation".format(self.document.absolute_url())\n+            f"{self.document.absolute_url()}/@navigation"\n         )\n         save_request_and_response_for_docs("navigation", response)\n \n     def test_documentation_navigation_tree(self):\n         folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         createContentInContainer(\n-            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n-        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n+        createContentInContainer(folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n         response = self.api_session.get(\n-            "{}/@navigation".format(self.document.absolute_url()),\n+            f"{self.document.absolute_url()}/@navigation",\n             params={"expand.navigation.depth": 4},\n         )\n         save_request_and_response_for_docs("navigation_tree", response)\n \n     def test_documentation_contextnavigation(self):\n         folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         createContentInContainer(\n-            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n-        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n+        createContentInContainer(folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n         response = self.api_session.get(\n-            "{}/folder/@contextnavigation".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/folder/@contextnavigation"\n         )\n         save_request_and_response_for_docs("contextnavigation", response)\n \n@@ -1291,7 +1284,7 @@ def test_documentation_vocabularies_get_filtered_by_token(self):\n \n     def test_documentation_sources_get(self):\n         api.content.create(\n-            container=self.portal, id="doc", type="DXTestDocument", title=u"DX Document"\n+            container=self.portal, id="doc", type="DXTestDocument", title="DX Document"\n         )\n         transaction.commit()\n         response = self.api_session.get("/doc/@sources/test_choice_with_source")\n@@ -1349,12 +1342,12 @@ def test_documentation_expansion_expanded_full(self):\n \n     def test_history_get(self):\n         self.document.setTitle("My new title")\n-        url = "{}/@history".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@history"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("history_get", response)\n \n     def test_history_revert(self):\n-        url = "{}/@history".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@history"\n         response = self.api_session.patch(url, json={"version": 0})\n         save_request_and_response_for_docs("history_revert", response)\n \n@@ -1478,7 +1471,7 @@ def test_tusreplace_post_patch(self):\n         save_request_and_response_for_docs("tusreplace_patch", response)\n \n     def test_locking_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n@@ -1489,7 +1482,7 @@ def test_locking_lock(self):\n         save_request_and_response_for_docs("lock", response)\n \n     def test_locking_lock_nonstealable_and_timeout(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(\n             url, json={"stealable": False, "timeout": 3600}\n         )\n@@ -1502,16 +1495,16 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         save_request_and_response_for_docs("lock_nonstealable_timeout", response)\n \n     def test_locking_unlock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n-        url = "{}/@unlock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@unlock"\n         response = self.api_session.post(url)\n         save_request_and_response_for_docs("unlock", response)\n \n     def test_locking_refresh_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n-        url = "{}/@refresh-lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@refresh-lock"\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n@@ -1522,12 +1515,12 @@ def test_locking_refresh_lock(self):\n         save_request_and_response_for_docs("refresh_lock", response)\n \n     def test_locking_lockinfo(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("lock_get", response)\n \n     def test_update_with_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n         token = response.json()["token"]\n         response = self.api_session.patch(\n@@ -1537,7 +1530,7 @@ def test_update_with_lock(self):\n         )\n         response.request.headers[\n             "Lock-Token"\n-        ] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n+        ] = "0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n         save_request_and_response_for_docs("lock_update", response)\n \n     def test_querystring_get(self):\n@@ -1579,7 +1572,7 @@ class TestDocumentationMessageTranslations(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestDocumentationMessageTranslations, self).setUp()\n+        super().setUp()\n \n         self.api_session.headers.update({"Accept-Language": "es"})\n \n@@ -1588,20 +1581,20 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestDocumentationMessageTranslations, self).tearDown()\n+        super().tearDown()\n \n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n-        document.title = u"Welcome to Plone"\n+        document.title = "Welcome to Plone"\n         document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n+            "Congratulations! You have successfully installed Plone."\n         )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -1616,13 +1609,13 @@ def test_translate_messages_types_folder(self):\n         save_request_and_response_for_docs("translated_messages_types_folder", response)\n \n     def test_translate_messages_object_workflow(self):\n-        response = self.api_session.get("{}/@workflow".format(self.document.id))\n+        response = self.api_session.get(f"{self.document.id}/@workflow")\n         save_request_and_response_for_docs(\n             "translated_messages_object_workflow", response\n         )\n \n     def test_translate_messages_object_history(self):\n-        response = self.api_session.get("{}/@history".format(self.document.id))\n+        response = self.api_session.get(f"{self.document.id}/@history")\n         save_request_and_response_for_docs(\n             "translated_messages_object_history", response\n         )\n@@ -1633,7 +1626,7 @@ class TestCommenting(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestCommenting, self).setUp()\n+        super().setUp()\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -1645,21 +1638,21 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestCommenting, self).tearDown()\n+        super().tearDown()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n         document.allow_discussion = True\n-        document.title = u"Welcome to Plone"\n+        document.title = "Welcome to Plone"\n         document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n+            "Congratulations! You have successfully installed Plone."\n         )\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -1724,13 +1717,13 @@ def new_cid(idx):\n             response._content = re.sub(cid, idx, response._content)\n \n     def test_comments_get(self):\n-        url = "{}/@comments".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@comments"\n         response = self.api_session.get(url)\n         self.clean_comment_id_from_body(response)\n         save_request_and_response_for_docs("comments_get", response)\n \n     def test_comments_add_root(self):\n-        url = "{}/@comments/".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@comments/"\n         payload = {"text": "My comment"}\n         response = self.api_session.post(url, json=payload)\n         self.clean_comment_id_from_urls(response)\n@@ -1738,7 +1731,7 @@ def test_comments_add_root(self):\n \n     def test_comments_add_sub(self):\n         # Add a reply\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         payload = {"text": "My reply"}\n         response = self.api_session.post(url, json=payload)\n \n@@ -1746,20 +1739,20 @@ def test_comments_add_sub(self):\n         save_request_and_response_for_docs("comments_add_sub", response)\n \n     def test_comments_update(self):\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         payload = {"text": "My NEW comment"}\n         response = self.api_session.patch(url, json=payload)\n         self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_update", response)\n \n     def test_comments_delete(self):\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         response = self.api_session.delete(url)\n         self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_delete", response)\n \n     def test_roles_get(self):\n-        url = "{}/@roles".format(self.portal_url)\n+        url = f"{self.portal_url}/@roles"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("roles", response)\n \n@@ -1835,7 +1828,7 @@ class TestPAMDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestPAMDocumentation, self).setUp()\n+        super().setUp()\n \n         language_tool = api.portal.get_tool("portal_languages")\n         language_tool.addSupportedLanguage("en")\n@@ -1854,25 +1847,25 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestPAMDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.absolute_url()},\n         )\n         save_request_and_response_for_docs("translations_post", response)\n \n     def test_documentation_translations_post_by_id(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.absolute_url().replace(self.portal_url, "")},\n         )\n         save_request_and_response_for_docs("translations_post_by_id", response)\n \n     def test_documentation_translations_post_by_uid(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.UID()},\n         )\n         save_request_and_response_for_docs("translations_post_by_uid", response)\n@@ -1881,7 +1874,7 @@ def test_documentation_translations_get(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.get(\n-            "{}/@translations".format(self.en_content.absolute_url())\n+            f"{self.en_content.absolute_url()}/@translations"\n         )\n \n         save_request_and_response_for_docs("translations_get", response)\n@@ -1890,14 +1883,14 @@ def test_documentation_translations_delete(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"language": "es"},\n         )\n         save_request_and_response_for_docs("translations_delete", response)\n \n     def test_documentation_translations_link_on_post(self):\n         response = self.api_session.post(\n-            "{}/de".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/de",\n             json={\n                 "@type": "Document",\n                 "id": "mydocument",\n@@ -1924,7 +1917,7 @@ class TestIterateDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIterateDocumentation, self).setUp()\n+        super().setUp()\n \n         self.doc = self.portal.invokeFactory(\n             "Document", id="document", title="Test document"\n@@ -1932,7 +1925,7 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestIterateDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def test_documentation_workingcopy_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 5d45cdc83..8db02cdd4 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -7,7 +7,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.dxtypes import ITestAnnotationsBehavior\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n-from six.moves import range\n from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n from zope.component import provideHandler\n@@ -28,9 +27,9 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n-            test_textline_field=u"Test Document",\n-            test_readonly_field=u"readonly",\n+            id="doc1",\n+            test_textline_field="Test Document",\n+            test_readonly_field="readonly",\n         )\n \n         # ordering setup\n@@ -61,11 +60,11 @@ def test_deserializer_raises_with_malformed_body(self):\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEqual(u"My Item", self.portal.doc1.test_textline_field)\n+        self.assertEqual("My Item", self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEqual(u"readonly", self.portal.doc1.test_readonly_field)\n+        self.assertEqual("readonly", self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -107,18 +106,18 @@ def handler(obj, event):\n         )\n \n     def test_deserializer_does_not_update_field_without_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        self.portal.doc1.test_write_permission_field = "Test Write Permission"\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor", "Editor"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n         self.assertEqual(\n-            u"Test Write Permission", self.portal.doc1.test_write_permission_field\n+            "Test Write Permission", self.portal.doc1.test_write_permission_field\n         )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        self.portal.doc1.test_write_permission_field = "Test Write Permission"\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(u"Foo", self.portal.doc1.test_write_permission_field)\n+        self.assertEqual("Foo", self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n@@ -127,17 +126,17 @@ def test_deserializer_validates_invariant(self):\n                 \' "test_invariant_field2": "Bar"}\'\n             )\n         self.assertEqual(\n-            u"Must have same values", str(cm.exception.args[0][0]["message"])\n+            "Must have same values", str(cm.exception.args[0][0]["message"])\n         )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEqual(u"My Value", self.portal.doc1.test_behavior_field)\n+        self.assertEqual("My Value", self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(body=\'{"test_annotations_behavior_field": "My Value"}\')\n         self.assertEqual(\n-            u"My Value",\n+            "My Value",\n             ITestAnnotationsBehavior(self.portal.doc1).test_annotations_behavior_field,\n         )\n \n@@ -148,19 +147,19 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n                 body=\'{"test_textline_field": "My Value"}\', validate_all=True\n             )\n         self.assertEqual(\n-            u"Required input is missing.", cm.exception.args[0][0]["message"]\n+            "Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\', validate_all=True)\n         self.assertEqual(\n-            u"Required input is missing.", cm.exception.args[0][0]["message"]\n+            "Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n-        self.assertEqual(u"My Value", self.portal.doc1.test_required_field)\n+        self.assertEqual("My Value", self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -181,12 +180,12 @@ def test_deserializer_does_not_store_default_value(self):\n \n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n-        self.assertEqual(u"Default", self.portal.doc1.test_default_value_field)\n-        self.assertEqual(u"DefaultFactory", self.portal.doc1.test_default_factory_field)\n+        self.assertEqual("Default", self.portal.doc1.test_default_value_field)\n+        self.assertEqual("DefaultFactory", self.portal.doc1.test_default_factory_field)\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEqual(u"missing", self.portal.doc1.test_missing_value_field)\n+        self.assertEqual("missing", self.portal.doc1.test_missing_value_field)\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         """We don\'t set missing_value if the field is required"""\n@@ -194,7 +193,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_missing_value_required_field": null}\')\n         self.assertEqual(\n-            u"valid value", self.portal.doc1.test_missing_value_required_field\n+            "valid value", self.portal.doc1.test_missing_value_required_field\n         )\n         self.assertEqual(\n             (\n@@ -204,7 +203,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n             cm.exception.args[0][0]["message"],\n         )\n         self.assertEqual(\n-            u"test_missing_value_required_field", cm.exception.args[0][0]["field"]\n+            "test_missing_value_required_field", cm.exception.args[0][0]["field"]\n         )\n \n     def test_set_layout(self):\n@@ -224,16 +223,16 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n-            test_textline_field=u"Test Document",\n-            test_readonly_field=u"readonly",\n+            id="doc1",\n+            test_textline_field="Test Document",\n+            test_readonly_field="readonly",\n         )\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc2",\n-            test_textline_field=u"Test Document 2",\n-            test_readonly_field=u"readonly",\n+            id="doc2",\n+            test_textline_field="Test Document 2",\n+            test_readonly_field="readonly",\n         )\n \n     def deserialize(self, field, value, validate_all=False, context=None):\n@@ -250,7 +249,7 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = six.text_type(self.portal.doc2.UID())\n+        value = str(self.portal.doc2.UID())\n         self.deserialize("test_relationchoice_field", value)\n \n         serialization_value = self.serialize("test_relationchoice_field")\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex f1f9c7e06..b57b552df 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -30,7 +30,7 @@\n import unittest\n \n \n-class AdapterCM(object):\n+class AdapterCM:\n     """Context manager that will temporarily register an adapter"""\n \n     def __init__(self, adapter, from_, provides):\n@@ -54,17 +54,17 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n \n-        richtext_value = RichTextValue(u"K\xc3\xa4fer", "text/plain", "text/html")\n+        richtext_value = RichTextValue("K\xc3\xa4fer", "text/plain", "text/html")\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n+            id="doc1",\n             test_ascii_field="foo",\n             test_asciiline_field="foo",\n             test_bool_field=True,\n             test_bytes_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n             test_bytesline_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n-            test_choice_field=u"foo",\n+            test_choice_field="foo",\n             test_date_field=date(2015, 7, 15),\n             test_datetime_field=datetime(2015, 6, 20, 13, 22, 4),\n             test_decimal_field=Decimal(1.1),\n@@ -73,15 +73,15 @@ def setUp(self):\n             test_frozenset_field=frozenset([1, 2, 3]),\n             test_int_field=500,\n             test_list_field=[1, "two", 3],\n-            test_set_field=set(["a", "b", "c"]),\n-            test_text_field=u"K\xc3\xa4fer",\n+            test_set_field={"a", "b", "c"},\n+            test_text_field="K\xc3\xa4fer",\n             test_richtext_field=richtext_value,\n-            test_textline_field=u"K\xc3\xa4fer",\n+            test_textline_field="K\xc3\xa4fer",\n             test_time_field=time(14, 15, 33),\n             test_timedelta_field=timedelta(44),\n             test_tuple_field=(1, 1),\n-            test_readonly_field=u"readonly",\n-            test_read_permission_field=u"Secret Stuff",\n+            test_readonly_field="readonly",\n+            test_read_permission_field="Secret Stuff",\n         )\n \n         self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n@@ -101,54 +101,54 @@ def test_serializer_returns_json_serializeable_object(self):\n     @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize()\n-        self.assertIn(u"@context", obj)\n-        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n+        self.assertIn("@context", obj)\n+        self.assertEqual("http://www.w3.org/ns/hydra/context.jsonld", obj["@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize()\n-        self.assertIn(u"@id", obj)\n-        self.assertEqual(self.portal.doc1.absolute_url(), obj[u"@id"])\n+        self.assertIn("@id", obj)\n+        self.assertEqual(self.portal.doc1.absolute_url(), obj["@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize()\n-        self.assertIn(u"id", obj)\n-        self.assertEqual(self.portal.doc1.id, obj[u"id"])\n+        self.assertIn("id", obj)\n+        self.assertEqual(self.portal.doc1.id, obj["id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize()\n-        self.assertIn(u"@type", obj)\n-        self.assertEqual(self.portal.doc1.portal_type, obj[u"@type"])\n+        self.assertIn("@type", obj)\n+        self.assertEqual(self.portal.doc1.portal_type, obj["@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize()\n-        self.assertIn(u"review_state", obj)\n-        self.assertEqual(u"private", obj[u"review_state"])\n+        self.assertIn("review_state", obj)\n+        self.assertEqual("private", obj["review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize()\n-        self.assertIn(u"UID", obj)\n-        self.assertEqual(u"30314724b77a4ec0abbad03d262837aa", obj[u"UID"])\n+        self.assertIn("UID", obj)\n+        self.assertEqual("30314724b77a4ec0abbad03d262837aa", obj["UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize()\n-        self.assertIn(u"created", obj)\n-        self.assertEqual(u"2015-04-27T10:14:48+00:00", obj[u"created"])\n+        self.assertIn("created", obj)\n+        self.assertEqual("2015-04-27T10:14:48+00:00", obj["created"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize()\n-        self.assertIn(u"modified", obj)\n-        self.assertEqual(u"2015-04-27T10:24:11+00:00", obj[u"modified"])\n+        self.assertIn("modified", obj)\n+        self.assertEqual("2015-04-27T10:24:11+00:00", obj["modified"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.portal.doc1.test_read_permission_field = u"Secret Stuff"\n+        self.portal.doc1.test_read_permission_field = "Secret Stuff"\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n-        self.assertNotIn(u"test_read_permission_field", self.serialize())\n+        self.assertNotIn("test_read_permission_field", self.serialize())\n \n     def test_serializer_includes_field_with_read_permission(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         obj = self.serialize()\n-        self.assertIn(u"test_read_permission_field", obj)\n-        self.assertEqual(u"Secret Stuff", obj[u"test_read_permission_field"])\n+        self.assertIn("test_read_permission_field", obj)\n+        self.assertEqual("Secret Stuff", obj["test_read_permission_field"])\n \n     def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n@@ -180,7 +180,7 @@ def test_get_is_folderish(self):\n         self.assertEqual(False, obj["is_folderish"])\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory("Folder", id=u"folder")\n+        self.portal.invokeFactory("Folder", id="folder")\n         serializer = getMultiAdapter(\n             (self.portal.folder, self.request), ISerializeToJson\n         )\n@@ -413,7 +413,7 @@ def test_richtext_serializer_context(self):\n         This is then verfied.\n         """\n \n-        class RichtextTransform(object):\n+        class RichtextTransform:\n             """RichttextValue to show that the context is correctly passed\n             in throughout the stack.\n             """\n@@ -433,7 +433,7 @@ def __call__(self, value, mime_type):\n \n     def test_allow_discussion_by_default(self):\n         """Not globally addable, not fti enabled, not obj instance enabled"""\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n@@ -441,7 +441,7 @@ def test_allow_discussion_by_default(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         self.portal.doc2.allow_discussion = True\n         serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n@@ -450,7 +450,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n@@ -461,7 +461,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -472,7 +472,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -484,7 +484,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -495,7 +495,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -511,7 +511,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -529,7 +529,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -546,7 +546,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -583,15 +583,15 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n+            id="doc1",\n             test_primary_namedfile_field=NamedFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc2",\n+            id="doc2",\n             test_primary_namedfile_field=None,\n         )\n \n@@ -608,10 +608,10 @@ def test_primary_field_target(self):\n         serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         data = serializer()\n         self.assertIn("targetUrl", data)\n-        download_url = u"/".join(\n+        download_url = "/".join(\n             [\n                 self.portal.doc1.absolute_url(),\n-                u"@@download/test_primary_namedfile_field",\n+                "@@download/test_primary_namedfile_field",\n             ]\n         )\n         self.assertEqual(data["targetUrl"], download_url)\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 9db71c22e..c4b613e1d 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -20,7 +20,7 @@\n import unittest\n \n \n-class RequiredField(object):\n+class RequiredField:\n     """Context manager that will make a field required and back to old state."""\n \n     def __init__(self, field):\n@@ -55,12 +55,12 @@ def deserialize(self, fieldname, value):\n         return deserializer(value)\n \n     def test_ascii_deserialization_returns_native_string(self):\n-        value = self.deserialize("test_ascii_field", u"Foo")\n+        value = self.deserialize("test_ascii_field", "Foo")\n         self.assertTrue(isinstance(value, str), "Not a <str>")\n         self.assertEqual("Foo", value)\n \n     def test_asciiline_deserialization_returns_native_string(self):\n-        value = self.deserialize("test_asciiline_field", u"Foo")\n+        value = self.deserialize("test_asciiline_field", "Foo")\n         self.assertTrue(isinstance(value, str), "Not a <str>")\n         self.assertEqual("Foo", value)\n \n@@ -75,55 +75,55 @@ def test_bool_deserialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_deserialization_returns_bytestring(self):\n-        value = self.deserialize("test_bytes_field", u"Foo")\n+        value = self.deserialize("test_bytes_field", "Foo")\n         self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n         self.assertEqual(b"Foo", value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n-        value = self.deserialize("test_bytesline_field", u"Foo")\n+        value = self.deserialize("test_bytesline_field", "Foo")\n         self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n         self.assertEqual(b"Foo", value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n-        value = self.deserialize("test_choice_field", u"bar")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"bar", value)\n+        value = self.deserialize("test_choice_field", "bar")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("bar", value)\n \n     def test_choice_deserialization_from_token_returns_vocabulary_value(self):\n-        value = self.deserialize("test_choice_field_with_vocabulary", u"token1")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", "token1")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n-        value = self.deserialize("test_choice_field_with_vocabulary", u"value1")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", "value1")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n         value = self.deserialize(\n             "test_choice_field_with_vocabulary",\n-            {u"token": u"token1", u"title": u"title1"},\n+            {"token": "token1", "title": "title1"},\n         )\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_date_deserialization_returns_date(self):\n-        value = self.deserialize("test_date_field", u"2015-12-20")\n+        value = self.deserialize("test_date_field", "2015-12-20")\n         self.assertTrue(isinstance(value, date))\n         self.assertEqual(date(2015, 12, 20), value)\n \n     def test_datetime_deserialization_returns_datetime(self):\n-        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361Z")\n+        value = self.deserialize("test_datetime_field", "2015-12-20T10:39:54.361Z")\n         self.assertTrue(isinstance(value, datetime), "Not a <datetime>")\n         self.assertEqual(datetime(2015, 12, 20, 10, 39, 54, 361000), value)\n \n     def test_datetime_deserialization_handles_timezone(self):\n-        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361+01")\n+        value = self.deserialize("test_datetime_field", "2015-12-20T10:39:54.361+01")\n         self.assertEqual(datetime(2015, 12, 20, 9, 39, 54, 361000), value)\n \n     def test_datetime_with_tz_deserialization_keeps_timezone(self):\n         value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-12-20T10:39:54.361+01"\n+            "test_datetime_tz_field", "2015-12-20T10:39:54.361+01"\n         )\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n@@ -134,7 +134,7 @@ def test_datetime_with_tz_deserialization_keeps_timezone(self):\n \n     def test_datetime_with_tz_deserialization_converts_timezone(self):\n         value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-12-20T10:39:54.361-04"\n+            "test_datetime_tz_field", "2015-12-20T10:39:54.361-04"\n         )\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n@@ -144,7 +144,7 @@ def test_datetime_with_tz_deserialization_converts_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_adds_timezone(self):\n-        value = self.deserialize("test_datetime_tz_field", u"2015-12-20T10:39:54.361")\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 11, 39, 54, 361000)\n@@ -154,7 +154,7 @@ def test_datetime_with_tz_deserialization_adds_timezone(self):\n \n     def test_datetime_with_tz_deserialization_handles_dst(self):\n         value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-05-20T10:39:54.361+02"\n+            "test_datetime_tz_field", "2015-05-20T10:39:54.361+02"\n         )\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n@@ -176,14 +176,14 @@ def test_datetime_deserialization_required(self):\n                 self.deserialize(field_name, None)\n \n     def test_text_deserialization_returns_decimal(self):\n-        value = self.deserialize("test_decimal_field", u"1.1")\n+        value = self.deserialize("test_decimal_field", "1.1")\n         self.assertTrue(isinstance(value, Decimal), "Not a <Decimal>")\n-        self.assertEqual(Decimal(u"1.1"), value)\n+        self.assertEqual(Decimal("1.1"), value)\n \n     def test_dict_deserialization_returns_dict(self):\n-        value = self.deserialize("test_dict_field", {u"key": u"value"})\n+        value = self.deserialize("test_dict_field", {"key": "value"})\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        self.assertEqual({u"key": u"value"}, value)\n+        self.assertEqual({"key": "value"}, value)\n \n     def test_float_deserialization_returns_float(self):\n         value = self.deserialize("test_float_field", 1.0)\n@@ -191,9 +191,9 @@ def test_float_deserialization_returns_float(self):\n         self.assertEqual(1.0, value)\n \n     def test_frozenset_deserialization_returns_frozenset(self):\n-        value = self.deserialize("test_frozenset_field", [u"foo", u"bar"])\n+        value = self.deserialize("test_frozenset_field", ["foo", "bar"])\n         self.assertTrue(isinstance(value, frozenset), "Not a <frozenset>")\n-        self.assertEqual(frozenset([u"foo", u"bar"]), value)\n+        self.assertEqual(frozenset(["foo", "bar"]), value)\n \n     def test_int_deserialization_returns_int(self):\n         value = self.deserialize("test_int_field", 22)\n@@ -207,46 +207,46 @@ def test_list_deserialization_returns_list(self):\n \n     def test_list_deserialization_from_tokens_returns_list_of_values(self):\n         value = self.deserialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"token1", u"token3"]\n+            "test_list_field_with_choice_with_vocabulary", ["token1", "token3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_list_deserialization_from_values_returns_list_of_values(self):\n         value = self.deserialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+            "test_list_field_with_choice_with_vocabulary", ["value1", "value3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_list_deserialization_from_terms_returns_list_of_values(self):\n         value = self.deserialize(\n             "test_list_field_with_choice_with_vocabulary",\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_set_deserialization_returns_set(self):\n         value = self.deserialize("test_set_field", [1, 2, 3])\n         self.assertTrue(isinstance(value, set), "Not a <set>")\n-        self.assertEqual(set([1, 2, 3]), value)\n+        self.assertEqual({1, 2, 3}, value)\n \n     def test_text_deserialization_returns_unicode(self):\n-        value = self.deserialize("test_text_field", u"Foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"Foo", value)\n+        value = self.deserialize("test_text_field", "Foo")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("Foo", value)\n \n     def test_textline_deserialization_returns_unicode(self):\n-        value = self.deserialize("test_textline_field", u"Foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"Foo", value)\n+        value = self.deserialize("test_textline_field", "Foo")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("Foo", value)\n \n     def test_time_deserialization_returns_time(self):\n-        value = self.deserialize("test_time_field", u"10:39:54.361Z")\n+        value = self.deserialize("test_time_field", "10:39:54.361Z")\n         self.assertTrue(isinstance(value, time), "Not a <time>")\n         self.assertEqual(time(10, 39, 54, 361000), value)\n \n@@ -261,14 +261,14 @@ def test_tuple_deserialization_returns_tuple(self):\n         self.assertEqual((1, 2, 3), value)\n \n     def test_nested_list_deserialization_returns_nested_list(self):\n-        value = self.deserialize("test_nested_list_field", [[1, u"foo"], [2, u"bar"]])\n+        value = self.deserialize("test_nested_list_field", [[1, "foo"], [2, "bar"]])\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertTrue(isinstance(value[0], tuple), "Not a <tuple>")\n         self.assertTrue(isinstance(value[1], tuple), "Not a <tuple>")\n \n     def test_nested_dict_deserialization_returns_nested_dict(self):\n         value = self.deserialize(\n-            "test_nested_dict_field", {u"1": [u"foo", u"bar"], u"2": [u"spam", u"eggs"]}\n+            "test_nested_dict_field", {"1": ["foo", "bar"], "2": ["spam", "eggs"]}\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n         self.assertIn("1", value)\n@@ -277,55 +277,55 @@ def test_nested_dict_deserialization_returns_nested_dict(self):\n         self.assertTrue(isinstance(value["2"], tuple), "Not a <tuple>")\n \n     def test_richtext_deserialization_from_unicode_returns_richtext(self):\n-        value = self.deserialize("test_richtext_field", u"<p>a paragraph</p>")\n+        value = self.deserialize("test_richtext_field", "<p>a paragraph</p>")\n         self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n-        self.assertEqual(u"<p>a paragraph</p>", value.raw)\n+        self.assertEqual("<p>a paragraph</p>", value.raw)\n \n     def test_richtext_deserialization_from_dict_returns_richtext(self):\n-        value = self.deserialize("test_richtext_field", {u"data": u"Some text"})\n+        value = self.deserialize("test_richtext_field", {"data": "Some text"})\n         self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n-        self.assertEqual(u"Some text", value.raw)\n+        self.assertEqual("Some text", value.raw)\n \n     def test_richtext_deserialization_sets_mime_type(self):\n         value = self.deserialize(\n             "test_richtext_field",\n-            {u"data": u"Some text", u"content-type": u"text/plain"},\n+            {"data": "Some text", "content-type": "text/plain"},\n         )\n         self.assertEqual("text/plain", value.mimeType)\n \n     def test_richtext_deserialization_sets_encoding(self):\n         value = self.deserialize(\n-            "test_richtext_field", {u"data": u"Some text", u"encoding": u"latin1"}\n+            "test_richtext_field", {"data": "Some text", "encoding": "latin1"}\n         )\n         self.assertEqual("latin1", value.encoding)\n \n     def test_richtext_deserialization_fix_apostrophe(self):\n-        value = self.deserialize("test_richtext_field", u"<p>char with &#x27;</p>")\n+        value = self.deserialize("test_richtext_field", "<p>char with &#x27;</p>")\n         self.assertEqual("<p>char with \'</p>", value.raw)\n \n     def test_namedfield_deserialization_decodes_value(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"},\n+            {"data": "U3BhbSBhbmQgZWdncyE=", "encoding": "base64"},\n         )\n         self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+            {"data": "Spam and eggs!", "content-type": "text/plain"},\n         )\n         self.assertEqual("text/plain", value.contentType)\n \n     def test_namedfield_deserialization_sets_filename(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"Spam and eggs!", u"filename": u"doc.txt"},\n+            {"data": "Spam and eggs!", "filename": "doc.txt"},\n         )\n         self.assertEqual("doc.txt", value.filename)\n \n     def test_namedfile_deserialization_returns_namedfile(self):\n-        value = self.deserialize("test_namedfile_field", {u"data": u"Spam and eggs!"})\n+        value = self.deserialize("test_namedfile_field", {"data": "Spam and eggs!"})\n         self.assertTrue(isinstance(value, namedfile.NamedFile), "Not a <NamedFile>")\n         self.assertEqual(b"Spam and eggs!", value.data)\n \n@@ -333,9 +333,9 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\n             "test_namedimage_field",\n             {\n-                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n-                u"encoding": u"base64",\n-                u"content-type": u"image/gif",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "encoding": "base64",\n+                "content-type": "image/gif",\n             },\n         )\n         self.assertTrue(isinstance(value, namedfile.NamedImage), "Not a <NamedImage>")\n@@ -343,7 +343,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n         value = self.deserialize(\n-            "test_namedblobfile_field", {u"data": u"Spam and eggs!"}\n+            "test_namedblobfile_field", {"data": "Spam and eggs!"}\n         )\n         self.assertTrue(\n             isinstance(value, namedfile.NamedBlobFile), "Not a <NamedBlobFile>"\n@@ -354,9 +354,9 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\n             "test_namedblobimage_field",\n             {\n-                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n-                u"encoding": u"base64",\n-                u"content-type": u"image/gif",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "encoding": "base64",\n+                "content-type": "image/gif",\n             },\n         )\n         self.assertTrue(\n@@ -394,7 +394,7 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize("test_relationchoice_field", six.text_type(doc2.UID()))\n+        value = self.deserialize("test_relationchoice_field", str(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n@@ -404,7 +404,7 @@ def test_relationchoice_deserialization_from_url_returns_document(self):\n             )\n         ]\n         value = self.deserialize(\n-            "test_relationchoice_field", six.text_type(doc2.absolute_url())\n+            "test_relationchoice_field", str(doc2.absolute_url())\n         )\n         self.assertEqual(doc2, value)\n \n@@ -414,14 +414,14 @@ def test_relationchoice_deserialization_from_path_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize("test_relationchoice_field", u"/doc2")\n+        value = self.deserialize("test_relationchoice_field", "/doc2")\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize("test_relationchoice_field", 123456789)\n         self.assertEqual(\n-            str(cm.exception), u"Could not resolve object for intid=123456789"\n+            str(cm.exception), "Could not resolve object for intid=123456789"\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -429,11 +429,11 @@ def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\n                 "test_relationchoice_field",\n-                six.text_type("ac12b24913cf45c6863937367aacc263"),\n+                "ac12b24913cf45c6863937367aacc263",\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n+            "Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -441,21 +441,21 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\n                 "test_relationchoice_field",\n-                six.text_type("http://nohost/plone/doesnotexist"),\n+                "http://nohost/plone/doesnotexist",\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n+            "Could not resolve object for URL=http://nohost/plone/doesnotexist",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\n-                "test_relationchoice_field", six.text_type("/doesnotexist")\n+                "test_relationchoice_field", "/doesnotexist"\n             )\n         self.assertEqual(\n-            str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n+            str(cm.exception), "Could not resolve object for path=/doesnotexist"\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -472,7 +472,7 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n         ]\n         value = self.deserialize(\n             "test_relationlist_field",\n-            [six.text_type(doc2.UID()), six.text_type(doc3.UID())],\n+            [str(doc2.UID()), str(doc3.UID())],\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(doc2, value[0])\n@@ -480,16 +480,16 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n \n     def test_default_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize("test_maxlength_field", u"01234567890")\n+            self.deserialize("test_maxlength_field", "01234567890")\n \n     def test_datetime_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_datetime_field", u"2015-15-15T10:39:54.361Z")\n-        self.assertEqual(u"Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n+            self.deserialize("test_datetime_field", "2015-15-15T10:39:54.361Z")\n+        self.assertEqual("Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize("test_datetime_min_field", u"1999-12-20T10:39:54.361Z")\n+            self.deserialize("test_datetime_min_field", "1999-12-20T10:39:54.361Z")\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -498,8 +498,8 @@ def test_collection_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n-        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n-        self.assertEqual((b"2", six.integer_types, ""), cm.exception.args)\n+        self.assertEqual("Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual((b"2", (int,), ""), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -511,45 +511,45 @@ def test_dict_deserializer_validates_value(self):\n         # We check for two sets of exception details\n         # because zope.schema changed its exception...\n         self.assertIn(\n-            cm.exception.doc(), (u"Object is of wrong type.", u"Invalid int literal.")\n+            cm.exception.doc(), ("Object is of wrong type.", "Invalid int literal.")\n         )\n         self.assertIn(\n             cm.exception.args,\n             (\n-                ("k", six.integer_types, ""),\n+                ("k", (int,), ""),\n                 ("invalid literal for int() with base 10: \'k\'",),\n             ),\n         )\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_time_field", u"midnight")\n-        self.assertEqual(u"Invalid time: midnight", str(cm.exception))\n+            self.deserialize("test_time_field", "midnight")\n+        self.assertEqual("Invalid time: midnight", str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize("test_time_min_field", u"00:39:54.361Z")\n-        self.assertEqual(u"Value is too small", cm.exception.doc())\n+            self.deserialize("test_time_min_field", "00:39:54.361Z")\n+        self.assertEqual("Value is too small", cm.exception.doc())\n \n     def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_timedelta_field", u"2h")\n+            self.deserialize("test_timedelta_field", "2h")\n         self.assertIn(\n-            u"unsupported type for timedelta seconds component:", str(cm.exception)\n+            "unsupported type for timedelta seconds component:", str(cm.exception)\n         )\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize("test_timedelta_min_field", 50)\n-        self.assertEqual(u"Value is too small", cm.exception.doc())\n+        self.assertEqual("Value is too small", cm.exception.doc())\n \n     def test_namedfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\n                 "test_namedimage_field",\n-                {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+                {"data": "Spam and eggs!", "content-type": "text/plain"},\n             )\n-        self.assertEqual(u"Invalid image file", cm.exception.doc())\n+        self.assertEqual("Invalid image file", cm.exception.doc())\n \n     def test_namedfield_deserializer_download(self):\n         # Handle when we post back the GET results.\n@@ -557,16 +557,16 @@ def test_namedfield_deserializer_download(self):\n \n         self.deserialize(\n             "test_namedfile_field",\n-            {u"download": u"some download link", u"content-type": u"text/plain"},\n+            {"download": "some download link", "content-type": "text/plain"},\n         )\n \n     def test_richtextfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\n                 "test_richtext_field",\n-                {u"data": u"Spam and eggs!", u"content-type": u"text/xml"},\n+                {"data": "Spam and eggs!", "content-type": "text/xml"},\n             )\n-        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual("Object is of wrong type.", cm.exception.doc())\n \n     def test_relationchoicefield_deserializer_validates_value(self):\n         self.portal[\n@@ -575,17 +575,17 @@ def test_relationchoicefield_deserializer_validates_value(self):\n             )\n         ]\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize("test_relationchoice_field", u"/doc3")\n-        self.assertEqual(u"Constraint not satisfied", cm.exception.doc())\n+            self.deserialize("test_relationchoice_field", "/doc3")\n+        self.assertEqual("Constraint not satisfied", cm.exception.doc())\n \n     def test_deserialize_with_context_bound_vocabulary(self):\n         value = self.deserialize(\n-            "test_list_choice_with_context_vocabulary_field", [u"portal_catalog"]\n+            "test_list_choice_with_context_vocabulary_field", ["portal_catalog"]\n         )\n-        self.assertEqual([u"portal_catalog"], value)\n+        self.assertEqual(["portal_catalog"], value)\n \n     def test_textline_deserializer_strips_value(self):\n-        value = self.deserialize("test_textline_field", u"  aa  ")\n+        value = self.deserialize("test_textline_field", "  aa  ")\n         self.assertEqual(value, "aa")\n \n     def test_default_field_deserializer_validates_value(self):\n@@ -616,14 +616,14 @@ def test_textline_deserializer_for_links_convert_internal_links(self):\n         deserializer = getMultiAdapter((field, link, self.request), IFieldDeserializer)\n \n         self.assertEqual(\n-            u"http://www.plone.com", deserializer(value=u"http://www.plone.com")\n+            "http://www.plone.com", deserializer(value="http://www.plone.com")\n         )\n         self.assertEqual(\n-            u"${portal_url}/doc1", deserializer(value=u"http://nohost/plone/doc1")\n+            "${portal_url}/doc1", deserializer(value="http://nohost/plone/doc1")\n         )\n \n         # for other contents/fields does nothing\n-        value = self.deserialize("test_textline_field", u"http://www.plone.com")\n-        self.assertEqual(u"http://www.plone.com", value)\n-        value = self.deserialize("test_textline_field", u"http://nohost/plone/doc1")\n+        value = self.deserialize("test_textline_field", "http://www.plone.com")\n+        self.assertEqual("http://www.plone.com", value)\n+        value = self.deserialize("test_textline_field", "http://nohost/plone/doc1")\n         self.assertEqual(self.portal.doc1.absolute_url(), value)\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 0636aa0fb..465512a59 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -3,7 +3,7 @@\n from datetime import time\n from datetime import timedelta\n from decimal import Decimal\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import iterSchemata\n from plone.namedfile.file import NamedBlobFile\n@@ -51,13 +51,13 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize("test_ascii_field", "foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"foo", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("foo", value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize("test_asciiline_field", "foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"foo", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("foo", value)\n \n     def test_bool_field_serialization_returns_true(self):\n         value = self.serialize("test_bool_field", True)\n@@ -71,47 +71,47 @@ def test_bool_field_serialization_returns_false(self):\n \n     def test_bytes_field_serialization_returns_unicode(self):\n         value = self.serialize("test_bytes_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("\\xe4\\xf6\\xfc", value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize("test_bytesline_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("\\xe4\\xf6\\xfc", value)\n \n     def test_choice_field_serialization_returns_vocabulary_term(self):\n-        value = self.serialize("test_choice_field", u"foo")\n+        value = self.serialize("test_choice_field", "foo")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u"token": u"foo", u"title": None}, value)\n+        self.assertEqual({"token": "foo", "title": None}, value)\n \n     def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(\n         self,\n     ):  # noqa\n-        value = self.serialize("test_choice_field_with_vocabulary", u"value1")\n+        value = self.serialize("test_choice_field_with_vocabulary", "value1")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u"token": u"token1", u"title": u"title1"}, value)\n+        self.assertEqual({"token": "token1", "title": "title1"}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize("test_date_field", date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"2015-07-15", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("2015-07-15", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize("test_datetime_field", datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"2015-06-20T13:22:04", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("2015-06-20T13:22:04", value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_decimal_field", Decimal(u"1.1"))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"1.1", value)\n+        value = self.serialize("test_decimal_field", Decimal("1.1"))\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("1.1", value)\n \n     def test_dict_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_dict_field", {"foo": "bar", "spam": "eggs", "1": 1}\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        self.assertEqual({u"foo": u"bar", u"spam": u"eggs", u"1": 1}, value)\n+        self.assertEqual({"foo": "bar", "spam": "eggs", "1": 1}, value)\n \n     def test_float_field_serialization_returns_float(self):\n         value = self.serialize("test_float_field", 1.5)\n@@ -131,63 +131,63 @@ def test_int_field_serialization_returns_int(self):\n     def test_list_field_serialization_returns_list(self):\n         value = self.serialize("test_list_field", [1, "two", 3])\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([1, u"two", 3], value)\n+        self.assertEqual([1, "two", 3], value)\n \n     def test_list_field_with_vocabulary_choice_serialization_returns_terms(self):\n         value = self.serialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+            "test_list_field_with_choice_with_vocabulary", ["value1", "value3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n             value,\n         )\n \n     def test_list_field_with_vocabulary_choice_serialization_no_valid_term(self):\n         value = self.serialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value3", u"value4"]\n+            "test_list_field_with_choice_with_vocabulary", ["value3", "value4"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [{u"token": u"token3", u"title": u"title3"}],\n+            [{"token": "token3", "title": "title3"}],\n             value,\n         )\n \n     def test_set_field_serialization_returns_list(self):\n-        value = self.serialize("test_set_field", set(["a", "b", "c"]))\n+        value = self.serialize("test_set_field", {"a", "b", "c"})\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"a", u"b", u"c"], sorted(value))\n+        self.assertEqual(["a", "b", "c"], sorted(value))\n \n     def test_set_field_with_vocabulary_choice_serialization_returns_terms(self):\n         value = self.serialize(\n-            "test_set_field_with_choice_with_vocabulary", set([u"value1", u"value3"])\n+            "test_set_field_with_choice_with_vocabulary", {"value1", "value3"}\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n-            sorted(value, key=lambda x: x[u"token"]),\n+            sorted(value, key=lambda x: x["token"]),\n         )\n \n     def test_text_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_text_field", u"K\xc3\xa4fer")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"K\xc3\xa4fer", value)\n+        value = self.serialize("test_text_field", "K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("K\xc3\xa4fer", value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_textline_field", u"K\xc3\xa4fer")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"K\xc3\xa4fer", value)\n+        value = self.serialize("test_textline_field", "K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("K\xc3\xa4fer", value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize("test_time_field", time(14, 15, 33))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"14:15:33", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("14:15:33", value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n         value = self.serialize("test_timedelta_field", timedelta(0.01))\n@@ -198,7 +198,7 @@ def test_richtext_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_richtext_field",\n             RichTextValue(\n-                raw=u"<p>Some Text</p>",\n+                raw="<p>Some Text</p>",\n                 mimeType="text/html",\n                 outputMimeType="text/html",\n             ),\n@@ -206,9 +206,9 @@ def test_richtext_field_serialization_returns_dict(self):\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n         self.assertEqual(\n             {\n-                u"content-type": u"text/html",\n-                u"data": u"<p>Some Text</p>",\n-                u"encoding": u"utf-8",\n+                "content-type": "text/html",\n+                "data": "<p>Some Text</p>",\n+                "encoding": "utf-8",\n             },\n             value,\n         )\n@@ -217,19 +217,19 @@ def test_namedfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_namedfile_field",\n             NamedFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        download_url = u"/".join(\n-            [self.doc1.absolute_url(), u"@@download/test_namedfile_field"]\n+        download_url = "/".join(\n+            [self.doc1.absolute_url(), "@@download/test_namedfile_field"]\n         )\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"size": 13,\n-                u"download": download_url,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "size": 13,\n+                "download": download_url,\n             },\n             value,\n         )\n@@ -238,20 +238,20 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_namedblobfile_field",\n             NamedBlobFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-        download_url = u"/".join(\n-            [self.doc1.absolute_url(), u"@@download/test_namedblobfile_field"]\n+        download_url = "/".join(\n+            [self.doc1.absolute_url(), "@@download/test_namedblobfile_field"]\n         )\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"size": 13,\n-                u"download": download_url,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "size": 13,\n+                "download": download_url,\n             },\n             value,\n         )\n@@ -371,7 +371,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -379,7 +379,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -389,51 +389,51 @@ def test_namedimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -447,19 +447,19 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -468,7 +468,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -476,7 +476,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -486,51 +486,51 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -544,19 +544,19 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -594,7 +594,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone == 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -602,7 +602,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -612,51 +612,51 @@ def test_namedimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -670,19 +670,19 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -691,7 +691,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone = 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -699,7 +699,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -709,51 +709,51 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -767,19 +767,19 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -817,7 +817,7 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         the actual original image in its original format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -825,7 +825,7 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -835,51 +835,51 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.2\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "gif"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -893,7 +893,7 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n@@ -901,15 +901,15 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": u"{}/@@images/{}.{}".format(\n+                "content-type": "image/gif",\n+                "download": "{}/@@images/{}.{}".format(\n                     obj_url, scale_url_uuid, "gif"\n                 ),\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -918,7 +918,7 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n         """In Plone >= 5.2 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         the actual original image in its original format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -926,7 +926,7 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -936,51 +936,51 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.2\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "gif"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -994,7 +994,7 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n@@ -1002,15 +1002,15 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": u"{}/@@images/{}.{}".format(\n+                "content-type": "image/gif",\n+                "download": "{}/@@images/{}.{}".format(\n                     obj_url, scale_url_uuid, "gif"\n                 ),\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 56843ddcc..92fe2d810 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -32,7 +32,7 @@\n     from plone.app.multilingual.interfaces import ITranslationManager\n \n \n-class ExpandableElementFoo(object):\n+class ExpandableElementFoo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -44,7 +44,7 @@ def __call__(self, expand=False):\n             return {"foo": "collapsed"}\n \n \n-class ExpandableElementBar(object):\n+class ExpandableElementBar:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -123,7 +123,7 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         transaction.commit()\n \n@@ -162,18 +162,18 @@ def test_navigation_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"title": u"Home",\n-                    u"@id": self.portal_url + u"",\n-                    u"description": u"",\n-                    u"review_state": None,\n-                    u"items": [],\n+                    "title": "Home",\n+                    "@id": self.portal_url + "",\n+                    "description": "",\n+                    "review_state": None,\n+                    "items": [],\n                 },\n                 {\n-                    u"title": u"Some Folder",\n-                    u"@id": self.portal_url + u"/folder",\n-                    u"description": u"",\n-                    u"review_state": "private",\n-                    u"items": [],\n+                    "title": "Some Folder",\n+                    "@id": self.portal_url + "/folder",\n+                    "description": "",\n+                    "review_state": "private",\n+                    "items": [],\n                 },\n             ],\n             response.json()["@components"]["navigation"]["items"],\n@@ -181,25 +181,25 @@ def test_navigation_expanded(self):\n \n     def test_navigation_expanded_with_depth(self):\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            self.folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            self.folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n         createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.folder, "Document", id="doc1", title="A document"\n         )\n         transaction.commit()\n \n@@ -234,8 +234,8 @@ def test_breadcrumbs_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"title": u"Some Folder",\n-                    u"@id": self.portal_url + u"/folder",\n+                    "title": "Some Folder",\n+                    "@id": self.portal_url + "/folder",\n                 }\n             ],\n             response.json()["@components"]["breadcrumbs"]["items"],\n@@ -252,28 +252,28 @@ def test_workflow_expanded(self):\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            self.portal_url + u"/folder/@workflow",\n+            self.portal_url + "/folder/@workflow",\n             response.json().get("@components").get("workflow").get("@id"),\n         )\n         self.assertEqual(\n-            u"private",\n+            "private",\n             response.json()["@components"]["workflow"]["history"][0][\n                 "review_state"\n             ],  # noqa\n         )\n         self.assertEqual(\n-            u"Private",\n+            "Private",\n             response.json()["@components"]["workflow"]["history"][0]["title"],\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/folder/@workflow/publish",  # noqa\n-                    u"title": u"Publish",\n+                    "@id": self.portal_url + "/folder/@workflow/publish",  # noqa\n+                    "title": "Publish",\n                 },\n                 {\n-                    u"@id": self.portal_url + u"/folder/@workflow/submit",  # noqa\n-                    u"title": u"Submit for publication",\n+                    "@id": self.portal_url + "/folder/@workflow/submit",  # noqa\n+                    "title": "Submit for publication",\n                 },\n             ],\n             response.json()["@components"]["workflow"]["transitions"],\n@@ -299,49 +299,49 @@ def test_types_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Collection")),\n-                    u"addable": True,\n-                    u"title": u"Collection",\n+                    "@id": "/".join((base_url, "@types/Collection")),\n+                    "addable": True,\n+                    "title": "Collection",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/DXTestDocument")),\n-                    u"addable": True,\n-                    u"title": u"DX Test Document",\n+                    "@id": "/".join((base_url, "@types/DXTestDocument")),\n+                    "addable": True,\n+                    "title": "DX Test Document",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Event")),\n-                    u"addable": True,\n-                    u"title": u"Event",\n+                    "@id": "/".join((base_url, "@types/Event")),\n+                    "addable": True,\n+                    "title": "Event",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/File")),\n-                    u"addable": True,\n-                    u"title": u"File",\n+                    "@id": "/".join((base_url, "@types/File")),\n+                    "addable": True,\n+                    "title": "File",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Folder")),\n-                    u"addable": True,\n-                    u"title": u"Folder",\n+                    "@id": "/".join((base_url, "@types/Folder")),\n+                    "addable": True,\n+                    "title": "Folder",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Image")),\n-                    u"addable": True,\n-                    u"title": u"Image",\n+                    "@id": "/".join((base_url, "@types/Image")),\n+                    "addable": True,\n+                    "title": "Image",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Link")),\n-                    u"addable": True,\n-                    u"title": u"Link",\n+                    "@id": "/".join((base_url, "@types/Link")),\n+                    "addable": True,\n+                    "title": "Link",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/News Item")),\n-                    u"addable": True,\n-                    u"title": u"News Item",\n+                    "@id": "/".join((base_url, "@types/News Item")),\n+                    "addable": True,\n+                    "title": "News Item",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Document")),\n-                    u"addable": True,\n-                    u"title": u"Page",\n+                    "@id": "/".join((base_url, "@types/Document")),\n+                    "addable": True,\n+                    "title": "Page",\n                 },\n             ],\n             response.json().get("@components").get("types"),\n@@ -368,13 +368,13 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.en_folder = createContentInContainer(\n-            self.portal["en"], "Folder", title=u"Test folder"\n+            self.portal["en"], "Folder", title="Test folder"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 0fc1cdde6..e1b0a4d99 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -33,10 +33,10 @@ def test_login_without_credentials_fails(self):\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            u"Missing credentials", response.json().get("error").get("type")\n+            "Missing credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u"Login and password must be provided in body.",\n+            "Login and password must be provided in body.",\n             response.json().get("error").get("message"),\n         )\n \n@@ -48,10 +48,10 @@ def test_login_with_invalid_credentials_fails(self):\n         )\n         self.assertEqual(401, response.status_code)\n         self.assertEqual(\n-            u"Invalid credentials", response.json().get("error").get("type")\n+            "Invalid credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u"Wrong login and/or password.", response.json().get("error").get("message")\n+            "Wrong login and/or password.", response.json().get("error").get("message")\n         )\n \n     def test_login_with_valid_credentials_returns_token(self):\n@@ -103,7 +103,7 @@ def test_api_login_grants_zmi(self):\n             "Wrong ZMI view response status code",\n         )\n         self.assertTrue(\n-            u\'<a href="plone/manage_workspace">\' in zmi_resp.text,\n+            \'<a href="plone/manage_workspace">\' in zmi_resp.text,\n             "Wrong ZMI view response content",\n         )\n \n@@ -115,7 +115,7 @@ def test_zmi_login_grants_api(self):\n         basic_auth_headers = {\n             "Authorization": "Basic {}".format(\n                 base64.b64encode(\n-                    "{}:{}".format(SITE_OWNER_NAME, TEST_USER_PASSWORD).encode(),\n+                    f"{SITE_OWNER_NAME}:{TEST_USER_PASSWORD}".encode(),\n                 ).decode()\n             )\n         }\n@@ -129,7 +129,7 @@ def test_zmi_login_grants_api(self):\n             "Wrong ZMI login response status code",\n         )\n         self.assertTrue(\n-            u\'<a href="plone/manage_workspace">\' in zmi_resp.text,\n+            \'<a href="plone/manage_workspace">\' in zmi_resp.text,\n             "Wrong ZMI view response content",\n         )\n \n@@ -168,7 +168,7 @@ def test_cookie_login_grants_api(self):\n             "Wrong Plone login challenge status code",\n         )\n         self.assertTrue(\n-            u\'<input id="__ac_password" name="__ac_password"\' in challenge_resp.text,\n+            \'<input id="__ac_password" name="__ac_password"\' in challenge_resp.text,\n             "Plone login challenge response content missing password field",\n         )\n         login_resp = session.post(\n@@ -236,7 +236,7 @@ def test_accessing_private_document_with_valid_token_succeeds(self):\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(u"@id" in response.json())\n+        self.assertTrue("@id" in response.json())\n \n     def test_accessing_private_document_with_invalid_token_fails(self):\n         invalid_token = "abcd1234"\n@@ -249,9 +249,9 @@ def test_accessing_private_document_with_invalid_token_fails(self):\n         )\n \n         self.assertEqual(401, response.status_code)\n-        self.assertEqual(u"Unauthorized", response.json().get("type"))\n+        self.assertEqual("Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u"You are not authorized to access this resource.",\n+            "You are not authorized to access this resource.",\n             response.json().get("message"),\n         )\n \n@@ -272,8 +272,8 @@ def test_accessing_private_document_with_expired_token_fails(self):\n         )\n \n         self.assertEqual(401, response.status_code)\n-        self.assertEqual(u"Unauthorized", response.json().get("type"))\n+        self.assertEqual("Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u"You are not authorized to access this resource.",\n+            "You are not authorized to access this resource.",\n             response.json().get("message"),\n         )\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 74647c57d..cbeddfaed 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -57,8 +57,8 @@ def test_unauthorized_if_missing_permission(self):\n         self.assertEqual(response.status_code, 401)\n         self.assertDictContainsSubset(\n             {\n-                u"type": u"Unauthorized",\n-                u"message": u"Missing \'plone.restapi: Use REST API\' permission",\n+                "type": "Unauthorized",\n+                "message": "Missing \'plone.restapi: Use REST API\' permission",\n             },\n             response.json(),\n         )\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex ca6cc78a6..90461ce9d 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -7,7 +7,6 @@\n from plone.registry.record import Record\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-from six.moves import range\n from zope.component import getUtility\n \n import transaction\n@@ -29,11 +28,11 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+        record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n         registry.records["foo.bar"] = record\n \n         for counter in range(1, 100):\n-            record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+            record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n             registry.records["foo.bar" + str(counter)] = record\n \n         transaction.commit()\n@@ -58,7 +57,7 @@ def test_update_registry_record(self):\n \n     def test_update_several_registry_records(self):\n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar Baz"), u"Lorem Ipsum Dolor")\n+        record = Record(field.TextLine(title="Foo Bar Baz"), "Lorem Ipsum Dolor")\n         registry.records["foo.bar.baz"] = record\n         transaction.commit()\n         payload = {"foo.bar": "lorem ipsum", "foo.bar.baz": "lorem ipsum dolor"}\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex e1e733860..01565854c 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -3,7 +3,6 @@\n from plone.registry.record import Record\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from six.moves import range\n from zope.component import getMultiAdapter\n \n import unittest\n@@ -32,7 +31,7 @@ def test_batched(self):\n         registry = Registry()\n \n         for counter in range(1, 100):\n-            record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+            record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n             registry.records["foo.bar" + str(counter)] = record\n \n         obj = self.serialize(registry)\n@@ -43,12 +42,12 @@ def test_batched(self):\n     def test_structure(self):\n         registry = Registry()\n \n-        record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+        record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n         registry.records["foo.bar"] = record\n \n         obj = self.serialize(registry)\n         item = obj["items"][0]\n-        self.assertEqual(set(item), set(["name", "value", "schema"]))\n-        self.assertEqual(set(item["schema"]), set(["properties"]))\n+        self.assertEqual(set(item), {"name", "value", "schema"})\n+        self.assertEqual(set(item["schema"]), {"properties"})\n         self.assertEqual(item["name"], "foo.bar")\n-        self.assertEqual(item["value"], u"Lorem Ipsum")\n+        self.assertEqual(item["value"], "Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nindex 62b6cc9a2..243fecdf8 100644\n--- a/src/plone/restapi/tests/test_resolveuid.py\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -67,7 +67,7 @@ def test_create_document_with_link_stores_uuid(self):\n                             "entityMap": {\n                                 "0": {\n                                     "data": {\n-                                        "url": "{}/target".format(self.portal_url)\n+                                        "url": f"{self.portal_url}/target"\n                                     },\n                                     "mutability": "MUTABLE",\n                                     "type": "LINK",\n@@ -90,7 +90,7 @@ def test_create_document_with_link_stores_uuid(self):\n \n         target_uuid = IUUID(self.portal.target)\n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             )\n@@ -103,13 +103,13 @@ def test_create_document_with_link_stores_uuid(self):\n \n     def test_create_document_with_image_block_stores_uuid(self):\n         self.portal.invokeFactory("Image", id="image", title="Image")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.image.image_caption = u"This is an image caption."\n+        self.portal.image.image_caption = "This is an image caption."\n         transaction.commit()\n \n         target_uuid = IUUID(self.portal.image)\n@@ -125,7 +125,7 @@ def test_create_document_with_image_block_stores_uuid(self):\n                 "blocks": {\n                     "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n                         "@type": "image",\n-                        "url": "{}/image".format(self.portal_url),\n+                        "url": f"{self.portal_url}/image",\n                     },\n                     "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n                 },\n@@ -141,7 +141,7 @@ def test_create_document_with_image_block_stores_uuid(self):\n         transaction.begin()\n \n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("url"),\n@@ -150,13 +150,13 @@ def test_create_document_with_image_block_stores_uuid(self):\n     def test_create_document_with_image_block_and_href_stores_uuid(self):\n         self.portal.invokeFactory("Document", id="linked_document", title="Linked Doc")\n         self.portal.invokeFactory("Image", id="image", title="Image")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.image.image_caption = u"This is an image caption."\n+        self.portal.image.image_caption = "This is an image caption."\n         transaction.commit()\n \n         target_uuid = IUUID(self.portal.image)\n@@ -173,8 +173,8 @@ def test_create_document_with_image_block_and_href_stores_uuid(self):\n                 "blocks": {\n                     "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n                         "@type": "image",\n-                        "url": "{}/image".format(self.portal_url),\n-                        "href": "{}/linked_document".format(self.portal_url),\n+                        "url": f"{self.portal_url}/image",\n+                        "href": f"{self.portal_url}/linked_document",\n                     },\n                     "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n                 },\n@@ -190,13 +190,13 @@ def test_create_document_with_image_block_and_href_stores_uuid(self):\n         transaction.begin()\n \n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("url"),\n         )\n         self.assertEqual(\n-            "../../resolveuid/{}".format(liked_doc_uuid),\n+            f"../../resolveuid/{liked_doc_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("href"),\n@@ -226,9 +226,9 @@ def setUp(self):\n                 id="doc_primary_field_url",\n                 title="Target Document with primary file field",\n                 test_primary_namedfile_field=NamedFile(\n-                    data=u"Spam and eggs",\n-                    contentType=u"text/plain",\n-                    filename=u"test.txt",\n+                    data="Spam and eggs",\n+                    contentType="text/plain",\n+                    filename="test.txt",\n                 ),\n             )\n         ]\n@@ -275,7 +275,7 @@ def test_blocks_field_serialization_resolves_uids(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -308,7 +308,7 @@ def test_resolveuid_keeps_suffix(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}/view".format(uid),\n+                                "url": f"../resolveuid/{uid}/view",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -333,18 +333,18 @@ def test_resolveuid_keeps_suffix(self):\n \n     def test_resolveuid_gets_serialized_for_standard_fields(self):\n         uid = IUUID(self.doc2)\n-        blocks = {"aaa": {"@type": "foo", "url": "../resolveuid/{}/view".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "url": f"../resolveuid/{uid}/view"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(value["aaa"]["url"], self.doc2.absolute_url() + "/view")\n \n-        blocks = {"aaa": {"@type": "foo", "href": "../resolveuid/{}/view".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "href": f"../resolveuid/{uid}/view"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(value["aaa"]["href"], self.doc2.absolute_url() + "/view")\n \n     def test_resolveuid_serialize_take_care_of_primary_fields(self):\n         logout()\n         uid = IUUID(self.doc_primary_field_url)\n-        blocks = {"aaa": {"@type": "foo", "url": "../resolveuid/{}".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "url": f"../resolveuid/{uid}"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(\n             value["aaa"]["url"],\n@@ -361,9 +361,9 @@ def test_keeps_resolveuid_link_if_unknown_uid(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n+                                "href": f"../resolveuid/{uid}",\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -377,13 +377,13 @@ def test_keeps_resolveuid_link_if_unknown_uid(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["href"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n \n     def test_blocks_field_serialization_doesnt_update_stored_values(self):\n@@ -408,7 +408,7 @@ def test_blocks_field_serialization_doesnt_update_stored_values(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -470,13 +470,13 @@ def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n \n     def test_keeps_url_if_unknown_path(self):\n@@ -537,13 +537,13 @@ def test_path_keeps_suffix(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}/view".format(uid),\n+            f"../resolveuid/{uid}/view",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}/view".format(uid),\n+            f"../resolveuid/{uid}/view",\n         )\n \n     def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n@@ -569,7 +569,7 @@ def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -618,7 +618,7 @@ def test_blocks_field_serialization_resolves_uids_primary_url_with_edit_permissi\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -651,7 +651,7 @@ def test_resolveuid_with_primary_field_url_keeps_suffix(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}/view".format(uid),\n+                                "url": f"../resolveuid/{uid}/view",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 5679d18ef..eaeb6d272 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -26,46 +26,46 @@ def test_roles_endpoint_lists_roles(self):\n \n         expected = (\n             {\n-                u"@id": self.portal_url + u"/@roles/Contributor",\n-                u"@type": u"role",\n-                u"id": u"Contributor",\n-                u"title": u"Contributor",\n+                "@id": self.portal_url + "/@roles/Contributor",\n+                "@type": "role",\n+                "id": "Contributor",\n+                "title": "Contributor",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Editor",\n-                u"@type": u"role",\n-                u"id": u"Editor",\n-                u"title": u"Editor",\n+                "@id": self.portal_url + "/@roles/Editor",\n+                "@type": "role",\n+                "id": "Editor",\n+                "title": "Editor",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Member",\n-                u"@type": u"role",\n-                u"id": u"Member",\n-                u"title": u"Member",\n+                "@id": self.portal_url + "/@roles/Member",\n+                "@type": "role",\n+                "id": "Member",\n+                "title": "Member",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Reader",\n-                u"@type": u"role",\n-                u"id": u"Reader",\n-                u"title": u"Reader",\n+                "@id": self.portal_url + "/@roles/Reader",\n+                "@type": "role",\n+                "id": "Reader",\n+                "title": "Reader",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Reviewer",\n-                u"@type": u"role",\n-                u"id": u"Reviewer",\n-                u"title": u"Reviewer",\n+                "@id": self.portal_url + "/@roles/Reviewer",\n+                "@type": "role",\n+                "id": "Reviewer",\n+                "title": "Reviewer",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Site Administrator",\n-                u"@type": u"role",\n-                u"id": u"Site Administrator",\n-                u"title": u"Site Administrator",\n+                "@id": self.portal_url + "/@roles/Site Administrator",\n+                "@type": "role",\n+                "id": "Site Administrator",\n+                "title": "Site Administrator",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Manager",\n-                u"@type": u"role",\n-                u"id": u"Manager",\n-                u"title": u"Manager",\n+                "@id": self.portal_url + "/@roles/Manager",\n+                "@type": "role",\n+                "id": "Manager",\n+                "title": "Manager",\n             },\n         )\n         result = response.json()\n@@ -79,19 +79,19 @@ def test_roles_endpoint_translates_role_titles(self):\n         # One of the roles has changed translation in German.\n         # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n         titles = {item["title"] for item in response.json()}\n-        options = {u"Ver\\xf6ffentlichen", u"Reviewer"}\n+        options = {"Ver\\xf6ffentlichen", "Reviewer"}\n         # One of the options must match:\n         self.assertTrue(titles.intersection(options))\n         # Discard them:\n         titles = titles.difference(options)\n         self.assertEqual(\n             {\n-                u"Hinzuf\\xfcgen",\n-                u"Bearbeiten",\n-                u"Benutzer",\n-                u"Ansehen",\n-                u"Website-Administrator",\n-                u"Verwalten",\n+                "Hinzuf\\xfcgen",\n+                "Bearbeiten",\n+                "Benutzer",\n+                "Ansehen",\n+                "Website-Administrator",\n+                "Verwalten",\n             },\n             titles,\n         )\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 15ada8211..9eecdb48b 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -58,7 +58,7 @@ def setUp(self):\n \n         # /plone/folder\n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         api.user.grant_roles(username="editoruser", roles=["Editor"])\n         api.user.grant_roles(\n@@ -68,9 +68,9 @@ def setUp(self):\n         # /plone/folder/doc\n         self.doc = createContentInContainer(\n             self.folder,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc",\n-            title=u"Lorem Ipsum",\n+            title="Lorem Ipsum",\n             start=DateTime(1950, 1, 1, 0, 0),\n             effective=DateTime(1995, 1, 1, 0, 0),\n             expires=DateTime(1999, 1, 1, 0, 0),\n@@ -78,7 +78,7 @@ def setUp(self):\n             test_list_field=["Keyword1", "Keyword2", "Keyword3"],\n             test_bool_field=True,\n             test_richtext_field=RichTextValue(\n-                raw=u"<p>Some Text</p>",\n+                raw="<p>Some Text</p>",\n                 mimeType="text/html",\n                 outputMimeType="text/html",\n             ),\n@@ -89,10 +89,10 @@ def setUp(self):\n         # /plone/folder/other-document\n         self.doc2 = createContentInContainer(\n             self.folder,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="other-document",\n-            title=u"Other Document",\n-            description=u"\\xdcbersicht",\n+            title="Other Document",\n+            description="\\xdcbersicht",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -102,15 +102,15 @@ def setUp(self):\n \n         # /plone/folder2\n         self.folder2 = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Another Folder"\n+            self.portal, "Folder", id="folder2", title="Another Folder"\n         )\n \n         # /plone/folder2/doc\n         createContentInContainer(\n             self.folder2,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc",\n-            title=u"Document in second folder",\n+            title="Document in second folder",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -120,9 +120,9 @@ def setUp(self):\n         # /plone/doc-outside-folder\n         createContentInContainer(\n             self.portal,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc-outside-folder",\n-            title=u"Doc outside folder",\n+            title="Doc outside folder",\n         )\n \n         transaction.commit()\n@@ -138,15 +138,15 @@ def test_overall_response_format(self):\n \n         results = response.json()\n         self.assertEqual(\n-            results[u"items_total"],\n-            len(results[u"items"]),\n+            results["items_total"],\n+            len(results["items"]),\n             "items_total property should match actual item count.",\n         )\n \n     def test_search_on_context_constrains_query_by_path(self):\n         response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n+            {"/plone/folder", "/plone/folder/doc", "/plone/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -168,13 +168,13 @@ def test_search_in_vhm(self):\n \n         # If we go through the VHM will will get results if we only use\n         # the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search?path=/folder",\n         )\n         response = self.api_session.get(vhm_url)\n         self.assertSetEqual(\n-            {u"/folder", u"/folder/doc", u"/folder/other-document"},\n+            {"/folder", "/folder/doc", "/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -195,18 +195,18 @@ def test_search_in_vhm_multiple_paths(self):\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search",\n         )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n             {\n-                u"/folder",\n-                u"/folder/doc",\n-                u"/folder/other-document",\n-                u"/folder2",\n-                u"/folder2/doc",\n+                "/folder",\n+                "/folder/doc",\n+                "/folder/other-document",\n+                "/folder2",\n+                "/folder2/doc",\n             },\n             set(result_paths(response.json())),\n         )\n@@ -216,18 +216,18 @@ def test_search_in_vhm_multiple_paths(self):\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search",\n         )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n             {\n-                u"/folder",\n-                u"/folder/doc",\n-                u"/folder/other-document",\n-                u"/folder2",\n-                u"/folder2/doc",\n+                "/folder",\n+                "/folder/doc",\n+                "/folder/other-document",\n+                "/folder2",\n+                "/folder2/doc",\n             },\n             set(result_paths(response.json())),\n         )\n@@ -235,7 +235,7 @@ def test_search_in_vhm_multiple_paths(self):\n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n         response = self.api_session.get("/@search?path.depth=1")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder2", u"/plone/doc-outside-folder"},\n+            {"/plone/folder", "/plone/folder2", "/plone/doc-outside-folder"},\n             set(result_paths(response.json())),\n         )\n \n@@ -248,10 +248,10 @@ def test_partial_metadata_retrieval(self):\n \n         self.assertDictContainsSubset(\n             {\n-                u"@id": self.portal_url + u"/folder/doc",\n-                u"title": u"Lorem Ipsum",\n-                u"portal_type": u"DXTestDocument",\n-                u"review_state": u"private",\n+                "@id": self.portal_url + "/folder/doc",\n+                "title": "Lorem Ipsum",\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n             },\n             response.json()["items"][0],\n         )\n@@ -263,45 +263,45 @@ def test_full_metadata_retrieval(self):\n         first_item = response.json()["items"][0]\n         self.assertLessEqual(\n             {\n-                u"@id": self.portal_url + u"/folder/doc",\n-                u"Creator": u"test_user_1_",\n-                u"Description": u"",\n-                u"EffectiveDate": u"None",\n-                u"ExpirationDate": u"None",\n-                u"Subject": [],\n-                u"Title": u"Lorem Ipsum",\n-                u"Type": u"DX Test Document",\n-                u"UID": u"77779ffa110e45afb1ba502f75f77777",\n-                u"author_name": None,\n-                u"cmf_uid": None,\n-                u"commentators": [],\n-                u"description": u"",\n-                u"effective": u"1995-01-01T00:00:00+00:00",\n-                u"end": None,\n-                u"exclude_from_nav": False,\n-                u"expires": u"1999-01-01T00:00:00+00:00",\n-                u"getId": u"doc",\n-                u"getPath": u"/plone/folder/doc",\n-                u"getRemoteUrl": None,\n-                u"getURL": self.portal_url + u"/folder/doc",\n-                u"id": u"doc",\n-                u"in_response_to": None,\n-                u"is_folderish": False,\n-                u"last_comment_date": None,\n-                u"listCreators": [u"test_user_1_"],\n-                u"location": None,\n-                u"portal_type": u"DXTestDocument",\n-                u"review_state": u"private",\n-                u"start": u"1950-01-01T00:00:00+00:00",\n-                u"sync_uid": None,\n-                u"title": u"Lorem Ipsum",\n-                u"total_comments": 0,\n+                "@id": self.portal_url + "/folder/doc",\n+                "Creator": "test_user_1_",\n+                "Description": "",\n+                "EffectiveDate": "None",\n+                "ExpirationDate": "None",\n+                "Subject": [],\n+                "Title": "Lorem Ipsum",\n+                "Type": "DX Test Document",\n+                "UID": "77779ffa110e45afb1ba502f75f77777",\n+                "author_name": None,\n+                "cmf_uid": None,\n+                "commentators": [],\n+                "description": "",\n+                "effective": "1995-01-01T00:00:00+00:00",\n+                "end": None,\n+                "exclude_from_nav": False,\n+                "expires": "1999-01-01T00:00:00+00:00",\n+                "getId": "doc",\n+                "getPath": "/plone/folder/doc",\n+                "getRemoteUrl": None,\n+                "getURL": self.portal_url + "/folder/doc",\n+                "id": "doc",\n+                "in_response_to": None,\n+                "is_folderish": False,\n+                "last_comment_date": None,\n+                "listCreators": ["test_user_1_"],\n+                "location": None,\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n+                "start": "1950-01-01T00:00:00+00:00",\n+                "sync_uid": None,\n+                "title": "Lorem Ipsum",\n+                "total_comments": 0,\n             }.items(),\n             first_item.items(),\n         )\n         # This value changed in Plone 5.2\n         # (Dexterity gained support for getObjSize)\n-        self.assertIn(first_item[u"getObjSize"], (u"0 KB", u"1 KB"))\n+        self.assertIn(first_item["getObjSize"], ("0 KB", "1 KB"))\n \n     def test_full_objects_retrieval(self):\n         query = {\n@@ -312,11 +312,11 @@ def test_full_objects_retrieval(self):\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            u"<p>Some Text</p>",\n+            "<p>Some Text</p>",\n             response.json()["items"][0]["test_richtext_field"]["data"],\n         )\n         self.assertEqual(\n-            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url + "/folder/doc", response.json()["items"][0]["@id"]\n         )\n \n     def test_full_objects_retrieval_discussion(self):\n@@ -328,7 +328,7 @@ def test_full_objects_retrieval_discussion(self):\n \n         transaction.commit()\n \n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         self.api_session.post(url, json={"text": "comment 1"})\n         transaction.commit()\n \n@@ -340,7 +340,7 @@ def test_full_objects_retrieval_discussion(self):\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n-            self.folder, u"Collection", id="collection"\n+            self.folder, "Collection", id="collection"\n         )\n         transaction.commit()\n \n@@ -356,14 +356,14 @@ def test_fulltext_search(self):\n         query = {"SearchableText": "lorem"}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_fulltext_search_with_non_ascii_characters(self):\n-        query = {"SearchableText": u"\\xfcbersicht"}\n+        query = {"SearchableText": "\\xfcbersicht"}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder/other-document"], result_paths(response.json())\n+            ["/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # KeywordIndex\n@@ -372,14 +372,14 @@ def test_keyword_index_str_query(self):\n         query = {"test_list_field": "Keyword1"}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_keyword_index_str_query_or(self):\n         query = {"test_list_field": ["Keyword2", "Keyword3"]}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            ["/plone/folder/doc", "/plone/folder/other-document"],\n             result_paths(response.json()),\n         )\n \n@@ -390,7 +390,7 @@ def test_keyword_index_str_query_and(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n@@ -401,19 +401,19 @@ def test_keyword_index_int_query(self):\n         query = {"test_list_field:int": 42}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # BooleanIndex\n \n     def test_boolean_index_query(self):\n         query = {"test_bool_field": True, "portal_type": "DXTestDocument"}\n         response = self.api_session.get("/folder/@search", params=query)\n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n         query = {"test_bool_field": False, "portal_type": "DXTestDocument"}\n         response = self.api_session.get("/folder/@search", params=query)\n         self.assertEqual(\n-            [u"/plone/folder/other-document"], result_paths(response.json())\n+            ["/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # FieldIndex\n@@ -422,7 +422,7 @@ def test_field_index_int_query(self):\n         query = {"test_int_field:int": 42}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_field_index_int_range_query(self):\n         query = {\n@@ -431,7 +431,7 @@ def test_field_index_int_range_query(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # ExtendedPathIndex\n \n@@ -443,9 +443,9 @@ def test_extended_path_index_query(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n@@ -464,11 +464,11 @@ def test_extended_path_index_query_multiple(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n-                    u"/plone/folder2",\n-                    u"/plone/folder2/doc",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n+                    "/plone/folder2",\n+                    "/plone/folder2/doc",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n@@ -486,20 +486,20 @@ def test_extended_path_index_query_multiple(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n-                    u"/plone/folder2",\n-                    u"/plone/folder2/doc",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n+                    "/plone/folder2",\n+                    "/plone/folder2/doc",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n         )\n \n     def test_extended_path_index_depth_limiting(self):\n-        lvl1 = createContentInContainer(self.portal, u"Folder", id=u"lvl1")\n-        lvl2 = createContentInContainer(lvl1, u"Folder", id=u"lvl2")\n-        createContentInContainer(lvl2, u"Folder", id=u"lvl3")\n+        lvl1 = createContentInContainer(self.portal, "Folder", id="lvl1")\n+        lvl2 = createContentInContainer(lvl1, "Folder", id="lvl2")\n+        createContentInContainer(lvl2, "Folder", id="lvl3")\n         transaction.commit()\n \n         path = "/plone/lvl1"\n@@ -508,20 +508,20 @@ def test_extended_path_index_depth_limiting(self):\n         query = {"path.query": path, "path.depth": 0}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/lvl1"], result_paths(response.json()))\n+        self.assertEqual(["/plone/lvl1"], result_paths(response.json()))\n \n         # Depth 1 - immediate children\n         query = {"path.query": path, "path.depth": 1}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/lvl1/lvl2"], result_paths(response.json()))\n+        self.assertEqual(["/plone/lvl1/lvl2"], result_paths(response.json()))\n \n         # No depth - object itself and all children\n         query = {"path": path}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertSetEqual(\n-            {u"/plone/lvl1", u"/plone/lvl1/lvl2", u"/plone/lvl1/lvl2/lvl3"},\n+            {"/plone/lvl1", "/plone/lvl1/lvl2", "/plone/lvl1/lvl2/lvl3"},\n             set(result_paths(response.json())),\n         )\n \n@@ -531,7 +531,7 @@ def test_date_index_query(self):\n         query = {"start": date(1950, 1, 1).isoformat()}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_date_index_ranged_query(self):\n         query = {\n@@ -540,7 +540,7 @@ def test_date_index_ranged_query(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # DateRangeIndex\n \n@@ -549,8 +549,8 @@ def test_date_range_index_query(self):\n         response = self.api_session.get("/folder/@search", params=query)\n \n         self.assertEqual(2, len(result_paths(response.json())))\n-        self.assertTrue(u"/plone/folder" in result_paths(response.json()))\n-        self.assertTrue(u"/plone/folder/doc" in result_paths(response.json()))\n+        self.assertTrue("/plone/folder" in result_paths(response.json()))\n+        self.assertTrue("/plone/folder/doc" in result_paths(response.json()))\n \n     # DateRecurringIndex\n \n@@ -559,9 +559,9 @@ def test_date_recurring_index_query(self):\n \n         createContentInContainer(\n             self.folder,\n-            u"Event",\n-            id=u"event",\n-            title=u"Event",\n+            "Event",\n+            id="event",\n+            title="Event",\n             start=datetime(2013, 1, 1, 0, 0),\n             end=datetime(2013, 1, 1, 23, 59),\n             whole_day=True,\n@@ -576,7 +576,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 1).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n         # No event that day\n         query = {"start": date(2013, 1, 2).isoformat()}\n@@ -588,7 +588,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 3).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n         # Ranged query\n         query = {\n@@ -597,7 +597,7 @@ def test_date_recurring_index_query(self):\n         }\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n     # UUIDIndex\n \n@@ -608,7 +608,7 @@ def test_uuid_index_query(self):\n \n         query = {"UID": "7777a074cb4240d08c9a129e3a837777"}\n         response = self.api_session.get("/@search", params=query)\n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(\n         not PLONE5, "searchResults in Plone 4 does not handle correctly that permission"\n@@ -670,9 +670,9 @@ def test_search_use_site_search_settings_for_types(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        types = set([item["@type"] for item in response["items"]])\n+        types = {item["@type"] for item in response["items"]}\n \n-        self.assertEqual(set(types), set(["Folder", "DXTestDocument"]))\n+        self.assertEqual(set(types), {"Folder", "DXTestDocument"})\n \n         registry = getUtility(IRegistry)\n         from Products.CMFPlone.interfaces import ISearchSchema\n@@ -685,9 +685,9 @@ def test_search_use_site_search_settings_for_types(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        types = set([item["@type"] for item in response["items"]])\n+        types = {item["@type"] for item in response["items"]}\n \n-        self.assertEqual(set(types), set(["Folder"]))\n+        self.assertEqual(set(types), {"Folder"})\n         search_settings.types_not_searched = old\n         transaction.commit()\n \n@@ -697,12 +697,12 @@ def test_search_use_site_search_settings_for_default_sort_order(self):\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n         titles = [\n-            u"Some Folder",\n-            u"Lorem Ipsum",\n-            u"Other Document",\n-            u"Another Folder",\n-            u"Document in second folder",\n-            u"Doc outside folder",\n+            "Some Folder",\n+            "Lorem Ipsum",\n+            "Other Document",\n+            "Another Folder",\n+            "Document in second folder",\n+            "Doc outside folder",\n         ]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n@@ -711,7 +711,7 @@ def test_search_use_site_search_settings_for_default_sort_order(self):\n         ).json()\n         self.assertEqual(\n             [item["title"] for item in response["items"]][0],\n-            u"Other Document",\n+            "Other Document",\n         )\n \n     @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n@@ -723,7 +723,7 @@ def test_search_use_site_search_settings_with_navigation_root(self):\n         response = self.api_session.get(\n             "/folder/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        titles = [u"Some Folder", u"Lorem Ipsum", u"Other Document"]\n+        titles = ["Some Folder", "Lorem Ipsum", "Other Document"]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n         noLongerProvides(self.folder, INavigationRoot)\n@@ -743,14 +743,14 @@ def test_search_use_site_search_settings_with_navigation_root_and_vhm(self):\n         alsoProvides(self.folder, INavigationRoot)\n         transaction.commit()\n \n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "/folder/@search",\n         )\n         response = self.api_session.get(\n             vhm_url, params={"use_site_search_settings": 1, "path": "/folder"}\n         ).json()\n-        titles = [u"Some Folder", u"Lorem Ipsum", u"Other Document"]\n+        titles = ["Some Folder", "Lorem Ipsum", "Other Document"]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n         noLongerProvides(self.folder, INavigationRoot)\n@@ -769,7 +769,7 @@ def test_search_use_site_search_settings_with_vhm(self):\n             manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "/@search",\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 7b35471de..4975165e5 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -1,5 +1,5 @@\n from DateTime import DateTime\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -48,13 +48,13 @@ def test_serialize_returns_type(self):\n             self.serialize(self.portal.doc1).get("@type"),\n             "The @type attribute should be present.",\n         )\n-        self.assertEqual(self.serialize(self.portal.doc1)["@type"], u"Document")\n+        self.assertEqual(self.serialize(self.portal.doc1)["@type"], "Document")\n \n     def test_serialize_returns_title(self):\n-        self.assertEqual(self.serialize(self.portal.doc1)["title"], u"Document 1")\n+        self.assertEqual(self.serialize(self.portal.doc1)["title"], "Document 1")\n \n     def test_serialize_can_read_as_manager(self):\n-        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.portal.dxdoc.test_read_permission_field = "Test Read Permission"\n         self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.assertIn(\n@@ -62,7 +62,7 @@ def test_serialize_can_read_as_manager(self):\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n-        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.portal.dxdoc.test_read_permission_field = "Test Read Permission"\n         self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertNotIn(\n@@ -70,21 +70,21 @@ def test_serialize_cannot_read_as_member(self):\n         )\n \n     def test_serialize_returns_desciption(self):\n-        self.portal.doc1.description = u"This is a document"\n+        self.portal.doc1.description = "This is a document"\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)["description"], u"This is a document"\n+            self.serialize(self.portal.doc1)["description"], "This is a document"\n         )\n \n     def test_serialize_returns_rich_text(self):\n         self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum.", "text/plain", "text/html"\n+            "Lorem ipsum.", "text/plain", "text/html"\n         )\n         self.assertEqual(\n             self.serialize(self.portal.doc1).get("text"),\n             {\n-                u"data": u"<p>Lorem ipsum.</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum.</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n         )\n \n@@ -103,18 +103,18 @@ def test_serialize_returns_expires(self):\n     def test_serialize_on_folder_returns_items_attr(self):\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Document", id="doc1")\n-        self.portal.folder1.doc1.title = u"Document 1"\n-        self.portal.folder1.doc1.description = u"This is a document"\n+        self.portal.folder1.doc1.title = "Document 1"\n+        self.portal.folder1.doc1.description = "This is a document"\n         self.portal.folder1.doc1.reindexObject()\n         self.assertEqual(\n             self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"This is a document",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc1",\n+                    "@type": "Document",\n+                    "description": "This is a document",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 }\n             ],\n         )\n@@ -124,13 +124,13 @@ def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n     ):  # noqa\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Document", id="doc1")\n-        self.portal.folder1.doc1.title = u"Document 1"\n-        self.portal.folder1.doc1.description = u"This is a document"\n+        self.portal.folder1.doc1.title = "Document 1"\n+        self.portal.folder1.doc1.description = "This is a document"\n         self.portal.folder1.doc1.reindexObject()\n \n         self.portal.folder1.invokeFactory("Document", id="doc2")\n-        self.portal.folder1.doc2.title = u"Document 2"\n-        self.portal.folder1.doc2.description = u"Second doc"\n+        self.portal.folder1.doc2.title = "Document 2"\n+        self.portal.folder1.doc2.description = "Second doc"\n         self.portal.folder1.doc2.reindexObject()\n \n         # Change GOPIP (getObjectPositionInParent) based order\n@@ -140,18 +140,18 @@ def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n             self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc2",\n-                    u"@type": u"Document",\n-                    u"description": u"Second doc",\n-                    u"title": u"Document 2",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc2",\n+                    "@type": "Document",\n+                    "description": "Second doc",\n+                    "title": "Document 2",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"This is a document",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc1",\n+                    "@type": "Document",\n+                    "description": "This is a document",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n             ],\n         )\n@@ -193,7 +193,7 @@ def test_serialize_returns_site_root_type(self):\n             self.serialize(self.portal).get("@type"),\n             "The @type attribute should be present.",\n         )\n-        self.assertEqual(self.serialize(self.portal)["@type"], u"Plone Site")\n+        self.assertEqual(self.serialize(self.portal)["@type"], "Plone Site")\n \n     def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  # noqa\n         # Change GOPIP (getObjectPositionInParent) based order\n@@ -203,18 +203,18 @@ def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  #\n             self.serialize(self.portal)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/dxdoc",\n-                    u"@type": u"DXTestDocument",\n-                    u"description": u"",\n-                    u"title": u"DX Test Document",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/dxdoc",\n+                    "@type": "DXTestDocument",\n+                    "description": "",\n+                    "title": "DX Test Document",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": u"http://nohost/plone/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/doc1",\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n             ],\n         )\n@@ -226,17 +226,17 @@ def test_serialize_ignores_underscore_values(self):\n     def test_serialize_file(self):\n         self.portal.invokeFactory("File", id="file1", title="File 1")\n         self.portal.file1.file = NamedFile(\n-            data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            data="Spam and eggs", contentType="text/plain", filename="test.txt"\n         )\n \n         file_url = self.portal.file1.absolute_url()\n-        download_url = "{0}/@@download/file".format(file_url)\n+        download_url = f"{file_url}/@@download/file"\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"download": download_url,\n-                u"size": 13,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "download": download_url,\n+                "size": 13,\n             },\n             self.serialize(self.portal.file1).get("file"),\n         )\n@@ -248,11 +248,11 @@ def test_serialize_empty_file_returns_none(self):\n \n     def test_serialize_image(self):\n         self.portal.invokeFactory("Image", id="image1", title="Image 1")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n \n         self.maxDiff = 99999\n@@ -260,25 +260,25 @@ def test_serialize_image(self):\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n             obj_url = self.portal.image1.absolute_url()\n             scale_url_uuid = "uuid_1"\n-            download_url = u"{}/@@images/{}.png".format(obj_url, scale_url_uuid)\n+            download_url = f"{obj_url}/@@images/{scale_url_uuid}.png"\n             scales = {\n-                u"listing": {u"download": download_url, u"width": 16, u"height": 4},\n-                u"icon": {u"download": download_url, u"width": 32, u"height": 8},\n-                u"tile": {u"download": download_url, u"width": 64, u"height": 16},\n-                u"thumb": {u"download": download_url, u"width": 128, u"height": 33},\n-                u"mini": {u"download": download_url, u"width": 200, u"height": 52},\n-                u"preview": {u"download": download_url, u"width": 215, u"height": 56},\n-                u"large": {u"download": download_url, u"width": 215, u"height": 56},\n+                "listing": {"download": download_url, "width": 16, "height": 4},\n+                "icon": {"download": download_url, "width": 32, "height": 8},\n+                "tile": {"download": download_url, "width": 64, "height": 16},\n+                "thumb": {"download": download_url, "width": 128, "height": 33},\n+                "mini": {"download": download_url, "width": 200, "height": 52},\n+                "preview": {"download": download_url, "width": 215, "height": 56},\n+                "large": {"download": download_url, "width": 215, "height": 56},\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"image.png",\n-                    u"content-type": u"image/png",\n-                    u"size": 1185,\n-                    u"download": download_url,\n-                    u"width": 215,\n-                    u"height": 56,\n-                    u"scales": scales,\n+                    "filename": "image.png",\n+                    "content-type": "image/png",\n+                    "size": 1185,\n+                    "download": download_url,\n+                    "width": 215,\n+                    "height": 56,\n+                    "scales": scales,\n                 },\n                 self.serialize(self.portal.image1)["image"],\n             )\n@@ -290,7 +290,7 @@ def test_serialize_empty_image_returns_none(self):\n     def test_serialize_to_json_collection(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -303,26 +303,26 @@ def test_serialize_to_json_collection(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal.doc1.absolute_url(),\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": self.portal.doc1.absolute_url(),\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": self.portal.doc2.absolute_url(),\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 2",\n-                    u"review_state": u"private",\n+                    "@id": self.portal.doc2.absolute_url(),\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 2",\n+                    "review_state": "private",\n                 },\n             ],\n             self.serialize(self.portal.collection1).get("items"),\n@@ -331,7 +331,7 @@ def test_serialize_to_json_collection(self):\n     def test_serialize_to_json_collection_fullobjects(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -344,10 +344,10 @@ def test_serialize_to_json_collection_fullobjects(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n \n         items = self.serialize(self.portal.collection1, fullobjects=True).get("items")\n@@ -360,7 +360,7 @@ def test_serialize_to_json_collection_fullobjects(self):\n     def test_serialize_to_json_collection_include_items(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -373,10 +373,10 @@ def test_serialize_to_json_collection_include_items(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n \n         self.request.form["include_items"] = False\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 256e962b7..40df91559 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -22,15 +22,15 @@ def setUp(self):\n \n         # /plone/my-folder\n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", title=u"My Folder"\n+            self.portal, "Folder", title="My Folder"\n         )\n \n         # /plone/my-folder/my-document\n         self.doc = createContentInContainer(\n             self.folder,\n-            u"Document",\n+            "Document",\n             creation_date=DateTime(2015, 12, 31, 23, 45),\n-            title=u"My Document",\n+            title="My Document",\n         )\n \n         IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n@@ -70,31 +70,31 @@ def test_lazy_map_serialization_with_fullobjects(self):\n             {\n                 "@id": "http://nohost/plone/my-folder/my-document",\n                 "@type": "Document",\n-                u"changeNote": u"",\n-                u"contributors": [],\n-                u"creators": [u"test_user_1_"],\n-                u"description": u"",\n-                u"effective": None,\n-                u"exclude_from_nav": False,\n-                u"expires": None,\n-                "id": u"my-document",\n+                "changeNote": "",\n+                "contributors": [],\n+                "creators": ["test_user_1_"],\n+                "description": "",\n+                "effective": None,\n+                "exclude_from_nav": False,\n+                "expires": None,\n+                "id": "my-document",\n                 "is_folderish": False,\n-                u"language": u"",\n+                "language": "",\n                 "layout": "document_view",\n                 "parent": {\n-                    u"@id": u"http://nohost/plone/my-folder",\n-                    u"@type": u"Folder",\n-                    u"description": u"",\n-                    u"review_state": u"private",\n-                    u"title": u"My Folder",\n+                    "@id": "http://nohost/plone/my-folder",\n+                    "@type": "Folder",\n+                    "description": "",\n+                    "review_state": "private",\n+                    "title": "My Folder",\n                 },\n-                u"relatedItems": [],\n+                "relatedItems": [],\n                 "review_state": "private",\n-                u"rights": u"",\n-                u"subjects": [],\n-                u"table_of_contents": None,\n-                u"text": None,\n-                u"title": u"My Document",\n+                "rights": "",\n+                "subjects": [],\n+                "table_of_contents": None,\n+                "text": None,\n+                "title": "My Document",\n                 "version": "current",\n             },\n             result_item,\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex cfa690d37..821ae2d10 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -45,25 +45,25 @@ def test_False(self):\n         self.assertEqual("false", json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEqual(u"foo", json_compatible(u"foo"))\n-        self.assertIsInstance(json_compatible(u"foo"), six.text_type)\n+        self.assertEqual("foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), str)\n         self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEqual(u"Hall\\xf6chen", json_compatible(u"Hall\\xf6chen"))\n+        self.assertEqual("Hall\\xf6chen", json_compatible("Hall\\xf6chen"))\n         self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible(u"Hall\\xf6chen"))\n+            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\\xf6chen"))\n         )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u"foo", json_compatible("foo"))\n-        self.assertIsInstance(json_compatible("foo"), six.text_type)\n+        self.assertEqual("foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), str)\n         self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u"Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n+        self.assertEqual("Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n         self.assertEqual(\'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\xc3\xb6chen")))\n \n     def test_int(self):\n@@ -73,10 +73,7 @@ def test_int(self):\n \n     def test_long(self):\n         def _long(val):\n-            if six.PY2:\n-                return int(val)\n-            else:\n-                return int(val)\n+            return int(val)\n \n         self.assertEqual(_long(10), json_compatible(_long(10)))\n         self.assertIsInstance(json_compatible(_long(10)), int)\n@@ -92,7 +89,7 @@ def test_list(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(["foo"])))\n         self.assertIsInstance(\n             json_compatible(["foo"])[0],\n-            six.text_type,\n+            str,\n             "List values should be converted recursively.",\n         )\n \n@@ -102,7 +99,7 @@ def test_persistent_list(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(\n             json_compatible(value)[0],\n-            six.text_type,\n+            str,\n             "PersistentList values should be converted" " recursively.",\n         )\n \n@@ -113,7 +110,7 @@ def test_tuple(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(("foo",))))\n         self.assertIsInstance(\n             json_compatible(("foo",))[0],\n-            six.text_type,\n+            str,\n             "Tuple values should be converted recursively.",\n         )\n \n@@ -124,23 +121,23 @@ def test_frozenset(self):\n \n     def test_set(self):\n         self.assertEqual(\n-            [[1, 1], [2, 2]], sorted(json_compatible(set([(1, 1), (2, 2)])))\n+            [[1, 1], [2, 2]], sorted(json_compatible({(1, 1), (2, 2)}))\n         )\n \n     def test_dict(self):\n         self.assertEqual(\n-            {u"foo": True, u"bar": None, u"baz": 3},\n+            {"foo": True, "bar": None, "baz": 3},\n             json_compatible({"foo": True, "bar": None, "baz": 3}),\n         )\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible({"foo": "bar"})))\n         self.assertIsInstance(\n             json_compatible(list({"foo": "bar"})[0]),\n-            six.text_type,\n+            str,\n             "Dict keys should be converted recursively.",\n         )\n         self.assertIsInstance(\n             json_compatible(list({"foo": "bar"}.values())[0]),\n-            six.text_type,\n+            str,\n             "Dict values should be converted recursively.",\n         )\n \n@@ -150,41 +147,41 @@ def test_dict_empty(self):\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({"foo": "bar"})\n-        self.assertEqual({u"foo": u"bar"}, json_compatible(value))\n+        self.assertEqual({"foo": "bar"}, json_compatible(value))\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(\n             json_compatible(list(value)[0]),\n-            six.text_type,\n+            str,\n             "Dict keys should be converted recursively.",\n         )\n         self.assertIsInstance(\n             json_compatible(list(value.values())[0]),\n-            six.text_type,\n+            str,\n             "Dict values should be converted recursively.",\n         )\n \n     def test_python_datetime(self):\n         value = DateTime("2015/11/23 19:45:55.649027 GMT+3").asdatetime()\n-        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n+        self.assertEqual("2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n             \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_zope_DateTime(self):\n         value = DateTime("2015/11/23 19:45:55.649027 GMT+3")\n-        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n+        self.assertEqual("2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n             \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEqual(u"2015-11-23", json_compatible(value))\n+        self.assertEqual("2015-11-23", json_compatible(value))\n         self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEqual(u"19:45:55", json_compatible(value))\n+        self.assertEqual("19:45:55", json_compatible(value))\n         self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n@@ -217,8 +214,8 @@ def test_relation_value(self):\n \n     def test_i18n_message(self):\n         _ = MessageFactory("plone.restapi.tests")\n-        msg = _(u"message_id", default=u"default message")\n-        self.assertEqual(u"default message", json_compatible(msg))\n+        msg = _("message_id", default="default message")\n+        self.assertEqual("default message", json_compatible(msg))\n \n     def test_missing_value(self):\n         self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 65bedd4c9..c0ac04e98 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -48,7 +48,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual("ploneteam@plone.org", group.get("email"))\n         self.assertEqual("Plone Team", group.get("title"))\n         self.assertEqual("We are Plone", group.get("description"))\n-        self.assertEqual(set(group["users"]), set(["@id", "items_total", "items"]))\n+        self.assertEqual(set(group["users"]), {"@id", "items_total", "items"})\n \n     def test_summary(self):\n         group = self.serialize_summary(self.group)\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 332324bff..4810c5aab 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -29,10 +29,10 @@ def setUp(self):\n \n         self.doc1 = createContentInContainer(\n             self.portal,\n-            u"DXTestDocument",\n-            id=u"doc1",\n-            title=u"Lorem Ipsum",\n-            description=u"Description",\n+            "DXTestDocument",\n+            id="doc1",\n+            title="Lorem Ipsum",\n+            description="Description",\n         )\n \n         self.doc1.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n@@ -134,52 +134,52 @@ def test_brain_summary_includes_all_metadata_fields(self):\n         # mime_type was added in Plone 5.1\n         # Make sure tests pass on older Plone versions\n         if "mime_type" not in summary:\n-            summary["mime_type"] = u"text/plain"\n+            summary["mime_type"] = "text/plain"\n \n         self.maxDiff = None\n         self.assertLessEqual(\n             {\n-                "@id": u"http://nohost/plone/doc1",\n-                "@type": u"DXTestDocument",\n-                "CreationDate": u"2016-01-21T01:14:48+00:00",\n-                "Creator": u"test_user_1_",\n-                "Date": u"2017-01-21T01:14:48+00:00",\n-                "Description": u"Description",\n-                "EffectiveDate": u"None",\n-                "ExpirationDate": u"None",\n-                "ModificationDate": u"2017-01-21T01:14:48+00:00",\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "CreationDate": "2016-01-21T01:14:48+00:00",\n+                "Creator": "test_user_1_",\n+                "Date": "2017-01-21T01:14:48+00:00",\n+                "Description": "Description",\n+                "EffectiveDate": "None",\n+                "ExpirationDate": "None",\n+                "ModificationDate": "2017-01-21T01:14:48+00:00",\n                 "Subject": [],\n-                "Title": u"Lorem Ipsum",\n-                "Type": u"DX Test Document",\n-                "UID": u"c6dcbd55ab2746e199cd4ed458000001",\n+                "Title": "Lorem Ipsum",\n+                "Type": "DX Test Document",\n+                "UID": "c6dcbd55ab2746e199cd4ed458000001",\n                 "author_name": None,\n                 "cmf_uid": None,\n                 "commentators": [],\n-                "created": u"2016-01-21T01:14:48+00:00",\n-                "description": u"Description",\n-                "effective": u"1969-12-31T00:00:00+00:00",\n+                "created": "2016-01-21T01:14:48+00:00",\n+                "description": "Description",\n+                "effective": "1969-12-31T00:00:00+00:00",\n                 "end": None,\n                 "exclude_from_nav": False,\n-                "expires": u"2499-12-31T00:00:00+00:00",\n+                "expires": "2499-12-31T00:00:00+00:00",\n                 "getIcon": None,\n-                "getId": u"doc1",\n-                "getObjSize": u"0 KB",\n-                "getPath": u"/plone/doc1",\n+                "getId": "doc1",\n+                "getObjSize": "0 KB",\n+                "getPath": "/plone/doc1",\n                 "getRemoteUrl": None,\n-                "getURL": u"http://nohost/plone/doc1",\n-                "id": u"doc1",\n+                "getURL": "http://nohost/plone/doc1",\n+                "id": "doc1",\n                 "in_response_to": None,\n                 "is_folderish": False,\n                 "last_comment_date": None,\n-                "listCreators": [u"test_user_1_"],\n+                "listCreators": ["test_user_1_"],\n                 "location": None,\n-                "mime_type": u"text/plain",\n-                "modified": u"2017-01-21T01:14:48+00:00",\n-                "portal_type": u"DXTestDocument",\n-                "review_state": u"private",\n+                "mime_type": "text/plain",\n+                "modified": "2017-01-21T01:14:48+00:00",\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n                 "start": None,\n                 "sync_uid": None,\n-                "title": u"Lorem Ipsum",\n+                "title": "Lorem Ipsum",\n                 "total_comments": 0,\n             }.items(),\n             summary.items(),\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 24365cd03..6ef7c67d4 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,4 +1,4 @@\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -37,8 +37,8 @@ def tearDown(self):\n \n     def test_get_document(self):\n         self.portal.invokeFactory("Document", id="doc1", title="My Document")\n-        self.portal.doc1.description = u"This is a document"\n-        self.portal.doc1.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.portal.doc1.description = "This is a document"\n+        self.portal.doc1.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.doc1.absolute_url())\n@@ -69,22 +69,22 @@ def test_get_document(self):\n         self.assertEqual("This is a document", response.json().get("description"))\n         self.assertEqual(\n             {\n-                u"data": u"<p>Lorem ipsum</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n             response.json().get("text"),\n         )\n \n     def test_get_news_item(self):\n         self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.news1.image_caption = u"This is an image caption."\n+        self.portal.news1.image_caption = "This is an image caption."\n         transaction.commit()\n \n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -109,10 +109,10 @@ def test_get_news_item(self):\n             )\n             self.assertEqual("News Item 1", response.json().get("title"))\n             self.assertEqual(\n-                u"This is an image caption.", response.json()["image_caption"]\n+                "This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {"download": self.portal_url + u"/news1/@@images/uuid1.png"},  # noqa\n+                {"download": self.portal_url + "/news1/@@images/uuid1.png"},  # noqa\n                 response.json()["image"],\n             )\n \n@@ -171,12 +171,12 @@ def test_get_site_root_with_default_page(self):\n     def test_get_file(self):  # pragma: no cover\n         self.portal.invokeFactory("File", id="file1")\n         self.portal.file1.title = "File"\n-        self.portal.file1.description = u"A file"\n-        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        self.portal.file1.description = "A file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), "file.pdf")\n         with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n+            data=pdf_data, contentType="application/pdf", filename="file.pdf"\n         )\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file1)\n@@ -198,12 +198,12 @@ def test_get_file(self):  # pragma: no cover\n     def test_get_image(self):  # pragma: no cover\n         self.portal.invokeFactory("Image", id="img1")\n         self.portal.img1.title = "Image"\n-        self.portal.img1.description = u"An image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.img1.description = "An image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex 36b43ce42..de643e0f2 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -108,21 +108,21 @@ def test_actions_siteroot(self):\n         self.assertEqual(\n             response,\n             {\n-                u"category1": [\n-                    {u"title": u"Members only", u"id": u"member_action", u"icon": u""},\n+                "category1": [\n+                    {"title": "Members only", "id": "member_action", "icon": ""},\n                     {\n-                        u"title": u"Action with view permission",\n-                        u"id": u"view_action",\n-                        u"icon": u"",\n+                        "title": "Action with view permission",\n+                        "id": "view_action",\n+                        "icon": "",\n                     },\n                     {\n-                        u"title": u"Action with Manage Portal Content permission",\n-                        u"id": u"manage_action",\n-                        u"icon": u"",\n+                        "title": "Action with Manage Portal Content permission",\n+                        "id": "manage_action",\n+                        "icon": "",\n                     },\n                 ],\n-                u"category2": [],\n-                u"category3": [],\n+                "category2": [],\n+                "category3": [],\n             },\n         )\n \n@@ -134,15 +134,15 @@ def test_actions_siteroot_anon(self):\n         self.assertEqual(\n             response,\n             {\n-                u"category1": [\n+                "category1": [\n                     {\n-                        u"title": u"Action with view permission",\n-                        u"id": u"view_action",\n-                        u"icon": u"",\n+                        "title": "Action with view permission",\n+                        "id": "view_action",\n+                        "icon": "",\n                     }\n                 ],\n-                u"category2": [],\n-                u"category3": [],\n+                "category2": [],\n+                "category3": [],\n             },\n         )\n \n@@ -156,9 +156,9 @@ def test_actions_on_content_object(self):\n         response = self.api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u"id"] for action in response["object"]]\n-        self.assertTrue(u"view" in object_action_ids)\n-        self.assertTrue(u"edit" in object_action_ids)\n+        object_action_ids = [action["id"] for action in response["object"]]\n+        self.assertTrue("view" in object_action_ids)\n+        self.assertTrue("edit" in object_action_ids)\n \n     def test_actions_on_content_object_anon(self):\n         self.portal.invokeFactory("Document", id="doc1", title="My Document")\n@@ -171,6 +171,6 @@ def test_actions_on_content_object_anon(self):\n         response = self.anon_api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u"id"] for action in response["object"]]\n-        self.assertTrue(u"view" in object_action_ids)\n-        self.assertTrue(u"edit" not in object_action_ids)\n+        object_action_ids = [action["id"] for action in response["object"]]\n+        self.assertTrue("view" in object_action_ids)\n+        self.assertTrue("edit" not in object_action_ids)\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex a819797af..962849ee2 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -34,10 +34,10 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.folder, "Document", id="doc1", title="A document"\n         )\n         transaction.commit()\n \n@@ -51,16 +51,16 @@ def test_breadcrumbs(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/folder/doc1/@breadcrumbs",\n+                "@id": self.portal_url + "/folder/doc1/@breadcrumbs",\n                 "root": self.portal_url,\n                 "items": [\n                     {\n-                        u"@id": self.portal_url + u"/folder",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/folder",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder/doc1",\n-                        u"title": u"A document",\n+                        "@id": self.portal_url + "/folder/doc1",\n+                        "title": "A document",\n                     },\n                 ],\n             },\n@@ -86,17 +86,17 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         self.folder = createContentInContainer(\n-            self.portal["es"], u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal["es"], "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.folder, "Document", id="doc1", title="A document"\n         )\n         transaction.commit()\n \n@@ -110,16 +110,16 @@ def test_breadcrumbs_multilingual(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/es/folder/doc1/@breadcrumbs",\n+                "@id": self.portal_url + "/es/folder/doc1/@breadcrumbs",\n                 "root": self.portal_url + "/es",\n                 "items": [\n                     {\n-                        u"@id": self.portal_url + u"/es/folder",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/es/folder",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/es/folder/doc1",\n-                        u"title": u"A document",\n+                        "@id": self.portal_url + "/es/folder/doc1",\n+                        "title": "A document",\n                     },\n                 ],\n             },\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex e11895aa2..dbdffc0c0 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -57,15 +57,15 @@ def tearDown(self):\n         self.user_session.close()\n \n     def test_list_datastructure(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         response = self.api_session.get(url)\n \n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertEqual(set(["items_total", "items", "@id"]), set(data))\n+        self.assertEqual({"items_total", "items", "@id"}, set(data))\n \n     def test_list_batching(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         self.api_session.post(url, json={"text": "comment 1"})\n         self.api_session.post(url, json={"text": "comment 2"})\n@@ -76,7 +76,7 @@ def test_list_batching(self):\n         self.assertIn("batching", data)\n \n     def test_add_comment_to_root(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.get(url)\n         self.assertEqual(0, response.json()["items_total"])\n@@ -92,7 +92,7 @@ def test_add_comment_to_root(self):\n         self.assertIsNone(data["items"][0]["@parent"])\n \n     def test_add_comment_to_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n@@ -113,7 +113,7 @@ def test_add_comment_to_comment(self):\n         self.assertEqual(parent_id, sub["in_reply_to"])\n \n     def test_update(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         OLD_TEXT = "comment 1"\n         NEW_TEXT = "new text"\n \n@@ -138,7 +138,7 @@ def test_update(self):\n         self.assertNotIn(OLD_TEXT, item_texts)\n \n     def test_permissions_delete_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n@@ -160,7 +160,7 @@ def test_permissions_delete_comment(self):\n         self.assertEqual(204, response.status_code)\n \n     def test_permissions_update_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_services_contextnavigation.py b/src/plone/restapi/tests/test_services_contextnavigation.py\nindex 90e8658c1..33103baf9 100644\n--- a/src/plone/restapi/tests/test_services_contextnavigation.py\n+++ b/src/plone/restapi/tests/test_services_contextnavigation.py\n@@ -291,7 +291,7 @@ def testHeadingLinkRooted(self):\n         }\n         qs = urlencode(q)\n \n-        response = self.api_session.get("/folder2/@contextnavigation?{}".format(qs))\n+        response = self.api_session.get(f"/folder2/@contextnavigation?{qs}")\n         self.assertEqual(response.status_code, 200)\n         res = response.json()\n         base = self.portal.absolute_url()\n@@ -561,7 +561,7 @@ def testTopLevelWithNavigationRoot(self):\n             self.portal.folder2.folder21,\n             opts(\n                 topLevel=1,\n-                root_path=u"/folder2"\n+                root_path="/folder2"\n                 # self.portal.folder2.UID()\n             ),\n         )\n@@ -584,11 +584,11 @@ def testMultipleTopLevelWithNavigationRoot(self):\n \n         view1 = self.renderer(\n             self.portal.abc,\n-            opts(topLevel=0, root_path=u"/abc"),\n+            opts(topLevel=0, root_path="/abc"),\n         )\n         view2 = self.renderer(\n             self.portal.abc,\n-            opts(topLevel=0, root_path=u"/abcde"),\n+            opts(topLevel=0, root_path="/abcde"),\n         )\n \n         tree1 = view1.getNavTree()\n@@ -598,12 +598,12 @@ def testMultipleTopLevelWithNavigationRoot(self):\n \n         view1 = self.renderer(\n             self.portal.abcde,\n-            opts(topLevel=0, root_path=u"/abc"),\n+            opts(topLevel=0, root_path="/abc"),\n         )\n \n         view2 = self.renderer(\n             self.portal.abcde,\n-            opts(topLevel=0, root_path=u"/abcde"),\n+            opts(topLevel=0, root_path="/abcde"),\n         )\n \n         tree1 = view1.getNavTree()\n@@ -697,7 +697,7 @@ def testNavRootWithUnicodeNavigationRoot(self):\n             self.portal.folder2.folder21,\n             opts(\n                 topLevel=1,\n-                root_path=u"/folder2",\n+                root_path="/folder2",\n             ),\n         )\n         tree = view.getNavTree()\n@@ -707,7 +707,7 @@ def testNoRootSet(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"", topLevel=0),\n+            opts(root_path="", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -717,7 +717,7 @@ def testRootIsNotPortal(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"/folder2", topLevel=0),\n+            opts(root_path="/folder2", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -726,7 +726,7 @@ def testRootIsNotPortal(self):\n     def testRootDoesNotExist(self):\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"DOESNT_EXIST", topLevel=0),\n+            opts(root_path="DOESNT_EXIST", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -740,7 +740,7 @@ def testAboveRoot(self):\n             return  # skip test in Plone 4\n \n         registry = getUtility(IRegistry)\n-        registry["plone.root"] = u"/folder2"\n+        registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal, opts(topLevel=0))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -750,7 +750,7 @@ def testOutsideRoot(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder1,\n-            opts(root_path=u"/folder2", topLevel=0),\n+            opts(root_path="/folder2", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -848,7 +848,7 @@ def testPrunedRootNode(self):\n \n         # This test has been changed to conform to reality\n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         view = self.renderer(self.portal.folder1, opts(topLevel=0))\n         tree = view.getNavTree()\n@@ -862,7 +862,7 @@ def testPrunedRootNodeShowsAllParents(self):\n             return  # skip test in Plone 4\n \n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         view = self.renderer(self.portal.folder1.doc11, opts(topLevel=1))\n         tree = view.getNavTree()\n@@ -938,7 +938,7 @@ def testINavigationRootWithRelativeRootSet(self):\n         # make a navigation portlet with navigation root set\n         view = self.renderer(\n             self.portal.folder1.folder1_1,\n-            opts(bottomLevel=0, topLevel=0, root_path=u"/folder1/folder1_1"),\n+            opts(bottomLevel=0, topLevel=0, root_path="/folder1/folder1_1"),\n         )\n         tree = view(expand=True)["contextnavigation"]\n \n@@ -959,7 +959,7 @@ def testINavigationRootWithRelativeRootSet(self):\n     def testServiceId(self):\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"", topLevel=0),\n+            opts(root_path="", topLevel=0),\n         )\n         portlet = view(expand=True)\n \ndiff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nindex 95c2abd5d..30aba77c2 100644\n--- a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -52,7 +52,7 @@ def test_controlpanels_dexterity_types_document_get(self):\n         response = self.api_session.get("/@controlpanels/dexterity-types/Document")\n         self.assertEqual(200, response.status_code)\n         self.assertEqual(\n-            "{}/@controlpanels/dexterity-types/Document".format(self.portal_url),\n+            f"{self.portal_url}/@controlpanels/dexterity-types/Document",\n             response.json().get("@id"),\n         )\n         self.assertEqual("Page", response.json().get("title"))\ndiff --git a/src/plone/restapi/tests/test_services_database.py b/src/plone/restapi/tests/test_services_database.py\nindex e04d2b9f6..eab79a8f7 100644\n--- a/src/plone/restapi/tests/test_services_database.py\n+++ b/src/plone/restapi/tests/test_services_database.py\n@@ -32,7 +32,7 @@ def test_get_system(self):\n         self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n-        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@database")\n+        self.assertEqual(results["@id"], self.portal.absolute_url() + "/@database")\n         self.assertTrue("cache_length" in results.keys())\n         self.assertTrue("cache_length_bytes" in results.keys())\n         self.assertTrue("cache_detail_length" in results.keys())\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 607c8dc2d..6a27dd950 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -37,7 +37,7 @@ def setUp(self):\n \n         registry = getUtility(IRegistry)\n         registry["plone.email_from_address"] = "info@plone.org"\n-        registry["plone.email_from_name"] = u"Plone test site"\n+        registry["plone.email_from_name"] = "Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 7680102be..d3039f9d1 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -35,7 +35,7 @@ def setUp(self):\n \n         registry = getUtility(IRegistry)\n         registry["plone.email_from_address"] = "info@plone.org"\n-        registry["plone.email_from_name"] = u"Plone test site"\n+        registry["plone.email_from_name"] = "Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex d392b43be..d7108ed19 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -91,7 +91,7 @@ def test_add_group(self):\n         fwt = self.gtool.getGroupById("fwt")\n         self.assertEqual("fwt@plone.org", fwt.getProperty("email"))\n         self.assertTrue(\n-            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(set(fwt.getGroupMemberIds())),\n+            {SITE_OWNER_NAME, TEST_USER_ID}.issubset(set(fwt.getGroupMemberIds())),\n             "Userids not found in group",\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex d5a4e1be6..cb08d48f9 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -36,7 +36,7 @@ def setUp(self):\n \n         api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         transaction.commit()\n \n@@ -50,7 +50,7 @@ def test_get_types(self):\n \n         types = [item["type"] for item in data]\n \n-        self.assertEqual(set(["versioning", "workflow"]), set(types))\n+        self.assertEqual({"versioning", "workflow"}, set(types))\n \n     def test_get_datastructure(self):\n         response = self.api_session.get(self.endpoint_url)\n@@ -78,22 +78,22 @@ def test_get_datastructure(self):\n             self.assertIsNotNone(item["action"])\n \n     def test_revert(self):\n-        url = "{}/@history".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@history"\n         response = self.api_session.patch(url, json={"version": 0})\n         self.assertEqual(response.status_code, 200)\n \n         # My Document is the old title\n         self.assertEqual(\n             response.json(),\n-            {u"message": u"My Document has been reverted to revision 0."},\n+            {"message": "My Document has been reverted to revision 0."},\n         )\n \n     def test_time_field(self):\n-        url = "{}/@history".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@history"\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item["time"], six.string_types))\n+            self.assertTrue(isinstance(item["time"], str))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -136,7 +136,7 @@ def _disable_auto_versioning(self, content_type):\n         types.remove(content_type)\n         portal_repository.setVersionableContentTypes(types)\n         portal_repository.removePolicyFromContentType(\n-            content_type, u"version_on_revert"\n+            content_type, "version_on_revert"\n         )\n \n     def setUp(self):\n@@ -154,7 +154,7 @@ def setUp(self):\n         )\n         self.doc = self.portal.doc_with_empty_history\n         api.content.transition(self.doc, "publish")\n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\n@@ -194,7 +194,7 @@ def setUp(self):\n \n         api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         transaction.commit()\n \n@@ -205,16 +205,16 @@ def test_actions_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Crear", first_action["action"])\n+        self.assertEqual("Crear", first_action["action"])\n \n     def test_state_titles_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Privado", first_action["state_title"])\n+        self.assertEqual("Privado", first_action["state_title"])\n \n     def test_transition_titles_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Crear", first_action["transition_title"])\n+        self.assertEqual("Crear", first_action["transition_title"])\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 2de932a4f..925702e66 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -33,31 +33,31 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         self.folder2 = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         self.subfolder1 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            self.folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         self.subfolder2 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            self.folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         self.thirdlevelfolder = createContentInContainer(\n             self.subfolder1,\n-            u"Folder",\n-            id=u"thirdlevelfolder",\n-            title=u"Third Level Folder",\n+            "Folder",\n+            id="thirdlevelfolder",\n+            title="Third Level Folder",\n         )\n         self.fourthlevelfolder = createContentInContainer(\n             self.thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n         createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.folder, "Document", id="doc1", title="A document"\n         )\n         transaction.commit()\n \n@@ -75,28 +75,28 @@ def test_navigation_with_no_params_gets_only_top_level(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/folder/@navigation",\n+                "@id": self.portal_url + "/folder/@navigation",\n                 "items": [\n                     {\n-                        u"@id": self.portal_url,\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": None,\n-                        u"title": u"Home",\n+                        "@id": self.portal_url,\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": None,\n+                        "title": "Home",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder",\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": "private",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/folder",\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": "private",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder2",\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": "private",\n-                        u"title": u"Some Folder 2",\n+                        "@id": self.portal_url + "/folder2",\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": "private",\n+                        "title": "Some Folder 2",\n                     },\n                 ],\n             },\n@@ -109,7 +109,7 @@ def test_navigation_service(self):\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()["items"]), 3)\n-        self.assertEqual(response.json()["items"][1]["title"], u"Some Folder")\n+        self.assertEqual(response.json()["items"][1]["title"], "Some Folder")\n         self.assertEqual(len(response.json()["items"][1]["items"]), 3)\n         self.assertEqual(len(response.json()["items"][2]["items"]), 0)\n \n@@ -120,7 +120,7 @@ def test_navigation_service(self):\n         self.assertEqual(len(response.json()["items"][1]["items"][0]["items"]), 1)\n         self.assertEqual(\n             response.json()["items"][1]["items"][0]["items"][0]["title"],\n-            u"Third Level Folder",\n+            "Third Level Folder",\n         )\n         self.assertEqual(\n             len(response.json()["items"][1]["items"][0]["items"][0]["items"]),\n@@ -139,21 +139,21 @@ def test_navigation_service(self):\n             response.json()["items"][1]["items"][0]["items"][0]["items"][0][\n                 "title"\n             ],  # noqa\n-            u"Fourth Level Folder",\n+            "Fourth Level Folder",\n         )\n \n     def test_dont_broke_with_contents_without_review_state(self):\n         createContentInContainer(\n             self.portal,\n-            u"File",\n-            id=u"example-file",\n-            title=u"Example file",\n+            "File",\n+            id="example-file",\n+            title="Example file",\n         )\n         createContentInContainer(\n             self.folder,\n-            u"File",\n-            id=u"example-file-1",\n-            title=u"Example file 1",\n+            "File",\n+            id="example-file-1",\n+            title="Example file 1",\n         )\n         transaction.commit()\n \n@@ -168,15 +168,15 @@ def test_dont_broke_with_contents_without_review_state(self):\n     def test_navigation_sorting(self):\n         createContentInContainer(\n             self.portal,\n-            u"File",\n-            id=u"example-file",\n-            title=u"Example file",\n+            "File",\n+            id="example-file",\n+            title="Example file",\n         )\n         createContentInContainer(\n             self.folder,\n-            u"File",\n-            id=u"example-file-1",\n-            title=u"Example file 1",\n+            "File",\n+            id="example-file-1",\n+            title="Example file 1",\n         )\n         transaction.commit()\n         response = self.api_session.get(\ndiff --git a/src/plone/restapi/tests/test_services_querysources.py b/src/plone/restapi/tests/test_services_querysources.py\nindex ec7d51316..7d7f8ebf9 100644\n--- a/src/plone/restapi/tests/test_services_querysources.py\n+++ b/src/plone/restapi/tests/test_services_querysources.py\n@@ -30,7 +30,7 @@ def setUp(self):\n             container=self.portal,\n             id="testdoc",\n             type="DXTestDocument",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         transaction.commit()\n \n@@ -45,10 +45,10 @@ def test_get_querysource_xxx(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@querysources/test_choice_with_querysource?query=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@querysources/test_choice_with_querysource?query=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -63,20 +63,20 @@ def test_get_querysource_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@querysources/test_choice_with_querysource?query=token",  # noqa\n-                u"batching": {\n-                    u"@id": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?query=token&b_size=1",  # noqa\n-                    u"first": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=0&query=token&b_size=1",  # noqa\n-                    u"last": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=2&query=token&b_size=1",  # noqa\n-                    u"next": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=1&query=token&b_size=1",  # noqa\n+                "@id": self.doc.absolute_url()\n+                + "/@querysources/test_choice_with_querysource?query=token",  # noqa\n+                "batching": {\n+                    "@id": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?query=token&b_size=1",  # noqa\n+                    "first": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=0&query=token&b_size=1",  # noqa\n+                    "last": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=2&query=token&b_size=1",  # noqa\n+                    "next": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=1&query=token&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 3,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 3,\n             },\n         )\n \n@@ -91,9 +91,9 @@ def test_querysource_cant_be_enumerated(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Bad Request",\n-                u"message": u"Enumerating querysources is not supported. "\n-                u"Please search the source using the ?query= QS parameter",\n+                "type": "Bad Request",\n+                "message": "Enumerating querysources is not supported. "\n+                "Please search the source using the ?query= QS parameter",\n             },\n         )\n \n@@ -107,9 +107,9 @@ def test_get_querysource_for_unknown_field(self):\n         self.assertEqual(\n             response,\n             {\n-                u"error": {\n-                    u"type": u"Not Found",\n-                    u"message": u"No such field: \'unknown_field\'",\n+                "error": {\n+                    "type": "Not Found",\n+                    "message": "No such field: \'unknown_field\'",\n                 }\n             },\n         )\n@@ -127,10 +127,10 @@ def test_context_querysource_xxx(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@querysources/test_choice_with_context_querysource?query=foo",  # noqa\n-                u"items": [{u"token": u"foo", u"title": u"Foo"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/testdoc/@querysources/test_choice_with_context_querysource?query=foo",  # noqa\n+                "items": [{"token": "foo", "title": "Foo"}],\n+                "items_total": 1,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_querystring.py b/src/plone/restapi/tests/test_services_querystring.py\nindex 9bd9145a3..3135438e1 100644\n--- a/src/plone/restapi/tests/test_services_querystring.py\n+++ b/src/plone/restapi/tests/test_services_querystring.py\n@@ -47,22 +47,22 @@ def test_endpoint_shows_field_config(self):\n         idx = indexes["Title"]\n \n         expected_field_config = {\n-            u"description": u"Text search of an item\'s title",\n-            u"enabled": True,\n-            u"group": u"Text",\n-            u"operations": [u"plone.app.querystring.operation.string.contains"],\n-            u"operators": {\n-                u"plone.app.querystring.operation.string.contains": {\n-                    u"description": None,\n-                    u"operation": u"plone.app.querystring.queryparser._contains",\n-                    u"title": u"Contains",\n-                    u"widget": u"StringWidget",\n+            "description": "Text search of an item\'s title",\n+            "enabled": True,\n+            "group": "Text",\n+            "operations": ["plone.app.querystring.operation.string.contains"],\n+            "operators": {\n+                "plone.app.querystring.operation.string.contains": {\n+                    "description": None,\n+                    "operation": "plone.app.querystring.queryparser._contains",\n+                    "title": "Contains",\n+                    "widget": "StringWidget",\n                 }\n             },\n-            u"sortable": False,\n-            u"title": u"Title",\n-            u"values": {},\n-            u"vocabulary": None,\n+            "sortable": False,\n+            "title": "Title",\n+            "values": {},\n+            "vocabulary": None,\n         }\n         self.assertEqual(expected_field_config, idx)\n \n@@ -75,22 +75,22 @@ def test_endpoint_inlines_vocabularies(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Review state",\n-                "vocabulary": u"plone.app.vocabularies.WorkflowStates",\n+                "title": "Review state",\n+                "vocabulary": "plone.app.vocabularies.WorkflowStates",\n             },\n             idx,\n         )\n \n         expected_vocab_values = {\n-            u"external": {u"title": u"Externally visible [external]"},\n-            u"internal": {u"title": u"Internal draft [internal]"},\n-            u"internally_published": {\n-                u"title": u"Internally published [internally_published]"\n+            "external": {"title": "Externally visible [external]"},\n+            "internal": {"title": "Internal draft [internal]"},\n+            "internally_published": {\n+                "title": "Internally published [internally_published]"\n             },\n-            u"pending": {u"title": u"Pending [pending]"},\n-            u"private": {u"title": u"Private [private]"},\n-            u"published": {u"title": u"Published with accent \\xe9 [published]"},\n-            u"visible": {u"title": u"Public draft [visible]"},\n+            "pending": {"title": "Pending [pending]"},\n+            "private": {"title": "Private [private]"},\n+            "published": {"title": "Published with accent \\xe9 [published]"},\n+            "visible": {"title": "Public draft [visible]"},\n         }\n         self.assertTrue(\n             all(elem in idx["values"].items() for elem in expected_vocab_values.items())\n@@ -105,27 +105,27 @@ def test_endpoint_inlines_operators(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Default Page",\n+                "title": "Default Page",\n                 "operations": [\n-                    u"plone.app.querystring.operation.boolean.isTrue",\n-                    u"plone.app.querystring.operation.boolean.isFalse",\n+                    "plone.app.querystring.operation.boolean.isTrue",\n+                    "plone.app.querystring.operation.boolean.isFalse",\n                 ],\n             },\n             idx,\n         )\n \n         expected_operators = {\n-            u"plone.app.querystring.operation.boolean.isFalse": {\n-                u"description": None,\n-                u"operation": u"plone.app.querystring.queryparser._isFalse",\n-                u"title": u"No",\n-                u"widget": None,\n+            "plone.app.querystring.operation.boolean.isFalse": {\n+                "description": None,\n+                "operation": "plone.app.querystring.queryparser._isFalse",\n+                "title": "No",\n+                "widget": None,\n             },\n-            u"plone.app.querystring.operation.boolean.isTrue": {\n-                u"description": None,\n-                u"operation": u"plone.app.querystring.queryparser._isTrue",\n-                u"title": u"Yes",\n-                u"widget": None,\n+            "plone.app.querystring.operation.boolean.isTrue": {\n+                "description": None,\n+                "operation": "plone.app.querystring.queryparser._isTrue",\n+                "title": "Yes",\n+                "widget": None,\n             },\n         }\n         self.assertEqual(expected_operators, idx["operators"])\n@@ -139,7 +139,7 @@ def test_endpoint_includes_widgets_for_operators(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Order in folder",\n+                "title": "Order in folder",\n                 "operations": [\n                     "plone.app.querystring.operation.int.is",\n                     "plone.app.querystring.operation.int.lessThan",\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex 6cbe97a33..c2468f70e 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -112,7 +112,7 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 4")\n+        self.assertEqual(response.json()["items"][4]["title"], "Test Document 4")\n \n         response = self.api_session.post(\n             "/@querystring-search",\n@@ -135,7 +135,7 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 9")\n+        self.assertEqual(response.json()["items"][4]["title"], "Test Document 9")\n \n     @unittest.skipIf(\n         not SUPPORT_NOT_UUID_QUERIES,\n@@ -164,7 +164,7 @@ def test_querystringsearch_do_not_return_context(self):\n         self.assertEqual(response.json()["items_total"], 1)\n         self.assertEqual(\n             response.json()["items"][0]["@id"],\n-            "{}/testdocument2".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument2",\n         )\n \n     def test_querystringsearch_sort(self):\n@@ -255,9 +255,9 @@ def test_querystringsearch_sort(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(\n             response.json()["items"][0]["@id"],\n-            "{}/testdocument".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument",\n         )\n         self.assertEqual(\n             response.json()["items"][-1]["@id"],\n-            "{}/testdocument9".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument9",\n         )\ndiff --git a/src/plone/restapi/tests/test_services_sources.py b/src/plone/restapi/tests/test_services_sources.py\nindex 39b1192cc..2a55e2058 100644\n--- a/src/plone/restapi/tests/test_services_sources.py\n+++ b/src/plone/restapi/tests/test_services_sources.py\n@@ -30,7 +30,7 @@ def setUp(self):\n             container=self.portal,\n             id="testdoc",\n             type="DXTestDocument",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         transaction.commit()\n \n@@ -44,14 +44,14 @@ def test_get_source(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source",  # noqa\n-                u"items": [\n-                    {u"title": u"Title 1", u"token": u"token1"},\n-                    {u"title": u"Title 2", u"token": u"token2"},\n-                    {u"title": u"Title 3", u"token": u"token3"},\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source",  # noqa\n+                "items": [\n+                    {"title": "Title 1", "token": "token1"},\n+                    {"title": "Title 2", "token": "token2"},\n+                    {"title": "Title 3", "token": "token3"},\n                 ],\n-                u"items_total": 3,\n+                "items_total": 3,\n             },\n         )\n \n@@ -65,20 +65,20 @@ def test_get_source_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source",  # noqa\n-                u"batching": {\n-                    u"@id": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_size=1",  # noqa\n-                    u"first": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=0&b_size=1",  # noqa\n-                    u"last": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=2&b_size=1",  # noqa\n-                    u"next": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=1&b_size=1",  # noqa\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source",  # noqa\n+                "batching": {\n+                    "@id": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_size=1",  # noqa\n+                    "first": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=0&b_size=1",  # noqa\n+                    "last": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=2&b_size=1",  # noqa\n+                    "next": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=1&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 3,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 3,\n             },\n         )\n \n@@ -92,10 +92,10 @@ def test_get_source_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?title=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?title=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -109,10 +109,10 @@ def test_get_source_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?token=token1",  # noqa\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?token=token1",  # noqa\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -126,10 +126,10 @@ def test_get_source_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?token=token",  # noqa\n-                u"items": [],\n-                u"items_total": 0,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?token=token",  # noqa\n+                "items": [],\n+                "items_total": 0,\n             },\n         )\n \n@@ -144,8 +144,8 @@ def test_get_source_filtered_by_title_and_token_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Invalid parameters",\n-                u"message": u"You can not filter by title and token at the same time.",  # noqa\n+                "type": "Invalid parameters",\n+                "message": "You can not filter by title and token at the same time.",  # noqa\n             },\n         )\n \n@@ -159,8 +159,8 @@ def test_get_non_iterable_source_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Bad Request",\n-                u"message": "Source for field \'test_choice_with_non_iterable_source\' is not iterable. ",\n+                "type": "Bad Request",\n+                "message": "Source for field \'test_choice_with_non_iterable_source\' is not iterable. ",\n             },\n         )\n \n@@ -174,11 +174,11 @@ def test_get_source_for_unknown_field(self):\n \n         self.assertEqual(\n             response.get("error"),\n-            {u"type": u"Not Found", u"message": u"No such field: \'unknown_field\'"},\n+            {"type": "Not Found", "message": "No such field: \'unknown_field\'"},\n         )\n \n     def test_context_source(self):\n-        self.doc.title = u"Foo Bar Baz"\n+        self.doc.title = "Foo Bar Baz"\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -189,19 +189,19 @@ def test_context_source(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@sources/test_choice_with_context_source",  # noqa\n-                u"items": [\n-                    {u"token": u"foo", u"title": u"Foo"},\n-                    {u"token": u"bar", u"title": u"Bar"},\n-                    {u"token": u"baz", u"title": u"Baz"},\n+                "@id": self.portal_url\n+                + "/testdoc/@sources/test_choice_with_context_source",  # noqa\n+                "items": [\n+                    {"token": "foo", "title": "Foo"},\n+                    {"token": "bar", "title": "Bar"},\n+                    {"token": "baz", "title": "Baz"},\n                 ],\n-                u"items_total": 3,\n+                "items_total": 3,\n             },\n         )\n \n     def test_source_filtered_by_non_ascii_title(self):\n-        self.doc.title = u"B\xc3\xa4r"\n+        self.doc.title = "B\xc3\xa4r"\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -213,10 +213,10 @@ def test_source_filtered_by_non_ascii_title(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@sources/test_choice_with_context_source?title=b%C3%A4r",  # noqa\n-                u"items": [{u"token": u"b=C3=A4r", u"title": u"B\\xe4r"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/testdoc/@sources/test_choice_with_context_source?title=b%C3%A4r",  # noqa\n+                "items": [{"token": "b=C3=A4r", "title": "B\\xe4r"}],\n+                "items_total": 1,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex d9b334fd0..bd3777108 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -20,7 +20,7 @@\n \n \n class ISampleTile(Interface):\n-    title = zope.schema.TextLine(title=u"Title", required=False)\n+    title = zope.schema.TextLine(title="Title", required=False)\n \n \n class SampleTile(Tile):\n@@ -51,22 +51,22 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \n         sampleTileType = TileType(\n-            u"sample.tile",\n-            u"Sample tile",\n+            "sample.tile",\n+            "Sample tile",\n             "cmf.ModifyPortalContent",\n             "zope.Public",\n-            description=u"A tile used for testing",\n+            description="A tile used for testing",\n             schema=ISampleTile,\n             icon="testicon",\n         )\n-        provideUtility(sampleTileType, name=u"sample.tile")\n+        provideUtility(sampleTileType, name="sample.tile")\n         provideAdapter(\n-            SampleTile, (Interface, Interface), IBasicTile, name=u"sample.tile"\n+            SampleTile, (Interface, Interface), IBasicTile, name="sample.tile"\n         )\n \n     def tearDown(self):\n@@ -78,9 +78,9 @@ def test_get_available_tiles(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(len(response), 1)\n-        self.assertEqual(response[0]["@id"], self.portal_url + u"/@tiles/sample.tile")\n-        self.assertEqual(response[0]["title"], u"Sample tile")\n-        self.assertEqual(response[0]["description"], u"A tile used for testing")\n+        self.assertEqual(response[0]["@id"], self.portal_url + "/@tiles/sample.tile")\n+        self.assertEqual(response[0]["title"], "Sample tile")\n+        self.assertEqual(response[0]["description"], "A tile used for testing")\n         self.assertEqual(response[0]["icon"], "testicon")\n \n     def test_get_tile(self):\n@@ -88,6 +88,6 @@ def test_get_tile(self):\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual(response["title"], u"Sample tile")\n-        self.assertEqual(response["properties"]["title"]["title"], u"Title")\n-        self.assertEqual(response["properties"]["title"]["type"], u"string")\n+        self.assertEqual(response["title"], "Sample tile")\n+        self.assertEqual(response["properties"]["title"]["title"], "Title")\n+        self.assertEqual(response["properties"]["title"]["type"], "string")\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 0b8575eea..81e01f3a9 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -67,7 +67,7 @@ def tearDown(self):\n \n     def test_get_types(self):\n         response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types"\n         )  # noqa\n \n         self.assertEqual(response.status_code, 200)\n@@ -83,7 +83,7 @@ def test_get_types(self):\n \n     def test_get_types_document(self):\n         response = self.api_session.get(\n-            "{}/@types/Document".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types/Document"\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -450,7 +450,7 @@ def test_types_document_remove_fieldset(self):\n \n     def test_get_types_with_unknown_type(self):\n         response = self.api_session.get(\n-            "{}/@types/UnknownType".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types/UnknownType"\n         )\n \n         self.assertEqual(response.status_code, 404)\n@@ -465,13 +465,13 @@ def test_get_types_with_unknown_type(self):\n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n         response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types"\n         )  # noqa\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n         response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types"\n         )  # noqa\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n@@ -510,14 +510,14 @@ def test_addable_types_for_non_manager_user(self):\n         )\n \n         folder = api.content.create(\n-            container=self.portal, id="folder", type="Folder", title=u"folder"\n+            container=self.portal, id="folder", type="Folder", title="folder"\n         )\n \n         folder_cant_add = api.content.create(\n             container=self.portal,\n             id="folder_cant_add",\n             type="Folder",\n-            title=u"folder_cant_add",\n+            title="folder_cant_add",\n         )\n \n         api.user.grant_roles(user=user, obj=folder, roles=["Contributor"])\n@@ -570,22 +570,22 @@ def tearDown(self):\n \n     def test_get_types_translated(self):\n         response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types"\n         )  # noqa\n \n         self.assertEqual(response.status_code, 200)\n \n         self.assertEqual(\n             {\n-                u"Archivo",\n-                u"Carpeta",\n-                u"Colecci\xc3\xb3n",\n-                u"DX Test Document",\n-                u"Enlace",\n-                u"Evento",\n-                u"Imagen",\n-                u"Noticia",\n-                u"P\xc3\xa1gina",\n+                "Archivo",\n+                "Carpeta",\n+                "Colecci\xc3\xb3n",\n+                "DX Test Document",\n+                "Enlace",\n+                "Evento",\n+                "Imagen",\n+                "Noticia",\n+                "P\xc3\xa1gina",\n             },\n-            set(item["title"] for item in response.json()),\n+            {item["title"] for item in response.json()},\n         )\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex a7390fc9f..4e1a4751f 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -51,7 +51,7 @@ def setUp(self):\n             email="noam.chomsky@example.com",\n             username="noam",\n             properties=properties,\n-            password=u"password",\n+            password="password",\n         )\n         properties = {\n             "email": "otheruser@example.com",\n@@ -62,7 +62,7 @@ def setUp(self):\n             email="otheruser@example.com",\n             username="otheruser",\n             properties=properties,\n-            password=u"otherpassword",\n+            password="otherpassword",\n         )\n         transaction.commit()\n \n@@ -461,7 +461,7 @@ def test_update_portrait(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -481,7 +481,7 @@ def test_update_portrait_with_default_plone_scaling(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n                 "scale": True,\n             }\n@@ -502,7 +502,7 @@ def test_update_portrait_by_manager(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -548,7 +548,7 @@ def test_update_user_with_portrait_set_without_updating_portrait(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -715,7 +715,7 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.id), json=payload\n+            f"/@users/{user.id}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -744,7 +744,7 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+            f"/@users/{user.getUserName()}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -772,7 +772,7 @@ def test_reset_and_login_email_using_mail(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+            f"/@users/{user.getUserName()}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 126f8f41a..14633796b 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -17,16 +17,12 @@\n import unittest\n \n \n-TEST_TERM_1 = SimpleTerm(42, token="token1", title=u"Title 1")\n-TEST_TERM_2 = SimpleTerm(43, token="token2", title=u"Title 2")\n+TEST_TERM_1 = SimpleTerm(42, token="token1", title="Title 1")\n+TEST_TERM_2 = SimpleTerm(43, token="token2", title="Title 2")\n TEST_TERM_3 = SimpleTerm(44, token="token3")\n TEST_TERM_4 = UtilityTerm(45, "token4")\n-if six.PY2:\n-    TEST_TERM_5 = SimpleTerm(46, token="token5", title=u"T\\xf6tle 5")\n-    TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\\xc3\\xb6tle 6")\n-else:\n-    TEST_TERM_5 = SimpleTerm(46, token="token5", title="T\xc3\xb6tle 5")\n-    TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\xc3\xb6tle 6")\n+TEST_TERM_5 = SimpleTerm(46, token="token5", title="T\xc3\xb6tle 5")\n+TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\xc3\xb6tle 6")\n \n TEST_VOCABULARY = SimpleVocabulary(\n     [TEST_TERM_1, TEST_TERM_2, TEST_TERM_3, TEST_TERM_4, TEST_TERM_5, TEST_TERM_6]\n@@ -77,17 +73,17 @@ def test_get_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                u"items": [\n-                    {u"title": u"Title 1", u"token": u"token1"},\n-                    {u"title": u"Title 2", u"token": u"token2"},\n-                    {u"title": u"token3", u"token": u"token3"},\n-                    {u"title": u"token4", u"token": u"token4"},\n-                    {u"title": u"T\\xf6tle 5", u"token": u"token5"},\n-                    {u"title": u"T\\xf6tle 6", u"token": u"token6"},\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                "items": [\n+                    {"title": "Title 1", "token": "token1"},\n+                    {"title": "Title 2", "token": "token2"},\n+                    {"title": "token3", "token": "token3"},\n+                    {"title": "token4", "token": "token4"},\n+                    {"title": "T\\xf6tle 5", "token": "token5"},\n+                    {"title": "T\\xf6tle 6", "token": "token6"},\n                 ],\n-                u"items_total": 6,\n+                "items_total": 6,\n             },\n         )\n \n@@ -101,20 +97,20 @@ def test_get_vocabulary_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                u"batching": {\n-                    u"@id": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n-                    u"first": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n-                    u"last": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=5&b_size=1",  # noqa\n-                    u"next": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                "batching": {\n+                    "@id": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n+                    "first": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n+                    "last": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=5&b_size=1",  # noqa\n+                    "next": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 6,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 6,\n             },\n         )\n \n@@ -128,10 +124,10 @@ def test_get_vocabulary_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -145,13 +141,13 @@ def test_get_vocabulary_filtered_by_non_ascii_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=t%C3%B6tle",  # noqa\n-                u"items": [\n-                    {u"title": u"T\\xf6tle 5", u"token": u"token5"},\n-                    {u"title": u"T\\xf6tle 6", u"token": u"token6"},\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?title=t%C3%B6tle",  # noqa\n+                "items": [\n+                    {"title": "T\\xf6tle 5", "token": "token5"},\n+                    {"title": "T\\xf6tle 6", "token": "token6"},\n                 ],\n-                u"items_total": 2,\n+                "items_total": 2,\n             },\n         )\n \n@@ -165,10 +161,10 @@ def test_get_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -182,10 +178,10 @@ def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n-                u"items": [],\n-                u"items_total": 0,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n+                "items": [],\n+                "items_total": 0,\n             },\n         )\n \n@@ -199,8 +195,8 @@ def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"message": u"You can not filter by title and token at the same time.",  # noqa\n-                u"type": u"Invalid parameters",\n+                "message": "You can not filter by title and token at the same time.",  # noqa\n+                "type": "Invalid parameters",\n             },\n         )\n \n@@ -214,10 +210,10 @@ def test_get_corner_case_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n-                u"items": [{"title": "Monday", "token": "0"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n+                "items": [{"title": "Monday", "token": "0"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -230,9 +226,9 @@ def test_get_unknown_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u"error": {\n-                    u"type": u"Not Found",\n-                    u"message": u"The vocabulary \'unknown.vocabulary\' does not exist",\n+                "error": {\n+                    "type": "Not Found",\n+                    "message": "The vocabulary \'unknown.vocabulary\' does not exist",\n                 }\n             },\n         )\n@@ -248,9 +244,9 @@ def test_get_all_vocabularies(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                    u"title": u"plone.restapi.tests.test_vocabulary",\n+                    "@id": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                    "title": "plone.restapi.tests.test_vocabulary",\n                 }\n             ],\n             [\n@@ -262,7 +258,7 @@ def test_get_all_vocabularies(self):\n \n     def test_context_vocabulary(self):\n         api.content.create(\n-            container=self.portal, id="testdoc", type="Document", title=u"Document 1"\n+            container=self.portal, id="testdoc", type="Document", title="Document 1"\n         )\n         transaction.commit()\n \n@@ -274,7 +270,7 @@ def test_context_vocabulary(self):\n         )\n \n         response = self.api_session.get(\n-            "testdoc/@vocabularies/{}".format(context_vocab_name)\n+            f"testdoc/@vocabularies/{context_vocab_name}"\n         )\n \n         gsm = getGlobalSiteManager()\n@@ -283,13 +279,13 @@ def test_context_vocabulary(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n-                u"items": [\n-                    {u"title": u"testdoc", u"token": u"id"},\n-                    {u"title": u"Document 1", u"token": u"title"},\n+                "@id": self.portal_url\n+                + "/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n+                "items": [\n+                    {"title": "testdoc", "token": "id"},\n+                    {"title": "Document 1", "token": "title"},\n                 ],\n-                u"items_total": 2,\n+                "items_total": 2,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_workingcopy.py b/src/plone/restapi/tests/test_services_workingcopy.py\nindex 838c3f0f1..1f31d793b 100644\n--- a/src/plone/restapi/tests/test_services_workingcopy.py\n+++ b/src/plone/restapi/tests/test_services_workingcopy.py\n@@ -41,7 +41,7 @@ def test_workingcopy_checkout(self):\n \n         self.assertEquals(\n             response.json()["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n \n     def test_workingcopy_get(self):\n@@ -60,7 +60,7 @@ def test_workingcopy_get(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -68,7 +68,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n         # endpoint GET in the working_copy\n@@ -79,11 +79,11 @@ def test_workingcopy_get(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEquals(\n             response.json()["working_copy_of"]["@id"],\n-            "{}/document".format(self.portal_url),\n+            f"{self.portal_url}/document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -91,7 +91,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n         # Serialization on the baseline object\n@@ -101,7 +101,7 @@ def test_workingcopy_get(self):\n \n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -109,7 +109,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n         self.assertEquals(response.json()["working_copy_of"], None)\n \n@@ -119,11 +119,11 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy_of"]["@id"],\n-            "{}/document".format(self.portal_url),\n+            f"{self.portal_url}/document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -131,7 +131,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n     def test_workingcopy_notworkingcopy_get(self):\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex c1a20469b..872441bf4 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -1,7 +1,6 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n-from six.moves import range\n from zope.component import getMultiAdapter\n \n import json\n@@ -47,7 +46,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n \n     def deserialize(self, body="{}", validate_all=False, context=None):\n@@ -101,5 +100,5 @@ def test_resolveuids_blocks_deserializer(self):\n         values = json.loads(self.portal.blocks)\n         self.assertEqual(\n             values["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n-            "resolveuid/{}".format(self.portal.doc1.UID()),\n+            f"resolveuid/{self.portal.doc1.UID()}",\n         )\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 1a2144a88..dbf3e8258 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -16,7 +16,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n \n     def serialize(self):\n@@ -29,8 +29,8 @@ def test_serializer_returns_json_serializeable_object(self):\n \n     def test_serializer_includes_title(self):\n         obj = self.serialize()\n-        self.assertIn(u"title", obj)\n-        self.assertEqual(u"Plone site", obj[u"title"])\n+        self.assertIn("title", obj)\n+        self.assertEqual("Plone site", obj["title"])\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n@@ -41,7 +41,7 @@ def test_resolveuids_get_serialized_in_serializer(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n                 "@type": "foo",\n-                "url": "resolveuid/{}".format(self.portal.doc1.UID()),\n+                "url": f"resolveuid/{self.portal.doc1.UID()}",\n             },\n             "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\ndiff --git a/src/plone/restapi/tests/test_statictime.py b/src/plone/restapi/tests/test_statictime.py\nindex b2bc0f137..35c508e81 100644\n--- a/src/plone/restapi/tests/test_statictime.py\n+++ b/src/plone/restapi/tests/test_statictime.py\n@@ -47,7 +47,7 @@ def setUp(self):\n     def create_document(self, id_):\n         self.portal.invokeFactory("Document", id=id_)\n         document = self.portal[id_]\n-        document.title = u"My title"\n+        document.title = "My title"\n         return document\n \n     def create_comments(self, document):\n@@ -282,7 +282,7 @@ def setUp(self):\n     def create_document(self, id_):\n         self.portal.invokeFactory("Document", id=id_)\n         document = self.portal[id_]\n-        document.title = u"My title"\n+        document.title = "My title"\n         return document\n \n     def test_statictime_wc_created(self):\ndiff --git a/src/plone/restapi/tests/test_system.py b/src/plone/restapi/tests/test_system.py\nindex eac3d0230..cf213c02b 100644\n--- a/src/plone/restapi/tests/test_system.py\n+++ b/src/plone/restapi/tests/test_system.py\n@@ -39,7 +39,7 @@ def test_get_system(self):\n         self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n-        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@system")\n+        self.assertEqual(results["@id"], self.portal.absolute_url() + "/@system")\n         self.assertEqual(results["cmf_version"], self.core_versions.get("CMF"))\n         self.assertEqual(results["debug_mode"], self.core_versions.get("Debug mode"))\n         self.assertEqual(results["pil_version"], self.core_versions.get("PIL"))\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 99008d787..ea0dc0fc1 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -33,16 +33,16 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n     def test_translation_info_includes_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+            (self.en_content, self.request), name="GET_application_json_@translations"\n         )\n \n         info = tinfo.reply()\n@@ -51,7 +51,7 @@ def test_translation_info_includes_translations(self):\n \n     def test_correct_translation_information(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+            (self.en_content, self.request), name="GET_application_json_@translations"\n         )\n \n         info = tinfo.reply()\n@@ -74,16 +74,16 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \n     def test_translation_linking_by_url(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -97,7 +97,7 @@ def test_translation_linking_by_url(self):\n \n     def test_translation_linking_by_path(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": "/es/test-document"},\n@@ -111,7 +111,7 @@ def test_translation_linking_by_path(self):\n \n     def test_translation_linking_by_uid(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.UID()},\n@@ -125,7 +125,7 @@ def test_translation_linking_by_uid(self):\n \n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={},\n@@ -136,7 +136,7 @@ def test_calling_with_an_already_translated_content_gives_400(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -145,7 +145,7 @@ def test_calling_with_an_already_translated_content_gives_400(self):\n \n     def test_calling_with_inexistent_content_gives_400(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": "http://this-content-does-not-exist"},\n@@ -154,7 +154,7 @@ def test_calling_with_inexistent_content_gives_400(self):\n \n     def test_get_translations_on_content_with_no_permissions(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -164,7 +164,7 @@ def test_get_translations_on_content_with_no_permissions(self):\n         transaction.commit()\n \n         response = requests.get(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n         )\n \n@@ -185,17 +185,17 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n \n     def test_translation_unlinking_succeeds(self):\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"language": "es"},\n@@ -209,7 +209,7 @@ def test_translation_unlinking_succeeds(self):\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={},\n@@ -220,7 +220,7 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n         ITranslationManager(self.en_content).remove_translation("es")\n         transaction.commit()\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"language": "es"},\n@@ -240,13 +240,13 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \n     def test_post_to_folder_creates_document_translated(self):\n         response = requests.post(\n-            "{}/de".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/de",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n@@ -283,7 +283,7 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 1627c7134..92f6099ba 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -62,7 +62,7 @@ def setUp(self):\n         self.folder = api.content.create(\n             container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n         )\n-        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n+        self.upload_url = f"{self.folder.absolute_url()}/@tus-upload"\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n@@ -118,7 +118,7 @@ def test_tus_post_initialization(self):\n         self.assertEqual(len(uid), 32)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"create"})\n+        self.assertEqual(stored_metadata, {"length": 8, "mode": "create"})\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n@@ -138,10 +138,10 @@ def test_tus_post_initialization_with_metadata(self):\n         self.assertEqual(\n             stored_metadata,\n             {\n-                u"content-type": u"text/plain",\n-                u"filename": u"test.txt",\n-                u"length": 8,\n-                u"mode": u"create",\n+                "content-type": "text/plain",\n+                "filename": "test.txt",\n+                "length": 8,\n+                "mode": "create",\n             },\n         )\n         upload.cleanup()\n@@ -152,7 +152,7 @@ def test_tus_post_replace(self):\n         )\n         transaction.commit()\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n         )\n         self.assertEqual(response.status_code, 201)\n@@ -160,7 +160,7 @@ def test_tus_post_replace(self):\n         url_base, uid = location.rsplit("/", 1)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"replace"})\n+        self.assertEqual(stored_metadata, {"length": 8, "mode": "replace"})\n         upload.cleanup()\n \n     def test_tus_head_on_not_existing_resource_returns_404(self):\n@@ -406,7 +406,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={\n                 "Tus-Resumable": "1.0.0",\n                 "Upload-Length": str(pdf_file_size),\n@@ -511,7 +511,7 @@ def record_event(event):\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={\n                 "Tus-Resumable": "1.0.0",\n                 "Upload-Length": str(pdf_file_size),\n@@ -579,7 +579,7 @@ def setUp(self):\n         self.api_session = RelativeSession(self.portal.absolute_url())\n         self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        self.upload_url = "{}/@tus-upload".format(self.portal.absolute_url())\n+        self.upload_url = f"{self.portal.absolute_url()}/@tus-upload"\n \n     def test_cors_preflight_for_post_contains_tus_headers(self):\n         response = self.api_session.options(\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex f5d902259..90f8cde7d 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -25,31 +25,31 @@\n \n class IDummySchema(model.Schema):\n \n-    field1 = schema.Bool(title=u"Foo", description=u"")\n+    field1 = schema.Bool(title="Foo", description="")\n \n-    field2 = schema.TextLine(title=u"Bar", description=u"")\n+    field2 = schema.TextLine(title="Bar", description="")\n \n \n class ITaggedValuesSchema(model.Schema):\n \n     form.mode(field_mode_hidden="hidden")\n-    field_mode_hidden = schema.TextLine(title=u"ModeHidden", description=u"")\n+    field_mode_hidden = schema.TextLine(title="ModeHidden", description="")\n \n     form.mode(field_mode_display="display")\n-    field_mode_display = schema.TextLine(title=u"ModeDisplay", description=u"")\n+    field_mode_display = schema.TextLine(title="ModeDisplay", description="")\n \n     form.mode(field_mode_input="input")\n-    field_mode_input = schema.TextLine(title=u"ModeInput", description=u"")\n+    field_mode_input = schema.TextLine(title="ModeInput", description="")\n \n-    field_mode_default = schema.TextLine(title=u"ModeInput", description=u"")\n+    field_mode_default = schema.TextLine(title="ModeInput", description="")\n \n-    parametrized_widget_field = schema.TextLine(title=u"Parametrized widget field")\n+    parametrized_widget_field = schema.TextLine(title="Parametrized widget field")\n     form.widget(\n         "parametrized_widget_field", a_param="some_value", defaultFactory=lambda: "Foo"\n     )\n \n     not_parametrized_widget_field = schema.TextLine(\n-        title=u"No parametrized widget field"\n+        title="No parametrized widget field"\n     )\n     form.widget(not_parametrized_widget_field=TextWidget)\n \n@@ -67,14 +67,14 @@ def test_get_jsonschema_properties(self):\n         info = get_jsonschema_properties(self.portal, self.request, fieldsets)\n         expected = {\n             "field1": {\n-                "title": u"Foo",\n-                "description": u"",\n+                "title": "Foo",\n+                "description": "",\n                 "factory": "Yes/No",\n                 "type": "boolean",\n             },\n             "field2": {\n-                "title": u"Bar",\n-                "description": u"",\n+                "title": "Bar",\n+                "description": "",\n                 "factory": "Text line (String)",\n                 "type": "string",\n             },\n@@ -168,7 +168,7 @@ def test_do_not_fail_with_non_parametrized_widget(self):\n             ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            u"No parametrized widget field",\n+            "No parametrized widget field",\n             jsonschema["properties"]["not_parametrized_widget_field"]["title"],\n         )\n \n@@ -179,7 +179,7 @@ def test_resolve_callable_widget_params(self):\n         )\n \n         self.assertEqual(\n-            u"Foo",\n+            "Foo",\n             jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"].get(\n                 "defaultFactory"\n             ),\n@@ -195,8 +195,8 @@ def setUp(self):\n         self.request = self.layer["request"]\n         self.dummy_vocabulary = SimpleVocabulary(\n             [\n-                SimpleTerm(value=u"foo", title=u"Foo"),\n-                SimpleTerm(value=u"bar", title=u"Bar"),\n+                SimpleTerm(value="foo", title="Foo"),\n+                SimpleTerm(value="bar", title="Bar"),\n             ]\n         )\n \n@@ -207,8 +207,8 @@ def setUp(self):\n     def dummy_source_vocab(self, context):\n         return SimpleVocabulary(\n             [\n-                SimpleTerm(value=u"foo", title=u"Foo"),\n-                SimpleTerm(value=u"bar", title=u"Bar"),\n+                SimpleTerm(value="foo", title="Foo"),\n+                SimpleTerm(value="bar", title="Bar"),\n             ]\n         )\n \n@@ -222,8 +222,8 @@ def uppercased_title_default(context):\n             return context.title.upper()\n \n         field = schema.TextLine(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             defaultFactory=uppercased_title_default,\n         )\n         adapter = getMultiAdapter((field, folder, self.request), IJsonSchemaProvider)\n@@ -231,17 +231,17 @@ def uppercased_title_default(context):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Text line (String)",\n-                "description": u"My great field",\n-                "default": u"MY FOLDER",\n+                "title": "My field",\n+                "factory": "Text line (String)",\n+                "description": "My great field",\n+                "default": "MY FOLDER",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_textline(self):\n         field = schema.TextLine(\n-            title=u"My field", description=u"My great field", default=u"foobar"\n+            title="My field", description="My great field", default="foobar"\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -250,19 +250,19 @@ def test_textline(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Text line (String)",\n-                "description": u"My great field",\n-                "default": u"foobar",\n+                "title": "My field",\n+                "factory": "Text line (String)",\n+                "description": "My great field",\n+                "default": "foobar",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_text(self):\n         field = schema.Text(\n-            title=u"My field",\n-            description=u"My great field",\n-            default=u"Lorem ipsum dolor sit amet",\n+            title="My field",\n+            description="My great field",\n+            default="Lorem ipsum dolor sit amet",\n             min_length=10,\n         )\n         adapter = getMultiAdapter(\n@@ -272,11 +272,11 @@ def test_text(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Text",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Text",\n                 "widget": "textarea",\n-                "default": u"Lorem ipsum dolor sit amet",\n+                "default": "Lorem ipsum dolor sit amet",\n                 "minLength": 10,\n             },\n             adapter.get_schema(),\n@@ -284,7 +284,7 @@ def test_text(self):\n \n     def test_bool(self):\n         field = schema.Bool(\n-            title=u"My field", description=u"My great field", default=False\n+            title="My field", description="My great field", default=False\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -293,9 +293,9 @@ def test_bool(self):\n         self.assertEqual(\n             {\n                 "type": "boolean",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Yes/No",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Yes/No",\n                 "default": False,\n             },\n             adapter.get_schema(),\n@@ -303,8 +303,8 @@ def test_bool(self):\n \n     def test_float(self):\n         field = schema.Float(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min=0.0,\n             max=1.0,\n             default=0.5,\n@@ -318,9 +318,9 @@ def test_float(self):\n                 "minimum": 0.0,\n                 "maximum": 1.0,\n                 "type": "number",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Floating-point number",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Floating-point number",\n                 "default": 0.5,\n             },\n             adapter.get_schema(),\n@@ -328,8 +328,8 @@ def test_float(self):\n \n     def test_email(self):\n         field = Email(\n-            title=u"Email",\n-            description=u"Email field",\n+            title="Email",\n+            description="Email field",\n             default="foo@bar.com",\n             min_length=10,\n             max_length=20,\n@@ -354,9 +354,9 @@ def test_email(self):\n \n     def test_password(self):\n         field = schema.Password(\n-            title=u"Password",\n-            description=u"Password field",\n-            default=u"secret",\n+            title="Password",\n+            description="Password field",\n+            default="secret",\n             min_length=4,\n             max_length=8,\n         )\n@@ -380,8 +380,8 @@ def test_password(self):\n \n     def test_uri(self):\n         field = schema.URI(\n-            title=u"URI",\n-            description=u"URI field",\n+            title="URI",\n+            description="URI field",\n             default="http://foo.bar",\n             min_length=10,\n             max_length=100,\n@@ -406,8 +406,8 @@ def test_uri(self):\n \n     def test_decimal(self):\n         field = schema.Decimal(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min=Decimal(0),\n             max=Decimal(1),\n             default=Decimal(0.5),\n@@ -422,8 +422,8 @@ def test_decimal(self):\n                 "maximum": 1.0,\n                 "type": "number",\n                 "factory": "Floating-point number",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "default": 0.5,\n             },\n             adapter.get_schema(),\n@@ -431,7 +431,7 @@ def test_decimal(self):\n \n     def test_int(self):\n         field = schema.Int(\n-            title=u"My field", description=u"My great field", min=0, max=100, default=50\n+            title="My field", description="My great field", min=0, max=100, default=50\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -453,8 +453,8 @@ def test_int(self):\n     def test_choice(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             vocabulary=self.dummy_vocabulary,\n         )\n         adapter = getMultiAdapter(\n@@ -464,8 +464,8 @@ def test_choice(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n@@ -478,8 +478,8 @@ def test_choice(self):\n     def test_choice_inline_array(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             values=["foo", "bar"],\n         )\n \n@@ -490,8 +490,8 @@ def test_choice_inline_array(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": [None, None],\n@@ -503,8 +503,8 @@ def test_choice_inline_array(self):\n \n     def test_choice_named_vocab(self):\n         field = schema.Choice(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n         )\n         adapter = getMultiAdapter(\n@@ -514,11 +514,11 @@ def test_choice_named_vocab(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "vocabulary": {\n-                    "@id": u"http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+                    "@id": "http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n                 },  # noqa\n             },\n             adapter.get_schema(),\n@@ -527,8 +527,8 @@ def test_choice_named_vocab(self):\n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             source=self.dummy_source_vocab,\n         )\n         adapter = getMultiAdapter(\n@@ -538,8 +538,8 @@ def test_choice_source_vocab(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n@@ -551,11 +551,11 @@ def test_choice_source_vocab(self):\n \n     def test_collection(self):\n         field = schema.List(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min_length=1,\n             value_type=schema.TextLine(\n-                title=u"Text", description=u"Text field", default=u"Default text"\n+                title="Text", description="Text field", default="Default text"\n             ),\n             default=["foobar"],\n         )\n@@ -566,8 +566,8 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "List",\n                 "default": ["foobar"],\n                 "minItems": 1,\n@@ -575,17 +575,17 @@ def test_collection(self):\n                 "additionalItems": True,\n                 "items": {\n                     "type": "string",\n-                    "title": u"Text",\n-                    "description": u"Text field",\n+                    "title": "Text",\n+                    "description": "Text field",\n                     "factory": "Text line (String)",\n-                    "default": u"Default text",\n+                    "default": "Default text",\n                 },\n             },\n             adapter.get_schema(),\n         )\n \n         # Test Tuple\n-        field = schema.Tuple(title=u"My field", value_type=schema.Int(), default=(1, 2))\n+        field = schema.Tuple(title="My field", value_type=schema.Int(), default=(1, 2))\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -593,14 +593,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "Tuple",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "type": "integer",\n                     "factory": "Integer",\n                 },\n@@ -610,7 +610,7 @@ def test_collection(self):\n         )\n \n         # Test Set\n-        field = schema.Set(title=u"My field", value_type=schema.TextLine())\n+        field = schema.Set(title="My field", value_type=schema.TextLine())\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -618,14 +618,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "Multiple Choice",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "factory": "Text line (String)",\n                     "type": "string",\n                 },\n@@ -636,7 +636,7 @@ def test_collection(self):\n         # List of choices\n         field = schema.List(\n             __name__="myfield",\n-            title=u"My field",\n+            title="My field",\n             value_type=schema.Choice(vocabulary=self.dummy_vocabulary),\n         )\n         adapter = getMultiAdapter(\n@@ -646,14 +646,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "List",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "factory": "Choice",\n                     "type": "string",\n                     "enum": ["foo", "bar"],\n@@ -667,7 +667,7 @@ def test_collection(self):\n \n     def test_object(self):\n         field = schema.Object(\n-            title=u"My field", description=u"My great field", schema=IDummySchema\n+            title="My field", description="My great field", schema=IDummySchema\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -676,20 +676,20 @@ def test_object(self):\n         self.assertEqual(\n             {\n                 "type": "object",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "File",\n                 "properties": {\n                     "field1": {\n-                        "title": u"Foo",\n-                        "description": u"",\n-                        "factory": u"Yes/No",\n+                        "title": "Foo",\n+                        "description": "",\n+                        "factory": "Yes/No",\n                         "type": "boolean",\n                     },\n                     "field2": {\n-                        "title": u"Bar",\n-                        "description": u"",\n-                        "factory": u"Text line (String)",\n+                        "title": "Bar",\n+                        "description": "",\n+                        "factory": "Text line (String)",\n                         "type": "string",\n                     },\n                 },\n@@ -698,7 +698,7 @@ def test_object(self):\n         )\n \n     def test_richtext(self):\n-        field = RichText(title=u"My field", description=u"My great field")\n+        field = RichText(title="My field", description="My great field")\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -706,9 +706,9 @@ def test_richtext(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Rich Text",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "factory": "Rich Text",\n+                "description": "My great field",\n                 "widget": "richtext",\n             },\n             adapter.get_schema(),\n@@ -716,7 +716,7 @@ def test_richtext(self):\n \n     def test_date(self):\n         field = schema.Date(\n-            title=u"My field", description=u"My great field", default=date(2016, 1, 1)\n+            title="My field", description="My great field", default=date(2016, 1, 1)\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -725,17 +725,17 @@ def test_date(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Date",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "factory": "Date",\n+                "description": "My great field",\n                 "default": date(2016, 1, 1),\n-                "widget": u"date",\n+                "widget": "date",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_datetime(self):\n-        field = schema.Datetime(title=u"My field", description=u"My great field")\n+        field = schema.Datetime(title="My field", description="My great field")\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -743,17 +743,17 @@ def test_datetime(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Date/Time",\n-                "description": u"My great field",\n-                "widget": u"datetime",\n+                "title": "My field",\n+                "factory": "Date/Time",\n+                "description": "My great field",\n+                "widget": "datetime",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_jsonfield(self):\n         field = JSONField(\n-            title=u"My field", description=u"My great field", widget="my_widget_name"\n+            title="My field", description="My great field", widget="my_widget_name"\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -762,10 +762,10 @@ def test_jsonfield(self):\n         self.assertEqual(\n             {\n                 "type": "dict",\n-                "title": u"My field",\n+                "title": "My field",\n                 "factory": "JSONField",\n-                "description": u"My great field",\n-                "widget": u"my_widget_name",\n+                "description": "My great field",\n+                "widget": "my_widget_name",\n             },\n             adapter.get_schema(),\n         )\ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex 2f5b3bad5..d3d72217b 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -30,7 +30,7 @@ def test_upgrade_ensure_child_ordering_object_ids_are_native_strings(self):\n \n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type("doc1")])\n+        ordering.moveObjectsToBottom(["doc1"])\n \n         ensure_child_ordering_object_ids_are_native_strings(self.folder)\n \n@@ -58,7 +58,7 @@ def test_upgrade_view(self):\n         ordering = self.folder.getOrdering()\n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type("doc1")])\n+        ordering.moveObjectsToBottom(["doc1"])\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         view = self.portal.restrictedTraverse("@@plone-restapi-upgrade-fix-ordering")\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex cbf1d6642..86527f133 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -35,25 +35,25 @@ def setUp(self):\n \n     def test_workflow_info_includes_history(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("history", info)\n         history = info["history"]\n         self.assertEqual(3, len(history))\n-        self.assertEqual("published", history[-1][u"review_state"])\n-        self.assertEqual(u"Published with accent \xc3\xa9", history[-1][u"title"])\n+        self.assertEqual("published", history[-1]["review_state"])\n+        self.assertEqual("Published with accent \xc3\xa9", history[-1]["title"])\n \n     def test_workflow_info_includes_current_state(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("state", info)\n         state = info["state"]\n         self.assertEqual(2, len(state))\n         self.assertEqual("published", state["id"])\n-        self.assertEqual(u"Published with accent \xc3\xa9", state["title"])\n+        self.assertEqual("Published with accent \xc3\xa9", state["title"])\n \n     def test_workflow_info_unauthorized_history(self):\n         login(self.portal, SITE_OWNER_NAME)\n@@ -68,7 +68,7 @@ def test_workflow_info_unauthorized_history(self):\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, TEST_USER_NAME)\n         wfinfo = getMultiAdapter(\n-            (doc2, self.request), name=u"GET_application_json_@workflow"\n+            (doc2, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("history", info)\n@@ -77,7 +77,7 @@ def test_workflow_info_unauthorized_history(self):\n \n     def test_workflow_info_includes_transitions(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("transitions", info)\n@@ -100,7 +100,7 @@ def test_expanded_workflow_info_in_content_serialization(self):\n \n     def test_workflow_info_empty_on_siteroot(self):\n         wfinfo = getMultiAdapter(\n-            (self.portal, self.request), name=u"GET_application_json_@workflow"\n+            (self.portal, self.request), name="GET_application_json_@workflow"\n         )\n         obj = wfinfo.reply()\n \n@@ -128,7 +128,7 @@ def traverse(\n         request.environ["HTTP_ACCEPT"] = accept\n         request.environ["REQUEST_METHOD"] = method\n         if auth is None:\n-            auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            auth = f"{SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n@@ -136,9 +136,9 @@ def traverse(\n     def test_transition_action_succeeds(self):\n         service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u"published", res[u"review_state"])\n+        self.assertEqual("published", res["review_state"])\n         self.assertEqual(\n-            u"published", self.wftool.getInfoFor(self.portal.doc1, u"review_state")\n+            "published", self.wftool.getInfoFor(self.portal.doc1, "review_state")\n         )\n \n     def test_transition_action_succeeds_changes_effective(self):\n@@ -164,7 +164,7 @@ def test_transition_with_comment(self):\n         self.request["BODY"] = \'{"comment": "A comment"}\'\n         service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u"A comment", res[u"comments"])\n+        self.assertEqual("A comment", res["comments"])\n \n     def test_transition_including_children(self):\n         folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n@@ -173,9 +173,9 @@ def test_transition_including_children(self):\n         service = self.traverse("/plone/folder/@workflow/publish")\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertEqual(u"published", self.wftool.getInfoFor(folder, u"review_state"))\n+        self.assertEqual("published", self.wftool.getInfoFor(folder, "review_state"))\n         self.assertEqual(\n-            u"published", self.wftool.getInfoFor(subfolder, u"review_state")\n+            "published", self.wftool.getInfoFor(subfolder, "review_state")\n         )\n \n     def test_transition_with_effective_date(self):\n@@ -215,9 +215,9 @@ def test_transition_with_no_access_to_review_history_in_target_state(self):\n         )\n         login(self.portal, TEST_USER_NAME)\n \n-        auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        auth = f"{TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n         service = self.traverse("/plone/folder/@workflow/restrict", auth=auth)\n         res = service.reply()\n \n         self.assertEqual(200, self.request.response.getStatus(), res)\n-        self.assertEqual(u"restricted", res[u"review_state"], res)\n+        self.assertEqual("restricted", res["review_state"], res)\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex fd749dff0..7815df2e2 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -41,7 +41,7 @@\n \n @adapter(IField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n-class DefaultJsonSchemaProvider(object):\n+class DefaultJsonSchemaProvider:\n     def __init__(self, field, context, request):\n         self.field = field.bind(context)\n         self.context = context\n@@ -56,7 +56,7 @@ def get_title(self):\n \n     def get_description(self):\n         if self.field.description is None:\n-            return u""\n+            return ""\n \n         return translate(self.field.description, context=self.request)\n \n@@ -283,7 +283,7 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class ListJsonSchemaProvider(CollectionJsonSchemaProvider):\n     def additional(self):\n-        info = super(ListJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         if IChoice.providedBy(self.field.value_type):\n             info["uniqueItems"] = True\n         else:\n@@ -296,7 +296,7 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class SetJsonSchemaProvider(CollectionJsonSchemaProvider):\n     def additional(self):\n-        info = super(SetJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         info["uniqueItems"] = True\n         return info\n \n@@ -410,7 +410,7 @@ def get_properties(self):\n         return get_jsonschema_properties(context, request, fieldsets, prefix)\n \n     def additional(self):\n-        info = super(ObjectJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         info["properties"] = self.get_properties()\n         return info\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 6fbbece6a..cb6c48ac6 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -62,7 +62,7 @@\n \n \n @implementer(IDexterityContent)\n-class FakeDXContext(object):\n+class FakeDXContext:\n     """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n@@ -89,8 +89,7 @@ def iter_fields(fieldsets):\n     as returned by `get_fieldsets`.\n     """\n     for fieldset in fieldsets:\n-        for field in fieldset["fields"]:\n-            yield field\n+        yield from fieldset["fields"]\n \n \n def get_form_fieldsets(form):\n@@ -307,7 +306,7 @@ def get_info_for_type(context, request, name):\n         return schema\n \n     # Get the empty fieldsets\n-    existing = set(f.get("id") for f in schema.get("fieldsets", []))\n+    existing = {f.get("id") for f in schema.get("fieldsets", [])}\n     generated = set()\n     for fieldset in context.schema.queryTaggedValue(FIELDSETS_KEY, []):\n         name = fieldset.__name__\ndiff --git a/src/plone/restapi/upgrades/ordering.py b/src/plone/restapi/upgrades/ordering.py\nindex ab6d3e3c4..234ab3992 100644\n--- a/src/plone/restapi/upgrades/ordering.py\n+++ b/src/plone/restapi/upgrades/ordering.py\n@@ -13,7 +13,7 @@\n \n \n def safe_utf8(to_utf8):\n-    if isinstance(to_utf8, six.text_type):\n+    if isinstance(to_utf8, str):\n         to_utf8 = to_utf8.encode("utf-8")\n     return to_utf8\n \n@@ -33,8 +33,7 @@ def ensure_child_ordering_object_ids_are_native_strings(container):\n     The problem only exists with python 2 so we do nothing when we are\n     called on python 3 by mistake.\n     """\n-    if six.PY3:\n-        return\n+    return\n \n     if not IAnnotatable.providedBy(container):\n         return\n@@ -60,8 +59,7 @@ class FixOrderingView(BrowserView):\n     """\n \n     def __call__(self):\n-        if six.PY3:\n-            return "Aborted, fixing ordering is only necessary on python 2."\n+        return "Aborted, fixing ordering is only necessary on python 2."\n \n         catalog = getToolByName(self.context, "portal_catalog")\n         for brain in catalog.unrestrictedSearchResults(QUERY):\ndiff --git a/src/plone/restapi/upgrades/to0005.py b/src/plone/restapi/upgrades/to0005.py\nindex ef4c85a84..4d3d2aeda 100644\n--- a/src/plone/restapi/upgrades/to0005.py\n+++ b/src/plone/restapi/upgrades/to0005.py\n@@ -28,7 +28,7 @@ def rename_tiles_to_blocks(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n \n         # In case we used the short behavior name\n         if fti and SHORT_OLD_BEHAVIOR_NAME in fti.behaviors:\n@@ -40,10 +40,10 @@ def rename_tiles_to_blocks(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n \n     for brain in api.content.find(portal_type=types_with_tiles_behavior):\n         obj = brain.getObject()\n         obj.blocks = getattr(obj, "tiles", {})\n         obj.blocks_layout = getattr(obj, "tiles_layout", {"items": []})\n-        logger.info("Migrated fields of content object: {}".format(obj.absolute_url()))\n+        logger.info(f"Migrated fields of content object: {obj.absolute_url()}")\ndiff --git a/src/plone/restapi/upgrades/to0006.py b/src/plone/restapi/upgrades/to0006.py\nindex b1083b01c..30593c4d5 100644\n--- a/src/plone/restapi/upgrades/to0006.py\n+++ b/src/plone/restapi/upgrades/to0006.py\n@@ -24,4 +24,4 @@ def rename_iface_to_name_in_blocks_behavior(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T16:51:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/a9da347703de9961aea49d42276a607e15bd3b65

run black

Files changed:
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/services/breadcrumbs/get.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/sources/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/test_blocks_serializer.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_resolveuid.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_workflow.py

b'diff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex 8f2065da8..33102b895 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -54,9 +54,7 @@ def __call__(self, value):\n \n         if obj is None:\n             self.request.response.setStatus(400)\n-            raise ValueError(\n-                f"Could not resolve object for {resolved_by}={value}"\n-            )\n+            raise ValueError(f"Could not resolve object for {resolved_by}={value}")\n \n         self.field.validate(obj)\n         return obj\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex d99561131..4ab6fc63b 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -50,9 +50,7 @@ def reply(self):\n             )\n             all_addons = control_panel.get_addons()\n \n-            result = {\n-                "items": {"@id": f"{self.context.absolute_url()}/@addons"}\n-            }\n+            result = {"items": {"@id": f"{self.context.absolute_url()}/@addons"}}\n             addons_data = []\n             for a in all_addons.values():\n                 addons_data.append(self.addons.serializeAddon(a))\ndiff --git a/src/plone/restapi/services/breadcrumbs/get.py b/src/plone/restapi/services/breadcrumbs/get.py\nindex 787182cdf..c897c8d95 100644\n--- a/src/plone/restapi/services/breadcrumbs/get.py\n+++ b/src/plone/restapi/services/breadcrumbs/get.py\n@@ -14,11 +14,7 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            "breadcrumbs": {\n-                "@id": f"{self.context.absolute_url()}/@breadcrumbs"\n-            }\n-        }\n+        result = {"breadcrumbs": {"@id": f"{self.context.absolute_url()}/@breadcrumbs"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 826770420..02cc95e1d 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -175,12 +175,8 @@ def reply(self):\n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        self.request.response.setHeader(\n-            "Upload-Length", f"{tus_upload.length()}"\n-        )\n-        self.request.response.setHeader(\n-            "Upload-Offset", f"{tus_upload.offset()}"\n-        )\n+        self.request.response.setHeader("Upload-Length", f"{tus_upload.length()}")\n+        self.request.response.setHeader("Upload-Offset", f"{tus_upload.offset()}")\n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n         self.request.response.setHeader("Cache-Control", "no-store")\n         self.request.response.setStatus(200, lock=1)\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex 82d96de91..f42c9a567 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -27,9 +27,7 @@ def get_controlpanel_adapters(self):\n \n     def available_controlpanels(self):\n         panels = dict(self.get_controlpanel_adapters())\n-        panels_by_configlet = {\n-            p.configlet_id: name for name, p in panels.items()\n-        }\n+        panels_by_configlet = {p.configlet_id: name for name, p in panels.items()}\n \n         pctool = getToolByName(self.context, "portal_controlpanel")\n         for group in pctool.getGroups():\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex b78f681f8..a665ee8b0 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -55,9 +55,7 @@ def reply(self):\n             description=description,\n         )\n         if not success:\n-            raise BadRequest(\n-                f"Error occurred, could not add group {groupname}."\n-            )\n+            raise BadRequest(f"Error occurred, could not add group {groupname}.")\n \n         # Add members\n         group = gtool.getGroupById(groupname)\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 0ebcb63ea..1b2baaf9a 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -24,9 +24,7 @@ def __init__(self, context, request):\n \n     def __call__(self, expand=False):\n         result = {\n-            "translations": {\n-                "@id": f"{self.context.absolute_url()}/@translations"\n-            }\n+            "translations": {"@id": f"{self.context.absolute_url()}/@translations"}\n         }\n         if not expand:\n             return result\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex d0dae1b78..c9b6b6a7f 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -41,9 +41,7 @@ def __call__(self, expand=False):\n         else:\n             self.depth = 1\n \n-        result = {\n-            "navigation": {"@id": f"{self.context.absolute_url()}/@navigation"}\n-        }\n+        result = {"navigation": {"@id": f"{self.context.absolute_url()}/@navigation"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/services/sources/get.py b/src/plone/restapi/services/sources/get.py\nindex d7ba61f79..1669bb319 100644\n--- a/src/plone/restapi/services/sources/get.py\n+++ b/src/plone/restapi/services/sources/get.py\n@@ -48,9 +48,7 @@ def reply(self):\n             )\n \n         serializer = getMultiAdapter((source, self.request), interface=ISerializeToJson)\n-        return serializer(\n-            f"{self.context.absolute_url()}/@sources/{fieldname}"\n-        )\n+        return serializer(f"{self.context.absolute_url()}/@sources/{fieldname}")\n \n \n def get_field_by_name(fieldname, context):\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex be125b530..447a79f8d 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -78,9 +78,7 @@ def validate_input_data(self, portal, original_data):\n         # check input data\n         for fieldname in required:\n             if not data.get(fieldname, None):\n-                self.add_field_error(\n-                    fieldname, f"Property \'{fieldname}\' is required."\n-                )\n+                self.add_field_error(fieldname, f"Property \'{fieldname}\' is required.")\n         for fieldname in data:\n             if fieldname not in allowed:\n                 self.add_field_error(\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex 0c294e418..99e9b637c 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -20,9 +20,7 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            "workflow": {"@id": f"{self.context.absolute_url()}/@workflow"}\n-        }\n+        result = {"workflow": {"@id": f"{self.context.absolute_url()}/@workflow"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 47d97de4c..7fab35cc5 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -107,9 +107,7 @@ def step_setup_content(context):\n     set_description(folder10)\n     publish(folder10)\n     for i in range(1, 11):\n-        folder10.invokeFactory(\n-            "Document", id=f"doc{i}", title=f"Doc {i}"\n-        )\n+        folder10.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n         publish(folder10[f"doc{i}"])\n \n     # Folder with 100 Items\n@@ -118,9 +116,7 @@ def step_setup_content(context):\n     set_description(folder100)\n     publish(folder100)\n     for i in range(1, 101):\n-        folder100.invokeFactory(\n-            "Document", id=f"doc{i}", title=f"Doc {i}"\n-        )\n+        folder100.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n         publish(folder100[f"doc{i}"])\n \n     # Folder with 1000 Items\n@@ -129,9 +125,7 @@ def step_setup_content(context):\n     set_description(folder1000)\n     publish(folder1000)\n     for i in range(1, 1001):\n-        folder1000.invokeFactory(\n-            "Document", id=f"doc{i}", title=f"Doc {i}"\n-        )\n+        folder1000.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n         publish(folder1000[f"doc{i}"])\n \n     # Folder with 10 Items and next/previous enabled\n@@ -145,9 +139,7 @@ def step_setup_content(context):\n     set_description(folder10np)\n     publish(folder10np)\n     for i in range(1, 11):\n-        folder10np.invokeFactory(\n-            "Document", id=f"doc{i}", title=f"Doc {i}"\n-        )\n+        folder10np.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n         publish(folder10np[f"doc{i}"])\n \n     # Collection\n@@ -234,9 +226,7 @@ def step_setup_content(context):\n     publish(volto_page)\n \n     for i in range(1, 31):\n-        volto_page.invokeFactory(\n-            "News Item", id=f"newsitem{i}", title=f"NewsItem {i}"\n-        )\n+        volto_page.invokeFactory("News Item", id=f"newsitem{i}", title=f"NewsItem {i}")\n         newsitem = volto_page.get(f"newsitem{i}")\n         set_description(newsitem)\n         set_text(newsitem)\n@@ -250,9 +240,7 @@ def step_setup_content(context):\n         newsitem.reindexObject()\n \n     for i in range(1, 31):\n-        volto_page.invokeFactory(\n-            "Image", id=f"image{i}", title=f"Image {i}"\n-        )\n+        volto_page.invokeFactory("Image", id=f"image{i}", title=f"Image {i}")\n         image_file = os.path.join(os.path.dirname(__file__), "image.jpeg")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex 47b7b2f10..fbcf21d1f 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -164,9 +164,7 @@ def test_serialize_blocks_smart_href_array(self):\n         doc_uid = IUUID(self.portal.doc1)\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={\n-                "123": {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}\n-            },\n+            blocks={"123": {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}},\n         )\n \n         self.assertEqual(value["123"]["href"][0], self.portal.doc1.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 9cc35cb51..904bff188 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -124,9 +124,7 @@ def save_request_and_response_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, str) or not hasattr(\n-                req, "buffer"\n-            ):\n+            if isinstance(response.request.body, str) or not hasattr(req, "buffer"):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n@@ -176,9 +174,7 @@ def save_request_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, str) or not hasattr(\n-                req, "buffer"\n-            ):\n+            if isinstance(response.request.body, str) or not hasattr(req, "buffer"):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n@@ -246,9 +242,7 @@ def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n         document.title = "Welcome to Plone"\n-        document.description = (\n-            "Congratulations! You have successfully installed Plone."\n-        )\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n             "If you\'re seeing this instead of the web site you were "\n             + "expecting, the owner of this web site has just installed "\n@@ -467,9 +461,7 @@ def test_documentation_search_fullobjects(self):\n         save_request_and_response_for_docs("search_fullobjects", response)\n \n     def test_documentation_workflow(self):\n-        response = self.api_session.get(\n-            f"{self.document.absolute_url()}/@workflow"\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@workflow")\n         save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n@@ -1136,15 +1128,11 @@ def test_documentation_groups_delete(self):\n         save_request_and_response_for_docs("groups_delete", response)\n \n     def test_documentation_breadcrumbs(self):\n-        response = self.api_session.get(\n-            f"{self.document.absolute_url()}/@breadcrumbs"\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@breadcrumbs")\n         save_request_and_response_for_docs("breadcrumbs", response)\n \n     def test_documentation_navigation(self):\n-        response = self.api_session.get(\n-            f"{self.document.absolute_url()}/@navigation"\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@navigation")\n         save_request_and_response_for_docs("navigation", response)\n \n     def test_documentation_navigation_tree(self):\n@@ -1157,9 +1145,7 @@ def test_documentation_navigation_tree(self):\n         subfolder1 = createContentInContainer(\n             folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n-        createContentInContainer(\n-            folder, "Folder", id="subfolder2", title="SubFolder 2"\n-        )\n+        createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n             subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n@@ -1188,9 +1174,7 @@ def test_documentation_contextnavigation(self):\n         subfolder1 = createContentInContainer(\n             folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n-        createContentInContainer(\n-            folder, "Folder", id="subfolder2", title="SubFolder 2"\n-        )\n+        createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n             subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n@@ -1587,9 +1571,7 @@ def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n         document.title = "Welcome to Plone"\n-        document.description = (\n-            "Congratulations! You have successfully installed Plone."\n-        )\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n             "If you\'re seeing this instead of the web site you were "\n             + "expecting, the owner of this web site has just installed "\n@@ -1645,9 +1627,7 @@ def create_document_with_comments(self):\n         document = self.portal["front-page"]\n         document.allow_discussion = True\n         document.title = "Welcome to Plone"\n-        document.description = (\n-            "Congratulations! You have successfully installed Plone."\n-        )\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n             "If you\'re seeing this instead of the web site you were "\n             + "expecting, the owner of this web site has just installed "\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex c4b613e1d..98fc3a602 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -122,9 +122,7 @@ def test_datetime_deserialization_handles_timezone(self):\n         self.assertEqual(datetime(2015, 12, 20, 9, 39, 54, 361000), value)\n \n     def test_datetime_with_tz_deserialization_keeps_timezone(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", "2015-12-20T10:39:54.361+01"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361+01")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 10, 39, 54, 361000)\n@@ -133,9 +131,7 @@ def test_datetime_with_tz_deserialization_keeps_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_converts_timezone(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", "2015-12-20T10:39:54.361-04"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361-04")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 15, 39, 54, 361000)\n@@ -153,9 +149,7 @@ def test_datetime_with_tz_deserialization_adds_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_handles_dst(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", "2015-05-20T10:39:54.361+02"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-05-20T10:39:54.361+02")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 5, 20, 10, 39, 54, 361000)\n@@ -342,9 +336,7 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n-        value = self.deserialize(\n-            "test_namedblobfile_field", {"data": "Spam and eggs!"}\n-        )\n+        value = self.deserialize("test_namedblobfile_field", {"data": "Spam and eggs!"})\n         self.assertTrue(\n             isinstance(value, namedfile.NamedBlobFile), "Not a <NamedBlobFile>"\n         )\n@@ -403,9 +395,7 @@ def test_relationchoice_deserialization_from_url_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize(\n-            "test_relationchoice_field", str(doc2.absolute_url())\n-        )\n+        value = self.deserialize("test_relationchoice_field", str(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -451,9 +441,7 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n \n     def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\n-                "test_relationchoice_field", "/doesnotexist"\n-            )\n+            self.deserialize("test_relationchoice_field", "/doesnotexist")\n         self.assertEqual(\n             str(cm.exception), "Could not resolve object for path=/doesnotexist"\n         )\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 465512a59..1c5c2c8bd 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -902,9 +902,7 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\n-                "download": "{}/@@images/{}.{}".format(\n-                    obj_url, scale_url_uuid, "gif"\n-                ),\n+                "download": "{}/@@images/{}.{}".format(obj_url, scale_url_uuid, "gif"),\n                 "filename": "1024x768.gif",\n                 "height": -1,\n                 "scales": {},\n@@ -1003,9 +1001,7 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\n-                "download": "{}/@@images/{}.{}".format(\n-                    obj_url, scale_url_uuid, "gif"\n-                ),\n+                "download": "{}/@@images/{}.{}".format(obj_url, scale_url_uuid, "gif"),\n                 "filename": "1024x768.gif",\n                 "height": -1,\n                 "scales": {},\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 92fe2d810..166082009 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -198,9 +198,7 @@ def test_navigation_expanded_with_depth(self):\n             id="fourthlevelfolder",\n             title="Fourth Level Folder",\n         )\n-        createContentInContainer(\n-            self.folder, "Document", id="doc1", title="A document"\n-        )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n         response = self.api_session.get(\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nindex 243fecdf8..d1c2788ae 100644\n--- a/src/plone/restapi/tests/test_resolveuid.py\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -66,9 +66,7 @@ def test_create_document_with_link_stores_uuid(self):\n                             ],\n                             "entityMap": {\n                                 "0": {\n-                                    "data": {\n-                                        "url": f"{self.portal_url}/target"\n-                                    },\n+                                    "data": {"url": f"{self.portal_url}/target"},\n                                     "mutability": "MUTABLE",\n                                     "type": "LINK",\n                                 }\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 4975165e5..a9d552f17 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -76,9 +76,7 @@ def test_serialize_returns_desciption(self):\n         )\n \n     def test_serialize_returns_rich_text(self):\n-        self.portal.doc1.text = RichTextValue(\n-            "Lorem ipsum.", "text/plain", "text/html"\n-        )\n+        self.portal.doc1.text = RichTextValue("Lorem ipsum.", "text/plain", "text/html")\n         self.assertEqual(\n             self.serialize(self.portal.doc1).get("text"),\n             {\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 40df91559..0f9cf8afe 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -21,9 +21,7 @@ def setUp(self):\n         self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         # /plone/my-folder\n-        self.folder = createContentInContainer(\n-            self.portal, "Folder", title="My Folder"\n-        )\n+        self.folder = createContentInContainer(self.portal, "Folder", title="My Folder")\n \n         # /plone/my-folder/my-document\n         self.doc = createContentInContainer(\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 821ae2d10..1d98b88dd 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -120,9 +120,7 @@ def test_frozenset(self):\n         )\n \n     def test_set(self):\n-        self.assertEqual(\n-            [[1, 1], [2, 2]], sorted(json_compatible({(1, 1), (2, 2)}))\n-        )\n+        self.assertEqual([[1, 1], [2, 2]], sorted(json_compatible({(1, 1), (2, 2)})))\n \n     def test_dict(self):\n         self.assertEqual(\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex 962849ee2..0f4e9a951 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -36,9 +36,7 @@ def setUp(self):\n         self.folder = createContentInContainer(\n             self.portal, "Folder", id="folder", title="Some Folder"\n         )\n-        createContentInContainer(\n-            self.folder, "Document", id="doc1", title="A document"\n-        )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\n@@ -95,9 +93,7 @@ def setUp(self):\n         self.folder = createContentInContainer(\n             self.portal["es"], "Folder", id="folder", title="Some Folder"\n         )\n-        createContentInContainer(\n-            self.folder, "Document", id="doc1", title="A document"\n-        )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex cb08d48f9..478a866f1 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -135,9 +135,7 @@ def _disable_auto_versioning(self, content_type):\n         types = list(portal_repository.getVersionableContentTypes())\n         types.remove(content_type)\n         portal_repository.setVersionableContentTypes(types)\n-        portal_repository.removePolicyFromContentType(\n-            content_type, "version_on_revert"\n-        )\n+        portal_repository.removePolicyFromContentType(content_type, "version_on_revert")\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 925702e66..74c08eee5 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -56,9 +56,7 @@ def setUp(self):\n             id="fourthlevelfolder",\n             title="Fourth Level Folder",\n         )\n-        createContentInContainer(\n-            self.folder, "Document", id="doc1", title="A document"\n-        )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 81e01f3a9..0c5959f35 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -66,9 +66,7 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types(self):\n-        response = self.api_session.get(\n-            f"{self.portal.absolute_url()}/@types"\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n@@ -82,9 +80,7 @@ def test_get_types(self):\n             self.assertEqual(sorted(item), sorted(["@id", "title", "addable"]))\n \n     def test_get_types_document(self):\n-        response = self.api_session.get(\n-            f"{self.portal.absolute_url()}/@types/Document"\n-        )\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types/Document")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n@@ -464,15 +460,11 @@ def test_get_types_with_unknown_type(self):\n \n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n-        response = self.api_session.get(\n-            f"{self.portal.absolute_url()}/@types"\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n-        response = self.api_session.get(\n-            f"{self.portal.absolute_url()}/@types"\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n \n@@ -569,9 +561,7 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types_translated(self):\n-        response = self.api_session.get(\n-            f"{self.portal.absolute_url()}/@types"\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         self.assertEqual(response.status_code, 200)\n \ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 14633796b..b8c42db84 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -269,9 +269,7 @@ def test_context_vocabulary(self):\n             name=context_vocab_name,\n         )\n \n-        response = self.api_session.get(\n-            f"testdoc/@vocabularies/{context_vocab_name}"\n-        )\n+        response = self.api_session.get(f"testdoc/@vocabularies/{context_vocab_name}")\n \n         gsm = getGlobalSiteManager()\n         gsm.unregisterUtility(provided=IVocabularyFactory, name=context_vocab_name)\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex 86527f133..9803b3821 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -174,9 +174,7 @@ def test_transition_including_children(self):\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n         self.assertEqual("published", self.wftool.getInfoFor(folder, "review_state"))\n-        self.assertEqual(\n-            "published", self.wftool.getInfoFor(subfolder, "review_state")\n-        )\n+        self.assertEqual("published", self.wftool.getInfoFor(subfolder, "review_state"))\n \n     def test_transition_with_effective_date(self):\n         self.request["BODY"] = \'{"effective": "2018-06-24T09:17:02"}\'\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T17:09:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/8aeed5dc06b14c8da2374b02b24f39e0cfad70f3

manual remove unused six imports

Files changed:
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/indexers.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/upgrades/ordering.py

b'diff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 619fd8197..9123575df 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -10,7 +10,6 @@\n from plone.uuid.interfaces import IUUID\n from plone.uuid.interfaces import IUUIDAware\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six import string_types\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import subscribers\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex efe213c44..9e9205a25 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -15,8 +15,6 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n-import six\n-\n \n def _extract_text(block):\n     result = ""\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex c9b9dee17..cd3a09b0d 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -11,7 +11,6 @@\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.schema import IJSONField\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six import string_types\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import subscribers\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex 57fe5cd86..86b46969a 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -21,7 +21,6 @@\n \n import Missing\n import pytz\n-import six\n \n \n # import re\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex 12e21fee3..1d6216fe5 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,8 +1,6 @@\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n \n-import six\n-\n \n def expandable_elements(context, request):\n     """Returns a dict containing all expandable elements."""\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex e74812d87..1e78cdcd1 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -11,8 +11,6 @@\n from zope.schema.interfaces import ITokenizedTerm\n from zope.schema.interfaces import IVocabulary\n \n-import six\n-\n \n @implementer(ISerializeToJson)\n class SerializeVocabLikeToJson:\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 26131893b..404eec5d2 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,8 +9,6 @@\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n-import six\n-\n \n @implementer(IPublishTraverse)\n class HistoryGet(Service):\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex c8f2640fa..bd5c10a09 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,8 +6,6 @@\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n from zExceptions import BadRequest\n \n-import six\n-\n \n class HistoryPatch(Service):\n     def reply(self):\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex 99e9b637c..e0b7ca35c 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -9,8 +9,6 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n-\n \n @implementer(IExpandableElement)\n @adapter(IWorkflowAware, Interface)\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex c3aa82a57..9e0866940 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -16,7 +16,6 @@\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n-import six\n \n \n @implementer(IPublishTraverse)\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex ae2a750ae..203a7fd99 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -37,7 +37,6 @@\n import pkg_resources\n import re\n import requests\n-import six\n import time\n \n \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 904bff188..fed9c4ac6 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -38,7 +38,6 @@\n import json\n import os\n import re\n-import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 8db02cdd4..d349f2e86 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -13,7 +13,6 @@\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n \n import json\n-import six\n import unittest\n \n \ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 98fc3a602..ffa060cd8 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -16,7 +16,6 @@\n from zope.schema.interfaces import ConstraintNotSatisfied\n from zope.schema.interfaces import ValidationError\n \n-import six\n import unittest\n \n \ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 1c5c2c8bd..66d1f7fd5 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -21,7 +21,6 @@\n from zope.interface.verify import verifyClass\n \n import os\n-import six\n import unittest\n \n \ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 1d98b88dd..d34147785 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -14,7 +14,6 @@\n \n import json\n import Missing\n-import six\n \n \n class TestJsonCompatibleConverters(TestCase):\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 478a866f1..50d36e076 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,7 +9,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n \n-import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex b8c42db84..0cab7b7b3 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -12,7 +12,6 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex d3d72217b..25c480f5d 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -6,7 +6,6 @@\n )\n \n import unittest\n-import six\n \n \n class TestUpgradeOrdering(unittest.TestCase):\ndiff --git a/src/plone/restapi/upgrades/ordering.py b/src/plone/restapi/upgrades/ordering.py\nindex 234ab3992..9170b8700 100644\n--- a/src/plone/restapi/upgrades/ordering.py\n+++ b/src/plone/restapi/upgrades/ordering.py\n@@ -5,8 +5,6 @@\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n \n-import six\n-\n \n ORDER_KEY = DefaultOrdering.ORDER_KEY\n QUERY = {"is_folderish": True}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T17:13:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/72f33a03ac93e68f9d96473377b765a15ddf42a3

document changes

Files changed:
A news/1162.bugfix

b'diff --git a/news/1162.bugfix b/news/1162.bugfix\nnew file mode 100644\nindex 000000000..181e82ca3\n--- /dev/null\n+++ b/news/1162.bugfix\n@@ -0,0 +1,3 @@\n+In src run `find . -name "*.py"|xargs pyupgrade --py36-plus`.\n+Then run black and remove six import leftovers. \n+[jensens]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-08T11:38:22+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6797fd06e3a751535fd4a5f272a8ed56e7ef84e0

Merge branch 'master' into pyupgrade

Files changed:
M CHANGES.rst
M docs/source/batching.rst
M setup.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/types/adapters.py
D news/1155.bugfix
D news/1156.bugfix
D news/1157.bugfix
D news/1158.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2d1ff56a6..9d60fbf15 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,35 @@ Changelog\n \n .. towncrier release notes start\n \n+8.4.1 (2021-07-07)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix interpolation variable present in response after serialization\n+  [sneridagh] (#1164)\n+\n+\n+8.4.0 (2021-07-06)\n+------------------\n+\n+New features:\n+\n+\n+- Pass through field attribute \'widget\' for field Dict [ksuess] (#1153)\n+\n+\n+Bug fixes:\n+\n+\n+- Use security decorators in PAS plugin. [jensens] (#1155)\n+- Drop coding magic first line. Coding magic is no longer needed in Python 3, except if different from utf-8. [jensens] (#1156)\n+- Fix PAS plugin ZMI markup for Zope4+. [jensens] (#1157)\n+- Eliminate non-pythonic \'return None\' usage. [jensens] (#1158)\n+- Provide value_type of plone.schema / zope.schema Dict field [ksuess] (#1159)\n+\n+\n 8.3.2 (2021-07-05)\n ------------------\n \ndiff --git a/docs/source/batching.rst b/docs/source/batching.rst\nindex 078c0698e..7cc26257b 100644\n--- a/docs/source/batching.rst\n+++ b/docs/source/batching.rst\n@@ -2,7 +2,7 @@ Batching\n ========\n \n Representations of collection-like resources are batched / paginated if the\n-size of the resulset exceeds the batching size:\n+size of the resultset exceeds the batching size:\n \n .. code-block:: json\n \ndiff --git a/news/1155.bugfix b/news/1155.bugfix\ndeleted file mode 100644\nindex a2aad6b90..000000000\n--- a/news/1155.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Use security decorators in PAS plugin. [jensens]\ndiff --git a/news/1156.bugfix b/news/1156.bugfix\ndeleted file mode 100644\nindex 034c00495..000000000\n--- a/news/1156.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Drop coding magic first line. Coding magic is no longer needed in Python 3, except if different from utf-8. [jensens]\ndiff --git a/news/1157.bugfix b/news/1157.bugfix\ndeleted file mode 100644\nindex 7255d6c20..000000000\n--- a/news/1157.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix PAS plugin ZMI markup for Zope4+. [jensens]\ndiff --git a/news/1158.bugfix b/news/1158.bugfix\ndeleted file mode 100644\nindex 9f0cf9601..000000000\n--- a/news/1158.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Eliminate non-pythonic \'return None\' usage. [jensens]\ndiff --git a/setup.py b/setup.py\nindex 2ba55b9de..bc563f803 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n import sys\n \n-version = "8.3.3.dev0"\n+version = "8.4.2.dev0"\n \n assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex edd7d103a..745490816 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -146,7 +146,8 @@ def __call__(self):\n         ref_obj = portal.restrictedTraverse(path, None)\n         if ref_obj:\n             value = ref_obj.absolute_url()\n-        return json_compatible(value)\n+            return json_compatible(value)\n+        return json_compatible(path)\n \n \n @adapter(IField, IDexterityContent, Interface)\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 7e57f8c08..eee5d6f96 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -54,7 +54,7 @@ Content-Type: application/json\n     "description": "Congratulations! You have successfully installed Plone.", \n     "title": "Welcome to Plone"\n   }, \n-  "remoteUrl": "http://localhost:55001/plone", \n+  "remoteUrl": "http://plone.org", \n   "review_state": "private", \n   "rights": "", \n   "subjects": [], \ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 7815df2e2..25f8ab759 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -96,7 +96,7 @@ def get_factory(self):\n         pass\n \n     def get_widget(self):\n-        pass\n+        return getattr(self.field, "widget", None)\n \n     def get_widget_params(self):\n         all_params = get_widget_params([self.field.interface])\n@@ -431,7 +431,7 @@ def additional(self):\n             "additional": key_type.additional(),\n         }\n         value_type = getMultiAdapter(\n-            (self.field.key_type, self.context, self.request), IJsonSchemaProvider\n+            (self.field.value_type, self.context, self.request), IJsonSchemaProvider\n         )\n         info["value_type"] = {\n             "schema": value_type.get_schema(),\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-08T11:50:52+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/2887669f6ac4292669e703cf5839e633175bd206

Fix documentation test.

Files changed:
M src/plone/restapi/tests/http-examples/link.resp

b'diff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex eee5d6f96..9a7c04edb 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -54,7 +54,7 @@ Content-Type: application/json\n     "description": "Congratulations! You have successfully installed Plone.", \n     "title": "Welcome to Plone"\n   }, \n-  "remoteUrl": "http://plone.org", \n+  "remoteUrl": "http://localhost:55001/plone",\n   "review_state": "private", \n   "rights": "", \n   "subjects": [], \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-08T13:32:45+02:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/744a00126fd96f7818901820c4bd37158941edc7

Merge pull request #1162 from plone/pyupgrade

cd src &amp;&amp; find . -name "*.py"|xargs pyupgrade --py36-plus

Files changed:
A news/1162.bugfix
M src/plone/restapi/batching.py
M src/plone/restapi/behaviors.py
M src/plone/restapi/controlpanels/__init__.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/controlpanels/__init__.py
M src/plone/restapi/deserializer/controlpanels/types.py
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/deserializer/relationfield.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/imaging.py
M src/plone/restapi/indexers.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/search/handler.py
M src/plone/restapi/search/query.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/collection.py
M src/plone/restapi/serializer/controlpanels/__init__.py
M src/plone/restapi/serializer/controlpanels/types.py
M src/plone/restapi/serializer/converters.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/local_roles.py
M src/plone/restapi/serializer/nextprev.py
M src/plone/restapi/serializer/registry.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/serializer/working_copy.py
M src/plone/restapi/services/actions/get.py
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/addons/get.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/breadcrumbs/get.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/services/contextnavigation/get.py
M src/plone/restapi/services/controlpanels/add.py
M src/plone/restapi/services/controlpanels/delete.py
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/services/controlpanels/update.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/database/get.py
M src/plone/restapi/services/discussion/conversation.py
M src/plone/restapi/services/email_send/post.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/history/get.py
M src/plone/restapi/services/history/patch.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/principals/get.py
M src/plone/restapi/services/querysources/get.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/services/roles/get.py
M src/plone/restapi/services/sources/get.py
M src/plone/restapi/services/system/get.py
M src/plone/restapi/services/tiles/get.py
M src/plone/restapi/services/types/add.py
M src/plone/restapi/services/types/delete.py
M src/plone/restapi/services/types/get.py
M src/plone/restapi/services/types/put.py
M src/plone/restapi/services/types/update.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/vocabularies/get.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/services/workingcopy/create.py
M src/plone/restapi/services/workingcopy/delete.py
M src/plone/restapi/services/workingcopy/update.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/mixin_ordering.py
M src/plone/restapi/tests/performance.py
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_addons.py
M src/plone/restapi/tests/test_auth.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_blocks_serializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_blocks.py
M src/plone/restapi/tests/test_content_get.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_functional_auth.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_registry_serializer.py
M src/plone/restapi/tests/test_resolveuid.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_catalog.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_contextnavigation.py
M src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py
M src/plone/restapi/tests/test_services_database.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_querysources.py
M src/plone/restapi/tests/test_services_querystring.py
M src/plone/restapi/tests/test_services_querystringsearch.py
M src/plone/restapi/tests/test_services_sources.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_services_workingcopy.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py
M src/plone/restapi/tests/test_statictime.py
M src/plone/restapi/tests/test_system.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/upgrades/ordering.py
M src/plone/restapi/upgrades/to0005.py
M src/plone/restapi/upgrades/to0006.py

b'diff --git a/news/1162.bugfix b/news/1162.bugfix\nnew file mode 100644\nindex 000000000..181e82ca3\n--- /dev/null\n+++ b/news/1162.bugfix\n@@ -0,0 +1,3 @@\n+In src run `find . -name "*.py"|xargs pyupgrade --py36-plus`.\n+Then run black and remove six import leftovers. \n+[jensens]\ndiff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex 58c6d1e43..8a79bf4c2 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -7,7 +7,7 @@\n DEFAULT_BATCH_SIZE = 25\n \n \n-class HypermediaBatch(object):\n+class HypermediaBatch:\n     def __init__(self, request, results):\n         self.request = request\n \ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex 138498373..af59e503a 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -20,19 +20,19 @@\n @provider(IFormFieldProvider)\n class IBlocks(model.Schema):\n \n-    model.fieldset("layout", label=_(u"Layout"), fields=["blocks", "blocks_layout"])\n+    model.fieldset("layout", label=_("Layout"), fields=["blocks", "blocks_layout"])\n \n     blocks = JSONField(\n-        title=u"Blocks",\n-        description=u"The JSON representation of the object blocks information. Must be a JSON object.",  # noqa\n+        title="Blocks",\n+        description="The JSON representation of the object blocks information. Must be a JSON object.",  # noqa\n         schema=BLOCKS_SCHEMA,\n         default={},\n         required=False,\n     )\n \n     blocks_layout = JSONField(\n-        title=u"Blocks Layout",\n-        description=u"The JSON representation of the object blocks layout. Must be a JSON array.",  # noqa\n+        title="Blocks Layout",\n+        description="The JSON representation of the object blocks layout. Must be a JSON array.",  # noqa\n         schema=LAYOUT_SCHEMA,\n         default={"items": []},\n         required=False,\ndiff --git a/src/plone/restapi/controlpanels/__init__.py b/src/plone/restapi/controlpanels/__init__.py\nindex ff0664975..993eca30f 100644\n--- a/src/plone/restapi/controlpanels/__init__.py\n+++ b/src/plone/restapi/controlpanels/__init__.py\n@@ -5,7 +5,7 @@\n \n \n @implementer(IControlpanel)\n-class RegistryConfigletPanel(object):\n+class RegistryConfigletPanel:\n     configlet = None\n     configlet_id = None\n     configlet_category_id = None\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 9b1e2b750..9123575df 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -10,7 +10,6 @@\n from plone.uuid.interfaces import IUUID\n from plone.uuid.interfaces import IUUIDAware\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six import string_types\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import subscribers\n@@ -100,7 +99,7 @@ def handle_subblocks(self, block_value):\n             block_value["blocks"] = self._transform(block_value["blocks"])\n \n     def __call__(self, value):\n-        value = super(BlocksJSONFieldDeserializer, self).__call__(value)\n+        value = super().__call__(value)\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n@@ -125,7 +124,7 @@ def __call__(self, value):\n         return value\n \n \n-class ResolveUIDDeserializerBase(object):\n+class ResolveUIDDeserializerBase:\n     """The "url" smart block field.\n \n     This is a generic handler. In all blocks, it converts any "url"\n@@ -144,7 +143,7 @@ def __call__(self, block):\n         # Convert absolute links to resolveuid\n         for field in ["url", "href"]:\n             link = block.get(field, "")\n-            if link and isinstance(link, string_types):\n+            if link and isinstance(link, str):\n                 block[field] = path2uid(context=self.context, link=link)\n             elif link and isinstance(link, list):\n                 # Detect if it has an object inside with an "@id" key (object_widget)\n@@ -158,14 +157,14 @@ def __call__(self, block):\n                         result.append(item_clone)\n \n                     block[field] = result\n-                elif len(link) > 0 and isinstance(link[0], string_types):\n+                elif len(link) > 0 and isinstance(link[0], str):\n                     block[field] = [\n                         path2uid(context=self.context, link=item) for item in link\n                     ]\n         return block\n \n \n-class TextBlockDeserializerBase(object):\n+class TextBlockDeserializerBase:\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -187,7 +186,7 @@ def __call__(self, block):\n         return block\n \n \n-class HTMLBlockDeserializerBase(object):\n+class HTMLBlockDeserializerBase:\n     order = 100\n     block_type = "html"\n     disabled = os.environ.get("disable_transform_html", False)\n@@ -209,7 +208,7 @@ def __call__(self, block):\n         return block\n \n \n-class ImageBlockDeserializerBase(object):\n+class ImageBlockDeserializerBase:\n     order = 100\n     block_type = "image"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -284,7 +283,7 @@ def transform_links(context, value, transformer):\n             link["@id"] = transformer(context, link["@id"])\n \n \n-class SlateBlockTransformer(object):\n+class SlateBlockTransformer:\n     """SlateBlockTransformer."""\n \n     field = "value"\n@@ -300,7 +299,7 @@ def __call__(self, block):\n         for child in children:\n             node_type = child.get("type")\n             if node_type:\n-                handler = getattr(self, "handle_{}".format(node_type), None)\n+                handler = getattr(self, f"handle_{node_type}", None)\n                 if handler:\n                     handler(child)\n \ndiff --git a/src/plone/restapi/deserializer/controlpanels/__init__.py b/src/plone/restapi/deserializer/controlpanels/__init__.py\nindex 499efa66d..53b9a2a07 100644\n--- a/src/plone/restapi/deserializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/deserializer/controlpanels/__init__.py\n@@ -15,13 +15,13 @@\n \n \n @implementer(IDexterityContent)\n-class FakeDXContext(object):\n+class FakeDXContext:\n     """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n @implementer(IDeserializeFromJson)\n @adapter(IControlpanel)\n-class ControlpanelDeserializeFromJson(object):\n+class ControlpanelDeserializeFromJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\ndiff --git a/src/plone/restapi/deserializer/controlpanels/types.py b/src/plone/restapi/deserializer/controlpanels/types.py\nindex 516b17fad..13c188fa5 100644\n--- a/src/plone/restapi/deserializer/controlpanels/types.py\n+++ b/src/plone/restapi/deserializer/controlpanels/types.py\n@@ -19,4 +19,4 @@ def deserialize_item(self, proxy):\n     def __call__(self, item=None):\n         if item is not None:\n             return self.deserialize_item(item)\n-        return super(DexterityTypesControlpanelDeserializeFromJson, self).__call__()\n+        return super().__call__()\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex 87670fefd..affe7b770 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -25,7 +25,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IDexterityContent, Interface)\n-class DeserializeFromJson(OrderingMixin, object):\n+class DeserializeFromJson(OrderingMixin):\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -83,7 +83,7 @@ def get_schema_data(self, data, validate_all):\n             write_permissions = mergedTaggedValueDict(schema, WRITE_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n-                __traceback_info__ = "field={}".format(field)\n+                __traceback_info__ = f"field={field}"\n \n                 field_data = schema_data.setdefault(schema, {})\n \ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex 317ba37dc..838d5672c 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -29,17 +29,12 @@\n import dateutil\n import six\n \n-if six.PY2:\n-    import HTMLParser\n-\n-    html_parser = HTMLParser.HTMLParser()\n-else:\n-    import html as html_parser\n+import html as html_parser\n \n \n @implementer(IFieldDeserializer)\n @adapter(IField, IDexterityContent, IBrowserRequest)\n-class DefaultFieldDeserializer(object):\n+class DefaultFieldDeserializer:\n     def __init__(self, field, context, request):\n         self.field = field\n         if IField.providedBy(self.field):\n@@ -48,7 +43,7 @@ def __init__(self, field, context, request):\n         self.request = request\n \n     def __call__(self, value):\n-        if not isinstance(value, six.text_type):\n+        if not isinstance(value, str):\n             self.field.validate(value)\n             return value\n \n@@ -61,13 +56,13 @@ def __call__(self, value):\n @adapter(ITextLine, IDexterityContent, IBrowserRequest)\n class TextLineFieldDeserializer(DefaultFieldDeserializer):\n     def __call__(self, value):\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             value = IFromUnicode(self.field).fromUnicode(value)\n \n         # Mimic what z3c.form does in it\'s BaseDataConverter.\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             value = value.strip()\n-            if value == u"":\n+            if value == "":\n                 value = self.field.missing_value\n \n         self.field.validate(value)\n@@ -78,7 +73,7 @@ def __call__(self, value):\n @adapter(ITextLine, ILink, IBrowserRequest)\n class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n     def __call__(self, value):\n-        value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n+        value = super().__call__(value)\n         if self.field.getName() == "remoteUrl":\n             portal = getMultiAdapter(\n                 (self.context, self.context.REQUEST), name="plone_portal_state"\n@@ -119,7 +114,7 @@ def __call__(self, value):\n         try:\n             dt = dateutil.parser.parse(value)\n         except ValueError:\n-            raise ValueError(u"Invalid date: {}".format(value))\n+            raise ValueError(f"Invalid date: {value}")\n \n         # Convert to TZ aware in UTC\n         if dt.tzinfo is not None:\n@@ -219,7 +214,7 @@ def __call__(self, value):\n             # using ``timetz()`` would be timezone aware.\n             value = dateutil.parser.parse(value).time()\n         except ValueError:\n-            raise ValueError(u"Invalid time: {}".format(value))\n+            raise ValueError(f"Invalid time: {value}")\n \n         self.field.validate(value)\n         return value\n@@ -254,11 +249,11 @@ def __call__(self, value):\n             content_type = value.get("content-type", content_type)\n             filename = value.get("filename", filename)\n             data = value.get("data", "")\n-            if isinstance(data, six.text_type):\n+            if isinstance(data, str):\n                 data = data.encode("utf-8")\n             if "encoding" in value:\n                 data = codecs.decode(data, value["encoding"])\n-            if isinstance(data, six.text_type):\n+            if isinstance(data, str):\n                 data = data.encode("utf-8")\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get("content-type", content_type)\n@@ -291,7 +286,7 @@ def __call__(self, value):\n         if isinstance(value, dict):\n             content_type = value.get("content-type", content_type)\n             encoding = value.get("encoding", encoding)\n-            data = value.get("data", u"")\n+            data = value.get("data", "")\n         elif isinstance(value, TUSUpload):\n             content_type = value.metadata().get("content-type", content_type)\n             with open(value.filepath, "rb") as f:\ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 2d009db93..b1e167db5 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -24,7 +24,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IRoleManager, Interface)\n-class DeserializeFromJson(object):\n+class DeserializeFromJson:\n     """JSON deserializer for local roles"""\n \n     def __init__(self, context, request):\n@@ -45,7 +45,7 @@ def __call__(self):\n         # roles\n         roles_reindex = False\n         new_roles = data.get("entries", None)\n-        managed_roles = frozenset([r["id"] for r in sharing_view.roles()])\n+        managed_roles = frozenset(r["id"] for r in sharing_view.roles())\n \n         if new_roles is not None:\n             # the roles are converted into a FrozenSet so we have to filter\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex fa07f4e92..899bd414a 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -6,7 +6,7 @@\n import six\n \n \n-class OrderingMixin(object):\n+class OrderingMixin:\n     def handle_ordering(self, data):\n         if "ordering" in data:\n             obj_id = data["ordering"]["obj_id"]\n@@ -43,11 +43,11 @@ def reorderItems(self, obj_id, delta, subset_ids):\n \n         # Make sure we use bytestring ids for PY2.\n         if six.PY2:\n-            if isinstance(obj_id, six.text_type):\n+            if isinstance(obj_id, str):\n                 obj_id = obj_id.encode("utf-8")\n             if subset_ids:\n                 subset_ids = [\n-                    id_.encode("utf-8") if isinstance(id_, six.text_type) else id_\n+                    id_.encode("utf-8") if isinstance(id_, str) else id_\n                     for id_ in subset_ids\n                 ]\n \ndiff --git a/src/plone/restapi/deserializer/relationfield.py b/src/plone/restapi/deserializer/relationfield.py\nindex 9521d8b36..33102b895 100644\n--- a/src/plone/restapi/deserializer/relationfield.py\n+++ b/src/plone/restapi/deserializer/relationfield.py\n@@ -29,8 +29,8 @@ def __call__(self, value):\n             intids = queryUtility(IIntIds)\n             obj = intids.queryObject(value)\n             resolved_by = "intid"\n-        elif isinstance(value, six.string_types):\n-            if six.PY2 and isinstance(value, six.text_type):\n+        elif isinstance(value, str):\n+            if six.PY2 and isinstance(value, str):\n                 value = value.encode("utf8")\n             portal = getMultiAdapter(\n                 (self.context, self.request), name="plone_portal_state"\n@@ -54,9 +54,7 @@ def __call__(self, value):\n \n         if obj is None:\n             self.request.response.setStatus(400)\n-            raise ValueError(\n-                u"Could not resolve object for {}={}".format(resolved_by, value)\n-            )\n+            raise ValueError(f"Could not resolve object for {resolved_by}={value}")\n \n         self.field.validate(obj)\n         return obj\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex d4ea72cb1..10e09989e 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -13,7 +13,7 @@\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n-class DeserializeSiteRootFromJson(OrderingMixin, object):\n+class DeserializeSiteRootFromJson(OrderingMixin):\n     """JSON deserializer for the Plone site root"""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/imaging.py b/src/plone/restapi/imaging.py\nindex 68c1a40e8..bca29ada0 100644\n--- a/src/plone/restapi/imaging.py\n+++ b/src/plone/restapi/imaging.py\n@@ -1,5 +1,3 @@\n-from __future__ import division\n-from six.moves import map\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.globalrequest import getRequest\n@@ -32,9 +30,9 @@ def get_scales(context, field, width, height):\n         actual_height = scale.height\n \n         scales[name] = {\n-            u"download": url,\n-            u"width": actual_width,\n-            u"height": actual_height,\n+            "download": url,\n+            "width": actual_width,\n+            "height": actual_height,\n         }\n \n     return scales\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex bc0861f0f..9e9205a25 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -15,26 +15,18 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n-import six\n-\n \n def _extract_text(block):\n     result = ""\n     for paragraph in block.get("text", {}).get("blocks", {}):\n         text = paragraph["text"]\n-        if six.PY2:\n-            if isinstance(text, six.text_type):\n-                text = text.encode("utf-8", "replace")\n-            if text:\n-                result = " ".join((result, text))\n-        else:\n-            result = " ".join((result, text))\n+        result = " ".join((result, text))\n     return result\n \n \n @implementer(IBlockSearchableText)\n @adapter(IBlocks, IBrowserRequest)\n-class TextBlockSearchableText(object):\n+class TextBlockSearchableText:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -74,7 +66,7 @@ def SearchableText_blocks(obj):\n     return " ".join(blocks_text)\n \n \n-class SlateTextIndexer(object):\n+class SlateTextIndexer:\n     """SlateTextIndexer."""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex f91188f80..183076ddd 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -150,7 +150,7 @@ def manage_updateConfig(self, REQUEST):\n     def _decode_token(self, token, verify=True):\n         if self.use_keyring:\n             manager = getUtility(IKeyManager)\n-            for secret in manager[u"_system"]:\n+            for secret in manager["_system"]:\n                 if secret is None:\n                     continue\n                 payload = self._jwt_decode(token, secret + self._path(), verify=verify)\n@@ -160,7 +160,7 @@ def _decode_token(self, token, verify=True):\n             return self._jwt_decode(token, self._secret + self._path(), verify=verify)\n \n     def _jwt_decode(self, token, secret, verify=True):\n-        if isinstance(token, six.text_type):\n+        if isinstance(token, str):\n             token = token.encode("utf-8")\n         try:\n             return jwt.decode(token, secret, verify=verify, algorithms=["HS256"])\n@@ -197,8 +197,7 @@ def create_token(self, userid, timeout=None, data=None):\n         if data is not None:\n             payload.update(data)\n         token = jwt.encode(payload, self._signing_secret(), algorithm="HS256")\n-        if not six.PY2:\n-            token = token.decode("utf-8")\n+        token = token.decode("utf-8")\n         if self.store_tokens:\n             if self._tokens is None:\n                 self._tokens = OOBTree()\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex 2e94cbb9f..ca9367501 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -16,7 +16,7 @@\n     PLONE5 = True\n \n \n-class SearchHandler(object):\n+class SearchHandler:\n     """Executes a catalog search based on a query dict, and returns\n     JSON compatible results.\n     """\ndiff --git a/src/plone/restapi/search/query.py b/src/plone/restapi/search/query.py\nindex 2a1413c8d..ad89461b0 100644\n--- a/src/plone/restapi/search/query.py\n+++ b/src/plone/restapi/search/query.py\n@@ -59,7 +59,7 @@\n \n @implementer(IZCatalogCompatibleQuery)\n @adapter(Interface, Interface)\n-class ZCatalogCompatibleQueryAdapter(object):\n+class ZCatalogCompatibleQueryAdapter:\n     """Converts a Python dictionary representing a catalog query, but with\n     possibly wrong value types, to a ZCatalog compatible query dict suitable\n     for passing to catalog.searchResults().\n@@ -116,7 +116,7 @@ def __call__(self, query):\n         return query\n \n \n-class BaseIndexQueryParser(object):\n+class BaseIndexQueryParser:\n     """Base class for IIndexQueryParser adapters.\n \n     See the IIndexQueryParser interface documentation for details.\n@@ -177,7 +177,7 @@ def parse_complex_query(self, idx_query):\n                     )\n             else:\n                 log.warning(\n-                    "Unrecognized query option %r for index %r" % (opt_key, self.index)\n+                    f"Unrecognized query option {opt_key!r} for index {self.index!r}"\n                 )\n                 # Pass along unknown option without modification\n                 parsed_query[opt_key] = opt_value\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex e403e4768..cd3a09b0d 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -11,7 +11,6 @@\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.schema import IJSONField\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from six import string_types\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import subscribers\n@@ -108,7 +107,7 @@ def __call__(self):\n         return json_compatible(value)\n \n \n-class ResolveUIDSerializerBase(object):\n+class ResolveUIDSerializerBase:\n     order = 1\n     block_type = None\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -121,7 +120,7 @@ def __call__(self, value):\n         for field in ["url", "href"]:\n             if field in value.keys():\n                 link = value.get(field, "")\n-                if isinstance(link, string_types):\n+                if isinstance(link, str):\n                     value[field] = uid_to_url(link)\n                 elif isinstance(link, list):\n                     if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n@@ -132,12 +131,12 @@ def __call__(self, value):\n                             result.append(item_clone)\n \n                         value[field] = result\n-                    elif len(link) > 0 and isinstance(link[0], string_types):\n+                    elif len(link) > 0 and isinstance(link[0], str):\n                         value[field] = [uid_to_url(item) for item in link]\n         return value\n \n \n-class TextBlockSerializerBase(object):\n+class TextBlockSerializerBase:\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex 38aad7bd6..d73bb46d8 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -18,7 +18,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(Lazy, Interface)\n-class LazyCatalogResultSerializer(object):\n+class LazyCatalogResultSerializer:\n     """Serializes a ZCatalog resultset (one of the subclasses of `Lazy`) to\n     a Python data structure that can in turn be serialized to JSON.\n     """\ndiff --git a/src/plone/restapi/serializer/collection.py b/src/plone/restapi/serializer/collection.py\nindex 94d72940b..c061195c0 100644\n--- a/src/plone/restapi/serializer/collection.py\n+++ b/src/plone/restapi/serializer/collection.py\n@@ -14,7 +14,7 @@\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n     def __call__(self, version=None, include_items=True):\n-        result = super(SerializeCollectionToJson, self).__call__(version=version)\n+        result = super().__call__(version=version)\n \n         include_items = self.request.form.get("include_items", include_items)\n         include_items = boolean_value(include_items)\ndiff --git a/src/plone/restapi/serializer/controlpanels/__init__.py b/src/plone/restapi/serializer/controlpanels/__init__.py\nindex ad3508e3d..addd73246 100644\n--- a/src/plone/restapi/serializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/serializer/controlpanels/__init__.py\n@@ -21,7 +21,7 @@\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IControlpanel)\n-class ControlpanelSummarySerializeToJson(object):\n+class ControlpanelSummarySerializeToJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n \n@@ -69,7 +69,7 @@ def get_jsonschema_for_controlpanel(controlpanel, context, request, form=None):\n \n @implementer(ISerializeToJson)\n @adapter(IControlpanel)\n-class ControlpanelSerializeToJson(object):\n+class ControlpanelSerializeToJson:\n     def __init__(self, controlpanel):\n         self.controlpanel = controlpanel\n         self.schema = self.controlpanel.schema\ndiff --git a/src/plone/restapi/serializer/controlpanels/types.py b/src/plone/restapi/serializer/controlpanels/types.py\nindex 5cdf6c059..6e33b4178 100644\n--- a/src/plone/restapi/serializer/controlpanels/types.py\n+++ b/src/plone/restapi/serializer/controlpanels/types.py\n@@ -91,7 +91,7 @@ def __call__(self, item=None):\n         if item is not None:\n             return self.serialize_item(item)\n \n-        json = super(DexterityTypesControlpanelSerializeToJson, self).__call__()\n+        json = super().__call__()\n         json["items"] = []\n \n         portal = getSite()\ndiff --git a/src/plone/restapi/serializer/converters.py b/src/plone/restapi/serializer/converters.py\nindex dcc2cc0dc..86b46969a 100644\n--- a/src/plone/restapi/serializer/converters.py\n+++ b/src/plone/restapi/serializer/converters.py\n@@ -11,8 +11,6 @@\n from plone.restapi.interfaces import IContextawareJsonCompatible\n from plone.restapi.interfaces import IJsonCompatible\n from Products.CMFPlone.utils import safe_unicode\n-from six.moves import map\n-from six.moves import zip\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n@@ -23,7 +21,6 @@\n \n import Missing\n import pytz\n-import six\n \n \n # import re\n@@ -77,12 +74,12 @@ def default_converter(value):\n     if value is None:\n         return value\n \n-    if type(value) in (six.text_type, bool, int, float, int):\n+    if type(value) in (str, bool, int, float, int):\n         return value\n \n     raise TypeError(\n         "No converter for making"\n-        " {0!r} ({1}) JSON compatible.".format(value, type(value))\n+        " {!r} ({}) JSON compatible.".format(value, type(value))\n     )\n \n \n@@ -178,7 +175,7 @@ def timedelta_converter(value):\n \n @adapter(IRichTextValue, IDexterityContent)\n @implementer(IContextawareJsonCompatible)\n-class RichtextDXContextConverter(object):\n+class RichtextDXContextConverter:\n     def __init__(self, value, context):\n         self.value = value\n         self.context = context\n@@ -187,9 +184,9 @@ def __call__(self):\n         value = self.value\n         output = value.output_relative_to(self.context)\n         return {\n-            u"data": json_compatible(output),\n-            u"content-type": json_compatible(value.mimeType),\n-            u"encoding": json_compatible(value.encoding),\n+            "data": json_compatible(output),\n+            "content-type": json_compatible(value.mimeType),\n+            "encoding": json_compatible(value.encoding),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 2e3ada2e3..c4fc8ff5a 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -17,7 +17,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IConversation, IRequest)\n-class ConversationSerializer(object):\n+class ConversationSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -44,18 +44,18 @@ def __call__(self):\n \n @implementer(ISerializeToJson)\n @adapter(IComment, IRequest)\n-class CommentSerializer(object):\n+class CommentSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, include_items=True):\n         content_url = self.context.__parent__.__parent__.absolute_url()\n-        comments_url = "{}/@comments".format(content_url)\n-        url = "{}/{}".format(comments_url, self.context.id)\n+        comments_url = f"{content_url}/@comments"\n+        url = f"{comments_url}/{self.context.id}"\n \n         if self.context.in_reply_to:\n-            parent_url = "{}/{}".format(comments_url, self.context.in_reply_to)\n+            parent_url = f"{comments_url}/{self.context.in_reply_to}"\n             in_reply_to = str(self.context.in_reply_to)\n         else:\n             parent_url = None\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex b7690932f..9632e1043 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -32,7 +32,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n-class SerializeToJson(object):\n+class SerializeToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -143,7 +143,7 @@ def _build_query(self):\n         return query\n \n     def __call__(self, version=None, include_items=True):\n-        folder_metadata = super(SerializeFolderToJson, self).__call__(version=version)\n+        folder_metadata = super().__call__(version=version)\n \n         folder_metadata.update({"is_folderish": True})\n         result = folder_metadata\n@@ -176,7 +176,7 @@ def __call__(self, version=None, include_items=True):\n \n @adapter(IDexterityContent, Interface)\n @implementer(IObjectPrimaryFieldTarget)\n-class DexterityObjectPrimaryFieldTarget(object):\n+class DexterityObjectPrimaryFieldTarget:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 110abb14f..745490816 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -28,7 +28,7 @@\n \n @adapter(IField, IDexterityContent, Interface)\n @implementer(IFieldSerializer)\n-class DefaultFieldSerializer(object):\n+class DefaultFieldSerializer:\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -78,7 +78,7 @@ def __call__(self):\n             for v in value:\n                 try:\n                     term = value_type.vocabulary.getTerm(v)\n-                    values.append({u"token": term.token, u"title": term.title})\n+                    values.append({"token": term.token, "title": term.title})\n                 except LookupError:\n                     log.warning("Term lookup error: %r" % v)\n             value = values\n@@ -137,7 +137,7 @@ def __call__(self):\n class TextLineFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         if self.field.getName() != "remoteUrl":\n-            return super(TextLineFieldSerializer, self).__call__()\n+            return super().__call__()\n         value = self.get_value()\n         path = replace_link_variables_by_paths(context=self.context, url=value)\n         portal = getMultiAdapter(\n@@ -152,7 +152,7 @@ def __call__(self):\n \n @adapter(IField, IDexterityContent, Interface)\n @implementer(IPrimaryFieldTarget)\n-class DefaultPrimaryFieldTarget(object):\n+class DefaultPrimaryFieldTarget:\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex 930b5b7db..1d6216fe5 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -1,8 +1,6 @@\n from plone.restapi.interfaces import IExpandableElement\n from zope.component import getAdapters\n \n-import six\n-\n \n def expandable_elements(context, request):\n     """Returns a dict containing all expandable elements."""\n@@ -18,7 +16,7 @@ def expandable_elements(context, request):\n \n \n def update_dict_recursively(d, u):\n-    for key, value in six.iteritems(u):\n+    for key, value in u.items():\n         if isinstance(value, dict):\n             r = update_dict_recursively(d.get(key, {}), value)\n             d[key] = r\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex 618726ebe..c9656f155 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -8,7 +8,7 @@\n from zope.interface import Interface\n \n \n-class BaseSerializer(object):\n+class BaseSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -18,7 +18,7 @@ def __call__(self):\n         portal = getSite()\n \n         return {\n-            "@id": "{}/@groups/{}".format(portal.absolute_url(), group.id),\n+            "@id": f"{portal.absolute_url()}/@groups/{group.id}",\n             "id": group.id,\n             "groupname": group.getGroupName(),\n             "email": group.getProperty("email"),\n@@ -38,7 +38,7 @@ class SerializeGroupToJsonSummary(BaseSerializer):\n @adapter(IGroupData, Interface)\n class SerializeGroupToJson(BaseSerializer):\n     def __call__(self):\n-        data = super(SerializeGroupToJson, self).__call__()\n+        data = super().__call__()\n         group = self.context\n         members = group.getGroupMemberIds()\n         batch = HypermediaBatch(self.request, members)\ndiff --git a/src/plone/restapi/serializer/local_roles.py b/src/plone/restapi/serializer/local_roles.py\nindex 5cea4d757..f4d374f53 100644\n--- a/src/plone/restapi/serializer/local_roles.py\n+++ b/src/plone/restapi/serializer/local_roles.py\n@@ -13,7 +13,7 @@\n \n @adapter(IRoleManager, Interface)\n @implementer(ISerializeToJson)\n-class SerializeLocalRolesToJson(object):\n+class SerializeLocalRolesToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/nextprev.py b/src/plone/restapi/serializer/nextprev.py\nindex b9f491ba0..5671dbd82 100644\n--- a/src/plone/restapi/serializer/nextprev.py\n+++ b/src/plone/restapi/serializer/nextprev.py\n@@ -20,7 +20,7 @@ def __init__(self, context):\n         self.order = self.context.objectIds()\n \n \n-class NextPrevious(object):\n+class NextPrevious:\n     """Facade with more pythonic interface"""\n \n     def __init__(self, context):\ndiff --git a/src/plone/restapi/serializer/registry.py b/src/plone/restapi/serializer/registry.py\nindex fc9676092..943033ad5 100644\n--- a/src/plone/restapi/serializer/registry.py\n+++ b/src/plone/restapi/serializer/registry.py\n@@ -10,7 +10,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IRegistry, IRequest)\n-class SerializeRegistryToJson(object):\n+class SerializeRegistryToJson:\n     def __init__(self, registry, request):\n         self.registry = registry\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 2c6b62d06..40d1a03e8 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -16,7 +16,7 @@\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n-class SerializeSiteRootToJson(object):\n+class SerializeSiteRootToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex 7b64e8720..52768ef7a 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -9,13 +9,13 @@\n from zope.interface import Interface\n \n # fmt: off\n-DEFAULT_METADATA_FIELDS = set([\n+DEFAULT_METADATA_FIELDS = {\n     \'@id\',\n     \'@type\',\n     \'description\',\n     \'review_state\',\n     \'title\',\n-])\n+}\n \n FIELD_ACCESSORS = {\n     "@id": "getURL",\n@@ -24,22 +24,22 @@\n     "title": "Title",\n }\n \n-NON_METADATA_ATTRIBUTES = set([\n+NON_METADATA_ATTRIBUTES = {\n     "getPath",\n     "getURL",\n-])\n+}\n \n-BLACKLISTED_ATTRIBUTES = set([\n+BLACKLISTED_ATTRIBUTES = {\n     \'getDataOrigin\',\n     \'getObject\',\n     \'getUserData\',\n-])\n+}\n # fmt: on\n \n \n @implementer(ISerializeToJsonSummary)\n @adapter(Interface, Interface)\n-class DefaultJSONSummarySerializer(object):\n+class DefaultJSONSummarySerializer:\n     """Default ISerializeToJsonSummary adapter.\n \n     Requires context to be adaptable to IContentListingObject, which is\n@@ -87,7 +87,7 @@ def metadata_fields(self):\n \n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\n-class SiteRootJSONSummarySerializer(object):\n+class SiteRootJSONSummarySerializer:\n     """ISerializeToJsonSummary adapter for the Plone Site root."""\n \n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex b9882790c..195e3ee31 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -13,7 +13,7 @@\n \n @implementer(ISerializeToJsonSummary)\n @adapter(ITileType, Interface)\n-class TileSummarySerializeToJson(object):\n+class TileSummarySerializeToJson:\n     def __init__(self, tile, request):\n         self.tile = tile\n \n@@ -60,7 +60,7 @@ def get_jsonschema_for_tile(tile, context, request):\n \n @implementer(ISerializeToJson)\n @adapter(ITileType, Interface)\n-class TileSerializeToJson(object):\n+class TileSerializeToJson:\n     def __init__(self, tile, request):\n         self.tile = tile\n         self.request = request\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 21e206eca..1dbae7cc6 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -11,7 +11,7 @@\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n \n \n-class BaseSerializer(object):\n+class BaseSerializer:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -24,10 +24,10 @@ def __call__(self):\n         roles = user.getRoles()\n         # Anonymous and Authenticated are pseudo roles assign automatically\n         # to logged-in or logged-out users. They should not be exposed here\n-        roles = list(set(roles) - set(["Anonymous", "Authenticated"]))\n+        roles = list(set(roles) - {"Anonymous", "Authenticated"})\n \n         data = {\n-            "@id": "{}/@users/{}".format(portal.absolute_url(), user.id),\n+            "@id": f"{portal.absolute_url()}/@users/{user.id}",\n             "id": user.id,\n             "username": user.getUserName(),\n             "roles": roles,\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex 097edc9eb..1e78cdcd1 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -11,11 +11,9 @@\n from zope.schema.interfaces import ITokenizedTerm\n from zope.schema.interfaces import IVocabulary\n \n-import six\n-\n \n @implementer(ISerializeToJson)\n-class SerializeVocabLikeToJson(object):\n+class SerializeVocabLikeToJson:\n     """Base implementation to serialize vocabularies and sources to JSON.\n \n     Implements server-side filtering as well as batching.\n@@ -83,7 +81,7 @@ class SerializeSourceToJson(SerializeVocabLikeToJson):\n \n @implementer(ISerializeToJson)\n @adapter(ITokenizedTerm, Interface)\n-class SerializeTermToJson(object):\n+class SerializeTermToJson:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -92,6 +90,6 @@ def __call__(self):\n         term = self.context\n         token = term.token\n         title = term.title if ITitledTokenizedTerm.providedBy(term) else token\n-        if isinstance(title, six.binary_type):\n+        if isinstance(title, bytes):\n             title = title.decode("UTF-8")\n         return {"token": token, "title": translate(title, context=self.request)}\ndiff --git a/src/plone/restapi/serializer/working_copy.py b/src/plone/restapi/serializer/working_copy.py\nindex caf9f1765..785f377e0 100644\n--- a/src/plone/restapi/serializer/working_copy.py\n+++ b/src/plone/restapi/serializer/working_copy.py\n@@ -103,7 +103,7 @@ def creator_url(self):\n         creator = self.creator()\n         if creator is not None:\n             portal_url = getToolByName(self.context, "portal_url")\n-            return "{0}/author/{1}".format(portal_url(), creator.getId())\n+            return f"{portal_url()}/author/{creator.getId()}"\n \n     @memoize\n     def creator_name(self):\ndiff --git a/src/plone/restapi/services/actions/get.py b/src/plone/restapi/services/actions/get.py\nindex 72be50d33..a14c3e581 100644\n--- a/src/plone/restapi/services/actions/get.py\n+++ b/src/plone/restapi/services/actions/get.py\n@@ -11,13 +11,13 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Actions(object):\n+class Actions:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {"actions": {"@id": "{}/@actions".format(self.context.absolute_url())}}\n+        result = {"actions": {"@id": f"{self.context.absolute_url()}/@actions"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 9e1a676f5..678076a12 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -16,7 +16,7 @@\n logger = logging.getLogger("Plone")\n \n \n-class Addons(object):\n+class Addons:\n     """Performs install/upgrade/uninstall functions on an addon.\n     Pulled, mostly intact, from Plone 5.1\'s products control panel.\n     If we reach the point when plone.restapi isn\'t supporting releases\n@@ -70,7 +70,7 @@ def _install_profile_info(self, product_id):\n                 prof["product"]\n                 in (\n                     product_id,\n-                    "Products.{0}".format(product_id),\n+                    f"Products.{product_id}",\n                 )\n             )\n         ]\n@@ -224,13 +224,13 @@ def is_product_installable(self, product_id, allow_hidden=False):\n                     return False\n                 # A new error is found, register it\n                 self.errors[product_id] = dict(\n-                    type=_(u"dependency_missing", default=u"Missing dependency"),\n+                    type=_("dependency_missing", default="Missing dependency"),\n                     value=e.args[0],\n                     product_id=product_id,\n                 )\n             else:\n                 self.errors[product_id] = dict(\n-                    type=_(u"dependency_missing", default=u"Missing dependency"),\n+                    type=_("dependency_missing", default="Missing dependency"),\n                     value=e.args[0],\n                     product_id=product_id,\n                 )\ndiff --git a/src/plone/restapi/services/addons/get.py b/src/plone/restapi/services/addons/get.py\nindex 905b68682..1cc00fe53 100644\n--- a/src/plone/restapi/services/addons/get.py\n+++ b/src/plone/restapi/services/addons/get.py\n@@ -7,7 +7,7 @@\n @implementer(IPublishTraverse)\n class AddonsGet(Service):\n     def __init__(self, context, request):\n-        super(AddonsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.addons = Addons(context, request)\n \n@@ -26,7 +26,7 @@ def reply(self):\n                 return []\n \n         result = {\n-            "items": {"@id": "{}/@addons".format(self.context.absolute_url())},\n+            "items": {"@id": f"{self.context.absolute_url()}/@addons"},\n         }\n         addons_data = []\n         for addon in all_addons.values():\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex 06df83e07..4ab6fc63b 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -17,7 +17,7 @@ class AddonsPost(Service):\n     """Performs install/upgrade/uninstall functions on an addon."""\n \n     def __init__(self, context, request):\n-        super(AddonsPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.errors = {}\n         self.addons = Addons(context, request)\n@@ -41,7 +41,7 @@ def reply(self):\n         elif action == "upgrade":\n             result = self.addons.upgrade_product(addon)\n         else:\n-            raise Exception("Unknown action {}".format(action))\n+            raise Exception(f"Unknown action {action}")\n \n         prefer = self.request.getHeader("Prefer")\n         if prefer == "return=representation":\n@@ -50,9 +50,7 @@ def reply(self):\n             )\n             all_addons = control_panel.get_addons()\n \n-            result = {\n-                "items": {"@id": "{}/@addons".format(self.context.absolute_url())}\n-            }\n+            result = {"items": {"@id": f"{self.context.absolute_url()}/@addons"}}\n             addons_data = []\n             for a in all_addons.values():\n                 addons_data.append(self.addons.serializeAddon(a))\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex 8ff040830..0862471da 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -34,7 +34,7 @@ def reply(self):\n         creds = plugin.extractCredentials(self.request)\n         if creds and "token" in creds and plugin.delete_token(creds["token"]):\n             self.request.response.setStatus(200)\n-            return super(Logout, self).reply()\n+            return super().reply()\n \n         self.request.response.setStatus(400)\n         return dict(error=dict(type="Logout failed", message="Unknown token"))\ndiff --git a/src/plone/restapi/services/breadcrumbs/get.py b/src/plone/restapi/services/breadcrumbs/get.py\nindex f37b6eddf..c897c8d95 100644\n--- a/src/plone/restapi/services/breadcrumbs/get.py\n+++ b/src/plone/restapi/services/breadcrumbs/get.py\n@@ -8,17 +8,13 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Breadcrumbs(object):\n+class Breadcrumbs:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            "breadcrumbs": {\n-                "@id": "{}/@breadcrumbs".format(self.context.absolute_url())\n-            }\n-        }\n+        result = {"breadcrumbs": {"@id": f"{self.context.absolute_url()}/@breadcrumbs"}}\n         if not expand:\n             return result\n \ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 71f22c8ad..1f1a52e97 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -72,7 +72,7 @@ def reply(self):\n         if deserializer is None:\n             self.request.response.setStatus(501)\n             return dict(\n-                error=dict(message="Cannot deserialize type {}".format(obj.portal_type))\n+                error=dict(message=f"Cannot deserialize type {obj.portal_type}")\n             )\n \n         try:\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 19c2c4a38..02cc95e1d 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -41,7 +41,7 @@ class UploadOptions(Service):\n     def reply(self):\n         for name, value in TUS_OPTIONS_RESPONSE_HEADERS.items():\n             self.request.response.setHeader(name, value)\n-        return super(UploadOptions, self).reply()\n+        return super().reply()\n \n \n class TUSBaseService(Service):\n@@ -119,17 +119,17 @@ def reply(self):\n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\n             "Location",\n-            "{}/@tus-upload/{}".format(self.context.absolute_url(), tus_upload.uid),\n+            f"{self.context.absolute_url()}/@tus-upload/{tus_upload.uid}",\n         )\n         self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n-        return super(UploadPost, self).reply()\n+        return super().reply()\n \n \n @implementer(IPublishTraverse)\n class UploadFileBase(TUSBaseService):\n     def __init__(self, context, request):\n-        super(UploadFileBase, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.uid = None\n \n     def publishTraverse(self, request, name):\n@@ -175,16 +175,12 @@ def reply(self):\n         if not self.check_tus_version():\n             return self.unsupported_version()\n \n-        self.request.response.setHeader(\n-            "Upload-Length", "{}".format(tus_upload.length())\n-        )\n-        self.request.response.setHeader(\n-            "Upload-Offset", "{}".format(tus_upload.offset())\n-        )\n+        self.request.response.setHeader("Upload-Length", f"{tus_upload.length()}")\n+        self.request.response.setHeader("Upload-Offset", f"{tus_upload.offset()}")\n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n         self.request.response.setHeader("Cache-Control", "no-store")\n         self.request.response.setStatus(200, lock=1)\n-        return super(UploadHead, self).reply()\n+        return super().reply()\n \n \n @implementer(IPublishTraverse)\n@@ -225,7 +221,7 @@ def reply(self):\n             self.request.response.setHeader("Upload-Expires", tus_upload.expires())\n \n         self.request.response.setHeader("Tus-Resumable", "1.0.0")\n-        self.request.response.setHeader("Upload-Offset", "{}".format(offset))\n+        self.request.response.setHeader("Upload-Offset", f"{offset}")\n         return self.reply_no_content()\n \n     def create_or_modify_content(self, tus_upload):\n@@ -267,7 +263,7 @@ def create_or_modify_content(self, tus_upload):\n         if deserializer is None:\n             return self.error(\n                 "Not Implemented",\n-                "Cannot deserialize type {}".format(obj.portal_type),\n+                f"Cannot deserialize type {obj.portal_type}",\n                 501,\n             )\n         try:\n@@ -288,7 +284,7 @@ def create_or_modify_content(self, tus_upload):\n         self.request.response.setHeader("Location", obj.absolute_url())\n \n \n-class TUSUpload(object):\n+class TUSUpload:\n \n     file_prefix = "tus_upload_"\n     expiration_period = 60 * 60\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 06da93c64..eff6cacdc 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -30,7 +30,7 @@ def create(container, type_, id_=None, title=None):\n             randint(0, 9999),\n         )\n     else:\n-        if six.PY2 and isinstance(id_, six.text_type):\n+        if six.PY2 and isinstance(id_, str):\n             new_id = id_.encode("utf8")\n         else:\n             new_id = id_\ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nindex a26de6b2c..048aa4f38 100644\n--- a/src/plone/restapi/services/contextnavigation/get.py\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -52,19 +52,19 @@ class INavigationPortlet(Interface):\n     """A portlet which can render the navigation tree"""\n \n     name = schema.TextLine(\n-        title=_(u"label_navigation_title", default=u"Title"),\n+        title=_("label_navigation_title", default="Title"),\n         description=_(\n-            u"help_navigation_title", default=u"The title of the navigation tree."\n+            "help_navigation_title", default="The title of the navigation tree."\n         ),\n-        default=u"",\n+        default="",\n         required=False,\n     )\n \n     root_path = schema.TextLine(\n-        title=_(u"label_navigation_root_path", default=u"Root node"),\n+        title=_("label_navigation_root_path", default="Root node"),\n         description=_(\n-            u"help_navigation_root",\n-            default=u"You may search for and choose a folder "\n+            "help_navigation_root",\n+            default="You may search for and choose a folder "\n             "to act as the root of the navigation tree. "\n             "Leave blank to use the Plone site root.",\n         ),\n@@ -72,10 +72,10 @@ class INavigationPortlet(Interface):\n     )\n \n     includeTop = schema.Bool(\n-        title=_(u"label_include_top_node", default=u"Include top node"),\n+        title=_("label_include_top_node", default="Include top node"),\n         description=_(\n-            u"help_include_top_node",\n-            default=u"Whether or not to show the top, or \'root\', "\n+            "help_include_top_node",\n+            default="Whether or not to show the top, or \'root\', "\n             "node in the navigation tree. This is affected "\n             "by the \'Start level\' setting.",\n         ),\n@@ -85,12 +85,12 @@ class INavigationPortlet(Interface):\n \n     currentFolderOnly = schema.Bool(\n         title=_(\n-            u"label_current_folder_only",\n-            default=u"Only show the contents of the current folder.",\n+            "label_current_folder_only",\n+            default="Only show the contents of the current folder.",\n         ),\n         description=_(\n-            u"help_current_folder_only",\n-            default=u"If selected, the navigation tree will "\n+            "help_current_folder_only",\n+            default="If selected, the navigation tree will "\n             "only show the current folder and its "\n             "children at all times.",\n         ),\n@@ -99,10 +99,10 @@ class INavigationPortlet(Interface):\n     )\n \n     topLevel = schema.Int(\n-        title=_(u"label_navigation_startlevel", default=u"Start level"),\n+        title=_("label_navigation_startlevel", default="Start level"),\n         description=_(\n-            u"help_navigation_start_level",\n-            default=u"An integer value that specifies the number of folder "\n+            "help_navigation_start_level",\n+            default="An integer value that specifies the number of folder "\n             "levels below the site root that must be exceeded "\n             "before the navigation tree will display. 0 means "\n             "that the navigation tree should be displayed "\n@@ -116,10 +116,10 @@ class INavigationPortlet(Interface):\n     )\n \n     bottomLevel = schema.Int(\n-        title=_(u"label_navigation_tree_depth", default=u"Navigation tree depth"),\n+        title=_("label_navigation_tree_depth", default="Navigation tree depth"),\n         description=_(\n-            u"help_navigation_tree_depth",\n-            default=u"How many folders should be included "\n+            "help_navigation_tree_depth",\n+            default="How many folders should be included "\n             "before the navigation tree stops. 0 "\n             "means no limit. 1 only includes the "\n             "root folder.",\n@@ -129,27 +129,27 @@ class INavigationPortlet(Interface):\n     )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(u"If enabled, the portlet will not show document type icons."),\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n         required=True,\n         default=False,\n     )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u"",\n+        default="",\n     )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(u"If enabled, the portlet will not show thumbs."),\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n         required=True,\n         default=False,\n     )\n@@ -165,7 +165,7 @@ def reply(self):\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class ContextNavigation(object):\n+class ContextNavigation:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -173,7 +173,7 @@ def __init__(self, context, request):\n     def __call__(self, expand=False, prefix="expand.contextnavigation."):\n         result = {\n             "contextnavigation": {\n-                "@id": "{}/@contextnavigation".format(self.context.absolute_url())\n+                "@id": f"{self.context.absolute_url()}/@contextnavigation"\n             }\n         }\n         if not expand:\n@@ -190,7 +190,7 @@ def getNavTree(self):\n         return self.__call__(expand=True)["contextnavigation"]\n \n \n-class NavigationPortletRenderer(object):\n+class NavigationPortletRenderer:\n     def __init__(self, context, request, data):\n \n         self.context = context\n@@ -605,7 +605,7 @@ def extract_data(schema, raw_data, prefix):\n         field = schema[name]\n         raw_value = raw_data.get(prefix + name, field.default)\n \n-        if isinstance(raw_value, six.string_types):\n+        if isinstance(raw_value, str):\n             raw_value = six.ensure_text(raw_value)\n \n         value = IFromUnicode(field).fromUnicode(raw_value)\n@@ -631,7 +631,7 @@ def get_root(context, root_path):\n     return root\n \n \n-class QueryBuilder(object):\n+class QueryBuilder:\n     """Build a navtree query based on the settings in INavigationSchema\n     and those set on the portlet.\n     """\ndiff --git a/src/plone/restapi/services/controlpanels/add.py b/src/plone/restapi/services/controlpanels/add.py\nindex 27f133d12..7c51e50d4 100644\n--- a/src/plone/restapi/services/controlpanels/add.py\n+++ b/src/plone/restapi/services/controlpanels/add.py\n@@ -9,7 +9,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsAdd(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsAdd, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/controlpanels/delete.py b/src/plone/restapi/services/controlpanels/delete.py\nindex 73d9ea301..ec4d41d3a 100644\n--- a/src/plone/restapi/services/controlpanels/delete.py\n+++ b/src/plone/restapi/services/controlpanels/delete.py\n@@ -9,7 +9,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsDelete(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex c9ac5c4aa..f42c9a567 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsGet(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -27,9 +27,7 @@ def get_controlpanel_adapters(self):\n \n     def available_controlpanels(self):\n         panels = dict(self.get_controlpanel_adapters())\n-        panels_by_configlet = dict(\n-            [(p.configlet_id, name) for name, p in panels.items()]\n-        )\n+        panels_by_configlet = {p.configlet_id: name for name, p in panels.items()}\n \n         pctool = getToolByName(self.context, "portal_controlpanel")\n         for group in pctool.getGroups():\ndiff --git a/src/plone/restapi/services/controlpanels/update.py b/src/plone/restapi/services/controlpanels/update.py\nindex 878d45f18..49db942fb 100644\n--- a/src/plone/restapi/services/controlpanels/update.py\n+++ b/src/plone/restapi/services/controlpanels/update.py\n@@ -10,7 +10,7 @@\n @implementer(IPublishTraverse)\n class ControlpanelsUpdate(Service):\n     def __init__(self, context, request):\n-        super(ControlpanelsUpdate, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 8fc4cd06d..d1303b43d 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -15,7 +15,7 @@ class BaseCopyMove(Service):\n     """Base service for copy/move operations."""\n \n     def __init__(self, context, request):\n-        super(BaseCopyMove, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.portal = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n         ).portal()\ndiff --git a/src/plone/restapi/services/database/get.py b/src/plone/restapi/services/database/get.py\nindex 4e24e90aa..4c174d7d8 100644\n--- a/src/plone/restapi/services/database/get.py\n+++ b/src/plone/restapi/services/database/get.py\n@@ -5,7 +5,7 @@ class DatabaseGet(Service):\n     def reply(self):\n         db = self.context._p_jar.db()\n         return {\n-            "@id": "{}/@database".format(self.context.absolute_url()),\n+            "@id": f"{self.context.absolute_url()}/@database",\n             "cache_length": db.cacheSize(),\n             "cache_length_bytes": db.getCacheSizeBytes(),\n             "cache_detail_length": db.cacheDetailSize(),\ndiff --git a/src/plone/restapi/services/discussion/conversation.py b/src/plone/restapi/services/discussion/conversation.py\nindex e6fa33285..071d75b04 100644\n--- a/src/plone/restapi/services/discussion/conversation.py\n+++ b/src/plone/restapi/services/discussion/conversation.py\n@@ -28,7 +28,7 @@ def fix_location_header(context, request):\n     location = request.response.headers.get("location")\n     if location and "#" in location:\n         comment_id = location.split("#")[-1]\n-        url = "{}/@comments/{}".format(context.absolute_url(), comment_id)\n+        url = f"{context.absolute_url()}/@comments/{comment_id}"\n         request.response.headers["location"] = url\n \n \ndiff --git a/src/plone/restapi/services/email_send/post.py b/src/plone/restapi/services/email_send/post.py\nindex c870a3242..03c0be33d 100644\n--- a/src/plone/restapi/services/email_send/post.py\n+++ b/src/plone/restapi/services/email_send/post.py\n@@ -72,14 +72,14 @@ def reply(self):\n             if not sender_fullname:\n                 subject = self.context.translate(\n                     _(\n-                        u"A portal user via ${portal_title}",\n+                        "A portal user via ${portal_title}",\n                         mapping={"portal_title": portal_title},\n                     )\n                 )\n             else:\n                 subject = self.context.translate(\n                     _(\n-                        u"${sender_fullname} via ${portal_title}",\n+                        "${sender_fullname} via ${portal_title}",\n                         mapping={\n                             "sender_fullname": sender_fullname,\n                             "portal_title": portal_title,\n@@ -89,7 +89,7 @@ def reply(self):\n \n         message_intro = self.context.translate(\n             _(\n-                u"You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n+                "You are receiving this mail because ${sender_fullname} sent this message via the site ${portal_title}:",  # noqa\n                 mapping={\n                     "sender_fullname": sender_fullname or "a portal user",\n                     "portal_title": portal_title,\n@@ -97,7 +97,7 @@ def reply(self):\n             )\n         )\n \n-        message = u"{} \\n {}".format(message_intro, message)\n+        message = f"{message_intro} \\n {message}"\n \n         message = MIMEText(message, "plain", encoding)\n         message["Reply-To"] = sender_from_address\n@@ -113,7 +113,7 @@ def reply(self):\n         except (SMTPException, RuntimeError):\n             plone_utils = getToolByName(self.context, "plone_utils")\n             exception = plone_utils.exceptionString()\n-            message = "Unable to send mail: {}".format(exception)\n+            message = f"Unable to send mail: {exception}"\n \n             self.request.response.setStatus(500)\n             return dict(error=dict(type="InternalServerError", message=message))\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex 048bddaf7..a665ee8b0 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -55,9 +55,7 @@ def reply(self):\n             description=description,\n         )\n         if not success:\n-            raise BadRequest(\n-                "Error occurred, could not add group {}.".format(groupname)\n-            )\n+            raise BadRequest(f"Error occurred, could not add group {groupname}.")\n \n         # Add members\n         group = gtool.getGroupById(groupname)\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex e925e9cf4..395d33f3d 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -11,7 +11,7 @@ class GroupsDelete(Service):\n     """Deletes a user."""\n \n     def __init__(self, context, request):\n-        super(GroupsDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex 00e81495d..e15ce54dd 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -15,7 +15,7 @@\n @implementer(IPublishTraverse)\n class GroupsGet(Service):\n     def __init__(self, context, request):\n-        super(GroupsGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.query = self.request.form.copy()\n \ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 8882d4d9c..1940cf14e 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -15,7 +15,7 @@ class GroupsPatch(Service):\n     """Updates an existing group."""\n \n     def __init__(self, context, request):\n-        super(GroupsPatch, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 3323badfd..404eec5d2 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -9,13 +9,11 @@\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n-import six\n-\n \n @implementer(IPublishTraverse)\n class HistoryGet(Service):\n     def __init__(self, context, request):\n-        super(HistoryGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.version = None\n \n     def publishTraverse(self, request, name):\n@@ -72,7 +70,7 @@ def reply(self):\n \n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n-            if not isinstance(item["time"], six.string_types):\n+            if not isinstance(item["time"], str):\n                 item["time"] = dt.fromtimestamp(item["time"]).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\ndiff --git a/src/plone/restapi/services/history/patch.py b/src/plone/restapi/services/history/patch.py\nindex 80623391a..bd5c10a09 100644\n--- a/src/plone/restapi/services/history/patch.py\n+++ b/src/plone/restapi/services/history/patch.py\n@@ -6,8 +6,6 @@\n from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError  # noqa\n from zExceptions import BadRequest\n \n-import six\n-\n \n class HistoryPatch(Service):\n     def reply(self):\n@@ -21,13 +19,13 @@ def revert(context, version):\n     pr.revert(context, version)\n \n     title = context.title_or_id()\n-    if not isinstance(title, six.text_type):\n-        title = six.text_type(title, "utf-8", "ignore")\n+    if not isinstance(title, str):\n+        title = str(title, "utf-8", "ignore")\n \n     if pr.supportsPolicy(context, "version_on_revert"):\n         try:\n             commit_msg = context.translate(\n-                _(u"Reverted to revision ${version}", mapping={"version": version})\n+                _("Reverted to revision ${version}", mapping={"version": version})\n             )\n             pr.save(obj=context, comment=commit_msg)\n         except FileTooLargeToVersionError:\n@@ -38,5 +36,5 @@ def revert(context, version):\n             )\n             raise BadRequest({"errors": error_msg})\n \n-    msg = u"{} has been reverted to revision {}.".format(title, version)\n+    msg = f"{title} has been reverted to revision {version}."\n     return {"message": msg}\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 2cc4b122f..1b2baaf9a 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -17,16 +17,14 @@\n \n @implementer(IExpandableElement)\n @adapter(ITranslatable, Interface)\n-class Translations(object):\n+class Translations:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n         result = {\n-            "translations": {\n-                "@id": "{}/@translations".format(self.context.absolute_url())\n-            }\n+            "translations": {"@id": f"{self.context.absolute_url()}/@translations"}\n         }\n         if not expand:\n             return result\n@@ -55,7 +53,7 @@ class LinkTranslations(Service):\n     """Link two content objects as translations of each other"""\n \n     def __init__(self, context, request):\n-        super(LinkTranslations, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.portal = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n         ).portal()\n@@ -143,7 +141,7 @@ def reply(self):\n             return dict(\n                 error=dict(\n                     type="BadRequest",\n-                    message="This objects is not translated into {}".format(language),\n+                    message=f"This objects is not translated into {language}",\n                 )\n             )\n \ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 566b6b6f9..c9b6b6a7f 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -29,7 +29,7 @@\n \n @implementer(IExpandableElement)\n @adapter(Interface, Interface)\n-class Navigation(object):\n+class Navigation:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -41,9 +41,7 @@ def __call__(self, expand=False):\n         else:\n             self.depth = 1\n \n-        result = {\n-            "navigation": {"@id": "{}/@navigation".format(self.context.absolute_url())}\n-        }\n+        result = {"navigation": {"@id": f"{self.context.absolute_url()}/@navigation"}}\n         if not expand:\n             return result\n \n@@ -85,7 +83,7 @@ def settings(self):\n     @property\n     def default_language(self):\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         return portal_state.default_language()\n \ndiff --git a/src/plone/restapi/services/principals/get.py b/src/plone/restapi/services/principals/get.py\nindex 1ab866d95..c9615862c 100644\n--- a/src/plone/restapi/services/principals/get.py\n+++ b/src/plone/restapi/services/principals/get.py\n@@ -34,10 +34,10 @@ def user_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n                 chain(\n-                    *[\n+                    *(\n                         hunter.searchUsers(**{field: search_term})\n                         for field in ["name", "fullname", "email"]\n-                    ]\n+                    )\n                 ),\n                 "userid",\n             )\n@@ -54,10 +54,10 @@ def group_search_results(self):\n         def search_for_principal(hunter, search_term):\n             return merge_search_results(\n                 chain(\n-                    *[\n+                    *(\n                         hunter.searchGroups(**{field: search_term})\n                         for field in ["id", "title"]\n-                    ]\n+                    )\n                 ),\n                 "groupid",\n             )\ndiff --git a/src/plone/restapi/services/querysources/get.py b/src/plone/restapi/services/querysources/get.py\nindex 893b63ab6..47d7c513f 100644\n--- a/src/plone/restapi/services/querysources/get.py\n+++ b/src/plone/restapi/services/querysources/get.py\n@@ -32,8 +32,8 @@ def reply(self):\n             return self._error(\n                 400,\n                 "Bad Request",\n-                u"Enumerating querysources is not supported. Please search "\n-                u"the source using the ?query= QS parameter",\n+                "Enumerating querysources is not supported. Please search "\n+                "the source using the ?query= QS parameter",\n             )\n \n         query = self.request.form["query"]\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 5b74093dc..8ba0ac2cd 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -10,7 +10,7 @@\n @implementer(IPublishTraverse)\n class RegistryGet(Service):\n     def __init__(self, context, request):\n-        super(RegistryGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/roles/get.py b/src/plone/restapi/services/roles/get.py\nindex de257ce5c..1e84c7854 100644\n--- a/src/plone/restapi/services/roles/get.py\n+++ b/src/plone/restapi/services/roles/get.py\n@@ -11,7 +11,7 @@ def reply(self):\n         return [\n             {\n                 "@type": "role",\n-                "@id": "{}/@roles/{}".format(self.context.absolute_url(), r),\n+                "@id": f"{self.context.absolute_url()}/@roles/{r}",\n                 "id": r,\n                 "title": translate(r, context=self.request, domain="plone"),\n             }\ndiff --git a/src/plone/restapi/services/sources/get.py b/src/plone/restapi/services/sources/get.py\nindex 58cf381b6..1669bb319 100644\n--- a/src/plone/restapi/services/sources/get.py\n+++ b/src/plone/restapi/services/sources/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class SourcesGet(Service):\n     def __init__(self, context, request):\n-        super(SourcesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -48,9 +48,7 @@ def reply(self):\n             )\n \n         serializer = getMultiAdapter((source, self.request), interface=ISerializeToJson)\n-        return serializer(\n-            "{}/@sources/{}".format(self.context.absolute_url(), fieldname)\n-        )\n+        return serializer(f"{self.context.absolute_url()}/@sources/{fieldname}")\n \n \n def get_field_by_name(fieldname, context):\ndiff --git a/src/plone/restapi/services/system/get.py b/src/plone/restapi/services/system/get.py\nindex 41b6dce80..1a19462e0 100644\n--- a/src/plone/restapi/services/system/get.py\n+++ b/src/plone/restapi/services/system/get.py\n@@ -15,7 +15,7 @@ def reply(self):\n         overview_control_panel = OverviewControlPanel(self.context, self.request)\n         core_versions = overview_control_panel.core_versions()\n         return {\n-            "@id": "{}/@system".format(self.context.absolute_url()),\n+            "@id": f"{self.context.absolute_url()}/@system",\n             "zope_version": core_versions.get("Zope"),\n             "plone_version": core_versions.get("Plone"),\n             "plone_restapi_version": plone_restapi_version,\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\nindex b9eedf943..d2ad76606 100644\n--- a/src/plone/restapi/services/tiles/get.py\n+++ b/src/plone/restapi/services/tiles/get.py\n@@ -13,7 +13,7 @@\n @implementer(IPublishTraverse)\n class TilesGet(Service):\n     def __init__(self, context, request):\n-        super(TilesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -32,7 +32,7 @@ def reply(self):\n                 self.request.response.setStatus(404)\n                 return {\n                     "type": "NotFound",\n-                    "message": \'Tile "{}" could not be found.\'.format(self.params[0]),\n+                    "message": f\'Tile "{self.params[0]}" could not be found.\',\n                 }\n \n         result = []\ndiff --git a/src/plone/restapi/services/types/add.py b/src/plone/restapi/services/types/add.py\nindex 32673a94f..56150ce81 100644\n--- a/src/plone/restapi/services/types/add.py\n+++ b/src/plone/restapi/services/types/add.py\n@@ -17,7 +17,7 @@ class TypesPost(Service):\n     """Creates a new field/fieldset"""\n \n     def __init__(self, context, request):\n-        super(TypesPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/delete.py b/src/plone/restapi/services/types/delete.py\nindex 41b03dda4..183049a4b 100644\n--- a/src/plone/restapi/services/types/delete.py\n+++ b/src/plone/restapi/services/types/delete.py\n@@ -16,7 +16,7 @@ class TypesDelete(Service):\n     """Deletes a field/fieldset from content type"""\n \n     def __init__(self, context, request):\n-        super(TypesDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex d4ab0ad03..508793dd1 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -28,13 +28,13 @@ def check_security(context):\n \n @implementer(IExpandableElement)\n @adapter(IDexterityContent, Interface)\n-class TypesInfo(object):\n+class TypesInfo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {"types": {"@id": "{}/@types".format(self.context.absolute_url())}}\n+        result = {"types": {"@id": f"{self.context.absolute_url()}/@types"}}\n         if not expand:\n             return result\n \n@@ -64,7 +64,7 @@ def __call__(self, expand=False):\n \n         result["types"] = [\n             {\n-                "@id": "{}/@types/{}".format(portal_url, fti.getId()),\n+                "@id": f"{portal_url}/@types/{fti.getId()}",\n                 "title": translate(fti.Title(), context=self.request),\n                 "addable": fti.getId() in allowed_types if can_add else False,\n             }\n@@ -77,7 +77,7 @@ def __call__(self, expand=False):\n @implementer(IPublishTraverse)\n class TypesGet(Service):\n     def __init__(self, context, request):\n-        super(TypesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/types/put.py b/src/plone/restapi/services/types/put.py\nindex 9ccfd1170..0c5db709e 100644\n--- a/src/plone/restapi/services/types/put.py\n+++ b/src/plone/restapi/services/types/put.py\n@@ -24,7 +24,7 @@\n @implementer(IPublishTraverse)\n class TypesPut(Service):\n     def __init__(self, context, request):\n-        super(TypesPut, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -42,9 +42,9 @@ def update_layouts(self, name, data):\n \n     def remove_fieldsets(self, ctype, data):\n         fieldsets = [f.get("id") for f in data.get("fieldsets", [])]\n-        existing = set(\n+        existing = {\n             f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n-        )\n+        }\n \n         for fieldset in existing:\n             if fieldset not in fieldsets:\n@@ -53,14 +53,14 @@ def remove_fieldsets(self, ctype, data):\n     def add_fieldsets(self, ctype, data):\n         fieldsets = OrderedDict((f.get("id"), f) for f in data.get("fieldsets", []))\n         info = get_info_for_type(ctype, self.request, ctype.getId())\n-        existing = set(f.get("id") for f in info.get("fieldsets", []))\n+        existing = {f.get("id") for f in info.get("fieldsets", [])}\n         for name, fieldset in fieldsets.items():\n             if name not in existing:\n                 add_fieldset(ctype, self.request, fieldset)\n \n     def remove_fields(self, ctype, data):\n         fields = data.get("properties", {})\n-        existing = set(name for name in ctype.schema)\n+        existing = {name for name in ctype.schema}\n         for name in existing:\n             if name not in fields:\n                 delete_field(ctype, self.request, name)\n@@ -82,9 +82,9 @@ def add_fields(self, ctype, data):\n             add_field(ctype, self.request, field)\n \n     def update_fieldsets(self, ctype, data):\n-        existing = set(\n+        existing = {\n             f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n-        )\n+        }\n         existing.add("default")\n         for fieldset in data.get("fieldsets", []):\n             if fieldset.get("id") not in existing:\ndiff --git a/src/plone/restapi/services/types/update.py b/src/plone/restapi/services/types/update.py\nindex bcc8baa18..fd28c044b 100644\n--- a/src/plone/restapi/services/types/update.py\n+++ b/src/plone/restapi/services/types/update.py\n@@ -19,7 +19,7 @@\n @implementer(IPublishTraverse)\n class TypesUpdate(Service):\n     def __init__(self, context, request):\n-        super(TypesUpdate, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -83,7 +83,7 @@ def reply_for_fieldset(self, name, fieldset_name, data, create=False):\n \n         if create:\n             info = get_info_for_type(context, self.request, name)\n-            existing = set(f.get("id") for f in info.get("fieldsets", []))\n+            existing = {f.get("id") for f in info.get("fieldsets", [])}\n             if fieldset_name not in existing:\n                 add_fieldset(context, self.request, data)\n         update_fieldset(context, self.request, data)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 8c52dee73..447a79f8d 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -41,7 +41,7 @@ class UsersPost(Service):\n     """Creates a new user."""\n \n     def __init__(self, context, request):\n-        super(UsersPost, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -78,13 +78,11 @@ def validate_input_data(self, portal, original_data):\n         # check input data\n         for fieldname in required:\n             if not data.get(fieldname, None):\n-                self.add_field_error(\n-                    fieldname, "Property \'{}\' is required.".format(fieldname)\n-                )\n+                self.add_field_error(fieldname, f"Property \'{fieldname}\' is required.")\n         for fieldname in data:\n             if fieldname not in allowed:\n                 self.add_field_error(\n-                    fieldname, "Property \'{}\' is not allowed.".format(fieldname)\n+                    fieldname, f"Property \'{fieldname}\' is not allowed."\n                 )\n \n         password = data.get("password")\n@@ -142,7 +140,7 @@ def reply(self):\n             return dict(\n                 error=dict(\n                     type="WrongParameterError",\n-                    message="Error in fields. {}".format(self.errors_to_string()),\n+                    message=f"Error in fields. {self.errors_to_string()}",\n                     errors=self.errors,\n                 )\n             )\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 5649ae447..905de65d1 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -10,7 +10,7 @@ class UsersDelete(Service):\n     """Deletes a user."""\n \n     def __init__(self, context, request):\n-        super(UsersDelete, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex d8d2bca34..ff64385ea 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -15,7 +15,7 @@\n @implementer(IPublishTraverse)\n class UsersGet(Service):\n     def __init__(self, context, request):\n-        super(UsersGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n         self.query = self.request.form.copy()\n \ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 12a81a31f..e12f3bfca 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -30,7 +30,7 @@ class UsersPatch(Service):\n     """Updates an existing user."""\n \n     def __init__(self, context, request):\n-        super(UsersPatch, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -166,7 +166,7 @@ def set_member_portrait(self, user, portrait):\n         content_type = portrait.get("content-type", content_type)\n         filename = portrait.get("filename", filename)\n         data = portrait.get("data")\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode("utf-8")\n         if "encoding" in portrait:\n             data = codecs.decode(data, portrait["encoding"])\ndiff --git a/src/plone/restapi/services/vocabularies/get.py b/src/plone/restapi/services/vocabularies/get.py\nindex 8d7b781e1..3905db087 100644\n--- a/src/plone/restapi/services/vocabularies/get.py\n+++ b/src/plone/restapi/services/vocabularies/get.py\n@@ -12,7 +12,7 @@\n @implementer(IPublishTraverse)\n class VocabulariesGet(Service):\n     def __init__(self, context, request):\n-        super(VocabulariesGet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.params = []\n \n     def publishTraverse(self, request, name):\n@@ -41,7 +41,7 @@ def reply(self):\n             factory = getUtility(IVocabularyFactory, name=name)\n         except ComponentLookupError:\n             return self._error(\n-                404, "Not Found", "The vocabulary \'{}\' does not exist".format(name)\n+                404, "Not Found", f"The vocabulary \'{name}\' does not exist"\n             )\n \n         vocabulary = factory(self.context)\n@@ -50,5 +50,5 @@ def reply(self):\n             (vocabulary, self.request), interface=ISerializeToJson\n         )\n         return serializer(\n-            "{}/@vocabularies/{}".format(self.context.absolute_url(), vocabulary_name)\n+            f"{self.context.absolute_url()}/@vocabularies/{vocabulary_name}"\n         )\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex f7e28bab4..e0b7ca35c 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -9,20 +9,16 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n-import six\n-\n \n @implementer(IExpandableElement)\n @adapter(IWorkflowAware, Interface)\n-class WorkflowInfo(object):\n+class WorkflowInfo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, expand=False):\n-        result = {\n-            "workflow": {"@id": "{}/@workflow".format(self.context.absolute_url())}\n-        }\n+        result = {"workflow": {"@id": f"{self.context.absolute_url()}/@workflow"}}\n         if not expand:\n             return result\n \n@@ -47,7 +43,7 @@ def __call__(self, expand=False):\n                 continue\n \n             title = action["title"]\n-            if isinstance(title, six.binary_type):\n+            if isinstance(title, bytes):\n                 title = title.decode("utf8")\n \n             transitions.append(\n@@ -63,7 +59,7 @@ def __call__(self, expand=False):\n             title = wftool.getTitleForStateOnType(\n                 action["review_state"], self.context.portal_type\n             )\n-            if isinstance(title, six.binary_type):\n+            if isinstance(title, bytes):\n                 title = title.decode("utf8")\n             history[item]["title"] = self.context.translate(title)\n \ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex b09dc3b32..9e0866940 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -16,7 +16,6 @@\n from zope.publisher.interfaces import NotFound\n \n import plone.protect.interfaces\n-import six\n \n \n @implementer(IPublishTraverse)\n@@ -24,7 +23,7 @@ class WorkflowTransition(Service):\n     """Trigger workflow transition"""\n \n     def __init__(self, context, request):\n-        super(WorkflowTransition, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.transition = None\n         self.wftool = getToolByName(context, "portal_workflow")\n \n@@ -80,18 +79,11 @@ def reply(self):\n             try:\n                 history = self.wftool.getInfoFor(self.context, "review_history")\n                 action = history[-1]\n-                if six.PY2:\n-                    action["title"] = self.context.translate(\n-                        self.wftool.getTitleForStateOnType(\n-                            action["review_state"], self.context.portal_type\n-                        ).decode("utf8")\n-                    )\n-                else:\n-                    action["title"] = self.context.translate(\n-                        self.wftool.getTitleForStateOnType(\n-                            action["review_state"], self.context.portal_type\n-                        )\n+                action["title"] = self.context.translate(\n+                    self.wftool.getTitleForStateOnType(\n+                        action["review_state"], self.context.portal_type\n                     )\n+                )\n             except WorkflowException as e:\n                 self.request.response.setStatus(400)\n                 action = dict(\ndiff --git a/src/plone/restapi/services/workingcopy/create.py b/src/plone/restapi/services/workingcopy/create.py\nindex 20466143f..2bc8846e5 100644\n--- a/src/plone/restapi/services/workingcopy/create.py\n+++ b/src/plone/restapi/services/workingcopy/create.py\n@@ -21,7 +21,7 @@ def reply(self):\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        control = getMultiAdapter((self.context, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((self.context, self.request), name="iterate_control")\n         if not control.checkout_allowed():\n             pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\ndiff --git a/src/plone/restapi/services/workingcopy/delete.py b/src/plone/restapi/services/workingcopy/delete.py\nindex 77b4f21b8..6e102a71c 100644\n--- a/src/plone/restapi/services/workingcopy/delete.py\n+++ b/src/plone/restapi/services/workingcopy/delete.py\n@@ -11,7 +11,7 @@ def reply(self):\n             # We are in the baseline, get the working copy policy\n             policy = ICheckinCheckoutPolicy(working_copy)\n \n-        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((working_copy, self.request), name="iterate_control")\n \n         if not control.cancel_allowed():\n             return self._error(403, "Not authorized", "Cancel not allowed")\ndiff --git a/src/plone/restapi/services/workingcopy/update.py b/src/plone/restapi/services/workingcopy/update.py\nindex 824ea61b7..7dd56c9ff 100644\n--- a/src/plone/restapi/services/workingcopy/update.py\n+++ b/src/plone/restapi/services/workingcopy/update.py\n@@ -19,7 +19,7 @@ def reply(self):\n             # We are in the baseline, get the working copy policy\n             policy = ICheckinCheckoutPolicy(working_copy)\n \n-        control = getMultiAdapter((working_copy, self.request), name=u"iterate_control")\n+        control = getMultiAdapter((working_copy, self.request), name="iterate_control")\n         if not control.checkin_allowed():\n             pm = getToolByName(self.context, "portal_membership")\n             if bool(pm.isAnonymousUser()):\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex c33ef7682..661f7eea7 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -10,15 +10,15 @@\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):  # pragma: no cover\n         """Do not show on Plone\'s list of installable profiles."""\n         return [\n-            u"plone.restapi:blocks",\n-            u"plone.restapi:performance",\n-            u"plone.restapi:testing",\n-            u"plone.restapi:testing-workflows",\n-            u"plone.restapi:uninstall",\n+            "plone.restapi:blocks",\n+            "plone.restapi:performance",\n+            "plone.restapi:testing",\n+            "plone.restapi:testing-workflows",\n+            "plone.restapi:uninstall",\n         ]\n \n     def getNonInstallableProducts(self):  # pragma: no cover\n@@ -26,7 +26,7 @@ def getNonInstallableProducts(self):  # pragma: no cover\n \n         This method is only used in Plone 5.1+.\n         """\n-        return [u"plone.restapi.upgrades"]\n+        return ["plone.restapi.upgrades"]\n \n \n def install_pas_plugin(context):\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex d713e46a6..203a7fd99 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -37,7 +37,6 @@\n import pkg_resources\n import re\n import requests\n-import six\n import time\n \n \n@@ -151,12 +150,7 @@ def setUpPloneSite(self, portal):\n         quickInstallProduct(portal, "collective.MockMailHost")\n         applyProfile(portal, "collective.MockMailHost:default")\n         states = portal.portal_workflow["simple_publication_workflow"].states\n-        if six.PY2:  # issue 676\n-            states["published"].title = u"Published with accent \xc3\xa9".encode(\n-                "utf8"\n-            )  # noqa: E501\n-        else:\n-            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n+        states["published"].title = "Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n@@ -212,12 +206,7 @@ def setUpPloneSite(self, portal):\n         set_available_languages()\n         enable_request_language_negotiation(portal)\n         states = portal.portal_workflow["simple_publication_workflow"].states\n-        if six.PY2:  # issue 676\n-            states["published"].title = u"Published with accent \xc3\xa9".encode(\n-                "utf8"\n-            )  # noqa: E501\n-        else:\n-            states["published"].title = u"Published with accent \xc3\xa9"  # noqa: E501\n+        states["published"].title = "Published with accent \xc3\xa9"  # noqa: E501\n \n \n PLONE_RESTAPI_DX_PAM_FIXTURE = PloneRestApiDXPAMLayer()\n@@ -278,7 +267,7 @@ class RelativeSession(requests.Session):\n     """\n \n     def __init__(self, base_url):\n-        super(RelativeSession, self).__init__()\n+        super().__init__()\n         if not base_url.endswith("/"):\n             base_url += "/"\n         self.__base_url = base_url\n@@ -288,17 +277,17 @@ def request(self, method, url, **kwargs):\n             url = url.lstrip("/")\n             url = urljoin(self.__base_url, url)\n         try:\n-            return super(RelativeSession, self).request(method, url, **kwargs)\n+            return super().request(method, url, **kwargs)\n         except ConnectionError:\n             # On Jenkins we often get one ConnectionError in a seemingly\n             # random test, mostly in test_documentation.py.\n             # The server is still listening: the port is open.  We retry once.\n             time.sleep(1)\n-            return super(RelativeSession, self).request(method, url, **kwargs)\n+            return super().request(method, url, **kwargs)\n \n \n @implementer(IUUIDGenerator)\n-class StaticUUIDGenerator(object):\n+class StaticUUIDGenerator:\n     """UUID generator that produces stable UUIDs for use in tests.\n \n     Based on code from ftw.testing\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex b1bfe6185..a71d5fd9d 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -38,7 +38,7 @@\n \n \n @implementer(ISource)\n-class MyNonIterableSource(object):\n+class MyNonIterableSource:\n     divisor = 2\n \n     def __contains__(self, value):\n@@ -46,7 +46,7 @@ def __contains__(self, value):\n \n \n @implementer(IIterableSource)\n-class MyIterableSource(object):\n+class MyIterableSource:\n     values = [1, 2, 3]\n \n     def __contains__(self, value):\n@@ -61,7 +61,7 @@ def __iter__(self):\n \n \n @implementer(IQuerySource)\n-class MyIterableQuerySource(object):\n+class MyIterableQuerySource:\n     values = [1, 2, 3]\n \n     def __contains__(self, value):\n@@ -80,7 +80,7 @@ def __iter__(self):\n \n \n @implementer(IIterableSource)\n-class MyIterableContextSource(object):\n+class MyIterableContextSource:\n     def __init__(self, context):\n         self.context = context\n \n@@ -98,7 +98,7 @@ def __iter__(self):\n \n \n @implementer(IQuerySource)\n-class MyContextQuerySource(object):\n+class MyContextQuerySource:\n     def __init__(self, context):\n         self.context = context\n \n@@ -151,12 +151,12 @@ class IDXTestDocumentSchema(model.Schema):\n     test_bool_field = schema.Bool(required=False)\n     test_bytes_field = schema.Bytes(required=False)\n     test_bytesline_field = schema.BytesLine(required=False)\n-    test_choice_field = schema.Choice(values=[u"foo", u"bar"], required=False)\n+    test_choice_field = schema.Choice(values=["foo", "bar"], required=False)\n     test_choice_field_with_vocabulary = schema.Choice(\n         vocabulary=SimpleVocabulary(\n             [\n-                SimpleTerm(u"value1", "token1", u"title1"),\n-                SimpleTerm(u"value2", "token2", u"title2"),\n+                SimpleTerm("value1", "token1", "title1"),\n+                SimpleTerm("value2", "token2", "title2"),\n             ]\n         ),\n         required=False,\n@@ -192,9 +192,9 @@ class IDXTestDocumentSchema(model.Schema):\n         value_type=schema.Choice(\n             vocabulary=SimpleVocabulary(\n                 [\n-                    SimpleTerm(u"value1", "token1", u"title1"),\n-                    SimpleTerm(u"value2", "token2", u"title2"),\n-                    SimpleTerm(u"value3", "token3", u"title3"),\n+                    SimpleTerm("value1", "token1", "title1"),\n+                    SimpleTerm("value2", "token2", "title2"),\n+                    SimpleTerm("value3", "token3", "title3"),\n                 ]\n             )\n         ),\n@@ -205,9 +205,9 @@ class IDXTestDocumentSchema(model.Schema):\n         value_type=schema.Choice(\n             vocabulary=SimpleVocabulary(\n                 [\n-                    SimpleTerm(u"value1", "token1", u"title1"),\n-                    SimpleTerm(u"value2", "token2", u"title2"),\n-                    SimpleTerm(u"value3", "token3", u"title3"),\n+                    SimpleTerm("value1", "token1", "title1"),\n+                    SimpleTerm("value2", "token2", "title2"),\n+                    SimpleTerm("value3", "token3", "title3"),\n                 ]\n             )\n         ),\n@@ -223,7 +223,7 @@ class IDXTestDocumentSchema(model.Schema):\n         required=False, key_type=schema.ASCIILine(), value_type=schema.Tuple()\n     )\n     test_list_choice_with_context_vocabulary_field = schema.List(\n-        title=u"Field",\n+        title="Field",\n         value_type=schema.Choice(vocabulary="plone.restapi.testing.context_vocabulary"),\n         required=False,\n     )\n@@ -256,7 +256,7 @@ class IDXTestDocumentSchema(model.Schema):\n     test_readonly_field = schema.TextLine(required=False, readonly=True)\n     test_maxlength_field = schema.TextLine(required=False, max_length=10)\n     test_constraint_field = schema.TextLine(\n-        required=False, constraint=lambda x: u"00" in x\n+        required=False, constraint=lambda x: "00" in x\n     )\n     test_datetime_min_field = schema.Datetime(required=False, min=datetime(2000, 1, 1))\n     test_time_min_field = schema.Time(required=False, min=time(1))\n@@ -276,24 +276,24 @@ class IDXTestDocumentSchema(model.Schema):\n     test_invariant_field2 = schema.TextLine(required=False)\n \n     test_missing_value_field = schema.TextLine(\n-        required=False, missing_value=u"missing", default=u"default"\n+        required=False, missing_value="missing", default="default"\n     )\n \n     test_missing_value_required_field = schema.TextLine(\n-        required=True, missing_value=u"missing", default=u"some value"\n+        required=True, missing_value="missing", default="some value"\n     )\n \n     @invariant\n     def validate_same_value(data):\n         if data.test_invariant_field1 != data.test_invariant_field2:\n-            raise Invalid(u"Must have same values")\n+            raise Invalid("Must have same values")\n \n     # Test fields with default values\n-    test_default_value_field = schema.TextLine(required=True, default=u"Default")\n+    test_default_value_field = schema.TextLine(required=True, default="Default")\n \n     @provider(IContextAwareDefaultFactory)\n     def default_factory(context):\n-        return u"DefaultFactory"\n+        return "DefaultFactory"\n \n     test_default_factory_field = schema.TextLine(\n         required=True, defaultFactory=default_factory\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex eee5d6f96..9a7c04edb 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -54,7 +54,7 @@ Content-Type: application/json\n     "description": "Congratulations! You have successfully installed Plone.", \n     "title": "Welcome to Plone"\n   }, \n-  "remoteUrl": "http://plone.org", \n+  "remoteUrl": "http://localhost:55001/plone",\n   "review_state": "private", \n   "rights": "", \n   "subjects": [], \ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex 592ef45e2..ff4426400 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -4,7 +4,7 @@\n from plone.i18n.locales.languages import _languagelist\n \n \n-class ModifiableLanguages(object):\n+class ModifiableLanguages:\n     """Mixin for the `IModifiableLanguageAvailability` based local utilities\n     that makes the getLanguages and getLanguageListing methods\n     (queried by portal_languages) also respect *modifiable* language\n@@ -38,7 +38,7 @@ def getLanguageListing(self, combined=False):\n         available = self.getAvailableLanguages(combined=combined)\n         languages = {k: v for k, v in languages.items() if k in available}\n \n-        return [(code, languages[code][u"name"]) for code in languages]\n+        return [(code, languages[code]["name"]) for code in languages]\n \n \n class ModifiableContentLanguages(ModifiableLanguages, ContentLanguages):\ndiff --git a/src/plone/restapi/tests/mixin_ordering.py b/src/plone/restapi/tests/mixin_ordering.py\nindex f314800bf..bf8eba40e 100644\n--- a/src/plone/restapi/tests/mixin_ordering.py\n+++ b/src/plone/restapi/tests/mixin_ordering.py\n@@ -254,7 +254,7 @@ def test_reorder_subsetids(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=json.dumps(data), context=self.folder)\n \n-        self.assertEqual(u"Client/server ordering mismatch", str(cm.exception))\n+        self.assertEqual("Client/server ordering mismatch", str(cm.exception))\n \n     def test_resort_all_items(self):\n         self.assertEqual(\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 9063579ca..7fab35cc5 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -3,7 +3,6 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n-from six.moves import range\n from zope.component.hooks import getSite\n \n import os\n@@ -35,10 +34,10 @@ def set_image(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobImage\n \n-        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n         obj.image = NamedBlobImage(data=open(filename, "rb").read(), filename=filename)\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u"image.png")\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n         obj.setImage(open(filename, "rb").read())\n \n \n@@ -46,14 +45,14 @@ def set_file(obj):\n     if IDexterityContent.providedBy(obj):\n         from plone.namedfile.file import NamedBlobFile\n \n-        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n         obj.file = NamedBlobFile(\n             data=open(filename, "rb").read(),\n             filename=filename,\n             contentType="application/pdf",\n         )\n     else:\n-        filename = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        filename = os.path.join(os.path.dirname(__file__), "file.pdf")\n         obj.setFile(open(filename, "rb").read())\n \n \n@@ -108,10 +107,8 @@ def step_setup_content(context):\n     set_description(folder10)\n     publish(folder10)\n     for i in range(1, 11):\n-        folder10.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n-        )\n-        publish(folder10["doc{}".format(i)])\n+        folder10.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n+        publish(folder10[f"doc{i}"])\n \n     # Folder with 100 Items\n     portal.invokeFactory("Folder", id="folder-with-100-items", title="Folder 100")\n@@ -119,10 +116,8 @@ def step_setup_content(context):\n     set_description(folder100)\n     publish(folder100)\n     for i in range(1, 101):\n-        folder100.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n-        )\n-        publish(folder100["doc{}".format(i)])\n+        folder100.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n+        publish(folder100[f"doc{i}"])\n \n     # Folder with 1000 Items\n     portal.invokeFactory("Folder", id="folder-with-1000-items", title="Folder 1000")\n@@ -130,10 +125,8 @@ def step_setup_content(context):\n     set_description(folder1000)\n     publish(folder1000)\n     for i in range(1, 1001):\n-        folder1000.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n-        )\n-        publish(folder1000["doc{}".format(i)])\n+        folder1000.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n+        publish(folder1000[f"doc{i}"])\n \n     # Folder with 10 Items and next/previous enabled\n     portal.invokeFactory(\n@@ -146,10 +139,8 @@ def step_setup_content(context):\n     set_description(folder10np)\n     publish(folder10np)\n     for i in range(1, 11):\n-        folder10np.invokeFactory(\n-            "Document", id="doc{}".format(i), title="Doc {}".format(i)\n-        )\n-        publish(folder10np["doc{}".format(i)])\n+        folder10np.invokeFactory("Document", id=f"doc{i}", title=f"Doc {i}")\n+        publish(folder10np[f"doc{i}"])\n \n     # Collection\n     portal.invokeFactory("Collection", id="collection", title="Collection")\n@@ -203,28 +194,28 @@ def step_setup_content(context):\n \n     # Image 1 MB\n     portal.invokeFactory("Image", id="image-1mb", title="Image 1 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-1mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-1mb.jpg")\n     portal.get("image-1mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 2 MB\n     portal.invokeFactory("Image", id="image-2mb", title="Image 2 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-2mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-2mb.jpg")\n     portal.get("image-2mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 3 MB\n     portal.invokeFactory("Image", id="image-3mb", title="Image 3 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-3mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-3mb.jpg")\n     portal.get("image-3mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n \n     # Image 10 MB\n     portal.invokeFactory("Image", id="image-10mb", title="Image 10 MB")\n-    filename = os.path.join(os.path.dirname(__file__), "images", u"image-10mb.jpg")\n+    filename = os.path.join(os.path.dirname(__file__), "images", "image-10mb.jpg")\n     portal.get("image-10mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n@@ -235,30 +226,26 @@ def step_setup_content(context):\n     publish(volto_page)\n \n     for i in range(1, 31):\n-        volto_page.invokeFactory(\n-            "News Item", id="newsitem{}".format(i), title="NewsItem {}".format(i)\n-        )\n-        newsitem = volto_page.get("newsitem{}".format(i))\n+        volto_page.invokeFactory("News Item", id=f"newsitem{i}", title=f"NewsItem {i}")\n+        newsitem = volto_page.get(f"newsitem{i}")\n         set_description(newsitem)\n         set_text(newsitem)\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.jpeg")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         newsitem.image = NamedBlobImage(\n-            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+            data=image_data, contentType="image/jpeg", filename="image.jpeg"\n         )\n         publish(newsitem)\n         newsitem.reindexObject()\n \n     for i in range(1, 31):\n-        volto_page.invokeFactory(\n-            "Image", id="image{}".format(i), title="Image {}".format(i)\n-        )\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        volto_page.invokeFactory("Image", id=f"image{i}", title=f"Image {i}")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.jpeg")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n-        volto_page.get("image{}".format(i)).image = NamedBlobImage(\n-            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+        volto_page.get(f"image{i}").image = NamedBlobImage(\n+            data=image_data, contentType="image/jpeg", filename="image.jpeg"\n         )\n \n     # Volto\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 7cc56af76..34e0bf5f5 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -17,7 +17,7 @@\n }\n \n \n-class StaticTime(object):\n+class StaticTime:\n     """ContextManager to patch accessor methods that return dynamic timestamps,\n     like creation and modification dates, with ones that return static\n     timestamps.\ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex 1e057e038..d607bd49a 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -45,16 +45,16 @@ def test_get_addon_record(self):\n         self.assertEqual(response.status_code, 200)\n         result = response.json()\n \n-        self.assertEqual(result["@id"], self.portal_url + u"/@addons/plone.session")\n-        self.assertEqual(result["id"], u"plone.session")\n+        self.assertEqual(result["@id"], self.portal_url + "/@addons/plone.session")\n+        self.assertEqual(result["id"], "plone.session")\n         # self.assertEqual(result[\'is_installed\'], False)\n-        self.assertEqual(result["title"], u"Session refresh support")\n+        self.assertEqual(result["title"], "Session refresh support")\n         self.assertEqual(\n-            result["description"], u"Optional plone.session refresh support."\n+            result["description"], "Optional plone.session refresh support."\n         )\n-        self.assertEqual(result["profile_type"], u"default")\n+        self.assertEqual(result["profile_type"], "default")\n         self.assertEqual(result["upgrade_info"], {})\n-        self.assertEqual(result["install_profile_id"], u"plone.session:default")\n+        self.assertEqual(result["install_profile_id"], "plone.session:default")\n \n     def test_get_addon_listing(self):\n         response = self.api_session.get("/@addons")\n@@ -103,7 +103,7 @@ def test_install_uninstall_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is currently shown as installed\n-        session = [a for a in result["items"] if a["id"] == u"plone.session"]\n+        session = [a for a in result["items"] if a["id"] == "plone.session"]\n         self.assertEqual(len(session), 1)\n         self.assertTrue(session[0]["is_installed"])\n \n@@ -116,7 +116,7 @@ def test_install_uninstall_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is currently shown as not installed\n-        session = [a for a in result["items"] if a["id"] == u"plone.session"]\n+        session = [a for a in result["items"] if a["id"] == "plone.session"]\n         self.assertEqual(len(session), 1)\n         self.assertFalse(session[0]["is_installed"])\n \n@@ -185,6 +185,6 @@ def test_upgrade_addon_with_representation(self):\n         result = response.json()\n \n         # Check to make sure the addon is at last version\n-        session = [a for a in result["items"] if a["id"] == u"plone.restapi"]\n+        session = [a for a in result["items"] if a["id"] == "plone.restapi"]\n         self.assertEqual(len(session), 1)\n         self.assertEqual(last_version, session[0]["upgrade_info"])\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 10b86b451..7246d0145 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -46,7 +46,7 @@ def test_login_with_invalid_credentials_fails(self):\n         self.assertNotIn("token", res)\n \n     def test_successful_login_returns_token(self):\n-        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{{"login": "{}", "password": "{}"}}\'.format(\n             SITE_OWNER_NAME,\n             SITE_OWNER_PASSWORD,\n         )\n@@ -57,18 +57,18 @@ def test_successful_login_returns_token(self):\n \n     def test_invalid_token_returns_400(self):\n         invalid_token = "abc123"\n-        self.request._auth = "Bearer {}".format(invalid_token)\n+        self.request._auth = f"Bearer {invalid_token}"\n         self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_expired_token_returns_400(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin", timeout=-60)\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         self.assertRaises(Unauthorized, self.traverse, path="/plone")\n \n     def test_login_without_api_permission(self):\n         self.portal.manage_permission(UseRESTAPI, roles=[])\n-        self.request["BODY"] = \'{"login": "%s", "password": "%s"}\' % (\n+        self.request["BODY"] = \'{{"login": "{}", "password": "{}"}}\'.format(\n             SITE_OWNER_NAME,\n             SITE_OWNER_PASSWORD,\n         )\n@@ -141,7 +141,7 @@ def test_logout_with_without_credentials_fails(self):\n     def test_logout_succeeds(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n@@ -175,7 +175,7 @@ def test_renew_without_pas_plugin_fails(self):\n     def test_renew_returns_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn("token", res)\n@@ -183,7 +183,7 @@ def test_renew_returns_token(self):\n     def test_renew_deletes_old_token(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn("token", res)\n@@ -191,7 +191,7 @@ def test_renew_deletes_old_token(self):\n \n     def test_renew_fails_on_invalid_token(self):\n         token = "this is an invalid token"\n-        self.request._auth = "Bearer {}".format(token)\n+        self.request._auth = f"Bearer {token}"\n         service = self.traverse()\n         res = service.reply()\n         self.assertEqual(service.request.response.status, 401)\ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex 29b9d1910..83bc9a89f 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -7,7 +7,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import result_paths\n-from six.moves import range\n from six.moves.urllib.parse import parse_qsl\n from six.moves.urllib.parse import urlparse\n \n@@ -35,9 +34,9 @@ def tearDown(self):\n     def _create_doc(self, container, number):\n         createContentInContainer(\n             container,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc-%s" % str(number + 1),\n-            title=u"Document %s" % str(number + 1),\n+            title="Document %s" % str(number + 1),\n         )\n \n \n@@ -46,9 +45,9 @@ class TestBatchingSearch(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingSearch, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -73,7 +72,7 @@ def test_canonical_url_preserves_multiple_metadata_fields(self):\n         canonicalized_qs = parse_qsl(urlparse(response.json()["@id"]).query)\n \n         self.assertEqual(\n-            set(original_qs) - set([("b_size", "2"), ("b_start", "2")]),\n+            set(original_qs) - {("b_size", "2"), ("b_start", "2")},\n             set(canonicalized_qs),\n         )\n \n@@ -86,11 +85,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/folder/@search?b_start=2&b_size=2",\n+                "first": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                "next": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/folder/@search?b_start=0&b_size=2",\n+                "last": self.portal_url + "/folder/@search?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -103,7 +102,7 @@ def test_contains_correct_batch_of_items(self):\n \n         # Response should contain second batch of items\n         self.assertEqual(\n-            [u"/plone/folder/doc-2", u"/plone/folder/doc-3"],\n+            ["/plone/folder/doc-2", "/plone/folder/doc-3"],\n             result_paths(response.json()),\n         )\n \n@@ -120,15 +119,15 @@ class TestBatchingCollections(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingCollections, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n \n         collection = createContentInContainer(\n-            self.portal, u"Collection", id="collection"\n+            self.portal, "Collection", id="collection"\n         )\n         collection.query = [\n             {\n@@ -155,11 +154,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/collection?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/collection?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/collection?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/collection?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/collection?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/collection?b_start=2&b_size=2",\n+                "first": self.portal_url + "/collection?b_start=0&b_size=2",\n+                "next": self.portal_url + "/collection?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/collection?b_start=0&b_size=2",\n+                "last": self.portal_url + "/collection?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -172,7 +171,7 @@ def test_contains_correct_batch_of_items(self):\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n         self.assertTrue(\n-            all(path.startswith(u"/plone/folder/doc-") for path in _result_paths)\n+            all(path.startswith("/plone/folder/doc-") for path in _result_paths)\n         )\n \n     def test_total_item_count_is_correct(self):\n@@ -192,9 +191,9 @@ class TestBatchingDXFolders(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingDXFolders, self).setUp()\n+        super().setUp()\n \n-        folder = createContentInContainer(self.portal, u"Folder", id=u"folder")\n+        folder = createContentInContainer(self.portal, "Folder", id="folder")\n \n         for i in range(5):\n             self._create_doc(folder, i)\n@@ -216,11 +215,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/folder?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/folder?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/folder?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/folder?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/folder?b_start=2&b_size=2",\n+                "first": self.portal_url + "/folder?b_start=0&b_size=2",\n+                "next": self.portal_url + "/folder?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/folder?b_start=0&b_size=2",\n+                "last": self.portal_url + "/folder?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -233,7 +232,7 @@ def test_contains_correct_batch_of_items(self):\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n         self.assertTrue(\n-            all(path.startswith(u"/plone/folder/doc-") for path in _result_paths)\n+            all(path.startswith("/plone/folder/doc-") for path in _result_paths)\n         )\n \n     def test_total_item_count_is_correct(self):\n@@ -256,11 +255,11 @@ def test_contains_batching_links_using_fullobjects(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/folder?b_start=2&b_size=2&fullobjects",\n-                u"first": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n-                u"next": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n-                u"prev": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n-                u"last": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n+                "@id": self.portal_url + "/folder?b_start=2&b_size=2&fullobjects",\n+                "first": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n+                "next": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n+                "prev": self.portal_url + "/folder?b_start=0&b_size=2&fullobjects=",\n+                "last": self.portal_url + "/folder?b_start=4&b_size=2&fullobjects=",\n             },\n             batch_info,\n         )\n@@ -271,7 +270,7 @@ class TestBatchingSiteRoot(TestBatchingDXBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestBatchingSiteRoot, self).setUp()\n+        super().setUp()\n \n         for i in range(5):\n             self._create_doc(self.portal, i)\n@@ -282,7 +281,7 @@ def test_contains_canonical_url(self):\n         response = self.api_session.get("/?b_start=2&b_size=2")\n \n         # Response should contain canonical URL without batching params\n-        self.assertEqual(response.json()["@id"], self.portal_url + u"/")\n+        self.assertEqual(response.json()["@id"], self.portal_url + "/")\n \n     def test_contains_batching_links(self):\n         # Fetch the second page of the batch\n@@ -293,11 +292,11 @@ def test_contains_batching_links(self):\n \n         self.assertDictEqual(\n             {\n-                u"@id": self.portal_url + "/?b_start=2&b_size=2",\n-                u"first": self.portal_url + "/?b_start=0&b_size=2",\n-                u"next": self.portal_url + "/?b_start=4&b_size=2",\n-                u"prev": self.portal_url + "/?b_start=0&b_size=2",\n-                u"last": self.portal_url + "/?b_start=4&b_size=2",\n+                "@id": self.portal_url + "/?b_start=2&b_size=2",\n+                "first": self.portal_url + "/?b_start=0&b_size=2",\n+                "next": self.portal_url + "/?b_start=4&b_size=2",\n+                "prev": self.portal_url + "/?b_start=0&b_size=2",\n+                "last": self.portal_url + "/?b_start=4&b_size=2",\n             },\n             batch_info,\n         )\n@@ -309,7 +308,7 @@ def test_contains_correct_batch_of_items(self):\n         # Response should contain second batch of items\n         _result_paths = result_paths(response.json())\n         self.assertEqual(2, len(_result_paths))\n-        self.assertTrue(all(path.startswith(u"/plone/doc-") for path in _result_paths))\n+        self.assertTrue(all(path.startswith("/plone/doc-") for path in _result_paths))\n \n     def test_total_item_count_is_correct(self):\n         # Fetch the second page of the batch\n@@ -404,7 +403,7 @@ def test_canonical_url_preserves_list_like_query_string_params(self):\n         # times) should be preserved.\n \n         self.assertEqual(\n-            set([("foolist", "1"), ("foolist", "2")]),\n+            {("foolist", "1"), ("foolist", "2")},\n             set(parse_qsl(urlparse(batch.canonical_url).query)),\n         )\n \n@@ -468,9 +467,9 @@ def test_first_link_preserves_list_like_querystring_params(self):\n         # Argument lists (same query string parameter repeated multiple\n         # times) should be preserved.\n \n-        batch_params = set([("b_start", "0"), ("b_size", "10")])\n+        batch_params = {("b_start", "0"), ("b_size", "10")}\n         self.assertEqual(\n-            set([("foolist", "1"), ("foolist", "2")]),\n+            {("foolist", "1"), ("foolist", "2")},\n             set(parse_qsl(urlparse(batch.links["first"]).query)) - batch_params,\n         )\n \n@@ -495,7 +494,7 @@ def test_next_link_omitted_on_last_page(self):\n         self.request.form["b_size"] = 10\n         self.request.form["b_start"] = 20\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(set(["@id", "first", "prev", "last"]), set(batch.links))\n+        self.assertSetEqual({"@id", "first", "prev", "last"}, set(batch.links))\n \n     def test_prev_link_contained_if_necessary(self):\n         items = list(range(1, 26))\n@@ -511,7 +510,7 @@ def test_prev_link_omitted_on_first_page(self):\n \n         self.request.form["b_size"] = 10\n         batch = HypermediaBatch(self.request, items)\n-        self.assertSetEqual(set(["@id", "first", "next", "last"]), set(batch.links))\n+        self.assertSetEqual({"@id", "first", "next", "last"}, set(batch.links))\n \n     def test_no_gaps_or_duplicates_between_pages(self):\n         items = list(range(1, 26))\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex 50b8698e8..489695baa 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -25,7 +25,7 @@ def setUp(self):\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n-            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n+            "blocksfolder", id="blocksfolder", title="Folder with blocks"\n         )\n \n         self.portal["blocksfolder"].blocks = {\n@@ -40,7 +40,7 @@ def test_basic_fields(self):\n \n     def test_behavior_provides(self):\n         self.portal.invokeFactory(\n-            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n+            "blocksfolder", id="blocksfolder", title="Folder with blocks"\n         )\n \n         assert IBlocks.providedBy(self.portal["blocksfolder"])\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex db5992279..f92e6c7c0 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -33,7 +33,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n@@ -50,7 +50,7 @@ def deserialize(self, blocks=None, validate_all=False, context=None):\n     def test_register_deserializer(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n \n@@ -61,7 +61,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -70,10 +70,10 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n+        self.deserialize(blocks={"123": {"@type": "test", "value": "text"}})\n \n         assert self.portal.doc1._handler_called is True\n-        assert self.portal.doc1.blocks["123"]["value"] == u"changed: text"\n+        assert self.portal.doc1.blocks["123"]["value"] == "changed: text"\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -85,7 +85,7 @@ def __call__(self, value):\n     def test_disabled_deserializer(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n             disabled = True\n@@ -97,7 +97,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -106,10 +106,10 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n+        self.deserialize(blocks={"123": {"@type": "test", "value": "text"}})\n \n         assert not getattr(self.portal.doc1, "_handler_called", False)\n-        assert self.portal.doc1.blocks["123"]["value"] == u"text"\n+        assert self.portal.doc1.blocks["123"]["value"] == "text"\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -121,7 +121,7 @@ def __call__(self, value):\n     def test_register_multiple_transform(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapterA(object):\n+        class TestAdapterA:\n             order = 10\n             block_type = "test_multi"\n \n@@ -132,13 +132,13 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_a = True\n \n-                value["value"] = value["value"].replace(u"a", u"b")\n+                value["value"] = value["value"].replace("a", "b")\n \n                 return value\n \n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapterB(object):\n+        class TestAdapterB:\n             order = 11\n             block_type = "test_multi"\n \n@@ -149,7 +149,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_b = True\n \n-                value["value"] = value["value"].replace(u"b", u"c")\n+                value["value"] = value["value"].replace("b", "c")\n \n                 return value\n \n@@ -163,11 +163,11 @@ def __call__(self, value):\n             (IDexterityItem, IBrowserRequest),\n         )\n \n-        self.deserialize(blocks={"123": {"@type": "test_multi", "value": u"a"}})\n+        self.deserialize(blocks={"123": {"@type": "test_multi", "value": "a"}})\n \n         self.assertTrue(self.portal.doc1._handler_called_a)\n         self.assertTrue(self.portal.doc1._handler_called_b)\n-        self.assertEqual(self.portal.doc1.blocks["123"]["value"], u"c")\n+        self.assertEqual(self.portal.doc1.blocks["123"]["value"], "c")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -186,13 +186,13 @@ def test_blocks_html_cleanup(self):\n             blocks={\n                 "123": {\n                     "@type": "html",\n-                    "html": u"<script>nasty</script><div>This stays</div>",\n+                    "html": "<script>nasty</script><div>This stays</div>",\n                 }\n             }\n         )\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["html"], u"<div>This stays</div>"\n+            self.portal.doc1.blocks["123"]["html"], "<div>This stays</div>"\n         )\n \n     def test_blocks_image_resolve2uid(self):\n@@ -202,7 +202,7 @@ def test_blocks_image_resolve2uid(self):\n         )\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(image_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{image_uid}"\n         )\n \n     def test_blocks_image_href(self):\n@@ -219,7 +219,7 @@ def test_blocks_doc_relative(self):\n         self.deserialize(blocks={"123": {"@type": "foo", "url": "/doc1"}})\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{doc_uid}"\n         )\n \n     def test_blocks_image_relative(self):\n@@ -227,7 +227,7 @@ def test_blocks_image_relative(self):\n         self.deserialize(blocks={"123": {"@type": "image", "url": "/image-1"}})\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(image_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{image_uid}"\n         )\n \n     def test_blocks_custom_block_resolve_standard_fields(self):\n@@ -237,7 +237,7 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n         doc_uid = IUUID(self.portal.doc1)\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["url"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["url"], f"../resolveuid/{doc_uid}"\n         )\n \n         self.deserialize(\n@@ -246,7 +246,7 @@ def test_blocks_custom_block_resolve_standard_fields(self):\n         doc_uid = IUUID(self.portal.doc1)\n \n         self.assertEqual(\n-            self.portal.doc1.blocks["123"]["href"], "../resolveuid/{}".format(doc_uid)\n+            self.portal.doc1.blocks["123"]["href"], f"../resolveuid/{doc_uid}"\n         )\n \n     def test_blocks_custom_block_doesnt_resolve_non_standard_fields(self):\n@@ -271,7 +271,7 @@ def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n \n         self.assertEqual(\n             self.portal.doc1.blocks["123"]["href"][0]["@id"],\n-            "../resolveuid/{}".format(doc_uid),\n+            f"../resolveuid/{doc_uid}",\n         )\n \n     def test_deserialize_blocks_smart_href_array(self):\n@@ -282,14 +282,14 @@ def test_deserialize_blocks_smart_href_array(self):\n \n         self.assertEqual(\n             self.portal.doc1.blocks["123"]["href"][0],\n-            "../resolveuid/{}".format(doc_uid),\n+            f"../resolveuid/{doc_uid}",\n         )\n \n     def test_deserialize_subblocks_transformers(self):\n         # use the html transformer to test subblocks transformers\n         subblock = {\n             "@type": "html",\n-            "html": u"<script>nasty</script><div>This stays</div>",\n+            "html": "<script>nasty</script><div>This stays</div>",\n         }\n         self.deserialize(\n             blocks={\n@@ -305,7 +305,7 @@ def test_deserialize_subblocks_transformers(self):\n         block = self.portal.doc1.blocks["1"]["data"]["blocks"]["2"]["blocks"]["3"][\n             "html"\n         ]\n-        self.assertEqual(block, u"<div>This stays</div>")\n+        self.assertEqual(block, "<div>This stays</div>")\n \n     def test_slate_internal_link_deserializer(self):\n         blocks = {\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex 00115c6d1..5404fe743 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -39,7 +39,7 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \n@@ -106,7 +106,7 @@ def test_search_text(self):\n     def test_register_block_searchabletext(self):\n         @implementer(IBlockSearchableText)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestSearchableTextAdapter(object):\n+        class TestSearchableTextAdapter:\n             def __init__(self, context, request):\n                 self.context = context\n                 self.request = request\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex 85fa940d2..fbcf21d1f 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -32,7 +32,7 @@ def setUp(self):\n         behavior_list.append("volto.blocks")\n         fti.behaviors = tuple(behavior_list)\n \n-        self.portal.invokeFactory("Document", id=u"doc1")\n+        self.portal.invokeFactory("Document", id="doc1")\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n         ]\n@@ -54,7 +54,7 @@ def serialize(self, context, blocks):\n     def test_register_serializer(self):\n         @adapter(IBlocks, IBrowserRequest)\n         @implementer(IBlockFieldSerializationTransformer)\n-        class TestAdapterA(object):\n+        class TestAdapterA:\n             order = 10\n             block_type = "test_multi"\n \n@@ -65,13 +65,13 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_a = True\n \n-                value["value"] = value["value"].replace(u"a", u"b")\n+                value["value"] = value["value"].replace("a", "b")\n \n                 return value\n \n         @adapter(IBlocks, IBrowserRequest)\n         @implementer(IBlockFieldSerializationTransformer)\n-        class TestAdapterB(object):\n+        class TestAdapterB:\n             order = 11\n             block_type = "test_multi"\n \n@@ -82,7 +82,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called_b = True\n \n-                value["value"] = value["value"].replace(u"b", u"c")\n+                value["value"] = value["value"].replace("b", "c")\n \n                 return value\n \n@@ -90,9 +90,9 @@ def __call__(self, value):\n         provideSubscriptionAdapter(TestAdapterB, (IDexterityItem, IBrowserRequest))\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={"123": {"@type": "test_multi", "value": u"a"}},\n+            blocks={"123": {"@type": "test_multi", "value": "a"}},\n         )\n-        self.assertEqual(value["123"]["value"], u"c")\n+        self.assertEqual(value["123"]["value"], "c")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -109,7 +109,7 @@ def __call__(self, value):\n     def test_disabled_serializer(self):\n         @implementer(IBlockFieldSerializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\n-        class TestAdapter(object):\n+        class TestAdapter:\n             order = 10\n             block_type = "test"\n             disabled = True\n@@ -121,7 +121,7 @@ def __init__(self, context, request):\n             def __call__(self, value):\n                 self.context._handler_called = True\n \n-                value["value"] = u"changed: {}".format(value["value"])\n+                value["value"] = "changed: {}".format(value["value"])\n \n                 return value\n \n@@ -131,11 +131,11 @@ def __call__(self, value):\n         )\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={"123": {"@type": "test", "value": u"text"}},\n+            blocks={"123": {"@type": "test", "value": "text"}},\n         )\n \n         assert not getattr(self.portal.doc1, "_handler_called", False)\n-        self.assertEqual(value["123"]["value"], u"text")\n+        self.assertEqual(value["123"]["value"], "text")\n \n         sm = getGlobalSiteManager()\n         sm.adapters.unsubscribe(\n@@ -151,7 +151,7 @@ def test_serialize_blocks_smart_href_array_volto_object_browser(self):\n             blocks={\n                 "123": {\n                     "@type": "foo",\n-                    "href": [{"@id": "../resolveuid/{}".format(doc_uid)}],\n+                    "href": [{"@id": f"../resolveuid/{doc_uid}"}],\n                 }\n             },\n         )\n@@ -164,9 +164,7 @@ def test_serialize_blocks_smart_href_array(self):\n         doc_uid = IUUID(self.portal.doc1)\n         value = self.serialize(\n             context=self.portal.doc1,\n-            blocks={\n-                "123": {"@type": "foo", "href": ["../resolveuid/{}".format(doc_uid)]}\n-            },\n+            blocks={"123": {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}},\n         )\n \n         self.assertEqual(value["123"]["href"][0], self.portal.doc1.absolute_url())\n@@ -174,7 +172,7 @@ def test_serialize_blocks_smart_href_array(self):\n     def test_serialize_subblocks_transformers(self):\n         # use the href smart field transformer for testing subblocks transformers\n         doc_uid = IUUID(self.portal.doc1)\n-        subblock = {"@type": "foo", "href": ["../resolveuid/{}".format(doc_uid)]}\n+        subblock = {"@type": "foo", "href": [f"../resolveuid/{doc_uid}"]}\n         value = self.serialize(\n             context=self.portal.doc1,\n             blocks={\n@@ -194,7 +192,7 @@ def test_serialize_subblocks_transformers(self):\n     def test_internal_link_serializer(self):\n         doc_uid = IUUID(self.portal["doc1"])\n         resolve_uid_link = {\n-            "@id": "../resolveuid/{}".format(doc_uid),\n+            "@id": f"../resolveuid/{doc_uid}",\n             "title": "Welcome to Plone",\n         }\n         blocks = {\n@@ -245,7 +243,7 @@ def test_internal_link_serializer(self):\n \n     def test_simple_link_serializer(self):\n         doc_uid = IUUID(self.portal["doc1"])\n-        resolve_uid_link = "../resolveuid/{}".format(doc_uid)\n+        resolve_uid_link = f"../resolveuid/{doc_uid}"\n \n         blocks = {\n             "abc": {\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 070b4c753..90507f108 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -57,7 +57,7 @@ def test_conversation(self):\n         )\n \n         output = serializer()\n-        self.assertEqual(set(output), set(["@id", "items_total", "items"]))\n+        self.assertEqual(set(output), {"@id", "items_total", "items"})\n \n     def test_conversation_batched(self):\n         self.request.form["b_size"] = 1\n@@ -91,7 +91,7 @@ def test_comment(self):\n         ]\n         self.assertEqual(set(output), set(expected))\n \n-        self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\n+        self.assertEqual(set(output["text"]), {"data", "mime-type"})\n \n     def test_comment_with_author_image(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n@@ -109,7 +109,7 @@ def test_comment_with_author_image(self):\n \n         serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n         self.assertEqual(\n-            "{}/portal_memberdata/portraits/test_user_1_".format(self.portal_url),\n+            f"{self.portal_url}/portal_memberdata/portraits/test_user_1_",\n             serializer().get("author_image"),\n         )\n \ndiff --git a/src/plone/restapi/tests/test_content_blocks.py b/src/plone/restapi/tests/test_content_blocks.py\nindex 284dbc7cb..e8915ad4b 100644\n--- a/src/plone/restapi/tests/test_content_blocks.py\n+++ b/src/plone/restapi/tests/test_content_blocks.py\n@@ -33,7 +33,7 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 7264ce5f9..0bd9e0cde 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -30,7 +30,7 @@ def setUp(self):\n         self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n         self.portal.folder1.invokeFactory("Document", id="doc1", title="My Document")\n         self.portal.folder1.doc1.text = RichTextValue(\n-            u"Lorem ipsum.", "text/plain", "text/html"\n+            "Lorem ipsum.", "text/plain", "text/html"\n         )\n         self.portal.folder1.invokeFactory("Folder", id="folder2", title="My Folder 2")\n         self.portal.folder1.folder2.invokeFactory(\n@@ -60,9 +60,9 @@ def test_get_content_returns_fullobjects(self):\n         self.assertTrue("text" in list(response.json()["items"][0]))\n         self.assertEqual(\n             {\n-                u"data": u"<p>Lorem ipsum.</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum.</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n             response.json()["items"][0].get("text"),\n         )\n@@ -95,7 +95,7 @@ def test_get_content_returns_fullobjects_correct_id(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(3, len(response.json()["items"]))\n         self.assertEqual(\n-            response.json()["items"][1]["@id"], self.portal_url + u"/folder1/folder2"\n+            response.json()["items"][1]["@id"], self.portal_url + "/folder1/folder2"\n         )\n \n     def test_get_content_returns_fullobjects_non_recursive(self):\n@@ -126,11 +126,11 @@ def test_get_content_includes_related_items(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/folder1/folder2/doc2",\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"review_state": u"published",\n-                    u"title": u"My Document 2",\n+                    "@id": self.portal_url + "/folder1/folder2/doc2",\n+                    "@type": "Document",\n+                    "description": "",\n+                    "review_state": "published",\n+                    "title": "My Document 2",\n                 }\n             ],\n             response.json()["relatedItems"],\n@@ -141,12 +141,12 @@ def test_get_content_related_items_without_workflow(self):\n \n         self.portal.invokeFactory("Image", id="imagewf")\n         self.portal.imagewf.title = "Image without workflow"\n-        self.portal.imagewf.description = u"This is an image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.imagewf.description = "This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.imagewf.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n \n@@ -164,11 +164,11 @@ def test_get_content_related_items_without_workflow(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/imagewf",\n-                    u"@type": u"Image",\n-                    u"description": u"This is an image",\n-                    u"review_state": None,\n-                    u"title": u"Image without workflow",\n+                    "@id": self.portal_url + "/imagewf",\n+                    "@type": "Image",\n+                    "description": "This is an image",\n+                    "review_state": None,\n+                    "title": "Image without workflow",\n                 }\n             ],\n             response.json()["relatedItems"],\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex 499cd4e8e..21c9fbef7 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -86,7 +86,7 @@ def test_sharing_search_roundtrip(self):\n         roles = [x for x in response.json()["entries"] if x["id"] == "admin"]\n         roles = roles[0]["roles"]\n \n-        new_roles = dict([(key, not val) for key, val in roles.items()])\n+        new_roles = {key: not val for key, val in roles.items()}\n         payload = {"entries": [{"id": "admin", "roles": new_roles}]}\n \n         response = requests.post(\n@@ -119,10 +119,10 @@ def test_sharing_titles_are_translated(self):\n         available_roles = response.json()["available_roles"]\n         self.assertEqual(\n             [\n-                {u"id": u"Contributor", u"title": u"Kann hinzuf\\xfcgen"},\n-                {u"id": u"Editor", u"title": u"Kann bearbeiten"},\n-                {u"id": u"Reader", u"title": u"Kann ansehen"},\n-                {u"id": u"Reviewer", u"title": u"Kann ver\\xf6ffentlichen"},\n+                {"id": "Contributor", "title": "Kann hinzuf\\xfcgen"},\n+                {"id": "Editor", "title": "Kann bearbeiten"},\n+                {"id": "Reader", "title": "Kann ansehen"},\n+                {"id": "Reviewer", "title": "Kann ver\\xf6ffentlichen"},\n             ],\n             available_roles,\n         )\n@@ -148,28 +148,28 @@ def test_get_local_roles_none_assigned(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"available_roles": [\n-                    {u"id": u"Contributor", u"title": u"Can add"},\n-                    {u"id": u"Editor", u"title": u"Can edit"},\n-                    {u"id": u"Reader", u"title": u"Can view"},\n-                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                "available_roles": [\n+                    {"id": "Contributor", "title": "Can add"},\n+                    {"id": "Editor", "title": "Can edit"},\n+                    {"id": "Reader", "title": "Can view"},\n+                    {"id": "Reviewer", "title": "Can review"},\n                 ],\n-                u"entries": [\n+                "entries": [\n                     {\n-                        u"disabled": False,\n-                        u"id": u"AuthenticatedUsers",\n-                        u"login": None,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": False,\n+                        "disabled": False,\n+                        "id": "AuthenticatedUsers",\n+                        "login": None,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": False,\n                         },\n-                        u"title": u"Logged-in users",\n-                        u"type": u"group",\n+                        "title": "Logged-in users",\n+                        "type": "group",\n                     }\n                 ],\n-                u"inherit": True,\n+                "inherit": True,\n             },\n         )\n \n@@ -189,40 +189,40 @@ def test_get_local_roles_with_user(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"available_roles": [\n-                    {u"id": u"Contributor", u"title": u"Can add"},\n-                    {u"id": u"Editor", u"title": u"Can edit"},\n-                    {u"id": u"Reader", u"title": u"Can view"},\n-                    {u"id": u"Reviewer", u"title": u"Can review"},\n+                "available_roles": [\n+                    {"id": "Contributor", "title": "Can add"},\n+                    {"id": "Editor", "title": "Can edit"},\n+                    {"id": "Reader", "title": "Can view"},\n+                    {"id": "Reviewer", "title": "Can review"},\n                 ],\n-                u"entries": [\n+                "entries": [\n                     {\n-                        u"disabled": False,\n-                        u"id": u"AuthenticatedUsers",\n-                        u"login": None,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": False,\n+                        "disabled": False,\n+                        "id": "AuthenticatedUsers",\n+                        "login": None,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": False,\n                         },\n-                        u"title": u"Logged-in users",\n-                        u"type": u"group",\n+                        "title": "Logged-in users",\n+                        "type": "group",\n                     },\n                     {\n-                        u"disabled": False,\n-                        u"id": u"test_user_1_",\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": True,\n+                        "disabled": False,\n+                        "id": "test_user_1_",\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": True,\n                         },\n-                        u"title": u"test-user",\n-                        u"type": u"user",\n+                        "title": "test-user",\n+                        "type": "user",\n                     },\n                 ],\n-                u"inherit": True,\n+                "inherit": True,\n             },\n         )\n \n@@ -241,14 +241,14 @@ def test_set_local_roles_for_user(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": True,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": True,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -261,7 +261,7 @@ def test_set_local_roles_for_user(self):\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal.folder1)),\n             [\n                 ["admin", ["Owner"], "user", "admin"],\n-                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n             ],\n         )\n \n@@ -289,16 +289,16 @@ def test_may_only_manage_roles_already_held(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": True,\n-                            u"Editor": True,\n-                            u"Reader": True,\n-                            u"Publisher": True,\n-                            u"Reviewer": True,\n-                            u"Manager": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": True,\n+                            "Editor": True,\n+                            "Reader": True,\n+                            "Publisher": True,\n+                            "Reviewer": True,\n+                            "Manager": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -311,10 +311,10 @@ def test_may_only_manage_roles_already_held(self):\n \n         # New roles should not contain any new roles that the user didn\'t\n         # have permission to delegate.\n-        self.assertNotIn(u"Manager", new_roles)\n-        self.assertNotIn(u"Publisher", new_roles)\n-        self.assertNotIn(u"Reviewer", new_roles)\n-        self.assertNotIn(u"Contributor", new_roles)\n+        self.assertNotIn("Manager", new_roles)\n+        self.assertNotIn("Publisher", new_roles)\n+        self.assertNotIn("Reviewer", new_roles)\n+        self.assertNotIn("Contributor", new_roles)\n \n         # \'Reader\' gets added because the permission to delegate it is\n         # assigned to \'Editor\' by default (see p.a.workflow.permissions)\n@@ -373,16 +373,16 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": "peter",\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": True,\n-                            u"Reader": True,\n-                            u"Publisher": False,\n-                            u"Reviewer": True,\n-                            u"Manager": False,\n+                        "id": "peter",\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": True,\n+                            "Reader": True,\n+                            "Publisher": False,\n+                            "Reviewer": True,\n+                            "Manager": False,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -393,7 +393,7 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n         self.assertEqual(response.status_code, 204)\n         new_roles = api.user.get_roles(username="peter", obj=self.portal.folder1)\n \n-        self.assertIn(u"Reviewer", new_roles)\n+        self.assertIn("Reviewer", new_roles)\n         self.assertEqual(\n             sorted(["Member", "Authenticated", "Editor", "Reader", "Reviewer"]),\n             sorted(new_roles),\n@@ -421,14 +421,14 @@ def test_unset_local_roles_for_user(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": False,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": False,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -441,7 +441,7 @@ def test_unset_local_roles_for_user(self):\n             pas.getLocalRolesForDisplay(self.portal.folder1),\n             (\n                 ("admin", ("Owner",), "user", "admin"),\n-                ("test-user", (u"Reviewer",), "user", u"test_user_1_"),\n+                ("test-user", ("Reviewer",), "user", "test_user_1_"),\n             ),\n         )\n \n@@ -460,14 +460,14 @@ def test_set_local_roles_on_site_root(self):\n             json={\n                 "entries": [\n                     {\n-                        u"id": TEST_USER_ID,\n-                        u"roles": {\n-                            u"Contributor": False,\n-                            u"Editor": False,\n-                            u"Reader": True,\n-                            u"Reviewer": True,\n+                        "id": TEST_USER_ID,\n+                        "roles": {\n+                            "Contributor": False,\n+                            "Editor": False,\n+                            "Reader": True,\n+                            "Reviewer": True,\n                         },\n-                        u"type": u"user",\n+                        "type": "user",\n                     }\n                 ]\n             },\n@@ -479,7 +479,7 @@ def test_set_local_roles_on_site_root(self):\n             sorted_roles(pas.getLocalRolesForDisplay(self.portal)),\n             [\n                 ["admin", ["Owner"], "user", "admin"],\n-                ["test-user", [u"Reader", u"Reviewer"], "user", u"test_user_1_"],\n+                ["test-user", ["Reader", "Reviewer"], "user", "test_user_1_"],\n             ],\n         )\n \n@@ -596,7 +596,7 @@ def test_no_serializer_available_returns_501(self):\n         self.assertEqual(response.status_code, 501)\n         response = response.json()\n         self.assertIn("error", response)\n-        self.assertEqual(u"No serializer available.", response["error"]["message"])\n+        self.assertEqual("No serializer available.", response["error"]["message"])\n \n         # we need to re-register the adapter here for following tests\n         gsm.registerAdapter(SerializeLocalRolesToJson, name="local_roles")\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex b94cef096..067b33c30 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -59,7 +59,7 @@ def test_patch_document_will_delete_value_with_null(self):\n \n         # null will set field.missing_value which is u\'\' for the field\n         self.assertEqual(204, response.status_code)\n-        self.assertEqual(u"", self.portal.doc1.description)\n+        self.assertEqual("", self.portal.doc1.description)\n \n     def test_patch_document_will_not_delete_value_with_null_if_required(self):\n         response = requests.patch(\n@@ -131,9 +131,9 @@ def test_patch_image_with_the_contents_of_the_get_preserves_image(self):\n             json={\n                 "@type": "Image",\n                 "image": {\n-                    "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n-                    "encoding": u"base64",\n-                    "content-type": u"image/gif",\n+                    "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",  # noqa\n+                    "encoding": "base64",\n+                    "content-type": "image/gif",\n                 },\n             },\n         )\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 7a548dd53..e42dfb3cf 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -47,7 +47,7 @@ def test_post_to_folder_creates_document(self):\n         self.assertEqual("mydocument", response.json().get("id"))\n         self.assertEqual("My Document", response.json().get("title"))\n \n-        expected_url = self.portal_url + u"/folder1/mydocument"\n+        expected_url = self.portal_url + "/folder1/mydocument"\n         self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_to_folder_creates_folder(self):\n@@ -64,7 +64,7 @@ def test_post_to_folder_creates_folder(self):\n         self.assertEqual("myfolder", response.json().get("id"))\n         self.assertEqual("My Folder", response.json().get("title"))\n \n-        expected_url = self.portal_url + u"/folder1/myfolder"\n+        expected_url = self.portal_url + "/folder1/myfolder"\n         self.assertEqual(expected_url, response.json().get("@id"))\n \n     def test_post_without_type_returns_400(self):\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 8bd74a50e..07edcb86c 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -35,7 +35,7 @@ def traverse(self, path="/plone", accept="application/json", method="GET"):\n         request.environ["PATH_TRANSLATED"] = path\n         request.environ["HTTP_ACCEPT"] = accept\n         request.environ["REQUEST_METHOD"] = method\n-        auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        auth = f"{SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 232b00d6d..fed9c4ac6 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,6 @@\n from base64 import b64encode\n from datetime import datetime\n-from mock import patch\n+from unittest.mock import patch\n from pkg_resources import parse_version\n from pkg_resources import resource_filename\n from plone import api\n@@ -29,7 +29,6 @@\n from plone.restapi.tests.statictime import StaticTime\n from plone.scale import storage\n from plone.testing.z2 import Browser\n-from six.moves import range\n from zope.component import createObject\n from zope.component import getUtility\n from zope.component.hooks import getSite\n@@ -39,7 +38,6 @@\n import json\n import os\n import re\n-import six\n import transaction\n import unittest\n \n@@ -94,10 +92,7 @@ def pretty_json(data):\n \n \n def save_request_and_response_for_docs(name, response):\n-    if six.PY2:\n-        open_kw = {}\n-    else:\n-        open_kw = {"newline": "\\n"}\n+    open_kw = {"newline": "\\n"}\n     filename = "{}/{}".format(base_path, "%s.req" % name)\n     with open(filename, "w", **open_kw) as req:\n         req.write(\n@@ -110,7 +105,7 @@ def save_request_and_response_for_docs(name, response):\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write("{}: {}\\n".format(key.title(), value))\n+                req.write(f"{key.title()}: {value}\\n")\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n             if "content-type" not in REQUEST_HEADER_KEYS:\n@@ -128,9 +123,7 @@ def save_request_and_response_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, six.text_type) or not hasattr(\n-                req, "buffer"\n-            ):\n+            if isinstance(response.request.body, str) or not hasattr(req, "buffer"):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n@@ -140,19 +133,16 @@ def save_request_and_response_for_docs(name, response):\n     with open(filename, "w", **open_kw) as resp:\n         status = response.status_code\n         reason = response.reason\n-        resp.write("HTTP/1.1 {} {}\\n".format(status, reason))\n+        resp.write(f"HTTP/1.1 {status} {reason}\\n")\n         for key, value in response.headers.items():\n             if key.lower() in RESPONSE_HEADER_KEYS:\n-                resp.write("{}: {}\\n".format(key.title(), value))\n+                resp.write(f"{key.title()}: {value}\\n")\n         resp.write("\\n")\n         resp.write(response.text)\n \n \n def save_request_for_docs(name, response):\n-    if six.PY2:\n-        open_kw = {}\n-    else:\n-        open_kw = {"newline": "\\n"}\n+    open_kw = {"newline": "\\n"}\n     filename = "{}/{}".format(base_path, "%s.req" % name)\n     with open(filename, "w", **open_kw) as req:\n         req.write(\n@@ -165,7 +155,7 @@ def save_request_for_docs(name, response):\n         )\n         for key, value in ordered_request_headers.items():\n             if key.lower() in REQUEST_HEADER_KEYS:\n-                req.write("{}: {}\\n".format(key.title(), value))\n+                req.write(f"{key.title()}: {value}\\n")\n         if response.request.body:\n             # If request has a body, make sure to set Content-Type header\n             if "content-type" not in REQUEST_HEADER_KEYS:\n@@ -183,9 +173,7 @@ def save_request_for_docs(name, response):\n                 response.request.prepare_body(data=body, files=None)\n \n             req.flush()\n-            if isinstance(response.request.body, six.text_type) or not hasattr(\n-                req, "buffer"\n-            ):\n+            if isinstance(response.request.body, str) or not hasattr(req, "buffer"):\n                 req.write(response.request.body)\n             else:\n                 req.buffer.seek(0, 2)\n@@ -212,7 +200,7 @@ def setUp(self):\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n@@ -240,27 +228,25 @@ class TestDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestDocumentation, self).setUp()\n+        super().setUp()\n         self.document = self.create_document()\n         alsoProvides(self.document, ITTWLockable)\n \n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n-        document.title = u"Welcome to Plone"\n-        document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n-        )\n+        document.title = "Welcome to Plone"\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -270,7 +256,7 @@ def create_folder(self):\n         self.portal.invokeFactory("Folder", id="folder")\n         folder = self.portal["folder"]\n         folder.title = "My Folder"\n-        folder.description = u"This is a folder with two documents"\n+        folder.description = "This is a folder with two documents"\n         folder.invokeFactory("Document", id="doc1", title="A document within a folder")\n         folder.invokeFactory("Document", id="doc2", title="A document within a folder")\n         return folder\n@@ -317,17 +303,17 @@ def test_documentation_document(self):\n     def test_documentation_news_item(self):\n         self.portal.invokeFactory("News Item", id="newsitem")\n         self.portal.newsitem.title = "My News Item"\n-        self.portal.newsitem.description = u"This is a news item"\n+        self.portal.newsitem.description = "This is a news item"\n         self.portal.newsitem.text = RichTextValue(\n-            u"Lorem ipsum", "text/plain", "text/html"\n+            "Lorem ipsum", "text/plain", "text/html"\n         )\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.newsitem.image_caption = u"This is an image caption."\n+        self.portal.newsitem.image_caption = "This is an image caption."\n         transaction.commit()\n \n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -337,7 +323,7 @@ def test_documentation_news_item(self):\n     def test_documentation_event(self):\n         self.portal.invokeFactory("Event", id="event")\n         self.portal.event.title = "Event"\n-        self.portal.event.description = u"This is an event"\n+        self.portal.event.description = "This is an event"\n         self.portal.event.start = datetime(2013, 1, 1, 10, 0)\n         self.portal.event.end = datetime(2013, 1, 1, 12, 0)\n         transaction.commit()\n@@ -347,8 +333,8 @@ def test_documentation_event(self):\n     def test_documentation_link(self):\n         self.portal.invokeFactory("Link", id="link")\n         self.portal.link.title = "My Link"\n-        self.portal.link.description = u"This is a link"\n-        self.portal.link.remoteUrl = "http://plone.org"\n+        self.portal.link.description = "This is a link"\n+        self.portal.remoteUrl = "http://plone.org"\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n         save_request_and_response_for_docs("link", response)\n@@ -356,12 +342,12 @@ def test_documentation_link(self):\n     def test_documentation_file(self):\n         self.portal.invokeFactory("File", id="file")\n         self.portal.file.title = "My File"\n-        self.portal.file.description = u"This is a file"\n-        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        self.portal.file.description = "This is a file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), "file.pdf")\n         with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file.file = NamedBlobFile(\n-            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n+            data=pdf_data, contentType="application/pdf", filename="file.pdf"\n         )\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n@@ -370,12 +356,12 @@ def test_documentation_file(self):\n     def test_documentation_image(self):\n         self.portal.invokeFactory("Image", id="image")\n         self.portal.image.title = "My Image"\n-        self.portal.image.description = u"This is an image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.image.description = "This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -391,7 +377,7 @@ def test_documentation_folder(self):\n     def test_documentation_collection(self):\n         self.portal.invokeFactory("Collection", id="collection")\n         self.portal.collection.title = "My Collection"\n-        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.description = "This is a collection with two documents"\n         self.portal.collection.query = [\n             {\n                 "i": "portal_type",\n@@ -408,7 +394,7 @@ def test_documentation_collection(self):\n     def test_documentation_collection_fullobjects(self):\n         self.portal.invokeFactory("Collection", id="collection")\n         self.portal.collection.title = "My Collection"\n-        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.description = "This is a collection with two documents"\n         self.portal.collection.query = [\n             {\n                 "i": "portal_type",\n@@ -474,14 +460,12 @@ def test_documentation_search_fullobjects(self):\n         save_request_and_response_for_docs("search_fullobjects", response)\n \n     def test_documentation_workflow(self):\n-        response = self.api_session.get(\n-            "{}/@workflow".format(self.document.absolute_url())\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@workflow")\n         save_request_and_response_for_docs("workflow_get", response)\n \n     def test_documentation_workflow_transition(self):\n         response = self.api_session.post(\n-            "{}/@workflow/publish".format(self.document.absolute_url())\n+            f"{self.document.absolute_url()}/@workflow/publish"\n         )\n         save_request_and_response_for_docs("workflow_post", response)\n \n@@ -489,7 +473,7 @@ def test_documentation_workflow_transition_with_body(self):\n         folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n         transaction.commit()\n         response = self.api_session.post(\n-            "{}/@workflow/publish".format(folder.absolute_url()),\n+            f"{folder.absolute_url()}/@workflow/publish",\n             json={\n                 "comment": "Publishing my folder...",\n                 "include_children": True,\n@@ -676,7 +660,7 @@ def test_documentation_jwt_login(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         save_request_and_response_for_docs("jwt_login", response)\n@@ -689,12 +673,12 @@ def test_documentation_jwt_logged_in(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.get(\n-            "/", headers={"Authorization": "Bearer {}".format(token)}\n+            "/", headers={"Authorization": f"Bearer {token}"}\n         )\n         save_request_and_response_for_docs("jwt_logged_in", response)\n \n@@ -705,13 +689,13 @@ def test_documentation_jwt_login_renew(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            "{}/@login-renew".format(self.portal.absolute_url()),\n-            headers={"Authorization": "Bearer {}".format(token)},\n+            f"{self.portal.absolute_url()}/@login-renew",\n+            headers={"Authorization": f"Bearer {token}"},\n         )\n         save_request_and_response_for_docs("jwt_login_renew", response)\n \n@@ -723,13 +707,13 @@ def test_documentation_jwt_logout(self):\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n-            "{}/@login".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@login",\n             json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n         )\n         token = json.loads(response.content)["token"]\n         response = self.api_session.post(\n-            "{}/@logout".format(self.portal.absolute_url()),\n-            headers={"Authorization": "Bearer {}".format(token)},\n+            f"{self.portal.absolute_url()}/@logout",\n+            headers={"Authorization": f"Bearer {token}"},\n         )\n         save_request_and_response_for_docs("jwt_logout", response)\n \n@@ -1143,74 +1127,66 @@ def test_documentation_groups_delete(self):\n         save_request_and_response_for_docs("groups_delete", response)\n \n     def test_documentation_breadcrumbs(self):\n-        response = self.api_session.get(\n-            "{}/@breadcrumbs".format(self.document.absolute_url())\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@breadcrumbs")\n         save_request_and_response_for_docs("breadcrumbs", response)\n \n     def test_documentation_navigation(self):\n-        response = self.api_session.get(\n-            "{}/@navigation".format(self.document.absolute_url())\n-        )\n+        response = self.api_session.get(f"{self.document.absolute_url()}/@navigation")\n         save_request_and_response_for_docs("navigation", response)\n \n     def test_documentation_navigation_tree(self):\n         folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n-        )\n-        createContentInContainer(\n-            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n+        createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n-        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n+        createContentInContainer(folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n         response = self.api_session.get(\n-            "{}/@navigation".format(self.document.absolute_url()),\n+            f"{self.document.absolute_url()}/@navigation",\n             params={"expand.navigation.depth": 4},\n         )\n         save_request_and_response_for_docs("navigation_tree", response)\n \n     def test_documentation_contextnavigation(self):\n         folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n-        )\n-        createContentInContainer(\n-            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n+        createContentInContainer(folder, "Folder", id="subfolder2", title="SubFolder 2")\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n-        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n+        createContentInContainer(folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n         response = self.api_session.get(\n-            "{}/folder/@contextnavigation".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/folder/@contextnavigation"\n         )\n         save_request_and_response_for_docs("contextnavigation", response)\n \n@@ -1291,7 +1267,7 @@ def test_documentation_vocabularies_get_filtered_by_token(self):\n \n     def test_documentation_sources_get(self):\n         api.content.create(\n-            container=self.portal, id="doc", type="DXTestDocument", title=u"DX Document"\n+            container=self.portal, id="doc", type="DXTestDocument", title="DX Document"\n         )\n         transaction.commit()\n         response = self.api_session.get("/doc/@sources/test_choice_with_source")\n@@ -1349,12 +1325,12 @@ def test_documentation_expansion_expanded_full(self):\n \n     def test_history_get(self):\n         self.document.setTitle("My new title")\n-        url = "{}/@history".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@history"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("history_get", response)\n \n     def test_history_revert(self):\n-        url = "{}/@history".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@history"\n         response = self.api_session.patch(url, json={"version": 0})\n         save_request_and_response_for_docs("history_revert", response)\n \n@@ -1478,7 +1454,7 @@ def test_tusreplace_post_patch(self):\n         save_request_and_response_for_docs("tusreplace_patch", response)\n \n     def test_locking_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n@@ -1489,7 +1465,7 @@ def test_locking_lock(self):\n         save_request_and_response_for_docs("lock", response)\n \n     def test_locking_lock_nonstealable_and_timeout(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(\n             url, json={"stealable": False, "timeout": 3600}\n         )\n@@ -1502,16 +1478,16 @@ def test_locking_lock_nonstealable_and_timeout(self):\n         save_request_and_response_for_docs("lock_nonstealable_timeout", response)\n \n     def test_locking_unlock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n-        url = "{}/@unlock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@unlock"\n         response = self.api_session.post(url)\n         save_request_and_response_for_docs("unlock", response)\n \n     def test_locking_refresh_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n-        url = "{}/@refresh-lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@refresh-lock"\n         response = self.api_session.post(url)\n         # Replace dynamic lock token with a static one\n         response._content = re.sub(\n@@ -1522,12 +1498,12 @@ def test_locking_refresh_lock(self):\n         save_request_and_response_for_docs("refresh_lock", response)\n \n     def test_locking_lockinfo(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("lock_get", response)\n \n     def test_update_with_lock(self):\n-        url = "{}/@lock".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@lock"\n         response = self.api_session.post(url)\n         token = response.json()["token"]\n         response = self.api_session.patch(\n@@ -1537,7 +1513,7 @@ def test_update_with_lock(self):\n         )\n         response.request.headers[\n             "Lock-Token"\n-        ] = u"0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n+        ] = "0.684672730996-0.25195226375-00105A989226:1477076400.000"  # noqa\n         save_request_and_response_for_docs("lock_update", response)\n \n     def test_querystring_get(self):\n@@ -1579,7 +1555,7 @@ class TestDocumentationMessageTranslations(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestDocumentationMessageTranslations, self).setUp()\n+        super().setUp()\n \n         self.api_session.headers.update({"Accept-Language": "es"})\n \n@@ -1588,20 +1564,18 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestDocumentationMessageTranslations, self).tearDown()\n+        super().tearDown()\n \n     def create_document(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n-        document.title = u"Welcome to Plone"\n-        document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n-        )\n+        document.title = "Welcome to Plone"\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -1616,13 +1590,13 @@ def test_translate_messages_types_folder(self):\n         save_request_and_response_for_docs("translated_messages_types_folder", response)\n \n     def test_translate_messages_object_workflow(self):\n-        response = self.api_session.get("{}/@workflow".format(self.document.id))\n+        response = self.api_session.get(f"{self.document.id}/@workflow")\n         save_request_and_response_for_docs(\n             "translated_messages_object_workflow", response\n         )\n \n     def test_translate_messages_object_history(self):\n-        response = self.api_session.get("{}/@history".format(self.document.id))\n+        response = self.api_session.get(f"{self.document.id}/@history")\n         save_request_and_response_for_docs(\n             "translated_messages_object_history", response\n         )\n@@ -1633,7 +1607,7 @@ class TestCommenting(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestCommenting, self).setUp()\n+        super().setUp()\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -1645,21 +1619,19 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestCommenting, self).tearDown()\n+        super().tearDown()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory("Document", id="front-page")\n         document = self.portal["front-page"]\n         document.allow_discussion = True\n-        document.title = u"Welcome to Plone"\n-        document.description = (\n-            u"Congratulations! You have successfully installed Plone."\n-        )\n+        document.title = "Welcome to Plone"\n+        document.description = "Congratulations! You have successfully installed Plone."\n         document.text = RichTextValue(\n-            u"If you\'re seeing this instead of the web site you were "\n-            + u"expecting, the owner of this web site has just installed "\n-            + u"Plone. Do not contact the Plone Team or the Plone mailing "\n-            + u"lists about this.",\n+            "If you\'re seeing this instead of the web site you were "\n+            + "expecting, the owner of this web site has just installed "\n+            + "Plone. Do not contact the Plone Team or the Plone mailing "\n+            + "lists about this.",\n             "text/plain",\n             "text/html",\n         )\n@@ -1724,13 +1696,13 @@ def new_cid(idx):\n             response._content = re.sub(cid, idx, response._content)\n \n     def test_comments_get(self):\n-        url = "{}/@comments".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@comments"\n         response = self.api_session.get(url)\n         self.clean_comment_id_from_body(response)\n         save_request_and_response_for_docs("comments_get", response)\n \n     def test_comments_add_root(self):\n-        url = "{}/@comments/".format(self.document.absolute_url())\n+        url = f"{self.document.absolute_url()}/@comments/"\n         payload = {"text": "My comment"}\n         response = self.api_session.post(url, json=payload)\n         self.clean_comment_id_from_urls(response)\n@@ -1738,7 +1710,7 @@ def test_comments_add_root(self):\n \n     def test_comments_add_sub(self):\n         # Add a reply\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         payload = {"text": "My reply"}\n         response = self.api_session.post(url, json=payload)\n \n@@ -1746,20 +1718,20 @@ def test_comments_add_sub(self):\n         save_request_and_response_for_docs("comments_add_sub", response)\n \n     def test_comments_update(self):\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         payload = {"text": "My NEW comment"}\n         response = self.api_session.patch(url, json=payload)\n         self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_update", response)\n \n     def test_comments_delete(self):\n-        url = "{}/@comments/{}".format(self.document.absolute_url(), self.comment_id)\n+        url = f"{self.document.absolute_url()}/@comments/{self.comment_id}"\n         response = self.api_session.delete(url)\n         self.clean_comment_id_from_urls(response)\n         save_request_and_response_for_docs("comments_delete", response)\n \n     def test_roles_get(self):\n-        url = "{}/@roles".format(self.portal_url)\n+        url = f"{self.portal_url}/@roles"\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("roles", response)\n \n@@ -1835,7 +1807,7 @@ class TestPAMDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestPAMDocumentation, self).setUp()\n+        super().setUp()\n \n         language_tool = api.portal.get_tool("portal_languages")\n         language_tool.addSupportedLanguage("en")\n@@ -1854,25 +1826,25 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestPAMDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.absolute_url()},\n         )\n         save_request_and_response_for_docs("translations_post", response)\n \n     def test_documentation_translations_post_by_id(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.absolute_url().replace(self.portal_url, "")},\n         )\n         save_request_and_response_for_docs("translations_post_by_id", response)\n \n     def test_documentation_translations_post_by_uid(self):\n         response = self.api_session.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"id": self.es_content.UID()},\n         )\n         save_request_and_response_for_docs("translations_post_by_uid", response)\n@@ -1881,7 +1853,7 @@ def test_documentation_translations_get(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.get(\n-            "{}/@translations".format(self.en_content.absolute_url())\n+            f"{self.en_content.absolute_url()}/@translations"\n         )\n \n         save_request_and_response_for_docs("translations_get", response)\n@@ -1890,14 +1862,14 @@ def test_documentation_translations_delete(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = self.api_session.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             json={"language": "es"},\n         )\n         save_request_and_response_for_docs("translations_delete", response)\n \n     def test_documentation_translations_link_on_post(self):\n         response = self.api_session.post(\n-            "{}/de".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/de",\n             json={\n                 "@type": "Document",\n                 "id": "mydocument",\n@@ -1924,7 +1896,7 @@ class TestIterateDocumentation(TestDocumentationBase):\n     layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIterateDocumentation, self).setUp()\n+        super().setUp()\n \n         self.doc = self.portal.invokeFactory(\n             "Document", id="document", title="Test document"\n@@ -1932,7 +1904,7 @@ def setUp(self):\n         transaction.commit()\n \n     def tearDown(self):\n-        super(TestIterateDocumentation, self).tearDown()\n+        super().tearDown()\n \n     def test_documentation_workingcopy_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 5d45cdc83..d349f2e86 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -7,14 +7,12 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.dxtypes import ITestAnnotationsBehavior\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n-from six.moves import range\n from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n from zope.component import provideHandler\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n \n import json\n-import six\n import unittest\n \n \n@@ -28,9 +26,9 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n-            test_textline_field=u"Test Document",\n-            test_readonly_field=u"readonly",\n+            id="doc1",\n+            test_textline_field="Test Document",\n+            test_readonly_field="readonly",\n         )\n \n         # ordering setup\n@@ -61,11 +59,11 @@ def test_deserializer_raises_with_malformed_body(self):\n \n     def test_deserializer_updates_field_value(self):\n         self.deserialize(body=\'{"test_textline_field": "My Item"}\')\n-        self.assertEqual(u"My Item", self.portal.doc1.test_textline_field)\n+        self.assertEqual("My Item", self.portal.doc1.test_textline_field)\n \n     def test_deserializer_ignores_readonly_fields(self):\n         self.deserialize(body=\'{"test_readonly_field": "Foo"}\')\n-        self.assertEqual(u"readonly", self.portal.doc1.test_readonly_field)\n+        self.assertEqual("readonly", self.portal.doc1.test_readonly_field)\n \n     def test_deserializer_notifies_object_modified(self):\n         def handler(obj, event):\n@@ -107,18 +105,18 @@ def handler(obj, event):\n         )\n \n     def test_deserializer_does_not_update_field_without_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        self.portal.doc1.test_write_permission_field = "Test Write Permission"\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Contributor", "Editor"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n         self.assertEqual(\n-            u"Test Write Permission", self.portal.doc1.test_write_permission_field\n+            "Test Write Permission", self.portal.doc1.test_write_permission_field\n         )\n \n     def test_deserializer_updates_field_with_write_permission(self):\n-        self.portal.doc1.test_write_permission_field = u"Test Write Permission"\n+        self.portal.doc1.test_write_permission_field = "Test Write Permission"\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.deserialize(body=\'{"test_write_permission_field": "Foo"}\')\n-        self.assertEqual(u"Foo", self.portal.doc1.test_write_permission_field)\n+        self.assertEqual("Foo", self.portal.doc1.test_write_permission_field)\n \n     def test_deserializer_validates_invariant(self):\n         with self.assertRaises(BadRequest) as cm:\n@@ -127,17 +125,17 @@ def test_deserializer_validates_invariant(self):\n                 \' "test_invariant_field2": "Bar"}\'\n             )\n         self.assertEqual(\n-            u"Must have same values", str(cm.exception.args[0][0]["message"])\n+            "Must have same values", str(cm.exception.args[0][0]["message"])\n         )\n \n     def test_deserializer_updates_behavior_field_value(self):\n         self.deserialize(body=\'{"test_behavior_field": "My Value"}\')\n-        self.assertEqual(u"My Value", self.portal.doc1.test_behavior_field)\n+        self.assertEqual("My Value", self.portal.doc1.test_behavior_field)\n \n     def test_deserializer_updates_behavior_field_value_in_annotations(self):\n         self.deserialize(body=\'{"test_annotations_behavior_field": "My Value"}\')\n         self.assertEqual(\n-            u"My Value",\n+            "My Value",\n             ITestAnnotationsBehavior(self.portal.doc1).test_annotations_behavior_field,\n         )\n \n@@ -148,19 +146,19 @@ def test_deserializer_raises_if_required_value_is_missing(self):\n                 body=\'{"test_textline_field": "My Value"}\', validate_all=True\n             )\n         self.assertEqual(\n-            u"Required input is missing.", cm.exception.args[0][0]["message"]\n+            "Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n         # An empty string should be considered a missing value\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_textline_field": ""}\', validate_all=True)\n         self.assertEqual(\n-            u"Required input is missing.", cm.exception.args[0][0]["message"]\n+            "Required input is missing.", cm.exception.args[0][0]["message"]\n         )\n \n     def test_deserializer_succeeds_if_required_value_is_provided(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n-        self.assertEqual(u"My Value", self.portal.doc1.test_required_field)\n+        self.assertEqual("My Value", self.portal.doc1.test_required_field)\n \n     def test_deserializer_does_not_store_default_value(self):\n         # XXX: Dexterity has an odd behavior with default values.\n@@ -181,12 +179,12 @@ def test_deserializer_does_not_store_default_value(self):\n \n     def test_deserializer_passes_validation_with_not_provided_defaults(self):\n         self.deserialize(body=\'{"test_required_field": "My Value"}\', validate_all=True)\n-        self.assertEqual(u"Default", self.portal.doc1.test_default_value_field)\n-        self.assertEqual(u"DefaultFactory", self.portal.doc1.test_default_factory_field)\n+        self.assertEqual("Default", self.portal.doc1.test_default_value_field)\n+        self.assertEqual("DefaultFactory", self.portal.doc1.test_default_factory_field)\n \n     def test_deserializer_sets_missing_value_when_receiving_null(self):\n         self.deserialize(body=\'{"test_missing_value_field": null}\')\n-        self.assertEqual(u"missing", self.portal.doc1.test_missing_value_field)\n+        self.assertEqual("missing", self.portal.doc1.test_missing_value_field)\n \n     def test_deserializer_sets_missing_value_on_required_field(self):\n         """We don\'t set missing_value if the field is required"""\n@@ -194,7 +192,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n         with self.assertRaises(BadRequest) as cm:\n             self.deserialize(body=\'{"test_missing_value_required_field": null}\')\n         self.assertEqual(\n-            u"valid value", self.portal.doc1.test_missing_value_required_field\n+            "valid value", self.portal.doc1.test_missing_value_required_field\n         )\n         self.assertEqual(\n             (\n@@ -204,7 +202,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n             cm.exception.args[0][0]["message"],\n         )\n         self.assertEqual(\n-            u"test_missing_value_required_field", cm.exception.args[0][0]["field"]\n+            "test_missing_value_required_field", cm.exception.args[0][0]["field"]\n         )\n \n     def test_set_layout(self):\n@@ -224,16 +222,16 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n-            test_textline_field=u"Test Document",\n-            test_readonly_field=u"readonly",\n+            id="doc1",\n+            test_textline_field="Test Document",\n+            test_readonly_field="readonly",\n         )\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc2",\n-            test_textline_field=u"Test Document 2",\n-            test_readonly_field=u"readonly",\n+            id="doc2",\n+            test_textline_field="Test Document 2",\n+            test_readonly_field="readonly",\n         )\n \n     def deserialize(self, field, value, validate_all=False, context=None):\n@@ -250,7 +248,7 @@ def serialize(self, field):\n         return serializer()[field]\n \n     def test_serialize2deserialize_relation(self):\n-        value = six.text_type(self.portal.doc2.UID())\n+        value = str(self.portal.doc2.UID())\n         self.deserialize("test_relationchoice_field", value)\n \n         serialization_value = self.serialize("test_relationchoice_field")\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex f1f9c7e06..b57b552df 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -30,7 +30,7 @@\n import unittest\n \n \n-class AdapterCM(object):\n+class AdapterCM:\n     """Context manager that will temporarily register an adapter"""\n \n     def __init__(self, adapter, from_, provides):\n@@ -54,17 +54,17 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n \n-        richtext_value = RichTextValue(u"K\xc3\xa4fer", "text/plain", "text/html")\n+        richtext_value = RichTextValue("K\xc3\xa4fer", "text/plain", "text/html")\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n+            id="doc1",\n             test_ascii_field="foo",\n             test_asciiline_field="foo",\n             test_bool_field=True,\n             test_bytes_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n             test_bytesline_field="\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc",\n-            test_choice_field=u"foo",\n+            test_choice_field="foo",\n             test_date_field=date(2015, 7, 15),\n             test_datetime_field=datetime(2015, 6, 20, 13, 22, 4),\n             test_decimal_field=Decimal(1.1),\n@@ -73,15 +73,15 @@ def setUp(self):\n             test_frozenset_field=frozenset([1, 2, 3]),\n             test_int_field=500,\n             test_list_field=[1, "two", 3],\n-            test_set_field=set(["a", "b", "c"]),\n-            test_text_field=u"K\xc3\xa4fer",\n+            test_set_field={"a", "b", "c"},\n+            test_text_field="K\xc3\xa4fer",\n             test_richtext_field=richtext_value,\n-            test_textline_field=u"K\xc3\xa4fer",\n+            test_textline_field="K\xc3\xa4fer",\n             test_time_field=time(14, 15, 33),\n             test_timedelta_field=timedelta(44),\n             test_tuple_field=(1, 1),\n-            test_readonly_field=u"readonly",\n-            test_read_permission_field=u"Secret Stuff",\n+            test_readonly_field="readonly",\n+            test_read_permission_field="Secret Stuff",\n         )\n \n         self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n@@ -101,54 +101,54 @@ def test_serializer_returns_json_serializeable_object(self):\n     @unittest.skip("We do not include the context at this point")\n     def test_serializer_includes_context(self):\n         obj = self.serialize()\n-        self.assertIn(u"@context", obj)\n-        self.assertEqual(u"http://www.w3.org/ns/hydra/context.jsonld", obj[u"@context"])\n+        self.assertIn("@context", obj)\n+        self.assertEqual("http://www.w3.org/ns/hydra/context.jsonld", obj["@context"])\n \n     def test_serializer_includes_json_ld_id(self):\n         obj = self.serialize()\n-        self.assertIn(u"@id", obj)\n-        self.assertEqual(self.portal.doc1.absolute_url(), obj[u"@id"])\n+        self.assertIn("@id", obj)\n+        self.assertEqual(self.portal.doc1.absolute_url(), obj["@id"])\n \n     def test_serializer_includes_id(self):\n         obj = self.serialize()\n-        self.assertIn(u"id", obj)\n-        self.assertEqual(self.portal.doc1.id, obj[u"id"])\n+        self.assertIn("id", obj)\n+        self.assertEqual(self.portal.doc1.id, obj["id"])\n \n     def test_serializer_includes_type(self):\n         obj = self.serialize()\n-        self.assertIn(u"@type", obj)\n-        self.assertEqual(self.portal.doc1.portal_type, obj[u"@type"])\n+        self.assertIn("@type", obj)\n+        self.assertEqual(self.portal.doc1.portal_type, obj["@type"])\n \n     def test_serializer_includes_review_state(self):\n         obj = self.serialize()\n-        self.assertIn(u"review_state", obj)\n-        self.assertEqual(u"private", obj[u"review_state"])\n+        self.assertIn("review_state", obj)\n+        self.assertEqual("private", obj["review_state"])\n \n     def test_serializer_includes_uid(self):\n         obj = self.serialize()\n-        self.assertIn(u"UID", obj)\n-        self.assertEqual(u"30314724b77a4ec0abbad03d262837aa", obj[u"UID"])\n+        self.assertIn("UID", obj)\n+        self.assertEqual("30314724b77a4ec0abbad03d262837aa", obj["UID"])\n \n     def test_serializer_includes_creation_date(self):\n         obj = self.serialize()\n-        self.assertIn(u"created", obj)\n-        self.assertEqual(u"2015-04-27T10:14:48+00:00", obj[u"created"])\n+        self.assertIn("created", obj)\n+        self.assertEqual("2015-04-27T10:14:48+00:00", obj["created"])\n \n     def test_serializer_includes_modification_date(self):\n         obj = self.serialize()\n-        self.assertIn(u"modified", obj)\n-        self.assertEqual(u"2015-04-27T10:24:11+00:00", obj[u"modified"])\n+        self.assertIn("modified", obj)\n+        self.assertEqual("2015-04-27T10:24:11+00:00", obj["modified"])\n \n     def test_serializer_ignores_field_without_read_permission(self):\n-        self.portal.doc1.test_read_permission_field = u"Secret Stuff"\n+        self.portal.doc1.test_read_permission_field = "Secret Stuff"\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n-        self.assertNotIn(u"test_read_permission_field", self.serialize())\n+        self.assertNotIn("test_read_permission_field", self.serialize())\n \n     def test_serializer_includes_field_with_read_permission(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         obj = self.serialize()\n-        self.assertIn(u"test_read_permission_field", obj)\n-        self.assertEqual(u"Secret Stuff", obj[u"test_read_permission_field"])\n+        self.assertIn("test_read_permission_field", obj)\n+        self.assertEqual("Secret Stuff", obj["test_read_permission_field"])\n \n     def test_get_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n@@ -180,7 +180,7 @@ def test_get_is_folderish(self):\n         self.assertEqual(False, obj["is_folderish"])\n \n     def test_get_is_folderish_in_folder(self):\n-        self.portal.invokeFactory("Folder", id=u"folder")\n+        self.portal.invokeFactory("Folder", id="folder")\n         serializer = getMultiAdapter(\n             (self.portal.folder, self.request), ISerializeToJson\n         )\n@@ -413,7 +413,7 @@ def test_richtext_serializer_context(self):\n         This is then verfied.\n         """\n \n-        class RichtextTransform(object):\n+        class RichtextTransform:\n             """RichttextValue to show that the context is correctly passed\n             in throughout the stack.\n             """\n@@ -433,7 +433,7 @@ def __call__(self, value, mime_type):\n \n     def test_allow_discussion_by_default(self):\n         """Not globally addable, not fti enabled, not obj instance enabled"""\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n \n@@ -441,7 +441,7 @@ def test_allow_discussion_by_default(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         self.portal.doc2.allow_discussion = True\n         serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n@@ -450,7 +450,7 @@ def test_allow_discussion_obj_instance_allows_but_not_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_not_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, self.portal.doc2.portal_type)\n         document_fti.allow_discussion = True\n@@ -461,7 +461,7 @@ def test_allow_discussion_fti_allows_not_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -472,7 +472,7 @@ def test_allow_discussion_allows_global_enabled_but_nothing_else(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_allows_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -484,7 +484,7 @@ def test_allow_discussion_obj_instance_allows_global_enabled(self):\n         self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -495,7 +495,7 @@ def test_allow_discussion_obj_instance_not_set_global_enabled(self):\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled(self):\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -511,7 +511,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -529,7 +529,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -546,7 +546,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(\n         self,\n     ):  # noqa\n-        self.portal.invokeFactory("Document", id=u"doc2")\n+        self.portal.invokeFactory("Document", id="doc2")\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         settings.globally_enabled = True\n@@ -583,15 +583,15 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc1",\n+            id="doc1",\n             test_primary_namedfile_field=NamedFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n \n         self.portal.invokeFactory(\n             "DXTestDocument",\n-            id=u"doc2",\n+            id="doc2",\n             test_primary_namedfile_field=None,\n         )\n \n@@ -608,10 +608,10 @@ def test_primary_field_target(self):\n         serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n         data = serializer()\n         self.assertIn("targetUrl", data)\n-        download_url = u"/".join(\n+        download_url = "/".join(\n             [\n                 self.portal.doc1.absolute_url(),\n-                u"@@download/test_primary_namedfile_field",\n+                "@@download/test_primary_namedfile_field",\n             ]\n         )\n         self.assertEqual(data["targetUrl"], download_url)\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 9db71c22e..ffa060cd8 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -16,11 +16,10 @@\n from zope.schema.interfaces import ConstraintNotSatisfied\n from zope.schema.interfaces import ValidationError\n \n-import six\n import unittest\n \n \n-class RequiredField(object):\n+class RequiredField:\n     """Context manager that will make a field required and back to old state."""\n \n     def __init__(self, field):\n@@ -55,12 +54,12 @@ def deserialize(self, fieldname, value):\n         return deserializer(value)\n \n     def test_ascii_deserialization_returns_native_string(self):\n-        value = self.deserialize("test_ascii_field", u"Foo")\n+        value = self.deserialize("test_ascii_field", "Foo")\n         self.assertTrue(isinstance(value, str), "Not a <str>")\n         self.assertEqual("Foo", value)\n \n     def test_asciiline_deserialization_returns_native_string(self):\n-        value = self.deserialize("test_asciiline_field", u"Foo")\n+        value = self.deserialize("test_asciiline_field", "Foo")\n         self.assertTrue(isinstance(value, str), "Not a <str>")\n         self.assertEqual("Foo", value)\n \n@@ -75,56 +74,54 @@ def test_bool_deserialization_returns_false(self):\n         self.assertEqual(False, value)\n \n     def test_bytes_deserialization_returns_bytestring(self):\n-        value = self.deserialize("test_bytes_field", u"Foo")\n+        value = self.deserialize("test_bytes_field", "Foo")\n         self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n         self.assertEqual(b"Foo", value)\n \n     def test_bytesline_deserialization_returns_bytestring(self):\n-        value = self.deserialize("test_bytesline_field", u"Foo")\n+        value = self.deserialize("test_bytesline_field", "Foo")\n         self.assertTrue(isinstance(value, bytes), "Not a <bytes>")\n         self.assertEqual(b"Foo", value)\n \n     def test_choice_deserialization_returns_vocabulary_item(self):\n-        value = self.deserialize("test_choice_field", u"bar")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"bar", value)\n+        value = self.deserialize("test_choice_field", "bar")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("bar", value)\n \n     def test_choice_deserialization_from_token_returns_vocabulary_value(self):\n-        value = self.deserialize("test_choice_field_with_vocabulary", u"token1")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", "token1")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_choice_deserialization_from_value_returns_vocabulary_value(self):\n-        value = self.deserialize("test_choice_field_with_vocabulary", u"value1")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        value = self.deserialize("test_choice_field_with_vocabulary", "value1")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_choice_deserialization_from_term_returns_vocabulary_value(self):\n         value = self.deserialize(\n             "test_choice_field_with_vocabulary",\n-            {u"token": u"token1", u"title": u"title1"},\n+            {"token": "token1", "title": "title1"},\n         )\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"value1", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("value1", value)\n \n     def test_date_deserialization_returns_date(self):\n-        value = self.deserialize("test_date_field", u"2015-12-20")\n+        value = self.deserialize("test_date_field", "2015-12-20")\n         self.assertTrue(isinstance(value, date))\n         self.assertEqual(date(2015, 12, 20), value)\n \n     def test_datetime_deserialization_returns_datetime(self):\n-        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361Z")\n+        value = self.deserialize("test_datetime_field", "2015-12-20T10:39:54.361Z")\n         self.assertTrue(isinstance(value, datetime), "Not a <datetime>")\n         self.assertEqual(datetime(2015, 12, 20, 10, 39, 54, 361000), value)\n \n     def test_datetime_deserialization_handles_timezone(self):\n-        value = self.deserialize("test_datetime_field", u"2015-12-20T10:39:54.361+01")\n+        value = self.deserialize("test_datetime_field", "2015-12-20T10:39:54.361+01")\n         self.assertEqual(datetime(2015, 12, 20, 9, 39, 54, 361000), value)\n \n     def test_datetime_with_tz_deserialization_keeps_timezone(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-12-20T10:39:54.361+01"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361+01")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 10, 39, 54, 361000)\n@@ -133,9 +130,7 @@ def test_datetime_with_tz_deserialization_keeps_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_converts_timezone(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-12-20T10:39:54.361-04"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361-04")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 15, 39, 54, 361000)\n@@ -144,7 +139,7 @@ def test_datetime_with_tz_deserialization_converts_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_adds_timezone(self):\n-        value = self.deserialize("test_datetime_tz_field", u"2015-12-20T10:39:54.361")\n+        value = self.deserialize("test_datetime_tz_field", "2015-12-20T10:39:54.361")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 12, 20, 11, 39, 54, 361000)\n@@ -153,9 +148,7 @@ def test_datetime_with_tz_deserialization_adds_timezone(self):\n         )\n \n     def test_datetime_with_tz_deserialization_handles_dst(self):\n-        value = self.deserialize(\n-            "test_datetime_tz_field", u"2015-05-20T10:39:54.361+02"\n-        )\n+        value = self.deserialize("test_datetime_tz_field", "2015-05-20T10:39:54.361+02")\n         self.assertEqual(\n             timezone("Europe/Zurich").localize(\n                 datetime(2015, 5, 20, 10, 39, 54, 361000)\n@@ -176,14 +169,14 @@ def test_datetime_deserialization_required(self):\n                 self.deserialize(field_name, None)\n \n     def test_text_deserialization_returns_decimal(self):\n-        value = self.deserialize("test_decimal_field", u"1.1")\n+        value = self.deserialize("test_decimal_field", "1.1")\n         self.assertTrue(isinstance(value, Decimal), "Not a <Decimal>")\n-        self.assertEqual(Decimal(u"1.1"), value)\n+        self.assertEqual(Decimal("1.1"), value)\n \n     def test_dict_deserialization_returns_dict(self):\n-        value = self.deserialize("test_dict_field", {u"key": u"value"})\n+        value = self.deserialize("test_dict_field", {"key": "value"})\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        self.assertEqual({u"key": u"value"}, value)\n+        self.assertEqual({"key": "value"}, value)\n \n     def test_float_deserialization_returns_float(self):\n         value = self.deserialize("test_float_field", 1.0)\n@@ -191,9 +184,9 @@ def test_float_deserialization_returns_float(self):\n         self.assertEqual(1.0, value)\n \n     def test_frozenset_deserialization_returns_frozenset(self):\n-        value = self.deserialize("test_frozenset_field", [u"foo", u"bar"])\n+        value = self.deserialize("test_frozenset_field", ["foo", "bar"])\n         self.assertTrue(isinstance(value, frozenset), "Not a <frozenset>")\n-        self.assertEqual(frozenset([u"foo", u"bar"]), value)\n+        self.assertEqual(frozenset(["foo", "bar"]), value)\n \n     def test_int_deserialization_returns_int(self):\n         value = self.deserialize("test_int_field", 22)\n@@ -207,46 +200,46 @@ def test_list_deserialization_returns_list(self):\n \n     def test_list_deserialization_from_tokens_returns_list_of_values(self):\n         value = self.deserialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"token1", u"token3"]\n+            "test_list_field_with_choice_with_vocabulary", ["token1", "token3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_list_deserialization_from_values_returns_list_of_values(self):\n         value = self.deserialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+            "test_list_field_with_choice_with_vocabulary", ["value1", "value3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_list_deserialization_from_terms_returns_list_of_values(self):\n         value = self.deserialize(\n             "test_list_field_with_choice_with_vocabulary",\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"value1", u"value3"], value)\n+        self.assertEqual(["value1", "value3"], value)\n \n     def test_set_deserialization_returns_set(self):\n         value = self.deserialize("test_set_field", [1, 2, 3])\n         self.assertTrue(isinstance(value, set), "Not a <set>")\n-        self.assertEqual(set([1, 2, 3]), value)\n+        self.assertEqual({1, 2, 3}, value)\n \n     def test_text_deserialization_returns_unicode(self):\n-        value = self.deserialize("test_text_field", u"Foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"Foo", value)\n+        value = self.deserialize("test_text_field", "Foo")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("Foo", value)\n \n     def test_textline_deserialization_returns_unicode(self):\n-        value = self.deserialize("test_textline_field", u"Foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"Foo", value)\n+        value = self.deserialize("test_textline_field", "Foo")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("Foo", value)\n \n     def test_time_deserialization_returns_time(self):\n-        value = self.deserialize("test_time_field", u"10:39:54.361Z")\n+        value = self.deserialize("test_time_field", "10:39:54.361Z")\n         self.assertTrue(isinstance(value, time), "Not a <time>")\n         self.assertEqual(time(10, 39, 54, 361000), value)\n \n@@ -261,14 +254,14 @@ def test_tuple_deserialization_returns_tuple(self):\n         self.assertEqual((1, 2, 3), value)\n \n     def test_nested_list_deserialization_returns_nested_list(self):\n-        value = self.deserialize("test_nested_list_field", [[1, u"foo"], [2, u"bar"]])\n+        value = self.deserialize("test_nested_list_field", [[1, "foo"], [2, "bar"]])\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertTrue(isinstance(value[0], tuple), "Not a <tuple>")\n         self.assertTrue(isinstance(value[1], tuple), "Not a <tuple>")\n \n     def test_nested_dict_deserialization_returns_nested_dict(self):\n         value = self.deserialize(\n-            "test_nested_dict_field", {u"1": [u"foo", u"bar"], u"2": [u"spam", u"eggs"]}\n+            "test_nested_dict_field", {"1": ["foo", "bar"], "2": ["spam", "eggs"]}\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n         self.assertIn("1", value)\n@@ -277,55 +270,55 @@ def test_nested_dict_deserialization_returns_nested_dict(self):\n         self.assertTrue(isinstance(value["2"], tuple), "Not a <tuple>")\n \n     def test_richtext_deserialization_from_unicode_returns_richtext(self):\n-        value = self.deserialize("test_richtext_field", u"<p>a paragraph</p>")\n+        value = self.deserialize("test_richtext_field", "<p>a paragraph</p>")\n         self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n-        self.assertEqual(u"<p>a paragraph</p>", value.raw)\n+        self.assertEqual("<p>a paragraph</p>", value.raw)\n \n     def test_richtext_deserialization_from_dict_returns_richtext(self):\n-        value = self.deserialize("test_richtext_field", {u"data": u"Some text"})\n+        value = self.deserialize("test_richtext_field", {"data": "Some text"})\n         self.assertTrue(isinstance(value, RichTextValue), "Not a <RichTextValue>")\n-        self.assertEqual(u"Some text", value.raw)\n+        self.assertEqual("Some text", value.raw)\n \n     def test_richtext_deserialization_sets_mime_type(self):\n         value = self.deserialize(\n             "test_richtext_field",\n-            {u"data": u"Some text", u"content-type": u"text/plain"},\n+            {"data": "Some text", "content-type": "text/plain"},\n         )\n         self.assertEqual("text/plain", value.mimeType)\n \n     def test_richtext_deserialization_sets_encoding(self):\n         value = self.deserialize(\n-            "test_richtext_field", {u"data": u"Some text", u"encoding": u"latin1"}\n+            "test_richtext_field", {"data": "Some text", "encoding": "latin1"}\n         )\n         self.assertEqual("latin1", value.encoding)\n \n     def test_richtext_deserialization_fix_apostrophe(self):\n-        value = self.deserialize("test_richtext_field", u"<p>char with &#x27;</p>")\n+        value = self.deserialize("test_richtext_field", "<p>char with &#x27;</p>")\n         self.assertEqual("<p>char with \'</p>", value.raw)\n \n     def test_namedfield_deserialization_decodes_value(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"U3BhbSBhbmQgZWdncyE=", u"encoding": u"base64"},\n+            {"data": "U3BhbSBhbmQgZWdncyE=", "encoding": "base64"},\n         )\n         self.assertEqual(b"Spam and eggs!", value.data)\n \n     def test_namedfield_deserialization_sets_content_type(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+            {"data": "Spam and eggs!", "content-type": "text/plain"},\n         )\n         self.assertEqual("text/plain", value.contentType)\n \n     def test_namedfield_deserialization_sets_filename(self):\n         value = self.deserialize(\n             "test_namedfile_field",\n-            {u"data": u"Spam and eggs!", u"filename": u"doc.txt"},\n+            {"data": "Spam and eggs!", "filename": "doc.txt"},\n         )\n         self.assertEqual("doc.txt", value.filename)\n \n     def test_namedfile_deserialization_returns_namedfile(self):\n-        value = self.deserialize("test_namedfile_field", {u"data": u"Spam and eggs!"})\n+        value = self.deserialize("test_namedfile_field", {"data": "Spam and eggs!"})\n         self.assertTrue(isinstance(value, namedfile.NamedFile), "Not a <NamedFile>")\n         self.assertEqual(b"Spam and eggs!", value.data)\n \n@@ -333,18 +326,16 @@ def test_namedimage_deserialization_returns_namedimage(self):\n         value = self.deserialize(\n             "test_namedimage_field",\n             {\n-                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n-                u"encoding": u"base64",\n-                u"content-type": u"image/gif",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "encoding": "base64",\n+                "content-type": "image/gif",\n             },\n         )\n         self.assertTrue(isinstance(value, namedfile.NamedImage), "Not a <NamedImage>")\n         self.assertTrue(value.data.startswith(b"GIF89a"))\n \n     def test_namedblobfile_deserialization_returns_namedblobfile(self):\n-        value = self.deserialize(\n-            "test_namedblobfile_field", {u"data": u"Spam and eggs!"}\n-        )\n+        value = self.deserialize("test_namedblobfile_field", {"data": "Spam and eggs!"})\n         self.assertTrue(\n             isinstance(value, namedfile.NamedBlobFile), "Not a <NamedBlobFile>"\n         )\n@@ -354,9 +345,9 @@ def test_namedblobimage_deserialization_returns_namedblobimage(self):\n         value = self.deserialize(\n             "test_namedblobimage_field",\n             {\n-                u"data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n-                u"encoding": u"base64",\n-                u"content-type": u"image/gif",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "encoding": "base64",\n+                "content-type": "image/gif",\n             },\n         )\n         self.assertTrue(\n@@ -394,7 +385,7 @@ def test_relationchoice_deserialization_from_uid_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize("test_relationchoice_field", six.text_type(doc2.UID()))\n+        value = self.deserialize("test_relationchoice_field", str(doc2.UID()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_url_returns_document(self):\n@@ -403,9 +394,7 @@ def test_relationchoice_deserialization_from_url_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize(\n-            "test_relationchoice_field", six.text_type(doc2.absolute_url())\n-        )\n+        value = self.deserialize("test_relationchoice_field", str(doc2.absolute_url()))\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_path_returns_document(self):\n@@ -414,14 +403,14 @@ def test_relationchoice_deserialization_from_path_returns_document(self):\n                 "DXTestDocument", id="doc2", title="Referenceable Document"\n             )\n         ]\n-        value = self.deserialize("test_relationchoice_field", u"/doc2")\n+        value = self.deserialize("test_relationchoice_field", "/doc2")\n         self.assertEqual(doc2, value)\n \n     def test_relationchoice_deserialization_from_invalid_intid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize("test_relationchoice_field", 123456789)\n         self.assertEqual(\n-            str(cm.exception), u"Could not resolve object for intid=123456789"\n+            str(cm.exception), "Could not resolve object for intid=123456789"\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -429,11 +418,11 @@ def test_relationchoice_deserialization_from_invalid_uid_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\n                 "test_relationchoice_field",\n-                six.text_type("ac12b24913cf45c6863937367aacc263"),\n+                "ac12b24913cf45c6863937367aacc263",\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            u"Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n+            "Could not resolve object for UID=ac12b24913cf45c6863937367aacc263",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -441,21 +430,19 @@ def test_relationchoice_deserialization_from_invalid_url_raises(self):\n         with self.assertRaises(ValueError) as cm:\n             self.deserialize(\n                 "test_relationchoice_field",\n-                six.text_type("http://nohost/plone/doesnotexist"),\n+                "http://nohost/plone/doesnotexist",\n             )\n         self.assertEqual(\n             str(cm.exception),\n-            u"Could not resolve object for URL=http://nohost/plone/doesnotexist",\n+            "Could not resolve object for URL=http://nohost/plone/doesnotexist",\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n     def test_relationchoice_deserialization_from_invalid_path_raises(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize(\n-                "test_relationchoice_field", six.text_type("/doesnotexist")\n-            )\n+            self.deserialize("test_relationchoice_field", "/doesnotexist")\n         self.assertEqual(\n-            str(cm.exception), u"Could not resolve object for path=/doesnotexist"\n+            str(cm.exception), "Could not resolve object for path=/doesnotexist"\n         )\n         self.assertEqual(400, self.request.response.getStatus())\n \n@@ -472,7 +459,7 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n         ]\n         value = self.deserialize(\n             "test_relationlist_field",\n-            [six.text_type(doc2.UID()), six.text_type(doc3.UID())],\n+            [str(doc2.UID()), str(doc3.UID())],\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(doc2, value[0])\n@@ -480,16 +467,16 @@ def test_relationlist_deserialization_returns_list_of_documents(self):\n \n     def test_default_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize("test_maxlength_field", u"01234567890")\n+            self.deserialize("test_maxlength_field", "01234567890")\n \n     def test_datetime_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_datetime_field", u"2015-15-15T10:39:54.361Z")\n-        self.assertEqual(u"Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n+            self.deserialize("test_datetime_field", "2015-15-15T10:39:54.361Z")\n+        self.assertEqual("Invalid date: 2015-15-15T10:39:54.361Z", str(cm.exception))\n \n     def test_datetime_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError):\n-            self.deserialize("test_datetime_min_field", u"1999-12-20T10:39:54.361Z")\n+            self.deserialize("test_datetime_min_field", "1999-12-20T10:39:54.361Z")\n \n     def test_collection_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -498,8 +485,8 @@ def test_collection_deserializer_validates_value(self):\n         # This validation error is actually produced by the\n         # DefaultFieldDeserializer that the CollectionFieldDeserializer will\n         # delegate to for deserializing collection items.\n-        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n-        self.assertEqual((b"2", six.integer_types, ""), cm.exception.args)\n+        self.assertEqual("Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual((b"2", (int,), ""), cm.exception.args)\n \n     def test_dict_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n@@ -511,45 +498,45 @@ def test_dict_deserializer_validates_value(self):\n         # We check for two sets of exception details\n         # because zope.schema changed its exception...\n         self.assertIn(\n-            cm.exception.doc(), (u"Object is of wrong type.", u"Invalid int literal.")\n+            cm.exception.doc(), ("Object is of wrong type.", "Invalid int literal.")\n         )\n         self.assertIn(\n             cm.exception.args,\n             (\n-                ("k", six.integer_types, ""),\n+                ("k", (int,), ""),\n                 ("invalid literal for int() with base 10: \'k\'",),\n             ),\n         )\n \n     def test_time_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_time_field", u"midnight")\n-        self.assertEqual(u"Invalid time: midnight", str(cm.exception))\n+            self.deserialize("test_time_field", "midnight")\n+        self.assertEqual("Invalid time: midnight", str(cm.exception))\n \n     def test_time_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize("test_time_min_field", u"00:39:54.361Z")\n-        self.assertEqual(u"Value is too small", cm.exception.doc())\n+            self.deserialize("test_time_min_field", "00:39:54.361Z")\n+        self.assertEqual("Value is too small", cm.exception.doc())\n \n     def test_timedelta_deserializer_handles_invalid_value(self):\n         with self.assertRaises(ValueError) as cm:\n-            self.deserialize("test_timedelta_field", u"2h")\n+            self.deserialize("test_timedelta_field", "2h")\n         self.assertIn(\n-            u"unsupported type for timedelta seconds component:", str(cm.exception)\n+            "unsupported type for timedelta seconds component:", str(cm.exception)\n         )\n \n     def test_timedelta_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize("test_timedelta_min_field", 50)\n-        self.assertEqual(u"Value is too small", cm.exception.doc())\n+        self.assertEqual("Value is too small", cm.exception.doc())\n \n     def test_namedfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\n                 "test_namedimage_field",\n-                {u"data": u"Spam and eggs!", u"content-type": u"text/plain"},\n+                {"data": "Spam and eggs!", "content-type": "text/plain"},\n             )\n-        self.assertEqual(u"Invalid image file", cm.exception.doc())\n+        self.assertEqual("Invalid image file", cm.exception.doc())\n \n     def test_namedfield_deserializer_download(self):\n         # Handle when we post back the GET results.\n@@ -557,16 +544,16 @@ def test_namedfield_deserializer_download(self):\n \n         self.deserialize(\n             "test_namedfile_field",\n-            {u"download": u"some download link", u"content-type": u"text/plain"},\n+            {"download": "some download link", "content-type": "text/plain"},\n         )\n \n     def test_richtextfield_deserializer_validates_value(self):\n         with self.assertRaises(ValidationError) as cm:\n             self.deserialize(\n                 "test_richtext_field",\n-                {u"data": u"Spam and eggs!", u"content-type": u"text/xml"},\n+                {"data": "Spam and eggs!", "content-type": "text/xml"},\n             )\n-        self.assertEqual(u"Object is of wrong type.", cm.exception.doc())\n+        self.assertEqual("Object is of wrong type.", cm.exception.doc())\n \n     def test_relationchoicefield_deserializer_validates_value(self):\n         self.portal[\n@@ -575,17 +562,17 @@ def test_relationchoicefield_deserializer_validates_value(self):\n             )\n         ]\n         with self.assertRaises(ValidationError) as cm:\n-            self.deserialize("test_relationchoice_field", u"/doc3")\n-        self.assertEqual(u"Constraint not satisfied", cm.exception.doc())\n+            self.deserialize("test_relationchoice_field", "/doc3")\n+        self.assertEqual("Constraint not satisfied", cm.exception.doc())\n \n     def test_deserialize_with_context_bound_vocabulary(self):\n         value = self.deserialize(\n-            "test_list_choice_with_context_vocabulary_field", [u"portal_catalog"]\n+            "test_list_choice_with_context_vocabulary_field", ["portal_catalog"]\n         )\n-        self.assertEqual([u"portal_catalog"], value)\n+        self.assertEqual(["portal_catalog"], value)\n \n     def test_textline_deserializer_strips_value(self):\n-        value = self.deserialize("test_textline_field", u"  aa  ")\n+        value = self.deserialize("test_textline_field", "  aa  ")\n         self.assertEqual(value, "aa")\n \n     def test_default_field_deserializer_validates_value(self):\n@@ -616,14 +603,14 @@ def test_textline_deserializer_for_links_convert_internal_links(self):\n         deserializer = getMultiAdapter((field, link, self.request), IFieldDeserializer)\n \n         self.assertEqual(\n-            u"http://www.plone.com", deserializer(value=u"http://www.plone.com")\n+            "http://www.plone.com", deserializer(value="http://www.plone.com")\n         )\n         self.assertEqual(\n-            u"${portal_url}/doc1", deserializer(value=u"http://nohost/plone/doc1")\n+            "${portal_url}/doc1", deserializer(value="http://nohost/plone/doc1")\n         )\n \n         # for other contents/fields does nothing\n-        value = self.deserialize("test_textline_field", u"http://www.plone.com")\n-        self.assertEqual(u"http://www.plone.com", value)\n-        value = self.deserialize("test_textline_field", u"http://nohost/plone/doc1")\n+        value = self.deserialize("test_textline_field", "http://www.plone.com")\n+        self.assertEqual("http://www.plone.com", value)\n+        value = self.deserialize("test_textline_field", "http://nohost/plone/doc1")\n         self.assertEqual(self.portal.doc1.absolute_url(), value)\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 0636aa0fb..66d1f7fd5 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -3,7 +3,7 @@\n from datetime import time\n from datetime import timedelta\n from decimal import Decimal\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.utils import iterSchemata\n from plone.namedfile.file import NamedBlobFile\n@@ -21,7 +21,6 @@\n from zope.interface.verify import verifyClass\n \n import os\n-import six\n import unittest\n \n \n@@ -51,13 +50,13 @@ def serialize(self, fieldname, value):\n \n     def test_ascii_field_serialization_returns_unicode(self):\n         value = self.serialize("test_ascii_field", "foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"foo", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("foo", value)\n \n     def test_asciiline_field_serialization_returns_unicode(self):\n         value = self.serialize("test_asciiline_field", "foo")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"foo", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("foo", value)\n \n     def test_bool_field_serialization_returns_true(self):\n         value = self.serialize("test_bool_field", True)\n@@ -71,47 +70,47 @@ def test_bool_field_serialization_returns_false(self):\n \n     def test_bytes_field_serialization_returns_unicode(self):\n         value = self.serialize("test_bytes_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("\\xe4\\xf6\\xfc", value)\n \n     def test_bytesline_field_serialization_returns_unicode(self):\n         value = self.serialize("test_bytesline_field", b"\\xc3\\xa4\\xc3\\xb6\\xc3\\xbc")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"\\xe4\\xf6\\xfc", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("\\xe4\\xf6\\xfc", value)\n \n     def test_choice_field_serialization_returns_vocabulary_term(self):\n-        value = self.serialize("test_choice_field", u"foo")\n+        value = self.serialize("test_choice_field", "foo")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u"token": u"foo", u"title": None}, value)\n+        self.assertEqual({"token": "foo", "title": None}, value)\n \n     def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(\n         self,\n     ):  # noqa\n-        value = self.serialize("test_choice_field_with_vocabulary", u"value1")\n+        value = self.serialize("test_choice_field_with_vocabulary", "value1")\n         self.assertTrue(isinstance(value, dict))\n-        self.assertEqual({u"token": u"token1", u"title": u"title1"}, value)\n+        self.assertEqual({"token": "token1", "title": "title1"}, value)\n \n     def test_date_field_serialization_returns_unicode(self):\n         value = self.serialize("test_date_field", date(2015, 7, 15))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"2015-07-15", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("2015-07-15", value)\n \n     def test_datetime_field_serialization_returns_unicode(self):\n         value = self.serialize("test_datetime_field", datetime(2015, 6, 20, 13, 22, 4))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"2015-06-20T13:22:04", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("2015-06-20T13:22:04", value)\n \n     def test_decimal_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_decimal_field", Decimal(u"1.1"))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"1.1", value)\n+        value = self.serialize("test_decimal_field", Decimal("1.1"))\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("1.1", value)\n \n     def test_dict_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_dict_field", {"foo": "bar", "spam": "eggs", "1": 1}\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        self.assertEqual({u"foo": u"bar", u"spam": u"eggs", u"1": 1}, value)\n+        self.assertEqual({"foo": "bar", "spam": "eggs", "1": 1}, value)\n \n     def test_float_field_serialization_returns_float(self):\n         value = self.serialize("test_float_field", 1.5)\n@@ -131,63 +130,63 @@ def test_int_field_serialization_returns_int(self):\n     def test_list_field_serialization_returns_list(self):\n         value = self.serialize("test_list_field", [1, "two", 3])\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([1, u"two", 3], value)\n+        self.assertEqual([1, "two", 3], value)\n \n     def test_list_field_with_vocabulary_choice_serialization_returns_terms(self):\n         value = self.serialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value1", u"value3"]\n+            "test_list_field_with_choice_with_vocabulary", ["value1", "value3"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n             value,\n         )\n \n     def test_list_field_with_vocabulary_choice_serialization_no_valid_term(self):\n         value = self.serialize(\n-            "test_list_field_with_choice_with_vocabulary", [u"value3", u"value4"]\n+            "test_list_field_with_choice_with_vocabulary", ["value3", "value4"]\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [{u"token": u"token3", u"title": u"title3"}],\n+            [{"token": "token3", "title": "title3"}],\n             value,\n         )\n \n     def test_set_field_serialization_returns_list(self):\n-        value = self.serialize("test_set_field", set(["a", "b", "c"]))\n+        value = self.serialize("test_set_field", {"a", "b", "c"})\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n-        self.assertEqual([u"a", u"b", u"c"], sorted(value))\n+        self.assertEqual(["a", "b", "c"], sorted(value))\n \n     def test_set_field_with_vocabulary_choice_serialization_returns_terms(self):\n         value = self.serialize(\n-            "test_set_field_with_choice_with_vocabulary", set([u"value1", u"value3"])\n+            "test_set_field_with_choice_with_vocabulary", {"value1", "value3"}\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n             [\n-                {u"token": u"token1", u"title": u"title1"},\n-                {u"token": u"token3", u"title": u"title3"},\n+                {"token": "token1", "title": "title1"},\n+                {"token": "token3", "title": "title3"},\n             ],\n-            sorted(value, key=lambda x: x[u"token"]),\n+            sorted(value, key=lambda x: x["token"]),\n         )\n \n     def test_text_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_text_field", u"K\xc3\xa4fer")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"K\xc3\xa4fer", value)\n+        value = self.serialize("test_text_field", "K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("K\xc3\xa4fer", value)\n \n     def test_textline_field_serialization_returns_unicode(self):\n-        value = self.serialize("test_textline_field", u"K\xc3\xa4fer")\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"K\xc3\xa4fer", value)\n+        value = self.serialize("test_textline_field", "K\xc3\xa4fer")\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("K\xc3\xa4fer", value)\n \n     def test_time_field_serialization_returns_unicode(self):\n         value = self.serialize("test_time_field", time(14, 15, 33))\n-        self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n-        self.assertEqual(u"14:15:33", value)\n+        self.assertTrue(isinstance(value, str), "Not an <unicode>")\n+        self.assertEqual("14:15:33", value)\n \n     def test_timedelta_field_serialization_returns_float(self):\n         value = self.serialize("test_timedelta_field", timedelta(0.01))\n@@ -198,7 +197,7 @@ def test_richtext_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_richtext_field",\n             RichTextValue(\n-                raw=u"<p>Some Text</p>",\n+                raw="<p>Some Text</p>",\n                 mimeType="text/html",\n                 outputMimeType="text/html",\n             ),\n@@ -206,9 +205,9 @@ def test_richtext_field_serialization_returns_dict(self):\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n         self.assertEqual(\n             {\n-                u"content-type": u"text/html",\n-                u"data": u"<p>Some Text</p>",\n-                u"encoding": u"utf-8",\n+                "content-type": "text/html",\n+                "data": "<p>Some Text</p>",\n+                "encoding": "utf-8",\n             },\n             value,\n         )\n@@ -217,19 +216,19 @@ def test_namedfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_namedfile_field",\n             NamedFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n-        download_url = u"/".join(\n-            [self.doc1.absolute_url(), u"@@download/test_namedfile_field"]\n+        download_url = "/".join(\n+            [self.doc1.absolute_url(), "@@download/test_namedfile_field"]\n         )\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"size": 13,\n-                u"download": download_url,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "size": 13,\n+                "download": download_url,\n             },\n             value,\n         )\n@@ -238,20 +237,20 @@ def test_namedblobfile_field_serialization_returns_dict(self):\n         value = self.serialize(\n             "test_namedblobfile_field",\n             NamedBlobFile(\n-                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+                data="Spam and eggs", contentType="text/plain", filename="test.txt"\n             ),\n         )\n         self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-        download_url = u"/".join(\n-            [self.doc1.absolute_url(), u"@@download/test_namedblobfile_field"]\n+        download_url = "/".join(\n+            [self.doc1.absolute_url(), "@@download/test_namedblobfile_field"]\n         )\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"size": 13,\n-                u"download": download_url,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "size": 13,\n+                "download": download_url,\n             },\n             value,\n         )\n@@ -371,7 +370,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -379,7 +378,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -389,51 +388,51 @@ def test_namedimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -447,19 +446,19 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -468,7 +467,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in JPEG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -476,7 +475,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -486,51 +485,51 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to JPEG in Plone < 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -544,19 +543,19 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -594,7 +593,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone == 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -602,7 +601,7 @@ def test_namedimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -612,51 +611,51 @@ def test_namedimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -670,19 +669,19 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -691,7 +690,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone = 5.1 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         a Pillow-generated image scale in PNG format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -699,7 +698,7 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -709,51 +708,51 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.1\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "jpeg"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -767,19 +766,19 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": None,\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": None,\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -817,7 +816,7 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         the actual original image in its original format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n@@ -825,7 +824,7 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -835,51 +834,51 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.2\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "gif"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -893,7 +892,7 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n@@ -901,15 +900,13 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": u"{}/@@images/{}.{}".format(\n-                    obj_url, scale_url_uuid, "gif"\n-                ),\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": "{}/@@images/{}.{}".format(obj_url, scale_url_uuid, "gif"),\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\n@@ -918,7 +915,7 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n         """In Plone >= 5.2 the image returned when requesting an image\n         scale with the same width and height of the original image is\n         the actual original image in its original format"""\n-        image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n+        image_file = os.path.join(os.path.dirname(__file__), "1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n@@ -926,7 +923,7 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n@@ -936,51 +933,51 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n \n             # Original image is still a "scale"\n             # scaled images are converted to PNG in Plone = 5.2\n-            original_download_url = u"{}/@@images/{}.{}".format(\n+            original_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "gif"\n             )\n \n-            scale_download_url = u"{}/@@images/{}.{}".format(\n+            scale_download_url = "{}/@@images/{}.{}".format(\n                 obj_url, scale_url_uuid, "png"\n             )\n             scales = {\n-                u"listing": {\n-                    u"download": scale_download_url,\n-                    u"width": 16,\n-                    u"height": 12,\n-                },\n-                u"icon": {u"download": scale_download_url, u"width": 32, u"height": 24},\n-                u"tile": {u"download": scale_download_url, u"width": 64, u"height": 48},\n-                u"thumb": {\n-                    u"download": scale_download_url,\n-                    u"width": 128,\n-                    u"height": 96,\n-                },\n-                u"mini": {\n-                    u"download": scale_download_url,\n-                    u"width": 200,\n-                    u"height": 150,\n-                },\n-                u"preview": {\n-                    u"download": scale_download_url,\n-                    u"width": 400,\n-                    u"height": 300,\n-                },\n-                u"large": {\n-                    u"download": scale_download_url,\n-                    u"width": 768,\n-                    u"height": 576,\n+                "listing": {\n+                    "download": scale_download_url,\n+                    "width": 16,\n+                    "height": 12,\n+                },\n+                "icon": {"download": scale_download_url, "width": 32, "height": 24},\n+                "tile": {"download": scale_download_url, "width": 64, "height": 48},\n+                "thumb": {\n+                    "download": scale_download_url,\n+                    "width": 128,\n+                    "height": 96,\n+                },\n+                "mini": {\n+                    "download": scale_download_url,\n+                    "width": 200,\n+                    "height": 150,\n+                },\n+                "preview": {\n+                    "download": scale_download_url,\n+                    "width": 400,\n+                    "height": 300,\n+                },\n+                "large": {\n+                    "download": scale_download_url,\n+                    "width": 768,\n+                    "height": 576,\n                 },\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"1024x768.gif",\n-                    u"content-type": u"image/gif",\n-                    u"size": 1514,\n-                    u"download": original_download_url,\n-                    u"width": 1024,\n-                    u"height": 768,\n-                    u"scales": scales,\n+                    "filename": "1024x768.gif",\n+                    "content-type": "image/gif",\n+                    "size": 1514,\n+                    "download": original_download_url,\n+                    "width": 1024,\n+                    "height": 768,\n+                    "scales": scales,\n                 },\n                 value,\n             )\n@@ -994,7 +991,7 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n-                    data=image_data, contentType=u"image/gif", filename=u"1024x768.gif"\n+                    data=image_data, contentType="image/gif", filename="1024x768.gif"\n                 ),\n             )\n \n@@ -1002,15 +999,13 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n-                u"content-type": u"image/gif",\n-                u"download": u"{}/@@images/{}.{}".format(\n-                    obj_url, scale_url_uuid, "gif"\n-                ),\n-                u"filename": u"1024x768.gif",\n-                u"height": -1,\n-                u"scales": {},\n-                u"size": 18,\n-                u"width": -1,\n+                "content-type": "image/gif",\n+                "download": "{}/@@images/{}.{}".format(obj_url, scale_url_uuid, "gif"),\n+                "filename": "1024x768.gif",\n+                "height": -1,\n+                "scales": {},\n+                "size": 18,\n+                "width": -1,\n             },\n             value,\n         )\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 56843ddcc..166082009 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -32,7 +32,7 @@\n     from plone.app.multilingual.interfaces import ITranslationManager\n \n \n-class ExpandableElementFoo(object):\n+class ExpandableElementFoo:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -44,7 +44,7 @@ def __call__(self, expand=False):\n             return {"foo": "collapsed"}\n \n \n-class ExpandableElementBar(object):\n+class ExpandableElementBar:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n@@ -123,7 +123,7 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         transaction.commit()\n \n@@ -162,18 +162,18 @@ def test_navigation_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"title": u"Home",\n-                    u"@id": self.portal_url + u"",\n-                    u"description": u"",\n-                    u"review_state": None,\n-                    u"items": [],\n+                    "title": "Home",\n+                    "@id": self.portal_url + "",\n+                    "description": "",\n+                    "review_state": None,\n+                    "items": [],\n                 },\n                 {\n-                    u"title": u"Some Folder",\n-                    u"@id": self.portal_url + u"/folder",\n-                    u"description": u"",\n-                    u"review_state": "private",\n-                    u"items": [],\n+                    "title": "Some Folder",\n+                    "@id": self.portal_url + "/folder",\n+                    "description": "",\n+                    "review_state": "private",\n+                    "items": [],\n                 },\n             ],\n             response.json()["@components"]["navigation"]["items"],\n@@ -181,26 +181,24 @@ def test_navigation_expanded(self):\n \n     def test_navigation_expanded_with_depth(self):\n         createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         subfolder1 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            self.folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            self.folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         thirdlevelfolder = createContentInContainer(\n-            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+            subfolder1, "Folder", id="thirdlevelfolder", title="Third Level Folder"\n         )\n         createContentInContainer(\n             thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n-        )\n-        createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -234,8 +232,8 @@ def test_breadcrumbs_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"title": u"Some Folder",\n-                    u"@id": self.portal_url + u"/folder",\n+                    "title": "Some Folder",\n+                    "@id": self.portal_url + "/folder",\n                 }\n             ],\n             response.json()["@components"]["breadcrumbs"]["items"],\n@@ -252,28 +250,28 @@ def test_workflow_expanded(self):\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n-            self.portal_url + u"/folder/@workflow",\n+            self.portal_url + "/folder/@workflow",\n             response.json().get("@components").get("workflow").get("@id"),\n         )\n         self.assertEqual(\n-            u"private",\n+            "private",\n             response.json()["@components"]["workflow"]["history"][0][\n                 "review_state"\n             ],  # noqa\n         )\n         self.assertEqual(\n-            u"Private",\n+            "Private",\n             response.json()["@components"]["workflow"]["history"][0]["title"],\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url + u"/folder/@workflow/publish",  # noqa\n-                    u"title": u"Publish",\n+                    "@id": self.portal_url + "/folder/@workflow/publish",  # noqa\n+                    "title": "Publish",\n                 },\n                 {\n-                    u"@id": self.portal_url + u"/folder/@workflow/submit",  # noqa\n-                    u"title": u"Submit for publication",\n+                    "@id": self.portal_url + "/folder/@workflow/submit",  # noqa\n+                    "title": "Submit for publication",\n                 },\n             ],\n             response.json()["@components"]["workflow"]["transitions"],\n@@ -299,49 +297,49 @@ def test_types_expanded(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Collection")),\n-                    u"addable": True,\n-                    u"title": u"Collection",\n+                    "@id": "/".join((base_url, "@types/Collection")),\n+                    "addable": True,\n+                    "title": "Collection",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/DXTestDocument")),\n-                    u"addable": True,\n-                    u"title": u"DX Test Document",\n+                    "@id": "/".join((base_url, "@types/DXTestDocument")),\n+                    "addable": True,\n+                    "title": "DX Test Document",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Event")),\n-                    u"addable": True,\n-                    u"title": u"Event",\n+                    "@id": "/".join((base_url, "@types/Event")),\n+                    "addable": True,\n+                    "title": "Event",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/File")),\n-                    u"addable": True,\n-                    u"title": u"File",\n+                    "@id": "/".join((base_url, "@types/File")),\n+                    "addable": True,\n+                    "title": "File",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Folder")),\n-                    u"addable": True,\n-                    u"title": u"Folder",\n+                    "@id": "/".join((base_url, "@types/Folder")),\n+                    "addable": True,\n+                    "title": "Folder",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Image")),\n-                    u"addable": True,\n-                    u"title": u"Image",\n+                    "@id": "/".join((base_url, "@types/Image")),\n+                    "addable": True,\n+                    "title": "Image",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Link")),\n-                    u"addable": True,\n-                    u"title": u"Link",\n+                    "@id": "/".join((base_url, "@types/Link")),\n+                    "addable": True,\n+                    "title": "Link",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/News Item")),\n-                    u"addable": True,\n-                    u"title": u"News Item",\n+                    "@id": "/".join((base_url, "@types/News Item")),\n+                    "addable": True,\n+                    "title": "News Item",\n                 },\n                 {\n-                    u"@id": u"/".join((base_url, "@types/Document")),\n-                    u"addable": True,\n-                    u"title": u"Page",\n+                    "@id": "/".join((base_url, "@types/Document")),\n+                    "addable": True,\n+                    "title": "Page",\n                 },\n             ],\n             response.json().get("@components").get("types"),\n@@ -368,13 +366,13 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.en_folder = createContentInContainer(\n-            self.portal["en"], "Folder", title=u"Test folder"\n+            self.portal["en"], "Folder", title="Test folder"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex 0fc1cdde6..e1b0a4d99 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -33,10 +33,10 @@ def test_login_without_credentials_fails(self):\n         )\n         self.assertEqual(400, response.status_code)\n         self.assertEqual(\n-            u"Missing credentials", response.json().get("error").get("type")\n+            "Missing credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u"Login and password must be provided in body.",\n+            "Login and password must be provided in body.",\n             response.json().get("error").get("message"),\n         )\n \n@@ -48,10 +48,10 @@ def test_login_with_invalid_credentials_fails(self):\n         )\n         self.assertEqual(401, response.status_code)\n         self.assertEqual(\n-            u"Invalid credentials", response.json().get("error").get("type")\n+            "Invalid credentials", response.json().get("error").get("type")\n         )\n         self.assertEqual(\n-            u"Wrong login and/or password.", response.json().get("error").get("message")\n+            "Wrong login and/or password.", response.json().get("error").get("message")\n         )\n \n     def test_login_with_valid_credentials_returns_token(self):\n@@ -103,7 +103,7 @@ def test_api_login_grants_zmi(self):\n             "Wrong ZMI view response status code",\n         )\n         self.assertTrue(\n-            u\'<a href="plone/manage_workspace">\' in zmi_resp.text,\n+            \'<a href="plone/manage_workspace">\' in zmi_resp.text,\n             "Wrong ZMI view response content",\n         )\n \n@@ -115,7 +115,7 @@ def test_zmi_login_grants_api(self):\n         basic_auth_headers = {\n             "Authorization": "Basic {}".format(\n                 base64.b64encode(\n-                    "{}:{}".format(SITE_OWNER_NAME, TEST_USER_PASSWORD).encode(),\n+                    f"{SITE_OWNER_NAME}:{TEST_USER_PASSWORD}".encode(),\n                 ).decode()\n             )\n         }\n@@ -129,7 +129,7 @@ def test_zmi_login_grants_api(self):\n             "Wrong ZMI login response status code",\n         )\n         self.assertTrue(\n-            u\'<a href="plone/manage_workspace">\' in zmi_resp.text,\n+            \'<a href="plone/manage_workspace">\' in zmi_resp.text,\n             "Wrong ZMI view response content",\n         )\n \n@@ -168,7 +168,7 @@ def test_cookie_login_grants_api(self):\n             "Wrong Plone login challenge status code",\n         )\n         self.assertTrue(\n-            u\'<input id="__ac_password" name="__ac_password"\' in challenge_resp.text,\n+            \'<input id="__ac_password" name="__ac_password"\' in challenge_resp.text,\n             "Plone login challenge response content missing password field",\n         )\n         login_resp = session.post(\n@@ -236,7 +236,7 @@ def test_accessing_private_document_with_valid_token_succeeds(self):\n         )\n \n         self.assertEqual(200, response.status_code)\n-        self.assertTrue(u"@id" in response.json())\n+        self.assertTrue("@id" in response.json())\n \n     def test_accessing_private_document_with_invalid_token_fails(self):\n         invalid_token = "abcd1234"\n@@ -249,9 +249,9 @@ def test_accessing_private_document_with_invalid_token_fails(self):\n         )\n \n         self.assertEqual(401, response.status_code)\n-        self.assertEqual(u"Unauthorized", response.json().get("type"))\n+        self.assertEqual("Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u"You are not authorized to access this resource.",\n+            "You are not authorized to access this resource.",\n             response.json().get("message"),\n         )\n \n@@ -272,8 +272,8 @@ def test_accessing_private_document_with_expired_token_fails(self):\n         )\n \n         self.assertEqual(401, response.status_code)\n-        self.assertEqual(u"Unauthorized", response.json().get("type"))\n+        self.assertEqual("Unauthorized", response.json().get("type"))\n         self.assertEqual(\n-            u"You are not authorized to access this resource.",\n+            "You are not authorized to access this resource.",\n             response.json().get("message"),\n         )\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 74647c57d..cbeddfaed 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -57,8 +57,8 @@ def test_unauthorized_if_missing_permission(self):\n         self.assertEqual(response.status_code, 401)\n         self.assertDictContainsSubset(\n             {\n-                u"type": u"Unauthorized",\n-                u"message": u"Missing \'plone.restapi: Use REST API\' permission",\n+                "type": "Unauthorized",\n+                "message": "Missing \'plone.restapi: Use REST API\' permission",\n             },\n             response.json(),\n         )\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex ca6cc78a6..90461ce9d 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -7,7 +7,6 @@\n from plone.registry.record import Record\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-from six.moves import range\n from zope.component import getUtility\n \n import transaction\n@@ -29,11 +28,11 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+        record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n         registry.records["foo.bar"] = record\n \n         for counter in range(1, 100):\n-            record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+            record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n             registry.records["foo.bar" + str(counter)] = record\n \n         transaction.commit()\n@@ -58,7 +57,7 @@ def test_update_registry_record(self):\n \n     def test_update_several_registry_records(self):\n         registry = getUtility(IRegistry)\n-        record = Record(field.TextLine(title=u"Foo Bar Baz"), u"Lorem Ipsum Dolor")\n+        record = Record(field.TextLine(title="Foo Bar Baz"), "Lorem Ipsum Dolor")\n         registry.records["foo.bar.baz"] = record\n         transaction.commit()\n         payload = {"foo.bar": "lorem ipsum", "foo.bar.baz": "lorem ipsum dolor"}\ndiff --git a/src/plone/restapi/tests/test_registry_serializer.py b/src/plone/restapi/tests/test_registry_serializer.py\nindex e1e733860..01565854c 100644\n--- a/src/plone/restapi/tests/test_registry_serializer.py\n+++ b/src/plone/restapi/tests/test_registry_serializer.py\n@@ -3,7 +3,6 @@\n from plone.registry.record import Record\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from six.moves import range\n from zope.component import getMultiAdapter\n \n import unittest\n@@ -32,7 +31,7 @@ def test_batched(self):\n         registry = Registry()\n \n         for counter in range(1, 100):\n-            record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+            record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n             registry.records["foo.bar" + str(counter)] = record\n \n         obj = self.serialize(registry)\n@@ -43,12 +42,12 @@ def test_batched(self):\n     def test_structure(self):\n         registry = Registry()\n \n-        record = Record(field.TextLine(title=u"Foo Bar"), u"Lorem Ipsum")\n+        record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n         registry.records["foo.bar"] = record\n \n         obj = self.serialize(registry)\n         item = obj["items"][0]\n-        self.assertEqual(set(item), set(["name", "value", "schema"]))\n-        self.assertEqual(set(item["schema"]), set(["properties"]))\n+        self.assertEqual(set(item), {"name", "value", "schema"})\n+        self.assertEqual(set(item["schema"]), {"properties"})\n         self.assertEqual(item["name"], "foo.bar")\n-        self.assertEqual(item["value"], u"Lorem Ipsum")\n+        self.assertEqual(item["value"], "Lorem Ipsum")\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nindex 62b6cc9a2..d1c2788ae 100644\n--- a/src/plone/restapi/tests/test_resolveuid.py\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -66,9 +66,7 @@ def test_create_document_with_link_stores_uuid(self):\n                             ],\n                             "entityMap": {\n                                 "0": {\n-                                    "data": {\n-                                        "url": "{}/target".format(self.portal_url)\n-                                    },\n+                                    "data": {"url": f"{self.portal_url}/target"},\n                                     "mutability": "MUTABLE",\n                                     "type": "LINK",\n                                 }\n@@ -90,7 +88,7 @@ def test_create_document_with_link_stores_uuid(self):\n \n         target_uuid = IUUID(self.portal.target)\n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             )\n@@ -103,13 +101,13 @@ def test_create_document_with_link_stores_uuid(self):\n \n     def test_create_document_with_image_block_stores_uuid(self):\n         self.portal.invokeFactory("Image", id="image", title="Image")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.image.image_caption = u"This is an image caption."\n+        self.portal.image.image_caption = "This is an image caption."\n         transaction.commit()\n \n         target_uuid = IUUID(self.portal.image)\n@@ -125,7 +123,7 @@ def test_create_document_with_image_block_stores_uuid(self):\n                 "blocks": {\n                     "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n                         "@type": "image",\n-                        "url": "{}/image".format(self.portal_url),\n+                        "url": f"{self.portal_url}/image",\n                     },\n                     "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n                 },\n@@ -141,7 +139,7 @@ def test_create_document_with_image_block_stores_uuid(self):\n         transaction.begin()\n \n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("url"),\n@@ -150,13 +148,13 @@ def test_create_document_with_image_block_stores_uuid(self):\n     def test_create_document_with_image_block_and_href_stores_uuid(self):\n         self.portal.invokeFactory("Document", id="linked_document", title="Linked Doc")\n         self.portal.invokeFactory("Image", id="image", title="Image")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.image.image_caption = u"This is an image caption."\n+        self.portal.image.image_caption = "This is an image caption."\n         transaction.commit()\n \n         target_uuid = IUUID(self.portal.image)\n@@ -173,8 +171,8 @@ def test_create_document_with_image_block_and_href_stores_uuid(self):\n                 "blocks": {\n                     "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n                         "@type": "image",\n-                        "url": "{}/image".format(self.portal_url),\n-                        "href": "{}/linked_document".format(self.portal_url),\n+                        "url": f"{self.portal_url}/image",\n+                        "href": f"{self.portal_url}/linked_document",\n                     },\n                     "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n                 },\n@@ -190,13 +188,13 @@ def test_create_document_with_image_block_and_href_stores_uuid(self):\n         transaction.begin()\n \n         self.assertEqual(\n-            "../../resolveuid/{}".format(target_uuid),\n+            f"../../resolveuid/{target_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("url"),\n         )\n         self.assertEqual(\n-            "../../resolveuid/{}".format(liked_doc_uuid),\n+            f"../../resolveuid/{liked_doc_uuid}",\n             self.portal.folder1.mydocument.blocks.get(\n                 "09e39ddf-a945-49f2-b609-ea427ac3430b"\n             ).get("href"),\n@@ -226,9 +224,9 @@ def setUp(self):\n                 id="doc_primary_field_url",\n                 title="Target Document with primary file field",\n                 test_primary_namedfile_field=NamedFile(\n-                    data=u"Spam and eggs",\n-                    contentType=u"text/plain",\n-                    filename=u"test.txt",\n+                    data="Spam and eggs",\n+                    contentType="text/plain",\n+                    filename="test.txt",\n                 ),\n             )\n         ]\n@@ -275,7 +273,7 @@ def test_blocks_field_serialization_resolves_uids(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -308,7 +306,7 @@ def test_resolveuid_keeps_suffix(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}/view".format(uid),\n+                                "url": f"../resolveuid/{uid}/view",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -333,18 +331,18 @@ def test_resolveuid_keeps_suffix(self):\n \n     def test_resolveuid_gets_serialized_for_standard_fields(self):\n         uid = IUUID(self.doc2)\n-        blocks = {"aaa": {"@type": "foo", "url": "../resolveuid/{}/view".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "url": f"../resolveuid/{uid}/view"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(value["aaa"]["url"], self.doc2.absolute_url() + "/view")\n \n-        blocks = {"aaa": {"@type": "foo", "href": "../resolveuid/{}/view".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "href": f"../resolveuid/{uid}/view"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(value["aaa"]["href"], self.doc2.absolute_url() + "/view")\n \n     def test_resolveuid_serialize_take_care_of_primary_fields(self):\n         logout()\n         uid = IUUID(self.doc_primary_field_url)\n-        blocks = {"aaa": {"@type": "foo", "url": "../resolveuid/{}".format(uid)}}\n+        blocks = {"aaa": {"@type": "foo", "url": f"../resolveuid/{uid}"}}\n         value = self.serialize("blocks", blocks)\n         self.assertEqual(\n             value["aaa"]["url"],\n@@ -361,9 +359,9 @@ def test_keeps_resolveuid_link_if_unknown_uid(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n+                                "href": f"../resolveuid/{uid}",\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -377,13 +375,13 @@ def test_keeps_resolveuid_link_if_unknown_uid(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["href"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n \n     def test_blocks_field_serialization_doesnt_update_stored_values(self):\n@@ -408,7 +406,7 @@ def test_blocks_field_serialization_doesnt_update_stored_values(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -470,13 +468,13 @@ def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}".format(uid),\n+            f"../resolveuid/{uid}",\n         )\n \n     def test_keeps_url_if_unknown_path(self):\n@@ -537,13 +535,13 @@ def test_path_keeps_suffix(self):\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}/view".format(uid),\n+            f"../resolveuid/{uid}/view",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n             ]["url"],\n-            "../resolveuid/{}/view".format(uid),\n+            f"../resolveuid/{uid}/view",\n         )\n \n     def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n@@ -569,7 +567,7 @@ def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -618,7 +616,7 @@ def test_blocks_field_serialization_resolves_uids_primary_url_with_edit_permissi\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}".format(uid),\n+                                "url": f"../resolveuid/{uid}",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\n@@ -651,7 +649,7 @@ def test_resolveuid_with_primary_field_url_keeps_suffix(self):\n                         "0": {\n                             "data": {\n                                 "rel": "nofollow",\n-                                "url": "../resolveuid/{}/view".format(uid),\n+                                "url": f"../resolveuid/{uid}/view",\n                             },\n                             "mutability": "MUTABLE",\n                             "type": "LINK",\ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 5679d18ef..eaeb6d272 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -26,46 +26,46 @@ def test_roles_endpoint_lists_roles(self):\n \n         expected = (\n             {\n-                u"@id": self.portal_url + u"/@roles/Contributor",\n-                u"@type": u"role",\n-                u"id": u"Contributor",\n-                u"title": u"Contributor",\n+                "@id": self.portal_url + "/@roles/Contributor",\n+                "@type": "role",\n+                "id": "Contributor",\n+                "title": "Contributor",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Editor",\n-                u"@type": u"role",\n-                u"id": u"Editor",\n-                u"title": u"Editor",\n+                "@id": self.portal_url + "/@roles/Editor",\n+                "@type": "role",\n+                "id": "Editor",\n+                "title": "Editor",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Member",\n-                u"@type": u"role",\n-                u"id": u"Member",\n-                u"title": u"Member",\n+                "@id": self.portal_url + "/@roles/Member",\n+                "@type": "role",\n+                "id": "Member",\n+                "title": "Member",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Reader",\n-                u"@type": u"role",\n-                u"id": u"Reader",\n-                u"title": u"Reader",\n+                "@id": self.portal_url + "/@roles/Reader",\n+                "@type": "role",\n+                "id": "Reader",\n+                "title": "Reader",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Reviewer",\n-                u"@type": u"role",\n-                u"id": u"Reviewer",\n-                u"title": u"Reviewer",\n+                "@id": self.portal_url + "/@roles/Reviewer",\n+                "@type": "role",\n+                "id": "Reviewer",\n+                "title": "Reviewer",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Site Administrator",\n-                u"@type": u"role",\n-                u"id": u"Site Administrator",\n-                u"title": u"Site Administrator",\n+                "@id": self.portal_url + "/@roles/Site Administrator",\n+                "@type": "role",\n+                "id": "Site Administrator",\n+                "title": "Site Administrator",\n             },\n             {\n-                u"@id": self.portal_url + u"/@roles/Manager",\n-                u"@type": u"role",\n-                u"id": u"Manager",\n-                u"title": u"Manager",\n+                "@id": self.portal_url + "/@roles/Manager",\n+                "@type": "role",\n+                "id": "Manager",\n+                "title": "Manager",\n             },\n         )\n         result = response.json()\n@@ -79,19 +79,19 @@ def test_roles_endpoint_translates_role_titles(self):\n         # One of the roles has changed translation in German.\n         # Reviewer used to be \'Ver\\xf6ffentlichen\', but is now simply Reviewer.\n         titles = {item["title"] for item in response.json()}\n-        options = {u"Ver\\xf6ffentlichen", u"Reviewer"}\n+        options = {"Ver\\xf6ffentlichen", "Reviewer"}\n         # One of the options must match:\n         self.assertTrue(titles.intersection(options))\n         # Discard them:\n         titles = titles.difference(options)\n         self.assertEqual(\n             {\n-                u"Hinzuf\\xfcgen",\n-                u"Bearbeiten",\n-                u"Benutzer",\n-                u"Ansehen",\n-                u"Website-Administrator",\n-                u"Verwalten",\n+                "Hinzuf\\xfcgen",\n+                "Bearbeiten",\n+                "Benutzer",\n+                "Ansehen",\n+                "Website-Administrator",\n+                "Verwalten",\n             },\n             titles,\n         )\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 15ada8211..9eecdb48b 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -58,7 +58,7 @@ def setUp(self):\n \n         # /plone/folder\n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         api.user.grant_roles(username="editoruser", roles=["Editor"])\n         api.user.grant_roles(\n@@ -68,9 +68,9 @@ def setUp(self):\n         # /plone/folder/doc\n         self.doc = createContentInContainer(\n             self.folder,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc",\n-            title=u"Lorem Ipsum",\n+            title="Lorem Ipsum",\n             start=DateTime(1950, 1, 1, 0, 0),\n             effective=DateTime(1995, 1, 1, 0, 0),\n             expires=DateTime(1999, 1, 1, 0, 0),\n@@ -78,7 +78,7 @@ def setUp(self):\n             test_list_field=["Keyword1", "Keyword2", "Keyword3"],\n             test_bool_field=True,\n             test_richtext_field=RichTextValue(\n-                raw=u"<p>Some Text</p>",\n+                raw="<p>Some Text</p>",\n                 mimeType="text/html",\n                 outputMimeType="text/html",\n             ),\n@@ -89,10 +89,10 @@ def setUp(self):\n         # /plone/folder/other-document\n         self.doc2 = createContentInContainer(\n             self.folder,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="other-document",\n-            title=u"Other Document",\n-            description=u"\\xdcbersicht",\n+            title="Other Document",\n+            description="\\xdcbersicht",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -102,15 +102,15 @@ def setUp(self):\n \n         # /plone/folder2\n         self.folder2 = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Another Folder"\n+            self.portal, "Folder", id="folder2", title="Another Folder"\n         )\n \n         # /plone/folder2/doc\n         createContentInContainer(\n             self.folder2,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc",\n-            title=u"Document in second folder",\n+            title="Document in second folder",\n             start=DateTime(1975, 1, 1, 0, 0),\n             effective=DateTime(2015, 1, 1, 0, 0),\n             expires=DateTime(2020, 1, 1, 0, 0),\n@@ -120,9 +120,9 @@ def setUp(self):\n         # /plone/doc-outside-folder\n         createContentInContainer(\n             self.portal,\n-            u"DXTestDocument",\n+            "DXTestDocument",\n             id="doc-outside-folder",\n-            title=u"Doc outside folder",\n+            title="Doc outside folder",\n         )\n \n         transaction.commit()\n@@ -138,15 +138,15 @@ def test_overall_response_format(self):\n \n         results = response.json()\n         self.assertEqual(\n-            results[u"items_total"],\n-            len(results[u"items"]),\n+            results["items_total"],\n+            len(results["items"]),\n             "items_total property should match actual item count.",\n         )\n \n     def test_search_on_context_constrains_query_by_path(self):\n         response = self.api_session.get("/folder/@search")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder/doc", u"/plone/folder/other-document"},\n+            {"/plone/folder", "/plone/folder/doc", "/plone/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -168,13 +168,13 @@ def test_search_in_vhm(self):\n \n         # If we go through the VHM will will get results if we only use\n         # the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search?path=/folder",\n         )\n         response = self.api_session.get(vhm_url)\n         self.assertSetEqual(\n-            {u"/folder", u"/folder/doc", u"/folder/other-document"},\n+            {"/folder", "/folder/doc", "/folder/other-document"},\n             set(result_paths(response.json())),\n         )\n \n@@ -195,18 +195,18 @@ def test_search_in_vhm_multiple_paths(self):\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search",\n         )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n             {\n-                u"/folder",\n-                u"/folder/doc",\n-                u"/folder/other-document",\n-                u"/folder2",\n-                u"/folder2/doc",\n+                "/folder",\n+                "/folder/doc",\n+                "/folder/other-document",\n+                "/folder2",\n+                "/folder2/doc",\n             },\n             set(result_paths(response.json())),\n         )\n@@ -216,18 +216,18 @@ def test_search_in_vhm_multiple_paths(self):\n \n         # If we go through the VHM we will get results for multiple paths\n         # if we only use the part of the path inside the VHM\n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "@search",\n         )\n         response = self.api_session.get(vhm_url, params=query)\n         self.assertSetEqual(\n             {\n-                u"/folder",\n-                u"/folder/doc",\n-                u"/folder/other-document",\n-                u"/folder2",\n-                u"/folder2/doc",\n+                "/folder",\n+                "/folder/doc",\n+                "/folder/other-document",\n+                "/folder2",\n+                "/folder2/doc",\n             },\n             set(result_paths(response.json())),\n         )\n@@ -235,7 +235,7 @@ def test_search_in_vhm_multiple_paths(self):\n     def test_path_gets_prefilled_if_missing_from_path_query_dict(self):\n         response = self.api_session.get("/@search?path.depth=1")\n         self.assertSetEqual(\n-            {u"/plone/folder", u"/plone/folder2", u"/plone/doc-outside-folder"},\n+            {"/plone/folder", "/plone/folder2", "/plone/doc-outside-folder"},\n             set(result_paths(response.json())),\n         )\n \n@@ -248,10 +248,10 @@ def test_partial_metadata_retrieval(self):\n \n         self.assertDictContainsSubset(\n             {\n-                u"@id": self.portal_url + u"/folder/doc",\n-                u"title": u"Lorem Ipsum",\n-                u"portal_type": u"DXTestDocument",\n-                u"review_state": u"private",\n+                "@id": self.portal_url + "/folder/doc",\n+                "title": "Lorem Ipsum",\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n             },\n             response.json()["items"][0],\n         )\n@@ -263,45 +263,45 @@ def test_full_metadata_retrieval(self):\n         first_item = response.json()["items"][0]\n         self.assertLessEqual(\n             {\n-                u"@id": self.portal_url + u"/folder/doc",\n-                u"Creator": u"test_user_1_",\n-                u"Description": u"",\n-                u"EffectiveDate": u"None",\n-                u"ExpirationDate": u"None",\n-                u"Subject": [],\n-                u"Title": u"Lorem Ipsum",\n-                u"Type": u"DX Test Document",\n-                u"UID": u"77779ffa110e45afb1ba502f75f77777",\n-                u"author_name": None,\n-                u"cmf_uid": None,\n-                u"commentators": [],\n-                u"description": u"",\n-                u"effective": u"1995-01-01T00:00:00+00:00",\n-                u"end": None,\n-                u"exclude_from_nav": False,\n-                u"expires": u"1999-01-01T00:00:00+00:00",\n-                u"getId": u"doc",\n-                u"getPath": u"/plone/folder/doc",\n-                u"getRemoteUrl": None,\n-                u"getURL": self.portal_url + u"/folder/doc",\n-                u"id": u"doc",\n-                u"in_response_to": None,\n-                u"is_folderish": False,\n-                u"last_comment_date": None,\n-                u"listCreators": [u"test_user_1_"],\n-                u"location": None,\n-                u"portal_type": u"DXTestDocument",\n-                u"review_state": u"private",\n-                u"start": u"1950-01-01T00:00:00+00:00",\n-                u"sync_uid": None,\n-                u"title": u"Lorem Ipsum",\n-                u"total_comments": 0,\n+                "@id": self.portal_url + "/folder/doc",\n+                "Creator": "test_user_1_",\n+                "Description": "",\n+                "EffectiveDate": "None",\n+                "ExpirationDate": "None",\n+                "Subject": [],\n+                "Title": "Lorem Ipsum",\n+                "Type": "DX Test Document",\n+                "UID": "77779ffa110e45afb1ba502f75f77777",\n+                "author_name": None,\n+                "cmf_uid": None,\n+                "commentators": [],\n+                "description": "",\n+                "effective": "1995-01-01T00:00:00+00:00",\n+                "end": None,\n+                "exclude_from_nav": False,\n+                "expires": "1999-01-01T00:00:00+00:00",\n+                "getId": "doc",\n+                "getPath": "/plone/folder/doc",\n+                "getRemoteUrl": None,\n+                "getURL": self.portal_url + "/folder/doc",\n+                "id": "doc",\n+                "in_response_to": None,\n+                "is_folderish": False,\n+                "last_comment_date": None,\n+                "listCreators": ["test_user_1_"],\n+                "location": None,\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n+                "start": "1950-01-01T00:00:00+00:00",\n+                "sync_uid": None,\n+                "title": "Lorem Ipsum",\n+                "total_comments": 0,\n             }.items(),\n             first_item.items(),\n         )\n         # This value changed in Plone 5.2\n         # (Dexterity gained support for getObjSize)\n-        self.assertIn(first_item[u"getObjSize"], (u"0 KB", u"1 KB"))\n+        self.assertIn(first_item["getObjSize"], ("0 KB", "1 KB"))\n \n     def test_full_objects_retrieval(self):\n         query = {\n@@ -312,11 +312,11 @@ def test_full_objects_retrieval(self):\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            u"<p>Some Text</p>",\n+            "<p>Some Text</p>",\n             response.json()["items"][0]["test_richtext_field"]["data"],\n         )\n         self.assertEqual(\n-            self.portal_url + u"/folder/doc", response.json()["items"][0]["@id"]\n+            self.portal_url + "/folder/doc", response.json()["items"][0]["@id"]\n         )\n \n     def test_full_objects_retrieval_discussion(self):\n@@ -328,7 +328,7 @@ def test_full_objects_retrieval_discussion(self):\n \n         transaction.commit()\n \n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         self.api_session.post(url, json={"text": "comment 1"})\n         transaction.commit()\n \n@@ -340,7 +340,7 @@ def test_full_objects_retrieval_discussion(self):\n \n     def test_full_objects_retrieval_collections(self):\n         self.collection = createContentInContainer(\n-            self.folder, u"Collection", id="collection"\n+            self.folder, "Collection", id="collection"\n         )\n         transaction.commit()\n \n@@ -356,14 +356,14 @@ def test_fulltext_search(self):\n         query = {"SearchableText": "lorem"}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_fulltext_search_with_non_ascii_characters(self):\n-        query = {"SearchableText": u"\\xfcbersicht"}\n+        query = {"SearchableText": "\\xfcbersicht"}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder/other-document"], result_paths(response.json())\n+            ["/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # KeywordIndex\n@@ -372,14 +372,14 @@ def test_keyword_index_str_query(self):\n         query = {"test_list_field": "Keyword1"}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_keyword_index_str_query_or(self):\n         query = {"test_list_field": ["Keyword2", "Keyword3"]}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertEqual(\n-            [u"/plone/folder/doc", u"/plone/folder/other-document"],\n+            ["/plone/folder/doc", "/plone/folder/other-document"],\n             result_paths(response.json()),\n         )\n \n@@ -390,7 +390,7 @@ def test_keyword_index_str_query_and(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(six.PY3, "Python 3 can\'t sort mixed types")\n     def test_keyword_index_int_query(self):\n@@ -401,19 +401,19 @@ def test_keyword_index_int_query(self):\n         query = {"test_list_field:int": 42}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # BooleanIndex\n \n     def test_boolean_index_query(self):\n         query = {"test_bool_field": True, "portal_type": "DXTestDocument"}\n         response = self.api_session.get("/folder/@search", params=query)\n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n         query = {"test_bool_field": False, "portal_type": "DXTestDocument"}\n         response = self.api_session.get("/folder/@search", params=query)\n         self.assertEqual(\n-            [u"/plone/folder/other-document"], result_paths(response.json())\n+            ["/plone/folder/other-document"], result_paths(response.json())\n         )\n \n     # FieldIndex\n@@ -422,7 +422,7 @@ def test_field_index_int_query(self):\n         query = {"test_int_field:int": 42}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_field_index_int_range_query(self):\n         query = {\n@@ -431,7 +431,7 @@ def test_field_index_int_range_query(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # ExtendedPathIndex\n \n@@ -443,9 +443,9 @@ def test_extended_path_index_query(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n@@ -464,11 +464,11 @@ def test_extended_path_index_query_multiple(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n-                    u"/plone/folder2",\n-                    u"/plone/folder2/doc",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n+                    "/plone/folder2",\n+                    "/plone/folder2/doc",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n@@ -486,20 +486,20 @@ def test_extended_path_index_query_multiple(self):\n         self.assertEqual(\n             sorted(\n                 [\n-                    u"/plone/folder",\n-                    u"/plone/folder/doc",\n-                    u"/plone/folder/other-document",\n-                    u"/plone/folder2",\n-                    u"/plone/folder2/doc",\n+                    "/plone/folder",\n+                    "/plone/folder/doc",\n+                    "/plone/folder/other-document",\n+                    "/plone/folder2",\n+                    "/plone/folder2/doc",\n                 ]\n             ),\n             sorted(result_paths(response.json())),\n         )\n \n     def test_extended_path_index_depth_limiting(self):\n-        lvl1 = createContentInContainer(self.portal, u"Folder", id=u"lvl1")\n-        lvl2 = createContentInContainer(lvl1, u"Folder", id=u"lvl2")\n-        createContentInContainer(lvl2, u"Folder", id=u"lvl3")\n+        lvl1 = createContentInContainer(self.portal, "Folder", id="lvl1")\n+        lvl2 = createContentInContainer(lvl1, "Folder", id="lvl2")\n+        createContentInContainer(lvl2, "Folder", id="lvl3")\n         transaction.commit()\n \n         path = "/plone/lvl1"\n@@ -508,20 +508,20 @@ def test_extended_path_index_depth_limiting(self):\n         query = {"path.query": path, "path.depth": 0}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/lvl1"], result_paths(response.json()))\n+        self.assertEqual(["/plone/lvl1"], result_paths(response.json()))\n \n         # Depth 1 - immediate children\n         query = {"path.query": path, "path.depth": 1}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/lvl1/lvl2"], result_paths(response.json()))\n+        self.assertEqual(["/plone/lvl1/lvl2"], result_paths(response.json()))\n \n         # No depth - object itself and all children\n         query = {"path": path}\n         response = self.api_session.get("/@search", params=query)\n \n         self.assertSetEqual(\n-            {u"/plone/lvl1", u"/plone/lvl1/lvl2", u"/plone/lvl1/lvl2/lvl3"},\n+            {"/plone/lvl1", "/plone/lvl1/lvl2", "/plone/lvl1/lvl2/lvl3"},\n             set(result_paths(response.json())),\n         )\n \n@@ -531,7 +531,7 @@ def test_date_index_query(self):\n         query = {"start": date(1950, 1, 1).isoformat()}\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     def test_date_index_ranged_query(self):\n         query = {\n@@ -540,7 +540,7 @@ def test_date_index_ranged_query(self):\n         }\n         response = self.api_session.get("/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     # DateRangeIndex\n \n@@ -549,8 +549,8 @@ def test_date_range_index_query(self):\n         response = self.api_session.get("/folder/@search", params=query)\n \n         self.assertEqual(2, len(result_paths(response.json())))\n-        self.assertTrue(u"/plone/folder" in result_paths(response.json()))\n-        self.assertTrue(u"/plone/folder/doc" in result_paths(response.json()))\n+        self.assertTrue("/plone/folder" in result_paths(response.json()))\n+        self.assertTrue("/plone/folder/doc" in result_paths(response.json()))\n \n     # DateRecurringIndex\n \n@@ -559,9 +559,9 @@ def test_date_recurring_index_query(self):\n \n         createContentInContainer(\n             self.folder,\n-            u"Event",\n-            id=u"event",\n-            title=u"Event",\n+            "Event",\n+            id="event",\n+            title="Event",\n             start=datetime(2013, 1, 1, 0, 0),\n             end=datetime(2013, 1, 1, 23, 59),\n             whole_day=True,\n@@ -576,7 +576,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 1).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n         # No event that day\n         query = {"start": date(2013, 1, 2).isoformat()}\n@@ -588,7 +588,7 @@ def test_date_recurring_index_query(self):\n         query = {"start": date(2013, 1, 3).isoformat()}\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n         # Ranged query\n         query = {\n@@ -597,7 +597,7 @@ def test_date_recurring_index_query(self):\n         }\n         response = self.api_session.get("/folder/@search", params=query)\n \n-        self.assertEqual([u"/plone/folder/event"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/event"], result_paths(response.json()))\n \n     # UUIDIndex\n \n@@ -608,7 +608,7 @@ def test_uuid_index_query(self):\n \n         query = {"UID": "7777a074cb4240d08c9a129e3a837777"}\n         response = self.api_session.get("/@search", params=query)\n-        self.assertEqual([u"/plone/folder/doc"], result_paths(response.json()))\n+        self.assertEqual(["/plone/folder/doc"], result_paths(response.json()))\n \n     @unittest.skipIf(\n         not PLONE5, "searchResults in Plone 4 does not handle correctly that permission"\n@@ -670,9 +670,9 @@ def test_search_use_site_search_settings_for_types(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        types = set([item["@type"] for item in response["items"]])\n+        types = {item["@type"] for item in response["items"]}\n \n-        self.assertEqual(set(types), set(["Folder", "DXTestDocument"]))\n+        self.assertEqual(set(types), {"Folder", "DXTestDocument"})\n \n         registry = getUtility(IRegistry)\n         from Products.CMFPlone.interfaces import ISearchSchema\n@@ -685,9 +685,9 @@ def test_search_use_site_search_settings_for_types(self):\n         response = self.api_session.get(\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        types = set([item["@type"] for item in response["items"]])\n+        types = {item["@type"] for item in response["items"]}\n \n-        self.assertEqual(set(types), set(["Folder"]))\n+        self.assertEqual(set(types), {"Folder"})\n         search_settings.types_not_searched = old\n         transaction.commit()\n \n@@ -697,12 +697,12 @@ def test_search_use_site_search_settings_for_default_sort_order(self):\n             "/@search", params={"use_site_search_settings": 1}\n         ).json()\n         titles = [\n-            u"Some Folder",\n-            u"Lorem Ipsum",\n-            u"Other Document",\n-            u"Another Folder",\n-            u"Document in second folder",\n-            u"Doc outside folder",\n+            "Some Folder",\n+            "Lorem Ipsum",\n+            "Other Document",\n+            "Another Folder",\n+            "Document in second folder",\n+            "Doc outside folder",\n         ]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n@@ -711,7 +711,7 @@ def test_search_use_site_search_settings_for_default_sort_order(self):\n         ).json()\n         self.assertEqual(\n             [item["title"] for item in response["items"]][0],\n-            u"Other Document",\n+            "Other Document",\n         )\n \n     @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n@@ -723,7 +723,7 @@ def test_search_use_site_search_settings_with_navigation_root(self):\n         response = self.api_session.get(\n             "/folder/@search", params={"use_site_search_settings": 1}\n         ).json()\n-        titles = [u"Some Folder", u"Lorem Ipsum", u"Other Document"]\n+        titles = ["Some Folder", "Lorem Ipsum", "Other Document"]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n         noLongerProvides(self.folder, INavigationRoot)\n@@ -743,14 +743,14 @@ def test_search_use_site_search_settings_with_navigation_root_and_vhm(self):\n         alsoProvides(self.folder, INavigationRoot)\n         transaction.commit()\n \n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "/folder/@search",\n         )\n         response = self.api_session.get(\n             vhm_url, params={"use_site_search_settings": 1, "path": "/folder"}\n         ).json()\n-        titles = [u"Some Folder", u"Lorem Ipsum", u"Other Document"]\n+        titles = ["Some Folder", "Lorem Ipsum", "Other Document"]\n         self.assertEqual([item["title"] for item in response["items"]], titles)\n \n         noLongerProvides(self.folder, INavigationRoot)\n@@ -769,7 +769,7 @@ def test_search_use_site_search_settings_with_vhm(self):\n             manage_addVirtualHostMonster(self.app, "virtual_hosting")\n         transaction.commit()\n \n-        vhm_url = "%s/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/%s" % (\n+        vhm_url = "{}/VirtualHostBase/http/plone.org/plone/VirtualHostRoot/{}".format(\n             self.app.absolute_url(),\n             "/@search",\n         )\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 7b35471de..a9d552f17 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -1,5 +1,5 @@\n from DateTime import DateTime\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -48,13 +48,13 @@ def test_serialize_returns_type(self):\n             self.serialize(self.portal.doc1).get("@type"),\n             "The @type attribute should be present.",\n         )\n-        self.assertEqual(self.serialize(self.portal.doc1)["@type"], u"Document")\n+        self.assertEqual(self.serialize(self.portal.doc1)["@type"], "Document")\n \n     def test_serialize_returns_title(self):\n-        self.assertEqual(self.serialize(self.portal.doc1)["title"], u"Document 1")\n+        self.assertEqual(self.serialize(self.portal.doc1)["title"], "Document 1")\n \n     def test_serialize_can_read_as_manager(self):\n-        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.portal.dxdoc.test_read_permission_field = "Test Read Permission"\n         self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n         setRoles(self.portal, TEST_USER_ID, ["Member", "Manager"])\n         self.assertIn(\n@@ -62,7 +62,7 @@ def test_serialize_can_read_as_manager(self):\n         )\n \n     def test_serialize_cannot_read_as_member(self):\n-        self.portal.dxdoc.test_read_permission_field = u"Test Read Permission"\n+        self.portal.dxdoc.test_read_permission_field = "Test Read Permission"\n         self.workflowTool.doActionFor(self.portal.dxdoc, "publish")\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertNotIn(\n@@ -70,21 +70,19 @@ def test_serialize_cannot_read_as_member(self):\n         )\n \n     def test_serialize_returns_desciption(self):\n-        self.portal.doc1.description = u"This is a document"\n+        self.portal.doc1.description = "This is a document"\n         self.assertEqual(\n-            self.serialize(self.portal.doc1)["description"], u"This is a document"\n+            self.serialize(self.portal.doc1)["description"], "This is a document"\n         )\n \n     def test_serialize_returns_rich_text(self):\n-        self.portal.doc1.text = RichTextValue(\n-            u"Lorem ipsum.", "text/plain", "text/html"\n-        )\n+        self.portal.doc1.text = RichTextValue("Lorem ipsum.", "text/plain", "text/html")\n         self.assertEqual(\n             self.serialize(self.portal.doc1).get("text"),\n             {\n-                u"data": u"<p>Lorem ipsum.</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum.</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n         )\n \n@@ -103,18 +101,18 @@ def test_serialize_returns_expires(self):\n     def test_serialize_on_folder_returns_items_attr(self):\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Document", id="doc1")\n-        self.portal.folder1.doc1.title = u"Document 1"\n-        self.portal.folder1.doc1.description = u"This is a document"\n+        self.portal.folder1.doc1.title = "Document 1"\n+        self.portal.folder1.doc1.description = "This is a document"\n         self.portal.folder1.doc1.reindexObject()\n         self.assertEqual(\n             self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"This is a document",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc1",\n+                    "@type": "Document",\n+                    "description": "This is a document",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 }\n             ],\n         )\n@@ -124,13 +122,13 @@ def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n     ):  # noqa\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Document", id="doc1")\n-        self.portal.folder1.doc1.title = u"Document 1"\n-        self.portal.folder1.doc1.description = u"This is a document"\n+        self.portal.folder1.doc1.title = "Document 1"\n+        self.portal.folder1.doc1.description = "This is a document"\n         self.portal.folder1.doc1.reindexObject()\n \n         self.portal.folder1.invokeFactory("Document", id="doc2")\n-        self.portal.folder1.doc2.title = u"Document 2"\n-        self.portal.folder1.doc2.description = u"Second doc"\n+        self.portal.folder1.doc2.title = "Document 2"\n+        self.portal.folder1.doc2.description = "Second doc"\n         self.portal.folder1.doc2.reindexObject()\n \n         # Change GOPIP (getObjectPositionInParent) based order\n@@ -140,18 +138,18 @@ def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n             self.serialize(self.portal.folder1)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc2",\n-                    u"@type": u"Document",\n-                    u"description": u"Second doc",\n-                    u"title": u"Document 2",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc2",\n+                    "@type": "Document",\n+                    "description": "Second doc",\n+                    "title": "Document 2",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": u"http://nohost/plone/folder1/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"This is a document",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/folder1/doc1",\n+                    "@type": "Document",\n+                    "description": "This is a document",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n             ],\n         )\n@@ -193,7 +191,7 @@ def test_serialize_returns_site_root_type(self):\n             self.serialize(self.portal).get("@type"),\n             "The @type attribute should be present.",\n         )\n-        self.assertEqual(self.serialize(self.portal)["@type"], u"Plone Site")\n+        self.assertEqual(self.serialize(self.portal)["@type"], "Plone Site")\n \n     def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  # noqa\n         # Change GOPIP (getObjectPositionInParent) based order\n@@ -203,18 +201,18 @@ def test_serialize_site_orders_items_by_get_object_position_in_parent(self):  #\n             self.serialize(self.portal)["items"],\n             [\n                 {\n-                    u"@id": u"http://nohost/plone/dxdoc",\n-                    u"@type": u"DXTestDocument",\n-                    u"description": u"",\n-                    u"title": u"DX Test Document",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/dxdoc",\n+                    "@type": "DXTestDocument",\n+                    "description": "",\n+                    "title": "DX Test Document",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": u"http://nohost/plone/doc1",\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": "http://nohost/plone/doc1",\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n             ],\n         )\n@@ -226,17 +224,17 @@ def test_serialize_ignores_underscore_values(self):\n     def test_serialize_file(self):\n         self.portal.invokeFactory("File", id="file1", title="File 1")\n         self.portal.file1.file = NamedFile(\n-            data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            data="Spam and eggs", contentType="text/plain", filename="test.txt"\n         )\n \n         file_url = self.portal.file1.absolute_url()\n-        download_url = "{0}/@@download/file".format(file_url)\n+        download_url = f"{file_url}/@@download/file"\n         self.assertEqual(\n             {\n-                u"filename": u"test.txt",\n-                u"content-type": u"text/plain",\n-                u"download": download_url,\n-                u"size": 13,\n+                "filename": "test.txt",\n+                "content-type": "text/plain",\n+                "download": download_url,\n+                "size": 13,\n             },\n             self.serialize(self.portal.file1).get("file"),\n         )\n@@ -248,11 +246,11 @@ def test_serialize_empty_file_returns_none(self):\n \n     def test_serialize_image(self):\n         self.portal.invokeFactory("Image", id="image1", title="Image 1")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.image1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n \n         self.maxDiff = 99999\n@@ -260,25 +258,25 @@ def test_serialize_image(self):\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n             obj_url = self.portal.image1.absolute_url()\n             scale_url_uuid = "uuid_1"\n-            download_url = u"{}/@@images/{}.png".format(obj_url, scale_url_uuid)\n+            download_url = f"{obj_url}/@@images/{scale_url_uuid}.png"\n             scales = {\n-                u"listing": {u"download": download_url, u"width": 16, u"height": 4},\n-                u"icon": {u"download": download_url, u"width": 32, u"height": 8},\n-                u"tile": {u"download": download_url, u"width": 64, u"height": 16},\n-                u"thumb": {u"download": download_url, u"width": 128, u"height": 33},\n-                u"mini": {u"download": download_url, u"width": 200, u"height": 52},\n-                u"preview": {u"download": download_url, u"width": 215, u"height": 56},\n-                u"large": {u"download": download_url, u"width": 215, u"height": 56},\n+                "listing": {"download": download_url, "width": 16, "height": 4},\n+                "icon": {"download": download_url, "width": 32, "height": 8},\n+                "tile": {"download": download_url, "width": 64, "height": 16},\n+                "thumb": {"download": download_url, "width": 128, "height": 33},\n+                "mini": {"download": download_url, "width": 200, "height": 52},\n+                "preview": {"download": download_url, "width": 215, "height": 56},\n+                "large": {"download": download_url, "width": 215, "height": 56},\n             }\n             self.assertEqual(\n                 {\n-                    u"filename": u"image.png",\n-                    u"content-type": u"image/png",\n-                    u"size": 1185,\n-                    u"download": download_url,\n-                    u"width": 215,\n-                    u"height": 56,\n-                    u"scales": scales,\n+                    "filename": "image.png",\n+                    "content-type": "image/png",\n+                    "size": 1185,\n+                    "download": download_url,\n+                    "width": 215,\n+                    "height": 56,\n+                    "scales": scales,\n                 },\n                 self.serialize(self.portal.image1)["image"],\n             )\n@@ -290,7 +288,7 @@ def test_serialize_empty_image_returns_none(self):\n     def test_serialize_to_json_collection(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -303,26 +301,26 @@ def test_serialize_to_json_collection(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal.doc1.absolute_url(),\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 1",\n-                    u"review_state": u"private",\n+                    "@id": self.portal.doc1.absolute_url(),\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 1",\n+                    "review_state": "private",\n                 },\n                 {\n-                    u"@id": self.portal.doc2.absolute_url(),\n-                    u"@type": u"Document",\n-                    u"description": u"",\n-                    u"title": u"Document 2",\n-                    u"review_state": u"private",\n+                    "@id": self.portal.doc2.absolute_url(),\n+                    "@type": "Document",\n+                    "description": "",\n+                    "title": "Document 2",\n+                    "review_state": "private",\n                 },\n             ],\n             self.serialize(self.portal.collection1).get("items"),\n@@ -331,7 +329,7 @@ def test_serialize_to_json_collection(self):\n     def test_serialize_to_json_collection_fullobjects(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -344,10 +342,10 @@ def test_serialize_to_json_collection_fullobjects(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n \n         items = self.serialize(self.portal.collection1, fullobjects=True).get("items")\n@@ -360,7 +358,7 @@ def test_serialize_to_json_collection_fullobjects(self):\n     def test_serialize_to_json_collection_include_items(self):\n         self.portal.invokeFactory("Collection", id="collection1")\n         self.portal.collection1.title = "My Collection"\n-        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.description = "This is a collection with two documents"\n         self.portal.collection1.query = [\n             {\n                 "i": "portal_type",\n@@ -373,10 +371,10 @@ def test_serialize_to_json_collection_include_items(self):\n         self.portal.doc2.reindexObject()\n \n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n         self.assertEqual(\n-            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+            "Collection", self.serialize(self.portal.collection1).get("@type")\n         )\n \n         self.request.form["include_items"] = False\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 256e962b7..0f9cf8afe 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -21,16 +21,14 @@ def setUp(self):\n         self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         # /plone/my-folder\n-        self.folder = createContentInContainer(\n-            self.portal, u"Folder", title=u"My Folder"\n-        )\n+        self.folder = createContentInContainer(self.portal, "Folder", title="My Folder")\n \n         # /plone/my-folder/my-document\n         self.doc = createContentInContainer(\n             self.folder,\n-            u"Document",\n+            "Document",\n             creation_date=DateTime(2015, 12, 31, 23, 45),\n-            title=u"My Document",\n+            title="My Document",\n         )\n \n         IMutableUUID(self.doc).set("77779ffa110e45afb1ba502f75f77777")\n@@ -70,31 +68,31 @@ def test_lazy_map_serialization_with_fullobjects(self):\n             {\n                 "@id": "http://nohost/plone/my-folder/my-document",\n                 "@type": "Document",\n-                u"changeNote": u"",\n-                u"contributors": [],\n-                u"creators": [u"test_user_1_"],\n-                u"description": u"",\n-                u"effective": None,\n-                u"exclude_from_nav": False,\n-                u"expires": None,\n-                "id": u"my-document",\n+                "changeNote": "",\n+                "contributors": [],\n+                "creators": ["test_user_1_"],\n+                "description": "",\n+                "effective": None,\n+                "exclude_from_nav": False,\n+                "expires": None,\n+                "id": "my-document",\n                 "is_folderish": False,\n-                u"language": u"",\n+                "language": "",\n                 "layout": "document_view",\n                 "parent": {\n-                    u"@id": u"http://nohost/plone/my-folder",\n-                    u"@type": u"Folder",\n-                    u"description": u"",\n-                    u"review_state": u"private",\n-                    u"title": u"My Folder",\n+                    "@id": "http://nohost/plone/my-folder",\n+                    "@type": "Folder",\n+                    "description": "",\n+                    "review_state": "private",\n+                    "title": "My Folder",\n                 },\n-                u"relatedItems": [],\n+                "relatedItems": [],\n                 "review_state": "private",\n-                u"rights": u"",\n-                u"subjects": [],\n-                u"table_of_contents": None,\n-                u"text": None,\n-                u"title": u"My Document",\n+                "rights": "",\n+                "subjects": [],\n+                "table_of_contents": None,\n+                "text": None,\n+                "title": "My Document",\n                 "version": "current",\n             },\n             result_item,\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex cfa690d37..d34147785 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -14,7 +14,6 @@\n \n import json\n import Missing\n-import six\n \n \n class TestJsonCompatibleConverters(TestCase):\n@@ -45,25 +44,25 @@ def test_False(self):\n         self.assertEqual("false", json.dumps(json_compatible(False)))\n \n     def test_unicode(self):\n-        self.assertEqual(u"foo", json_compatible(u"foo"))\n-        self.assertIsInstance(json_compatible(u"foo"), six.text_type)\n+        self.assertEqual("foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), str)\n         self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_unicode_with_umlaut(self):\n-        self.assertEqual(u"Hall\\xf6chen", json_compatible(u"Hall\\xf6chen"))\n+        self.assertEqual("Hall\\xf6chen", json_compatible("Hall\\xf6chen"))\n         self.assertEqual(\n-            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible(u"Hall\\xf6chen"))\n+            \'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\\xf6chen"))\n         )\n \n     def test_string_is_converted_to_unicode(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u"foo", json_compatible("foo"))\n-        self.assertIsInstance(json_compatible("foo"), six.text_type)\n+        self.assertEqual("foo", json_compatible("foo"))\n+        self.assertIsInstance(json_compatible("foo"), str)\n         self.assertEqual(\'"foo"\', json.dumps(json_compatible("foo")))\n \n     def test_string_with_umlaut(self):\n         # Standard library JSON works with unicode.\n-        self.assertEqual(u"Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n+        self.assertEqual("Hall\\xf6chen", json_compatible("Hall\xc3\xb6chen"))\n         self.assertEqual(\'"Hall\\\\u00f6chen"\', json.dumps(json_compatible("Hall\xc3\xb6chen")))\n \n     def test_int(self):\n@@ -73,10 +72,7 @@ def test_int(self):\n \n     def test_long(self):\n         def _long(val):\n-            if six.PY2:\n-                return int(val)\n-            else:\n-                return int(val)\n+            return int(val)\n \n         self.assertEqual(_long(10), json_compatible(_long(10)))\n         self.assertIsInstance(json_compatible(_long(10)), int)\n@@ -92,7 +88,7 @@ def test_list(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(["foo"])))\n         self.assertIsInstance(\n             json_compatible(["foo"])[0],\n-            six.text_type,\n+            str,\n             "List values should be converted recursively.",\n         )\n \n@@ -102,7 +98,7 @@ def test_persistent_list(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(\n             json_compatible(value)[0],\n-            six.text_type,\n+            str,\n             "PersistentList values should be converted" " recursively.",\n         )\n \n@@ -113,7 +109,7 @@ def test_tuple(self):\n         self.assertEqual(\'["foo"]\', json.dumps(json_compatible(("foo",))))\n         self.assertIsInstance(\n             json_compatible(("foo",))[0],\n-            six.text_type,\n+            str,\n             "Tuple values should be converted recursively.",\n         )\n \n@@ -123,24 +119,22 @@ def test_frozenset(self):\n         )\n \n     def test_set(self):\n-        self.assertEqual(\n-            [[1, 1], [2, 2]], sorted(json_compatible(set([(1, 1), (2, 2)])))\n-        )\n+        self.assertEqual([[1, 1], [2, 2]], sorted(json_compatible({(1, 1), (2, 2)})))\n \n     def test_dict(self):\n         self.assertEqual(\n-            {u"foo": True, u"bar": None, u"baz": 3},\n+            {"foo": True, "bar": None, "baz": 3},\n             json_compatible({"foo": True, "bar": None, "baz": 3}),\n         )\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible({"foo": "bar"})))\n         self.assertIsInstance(\n             json_compatible(list({"foo": "bar"})[0]),\n-            six.text_type,\n+            str,\n             "Dict keys should be converted recursively.",\n         )\n         self.assertIsInstance(\n             json_compatible(list({"foo": "bar"}.values())[0]),\n-            six.text_type,\n+            str,\n             "Dict values should be converted recursively.",\n         )\n \n@@ -150,41 +144,41 @@ def test_dict_empty(self):\n \n     def test_persistent_mapping(self):\n         value = PersistentMapping({"foo": "bar"})\n-        self.assertEqual({u"foo": u"bar"}, json_compatible(value))\n+        self.assertEqual({"foo": "bar"}, json_compatible(value))\n         self.assertEqual(\'{"foo": "bar"}\', json.dumps(json_compatible(value)))\n         self.assertIsInstance(\n             json_compatible(list(value)[0]),\n-            six.text_type,\n+            str,\n             "Dict keys should be converted recursively.",\n         )\n         self.assertIsInstance(\n             json_compatible(list(value.values())[0]),\n-            six.text_type,\n+            str,\n             "Dict values should be converted recursively.",\n         )\n \n     def test_python_datetime(self):\n         value = DateTime("2015/11/23 19:45:55.649027 GMT+3").asdatetime()\n-        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n+        self.assertEqual("2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n             \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_zope_DateTime(self):\n         value = DateTime("2015/11/23 19:45:55.649027 GMT+3")\n-        self.assertEqual(u"2015-11-23T16:45:55+00:00", json_compatible(value))\n+        self.assertEqual("2015-11-23T16:45:55+00:00", json_compatible(value))\n         self.assertEqual(\n             \'"2015-11-23T16:45:55+00:00"\', json.dumps(json_compatible(value))\n         )\n \n     def test_date(self):\n         value = date(2015, 11, 23)\n-        self.assertEqual(u"2015-11-23", json_compatible(value))\n+        self.assertEqual("2015-11-23", json_compatible(value))\n         self.assertEqual(\'"2015-11-23"\', json.dumps(json_compatible(value)))\n \n     def test_time(self):\n         value = time(19, 45, 55)\n-        self.assertEqual(u"19:45:55", json_compatible(value))\n+        self.assertEqual("19:45:55", json_compatible(value))\n         self.assertEqual(\'"19:45:55"\', json.dumps(json_compatible(value)))\n \n     def test_timedelta(self):\n@@ -217,8 +211,8 @@ def test_relation_value(self):\n \n     def test_i18n_message(self):\n         _ = MessageFactory("plone.restapi.tests")\n-        msg = _(u"message_id", default=u"default message")\n-        self.assertEqual(u"default message", json_compatible(msg))\n+        msg = _("message_id", default="default message")\n+        self.assertEqual("default message", json_compatible(msg))\n \n     def test_missing_value(self):\n         self.assertEqual(None, json_compatible(Missing.Value))\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex 65bedd4c9..c0ac04e98 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -48,7 +48,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual("ploneteam@plone.org", group.get("email"))\n         self.assertEqual("Plone Team", group.get("title"))\n         self.assertEqual("We are Plone", group.get("description"))\n-        self.assertEqual(set(group["users"]), set(["@id", "items_total", "items"]))\n+        self.assertEqual(set(group["users"]), {"@id", "items_total", "items"})\n \n     def test_summary(self):\n         group = self.serialize_summary(self.group)\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 332324bff..4810c5aab 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -29,10 +29,10 @@ def setUp(self):\n \n         self.doc1 = createContentInContainer(\n             self.portal,\n-            u"DXTestDocument",\n-            id=u"doc1",\n-            title=u"Lorem Ipsum",\n-            description=u"Description",\n+            "DXTestDocument",\n+            id="doc1",\n+            title="Lorem Ipsum",\n+            description="Description",\n         )\n \n         self.doc1.creation_date = DateTime("2016-01-21T01:14:48+00:00")\n@@ -134,52 +134,52 @@ def test_brain_summary_includes_all_metadata_fields(self):\n         # mime_type was added in Plone 5.1\n         # Make sure tests pass on older Plone versions\n         if "mime_type" not in summary:\n-            summary["mime_type"] = u"text/plain"\n+            summary["mime_type"] = "text/plain"\n \n         self.maxDiff = None\n         self.assertLessEqual(\n             {\n-                "@id": u"http://nohost/plone/doc1",\n-                "@type": u"DXTestDocument",\n-                "CreationDate": u"2016-01-21T01:14:48+00:00",\n-                "Creator": u"test_user_1_",\n-                "Date": u"2017-01-21T01:14:48+00:00",\n-                "Description": u"Description",\n-                "EffectiveDate": u"None",\n-                "ExpirationDate": u"None",\n-                "ModificationDate": u"2017-01-21T01:14:48+00:00",\n+                "@id": "http://nohost/plone/doc1",\n+                "@type": "DXTestDocument",\n+                "CreationDate": "2016-01-21T01:14:48+00:00",\n+                "Creator": "test_user_1_",\n+                "Date": "2017-01-21T01:14:48+00:00",\n+                "Description": "Description",\n+                "EffectiveDate": "None",\n+                "ExpirationDate": "None",\n+                "ModificationDate": "2017-01-21T01:14:48+00:00",\n                 "Subject": [],\n-                "Title": u"Lorem Ipsum",\n-                "Type": u"DX Test Document",\n-                "UID": u"c6dcbd55ab2746e199cd4ed458000001",\n+                "Title": "Lorem Ipsum",\n+                "Type": "DX Test Document",\n+                "UID": "c6dcbd55ab2746e199cd4ed458000001",\n                 "author_name": None,\n                 "cmf_uid": None,\n                 "commentators": [],\n-                "created": u"2016-01-21T01:14:48+00:00",\n-                "description": u"Description",\n-                "effective": u"1969-12-31T00:00:00+00:00",\n+                "created": "2016-01-21T01:14:48+00:00",\n+                "description": "Description",\n+                "effective": "1969-12-31T00:00:00+00:00",\n                 "end": None,\n                 "exclude_from_nav": False,\n-                "expires": u"2499-12-31T00:00:00+00:00",\n+                "expires": "2499-12-31T00:00:00+00:00",\n                 "getIcon": None,\n-                "getId": u"doc1",\n-                "getObjSize": u"0 KB",\n-                "getPath": u"/plone/doc1",\n+                "getId": "doc1",\n+                "getObjSize": "0 KB",\n+                "getPath": "/plone/doc1",\n                 "getRemoteUrl": None,\n-                "getURL": u"http://nohost/plone/doc1",\n-                "id": u"doc1",\n+                "getURL": "http://nohost/plone/doc1",\n+                "id": "doc1",\n                 "in_response_to": None,\n                 "is_folderish": False,\n                 "last_comment_date": None,\n-                "listCreators": [u"test_user_1_"],\n+                "listCreators": ["test_user_1_"],\n                 "location": None,\n-                "mime_type": u"text/plain",\n-                "modified": u"2017-01-21T01:14:48+00:00",\n-                "portal_type": u"DXTestDocument",\n-                "review_state": u"private",\n+                "mime_type": "text/plain",\n+                "modified": "2017-01-21T01:14:48+00:00",\n+                "portal_type": "DXTestDocument",\n+                "review_state": "private",\n                 "start": None,\n                 "sync_uid": None,\n-                "title": u"Lorem Ipsum",\n+                "title": "Lorem Ipsum",\n                 "total_comments": 0,\n             }.items(),\n             summary.items(),\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 24365cd03..6ef7c67d4 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,4 +1,4 @@\n-from mock import patch\n+from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -37,8 +37,8 @@ def tearDown(self):\n \n     def test_get_document(self):\n         self.portal.invokeFactory("Document", id="doc1", title="My Document")\n-        self.portal.doc1.description = u"This is a document"\n-        self.portal.doc1.text = RichTextValue(u"Lorem ipsum", "text/plain", "text/html")\n+        self.portal.doc1.description = "This is a document"\n+        self.portal.doc1.text = RichTextValue("Lorem ipsum", "text/plain", "text/html")\n         transaction.commit()\n \n         response = self.api_session.get(self.portal.doc1.absolute_url())\n@@ -69,22 +69,22 @@ def test_get_document(self):\n         self.assertEqual("This is a document", response.json().get("description"))\n         self.assertEqual(\n             {\n-                u"data": u"<p>Lorem ipsum</p>",\n-                u"content-type": u"text/plain",\n-                u"encoding": u"utf-8",\n+                "data": "<p>Lorem ipsum</p>",\n+                "content-type": "text/plain",\n+                "encoding": "utf-8",\n             },\n             response.json().get("text"),\n         )\n \n     def test_get_news_item(self):\n         self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.news1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n-        self.portal.news1.image_caption = u"This is an image caption."\n+        self.portal.news1.image_caption = "This is an image caption."\n         transaction.commit()\n \n         with patch.object(storage, "uuid4", return_value="uuid1"):\n@@ -109,10 +109,10 @@ def test_get_news_item(self):\n             )\n             self.assertEqual("News Item 1", response.json().get("title"))\n             self.assertEqual(\n-                u"This is an image caption.", response.json()["image_caption"]\n+                "This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {"download": self.portal_url + u"/news1/@@images/uuid1.png"},  # noqa\n+                {"download": self.portal_url + "/news1/@@images/uuid1.png"},  # noqa\n                 response.json()["image"],\n             )\n \n@@ -171,12 +171,12 @@ def test_get_site_root_with_default_page(self):\n     def test_get_file(self):  # pragma: no cover\n         self.portal.invokeFactory("File", id="file1")\n         self.portal.file1.title = "File"\n-        self.portal.file1.description = u"A file"\n-        pdf_file = os.path.join(os.path.dirname(__file__), u"file.pdf")\n+        self.portal.file1.description = "A file"\n+        pdf_file = os.path.join(os.path.dirname(__file__), "file.pdf")\n         with open(pdf_file, "rb") as f:\n             pdf_data = f.read()\n         self.portal.file1.file = NamedBlobFile(\n-            data=pdf_data, contentType="application/pdf", filename=u"file.pdf"\n+            data=pdf_data, contentType="application/pdf", filename="file.pdf"\n         )\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file1)\n@@ -198,12 +198,12 @@ def test_get_file(self):  # pragma: no cover\n     def test_get_image(self):  # pragma: no cover\n         self.portal.invokeFactory("Image", id="img1")\n         self.portal.img1.title = "Image"\n-        self.portal.img1.description = u"An image"\n-        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        self.portal.img1.description = "An image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         self.portal.img1.image = NamedBlobImage(\n-            data=image_data, contentType="image/png", filename=u"image.png"\n+            data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex 36b43ce42..de643e0f2 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -108,21 +108,21 @@ def test_actions_siteroot(self):\n         self.assertEqual(\n             response,\n             {\n-                u"category1": [\n-                    {u"title": u"Members only", u"id": u"member_action", u"icon": u""},\n+                "category1": [\n+                    {"title": "Members only", "id": "member_action", "icon": ""},\n                     {\n-                        u"title": u"Action with view permission",\n-                        u"id": u"view_action",\n-                        u"icon": u"",\n+                        "title": "Action with view permission",\n+                        "id": "view_action",\n+                        "icon": "",\n                     },\n                     {\n-                        u"title": u"Action with Manage Portal Content permission",\n-                        u"id": u"manage_action",\n-                        u"icon": u"",\n+                        "title": "Action with Manage Portal Content permission",\n+                        "id": "manage_action",\n+                        "icon": "",\n                     },\n                 ],\n-                u"category2": [],\n-                u"category3": [],\n+                "category2": [],\n+                "category3": [],\n             },\n         )\n \n@@ -134,15 +134,15 @@ def test_actions_siteroot_anon(self):\n         self.assertEqual(\n             response,\n             {\n-                u"category1": [\n+                "category1": [\n                     {\n-                        u"title": u"Action with view permission",\n-                        u"id": u"view_action",\n-                        u"icon": u"",\n+                        "title": "Action with view permission",\n+                        "id": "view_action",\n+                        "icon": "",\n                     }\n                 ],\n-                u"category2": [],\n-                u"category3": [],\n+                "category2": [],\n+                "category3": [],\n             },\n         )\n \n@@ -156,9 +156,9 @@ def test_actions_on_content_object(self):\n         response = self.api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u"id"] for action in response["object"]]\n-        self.assertTrue(u"view" in object_action_ids)\n-        self.assertTrue(u"edit" in object_action_ids)\n+        object_action_ids = [action["id"] for action in response["object"]]\n+        self.assertTrue("view" in object_action_ids)\n+        self.assertTrue("edit" in object_action_ids)\n \n     def test_actions_on_content_object_anon(self):\n         self.portal.invokeFactory("Document", id="doc1", title="My Document")\n@@ -171,6 +171,6 @@ def test_actions_on_content_object_anon(self):\n         response = self.anon_api_session.get(url)\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        object_action_ids = [action[u"id"] for action in response["object"]]\n-        self.assertTrue(u"view" in object_action_ids)\n-        self.assertTrue(u"edit" not in object_action_ids)\n+        object_action_ids = [action["id"] for action in response["object"]]\n+        self.assertTrue("view" in object_action_ids)\n+        self.assertTrue("edit" not in object_action_ids)\ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex a819797af..0f4e9a951 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -34,11 +34,9 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n-        )\n-        createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\n@@ -51,16 +49,16 @@ def test_breadcrumbs(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/folder/doc1/@breadcrumbs",\n+                "@id": self.portal_url + "/folder/doc1/@breadcrumbs",\n                 "root": self.portal_url,\n                 "items": [\n                     {\n-                        u"@id": self.portal_url + u"/folder",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/folder",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder/doc1",\n-                        u"title": u"A document",\n+                        "@id": self.portal_url + "/folder/doc1",\n+                        "title": "A document",\n                     },\n                 ],\n             },\n@@ -86,18 +84,16 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         self.folder = createContentInContainer(\n-            self.portal["es"], u"Folder", id=u"folder", title=u"Some Folder"\n-        )\n-        createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            self.portal["es"], "Folder", id="folder", title="Some Folder"\n         )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\n@@ -110,16 +106,16 @@ def test_breadcrumbs_multilingual(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/es/folder/doc1/@breadcrumbs",\n+                "@id": self.portal_url + "/es/folder/doc1/@breadcrumbs",\n                 "root": self.portal_url + "/es",\n                 "items": [\n                     {\n-                        u"@id": self.portal_url + u"/es/folder",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/es/folder",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/es/folder/doc1",\n-                        u"title": u"A document",\n+                        "@id": self.portal_url + "/es/folder/doc1",\n+                        "title": "A document",\n                     },\n                 ],\n             },\ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex e11895aa2..dbdffc0c0 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -57,15 +57,15 @@ def tearDown(self):\n         self.user_session.close()\n \n     def test_list_datastructure(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         response = self.api_session.get(url)\n \n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertEqual(set(["items_total", "items", "@id"]), set(data))\n+        self.assertEqual({"items_total", "items", "@id"}, set(data))\n \n     def test_list_batching(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         self.api_session.post(url, json={"text": "comment 1"})\n         self.api_session.post(url, json={"text": "comment 2"})\n@@ -76,7 +76,7 @@ def test_list_batching(self):\n         self.assertIn("batching", data)\n \n     def test_add_comment_to_root(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.get(url)\n         self.assertEqual(0, response.json()["items_total"])\n@@ -92,7 +92,7 @@ def test_add_comment_to_root(self):\n         self.assertIsNone(data["items"][0]["@parent"])\n \n     def test_add_comment_to_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment 1"})\n         self.assertEqual(204, response.status_code)\n@@ -113,7 +113,7 @@ def test_add_comment_to_comment(self):\n         self.assertEqual(parent_id, sub["in_reply_to"])\n \n     def test_update(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n         OLD_TEXT = "comment 1"\n         NEW_TEXT = "new text"\n \n@@ -138,7 +138,7 @@ def test_update(self):\n         self.assertNotIn(OLD_TEXT, item_texts)\n \n     def test_permissions_delete_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\n@@ -160,7 +160,7 @@ def test_permissions_delete_comment(self):\n         self.assertEqual(204, response.status_code)\n \n     def test_permissions_update_comment(self):\n-        url = "{}/@comments".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@comments"\n \n         response = self.api_session.post(url, json={"text": "comment"})\n         self.assertEqual(204, response.status_code)\ndiff --git a/src/plone/restapi/tests/test_services_contextnavigation.py b/src/plone/restapi/tests/test_services_contextnavigation.py\nindex 90e8658c1..33103baf9 100644\n--- a/src/plone/restapi/tests/test_services_contextnavigation.py\n+++ b/src/plone/restapi/tests/test_services_contextnavigation.py\n@@ -291,7 +291,7 @@ def testHeadingLinkRooted(self):\n         }\n         qs = urlencode(q)\n \n-        response = self.api_session.get("/folder2/@contextnavigation?{}".format(qs))\n+        response = self.api_session.get(f"/folder2/@contextnavigation?{qs}")\n         self.assertEqual(response.status_code, 200)\n         res = response.json()\n         base = self.portal.absolute_url()\n@@ -561,7 +561,7 @@ def testTopLevelWithNavigationRoot(self):\n             self.portal.folder2.folder21,\n             opts(\n                 topLevel=1,\n-                root_path=u"/folder2"\n+                root_path="/folder2"\n                 # self.portal.folder2.UID()\n             ),\n         )\n@@ -584,11 +584,11 @@ def testMultipleTopLevelWithNavigationRoot(self):\n \n         view1 = self.renderer(\n             self.portal.abc,\n-            opts(topLevel=0, root_path=u"/abc"),\n+            opts(topLevel=0, root_path="/abc"),\n         )\n         view2 = self.renderer(\n             self.portal.abc,\n-            opts(topLevel=0, root_path=u"/abcde"),\n+            opts(topLevel=0, root_path="/abcde"),\n         )\n \n         tree1 = view1.getNavTree()\n@@ -598,12 +598,12 @@ def testMultipleTopLevelWithNavigationRoot(self):\n \n         view1 = self.renderer(\n             self.portal.abcde,\n-            opts(topLevel=0, root_path=u"/abc"),\n+            opts(topLevel=0, root_path="/abc"),\n         )\n \n         view2 = self.renderer(\n             self.portal.abcde,\n-            opts(topLevel=0, root_path=u"/abcde"),\n+            opts(topLevel=0, root_path="/abcde"),\n         )\n \n         tree1 = view1.getNavTree()\n@@ -697,7 +697,7 @@ def testNavRootWithUnicodeNavigationRoot(self):\n             self.portal.folder2.folder21,\n             opts(\n                 topLevel=1,\n-                root_path=u"/folder2",\n+                root_path="/folder2",\n             ),\n         )\n         tree = view.getNavTree()\n@@ -707,7 +707,7 @@ def testNoRootSet(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"", topLevel=0),\n+            opts(root_path="", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -717,7 +717,7 @@ def testRootIsNotPortal(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"/folder2", topLevel=0),\n+            opts(root_path="/folder2", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -726,7 +726,7 @@ def testRootIsNotPortal(self):\n     def testRootDoesNotExist(self):\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"DOESNT_EXIST", topLevel=0),\n+            opts(root_path="DOESNT_EXIST", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -740,7 +740,7 @@ def testAboveRoot(self):\n             return  # skip test in Plone 4\n \n         registry = getUtility(IRegistry)\n-        registry["plone.root"] = u"/folder2"\n+        registry["plone.root"] = "/folder2"\n         view = self.renderer(self.portal, opts(topLevel=0))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -750,7 +750,7 @@ def testOutsideRoot(self):\n         base = self.portal.absolute_url()\n         view = self.renderer(\n             self.portal.folder1,\n-            opts(root_path=u"/folder2", topLevel=0),\n+            opts(root_path="/folder2", topLevel=0),\n         )\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n@@ -848,7 +848,7 @@ def testPrunedRootNode(self):\n \n         # This test has been changed to conform to reality\n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         view = self.renderer(self.portal.folder1, opts(topLevel=0))\n         tree = view.getNavTree()\n@@ -862,7 +862,7 @@ def testPrunedRootNodeShowsAllParents(self):\n             return  # skip test in Plone 4\n \n         registry = self.portal.portal_registry\n-        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+        registry["plone.parent_types_not_to_query"] = ["Folder"]\n \n         view = self.renderer(self.portal.folder1.doc11, opts(topLevel=1))\n         tree = view.getNavTree()\n@@ -938,7 +938,7 @@ def testINavigationRootWithRelativeRootSet(self):\n         # make a navigation portlet with navigation root set\n         view = self.renderer(\n             self.portal.folder1.folder1_1,\n-            opts(bottomLevel=0, topLevel=0, root_path=u"/folder1/folder1_1"),\n+            opts(bottomLevel=0, topLevel=0, root_path="/folder1/folder1_1"),\n         )\n         tree = view(expand=True)["contextnavigation"]\n \n@@ -959,7 +959,7 @@ def testINavigationRootWithRelativeRootSet(self):\n     def testServiceId(self):\n         view = self.renderer(\n             self.portal.folder2.file21,\n-            opts(root_path=u"", topLevel=0),\n+            opts(root_path="", topLevel=0),\n         )\n         portlet = view(expand=True)\n \ndiff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nindex 95c2abd5d..30aba77c2 100644\n--- a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -52,7 +52,7 @@ def test_controlpanels_dexterity_types_document_get(self):\n         response = self.api_session.get("/@controlpanels/dexterity-types/Document")\n         self.assertEqual(200, response.status_code)\n         self.assertEqual(\n-            "{}/@controlpanels/dexterity-types/Document".format(self.portal_url),\n+            f"{self.portal_url}/@controlpanels/dexterity-types/Document",\n             response.json().get("@id"),\n         )\n         self.assertEqual("Page", response.json().get("title"))\ndiff --git a/src/plone/restapi/tests/test_services_database.py b/src/plone/restapi/tests/test_services_database.py\nindex e04d2b9f6..eab79a8f7 100644\n--- a/src/plone/restapi/tests/test_services_database.py\n+++ b/src/plone/restapi/tests/test_services_database.py\n@@ -32,7 +32,7 @@ def test_get_system(self):\n         self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n-        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@database")\n+        self.assertEqual(results["@id"], self.portal.absolute_url() + "/@database")\n         self.assertTrue("cache_length" in results.keys())\n         self.assertTrue("cache_length_bytes" in results.keys())\n         self.assertTrue("cache_detail_length" in results.keys())\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 607c8dc2d..6a27dd950 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -37,7 +37,7 @@ def setUp(self):\n \n         registry = getUtility(IRegistry)\n         registry["plone.email_from_address"] = "info@plone.org"\n-        registry["plone.email_from_name"] = u"Plone test site"\n+        registry["plone.email_from_name"] = "Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 7680102be..d3039f9d1 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -35,7 +35,7 @@ def setUp(self):\n \n         registry = getUtility(IRegistry)\n         registry["plone.email_from_address"] = "info@plone.org"\n-        registry["plone.email_from_name"] = u"Plone test site"\n+        registry["plone.email_from_name"] = "Plone test site"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex d392b43be..d7108ed19 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -91,7 +91,7 @@ def test_add_group(self):\n         fwt = self.gtool.getGroupById("fwt")\n         self.assertEqual("fwt@plone.org", fwt.getProperty("email"))\n         self.assertTrue(\n-            set([SITE_OWNER_NAME, TEST_USER_ID]).issubset(set(fwt.getGroupMemberIds())),\n+            {SITE_OWNER_NAME, TEST_USER_ID}.issubset(set(fwt.getGroupMemberIds())),\n             "Userids not found in group",\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex d5a4e1be6..50d36e076 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -9,7 +9,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n \n-import six\n import transaction\n import unittest\n \n@@ -36,7 +35,7 @@ def setUp(self):\n \n         api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         transaction.commit()\n \n@@ -50,7 +49,7 @@ def test_get_types(self):\n \n         types = [item["type"] for item in data]\n \n-        self.assertEqual(set(["versioning", "workflow"]), set(types))\n+        self.assertEqual({"versioning", "workflow"}, set(types))\n \n     def test_get_datastructure(self):\n         response = self.api_session.get(self.endpoint_url)\n@@ -78,22 +77,22 @@ def test_get_datastructure(self):\n             self.assertIsNotNone(item["action"])\n \n     def test_revert(self):\n-        url = "{}/@history".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@history"\n         response = self.api_session.patch(url, json={"version": 0})\n         self.assertEqual(response.status_code, 200)\n \n         # My Document is the old title\n         self.assertEqual(\n             response.json(),\n-            {u"message": u"My Document has been reverted to revision 0."},\n+            {"message": "My Document has been reverted to revision 0."},\n         )\n \n     def test_time_field(self):\n-        url = "{}/@history".format(self.doc.absolute_url())\n+        url = f"{self.doc.absolute_url()}/@history"\n         response = self.api_session.get(url)\n \n         for item in response.json():\n-            self.assertTrue(isinstance(item["time"], six.string_types))\n+            self.assertTrue(isinstance(item["time"], str))\n \n     def test_get_historical_link(self):\n         # The @id field should link to @history/version.\n@@ -135,9 +134,7 @@ def _disable_auto_versioning(self, content_type):\n         types = list(portal_repository.getVersionableContentTypes())\n         types.remove(content_type)\n         portal_repository.setVersionableContentTypes(types)\n-        portal_repository.removePolicyFromContentType(\n-            content_type, u"version_on_revert"\n-        )\n+        portal_repository.removePolicyFromContentType(content_type, "version_on_revert")\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n@@ -154,7 +151,7 @@ def setUp(self):\n         )\n         self.doc = self.portal.doc_with_empty_history\n         api.content.transition(self.doc, "publish")\n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         self.api_session = RelativeSession(self.portal_url)\n         self.api_session.headers.update({"Accept": "application/json"})\n@@ -194,7 +191,7 @@ def setUp(self):\n \n         api.content.transition(self.doc, "publish")\n \n-        self.endpoint_url = "{}/@history".format(self.doc.absolute_url())\n+        self.endpoint_url = f"{self.doc.absolute_url()}/@history"\n \n         transaction.commit()\n \n@@ -205,16 +202,16 @@ def test_actions_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Crear", first_action["action"])\n+        self.assertEqual("Crear", first_action["action"])\n \n     def test_state_titles_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Privado", first_action["state_title"])\n+        self.assertEqual("Privado", first_action["state_title"])\n \n     def test_transition_titles_are_translated(self):\n         url = self.doc.absolute_url() + "/@history"\n         response = self.api_session.get(url)\n         first_action = response.json()[-1]\n-        self.assertEqual(u"Crear", first_action["transition_title"])\n+        self.assertEqual("Crear", first_action["transition_title"])\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 2de932a4f..74c08eee5 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -33,32 +33,30 @@ def setUp(self):\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n         self.folder = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+            self.portal, "Folder", id="folder", title="Some Folder"\n         )\n         self.folder2 = createContentInContainer(\n-            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+            self.portal, "Folder", id="folder2", title="Some Folder 2"\n         )\n         self.subfolder1 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+            self.folder, "Folder", id="subfolder1", title="SubFolder 1"\n         )\n         self.subfolder2 = createContentInContainer(\n-            self.folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+            self.folder, "Folder", id="subfolder2", title="SubFolder 2"\n         )\n         self.thirdlevelfolder = createContentInContainer(\n             self.subfolder1,\n-            u"Folder",\n-            id=u"thirdlevelfolder",\n-            title=u"Third Level Folder",\n+            "Folder",\n+            id="thirdlevelfolder",\n+            title="Third Level Folder",\n         )\n         self.fourthlevelfolder = createContentInContainer(\n             self.thirdlevelfolder,\n-            u"Folder",\n-            id=u"fourthlevelfolder",\n-            title=u"Fourth Level Folder",\n-        )\n-        createContentInContainer(\n-            self.folder, u"Document", id=u"doc1", title=u"A document"\n+            "Folder",\n+            id="fourthlevelfolder",\n+            title="Fourth Level Folder",\n         )\n+        createContentInContainer(self.folder, "Document", id="doc1", title="A document")\n         transaction.commit()\n \n     def tearDown(self):\n@@ -75,28 +73,28 @@ def test_navigation_with_no_params_gets_only_top_level(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                "@id": self.portal_url + u"/folder/@navigation",\n+                "@id": self.portal_url + "/folder/@navigation",\n                 "items": [\n                     {\n-                        u"@id": self.portal_url,\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": None,\n-                        u"title": u"Home",\n+                        "@id": self.portal_url,\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": None,\n+                        "title": "Home",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder",\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": "private",\n-                        u"title": u"Some Folder",\n+                        "@id": self.portal_url + "/folder",\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": "private",\n+                        "title": "Some Folder",\n                     },\n                     {\n-                        u"@id": self.portal_url + u"/folder2",\n-                        u"description": u"",\n-                        u"items": [],\n-                        u"review_state": "private",\n-                        u"title": u"Some Folder 2",\n+                        "@id": self.portal_url + "/folder2",\n+                        "description": "",\n+                        "items": [],\n+                        "review_state": "private",\n+                        "title": "Some Folder 2",\n                     },\n                 ],\n             },\n@@ -109,7 +107,7 @@ def test_navigation_service(self):\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(len(response.json()["items"]), 3)\n-        self.assertEqual(response.json()["items"][1]["title"], u"Some Folder")\n+        self.assertEqual(response.json()["items"][1]["title"], "Some Folder")\n         self.assertEqual(len(response.json()["items"][1]["items"]), 3)\n         self.assertEqual(len(response.json()["items"][2]["items"]), 0)\n \n@@ -120,7 +118,7 @@ def test_navigation_service(self):\n         self.assertEqual(len(response.json()["items"][1]["items"][0]["items"]), 1)\n         self.assertEqual(\n             response.json()["items"][1]["items"][0]["items"][0]["title"],\n-            u"Third Level Folder",\n+            "Third Level Folder",\n         )\n         self.assertEqual(\n             len(response.json()["items"][1]["items"][0]["items"][0]["items"]),\n@@ -139,21 +137,21 @@ def test_navigation_service(self):\n             response.json()["items"][1]["items"][0]["items"][0]["items"][0][\n                 "title"\n             ],  # noqa\n-            u"Fourth Level Folder",\n+            "Fourth Level Folder",\n         )\n \n     def test_dont_broke_with_contents_without_review_state(self):\n         createContentInContainer(\n             self.portal,\n-            u"File",\n-            id=u"example-file",\n-            title=u"Example file",\n+            "File",\n+            id="example-file",\n+            title="Example file",\n         )\n         createContentInContainer(\n             self.folder,\n-            u"File",\n-            id=u"example-file-1",\n-            title=u"Example file 1",\n+            "File",\n+            id="example-file-1",\n+            title="Example file 1",\n         )\n         transaction.commit()\n \n@@ -168,15 +166,15 @@ def test_dont_broke_with_contents_without_review_state(self):\n     def test_navigation_sorting(self):\n         createContentInContainer(\n             self.portal,\n-            u"File",\n-            id=u"example-file",\n-            title=u"Example file",\n+            "File",\n+            id="example-file",\n+            title="Example file",\n         )\n         createContentInContainer(\n             self.folder,\n-            u"File",\n-            id=u"example-file-1",\n-            title=u"Example file 1",\n+            "File",\n+            id="example-file-1",\n+            title="Example file 1",\n         )\n         transaction.commit()\n         response = self.api_session.get(\ndiff --git a/src/plone/restapi/tests/test_services_querysources.py b/src/plone/restapi/tests/test_services_querysources.py\nindex ec7d51316..7d7f8ebf9 100644\n--- a/src/plone/restapi/tests/test_services_querysources.py\n+++ b/src/plone/restapi/tests/test_services_querysources.py\n@@ -30,7 +30,7 @@ def setUp(self):\n             container=self.portal,\n             id="testdoc",\n             type="DXTestDocument",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         transaction.commit()\n \n@@ -45,10 +45,10 @@ def test_get_querysource_xxx(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@querysources/test_choice_with_querysource?query=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@querysources/test_choice_with_querysource?query=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -63,20 +63,20 @@ def test_get_querysource_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@querysources/test_choice_with_querysource?query=token",  # noqa\n-                u"batching": {\n-                    u"@id": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?query=token&b_size=1",  # noqa\n-                    u"first": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=0&query=token&b_size=1",  # noqa\n-                    u"last": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=2&query=token&b_size=1",  # noqa\n-                    u"next": self.doc.absolute_url()\n-                    + u"/@querysources/test_choice_with_querysource?b_start=1&query=token&b_size=1",  # noqa\n+                "@id": self.doc.absolute_url()\n+                + "/@querysources/test_choice_with_querysource?query=token",  # noqa\n+                "batching": {\n+                    "@id": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?query=token&b_size=1",  # noqa\n+                    "first": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=0&query=token&b_size=1",  # noqa\n+                    "last": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=2&query=token&b_size=1",  # noqa\n+                    "next": self.doc.absolute_url()\n+                    + "/@querysources/test_choice_with_querysource?b_start=1&query=token&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 3,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 3,\n             },\n         )\n \n@@ -91,9 +91,9 @@ def test_querysource_cant_be_enumerated(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Bad Request",\n-                u"message": u"Enumerating querysources is not supported. "\n-                u"Please search the source using the ?query= QS parameter",\n+                "type": "Bad Request",\n+                "message": "Enumerating querysources is not supported. "\n+                "Please search the source using the ?query= QS parameter",\n             },\n         )\n \n@@ -107,9 +107,9 @@ def test_get_querysource_for_unknown_field(self):\n         self.assertEqual(\n             response,\n             {\n-                u"error": {\n-                    u"type": u"Not Found",\n-                    u"message": u"No such field: \'unknown_field\'",\n+                "error": {\n+                    "type": "Not Found",\n+                    "message": "No such field: \'unknown_field\'",\n                 }\n             },\n         )\n@@ -127,10 +127,10 @@ def test_context_querysource_xxx(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@querysources/test_choice_with_context_querysource?query=foo",  # noqa\n-                u"items": [{u"token": u"foo", u"title": u"Foo"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/testdoc/@querysources/test_choice_with_context_querysource?query=foo",  # noqa\n+                "items": [{"token": "foo", "title": "Foo"}],\n+                "items_total": 1,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_querystring.py b/src/plone/restapi/tests/test_services_querystring.py\nindex 9bd9145a3..3135438e1 100644\n--- a/src/plone/restapi/tests/test_services_querystring.py\n+++ b/src/plone/restapi/tests/test_services_querystring.py\n@@ -47,22 +47,22 @@ def test_endpoint_shows_field_config(self):\n         idx = indexes["Title"]\n \n         expected_field_config = {\n-            u"description": u"Text search of an item\'s title",\n-            u"enabled": True,\n-            u"group": u"Text",\n-            u"operations": [u"plone.app.querystring.operation.string.contains"],\n-            u"operators": {\n-                u"plone.app.querystring.operation.string.contains": {\n-                    u"description": None,\n-                    u"operation": u"plone.app.querystring.queryparser._contains",\n-                    u"title": u"Contains",\n-                    u"widget": u"StringWidget",\n+            "description": "Text search of an item\'s title",\n+            "enabled": True,\n+            "group": "Text",\n+            "operations": ["plone.app.querystring.operation.string.contains"],\n+            "operators": {\n+                "plone.app.querystring.operation.string.contains": {\n+                    "description": None,\n+                    "operation": "plone.app.querystring.queryparser._contains",\n+                    "title": "Contains",\n+                    "widget": "StringWidget",\n                 }\n             },\n-            u"sortable": False,\n-            u"title": u"Title",\n-            u"values": {},\n-            u"vocabulary": None,\n+            "sortable": False,\n+            "title": "Title",\n+            "values": {},\n+            "vocabulary": None,\n         }\n         self.assertEqual(expected_field_config, idx)\n \n@@ -75,22 +75,22 @@ def test_endpoint_inlines_vocabularies(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Review state",\n-                "vocabulary": u"plone.app.vocabularies.WorkflowStates",\n+                "title": "Review state",\n+                "vocabulary": "plone.app.vocabularies.WorkflowStates",\n             },\n             idx,\n         )\n \n         expected_vocab_values = {\n-            u"external": {u"title": u"Externally visible [external]"},\n-            u"internal": {u"title": u"Internal draft [internal]"},\n-            u"internally_published": {\n-                u"title": u"Internally published [internally_published]"\n+            "external": {"title": "Externally visible [external]"},\n+            "internal": {"title": "Internal draft [internal]"},\n+            "internally_published": {\n+                "title": "Internally published [internally_published]"\n             },\n-            u"pending": {u"title": u"Pending [pending]"},\n-            u"private": {u"title": u"Private [private]"},\n-            u"published": {u"title": u"Published with accent \\xe9 [published]"},\n-            u"visible": {u"title": u"Public draft [visible]"},\n+            "pending": {"title": "Pending [pending]"},\n+            "private": {"title": "Private [private]"},\n+            "published": {"title": "Published with accent \\xe9 [published]"},\n+            "visible": {"title": "Public draft [visible]"},\n         }\n         self.assertTrue(\n             all(elem in idx["values"].items() for elem in expected_vocab_values.items())\n@@ -105,27 +105,27 @@ def test_endpoint_inlines_operators(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Default Page",\n+                "title": "Default Page",\n                 "operations": [\n-                    u"plone.app.querystring.operation.boolean.isTrue",\n-                    u"plone.app.querystring.operation.boolean.isFalse",\n+                    "plone.app.querystring.operation.boolean.isTrue",\n+                    "plone.app.querystring.operation.boolean.isFalse",\n                 ],\n             },\n             idx,\n         )\n \n         expected_operators = {\n-            u"plone.app.querystring.operation.boolean.isFalse": {\n-                u"description": None,\n-                u"operation": u"plone.app.querystring.queryparser._isFalse",\n-                u"title": u"No",\n-                u"widget": None,\n+            "plone.app.querystring.operation.boolean.isFalse": {\n+                "description": None,\n+                "operation": "plone.app.querystring.queryparser._isFalse",\n+                "title": "No",\n+                "widget": None,\n             },\n-            u"plone.app.querystring.operation.boolean.isTrue": {\n-                u"description": None,\n-                u"operation": u"plone.app.querystring.queryparser._isTrue",\n-                u"title": u"Yes",\n-                u"widget": None,\n+            "plone.app.querystring.operation.boolean.isTrue": {\n+                "description": None,\n+                "operation": "plone.app.querystring.queryparser._isTrue",\n+                "title": "Yes",\n+                "widget": None,\n             },\n         }\n         self.assertEqual(expected_operators, idx["operators"])\n@@ -139,7 +139,7 @@ def test_endpoint_includes_widgets_for_operators(self):\n \n         self.assertDictContainsSubset(\n             {\n-                "title": u"Order in folder",\n+                "title": "Order in folder",\n                 "operations": [\n                     "plone.app.querystring.operation.int.is",\n                     "plone.app.querystring.operation.int.lessThan",\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex 6cbe97a33..c2468f70e 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -112,7 +112,7 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 4")\n+        self.assertEqual(response.json()["items"][4]["title"], "Test Document 4")\n \n         response = self.api_session.post(\n             "/@querystring-search",\n@@ -135,7 +135,7 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 9")\n+        self.assertEqual(response.json()["items"][4]["title"], "Test Document 9")\n \n     @unittest.skipIf(\n         not SUPPORT_NOT_UUID_QUERIES,\n@@ -164,7 +164,7 @@ def test_querystringsearch_do_not_return_context(self):\n         self.assertEqual(response.json()["items_total"], 1)\n         self.assertEqual(\n             response.json()["items"][0]["@id"],\n-            "{}/testdocument2".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument2",\n         )\n \n     def test_querystringsearch_sort(self):\n@@ -255,9 +255,9 @@ def test_querystringsearch_sort(self):\n         self.assertEqual(response.json()["items_total"], 10)\n         self.assertEqual(\n             response.json()["items"][0]["@id"],\n-            "{}/testdocument".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument",\n         )\n         self.assertEqual(\n             response.json()["items"][-1]["@id"],\n-            "{}/testdocument9".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/testdocument9",\n         )\ndiff --git a/src/plone/restapi/tests/test_services_sources.py b/src/plone/restapi/tests/test_services_sources.py\nindex 39b1192cc..2a55e2058 100644\n--- a/src/plone/restapi/tests/test_services_sources.py\n+++ b/src/plone/restapi/tests/test_services_sources.py\n@@ -30,7 +30,7 @@ def setUp(self):\n             container=self.portal,\n             id="testdoc",\n             type="DXTestDocument",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         transaction.commit()\n \n@@ -44,14 +44,14 @@ def test_get_source(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source",  # noqa\n-                u"items": [\n-                    {u"title": u"Title 1", u"token": u"token1"},\n-                    {u"title": u"Title 2", u"token": u"token2"},\n-                    {u"title": u"Title 3", u"token": u"token3"},\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source",  # noqa\n+                "items": [\n+                    {"title": "Title 1", "token": "token1"},\n+                    {"title": "Title 2", "token": "token2"},\n+                    {"title": "Title 3", "token": "token3"},\n                 ],\n-                u"items_total": 3,\n+                "items_total": 3,\n             },\n         )\n \n@@ -65,20 +65,20 @@ def test_get_source_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source",  # noqa\n-                u"batching": {\n-                    u"@id": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_size=1",  # noqa\n-                    u"first": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=0&b_size=1",  # noqa\n-                    u"last": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=2&b_size=1",  # noqa\n-                    u"next": self.doc.absolute_url()\n-                    + u"/@sources/test_choice_with_source?b_start=1&b_size=1",  # noqa\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source",  # noqa\n+                "batching": {\n+                    "@id": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_size=1",  # noqa\n+                    "first": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=0&b_size=1",  # noqa\n+                    "last": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=2&b_size=1",  # noqa\n+                    "next": self.doc.absolute_url()\n+                    + "/@sources/test_choice_with_source?b_start=1&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 3,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 3,\n             },\n         )\n \n@@ -92,10 +92,10 @@ def test_get_source_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?title=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?title=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -109,10 +109,10 @@ def test_get_source_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?token=token1",  # noqa\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 1,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?token=token1",  # noqa\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -126,10 +126,10 @@ def test_get_source_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.doc.absolute_url()\n-                + u"/@sources/test_choice_with_source?token=token",  # noqa\n-                u"items": [],\n-                u"items_total": 0,\n+                "@id": self.doc.absolute_url()\n+                + "/@sources/test_choice_with_source?token=token",  # noqa\n+                "items": [],\n+                "items_total": 0,\n             },\n         )\n \n@@ -144,8 +144,8 @@ def test_get_source_filtered_by_title_and_token_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Invalid parameters",\n-                u"message": u"You can not filter by title and token at the same time.",  # noqa\n+                "type": "Invalid parameters",\n+                "message": "You can not filter by title and token at the same time.",  # noqa\n             },\n         )\n \n@@ -159,8 +159,8 @@ def test_get_non_iterable_source_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"type": u"Bad Request",\n-                u"message": "Source for field \'test_choice_with_non_iterable_source\' is not iterable. ",\n+                "type": "Bad Request",\n+                "message": "Source for field \'test_choice_with_non_iterable_source\' is not iterable. ",\n             },\n         )\n \n@@ -174,11 +174,11 @@ def test_get_source_for_unknown_field(self):\n \n         self.assertEqual(\n             response.get("error"),\n-            {u"type": u"Not Found", u"message": u"No such field: \'unknown_field\'"},\n+            {"type": "Not Found", "message": "No such field: \'unknown_field\'"},\n         )\n \n     def test_context_source(self):\n-        self.doc.title = u"Foo Bar Baz"\n+        self.doc.title = "Foo Bar Baz"\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -189,19 +189,19 @@ def test_context_source(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@sources/test_choice_with_context_source",  # noqa\n-                u"items": [\n-                    {u"token": u"foo", u"title": u"Foo"},\n-                    {u"token": u"bar", u"title": u"Bar"},\n-                    {u"token": u"baz", u"title": u"Baz"},\n+                "@id": self.portal_url\n+                + "/testdoc/@sources/test_choice_with_context_source",  # noqa\n+                "items": [\n+                    {"token": "foo", "title": "Foo"},\n+                    {"token": "bar", "title": "Bar"},\n+                    {"token": "baz", "title": "Baz"},\n                 ],\n-                u"items_total": 3,\n+                "items_total": 3,\n             },\n         )\n \n     def test_source_filtered_by_non_ascii_title(self):\n-        self.doc.title = u"B\xc3\xa4r"\n+        self.doc.title = "B\xc3\xa4r"\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -213,10 +213,10 @@ def test_source_filtered_by_non_ascii_title(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@sources/test_choice_with_context_source?title=b%C3%A4r",  # noqa\n-                u"items": [{u"token": u"b=C3=A4r", u"title": u"B\\xe4r"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/testdoc/@sources/test_choice_with_context_source?title=b%C3%A4r",  # noqa\n+                "items": [{"token": "b=C3=A4r", "title": "B\\xe4r"}],\n+                "items_total": 1,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex d9b334fd0..bd3777108 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -20,7 +20,7 @@\n \n \n class ISampleTile(Interface):\n-    title = zope.schema.TextLine(title=u"Title", required=False)\n+    title = zope.schema.TextLine(title="Title", required=False)\n \n \n class SampleTile(Tile):\n@@ -51,22 +51,22 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.doc = createContentInContainer(\n-            self.portal, u"Document", id=u"doc", title=u"A document"\n+            self.portal, "Document", id="doc", title="A document"\n         )\n         transaction.commit()\n \n         sampleTileType = TileType(\n-            u"sample.tile",\n-            u"Sample tile",\n+            "sample.tile",\n+            "Sample tile",\n             "cmf.ModifyPortalContent",\n             "zope.Public",\n-            description=u"A tile used for testing",\n+            description="A tile used for testing",\n             schema=ISampleTile,\n             icon="testicon",\n         )\n-        provideUtility(sampleTileType, name=u"sample.tile")\n+        provideUtility(sampleTileType, name="sample.tile")\n         provideAdapter(\n-            SampleTile, (Interface, Interface), IBasicTile, name=u"sample.tile"\n+            SampleTile, (Interface, Interface), IBasicTile, name="sample.tile"\n         )\n \n     def tearDown(self):\n@@ -78,9 +78,9 @@ def test_get_available_tiles(self):\n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n         self.assertEqual(len(response), 1)\n-        self.assertEqual(response[0]["@id"], self.portal_url + u"/@tiles/sample.tile")\n-        self.assertEqual(response[0]["title"], u"Sample tile")\n-        self.assertEqual(response[0]["description"], u"A tile used for testing")\n+        self.assertEqual(response[0]["@id"], self.portal_url + "/@tiles/sample.tile")\n+        self.assertEqual(response[0]["title"], "Sample tile")\n+        self.assertEqual(response[0]["description"], "A tile used for testing")\n         self.assertEqual(response[0]["icon"], "testicon")\n \n     def test_get_tile(self):\n@@ -88,6 +88,6 @@ def test_get_tile(self):\n \n         self.assertEqual(response.status_code, 200)\n         response = response.json()\n-        self.assertEqual(response["title"], u"Sample tile")\n-        self.assertEqual(response["properties"]["title"]["title"], u"Title")\n-        self.assertEqual(response["properties"]["title"]["type"], u"string")\n+        self.assertEqual(response["title"], "Sample tile")\n+        self.assertEqual(response["properties"]["title"]["title"], "Title")\n+        self.assertEqual(response["properties"]["title"]["type"], "string")\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 0b8575eea..0c5959f35 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -66,9 +66,7 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types(self):\n-        response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n@@ -82,9 +80,7 @@ def test_get_types(self):\n             self.assertEqual(sorted(item), sorted(["@id", "title", "addable"]))\n \n     def test_get_types_document(self):\n-        response = self.api_session.get(\n-            "{}/@types/Document".format(self.portal.absolute_url())\n-        )\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types/Document")\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n@@ -450,7 +446,7 @@ def test_types_document_remove_fieldset(self):\n \n     def test_get_types_with_unknown_type(self):\n         response = self.api_session.get(\n-            "{}/@types/UnknownType".format(self.portal.absolute_url())\n+            f"{self.portal.absolute_url()}/@types/UnknownType"\n         )\n \n         self.assertEqual(response.status_code, 404)\n@@ -464,15 +460,11 @@ def test_get_types_with_unknown_type(self):\n \n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n-        response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n-        response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n \n@@ -510,14 +502,14 @@ def test_addable_types_for_non_manager_user(self):\n         )\n \n         folder = api.content.create(\n-            container=self.portal, id="folder", type="Folder", title=u"folder"\n+            container=self.portal, id="folder", type="Folder", title="folder"\n         )\n \n         folder_cant_add = api.content.create(\n             container=self.portal,\n             id="folder_cant_add",\n             type="Folder",\n-            title=u"folder_cant_add",\n+            title="folder_cant_add",\n         )\n \n         api.user.grant_roles(user=user, obj=folder, roles=["Contributor"])\n@@ -569,23 +561,21 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types_translated(self):\n-        response = self.api_session.get(\n-            "{}/@types".format(self.portal.absolute_url())\n-        )  # noqa\n+        response = self.api_session.get(f"{self.portal.absolute_url()}/@types")  # noqa\n \n         self.assertEqual(response.status_code, 200)\n \n         self.assertEqual(\n             {\n-                u"Archivo",\n-                u"Carpeta",\n-                u"Colecci\xc3\xb3n",\n-                u"DX Test Document",\n-                u"Enlace",\n-                u"Evento",\n-                u"Imagen",\n-                u"Noticia",\n-                u"P\xc3\xa1gina",\n+                "Archivo",\n+                "Carpeta",\n+                "Colecci\xc3\xb3n",\n+                "DX Test Document",\n+                "Enlace",\n+                "Evento",\n+                "Imagen",\n+                "Noticia",\n+                "P\xc3\xa1gina",\n             },\n-            set(item["title"] for item in response.json()),\n+            {item["title"] for item in response.json()},\n         )\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex a7390fc9f..4e1a4751f 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -51,7 +51,7 @@ def setUp(self):\n             email="noam.chomsky@example.com",\n             username="noam",\n             properties=properties,\n-            password=u"password",\n+            password="password",\n         )\n         properties = {\n             "email": "otheruser@example.com",\n@@ -62,7 +62,7 @@ def setUp(self):\n             email="otheruser@example.com",\n             username="otheruser",\n             properties=properties,\n-            password=u"otherpassword",\n+            password="otherpassword",\n         )\n         transaction.commit()\n \n@@ -461,7 +461,7 @@ def test_update_portrait(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -481,7 +481,7 @@ def test_update_portrait_with_default_plone_scaling(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n                 "scale": True,\n             }\n@@ -502,7 +502,7 @@ def test_update_portrait_by_manager(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -548,7 +548,7 @@ def test_update_user_with_portrait_set_without_updating_portrait(self):\n             "portrait": {\n                 "filename": "image.gif",\n                 "encoding": "base64",\n-                "data": u"R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+                "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n                 "content-type": "image/gif",\n             }\n         }\n@@ -715,7 +715,7 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.id), json=payload\n+            f"/@users/{user.id}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -744,7 +744,7 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+            f"/@users/{user.getUserName()}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -772,7 +772,7 @@ def test_reset_and_login_email_using_mail(self):\n \n         payload = {"reset_token": token, "new_password": "new_password"}\n         response = self.api_session.post(\n-            "/@users/{}/reset-password".format(user.getUserName()), json=payload\n+            f"/@users/{user.getUserName()}/reset-password", json=payload\n         )\n \n         self.assertEqual(response.status_code, 200)\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 126f8f41a..0cab7b7b3 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -12,21 +12,16 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import six\n import transaction\n import unittest\n \n \n-TEST_TERM_1 = SimpleTerm(42, token="token1", title=u"Title 1")\n-TEST_TERM_2 = SimpleTerm(43, token="token2", title=u"Title 2")\n+TEST_TERM_1 = SimpleTerm(42, token="token1", title="Title 1")\n+TEST_TERM_2 = SimpleTerm(43, token="token2", title="Title 2")\n TEST_TERM_3 = SimpleTerm(44, token="token3")\n TEST_TERM_4 = UtilityTerm(45, "token4")\n-if six.PY2:\n-    TEST_TERM_5 = SimpleTerm(46, token="token5", title=u"T\\xf6tle 5")\n-    TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\\xc3\\xb6tle 6")\n-else:\n-    TEST_TERM_5 = SimpleTerm(46, token="token5", title="T\xc3\xb6tle 5")\n-    TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\xc3\xb6tle 6")\n+TEST_TERM_5 = SimpleTerm(46, token="token5", title="T\xc3\xb6tle 5")\n+TEST_TERM_6 = SimpleTerm(47, token="token6", title="T\xc3\xb6tle 6")\n \n TEST_VOCABULARY = SimpleVocabulary(\n     [TEST_TERM_1, TEST_TERM_2, TEST_TERM_3, TEST_TERM_4, TEST_TERM_5, TEST_TERM_6]\n@@ -77,17 +72,17 @@ def test_get_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                u"items": [\n-                    {u"title": u"Title 1", u"token": u"token1"},\n-                    {u"title": u"Title 2", u"token": u"token2"},\n-                    {u"title": u"token3", u"token": u"token3"},\n-                    {u"title": u"token4", u"token": u"token4"},\n-                    {u"title": u"T\\xf6tle 5", u"token": u"token5"},\n-                    {u"title": u"T\\xf6tle 6", u"token": u"token6"},\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                "items": [\n+                    {"title": "Title 1", "token": "token1"},\n+                    {"title": "Title 2", "token": "token2"},\n+                    {"title": "token3", "token": "token3"},\n+                    {"title": "token4", "token": "token4"},\n+                    {"title": "T\\xf6tle 5", "token": "token5"},\n+                    {"title": "T\\xf6tle 6", "token": "token6"},\n                 ],\n-                u"items_total": 6,\n+                "items_total": 6,\n             },\n         )\n \n@@ -101,20 +96,20 @@ def test_get_vocabulary_batched(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                u"batching": {\n-                    u"@id": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n-                    u"first": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n-                    u"last": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=5&b_size=1",  # noqa\n-                    u"next": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                "batching": {\n+                    "@id": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_size=1",  # noqa\n+                    "first": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=0&b_size=1",  # noqa\n+                    "last": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=5&b_size=1",  # noqa\n+                    "next": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary?b_start=1&b_size=1",  # noqa\n                 },\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 6,\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 6,\n             },\n         )\n \n@@ -128,10 +123,10 @@ def test_get_vocabulary_filtered_by_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n-                u"items": [{u"title": u"Title 2", u"token": u"token2"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?title=2",  # noqa\n+                "items": [{"title": "Title 2", "token": "token2"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -145,13 +140,13 @@ def test_get_vocabulary_filtered_by_non_ascii_title(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=t%C3%B6tle",  # noqa\n-                u"items": [\n-                    {u"title": u"T\\xf6tle 5", u"token": u"token5"},\n-                    {u"title": u"T\\xf6tle 6", u"token": u"token6"},\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?title=t%C3%B6tle",  # noqa\n+                "items": [\n+                    {"title": "T\\xf6tle 5", "token": "token5"},\n+                    {"title": "T\\xf6tle 6", "token": "token6"},\n                 ],\n-                u"items_total": 2,\n+                "items_total": 2,\n             },\n         )\n \n@@ -165,10 +160,10 @@ def test_get_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n-                u"items": [{u"title": u"Title 1", u"token": u"token1"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token1",  # noqa\n+                "items": [{"title": "Title 1", "token": "token1"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -182,10 +177,10 @@ def test_get_vocabulary_filtered_by_token_partial_not_match(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n-                u"items": [],\n-                u"items_total": 0,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.restapi.tests.test_vocabulary?token=token",  # noqa\n+                "items": [],\n+                "items_total": 0,\n             },\n         )\n \n@@ -199,8 +194,8 @@ def test_get_vocabulary_filtered_by_title_and_token_returns_error(self):\n         self.assertEqual(\n             response.get("error"),\n             {\n-                u"message": u"You can not filter by title and token at the same time.",  # noqa\n-                u"type": u"Invalid parameters",\n+                "message": "You can not filter by title and token at the same time.",  # noqa\n+                "type": "Invalid parameters",\n             },\n         )\n \n@@ -214,10 +209,10 @@ def test_get_corner_case_vocabulary_filtered_by_token(self):\n         self.assertEqual(\n             response,\n             {\n-                u"@id": self.portal_url\n-                + u"/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n-                u"items": [{"title": "Monday", "token": "0"}],\n-                u"items_total": 1,\n+                "@id": self.portal_url\n+                + "/@vocabularies/plone.app.vocabularies.Weekdays?token=0",  # noqa\n+                "items": [{"title": "Monday", "token": "0"}],\n+                "items_total": 1,\n             },\n         )\n \n@@ -230,9 +225,9 @@ def test_get_unknown_vocabulary(self):\n         self.assertEqual(\n             response,\n             {\n-                u"error": {\n-                    u"type": u"Not Found",\n-                    u"message": u"The vocabulary \'unknown.vocabulary\' does not exist",\n+                "error": {\n+                    "type": "Not Found",\n+                    "message": "The vocabulary \'unknown.vocabulary\' does not exist",\n                 }\n             },\n         )\n@@ -248,9 +243,9 @@ def test_get_all_vocabularies(self):\n         self.assertEqual(\n             [\n                 {\n-                    u"@id": self.portal_url\n-                    + u"/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n-                    u"title": u"plone.restapi.tests.test_vocabulary",\n+                    "@id": self.portal_url\n+                    + "/@vocabularies/plone.restapi.tests.test_vocabulary",  # noqa\n+                    "title": "plone.restapi.tests.test_vocabulary",\n                 }\n             ],\n             [\n@@ -262,7 +257,7 @@ def test_get_all_vocabularies(self):\n \n     def test_context_vocabulary(self):\n         api.content.create(\n-            container=self.portal, id="testdoc", type="Document", title=u"Document 1"\n+            container=self.portal, id="testdoc", type="Document", title="Document 1"\n         )\n         transaction.commit()\n \n@@ -273,9 +268,7 @@ def test_context_vocabulary(self):\n             name=context_vocab_name,\n         )\n \n-        response = self.api_session.get(\n-            "testdoc/@vocabularies/{}".format(context_vocab_name)\n-        )\n+        response = self.api_session.get(f"testdoc/@vocabularies/{context_vocab_name}")\n \n         gsm = getGlobalSiteManager()\n         gsm.unregisterUtility(provided=IVocabularyFactory, name=context_vocab_name)\n@@ -283,13 +276,13 @@ def test_context_vocabulary(self):\n         self.assertEqual(\n             response.json(),\n             {\n-                u"@id": self.portal_url\n-                + u"/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n-                u"items": [\n-                    {u"title": u"testdoc", u"token": u"id"},\n-                    {u"title": u"Document 1", u"token": u"title"},\n+                "@id": self.portal_url\n+                + "/testdoc/@vocabularies/plone.restapi.tests.test_context_vocabulary",  # noqa\n+                "items": [\n+                    {"title": "testdoc", "token": "id"},\n+                    {"title": "Document 1", "token": "title"},\n                 ],\n-                u"items_total": 2,\n+                "items_total": 2,\n             },\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_workingcopy.py b/src/plone/restapi/tests/test_services_workingcopy.py\nindex 838c3f0f1..1f31d793b 100644\n--- a/src/plone/restapi/tests/test_services_workingcopy.py\n+++ b/src/plone/restapi/tests/test_services_workingcopy.py\n@@ -41,7 +41,7 @@ def test_workingcopy_checkout(self):\n \n         self.assertEquals(\n             response.json()["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n \n     def test_workingcopy_get(self):\n@@ -60,7 +60,7 @@ def test_workingcopy_get(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -68,7 +68,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n         # endpoint GET in the working_copy\n@@ -79,11 +79,11 @@ def test_workingcopy_get(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEquals(\n             response.json()["working_copy_of"]["@id"],\n-            "{}/document".format(self.portal_url),\n+            f"{self.portal_url}/document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -91,7 +91,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n         # Serialization on the baseline object\n@@ -101,7 +101,7 @@ def test_workingcopy_get(self):\n \n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -109,7 +109,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n         self.assertEquals(response.json()["working_copy_of"], None)\n \n@@ -119,11 +119,11 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy_of"]["@id"],\n-            "{}/document".format(self.portal_url),\n+            f"{self.portal_url}/document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["@id"],\n-            "{}/copy_of_document".format(self.portal_url),\n+            f"{self.portal_url}/copy_of_document",\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_name"],\n@@ -131,7 +131,7 @@ def test_workingcopy_get(self):\n         )\n         self.assertEquals(\n             response.json()["working_copy"]["creator_url"],\n-            "{}/author/admin".format(self.portal_url),\n+            f"{self.portal_url}/author/admin",\n         )\n \n     def test_workingcopy_notworkingcopy_get(self):\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex c1a20469b..872441bf4 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -1,7 +1,6 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n-from six.moves import range\n from zope.component import getMultiAdapter\n \n import json\n@@ -47,7 +46,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n \n     def deserialize(self, body="{}", validate_all=False, context=None):\n@@ -101,5 +100,5 @@ def test_resolveuids_blocks_deserializer(self):\n         values = json.loads(self.portal.blocks)\n         self.assertEqual(\n             values["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n-            "resolveuid/{}".format(self.portal.doc1.UID()),\n+            f"resolveuid/{self.portal.doc1.UID()}",\n         )\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex 1a2144a88..dbf3e8258 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -16,7 +16,7 @@ def setUp(self):\n \n         self.portal.invokeFactory(\n             "Document",\n-            id=u"doc1",\n+            id="doc1",\n         )\n \n     def serialize(self):\n@@ -29,8 +29,8 @@ def test_serializer_returns_json_serializeable_object(self):\n \n     def test_serializer_includes_title(self):\n         obj = self.serialize()\n-        self.assertIn(u"title", obj)\n-        self.assertEqual(u"Plone site", obj[u"title"])\n+        self.assertIn("title", obj)\n+        self.assertEqual("Plone site", obj["title"])\n \n     def test_get_is_folderish(self):\n         obj = self.serialize()\n@@ -41,7 +41,7 @@ def test_resolveuids_get_serialized_in_serializer(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n                 "@type": "foo",\n-                "url": "resolveuid/{}".format(self.portal.doc1.UID()),\n+                "url": f"resolveuid/{self.portal.doc1.UID()}",\n             },\n             "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\ndiff --git a/src/plone/restapi/tests/test_statictime.py b/src/plone/restapi/tests/test_statictime.py\nindex b2bc0f137..35c508e81 100644\n--- a/src/plone/restapi/tests/test_statictime.py\n+++ b/src/plone/restapi/tests/test_statictime.py\n@@ -47,7 +47,7 @@ def setUp(self):\n     def create_document(self, id_):\n         self.portal.invokeFactory("Document", id=id_)\n         document = self.portal[id_]\n-        document.title = u"My title"\n+        document.title = "My title"\n         return document\n \n     def create_comments(self, document):\n@@ -282,7 +282,7 @@ def setUp(self):\n     def create_document(self, id_):\n         self.portal.invokeFactory("Document", id=id_)\n         document = self.portal[id_]\n-        document.title = u"My title"\n+        document.title = "My title"\n         return document\n \n     def test_statictime_wc_created(self):\ndiff --git a/src/plone/restapi/tests/test_system.py b/src/plone/restapi/tests/test_system.py\nindex eac3d0230..cf213c02b 100644\n--- a/src/plone/restapi/tests/test_system.py\n+++ b/src/plone/restapi/tests/test_system.py\n@@ -39,7 +39,7 @@ def test_get_system(self):\n         self.assertEqual(response.headers.get("Content-Type"), "application/json")\n \n         results = response.json()\n-        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@system")\n+        self.assertEqual(results["@id"], self.portal.absolute_url() + "/@system")\n         self.assertEqual(results["cmf_version"], self.core_versions.get("CMF"))\n         self.assertEqual(results["debug_mode"], self.core_versions.get("Debug mode"))\n         self.assertEqual(results["pil_version"], self.core_versions.get("PIL"))\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 99008d787..ea0dc0fc1 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -33,16 +33,16 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n \n     def test_translation_info_includes_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+            (self.en_content, self.request), name="GET_application_json_@translations"\n         )\n \n         info = tinfo.reply()\n@@ -51,7 +51,7 @@ def test_translation_info_includes_translations(self):\n \n     def test_correct_translation_information(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name=u"GET_application_json_@translations"\n+            (self.en_content, self.request), name="GET_application_json_@translations"\n         )\n \n         info = tinfo.reply()\n@@ -74,16 +74,16 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \n     def test_translation_linking_by_url(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -97,7 +97,7 @@ def test_translation_linking_by_url(self):\n \n     def test_translation_linking_by_path(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": "/es/test-document"},\n@@ -111,7 +111,7 @@ def test_translation_linking_by_path(self):\n \n     def test_translation_linking_by_uid(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.UID()},\n@@ -125,7 +125,7 @@ def test_translation_linking_by_uid(self):\n \n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={},\n@@ -136,7 +136,7 @@ def test_calling_with_an_already_translated_content_gives_400(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -145,7 +145,7 @@ def test_calling_with_an_already_translated_content_gives_400(self):\n \n     def test_calling_with_inexistent_content_gives_400(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": "http://this-content-does-not-exist"},\n@@ -154,7 +154,7 @@ def test_calling_with_inexistent_content_gives_400(self):\n \n     def test_get_translations_on_content_with_no_permissions(self):\n         response = requests.post(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"id": self.es_content.absolute_url()},\n@@ -164,7 +164,7 @@ def test_get_translations_on_content_with_no_permissions(self):\n         transaction.commit()\n \n         response = requests.get(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n         )\n \n@@ -185,17 +185,17 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.en_content = createContentInContainer(\n-            self.portal["en"], "Document", title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n \n     def test_translation_unlinking_succeeds(self):\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"language": "es"},\n@@ -209,7 +209,7 @@ def test_translation_unlinking_succeeds(self):\n \n     def test_calling_endpoint_without_language_gives_400(self):\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={},\n@@ -220,7 +220,7 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n         ITranslationManager(self.en_content).remove_translation("es")\n         transaction.commit()\n         response = requests.delete(\n-            "{}/@translations".format(self.en_content.absolute_url()),\n+            f"{self.en_content.absolute_url()}/@translations",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={"language": "es"},\n@@ -240,13 +240,13 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \n     def test_post_to_folder_creates_document_translated(self):\n         response = requests.post(\n-            "{}/de".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/de",\n             headers={"Accept": "application/json"},\n             auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n             json={\n@@ -283,7 +283,7 @@ def setUp(self):\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         login(self.portal, SITE_OWNER_NAME)\n         self.es_content = createContentInContainer(\n-            self.portal["es"], "Document", title=u"Test document"\n+            self.portal["es"], "Document", title="Test document"\n         )\n         transaction.commit()\n \ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 1627c7134..92f6099ba 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -62,7 +62,7 @@ def setUp(self):\n         self.folder = api.content.create(\n             container=self.portal, type="Folder", id="testfolder", title="Testfolder"\n         )\n-        self.upload_url = "{}/@tus-upload".format(self.folder.absolute_url())\n+        self.upload_url = f"{self.folder.absolute_url()}/@tus-upload"\n         transaction.commit()\n \n         self.api_session = RelativeSession(self.portal.absolute_url())\n@@ -118,7 +118,7 @@ def test_tus_post_initialization(self):\n         self.assertEqual(len(uid), 32)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"create"})\n+        self.assertEqual(stored_metadata, {"length": 8, "mode": "create"})\n         upload.cleanup()\n \n     def test_tus_post_initialization_with_metadata(self):\n@@ -138,10 +138,10 @@ def test_tus_post_initialization_with_metadata(self):\n         self.assertEqual(\n             stored_metadata,\n             {\n-                u"content-type": u"text/plain",\n-                u"filename": u"test.txt",\n-                u"length": 8,\n-                u"mode": u"create",\n+                "content-type": "text/plain",\n+                "filename": "test.txt",\n+                "length": 8,\n+                "mode": "create",\n             },\n         )\n         upload.cleanup()\n@@ -152,7 +152,7 @@ def test_tus_post_replace(self):\n         )\n         transaction.commit()\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={"Tus-Resumable": "1.0.0", "Upload-Length": str(UPLOAD_LENGTH)},\n         )\n         self.assertEqual(response.status_code, 201)\n@@ -160,7 +160,7 @@ def test_tus_post_replace(self):\n         url_base, uid = location.rsplit("/", 1)\n         upload = TUSUpload(uid)\n         stored_metadata = upload.metadata()\n-        self.assertEqual(stored_metadata, {u"length": 8, u"mode": u"replace"})\n+        self.assertEqual(stored_metadata, {"length": 8, "mode": "replace"})\n         upload.cleanup()\n \n     def test_tus_head_on_not_existing_resource_returns_404(self):\n@@ -406,7 +406,7 @@ def test_tus_can_replace_pdf_file(self):\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={\n                 "Tus-Resumable": "1.0.0",\n                 "Upload-Length": str(pdf_file_size),\n@@ -511,7 +511,7 @@ def record_event(event):\n         pdf_file_size = os.path.getsize(pdf_file_path)\n         metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n         response = self.api_session.post(\n-            "{}/@tus-replace".format(self.file.absolute_url()),\n+            f"{self.file.absolute_url()}/@tus-replace",\n             headers={\n                 "Tus-Resumable": "1.0.0",\n                 "Upload-Length": str(pdf_file_size),\n@@ -579,7 +579,7 @@ def setUp(self):\n         self.api_session = RelativeSession(self.portal.absolute_url())\n         self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-        self.upload_url = "{}/@tus-upload".format(self.portal.absolute_url())\n+        self.upload_url = f"{self.portal.absolute_url()}/@tus-upload"\n \n     def test_cors_preflight_for_post_contains_tus_headers(self):\n         response = self.api_session.options(\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex f5d902259..90f8cde7d 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -25,31 +25,31 @@\n \n class IDummySchema(model.Schema):\n \n-    field1 = schema.Bool(title=u"Foo", description=u"")\n+    field1 = schema.Bool(title="Foo", description="")\n \n-    field2 = schema.TextLine(title=u"Bar", description=u"")\n+    field2 = schema.TextLine(title="Bar", description="")\n \n \n class ITaggedValuesSchema(model.Schema):\n \n     form.mode(field_mode_hidden="hidden")\n-    field_mode_hidden = schema.TextLine(title=u"ModeHidden", description=u"")\n+    field_mode_hidden = schema.TextLine(title="ModeHidden", description="")\n \n     form.mode(field_mode_display="display")\n-    field_mode_display = schema.TextLine(title=u"ModeDisplay", description=u"")\n+    field_mode_display = schema.TextLine(title="ModeDisplay", description="")\n \n     form.mode(field_mode_input="input")\n-    field_mode_input = schema.TextLine(title=u"ModeInput", description=u"")\n+    field_mode_input = schema.TextLine(title="ModeInput", description="")\n \n-    field_mode_default = schema.TextLine(title=u"ModeInput", description=u"")\n+    field_mode_default = schema.TextLine(title="ModeInput", description="")\n \n-    parametrized_widget_field = schema.TextLine(title=u"Parametrized widget field")\n+    parametrized_widget_field = schema.TextLine(title="Parametrized widget field")\n     form.widget(\n         "parametrized_widget_field", a_param="some_value", defaultFactory=lambda: "Foo"\n     )\n \n     not_parametrized_widget_field = schema.TextLine(\n-        title=u"No parametrized widget field"\n+        title="No parametrized widget field"\n     )\n     form.widget(not_parametrized_widget_field=TextWidget)\n \n@@ -67,14 +67,14 @@ def test_get_jsonschema_properties(self):\n         info = get_jsonschema_properties(self.portal, self.request, fieldsets)\n         expected = {\n             "field1": {\n-                "title": u"Foo",\n-                "description": u"",\n+                "title": "Foo",\n+                "description": "",\n                 "factory": "Yes/No",\n                 "type": "boolean",\n             },\n             "field2": {\n-                "title": u"Bar",\n-                "description": u"",\n+                "title": "Bar",\n+                "description": "",\n                 "factory": "Text line (String)",\n                 "type": "string",\n             },\n@@ -168,7 +168,7 @@ def test_do_not_fail_with_non_parametrized_widget(self):\n             ttool["TaggedDocument"], self.portal, self.request\n         )\n         self.assertEqual(\n-            u"No parametrized widget field",\n+            "No parametrized widget field",\n             jsonschema["properties"]["not_parametrized_widget_field"]["title"],\n         )\n \n@@ -179,7 +179,7 @@ def test_resolve_callable_widget_params(self):\n         )\n \n         self.assertEqual(\n-            u"Foo",\n+            "Foo",\n             jsonschema["properties"]["parametrized_widget_field"]["widgetOptions"].get(\n                 "defaultFactory"\n             ),\n@@ -195,8 +195,8 @@ def setUp(self):\n         self.request = self.layer["request"]\n         self.dummy_vocabulary = SimpleVocabulary(\n             [\n-                SimpleTerm(value=u"foo", title=u"Foo"),\n-                SimpleTerm(value=u"bar", title=u"Bar"),\n+                SimpleTerm(value="foo", title="Foo"),\n+                SimpleTerm(value="bar", title="Bar"),\n             ]\n         )\n \n@@ -207,8 +207,8 @@ def setUp(self):\n     def dummy_source_vocab(self, context):\n         return SimpleVocabulary(\n             [\n-                SimpleTerm(value=u"foo", title=u"Foo"),\n-                SimpleTerm(value=u"bar", title=u"Bar"),\n+                SimpleTerm(value="foo", title="Foo"),\n+                SimpleTerm(value="bar", title="Bar"),\n             ]\n         )\n \n@@ -222,8 +222,8 @@ def uppercased_title_default(context):\n             return context.title.upper()\n \n         field = schema.TextLine(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             defaultFactory=uppercased_title_default,\n         )\n         adapter = getMultiAdapter((field, folder, self.request), IJsonSchemaProvider)\n@@ -231,17 +231,17 @@ def uppercased_title_default(context):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Text line (String)",\n-                "description": u"My great field",\n-                "default": u"MY FOLDER",\n+                "title": "My field",\n+                "factory": "Text line (String)",\n+                "description": "My great field",\n+                "default": "MY FOLDER",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_textline(self):\n         field = schema.TextLine(\n-            title=u"My field", description=u"My great field", default=u"foobar"\n+            title="My field", description="My great field", default="foobar"\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -250,19 +250,19 @@ def test_textline(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Text line (String)",\n-                "description": u"My great field",\n-                "default": u"foobar",\n+                "title": "My field",\n+                "factory": "Text line (String)",\n+                "description": "My great field",\n+                "default": "foobar",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_text(self):\n         field = schema.Text(\n-            title=u"My field",\n-            description=u"My great field",\n-            default=u"Lorem ipsum dolor sit amet",\n+            title="My field",\n+            description="My great field",\n+            default="Lorem ipsum dolor sit amet",\n             min_length=10,\n         )\n         adapter = getMultiAdapter(\n@@ -272,11 +272,11 @@ def test_text(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Text",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Text",\n                 "widget": "textarea",\n-                "default": u"Lorem ipsum dolor sit amet",\n+                "default": "Lorem ipsum dolor sit amet",\n                 "minLength": 10,\n             },\n             adapter.get_schema(),\n@@ -284,7 +284,7 @@ def test_text(self):\n \n     def test_bool(self):\n         field = schema.Bool(\n-            title=u"My field", description=u"My great field", default=False\n+            title="My field", description="My great field", default=False\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -293,9 +293,9 @@ def test_bool(self):\n         self.assertEqual(\n             {\n                 "type": "boolean",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Yes/No",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Yes/No",\n                 "default": False,\n             },\n             adapter.get_schema(),\n@@ -303,8 +303,8 @@ def test_bool(self):\n \n     def test_float(self):\n         field = schema.Float(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min=0.0,\n             max=1.0,\n             default=0.5,\n@@ -318,9 +318,9 @@ def test_float(self):\n                 "minimum": 0.0,\n                 "maximum": 1.0,\n                 "type": "number",\n-                "title": u"My field",\n-                "description": u"My great field",\n-                "factory": u"Floating-point number",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Floating-point number",\n                 "default": 0.5,\n             },\n             adapter.get_schema(),\n@@ -328,8 +328,8 @@ def test_float(self):\n \n     def test_email(self):\n         field = Email(\n-            title=u"Email",\n-            description=u"Email field",\n+            title="Email",\n+            description="Email field",\n             default="foo@bar.com",\n             min_length=10,\n             max_length=20,\n@@ -354,9 +354,9 @@ def test_email(self):\n \n     def test_password(self):\n         field = schema.Password(\n-            title=u"Password",\n-            description=u"Password field",\n-            default=u"secret",\n+            title="Password",\n+            description="Password field",\n+            default="secret",\n             min_length=4,\n             max_length=8,\n         )\n@@ -380,8 +380,8 @@ def test_password(self):\n \n     def test_uri(self):\n         field = schema.URI(\n-            title=u"URI",\n-            description=u"URI field",\n+            title="URI",\n+            description="URI field",\n             default="http://foo.bar",\n             min_length=10,\n             max_length=100,\n@@ -406,8 +406,8 @@ def test_uri(self):\n \n     def test_decimal(self):\n         field = schema.Decimal(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min=Decimal(0),\n             max=Decimal(1),\n             default=Decimal(0.5),\n@@ -422,8 +422,8 @@ def test_decimal(self):\n                 "maximum": 1.0,\n                 "type": "number",\n                 "factory": "Floating-point number",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "default": 0.5,\n             },\n             adapter.get_schema(),\n@@ -431,7 +431,7 @@ def test_decimal(self):\n \n     def test_int(self):\n         field = schema.Int(\n-            title=u"My field", description=u"My great field", min=0, max=100, default=50\n+            title="My field", description="My great field", min=0, max=100, default=50\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -453,8 +453,8 @@ def test_int(self):\n     def test_choice(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             vocabulary=self.dummy_vocabulary,\n         )\n         adapter = getMultiAdapter(\n@@ -464,8 +464,8 @@ def test_choice(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n@@ -478,8 +478,8 @@ def test_choice(self):\n     def test_choice_inline_array(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             values=["foo", "bar"],\n         )\n \n@@ -490,8 +490,8 @@ def test_choice_inline_array(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": [None, None],\n@@ -503,8 +503,8 @@ def test_choice_inline_array(self):\n \n     def test_choice_named_vocab(self):\n         field = schema.Choice(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes",\n         )\n         adapter = getMultiAdapter(\n@@ -514,11 +514,11 @@ def test_choice_named_vocab(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "vocabulary": {\n-                    "@id": u"http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+                    "@id": "http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n                 },  # noqa\n             },\n             adapter.get_schema(),\n@@ -527,8 +527,8 @@ def test_choice_named_vocab(self):\n     def test_choice_source_vocab(self):\n         field = schema.Choice(\n             __name__="myfield",\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             source=self.dummy_source_vocab,\n         )\n         adapter = getMultiAdapter(\n@@ -538,8 +538,8 @@ def test_choice_source_vocab(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n@@ -551,11 +551,11 @@ def test_choice_source_vocab(self):\n \n     def test_collection(self):\n         field = schema.List(\n-            title=u"My field",\n-            description=u"My great field",\n+            title="My field",\n+            description="My great field",\n             min_length=1,\n             value_type=schema.TextLine(\n-                title=u"Text", description=u"Text field", default=u"Default text"\n+                title="Text", description="Text field", default="Default text"\n             ),\n             default=["foobar"],\n         )\n@@ -566,8 +566,8 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "List",\n                 "default": ["foobar"],\n                 "minItems": 1,\n@@ -575,17 +575,17 @@ def test_collection(self):\n                 "additionalItems": True,\n                 "items": {\n                     "type": "string",\n-                    "title": u"Text",\n-                    "description": u"Text field",\n+                    "title": "Text",\n+                    "description": "Text field",\n                     "factory": "Text line (String)",\n-                    "default": u"Default text",\n+                    "default": "Default text",\n                 },\n             },\n             adapter.get_schema(),\n         )\n \n         # Test Tuple\n-        field = schema.Tuple(title=u"My field", value_type=schema.Int(), default=(1, 2))\n+        field = schema.Tuple(title="My field", value_type=schema.Int(), default=(1, 2))\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -593,14 +593,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "Tuple",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "type": "integer",\n                     "factory": "Integer",\n                 },\n@@ -610,7 +610,7 @@ def test_collection(self):\n         )\n \n         # Test Set\n-        field = schema.Set(title=u"My field", value_type=schema.TextLine())\n+        field = schema.Set(title="My field", value_type=schema.TextLine())\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -618,14 +618,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "Multiple Choice",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "factory": "Text line (String)",\n                     "type": "string",\n                 },\n@@ -636,7 +636,7 @@ def test_collection(self):\n         # List of choices\n         field = schema.List(\n             __name__="myfield",\n-            title=u"My field",\n+            title="My field",\n             value_type=schema.Choice(vocabulary=self.dummy_vocabulary),\n         )\n         adapter = getMultiAdapter(\n@@ -646,14 +646,14 @@ def test_collection(self):\n         self.assertEqual(\n             {\n                 "type": "array",\n-                "title": u"My field",\n-                "description": u"",\n+                "title": "My field",\n+                "description": "",\n                 "factory": "List",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n-                    "title": u"",\n-                    "description": u"",\n+                    "title": "",\n+                    "description": "",\n                     "factory": "Choice",\n                     "type": "string",\n                     "enum": ["foo", "bar"],\n@@ -667,7 +667,7 @@ def test_collection(self):\n \n     def test_object(self):\n         field = schema.Object(\n-            title=u"My field", description=u"My great field", schema=IDummySchema\n+            title="My field", description="My great field", schema=IDummySchema\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -676,20 +676,20 @@ def test_object(self):\n         self.assertEqual(\n             {\n                 "type": "object",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n                 "factory": "File",\n                 "properties": {\n                     "field1": {\n-                        "title": u"Foo",\n-                        "description": u"",\n-                        "factory": u"Yes/No",\n+                        "title": "Foo",\n+                        "description": "",\n+                        "factory": "Yes/No",\n                         "type": "boolean",\n                     },\n                     "field2": {\n-                        "title": u"Bar",\n-                        "description": u"",\n-                        "factory": u"Text line (String)",\n+                        "title": "Bar",\n+                        "description": "",\n+                        "factory": "Text line (String)",\n                         "type": "string",\n                     },\n                 },\n@@ -698,7 +698,7 @@ def test_object(self):\n         )\n \n     def test_richtext(self):\n-        field = RichText(title=u"My field", description=u"My great field")\n+        field = RichText(title="My field", description="My great field")\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -706,9 +706,9 @@ def test_richtext(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Rich Text",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "factory": "Rich Text",\n+                "description": "My great field",\n                 "widget": "richtext",\n             },\n             adapter.get_schema(),\n@@ -716,7 +716,7 @@ def test_richtext(self):\n \n     def test_date(self):\n         field = schema.Date(\n-            title=u"My field", description=u"My great field", default=date(2016, 1, 1)\n+            title="My field", description="My great field", default=date(2016, 1, 1)\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -725,17 +725,17 @@ def test_date(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Date",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "factory": "Date",\n+                "description": "My great field",\n                 "default": date(2016, 1, 1),\n-                "widget": u"date",\n+                "widget": "date",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_datetime(self):\n-        field = schema.Datetime(title=u"My field", description=u"My great field")\n+        field = schema.Datetime(title="My field", description="My great field")\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n         )\n@@ -743,17 +743,17 @@ def test_datetime(self):\n         self.assertEqual(\n             {\n                 "type": "string",\n-                "title": u"My field",\n-                "factory": u"Date/Time",\n-                "description": u"My great field",\n-                "widget": u"datetime",\n+                "title": "My field",\n+                "factory": "Date/Time",\n+                "description": "My great field",\n+                "widget": "datetime",\n             },\n             adapter.get_schema(),\n         )\n \n     def test_jsonfield(self):\n         field = JSONField(\n-            title=u"My field", description=u"My great field", widget="my_widget_name"\n+            title="My field", description="My great field", widget="my_widget_name"\n         )\n         adapter = getMultiAdapter(\n             (field, self.portal, self.request), IJsonSchemaProvider\n@@ -762,10 +762,10 @@ def test_jsonfield(self):\n         self.assertEqual(\n             {\n                 "type": "dict",\n-                "title": u"My field",\n+                "title": "My field",\n                 "factory": "JSONField",\n-                "description": u"My great field",\n-                "widget": u"my_widget_name",\n+                "description": "My great field",\n+                "widget": "my_widget_name",\n             },\n             adapter.get_schema(),\n         )\ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex 2f5b3bad5..25c480f5d 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -6,7 +6,6 @@\n )\n \n import unittest\n-import six\n \n \n class TestUpgradeOrdering(unittest.TestCase):\n@@ -30,7 +29,7 @@ def test_upgrade_ensure_child_ordering_object_ids_are_native_strings(self):\n \n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type("doc1")])\n+        ordering.moveObjectsToBottom(["doc1"])\n \n         ensure_child_ordering_object_ids_are_native_strings(self.folder)\n \n@@ -58,7 +57,7 @@ def test_upgrade_view(self):\n         ordering = self.folder.getOrdering()\n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type("doc1")])\n+        ordering.moveObjectsToBottom(["doc1"])\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         view = self.portal.restrictedTraverse("@@plone-restapi-upgrade-fix-ordering")\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex cbf1d6642..9803b3821 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -35,25 +35,25 @@ def setUp(self):\n \n     def test_workflow_info_includes_history(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("history", info)\n         history = info["history"]\n         self.assertEqual(3, len(history))\n-        self.assertEqual("published", history[-1][u"review_state"])\n-        self.assertEqual(u"Published with accent \xc3\xa9", history[-1][u"title"])\n+        self.assertEqual("published", history[-1]["review_state"])\n+        self.assertEqual("Published with accent \xc3\xa9", history[-1]["title"])\n \n     def test_workflow_info_includes_current_state(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("state", info)\n         state = info["state"]\n         self.assertEqual(2, len(state))\n         self.assertEqual("published", state["id"])\n-        self.assertEqual(u"Published with accent \xc3\xa9", state["title"])\n+        self.assertEqual("Published with accent \xc3\xa9", state["title"])\n \n     def test_workflow_info_unauthorized_history(self):\n         login(self.portal, SITE_OWNER_NAME)\n@@ -68,7 +68,7 @@ def test_workflow_info_unauthorized_history(self):\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, TEST_USER_NAME)\n         wfinfo = getMultiAdapter(\n-            (doc2, self.request), name=u"GET_application_json_@workflow"\n+            (doc2, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("history", info)\n@@ -77,7 +77,7 @@ def test_workflow_info_unauthorized_history(self):\n \n     def test_workflow_info_includes_transitions(self):\n         wfinfo = getMultiAdapter(\n-            (self.doc1, self.request), name=u"GET_application_json_@workflow"\n+            (self.doc1, self.request), name="GET_application_json_@workflow"\n         )\n         info = wfinfo.reply()\n         self.assertIn("transitions", info)\n@@ -100,7 +100,7 @@ def test_expanded_workflow_info_in_content_serialization(self):\n \n     def test_workflow_info_empty_on_siteroot(self):\n         wfinfo = getMultiAdapter(\n-            (self.portal, self.request), name=u"GET_application_json_@workflow"\n+            (self.portal, self.request), name="GET_application_json_@workflow"\n         )\n         obj = wfinfo.reply()\n \n@@ -128,7 +128,7 @@ def traverse(\n         request.environ["HTTP_ACCEPT"] = accept\n         request.environ["REQUEST_METHOD"] = method\n         if auth is None:\n-            auth = "%s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            auth = f"{SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         request._auth = "Basic %s" % b64encode(auth.encode("utf8")).decode("utf8")\n         notify(PubStart(request))\n         return request.traverse(path)\n@@ -136,9 +136,9 @@ def traverse(\n     def test_transition_action_succeeds(self):\n         service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u"published", res[u"review_state"])\n+        self.assertEqual("published", res["review_state"])\n         self.assertEqual(\n-            u"published", self.wftool.getInfoFor(self.portal.doc1, u"review_state")\n+            "published", self.wftool.getInfoFor(self.portal.doc1, "review_state")\n         )\n \n     def test_transition_action_succeeds_changes_effective(self):\n@@ -164,7 +164,7 @@ def test_transition_with_comment(self):\n         self.request["BODY"] = \'{"comment": "A comment"}\'\n         service = self.traverse("/plone/doc1/@workflow/publish")\n         res = service.reply()\n-        self.assertEqual(u"A comment", res[u"comments"])\n+        self.assertEqual("A comment", res["comments"])\n \n     def test_transition_including_children(self):\n         folder = self.portal[self.portal.invokeFactory("Folder", id="folder")]\n@@ -173,10 +173,8 @@ def test_transition_including_children(self):\n         service = self.traverse("/plone/folder/@workflow/publish")\n         service.reply()\n         self.assertEqual(200, self.request.response.getStatus())\n-        self.assertEqual(u"published", self.wftool.getInfoFor(folder, u"review_state"))\n-        self.assertEqual(\n-            u"published", self.wftool.getInfoFor(subfolder, u"review_state")\n-        )\n+        self.assertEqual("published", self.wftool.getInfoFor(folder, "review_state"))\n+        self.assertEqual("published", self.wftool.getInfoFor(subfolder, "review_state"))\n \n     def test_transition_with_effective_date(self):\n         self.request["BODY"] = \'{"effective": "2018-06-24T09:17:02"}\'\n@@ -215,9 +213,9 @@ def test_transition_with_no_access_to_review_history_in_target_state(self):\n         )\n         login(self.portal, TEST_USER_NAME)\n \n-        auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        auth = f"{TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n         service = self.traverse("/plone/folder/@workflow/restrict", auth=auth)\n         res = service.reply()\n \n         self.assertEqual(200, self.request.response.getStatus(), res)\n-        self.assertEqual(u"restricted", res[u"review_state"], res)\n+        self.assertEqual("restricted", res["review_state"], res)\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex 5b991b32a..25f8ab759 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -41,7 +41,7 @@\n \n @adapter(IField, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n-class DefaultJsonSchemaProvider(object):\n+class DefaultJsonSchemaProvider:\n     def __init__(self, field, context, request):\n         self.field = field.bind(context)\n         self.context = context\n@@ -56,7 +56,7 @@ def get_title(self):\n \n     def get_description(self):\n         if self.field.description is None:\n-            return u""\n+            return ""\n \n         return translate(self.field.description, context=self.request)\n \n@@ -283,7 +283,7 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class ListJsonSchemaProvider(CollectionJsonSchemaProvider):\n     def additional(self):\n-        info = super(ListJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         if IChoice.providedBy(self.field.value_type):\n             info["uniqueItems"] = True\n         else:\n@@ -296,7 +296,7 @@ def additional(self):\n @implementer(IJsonSchemaProvider)\n class SetJsonSchemaProvider(CollectionJsonSchemaProvider):\n     def additional(self):\n-        info = super(SetJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         info["uniqueItems"] = True\n         return info\n \n@@ -410,7 +410,7 @@ def get_properties(self):\n         return get_jsonschema_properties(context, request, fieldsets, prefix)\n \n     def additional(self):\n-        info = super(ObjectJsonSchemaProvider, self).additional()\n+        info = super().additional()\n         info["properties"] = self.get_properties()\n         return info\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 6fbbece6a..cb6c48ac6 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -62,7 +62,7 @@\n \n \n @implementer(IDexterityContent)\n-class FakeDXContext(object):\n+class FakeDXContext:\n     """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n@@ -89,8 +89,7 @@ def iter_fields(fieldsets):\n     as returned by `get_fieldsets`.\n     """\n     for fieldset in fieldsets:\n-        for field in fieldset["fields"]:\n-            yield field\n+        yield from fieldset["fields"]\n \n \n def get_form_fieldsets(form):\n@@ -307,7 +306,7 @@ def get_info_for_type(context, request, name):\n         return schema\n \n     # Get the empty fieldsets\n-    existing = set(f.get("id") for f in schema.get("fieldsets", []))\n+    existing = {f.get("id") for f in schema.get("fieldsets", [])}\n     generated = set()\n     for fieldset in context.schema.queryTaggedValue(FIELDSETS_KEY, []):\n         name = fieldset.__name__\ndiff --git a/src/plone/restapi/upgrades/ordering.py b/src/plone/restapi/upgrades/ordering.py\nindex ab6d3e3c4..9170b8700 100644\n--- a/src/plone/restapi/upgrades/ordering.py\n+++ b/src/plone/restapi/upgrades/ordering.py\n@@ -5,15 +5,13 @@\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n \n-import six\n-\n \n ORDER_KEY = DefaultOrdering.ORDER_KEY\n QUERY = {"is_folderish": True}\n \n \n def safe_utf8(to_utf8):\n-    if isinstance(to_utf8, six.text_type):\n+    if isinstance(to_utf8, str):\n         to_utf8 = to_utf8.encode("utf-8")\n     return to_utf8\n \n@@ -33,8 +31,7 @@ def ensure_child_ordering_object_ids_are_native_strings(container):\n     The problem only exists with python 2 so we do nothing when we are\n     called on python 3 by mistake.\n     """\n-    if six.PY3:\n-        return\n+    return\n \n     if not IAnnotatable.providedBy(container):\n         return\n@@ -60,8 +57,7 @@ class FixOrderingView(BrowserView):\n     """\n \n     def __call__(self):\n-        if six.PY3:\n-            return "Aborted, fixing ordering is only necessary on python 2."\n+        return "Aborted, fixing ordering is only necessary on python 2."\n \n         catalog = getToolByName(self.context, "portal_catalog")\n         for brain in catalog.unrestrictedSearchResults(QUERY):\ndiff --git a/src/plone/restapi/upgrades/to0005.py b/src/plone/restapi/upgrades/to0005.py\nindex ef4c85a84..4d3d2aeda 100644\n--- a/src/plone/restapi/upgrades/to0005.py\n+++ b/src/plone/restapi/upgrades/to0005.py\n@@ -28,7 +28,7 @@ def rename_tiles_to_blocks(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n \n         # In case we used the short behavior name\n         if fti and SHORT_OLD_BEHAVIOR_NAME in fti.behaviors:\n@@ -40,10 +40,10 @@ def rename_tiles_to_blocks(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n \n     for brain in api.content.find(portal_type=types_with_tiles_behavior):\n         obj = brain.getObject()\n         obj.blocks = getattr(obj, "tiles", {})\n         obj.blocks_layout = getattr(obj, "tiles_layout", {"items": []})\n-        logger.info("Migrated fields of content object: {}".format(obj.absolute_url()))\n+        logger.info(f"Migrated fields of content object: {obj.absolute_url()}")\ndiff --git a/src/plone/restapi/upgrades/to0006.py b/src/plone/restapi/upgrades/to0006.py\nindex b1083b01c..30593c4d5 100644\n--- a/src/plone/restapi/upgrades/to0006.py\n+++ b/src/plone/restapi/upgrades/to0006.py\n@@ -24,4 +24,4 @@ def rename_iface_to_name_in_blocks_behavior(setup_context):\n             ]\n             new_fti.append(SHORT_NEW_NAME)\n             fti.behaviors = tuple(new_fti)\n-            logger.info("Migrated behavior of {} type".format(_type))\n+            logger.info(f"Migrated behavior of {_type} type")\n'

