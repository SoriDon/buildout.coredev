Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:10:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/86178fd9e7e1c070cda6af05a4db4adac1f07e5b

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a533099d.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..0df002c\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a533099d"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9d0c563 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..601eacb\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.portlet.static\n+extras =\n+    test\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:11:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/a6cd9b1b14940ccb68c97f010f7dcfab63b8a1c8

feat: isort

Files changed:
M plone/portlet/static/testing.py
M plone/portlet/static/tests/test_portlet_static.py

b'diff --git a/plone/portlet/static/testing.py b/plone/portlet/static/testing.py\nindex 3356081..3c9f12b 100644\n--- a/plone/portlet/static/testing.py\n+++ b/plone/portlet/static/testing.py\n@@ -1,5 +1,5 @@\n-from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import applyProfile\n+from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import IntegrationTesting\n from zope.configuration import xmlconfig\n \ndiff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py\nindex 61e0daa..8a50a95 100644\n--- a/plone/portlet/static/tests/test_portlet_static.py\n+++ b/plone/portlet/static/tests/test_portlet_static.py\n@@ -1,8 +1,8 @@\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.portlet.static import static\n from plone.portlet.static.testing import PLONEPORTLETSTATIC_INTEGRATION_TESTING\n from plone.portlets.interfaces import IPortletAssignment\n@@ -10,7 +10,9 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n-from zope.component import getUtility, getMultiAdapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n import unittest\n \n \n@@ -176,7 +178,8 @@ def test_relative_link(self):\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:13:21+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/90ca215676136e002851d3d453ba3fcd711516bb

feat: black

Files changed:
M plone/__init__.py
M plone/portlet/__init__.py
M plone/portlet/static/__init__.py
M plone/portlet/static/static.py
M plone/portlet/static/testing.py
M plone/portlet/static/tests/test_portlet_static.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlet/__init__.py b/plone/portlet/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/portlet/__init__.py\n+++ b/plone/portlet/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlet/static/__init__.py b/plone/portlet/static/__init__.py\nindex 45a4f72..fe51975 100644\n--- a/plone/portlet/static/__init__.py\n+++ b/plone/portlet/static/__init__.py\n@@ -2,9 +2,13 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\n \n addPermission(\n-    \'plone.portlet.static: Add static portlet\',\n-    (\'Manager\', \'Site Administrator\', \'Owner\', )\n+    "plone.portlet.static: Add static portlet",\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\ndiff --git a/plone/portlet/static/static.py b/plone/portlet/static/static.py\nindex 1911442..d2078c6 100644\n--- a/plone/portlet/static/static.py\n+++ b/plone/portlet/static/static.py\n@@ -18,7 +18,7 @@\n import re\n \n \n-logger = logging.getLogger(\'plone.portlet.static\')\n+logger = logging.getLogger("plone.portlet.static")\n \n \n class IStaticPortlet(IPortletDataProvider):\n@@ -33,13 +33,11 @@ class IStaticPortlet(IPortletDataProvider):\n         title=_("Portlet header"),\n         description=_("Title of the rendered portlet"),\n         constraint=re.compile(r"[^\\s]").match,\n-        required=False)\n+        required=False,\n+    )\n \n     directives.widget(text=RichTextFieldWidget)\n-    text = RichText(\n-        title=_("Text"),\n-        description=_("The text to render"),\n-        required=True)\n+    text = RichText(title=_("Text"), description=_("The text to render"), required=True)\n \n     omit_border = schema.Bool(\n         title=_("Omit portlet border"),\n@@ -48,19 +46,20 @@ class IStaticPortlet(IPortletDataProvider):\n             "without the standard header, border or footer."\n         ),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     footer = schema.TextLine(\n         title=_("Portlet footer"),\n         description=_("Text to be shown in the footer"),\n-        required=False)\n+        required=False,\n+    )\n \n     more_url = schema.ASCIILine(\n         title=_("Details link"),\n-        description=_(\n-            "If given, the header and footer will link to this URL."\n-        ),\n-        required=False)\n+        description=_("If given, the header and footer will link to this URL."),\n+        required=False,\n+    )\n \n \n @implementer(IStaticPortlet)\n@@ -75,10 +74,9 @@ class Assignment(base.Assignment):\n     text = ""\n     omit_border = False\n     footer = ""\n-    more_url = \'\'\n+    more_url = ""\n \n-    def __init__(self, header="", text="", omit_border=False, footer="",\n-                 more_url=\'\'):\n+    def __init__(self, header="", text="", omit_border=False, footer="", more_url=""):\n         self.header = header\n         self.text = text\n         self.omit_border = omit_border\n@@ -91,7 +89,7 @@ def title(self):\n         "manage portlets" screen. Here, we use the title that the user gave or\n         static string if title not defined.\n         """\n-        return self.header or _(\'portlet_static\', default="Static Portlet")\n+        return self.header or _("portlet_static", default="Static Portlet")\n \n \n class Renderer(base.Renderer):\n@@ -102,11 +100,10 @@ class Renderer(base.Renderer):\n     of this class. Other methods can be added and referenced in the template.\n     """\n \n-    render = ViewPageTemplateFile(\'static.pt\')\n+    render = ViewPageTemplateFile("static.pt")\n \n     def css_class(self):\n-        """Generate a CSS class from the portlet header\n-        """\n+        """Generate a CSS class from the portlet header"""\n         header = self.data.header\n         if header:\n             normalizer = getUtility(IIDNormalizer)\n@@ -119,7 +116,7 @@ def has_link(self):\n     def has_footer(self):\n         return bool(self.data.footer)\n \n-    def transformed(self, mt=\'text/x-html-safe\'):\n+    def transformed(self, mt="text/x-html-safe"):\n         """Use the safe_html transform to protect text output. This also\n         ensures that resolve UID links are transformed into real links.\n         """\n@@ -140,16 +137,21 @@ def transformed(self, mt=\'text/x-html-safe\'):\n                 "Assuming utf-8 encoding." % context.absolute_url()\n             )\n \n-        transformer = getToolByName(context, \'portal_transforms\')\n+        transformer = getToolByName(context, "portal_transforms")\n         transformer_context = context\n-        if hasattr(self, \'__portlet_metadata__\'):\n-            if (\'category\' in self.__portlet_metadata__ and\n-                    self.__portlet_metadata__[\'category\'] == \'context\'):\n-                assignment_context_path = self.__portlet_metadata__[\'key\']\n-                assignment_context = context.unrestrictedTraverse(assignment_context_path)\n+        if hasattr(self, "__portlet_metadata__"):\n+            if (\n+                "category" in self.__portlet_metadata__\n+                and self.__portlet_metadata__["category"] == "context"\n+            ):\n+                assignment_context_path = self.__portlet_metadata__["key"]\n+                assignment_context = context.unrestrictedTraverse(\n+                    assignment_context_path\n+                )\n                 transformer_context = assignment_context\n-        data = transformer.convertTo(mt, orig,\n-                                     context=transformer_context, mimetype=\'text/html\')\n+        data = transformer.convertTo(\n+            mt, orig, context=transformer_context, mimetype="text/html"\n+        )\n         result = data.getData()\n         if result:\n             return safe_unicode(result)\n@@ -162,12 +164,13 @@ class AddForm(base.AddForm):\n     This is registered in configure.zcml. The create() method actually\n     constructs the assignment that is being added.\n     """\n+\n     schema = IStaticPortlet\n \n     label = _("title_add_static_portlet", default="Add static text portlet")\n     description = _(\n         "description_static_portlet",\n-        default="A portlet which can display static HTML text."\n+        default="A portlet which can display static HTML text.",\n     )\n \n     def create(self, data):\n@@ -179,13 +182,11 @@ class EditForm(base.EditForm):\n \n     This is registered in configure.zcml.\n     """\n+\n     schema = IStaticPortlet\n \n-    label = _(\n-        "title_edit_static_portlet",\n-        default="Edit static text portlet"\n-    )\n+    label = _("title_edit_static_portlet", default="Edit static text portlet")\n     description = _(\n         "description_static_portlet",\n-        default="A portlet which can display static HTML text."\n+        default="A portlet which can display static HTML text.",\n     )\ndiff --git a/plone/portlet/static/testing.py b/plone/portlet/static/testing.py\nindex 3c9f12b..7710f01 100644\n--- a/plone/portlet/static/testing.py\n+++ b/plone/portlet/static/testing.py\n@@ -5,20 +5,19 @@\n \n \n class PlonePortletStaticLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.portlet.static\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.portlet.static,\n-            context=configurationContext)\n+            "configure.zcml", plone.portlet.static, context=configurationContext\n+        )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.portlet.static:default\')\n+        applyProfile(portal, "plone.portlet.static:default")\n+\n \n PLONEPORTLETSTATIC_FIXTURE = PlonePortletStaticLayer()\n \n PLONEPORTLETSTATIC_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEPORTLETSTATIC_FIXTURE,),\n-    name="PloneAppCollectionLayer:Integration"\n+    bases=(PLONEPORTLETSTATIC_FIXTURE,), name="PloneAppCollectionLayer:Integration"\n )\ndiff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py\nindex 8a50a95..86f4b9b 100644\n--- a/plone/portlet/static/tests/test_portlet_static.py\n+++ b/plone/portlet/static/tests/test_portlet_static.py\n@@ -33,17 +33,16 @@ def normalize(value):\n \n \n class TestPortlet(unittest.TestCase):\n-\n     layer = PLONEPORTLETSTATIC_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        self.assertEqual(portlet.addview, \'plone.portlet.static.Static\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.static.Static")\n+        self.assertEqual(portlet.addview, "plone.portlet.static.Static")\n \n     def testInterfaces(self):\n         portlet = static.Assignment(header="title", text="text")\n@@ -51,17 +50,13 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\'\n-        )\n+        portlet = getUtility(IPortletType, name="plone.portlet.static.Static")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        addview.createAndAdd(\n-            data={\'header\': "test title", \'text\': "test text"}\n-        )\n+        addview.createAndAdd(data={"header": "test title", "text": "test text"})\n \n         self.assertEqual(len(mapping), 1)\n         self.assertTrue(isinstance(list(mapping.values())[0], static.Assignment))\n@@ -70,80 +65,64 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.portal.REQUEST\n \n-        mapping[\'foo\'] = static.Assignment(header="title", text="text")\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = static.Assignment(header="title", text="text")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, static.EditForm))\n \n     def testRenderer(self):\n         context = self.portal\n         request = self.portal.REQUEST\n-        view = self.portal.restrictedTraverse(\'@@plone\')\n+        view = self.portal.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager,\n-            name=\'plone.rightcolumn\',\n-            context=self.portal\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n         )\n         assignment = static.Assignment(header="title", text="text")\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n         self.assertTrue(isinstance(renderer, static.Renderer))\n \n-        self.assertTrue(renderer.available,\n-                        "Renderer should be available by default.")\n+        self.assertTrue(renderer.available, "Renderer should be available by default.")\n \n \n class TestRenderer(unittest.TestCase):\n-\n     layer = PLONEPORTLETSTATIC_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.portal.REQUEST\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n+        view = view or self.portal.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager,\n-            name=\'plone.rightcolumn\',\n-            context=self.portal\n-        )\n-        assignment = assignment or static.Assignment(\n-            header="title",\n-            text="text"\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n         )\n+        assignment = assignment or static.Assignment(header="title", text="text")\n         ren = getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n-        ren.__portlet_metadata__ = {\n-            \'key\': \'/\'.join(self.portal.getPhysicalPath())\n-        }\n+        ren.__portlet_metadata__ = {"key": "/".join(self.portal.getPhysicalPath())}\n         return ren\n \n     def test_render(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                header="title",\n-                text="<b>text</b>"\n-            )\n+            assignment=static.Assignment(header="title", text="<b>text</b>"),\n         )\n         r.update()\n         output = r.render()\n-        self.assertTrue(\'title\' in output)\n-        self.assertTrue(\'<b>text</b>\' in normalize(output))\n+        self.assertTrue("title" in output)\n+        self.assertTrue("<b>text</b>" in normalize(output))\n \n     def test_no_header(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=static.Assignment(text="<b>text</b>")\n+            context=self.portal, assignment=static.Assignment(text="<b>text</b>")\n         )\n         r.update()\n         output = r.render()\n@@ -156,22 +135,18 @@ def test_hide(self):\n     def test_css_class(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                header="Welcome text",\n-                text="<b>text</b>"\n-            )\n+            assignment=static.Assignment(header="Welcome text", text="<b>text</b>"),\n         )\n-        self.assertEqual(\'portlet-static-welcome-text\', r.css_class())\n+        self.assertEqual("portlet-static-welcome-text", r.css_class())\n \n     def test_relative_link(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                text="""<a href="relative/link">link</a>"""\n-            )\n+            assignment=static.Assignment(text="""<a href="relative/link">link</a>"""),\n         )\n         r.__portlet_metadata__ = dict(\n-            category=\'context\', key=\'/\'.join(self.portal.getPhysicalPath()))\n+            category="context", key="/".join(self.portal.getPhysicalPath())\n+        )\n         r.update()\n         output = r.render()\n         self.assertTrue("http://nohost/plone/relative/link" in output)\n@@ -180,6 +155,7 @@ def test_relative_link(self):\n def test_suite():\n     from unittest import makeSuite\n     from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/setup.py b/setup.py\nindex 0d9c817..7c0abd0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,18 +8,13 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n-long_description = (\n-    read(\'README.rst\')\n-    + \'\\n\' +\n-    read(\'CHANGES.rst\')\n-    + \'\\n\'\n-)\n+long_description = read("README.rst") + "\\n" + read("CHANGES.rst") + "\\n"\n \n \n setup(\n-    name=\'plone.portlet.static\',\n+    name="plone.portlet.static",\n     version=version,\n     description="An editable static HTML portlet for Plone.",\n     long_description=long_description,\n@@ -38,32 +33,32 @@ def read(*rnames):\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone portlet static\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.portlet.static\',\n-    license=\'GPL version 2\',\n+    keywords="plone portlet static",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.portlet.static",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=["plone", \'plone.portlet\'],\n+    namespace_packages=["plone", "plone.portlet"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n+        "setuptools",\n         "plone.portlets",\n         "plone.app.portlets",\n         "plone.app.textfield",\n         "plone.i18n",\n-        \'zope.component\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n-        \'Zope\',\n+        "zope.component",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.schema",\n+        "Zope",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:14:22+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/7435b4767dd4a81b045f3e41e339bee209926545

chore: zpretty

Files changed:
M plone/portlet/static/configure.zcml
M plone/portlet/static/profiles/default/metadata.xml
M plone/portlet/static/profiles/default/portlets.xml
M plone/portlet/static/static.pt

b'diff --git a/plone/portlet/static/configure.zcml b/plone/portlet/static/configure.zcml\nindex c610cb4..aeda5e3 100644\n--- a/plone/portlet/static/configure.zcml\n+++ b/plone/portlet/static/configure.zcml\n@@ -3,33 +3,34 @@\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <five:registerPackage package="." />\n+  <five:registerPackage package="." />\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="Static text portlet"\n-        directory="profiles/default"\n-        description="A simple portlet that displays static HTML"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="Static text portlet"\n+      description="A simple portlet that displays static HTML"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n \n-    <permission\n-        id="plone.portlet.static.AddStaticPortlet"\n-        title="plone.portlet.static: Add static portlet"\n-        />\n+  <permission\n+      id="plone.portlet.static.AddStaticPortlet"\n+      title="plone.portlet.static: Add static portlet"\n+      />\n \n-     <!-- Register the portlet -->\n-    <plone:portlet\n-        name="plone.portlet.static.Static"\n-        interface=".static.IStaticPortlet"\n-        assignment=".static.Assignment"\n-        view_permission="zope2.View"\n-        edit_permission="plone.portlet.static.AddStaticPortlet"\n-        renderer=".static.Renderer"\n-        addview=".static.AddForm"\n-        editview=".static.EditForm"\n-        />\n+  <!-- Register the portlet -->\n+  <plone:portlet\n+      name="plone.portlet.static.Static"\n+      interface=".static.IStaticPortlet"\n+      assignment=".static.Assignment"\n+      renderer=".static.Renderer"\n+      addview=".static.AddForm"\n+      editview=".static.EditForm"\n+      view_permission="zope2.View"\n+      edit_permission="plone.portlet.static.AddStaticPortlet"\n+      />\n \n </configure>\ndiff --git a/plone/portlet/static/profiles/default/metadata.xml b/plone/portlet/static/profiles/default/metadata.xml\nindex cf4492a..08b37b6 100644\n--- a/plone/portlet/static/profiles/default/metadata.xml\n+++ b/plone/portlet/static/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\ndiff --git a/plone/portlet/static/profiles/default/portlets.xml b/plone/portlet/static/profiles/default/portlets.xml\nindex 8ace421..ab4527d 100644\n--- a/plone/portlet/static/profiles/default/portlets.xml\n+++ b/plone/portlet/static/profiles/default/portlets.xml\n@@ -1,16 +1,14 @@\n-<?xml version="1.0"?>\n-<portlets\n-  xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-  i18n:domain="plone">\n+<?xml version="1.0" encoding="utf-8"?>\n+<portlets xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+          i18n:domain="plone"\n+>\n \n   <!-- Portlet type registrations -->\n \n-  <portlet\n-    addview="plone.portlet.static.Static"\n-    title="Static text portlet"\n-    description="A portlet which can display static HTML text."\n-    i18n:attributes="title;\n-                    description"\n-    />\n+  <portlet addview="plone.portlet.static.Static"\n+           description="A portlet which can display static HTML text."\n+           title="Static text portlet"\n+           i18n:attributes="title; description"\n+  />\n \n </portlets>\ndiff --git a/plone/portlet/static/static.pt b/plone/portlet/static/static.pt\nindex 1c15a02..a06be5f 100644\n--- a/plone/portlet/static/static.pt\n+++ b/plone/portlet/static/static.pt\n@@ -1,39 +1,57 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div tal:condition="view/data/omit_border"\n-      tal:attributes="class string:portletStaticText ${view/css_class}"\n-      tal:content="structure view/transformed" />\n+       tal:content="structure view/transformed"\n+       tal:attributes="\n+         class string:portletStaticText ${view/css_class};\n+       "\n+  ></div>\n \n   <div tal:condition="not:view/data/omit_border"\n-      tal:attributes="class string:card portlet portletStaticText ${view/css_class}"\n-      i18n:domain="plone">\n+       tal:attributes="\n+         class string:card portlet portletStaticText ${view/css_class};\n+       "\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header"\n-        tal:define="header view/data/header"\n-        tal:attributes="class python:header and \'card-header\' or \'card-header titleless\'">\n+         tal:define="\n+           header view/data/header;\n+         "\n+         tal:attributes="\n+           class python:header and \'card-header\' or \'card-header titleless\';\n+         "\n+    >\n       <a class="tile"\n-          tal:condition="header"\n-          tal:omit-tag="not:view/has_link"\n-          tal:attributes="href view/data/more_url"\n-          tal:content="header"\n-          />\n+         tal:condition="header"\n+         tal:content="header"\n+         tal:omit-tag="not:view/has_link"\n+         tal:attributes="\n+           href view/data/more_url;\n+         "\n+      ></a>\n     </div>\n \n     <div class="card-body">\n-      <div tal:content="structure view/transformed" />\n+      <div tal:content="structure view/transformed"></div>\n     </div>\n \n-    <div class="card-footer" tal:condition="view/has_footer">\n+    <div class="card-footer"\n+         tal:condition="view/has_footer"\n+    >\n       <a class="tile"\n-          tal:omit-tag="not:view/has_link"\n-          tal:attributes="href view/data/more_url"\n-          tal:content="view/data/footer"\n-          />\n+         tal:content="view/data/footer"\n+         tal:omit-tag="not:view/has_link"\n+         tal:attributes="\n+           href view/data/more_url;\n+         "\n+      ></a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:15:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/8658cdfc45c5545f85a333401684236d71b31648

feat: codespell

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex bb60340..02e65a6 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,7 +2,7 @@ Introduction\n ============\n \n A Plone Portlet providing a rich-text field for more or less static text.\n-It is availbale and will be displayed where portlets can be placed.\n+It is available and will be displayed where portlets can be placed.\n \n It is part of the Plone core package.\n \n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-12T23:48:47+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/8fcec87a20723d25e32bf3b320355c3bd891b400

feat: remove CMFPlone dependency

Files changed:
M plone/portlet/static/static.py

b'diff --git a/plone/portlet/static/static.py b/plone/portlet/static/static.py\nindex d2078c6..2a3349a 100644\n--- a/plone/portlet/static/static.py\n+++ b/plone/portlet/static/static.py\n@@ -4,11 +4,11 @@\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.widget import RichTextFieldWidget\n from plone.autoform import directives\n+from plone.base.utils import safe_text\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.portlet.static import PloneMessageFactory as _\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n from zope.component import getUtility\n@@ -131,7 +131,7 @@ def transformed(self, mt="text/x-html-safe"):\n             # utf-8 text. There were bugs in earlier versions of this portlet\n             # which stored text directly as sent by the browser, which could\n             # be any encoding in the world.\n-            orig = safe_unicode(orig)\n+            orig = safe_text(orig)\n             logger.warn(\n                 "Static portlet at %s has not stored text/unicode. "\n                 "Assuming utf-8 encoding." % context.absolute_url()\n@@ -154,7 +154,7 @@ def transformed(self, mt="text/x-html-safe"):\n         )\n         result = data.getData()\n         if result:\n-            return safe_unicode(result)\n+            return safe_text(result)\n         return None\n \n \n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-13T00:12:34+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/e3f240a2bd39caf99e7d843f0abde1068bfd404e

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 7c0abd0..3c5b508 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -49,15 +49,14 @@ def read(*rnames):\n         ]\n     ),\n     install_requires=[\n-        "setuptools",\n+        "plone.base",\n         "plone.portlets",\n         "plone.app.portlets",\n         "plone.app.textfield",\n+        "plone.app.z3cform",\n+        "plone.autoform",\n         "plone.i18n",\n-        "zope.component",\n-        "zope.i18nmessageid",\n-        "zope.interface",\n-        "zope.schema",\n+        "Products.GenericSetup",\n         "Zope",\n     ],\n     entry_points="""\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2023-03-13T08:55:05+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlet.static/commit/f8159a4ba55cdf8a64697dba52c93a7488af7790

Merge pull request #25 from plone/config-with-default-template-59eddff3

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a533099d.internal
A tox.ini
M README.rst
M plone/__init__.py
M plone/portlet/__init__.py
M plone/portlet/static/__init__.py
M plone/portlet/static/configure.zcml
M plone/portlet/static/profiles/default/metadata.xml
M plone/portlet/static/profiles/default/portlets.xml
M plone/portlet/static/static.pt
M plone/portlet/static/static.py
M plone/portlet/static/testing.py
M plone/portlet/static/tests/test_portlet_static.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..0df002c\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a533099d"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/README.rst b/README.rst\nindex bb60340..02e65a6 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,7 +2,7 @@ Introduction\n ============\n \n A Plone Portlet providing a rich-text field for more or less static text.\n-It is availbale and will be displayed where portlets can be placed.\n+It is available and will be displayed where portlets can be placed.\n \n It is part of the Plone core package.\n \ndiff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlet/__init__.py b/plone/portlet/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/portlet/__init__.py\n+++ b/plone/portlet/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlet/static/__init__.py b/plone/portlet/static/__init__.py\nindex 45a4f72..fe51975 100644\n--- a/plone/portlet/static/__init__.py\n+++ b/plone/portlet/static/__init__.py\n@@ -2,9 +2,13 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\n \n addPermission(\n-    \'plone.portlet.static: Add static portlet\',\n-    (\'Manager\', \'Site Administrator\', \'Owner\', )\n+    "plone.portlet.static: Add static portlet",\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\ndiff --git a/plone/portlet/static/configure.zcml b/plone/portlet/static/configure.zcml\nindex c610cb4..aeda5e3 100644\n--- a/plone/portlet/static/configure.zcml\n+++ b/plone/portlet/static/configure.zcml\n@@ -3,33 +3,34 @@\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:plone="http://namespaces.plone.org/plone"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <five:registerPackage package="." />\n+  <five:registerPackage package="." />\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="Static text portlet"\n-        directory="profiles/default"\n-        description="A simple portlet that displays static HTML"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="Static text portlet"\n+      description="A simple portlet that displays static HTML"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n \n-    <permission\n-        id="plone.portlet.static.AddStaticPortlet"\n-        title="plone.portlet.static: Add static portlet"\n-        />\n+  <permission\n+      id="plone.portlet.static.AddStaticPortlet"\n+      title="plone.portlet.static: Add static portlet"\n+      />\n \n-     <!-- Register the portlet -->\n-    <plone:portlet\n-        name="plone.portlet.static.Static"\n-        interface=".static.IStaticPortlet"\n-        assignment=".static.Assignment"\n-        view_permission="zope2.View"\n-        edit_permission="plone.portlet.static.AddStaticPortlet"\n-        renderer=".static.Renderer"\n-        addview=".static.AddForm"\n-        editview=".static.EditForm"\n-        />\n+  <!-- Register the portlet -->\n+  <plone:portlet\n+      name="plone.portlet.static.Static"\n+      interface=".static.IStaticPortlet"\n+      assignment=".static.Assignment"\n+      renderer=".static.Renderer"\n+      addview=".static.AddForm"\n+      editview=".static.EditForm"\n+      view_permission="zope2.View"\n+      edit_permission="plone.portlet.static.AddStaticPortlet"\n+      />\n \n </configure>\ndiff --git a/plone/portlet/static/profiles/default/metadata.xml b/plone/portlet/static/profiles/default/metadata.xml\nindex cf4492a..08b37b6 100644\n--- a/plone/portlet/static/profiles/default/metadata.xml\n+++ b/plone/portlet/static/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\ndiff --git a/plone/portlet/static/profiles/default/portlets.xml b/plone/portlet/static/profiles/default/portlets.xml\nindex 8ace421..ab4527d 100644\n--- a/plone/portlet/static/profiles/default/portlets.xml\n+++ b/plone/portlet/static/profiles/default/portlets.xml\n@@ -1,16 +1,14 @@\n-<?xml version="1.0"?>\n-<portlets\n-  xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-  i18n:domain="plone">\n+<?xml version="1.0" encoding="utf-8"?>\n+<portlets xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+          i18n:domain="plone"\n+>\n \n   <!-- Portlet type registrations -->\n \n-  <portlet\n-    addview="plone.portlet.static.Static"\n-    title="Static text portlet"\n-    description="A portlet which can display static HTML text."\n-    i18n:attributes="title;\n-                    description"\n-    />\n+  <portlet addview="plone.portlet.static.Static"\n+           description="A portlet which can display static HTML text."\n+           title="Static text portlet"\n+           i18n:attributes="title; description"\n+  />\n \n </portlets>\ndiff --git a/plone/portlet/static/static.pt b/plone/portlet/static/static.pt\nindex 1c15a02..a06be5f 100644\n--- a/plone/portlet/static/static.pt\n+++ b/plone/portlet/static/static.pt\n@@ -1,39 +1,57 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag=""\n+>\n \n   <div tal:condition="view/data/omit_border"\n-      tal:attributes="class string:portletStaticText ${view/css_class}"\n-      tal:content="structure view/transformed" />\n+       tal:content="structure view/transformed"\n+       tal:attributes="\n+         class string:portletStaticText ${view/css_class};\n+       "\n+  ></div>\n \n   <div tal:condition="not:view/data/omit_border"\n-      tal:attributes="class string:card portlet portletStaticText ${view/css_class}"\n-      i18n:domain="plone">\n+       tal:attributes="\n+         class string:card portlet portletStaticText ${view/css_class};\n+       "\n+       i18n:domain="plone"\n+  >\n \n     <div class="card-header"\n-        tal:define="header view/data/header"\n-        tal:attributes="class python:header and \'card-header\' or \'card-header titleless\'">\n+         tal:define="\n+           header view/data/header;\n+         "\n+         tal:attributes="\n+           class python:header and \'card-header\' or \'card-header titleless\';\n+         "\n+    >\n       <a class="tile"\n-          tal:condition="header"\n-          tal:omit-tag="not:view/has_link"\n-          tal:attributes="href view/data/more_url"\n-          tal:content="header"\n-          />\n+         tal:condition="header"\n+         tal:content="header"\n+         tal:omit-tag="not:view/has_link"\n+         tal:attributes="\n+           href view/data/more_url;\n+         "\n+      ></a>\n     </div>\n \n     <div class="card-body">\n-      <div tal:content="structure view/transformed" />\n+      <div tal:content="structure view/transformed"></div>\n     </div>\n \n-    <div class="card-footer" tal:condition="view/has_footer">\n+    <div class="card-footer"\n+         tal:condition="view/has_footer"\n+    >\n       <a class="tile"\n-          tal:omit-tag="not:view/has_link"\n-          tal:attributes="href view/data/more_url"\n-          tal:content="view/data/footer"\n-          />\n+         tal:content="view/data/footer"\n+         tal:omit-tag="not:view/has_link"\n+         tal:attributes="\n+           href view/data/more_url;\n+         "\n+      ></a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/portlet/static/static.py b/plone/portlet/static/static.py\nindex 1911442..2a3349a 100644\n--- a/plone/portlet/static/static.py\n+++ b/plone/portlet/static/static.py\n@@ -4,11 +4,11 @@\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.widget import RichTextFieldWidget\n from plone.autoform import directives\n+from plone.base.utils import safe_text\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.portlet.static import PloneMessageFactory as _\n from plone.portlets.interfaces import IPortletDataProvider\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope import schema\n from zope.component import getUtility\n@@ -18,7 +18,7 @@\n import re\n \n \n-logger = logging.getLogger(\'plone.portlet.static\')\n+logger = logging.getLogger("plone.portlet.static")\n \n \n class IStaticPortlet(IPortletDataProvider):\n@@ -33,13 +33,11 @@ class IStaticPortlet(IPortletDataProvider):\n         title=_("Portlet header"),\n         description=_("Title of the rendered portlet"),\n         constraint=re.compile(r"[^\\s]").match,\n-        required=False)\n+        required=False,\n+    )\n \n     directives.widget(text=RichTextFieldWidget)\n-    text = RichText(\n-        title=_("Text"),\n-        description=_("The text to render"),\n-        required=True)\n+    text = RichText(title=_("Text"), description=_("The text to render"), required=True)\n \n     omit_border = schema.Bool(\n         title=_("Omit portlet border"),\n@@ -48,19 +46,20 @@ class IStaticPortlet(IPortletDataProvider):\n             "without the standard header, border or footer."\n         ),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n     footer = schema.TextLine(\n         title=_("Portlet footer"),\n         description=_("Text to be shown in the footer"),\n-        required=False)\n+        required=False,\n+    )\n \n     more_url = schema.ASCIILine(\n         title=_("Details link"),\n-        description=_(\n-            "If given, the header and footer will link to this URL."\n-        ),\n-        required=False)\n+        description=_("If given, the header and footer will link to this URL."),\n+        required=False,\n+    )\n \n \n @implementer(IStaticPortlet)\n@@ -75,10 +74,9 @@ class Assignment(base.Assignment):\n     text = ""\n     omit_border = False\n     footer = ""\n-    more_url = \'\'\n+    more_url = ""\n \n-    def __init__(self, header="", text="", omit_border=False, footer="",\n-                 more_url=\'\'):\n+    def __init__(self, header="", text="", omit_border=False, footer="", more_url=""):\n         self.header = header\n         self.text = text\n         self.omit_border = omit_border\n@@ -91,7 +89,7 @@ def title(self):\n         "manage portlets" screen. Here, we use the title that the user gave or\n         static string if title not defined.\n         """\n-        return self.header or _(\'portlet_static\', default="Static Portlet")\n+        return self.header or _("portlet_static", default="Static Portlet")\n \n \n class Renderer(base.Renderer):\n@@ -102,11 +100,10 @@ class Renderer(base.Renderer):\n     of this class. Other methods can be added and referenced in the template.\n     """\n \n-    render = ViewPageTemplateFile(\'static.pt\')\n+    render = ViewPageTemplateFile("static.pt")\n \n     def css_class(self):\n-        """Generate a CSS class from the portlet header\n-        """\n+        """Generate a CSS class from the portlet header"""\n         header = self.data.header\n         if header:\n             normalizer = getUtility(IIDNormalizer)\n@@ -119,7 +116,7 @@ def has_link(self):\n     def has_footer(self):\n         return bool(self.data.footer)\n \n-    def transformed(self, mt=\'text/x-html-safe\'):\n+    def transformed(self, mt="text/x-html-safe"):\n         """Use the safe_html transform to protect text output. This also\n         ensures that resolve UID links are transformed into real links.\n         """\n@@ -134,25 +131,30 @@ def transformed(self, mt=\'text/x-html-safe\'):\n             # utf-8 text. There were bugs in earlier versions of this portlet\n             # which stored text directly as sent by the browser, which could\n             # be any encoding in the world.\n-            orig = safe_unicode(orig)\n+            orig = safe_text(orig)\n             logger.warn(\n                 "Static portlet at %s has not stored text/unicode. "\n                 "Assuming utf-8 encoding." % context.absolute_url()\n             )\n \n-        transformer = getToolByName(context, \'portal_transforms\')\n+        transformer = getToolByName(context, "portal_transforms")\n         transformer_context = context\n-        if hasattr(self, \'__portlet_metadata__\'):\n-            if (\'category\' in self.__portlet_metadata__ and\n-                    self.__portlet_metadata__[\'category\'] == \'context\'):\n-                assignment_context_path = self.__portlet_metadata__[\'key\']\n-                assignment_context = context.unrestrictedTraverse(assignment_context_path)\n+        if hasattr(self, "__portlet_metadata__"):\n+            if (\n+                "category" in self.__portlet_metadata__\n+                and self.__portlet_metadata__["category"] == "context"\n+            ):\n+                assignment_context_path = self.__portlet_metadata__["key"]\n+                assignment_context = context.unrestrictedTraverse(\n+                    assignment_context_path\n+                )\n                 transformer_context = assignment_context\n-        data = transformer.convertTo(mt, orig,\n-                                     context=transformer_context, mimetype=\'text/html\')\n+        data = transformer.convertTo(\n+            mt, orig, context=transformer_context, mimetype="text/html"\n+        )\n         result = data.getData()\n         if result:\n-            return safe_unicode(result)\n+            return safe_text(result)\n         return None\n \n \n@@ -162,12 +164,13 @@ class AddForm(base.AddForm):\n     This is registered in configure.zcml. The create() method actually\n     constructs the assignment that is being added.\n     """\n+\n     schema = IStaticPortlet\n \n     label = _("title_add_static_portlet", default="Add static text portlet")\n     description = _(\n         "description_static_portlet",\n-        default="A portlet which can display static HTML text."\n+        default="A portlet which can display static HTML text.",\n     )\n \n     def create(self, data):\n@@ -179,13 +182,11 @@ class EditForm(base.EditForm):\n \n     This is registered in configure.zcml.\n     """\n+\n     schema = IStaticPortlet\n \n-    label = _(\n-        "title_edit_static_portlet",\n-        default="Edit static text portlet"\n-    )\n+    label = _("title_edit_static_portlet", default="Edit static text portlet")\n     description = _(\n         "description_static_portlet",\n-        default="A portlet which can display static HTML text."\n+        default="A portlet which can display static HTML text.",\n     )\ndiff --git a/plone/portlet/static/testing.py b/plone/portlet/static/testing.py\nindex 3356081..7710f01 100644\n--- a/plone/portlet/static/testing.py\n+++ b/plone/portlet/static/testing.py\n@@ -1,24 +1,23 @@\n-from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import applyProfile\n+from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import IntegrationTesting\n from zope.configuration import xmlconfig\n \n \n class PlonePortletStaticLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.portlet.static\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.portlet.static,\n-            context=configurationContext)\n+            "configure.zcml", plone.portlet.static, context=configurationContext\n+        )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.portlet.static:default\')\n+        applyProfile(portal, "plone.portlet.static:default")\n+\n \n PLONEPORTLETSTATIC_FIXTURE = PlonePortletStaticLayer()\n \n PLONEPORTLETSTATIC_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEPORTLETSTATIC_FIXTURE,),\n-    name="PloneAppCollectionLayer:Integration"\n+    bases=(PLONEPORTLETSTATIC_FIXTURE,), name="PloneAppCollectionLayer:Integration"\n )\ndiff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py\nindex 61e0daa..86f4b9b 100644\n--- a/plone/portlet/static/tests/test_portlet_static.py\n+++ b/plone/portlet/static/tests/test_portlet_static.py\n@@ -1,8 +1,8 @@\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.portlet.static import static\n from plone.portlet.static.testing import PLONEPORTLETSTATIC_INTEGRATION_TESTING\n from plone.portlets.interfaces import IPortletAssignment\n@@ -10,7 +10,9 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n-from zope.component import getUtility, getMultiAdapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n import unittest\n \n \n@@ -31,17 +33,16 @@ def normalize(value):\n \n \n class TestPortlet(unittest.TestCase):\n-\n     layer = PLONEPORTLETSTATIC_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        self.assertEqual(portlet.addview, \'plone.portlet.static.Static\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.static.Static")\n+        self.assertEqual(portlet.addview, "plone.portlet.static.Static")\n \n     def testInterfaces(self):\n         portlet = static.Assignment(header="title", text="text")\n@@ -49,17 +50,13 @@ def testInterfaces(self):\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\'\n-        )\n+        portlet = getUtility(IPortletType, name="plone.portlet.static.Static")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n \n-        addview.createAndAdd(\n-            data={\'header\': "test title", \'text\': "test text"}\n-        )\n+        addview.createAndAdd(data={"header": "test title", "text": "test text"})\n \n         self.assertEqual(len(mapping), 1)\n         self.assertTrue(isinstance(list(mapping.values())[0], static.Assignment))\n@@ -68,80 +65,64 @@ def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.portal.REQUEST\n \n-        mapping[\'foo\'] = static.Assignment(header="title", text="text")\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = static.Assignment(header="title", text="text")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, static.EditForm))\n \n     def testRenderer(self):\n         context = self.portal\n         request = self.portal.REQUEST\n-        view = self.portal.restrictedTraverse(\'@@plone\')\n+        view = self.portal.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager,\n-            name=\'plone.rightcolumn\',\n-            context=self.portal\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n         )\n         assignment = static.Assignment(header="title", text="text")\n \n         renderer = getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n         self.assertTrue(isinstance(renderer, static.Renderer))\n \n-        self.assertTrue(renderer.available,\n-                        "Renderer should be available by default.")\n+        self.assertTrue(renderer.available, "Renderer should be available by default.")\n \n \n class TestRenderer(unittest.TestCase):\n-\n     layer = PLONEPORTLETSTATIC_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.portal\n         request = request or self.portal.REQUEST\n-        view = view or self.portal.restrictedTraverse(\'@@plone\')\n+        view = view or self.portal.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager,\n-            name=\'plone.rightcolumn\',\n-            context=self.portal\n-        )\n-        assignment = assignment or static.Assignment(\n-            header="title",\n-            text="text"\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n         )\n+        assignment = assignment or static.Assignment(header="title", text="text")\n         ren = getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n-        ren.__portlet_metadata__ = {\n-            \'key\': \'/\'.join(self.portal.getPhysicalPath())\n-        }\n+        ren.__portlet_metadata__ = {"key": "/".join(self.portal.getPhysicalPath())}\n         return ren\n \n     def test_render(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                header="title",\n-                text="<b>text</b>"\n-            )\n+            assignment=static.Assignment(header="title", text="<b>text</b>"),\n         )\n         r.update()\n         output = r.render()\n-        self.assertTrue(\'title\' in output)\n-        self.assertTrue(\'<b>text</b>\' in normalize(output))\n+        self.assertTrue("title" in output)\n+        self.assertTrue("<b>text</b>" in normalize(output))\n \n     def test_no_header(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=static.Assignment(text="<b>text</b>")\n+            context=self.portal, assignment=static.Assignment(text="<b>text</b>")\n         )\n         r.update()\n         output = r.render()\n@@ -154,29 +135,27 @@ def test_hide(self):\n     def test_css_class(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                header="Welcome text",\n-                text="<b>text</b>"\n-            )\n+            assignment=static.Assignment(header="Welcome text", text="<b>text</b>"),\n         )\n-        self.assertEqual(\'portlet-static-welcome-text\', r.css_class())\n+        self.assertEqual("portlet-static-welcome-text", r.css_class())\n \n     def test_relative_link(self):\n         r = self.renderer(\n             context=self.portal,\n-            assignment=static.Assignment(\n-                text="""<a href="relative/link">link</a>"""\n-            )\n+            assignment=static.Assignment(text="""<a href="relative/link">link</a>"""),\n         )\n         r.__portlet_metadata__ = dict(\n-            category=\'context\', key=\'/\'.join(self.portal.getPhysicalPath()))\n+            category="context", key="/".join(self.portal.getPhysicalPath())\n+        )\n         r.update()\n         output = r.render()\n         self.assertTrue("http://nohost/plone/relative/link" in output)\n \n \n def test_suite():\n-    from unittest import TestSuite, makeSuite\n+    from unittest import makeSuite\n+    from unittest import TestSuite\n+\n     suite = TestSuite()\n     suite.addTest(makeSuite(TestPortlet))\n     suite.addTest(makeSuite(TestRenderer))\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9d0c563 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 0d9c817..3c5b508 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,18 +8,13 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n-long_description = (\n-    read(\'README.rst\')\n-    + \'\\n\' +\n-    read(\'CHANGES.rst\')\n-    + \'\\n\'\n-)\n+long_description = read("README.rst") + "\\n" + read("CHANGES.rst") + "\\n"\n \n \n setup(\n-    name=\'plone.portlet.static\',\n+    name="plone.portlet.static",\n     version=version,\n     description="An editable static HTML portlet for Plone.",\n     long_description=long_description,\n@@ -38,32 +33,31 @@ def read(*rnames):\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone portlet static\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.portlet.static\',\n-    license=\'GPL version 2\',\n+    keywords="plone portlet static",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.portlet.static",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=["plone", \'plone.portlet\'],\n+    namespace_packages=["plone", "plone.portlet"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            \'plone.app.testing\',\n+            "plone.app.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n+        "plone.base",\n         "plone.portlets",\n         "plone.app.portlets",\n         "plone.app.textfield",\n+        "plone.app.z3cform",\n+        "plone.autoform",\n         "plone.i18n",\n-        \'zope.component\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n-        \'Zope\',\n+        "Products.GenericSetup",\n+        "Zope",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..601eacb\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.portlet.static\n+extras =\n+    test\n'

