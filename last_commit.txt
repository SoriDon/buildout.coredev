Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/bbfbb4ab5a29962ad42220d3f39ccd977a9d76f1

rewrite Date(time)Widget to use browser native datepicker

Files changed:
A news/134.feature
M plone/app/z3cform/converters.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/widget.zcml

b'diff --git a/news/134.feature b/news/134.feature\nnew file mode 100644\nindex 0000000..e3caab8\n--- /dev/null\n+++ b/news/134.feature\n@@ -0,0 +1,3 @@\n+Use browser native date and datetime-local input\n+together with patternslib date-picker\n+[petschki]\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex fae8cb7..ae1fb5d 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -81,7 +81,7 @@ def toWidgetValue(self, value):\n         """\n         if value is self.field.missing_value:\n             return u\'\'\n-        return (\'{value.year:}-{value.month:02}-{value.day:02} \'\n+        return (\'{value.year:}-{value.month:02}-{value.day:02}T\'\n                 \'{value.hour:02}:{value.minute:02}\').format(value=value)\n \n     def toFieldValue(self, value):\n@@ -95,7 +95,7 @@ def toFieldValue(self, value):\n         """\n         if not value:\n             return self.field.missing_value\n-        tmp = value.split(\' \')\n+        tmp = value.split(\'T\')\n         if not tmp[0]:\n             return self.field.missing_value\n         value = tmp[0].split(\'-\')\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 35f97e1..604c279 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -197,34 +197,15 @@ def test_widget(self):\n         current_year = datetime.today().year\n         self.assertEqual(\n             {\n-                \'pattern\': \'pickadate\',\n-                \'value\': u\'\',\n                 \'name\': None,\n-                \'pattern_options\': {\n-                    \'date\': {\n-                        \'firstDay\': 0,\n-                        \'min\': [current_year - 100, 1, 1],\n-                        \'max\': [current_year + 20, 1, 1],\n-                        \'format\': \'mmmm d, yyyy\',\n-                        \'monthsFull\': [u\'January\', u\'February\', u\'March\',\n-                                       u\'April\', u\'May\', u\'June\', u\'July\',\n-                                       u\'August\', u\'September\', u\'October\',\n-                                       u\'November\', u\'December\'],\n-                        \'weekdaysShort\': [u\'Sun\', u\'Mon\', u\'Tue\', u\'Wed\',\n-                                          u\'Thu\', u\'Fri\', u\'Sat\'],\n-                        \'weekdaysFull\': [u\'Sunday\', u\'Monday\', u\'Tuesday\',\n-                                         u\'Wednesday\', u\'Thursday\', u\'Friday\',\n-                                         u\'Saturday\'],\n-                        \'selectYears\': 200,\n-                        \'placeholder\': u\'Enter date...\',\n-                        \'monthsShort\': [u\'Jan\', u\'Feb\', u\'Mar\', u\'Apr\', u\'May\',\n-                                        u\'Jun\', u\'Jul\', u\'Aug\', u\'Sep\', u\'Oct\',\n-                                        u\'Nov\', u\'Dec\'],\n-                    },\n-                    \'time\': False,\n-                    \'today\': u\'Today\',\n-                    \'clear\': u\'Clear\',\n-                },\n+                \'pattern\': \'date-picker\',\n+                \'pattern_options\': {\'behavior\': \'native\',\n+                                    \'clear\': \'Clear\',\n+                                    \'date\': {\'firstDay\': 0},\n+                                    \'first-day\': 0,\n+                                    \'today\': \'Today\',\n+                                    \'week-numbers\': \'show\'},\n+                \'value\': \'\',\n             },\n             self.widget._base_args(),\n         )\n@@ -300,38 +281,16 @@ def test_widget(self):\n         current_year = datetime.today().year\n         self.assertEqual(\n             {\n-                \'pattern\': \'pickadate\',\n-                \'value\': u\'\',\n                 \'name\': None,\n-                \'pattern_options\': {\n-                    \'date\': {\n-                        \'firstDay\': 0,\n-                        \'min\': [current_year - 100, 1, 1],\n-                        \'max\': [current_year + 20, 1, 1],\n-                        \'format\': \'mmmm d, yyyy\',\n-                        \'monthsFull\': [u\'January\', u\'February\', u\'March\',\n-                                       u\'April\', u\'May\', u\'June\', u\'July\',\n-                                       u\'August\', u\'September\', u\'October\',\n-                                       u\'November\', u\'December\'],\n-                        \'weekdaysShort\': [u\'Sun\', u\'Mon\', u\'Tue\', u\'Wed\',\n-                                          u\'Thu\', u\'Fri\', u\'Sat\'],\n-                        \'weekdaysFull\': [u\'Sunday\', u\'Monday\', u\'Tuesday\',\n-                                         u\'Wednesday\', u\'Thursday\', u\'Friday\',\n-                                         u\'Saturday\'],\n-                        \'selectYears\': 200,\n-                        \'placeholder\': u\'Enter date...\',\n-                        \'monthsShort\': [u\'Jan\', u\'Feb\', u\'Mar\', u\'Apr\', u\'May\',\n-                                        u\'Jun\', u\'Jul\', u\'Aug\', u\'Sep\', u\'Oct\',\n-                                        u\'Nov\', u\'Dec\'],\n-                    },\n-                    \'time\': {\n-                        \'placeholder\': u\'Enter time...\',\n-                        \'format\': \'h:i a\',\n-                        \'interval\': 15,\n-                    },\n-                    \'today\': u\'Today\',\n-                    \'clear\': u\'Clear\',\n-                },\n+                \'pattern\': \'datetime-picker\',\n+                \'pattern_options\': {\'behavior\': \'native\',\n+                                    \'clear\': \'Clear\',\n+                                    \'date\': {\'firstDay\': 0},\n+                                    \'first-day\': 0,\n+                                    \'time\': {\'interval\': 15},\n+                                    \'today\': \'Today\',\n+                                    \'week-numbers\': \'show\'},\n+                \'value\': \'\',\n             },\n             self.widget._base_args(),\n         )\n@@ -353,12 +312,12 @@ def test_data_converter(self):\n         )\n \n         self.assertEqual(\n-            converter.toFieldValue(\'2000-10-30 15:40\'),\n+            converter.toFieldValue(\'2000-10-30T15:40\'),\n             datetime(2000, 10, 30, 15, 40),\n         )\n \n         self.assertEqual(\n-            converter.toFieldValue(\'21-10-30 15:40\'),\n+            converter.toFieldValue(\'21-10-30T15:40\'),\n             datetime(21, 10, 30, 15, 40),\n         )\n \n@@ -369,12 +328,12 @@ def test_data_converter(self):\n \n         self.assertEqual(\n             converter.toWidgetValue(datetime(2000, 10, 30, 15, 40)),\n-            \'2000-10-30 15:40\',\n+            \'2000-10-30T15:40\',\n         )\n \n         self.assertEqual(\n             converter.toWidgetValue(datetime(21, 10, 30, 15, 40)),\n-            \'21-10-30 15:40\',\n+            \'21-10-30T15:40\',\n         )\n \n     def test_data_converter__no_timezone(self):\n@@ -390,7 +349,7 @@ def test_data_converter__no_timezone(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             datetime(2013, 11, 13, 10, 20),\n         )\n \n@@ -412,7 +371,7 @@ def test_data_converter__timezone_id(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n         )\n \n@@ -435,7 +394,7 @@ def test_data_converter__timezone_callback(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n         )\n \ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 6a4ed18..271c45e 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -4,7 +4,6 @@\n from lxml import etree\n from OFS.interfaces import ISimpleItem\n from plone.app.contentlisting.interfaces import IContentListing\n-from plone.app.event.base import first_weekday\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n from plone.app.vocabularies.terms import TermWithDescription\n@@ -133,16 +132,22 @@ def is_subform_widget(self):\n \n \n @implementer_only(IDateWidget)\n-class DateWidget(BaseWidget, HTMLInputWidget):\n+class DateWidget(BaseWidget, z3cform_TextWidget):\n     """Date widget for z3c.form."""\n \n-    _base = InputWidget\n+    _base_type = \'date\'\n     _converter = DateWidgetConverter\n     _formater = \'date\'\n \n-    pattern = \'pickadate\'\n+    pattern = \'date-picker\'\n     pattern_options = BaseWidget.pattern_options.copy()\n \n+    def _base(self, **kw):\n+        return InputWidget(\n+            type=self._base_type,\n+            **kw,\n+        )\n+\n     def _base_args(self):\n         """Method which will calculate _base class arguments.\n \n@@ -177,6 +182,7 @@ def render(self):\n         :rtype: string\n         """\n         if self.mode != \'display\':\n+            self.addClass("form-control")\n             return super(DateWidget, self).render()\n \n         if not self.value:\n@@ -200,7 +206,7 @@ def render(self):\n \n \n @implementer_only(IDatetimeWidget)\n-class DatetimeWidget(DateWidget, HTMLInputWidget):\n+class DatetimeWidget(DateWidget):\n     """Datetime widget for z3c.form.\n \n     :param default_timezone: A Olson DB/pytz timezone identifier or a callback\n@@ -208,44 +214,12 @@ class DatetimeWidget(DateWidget, HTMLInputWidget):\n     :type default_timezone: String or callback\n \n     """\n-\n+    _base_type = \'datetime-local\'\n     _converter = DatetimeWidgetConverter\n     _formater = \'dateTime\'\n \n-    pattern_options = DateWidget.pattern_options.copy()\n-\n     default_timezone = None\n \n-    def _base_args(self):\n-        """Method which will calculate _base class arguments.\n-\n-        Returns (as python dictionary):\n-            - `pattern`: pattern name\n-            - `pattern_options`: pattern options\n-            - `name`: field name\n-            - `value`: field value\n-\n-        :returns: Arguments which will be passed to _base\n-        :rtype: dict\n-        """\n-        args = super(DatetimeWidget, self)._base_args()\n-\n-        if args[\'value\'] and len(args[\'value\'].split(\' \')) == 1:\n-            args[\'value\'] += \' 00:00\'\n-\n-        args.setdefault(\'pattern_options\', {})\n-        if \'time\' in args[\'pattern_options\']:\n-            # Time gets set in parent class to false. Remove.\n-            del args[\'pattern_options\'][\'time\']\n-        if \'time\' in self.pattern_options:\n-            # Re-apply custom set time options.\n-            args[\'pattern_options\'][\'time\'] = self.pattern_options[\'time\']\n-        args[\'pattern_options\'] = dict_merge(\n-            get_datetime_options(self.request),\n-            args[\'pattern_options\'])\n-\n-        return args\n-\n \n @implementer_only(ISelectWidget)\n class SelectWidget(BaseWidget, z3cform_SelectWidget):\n@@ -866,13 +840,7 @@ def extract(self, default=NO_VALUE):\n \n @implementer(IFieldWidget)\n def DateFieldWidget(field, request):\n-    widget = FieldWidget(field, DateWidget(request))\n-    widget.pattern_options.setdefault(\'date\', {})\n-    try:\n-        widget.pattern_options[\'date\'][\'firstDay\'] = first_weekday()\n-    except ComponentLookupError:\n-        pass\n-    return widget\n+    return FieldWidget(field, DateWidget(request))\n \n \n @implementer(IFieldWidget)\ndiff --git a/plone/app/z3cform/widget.zcml b/plone/app/z3cform/widget.zcml\nindex c4989e0..52b6e83 100644\n--- a/plone/app/z3cform/widget.zcml\n+++ b/plone/app/z3cform/widget.zcml\n@@ -121,25 +121,22 @@\n     <require permission="zope.Public"\n              interface=".interfaces.IDateWidget" />\n   </class>\n-  <class class="zope.schema._field.Date">\n-    <implements interface=".interfaces.IDateField"/>\n-  </class>\n+\n   <adapter\n       factory=".widget.DateFieldWidget"\n-      for=".interfaces.IDateField\n+      for="zope.schema.interfaces.IDate\n            plone.app.z3cform.interfaces.IPloneFormLayer" />\n \n   <class class=".widget.DatetimeWidget">\n     <require permission="zope.Public"\n              interface=".interfaces.IDatetimeWidget" />\n   </class>\n-  <class class="zope.schema._field.Datetime">\n-    <implements interface=".interfaces.IDatetimeField"/>\n-  </class>\n \n-  <adapter factory=".widget.DatetimeFieldWidget"\n-           for=".interfaces.IDatetimeField\n-                plone.app.z3cform.interfaces.IPloneFormLayer" />\n+  <adapter\n+      factory=".widget.DatetimeFieldWidget"\n+      for="zope.schema.interfaces.IDatetime\n+           plone.app.z3cform.interfaces.IPloneFormLayer"\n+      />\n \n   <adapter factory=".widget.RelatedItemsFieldWidget"\n            for="z3c.relationfield.interfaces.IRelationChoice\n@@ -176,6 +173,14 @@\n       template="templates/text_input.pt"\n       />\n \n+  <z3c:widgetTemplate\n+      mode="input"\n+      field="zope.schema.interfaces.IDatetime"\n+      widget=".interfaces.IDatetimeWidget"\n+      layer=".interfaces.IPloneFormLayer"\n+      template="templates/text_input.pt"\n+      />\n+\n   <z3c:widgetTemplate\n       mode="input"\n       widget="z3c.form.interfaces.ITextAreaWidget"\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/fe96cf23e6f18a5d3ebba0ae0231c91310b97614

update pattern for DatetimeWidget

Files changed:
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 271c45e..bc2d424 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -218,6 +218,7 @@ class DatetimeWidget(DateWidget):\n     _converter = DatetimeWidgetConverter\n     _formater = 'dateTime'\n \n+    pattern = 'datetime-picker'\n     default_timezone = None\n \n \n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/b690c399140e3b40a3821bf1a0f02a1b9e3e9563

Use pat-validation in forms.

Files changed:
A news/134.feature-2
M plone/app/z3cform/templates/macros.pt

b'diff --git a/news/134.feature-2 b/news/134.feature-2\nnew file mode 100644\nindex 0000000..7856a6a\n--- /dev/null\n+++ b/news/134.feature-2\n@@ -0,0 +1,2 @@\n+Use pat-validation in forms.\n+[thet]\ndiff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt\nindex e8582f5..6471188 100644\n--- a/plone/app/z3cform/templates/macros.pt\n+++ b/plone/app/z3cform/templates/macros.pt\n@@ -64,6 +64,7 @@\n                                   unload_protection python:enable_unload_protection and \'pat-formunloadalert\';\n                                   enable_autofocus view/enable_autofocus|python:True;\n                                   autofocus python:enable_autofocus and \'pat-formautofocus\';\n+                                  validation python:\'pat-validation\' if True else \'\';\n                                   has_groups python:bool(groups);\n                                   form_tabbing python:(has_groups and enable_form_tabbing) and \'enableFormTabbing pat-autotoc\' or \'\';\n                                   show_default_label python:has_groups and default_fieldset_label and len(view.widgets);\n@@ -72,7 +73,7 @@\n                                   "\n                       tal:attributes="action view/action|request/getURL;\n                                       enctype view/enctype;\n-                                      class string:rowlike $unload_protection $autofocus $form_tabbing $form_class $form_view_name_raw $form_view_name;\n+                                      class string:rowlike $unload_protection $autofocus $validation $form_tabbing $form_class $form_view_name_raw $form_view_name;\n                                       id view/id;\n                                       name form_name;\n                                       method view/method|string:post">\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/4903a79936333763d290e7318c4032aa1e110090

Use better types for inputs.

Files changed:
A news/134.feature-3
M plone/app/z3cform/templates/link_input.pt
M plone/app/z3cform/templates/multi_input.pt

b'diff --git a/news/134.feature-3 b/news/134.feature-3\nnew file mode 100644\nindex 0000000..f57ac54\n--- /dev/null\n+++ b/news/134.feature-3\n@@ -0,0 +1,2 @@\n+Use better types for inputs.\n+[thet]\ndiff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt\nindex 9a2d397..c69ad1c 100644\n--- a/plone/app/z3cform/templates/link_input.pt\n+++ b/plone/app/z3cform/templates/link_input.pt\n@@ -25,7 +25,7 @@\n         <span class="linkLabel d-none" i18n:translate="label_external_url">External</span>\n         <div class="mb-3 main">\n           <label class="form-label" for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>\n-          <input class="form-control" type="text" name="external" placeholder="https://domain.com"\n+          <input class="form-control" type="url" name="external" placeholder="https://domain.com"\n                  tal:attributes="name string:${view/name}.external;\n                                  value value" />\n         </div>\n@@ -38,7 +38,7 @@\n         <div class="form-inline">\n           <div class="mb-3 main">\n             <label class="form-label" i18n:translate="help_email_url">Email Address</label>\n-            <input class="form-control" type="text" name="email" placeholder="name@domain.com"\n+            <input class="form-control" type="email" name="email" placeholder="name@domain.com"\n                    tal:attributes="name string:${view/name}.email;\n                                    value value" />\n           </div>\ndiff --git a/plone/app/z3cform/templates/multi_input.pt b/plone/app/z3cform/templates/multi_input.pt\nindex 59f21a8..f550569 100644\n--- a/plone/app/z3cform/templates/multi_input.pt\n+++ b/plone/app/z3cform/templates/multi_input.pt\n@@ -42,7 +42,10 @@\n                 Error\n             </div>\n \n-            <input type="text" tal:condition="python:key_widget is not None" tal:replace="structure key_widget/render" />\n+            <input\n+                tal:condition="python:key_widget is not None"\n+                tal:replace="structure key_widget/render"\n+            />\n \n             <br/>\n \n@@ -68,7 +71,8 @@\n                 Error\n             </div>\n \n-            <input type="text" tal:replace="structure widget/render" />\n+            <input tal:replace="structure widget/render" />\n+\n         </div>\n     </tal:block>\n     <div class="formControls multi-widget-buttons" tal:condition="view/actions/values|nothing">\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/a3723985d20f0e5e73340bc15dab7e6bb7a12e5e

Remove inlinevalidation from templates.

Files changed:
A news/134.feature-4
M plone/app/z3cform/templates/multi_input.pt
M plone/app/z3cform/templates/object_input.pt
M plone/app/z3cform/templates/singlecheckbox.pt
M plone/app/z3cform/templates/widget.pt

b'diff --git a/news/134.feature-4 b/news/134.feature-4\nnew file mode 100644\nindex 0000000..384483f\n--- /dev/null\n+++ b/news/134.feature-4\n@@ -0,0 +1,2 @@\n+Remove inlinevalidation from templates.\n+[thet]\ndiff --git a/plone/app/z3cform/templates/multi_input.pt b/plone/app/z3cform/templates/multi_input.pt\nindex f550569..19dd2d3 100644\n--- a/plone/app/z3cform/templates/multi_input.pt\n+++ b/plone/app/z3cform/templates/multi_input.pt\n@@ -10,8 +10,7 @@\n                          key_error key_widget/error|nothing;\n                          error_class python:(error or key_error) and \' error\' or \'\';\n                          fieldname_class string:kssattr-fieldname-${widget/name};"\n-             data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-             tal:attributes="class string:multi-widget-field field pat-inlinevalidation ${fieldname_class}${error_class};\n+             tal:attributes="class string:multi-widget-field field ${fieldname_class}${error_class};\n                              id string:formfield-${widget/id};">\n \n             <input id="" name=""\ndiff --git a/plone/app/z3cform/templates/object_input.pt b/plone/app/z3cform/templates/object_input.pt\nindex 8211599..3138bf9 100644\n--- a/plone/app/z3cform/templates/object_input.pt\n+++ b/plone/app/z3cform/templates/object_input.pt\n@@ -4,8 +4,7 @@\n                          error widget/error;\n                          error_class python:error and \' error\' or \'\';\n                          fieldname_class string:kssattr-fieldname-${widget/name};"\n-             data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-             tal:attributes="class string:object-widget-field field pat-inlinevalidation ${fieldname_class}${error_class};\n+             tal:attributes="class string:object-widget-field field ${fieldname_class}${error_class};\n              data-fieldname widget/name;\n                              id string:formfield-${widget/id};">\n \ndiff --git a/plone/app/z3cform/templates/singlecheckbox.pt b/plone/app/z3cform/templates/singlecheckbox.pt\nindex d4b382a..7ff53c5 100644\n--- a/plone/app/z3cform/templates/singlecheckbox.pt\n+++ b/plone/app/z3cform/templates/singlecheckbox.pt\n@@ -7,8 +7,7 @@\n                error widget/error;\n                error_class python:error and \' error\' or \'\';\n                fieldname_class string:kssattr-fieldname-${widget/name};"\n-   data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class};\n+   tal:attributes="class string:field ${fieldname_class}${error_class};\n                    data-fieldname widget/name;\n                    id string:formfield-${widget/id};">\n     <input type="text" tal:replace="structure widget/render"\ndiff --git a/plone/app/z3cform/templates/widget.pt b/plone/app/z3cform/templates/widget.pt\nindex fb08584..4b266a7 100644\n--- a/plone/app/z3cform/templates/widget.pt\n+++ b/plone/app/z3cform/templates/widget.pt\n@@ -8,9 +8,8 @@\n                empty_class python: (widget.value in empty_values) and \' empty\' or \'\';\n                "\n    id="formfield-${python:widget.id}"\n-   class="mb-3 field pat-inlinevalidation fieldname-${python:widget.name} widget-mode-${python:widget.mode}${error_class}${empty_class} ${python:getattr(widget, \'wrapper_css_class\', False) or False}"\n-   data-fieldname="${widget/name}"\n-   data-pat-inlinevalidation=\'{"type":"z3c.form"}\'>\n+   class="mb-3 field fieldname-${python:widget.name} widget-mode-${python:widget.mode}${error_class}${empty_class} ${python:getattr(widget, \'wrapper_css_class\', False) or False}"\n+   data-fieldname="${widget/name}">\n     <label for="${python:widget.id}"\n            class="form-label"\n            tal:condition="python: widget.mode == \'input\' and widget.label">\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/5d501f4b9fd64fe730518b091bef8740fb2d8647

implement &lt;input type="time" /&gt;

Files changed:
A news/134.feature-5
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/widget.zcml

b'diff --git a/news/134.feature-5 b/news/134.feature-5\nnew file mode 100644\nindex 0000000..f0f8f88\n--- /dev/null\n+++ b/news/134.feature-5\n@@ -0,0 +1,2 @@\n+Implement TimeWidget which renders <input type="time" />\n+[petschki]\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex 2c56007..d50d6b1 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -8,6 +8,7 @@\n from zope.interface import Interface\n from zope.schema.interfaces import IDate\n from zope.schema.interfaces import IDatetime\n+from zope.schema.interfaces import ITime\n \n \n class IPloneFormLayer(IFormLayer):\n@@ -43,6 +44,10 @@ class IDatetimeWidget(ITextWidget):\n     """Marker interface for the DatetimeWidget."""\n \n \n+class ITimeWidget(ITextWidget):\n+    """Marker interface for the TimeWidget"""\n+\n+\n class ISelectWidget(IBaseSelectWidget):\n     """Marker interface for the SelectWidget."""\n \ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 604c279..eab4f37 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -45,6 +45,7 @@\n from zope.schema import List\n from zope.schema import Set\n from zope.schema import TextLine\n+from zope.schema import Time\n from zope.schema import Tuple\n from zope.schema import vocabulary\n from zope.schema.interfaces import IVocabularyFactory\n@@ -103,8 +104,8 @@ def test_widget_pattern_notimplemented(self):\n         )\n \n     def test_widget_base_notimplemented(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.field = self.field\n@@ -123,8 +124,8 @@ def test_widget_base_notimplemented(self):\n         )\n \n     def test_widget_base_custom_css(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.field = self.field\n@@ -137,8 +138,8 @@ def test_widget_base_custom_css(self):\n             widget.render())\n \n     def test_widget_base_pattern_options_with_functions(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.context = \'testcontext\'\n@@ -252,8 +253,8 @@ def test_data_converter(self):\n         )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import DateWidget\n         from plone.app.z3cform.widget import DateFieldWidget\n+        from plone.app.z3cform.widget import DateWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = DateFieldWidget(field, request)\n@@ -403,8 +404,8 @@ def test_data_converter__timezone_callback(self):\n         self.widget.default_timezone = None\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import DatetimeWidget\n         from plone.app.z3cform.widget import DatetimeFieldWidget\n+        from plone.app.z3cform.widget import DatetimeWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = DatetimeFieldWidget(field, request)\n@@ -413,6 +414,31 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n \n+class TimeWidgetTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        from plone.app.z3cform.widget import TimeWidget\n+\n+        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.field = Time(__name__=\'datefield\')\n+        self.field.required = False\n+        self.widget = TimeWidget(self.request)\n+        self.widget.field = self.field\n+\n+    def test_widget(self):\n+        self.assertIn("<input type=\\"time\\"", self.widget.render())\n+\n+    def test_fieldwidget(self):\n+        from plone.app.z3cform.widget import TimeFieldWidget\n+        from plone.app.z3cform.widget import TimeWidget\n+        field = Mock(__name__=\'field\', title=u\'\', required=True)\n+        request = Mock()\n+        widget = TimeFieldWidget(field, request)\n+        self.assertTrue(isinstance(widget, TimeWidget))\n+        self.assertIs(widget.field, field)\n+        self.assertIs(widget.request, request)\n+\n+\n class SelectWidgetTests(unittest.TestCase):\n \n     def setUp(self):\n@@ -421,6 +447,7 @@ def setUp(self):\n \n         # ITerms Adapters are needed for data converter\n         from z3c.form import term\n+\n         import zope.component\n         zope.component.provideAdapter(term.CollectionTerms)\n         zope.component.provideAdapter(term.CollectionTermsVocabulary)\n@@ -628,8 +655,8 @@ def test_widget_extract(self):\n         self.assertEqual(widget.extract(), \'one;two\')\n \n     def test_data_converter_list(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = List(\n             __name__=\'listfield\',\n@@ -674,8 +701,8 @@ def test_data_converter_list(self):\n         )\n \n     def test_data_converter_tuple(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = Tuple(\n             __name__=\'tuplefield\',\n@@ -710,8 +737,8 @@ def test_data_converter_tuple(self):\n         )\n \n     def test_data_converter_handles_empty_value(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = Tuple(__name__=\'tuplefield\',\n                       value_type=Choice(__name__=\'selectfield\',\n@@ -730,8 +757,8 @@ def test_widget_optgroup(self):\n         """\n         If the widget vocabulary is a mapping <optgroup>\'s are rendered.\n         """\n-        from z3c.form import term\n         from plone.app.z3cform.widget import SelectWidget\n+        from z3c.form import term\n         widget = SelectWidget(self.request)\n         widget.field = Choice(vocabulary=vocabulary.TreeVocabulary.fromDict({\n             (\'foo_group\', \'Foo Group\'): {\n@@ -891,8 +918,8 @@ def test_widget_addform_url_on_addform(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n         widget = AjaxSelectWidget(self.request)\n         form = Mock(parentForm=None)\n-        from zope.interface import directlyProvides  # noqa\n         from z3c.form.interfaces import IAddForm\n+        from zope.interface import directlyProvides  # noqa\n         directlyProvides(form, IAddForm)  # noqa\n         form.request = {\'URL\': \'http://addform_url\'}\n         widget.form = form\n@@ -921,8 +948,8 @@ def test_widget_addform_url_on_addform(self):\n         )\n \n     def test_data_converter_list(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = List(__name__=\'listfield\', value_type=TextLine())\n         widget = AjaxSelectWidget(self.request)\n@@ -950,8 +977,8 @@ def test_data_converter_list(self):\n         )\n \n     def test_data_converter_collection_with_vocabulary(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = Tuple(\n             __name__=\'listfield\',\n@@ -984,8 +1011,8 @@ def test_data_converter_collection_with_vocabulary(self):\n         )\n \n     def test_data_converter_tuple(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = Tuple(__name__=\'tuplefield\', value_type=TextLine())\n         widget = AjaxSelectWidget(self.request)\n@@ -1013,8 +1040,8 @@ def test_data_converter_tuple(self):\n         )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = AjaxSelectFieldWidget(field, request)\n@@ -1023,8 +1050,8 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n     def test_fieldwidget_sequence(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         vocabulary = Mock()\n         request = Mock()\n@@ -1162,8 +1189,8 @@ def test_related_items_widget(self):\n         )\n \n     def test_related_items_widget_nav_root(self):\n-        from plone.app.z3cform.widget import RelatedItemsWidget\n         from plone.app.layout.navigation.interfaces import INavigationRoot\n+        from plone.app.z3cform.widget import RelatedItemsWidget\n         EXPECTED_ROOT_PATH = \'/plone\'\n         EXPECTED_ROOT_URL = \'http://nohost/plone\'\n         EXPECTED_BASE_PATH = \'/plone/subfolder\'\n@@ -1233,8 +1260,8 @@ def test_related_items_widget_display_template(self):\n         source.multiple = [RelationValue(intids.getId(target)), RelationValue(intids.getId(doc))]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n         notify(ObjectModifiedEvent(source))\n         default_view = source.restrictedTraverse(\'@@view\')\n         default_view.update()\n@@ -1329,8 +1356,7 @@ def test_multiple_selection(self):\n         )\n \n     def test_converter_RelationChoice(self):\n-        from plone.app.z3cform.converters import \\\n-            RelationChoiceRelatedItemsWidgetConverter\n+        from plone.app.z3cform.converters import RelationChoiceRelatedItemsWidgetConverter\n         brain = Mock(getObject=Mock(return_value=\'obj\'))\n         portal_catalog = Mock(return_value=[brain])\n         widget = Mock()\n@@ -1426,8 +1452,8 @@ def test_converter_List_of_Choice(self):\n             )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import RelatedItemsWidget\n         from plone.app.z3cform.widget import RelatedItemsFieldWidget\n+        from plone.app.z3cform.widget import RelatedItemsWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         vocabulary = Mock()\n         request = Mock()\n@@ -1546,8 +1572,8 @@ def test_widget_params_different_contexts(self):\n         )\n \n     def test_widget_values(self):\n-        from plone.app.z3cform.widget import RichTextWidget\n         from plone.app.textfield.value import RichTextValue\n+        from plone.app.z3cform.widget import RichTextWidget\n \n         widget = FieldWidget(self.field, RichTextWidget(self.request))\n         # set the context so we can get tinymce settings\n@@ -1614,8 +1640,8 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):\n         if IMarkupSchema:\n             # if not, don\'t run this test\n             self._set_mimetypes(allowed=(\'text/html\', \'text/plain\'))\n-            from plone.app.z3cform.widget import RichTextWidget\n             from plone.app.textfield.value import RichTextValue\n+            from plone.app.z3cform.widget import RichTextWidget\n             widget = FieldWidget(self.field, RichTextWidget(self.request))\n             # set the context so we can get tinymce settings\n             widget.context = self.portal\n@@ -1729,8 +1755,8 @@ def test_link_widget__extract_email_including_mailto(self):\n         )\n \n     def test_link_widget__data_converter(self):\n-        from plone.app.z3cform.widget import LinkWidget\n         from plone.app.z3cform.converters import LinkWidgetDataConverter\n+        from plone.app.z3cform.widget import LinkWidget\n \n         field = TextLine(__name__=\'linkfield\')\n         widget = LinkWidget(self.request)\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex bc2d424..c619235 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -32,6 +32,7 @@\n from plone.app.z3cform.interfaces import IRichTextWidgetInputModeRenderer\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n+from plone.app.z3cform.interfaces import ITimeWidget\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import closest_content\n from plone.registry.interfaces import IRegistry\n@@ -222,6 +223,17 @@ class DatetimeWidget(DateWidget):\n     default_timezone = None\n \n \n+@implementer_only(ITimeWidget)\n+class TimeWidget(BaseWidget, z3cform_TextWidget):\n+\n+    pattern = \'\'\n+\n+    def _base(self, **kw):\n+        return InputWidget(\n+            type="time",\n+            **kw,\n+        )\n+\n @implementer_only(ISelectWidget)\n class SelectWidget(BaseWidget, z3cform_SelectWidget):\n     """Select widget for z3c.form."""\n@@ -849,6 +861,11 @@ def DatetimeFieldWidget(field, request):\n     return FieldWidget(field, DatetimeWidget(request))\n \n \n+@implementer(IFieldWidget)\n+def TimeFieldWidget(field, request):\n+    return FieldWidget(field, TimeWidget(request))\n+\n+\n @implementer(IFieldWidget)\n def SelectFieldWidget(field, request):\n     return FieldWidget(field, SelectWidget(request))\ndiff --git a/plone/app/z3cform/widget.zcml b/plone/app/z3cform/widget.zcml\nindex 52b6e83..3e61eef 100644\n--- a/plone/app/z3cform/widget.zcml\n+++ b/plone/app/z3cform/widget.zcml\n@@ -138,6 +138,17 @@\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n+  <class class=".widget.TimeWidget">\n+    <require permission="zope.Public"\n+             interface=".interfaces.ITimeWidget" />\n+  </class>\n+\n+  <adapter\n+      factory=".widget.TimeFieldWidget"\n+      for="zope.schema.interfaces.ITime\n+           plone.app.z3cform.interfaces.IPloneFormLayer"\n+      />\n+\n   <adapter factory=".widget.RelatedItemsFieldWidget"\n            for="z3c.relationfield.interfaces.IRelationChoice\n                 plone.app.z3cform.interfaces.IPloneFormLayer" />\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/9f2ef829b9d66317efd54a55af3772059ed747ae

Fix multiple select widget

Files changed:
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex eab4f37..5cce975 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -509,7 +509,7 @@ def test_widget(self):\n             {\n                 'multiple': True,\n                 'name': None,\n-                'pattern_options': {'separator': ';', 'multiple': True},\n+                'pattern_options': {'separator': ';'},\n                 'pattern': 'select2',\n                 'value': (),\n                 'items': [\n@@ -527,9 +527,7 @@ def test_widget(self):\n             {\n                 'multiple': True,\n                 'name': None,\n-                'pattern_options': {'allowClear': True,\n-                                    'separator': ';',\n-                                    'multiple': True},\n+                'pattern_options': {'allowClear': True, 'separator': ';'},\n                 'pattern': 'select2',\n                 'value': (),\n                 'items': [\n@@ -546,9 +544,7 @@ def test_widget(self):\n             {\n                 'multiple': True,\n                 'name': None,\n-                'pattern_options': {'allowClear': True,\n-                                    'separator': ';',\n-                                    'multiple': True},\n+                'pattern_options': {'allowClear': True, 'separator': ';'},\n                 'pattern': 'select2',\n                 'value': ('one'),\n                 'items': [\n@@ -575,7 +571,7 @@ def test_widget_list_orderable(self):\n                 'multiple': True,\n                 'name': None,\n                 'pattern_options': {\n-                    'orderable': True, 'multiple': True, 'separator': '.'},\n+                    'orderable': True, 'separator': '.'},\n                 'pattern': 'select2',\n                 'value': (),\n                 'items': [\n@@ -601,7 +597,7 @@ def test_widget_tuple_orderable(self):\n                 'multiple': True,\n                 'name': None,\n                 'pattern_options': {\n-                    'orderable': True, 'multiple': True, 'separator': ';'},\n+                    'orderable': True, 'separator': ';'},\n                 'pattern': 'select2',\n                 'value': (),\n                 'items': [\n@@ -627,8 +623,7 @@ def test_widget_set_not_orderable(self):\n             {\n                 'multiple': True,\n                 'name': None,\n-                'pattern_options': {\n-                    'multiple': True, 'separator': ';'},\n+                'pattern_options': {'separator': ';'},\n                 'pattern': 'select2',\n                 'value': (),\n                 'items': [\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex c619235..e6885c4 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -294,7 +294,7 @@ def _base_args(self):\n \n         options = args.setdefault('pattern_options', {})\n         if self.multiple or ICollection.providedBy(self.field):\n-            options['multiple'] = args['multiple'] = self.multiple = True\n+            args['multiple'] = self.multiple = True\n \n         # ISequence represents an orderable collection\n         if ISequence.providedBy(self.field) or self.orderable:\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Markus Hilbert (iham) <markus.hilbert@iham.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/a26a6296411334ac4da3fa65c51b48834333e0cd

adding name and value field based on date-widget implementation

Files changed:
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex e6885c4..18f1c07 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -234,6 +234,34 @@ def _base(self, **kw):\n             **kw,\n         )\n \n+    def _base_args(self):\n+        """Method which will calculate _base class arguments.\n+\n+        Returns (as python dictionary):\n+            - `pattern`: pattern name\n+            - `pattern_options`: pattern options\n+            - `name`: field name\n+            - `value`: field value\n+\n+        :returns: Arguments which will be passed to _base\n+        :rtype: dict\n+        """\n+        args = super(TimeWidget, self)._base_args()\n+        args[\'name\'] = self.name\n+        args[\'value\'] = (self.request.get(self.name,\n+                                          self.value) or u\'\').strip()\n+\n+        args.setdefault(\'pattern_options\', {})\n+        if self.field.required:\n+            # Required fields should not have a "Clear" button\n+            args[\'pattern_options\'][\'clear\'] = False\n+        args[\'pattern_options\'] = dict_merge(\n+            get_date_options(self.request),\n+            args[\'pattern_options\'])\n+\n+        return args\n+\n+\n @implementer_only(ISelectWidget)\n class SelectWidget(BaseWidget, z3cform_SelectWidget):\n     """Select widget for z3c.form."""\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Markus Hilbert (iham) <markus.hilbert@iham.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/4f32fe378c562164a6eb45aaf60266cbdbadf3fe

simplified base args for time widget

Files changed:
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 18f1c07..62c5cc2 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -231,37 +231,13 @@ class TimeWidget(BaseWidget, z3cform_TextWidget):\n     def _base(self, **kw):\n         return InputWidget(\n             type="time",\n+            name=self.name,\n+            value=(self.request.get(self.name,\n+                self.value) or u\'\').strip(),\n             **kw,\n         )\n \n-    def _base_args(self):\n-        """Method which will calculate _base class arguments.\n-\n-        Returns (as python dictionary):\n-            - `pattern`: pattern name\n-            - `pattern_options`: pattern options\n-            - `name`: field name\n-            - `value`: field value\n-\n-        :returns: Arguments which will be passed to _base\n-        :rtype: dict\n-        """\n-        args = super(TimeWidget, self)._base_args()\n-        args[\'name\'] = self.name\n-        args[\'value\'] = (self.request.get(self.name,\n-                                          self.value) or u\'\').strip()\n-\n-        args.setdefault(\'pattern_options\', {})\n-        if self.field.required:\n-            # Required fields should not have a "Clear" button\n-            args[\'pattern_options\'][\'clear\'] = False\n-        args[\'pattern_options\'] = dict_merge(\n-            get_date_options(self.request),\n-            args[\'pattern_options\'])\n-\n-        return args\n-\n-\n+    \n @implementer_only(ISelectWidget)\n class SelectWidget(BaseWidget, z3cform_SelectWidget):\n     """Select widget for z3c.form."""\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: Markus Hilbert (iham) <markus.hilbert@iham.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/39ad2277f926cb1631168efbce75bc047c5bd9a1

added news entry to satisfy PR robot

Files changed:
A news/134.bugfix

b"diff --git a/news/134.bugfix b/news/134.bugfix\nnew file mode 100644\nindex 0000000..fde99a9\n--- /dev/null\n+++ b/news/134.bugfix\n@@ -0,0 +1 @@\n+time widget supports 'name' and 'value' attributes now. [iham]\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/d285b9dcf29fb3c072b04ee268e471fb1150168d

add TimeWidgetConverter and input css class

Files changed:
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 1a2256f..f48bd47 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -79,6 +79,7 @@\n \n   <adapter factory=".converters.DatetimeWidgetConverter" />\n   <adapter factory=".converters.DateWidgetConverter" />\n+  <adapter factory=".converters.TimeWidgetConverter" />\n   <adapter factory=".converters.SelectWidgetConverter" />\n   <adapter factory=".converters.SequenceSelectWidgetConverter" />\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex ae1fb5d..06660eb 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from datetime import time\n from plone.app.z3cform import utils\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n from plone.app.z3cform.interfaces import IDatetimeWidget\n@@ -10,6 +11,7 @@\n from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n+from plone.app.z3cform.interfaces import ITimeWidget\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_callable\n@@ -28,6 +30,7 @@\n from zope.schema.interfaces import IDatetime\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IList\n+from zope.schema.interfaces import ITime\n \n import json\n import pytz\n@@ -116,6 +119,23 @@ def toFieldValue(self, value):\n         return ret\n \n \n+@adapter(ITime, ITimeWidget)\n+class TimeWidgetConverter(BaseDataConverter):\n+    """Data converter for datetime fields."""\n+\n+    type = "time"\n+\n+    def toWidgetValue(self, value):\n+        if value == self.field.missing_value:\n+            return u\'\'\n+        return value.strftime("%H:%M")\n+\n+    def toFieldValue(self, value):\n+        if value == u\'\':\n+            return self.field.missing_value\n+        return time(*map(int, value.split(":")))\n+\n+\n class SelectWidgetConverterBase(object):\n \n     def toFieldValue(self, value):\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 62c5cc2..e16eb9f 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -237,7 +237,12 @@ def _base(self, **kw):\n             **kw,\n         )\n \n-    \n+    def render(self):\n+        if self.mode != \'display\':\n+            self.addClass("form-control")\n+        return super(TimeWidget, self).render()\n+\n+\n @implementer_only(ISelectWidget)\n class SelectWidget(BaseWidget, z3cform_SelectWidget):\n     """Select widget for z3c.form."""\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/ddebd5c01581279a8ec5d0fe1962c00884e58e11

add tests for converter

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 5cce975..90f7448 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from datetime import time\n from json import loads\n from lxml import html\n from mock import Mock\n@@ -420,7 +421,7 @@ def setUp(self):\n         from plone.app.z3cform.widget import TimeWidget\n \n         self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n-        self.field = Time(__name__=\'datefield\')\n+        self.field = Time(__name__=\'timefield\')\n         self.field.required = False\n         self.widget = TimeWidget(self.request)\n         self.widget.field = self.field\n@@ -428,6 +429,30 @@ def setUp(self):\n     def test_widget(self):\n         self.assertIn("<input type=\\"time\\"", self.widget.render())\n \n+    def test_data_converter(self):\n+        from plone.app.z3cform.converters import TimeWidgetConverter\n+        converter = TimeWidgetConverter(self.field, self.widget)\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'\'),\n+            converter.field.missing_value,\n+        )\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'15:40\'),\n+            time(15, 40),\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue(converter.field.missing_value),\n+            \'\',\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue(time(15, 40)),\n+            \'15:40\',\n+        )\n+\n     def test_fieldwidget(self):\n         from plone.app.z3cform.widget import TimeFieldWidget\n         from plone.app.z3cform.widget import TimeWidget\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/d7af3bca77063dc86d7c2cfd56f1eecd6327c9e6

temporary remove pat-validation

Files changed:
M plone/app/z3cform/templates/macros.pt

b'diff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt\nindex 6471188..88d68d9 100644\n--- a/plone/app/z3cform/templates/macros.pt\n+++ b/plone/app/z3cform/templates/macros.pt\n@@ -73,7 +73,7 @@\n                                   "\n                       tal:attributes="action view/action|request/getURL;\n                                       enctype view/enctype;\n-                                      class string:rowlike $unload_protection $autofocus $validation $form_tabbing $form_class $form_view_name_raw $form_view_name;\n+                                      class string:rowlike $unload_protection $autofocus $form_tabbing $form_class $form_view_name_raw $form_view_name;\n                                       id view/id;\n                                       name form_name;\n                                       method view/method|string:post">\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-23T21:36:43+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/cee0ae8ad1de2e6ee308df76cca3231bba88b7ca

Fix AddView browserlayer

and enable HTML5 validation again

Files changed:
A news/142.bugfix
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/templates/macros.pt

b'diff --git a/news/142.bugfix b/news/142.bugfix\nnew file mode 100644\nindex 0000000..9b88666\n--- /dev/null\n+++ b/news/142.bugfix\n@@ -0,0 +1,2 @@\n+Register `AddView` to the correct browserlayer\n+[petschki]\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex f48bd47..d553e2a 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -54,7 +54,7 @@\n   <include package="plone.dexterity" />\n   <adapter\n       for="Products.CMFCore.interfaces.IFolderish\n-           plone.theme.interfaces.IDefaultPloneLayer\n+           plone.app.z3cform.interfaces.IPloneFormLayer\n            plone.dexterity.interfaces.IDexterityFTI"\n       provides="zope.publisher.interfaces.browser.IBrowserPage"\n       factory=".views.AddView"\ndiff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt\nindex 88d68d9..36d5ba2 100644\n--- a/plone/app/z3cform/templates/macros.pt\n+++ b/plone/app/z3cform/templates/macros.pt\n@@ -54,7 +54,7 @@\n \n \n                 <form data-pat-autotoc="levels: legend; section: fieldset; className: autotabs"\n-                      class="rowlike enableUnloadProtection" action="." method="post" novalidate\n+                      class="rowlike enableUnloadProtection" action="." method="post"\n                       tal:define="groups view/groups | nothing;\n                                   form_name view/form_name | nothing;\n                                   form_class view/css_class | string:;\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-03-24T15:08:33+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/dad5a8830e40c2ceb46a3c91a078ec70158deb20

Merge pull request #141 from plone/es6

ES6 changes

Files changed:
A news/134.bugfix
A news/134.feature
A news/134.feature-2
A news/134.feature-3
A news/134.feature-4
A news/134.feature-5
A news/142.bugfix
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/templates/link_input.pt
M plone/app/z3cform/templates/macros.pt
M plone/app/z3cform/templates/multi_input.pt
M plone/app/z3cform/templates/object_input.pt
M plone/app/z3cform/templates/singlecheckbox.pt
M plone/app/z3cform/templates/widget.pt
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/widget.zcml

b'diff --git a/news/134.bugfix b/news/134.bugfix\nnew file mode 100644\nindex 0000000..fde99a9\n--- /dev/null\n+++ b/news/134.bugfix\n@@ -0,0 +1 @@\n+time widget supports \'name\' and \'value\' attributes now. [iham]\ndiff --git a/news/134.feature b/news/134.feature\nnew file mode 100644\nindex 0000000..e3caab8\n--- /dev/null\n+++ b/news/134.feature\n@@ -0,0 +1,3 @@\n+Use browser native date and datetime-local input\n+together with patternslib date-picker\n+[petschki]\ndiff --git a/news/134.feature-2 b/news/134.feature-2\nnew file mode 100644\nindex 0000000..7856a6a\n--- /dev/null\n+++ b/news/134.feature-2\n@@ -0,0 +1,2 @@\n+Use pat-validation in forms.\n+[thet]\ndiff --git a/news/134.feature-3 b/news/134.feature-3\nnew file mode 100644\nindex 0000000..f57ac54\n--- /dev/null\n+++ b/news/134.feature-3\n@@ -0,0 +1,2 @@\n+Use better types for inputs.\n+[thet]\ndiff --git a/news/134.feature-4 b/news/134.feature-4\nnew file mode 100644\nindex 0000000..384483f\n--- /dev/null\n+++ b/news/134.feature-4\n@@ -0,0 +1,2 @@\n+Remove inlinevalidation from templates.\n+[thet]\ndiff --git a/news/134.feature-5 b/news/134.feature-5\nnew file mode 100644\nindex 0000000..f0f8f88\n--- /dev/null\n+++ b/news/134.feature-5\n@@ -0,0 +1,2 @@\n+Implement TimeWidget which renders <input type="time" />\n+[petschki]\ndiff --git a/news/142.bugfix b/news/142.bugfix\nnew file mode 100644\nindex 0000000..9b88666\n--- /dev/null\n+++ b/news/142.bugfix\n@@ -0,0 +1,2 @@\n+Register `AddView` to the correct browserlayer\n+[petschki]\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 1a2256f..d553e2a 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -54,7 +54,7 @@\n   <include package="plone.dexterity" />\n   <adapter\n       for="Products.CMFCore.interfaces.IFolderish\n-           plone.theme.interfaces.IDefaultPloneLayer\n+           plone.app.z3cform.interfaces.IPloneFormLayer\n            plone.dexterity.interfaces.IDexterityFTI"\n       provides="zope.publisher.interfaces.browser.IBrowserPage"\n       factory=".views.AddView"\n@@ -79,6 +79,7 @@\n \n   <adapter factory=".converters.DatetimeWidgetConverter" />\n   <adapter factory=".converters.DateWidgetConverter" />\n+  <adapter factory=".converters.TimeWidgetConverter" />\n   <adapter factory=".converters.SelectWidgetConverter" />\n   <adapter factory=".converters.SequenceSelectWidgetConverter" />\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex fae8cb7..06660eb 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from datetime import time\n from plone.app.z3cform import utils\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n from plone.app.z3cform.interfaces import IDatetimeWidget\n@@ -10,6 +11,7 @@\n from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n+from plone.app.z3cform.interfaces import ITimeWidget\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_callable\n@@ -28,6 +30,7 @@\n from zope.schema.interfaces import IDatetime\n from zope.schema.interfaces import IField\n from zope.schema.interfaces import IList\n+from zope.schema.interfaces import ITime\n \n import json\n import pytz\n@@ -81,7 +84,7 @@ def toWidgetValue(self, value):\n         """\n         if value is self.field.missing_value:\n             return u\'\'\n-        return (\'{value.year:}-{value.month:02}-{value.day:02} \'\n+        return (\'{value.year:}-{value.month:02}-{value.day:02}T\'\n                 \'{value.hour:02}:{value.minute:02}\').format(value=value)\n \n     def toFieldValue(self, value):\n@@ -95,7 +98,7 @@ def toFieldValue(self, value):\n         """\n         if not value:\n             return self.field.missing_value\n-        tmp = value.split(\' \')\n+        tmp = value.split(\'T\')\n         if not tmp[0]:\n             return self.field.missing_value\n         value = tmp[0].split(\'-\')\n@@ -116,6 +119,23 @@ def toFieldValue(self, value):\n         return ret\n \n \n+@adapter(ITime, ITimeWidget)\n+class TimeWidgetConverter(BaseDataConverter):\n+    """Data converter for datetime fields."""\n+\n+    type = "time"\n+\n+    def toWidgetValue(self, value):\n+        if value == self.field.missing_value:\n+            return u\'\'\n+        return value.strftime("%H:%M")\n+\n+    def toFieldValue(self, value):\n+        if value == u\'\':\n+            return self.field.missing_value\n+        return time(*map(int, value.split(":")))\n+\n+\n class SelectWidgetConverterBase(object):\n \n     def toFieldValue(self, value):\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex 2c56007..d50d6b1 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -8,6 +8,7 @@\n from zope.interface import Interface\n from zope.schema.interfaces import IDate\n from zope.schema.interfaces import IDatetime\n+from zope.schema.interfaces import ITime\n \n \n class IPloneFormLayer(IFormLayer):\n@@ -43,6 +44,10 @@ class IDatetimeWidget(ITextWidget):\n     """Marker interface for the DatetimeWidget."""\n \n \n+class ITimeWidget(ITextWidget):\n+    """Marker interface for the TimeWidget"""\n+\n+\n class ISelectWidget(IBaseSelectWidget):\n     """Marker interface for the SelectWidget."""\n \ndiff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt\nindex 9a2d397..c69ad1c 100644\n--- a/plone/app/z3cform/templates/link_input.pt\n+++ b/plone/app/z3cform/templates/link_input.pt\n@@ -25,7 +25,7 @@\n         <span class="linkLabel d-none" i18n:translate="label_external_url">External</span>\n         <div class="mb-3 main">\n           <label class="form-label" for="external" i18n:translate="help_external_url">External URL (can be relative within this site or absolute if it starts with http:// or https://)</label>\n-          <input class="form-control" type="text" name="external" placeholder="https://domain.com"\n+          <input class="form-control" type="url" name="external" placeholder="https://domain.com"\n                  tal:attributes="name string:${view/name}.external;\n                                  value value" />\n         </div>\n@@ -38,7 +38,7 @@\n         <div class="form-inline">\n           <div class="mb-3 main">\n             <label class="form-label" i18n:translate="help_email_url">Email Address</label>\n-            <input class="form-control" type="text" name="email" placeholder="name@domain.com"\n+            <input class="form-control" type="email" name="email" placeholder="name@domain.com"\n                    tal:attributes="name string:${view/name}.email;\n                                    value value" />\n           </div>\ndiff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt\nindex e8582f5..36d5ba2 100644\n--- a/plone/app/z3cform/templates/macros.pt\n+++ b/plone/app/z3cform/templates/macros.pt\n@@ -54,7 +54,7 @@\n \n \n                 <form data-pat-autotoc="levels: legend; section: fieldset; className: autotabs"\n-                      class="rowlike enableUnloadProtection" action="." method="post" novalidate\n+                      class="rowlike enableUnloadProtection" action="." method="post"\n                       tal:define="groups view/groups | nothing;\n                                   form_name view/form_name | nothing;\n                                   form_class view/css_class | string:;\n@@ -64,6 +64,7 @@\n                                   unload_protection python:enable_unload_protection and \'pat-formunloadalert\';\n                                   enable_autofocus view/enable_autofocus|python:True;\n                                   autofocus python:enable_autofocus and \'pat-formautofocus\';\n+                                  validation python:\'pat-validation\' if True else \'\';\n                                   has_groups python:bool(groups);\n                                   form_tabbing python:(has_groups and enable_form_tabbing) and \'enableFormTabbing pat-autotoc\' or \'\';\n                                   show_default_label python:has_groups and default_fieldset_label and len(view.widgets);\ndiff --git a/plone/app/z3cform/templates/multi_input.pt b/plone/app/z3cform/templates/multi_input.pt\nindex 59f21a8..19dd2d3 100644\n--- a/plone/app/z3cform/templates/multi_input.pt\n+++ b/plone/app/z3cform/templates/multi_input.pt\n@@ -10,8 +10,7 @@\n                          key_error key_widget/error|nothing;\n                          error_class python:(error or key_error) and \' error\' or \'\';\n                          fieldname_class string:kssattr-fieldname-${widget/name};"\n-             data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-             tal:attributes="class string:multi-widget-field field pat-inlinevalidation ${fieldname_class}${error_class};\n+             tal:attributes="class string:multi-widget-field field ${fieldname_class}${error_class};\n                              id string:formfield-${widget/id};">\n \n             <input id="" name=""\n@@ -42,7 +41,10 @@\n                 Error\n             </div>\n \n-            <input type="text" tal:condition="python:key_widget is not None" tal:replace="structure key_widget/render" />\n+            <input\n+                tal:condition="python:key_widget is not None"\n+                tal:replace="structure key_widget/render"\n+            />\n \n             <br/>\n \n@@ -68,7 +70,8 @@\n                 Error\n             </div>\n \n-            <input type="text" tal:replace="structure widget/render" />\n+            <input tal:replace="structure widget/render" />\n+\n         </div>\n     </tal:block>\n     <div class="formControls multi-widget-buttons" tal:condition="view/actions/values|nothing">\ndiff --git a/plone/app/z3cform/templates/object_input.pt b/plone/app/z3cform/templates/object_input.pt\nindex 8211599..3138bf9 100644\n--- a/plone/app/z3cform/templates/object_input.pt\n+++ b/plone/app/z3cform/templates/object_input.pt\n@@ -4,8 +4,7 @@\n                          error widget/error;\n                          error_class python:error and \' error\' or \'\';\n                          fieldname_class string:kssattr-fieldname-${widget/name};"\n-             data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-             tal:attributes="class string:object-widget-field field pat-inlinevalidation ${fieldname_class}${error_class};\n+             tal:attributes="class string:object-widget-field field ${fieldname_class}${error_class};\n              data-fieldname widget/name;\n                              id string:formfield-${widget/id};">\n \ndiff --git a/plone/app/z3cform/templates/singlecheckbox.pt b/plone/app/z3cform/templates/singlecheckbox.pt\nindex d4b382a..7ff53c5 100644\n--- a/plone/app/z3cform/templates/singlecheckbox.pt\n+++ b/plone/app/z3cform/templates/singlecheckbox.pt\n@@ -7,8 +7,7 @@\n                error widget/error;\n                error_class python:error and \' error\' or \'\';\n                fieldname_class string:kssattr-fieldname-${widget/name};"\n-   data-pat-inlinevalidation=\'{"type":"z3c.form"}\'\n-   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class};\n+   tal:attributes="class string:field ${fieldname_class}${error_class};\n                    data-fieldname widget/name;\n                    id string:formfield-${widget/id};">\n     <input type="text" tal:replace="structure widget/render"\ndiff --git a/plone/app/z3cform/templates/widget.pt b/plone/app/z3cform/templates/widget.pt\nindex fb08584..4b266a7 100644\n--- a/plone/app/z3cform/templates/widget.pt\n+++ b/plone/app/z3cform/templates/widget.pt\n@@ -8,9 +8,8 @@\n                empty_class python: (widget.value in empty_values) and \' empty\' or \'\';\n                "\n    id="formfield-${python:widget.id}"\n-   class="mb-3 field pat-inlinevalidation fieldname-${python:widget.name} widget-mode-${python:widget.mode}${error_class}${empty_class} ${python:getattr(widget, \'wrapper_css_class\', False) or False}"\n-   data-fieldname="${widget/name}"\n-   data-pat-inlinevalidation=\'{"type":"z3c.form"}\'>\n+   class="mb-3 field fieldname-${python:widget.name} widget-mode-${python:widget.mode}${error_class}${empty_class} ${python:getattr(widget, \'wrapper_css_class\', False) or False}"\n+   data-fieldname="${widget/name}">\n     <label for="${python:widget.id}"\n            class="form-label"\n            tal:condition="python: widget.mode == \'input\' and widget.label">\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 35f97e1..90f7448 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from datetime import time\n from json import loads\n from lxml import html\n from mock import Mock\n@@ -45,6 +46,7 @@\n from zope.schema import List\n from zope.schema import Set\n from zope.schema import TextLine\n+from zope.schema import Time\n from zope.schema import Tuple\n from zope.schema import vocabulary\n from zope.schema.interfaces import IVocabularyFactory\n@@ -103,8 +105,8 @@ def test_widget_pattern_notimplemented(self):\n         )\n \n     def test_widget_base_notimplemented(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.field = self.field\n@@ -123,8 +125,8 @@ def test_widget_base_notimplemented(self):\n         )\n \n     def test_widget_base_custom_css(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.field = self.field\n@@ -137,8 +139,8 @@ def test_widget_base_custom_css(self):\n             widget.render())\n \n     def test_widget_base_pattern_options_with_functions(self):\n-        from plone.app.z3cform.widget import BaseWidget\n         from plone.app.widgets.base import InputWidget\n+        from plone.app.z3cform.widget import BaseWidget\n \n         widget = BaseWidget(self.request)\n         widget.context = \'testcontext\'\n@@ -197,34 +199,15 @@ def test_widget(self):\n         current_year = datetime.today().year\n         self.assertEqual(\n             {\n-                \'pattern\': \'pickadate\',\n-                \'value\': u\'\',\n                 \'name\': None,\n-                \'pattern_options\': {\n-                    \'date\': {\n-                        \'firstDay\': 0,\n-                        \'min\': [current_year - 100, 1, 1],\n-                        \'max\': [current_year + 20, 1, 1],\n-                        \'format\': \'mmmm d, yyyy\',\n-                        \'monthsFull\': [u\'January\', u\'February\', u\'March\',\n-                                       u\'April\', u\'May\', u\'June\', u\'July\',\n-                                       u\'August\', u\'September\', u\'October\',\n-                                       u\'November\', u\'December\'],\n-                        \'weekdaysShort\': [u\'Sun\', u\'Mon\', u\'Tue\', u\'Wed\',\n-                                          u\'Thu\', u\'Fri\', u\'Sat\'],\n-                        \'weekdaysFull\': [u\'Sunday\', u\'Monday\', u\'Tuesday\',\n-                                         u\'Wednesday\', u\'Thursday\', u\'Friday\',\n-                                         u\'Saturday\'],\n-                        \'selectYears\': 200,\n-                        \'placeholder\': u\'Enter date...\',\n-                        \'monthsShort\': [u\'Jan\', u\'Feb\', u\'Mar\', u\'Apr\', u\'May\',\n-                                        u\'Jun\', u\'Jul\', u\'Aug\', u\'Sep\', u\'Oct\',\n-                                        u\'Nov\', u\'Dec\'],\n-                    },\n-                    \'time\': False,\n-                    \'today\': u\'Today\',\n-                    \'clear\': u\'Clear\',\n-                },\n+                \'pattern\': \'date-picker\',\n+                \'pattern_options\': {\'behavior\': \'native\',\n+                                    \'clear\': \'Clear\',\n+                                    \'date\': {\'firstDay\': 0},\n+                                    \'first-day\': 0,\n+                                    \'today\': \'Today\',\n+                                    \'week-numbers\': \'show\'},\n+                \'value\': \'\',\n             },\n             self.widget._base_args(),\n         )\n@@ -271,8 +254,8 @@ def test_data_converter(self):\n         )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import DateWidget\n         from plone.app.z3cform.widget import DateFieldWidget\n+        from plone.app.z3cform.widget import DateWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = DateFieldWidget(field, request)\n@@ -300,38 +283,16 @@ def test_widget(self):\n         current_year = datetime.today().year\n         self.assertEqual(\n             {\n-                \'pattern\': \'pickadate\',\n-                \'value\': u\'\',\n                 \'name\': None,\n-                \'pattern_options\': {\n-                    \'date\': {\n-                        \'firstDay\': 0,\n-                        \'min\': [current_year - 100, 1, 1],\n-                        \'max\': [current_year + 20, 1, 1],\n-                        \'format\': \'mmmm d, yyyy\',\n-                        \'monthsFull\': [u\'January\', u\'February\', u\'March\',\n-                                       u\'April\', u\'May\', u\'June\', u\'July\',\n-                                       u\'August\', u\'September\', u\'October\',\n-                                       u\'November\', u\'December\'],\n-                        \'weekdaysShort\': [u\'Sun\', u\'Mon\', u\'Tue\', u\'Wed\',\n-                                          u\'Thu\', u\'Fri\', u\'Sat\'],\n-                        \'weekdaysFull\': [u\'Sunday\', u\'Monday\', u\'Tuesday\',\n-                                         u\'Wednesday\', u\'Thursday\', u\'Friday\',\n-                                         u\'Saturday\'],\n-                        \'selectYears\': 200,\n-                        \'placeholder\': u\'Enter date...\',\n-                        \'monthsShort\': [u\'Jan\', u\'Feb\', u\'Mar\', u\'Apr\', u\'May\',\n-                                        u\'Jun\', u\'Jul\', u\'Aug\', u\'Sep\', u\'Oct\',\n-                                        u\'Nov\', u\'Dec\'],\n-                    },\n-                    \'time\': {\n-                        \'placeholder\': u\'Enter time...\',\n-                        \'format\': \'h:i a\',\n-                        \'interval\': 15,\n-                    },\n-                    \'today\': u\'Today\',\n-                    \'clear\': u\'Clear\',\n-                },\n+                \'pattern\': \'datetime-picker\',\n+                \'pattern_options\': {\'behavior\': \'native\',\n+                                    \'clear\': \'Clear\',\n+                                    \'date\': {\'firstDay\': 0},\n+                                    \'first-day\': 0,\n+                                    \'time\': {\'interval\': 15},\n+                                    \'today\': \'Today\',\n+                                    \'week-numbers\': \'show\'},\n+                \'value\': \'\',\n             },\n             self.widget._base_args(),\n         )\n@@ -353,12 +314,12 @@ def test_data_converter(self):\n         )\n \n         self.assertEqual(\n-            converter.toFieldValue(\'2000-10-30 15:40\'),\n+            converter.toFieldValue(\'2000-10-30T15:40\'),\n             datetime(2000, 10, 30, 15, 40),\n         )\n \n         self.assertEqual(\n-            converter.toFieldValue(\'21-10-30 15:40\'),\n+            converter.toFieldValue(\'21-10-30T15:40\'),\n             datetime(21, 10, 30, 15, 40),\n         )\n \n@@ -369,12 +330,12 @@ def test_data_converter(self):\n \n         self.assertEqual(\n             converter.toWidgetValue(datetime(2000, 10, 30, 15, 40)),\n-            \'2000-10-30 15:40\',\n+            \'2000-10-30T15:40\',\n         )\n \n         self.assertEqual(\n             converter.toWidgetValue(datetime(21, 10, 30, 15, 40)),\n-            \'21-10-30 15:40\',\n+            \'21-10-30T15:40\',\n         )\n \n     def test_data_converter__no_timezone(self):\n@@ -390,7 +351,7 @@ def test_data_converter__no_timezone(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             datetime(2013, 11, 13, 10, 20),\n         )\n \n@@ -412,7 +373,7 @@ def test_data_converter__timezone_id(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n         )\n \n@@ -435,7 +396,7 @@ def test_data_converter__timezone_callback(self):\n \n         converter = DatetimeWidgetConverter(self.field, self.widget)\n         self.assertEqual(\n-            converter.toFieldValue(\'2013-11-13 10:20\'),\n+            converter.toFieldValue(\'2013-11-13T10:20\'),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n         )\n \n@@ -444,8 +405,8 @@ def test_data_converter__timezone_callback(self):\n         self.widget.default_timezone = None\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import DatetimeWidget\n         from plone.app.z3cform.widget import DatetimeFieldWidget\n+        from plone.app.z3cform.widget import DatetimeWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = DatetimeFieldWidget(field, request)\n@@ -454,6 +415,55 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n \n+class TimeWidgetTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        from plone.app.z3cform.widget import TimeWidget\n+\n+        self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n+        self.field = Time(__name__=\'timefield\')\n+        self.field.required = False\n+        self.widget = TimeWidget(self.request)\n+        self.widget.field = self.field\n+\n+    def test_widget(self):\n+        self.assertIn("<input type=\\"time\\"", self.widget.render())\n+\n+    def test_data_converter(self):\n+        from plone.app.z3cform.converters import TimeWidgetConverter\n+        converter = TimeWidgetConverter(self.field, self.widget)\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'\'),\n+            converter.field.missing_value,\n+        )\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'15:40\'),\n+            time(15, 40),\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue(converter.field.missing_value),\n+            \'\',\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue(time(15, 40)),\n+            \'15:40\',\n+        )\n+\n+    def test_fieldwidget(self):\n+        from plone.app.z3cform.widget import TimeFieldWidget\n+        from plone.app.z3cform.widget import TimeWidget\n+        field = Mock(__name__=\'field\', title=u\'\', required=True)\n+        request = Mock()\n+        widget = TimeFieldWidget(field, request)\n+        self.assertTrue(isinstance(widget, TimeWidget))\n+        self.assertIs(widget.field, field)\n+        self.assertIs(widget.request, request)\n+\n+\n class SelectWidgetTests(unittest.TestCase):\n \n     def setUp(self):\n@@ -462,6 +472,7 @@ def setUp(self):\n \n         # ITerms Adapters are needed for data converter\n         from z3c.form import term\n+\n         import zope.component\n         zope.component.provideAdapter(term.CollectionTerms)\n         zope.component.provideAdapter(term.CollectionTermsVocabulary)\n@@ -523,7 +534,7 @@ def test_widget(self):\n             {\n                 \'multiple\': True,\n                 \'name\': None,\n-                \'pattern_options\': {\'separator\': \';\', \'multiple\': True},\n+                \'pattern_options\': {\'separator\': \';\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (),\n                 \'items\': [\n@@ -541,9 +552,7 @@ def test_widget(self):\n             {\n                 \'multiple\': True,\n                 \'name\': None,\n-                \'pattern_options\': {\'allowClear\': True,\n-                                    \'separator\': \';\',\n-                                    \'multiple\': True},\n+                \'pattern_options\': {\'allowClear\': True, \'separator\': \';\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (),\n                 \'items\': [\n@@ -560,9 +569,7 @@ def test_widget(self):\n             {\n                 \'multiple\': True,\n                 \'name\': None,\n-                \'pattern_options\': {\'allowClear\': True,\n-                                    \'separator\': \';\',\n-                                    \'multiple\': True},\n+                \'pattern_options\': {\'allowClear\': True, \'separator\': \';\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (\'one\'),\n                 \'items\': [\n@@ -589,7 +596,7 @@ def test_widget_list_orderable(self):\n                 \'multiple\': True,\n                 \'name\': None,\n                 \'pattern_options\': {\n-                    \'orderable\': True, \'multiple\': True, \'separator\': \'.\'},\n+                    \'orderable\': True, \'separator\': \'.\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (),\n                 \'items\': [\n@@ -615,7 +622,7 @@ def test_widget_tuple_orderable(self):\n                 \'multiple\': True,\n                 \'name\': None,\n                 \'pattern_options\': {\n-                    \'orderable\': True, \'multiple\': True, \'separator\': \';\'},\n+                    \'orderable\': True, \'separator\': \';\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (),\n                 \'items\': [\n@@ -641,8 +648,7 @@ def test_widget_set_not_orderable(self):\n             {\n                 \'multiple\': True,\n                 \'name\': None,\n-                \'pattern_options\': {\n-                    \'multiple\': True, \'separator\': \';\'},\n+                \'pattern_options\': {\'separator\': \';\'},\n                 \'pattern\': \'select2\',\n                 \'value\': (),\n                 \'items\': [\n@@ -669,8 +675,8 @@ def test_widget_extract(self):\n         self.assertEqual(widget.extract(), \'one;two\')\n \n     def test_data_converter_list(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = List(\n             __name__=\'listfield\',\n@@ -715,8 +721,8 @@ def test_data_converter_list(self):\n         )\n \n     def test_data_converter_tuple(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = Tuple(\n             __name__=\'tuplefield\',\n@@ -751,8 +757,8 @@ def test_data_converter_tuple(self):\n         )\n \n     def test_data_converter_handles_empty_value(self):\n-        from plone.app.z3cform.widget import SelectWidget\n         from plone.app.z3cform.converters import SelectWidgetConverter\n+        from plone.app.z3cform.widget import SelectWidget\n \n         field = Tuple(__name__=\'tuplefield\',\n                       value_type=Choice(__name__=\'selectfield\',\n@@ -771,8 +777,8 @@ def test_widget_optgroup(self):\n         """\n         If the widget vocabulary is a mapping <optgroup>\'s are rendered.\n         """\n-        from z3c.form import term\n         from plone.app.z3cform.widget import SelectWidget\n+        from z3c.form import term\n         widget = SelectWidget(self.request)\n         widget.field = Choice(vocabulary=vocabulary.TreeVocabulary.fromDict({\n             (\'foo_group\', \'Foo Group\'): {\n@@ -932,8 +938,8 @@ def test_widget_addform_url_on_addform(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n         widget = AjaxSelectWidget(self.request)\n         form = Mock(parentForm=None)\n-        from zope.interface import directlyProvides  # noqa\n         from z3c.form.interfaces import IAddForm\n+        from zope.interface import directlyProvides  # noqa\n         directlyProvides(form, IAddForm)  # noqa\n         form.request = {\'URL\': \'http://addform_url\'}\n         widget.form = form\n@@ -962,8 +968,8 @@ def test_widget_addform_url_on_addform(self):\n         )\n \n     def test_data_converter_list(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = List(__name__=\'listfield\', value_type=TextLine())\n         widget = AjaxSelectWidget(self.request)\n@@ -991,8 +997,8 @@ def test_data_converter_list(self):\n         )\n \n     def test_data_converter_collection_with_vocabulary(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = Tuple(\n             __name__=\'listfield\',\n@@ -1025,8 +1031,8 @@ def test_data_converter_collection_with_vocabulary(self):\n         )\n \n     def test_data_converter_tuple(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n \n         field = Tuple(__name__=\'tuplefield\', value_type=TextLine())\n         widget = AjaxSelectWidget(self.request)\n@@ -1054,8 +1060,8 @@ def test_data_converter_tuple(self):\n         )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         request = Mock()\n         widget = AjaxSelectFieldWidget(field, request)\n@@ -1064,8 +1070,8 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n     def test_fieldwidget_sequence(self):\n-        from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.widget import AjaxSelectFieldWidget\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         vocabulary = Mock()\n         request = Mock()\n@@ -1203,8 +1209,8 @@ def test_related_items_widget(self):\n         )\n \n     def test_related_items_widget_nav_root(self):\n-        from plone.app.z3cform.widget import RelatedItemsWidget\n         from plone.app.layout.navigation.interfaces import INavigationRoot\n+        from plone.app.z3cform.widget import RelatedItemsWidget\n         EXPECTED_ROOT_PATH = \'/plone\'\n         EXPECTED_ROOT_URL = \'http://nohost/plone\'\n         EXPECTED_BASE_PATH = \'/plone/subfolder\'\n@@ -1274,8 +1280,8 @@ def test_related_items_widget_display_template(self):\n         source.multiple = [RelationValue(intids.getId(target)), RelationValue(intids.getId(doc))]\n \n         # Update relations\n-        from zope.lifecycleevent import ObjectModifiedEvent\n         from zope.event import notify\n+        from zope.lifecycleevent import ObjectModifiedEvent\n         notify(ObjectModifiedEvent(source))\n         default_view = source.restrictedTraverse(\'@@view\')\n         default_view.update()\n@@ -1370,8 +1376,7 @@ def test_multiple_selection(self):\n         )\n \n     def test_converter_RelationChoice(self):\n-        from plone.app.z3cform.converters import \\\n-            RelationChoiceRelatedItemsWidgetConverter\n+        from plone.app.z3cform.converters import RelationChoiceRelatedItemsWidgetConverter\n         brain = Mock(getObject=Mock(return_value=\'obj\'))\n         portal_catalog = Mock(return_value=[brain])\n         widget = Mock()\n@@ -1467,8 +1472,8 @@ def test_converter_List_of_Choice(self):\n             )\n \n     def test_fieldwidget(self):\n-        from plone.app.z3cform.widget import RelatedItemsWidget\n         from plone.app.z3cform.widget import RelatedItemsFieldWidget\n+        from plone.app.z3cform.widget import RelatedItemsWidget\n         field = Mock(__name__=\'field\', title=u\'\', required=True)\n         vocabulary = Mock()\n         request = Mock()\n@@ -1587,8 +1592,8 @@ def test_widget_params_different_contexts(self):\n         )\n \n     def test_widget_values(self):\n-        from plone.app.z3cform.widget import RichTextWidget\n         from plone.app.textfield.value import RichTextValue\n+        from plone.app.z3cform.widget import RichTextWidget\n \n         widget = FieldWidget(self.field, RichTextWidget(self.request))\n         # set the context so we can get tinymce settings\n@@ -1655,8 +1660,8 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):\n         if IMarkupSchema:\n             # if not, don\'t run this test\n             self._set_mimetypes(allowed=(\'text/html\', \'text/plain\'))\n-            from plone.app.z3cform.widget import RichTextWidget\n             from plone.app.textfield.value import RichTextValue\n+            from plone.app.z3cform.widget import RichTextWidget\n             widget = FieldWidget(self.field, RichTextWidget(self.request))\n             # set the context so we can get tinymce settings\n             widget.context = self.portal\n@@ -1770,8 +1775,8 @@ def test_link_widget__extract_email_including_mailto(self):\n         )\n \n     def test_link_widget__data_converter(self):\n-        from plone.app.z3cform.widget import LinkWidget\n         from plone.app.z3cform.converters import LinkWidgetDataConverter\n+        from plone.app.z3cform.widget import LinkWidget\n \n         field = TextLine(__name__=\'linkfield\')\n         widget = LinkWidget(self.request)\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 6a4ed18..e16eb9f 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -4,7 +4,6 @@\n from lxml import etree\n from OFS.interfaces import ISimpleItem\n from plone.app.contentlisting.interfaces import IContentListing\n-from plone.app.event.base import first_weekday\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n from plone.app.vocabularies.terms import TermWithDescription\n@@ -33,6 +32,7 @@\n from plone.app.z3cform.interfaces import IRichTextWidgetInputModeRenderer\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n+from plone.app.z3cform.interfaces import ITimeWidget\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import closest_content\n from plone.registry.interfaces import IRegistry\n@@ -133,16 +133,22 @@ def is_subform_widget(self):\n \n \n @implementer_only(IDateWidget)\n-class DateWidget(BaseWidget, HTMLInputWidget):\n+class DateWidget(BaseWidget, z3cform_TextWidget):\n     """Date widget for z3c.form."""\n \n-    _base = InputWidget\n+    _base_type = \'date\'\n     _converter = DateWidgetConverter\n     _formater = \'date\'\n \n-    pattern = \'pickadate\'\n+    pattern = \'date-picker\'\n     pattern_options = BaseWidget.pattern_options.copy()\n \n+    def _base(self, **kw):\n+        return InputWidget(\n+            type=self._base_type,\n+            **kw,\n+        )\n+\n     def _base_args(self):\n         """Method which will calculate _base class arguments.\n \n@@ -177,6 +183,7 @@ def render(self):\n         :rtype: string\n         """\n         if self.mode != \'display\':\n+            self.addClass("form-control")\n             return super(DateWidget, self).render()\n \n         if not self.value:\n@@ -200,7 +207,7 @@ def render(self):\n \n \n @implementer_only(IDatetimeWidget)\n-class DatetimeWidget(DateWidget, HTMLInputWidget):\n+class DatetimeWidget(DateWidget):\n     """Datetime widget for z3c.form.\n \n     :param default_timezone: A Olson DB/pytz timezone identifier or a callback\n@@ -208,43 +215,32 @@ class DatetimeWidget(DateWidget, HTMLInputWidget):\n     :type default_timezone: String or callback\n \n     """\n-\n+    _base_type = \'datetime-local\'\n     _converter = DatetimeWidgetConverter\n     _formater = \'dateTime\'\n \n-    pattern_options = DateWidget.pattern_options.copy()\n-\n+    pattern = \'datetime-picker\'\n     default_timezone = None\n \n-    def _base_args(self):\n-        """Method which will calculate _base class arguments.\n-\n-        Returns (as python dictionary):\n-            - `pattern`: pattern name\n-            - `pattern_options`: pattern options\n-            - `name`: field name\n-            - `value`: field value\n \n-        :returns: Arguments which will be passed to _base\n-        :rtype: dict\n-        """\n-        args = super(DatetimeWidget, self)._base_args()\n+@implementer_only(ITimeWidget)\n+class TimeWidget(BaseWidget, z3cform_TextWidget):\n \n-        if args[\'value\'] and len(args[\'value\'].split(\' \')) == 1:\n-            args[\'value\'] += \' 00:00\'\n+    pattern = \'\'\n \n-        args.setdefault(\'pattern_options\', {})\n-        if \'time\' in args[\'pattern_options\']:\n-            # Time gets set in parent class to false. Remove.\n-            del args[\'pattern_options\'][\'time\']\n-        if \'time\' in self.pattern_options:\n-            # Re-apply custom set time options.\n-            args[\'pattern_options\'][\'time\'] = self.pattern_options[\'time\']\n-        args[\'pattern_options\'] = dict_merge(\n-            get_datetime_options(self.request),\n-            args[\'pattern_options\'])\n+    def _base(self, **kw):\n+        return InputWidget(\n+            type="time",\n+            name=self.name,\n+            value=(self.request.get(self.name,\n+                self.value) or u\'\').strip(),\n+            **kw,\n+        )\n \n-        return args\n+    def render(self):\n+        if self.mode != \'display\':\n+            self.addClass("form-control")\n+        return super(TimeWidget, self).render()\n \n \n @implementer_only(ISelectWidget)\n@@ -307,7 +303,7 @@ def _base_args(self):\n \n         options = args.setdefault(\'pattern_options\', {})\n         if self.multiple or ICollection.providedBy(self.field):\n-            options[\'multiple\'] = args[\'multiple\'] = self.multiple = True\n+            args[\'multiple\'] = self.multiple = True\n \n         # ISequence represents an orderable collection\n         if ISequence.providedBy(self.field) or self.orderable:\n@@ -866,13 +862,7 @@ def extract(self, default=NO_VALUE):\n \n @implementer(IFieldWidget)\n def DateFieldWidget(field, request):\n-    widget = FieldWidget(field, DateWidget(request))\n-    widget.pattern_options.setdefault(\'date\', {})\n-    try:\n-        widget.pattern_options[\'date\'][\'firstDay\'] = first_weekday()\n-    except ComponentLookupError:\n-        pass\n-    return widget\n+    return FieldWidget(field, DateWidget(request))\n \n \n @implementer(IFieldWidget)\n@@ -880,6 +870,11 @@ def DatetimeFieldWidget(field, request):\n     return FieldWidget(field, DatetimeWidget(request))\n \n \n+@implementer(IFieldWidget)\n+def TimeFieldWidget(field, request):\n+    return FieldWidget(field, TimeWidget(request))\n+\n+\n @implementer(IFieldWidget)\n def SelectFieldWidget(field, request):\n     return FieldWidget(field, SelectWidget(request))\ndiff --git a/plone/app/z3cform/widget.zcml b/plone/app/z3cform/widget.zcml\nindex c4989e0..3e61eef 100644\n--- a/plone/app/z3cform/widget.zcml\n+++ b/plone/app/z3cform/widget.zcml\n@@ -121,25 +121,33 @@\n     <require permission="zope.Public"\n              interface=".interfaces.IDateWidget" />\n   </class>\n-  <class class="zope.schema._field.Date">\n-    <implements interface=".interfaces.IDateField"/>\n-  </class>\n+\n   <adapter\n       factory=".widget.DateFieldWidget"\n-      for=".interfaces.IDateField\n+      for="zope.schema.interfaces.IDate\n            plone.app.z3cform.interfaces.IPloneFormLayer" />\n \n   <class class=".widget.DatetimeWidget">\n     <require permission="zope.Public"\n              interface=".interfaces.IDatetimeWidget" />\n   </class>\n-  <class class="zope.schema._field.Datetime">\n-    <implements interface=".interfaces.IDatetimeField"/>\n+\n+  <adapter\n+      factory=".widget.DatetimeFieldWidget"\n+      for="zope.schema.interfaces.IDatetime\n+           plone.app.z3cform.interfaces.IPloneFormLayer"\n+      />\n+\n+  <class class=".widget.TimeWidget">\n+    <require permission="zope.Public"\n+             interface=".interfaces.ITimeWidget" />\n   </class>\n \n-  <adapter factory=".widget.DatetimeFieldWidget"\n-           for=".interfaces.IDatetimeField\n-                plone.app.z3cform.interfaces.IPloneFormLayer" />\n+  <adapter\n+      factory=".widget.TimeFieldWidget"\n+      for="zope.schema.interfaces.ITime\n+           plone.app.z3cform.interfaces.IPloneFormLayer"\n+      />\n \n   <adapter factory=".widget.RelatedItemsFieldWidget"\n            for="z3c.relationfield.interfaces.IRelationChoice\n@@ -176,6 +184,14 @@\n       template="templates/text_input.pt"\n       />\n \n+  <z3c:widgetTemplate\n+      mode="input"\n+      field="zope.schema.interfaces.IDatetime"\n+      widget=".interfaces.IDatetimeWidget"\n+      layer=".interfaces.IPloneFormLayer"\n+      template="templates/text_input.pt"\n+      />\n+\n   <z3c:widgetTemplate\n       mode="input"\n       widget="z3c.form.interfaces.ITextAreaWidget"\n'

