Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-08-11T07:59:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/05ebfbc459007ffa5ec7f0a3347cd400f9b83ec7

add converter to use a date widget on a datetime field

Files changed:
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py

b'diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex d553e2a..9c6e64c 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -79,6 +79,7 @@\n \n   <adapter factory=".converters.DatetimeWidgetConverter" />\n   <adapter factory=".converters.DateWidgetConverter" />\n+  <adapter factory=".converters.DateWidgetToDatetimeConverter" />\n   <adapter factory=".converters.TimeWidgetConverter" />\n   <adapter factory=".converters.SelectWidgetConverter" />\n   <adapter factory=".converters.SequenceSelectWidgetConverter" />\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 9bff58e..deb8886 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -82,9 +82,9 @@ def toWidgetValue(self, value):\n         if value is self.field.missing_value:\n             return ""\n         return (\n-            "{value.year:}-{value.month:02}-{value.day:02}T"\n-            "{value.hour:02}:{value.minute:02}"\n-        ).format(value=value)\n+            f"{value.year:}-{value.month:02}-{value.day:02}T"\n+            f"{value.hour:02}:{value.minute:02}"\n+        )\n \n     def toFieldValue(self, value):\n         """Converts from widget value to field.\n@@ -120,6 +120,53 @@ def toFieldValue(self, value):\n             ret = tzinfo.localize(ret)\n         return ret\n \n+@adapter(IDatetime, IDateWidget)\n+class DateWidgetToDatetimeConverter(BaseDataConverter):\n+    """Data converter for date widget on datetime fields."""\n+\n+    def toWidgetValue(self, value):\n+        """Converts from field value to widget.\n+\n+        :param value: Field value.\n+        :type value: datetime\n+\n+        :returns: Datetime in format `Y-m-d`\n+        :rtype: string\n+        """\n+        if value is self.field.missing_value:\n+            return ""\n+        return f"{value.year:}-{value.month:02}-{value.day:02}"\n+\n+    def toFieldValue(self, value):\n+        """Converts from widget value to field.\n+\n+        :param value: Value inserted by datetime widget.\n+        :type value: string\n+\n+        :returns: `datetime.datetime` object.\n+        :rtype: datetime\n+        """\n+        if not value:\n+            return self.field.missing_value\n+        tmp = value.split("T")\n+        value = value.split("-")\n+        if len(value) != 3:\n+            return self.field.missing_value\n+        value += ["00", "00"]\n+\n+        # TODO: respect the selected zone from the widget and just fall back\n+        # to default_zone\n+        default_zone = self.widget.default_timezone\n+        zone = (\n+            default_zone(self.widget.context)\n+            if safe_callable(default_zone)\n+            else default_zone\n+        )\n+        ret = datetime(*map(int, value))\n+        if zone:\n+            tzinfo = pytz.timezone(zone)\n+            ret = tzinfo.localize(ret)\n+        return ret\n \n @adapter(ITime, ITimeWidget)\n class TimeWidgetConverter(BaseDataConverter):\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-08-11T09:21:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/dc935117e137d6b3cf3bf72061c5f514696dd907

Enable default_timezone for converter on datewidget and add default_time

Files changed:
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex deb8886..cf3dabe 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -104,7 +104,13 @@ def toFieldValue(self, value):\n         if len(tmp) == 2 and ":" in tmp[1]:\n             value += tmp[1].split(":")\n         else:\n-            value += ["00", "00"]\n+            default_time = self.widget.default_time\n+            default_time = (\n+                default_time(self.widget.context)\n+                if safe_callable(default_time)\n+                else default_time\n+            )\n+            value += default_time.split(":")\n \n         # TODO: respect the selected zone from the widget and just fall back\n         # to default_zone\n@@ -148,11 +154,17 @@ def toFieldValue(self, value):\n         """\n         if not value:\n             return self.field.missing_value\n-        tmp = value.split("T")\n         value = value.split("-")\n         if len(value) != 3:\n             return self.field.missing_value\n-        value += ["00", "00"]\n+\n+        default_time = self.widget.default_time\n+        default_time = (\n+            default_time(self.widget.context)\n+            if safe_callable(default_time)\n+            else default_time\n+        )\n+        value += default_time.split(":")\n \n         # TODO: respect the selected zone from the widget and just fall back\n         # to default_zone\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 96e186b..13ca68a 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -127,12 +127,25 @@ def is_subform_widget(self):\n \n @implementer_only(IDateWidget)\n class DateWidget(BaseWidget, z3cform_TextWidget):\n-    """Date widget for z3c.form."""\n+    """Date widget for z3c.form.\n \n+    :param default_timezone: A Olson DB/pytz timezone identifier or a callback\n+                             returning such an identifier.\n+    :type default_timezone: String or callback\n+\n+    :param default_time: Time used by converter as fallback if no time was set in UI.\n+    :type default_time: String or callback\n+\n+    The default_timezone and default_time arguments are only used if a datewidget is\n+    used on a datetime field. If used on a date field they are ignored.\n+    """\n     _base_type = "date"\n     _converter = DateWidgetConverter\n     _formater = "date"\n \n+    default_timezone = None\n+    default_time = "00:00:00"\n+\n     pattern = "date-picker"\n     pattern_options = BaseWidget.pattern_options.copy()\n \n@@ -205,14 +218,18 @@ class DatetimeWidget(DateWidget):\n                              returning such an identifier.\n     :type default_timezone: String or callback\n \n+    :param default_time: Time used by converter as fallback if no time was set in UI.\n+    :type default_time: String or callback\n     """\n \n     _base_type = "datetime-local"\n     _converter = DatetimeWidgetConverter\n     _formater = "dateTime"\n \n-    pattern = "datetime-picker"\n     default_timezone = None\n+    default_time = "00:00:00"\n+\n+    pattern = "datetime-picker"\n \n \n @implementer_only(ITimeWidget)\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-08-11T15:41:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/4298e7ae58855b6f66ede75e66479736ac8a0a30

document changes

Files changed:
A news/151.bugfix
A news/151.feature

b'diff --git a/news/151.bugfix b/news/151.bugfix\nnew file mode 100644\nindex 0000000..d0e7220\n--- /dev/null\n+++ b/news/151.bugfix\n@@ -0,0 +1 @@\n+Allow DateFieldWidget to be used on schema.datetime. See #151. [jensens]\ndiff --git a/news/151.feature b/news/151.feature\nnew file mode 100644\nindex 0000000..e141540\n--- /dev/null\n+++ b/news/151.feature\n@@ -0,0 +1 @@\n+Add `default_time` attribute/argument to Date- and DatetimeWidget to allow the converter to set a custom time when nothing was given. [jensens]\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-08-11T15:41:49+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/e6ec7538bdbd2e662f638353a39e9086c360a59d

Merge branch 'master' into datewidget-on-datetime

Files changed:
A news/152.bugfix
M plone/app/z3cform/widget.py

b'diff --git a/news/152.bugfix b/news/152.bugfix\nnew file mode 100644\nindex 0000000..6687a8a\n--- /dev/null\n+++ b/news/152.bugfix\n@@ -0,0 +1,3 @@\n+Removed formatting hack for dates before 1900. \n+This was fixed in Python 3.2. \n+[jensens]\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 13ca68a..a742b83 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -202,12 +202,7 @@ def render(self):\n             self._formater,\n             "short",\n         )\n-        if field_value.year > 1900:\n-            return formatter.format(field_value)\n-\n-        # due to fantastic datetime.strftime we need this hack\n-        # for now ctime is default\n-        return field_value.ctime()\n+        return formatter.format(field_value)\n \n \n @implementer_only(IDatetimeWidget)\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2022-08-13T17:05:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/6764d54f8bac5a20e9a9de58c9b865edabdcf6a6

Merge pull request #151 from plone/datewidget-on-datetime

add converter to use a date widget on a datetime field

Files changed:
A news/151.bugfix
A news/151.feature
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/news/151.bugfix b/news/151.bugfix\nnew file mode 100644\nindex 0000000..d0e7220\n--- /dev/null\n+++ b/news/151.bugfix\n@@ -0,0 +1 @@\n+Allow DateFieldWidget to be used on schema.datetime. See #151. [jensens]\ndiff --git a/news/151.feature b/news/151.feature\nnew file mode 100644\nindex 0000000..e141540\n--- /dev/null\n+++ b/news/151.feature\n@@ -0,0 +1 @@\n+Add `default_time` attribute/argument to Date- and DatetimeWidget to allow the converter to set a custom time when nothing was given. [jensens]\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex d553e2a..9c6e64c 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -79,6 +79,7 @@\n \n   <adapter factory=".converters.DatetimeWidgetConverter" />\n   <adapter factory=".converters.DateWidgetConverter" />\n+  <adapter factory=".converters.DateWidgetToDatetimeConverter" />\n   <adapter factory=".converters.TimeWidgetConverter" />\n   <adapter factory=".converters.SelectWidgetConverter" />\n   <adapter factory=".converters.SequenceSelectWidgetConverter" />\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 9bff58e..cf3dabe 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -82,9 +82,9 @@ def toWidgetValue(self, value):\n         if value is self.field.missing_value:\n             return ""\n         return (\n-            "{value.year:}-{value.month:02}-{value.day:02}T"\n-            "{value.hour:02}:{value.minute:02}"\n-        ).format(value=value)\n+            f"{value.year:}-{value.month:02}-{value.day:02}T"\n+            f"{value.hour:02}:{value.minute:02}"\n+        )\n \n     def toFieldValue(self, value):\n         """Converts from widget value to field.\n@@ -104,7 +104,13 @@ def toFieldValue(self, value):\n         if len(tmp) == 2 and ":" in tmp[1]:\n             value += tmp[1].split(":")\n         else:\n-            value += ["00", "00"]\n+            default_time = self.widget.default_time\n+            default_time = (\n+                default_time(self.widget.context)\n+                if safe_callable(default_time)\n+                else default_time\n+            )\n+            value += default_time.split(":")\n \n         # TODO: respect the selected zone from the widget and just fall back\n         # to default_zone\n@@ -120,6 +126,59 @@ def toFieldValue(self, value):\n             ret = tzinfo.localize(ret)\n         return ret\n \n+@adapter(IDatetime, IDateWidget)\n+class DateWidgetToDatetimeConverter(BaseDataConverter):\n+    """Data converter for date widget on datetime fields."""\n+\n+    def toWidgetValue(self, value):\n+        """Converts from field value to widget.\n+\n+        :param value: Field value.\n+        :type value: datetime\n+\n+        :returns: Datetime in format `Y-m-d`\n+        :rtype: string\n+        """\n+        if value is self.field.missing_value:\n+            return ""\n+        return f"{value.year:}-{value.month:02}-{value.day:02}"\n+\n+    def toFieldValue(self, value):\n+        """Converts from widget value to field.\n+\n+        :param value: Value inserted by datetime widget.\n+        :type value: string\n+\n+        :returns: `datetime.datetime` object.\n+        :rtype: datetime\n+        """\n+        if not value:\n+            return self.field.missing_value\n+        value = value.split("-")\n+        if len(value) != 3:\n+            return self.field.missing_value\n+\n+        default_time = self.widget.default_time\n+        default_time = (\n+            default_time(self.widget.context)\n+            if safe_callable(default_time)\n+            else default_time\n+        )\n+        value += default_time.split(":")\n+\n+        # TODO: respect the selected zone from the widget and just fall back\n+        # to default_zone\n+        default_zone = self.widget.default_timezone\n+        zone = (\n+            default_zone(self.widget.context)\n+            if safe_callable(default_zone)\n+            else default_zone\n+        )\n+        ret = datetime(*map(int, value))\n+        if zone:\n+            tzinfo = pytz.timezone(zone)\n+            ret = tzinfo.localize(ret)\n+        return ret\n \n @adapter(ITime, ITimeWidget)\n class TimeWidgetConverter(BaseDataConverter):\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 7f809db..a742b83 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -127,12 +127,25 @@ def is_subform_widget(self):\n \n @implementer_only(IDateWidget)\n class DateWidget(BaseWidget, z3cform_TextWidget):\n-    """Date widget for z3c.form."""\n+    """Date widget for z3c.form.\n \n+    :param default_timezone: A Olson DB/pytz timezone identifier or a callback\n+                             returning such an identifier.\n+    :type default_timezone: String or callback\n+\n+    :param default_time: Time used by converter as fallback if no time was set in UI.\n+    :type default_time: String or callback\n+\n+    The default_timezone and default_time arguments are only used if a datewidget is\n+    used on a datetime field. If used on a date field they are ignored.\n+    """\n     _base_type = "date"\n     _converter = DateWidgetConverter\n     _formater = "date"\n \n+    default_timezone = None\n+    default_time = "00:00:00"\n+\n     pattern = "date-picker"\n     pattern_options = BaseWidget.pattern_options.copy()\n \n@@ -200,14 +213,18 @@ class DatetimeWidget(DateWidget):\n                              returning such an identifier.\n     :type default_timezone: String or callback\n \n+    :param default_time: Time used by converter as fallback if no time was set in UI.\n+    :type default_time: String or callback\n     """\n \n     _base_type = "datetime-local"\n     _converter = DatetimeWidgetConverter\n     _formater = "dateTime"\n \n-    pattern = "datetime-picker"\n     default_timezone = None\n+    default_time = "00:00:00"\n+\n+    pattern = "datetime-picker"\n \n \n @implementer_only(ITimeWidget)\n'

