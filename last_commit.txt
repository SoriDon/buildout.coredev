Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-06-19T07:53:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/76d0344187c9d9c039086dad2ee375489ba81915

merge code from plone.login (includes additional cleanups)

Files changed:
A Products/CMFPlone/browser/login/__init__.py
A Products/CMFPlone/browser/login/configure.zcml
A Products/CMFPlone/browser/login/login.py
A Products/CMFPlone/browser/login/login_help.py
A Products/CMFPlone/browser/login/logout.py
A Products/CMFPlone/browser/login/password_reset.py
A Products/CMFPlone/browser/login/templates/explainPWResetTool.pt
A Products/CMFPlone/browser/login/templates/forced_password_change.pt
A Products/CMFPlone/browser/login/templates/initial_login_password_change.pt
A Products/CMFPlone/browser/login/templates/insufficient_privileges.pt
A Products/CMFPlone/browser/login/templates/logged_out.pt
A Products/CMFPlone/browser/login/templates/login.pt
A Products/CMFPlone/browser/login/templates/login_failsafe.pt
A Products/CMFPlone/browser/login/templates/login_help.pt
A Products/CMFPlone/browser/login/templates/mail_password_form.pt
A Products/CMFPlone/browser/login/templates/mail_password_response.pt
A Products/CMFPlone/browser/login/templates/mail_password_template.pt
A Products/CMFPlone/browser/login/templates/pwreset_expired.pt
A Products/CMFPlone/browser/login/templates/pwreset_finish.pt
A Products/CMFPlone/browser/login/templates/pwreset_form.pt
A Products/CMFPlone/browser/login/templates/pwreset_invalid.pt
A Products/CMFPlone/browser/login/templates/registered_notify_template.pt
A Products/CMFPlone/browser/login/templates/subform_render.pt
A Products/CMFPlone/browser/templates/plone-admin-logged-out.pt
A Products/CMFPlone/interfaces/login.py
A Products/CMFPlone/tests/LoginAndLogout.rst
A Products/CMFPlone/tests/emaillogin.rst
A Products/CMFPlone/tests/pwreset_browser.rst
A Products/CMFPlone/tests/search_form.rst
A Products/CMFPlone/tests/test_login_form.py
A Products/CMFPlone/tests/test_login_help.py
A Products/CMFPlone/tests/test_login_logout.py
A Products/CMFPlone/tests/test_login_views.py
A Products/CMFPlone/tests/test_redirect_after_login.py
M CHANGES.rst
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/tests/testControlPanelScripts.py
M Products/CMFPlone/tests/testCookieAuth.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/test_functional.py
M Products/CMFPlone/tests/test_mails.py
M Products/CMFPlone/tests/test_passwordreset.py
D Products/CMFPlone/browser/password_reset.py
D Products/CMFPlone/browser/templates/explainPWResetTool.pt
D Products/CMFPlone/browser/templates/mail_password_form.pt
D Products/CMFPlone/browser/templates/mail_password_response.pt
D Products/CMFPlone/browser/templates/mail_password_template.pt
D Products/CMFPlone/browser/templates/plone-logged-out.pt
D Products/CMFPlone/browser/templates/pwreset_expired.pt
D Products/CMFPlone/browser/templates/pwreset_finish.pt
D Products/CMFPlone/browser/templates/pwreset_form.pt
D Products/CMFPlone/browser/templates/pwreset_invalid.pt
D Products/CMFPlone/browser/templates/registered_notify_template.pt
D Products/CMFPlone/skins/plone_login/external_login_return.cpt
D Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata
D Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt
D Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata
D Products/CMFPlone/skins/plone_login/insufficient_privileges.pt
D Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata
D Products/CMFPlone/skins/plone_login/logged_in.cpy
D Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata
D Products/CMFPlone/skins/plone_login/logged_out.cpt
D Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata
D Products/CMFPlone/skins/plone_login/login.py
D Products/CMFPlone/skins/plone_login/login_change_password.cpy
D Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_failed.cpt
D Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_form.cpt
D Products/CMFPlone/skins/plone_login/login_form.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_form_validate.vpy
D Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata
D Products/CMFPlone/skins/plone_login/login_initial.cpy
D Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_next.cpy
D Products/CMFPlone/skins/plone_login/login_next.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_password.cpt
D Products/CMFPlone/skins/plone_login/login_password.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_password_validate.vpy
D Products/CMFPlone/skins/plone_login/login_success.pt
D Products/CMFPlone/skins/plone_login/login_success.pt.metadata
D Products/CMFPlone/skins/plone_login/logout.cpy
D Products/CMFPlone/skins/plone_login/registered.pt
D Products/CMFPlone/skins/plone_login/registered.pt.metadata
D Products/CMFPlone/skins/plone_login/require_login.py
D Products/CMFPlone/tests/LoginAndLogout.txt
D Products/CMFPlone/tests/emaillogin.txt
D Products/CMFPlone/tests/pwreset_browser.txt
D Products/CMFPlone/tests/search_form.txt
D Products/CMFPlone/tests/testLoggedIn.py
D Products/CMFPlone/tests/testSSOLogin.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e1f241299..190e842e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,6 +10,15 @@ Changelog\n \n Breaking changes:\n \n+- New browser view based login code - merged from plone.login (credits to esteele, pbauer, agitator, jensens, et al).\n+  `portal_skins/plone_login` is now gone, see PLIP #2092.\n+  Also, password reset view moved to login subfolder to keep things together.\n+  Some testbrowser based tests needed changes because of z3c.form based login form .\n+  The Plone specific, rarely used cross site __ac cookie SSO feature/hack was removed.\n+  In case somebody needs this, please make it an addon package.\n+  Better use a field proven, more secure way, like OAuth2, Shibboleth or someting similar.\n+  [jensens, et al]\n+\n - Adapt tests to `Products.GenericSetup >= 2.0` thus requiring at least that\n   version.\n   [icemac]\ndiff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py\nindex dd14dd139..826b094f0 100644\n--- a/Products/CMFPlone/browser/admin.py\n+++ b/Products/CMFPlone/browser/admin.py\n@@ -21,7 +21,6 @@\n from six.moves.urllib import parse\n from zope.component import adapts\n from zope.component import getAllUtilitiesRegisteredFor\n-from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -98,11 +97,14 @@ def __call__(self, came_from=None):\n             # see if this is a relative url or an absolute\n             if len(parse.urlparse(came_from)[1]) == 0:\n                 # No host specified, so url is relative.  Get an absolute url.\n-                # Note: \'\\\\domain.org\' is not recognised as host, which is good.\n-                came_from = parse.urljoin(self.context.absolute_url() + \'/\', came_from)\n+                # Note: \'\\\\domain.org\' is not recognised as host,\n+                # which is good.\n+                came_from = parse.urljoin(\n+                    self.context.absolute_url() + \'/\', came_from,\n+                )\n             elif not came_from.startswith(self.context.absolute_url()):\n-                # Note: we cannot use portal_url.isURLInPortal here, because we are\n-                # not in a Plone portal, but in the Zope root.\n+                # Note: we cannot use portal_url.isURLInPortal here, because we\n+                # are not in a Plone portal, but in the Zope root.\n                 came_from = None\n         if came_from is None:\n             came_from = self.context.absolute_url()\n@@ -112,7 +114,7 @@ def __call__(self, came_from=None):\n class RootLogout(BrowserView):\n     """ @@plone-root-logout """\n \n-    logout = ViewPageTemplateFile(\'templates/plone-logged-out.pt\')\n+    logout = ViewPageTemplateFile(\'templates/plone-admin-logged-out.pt\')\n \n     def __call__(self):\n         response = self.request.response\ndiff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml\nindex 2383aae72..a6bf92793 100644\n--- a/Products/CMFPlone/browser/configure.zcml\n+++ b/Products/CMFPlone/browser/configure.zcml\n@@ -4,6 +4,7 @@\n            xmlns:zcml="http://namespaces.zope.org/zcml"\n            i18n_domain="plone">\n \n+  <include package=".login" />\n   <include file="admin.zcml" />\n   <include file="caching.zcml" zcml:condition="installed z3c.caching"/>\n \n@@ -232,51 +233,6 @@\n       template="templates/colophon.pt"\n       />\n \n-  <browser:page\n-      name="mail_password_template"\n-      for="*"\n-      class=".password_reset.PasswordResetToolView"\n-      template="templates/mail_password_template.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="registered_notify_template"\n-      for="*"\n-      class=".password_reset.PasswordResetToolView"\n-      template="templates/registered_notify_template.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="mail_password_form"\n-      for="*"\n-      template="templates/mail_password_form.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="mail_password_response"\n-      for="*"\n-      template="templates/mail_password_response.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="passwordreset"\n-      for="*"\n-      class=".password_reset.PasswordResetView"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="explainPWResetTool"\n-      for="Products.CMFPlone.interfaces.IPWResetTool"\n-      class=".password_reset.ExplainPWResetToolView"\n-      template="templates/explainPWResetTool.pt"\n-      permission="zope2.ViewManagementScreens"\n-      />\n-\n   <browser:page\n       name="index.html"\n       for="Exception"\ndiff --git a/Products/CMFPlone/browser/login/__init__.py b/Products/CMFPlone/browser/login/__init__.py\nnew file mode 100644\nindex 000000000..40a96afc6\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/Products/CMFPlone/browser/login/configure.zcml b/Products/CMFPlone/browser/login/configure.zcml\nnew file mode 100644\nindex 000000000..e56bbb0b7\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/configure.zcml\n@@ -0,0 +1,147 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n+\n+    <browser:page\n+        name="insufficient-privileges"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.InsufficientPrivilegesView"\n+        template="templates/insufficient_privileges.pt"\n+        />\n+\n+\n+    <!-- LOGIN: form with plone page around, can be rendered in modal -->\n+    <browser:page\n+        name="login"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.LoginForm"\n+        template="templates/login.pt"\n+        />\n+\n+    <!-- LOGIN: fail safe, simplified and unstyled form -->\n+    <browser:page\n+        name="failsafe_login"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.FailsafeLoginForm"\n+        template="templates/login_failsafe.pt"\n+        />\n+\n+    <!-- LOGIN: BBB name, same as \'login\' do not use them to refer to the login -->\n+    <browser:page\n+        name="login_form"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.LoginForm"\n+        template="templates/login.pt"\n+        />\n+\n+    <!-- LOGIN: BBB name, same as \'failsafe_login\' do not use it any longer-->\n+    <browser:page\n+        name="failsafe_login_form"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.FailsafeLoginForm"\n+        template="templates/login_failsafe.pt"\n+        />\n+\n+    <browser:page\n+        name="login-help"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login_help.LoginHelpForm"\n+        template="templates/login_help.pt"\n+        />\n+\n+\n+    <browser:page\n+        name="logout"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".logout.LogoutView"\n+        />\n+\n+\n+    <browser:page\n+        name="logged-out"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        template="templates/logged_out.pt"\n+        class=".logout.LoggedOutView"\n+        />\n+\n+    <browser:page\n+        name="require_login"\n+        for="*"\n+        permission="zope.Public"\n+        class=".login.RequireLoginView"\n+        />\n+\n+    <browser:page\n+        name="initial-login-password-change"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        class=".login.InitialLoginPasswordChange"\n+        permission="cmf.SetOwnPassword"\n+        template="templates/initial_login_password_change.pt"\n+        />\n+\n+    <browser:page\n+        name="forced-password-change"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        class=".login.ForcedPasswordChange"\n+        permission="cmf.SetOwnPassword"\n+        template="templates/forced_password_change.pt"\n+        />\n+\n+    <browser:page\n+        name="mail_password_form"\n+        for="*"\n+        template="templates/mail_password_form.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="mail_password_response"\n+        for="*"\n+        template="templates/mail_password_response.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="passwordreset"\n+        for="*"\n+        class=".password_reset.PasswordResetView"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="mail_password_template"\n+        for="*"\n+        class=".password_reset.PasswordResetToolView"\n+        template="templates/mail_password_template.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="registered_notify_template"\n+        for="*"\n+        class=".password_reset.PasswordResetToolView"\n+        template="templates/registered_notify_template.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="explainPWResetTool"\n+        for="Products.CMFPlone.interfaces.IPWResetTool"\n+        class=".password_reset.ExplainPWResetToolView"\n+        template="templates/explainPWResetTool.pt"\n+        permission="zope2.ViewManagementScreens"\n+        />\n+\n+</configure>\ndiff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nnew file mode 100644\nindex 000000000..811f47705\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -0,0 +1,294 @@\n+# -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from plone.app.users.browser.passwordpanel import PasswordPanel\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IForcePasswordChange\n+from Products.CMFPlone.interfaces import IInitialLogin\n+from Products.CMFPlone.interfaces import ILoginForm\n+from Products.CMFPlone.interfaces import ILoginFormSchema\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from six.moves.urllib import parse\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from z3c.form.interfaces import HIDDEN_MODE\n+from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.component import queryUtility\n+from zope.interface import implementer\n+\n+\n+# TODO: Scale down this list now that we\'ve removed a lot of\n+# templates.\n+LOGIN_TEMPLATE_IDS = [\n+    \'localhost\',\n+    \'logged-out\',\n+    \'logged_in\',\n+    \'login\',\n+    \'login_failed\',\n+    \'login_form\',\n+    \'login_password\',\n+    \'login_success\',\n+    \'logout\',\n+    \'mail_password\',\n+    \'mail_password_form\',\n+    \'member_search_results\',\n+    \'pwreset_finish\',\n+    \'passwordreset\',\n+    \'register\',\n+    \'registered\',\n+    \'require_login\',\n+]\n+\n+\n+@implementer(ILoginForm)\n+class LoginForm(form.EditForm):\n+    """ Implementation of the login form """\n+\n+    fields = field.Fields(ILoginFormSchema)\n+\n+    id = \'LoginForm\'\n+    label = _(\'label_log_in\', default=u\'Log in\')\n+\n+    ignoreContext = True\n+    prefix = \'\'\n+\n+    def render(self):\n+        registry = queryUtility(IRegistry)\n+        ext_login_url = registry[\'plone.external_login_url\']\n+        if ext_login_url:\n+            return self._handle_external_login(ext_login_url)\n+        return self.index()\n+\n+    def _handle_external_login(self, url):\n+        """Handle login on this portal where login is external."""\n+        next_ = self.request.get(\'next\', None)\n+        portal_url = getToolByName(self.context, \'portal_url\')\n+        if next_ is not None and not portal_url.isURLInPortal(next_):\n+            next_ = None\n+        if next_ is not None:\n+            url = \'{0}?next={1}\'.format(url, next_)\n+        came_from = self.request.get(\'came_from\')\n+        if came_from:\n+            url = \'{0}&came_from={1}\'.format(url, came_from)\n+        self.request.response.redirect(url)\n+\n+    def _get_auth(self):\n+        try:\n+            return self.context.acl_users.credentials_cookie_auth\n+        except AttributeError:\n+            try:\n+                return self.context.cookie_authentication\n+            except AttributeError:\n+                pass\n+\n+    def updateWidgets(self):\n+        auth = self._get_auth()\n+\n+        if auth:\n+            fieldname_name = auth.get(\'name_cookie\', \'__ac_name\')\n+            fieldname_password = auth.get(\'pw_cookie\', \'__ac_password\')\n+        else:\n+            fieldname_name = \'__ac_name\'\n+            fieldname_password = \'__ac_password\'\n+\n+        self.fields[\'ac_name\'].__name__ = fieldname_name\n+        self.fields[\'ac_password\'].__name__ = fieldname_password\n+\n+        super(LoginForm, self).updateWidgets(prefix=\'\')\n+\n+        if self.use_email_as_login():\n+            self.widgets[fieldname_name].label = _(u\'label_email\',\n+                                                   default=u\'Email\')\n+        self.widgets[\'came_from\'].mode = HIDDEN_MODE\n+        self.widgets[\'came_from\'].value = self.get_came_from()\n+\n+    def get_came_from(self):\n+        came_from = self.request.get(\'came_from\', None)\n+        if not came_from:\n+            came_from = self.request.get(\'HTTP_REFERER\', None)\n+            if not came_from:\n+                return\n+        url_tool = getToolByName(self.context, \'portal_url\')\n+        if not url_tool.isURLInPortal(came_from):\n+            return\n+        came_from_path = parse.urlparse(came_from)[2]\n+        for login_template_id in LOGIN_TEMPLATE_IDS:\n+            if login_template_id in came_from_path:\n+                return\n+        return came_from\n+\n+    def updateActions(self):\n+        super(LoginForm, self).updateActions()\n+        self.actions[\'login\'].addClass(\'context\')\n+\n+    def _post_login(self):\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        member = membership_tool.getAuthenticatedMember()\n+        must_change_password = member.getProperty(\'must_change_password\', 0)\n+        login_time = member.getProperty(\'login_time\', \'2000/01/01\')\n+        if not isinstance(login_time, DateTime):\n+            login_time = DateTime(login_time)\n+        is_initial_login = login_time == DateTime(\'2000/01/01\')\n+\n+        membership_tool.loginUser(self.request)\n+        if is_initial_login:\n+            self.handle_initial_login()\n+\n+        if must_change_password:\n+            self.force_password_change()\n+        return is_initial_login\n+\n+    @button.buttonAndHandler(_(\'Log in\'), name=\'login\')\n+    def handleLogin(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        status_msg = IStatusMessage(self.request)\n+        if membership_tool.isAnonymousUser():\n+            self.request.response.expireCookie(\'__ac\', path=\'/\')\n+            if self.use_email_as_login():\n+                status_msg.addStatusMessage(\n+                    _(\n+                        u\'Login failed. Both email address and password are \'\n+                        u\'case sensitive, check that caps lock is not enabled.\'\n+                    ),\n+                    \'error\',\n+                )\n+            else:\n+                status_msg.addStatusMessage(\n+                    _(\n+                        u\'Login failed. Both login name and password are case \'\n+                        u\'sensitive, check that caps lock is not enabled.\'\n+                    ),\n+                    \'error\',\n+                )\n+            return\n+\n+        is_initial_login = self._post_login()\n+        status_msg.addStatusMessage(\n+            _(\n+                u\'you_are_now_logged_in\',\n+                default=u\'Welcome! You are now logged in.\',\n+            ),\n+            \'info\'\n+        )\n+\n+        came_from = data.get(\'came_from\', None)\n+        self.redirect_after_login(came_from, is_initial_login)\n+\n+    def handle_initial_login(self):\n+        handler = queryMultiAdapter(\n+            (self.context, self.request),\n+            IInitialLogin,\n+        )\n+        if handler:\n+            handler()\n+\n+    def force_password_change(self):\n+        handler = queryMultiAdapter(\n+            (self.context, self.request),\n+            IForcePasswordChange,\n+        )\n+        if handler:\n+            handler()\n+\n+    def redirect_after_login(self, came_from=None, is_initial_login=False):\n+        adapter = queryMultiAdapter(\n+            (self.context, self.request),\n+            IRedirectAfterLogin\n+        )\n+        if adapter:\n+            came_from = adapter(came_from, is_initial_login)\n+        if not came_from:\n+            came_from = self.context.absolute_url()\n+\n+        self.request.response.redirect(came_from)\n+\n+    def self_registration_enabled(self):\n+        registry = queryUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema,\n+            prefix=\'plone\'\n+        )\n+        return security_settings.enable_self_reg\n+\n+    def use_email_as_login(self):\n+        registry = queryUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema,\n+            prefix=\'plone\'\n+        )\n+        return security_settings.use_email_as_login\n+\n+\n+class FailsafeLoginForm(LoginForm):\n+\n+    def render(self):\n+        return self.index()\n+\n+\n+class RequireLoginView(BrowserView):\n+\n+    def __call__(self):\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request),\n+            name=\'plone_portal_state\',\n+        )\n+        portal = portal_state.portal()\n+        if portal_state.anonymous():\n+            url = \'{0:s}/login\'.format(portal.absolute_url())\n+            came_from = self.request.get(\'came_from\', None)\n+            if came_from:\n+                url += \'?came_from={0:s}\'.format(parse.quote(came_from))\n+        else:\n+            url = \'{0:s}/insufficient-privileges\'.format(portal.absolute_url())\n+\n+        self.request.response.redirect(url)\n+\n+\n+class InsufficientPrivilegesView(BrowserView):\n+\n+    def request_url(self):\n+        return self.request.get(\'came_from\')\n+\n+\n+class InitialLoginPasswordChange(PasswordPanel):\n+\n+    def render(self):\n+        return self.index()\n+\n+    @button.buttonAndHandler(\n+        _(u\'label_change_password\', default=u\'Change Password\'),\n+        name=\'reset_passwd\',\n+    )\n+    def action_reset_passwd(self, action):\n+        super(InitialLoginPasswordChange, self).action_reset_passwd(\n+            self, action)\n+        if not action.form.widgets.errors:\n+            self.request.response.redirect(self.context.portal_url())\n+\n+\n+class ForcedPasswordChange(PasswordPanel):\n+\n+    def render(self):\n+        return self.index()\n+\n+    @button.buttonAndHandler(\n+        _(u\'label_change_password\', default=u\'Change Password\'),\n+        name=\'reset_passwd\',\n+    )\n+    def action_reset_passwd(self, action):\n+        super(ForcedPasswordChange, self).action_reset_passwd(self, action)\n+        if not action.form.widgets.errors:\n+            membership_tool = getToolByName(self.context, \'portal_membership\')\n+            member = membership_tool.getAuthenticatedMember()\n+            member.setProperties(must_change_password=0)\n+            self.request.response.redirect(self.context.portal_url())\ndiff --git a/Products/CMFPlone/browser/login/login_help.py b/Products/CMFPlone/browser/login/login_help.py\nnew file mode 100644\nindex 000000000..f2b561760\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/login_help.py\n@@ -0,0 +1,232 @@\n+# -*- coding: utf-8 -*-\n+from email import message_from_string\n+from email.Header import Header\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import ILoginHelpForm\n+from Products.CMFPlone.interfaces import ILoginHelpFormSchema\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.statusmessages.interfaces import IStatusMessage\n+from smtplib import SMTPException\n+from smtplib import SMTPRecipientsRefused\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from zope.i18n import translate\n+from zope.interface import implementer\n+\n+import logging\n+\n+\n+SEND_USERNAME_TEMPLATE = _(u"mailtemplate_username_info", default=u"""From: {encoded_mail_sender}\n+To: {email}\n+Subject: Your username for {portal_url}\n+Content-Type: text/plain\n+Precedence: bulk\n+\n+Dear {fullname},\n+\n+You requested to be reminded of your username for {portal_url}.\n+Your username is: {login}\n+\n+\n+With kind regards,\n+\n+--\n+\n+{email_from_name}""")\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class RequestResetPassword(form.Form):\n+\n+    id = \'RequestResetPassword\'\n+    label = u\'\'\n+    fields = field.Fields(ILoginHelpFormSchema).select(\'reset_password\')\n+    ignoreContext = True\n+\n+    render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n+\n+    def updateWidgets(self):\n+        super(RequestResetPassword, self).updateWidgets()\n+        if self.use_email_as_login():\n+            self.widgets[\'reset_password\'].label = _(\n+                u\'label_email\',\n+                default=u\'Email\'\n+            )\n+\n+    @button.buttonAndHandler(\n+        _(u\'button_pwreset_reset_password\', default=u\'Reset your password\'),\n+        name=\'reset\'\n+    )\n+    def handleResetPassword(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        portal = getSite()\n+        regtool = getToolByName(portal, \'portal_registration\')\n+        try:\n+            regtool.mailPassword(data[\'reset_password\'], self.request)\n+        except ValueError as e:\n+            # Paranoia Warning!\n+            # We act as if a message has been sent to prevent probing Plone\n+            # for valid loginnames. Instead we log the error-message.\n+            log.info(\'Error while trying to send a reset-password notice to user {0}: {1}\'.format(data[\'reset_password\'], e))  # noqa: E501\n+            pass\n+\n+        IStatusMessage(self.request).addStatusMessage(\n+            _(u\'statusmessage_pwreset_password_mail_sent\', default=u\'An \'\n+              u\'email has been sent with instructions on how to reset your \'\n+              u\'password.\'), \'info\')\n+\n+    def use_email_as_login(self):\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema, prefix=\'plone\')\n+        return security_settings.use_email_as_login\n+\n+\n+class RequestUsername(form.Form):\n+\n+    id = \'RequestUsername\'\n+    label = u\'\'\n+    fields = field.Fields(ILoginHelpFormSchema).select(\'recover_username\')\n+    ignoreContext = True\n+\n+    render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n+\n+    @button.buttonAndHandler(\n+        _(u\'button_pwreset_get_username\', default=\'Get your username\'),\n+        name=\'get_username\'\n+    )\n+    def handleGetUsername(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        portal = getSite()\n+        pas = getToolByName(portal, \'acl_users\')\n+        email = data[\'recover_username\']\n+        results = pas.searchUsers(email=email, exact_match=True)\n+        send_email = True\n+        if not results:\n+            log.info(\'No user found for {0}\'.format(email))\n+            send_email = False\n+        if len(results) > 1:\n+            log.info(\'More than one user found for {0}\'.format(email))\n+            send_email = False\n+        if send_email:\n+            self.send_username(portal, results[0])\n+\n+        # Paranoia Warning!\n+        # Same as with the reset-password form we don\'t want to allow\n+        # probing for email-adresses of existing users.\n+        # Because of this we always act as if that an email has been sent.\n+        # Instead we log the error-message.\n+        IStatusMessage(self.request).addStatusMessage(\n+            _(u\'statusmessage_pwreset_username_mail_sent\',\n+                default=u\'An email has been sent with your username.\'),\n+            \'info\'\n+        )\n+\n+    def send_username(self, portal, userinfo):\n+        registry = getUtility(IRegistry)\n+        encoding = registry.get(\'plone.email_charset\', \'utf-8\')\n+        translated_template = translate(\n+            SEND_USERNAME_TEMPLATE,\n+            context=self.request,\n+        )\n+\n+        mail_text = translated_template.format(\n+            email=userinfo[\'email\'],\n+            portal_url=portal.absolute_url(),\n+            fullname=userinfo[\'title\'],\n+            login=userinfo[\'login\'],\n+            email_from_name=registry[\'plone.email_from_name\'],\n+            encoded_mail_sender=self.encoded_mail_sender(),\n+        )\n+        # The mail headers are not properly encoded we need to extract\n+        # them and let MailHost manage the encoding.\n+        if isinstance(mail_text, unicode):\n+            mail_text = mail_text.encode(encoding)\n+        message_obj = message_from_string(mail_text.strip())\n+        subject = message_obj[\'Subject\']\n+        m_to = message_obj[\'To\']\n+        m_from = message_obj[\'From\']\n+        msg_type = message_obj.get(\'Content-Type\', \'text/plain\')\n+\n+        host = getToolByName(portal, \'MailHost\')\n+        try:\n+            host.send(mail_text, m_to, m_from, subject=subject,\n+                      charset=encoding, immediate=True,\n+                      msg_type=msg_type)\n+        except SMTPRecipientsRefused:\n+            # Don\'t disclose email address on failure\n+            raise SMTPRecipientsRefused(\n+                _(u\'Recipient address rejected by server.\'))\n+        except SMTPException as e:\n+            raise(e)\n+\n+    def encode_mail_header(self, text):\n+        """ Encodes text into correctly encoded email header """\n+        return Header(safe_unicode(text), \'utf-8\')\n+\n+    def encoded_mail_sender(self):\n+        """ returns encoded version of Portal name <portal_email> """\n+        registry = getUtility(IRegistry)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        from_ = mail_settings.email_from_name\n+        mail = mail_settings.email_from_address\n+        return \'"%s" <%s>\' % (self.encode_mail_header(from_), mail)\n+\n+\n+@implementer(ILoginHelpForm)\n+class LoginHelpForm(form.EditForm):\n+    \'\'\' Implementation of the login help form \'\'\'\n+\n+    subforms = []\n+\n+    id = \'LoginHelpForm\'\n+    label = _(u\'heading_login_form_help\', default=u\'Need Help?\')\n+\n+    ignoreContext = True\n+\n+    def render(self):\n+        return self.index()\n+\n+    def can_reset_password(self):\n+        # TODO: Actually check that the site allows reseting password\n+        return True\n+\n+    def can_retrieve_username(self):\n+        # TODO: Actually check that the site allows retrieving the username\n+        return True\n+\n+    def update(self):\n+        subforms = []\n+        # XXX: Not really sure how to handle the action and enctype vars\n+        if self.can_reset_password():\n+            form = RequestResetPassword(None, self.request)\n+            form.update()\n+            subforms.append(form)\n+        if not self.use_email_as_login() and self.can_retrieve_username():\n+            form = RequestUsername(None, self.request)\n+            form.update()\n+            subforms.append(form)\n+\n+        self.subforms = subforms\n+        super(LoginHelpForm, self).update()\n+\n+    def use_email_as_login(self):\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema, prefix=\'plone\')\n+        return security_settings.use_email_as_login\ndiff --git a/Products/CMFPlone/browser/login/logout.py b/Products/CMFPlone/browser/login/logout.py\nnew file mode 100644\nindex 000000000..83f4e22fd\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/logout.py\n@@ -0,0 +1,61 @@\n+# -*- coding: utf-8 -*-\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.utils import transaction_note\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.component import getMultiAdapter\n+from zope.component import queryUtility\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+class ILoggedOutView(Interface):\n+    pass\n+\n+\n+class LogoutView(BrowserView):\n+\n+    def __call__(self):\n+        mt = getToolByName(self.context, \'portal_membership\')\n+        mt.logoutUser(self.request)\n+        transaction_note(\'Logged out\')\n+        # Handle external logout requests from other portals\n+        next_ = self.request.get(\'next\', None)\n+        portal_url = getToolByName(self.context, \'portal_url\')\n+        if next_ is not None and portal_url.isURLInPortal(next_):\n+            target_url = next_\n+        else:\n+            target_url = self.request.URL1 + \'/logged-out\'\n+\n+        registry = queryUtility(IRegistry)\n+        external_logout_url = registry[\'plone.external_logout_url\']\n+        if external_logout_url:\n+            target_url = external_logout_url\n+        self.request.response.redirect(target_url)\n+\n+\n+@implementer(ILoggedOutView)\n+class LoggedOutView(BrowserView):\n+\n+    def __call__(self):\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request),\n+            name=\'plone_portal_state\',\n+        )\n+        if portal_state.anonymous():\n+            IStatusMessage(\n+                self.request\n+            ).addStatusMessage(\n+                _(\n+                    u\'statusmessage_logged_out\',\n+                    default=u\'You are now logged out.\'\n+                ),\n+                \'info\',\n+            )\n+            self.request.response.redirect(\n+                portal_state.navigation_root_url()\n+            )\n+            return\n+        return self.index()\ndiff --git a/Products/CMFPlone/browser/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nsimilarity index 86%\nrename from Products/CMFPlone/browser/password_reset.py\nrename to Products/CMFPlone/browser/login/password_reset.py\nindex 3e26ce407..2cfc7d1ec 100644\n--- a/Products/CMFPlone/browser/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -1,25 +1,23 @@\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+# -*- coding: utf-8 -*-\n+from email.header import Header\n from plone.memoize import view\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.CMFPlone.utils import safeToInt\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IPasswordResetToolView\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.CMFPlone.utils import safeToInt\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.i18n import translate\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n-from Products.CMFPlone.interfaces import IPasswordResetToolView\n-from Products.CMFPlone import PloneMessageFactory as _\n-from email.header import Header\n-\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-\n \n @implementer(IPasswordResetToolView)\n class PasswordResetToolView(BrowserView):\n@@ -45,18 +43,26 @@ def encoded_mail_sender(self):\n \n     def registered_notify_subject(self):\n         portal_name = self.portal_state().portal_title()\n-        return translate(_(u"mailtemplate_user_account_info",\n-                           default=u"User Account Information for ${portal_name}",\n-                           mapping={\'portal_name\': safe_unicode(portal_name)}),\n-                           context=self.request)\n+        return translate(\n+            _(\n+                u\'mailtemplate_user_account_info\',\n+                default=u\'User Account Information for ${portal_name}\',\n+                mapping={\'portal_name\': safe_unicode(portal_name)},\n+            ),\n+            context=self.request,\n+        )\n \n     def mail_password_subject(self):\n-        return translate(_(u"mailtemplate_subject_resetpasswordrequest",\n-                           default=u"Password reset request"),\n-                           context=self.request)\n+        return translate(\n+            _(\n+                u\'mailtemplate_subject_resetpasswordrequest\',\n+                default=u\'Password reset request\',\n+            ),\n+            context=self.request,\n+        )\n \n     def construct_url(self, randomstring):\n-        return "%s/passwordreset/%s" % (\n+        return \'%s/passwordreset/%s\' % (\n             self.portal_state().navigation_root_url(), randomstring)\n \n     def expiration_timeout(self):\n@@ -128,10 +134,14 @@ def getErrors(self):\n             return state\n \n         if not userid:\n-            state[\'userid\'] = _(\'This field is required, please provide some information.\')\n+            state[\'userid\'] = _(\n+                \'This field is required, please provide some information.\',\n+            )\n         if state:\n             state[\'status\'] = \'failure\'\n-            state[\'portal_status_message\'] = _(\'Please correct the indicated errors.\')\n+            state[\'portal_status_message\'] = _(\n+                \'Please correct the indicated errors.\',\n+            )\n         return state\n \n     def login_url(self):\n@@ -173,5 +183,7 @@ def __call__(self):\n         if self.request.method == \'POST\':\n             timeout_days = safeToInt(self.request.get(\'timeout_days\'), 7)\n             self.context.setExpirationTimeout(timeout_days)\n-            self.context._user_check = bool(self.request.get(\'user_check\', False))\n+            self.context._user_check = bool(\n+                self.request.get(\'user_check\', False),\n+            )\n         return self.index()\ndiff --git a/Products/CMFPlone/browser/templates/explainPWResetTool.pt b/Products/CMFPlone/browser/login/templates/explainPWResetTool.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/explainPWResetTool.pt\nrename to Products/CMFPlone/browser/login/templates/explainPWResetTool.pt\ndiff --git a/Products/CMFPlone/browser/login/templates/forced_password_change.pt b/Products/CMFPlone/browser/login/templates/forced_password_change.pt\nnew file mode 100644\nindex 000000000..d7e90e358\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/forced_password_change.pt\n@@ -0,0 +1,26 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+  <metal:title fill-slot="content-title">\n+    <h1 class="documentFirstHeading"\n+        i18n:translate="heading_change_password">Time to change your password!</h1>\n+  </metal:title>\n+\n+  <metal:description fill-slot="content-description">\n+    <div class="documentDescription description">\n+        <span i18n:translate="description_forced_password_change">\n+        Before you continue, you need to change your password.\n+        </span>\n+\n+    </div>\n+  </metal:description>\n+\n+  <metal:b fill-slot="content-core">\n+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+  </metal:b>\n+\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt b/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt\nnew file mode 100644\nindex 000000000..51d54a454\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt\n@@ -0,0 +1,31 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+  <metal:title fill-slot="content-title">\n+    <h1 class="documentFirstHeading"\n+        i18n:translate="heading_welcome">Welcome!</h1>\n+  </metal:title>\n+\n+  <metal:description fill-slot="content-description">\n+    <div class="documentDescription description">\n+        <span i18n:translate="description_logged_in">\n+            This is the first time that you\'ve logged in to\n+            <span tal:content="context/title" tal:omit-tag="" i18n:name="here">here</span>.\n+        </span>\n+        <span i18n:translate="description_change_initial_password">\n+        Before you start exploring, you need to change your original password.\n+        This ensures that the password you received via email cannot be used in a malicious manner.\n+        </span>\n+\n+    </div>\n+  </metal:description>\n+\n+  <metal:b fill-slot="content-core">\n+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+  </metal:b>\n+\n+</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt b/Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\nsimilarity index 54%\nrename from Products/CMFPlone/skins/plone_login/insufficient_privileges.pt\nrename to Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\nindex ab5ad99b9..107aa2ba8 100644\n--- a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt\n+++ b/Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\n@@ -6,21 +6,27 @@\n       metal:use-macro="context/main_template/macros/master"\n       i18n:domain="plone">\n \n-<body>\n-\n-<metal:main fill-slot="main">\n+<head>\n+    <metal:block fill-slot="top_slot"\n+                 tal:define="dummy python:request.set(\'disable_border\',1);\n+                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+</head>\n \n+<body>\n+   <metal:content fill-slot="main">\n       <h1 class="documentFirstHeading"\n           i18n:translate="heading_no_privileges">Insufficient Privileges</h1>\n \n-      <div class="documentDescription" i18n:translate="description_no_privileges_for_page">\n+      <div class="documentDescription" i18n:translate="description_no_privileges_for_page"\n+           tal:define="portal_state context/@@plone_portal_state;\n+                       portal_url portal_state/portal_url">\n       You do not have sufficient privileges to view this page. If you believe\n       you are receiving this message in error, contact the\n       <span i18n:name="site_admin"><a href="#"\n          i18n:translate="label_site_administration"\n-         tal:attributes="href string:${context/portal_url}/contact-info">site administration</a></span>.\n+         tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.\n       </div>\n-</metal:main>\n \n-</body>\n+   </metal:content>\n </html>\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_out.cpt b/Products/CMFPlone/browser/login/templates/logged_out.pt\nsimilarity index 68%\nrename from Products/CMFPlone/skins/plone_login/logged_out.cpt\nrename to Products/CMFPlone/browser/login/templates/logged_out.pt\nindex 17580a715..c6778e9b3 100644\n--- a/Products/CMFPlone/skins/plone_login/logged_out.cpt\n+++ b/Products/CMFPlone/browser/login/templates/logged_out.pt\n@@ -13,28 +13,14 @@\n </head>\n <body>\n \n-  <metal:main fill-slot="main"\n-              tal:define="isAnon context/@@plone_portal_state/anonymous">\n+<metal:main fill-slot="main">\n \n-<tal:reallyloggedout condition="isAnon">\n-  <h1 class="documentFirstHeading"\n-      i18n:translate="heading_signed_out">You are now logged out</h1>\n-\n-  <div class="documentDescription"\n-     i18n:translate="description_loginagain">You can log in again below.</div>\n-\n-  <div id="content-core">\n-      <metal:login use-macro="context/login_form/macros/login" />\n-  </div>\n-\n-</tal:reallyloggedout>\n-\n-<tal:notloggedoutafterall tal:condition="not: isAnon">\n+<tal:notloggedoutafterall>\n     <h1 class="documentFirstHeading"\n-        i18n:translate="heading_quit_to_log_out">Still logged in</h1>\n+        i18n:translate="heading_quit_to_log_out">Still logged in as a Zope user</h1>\n \n     <div class="documentDescription" i18n:translate="description_quit_to_log_out">\n-        You are logged in via HTTP authentication (i.e. the Management\n+        You are logged in via HTTP authentication (i.e. the Zope Management\n         Interface). In order to log out, you must:\n     </div>\n \ndiff --git a/Products/CMFPlone/browser/login/templates/login.pt b/Products/CMFPlone/browser/login/templates/login.pt\nnew file mode 100644\nindex 000000000..507230128\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login.pt\n@@ -0,0 +1,100 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      metal:use-macro="here/main_template/macros/master"\n+>\n+<body>\n+  <metal:main fill-slot="main">\n+    <metal:main-macro define-macro="main">\n+\n+      <div id="login-form">\n+\n+        <div class="portalMessage error pat-cookietrigger" style="display:none">\n+            <strong i18n:translate="">\n+                Error\n+            </strong>\n+            <span tal:omit-tag=""\n+                i18n:translate="enable_cookies_message_before_login">\n+                Cookies are not enabled. You must enable cookies before you can log in.\n+            </span>\n+        </div>\n+\n+        <form action="." method="post"\n+              tal:attributes="action view/action; enctype view/enctype">\n+\n+            <tal:widgets repeat="widget view/widgets/values">\n+\n+                <tal:block tal:define="hidden python:widget.mode == \'hidden\'">\n+                <div tal:condition="not:hidden">\n+\n+                    <div class="field"\n+                         tal:define="error widget/error"\n+                         tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+\n+                        <label for=""\n+                               tal:attributes="for widget/id"\n+                               tal:condition="not:hidden">\n+                            <span i18n:translate=""\n+                                  tal:content="widget/label">label</span>\n+                            <span class="required horizontal" title="Required"\n+                                  tal:condition="python:widget.required and not hidden"\n+                                  i18n:attributes="title title_required;">&nbsp;</span>\n+                        </label>\n+\n+                        <div class="formHelp"\n+                             tal:define="description widget/field/description"\n+                             i18n:translate=""\n+                             tal:content="description"\n+                             tal:condition="description">\n+                            field description\n+                        </div>\n+\n+                        <div tal:condition="error"\n+                             tal:content="structure error/render">\n+                            Error\n+                        </div>\n+\n+                        <div class="widget">\n+                            <input type="text" tal:replace="structure widget/render" />\n+                        </div>\n+\n+                    </div>\n+\n+                </div>\n+\n+                <input type="hidden"\n+                       tal:condition="hidden"\n+                       tal:replace="structure widget/render" />\n+                </tal:block>\n+\n+            </tal:widgets>\n+            <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+            <div class="formControls">\n+              <tal:actions tal:repeat="action view/actions/values|nothing">\n+                <input type="submit" tal:replace="structure action/render" />\n+              </tal:actions>\n+            </div>\n+        </form>\n+\n+        <div class="footer"\n+             tal:define="portal_state context/@@plone_portal_state;\n+                         portal_url portal_state/portal_url">\n+          <p>\n+            <span i18n:translate="trouble_logging_in" tal:omit-tag="">Trouble logging in?</span>\n+            <a href="@@login-help" tal:attributes="href string:${portal_url}/@@login-help" i18n:translate="footer_login_link_get_help">Get help</a>.\n+          </p>\n+          <p tal:condition="python:view.self_registration_enabled()">\n+            <span i18n:translate="need_an_account" tal:omit-tag="">Need an account?</span>\n+             <a href="@@register" tal:attributes="href string:${portal_url}/@@register" class="emph" i18n:translate="footer_login_link_signup">Sign up here</a>.\n+          </p>\n+        </div>\n+\n+      </div>\n+    </metal:main-macro>\n+  </metal:main>\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/login_failsafe.pt b/Products/CMFPlone/browser/login/templates/login_failsafe.pt\nnew file mode 100644\nindex 000000000..f0c701a20\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login_failsafe.pt\n@@ -0,0 +1,85 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      tal:omit-tag="">\n+<body tal:omit-tag="">\n+\n+ <div id="login-form">\n+\n+  <h1>Failsafe Login</h1>\n+\n+  <div class="portalMessage error pat-cookietrigger" style="display:none">\n+      <strong i18n:translate="">\n+          Error\n+      </strong>\n+      <span tal:omit-tag=""\n+          i18n:translate="enable_cookies_message_before_login">\n+          Cookies are not enabled. You must enable cookies before you can log in.\n+      </span>\n+  </div>\n+\n+    <form action="." method="post"\n+          tal:attributes="action view/action; enctype view/enctype">\n+\n+        <tal:widgets repeat="widget view/widgets/values">\n+\n+            <tal:block tal:define="hidden python:widget.mode == \'hidden\'">\n+            <div tal:condition="not:hidden">\n+\n+                <div class="field"\n+                     tal:define="error widget/error"\n+                     tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+\n+                    <label for=""\n+                           tal:attributes="for widget/id"\n+                           tal:condition="not:hidden">\n+                        <span i18n:translate=""\n+                              tal:content="widget/label">label</span>\n+                        <span class="required horizontal" title="Required"\n+                              tal:condition="python:widget.required and not hidden"\n+                              i18n:attributes="title title_required;">&nbsp;</span>\n+                    </label>\n+\n+                    <div class="formHelp"\n+                         tal:define="description widget/field/description"\n+                         i18n:translate=""\n+                         tal:content="description"\n+                         tal:condition="description">\n+                        field description\n+                    </div>\n+\n+                    <div tal:condition="error"\n+                         tal:content="structure error/render">\n+                        Error\n+                    </div>\n+\n+                    <div class="widget">\n+                        <input type="text" tal:replace="structure widget/render" />\n+                    </div>\n+\n+                </div>\n+\n+            </div>\n+\n+            <input type="hidden"\n+                   tal:condition="hidden"\n+                   tal:replace="structure widget/render" />\n+            </tal:block>\n+\n+        </tal:widgets>\n+        <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+        <div class="formControls">\n+          <tal:actions tal:repeat="action view/actions/values|nothing">\n+            <input type="submit" tal:replace="structure action/render" />\n+          </tal:actions>\n+        </div>\n+    </form>\n+\n+ </div>\n+\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/login_help.pt b/Products/CMFPlone/browser/login/templates/login_help.pt\nnew file mode 100644\nindex 000000000..d541a0c12\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login_help.pt\n@@ -0,0 +1,54 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      metal:use-macro="here/main_template/macros/master"\n+      i18n:domain="plone">\n+<body>\n+  <metal:main fill-slot="main">\n+    <metal:main-macro define-macro="main">\n+\n+      <div>\n+\n+        <h1 tal:condition="view/label | nothing">\n+            <span tal:replace="view/label">Form title</span>\n+        </h1>\n+\n+        <p tal:condition="view/description | nothing"\n+           tal:content="structure view/description">Form description</p>\n+\n+        <form action="." method="post"\n+              tal:attributes="action view/action; enctype view/enctype"\n+              tal:define="subforms view/subforms">\n+\n+          <div class="row">\n+            <div class="col-xs-6 col-sm-6" tal:repeat="subform subforms"\n+                 tal:attributes="class python:\'col-xs-12 col-sm-12\' if len(subforms) == 1 else \'col-xs-6 col-sm-6\'">\n+                <tal:subform replace="structure subform/render"></tal:subform>\n+            </div>\n+          </div>\n+\n+          <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+        </form>\n+\n+        <div class="footer"\n+             tal:define="portal_state context/@@plone_portal_state;\n+                         portal_url portal_state/portal_url">\n+          <p class="trouble">\n+            <span i18n:translate="need_more_help" tal:omit-tag="">Need more help?</span>\n+            <a tal:attributes="href string:${portal_url}/contact-info"\n+               href="contact-info" i18n:translate="contact_an_admin">Contact an admin.</a>\n+          </p>\n+          <p class="go_to_login">\n+            <span i18n:translate="go_to_login" tal:omit-tag="">Go to</span>\n+            <a tal:attributes="href string:${portal_url}/login" class="pat-plone-modal"\n+               i18n:translate="to_login_view" href="login">login</a>.\n+          </p>\n+        </div>\n+      </div>\n+    </metal:main-macro>\n+  </metal:main>\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_form.pt b/Products/CMFPlone/browser/login/templates/mail_password_form.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_form.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_form.pt\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_response.pt b/Products/CMFPlone/browser/login/templates/mail_password_response.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_response.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_response.pt\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_template.pt b/Products/CMFPlone/browser/login/templates/mail_password_template.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_template.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_template.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_expired.pt b/Products/CMFPlone/browser/login/templates/pwreset_expired.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_expired.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_expired.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_finish.pt b/Products/CMFPlone/browser/login/templates/pwreset_finish.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_finish.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_finish.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_form.pt b/Products/CMFPlone/browser/login/templates/pwreset_form.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_form.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_form.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_invalid.pt b/Products/CMFPlone/browser/login/templates/pwreset_invalid.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_invalid.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_invalid.pt\ndiff --git a/Products/CMFPlone/browser/templates/registered_notify_template.pt b/Products/CMFPlone/browser/login/templates/registered_notify_template.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/registered_notify_template.pt\nrename to Products/CMFPlone/browser/login/templates/registered_notify_template.pt\ndiff --git a/Products/CMFPlone/browser/login/templates/subform_render.pt b/Products/CMFPlone/browser/login/templates/subform_render.pt\nnew file mode 100644\nindex 000000000..0447d3878\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/subform_render.pt\n@@ -0,0 +1,59 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      tal:omit-tag="">\n+<body tal:omit-tag="">\n+\n+    <h1 tal:condition="view/label | nothing">\n+        <span tal:replace="view/label">Form title</span>\n+    </h1>\n+\n+    <p tal:condition="view/description | nothing"\n+        tal:content="structure view/description">Form description</p>\n+\n+    <tal:widgets repeat="widget view/widgets/values">\n+        <div tal:define="hidden python:widget.mode == \'hidden\'"\n+             tal:omit-tag="hidden">\n+\n+            <div class="field"\n+                tal:define="error widget/error;\n+                            hidden python:widget.mode == \'hidden\';"\n+                tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+                <label for=""\n+                        tal:attributes="for widget/id"\n+                        tal:condition="not:hidden">\n+                    <span tal:content="widget/label">label</span>\n+                    <span class="required horizontal" title="Required"\n+                          tal:condition="python:widget.required and not hidden"\n+                          i18n:attributes="title title_required;">&nbsp;</span>\n+                </label>\n+\n+                <div class="formHelp"\n+                        tal:define="description widget/field/description"\n+                        tal:content="description"\n+                        tal:condition="python:description and not hidden"\n+                        >field description</div>\n+\n+                <div tal:condition="error"\n+                        tal:content="structure error/render">\n+                    Error\n+                </div>\n+\n+                <div class="widget">\n+                    <input type="text" tal:replace="structure widget/render" />\n+                </div>\n+            </div>\n+        </div>\n+    </tal:widgets>\n+\n+    <div class="formControls">\n+        <tal:actions tal:repeat="action view/actions/values|nothing">\n+            <input type="submit" tal:replace="structure action/render" />\n+        </tal:actions>\n+    </div>\n+\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/templates/plone-logged-out.pt b/Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\nsimilarity index 97%\nrename from Products/CMFPlone/browser/templates/plone-logged-out.pt\nrename to Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\nindex e52f44f4e..011123aee 100644\n--- a/Products/CMFPlone/browser/templates/plone-logged-out.pt\n+++ b/Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\n@@ -22,7 +22,7 @@\n     tal:attributes="src string:${context/absolute_url}/++resource++plone-logo.png"/>\n \n   <h1 i18n:translate="">\n-      You have been logged out.\n+      You are now logged out.\n   </h1>\n \n   <p>\ndiff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py\nindex d5c1c318c..fa0f0b58e 100644\n--- a/Products/CMFPlone/interfaces/__init__.py\n+++ b/Products/CMFPlone/interfaces/__init__.py\n@@ -38,6 +38,14 @@\n from Products.CMFPlone.interfaces.installable import INonInstallable\n from Products.CMFPlone.interfaces.interface import IInterfaceTool\n from Products.CMFPlone.interfaces.language import ILanguage\n+from Products.CMFPlone.interfaces.login import IForcePasswordChange\n+from Products.CMFPlone.interfaces.login import IInitialLogin\n+from Products.CMFPlone.interfaces.login import ILogin\n+from Products.CMFPlone.interfaces.login import ILoginForm\n+from Products.CMFPlone.interfaces.login import ILoginFormSchema\n+from Products.CMFPlone.interfaces.login import ILoginHelpForm\n+from Products.CMFPlone.interfaces.login import ILoginHelpFormSchema\n+from Products.CMFPlone.interfaces.login import IRedirectAfterLogin\n from Products.CMFPlone.interfaces.migration import IMigrationTool\n from Products.CMFPlone.interfaces.password_reset import IPasswordResetToolView\n from Products.CMFPlone.interfaces.password_reset import IPWResetTool\ndiff --git a/Products/CMFPlone/interfaces/login.py b/Products/CMFPlone/interfaces/login.py\nnew file mode 100644\nindex 000000000..a86278cc0\n--- /dev/null\n+++ b/Products/CMFPlone/interfaces/login.py\n@@ -0,0 +1,82 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone import PloneMessageFactory as _\n+from plone.schema.email import Email\n+from plone.z3cform.interfaces import IWrappedForm\n+from zope import schema\n+from zope.interface import Interface\n+\n+\n+class IRedirectAfterLogin(Interface):\n+    """ Redirect after login adapters should provide this interface """\n+\n+\n+class IForcePasswordChange(Interface):\n+    """ Hook point to customize forcing a password change """\n+\n+\n+class IInitialLogin(Interface):\n+    """ Hook point to customize what happens the first time a user logs into\n+        the site """\n+\n+\n+class ILogin(Interface):\n+    """ Login form schema """\n+\n+    login = schema.TextLine(\n+        title=_(u\'label_log_in\', default=u\'Log in\'),\n+    )\n+\n+    password = schema.Password(\n+        title=_(u\'label_password\', default=u\'Password\'),\n+    )\n+\n+\n+class ILoginForm(IWrappedForm):\n+    """ Login form marker interface """\n+\n+\n+class ILoginFormSchema(Interface):\n+    """ Login form schema """\n+\n+    ac_name = schema.TextLine(\n+        title=_(u\'label_login_name\', default=u\'Login Name\'),\n+        required=True,\n+    )\n+\n+    ac_password = schema.Password(\n+        title=_(u\'label_password\', default=u\'Password\'),\n+        required=True,\n+    )\n+\n+    came_from = schema.TextLine(\n+        title=u\'Came From\',  # not translated, hidden field\n+        required=False,\n+    )\n+\n+\n+class ILoginHelpForm(IWrappedForm):\n+    """ Login Help form marker interface """\n+\n+\n+class ILoginHelpFormSchema(Interface):\n+    """ Login Help form schema """\n+\n+    reset_password = schema.TextLine(\n+        title=_(u\'label_pwreset_username\', default=u\'Username\'),\n+        description=_(\n+            u\'help_pwreset_username\',\n+            default=u\'Enter your username \'\n+                    u\'or email and we\xe2\x80\x99ll send you a password reset link.\',\n+        ),\n+        required=True,\n+    )\n+\n+    recover_username = Email(\n+        title=_(u\'label_pwreset_email\', default=u\'Email\'),\n+        description=_(\n+            u\'help_pwreset_email\',\n+            default=u\'Enter your email and \'\n+                    u\'we\xe2\x80\x99ll send you your username.\',\n+        ),\n+        required=True,\n+    )\ndiff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml\nindex 80d613abd..5ac4748c4 100644\n--- a/Products/CMFPlone/profiles/default/skins.xml\n+++ b/Products/CMFPlone/profiles/default/skins.xml\n@@ -9,8 +9,6 @@\n     directory="Products.CMFPlone:skins/plone_form_scripts"/>\n  <object name="plone_images" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_images"/>\n- <object name="plone_login" meta_type="Filesystem Directory View"\n-    directory="Products.CMFPlone:skins/plone_login"/>\n  <object name="plone_prefs" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_prefs"/>\n  <object name="plone_scripts" meta_type="Filesystem Directory View"\n@@ -28,6 +26,5 @@\n   <layer name="plone_form_scripts"/>\n   <layer name="plone_scripts"/>\n   <layer name="plone_images"/>\n-  <layer name="plone_login"/>\n  </skin-path>\n </object>\ndiff --git a/Products/CMFPlone/skins/plone_login/external_login_return.cpt b/Products/CMFPlone/skins/plone_login/external_login_return.cpt\ndeleted file mode 100644\nindex d926f0070..000000000\n--- a/Products/CMFPlone/skins/plone_login/external_login_return.cpt\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-\n-<metal:main fill-slot="main"\n-     tal:define="isAnon context/@@plone_portal_state/anonymous;\n-                 auth nocall:context/acl_users/credentials_cookie_auth|context/cookie_authentication|nothing;\n-                 session nocall:context/acl_users/session|nothing;\n-                 came_from request/came_from|nothing;\n-                 came_from python:test(came_from is not None and context.portal_url.isURLInPortal(came_from), came_from, None);\n-                 next request/next|nothing;\n-                 next python:test(next is not None and context.portal_url.isURLInPortal(next), next, None);\n-                 cookie_name auth/cookie_name|string:__ac;\n-                 ticket python:request.response.cookies.get(cookie_name, {}).get(\'value\') or request.cookies.get(cookie_name, \'\');\n-                 target request/target|nothing;\n-                 target python:test(target in (\'_parent\', \'_top\', \'_blank\', \'_self\'), target, None);\n-                 valid python:not(isAnon) and next;">\n-\n-  <metal:valid tal:condition="valid">\n-\n-      <h1 class="documentFirstHeading"\n-          i18n:translate="heading_please_wait_while_you_are_logged_in">Please wait while you are logged in</h1>\n-\n-      <div id="content-core">\n-          <div tal:condition="python:auth is None" i18n:translate="login_form_disabled">\n-              Since cookie authentication is disabled, cookie-based login is not available.\n-          </div>\n-\n-          <form tal:attributes="action next; target target;"\n-                method="post"\n-                id="external_login_form"\n-                name="external_login_form"\n-                tal:condition="python:auth is not None">\n-\n-                <input tal:condition="came_from" type="hidden" name="came_from" value="" tal:attributes="value came_from" />\n-                <input type="hidden" name="__ac" value="" tal:attributes="name cookie_name; value ticket;" />\n-\n-                <p i18n:translate="description_enable_cookies_to_stay_logged_in">\n-                   Note: If you do not remain logged in after leaving this page,\n-                   it is because you need to enable cookies in your browser.\n-                </p>\n-\n-                <div class="formControls">\n-\n-                    <input class="context"\n-                           type="submit"\n-                           name="continue"\n-                           value="Continue"\n-                           i18n:attributes="value label_login_continue;"\n-                           />\n-\n-                </div>\n-\n-          </form>\n-          <script type="text/javascript">\n-              /*jslint browser: true */\n-              var external_login_form = document.forms.external_login_form;\n-              external_login_form.style.display = \'none\';\n-              external_login_form.submit();\n-          </script>\n-\n-      </div>\n-  </metal:valid>\n-\n-  <metal:invalid tal:condition="not:valid">\n-      <div metal:use-macro="context/login_failed/macros/login_failed" />\n-  </metal:invalid>\n-\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata b/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata\ndeleted file mode 100644\nindex aec7d7ebb..000000000\n--- a/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=External log in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt b/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt\ndeleted file mode 100644\nindex 7a589540b..000000000\n--- a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt\n+++ /dev/null\n@@ -1,176 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone"\n-      tal:define="dummy python:request.response.setHeader(\'X-Theme-Disabled\', \'True\');">\n-<head>\n-  <title i18n:translate="heading_sign_in">Please log in</title>\n-</head>\n-\n-<body>\n-\n-<div tal:define="checkPermission nocall:context/portal_membership/checkPermission;\n-                 actions python:context.portal_actions.listActionInfos(\'user/join\', object=context);\n-                 auth nocall:context/acl_users/credentials_cookie_auth|nothing;\n-                 came_from request/came_from|request/HTTP_REFERER|nothing;\n-                 came_from python:test(context.portal_url.isURLInPortal(came_from), came_from, None);\n-                 ztutils modules/ZTUtils;\n-                 errors options/state/getErrors;">\n-\n-<h1 class="documentFirstHeading"\n-    i18n:translate="heading_sign_in">Please log in</h1>\n-\n-<p i18n:translate="description_sign_in">\n-To access this part of the site, you need to log in with your user name and password.\n-</p>\n-\n-<p i18n:translate="description_no_account"\n-   tal:define="join python:[a[\'url\'] for a in actions]"\n-   tal:condition="python: join and checkPermission(\'Add portal member\', context)">\n-\n-If you do not have an account here, head over to the\n-\n-<span i18n:name="registration_form">\n-    <a href=""\n-       tal:define="join python:join.pop();\n-                   join join;\n-                   join python:join+test(join.find(\'?\')==-1, \'?\', \'&amp;\')+ztutils.make_query(came_from=came_from);"\n-       tal:attributes="href join"\n-       i18n:translate="description_no_account_registration_linktext">\n-        registration form</a></span>.\n-\n-</p>\n-\n-\n-<div class="portalMessage error pat-cookietrigger" style="display:none">\n-    <strong i18n:translate="">\n-        Error\n-    </strong>\n-    <span tal:omit-tag="" i18n:translate="enable_cookies_message_before_login">\n-        Cookies are not enabled. You must enable cookies before you can log in.\n-    </span>\n-</div>\n-\n-\n-<div tal:condition="python: not auth" i18n:translate="login_form_disabled">\n-    Since cookie authentication is disabled, cookie-based login is not available.\n-</div>\n-\n-<form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-      method="post"\n-      id="login_form"\n-      tal:condition="python:auth">\n-\n-    <fieldset tal:define="ac_name auth/name_cookie|string:__ac_name;\n-                          ac_password auth/pw_cookie|string:__ac_password;\n-                          ac_persist auth/persist_cookie|nothing">\n-\n-        <legend i18n:translate="legend_account_details">Account details</legend>\n-\n-        <input type="hidden"\n-            name="came_from"\n-            value=""\n-\t    tal:attributes="value came_from" />\n-\n-        <input type="hidden" name="form.submitted" value="1" />\n-        <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-        <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-        <input type="hidden" name="login_name" id="login_name" value="" />\n-        <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-        <div class="field"\n-             tal:define="error python:errors.get(ac_name, None);\n-                         value python:request.get(\'login_name\', request.get(ac_name, None));"\n-             tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-            <label i18n:translate="label_login_name"\n-                   tal:attributes="for ac_name">Login Name</label>\n-\n-            <div i18n:translate="help_login_name_caps"\n-                 class="formHelp">\n-                Login names are case sensitive, make sure the caps lock key is not enabled.\n-            </div>\n-\n-            <div tal:content="error">Validation error output</div>\n-\n-            <input type="text"\n-                   size="15"\n-                   tal:attributes="name ac_name;\n-                                   id ac_name;\n-                                   value value;"\n-                   />\n-\n-        </div>\n-\n-        <div class="field"\n-             tal:define="error python:errors.get(ac_password, None);"\n-             tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-            <label i18n:translate="label_password"\n-                   tal:attributes="for ac_password">Password</label>\n-\n-            <div class="formHelp">\n-                <div i18n:translate="help_capslock_password">\n-                    Case sensitive, make sure caps lock is not enabled.\n-                </div>\n-                <div tal:condition="python:checkPermission(\'Mail forgotten password\', context)"\n-                     i18n:translate="help_password_retrieval">\n-                    If you have forgotten your password,\n-                    <span i18n:name="click_here">\n-                        <a href="mail_password_form"\n-                           i18n:translate="label_click_here_to_retrieve">we can send you a new one</a>\n-                    </span>.\n-                </div>\n-            </div>\n-\n-            <div tal:content="error">Validation error output</div>\n-\n-            <input type="password"\n-                   size="15"\n-                   tal:attributes="name ac_password;\n-                                   id ac_password;"\n-                   />\n-        </div>\n-\n-        <div class="field" tal:condition="ac_persist">\n-\n-            <input type="checkbox"\n-                   class="noborder formRememberName"\n-                   value="1"\n-                   checked="checked"\n-                   id="cb_remember"\n-                   tal:attributes="name ac_persist;\n-                                   checked python:request.get(ac_name, \'\') and \'checked\' or None;"\n-                   />\n-\n-            <label for="cb_remember" i18n:translate="label_remember_my_name">Remember my name.</label>\n-\n-            <div i18n:translate="help_remember_my_name"\n-                 class="formHelp">\n-                Check this to have your user name filled in automatically when you log in later.\n-            </div>\n-\n-        </div>\n-\n-        <div class="formControls">\n-\n-            <input class="context"\n-                   type="submit"\n-                   name="submit"\n-                   value="Log in"\n-                   i18n:attributes="value label_log_in;" />\n-\n-        </div>\n-\n-        <p i18n:translate="remember_to_log_out">\n-            Please log out or exit your browser when you\'re done.\n-        </p>\n-\n-    </fieldset>\n-\n-</form>\n-</div>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata b/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata\ndeleted file mode 100644\nindex 5fc5cf6e1..000000000\n--- a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Sign in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=traverse_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata b/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata\ndeleted file mode 100644\nindex 623d1d665..000000000\n--- a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-[default]\r\n-title=Insufficient privileges\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_in.cpy b/Products/CMFPlone/skins/plone_login/logged_in.cpy\ndeleted file mode 100644\nindex 8f5ad4754..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_in.cpy\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-## Controller Python Script "logged_in"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Initial post-login actions\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-REQUEST = context.REQUEST\n-\n-membership_tool = getToolByName(context, \'portal_membership\')\n-if membership_tool.isAnonymousUser():\n-    REQUEST.RESPONSE.expireCookie(\'__ac\', path=\'/\')\n-    email_login = context.portal_registry[\'plone.use_email_as_login\']\n-    if email_login:\n-        context.plone_utils.addPortalMessage(\n-            _(u\'Login failed. Both email address and password are case \'\n-              u\'sensitive, check that caps lock is not enabled.\'),\n-            \'error\')\n-    else:\n-        context.plone_utils.addPortalMessage(\n-            _(u\'Login failed. Both login name and password are case \'\n-              u\'sensitive, check that caps lock is not enabled.\'),\n-            \'error\')\n-    return state.set(status=\'failure\')\n-\n-from DateTime import DateTime\n-member = membership_tool.getAuthenticatedMember()\n-login_time = member.getProperty(\'login_time\', \'2000/01/01\')\n-if not isinstance(login_time, DateTime):\n-    login_time = DateTime(login_time)\n-initial_login = int(login_time == DateTime(\'2000/01/01\'))\n-state.set(initial_login=initial_login)\n-\n-must_change_password = member.getProperty(\'must_change_password\', 0)\n-state.set(must_change_password=must_change_password)\n-\n-if initial_login:\n-    state.set(status=\'initial_login\')\n-elif must_change_password:\n-    state.set(status=\'change_password\')\n-\n-membership_tool.loginUser(REQUEST)\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata b/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata\ndeleted file mode 100644\nindex c74b6f4ed..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.initial_login=traverse_to:string:login_initial\n-action.change_password=traverse_to:string:login_password\n-action.failure=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata b/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata\ndeleted file mode 100644\nindex 3e31194f4..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=You have been signed out\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/skins/plone_login/login.py b/Products/CMFPlone/skins/plone_login/login.py\ndeleted file mode 100644\nindex 7d5956ec7..000000000\n--- a/Products/CMFPlone/skins/plone_login/login.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-## Script (Python) "require_login"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login\n-\n-request = context.REQUEST\n-\n-# Handle external login requests from other portals where the user is already\n-# logged in in this portal\n-next = request.get(\'next\', None)\n-if (next is not None and context.portal_url.isURLInPortal(next)\n-    and not context.portal_membership.isAnonymousUser()):\n-    return context.restrictedTraverse(\'external_login_return\')()\n-\n-# Handle login on this portal where login is internal\n-external_login_url = context.portal_registry[\'plone.external_login_url\']\n-external_login_iframe = context.portal_registry[\'plone.external_login_iframe\']\n-if not external_login_url or external_login_iframe:\n-    return context.restrictedTraverse(\'login_form\')()\n-\n-# Handle login on this portal where login is external\n-next = request.URL1 + \'/logged_in\'\n-url = "%s?next=%s" % (external_login_url, next)\n-came_from = request.get(\'came_from\')\n-if came_from:\n-    url = "%s&came_from=%s" % (url, came_from)\n-request.RESPONSE.redirect(url)\ndiff --git a/Products/CMFPlone/skins/plone_login/login_change_password.cpy b/Products/CMFPlone/skins/plone_login/login_change_password.cpy\ndeleted file mode 100644\nindex 846e98ef9..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_change_password.cpy\n+++ /dev/null\n@@ -1,29 +0,0 @@\n-## Controller Python Script "login_change_password"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=password\n-##title=Change a user\'s password upon initial login\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-mt = context.portal_membership\n-member = mt.getAuthenticatedMember()\n-try:\n-    mt.setPassword(password, REQUEST=context.REQUEST)\n-except AttributeError:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'While changing your password an AttributeError occurred. This is \'\n-          u\'usually caused by your user being defined outside the portal.\'),\n-        \'error\')\n-    return state.set(status=\'failure\')\n-\n-member.setProperties(must_change_password=0)\n-\n-from Products.CMFPlone.utils import transaction_note\n-transaction_note(\'Changed password for %s\' % (member.getUserName()))\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata\ndeleted file mode 100644\nindex 81b2b12bf..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[default]\n-proxy=Manager\n-\n-[validators]\n-validators=login_password_validate\n-\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.failure=traverse_to:string:login_change_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_failed.cpt b/Products/CMFPlone/skins/plone_login/login_failed.cpt\ndeleted file mode 100644\nindex 6a353353a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_failed.cpt\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-\n-<metal:main fill-slot="main">\n-  <metal:login_failed define-macro="login_failed">\n-\n-    <div id="content-core">\n-        <metal:login use-macro="context/login_form/macros/login" />\n-\n-        <p i18n:translate="description_not_accept_cookies">\n-          If your user name and password are correct, the problem may be that\n-          your browser is not configured to accept cookies.\n-        </p>\n-\n-        <p i18n:translate="description_still_failure">\n-          If you are still reaching this page after correctly configuring\n-          your browser, here are some possible reasons:\n-        </p>\n-\n-        <ul>\n-          <li i18n:translate="description_still_failure_reason1">\n-            You may be running web filtering software that\n-            disables cookies. If so, you will need to configure the\n-            software so that it enables you to accept cookies from\n-            <span tal:content="context/portal_url" tal:omit-tag="" i18n:name="url">url</span>\n-          </li>\n-          <li i18n:translate="description_still_failure_reason2">\n-            Your computer may be behind a firewall or proxy server\n-            that prevents cookies from being sent to or from your browser.\n-            If so, you will need to ask your systems administrator if the\n-            problem can be fixed.\n-          </li>\n-        </ul>\n-    </div>\n-\n-  </metal:login_failed>\n-\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata\ndeleted file mode 100644\nindex 546fcb69a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Login unsuccessful\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt b/Products/CMFPlone/skins/plone_login/login_form.cpt\ndeleted file mode 100644\nindex a8ca2c81d..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form.cpt\n+++ /dev/null\n@@ -1,307 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-    <metal:main fill-slot="main">\n-\n-    <div id="content-core">\n-        <metal:login define-macro="login"\n-            tal:define="auth nocall:context/acl_users/credentials_cookie_auth|context/cookie_authentication|nothing;\n-                        isURLInPortal nocall:context/portal_url/isURLInPortal;\n-                        login_template_ids python:\'login login_success login_password login_failed login_form logged_in logout logged_out registered mail_password mail_password_form register require_login member_search_results pwreset_finish localhost\'.split();\n-                        came_from request/came_from|request/HTTP_REFERER|nothing;\n-                        came_from_template_id python:came_from and context.plone_utils.urlparse(came_from)[2].split(\'/\')[-1];\n-                        came_from python:test(came_from is not None and isURLInPortal(came_from) and came_from_template_id not in login_template_ids, came_from, None);\n-                        next request/next|nothing;\n-                        next python:test(next is not None and isURLInPortal(next), next, None);\n-                        errors options/state/getErrors;\n-                        ac_name auth/name_cookie|string:__ac_name;\n-                        ac_password auth/pw_cookie|string:__ac_password;\n-                        ac_persist auth/persist_cookie|nothing;\n-                        login_name python:request.get(\'login_name\', request.get(ac_name, \'\'));\n-                        checkPermission nocall: context/portal_membership/checkPermission;\n-                        use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];\n-                        external_login_url python:context.portal_registry[\'plone.external_login_url\'];\n-                        external_login_iframe python:context.portal_registry[\'plone.external_login_iframe\'];\n-                        mail_password python:test(checkPermission(\'Mail forgotten password\', context), portal_url + \'/mail_password_form\', \'\');\n-                        mail_password_url request/mail_password_url|nothing;\n-                        mail_password_url python:test(mail_password_url and isURLInPortal(mail_password_url), mail_password_url, mail_password);\n-                        join_actions python:context.portal_actions.listActionInfos(\'user/join\', object=context) or [{}];\n-                        join python:join_actions[0].get(\'url\');\n-                        join python:test(join and checkPermission(\'Add portal member\', context), join, \'\');\n-                        join_url request/join_url|nothing;\n-                        join_url python:test(join_url is not None and isURLInPortal(join_url), join_url, join);\n-                        use_normal python:auth and not external_login_url;\n-                        use_iframe python:auth and external_login_url and external_login_iframe;\n-                        use_external python:auth and external_login_url and not external_login_iframe;\n-                        target request/target|nothing;\n-                        target python:test(target in (\'_parent\', \'_top\', \'_blank\', \'_self\'), target, None);\n-                        ztu modules/ZTUtils;">\n-\n-            <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                <strong i18n:translate="">\n-                    Error\n-                </strong>\n-                <span tal:omit-tag=""\n-                    i18n:translate="enable_cookies_message_before_login">\n-                    Cookies are not enabled. You must enable cookies before you can log in.\n-                </span>\n-            </div>\n-\n-            <div tal:condition="python: not auth" i18n:translate="login_form_disabled">\n-                Since cookie authentication is disabled, cookie-based login is not available.\n-            </div>\n-\n-            <form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-                  class="pat-formautofocus"\n-                  method="post"\n-                  id="login_form"\n-                  tal:condition="use_normal">\n-\n-                <div id="login-form">\n-\n-                    <input type="hidden"\n-                        name="came_from"\n-                        value=""\n-                    tal:attributes="value came_from|nothing" />\n-\n-                    <input type="hidden"\n-                        name="next"\n-                        value=""\n-                    tal:attributes="value next|nothing" />\n-\n-                    <input type="hidden"\n-                        name="ajax_load"\n-                        value=""\n-                    tal:attributes="value request/ajax_load|nothing" />\n-\n-                    <input type="hidden"\n-                        name="ajax_include_head"\n-                        value=""\n-                    tal:attributes="value request/ajax_include_head|nothing" />\n-\n-                    <input type="hidden"\n-                        name="target"\n-                        value=""\n-                    tal:attributes="value request/target|nothing" />\n-\n-                    <input type="hidden"\n-                        name="mail_password_url"\n-                        value=""\n-                    tal:attributes="value request/mail_password_url|nothing" />\n-\n-                    <input type="hidden"\n-                        name="join_url"\n-                        value=""\n-                    tal:attributes="value request/join_url|nothing" />\n-\n-                    <input type="hidden" name="form.submitted" value="1" />\n-                    <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                    <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-                    <input type="hidden" name="login_name" id="login_name" value="" />\n-                    <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-                    <div class="field"\n-                         tal:define="error python:errors.get(ac_name, None);"\n-                         tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                        <label i18n:translate="label_login_name"\n-                               tal:condition="not:use_email_as_login"\n-                               tal:attributes="for ac_name">Login Name</label>\n-\n-                        <label i18n:translate="label_email"\n-                               tal:condition="use_email_as_login"\n-                               tal:attributes="for ac_name">E-mail</label>\n-\n-                        <div tal:condition="error"\n-                             tal:content="error">Validation error output</div>\n-\n-                        <input type="text"\n-                               size="15"\n-                               tal:attributes="name ac_name;\n-                                               id ac_name;\n-                                               value login_name;"\n-                               />\n-\n-                </div>\n-\n-                <div class="field"\n-                         tal:define="error python:errors.get(ac_password, None);"\n-                         tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                        <label i18n:translate="label_password"\n-                               tal:attributes="for ac_password">Password</label>\n-\n-                        <div tal:condition="error"\n-                             tal:content="error">Validation error output</div>\n-\n-                        <input type="password"\n-                               size="15"\n-                               tal:attributes="name ac_password;\n-                                               id ac_password;"\n-                               />\n-                </div>\n-\n-                    <div class="field" tal:condition="ac_persist">\n-\n-                        <input type="checkbox"\n-                               class="noborder formRememberName"\n-                               value="1"\n-                               checked="checked"\n-                               id="cb_remember"\n-                               tal:attributes="name ac_persist;\n-                                               checked python:request.get(ac_name, \'\') and \'checked\' or None;"\n-                               />\n-\n-                        <tal:username tal:condition="not:use_email_as_login">\n-                        <label for="cb_remember" i18n:translate="label_remember_my_name">Remember my name.</label>\n-\n-                        <div i18n:translate="help_remember_my_name"\n-                             class="formHelp">\n-                            Check this to have your user name filled in automatically when you log in later.\n-                        </div>\n-                        </tal:username>\n-\n-                        <tal:email tal:condition="use_email_as_login">\n-                        <label for="cb_remember" i18n:translate="label_remember_my_email">Remember my email address.</label>\n-\n-                        <div i18n:translate="help_remember_my_email"\n-                             class="formHelp">\n-                            Check this to have your email address filled in automatically when you log in later.\n-                        </div>\n-                        </tal:email>\n-\n-                    </div>\n-\n-                    <div class="formControls">\n-\n-                        <input class="context"\n-                               type="submit"\n-                               name="submit"\n-                               value="Log in"\n-                               i18n:attributes="value label_log_in;"\n-                               />\n-\n-                    </div>\n-\n-                </div>\n-\n-            </form>\n-\n-            <form tal:attributes="action external_login_url"\n-                  class="pat-formautofocus"\n-                  method="get"\n-                  id="login_form"\n-                  tal:condition="use_external">\n-\n-                <div id="login-form">\n-\n-                    <input type="hidden"\n-                        name="next"\n-                        value=""\n-                    tal:attributes="value string:${request/URL1}/logged_in" />\n-\n-                    <div class="formControls">\n-\n-                        <input class="context"\n-                               type="submit"\n-                               name="submit"\n-                               value="Log in"\n-                               i18n:attributes="value label_log_in;"\n-                               />\n-\n-                    </div>\n-\n-                </div>\n-\n-            </form>\n-\n-        <tal:use_iframe condition="use_iframe">\n-\n-            <form action="#"\n-                  method="get"\n-                  id="login_form"\n-                  name="login_form"\n-                  class="iframe-wrapper"\n-                  tal:define="params python:dict(next=request.URL1+\'/logged_in\', target=\'_parent\', ajax_load=True, ajax_include_head=True, mail_password_url=mail_password, join_url=join);\n-                              dummy python:came_from and params.update(dict(came_from=came_from));\n-                              src external_login_url"\n-                  tal:attributes="action src">\n-\n-                <div id="login-form">\n-\n-                    <iframe name="login-form-iframe"\n-                        id="login-form-iframe"\n-                        tal:attributes="src python:external_login_url+test(join_url.find(\'?\')==-1, \'?\', \'&amp;\')+ztu.make_query(params);"\n-                        >\n-\n-                        <input tal:replace="structure python:ztu.make_hidden_input(params)" />\n-\n-                        <div class="formControls">\n-\n-                            <input class="context"\n-                                   type="submit"\n-                                   name="submit"\n-                                   value="Log in"\n-                                   i18n:attributes="value label_log_in;"\n-                                   />\n-\n-                        </div>\n-\n-                    </iframe>\n-\n-                </div>\n-\n-            </form>\n-\n-        </tal:use_iframe>\n-\n-            <div id="login-forgotten-password"\n-                 tal:condition="python:mail_password_url and use_normal">\n-                <strong i18n:translate="box_forgot_password_option">\n-                    Forgot your password?\n-                </strong>\n-                <p class="discreet"\n-                   i18n:translate="help_password_retrieval">\n-                    If you have forgotten your password,\n-                    <span i18n:name="click_here">\n-                        <a tal:define="mail_password_url python:mail_password_url+test(mail_password_url.find(\'?\')==-1, \'?\', \'&amp;\')+ztu.make_query(userid=login_name)"\n-                            tal:attributes="href mail_password_url; target target;"\n-                           i18n:translate="label_click_here_to_retrieve">we can send you a new one</a></span>.\n-                </p>\n-            </div>\n-\n-            <div id="login-new-user"\n-               tal:condition="python:join_url and use_normal">\n-                <strong i18n:translate="heading_new_user">\n-                New user?\n-                </strong>\n-\n-                <p i18n:translate="description_no_account">\n-                If you do not have an account here, head over to the\n-                <span i18n:name="registration_form">\n-                    <a href=""\n-                       tal:attributes="href join_url; target target;"\n-                       i18n:translate="description_no_account_registration_linktext"\n-                        >registration form</a></span>.\n-                </p>\n-\n-            </div>\n-\n-        </metal:login>\n-    </div>\n-\n-    </metal:main>\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata\ndeleted file mode 100644\nindex 1c6a68f5c..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Sign in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy\ndeleted file mode 100644\nindex 85d651e64..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy\n+++ /dev/null\n@@ -1,98 +0,0 @@\n-## Script (Python) "validate_login_form"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Validate login\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-request = context.REQUEST\n-js_enabled = request.get(\'js_enabled\', 0)  # is javascript enabled?\n-js_enabled = js_enabled == \'1\' or js_enabled == 1\n-cookies_enabled = request.get(\'cookies_enabled\', 0)  # are cookies enabled?\n-cookies_enabled = cookies_enabled == \'1\' or cookies_enabled == 1\n-\n-if js_enabled and not cookies_enabled:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'You must enable cookies before you can log in.\'), \'error\')\n-    state.set(status=\'enable_cookies\')\n-    return state\n-\n-mt=context.portal_membership\n-if mt.isAnonymousUser():\n-    email_login = context.portal_registry[\'plone.use_email_as_login\']\n-    if js_enabled:  # javascript is enabled - we can diagnose the failure\n-        # using cookie authentication?\n-        auth = getattr(context, \'cookie_authentication\', None)\n-        if auth:\n-            user_name = request.get(\'login_name\', None)\n-            password_empty = request.get(\'pwd_empty\', None) == \'1\'\n-            ac_name = auth.name_cookie\n-            ac_password = auth.pw_cookie\n-\n-            if not user_name:\n-                # no user name\n-                if email_login:\n-                    state.setError(\n-                            ac_name,\n-                            _(u\'Please enter your email address.\'),\n-                            \'email_address_required\')\n-                else:\n-                    state.setError(\n-                            ac_name,\n-                            _(u\'Please enter your login name.\'),\n-                            \'login_name_required\')\n-            if password_empty:\n-                state.setError(\n-                        ac_password,\n-                        _(u\'Please enter your password.\'),\n-                        \'password_required\')\n-            verify_login_name = context.portal_registry[\'plone.verify_login_name\']\n-            if user_name and verify_login_name:\n-                # XXX mixing up username and loginname here\n-                if mt.getMemberById(user_name) is None:\n-                    if email_login:\n-                        state.setError(\n-                                ac_name,\n-                                _(u\'Email address not known.\'),\n-                                \'email_address_not_known\')\n-                    else:\n-                        state.setError(\n-                                ac_name,\n-                                _(u\'Login name not found.\'),\n-                                \'login_name_not_found\')\n-                elif not password_empty:\n-                    state.setError(\n-                            ac_password,\n-                            _(u\'Password incorrect.\'),\n-                            \'password_incorrect\')\n-        if email_login:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both email address and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        else:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both login name and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        state.set(status=\'failure\')\n-    else:  # no javascript - do low tech login failure\n-        if email_login:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both email address and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        else:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both login name and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        state.set(status=\'failure_page\')\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata\ndeleted file mode 100644\nindex 59fcf20e0..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-proxy=Manager\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_initial.cpy b/Products/CMFPlone/skins/plone_login/login_initial.cpy\ndeleted file mode 100644\nindex b8fb15df4..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_initial.cpy\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-## Controller Python Script "login_initial"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Handle a user\'s initial login\n-\n-# do anything that must be done during a user\'s initial login here\n-\n-# afterwards, change the password if necessary\n-if state.getKwargs().get(\'must_change_password\', 0):\n-    state.set(status=\'login_change_password\')\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata\ndeleted file mode 100644\nindex 5935f327a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.login_change_password=traverse_to:string:login_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_next.cpy b/Products/CMFPlone/skins/plone_login/login_next.cpy\ndeleted file mode 100644\nindex e5e5ba212..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_next.cpy\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-## Controller Python Script "login_next"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login next actions\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-import ZTUtils\n-\n-REQUEST = context.REQUEST\n-\n-util = context.plone_utils\n-membership_tool = context.portal_membership\n-if membership_tool.isAnonymousUser():\n-    REQUEST.RESPONSE.expireCookie(\'__ac\', path=\'/\')\n-    util.addPortalMessage(_(u\'Login failed\'), \'error\')\n-    return state.set(status=\'failure\')\n-\n-came_from = REQUEST.get(\'came_from\', None)\n-next = REQUEST.get(\'next\', None)\n-\n-# if we weren\'t called from something that set \'came_from\' or if HTTP_REFERER\n-# is the \'logged_out\' page, return the default \'login_success\' form\n-if came_from is not None:\n-    scheme, location, path, parameters, query, fragment = util.urlparse(came_from)\n-    template_id = path.split(\'/\')[-1]\n-    if template_id in [\'login\', \'login_success\', \'login_password\',\n-                       \'login_failed\', \'login_form\', \'logged_in\', \'logout\',\n-                       \'logged_out\', \'registered\', \'mail_password\',\n-                       \'mail_password_form\', \'register\', \'require_login\',\n-                       \'member_search_results\', \'pwreset_finish\',\n-                       # We need localhost in the list, or Testing.testbrowser\n-                       # tests won\'t be able to log in via login_form\n-                       \'localhost\']:\n-        came_from = \'\'\n-    # It is probably a good idea in general to filter out urls outside the\n-    # portal. An added bonus: this fixes some problems with a Zope bug that\n-    # doesn\'t properly unmangle the VirtualHostMonster stuff when setting\n-    # ACTUAL_URL\n-    if not context.portal_url.isURLInPortal(came_from):\n-        came_from = \'\'\n-\n-if next:\n-    if not context.portal_url.isURLInPortal(next):\n-        came_from = next = \'\'\n-    else:\n-        state.set(status=\'external\')\n-\n-if came_from and not next:\n-    # If javascript is not enabled, it is possible that cookies are not\n-    # enabled.\n-    # If cookies aren\'t enabled, the redirect will log the user out, and\n-    # confusion\n-    # may arise. Redirect only if we know for sure that cookies are enabled.\n-\n-    util.addPortalMessage(_(u\'Welcome! You are now logged in.\'))\n-    came_from = util.urlunparse((scheme, location, path, parameters,\n-                                query, fragment))\n-\n-    # redirect immediately\n-    return REQUEST.RESPONSE.redirect(came_from)\n-\n-state.set(came_from=came_from, next=next)\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata\ndeleted file mode 100644\nindex 572937c29..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_success\n-action.failure=traverse_to:string:login_failed\n-action.external=traverse_to:string:external_login_return\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password.cpt b/Products/CMFPlone/skins/plone_login/login_password.cpt\ndeleted file mode 100644\nindex 777132294..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password.cpt\n+++ /dev/null\n@@ -1,118 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-\n-<tal:block tal:condition="exists: context/portal_skins | nothing"\n-           tal:replace="nothing">\n-\n-    <tal:block tal:condition="context/portal_skins/updateSkinCookie | nothing"\n-       tal:define="dummy context/setupCurrentSkin" />\n-\n-</tal:block>\n-\n-<metal:main fill-slot="main"\n-     tal:define="errors options/state/getErrors;">\n-\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="heading_welcome">Welcome!</h1>\n-\n-    <div class="documentDescription">\n-        <span i18n:translate="description_logged_in">\n-            This is the first time that you\'ve logged in to\n-            <span tal:content="context/title" tal:omit-tag="" i18n:name="here">here</span>.\n-        </span>\n-\n-        <span i18n:translate="description_change_initial_password">\n-        Before you start exploring, you need to change your original password.\n-        This ensures that the password you received via email cannot be used in a malicious manner.\n-        </span>\n-    </div>\n-\n-    <div id="content-core">\n-        <p i18n:translate="description_use_form_to_change_password">\n-            Please use the form below to change your password.\n-        </p>\n-\n-        <form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-              class="pat-formautofocus"\n-              name="change_password"\n-              method="post">\n-\n-            <fieldset>\n-            <legend i18n:translate="legend_password_details">Password Details</legend>\n-\n-            <input type="hidden" name="form.submitted" value="1" />\n-            <input type="hidden" name="initial_login" value="1" />\n-            <input type="hidden"\n-                   name="came_from"\n-                   value=""\n-                   tal:define="came_from request/came_from|nothing"\n-                   tal:condition="came_from"\n-                   tal:attributes="value came_from"\n-                   />\n-\n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n-\n-            <div class="field"\n-                 tal:define="error python:errors.get(\'password\', None);"\n-                 tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                    <label for="password"\n-                           i18n:translate="label_new_password">New password</label>\n-\n-                    <div class="formHelp" i18n:translate="help_new_password">\n-                    Enter your new password.\n-                    </div>\n-\n-                    <div tal:content="error">Validation error output</div>\n-\n-                    <input type="password"\n-                           name="password"\n-                           id="password"\n-                           size="10"\n-                           />\n-            </div>\n-\n-            <div class="field"\n-                 tal:define="error python:errors.get(\'confirm\', None);"\n-                 tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                <label for="confirm"\n-                       i18n:translate="label_confirm_password">Confirm password</label>\n-\n-                <div class="formHelp" i18n:translate="help_confirm_password">\n-                    Re-enter the password. Make sure the passwords are identical.\n-                </div>\n-\n-                <div tal:content="error">Validation error output</div>\n-\n-                <input type="password"\n-                       name="confirm"\n-                       id="confirm"\n-                       size="10"\n-                       />\n-            </div>\n-\n-            <div class="formControls">\n-                <input class="standalone"\n-                       type="submit"\n-                       name="submit"\n-                       value="Change Password"\n-                       i18n:attributes="value label_change_password;" />\n-            </div>\n-\n-            </fieldset>\n-\n-        </form>\n-    </div>\n-</metal:main>\n-\n-</body>\n-</html>\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata\ndeleted file mode 100644\nindex 6c4357ca3..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[default]\n-title=Choose a new password\n-border=None\n-\n-[validators]\n-validators=login_password_validate\n-\n-[actions]\n-action.success=traverse_to:string:login_change_password\n-action.failure=traverse_to:string:login_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password_validate.vpy b/Products/CMFPlone/skins/plone_login/login_password_validate.vpy\ndeleted file mode 100644\nindex 0a2e0d706..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password_validate.vpy\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-## Script (Python) "validate_login_password"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Validate password change during login\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-mt = context.portal_membership\n-if mt.isAnonymousUser():\n-    # not logged in -- most likely because cookies not enabled\n-    context.plone_utils.addPortalMessage(\n-        _(u\'You must enable cookies before you can log in.\'), \'error\')\n-    state.set(status=\'failure_anonymous\')\n-    return state\n-\n-request = context.REQUEST\n-password = request.get(\'password\', None)\n-password_confirm = request.get(\'confirm\', None)\n-\n-failMessage = context.portal_registration \\\n-                .testPasswordValidity(password, password_confirm)\n-if failMessage:\n-    context.plone_utils.addPortalMessage(failMessage, \'error\')\n-    state.setError(\'password\', failMessage)\n-    state.set(status=\'failure\')\n-    return state\n-\n-if password != password_confirm:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'Please make sure you confirm your password.\'), \'error\')\n-    state.setError(\'confirm\', _(u\'Passwords must match.\'))\n-    state.set(status=\'failure\')\n-    return state\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_success.pt b/Products/CMFPlone/skins/plone_login/login_success.pt\ndeleted file mode 100644\nindex 0e3fdd34e..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_success.pt\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-\n-<tal:block tal:condition="exists: context/portal_skins | nothing"\n-           tal:replace="nothing">\n-    <tal:block tal:condition="context/portal_skins/updateSkinCookie | nothing"\n-               tal:define="dummy context/setupCurrentSkin" />\n-</tal:block>\n-\n-<metal:main fill-slot="main"\n-     tal:define="portal_state nocall:context/@@plone_portal_state;\n-                 isAnon portal_state/anonymous;">\n-\n-  <metal:not-anon tal:condition="not:isAnon"\n-                  tal:define="came_from request/came_from|nothing;\n-                              initial_login request/initial_login|nothing;\n-                              js_enabled python:request.get(\'js_enabled\',\'1\')!=\'0\';">\n-\n-      <h1 class="documentFirstHeading"\n-          i18n:translate="heading_you_are_now_logged_in">You are now logged in</h1>\n-\n-      <p tal:condition="initial_login" class="documentDescription"\n-         i18n:translate="description_logged_in_explain">\n-         Notice that the top right bar has changed. It now\n-         contains several personalized items. Use these items\n-         to control your settings and your personal area.\n-         They will remain as long as you are logged in.\n-      </p>\n-\n-      <div id="content-core">\n-          <p tal:condition="came_from">\n-            <a href=""\n-               tal:attributes="href came_from"\n-               i18n:translate="label_login_continue">\n-              Continue</a>\n-          </p>\n-\n-          <p tal:condition="python:not came_from">\n-            <a href=""\n-               tal:attributes="href portal_state/navigation_root_url"\n-               i18n:translate="label_login_continue_to_home_page">\n-              Continue to the\n-              <span tal:content="portal_state/navigation_root_title" i18n:name="portal_title">\n-                  portal title\n-              </span>\n-              home page\n-              </a>\n-          </p>\n-\n-          <div tal:condition="not:js_enabled">\n-             <p i18n:translate="description_enable_cookies_to_stay_logged_in">\n-                Note: If you do not remain logged in after leaving this page,\n-                it is because you need to enable cookies in your browser.\n-             </p>\n-          </div>\n-      </div>\n-  </metal:not-anon>\n-\n-  <metal:anon tal:condition="isAnon">\n-      <div metal:use-macro="context/login_failed/macros/login_failed" />\n-  </metal:anon>\n-\n-</metal:main>\n-\n-</body>\n-</html>\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_success.pt.metadata b/Products/CMFPlone/skins/plone_login/login_success.pt.metadata\ndeleted file mode 100644\nindex e86cc5843..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_success.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=Login successful\n-border=None\ndiff --git a/Products/CMFPlone/skins/plone_login/logout.cpy b/Products/CMFPlone/skins/plone_login/logout.cpy\ndeleted file mode 100644\nindex 125e46bb1..000000000\n--- a/Products/CMFPlone/skins/plone_login/logout.cpy\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-## Controller Python Script "logout"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##title=Logout handler\n-##parameters=\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-request = context.REQUEST\n-\n-mt = getToolByName(context, \'portal_membership\')\n-mt.logoutUser(request)\n-\n-from Products.CMFPlone.utils import transaction_note\n-transaction_note(\'Logged out\')\n-\n-# Handle external logout requests from other portals\n-next = request.get(\'next\', None)\n-if (next is not None and context.portal_url.isURLInPortal(next)):\n-    target_url = next\n-else:\n-    target_url = request.URL1 + \'/logged_out\'\n-    external_logout_url = context.portal_registry[\'plone.external_logout_url\']\n-    if external_logout_url:\n-        target_url = "%s?next=%s" % (external_logout_url, target_url)\n-\n-# Double \'$\' to avoid injection into TALES\n-target_url = target_url.replace(\'$\', \'$$\')\n-return state.set(next_action=\'redirect_to:string:\' + target_url)\ndiff --git a/Products/CMFPlone/skins/plone_login/registered.pt b/Products/CMFPlone/skins/plone_login/registered.pt\ndeleted file mode 100644\nindex ad5f1e133..000000000\n--- a/Products/CMFPlone/skins/plone_login/registered.pt\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-\n-<metal:main fill-slot="main"\n-     tal:define="auth nocall:context/acl_users/credentials_cookie_auth|nothing">\n-\n-    <div id="content-core" tal:condition="python: not auth" i18n:translate="registered_disabled">\n-           Cookie authentication has been disabled.\n-    </div>\n-\n-    <div tal:define="enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\']"\n-         tal:omit-tag=""\n-         tal:condition="python: auth">\n-\n-        <h1 class="documentFirstHeading"\n-            i18n:translate="heading_welcome">\n-            Welcome!\n-        </h1>\n-\n-        <div class="documentDescription" i18n:translate="description_you_are_registered">\n-            You have been registered.\n-        </div>\n-\n-        <div id="content-core">\n-            <p tal:condition="not: enable_user_pwd_choice"\n-               tal:define="expire_length context/portal_password_reset/getExpirationTimeout;\n-                           toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                           expire_date python:toLocalizedTime(DateTime() + expire_length, long_format=1)"\n-               i18n:translate="description_password_reset_or_registered">\n-                You will receive an e-mail shortly containing a URL that will allow you to\n-                set your password. When you receive this e-mail, please follow the link to\n-                complete your registration process. NOTE: The password reset URL will expire\n-                on <span tal:replace="expire_date" i18n:name="time"/>. If your\n-                password reset request expires, you may use the "Forgot your password" link\n-                to generate another password reset request.\n-            </p>\n-\n-            <tal:block condition="enable_user_pwd_choice">\n-                <p i18n:translate="description_you_can_log_on_now">\n-                    Click the button to log in immediately.\n-                </p>\n-\n-                <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                    <strong i18n:translate="">\n-                        Error\n-                    </strong>\n-                    <span tal:omit-tag=""\n-                        i18n:translate="enable_cookies_message_before_login">\n-                        Cookies are not enabled. You must enable cookies before you can log in.\n-                    </span>\n-                </div>\n-\n-\n-                <form action=""\n-                      method="post"\n-                      tal:define="form request/form;\n-                                  username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n-                                  password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n-                                  ac_name auth/name_cookie|string:__ac_name;\n-                                  ac_password auth/pw_cookie|string:__ac_password;\n-                                  portal_url context/portal_url;"\n-                      tal:attributes="action python:\'%s/login_form\' % portal_url">\n-\n-                     <input type="hidden" name="form.submitted" value="1" />\n-                     <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                     <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="0" />\n-                     <input type="hidden" name="login_name" id="login_name" value="" />\n-                     <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-                    <input type="hidden"\n-                           name="came_from"\n-                           value=""\n-                           tal:attributes="value request/came_from|nothing;" />\n-                    <input type="hidden"\n-                           name="ac_name"\n-                           value=""\n-                           tal:attributes="id ac_name;\n-                                           name ac_name;\n-                                           value username;" />\n-                    <input type="hidden"\n-                           name="ac_password"\n-                           value=""\n-                           tal:attributes="name ac_password;\n-                                           id ac_password;\n-                                           value password;" />\n-                    <input class="standalone"\n-                           type="submit"\n-                           value="Log in"\n-                           i18n:attributes="value label_log_in;"\n-                           />\n-                </form>\n-            </tal:block>\n-        </div>\n-\n-    </div>\n-\n-</metal:main>\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/registered.pt.metadata b/Products/CMFPlone/skins/plone_login/registered.pt.metadata\ndeleted file mode 100644\nindex c46a73de7..000000000\n--- a/Products/CMFPlone/skins/plone_login/registered.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=You have been registered\n-border=None\ndiff --git a/Products/CMFPlone/skins/plone_login/require_login.py b/Products/CMFPlone/skins/plone_login/require_login.py\ndeleted file mode 100644\nindex 37b7bec82..000000000\n--- a/Products/CMFPlone/skins/plone_login/require_login.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-## Script (Python) "require_login"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login\n-\n-login = \'login\'\n-\n-portal = context.portal_url.getPortalObject()\n-# if cookie crumbler did a traverse instead of a redirect,\n-# this would be the way to get the value of came_from\n-#url = portal.getCurrentUrl()\n-#context.REQUEST.set(\'came_from\', url)\n-\n-if context.portal_membership.isAnonymousUser():\n-    return portal.restrictedTraverse(login)()\n-else:\n-    return portal.restrictedTraverse(\'insufficient_privileges\')()\ndiff --git a/Products/CMFPlone/tests/LoginAndLogout.txt b/Products/CMFPlone/tests/LoginAndLogout.rst\nsimilarity index 100%\nrename from Products/CMFPlone/tests/LoginAndLogout.txt\nrename to Products/CMFPlone/tests/LoginAndLogout.rst\ndiff --git a/Products/CMFPlone/tests/emaillogin.txt b/Products/CMFPlone/tests/emaillogin.rst\nsimilarity index 76%\nrename from Products/CMFPlone/tests/emaillogin.txt\nrename to Products/CMFPlone/tests/emaillogin.rst\nindex 6dfff3e49..3be215f64 100644\n--- a/Products/CMFPlone/tests/emaillogin.txt\n+++ b/Products/CMFPlone/tests/emaillogin.rst\n@@ -13,17 +13,17 @@ Some bootstrapping::\n     >>> portal = layer[\'portal\']\n     >>> browser = Browser(app)\n \n-First we login as admin.\n+First we login as admin::\n \n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import SITE_OWNER_PASSWORD\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n \n Now we allow users to register themselves. We also allow them to pick\n-their own passwords to ease testing.\n+their own passwords to ease testing::\n \n     >>> browser.open(\'http://nohost/plone/@@security-controlpanel\')\n     >>> browser.getControl(name=\'form.widgets.enable_self_reg:list\').value = True\n@@ -32,7 +32,7 @@ their own passwords to ease testing.\n     >>> \'Changes saved\' in browser.contents\n     True\n \n-We logout:\n+We logout::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n \n@@ -41,7 +41,7 @@ Registration\n ------------\n \n We then visit the registration form. We can fill in a user name\n-there:\n+there::\n \n     >>> browser.open(\'http://nohost/plone/@@register\')\n     >>> browser.getControl(\'User Name\').value=\'username\'\n@@ -52,14 +52,14 @@ there:\n     >>> \'You have been registered.\' in browser.contents\n     True\n \n-So that still works. Now we become admin again.\n+So that still works. Now we become admin again::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n \n-We switch on using the email address as login name.\n+We switch on using the email address as login name::\n \n     >>> browser.open(\'http://nohost/plone/@@security-controlpanel\')\n     >>> browser.getControl(name=\'form.widgets.use_email_as_login:list\').value = [\'selected\']\n@@ -69,7 +69,7 @@ We switch on using the email address as login name.\n     >>> browser.open(\'http://nohost/plone/logout\')\n \n Now we visit the registration form. The user name field is no longer\n-there:\n+there::\n \n     >>> browser.open(\'http://nohost/plone/@@register\')\n     >>> browser.getControl(\'User Name\')\n@@ -77,7 +77,7 @@ there:\n     ...\n     LookupError: label \'User Name\'...\n \n-We fill in the rest of the form:\n+We fill in the rest of the form::\n \n     >>> browser.getControl(\'E-mail\').value=\'email@example.org\'\n     >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n@@ -90,11 +90,11 @@ We fill in the rest of the form:\n Login\n -----\n \n-We can now login with this email address:\n+We can now login with this email address::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'You are now logged in\' in browser.contents\n     True\n@@ -104,7 +104,7 @@ the browser even when the user is not actually logged in: the text\n \'Log in\' still appears and no link to the user\'s dashboard is\n available. Or even more subtle: that text and that link are there,\n but visiting another page will show that the user does not remain\n-logged it. This test should be enough:\n+logged it. This test should be enough::\n \n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n@@ -115,19 +115,19 @@ The first registered user might still be able to login with his\n non-email login name, but cannot login with his email address, as his\n account was created before the policy to use emails as logins was\n used. A future Plone version may solve that automatically. For now,\n-this can be remedied by running the provided migration.\n+this can be remedied by running the provided migration::\n \n     >>> from zope.component import getMultiAdapter\n     >>> migrationView = getMultiAdapter((portal, portal.REQUEST), name=\'migrate-to-emaillogin\')\n     >>> result = migrationView.switch_to_email()\n     >>> import transaction; transaction.commit()\n \n-Now we try logging out and in again with the given email address.\n+Now we try logging out and in again with the given email address::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'username@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n@@ -142,17 +142,17 @@ Changing the email address\n --------------------------\n \n We again log in as the user created after using email as login was\n-switched on.\n+switched on::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n \n-We change the email address.\n+We change the email address::\n \n     >>> browser.open(\'http://nohost/plone/@@personal-information\')\n     >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n@@ -164,28 +164,28 @@ We change the email address.\n \n After those two changes, we can no longer login with our first email\n address. This may be fixable by changing PluggableAuthService if we\n-want. (See PLIP9214 notes.)\n+want. (See PLIP9214 notes.)::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email1@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email1@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'Login failed\' in browser.contents\n     True\n \n-The current email address of course works fine for logging in:\n+The current email address of course works fine for logging in::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email2@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n \n-Picking the e-mail address of another user should of course fail:\n+Picking the e-mail address of another user should of course fail::\n \n     >>> browser.open(\'http://nohost/plone/@@personal-information\')\n     >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n@@ -201,23 +201,21 @@ These tests are partly copied from... PasswordResetTool. (surprise!)\n \n Now it is time to forget our password and click the ``Forgot your\n password`` link in the login form. This should work by just filling\n-in our current email address:\n+in our current email address::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getLink(\'we can send you a new one\').click()\n-    >>> browser.url.startswith(\'http://nohost/plone/mail_password_form\')\n-    True\n-    >>> form = browser.getForm(name=\'mail_password\')\n-    >>> \'My email address is\' in browser.contents\n+    >>> browser.getLink(\'Get help\').click()\n+    >>> browser.url.startswith(\'http://nohost/plone/@@login-help\')\n     True\n-    >>> form.getControl(name=\'userid\').value = \'email2@example.org\'\n-    >>> form.getControl(\'Start password reset\').click()\n-    >>> \'Password reset confirmation sent\' in browser.contents\n+    >>> form = browser.getForm(index=1)\n+    >>> form.getControl(name=\'form.widgets.reset_password\').value = \'email2@example.org\'\n+    >>> form.getControl(\'Reset your password\').click()\n+    >>> \'An email has been sent with instructions on how to reset your password.\' in browser.contents\n     True\n \n As part of our test setup, we replaced the original MailHost with our\n own version. Our version doesn\'t mail messages, it just collects them\n-in a list called ``messages``:\n+in a list called ``messages``::\n \n     >>> mailhost = portal.MailHost\n     >>> len(mailhost.messages)\n@@ -225,19 +223,19 @@ in a list called ``messages``:\n     >>> msg = mailhost.messages[0]\n \n Now that we have the message, we want to look at its contents, and\n-then we extract the address that lets us reset our password:\n+then we extract the address that lets us reset our password::\n \n     >>> "To: email2@example.org" in msg\n     True\n \n-Now get the link:\n+Now get the link::\n \n     >>> import quopri\n     >>> msg = quopri.decodestring(msg)\n     >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n     >>> address = msg[url_index:].split()[0]\n \n-Now that we have the address, we will reset our password:\n+Now that we have the address, we will reset our password::\n \n     >>> browser.open(address)\n     >>> "Set your password" in browser.contents\n@@ -250,18 +248,18 @@ Now that we have the address, we will reset our password:\n     >>> "Your password has been set successfully." in browser.contents\n     True\n \n-We can now login using our new password:\n+We can now login using our new password::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n-    >>> browser.getControl(\'Password\').value = \'secretion\'\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email2@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n     >>> browser.open(\'http://nohost/plone/logout\')\n \n-The first user can still reset his password with his user id:\n+The first user can still reset his password with his user id::\n \n     >>> browser.open(\'http://nohost/plone/mail_password_form\')\n     >>> form = browser.getForm(name=\'mail_password\')\n@@ -270,7 +268,7 @@ The first user can still reset his password with his user id:\n     >>> \'Password reset confirmation sent\' in browser.contents\n     True\n \n-The email is sent to the correct email address:\n+The email is sent to the correct email address::\n \n     >>> len(mailhost.messages)\n     2\n@@ -278,13 +276,13 @@ The email is sent to the correct email address:\n     >>> "To: username@example.org" in msg\n     True\n \n-Now get the link:\n+Now get the link::\n \n     >>> msg = quopri.decodestring(msg)\n     >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n     >>> address = msg[url_index:].split()[0]\n \n-Now that we have the address, we will reset our password:\n+Now that we have the address, we will reset our password::\n \n     >>> browser.open(address)\n     >>> "Set your password" in browser.contents\n@@ -299,11 +297,11 @@ Now that we have the address, we will reset our password:\n \n We can now login using our new password. We cannot use the initial\n login name though, but have to use our current email address as that\n-is our login name:\n+is our login name::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n-    >>> browser.getControl(\'Password\').value = \'secretion\'\n+    >>> browser.getControl(name=\'__ac_name\').value = \'username@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.txt b/Products/CMFPlone/tests/pwreset_browser.rst\nsimilarity index 94%\nrename from Products/CMFPlone/tests/pwreset_browser.txt\nrename to Products/CMFPlone/tests/pwreset_browser.rst\nindex 2c160663a..f8187f877 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.txt\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -107,7 +107,7 @@ type in his initial password, so we need to enable that:\n   >>> browser.getLink(\'Log in\').click()\n   >>> browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -116,7 +116,7 @@ Log out again and then join:\n   >>> browser.getLink(\'Log out\').click()\n   >>> "You are now logged out" in browser.contents\n   True\n-  >>> \'New user?\' in browser.contents  # Sunburst theme has no Register link\n+  >>> \'Register\' in browser.contents\n   True\n \n Now register a new user:\n@@ -144,7 +144,7 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   True\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -154,23 +154,22 @@ Log out again:\n   >>> "You are now logged out" in browser.contents\n   True\n \n-Now it is time to forget our password and click the ``Forgot your\n-password`` in the login form:\n+Now it is time to forget our password and click the ``Get help`` in the login form:\n \n   >>> browser.open(\'http://nohost/plone/login\')\n-  >>> browser.getLink(\'we can send you a new one\').click()\n-  >>> browser.url.startswith(\'http://nohost/plone/mail_password_form\')\n+  >>> browser.getLink(\'Get help\').click()\n+  >>> browser.url.startswith(\'http://nohost/plone/@@login-help\')\n   True\n-  >>> form = browser.getForm(name=\'mail_password\')\n-  >>> form.getControl(name=\'userid\').value = \'jsmith\'\n-  >>> form.submit()\n+  >>> form = browser.getForm(index=1)\n+  >>> form.getControl(name=\'form.widgets.reset_password\').value = \'jsmith\'\n+  >>> form.submit(name=\'form.buttons.reset\')\n \n-We check if the old password always works.\n+We check if the old password still works.\n \n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n \n@@ -230,7 +229,7 @@ We can now login using our new password:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n \n@@ -261,7 +260,7 @@ First, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -289,7 +288,7 @@ We want to logout and login as the new member:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'wsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'supersecret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -300,7 +299,7 @@ Again, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -310,7 +309,7 @@ We navigate to the Users Overview page and reset a password user:\n   >>> browser.getLink(\'Users and Groups\').click()\n   >>> resets = browser.getControl(name=\'users.resetpassword:records\')\n   >>> reset = resets.getControl(value=\'wsmith\')\n-  >>> reset.selected = True  \n+  >>> reset.selected = True\n   >>> browser.getControl(name="form.button.Modify").click()\n   >>> "Changes applied." in browser.contents\n   True\n@@ -323,7 +322,7 @@ We check if the old password is well changed.\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'wsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'supersecret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should not be logged in:\n \n@@ -358,7 +357,7 @@ First off, we need to set ``validate_mail`` to False:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -453,7 +452,7 @@ First, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \ndiff --git a/Products/CMFPlone/tests/search_form.txt b/Products/CMFPlone/tests/search_form.rst\nsimilarity index 100%\nrename from Products/CMFPlone/tests/search_form.txt\nrename to Products/CMFPlone/tests/search_form.rst\ndiff --git a/Products/CMFPlone/tests/testControlPanelScripts.py b/Products/CMFPlone/tests/testControlPanelScripts.py\nindex 925109509..8c91d22be 100644\n--- a/Products/CMFPlone/tests/testControlPanelScripts.py\n+++ b/Products/CMFPlone/tests/testControlPanelScripts.py\n@@ -6,42 +6,9 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n-from six import StringIO\n from zExceptions import Forbidden\n \n \n-class TestNoGETControlPanel(PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.folder_path = \'/\' + self.folder.absolute_url(1)\n-        self.setRoles([\'Manager\'])\n-        self.portal.portal_membership.addMember(\'bribri\', \'secret\',\n-                                                [\'Manager\'], [])\n-        self.login(\'bribri\')\n-\n-    def _onlyPOST(self, path, qstring=\'\', success=200, rpath=None):\n-        qstring += \'&%s=%s\' % self.getAuthenticator()\n-        basic_auth = \'%s:%s\' % (\'bribri\', \'secret\')\n-        env = dict()\n-        if rpath:\n-            env[\'HTTP_REFERER\'] = self.app.absolute_url() + rpath\n-        response = self.publish(\'%s?%s\' % (path, qstring), basic_auth, env,\n-                                handle_errors=True)\n-        self.assertEqual(response.getStatus(), 403)\n-\n-        data = StringIO(qstring)\n-        if \'QUERY_STRING\' in env:\n-            del env[\'QUERY_STRING\']\n-        response = self.publish(path, basic_auth, env, request_method=\'POST\',\n-                                stdin=data)\n-        self.assertEqual(response.getStatus(), success)\n-\n-    def test_loginChangePassword(self):\n-        path = self.folder_path + \'/login_change_password\'\n-        qstring = \'password=foo\'\n-        self._onlyPOST(path, qstring)\n-\n-\n class TestPrefsUserManage(PloneTestCase):\n \n     def afterSetUp(self):\n@@ -60,9 +27,13 @@ def addMember(self, username, fullname, email, roles, last_login_time):\n     def test_ploneChangePasswordPostOnly(self):\n         self.login(TEST_USER_NAME)\n         self.setRequestMethod(\'GET\')\n-        self.assertRaises(Forbidden, self.portal.plone_change_password,\n-                          current=TEST_USER_PASSWORD, password=TEST_USER_PASSWORD,\n-                          password_confirm=TEST_USER_PASSWORD)\n+        self.assertRaises(\n+            Forbidden,\n+            self.portal.plone_change_password,\n+            current=TEST_USER_PASSWORD,\n+            password=TEST_USER_PASSWORD,\n+            password_confirm=TEST_USER_PASSWORD\n+        )\n \n \n class TestAccessControlPanelScripts(PloneTestCase):\ndiff --git a/Products/CMFPlone/tests/testCookieAuth.py b/Products/CMFPlone/tests/testCookieAuth.py\nindex 201a0ae58..3d52893fe 100644\n--- a/Products/CMFPlone/tests/testCookieAuth.py\n+++ b/Products/CMFPlone/tests/testCookieAuth.py\n@@ -1,50 +1,59 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import logout\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing.bbb import PloneTestCase\n-from six.moves.urllib import parse\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import base64\n+import unittest\n \n \n-class TestCookieAuth(PloneTestCase):\n+class TestCookieAuth(unittest.TestCase):\n \n-    def afterSetUp(self):\n-        self.portal_url = self.portal.absolute_url()\n-        self.portal_path = \'/%s\' % self.portal.absolute_url(1)\n-        self.folder_path = \'/%s\' % self.folder.absolute_url(1)\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal[\'test-folder\']\n+        self.browser = Browser(self.layer[\'app\'])\n         self.auth_info = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n         self.cookie = base64.encodestring(self.auth_info)[:-1]\n         self.folder.manage_permission(\'View\', [\'Manager\'], acquire=0)\n+        logout()\n \n     def testAutoLoginPage(self):\n         # Should send us to login_form\n-        response = self.publish(self.folder_path)\n-        self.assertEqual(response.getStatus(), 302)\n-\n-        location = response.getHeader(\'Location\')\n-        self.assertTrue(location.startswith(self.portal_url))\n-        self.assertTrue(parse.urlparse(location)[2].endswith(\'/require_login\'))\n+        self.browser.open(self.folder.absolute_url())\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone/login?came_from=http%3A//nohost/plone/test-folder\'  # noqa: E501\n+        )\n \n     def testInsufficientPrivileges(self):\n         # Should send us to login_form\n-        response = self.publish(self.folder_path, env={\'__ac\': self.cookie})\n-        self.assertEqual(response.getStatus(), 302)\n-\n-        location = response.getHeader(\'Location\')\n-        self.assertTrue(location.startswith(self.portal_url))\n-        self.assertTrue(parse.urlparse(location)[2].endswith(\'/require_login\'))\n+        self.browser.open(self.portal.absolute_url())\n+        self.browser.cookies[\'__ac\'] = self.cookie\n+        self.browser.open(self.folder.absolute_url())\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone/login?came_from=http%3A//nohost/plone/test-folder\'  # noqa: E501\n+        )\n \n     def testSetSessionCookie(self):\n         # The __ac cookie should be set for the session only\n-        form = {\'__ac_name\': TEST_USER_NAME,\n-                \'__ac_password\': TEST_USER_PASSWORD}\n-\n-        response = self.publish(self.portal_path + \'/logged_in\',\n-                                env={\'QUERY_STRING\': parse.urlencode(form)})\n-\n-        self.assertEqual(response.getStatus(), 200)\n-\n-        cookie = response.getCookie(\'__ac\')\n-        self.assertEqual(cookie.get(\'path\'), \'/\')\n-        self.assertEqual(cookie.get(\'expires\'), None)\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n+        self.browser.getControl(\n+            name=\'__ac_password\'\n+        ).value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertIn(\'__ac\', self.browser.cookies)\n+        self.assertEqual(\n+            self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n+            \'/\',\n+        )\n+        self.assertIsNone(self.browser.cookies.getinfo(\'__ac\')[\'expires\'])\ndiff --git a/Products/CMFPlone/tests/testLoggedIn.py b/Products/CMFPlone/tests/testLoggedIn.py\ndeleted file mode 100644\nindex fe823f3d4..000000000\n--- a/Products/CMFPlone/tests/testLoggedIn.py\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-\n-from Products.CMFCore.permissions import SetOwnProperties\n-from DateTime import DateTime\n-from time import sleep\n-\n-\n-class TestLogin(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'member\', \'secret\', [\'Member\'], [])\n-        self.login(\'member\')\n-\n-    def testLoggedInCreatesMemberArea(self):\n-        if self.membership.memberareaCreationFlag == \'True\':\n-            self.assertEqual(self.membership.getHomeFolder(), None)\n-            self.portal.logged_in()\n-            self.assertNotEqual(self.membership.getHomeFolder(), None)\n-\n-    def testLoggedInSetsLoginTime(self):\n-        now = DateTime()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'login_time\')) < now)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'login_time\')) >= now)\n-\n-    def testLoggedInSetsLastLoginTime(self):\n-        now = DateTime()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) < now)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n-\n-    def testLoggedInSetsLastLoginTimeIfMemberLacksSetOwnPropertiesPermission(self):\n-        # If members lack the "Set own properties" permission, they should\n-        # still be able to log in, and their login times should be set.\n-        now = DateTime()\n-        self.portal.manage_permission(SetOwnProperties, [\'Manager\'], acquire=0)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n-\n-    def testInitialLoginTimeDoesChange(self):\n-        member = self.membership.getAuthenticatedMember()\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        login_time = DateTime(member.getProperty(\'login_time\'))\n-        # Log in again later\n-        sleep(0.2)\n-        self.portal.logged_in()\n-        # login_time did change\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(\n-            DateTime(member.getProperty(\'login_time\')) > login_time)\n-\n-    def testInitialLoginTimeWithString(self):\n-        member = self.membership.getAuthenticatedMember()\n-        # Realize the login_time is not string but DateTime\n-        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n-        self.assertEqual(member.getProperty(\'login_time\').Date(), \'2000/01/01\')\n-\n-        # Update login_time into string\n-        today = DateTime().Date()\n-        member.setProperties(login_time=today)\n-        self.assertIsInstance(member.getProperty(\'login_time\'), str)\n-        self.assertEqual(member.getProperty(\'login_time\'), today)\n-\n-        # Loggin in set login_time with DateTime\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n-        self.assertTrue(member.getProperty(\'login_time\') > DateTime(today))\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 9139f60a8..f233e59d7 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -593,11 +593,6 @@ def testObjectButtonActionsInExpectedOrder(self):\n         ids = [(a[\'id\']) for a in buttons]\n         self.assertEqual(ids, [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', ])\n \n-    def testPloneLoginLayerInDefault(self):\n-        # plone_login layer should exist\n-        path = self.skins.getSkinPath(\'Plone Default\')\n-        self.assertTrue(\'plone_login\' in path)\n-\n     def testCustomSkinFolderExists(self):\n         # the custom skin needs to be created\n         self.assertTrue(\'custom\' in self.skins)\ndiff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py\ndeleted file mode 100644\nindex d34353f6e..000000000\n--- a/Products/CMFPlone/tests/testSSOLogin.py\n+++ /dev/null\n@@ -1,234 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.testing.z2 import Browser\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import TEST_USER_ROLES\n-from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n-from Products.CMFPlone.factory import addPloneSite\n-import transaction\n-\n-\n-class SSOLoginTestCase(PloneTestCase):\n-\n-    def afterSetUp(self):\n-        PloneTestCase.afterSetUp(self)\n-\n-        self.setRoles([\'Manager\'])\n-        addPloneSite(self.app, \'login_portal\',\n-                     content_profile_id=\'Products.ATContentTypes:default\')\n-        addPloneSite(self.app, \'another_portal\',\n-                     content_profile_id=\'Products.ATContentTypes:default\')\n-\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = False  # Don\'t get HTTP 500 pages\n-\n-        self.login_portal = self.app.login_portal  # logins go here\n-        self.another_portal = self.app.another_portal  # another portal\n-        # The extra portals do not get a member setup from the base class.\n-        # Add our user to the other portals to simulate an ldap environment.\n-        for portal in (self.login_portal, self.another_portal):\n-            portal.acl_users.source_users.addUser(\n-                TEST_USER_ID,\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD)\n-        for role in TEST_USER_ROLES:\n-            portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(\n-                TEST_USER_ID, role)\n-\n-        # Configure the login portal to allow logins from our sites.\n-        login_registry = self.login_portal.portal_registry\n-        login_registry[\'plone.allow_external_login_sites\'] = (\n-            self.portal.absolute_url(),\n-            self.another_portal.absolute_url())\n-\n-        # The normal portal needs to allow logins from the login portal,\n-        # otherwise the redirect_to action on login or logout will refuse to\n-        # redirect externally.  This may need to be done on another_portal too,\n-        # but for the current tests this is not needed.\n-        portal_registry = self.portal.portal_registry\n-        portal_registry[\'plone.allow_external_login_sites\'] = (\n-            self.login_portal.absolute_url(), )\n-\n-        # Configure our sites to use the login portal for logins and logouts\n-        login_portal_url = self.login_portal.absolute_url()\n-        for portal in (self.portal, self.another_portal):\n-            reg = portal.portal_registry\n-            reg[\'plone.external_login_url\'] = login_portal_url + \'/login\'\n-            reg[\'plone.external_logout_url\'] = login_portal_url + \'/logout\'\n-\n-        # Configure all sites to use a shared secret and set cookies per path\n-        # (normally they would have different domains.)\n-        for portal in (self.portal, self.login_portal, self.another_portal):\n-            session = portal.acl_users.session\n-            session._shared_secret = \'secret\'\n-            session.path = portal.absolute_url_path()\n-\n-        # Turn on self-registration\n-        self.portal.manage_permission(\'Add portal member\',\n-                                      roles=[\'Manager\', \'Anonymous\'],\n-                                      acquire=0)\n-\n-        transaction.commit()\n-\n-\n-class TestSSOLogin(SSOLoginTestCase):\n-\n-    def test_loginAndLogout(self):\n-        browser = self.browser\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.login_portal.absolute_url_path())\n-        # Without javascript we must click through\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.portal.absolute_url_path())\n-        # Test logging in from another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # No need to enter password this time\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.another_portal.absolute_url_path())\n-        # Now logout\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        # Check we really logged out, there should be a login link\n-        browser.getLink(\'Log in\')\n-        # Check we are logged out of the login_portal too\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Still need to logout of another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        browser.getLink(\'Log in\')\n-\n-    def test_requireLogin(self):\n-        browser = self.browser\n-        browser.handleErrors = True  # So unauthorized renders a login form\n-        # Login to the central portal\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        # Check we are logged in centrally\n-        browser.getLink(\'Log out\')\n-        # But not on the other portal\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Now open the protected doc\n-        protected_url = self.folder.absolute_url() + \'/folder_contents\'\n-        browser.open(protected_url)\n-        # Without javascript we must click through\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(browser.url, protected_url)\n-        browser.getLink(\'Log out\')\n-\n-\n-class TestSSOLoginIframe(SSOLoginTestCase):\n-\n-    def afterSetUp(self):\n-        SSOLoginTestCase.afterSetUp(self)\n-        # Configure our sites to use the iframe\n-        for portal in (self.portal, self.another_portal):\n-            portal.portal_registry[\'plone.external_login_iframe\'] = True\n-        transaction.commit()\n-\n-    def test_loginAndLogoutSSO(self):\n-        browser = self.browser\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # We are now inside the iframe\n-        self.assertTrue(\n-            browser.url.startswith(self.login_portal.absolute_url()))\n-        # The Link to get  a new password points back to self.portal\n-        link = browser.getLink(\'we can send you a new one\')\n-        self.assertTrue(link.url.startswith(self.portal.absolute_url()))\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # So does the registration form\n-        link = browser.getLink(\'registration form\')\n-        self.assertTrue(link.url.startswith(self.portal.absolute_url()))\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # Login\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.login_portal.absolute_url_path())\n-        # The external_login_form has a target attribute too (but difficult to\n-        # test for)\n-        self.assertTrue(browser.contents.find(\'target=\') > 0)\n-        # Without javascript we must click through\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.portal.absolute_url_path())\n-        # Now in another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # We are now inside the iframe\n-        self.assertTrue(\n-            browser.url.startswith(self.login_portal.absolute_url()))\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.another_portal.absolute_url_path())\n-        # Now logout\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        # Check we really logged out, there should be a login link\n-        browser.getLink(\'Log in\')\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # Check the registration form does not have an incorrect came_from link\n-        link = browser.getLink(\'registration form\')\n-        self.assertFalse(\'came_from\' in link.url)\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # Check we are logged out of the login_portal too\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Still need to logout of another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        browser.getLink(\'Log in\')\n-\n-    def test_requireLoginSSO(self):\n-        browser = self.browser\n-        browser.handleErrors = True  # So unauthorized renders a login form\n-        # Login to the central portal\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        # Check we are logged in centrally\n-        browser.getLink(\'Log out\')\n-        # But not on the other portal\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Now open the protected doc\n-        protected_url = self.folder.absolute_url() + \'/folder_contents\'\n-        browser.open(protected_url)\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        form.submit()\n-        # Without javascript we must click through\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(browser.url, protected_url)\n-        browser.getLink(\'Log out\')\ndiff --git a/Products/CMFPlone/tests/test_functional.py b/Products/CMFPlone/tests/test_functional.py\nindex 75e6bb098..259970589 100644\n--- a/Products/CMFPlone/tests/test_functional.py\n+++ b/Products/CMFPlone/tests/test_functional.py\n@@ -9,8 +9,7 @@\n import unittest\n \n \n-UNITTESTS = [\'messages.txt\', \'mails.txt\', \'emaillogin.txt\', \'translate.txt\',\n-             \'pwreset_browser.txt\']\n+UNITTESTS = [\'messages.txt\', \'mails.txt\', \'emaillogin.rst\', \'translate.txt\']\n CONTENT_TESTS = [\n     \'AddMoveAndDeleteDocument.txt\',\n     \'base_tag_not_present.txt\',\ndiff --git a/Products/CMFPlone/tests/test_login_form.py b/Products/CMFPlone/tests/test_login_form.py\nnew file mode 100644\nindex 000000000..f1a3a6849\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_form.py\n@@ -0,0 +1,180 @@\n+# -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from plone.app.z3cform.interfaces import IPloneFormLayer\n+from Products.CMFCore.permissions import SetOwnProperties\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zope.component import getMultiAdapter\n+from zope.interface import alsoProvides\n+\n+import re\n+import unittest\n+import time\n+\n+\n+FORM_ID = \'login\'\n+\n+\n+class TestLoginForm(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        self.mt = getToolByName(self.portal, \'portal_membership\')\n+        # suitable for testing z3c.form views\n+        alsoProvides(self.request, IPloneFormLayer)\n+\n+    def test_login_view(self):\n+        view = getMultiAdapter((self.portal, self.request), name=\'login\')\n+        self.assertTrue(view())\n+\n+    def _setup_authenticator_request(self):\n+        self.request.set(\'REQUEST_METHOD\', \'POST\')\n+        authenticator = getMultiAdapter(\n+            (self.portal, self.request),\n+            name=u\'authenticator\'\n+        )\n+        html = authenticator.authenticator()\n+        token = re.search(\'value="(.*)"\', html).groups()[0]\n+        self.request.set(\'_authenticator\', token)\n+\n+    def test_form_update(self):\n+        self._setup_authenticator_request()\n+        self.request[\'__ac_name\'] = u\'test\'\n+        self.request[\'__ac_password\'] = u\'secret\'\n+        self.request[\'form.widgets.came_from\'] = [u\'\']\n+        form = self.portal.restrictedTraverse(FORM_ID)\n+        form.update()\n+        data, errors = form.extractData()\n+        self.assertEqual(len(errors), 0)\n+\n+    def test_failsafe_login_form(self):\n+        view = getMultiAdapter(\n+            (self.portal, self.request),\n+            name=\'failsafe_login\'\n+        )\n+        html = view()\n+        self.assertNotIn(\'main-container\', html)\n+\n+    def test_failsafe_login_form_update(self):\n+        self._setup_authenticator_request()\n+        self.request[\'__ac_name\'] = u\'test\'\n+        self.request[\'__ac_password\'] = u\'secret\'\n+        self.request[\'form.widgets.came_from\'] = [u\'\']\n+        form = self.portal.restrictedTraverse(\'failsafe_login\')\n+        form.update()\n+        data, errors = form.extractData()\n+        self.assertEqual(len(errors), 0)\n+\n+    def test_login_external(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        form = self.portal.restrictedTraverse(\'login\')\n+        form()\n+        self.assertEqual(\n+            registry[\'plone.external_login_url\'],\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+\n+    def test_login_external_with_params(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        self.request[\'came_from\'] = \'foo\'\n+        self.request[\'next\'] = \'bar\'\n+        form = self.portal.restrictedTraverse(\'login\')\n+        form()\n+        self.assertIn(\n+            \'came_from=foo\',\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+        self.assertIn(\n+            \'next=bar\',\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+\n+    def test_failsafe_login_external(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        form = self.portal.restrictedTraverse(\'failsafe_login\')\n+        html = form()\n+        self.assertIsNotNone(html)\n+        self.assertEqual(None, form.request.response.getHeader(\'Location\'))\n+        self.assertNotIn(\'main-container\', html)\n+\n+    def test_login_creates_memberarea(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        if membership.memberareaCreationFlag == \'True\':\n+            self.assertEqual(membership.getHomeFolder(), None)\n+            form._post_login()\n+            self.assertNotEqual(membership.getHomeFolder(), None)\n+\n+    def test_post_login_sets_login_time(self):\n+        now = DateTime()\n+        member = self.layer[\'portal\'].portal_membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'login_time\')) < now)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'login_time\')) >= now)\n+\n+    def test_post_login_sets_last_login_time(self):\n+        now = DateTime()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) < now)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n+\n+    def test_post_login_sets_LastLoginTime_if_member_lacks_set_own_properties_permission(self):  # noqa: E501\n+        # If members lack the "Set own properties" permission, they should\n+        # still be able to log in, and their login times should be set.\n+        now = DateTime()\n+        self.portal.manage_permission(SetOwnProperties, [\'Manager\'], acquire=0)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n+\n+    def test_initial_login_time_does_change(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        login_time = DateTime(member.getProperty(\'login_time\'))\n+        # Log in again later\n+        time.sleep(0.2)\n+        form._post_login()\n+        # login_time did change\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(\n+            DateTime(member.getProperty(\'login_time\')) > login_time,\n+        )\n+\n+    def test_initial_login_time_with_string(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        # Realize the login_time is not string but DateTime\n+        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n+        self.assertEqual(member.getProperty(\'login_time\').Date(), \'2000/01/01\')\n+\n+        # Update login_time into string\n+        today = DateTime().Date()\n+        member.setProperties(login_time=today)\n+        self.assertIsInstance(member.getProperty(\'login_time\'), str)\n+        self.assertEqual(member.getProperty(\'login_time\'), today)\n+\n+        # Loggin in set login_time with DateTime\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n+        self.assertTrue(member.getProperty(\'login_time\') > DateTime(today))\ndiff --git a/Products/CMFPlone/tests/test_login_help.py b/Products/CMFPlone/tests/test_login_help.py\nnew file mode 100644\nindex 000000000..cac3add62\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_help.py\n@@ -0,0 +1,198 @@\n+# -*- coding: utf-8 -*-\n+from plone import api\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.browser.login.login_help import RequestResetPassword\n+from Products.CMFPlone.browser.login.login_help import RequestUsername\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.component import getMultiAdapter\n+\n+import transaction\n+import unittest\n+\n+\n+class TestLoginHelp(unittest.TestCase):\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer[\'request\']\n+        self.portal = self.layer[\'portal\']\n+\n+    def test_view(self):\n+        view = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertTrue(view())\n+\n+    def test_view_form(self):\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertEqual(form.subforms, [])\n+        form.update()\n+        self.assertEqual(len(form.subforms), 2)\n+        reset_password = form.subforms[0]\n+        self.assertTrue(isinstance(reset_password, RequestResetPassword))\n+        self.assertTrue(reset_password())\n+        request_username = form.subforms[1]\n+        self.assertTrue(isinstance(request_username, RequestUsername))\n+        self.assertTrue(request_username())\n+\n+    def test_view_form_with_emaillogin(self):\n+        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertEqual(form.subforms, [])\n+        form.update()\n+        self.assertEqual(len(form.subforms), 1)\n+        reset_password = form.subforms[0]\n+        self.assertTrue(isinstance(reset_password, RequestResetPassword))\n+        self.assertTrue(reset_password())\n+        self.assertTrue(form())\n+\n+    def test_request_reset_password(self):\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        form.update()\n+        reset_password = form.subforms[0]\n+        reset_password.handleResetPassword(reset_password, None)\n+        # the field reset_password is required\n+        self.assertEqual(reset_password.status, u\'There were some errors.\')\n+        # reset error message\n+        reset_password.status = \'\'\n+\n+        self.request[\'form.widgets.reset_password\'] = u\'test\'\n+        reset_password.handleResetPassword(reset_password, None)\n+        self.assertEqual(reset_password.status, \'\')\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n+        # no mail was sent since the user does not exist\n+        self.request[\'form.widgets.reset_password\'] = u\'test\'\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        self.request[\'form.widgets.reset_password\'] = u\'test_user_1_\'\n+        reset_password.handleResetPassword(reset_password, None)\n+        self.assertEqual(reset_password.status, \'\')\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+        message = self.portal.MailHost.messages[0]\n+        self.assertIn(\'To: foo@plone.org\', message)\n+        self.assertIn(\'http://nohost/plone/passwordreset/\', message)\n+\n+\n+class TestLoginHelpFunctional(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.browser = Browser(self.layer[\'app\'])\n+\n+    def test_login_help_request_password_reset(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Get help\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        transaction.commit()\n+        # validaton error of empty required field\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        self.browser.getControl(name=\'form.widgets.reset_password\').value = \'nonexistinguser\'  # noqa: E501\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        # message appears even though no email was sent\n+        self.assertIn(\n+            \'An email has been sent with instructions on how to reset your password.\',  # noqa: E501\n+            self.browser.contents\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.reset_password\').value = \'test_user_1_\'\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertIn(\n+            \'An email has been sent with instructions on how to reset your password.\',   # noqa: E501\n+            self.browser.contents\n+        )\n+        # message was actually sent\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+    def test_login_help_request_username(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Get help\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        transaction.commit()\n+\n+        # validaton error of empty required field\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        self.assertIn(\'missing\', self.browser.contents)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'foo@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        # email was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\', self.browser.contents)\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+        message = self.portal.MailHost.messages[0]\n+        self.assertIn(\'To: foo@plone.org\', message)\n+        self.assertIn(\'Your username is: test_user_1_\', message)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\').value = \'noemail\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertIn(\'specified email is not valid.\', self.browser.contents)\n+        # no new message was sent\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'bar@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # no new message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        api.user.create(\n+            username=\'another_user_same_email\',\n+            email=\'foo@plone.org\',\n+            password=\'password1\',\n+            roles=(\'Member\',),\n+        )\n+        transaction.commit()\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'foo@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # no new message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        api.user.create(\n+            username=\'next_user_new_email\',\n+            email=\'bar@plone.org\',\n+            password=\'password1\',\n+            roles=(\'Member\',),\n+        )\n+        transaction.commit()\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'bar@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # a message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\ndiff --git a/Products/CMFPlone/tests/test_login_logout.py b/Products/CMFPlone/tests/test_login_logout.py\nnew file mode 100644\nindex 000000000..127ad3453\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_logout.py\n@@ -0,0 +1,97 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+import transaction\n+import unittest\n+\n+\n+class TestLoginLogout(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer[\'app\'])\n+\n+    def test_login_with_bad_credentials(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = \'wrongpassword\'\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'Login failed\', self.browser.contents)\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+    def test_login_with_correct_credentials(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone\',\n+                         \'Successful login did not redirect to the homepage \'\n+                         \'when came_from was not defined.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone\',\n+            \'Successful logout did not redirect to the homepage.\'\n+        )\n+\n+        self.assertIn(\n+            \'You are now logged out.\',\n+            self.browser.contents,\n+            \'Logout status message not displayed.\'\n+        )\n+\n+    def test_login_with_user_defined_in_root_user_folder(self):\n+        """ A user defined in the root user folder should be able to log\n+            in into the site\n+        """\n+        self.layer[\'app\'].acl_users.userFolderAddUser(\n+            \'rootuser\',\n+            \'secret\',\n+            [],\n+            []\n+        )\n+        transaction.commit()\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(\'Login Name\').value = \'rootuser\'\n+        self.browser.getControl(\'Password\').value = \'secret\'\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'You are now logged in\', self.browser.contents)\n+\n+    def test_not_logged_in_and_not_authorized_shows_login_form(self):\n+        self.browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n+        self.assertTrue(self.browser.getControl(\'Login Name\'))\n+\n+    def test_insufficient_privileges_returned_when_logged_in_but_not_authorized(self):  # noqa\n+        setRoles(self.layer[\'portal\'], TEST_USER_ID, [])\n+        transaction.commit()\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'You are now logged in\', self.browser.contents)\n+        mt = self.layer[\'portal\'].portal_membership\n+        member = mt.portal_membership.getAuthenticatedMember()\n+        self.assertNotIn(\n+            \'Manager\',\n+            member.getRolesInContext(self.layer[\'portal\'])\n+        )\n+        self.browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n+        self.assertIn(\'Insufficient Privileges\', self.browser.contents)\ndiff --git a/Products/CMFPlone/tests/test_login_views.py b/Products/CMFPlone/tests/test_login_views.py\nnew file mode 100644\nindex 000000000..d620f47b7\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_views.py\n@@ -0,0 +1,24 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.component import getMultiAdapter\n+\n+import unittest\n+\n+\n+class TestViews(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def test_resetpassword_view(self):\n+        view = getMultiAdapter((self.portal, self.request),\n+                               name=\'initial-login-password-change\')\n+        self.assertTrue(view())\n+\n+    def test_loggedout_view(self):\n+        view = getMultiAdapter((self.portal, self.request),\n+                               name=\'logged-out\')\n+        self.assertTrue(view())\ndiff --git a/Products/CMFPlone/tests/test_mails.py b/Products/CMFPlone/tests/test_mails.py\nindex 9ea44710c..e27ac1232 100644\n--- a/Products/CMFPlone/tests/test_mails.py\n+++ b/Products/CMFPlone/tests/test_mails.py\n@@ -45,7 +45,7 @@ def test_suite():\n             package=\'Products.CMFPlone.tests\',\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\n         layered(doctest.DocFileSuite(\n-            \'emaillogin.txt\',\n+            \'emaillogin.rst\',\n             optionflags=OPTIONFLAGS,\n             package=\'Products.CMFPlone.tests\',\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\ndiff --git a/Products/CMFPlone/tests/test_passwordreset.py b/Products/CMFPlone/tests/test_passwordreset.py\nindex b32fde772..c8321218c 100644\n--- a/Products/CMFPlone/tests/test_passwordreset.py\n+++ b/Products/CMFPlone/tests/test_passwordreset.py\n@@ -19,7 +19,7 @@ def test_suite():\n     return unittest.TestSuite((\n         layered(\n             doctest.DocFileSuite(\n-                \'pwreset_browser.txt\',\n+                \'pwreset_browser.rst\',\n                 optionflags=OPTIONFLAGS,\n                 package=\'Products.CMFPlone.tests\',\n             ),\ndiff --git a/Products/CMFPlone/tests/test_redirect_after_login.py b/Products/CMFPlone/tests/test_redirect_after_login.py\nnew file mode 100644\nindex 000000000..1fd3c4a32\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_redirect_after_login.py\n@@ -0,0 +1,189 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.browser.login.login import LoginForm\n+from Products.CMFPlone.interfaces import IInitialLogin\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.publisher.interfaces import IRequest\n+\n+import unittest\n+\n+\n+@implementer(IRedirectAfterLogin)\n+class AfterLoginAdapter(object):\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, came_from=None, is_first_login=False):\n+        return \'http://nohost/plone/sitemap\'\n+\n+\n+@implementer(IInitialLogin)\n+class InitialLoginAdapter(object):\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self):\n+        self.context.foo = \'foo\'\n+\n+\n+class TestCameFromFiltering(unittest.TestCase):\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer[\'request\']\n+        self.portal = self.layer[\'portal\']\n+        self.form = LoginForm(self.portal, self.request)\n+\n+    def test_get_came_from_via_request(self):\n+        self.assertEqual(self.form.get_came_from(), None)\n+        url = \'https://nohost/plone/foo-bar\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), url)\n+\n+    def test_external_urls_are_ignored(self):\n+        url = \'https://example.com/maliciousness\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), None)\n+\n+    def test_login_templates_are_filtered(self):\n+        url = \'https://nohost/plone/logout\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), None)\n+\n+    def test_referer_is_fallback(self):\n+        url = \'https://nohost/plone/test\'\n+        self.request[\'came_from\'] = None\n+        self.request[\'HTTP_REFERER\'] = url\n+        self.assertEqual(self.form.get_came_from(), url)\n+\n+\n+class TestRedirectAfterLogin(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n+        self.portal = self.layer[\'portal\']\n+\n+    def test_redirect_to_portal_if_no_adapter_nor_came_from(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone\',\n+                         \'Successful login did not redirect to the homepage \'\n+                         \'when came_from was not defined.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_redirect_to_came_from_if_no_adapter_found(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/contact-info\',\n+                         \'Successful login did not redirect to the came_from.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_redirect_to_adapter_result(self):\n+        # Register our redirect adapter\n+        from zope.component import getGlobalSiteManager\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(AfterLoginAdapter,\n+                            (Interface, IRequest))\n+\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        gsm.unregisterAdapter(AfterLoginAdapter,\n+                              (Interface, IRequest))\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/sitemap\',\n+                         \'Successful login did not use the adapter for \'\n+                         \'redirect.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_initiallogin_adapter(self):\n+        # Register our redirect adapter\n+        from zope.component import getGlobalSiteManager\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(InitialLoginAdapter,\n+                            (Interface, IRequest))\n+\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        gsm.unregisterAdapter(InitialLoginAdapter,\n+                              (Interface, IRequest))\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/contact-info\')\n+        self.assertEqual(self.portal.foo, \'foo\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-06-19T08:36:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/56d33f2c6b9ccb95456d54729f11c63e308de6c7

Merge pull request #2445 from plone/merge-plone-login

Merge code from plone.login

Files changed:
A Products/CMFPlone/browser/login/__init__.py
A Products/CMFPlone/browser/login/configure.zcml
A Products/CMFPlone/browser/login/login.py
A Products/CMFPlone/browser/login/login_help.py
A Products/CMFPlone/browser/login/logout.py
A Products/CMFPlone/browser/login/password_reset.py
A Products/CMFPlone/browser/login/templates/explainPWResetTool.pt
A Products/CMFPlone/browser/login/templates/forced_password_change.pt
A Products/CMFPlone/browser/login/templates/initial_login_password_change.pt
A Products/CMFPlone/browser/login/templates/insufficient_privileges.pt
A Products/CMFPlone/browser/login/templates/logged_out.pt
A Products/CMFPlone/browser/login/templates/login.pt
A Products/CMFPlone/browser/login/templates/login_failsafe.pt
A Products/CMFPlone/browser/login/templates/login_help.pt
A Products/CMFPlone/browser/login/templates/mail_password_form.pt
A Products/CMFPlone/browser/login/templates/mail_password_response.pt
A Products/CMFPlone/browser/login/templates/mail_password_template.pt
A Products/CMFPlone/browser/login/templates/pwreset_expired.pt
A Products/CMFPlone/browser/login/templates/pwreset_finish.pt
A Products/CMFPlone/browser/login/templates/pwreset_form.pt
A Products/CMFPlone/browser/login/templates/pwreset_invalid.pt
A Products/CMFPlone/browser/login/templates/registered_notify_template.pt
A Products/CMFPlone/browser/login/templates/subform_render.pt
A Products/CMFPlone/browser/templates/plone-admin-logged-out.pt
A Products/CMFPlone/interfaces/login.py
A Products/CMFPlone/tests/LoginAndLogout.rst
A Products/CMFPlone/tests/emaillogin.rst
A Products/CMFPlone/tests/pwreset_browser.rst
A Products/CMFPlone/tests/search_form.rst
A Products/CMFPlone/tests/test_login_form.py
A Products/CMFPlone/tests/test_login_help.py
A Products/CMFPlone/tests/test_login_logout.py
A Products/CMFPlone/tests/test_login_views.py
A Products/CMFPlone/tests/test_redirect_after_login.py
M CHANGES.rst
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/skins.xml
M Products/CMFPlone/tests/testControlPanelScripts.py
M Products/CMFPlone/tests/testCookieAuth.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/test_functional.py
M Products/CMFPlone/tests/test_mails.py
M Products/CMFPlone/tests/test_passwordreset.py
D Products/CMFPlone/browser/password_reset.py
D Products/CMFPlone/browser/templates/explainPWResetTool.pt
D Products/CMFPlone/browser/templates/mail_password_form.pt
D Products/CMFPlone/browser/templates/mail_password_response.pt
D Products/CMFPlone/browser/templates/mail_password_template.pt
D Products/CMFPlone/browser/templates/plone-logged-out.pt
D Products/CMFPlone/browser/templates/pwreset_expired.pt
D Products/CMFPlone/browser/templates/pwreset_finish.pt
D Products/CMFPlone/browser/templates/pwreset_form.pt
D Products/CMFPlone/browser/templates/pwreset_invalid.pt
D Products/CMFPlone/browser/templates/registered_notify_template.pt
D Products/CMFPlone/skins/plone_login/external_login_return.cpt
D Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata
D Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt
D Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata
D Products/CMFPlone/skins/plone_login/insufficient_privileges.pt
D Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata
D Products/CMFPlone/skins/plone_login/logged_in.cpy
D Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata
D Products/CMFPlone/skins/plone_login/logged_out.cpt
D Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata
D Products/CMFPlone/skins/plone_login/login.py
D Products/CMFPlone/skins/plone_login/login_change_password.cpy
D Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_failed.cpt
D Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_form.cpt
D Products/CMFPlone/skins/plone_login/login_form.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_form_validate.vpy
D Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata
D Products/CMFPlone/skins/plone_login/login_initial.cpy
D Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_next.cpy
D Products/CMFPlone/skins/plone_login/login_next.cpy.metadata
D Products/CMFPlone/skins/plone_login/login_password.cpt
D Products/CMFPlone/skins/plone_login/login_password.cpt.metadata
D Products/CMFPlone/skins/plone_login/login_password_validate.vpy
D Products/CMFPlone/skins/plone_login/login_success.pt
D Products/CMFPlone/skins/plone_login/login_success.pt.metadata
D Products/CMFPlone/skins/plone_login/logout.cpy
D Products/CMFPlone/skins/plone_login/registered.pt
D Products/CMFPlone/skins/plone_login/registered.pt.metadata
D Products/CMFPlone/skins/plone_login/require_login.py
D Products/CMFPlone/tests/LoginAndLogout.txt
D Products/CMFPlone/tests/emaillogin.txt
D Products/CMFPlone/tests/pwreset_browser.txt
D Products/CMFPlone/tests/search_form.txt
D Products/CMFPlone/tests/testLoggedIn.py
D Products/CMFPlone/tests/testSSOLogin.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e1f241299..190e842e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,6 +10,15 @@ Changelog\n \n Breaking changes:\n \n+- New browser view based login code - merged from plone.login (credits to esteele, pbauer, agitator, jensens, et al).\n+  `portal_skins/plone_login` is now gone, see PLIP #2092.\n+  Also, password reset view moved to login subfolder to keep things together.\n+  Some testbrowser based tests needed changes because of z3c.form based login form .\n+  The Plone specific, rarely used cross site __ac cookie SSO feature/hack was removed.\n+  In case somebody needs this, please make it an addon package.\n+  Better use a field proven, more secure way, like OAuth2, Shibboleth or someting similar.\n+  [jensens, et al]\n+\n - Adapt tests to `Products.GenericSetup >= 2.0` thus requiring at least that\n   version.\n   [icemac]\ndiff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py\nindex dd14dd139..826b094f0 100644\n--- a/Products/CMFPlone/browser/admin.py\n+++ b/Products/CMFPlone/browser/admin.py\n@@ -21,7 +21,6 @@\n from six.moves.urllib import parse\n from zope.component import adapts\n from zope.component import getAllUtilitiesRegisteredFor\n-from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -98,11 +97,14 @@ def __call__(self, came_from=None):\n             # see if this is a relative url or an absolute\n             if len(parse.urlparse(came_from)[1]) == 0:\n                 # No host specified, so url is relative.  Get an absolute url.\n-                # Note: \'\\\\domain.org\' is not recognised as host, which is good.\n-                came_from = parse.urljoin(self.context.absolute_url() + \'/\', came_from)\n+                # Note: \'\\\\domain.org\' is not recognised as host,\n+                # which is good.\n+                came_from = parse.urljoin(\n+                    self.context.absolute_url() + \'/\', came_from,\n+                )\n             elif not came_from.startswith(self.context.absolute_url()):\n-                # Note: we cannot use portal_url.isURLInPortal here, because we are\n-                # not in a Plone portal, but in the Zope root.\n+                # Note: we cannot use portal_url.isURLInPortal here, because we\n+                # are not in a Plone portal, but in the Zope root.\n                 came_from = None\n         if came_from is None:\n             came_from = self.context.absolute_url()\n@@ -112,7 +114,7 @@ def __call__(self, came_from=None):\n class RootLogout(BrowserView):\n     """ @@plone-root-logout """\n \n-    logout = ViewPageTemplateFile(\'templates/plone-logged-out.pt\')\n+    logout = ViewPageTemplateFile(\'templates/plone-admin-logged-out.pt\')\n \n     def __call__(self):\n         response = self.request.response\ndiff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml\nindex 2383aae72..a6bf92793 100644\n--- a/Products/CMFPlone/browser/configure.zcml\n+++ b/Products/CMFPlone/browser/configure.zcml\n@@ -4,6 +4,7 @@\n            xmlns:zcml="http://namespaces.zope.org/zcml"\n            i18n_domain="plone">\n \n+  <include package=".login" />\n   <include file="admin.zcml" />\n   <include file="caching.zcml" zcml:condition="installed z3c.caching"/>\n \n@@ -232,51 +233,6 @@\n       template="templates/colophon.pt"\n       />\n \n-  <browser:page\n-      name="mail_password_template"\n-      for="*"\n-      class=".password_reset.PasswordResetToolView"\n-      template="templates/mail_password_template.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="registered_notify_template"\n-      for="*"\n-      class=".password_reset.PasswordResetToolView"\n-      template="templates/registered_notify_template.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="mail_password_form"\n-      for="*"\n-      template="templates/mail_password_form.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="mail_password_response"\n-      for="*"\n-      template="templates/mail_password_response.pt"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="passwordreset"\n-      for="*"\n-      class=".password_reset.PasswordResetView"\n-      permission="zope.Public"\n-      />\n-\n-  <browser:page\n-      name="explainPWResetTool"\n-      for="Products.CMFPlone.interfaces.IPWResetTool"\n-      class=".password_reset.ExplainPWResetToolView"\n-      template="templates/explainPWResetTool.pt"\n-      permission="zope2.ViewManagementScreens"\n-      />\n-\n   <browser:page\n       name="index.html"\n       for="Exception"\ndiff --git a/Products/CMFPlone/browser/login/__init__.py b/Products/CMFPlone/browser/login/__init__.py\nnew file mode 100644\nindex 000000000..40a96afc6\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/Products/CMFPlone/browser/login/configure.zcml b/Products/CMFPlone/browser/login/configure.zcml\nnew file mode 100644\nindex 000000000..e56bbb0b7\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/configure.zcml\n@@ -0,0 +1,147 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n+\n+    <browser:page\n+        name="insufficient-privileges"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.InsufficientPrivilegesView"\n+        template="templates/insufficient_privileges.pt"\n+        />\n+\n+\n+    <!-- LOGIN: form with plone page around, can be rendered in modal -->\n+    <browser:page\n+        name="login"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.LoginForm"\n+        template="templates/login.pt"\n+        />\n+\n+    <!-- LOGIN: fail safe, simplified and unstyled form -->\n+    <browser:page\n+        name="failsafe_login"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.FailsafeLoginForm"\n+        template="templates/login_failsafe.pt"\n+        />\n+\n+    <!-- LOGIN: BBB name, same as \'login\' do not use them to refer to the login -->\n+    <browser:page\n+        name="login_form"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.LoginForm"\n+        template="templates/login.pt"\n+        />\n+\n+    <!-- LOGIN: BBB name, same as \'failsafe_login\' do not use it any longer-->\n+    <browser:page\n+        name="failsafe_login_form"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login.FailsafeLoginForm"\n+        template="templates/login_failsafe.pt"\n+        />\n+\n+    <browser:page\n+        name="login-help"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".login_help.LoginHelpForm"\n+        template="templates/login_help.pt"\n+        />\n+\n+\n+    <browser:page\n+        name="logout"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        class=".logout.LogoutView"\n+        />\n+\n+\n+    <browser:page\n+        name="logged-out"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        permission="zope.Public"\n+        template="templates/logged_out.pt"\n+        class=".logout.LoggedOutView"\n+        />\n+\n+    <browser:page\n+        name="require_login"\n+        for="*"\n+        permission="zope.Public"\n+        class=".login.RequireLoginView"\n+        />\n+\n+    <browser:page\n+        name="initial-login-password-change"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        class=".login.InitialLoginPasswordChange"\n+        permission="cmf.SetOwnPassword"\n+        template="templates/initial_login_password_change.pt"\n+        />\n+\n+    <browser:page\n+        name="forced-password-change"\n+        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n+        class=".login.ForcedPasswordChange"\n+        permission="cmf.SetOwnPassword"\n+        template="templates/forced_password_change.pt"\n+        />\n+\n+    <browser:page\n+        name="mail_password_form"\n+        for="*"\n+        template="templates/mail_password_form.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="mail_password_response"\n+        for="*"\n+        template="templates/mail_password_response.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="passwordreset"\n+        for="*"\n+        class=".password_reset.PasswordResetView"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="mail_password_template"\n+        for="*"\n+        class=".password_reset.PasswordResetToolView"\n+        template="templates/mail_password_template.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="registered_notify_template"\n+        for="*"\n+        class=".password_reset.PasswordResetToolView"\n+        template="templates/registered_notify_template.pt"\n+        permission="zope.Public"\n+        />\n+\n+    <browser:page\n+        name="explainPWResetTool"\n+        for="Products.CMFPlone.interfaces.IPWResetTool"\n+        class=".password_reset.ExplainPWResetToolView"\n+        template="templates/explainPWResetTool.pt"\n+        permission="zope2.ViewManagementScreens"\n+        />\n+\n+</configure>\ndiff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nnew file mode 100644\nindex 000000000..811f47705\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -0,0 +1,294 @@\n+# -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from plone.app.users.browser.passwordpanel import PasswordPanel\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IForcePasswordChange\n+from Products.CMFPlone.interfaces import IInitialLogin\n+from Products.CMFPlone.interfaces import ILoginForm\n+from Products.CMFPlone.interfaces import ILoginFormSchema\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from six.moves.urllib import parse\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from z3c.form.interfaces import HIDDEN_MODE\n+from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.component import queryUtility\n+from zope.interface import implementer\n+\n+\n+# TODO: Scale down this list now that we\'ve removed a lot of\n+# templates.\n+LOGIN_TEMPLATE_IDS = [\n+    \'localhost\',\n+    \'logged-out\',\n+    \'logged_in\',\n+    \'login\',\n+    \'login_failed\',\n+    \'login_form\',\n+    \'login_password\',\n+    \'login_success\',\n+    \'logout\',\n+    \'mail_password\',\n+    \'mail_password_form\',\n+    \'member_search_results\',\n+    \'pwreset_finish\',\n+    \'passwordreset\',\n+    \'register\',\n+    \'registered\',\n+    \'require_login\',\n+]\n+\n+\n+@implementer(ILoginForm)\n+class LoginForm(form.EditForm):\n+    """ Implementation of the login form """\n+\n+    fields = field.Fields(ILoginFormSchema)\n+\n+    id = \'LoginForm\'\n+    label = _(\'label_log_in\', default=u\'Log in\')\n+\n+    ignoreContext = True\n+    prefix = \'\'\n+\n+    def render(self):\n+        registry = queryUtility(IRegistry)\n+        ext_login_url = registry[\'plone.external_login_url\']\n+        if ext_login_url:\n+            return self._handle_external_login(ext_login_url)\n+        return self.index()\n+\n+    def _handle_external_login(self, url):\n+        """Handle login on this portal where login is external."""\n+        next_ = self.request.get(\'next\', None)\n+        portal_url = getToolByName(self.context, \'portal_url\')\n+        if next_ is not None and not portal_url.isURLInPortal(next_):\n+            next_ = None\n+        if next_ is not None:\n+            url = \'{0}?next={1}\'.format(url, next_)\n+        came_from = self.request.get(\'came_from\')\n+        if came_from:\n+            url = \'{0}&came_from={1}\'.format(url, came_from)\n+        self.request.response.redirect(url)\n+\n+    def _get_auth(self):\n+        try:\n+            return self.context.acl_users.credentials_cookie_auth\n+        except AttributeError:\n+            try:\n+                return self.context.cookie_authentication\n+            except AttributeError:\n+                pass\n+\n+    def updateWidgets(self):\n+        auth = self._get_auth()\n+\n+        if auth:\n+            fieldname_name = auth.get(\'name_cookie\', \'__ac_name\')\n+            fieldname_password = auth.get(\'pw_cookie\', \'__ac_password\')\n+        else:\n+            fieldname_name = \'__ac_name\'\n+            fieldname_password = \'__ac_password\'\n+\n+        self.fields[\'ac_name\'].__name__ = fieldname_name\n+        self.fields[\'ac_password\'].__name__ = fieldname_password\n+\n+        super(LoginForm, self).updateWidgets(prefix=\'\')\n+\n+        if self.use_email_as_login():\n+            self.widgets[fieldname_name].label = _(u\'label_email\',\n+                                                   default=u\'Email\')\n+        self.widgets[\'came_from\'].mode = HIDDEN_MODE\n+        self.widgets[\'came_from\'].value = self.get_came_from()\n+\n+    def get_came_from(self):\n+        came_from = self.request.get(\'came_from\', None)\n+        if not came_from:\n+            came_from = self.request.get(\'HTTP_REFERER\', None)\n+            if not came_from:\n+                return\n+        url_tool = getToolByName(self.context, \'portal_url\')\n+        if not url_tool.isURLInPortal(came_from):\n+            return\n+        came_from_path = parse.urlparse(came_from)[2]\n+        for login_template_id in LOGIN_TEMPLATE_IDS:\n+            if login_template_id in came_from_path:\n+                return\n+        return came_from\n+\n+    def updateActions(self):\n+        super(LoginForm, self).updateActions()\n+        self.actions[\'login\'].addClass(\'context\')\n+\n+    def _post_login(self):\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        member = membership_tool.getAuthenticatedMember()\n+        must_change_password = member.getProperty(\'must_change_password\', 0)\n+        login_time = member.getProperty(\'login_time\', \'2000/01/01\')\n+        if not isinstance(login_time, DateTime):\n+            login_time = DateTime(login_time)\n+        is_initial_login = login_time == DateTime(\'2000/01/01\')\n+\n+        membership_tool.loginUser(self.request)\n+        if is_initial_login:\n+            self.handle_initial_login()\n+\n+        if must_change_password:\n+            self.force_password_change()\n+        return is_initial_login\n+\n+    @button.buttonAndHandler(_(\'Log in\'), name=\'login\')\n+    def handleLogin(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        status_msg = IStatusMessage(self.request)\n+        if membership_tool.isAnonymousUser():\n+            self.request.response.expireCookie(\'__ac\', path=\'/\')\n+            if self.use_email_as_login():\n+                status_msg.addStatusMessage(\n+                    _(\n+                        u\'Login failed. Both email address and password are \'\n+                        u\'case sensitive, check that caps lock is not enabled.\'\n+                    ),\n+                    \'error\',\n+                )\n+            else:\n+                status_msg.addStatusMessage(\n+                    _(\n+                        u\'Login failed. Both login name and password are case \'\n+                        u\'sensitive, check that caps lock is not enabled.\'\n+                    ),\n+                    \'error\',\n+                )\n+            return\n+\n+        is_initial_login = self._post_login()\n+        status_msg.addStatusMessage(\n+            _(\n+                u\'you_are_now_logged_in\',\n+                default=u\'Welcome! You are now logged in.\',\n+            ),\n+            \'info\'\n+        )\n+\n+        came_from = data.get(\'came_from\', None)\n+        self.redirect_after_login(came_from, is_initial_login)\n+\n+    def handle_initial_login(self):\n+        handler = queryMultiAdapter(\n+            (self.context, self.request),\n+            IInitialLogin,\n+        )\n+        if handler:\n+            handler()\n+\n+    def force_password_change(self):\n+        handler = queryMultiAdapter(\n+            (self.context, self.request),\n+            IForcePasswordChange,\n+        )\n+        if handler:\n+            handler()\n+\n+    def redirect_after_login(self, came_from=None, is_initial_login=False):\n+        adapter = queryMultiAdapter(\n+            (self.context, self.request),\n+            IRedirectAfterLogin\n+        )\n+        if adapter:\n+            came_from = adapter(came_from, is_initial_login)\n+        if not came_from:\n+            came_from = self.context.absolute_url()\n+\n+        self.request.response.redirect(came_from)\n+\n+    def self_registration_enabled(self):\n+        registry = queryUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema,\n+            prefix=\'plone\'\n+        )\n+        return security_settings.enable_self_reg\n+\n+    def use_email_as_login(self):\n+        registry = queryUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema,\n+            prefix=\'plone\'\n+        )\n+        return security_settings.use_email_as_login\n+\n+\n+class FailsafeLoginForm(LoginForm):\n+\n+    def render(self):\n+        return self.index()\n+\n+\n+class RequireLoginView(BrowserView):\n+\n+    def __call__(self):\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request),\n+            name=\'plone_portal_state\',\n+        )\n+        portal = portal_state.portal()\n+        if portal_state.anonymous():\n+            url = \'{0:s}/login\'.format(portal.absolute_url())\n+            came_from = self.request.get(\'came_from\', None)\n+            if came_from:\n+                url += \'?came_from={0:s}\'.format(parse.quote(came_from))\n+        else:\n+            url = \'{0:s}/insufficient-privileges\'.format(portal.absolute_url())\n+\n+        self.request.response.redirect(url)\n+\n+\n+class InsufficientPrivilegesView(BrowserView):\n+\n+    def request_url(self):\n+        return self.request.get(\'came_from\')\n+\n+\n+class InitialLoginPasswordChange(PasswordPanel):\n+\n+    def render(self):\n+        return self.index()\n+\n+    @button.buttonAndHandler(\n+        _(u\'label_change_password\', default=u\'Change Password\'),\n+        name=\'reset_passwd\',\n+    )\n+    def action_reset_passwd(self, action):\n+        super(InitialLoginPasswordChange, self).action_reset_passwd(\n+            self, action)\n+        if not action.form.widgets.errors:\n+            self.request.response.redirect(self.context.portal_url())\n+\n+\n+class ForcedPasswordChange(PasswordPanel):\n+\n+    def render(self):\n+        return self.index()\n+\n+    @button.buttonAndHandler(\n+        _(u\'label_change_password\', default=u\'Change Password\'),\n+        name=\'reset_passwd\',\n+    )\n+    def action_reset_passwd(self, action):\n+        super(ForcedPasswordChange, self).action_reset_passwd(self, action)\n+        if not action.form.widgets.errors:\n+            membership_tool = getToolByName(self.context, \'portal_membership\')\n+            member = membership_tool.getAuthenticatedMember()\n+            member.setProperties(must_change_password=0)\n+            self.request.response.redirect(self.context.portal_url())\ndiff --git a/Products/CMFPlone/browser/login/login_help.py b/Products/CMFPlone/browser/login/login_help.py\nnew file mode 100644\nindex 000000000..f2b561760\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/login_help.py\n@@ -0,0 +1,232 @@\n+# -*- coding: utf-8 -*-\n+from email import message_from_string\n+from email.Header import Header\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import ILoginHelpForm\n+from Products.CMFPlone.interfaces import ILoginHelpFormSchema\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from Products.statusmessages.interfaces import IStatusMessage\n+from smtplib import SMTPException\n+from smtplib import SMTPRecipientsRefused\n+from z3c.form import button\n+from z3c.form import field\n+from z3c.form import form\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from zope.i18n import translate\n+from zope.interface import implementer\n+\n+import logging\n+\n+\n+SEND_USERNAME_TEMPLATE = _(u"mailtemplate_username_info", default=u"""From: {encoded_mail_sender}\n+To: {email}\n+Subject: Your username for {portal_url}\n+Content-Type: text/plain\n+Precedence: bulk\n+\n+Dear {fullname},\n+\n+You requested to be reminded of your username for {portal_url}.\n+Your username is: {login}\n+\n+\n+With kind regards,\n+\n+--\n+\n+{email_from_name}""")\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class RequestResetPassword(form.Form):\n+\n+    id = \'RequestResetPassword\'\n+    label = u\'\'\n+    fields = field.Fields(ILoginHelpFormSchema).select(\'reset_password\')\n+    ignoreContext = True\n+\n+    render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n+\n+    def updateWidgets(self):\n+        super(RequestResetPassword, self).updateWidgets()\n+        if self.use_email_as_login():\n+            self.widgets[\'reset_password\'].label = _(\n+                u\'label_email\',\n+                default=u\'Email\'\n+            )\n+\n+    @button.buttonAndHandler(\n+        _(u\'button_pwreset_reset_password\', default=u\'Reset your password\'),\n+        name=\'reset\'\n+    )\n+    def handleResetPassword(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        portal = getSite()\n+        regtool = getToolByName(portal, \'portal_registration\')\n+        try:\n+            regtool.mailPassword(data[\'reset_password\'], self.request)\n+        except ValueError as e:\n+            # Paranoia Warning!\n+            # We act as if a message has been sent to prevent probing Plone\n+            # for valid loginnames. Instead we log the error-message.\n+            log.info(\'Error while trying to send a reset-password notice to user {0}: {1}\'.format(data[\'reset_password\'], e))  # noqa: E501\n+            pass\n+\n+        IStatusMessage(self.request).addStatusMessage(\n+            _(u\'statusmessage_pwreset_password_mail_sent\', default=u\'An \'\n+              u\'email has been sent with instructions on how to reset your \'\n+              u\'password.\'), \'info\')\n+\n+    def use_email_as_login(self):\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema, prefix=\'plone\')\n+        return security_settings.use_email_as_login\n+\n+\n+class RequestUsername(form.Form):\n+\n+    id = \'RequestUsername\'\n+    label = u\'\'\n+    fields = field.Fields(ILoginHelpFormSchema).select(\'recover_username\')\n+    ignoreContext = True\n+\n+    render = ViewPageTemplateFile(\'templates/subform_render.pt\')\n+\n+    @button.buttonAndHandler(\n+        _(u\'button_pwreset_get_username\', default=\'Get your username\'),\n+        name=\'get_username\'\n+    )\n+    def handleGetUsername(self, action):\n+        data, errors = self.extractData()\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        portal = getSite()\n+        pas = getToolByName(portal, \'acl_users\')\n+        email = data[\'recover_username\']\n+        results = pas.searchUsers(email=email, exact_match=True)\n+        send_email = True\n+        if not results:\n+            log.info(\'No user found for {0}\'.format(email))\n+            send_email = False\n+        if len(results) > 1:\n+            log.info(\'More than one user found for {0}\'.format(email))\n+            send_email = False\n+        if send_email:\n+            self.send_username(portal, results[0])\n+\n+        # Paranoia Warning!\n+        # Same as with the reset-password form we don\'t want to allow\n+        # probing for email-adresses of existing users.\n+        # Because of this we always act as if that an email has been sent.\n+        # Instead we log the error-message.\n+        IStatusMessage(self.request).addStatusMessage(\n+            _(u\'statusmessage_pwreset_username_mail_sent\',\n+                default=u\'An email has been sent with your username.\'),\n+            \'info\'\n+        )\n+\n+    def send_username(self, portal, userinfo):\n+        registry = getUtility(IRegistry)\n+        encoding = registry.get(\'plone.email_charset\', \'utf-8\')\n+        translated_template = translate(\n+            SEND_USERNAME_TEMPLATE,\n+            context=self.request,\n+        )\n+\n+        mail_text = translated_template.format(\n+            email=userinfo[\'email\'],\n+            portal_url=portal.absolute_url(),\n+            fullname=userinfo[\'title\'],\n+            login=userinfo[\'login\'],\n+            email_from_name=registry[\'plone.email_from_name\'],\n+            encoded_mail_sender=self.encoded_mail_sender(),\n+        )\n+        # The mail headers are not properly encoded we need to extract\n+        # them and let MailHost manage the encoding.\n+        if isinstance(mail_text, unicode):\n+            mail_text = mail_text.encode(encoding)\n+        message_obj = message_from_string(mail_text.strip())\n+        subject = message_obj[\'Subject\']\n+        m_to = message_obj[\'To\']\n+        m_from = message_obj[\'From\']\n+        msg_type = message_obj.get(\'Content-Type\', \'text/plain\')\n+\n+        host = getToolByName(portal, \'MailHost\')\n+        try:\n+            host.send(mail_text, m_to, m_from, subject=subject,\n+                      charset=encoding, immediate=True,\n+                      msg_type=msg_type)\n+        except SMTPRecipientsRefused:\n+            # Don\'t disclose email address on failure\n+            raise SMTPRecipientsRefused(\n+                _(u\'Recipient address rejected by server.\'))\n+        except SMTPException as e:\n+            raise(e)\n+\n+    def encode_mail_header(self, text):\n+        """ Encodes text into correctly encoded email header """\n+        return Header(safe_unicode(text), \'utf-8\')\n+\n+    def encoded_mail_sender(self):\n+        """ returns encoded version of Portal name <portal_email> """\n+        registry = getUtility(IRegistry)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        from_ = mail_settings.email_from_name\n+        mail = mail_settings.email_from_address\n+        return \'"%s" <%s>\' % (self.encode_mail_header(from_), mail)\n+\n+\n+@implementer(ILoginHelpForm)\n+class LoginHelpForm(form.EditForm):\n+    \'\'\' Implementation of the login help form \'\'\'\n+\n+    subforms = []\n+\n+    id = \'LoginHelpForm\'\n+    label = _(u\'heading_login_form_help\', default=u\'Need Help?\')\n+\n+    ignoreContext = True\n+\n+    def render(self):\n+        return self.index()\n+\n+    def can_reset_password(self):\n+        # TODO: Actually check that the site allows reseting password\n+        return True\n+\n+    def can_retrieve_username(self):\n+        # TODO: Actually check that the site allows retrieving the username\n+        return True\n+\n+    def update(self):\n+        subforms = []\n+        # XXX: Not really sure how to handle the action and enctype vars\n+        if self.can_reset_password():\n+            form = RequestResetPassword(None, self.request)\n+            form.update()\n+            subforms.append(form)\n+        if not self.use_email_as_login() and self.can_retrieve_username():\n+            form = RequestUsername(None, self.request)\n+            form.update()\n+            subforms.append(form)\n+\n+        self.subforms = subforms\n+        super(LoginHelpForm, self).update()\n+\n+    def use_email_as_login(self):\n+        registry = getUtility(IRegistry)\n+        security_settings = registry.forInterface(\n+            ISecuritySchema, prefix=\'plone\')\n+        return security_settings.use_email_as_login\ndiff --git a/Products/CMFPlone/browser/login/logout.py b/Products/CMFPlone/browser/login/logout.py\nnew file mode 100644\nindex 000000000..83f4e22fd\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/logout.py\n@@ -0,0 +1,61 @@\n+# -*- coding: utf-8 -*-\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.utils import transaction_note\n+from Products.Five.browser import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.component import getMultiAdapter\n+from zope.component import queryUtility\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+class ILoggedOutView(Interface):\n+    pass\n+\n+\n+class LogoutView(BrowserView):\n+\n+    def __call__(self):\n+        mt = getToolByName(self.context, \'portal_membership\')\n+        mt.logoutUser(self.request)\n+        transaction_note(\'Logged out\')\n+        # Handle external logout requests from other portals\n+        next_ = self.request.get(\'next\', None)\n+        portal_url = getToolByName(self.context, \'portal_url\')\n+        if next_ is not None and portal_url.isURLInPortal(next_):\n+            target_url = next_\n+        else:\n+            target_url = self.request.URL1 + \'/logged-out\'\n+\n+        registry = queryUtility(IRegistry)\n+        external_logout_url = registry[\'plone.external_logout_url\']\n+        if external_logout_url:\n+            target_url = external_logout_url\n+        self.request.response.redirect(target_url)\n+\n+\n+@implementer(ILoggedOutView)\n+class LoggedOutView(BrowserView):\n+\n+    def __call__(self):\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request),\n+            name=\'plone_portal_state\',\n+        )\n+        if portal_state.anonymous():\n+            IStatusMessage(\n+                self.request\n+            ).addStatusMessage(\n+                _(\n+                    u\'statusmessage_logged_out\',\n+                    default=u\'You are now logged out.\'\n+                ),\n+                \'info\',\n+            )\n+            self.request.response.redirect(\n+                portal_state.navigation_root_url()\n+            )\n+            return\n+        return self.index()\ndiff --git a/Products/CMFPlone/browser/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nsimilarity index 86%\nrename from Products/CMFPlone/browser/password_reset.py\nrename to Products/CMFPlone/browser/login/password_reset.py\nindex 3e26ce407..2cfc7d1ec 100644\n--- a/Products/CMFPlone/browser/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -1,25 +1,23 @@\n-from zope.interface import implementer\n-from zope.component import getMultiAdapter\n-from Products.Five import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+# -*- coding: utf-8 -*-\n+from email.header import Header\n from plone.memoize import view\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.CMFPlone.utils import safeToInt\n+from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IPasswordResetToolView\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.CMFPlone.utils import safeToInt\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.i18n import translate\n+from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n-from Products.CMFPlone.interfaces import IPasswordResetToolView\n-from Products.CMFPlone import PloneMessageFactory as _\n-from email.header import Header\n-\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-\n \n @implementer(IPasswordResetToolView)\n class PasswordResetToolView(BrowserView):\n@@ -45,18 +43,26 @@ def encoded_mail_sender(self):\n \n     def registered_notify_subject(self):\n         portal_name = self.portal_state().portal_title()\n-        return translate(_(u"mailtemplate_user_account_info",\n-                           default=u"User Account Information for ${portal_name}",\n-                           mapping={\'portal_name\': safe_unicode(portal_name)}),\n-                           context=self.request)\n+        return translate(\n+            _(\n+                u\'mailtemplate_user_account_info\',\n+                default=u\'User Account Information for ${portal_name}\',\n+                mapping={\'portal_name\': safe_unicode(portal_name)},\n+            ),\n+            context=self.request,\n+        )\n \n     def mail_password_subject(self):\n-        return translate(_(u"mailtemplate_subject_resetpasswordrequest",\n-                           default=u"Password reset request"),\n-                           context=self.request)\n+        return translate(\n+            _(\n+                u\'mailtemplate_subject_resetpasswordrequest\',\n+                default=u\'Password reset request\',\n+            ),\n+            context=self.request,\n+        )\n \n     def construct_url(self, randomstring):\n-        return "%s/passwordreset/%s" % (\n+        return \'%s/passwordreset/%s\' % (\n             self.portal_state().navigation_root_url(), randomstring)\n \n     def expiration_timeout(self):\n@@ -128,10 +134,14 @@ def getErrors(self):\n             return state\n \n         if not userid:\n-            state[\'userid\'] = _(\'This field is required, please provide some information.\')\n+            state[\'userid\'] = _(\n+                \'This field is required, please provide some information.\',\n+            )\n         if state:\n             state[\'status\'] = \'failure\'\n-            state[\'portal_status_message\'] = _(\'Please correct the indicated errors.\')\n+            state[\'portal_status_message\'] = _(\n+                \'Please correct the indicated errors.\',\n+            )\n         return state\n \n     def login_url(self):\n@@ -173,5 +183,7 @@ def __call__(self):\n         if self.request.method == \'POST\':\n             timeout_days = safeToInt(self.request.get(\'timeout_days\'), 7)\n             self.context.setExpirationTimeout(timeout_days)\n-            self.context._user_check = bool(self.request.get(\'user_check\', False))\n+            self.context._user_check = bool(\n+                self.request.get(\'user_check\', False),\n+            )\n         return self.index()\ndiff --git a/Products/CMFPlone/browser/templates/explainPWResetTool.pt b/Products/CMFPlone/browser/login/templates/explainPWResetTool.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/explainPWResetTool.pt\nrename to Products/CMFPlone/browser/login/templates/explainPWResetTool.pt\ndiff --git a/Products/CMFPlone/browser/login/templates/forced_password_change.pt b/Products/CMFPlone/browser/login/templates/forced_password_change.pt\nnew file mode 100644\nindex 000000000..d7e90e358\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/forced_password_change.pt\n@@ -0,0 +1,26 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+  <metal:title fill-slot="content-title">\n+    <h1 class="documentFirstHeading"\n+        i18n:translate="heading_change_password">Time to change your password!</h1>\n+  </metal:title>\n+\n+  <metal:description fill-slot="content-description">\n+    <div class="documentDescription description">\n+        <span i18n:translate="description_forced_password_change">\n+        Before you continue, you need to change your password.\n+        </span>\n+\n+    </div>\n+  </metal:description>\n+\n+  <metal:b fill-slot="content-core">\n+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+  </metal:b>\n+\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt b/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt\nnew file mode 100644\nindex 000000000..51d54a454\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/initial_login_password_change.pt\n@@ -0,0 +1,31 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      i18n:domain="plone"\n+      metal:use-macro="context/main_template/macros/master">\n+\n+  <metal:title fill-slot="content-title">\n+    <h1 class="documentFirstHeading"\n+        i18n:translate="heading_welcome">Welcome!</h1>\n+  </metal:title>\n+\n+  <metal:description fill-slot="content-description">\n+    <div class="documentDescription description">\n+        <span i18n:translate="description_logged_in">\n+            This is the first time that you\'ve logged in to\n+            <span tal:content="context/title" tal:omit-tag="" i18n:name="here">here</span>.\n+        </span>\n+        <span i18n:translate="description_change_initial_password">\n+        Before you start exploring, you need to change your original password.\n+        This ensures that the password you received via email cannot be used in a malicious manner.\n+        </span>\n+\n+    </div>\n+  </metal:description>\n+\n+  <metal:b fill-slot="content-core">\n+      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+  </metal:b>\n+\n+</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt b/Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\nsimilarity index 54%\nrename from Products/CMFPlone/skins/plone_login/insufficient_privileges.pt\nrename to Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\nindex ab5ad99b9..107aa2ba8 100644\n--- a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt\n+++ b/Products/CMFPlone/browser/login/templates/insufficient_privileges.pt\n@@ -6,21 +6,27 @@\n       metal:use-macro="context/main_template/macros/master"\n       i18n:domain="plone">\n \n-<body>\n-\n-<metal:main fill-slot="main">\n+<head>\n+    <metal:block fill-slot="top_slot"\n+                 tal:define="dummy python:request.set(\'disable_border\',1);\n+                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n+</head>\n \n+<body>\n+   <metal:content fill-slot="main">\n       <h1 class="documentFirstHeading"\n           i18n:translate="heading_no_privileges">Insufficient Privileges</h1>\n \n-      <div class="documentDescription" i18n:translate="description_no_privileges_for_page">\n+      <div class="documentDescription" i18n:translate="description_no_privileges_for_page"\n+           tal:define="portal_state context/@@plone_portal_state;\n+                       portal_url portal_state/portal_url">\n       You do not have sufficient privileges to view this page. If you believe\n       you are receiving this message in error, contact the\n       <span i18n:name="site_admin"><a href="#"\n          i18n:translate="label_site_administration"\n-         tal:attributes="href string:${context/portal_url}/contact-info">site administration</a></span>.\n+         tal:attributes="href string:${portal_url}/contact-info">site administration</a></span>.\n       </div>\n-</metal:main>\n \n-</body>\n+   </metal:content>\n </html>\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_out.cpt b/Products/CMFPlone/browser/login/templates/logged_out.pt\nsimilarity index 68%\nrename from Products/CMFPlone/skins/plone_login/logged_out.cpt\nrename to Products/CMFPlone/browser/login/templates/logged_out.pt\nindex 17580a715..c6778e9b3 100644\n--- a/Products/CMFPlone/skins/plone_login/logged_out.cpt\n+++ b/Products/CMFPlone/browser/login/templates/logged_out.pt\n@@ -13,28 +13,14 @@\n </head>\n <body>\n \n-  <metal:main fill-slot="main"\n-              tal:define="isAnon context/@@plone_portal_state/anonymous">\n+<metal:main fill-slot="main">\n \n-<tal:reallyloggedout condition="isAnon">\n-  <h1 class="documentFirstHeading"\n-      i18n:translate="heading_signed_out">You are now logged out</h1>\n-\n-  <div class="documentDescription"\n-     i18n:translate="description_loginagain">You can log in again below.</div>\n-\n-  <div id="content-core">\n-      <metal:login use-macro="context/login_form/macros/login" />\n-  </div>\n-\n-</tal:reallyloggedout>\n-\n-<tal:notloggedoutafterall tal:condition="not: isAnon">\n+<tal:notloggedoutafterall>\n     <h1 class="documentFirstHeading"\n-        i18n:translate="heading_quit_to_log_out">Still logged in</h1>\n+        i18n:translate="heading_quit_to_log_out">Still logged in as a Zope user</h1>\n \n     <div class="documentDescription" i18n:translate="description_quit_to_log_out">\n-        You are logged in via HTTP authentication (i.e. the Management\n+        You are logged in via HTTP authentication (i.e. the Zope Management\n         Interface). In order to log out, you must:\n     </div>\n \ndiff --git a/Products/CMFPlone/browser/login/templates/login.pt b/Products/CMFPlone/browser/login/templates/login.pt\nnew file mode 100644\nindex 000000000..507230128\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login.pt\n@@ -0,0 +1,100 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      metal:use-macro="here/main_template/macros/master"\n+>\n+<body>\n+  <metal:main fill-slot="main">\n+    <metal:main-macro define-macro="main">\n+\n+      <div id="login-form">\n+\n+        <div class="portalMessage error pat-cookietrigger" style="display:none">\n+            <strong i18n:translate="">\n+                Error\n+            </strong>\n+            <span tal:omit-tag=""\n+                i18n:translate="enable_cookies_message_before_login">\n+                Cookies are not enabled. You must enable cookies before you can log in.\n+            </span>\n+        </div>\n+\n+        <form action="." method="post"\n+              tal:attributes="action view/action; enctype view/enctype">\n+\n+            <tal:widgets repeat="widget view/widgets/values">\n+\n+                <tal:block tal:define="hidden python:widget.mode == \'hidden\'">\n+                <div tal:condition="not:hidden">\n+\n+                    <div class="field"\n+                         tal:define="error widget/error"\n+                         tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+\n+                        <label for=""\n+                               tal:attributes="for widget/id"\n+                               tal:condition="not:hidden">\n+                            <span i18n:translate=""\n+                                  tal:content="widget/label">label</span>\n+                            <span class="required horizontal" title="Required"\n+                                  tal:condition="python:widget.required and not hidden"\n+                                  i18n:attributes="title title_required;">&nbsp;</span>\n+                        </label>\n+\n+                        <div class="formHelp"\n+                             tal:define="description widget/field/description"\n+                             i18n:translate=""\n+                             tal:content="description"\n+                             tal:condition="description">\n+                            field description\n+                        </div>\n+\n+                        <div tal:condition="error"\n+                             tal:content="structure error/render">\n+                            Error\n+                        </div>\n+\n+                        <div class="widget">\n+                            <input type="text" tal:replace="structure widget/render" />\n+                        </div>\n+\n+                    </div>\n+\n+                </div>\n+\n+                <input type="hidden"\n+                       tal:condition="hidden"\n+                       tal:replace="structure widget/render" />\n+                </tal:block>\n+\n+            </tal:widgets>\n+            <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+            <div class="formControls">\n+              <tal:actions tal:repeat="action view/actions/values|nothing">\n+                <input type="submit" tal:replace="structure action/render" />\n+              </tal:actions>\n+            </div>\n+        </form>\n+\n+        <div class="footer"\n+             tal:define="portal_state context/@@plone_portal_state;\n+                         portal_url portal_state/portal_url">\n+          <p>\n+            <span i18n:translate="trouble_logging_in" tal:omit-tag="">Trouble logging in?</span>\n+            <a href="@@login-help" tal:attributes="href string:${portal_url}/@@login-help" i18n:translate="footer_login_link_get_help">Get help</a>.\n+          </p>\n+          <p tal:condition="python:view.self_registration_enabled()">\n+            <span i18n:translate="need_an_account" tal:omit-tag="">Need an account?</span>\n+             <a href="@@register" tal:attributes="href string:${portal_url}/@@register" class="emph" i18n:translate="footer_login_link_signup">Sign up here</a>.\n+          </p>\n+        </div>\n+\n+      </div>\n+    </metal:main-macro>\n+  </metal:main>\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/login_failsafe.pt b/Products/CMFPlone/browser/login/templates/login_failsafe.pt\nnew file mode 100644\nindex 000000000..f0c701a20\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login_failsafe.pt\n@@ -0,0 +1,85 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      tal:omit-tag="">\n+<body tal:omit-tag="">\n+\n+ <div id="login-form">\n+\n+  <h1>Failsafe Login</h1>\n+\n+  <div class="portalMessage error pat-cookietrigger" style="display:none">\n+      <strong i18n:translate="">\n+          Error\n+      </strong>\n+      <span tal:omit-tag=""\n+          i18n:translate="enable_cookies_message_before_login">\n+          Cookies are not enabled. You must enable cookies before you can log in.\n+      </span>\n+  </div>\n+\n+    <form action="." method="post"\n+          tal:attributes="action view/action; enctype view/enctype">\n+\n+        <tal:widgets repeat="widget view/widgets/values">\n+\n+            <tal:block tal:define="hidden python:widget.mode == \'hidden\'">\n+            <div tal:condition="not:hidden">\n+\n+                <div class="field"\n+                     tal:define="error widget/error"\n+                     tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+\n+                    <label for=""\n+                           tal:attributes="for widget/id"\n+                           tal:condition="not:hidden">\n+                        <span i18n:translate=""\n+                              tal:content="widget/label">label</span>\n+                        <span class="required horizontal" title="Required"\n+                              tal:condition="python:widget.required and not hidden"\n+                              i18n:attributes="title title_required;">&nbsp;</span>\n+                    </label>\n+\n+                    <div class="formHelp"\n+                         tal:define="description widget/field/description"\n+                         i18n:translate=""\n+                         tal:content="description"\n+                         tal:condition="description">\n+                        field description\n+                    </div>\n+\n+                    <div tal:condition="error"\n+                         tal:content="structure error/render">\n+                        Error\n+                    </div>\n+\n+                    <div class="widget">\n+                        <input type="text" tal:replace="structure widget/render" />\n+                    </div>\n+\n+                </div>\n+\n+            </div>\n+\n+            <input type="hidden"\n+                   tal:condition="hidden"\n+                   tal:replace="structure widget/render" />\n+            </tal:block>\n+\n+        </tal:widgets>\n+        <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+        <div class="formControls">\n+          <tal:actions tal:repeat="action view/actions/values|nothing">\n+            <input type="submit" tal:replace="structure action/render" />\n+          </tal:actions>\n+        </div>\n+    </form>\n+\n+ </div>\n+\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/login/templates/login_help.pt b/Products/CMFPlone/browser/login/templates/login_help.pt\nnew file mode 100644\nindex 000000000..d541a0c12\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/login_help.pt\n@@ -0,0 +1,54 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      metal:use-macro="here/main_template/macros/master"\n+      i18n:domain="plone">\n+<body>\n+  <metal:main fill-slot="main">\n+    <metal:main-macro define-macro="main">\n+\n+      <div>\n+\n+        <h1 tal:condition="view/label | nothing">\n+            <span tal:replace="view/label">Form title</span>\n+        </h1>\n+\n+        <p tal:condition="view/description | nothing"\n+           tal:content="structure view/description">Form description</p>\n+\n+        <form action="." method="post"\n+              tal:attributes="action view/action; enctype view/enctype"\n+              tal:define="subforms view/subforms">\n+\n+          <div class="row">\n+            <div class="col-xs-6 col-sm-6" tal:repeat="subform subforms"\n+                 tal:attributes="class python:\'col-xs-12 col-sm-12\' if len(subforms) == 1 else \'col-xs-6 col-sm-6\'">\n+                <tal:subform replace="structure subform/render"></tal:subform>\n+            </div>\n+          </div>\n+\n+          <span tal:replace="structure context/@@authenticator/authenticator"/>\n+\n+        </form>\n+\n+        <div class="footer"\n+             tal:define="portal_state context/@@plone_portal_state;\n+                         portal_url portal_state/portal_url">\n+          <p class="trouble">\n+            <span i18n:translate="need_more_help" tal:omit-tag="">Need more help?</span>\n+            <a tal:attributes="href string:${portal_url}/contact-info"\n+               href="contact-info" i18n:translate="contact_an_admin">Contact an admin.</a>\n+          </p>\n+          <p class="go_to_login">\n+            <span i18n:translate="go_to_login" tal:omit-tag="">Go to</span>\n+            <a tal:attributes="href string:${portal_url}/login" class="pat-plone-modal"\n+               i18n:translate="to_login_view" href="login">login</a>.\n+          </p>\n+        </div>\n+      </div>\n+    </metal:main-macro>\n+  </metal:main>\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_form.pt b/Products/CMFPlone/browser/login/templates/mail_password_form.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_form.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_form.pt\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_response.pt b/Products/CMFPlone/browser/login/templates/mail_password_response.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_response.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_response.pt\ndiff --git a/Products/CMFPlone/browser/templates/mail_password_template.pt b/Products/CMFPlone/browser/login/templates/mail_password_template.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/mail_password_template.pt\nrename to Products/CMFPlone/browser/login/templates/mail_password_template.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_expired.pt b/Products/CMFPlone/browser/login/templates/pwreset_expired.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_expired.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_expired.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_finish.pt b/Products/CMFPlone/browser/login/templates/pwreset_finish.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_finish.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_finish.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_form.pt b/Products/CMFPlone/browser/login/templates/pwreset_form.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_form.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_form.pt\ndiff --git a/Products/CMFPlone/browser/templates/pwreset_invalid.pt b/Products/CMFPlone/browser/login/templates/pwreset_invalid.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/pwreset_invalid.pt\nrename to Products/CMFPlone/browser/login/templates/pwreset_invalid.pt\ndiff --git a/Products/CMFPlone/browser/templates/registered_notify_template.pt b/Products/CMFPlone/browser/login/templates/registered_notify_template.pt\nsimilarity index 100%\nrename from Products/CMFPlone/browser/templates/registered_notify_template.pt\nrename to Products/CMFPlone/browser/login/templates/registered_notify_template.pt\ndiff --git a/Products/CMFPlone/browser/login/templates/subform_render.pt b/Products/CMFPlone/browser/login/templates/subform_render.pt\nnew file mode 100644\nindex 000000000..0447d3878\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/templates/subform_render.pt\n@@ -0,0 +1,59 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      lang="en"\n+      i18n:domain="plone"\n+      tal:omit-tag="">\n+<body tal:omit-tag="">\n+\n+    <h1 tal:condition="view/label | nothing">\n+        <span tal:replace="view/label">Form title</span>\n+    </h1>\n+\n+    <p tal:condition="view/description | nothing"\n+        tal:content="structure view/description">Form description</p>\n+\n+    <tal:widgets repeat="widget view/widgets/values">\n+        <div tal:define="hidden python:widget.mode == \'hidden\'"\n+             tal:omit-tag="hidden">\n+\n+            <div class="field"\n+                tal:define="error widget/error;\n+                            hidden python:widget.mode == \'hidden\';"\n+                tal:attributes="class python:\'field\' + (error and \' error\' or \'\')">\n+                <label for=""\n+                        tal:attributes="for widget/id"\n+                        tal:condition="not:hidden">\n+                    <span tal:content="widget/label">label</span>\n+                    <span class="required horizontal" title="Required"\n+                          tal:condition="python:widget.required and not hidden"\n+                          i18n:attributes="title title_required;">&nbsp;</span>\n+                </label>\n+\n+                <div class="formHelp"\n+                        tal:define="description widget/field/description"\n+                        tal:content="description"\n+                        tal:condition="python:description and not hidden"\n+                        >field description</div>\n+\n+                <div tal:condition="error"\n+                        tal:content="structure error/render">\n+                    Error\n+                </div>\n+\n+                <div class="widget">\n+                    <input type="text" tal:replace="structure widget/render" />\n+                </div>\n+            </div>\n+        </div>\n+    </tal:widgets>\n+\n+    <div class="formControls">\n+        <tal:actions tal:repeat="action view/actions/values|nothing">\n+            <input type="submit" tal:replace="structure action/render" />\n+        </tal:actions>\n+    </div>\n+\n+</body>\n+</html>\ndiff --git a/Products/CMFPlone/browser/templates/plone-logged-out.pt b/Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\nsimilarity index 97%\nrename from Products/CMFPlone/browser/templates/plone-logged-out.pt\nrename to Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\nindex e52f44f4e..011123aee 100644\n--- a/Products/CMFPlone/browser/templates/plone-logged-out.pt\n+++ b/Products/CMFPlone/browser/templates/plone-admin-logged-out.pt\n@@ -22,7 +22,7 @@\n     tal:attributes="src string:${context/absolute_url}/++resource++plone-logo.png"/>\n \n   <h1 i18n:translate="">\n-      You have been logged out.\n+      You are now logged out.\n   </h1>\n \n   <p>\ndiff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py\nindex d5c1c318c..fa0f0b58e 100644\n--- a/Products/CMFPlone/interfaces/__init__.py\n+++ b/Products/CMFPlone/interfaces/__init__.py\n@@ -38,6 +38,14 @@\n from Products.CMFPlone.interfaces.installable import INonInstallable\n from Products.CMFPlone.interfaces.interface import IInterfaceTool\n from Products.CMFPlone.interfaces.language import ILanguage\n+from Products.CMFPlone.interfaces.login import IForcePasswordChange\n+from Products.CMFPlone.interfaces.login import IInitialLogin\n+from Products.CMFPlone.interfaces.login import ILogin\n+from Products.CMFPlone.interfaces.login import ILoginForm\n+from Products.CMFPlone.interfaces.login import ILoginFormSchema\n+from Products.CMFPlone.interfaces.login import ILoginHelpForm\n+from Products.CMFPlone.interfaces.login import ILoginHelpFormSchema\n+from Products.CMFPlone.interfaces.login import IRedirectAfterLogin\n from Products.CMFPlone.interfaces.migration import IMigrationTool\n from Products.CMFPlone.interfaces.password_reset import IPasswordResetToolView\n from Products.CMFPlone.interfaces.password_reset import IPWResetTool\ndiff --git a/Products/CMFPlone/interfaces/login.py b/Products/CMFPlone/interfaces/login.py\nnew file mode 100644\nindex 000000000..a86278cc0\n--- /dev/null\n+++ b/Products/CMFPlone/interfaces/login.py\n@@ -0,0 +1,82 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone import PloneMessageFactory as _\n+from plone.schema.email import Email\n+from plone.z3cform.interfaces import IWrappedForm\n+from zope import schema\n+from zope.interface import Interface\n+\n+\n+class IRedirectAfterLogin(Interface):\n+    """ Redirect after login adapters should provide this interface """\n+\n+\n+class IForcePasswordChange(Interface):\n+    """ Hook point to customize forcing a password change """\n+\n+\n+class IInitialLogin(Interface):\n+    """ Hook point to customize what happens the first time a user logs into\n+        the site """\n+\n+\n+class ILogin(Interface):\n+    """ Login form schema """\n+\n+    login = schema.TextLine(\n+        title=_(u\'label_log_in\', default=u\'Log in\'),\n+    )\n+\n+    password = schema.Password(\n+        title=_(u\'label_password\', default=u\'Password\'),\n+    )\n+\n+\n+class ILoginForm(IWrappedForm):\n+    """ Login form marker interface """\n+\n+\n+class ILoginFormSchema(Interface):\n+    """ Login form schema """\n+\n+    ac_name = schema.TextLine(\n+        title=_(u\'label_login_name\', default=u\'Login Name\'),\n+        required=True,\n+    )\n+\n+    ac_password = schema.Password(\n+        title=_(u\'label_password\', default=u\'Password\'),\n+        required=True,\n+    )\n+\n+    came_from = schema.TextLine(\n+        title=u\'Came From\',  # not translated, hidden field\n+        required=False,\n+    )\n+\n+\n+class ILoginHelpForm(IWrappedForm):\n+    """ Login Help form marker interface """\n+\n+\n+class ILoginHelpFormSchema(Interface):\n+    """ Login Help form schema """\n+\n+    reset_password = schema.TextLine(\n+        title=_(u\'label_pwreset_username\', default=u\'Username\'),\n+        description=_(\n+            u\'help_pwreset_username\',\n+            default=u\'Enter your username \'\n+                    u\'or email and we\xe2\x80\x99ll send you a password reset link.\',\n+        ),\n+        required=True,\n+    )\n+\n+    recover_username = Email(\n+        title=_(u\'label_pwreset_email\', default=u\'Email\'),\n+        description=_(\n+            u\'help_pwreset_email\',\n+            default=u\'Enter your email and \'\n+                    u\'we\xe2\x80\x99ll send you your username.\',\n+        ),\n+        required=True,\n+    )\ndiff --git a/Products/CMFPlone/profiles/default/skins.xml b/Products/CMFPlone/profiles/default/skins.xml\nindex 80d613abd..5ac4748c4 100644\n--- a/Products/CMFPlone/profiles/default/skins.xml\n+++ b/Products/CMFPlone/profiles/default/skins.xml\n@@ -9,8 +9,6 @@\n     directory="Products.CMFPlone:skins/plone_form_scripts"/>\n  <object name="plone_images" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_images"/>\n- <object name="plone_login" meta_type="Filesystem Directory View"\n-    directory="Products.CMFPlone:skins/plone_login"/>\n  <object name="plone_prefs" meta_type="Filesystem Directory View"\n     directory="Products.CMFPlone:skins/plone_prefs"/>\n  <object name="plone_scripts" meta_type="Filesystem Directory View"\n@@ -28,6 +26,5 @@\n   <layer name="plone_form_scripts"/>\n   <layer name="plone_scripts"/>\n   <layer name="plone_images"/>\n-  <layer name="plone_login"/>\n  </skin-path>\n </object>\ndiff --git a/Products/CMFPlone/skins/plone_login/external_login_return.cpt b/Products/CMFPlone/skins/plone_login/external_login_return.cpt\ndeleted file mode 100644\nindex d926f0070..000000000\n--- a/Products/CMFPlone/skins/plone_login/external_login_return.cpt\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-\n-<metal:main fill-slot="main"\n-     tal:define="isAnon context/@@plone_portal_state/anonymous;\n-                 auth nocall:context/acl_users/credentials_cookie_auth|context/cookie_authentication|nothing;\n-                 session nocall:context/acl_users/session|nothing;\n-                 came_from request/came_from|nothing;\n-                 came_from python:test(came_from is not None and context.portal_url.isURLInPortal(came_from), came_from, None);\n-                 next request/next|nothing;\n-                 next python:test(next is not None and context.portal_url.isURLInPortal(next), next, None);\n-                 cookie_name auth/cookie_name|string:__ac;\n-                 ticket python:request.response.cookies.get(cookie_name, {}).get(\'value\') or request.cookies.get(cookie_name, \'\');\n-                 target request/target|nothing;\n-                 target python:test(target in (\'_parent\', \'_top\', \'_blank\', \'_self\'), target, None);\n-                 valid python:not(isAnon) and next;">\n-\n-  <metal:valid tal:condition="valid">\n-\n-      <h1 class="documentFirstHeading"\n-          i18n:translate="heading_please_wait_while_you_are_logged_in">Please wait while you are logged in</h1>\n-\n-      <div id="content-core">\n-          <div tal:condition="python:auth is None" i18n:translate="login_form_disabled">\n-              Since cookie authentication is disabled, cookie-based login is not available.\n-          </div>\n-\n-          <form tal:attributes="action next; target target;"\n-                method="post"\n-                id="external_login_form"\n-                name="external_login_form"\n-                tal:condition="python:auth is not None">\n-\n-                <input tal:condition="came_from" type="hidden" name="came_from" value="" tal:attributes="value came_from" />\n-                <input type="hidden" name="__ac" value="" tal:attributes="name cookie_name; value ticket;" />\n-\n-                <p i18n:translate="description_enable_cookies_to_stay_logged_in">\n-                   Note: If you do not remain logged in after leaving this page,\n-                   it is because you need to enable cookies in your browser.\n-                </p>\n-\n-                <div class="formControls">\n-\n-                    <input class="context"\n-                           type="submit"\n-                           name="continue"\n-                           value="Continue"\n-                           i18n:attributes="value label_login_continue;"\n-                           />\n-\n-                </div>\n-\n-          </form>\n-          <script type="text/javascript">\n-              /*jslint browser: true */\n-              var external_login_form = document.forms.external_login_form;\n-              external_login_form.style.display = \'none\';\n-              external_login_form.submit();\n-          </script>\n-\n-      </div>\n-  </metal:valid>\n-\n-  <metal:invalid tal:condition="not:valid">\n-      <div metal:use-macro="context/login_failed/macros/login_failed" />\n-  </metal:invalid>\n-\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata b/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata\ndeleted file mode 100644\nindex aec7d7ebb..000000000\n--- a/Products/CMFPlone/skins/plone_login/external_login_return.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=External log in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt b/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt\ndeleted file mode 100644\nindex 7a589540b..000000000\n--- a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt\n+++ /dev/null\n@@ -1,176 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      i18n:domain="plone"\n-      tal:define="dummy python:request.response.setHeader(\'X-Theme-Disabled\', \'True\');">\n-<head>\n-  <title i18n:translate="heading_sign_in">Please log in</title>\n-</head>\n-\n-<body>\n-\n-<div tal:define="checkPermission nocall:context/portal_membership/checkPermission;\n-                 actions python:context.portal_actions.listActionInfos(\'user/join\', object=context);\n-                 auth nocall:context/acl_users/credentials_cookie_auth|nothing;\n-                 came_from request/came_from|request/HTTP_REFERER|nothing;\n-                 came_from python:test(context.portal_url.isURLInPortal(came_from), came_from, None);\n-                 ztutils modules/ZTUtils;\n-                 errors options/state/getErrors;">\n-\n-<h1 class="documentFirstHeading"\n-    i18n:translate="heading_sign_in">Please log in</h1>\n-\n-<p i18n:translate="description_sign_in">\n-To access this part of the site, you need to log in with your user name and password.\n-</p>\n-\n-<p i18n:translate="description_no_account"\n-   tal:define="join python:[a[\'url\'] for a in actions]"\n-   tal:condition="python: join and checkPermission(\'Add portal member\', context)">\n-\n-If you do not have an account here, head over to the\n-\n-<span i18n:name="registration_form">\n-    <a href=""\n-       tal:define="join python:join.pop();\n-                   join join;\n-                   join python:join+test(join.find(\'?\')==-1, \'?\', \'&amp;\')+ztutils.make_query(came_from=came_from);"\n-       tal:attributes="href join"\n-       i18n:translate="description_no_account_registration_linktext">\n-        registration form</a></span>.\n-\n-</p>\n-\n-\n-<div class="portalMessage error pat-cookietrigger" style="display:none">\n-    <strong i18n:translate="">\n-        Error\n-    </strong>\n-    <span tal:omit-tag="" i18n:translate="enable_cookies_message_before_login">\n-        Cookies are not enabled. You must enable cookies before you can log in.\n-    </span>\n-</div>\n-\n-\n-<div tal:condition="python: not auth" i18n:translate="login_form_disabled">\n-    Since cookie authentication is disabled, cookie-based login is not available.\n-</div>\n-\n-<form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-      method="post"\n-      id="login_form"\n-      tal:condition="python:auth">\n-\n-    <fieldset tal:define="ac_name auth/name_cookie|string:__ac_name;\n-                          ac_password auth/pw_cookie|string:__ac_password;\n-                          ac_persist auth/persist_cookie|nothing">\n-\n-        <legend i18n:translate="legend_account_details">Account details</legend>\n-\n-        <input type="hidden"\n-            name="came_from"\n-            value=""\n-\t    tal:attributes="value came_from" />\n-\n-        <input type="hidden" name="form.submitted" value="1" />\n-        <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-        <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-        <input type="hidden" name="login_name" id="login_name" value="" />\n-        <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-        <div class="field"\n-             tal:define="error python:errors.get(ac_name, None);\n-                         value python:request.get(\'login_name\', request.get(ac_name, None));"\n-             tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-            <label i18n:translate="label_login_name"\n-                   tal:attributes="for ac_name">Login Name</label>\n-\n-            <div i18n:translate="help_login_name_caps"\n-                 class="formHelp">\n-                Login names are case sensitive, make sure the caps lock key is not enabled.\n-            </div>\n-\n-            <div tal:content="error">Validation error output</div>\n-\n-            <input type="text"\n-                   size="15"\n-                   tal:attributes="name ac_name;\n-                                   id ac_name;\n-                                   value value;"\n-                   />\n-\n-        </div>\n-\n-        <div class="field"\n-             tal:define="error python:errors.get(ac_password, None);"\n-             tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-            <label i18n:translate="label_password"\n-                   tal:attributes="for ac_password">Password</label>\n-\n-            <div class="formHelp">\n-                <div i18n:translate="help_capslock_password">\n-                    Case sensitive, make sure caps lock is not enabled.\n-                </div>\n-                <div tal:condition="python:checkPermission(\'Mail forgotten password\', context)"\n-                     i18n:translate="help_password_retrieval">\n-                    If you have forgotten your password,\n-                    <span i18n:name="click_here">\n-                        <a href="mail_password_form"\n-                           i18n:translate="label_click_here_to_retrieve">we can send you a new one</a>\n-                    </span>.\n-                </div>\n-            </div>\n-\n-            <div tal:content="error">Validation error output</div>\n-\n-            <input type="password"\n-                   size="15"\n-                   tal:attributes="name ac_password;\n-                                   id ac_password;"\n-                   />\n-        </div>\n-\n-        <div class="field" tal:condition="ac_persist">\n-\n-            <input type="checkbox"\n-                   class="noborder formRememberName"\n-                   value="1"\n-                   checked="checked"\n-                   id="cb_remember"\n-                   tal:attributes="name ac_persist;\n-                                   checked python:request.get(ac_name, \'\') and \'checked\' or None;"\n-                   />\n-\n-            <label for="cb_remember" i18n:translate="label_remember_my_name">Remember my name.</label>\n-\n-            <div i18n:translate="help_remember_my_name"\n-                 class="formHelp">\n-                Check this to have your user name filled in automatically when you log in later.\n-            </div>\n-\n-        </div>\n-\n-        <div class="formControls">\n-\n-            <input class="context"\n-                   type="submit"\n-                   name="submit"\n-                   value="Log in"\n-                   i18n:attributes="value label_log_in;" />\n-\n-        </div>\n-\n-        <p i18n:translate="remember_to_log_out">\n-            Please log out or exit your browser when you\'re done.\n-        </p>\n-\n-    </fieldset>\n-\n-</form>\n-</div>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata b/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata\ndeleted file mode 100644\nindex 5fc5cf6e1..000000000\n--- a/Products/CMFPlone/skins/plone_login/failsafe_login_form.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Sign in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=traverse_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata b/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata\ndeleted file mode 100644\nindex 623d1d665..000000000\n--- a/Products/CMFPlone/skins/plone_login/insufficient_privileges.pt.metadata\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-[default]\r\n-title=Insufficient privileges\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_in.cpy b/Products/CMFPlone/skins/plone_login/logged_in.cpy\ndeleted file mode 100644\nindex 8f5ad4754..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_in.cpy\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-## Controller Python Script "logged_in"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Initial post-login actions\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-REQUEST = context.REQUEST\n-\n-membership_tool = getToolByName(context, \'portal_membership\')\n-if membership_tool.isAnonymousUser():\n-    REQUEST.RESPONSE.expireCookie(\'__ac\', path=\'/\')\n-    email_login = context.portal_registry[\'plone.use_email_as_login\']\n-    if email_login:\n-        context.plone_utils.addPortalMessage(\n-            _(u\'Login failed. Both email address and password are case \'\n-              u\'sensitive, check that caps lock is not enabled.\'),\n-            \'error\')\n-    else:\n-        context.plone_utils.addPortalMessage(\n-            _(u\'Login failed. Both login name and password are case \'\n-              u\'sensitive, check that caps lock is not enabled.\'),\n-            \'error\')\n-    return state.set(status=\'failure\')\n-\n-from DateTime import DateTime\n-member = membership_tool.getAuthenticatedMember()\n-login_time = member.getProperty(\'login_time\', \'2000/01/01\')\n-if not isinstance(login_time, DateTime):\n-    login_time = DateTime(login_time)\n-initial_login = int(login_time == DateTime(\'2000/01/01\'))\n-state.set(initial_login=initial_login)\n-\n-must_change_password = member.getProperty(\'must_change_password\', 0)\n-state.set(must_change_password=must_change_password)\n-\n-if initial_login:\n-    state.set(status=\'initial_login\')\n-elif must_change_password:\n-    state.set(status=\'change_password\')\n-\n-membership_tool.loginUser(REQUEST)\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata b/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata\ndeleted file mode 100644\nindex c74b6f4ed..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_in.cpy.metadata\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.initial_login=traverse_to:string:login_initial\n-action.change_password=traverse_to:string:login_password\n-action.failure=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata b/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata\ndeleted file mode 100644\nindex 3e31194f4..000000000\n--- a/Products/CMFPlone/skins/plone_login/logged_out.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=You have been signed out\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/skins/plone_login/login.py b/Products/CMFPlone/skins/plone_login/login.py\ndeleted file mode 100644\nindex 7d5956ec7..000000000\n--- a/Products/CMFPlone/skins/plone_login/login.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-## Script (Python) "require_login"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login\n-\n-request = context.REQUEST\n-\n-# Handle external login requests from other portals where the user is already\n-# logged in in this portal\n-next = request.get(\'next\', None)\n-if (next is not None and context.portal_url.isURLInPortal(next)\n-    and not context.portal_membership.isAnonymousUser()):\n-    return context.restrictedTraverse(\'external_login_return\')()\n-\n-# Handle login on this portal where login is internal\n-external_login_url = context.portal_registry[\'plone.external_login_url\']\n-external_login_iframe = context.portal_registry[\'plone.external_login_iframe\']\n-if not external_login_url or external_login_iframe:\n-    return context.restrictedTraverse(\'login_form\')()\n-\n-# Handle login on this portal where login is external\n-next = request.URL1 + \'/logged_in\'\n-url = "%s?next=%s" % (external_login_url, next)\n-came_from = request.get(\'came_from\')\n-if came_from:\n-    url = "%s&came_from=%s" % (url, came_from)\n-request.RESPONSE.redirect(url)\ndiff --git a/Products/CMFPlone/skins/plone_login/login_change_password.cpy b/Products/CMFPlone/skins/plone_login/login_change_password.cpy\ndeleted file mode 100644\nindex 846e98ef9..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_change_password.cpy\n+++ /dev/null\n@@ -1,29 +0,0 @@\n-## Controller Python Script "login_change_password"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=password\n-##title=Change a user\'s password upon initial login\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-mt = context.portal_membership\n-member = mt.getAuthenticatedMember()\n-try:\n-    mt.setPassword(password, REQUEST=context.REQUEST)\n-except AttributeError:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'While changing your password an AttributeError occurred. This is \'\n-          u\'usually caused by your user being defined outside the portal.\'),\n-        \'error\')\n-    return state.set(status=\'failure\')\n-\n-member.setProperties(must_change_password=0)\n-\n-from Products.CMFPlone.utils import transaction_note\n-transaction_note(\'Changed password for %s\' % (member.getUserName()))\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata\ndeleted file mode 100644\nindex 81b2b12bf..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_change_password.cpy.metadata\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[default]\n-proxy=Manager\n-\n-[validators]\n-validators=login_password_validate\n-\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.failure=traverse_to:string:login_change_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_failed.cpt b/Products/CMFPlone/skins/plone_login/login_failed.cpt\ndeleted file mode 100644\nindex 6a353353a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_failed.cpt\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-\n-<metal:main fill-slot="main">\n-  <metal:login_failed define-macro="login_failed">\n-\n-    <div id="content-core">\n-        <metal:login use-macro="context/login_form/macros/login" />\n-\n-        <p i18n:translate="description_not_accept_cookies">\n-          If your user name and password are correct, the problem may be that\n-          your browser is not configured to accept cookies.\n-        </p>\n-\n-        <p i18n:translate="description_still_failure">\n-          If you are still reaching this page after correctly configuring\n-          your browser, here are some possible reasons:\n-        </p>\n-\n-        <ul>\n-          <li i18n:translate="description_still_failure_reason1">\n-            You may be running web filtering software that\n-            disables cookies. If so, you will need to configure the\n-            software so that it enables you to accept cookies from\n-            <span tal:content="context/portal_url" tal:omit-tag="" i18n:name="url">url</span>\n-          </li>\n-          <li i18n:translate="description_still_failure_reason2">\n-            Your computer may be behind a firewall or proxy server\n-            that prevents cookies from being sent to or from your browser.\n-            If so, you will need to ask your systems administrator if the\n-            problem can be fixed.\n-          </li>\n-        </ul>\n-    </div>\n-\n-  </metal:login_failed>\n-\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata\ndeleted file mode 100644\nindex 546fcb69a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_failed.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Login unsuccessful\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt b/Products/CMFPlone/skins/plone_login/login_form.cpt\ndeleted file mode 100644\nindex a8ca2c81d..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form.cpt\n+++ /dev/null\n@@ -1,307 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<head>\n-    <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n-\n-<body>\n-    <metal:main fill-slot="main">\n-\n-    <div id="content-core">\n-        <metal:login define-macro="login"\n-            tal:define="auth nocall:context/acl_users/credentials_cookie_auth|context/cookie_authentication|nothing;\n-                        isURLInPortal nocall:context/portal_url/isURLInPortal;\n-                        login_template_ids python:\'login login_success login_password login_failed login_form logged_in logout logged_out registered mail_password mail_password_form register require_login member_search_results pwreset_finish localhost\'.split();\n-                        came_from request/came_from|request/HTTP_REFERER|nothing;\n-                        came_from_template_id python:came_from and context.plone_utils.urlparse(came_from)[2].split(\'/\')[-1];\n-                        came_from python:test(came_from is not None and isURLInPortal(came_from) and came_from_template_id not in login_template_ids, came_from, None);\n-                        next request/next|nothing;\n-                        next python:test(next is not None and isURLInPortal(next), next, None);\n-                        errors options/state/getErrors;\n-                        ac_name auth/name_cookie|string:__ac_name;\n-                        ac_password auth/pw_cookie|string:__ac_password;\n-                        ac_persist auth/persist_cookie|nothing;\n-                        login_name python:request.get(\'login_name\', request.get(ac_name, \'\'));\n-                        checkPermission nocall: context/portal_membership/checkPermission;\n-                        use_email_as_login python:context.portal_registry[\'plone.use_email_as_login\'];\n-                        external_login_url python:context.portal_registry[\'plone.external_login_url\'];\n-                        external_login_iframe python:context.portal_registry[\'plone.external_login_iframe\'];\n-                        mail_password python:test(checkPermission(\'Mail forgotten password\', context), portal_url + \'/mail_password_form\', \'\');\n-                        mail_password_url request/mail_password_url|nothing;\n-                        mail_password_url python:test(mail_password_url and isURLInPortal(mail_password_url), mail_password_url, mail_password);\n-                        join_actions python:context.portal_actions.listActionInfos(\'user/join\', object=context) or [{}];\n-                        join python:join_actions[0].get(\'url\');\n-                        join python:test(join and checkPermission(\'Add portal member\', context), join, \'\');\n-                        join_url request/join_url|nothing;\n-                        join_url python:test(join_url is not None and isURLInPortal(join_url), join_url, join);\n-                        use_normal python:auth and not external_login_url;\n-                        use_iframe python:auth and external_login_url and external_login_iframe;\n-                        use_external python:auth and external_login_url and not external_login_iframe;\n-                        target request/target|nothing;\n-                        target python:test(target in (\'_parent\', \'_top\', \'_blank\', \'_self\'), target, None);\n-                        ztu modules/ZTUtils;">\n-\n-            <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                <strong i18n:translate="">\n-                    Error\n-                </strong>\n-                <span tal:omit-tag=""\n-                    i18n:translate="enable_cookies_message_before_login">\n-                    Cookies are not enabled. You must enable cookies before you can log in.\n-                </span>\n-            </div>\n-\n-            <div tal:condition="python: not auth" i18n:translate="login_form_disabled">\n-                Since cookie authentication is disabled, cookie-based login is not available.\n-            </div>\n-\n-            <form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-                  class="pat-formautofocus"\n-                  method="post"\n-                  id="login_form"\n-                  tal:condition="use_normal">\n-\n-                <div id="login-form">\n-\n-                    <input type="hidden"\n-                        name="came_from"\n-                        value=""\n-                    tal:attributes="value came_from|nothing" />\n-\n-                    <input type="hidden"\n-                        name="next"\n-                        value=""\n-                    tal:attributes="value next|nothing" />\n-\n-                    <input type="hidden"\n-                        name="ajax_load"\n-                        value=""\n-                    tal:attributes="value request/ajax_load|nothing" />\n-\n-                    <input type="hidden"\n-                        name="ajax_include_head"\n-                        value=""\n-                    tal:attributes="value request/ajax_include_head|nothing" />\n-\n-                    <input type="hidden"\n-                        name="target"\n-                        value=""\n-                    tal:attributes="value request/target|nothing" />\n-\n-                    <input type="hidden"\n-                        name="mail_password_url"\n-                        value=""\n-                    tal:attributes="value request/mail_password_url|nothing" />\n-\n-                    <input type="hidden"\n-                        name="join_url"\n-                        value=""\n-                    tal:attributes="value request/join_url|nothing" />\n-\n-                    <input type="hidden" name="form.submitted" value="1" />\n-                    <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                    <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="" />\n-                    <input type="hidden" name="login_name" id="login_name" value="" />\n-                    <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-                    <div class="field"\n-                         tal:define="error python:errors.get(ac_name, None);"\n-                         tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                        <label i18n:translate="label_login_name"\n-                               tal:condition="not:use_email_as_login"\n-                               tal:attributes="for ac_name">Login Name</label>\n-\n-                        <label i18n:translate="label_email"\n-                               tal:condition="use_email_as_login"\n-                               tal:attributes="for ac_name">E-mail</label>\n-\n-                        <div tal:condition="error"\n-                             tal:content="error">Validation error output</div>\n-\n-                        <input type="text"\n-                               size="15"\n-                               tal:attributes="name ac_name;\n-                                               id ac_name;\n-                                               value login_name;"\n-                               />\n-\n-                </div>\n-\n-                <div class="field"\n-                         tal:define="error python:errors.get(ac_password, None);"\n-                         tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                        <label i18n:translate="label_password"\n-                               tal:attributes="for ac_password">Password</label>\n-\n-                        <div tal:condition="error"\n-                             tal:content="error">Validation error output</div>\n-\n-                        <input type="password"\n-                               size="15"\n-                               tal:attributes="name ac_password;\n-                                               id ac_password;"\n-                               />\n-                </div>\n-\n-                    <div class="field" tal:condition="ac_persist">\n-\n-                        <input type="checkbox"\n-                               class="noborder formRememberName"\n-                               value="1"\n-                               checked="checked"\n-                               id="cb_remember"\n-                               tal:attributes="name ac_persist;\n-                                               checked python:request.get(ac_name, \'\') and \'checked\' or None;"\n-                               />\n-\n-                        <tal:username tal:condition="not:use_email_as_login">\n-                        <label for="cb_remember" i18n:translate="label_remember_my_name">Remember my name.</label>\n-\n-                        <div i18n:translate="help_remember_my_name"\n-                             class="formHelp">\n-                            Check this to have your user name filled in automatically when you log in later.\n-                        </div>\n-                        </tal:username>\n-\n-                        <tal:email tal:condition="use_email_as_login">\n-                        <label for="cb_remember" i18n:translate="label_remember_my_email">Remember my email address.</label>\n-\n-                        <div i18n:translate="help_remember_my_email"\n-                             class="formHelp">\n-                            Check this to have your email address filled in automatically when you log in later.\n-                        </div>\n-                        </tal:email>\n-\n-                    </div>\n-\n-                    <div class="formControls">\n-\n-                        <input class="context"\n-                               type="submit"\n-                               name="submit"\n-                               value="Log in"\n-                               i18n:attributes="value label_log_in;"\n-                               />\n-\n-                    </div>\n-\n-                </div>\n-\n-            </form>\n-\n-            <form tal:attributes="action external_login_url"\n-                  class="pat-formautofocus"\n-                  method="get"\n-                  id="login_form"\n-                  tal:condition="use_external">\n-\n-                <div id="login-form">\n-\n-                    <input type="hidden"\n-                        name="next"\n-                        value=""\n-                    tal:attributes="value string:${request/URL1}/logged_in" />\n-\n-                    <div class="formControls">\n-\n-                        <input class="context"\n-                               type="submit"\n-                               name="submit"\n-                               value="Log in"\n-                               i18n:attributes="value label_log_in;"\n-                               />\n-\n-                    </div>\n-\n-                </div>\n-\n-            </form>\n-\n-        <tal:use_iframe condition="use_iframe">\n-\n-            <form action="#"\n-                  method="get"\n-                  id="login_form"\n-                  name="login_form"\n-                  class="iframe-wrapper"\n-                  tal:define="params python:dict(next=request.URL1+\'/logged_in\', target=\'_parent\', ajax_load=True, ajax_include_head=True, mail_password_url=mail_password, join_url=join);\n-                              dummy python:came_from and params.update(dict(came_from=came_from));\n-                              src external_login_url"\n-                  tal:attributes="action src">\n-\n-                <div id="login-form">\n-\n-                    <iframe name="login-form-iframe"\n-                        id="login-form-iframe"\n-                        tal:attributes="src python:external_login_url+test(join_url.find(\'?\')==-1, \'?\', \'&amp;\')+ztu.make_query(params);"\n-                        >\n-\n-                        <input tal:replace="structure python:ztu.make_hidden_input(params)" />\n-\n-                        <div class="formControls">\n-\n-                            <input class="context"\n-                                   type="submit"\n-                                   name="submit"\n-                                   value="Log in"\n-                                   i18n:attributes="value label_log_in;"\n-                                   />\n-\n-                        </div>\n-\n-                    </iframe>\n-\n-                </div>\n-\n-            </form>\n-\n-        </tal:use_iframe>\n-\n-            <div id="login-forgotten-password"\n-                 tal:condition="python:mail_password_url and use_normal">\n-                <strong i18n:translate="box_forgot_password_option">\n-                    Forgot your password?\n-                </strong>\n-                <p class="discreet"\n-                   i18n:translate="help_password_retrieval">\n-                    If you have forgotten your password,\n-                    <span i18n:name="click_here">\n-                        <a tal:define="mail_password_url python:mail_password_url+test(mail_password_url.find(\'?\')==-1, \'?\', \'&amp;\')+ztu.make_query(userid=login_name)"\n-                            tal:attributes="href mail_password_url; target target;"\n-                           i18n:translate="label_click_here_to_retrieve">we can send you a new one</a></span>.\n-                </p>\n-            </div>\n-\n-            <div id="login-new-user"\n-               tal:condition="python:join_url and use_normal">\n-                <strong i18n:translate="heading_new_user">\n-                New user?\n-                </strong>\n-\n-                <p i18n:translate="description_no_account">\n-                If you do not have an account here, head over to the\n-                <span i18n:name="registration_form">\n-                    <a href=""\n-                       tal:attributes="href join_url; target target;"\n-                       i18n:translate="description_no_account_registration_linktext"\n-                        >registration form</a></span>.\n-                </p>\n-\n-            </div>\n-\n-        </metal:login>\n-    </div>\n-\n-    </metal:main>\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata\ndeleted file mode 100644\nindex 1c6a68f5c..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form.cpt.metadata\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[default]\n-title=Sign in\n-border=None\n-\n-[validators]\n-validators=login_form_validate\n-\n-[actions]\n-action.success=traverse_to:string:logged_in\n-action.failure=redirect_to:string:login_form\n-action.failure_page=traverse_to:string:login_failed\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy\ndeleted file mode 100644\nindex 85d651e64..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy\n+++ /dev/null\n@@ -1,98 +0,0 @@\n-## Script (Python) "validate_login_form"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Validate login\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-request = context.REQUEST\n-js_enabled = request.get(\'js_enabled\', 0)  # is javascript enabled?\n-js_enabled = js_enabled == \'1\' or js_enabled == 1\n-cookies_enabled = request.get(\'cookies_enabled\', 0)  # are cookies enabled?\n-cookies_enabled = cookies_enabled == \'1\' or cookies_enabled == 1\n-\n-if js_enabled and not cookies_enabled:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'You must enable cookies before you can log in.\'), \'error\')\n-    state.set(status=\'enable_cookies\')\n-    return state\n-\n-mt=context.portal_membership\n-if mt.isAnonymousUser():\n-    email_login = context.portal_registry[\'plone.use_email_as_login\']\n-    if js_enabled:  # javascript is enabled - we can diagnose the failure\n-        # using cookie authentication?\n-        auth = getattr(context, \'cookie_authentication\', None)\n-        if auth:\n-            user_name = request.get(\'login_name\', None)\n-            password_empty = request.get(\'pwd_empty\', None) == \'1\'\n-            ac_name = auth.name_cookie\n-            ac_password = auth.pw_cookie\n-\n-            if not user_name:\n-                # no user name\n-                if email_login:\n-                    state.setError(\n-                            ac_name,\n-                            _(u\'Please enter your email address.\'),\n-                            \'email_address_required\')\n-                else:\n-                    state.setError(\n-                            ac_name,\n-                            _(u\'Please enter your login name.\'),\n-                            \'login_name_required\')\n-            if password_empty:\n-                state.setError(\n-                        ac_password,\n-                        _(u\'Please enter your password.\'),\n-                        \'password_required\')\n-            verify_login_name = context.portal_registry[\'plone.verify_login_name\']\n-            if user_name and verify_login_name:\n-                # XXX mixing up username and loginname here\n-                if mt.getMemberById(user_name) is None:\n-                    if email_login:\n-                        state.setError(\n-                                ac_name,\n-                                _(u\'Email address not known.\'),\n-                                \'email_address_not_known\')\n-                    else:\n-                        state.setError(\n-                                ac_name,\n-                                _(u\'Login name not found.\'),\n-                                \'login_name_not_found\')\n-                elif not password_empty:\n-                    state.setError(\n-                            ac_password,\n-                            _(u\'Password incorrect.\'),\n-                            \'password_incorrect\')\n-        if email_login:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both email address and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        else:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both login name and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        state.set(status=\'failure\')\n-    else:  # no javascript - do low tech login failure\n-        if email_login:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both email address and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        else:\n-            context.plone_utils.addPortalMessage(\n-                _(u\'Login failed. Both login name and password are case \'\n-                  u\'sensitive, check that caps lock is not enabled.\'),\n-                \'error\')\n-        state.set(status=\'failure_page\')\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata b/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata\ndeleted file mode 100644\nindex 59fcf20e0..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_form_validate.vpy.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-proxy=Manager\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_initial.cpy b/Products/CMFPlone/skins/plone_login/login_initial.cpy\ndeleted file mode 100644\nindex b8fb15df4..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_initial.cpy\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-## Controller Python Script "login_initial"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Handle a user\'s initial login\n-\n-# do anything that must be done during a user\'s initial login here\n-\n-# afterwards, change the password if necessary\n-if state.getKwargs().get(\'must_change_password\', 0):\n-    state.set(status=\'login_change_password\')\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata\ndeleted file mode 100644\nindex 5935f327a..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_initial.cpy.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_next\n-action.login_change_password=traverse_to:string:login_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_next.cpy b/Products/CMFPlone/skins/plone_login/login_next.cpy\ndeleted file mode 100644\nindex e5e5ba212..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_next.cpy\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-## Controller Python Script "login_next"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login next actions\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-import ZTUtils\n-\n-REQUEST = context.REQUEST\n-\n-util = context.plone_utils\n-membership_tool = context.portal_membership\n-if membership_tool.isAnonymousUser():\n-    REQUEST.RESPONSE.expireCookie(\'__ac\', path=\'/\')\n-    util.addPortalMessage(_(u\'Login failed\'), \'error\')\n-    return state.set(status=\'failure\')\n-\n-came_from = REQUEST.get(\'came_from\', None)\n-next = REQUEST.get(\'next\', None)\n-\n-# if we weren\'t called from something that set \'came_from\' or if HTTP_REFERER\n-# is the \'logged_out\' page, return the default \'login_success\' form\n-if came_from is not None:\n-    scheme, location, path, parameters, query, fragment = util.urlparse(came_from)\n-    template_id = path.split(\'/\')[-1]\n-    if template_id in [\'login\', \'login_success\', \'login_password\',\n-                       \'login_failed\', \'login_form\', \'logged_in\', \'logout\',\n-                       \'logged_out\', \'registered\', \'mail_password\',\n-                       \'mail_password_form\', \'register\', \'require_login\',\n-                       \'member_search_results\', \'pwreset_finish\',\n-                       # We need localhost in the list, or Testing.testbrowser\n-                       # tests won\'t be able to log in via login_form\n-                       \'localhost\']:\n-        came_from = \'\'\n-    # It is probably a good idea in general to filter out urls outside the\n-    # portal. An added bonus: this fixes some problems with a Zope bug that\n-    # doesn\'t properly unmangle the VirtualHostMonster stuff when setting\n-    # ACTUAL_URL\n-    if not context.portal_url.isURLInPortal(came_from):\n-        came_from = \'\'\n-\n-if next:\n-    if not context.portal_url.isURLInPortal(next):\n-        came_from = next = \'\'\n-    else:\n-        state.set(status=\'external\')\n-\n-if came_from and not next:\n-    # If javascript is not enabled, it is possible that cookies are not\n-    # enabled.\n-    # If cookies aren\'t enabled, the redirect will log the user out, and\n-    # confusion\n-    # may arise. Redirect only if we know for sure that cookies are enabled.\n-\n-    util.addPortalMessage(_(u\'Welcome! You are now logged in.\'))\n-    came_from = util.urlunparse((scheme, location, path, parameters,\n-                                query, fragment))\n-\n-    # redirect immediately\n-    return REQUEST.RESPONSE.redirect(came_from)\n-\n-state.set(came_from=came_from, next=next)\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata b/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata\ndeleted file mode 100644\nindex 572937c29..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_next.cpy.metadata\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-[actions]\n-action.success=traverse_to:string:login_success\n-action.failure=traverse_to:string:login_failed\n-action.external=traverse_to:string:external_login_return\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password.cpt b/Products/CMFPlone/skins/plone_login/login_password.cpt\ndeleted file mode 100644\nindex 777132294..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password.cpt\n+++ /dev/null\n@@ -1,118 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-\n-<tal:block tal:condition="exists: context/portal_skins | nothing"\n-           tal:replace="nothing">\n-\n-    <tal:block tal:condition="context/portal_skins/updateSkinCookie | nothing"\n-       tal:define="dummy context/setupCurrentSkin" />\n-\n-</tal:block>\n-\n-<metal:main fill-slot="main"\n-     tal:define="errors options/state/getErrors;">\n-\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="heading_welcome">Welcome!</h1>\n-\n-    <div class="documentDescription">\n-        <span i18n:translate="description_logged_in">\n-            This is the first time that you\'ve logged in to\n-            <span tal:content="context/title" tal:omit-tag="" i18n:name="here">here</span>.\n-        </span>\n-\n-        <span i18n:translate="description_change_initial_password">\n-        Before you start exploring, you need to change your original password.\n-        This ensures that the password you received via email cannot be used in a malicious manner.\n-        </span>\n-    </div>\n-\n-    <div id="content-core">\n-        <p i18n:translate="description_use_form_to_change_password">\n-            Please use the form below to change your password.\n-        </p>\n-\n-        <form tal:attributes="action python:context.absolute_url()+\'/\'+template.id"\n-              class="pat-formautofocus"\n-              name="change_password"\n-              method="post">\n-\n-            <fieldset>\n-            <legend i18n:translate="legend_password_details">Password Details</legend>\n-\n-            <input type="hidden" name="form.submitted" value="1" />\n-            <input type="hidden" name="initial_login" value="1" />\n-            <input type="hidden"\n-                   name="came_from"\n-                   value=""\n-                   tal:define="came_from request/came_from|nothing"\n-                   tal:condition="came_from"\n-                   tal:attributes="value came_from"\n-                   />\n-\n-            <input tal:replace="structure context/@@authenticator/authenticator" />\n-\n-            <div class="field"\n-                 tal:define="error python:errors.get(\'password\', None);"\n-                 tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                    <label for="password"\n-                           i18n:translate="label_new_password">New password</label>\n-\n-                    <div class="formHelp" i18n:translate="help_new_password">\n-                    Enter your new password.\n-                    </div>\n-\n-                    <div tal:content="error">Validation error output</div>\n-\n-                    <input type="password"\n-                           name="password"\n-                           id="password"\n-                           size="10"\n-                           />\n-            </div>\n-\n-            <div class="field"\n-                 tal:define="error python:errors.get(\'confirm\', None);"\n-                 tal:attributes="class python:test(error, \'field error\', \'field\')">\n-\n-                <label for="confirm"\n-                       i18n:translate="label_confirm_password">Confirm password</label>\n-\n-                <div class="formHelp" i18n:translate="help_confirm_password">\n-                    Re-enter the password. Make sure the passwords are identical.\n-                </div>\n-\n-                <div tal:content="error">Validation error output</div>\n-\n-                <input type="password"\n-                       name="confirm"\n-                       id="confirm"\n-                       size="10"\n-                       />\n-            </div>\n-\n-            <div class="formControls">\n-                <input class="standalone"\n-                       type="submit"\n-                       name="submit"\n-                       value="Change Password"\n-                       i18n:attributes="value label_change_password;" />\n-            </div>\n-\n-            </fieldset>\n-\n-        </form>\n-    </div>\n-</metal:main>\n-\n-</body>\n-</html>\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata b/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata\ndeleted file mode 100644\nindex 6c4357ca3..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password.cpt.metadata\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[default]\n-title=Choose a new password\n-border=None\n-\n-[validators]\n-validators=login_password_validate\n-\n-[actions]\n-action.success=traverse_to:string:login_change_password\n-action.failure=traverse_to:string:login_password\ndiff --git a/Products/CMFPlone/skins/plone_login/login_password_validate.vpy b/Products/CMFPlone/skins/plone_login/login_password_validate.vpy\ndeleted file mode 100644\nindex 0a2e0d706..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_password_validate.vpy\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-## Script (Python) "validate_login_password"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Validate password change during login\n-\n-from Products.CMFPlone import PloneMessageFactory as _\n-\n-mt = context.portal_membership\n-if mt.isAnonymousUser():\n-    # not logged in -- most likely because cookies not enabled\n-    context.plone_utils.addPortalMessage(\n-        _(u\'You must enable cookies before you can log in.\'), \'error\')\n-    state.set(status=\'failure_anonymous\')\n-    return state\n-\n-request = context.REQUEST\n-password = request.get(\'password\', None)\n-password_confirm = request.get(\'confirm\', None)\n-\n-failMessage = context.portal_registration \\\n-                .testPasswordValidity(password, password_confirm)\n-if failMessage:\n-    context.plone_utils.addPortalMessage(failMessage, \'error\')\n-    state.setError(\'password\', failMessage)\n-    state.set(status=\'failure\')\n-    return state\n-\n-if password != password_confirm:\n-    context.plone_utils.addPortalMessage(\n-        _(u\'Please make sure you confirm your password.\'), \'error\')\n-    state.setError(\'confirm\', _(u\'Passwords must match.\'))\n-    state.set(status=\'failure\')\n-    return state\n-\n-return state\ndiff --git a/Products/CMFPlone/skins/plone_login/login_success.pt b/Products/CMFPlone/skins/plone_login/login_success.pt\ndeleted file mode 100644\nindex 0e3fdd34e..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_success.pt\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-\n-<tal:block tal:condition="exists: context/portal_skins | nothing"\n-           tal:replace="nothing">\n-    <tal:block tal:condition="context/portal_skins/updateSkinCookie | nothing"\n-               tal:define="dummy context/setupCurrentSkin" />\n-</tal:block>\n-\n-<metal:main fill-slot="main"\n-     tal:define="portal_state nocall:context/@@plone_portal_state;\n-                 isAnon portal_state/anonymous;">\n-\n-  <metal:not-anon tal:condition="not:isAnon"\n-                  tal:define="came_from request/came_from|nothing;\n-                              initial_login request/initial_login|nothing;\n-                              js_enabled python:request.get(\'js_enabled\',\'1\')!=\'0\';">\n-\n-      <h1 class="documentFirstHeading"\n-          i18n:translate="heading_you_are_now_logged_in">You are now logged in</h1>\n-\n-      <p tal:condition="initial_login" class="documentDescription"\n-         i18n:translate="description_logged_in_explain">\n-         Notice that the top right bar has changed. It now\n-         contains several personalized items. Use these items\n-         to control your settings and your personal area.\n-         They will remain as long as you are logged in.\n-      </p>\n-\n-      <div id="content-core">\n-          <p tal:condition="came_from">\n-            <a href=""\n-               tal:attributes="href came_from"\n-               i18n:translate="label_login_continue">\n-              Continue</a>\n-          </p>\n-\n-          <p tal:condition="python:not came_from">\n-            <a href=""\n-               tal:attributes="href portal_state/navigation_root_url"\n-               i18n:translate="label_login_continue_to_home_page">\n-              Continue to the\n-              <span tal:content="portal_state/navigation_root_title" i18n:name="portal_title">\n-                  portal title\n-              </span>\n-              home page\n-              </a>\n-          </p>\n-\n-          <div tal:condition="not:js_enabled">\n-             <p i18n:translate="description_enable_cookies_to_stay_logged_in">\n-                Note: If you do not remain logged in after leaving this page,\n-                it is because you need to enable cookies in your browser.\n-             </p>\n-          </div>\n-      </div>\n-  </metal:not-anon>\n-\n-  <metal:anon tal:condition="isAnon">\n-      <div metal:use-macro="context/login_failed/macros/login_failed" />\n-  </metal:anon>\n-\n-</metal:main>\n-\n-</body>\n-</html>\n-\ndiff --git a/Products/CMFPlone/skins/plone_login/login_success.pt.metadata b/Products/CMFPlone/skins/plone_login/login_success.pt.metadata\ndeleted file mode 100644\nindex e86cc5843..000000000\n--- a/Products/CMFPlone/skins/plone_login/login_success.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=Login successful\n-border=None\ndiff --git a/Products/CMFPlone/skins/plone_login/logout.cpy b/Products/CMFPlone/skins/plone_login/logout.cpy\ndeleted file mode 100644\nindex 125e46bb1..000000000\n--- a/Products/CMFPlone/skins/plone_login/logout.cpy\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-## Controller Python Script "logout"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind state=state\n-##bind subpath=traverse_subpath\n-##title=Logout handler\n-##parameters=\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-request = context.REQUEST\n-\n-mt = getToolByName(context, \'portal_membership\')\n-mt.logoutUser(request)\n-\n-from Products.CMFPlone.utils import transaction_note\n-transaction_note(\'Logged out\')\n-\n-# Handle external logout requests from other portals\n-next = request.get(\'next\', None)\n-if (next is not None and context.portal_url.isURLInPortal(next)):\n-    target_url = next\n-else:\n-    target_url = request.URL1 + \'/logged_out\'\n-    external_logout_url = context.portal_registry[\'plone.external_logout_url\']\n-    if external_logout_url:\n-        target_url = "%s?next=%s" % (external_logout_url, target_url)\n-\n-# Double \'$\' to avoid injection into TALES\n-target_url = target_url.replace(\'$\', \'$$\')\n-return state.set(next_action=\'redirect_to:string:\' + target_url)\ndiff --git a/Products/CMFPlone/skins/plone_login/registered.pt b/Products/CMFPlone/skins/plone_login/registered.pt\ndeleted file mode 100644\nindex ad5f1e133..000000000\n--- a/Products/CMFPlone/skins/plone_login/registered.pt\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-\n-<metal:main fill-slot="main"\n-     tal:define="auth nocall:context/acl_users/credentials_cookie_auth|nothing">\n-\n-    <div id="content-core" tal:condition="python: not auth" i18n:translate="registered_disabled">\n-           Cookie authentication has been disabled.\n-    </div>\n-\n-    <div tal:define="enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\']"\n-         tal:omit-tag=""\n-         tal:condition="python: auth">\n-\n-        <h1 class="documentFirstHeading"\n-            i18n:translate="heading_welcome">\n-            Welcome!\n-        </h1>\n-\n-        <div class="documentDescription" i18n:translate="description_you_are_registered">\n-            You have been registered.\n-        </div>\n-\n-        <div id="content-core">\n-            <p tal:condition="not: enable_user_pwd_choice"\n-               tal:define="expire_length context/portal_password_reset/getExpirationTimeout;\n-                           toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                           expire_date python:toLocalizedTime(DateTime() + expire_length, long_format=1)"\n-               i18n:translate="description_password_reset_or_registered">\n-                You will receive an e-mail shortly containing a URL that will allow you to\n-                set your password. When you receive this e-mail, please follow the link to\n-                complete your registration process. NOTE: The password reset URL will expire\n-                on <span tal:replace="expire_date" i18n:name="time"/>. If your\n-                password reset request expires, you may use the "Forgot your password" link\n-                to generate another password reset request.\n-            </p>\n-\n-            <tal:block condition="enable_user_pwd_choice">\n-                <p i18n:translate="description_you_can_log_on_now">\n-                    Click the button to log in immediately.\n-                </p>\n-\n-                <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                    <strong i18n:translate="">\n-                        Error\n-                    </strong>\n-                    <span tal:omit-tag=""\n-                        i18n:translate="enable_cookies_message_before_login">\n-                        Cookies are not enabled. You must enable cookies before you can log in.\n-                    </span>\n-                </div>\n-\n-\n-                <form action=""\n-                      method="post"\n-                      tal:define="form request/form;\n-                                  username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n-                                  password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n-                                  ac_name auth/name_cookie|string:__ac_name;\n-                                  ac_password auth/pw_cookie|string:__ac_password;\n-                                  portal_url context/portal_url;"\n-                      tal:attributes="action python:\'%s/login_form\' % portal_url">\n-\n-                     <input type="hidden" name="form.submitted" value="1" />\n-                     <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                     <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="0" />\n-                     <input type="hidden" name="login_name" id="login_name" value="" />\n-                     <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n-\n-                    <input type="hidden"\n-                           name="came_from"\n-                           value=""\n-                           tal:attributes="value request/came_from|nothing;" />\n-                    <input type="hidden"\n-                           name="ac_name"\n-                           value=""\n-                           tal:attributes="id ac_name;\n-                                           name ac_name;\n-                                           value username;" />\n-                    <input type="hidden"\n-                           name="ac_password"\n-                           value=""\n-                           tal:attributes="name ac_password;\n-                                           id ac_password;\n-                                           value password;" />\n-                    <input class="standalone"\n-                           type="submit"\n-                           value="Log in"\n-                           i18n:attributes="value label_log_in;"\n-                           />\n-                </form>\n-            </tal:block>\n-        </div>\n-\n-    </div>\n-\n-</metal:main>\n-</body>\n-</html>\ndiff --git a/Products/CMFPlone/skins/plone_login/registered.pt.metadata b/Products/CMFPlone/skins/plone_login/registered.pt.metadata\ndeleted file mode 100644\nindex c46a73de7..000000000\n--- a/Products/CMFPlone/skins/plone_login/registered.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=You have been registered\n-border=None\ndiff --git a/Products/CMFPlone/skins/plone_login/require_login.py b/Products/CMFPlone/skins/plone_login/require_login.py\ndeleted file mode 100644\nindex 37b7bec82..000000000\n--- a/Products/CMFPlone/skins/plone_login/require_login.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-## Script (Python) "require_login"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Login\n-\n-login = \'login\'\n-\n-portal = context.portal_url.getPortalObject()\n-# if cookie crumbler did a traverse instead of a redirect,\n-# this would be the way to get the value of came_from\n-#url = portal.getCurrentUrl()\n-#context.REQUEST.set(\'came_from\', url)\n-\n-if context.portal_membership.isAnonymousUser():\n-    return portal.restrictedTraverse(login)()\n-else:\n-    return portal.restrictedTraverse(\'insufficient_privileges\')()\ndiff --git a/Products/CMFPlone/tests/LoginAndLogout.txt b/Products/CMFPlone/tests/LoginAndLogout.rst\nsimilarity index 100%\nrename from Products/CMFPlone/tests/LoginAndLogout.txt\nrename to Products/CMFPlone/tests/LoginAndLogout.rst\ndiff --git a/Products/CMFPlone/tests/emaillogin.txt b/Products/CMFPlone/tests/emaillogin.rst\nsimilarity index 76%\nrename from Products/CMFPlone/tests/emaillogin.txt\nrename to Products/CMFPlone/tests/emaillogin.rst\nindex 6dfff3e49..3be215f64 100644\n--- a/Products/CMFPlone/tests/emaillogin.txt\n+++ b/Products/CMFPlone/tests/emaillogin.rst\n@@ -13,17 +13,17 @@ Some bootstrapping::\n     >>> portal = layer[\'portal\']\n     >>> browser = Browser(app)\n \n-First we login as admin.\n+First we login as admin::\n \n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import SITE_OWNER_PASSWORD\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n \n Now we allow users to register themselves. We also allow them to pick\n-their own passwords to ease testing.\n+their own passwords to ease testing::\n \n     >>> browser.open(\'http://nohost/plone/@@security-controlpanel\')\n     >>> browser.getControl(name=\'form.widgets.enable_self_reg:list\').value = True\n@@ -32,7 +32,7 @@ their own passwords to ease testing.\n     >>> \'Changes saved\' in browser.contents\n     True\n \n-We logout:\n+We logout::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n \n@@ -41,7 +41,7 @@ Registration\n ------------\n \n We then visit the registration form. We can fill in a user name\n-there:\n+there::\n \n     >>> browser.open(\'http://nohost/plone/@@register\')\n     >>> browser.getControl(\'User Name\').value=\'username\'\n@@ -52,14 +52,14 @@ there:\n     >>> \'You have been registered.\' in browser.contents\n     True\n \n-So that still works. Now we become admin again.\n+So that still works. Now we become admin again::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n \n-We switch on using the email address as login name.\n+We switch on using the email address as login name::\n \n     >>> browser.open(\'http://nohost/plone/@@security-controlpanel\')\n     >>> browser.getControl(name=\'form.widgets.use_email_as_login:list\').value = [\'selected\']\n@@ -69,7 +69,7 @@ We switch on using the email address as login name.\n     >>> browser.open(\'http://nohost/plone/logout\')\n \n Now we visit the registration form. The user name field is no longer\n-there:\n+there::\n \n     >>> browser.open(\'http://nohost/plone/@@register\')\n     >>> browser.getControl(\'User Name\')\n@@ -77,7 +77,7 @@ there:\n     ...\n     LookupError: label \'User Name\'...\n \n-We fill in the rest of the form:\n+We fill in the rest of the form::\n \n     >>> browser.getControl(\'E-mail\').value=\'email@example.org\'\n     >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n@@ -90,11 +90,11 @@ We fill in the rest of the form:\n Login\n -----\n \n-We can now login with this email address:\n+We can now login with this email address::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'You are now logged in\' in browser.contents\n     True\n@@ -104,7 +104,7 @@ the browser even when the user is not actually logged in: the text\n \'Log in\' still appears and no link to the user\'s dashboard is\n available. Or even more subtle: that text and that link are there,\n but visiting another page will show that the user does not remain\n-logged it. This test should be enough:\n+logged it. This test should be enough::\n \n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n@@ -115,19 +115,19 @@ The first registered user might still be able to login with his\n non-email login name, but cannot login with his email address, as his\n account was created before the policy to use emails as logins was\n used. A future Plone version may solve that automatically. For now,\n-this can be remedied by running the provided migration.\n+this can be remedied by running the provided migration::\n \n     >>> from zope.component import getMultiAdapter\n     >>> migrationView = getMultiAdapter((portal, portal.REQUEST), name=\'migrate-to-emaillogin\')\n     >>> result = migrationView.switch_to_email()\n     >>> import transaction; transaction.commit()\n \n-Now we try logging out and in again with the given email address.\n+Now we try logging out and in again with the given email address::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'username@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n@@ -142,17 +142,17 @@ Changing the email address\n --------------------------\n \n We again log in as the user created after using email as login was\n-switched on.\n+switched on::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n \n-We change the email address.\n+We change the email address::\n \n     >>> browser.open(\'http://nohost/plone/@@personal-information\')\n     >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n@@ -164,28 +164,28 @@ We change the email address.\n \n After those two changes, we can no longer login with our first email\n address. This may be fixable by changing PluggableAuthService if we\n-want. (See PLIP9214 notes.)\n+want. (See PLIP9214 notes.)::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email1@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email1@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> \'Login failed\' in browser.contents\n     True\n \n-The current email address of course works fine for logging in:\n+The current email address of course works fine for logging in::\n \n     >>> browser.open(\'http://nohost/plone/logout\')\n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n-    >>> browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email2@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n \n-Picking the e-mail address of another user should of course fail:\n+Picking the e-mail address of another user should of course fail::\n \n     >>> browser.open(\'http://nohost/plone/@@personal-information\')\n     >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n@@ -201,23 +201,21 @@ These tests are partly copied from... PasswordResetTool. (surprise!)\n \n Now it is time to forget our password and click the ``Forgot your\n password`` link in the login form. This should work by just filling\n-in our current email address:\n+in our current email address::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getLink(\'we can send you a new one\').click()\n-    >>> browser.url.startswith(\'http://nohost/plone/mail_password_form\')\n-    True\n-    >>> form = browser.getForm(name=\'mail_password\')\n-    >>> \'My email address is\' in browser.contents\n+    >>> browser.getLink(\'Get help\').click()\n+    >>> browser.url.startswith(\'http://nohost/plone/@@login-help\')\n     True\n-    >>> form.getControl(name=\'userid\').value = \'email2@example.org\'\n-    >>> form.getControl(\'Start password reset\').click()\n-    >>> \'Password reset confirmation sent\' in browser.contents\n+    >>> form = browser.getForm(index=1)\n+    >>> form.getControl(name=\'form.widgets.reset_password\').value = \'email2@example.org\'\n+    >>> form.getControl(\'Reset your password\').click()\n+    >>> \'An email has been sent with instructions on how to reset your password.\' in browser.contents\n     True\n \n As part of our test setup, we replaced the original MailHost with our\n own version. Our version doesn\'t mail messages, it just collects them\n-in a list called ``messages``:\n+in a list called ``messages``::\n \n     >>> mailhost = portal.MailHost\n     >>> len(mailhost.messages)\n@@ -225,19 +223,19 @@ in a list called ``messages``:\n     >>> msg = mailhost.messages[0]\n \n Now that we have the message, we want to look at its contents, and\n-then we extract the address that lets us reset our password:\n+then we extract the address that lets us reset our password::\n \n     >>> "To: email2@example.org" in msg\n     True\n \n-Now get the link:\n+Now get the link::\n \n     >>> import quopri\n     >>> msg = quopri.decodestring(msg)\n     >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n     >>> address = msg[url_index:].split()[0]\n \n-Now that we have the address, we will reset our password:\n+Now that we have the address, we will reset our password::\n \n     >>> browser.open(address)\n     >>> "Set your password" in browser.contents\n@@ -250,18 +248,18 @@ Now that we have the address, we will reset our password:\n     >>> "Your password has been set successfully." in browser.contents\n     True\n \n-We can now login using our new password:\n+We can now login using our new password::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'email2@example.org\'\n-    >>> browser.getControl(\'Password\').value = \'secretion\'\n+    >>> browser.getControl(name=\'__ac_name\').value = \'email2@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\n     False\n     >>> browser.open(\'http://nohost/plone/logout\')\n \n-The first user can still reset his password with his user id:\n+The first user can still reset his password with his user id::\n \n     >>> browser.open(\'http://nohost/plone/mail_password_form\')\n     >>> form = browser.getForm(name=\'mail_password\')\n@@ -270,7 +268,7 @@ The first user can still reset his password with his user id:\n     >>> \'Password reset confirmation sent\' in browser.contents\n     True\n \n-The email is sent to the correct email address:\n+The email is sent to the correct email address::\n \n     >>> len(mailhost.messages)\n     2\n@@ -278,13 +276,13 @@ The email is sent to the correct email address:\n     >>> "To: username@example.org" in msg\n     True\n \n-Now get the link:\n+Now get the link::\n \n     >>> msg = quopri.decodestring(msg)\n     >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n     >>> address = msg[url_index:].split()[0]\n \n-Now that we have the address, we will reset our password:\n+Now that we have the address, we will reset our password::\n \n     >>> browser.open(address)\n     >>> "Set your password" in browser.contents\n@@ -299,11 +297,11 @@ Now that we have the address, we will reset our password:\n \n We can now login using our new password. We cannot use the initial\n login name though, but have to use our current email address as that\n-is our login name:\n+is our login name::\n \n     >>> browser.open(\'http://nohost/plone/login\')\n-    >>> browser.getControl(\'E-mail\').value = \'username@example.org\'\n-    >>> browser.getControl(\'Password\').value = \'secretion\'\n+    >>> browser.getControl(name=\'__ac_name\').value = \'username@example.org\'\n+    >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n     >>> browser.getControl(\'Log in\').click()\n     >>> browser.open(\'http://nohost/plone\')\n     >>> \'Log in\' in browser.contents\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.txt b/Products/CMFPlone/tests/pwreset_browser.rst\nsimilarity index 94%\nrename from Products/CMFPlone/tests/pwreset_browser.txt\nrename to Products/CMFPlone/tests/pwreset_browser.rst\nindex 2c160663a..f8187f877 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.txt\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -107,7 +107,7 @@ type in his initial password, so we need to enable that:\n   >>> browser.getLink(\'Log in\').click()\n   >>> browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -116,7 +116,7 @@ Log out again and then join:\n   >>> browser.getLink(\'Log out\').click()\n   >>> "You are now logged out" in browser.contents\n   True\n-  >>> \'New user?\' in browser.contents  # Sunburst theme has no Register link\n+  >>> \'Register\' in browser.contents\n   True\n \n Now register a new user:\n@@ -144,7 +144,7 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   True\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -154,23 +154,22 @@ Log out again:\n   >>> "You are now logged out" in browser.contents\n   True\n \n-Now it is time to forget our password and click the ``Forgot your\n-password`` in the login form:\n+Now it is time to forget our password and click the ``Get help`` in the login form:\n \n   >>> browser.open(\'http://nohost/plone/login\')\n-  >>> browser.getLink(\'we can send you a new one\').click()\n-  >>> browser.url.startswith(\'http://nohost/plone/mail_password_form\')\n+  >>> browser.getLink(\'Get help\').click()\n+  >>> browser.url.startswith(\'http://nohost/plone/@@login-help\')\n   True\n-  >>> form = browser.getForm(name=\'mail_password\')\n-  >>> form.getControl(name=\'userid\').value = \'jsmith\'\n-  >>> form.submit()\n+  >>> form = browser.getForm(index=1)\n+  >>> form.getControl(name=\'form.widgets.reset_password\').value = \'jsmith\'\n+  >>> form.submit(name=\'form.buttons.reset\')\n \n-We check if the old password always works.\n+We check if the old password still works.\n \n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n \n@@ -230,7 +229,7 @@ We can now login using our new password:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'jsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'secretion\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should be logged in now:\n \n@@ -261,7 +260,7 @@ First, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -289,7 +288,7 @@ We want to logout and login as the new member:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'wsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'supersecret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -300,7 +299,7 @@ Again, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -310,7 +309,7 @@ We navigate to the Users Overview page and reset a password user:\n   >>> browser.getLink(\'Users and Groups\').click()\n   >>> resets = browser.getControl(name=\'users.resetpassword:records\')\n   >>> reset = resets.getControl(value=\'wsmith\')\n-  >>> reset.selected = True  \n+  >>> reset.selected = True\n   >>> browser.getControl(name="form.button.Modify").click()\n   >>> "Changes applied." in browser.contents\n   True\n@@ -323,7 +322,7 @@ We check if the old password is well changed.\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = \'wsmith\'\n   >>> browser.getControl(name=\'__ac_password\').value = \'supersecret\'\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n \n We should not be logged in:\n \n@@ -358,7 +357,7 @@ First off, we need to set ``validate_mail`` to False:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \n@@ -453,7 +452,7 @@ First, we want to login as the portal owner:\n   >>> browser.open(\'http://nohost/plone/login\')\n   >>> browser.getControl(name=\'__ac_name\').value = SITE_OWNER_NAME\n   >>> browser.getControl(name=\'__ac_password\').value = SITE_OWNER_PASSWORD\n-  >>> browser.getControl(name=\'submit\').click()\n+  >>> browser.getControl(name=\'buttons.login\').click()\n   >>> "You are now logged in" in browser.contents\n   True\n \ndiff --git a/Products/CMFPlone/tests/search_form.txt b/Products/CMFPlone/tests/search_form.rst\nsimilarity index 100%\nrename from Products/CMFPlone/tests/search_form.txt\nrename to Products/CMFPlone/tests/search_form.rst\ndiff --git a/Products/CMFPlone/tests/testControlPanelScripts.py b/Products/CMFPlone/tests/testControlPanelScripts.py\nindex 925109509..8c91d22be 100644\n--- a/Products/CMFPlone/tests/testControlPanelScripts.py\n+++ b/Products/CMFPlone/tests/testControlPanelScripts.py\n@@ -6,42 +6,9 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n-from six import StringIO\n from zExceptions import Forbidden\n \n \n-class TestNoGETControlPanel(PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.folder_path = \'/\' + self.folder.absolute_url(1)\n-        self.setRoles([\'Manager\'])\n-        self.portal.portal_membership.addMember(\'bribri\', \'secret\',\n-                                                [\'Manager\'], [])\n-        self.login(\'bribri\')\n-\n-    def _onlyPOST(self, path, qstring=\'\', success=200, rpath=None):\n-        qstring += \'&%s=%s\' % self.getAuthenticator()\n-        basic_auth = \'%s:%s\' % (\'bribri\', \'secret\')\n-        env = dict()\n-        if rpath:\n-            env[\'HTTP_REFERER\'] = self.app.absolute_url() + rpath\n-        response = self.publish(\'%s?%s\' % (path, qstring), basic_auth, env,\n-                                handle_errors=True)\n-        self.assertEqual(response.getStatus(), 403)\n-\n-        data = StringIO(qstring)\n-        if \'QUERY_STRING\' in env:\n-            del env[\'QUERY_STRING\']\n-        response = self.publish(path, basic_auth, env, request_method=\'POST\',\n-                                stdin=data)\n-        self.assertEqual(response.getStatus(), success)\n-\n-    def test_loginChangePassword(self):\n-        path = self.folder_path + \'/login_change_password\'\n-        qstring = \'password=foo\'\n-        self._onlyPOST(path, qstring)\n-\n-\n class TestPrefsUserManage(PloneTestCase):\n \n     def afterSetUp(self):\n@@ -60,9 +27,13 @@ def addMember(self, username, fullname, email, roles, last_login_time):\n     def test_ploneChangePasswordPostOnly(self):\n         self.login(TEST_USER_NAME)\n         self.setRequestMethod(\'GET\')\n-        self.assertRaises(Forbidden, self.portal.plone_change_password,\n-                          current=TEST_USER_PASSWORD, password=TEST_USER_PASSWORD,\n-                          password_confirm=TEST_USER_PASSWORD)\n+        self.assertRaises(\n+            Forbidden,\n+            self.portal.plone_change_password,\n+            current=TEST_USER_PASSWORD,\n+            password=TEST_USER_PASSWORD,\n+            password_confirm=TEST_USER_PASSWORD\n+        )\n \n \n class TestAccessControlPanelScripts(PloneTestCase):\ndiff --git a/Products/CMFPlone/tests/testCookieAuth.py b/Products/CMFPlone/tests/testCookieAuth.py\nindex 201a0ae58..3d52893fe 100644\n--- a/Products/CMFPlone/tests/testCookieAuth.py\n+++ b/Products/CMFPlone/tests/testCookieAuth.py\n@@ -1,50 +1,59 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import logout\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing.bbb import PloneTestCase\n-from six.moves.urllib import parse\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import base64\n+import unittest\n \n \n-class TestCookieAuth(PloneTestCase):\n+class TestCookieAuth(unittest.TestCase):\n \n-    def afterSetUp(self):\n-        self.portal_url = self.portal.absolute_url()\n-        self.portal_path = \'/%s\' % self.portal.absolute_url(1)\n-        self.folder_path = \'/%s\' % self.folder.absolute_url(1)\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.folder = self.portal[\'test-folder\']\n+        self.browser = Browser(self.layer[\'app\'])\n         self.auth_info = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n         self.cookie = base64.encodestring(self.auth_info)[:-1]\n         self.folder.manage_permission(\'View\', [\'Manager\'], acquire=0)\n+        logout()\n \n     def testAutoLoginPage(self):\n         # Should send us to login_form\n-        response = self.publish(self.folder_path)\n-        self.assertEqual(response.getStatus(), 302)\n-\n-        location = response.getHeader(\'Location\')\n-        self.assertTrue(location.startswith(self.portal_url))\n-        self.assertTrue(parse.urlparse(location)[2].endswith(\'/require_login\'))\n+        self.browser.open(self.folder.absolute_url())\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone/login?came_from=http%3A//nohost/plone/test-folder\'  # noqa: E501\n+        )\n \n     def testInsufficientPrivileges(self):\n         # Should send us to login_form\n-        response = self.publish(self.folder_path, env={\'__ac\': self.cookie})\n-        self.assertEqual(response.getStatus(), 302)\n-\n-        location = response.getHeader(\'Location\')\n-        self.assertTrue(location.startswith(self.portal_url))\n-        self.assertTrue(parse.urlparse(location)[2].endswith(\'/require_login\'))\n+        self.browser.open(self.portal.absolute_url())\n+        self.browser.cookies[\'__ac\'] = self.cookie\n+        self.browser.open(self.folder.absolute_url())\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone/login?came_from=http%3A//nohost/plone/test-folder\'  # noqa: E501\n+        )\n \n     def testSetSessionCookie(self):\n         # The __ac cookie should be set for the session only\n-        form = {\'__ac_name\': TEST_USER_NAME,\n-                \'__ac_password\': TEST_USER_PASSWORD}\n-\n-        response = self.publish(self.portal_path + \'/logged_in\',\n-                                env={\'QUERY_STRING\': parse.urlencode(form)})\n-\n-        self.assertEqual(response.getStatus(), 200)\n-\n-        cookie = response.getCookie(\'__ac\')\n-        self.assertEqual(cookie.get(\'path\'), \'/\')\n-        self.assertEqual(cookie.get(\'expires\'), None)\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n+        self.browser.getControl(\n+            name=\'__ac_password\'\n+        ).value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.assertIn(\'__ac\', self.browser.cookies)\n+        self.assertEqual(\n+            self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n+            \'/\',\n+        )\n+        self.assertIsNone(self.browser.cookies.getinfo(\'__ac\')[\'expires\'])\ndiff --git a/Products/CMFPlone/tests/testLoggedIn.py b/Products/CMFPlone/tests/testLoggedIn.py\ndeleted file mode 100644\nindex fe823f3d4..000000000\n--- a/Products/CMFPlone/tests/testLoggedIn.py\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-\n-from Products.CMFCore.permissions import SetOwnProperties\n-from DateTime import DateTime\n-from time import sleep\n-\n-\n-class TestLogin(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.membership = self.portal.portal_membership\n-        self.membership.addMember(\'member\', \'secret\', [\'Member\'], [])\n-        self.login(\'member\')\n-\n-    def testLoggedInCreatesMemberArea(self):\n-        if self.membership.memberareaCreationFlag == \'True\':\n-            self.assertEqual(self.membership.getHomeFolder(), None)\n-            self.portal.logged_in()\n-            self.assertNotEqual(self.membership.getHomeFolder(), None)\n-\n-    def testLoggedInSetsLoginTime(self):\n-        now = DateTime()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'login_time\')) < now)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'login_time\')) >= now)\n-\n-    def testLoggedInSetsLastLoginTime(self):\n-        now = DateTime()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) < now)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n-\n-    def testLoggedInSetsLastLoginTimeIfMemberLacksSetOwnPropertiesPermission(self):\n-        # If members lack the "Set own properties" permission, they should\n-        # still be able to log in, and their login times should be set.\n-        now = DateTime()\n-        self.portal.manage_permission(SetOwnProperties, [\'Manager\'], acquire=0)\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n-\n-    def testInitialLoginTimeDoesChange(self):\n-        member = self.membership.getAuthenticatedMember()\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        login_time = DateTime(member.getProperty(\'login_time\'))\n-        # Log in again later\n-        sleep(0.2)\n-        self.portal.logged_in()\n-        # login_time did change\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertTrue(\n-            DateTime(member.getProperty(\'login_time\')) > login_time)\n-\n-    def testInitialLoginTimeWithString(self):\n-        member = self.membership.getAuthenticatedMember()\n-        # Realize the login_time is not string but DateTime\n-        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n-        self.assertEqual(member.getProperty(\'login_time\').Date(), \'2000/01/01\')\n-\n-        # Update login_time into string\n-        today = DateTime().Date()\n-        member.setProperties(login_time=today)\n-        self.assertIsInstance(member.getProperty(\'login_time\'), str)\n-        self.assertEqual(member.getProperty(\'login_time\'), today)\n-\n-        # Loggin in set login_time with DateTime\n-        self.portal.logged_in()\n-        member = self.membership.getAuthenticatedMember()\n-        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n-        self.assertTrue(member.getProperty(\'login_time\') > DateTime(today))\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 9139f60a8..f233e59d7 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -593,11 +593,6 @@ def testObjectButtonActionsInExpectedOrder(self):\n         ids = [(a[\'id\']) for a in buttons]\n         self.assertEqual(ids, [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', ])\n \n-    def testPloneLoginLayerInDefault(self):\n-        # plone_login layer should exist\n-        path = self.skins.getSkinPath(\'Plone Default\')\n-        self.assertTrue(\'plone_login\' in path)\n-\n     def testCustomSkinFolderExists(self):\n         # the custom skin needs to be created\n         self.assertTrue(\'custom\' in self.skins)\ndiff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py\ndeleted file mode 100644\nindex d34353f6e..000000000\n--- a/Products/CMFPlone/tests/testSSOLogin.py\n+++ /dev/null\n@@ -1,234 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.testing.z2 import Browser\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import TEST_USER_ROLES\n-from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n-from Products.CMFPlone.factory import addPloneSite\n-import transaction\n-\n-\n-class SSOLoginTestCase(PloneTestCase):\n-\n-    def afterSetUp(self):\n-        PloneTestCase.afterSetUp(self)\n-\n-        self.setRoles([\'Manager\'])\n-        addPloneSite(self.app, \'login_portal\',\n-                     content_profile_id=\'Products.ATContentTypes:default\')\n-        addPloneSite(self.app, \'another_portal\',\n-                     content_profile_id=\'Products.ATContentTypes:default\')\n-\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = False  # Don\'t get HTTP 500 pages\n-\n-        self.login_portal = self.app.login_portal  # logins go here\n-        self.another_portal = self.app.another_portal  # another portal\n-        # The extra portals do not get a member setup from the base class.\n-        # Add our user to the other portals to simulate an ldap environment.\n-        for portal in (self.login_portal, self.another_portal):\n-            portal.acl_users.source_users.addUser(\n-                TEST_USER_ID,\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD)\n-        for role in TEST_USER_ROLES:\n-            portal.acl_users.portal_role_manager.doAssignRoleToPrincipal(\n-                TEST_USER_ID, role)\n-\n-        # Configure the login portal to allow logins from our sites.\n-        login_registry = self.login_portal.portal_registry\n-        login_registry[\'plone.allow_external_login_sites\'] = (\n-            self.portal.absolute_url(),\n-            self.another_portal.absolute_url())\n-\n-        # The normal portal needs to allow logins from the login portal,\n-        # otherwise the redirect_to action on login or logout will refuse to\n-        # redirect externally.  This may need to be done on another_portal too,\n-        # but for the current tests this is not needed.\n-        portal_registry = self.portal.portal_registry\n-        portal_registry[\'plone.allow_external_login_sites\'] = (\n-            self.login_portal.absolute_url(), )\n-\n-        # Configure our sites to use the login portal for logins and logouts\n-        login_portal_url = self.login_portal.absolute_url()\n-        for portal in (self.portal, self.another_portal):\n-            reg = portal.portal_registry\n-            reg[\'plone.external_login_url\'] = login_portal_url + \'/login\'\n-            reg[\'plone.external_logout_url\'] = login_portal_url + \'/logout\'\n-\n-        # Configure all sites to use a shared secret and set cookies per path\n-        # (normally they would have different domains.)\n-        for portal in (self.portal, self.login_portal, self.another_portal):\n-            session = portal.acl_users.session\n-            session._shared_secret = \'secret\'\n-            session.path = portal.absolute_url_path()\n-\n-        # Turn on self-registration\n-        self.portal.manage_permission(\'Add portal member\',\n-                                      roles=[\'Manager\', \'Anonymous\'],\n-                                      acquire=0)\n-\n-        transaction.commit()\n-\n-\n-class TestSSOLogin(SSOLoginTestCase):\n-\n-    def test_loginAndLogout(self):\n-        browser = self.browser\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.login_portal.absolute_url_path())\n-        # Without javascript we must click through\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.portal.absolute_url_path())\n-        # Test logging in from another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # No need to enter password this time\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.another_portal.absolute_url_path())\n-        # Now logout\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        # Check we really logged out, there should be a login link\n-        browser.getLink(\'Log in\')\n-        # Check we are logged out of the login_portal too\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Still need to logout of another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        browser.getLink(\'Log in\')\n-\n-    def test_requireLogin(self):\n-        browser = self.browser\n-        browser.handleErrors = True  # So unauthorized renders a login form\n-        # Login to the central portal\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        # Check we are logged in centrally\n-        browser.getLink(\'Log out\')\n-        # But not on the other portal\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Now open the protected doc\n-        protected_url = self.folder.absolute_url() + \'/folder_contents\'\n-        browser.open(protected_url)\n-        # Without javascript we must click through\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(browser.url, protected_url)\n-        browser.getLink(\'Log out\')\n-\n-\n-class TestSSOLoginIframe(SSOLoginTestCase):\n-\n-    def afterSetUp(self):\n-        SSOLoginTestCase.afterSetUp(self)\n-        # Configure our sites to use the iframe\n-        for portal in (self.portal, self.another_portal):\n-            portal.portal_registry[\'plone.external_login_iframe\'] = True\n-        transaction.commit()\n-\n-    def test_loginAndLogoutSSO(self):\n-        browser = self.browser\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # We are now inside the iframe\n-        self.assertTrue(\n-            browser.url.startswith(self.login_portal.absolute_url()))\n-        # The Link to get  a new password points back to self.portal\n-        link = browser.getLink(\'we can send you a new one\')\n-        self.assertTrue(link.url.startswith(self.portal.absolute_url()))\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # So does the registration form\n-        link = browser.getLink(\'registration form\')\n-        self.assertTrue(link.url.startswith(self.portal.absolute_url()))\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # Login\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.login_portal.absolute_url_path())\n-        # The external_login_form has a target attribute too (but difficult to\n-        # test for)\n-        self.assertTrue(browser.contents.find(\'target=\') > 0)\n-        # Without javascript we must click through\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.portal.absolute_url_path())\n-        # Now in another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # We are now inside the iframe\n-        self.assertTrue(\n-            browser.url.startswith(self.login_portal.absolute_url()))\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(self.browser.cookies.getinfo(\'__ac\')[\'path\'],\n-                         self.another_portal.absolute_url_path())\n-        # Now logout\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        # Check we really logged out, there should be a login link\n-        browser.getLink(\'Log in\')\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        form.submit()\n-        # Check the registration form does not have an incorrect came_from link\n-        link = browser.getLink(\'registration form\')\n-        self.assertFalse(\'came_from\' in link.url)\n-        self.assertEqual(link.attrs[\'target\'], \'_parent\')\n-        # Check we are logged out of the login_portal too\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Still need to logout of another_portal\n-        browser.open(self.another_portal.absolute_url())\n-        browser.getLink(\'Log out\').click()\n-        browser.getLink(\'Log in\')\n-\n-    def test_requireLoginSSO(self):\n-        browser = self.browser\n-        browser.handleErrors = True  # So unauthorized renders a login form\n-        # Login to the central portal\n-        browser.open(self.login_portal.absolute_url())\n-        browser.getLink(\'Log in\').click()\n-        browser.getControl(name=\'__ac_name\').value = TEST_USER_NAME\n-        browser.getControl(name=\'__ac_password\').value = TEST_USER_PASSWORD\n-        browser.getControl(name=\'submit\').click()\n-        # Check we are logged in centrally\n-        browser.getLink(\'Log out\')\n-        # But not on the other portal\n-        browser.open(self.portal.absolute_url())\n-        browser.getLink(\'Log in\')\n-        # Now open the protected doc\n-        protected_url = self.folder.absolute_url() + \'/folder_contents\'\n-        browser.open(protected_url)\n-        # The test browser does not support iframes\n-        form = browser.getForm(name=\'login_form\')\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        form.submit()\n-        # Without javascript we must click through\n-        self.assertEqual(browser.getControl(name=\'came_from\').value,\n-                         protected_url)\n-        browser.getForm(\'external_login_form\').submit()\n-        self.assertEqual(browser.url, protected_url)\n-        browser.getLink(\'Log out\')\ndiff --git a/Products/CMFPlone/tests/test_functional.py b/Products/CMFPlone/tests/test_functional.py\nindex 75e6bb098..259970589 100644\n--- a/Products/CMFPlone/tests/test_functional.py\n+++ b/Products/CMFPlone/tests/test_functional.py\n@@ -9,8 +9,7 @@\n import unittest\n \n \n-UNITTESTS = [\'messages.txt\', \'mails.txt\', \'emaillogin.txt\', \'translate.txt\',\n-             \'pwreset_browser.txt\']\n+UNITTESTS = [\'messages.txt\', \'mails.txt\', \'emaillogin.rst\', \'translate.txt\']\n CONTENT_TESTS = [\n     \'AddMoveAndDeleteDocument.txt\',\n     \'base_tag_not_present.txt\',\ndiff --git a/Products/CMFPlone/tests/test_login_form.py b/Products/CMFPlone/tests/test_login_form.py\nnew file mode 100644\nindex 000000000..f1a3a6849\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_form.py\n@@ -0,0 +1,180 @@\n+# -*- coding: utf-8 -*-\n+from DateTime import DateTime\n+from plone.app.z3cform.interfaces import IPloneFormLayer\n+from Products.CMFCore.permissions import SetOwnProperties\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zope.component import getMultiAdapter\n+from zope.interface import alsoProvides\n+\n+import re\n+import unittest\n+import time\n+\n+\n+FORM_ID = \'login\'\n+\n+\n+class TestLoginForm(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        self.mt = getToolByName(self.portal, \'portal_membership\')\n+        # suitable for testing z3c.form views\n+        alsoProvides(self.request, IPloneFormLayer)\n+\n+    def test_login_view(self):\n+        view = getMultiAdapter((self.portal, self.request), name=\'login\')\n+        self.assertTrue(view())\n+\n+    def _setup_authenticator_request(self):\n+        self.request.set(\'REQUEST_METHOD\', \'POST\')\n+        authenticator = getMultiAdapter(\n+            (self.portal, self.request),\n+            name=u\'authenticator\'\n+        )\n+        html = authenticator.authenticator()\n+        token = re.search(\'value="(.*)"\', html).groups()[0]\n+        self.request.set(\'_authenticator\', token)\n+\n+    def test_form_update(self):\n+        self._setup_authenticator_request()\n+        self.request[\'__ac_name\'] = u\'test\'\n+        self.request[\'__ac_password\'] = u\'secret\'\n+        self.request[\'form.widgets.came_from\'] = [u\'\']\n+        form = self.portal.restrictedTraverse(FORM_ID)\n+        form.update()\n+        data, errors = form.extractData()\n+        self.assertEqual(len(errors), 0)\n+\n+    def test_failsafe_login_form(self):\n+        view = getMultiAdapter(\n+            (self.portal, self.request),\n+            name=\'failsafe_login\'\n+        )\n+        html = view()\n+        self.assertNotIn(\'main-container\', html)\n+\n+    def test_failsafe_login_form_update(self):\n+        self._setup_authenticator_request()\n+        self.request[\'__ac_name\'] = u\'test\'\n+        self.request[\'__ac_password\'] = u\'secret\'\n+        self.request[\'form.widgets.came_from\'] = [u\'\']\n+        form = self.portal.restrictedTraverse(\'failsafe_login\')\n+        form.update()\n+        data, errors = form.extractData()\n+        self.assertEqual(len(errors), 0)\n+\n+    def test_login_external(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        form = self.portal.restrictedTraverse(\'login\')\n+        form()\n+        self.assertEqual(\n+            registry[\'plone.external_login_url\'],\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+\n+    def test_login_external_with_params(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        self.request[\'came_from\'] = \'foo\'\n+        self.request[\'next\'] = \'bar\'\n+        form = self.portal.restrictedTraverse(\'login\')\n+        form()\n+        self.assertIn(\n+            \'came_from=foo\',\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+        self.assertIn(\n+            \'next=bar\',\n+            form.request.response.getHeader(\'Location\'),\n+        )\n+\n+    def test_failsafe_login_external(self):\n+        registry = self.layer[\'portal\'].portal_registry\n+        registry[\'plone.external_login_url\'] = \'http://testurl/extlogin\'\n+        form = self.portal.restrictedTraverse(\'failsafe_login\')\n+        html = form()\n+        self.assertIsNotNone(html)\n+        self.assertEqual(None, form.request.response.getHeader(\'Location\'))\n+        self.assertNotIn(\'main-container\', html)\n+\n+    def test_login_creates_memberarea(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        if membership.memberareaCreationFlag == \'True\':\n+            self.assertEqual(membership.getHomeFolder(), None)\n+            form._post_login()\n+            self.assertNotEqual(membership.getHomeFolder(), None)\n+\n+    def test_post_login_sets_login_time(self):\n+        now = DateTime()\n+        member = self.layer[\'portal\'].portal_membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'login_time\')) < now)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'login_time\')) >= now)\n+\n+    def test_post_login_sets_last_login_time(self):\n+        now = DateTime()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) < now)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n+\n+    def test_post_login_sets_LastLoginTime_if_member_lacks_set_own_properties_permission(self):  # noqa: E501\n+        # If members lack the "Set own properties" permission, they should\n+        # still be able to log in, and their login times should be set.\n+        now = DateTime()\n+        self.portal.manage_permission(SetOwnProperties, [\'Manager\'], acquire=0)\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(DateTime(member.getProperty(\'last_login_time\')) >= now)\n+\n+    def test_initial_login_time_does_change(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        login_time = DateTime(member.getProperty(\'login_time\'))\n+        # Log in again later\n+        time.sleep(0.2)\n+        form._post_login()\n+        # login_time did change\n+        member = membership.getAuthenticatedMember()\n+        self.assertTrue(\n+            DateTime(member.getProperty(\'login_time\')) > login_time,\n+        )\n+\n+    def test_initial_login_time_with_string(self):\n+        membership = self.layer[\'portal\'].portal_membership\n+        member = membership.getAuthenticatedMember()\n+        # Realize the login_time is not string but DateTime\n+        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n+        self.assertEqual(member.getProperty(\'login_time\').Date(), \'2000/01/01\')\n+\n+        # Update login_time into string\n+        today = DateTime().Date()\n+        member.setProperties(login_time=today)\n+        self.assertIsInstance(member.getProperty(\'login_time\'), str)\n+        self.assertEqual(member.getProperty(\'login_time\'), today)\n+\n+        # Loggin in set login_time with DateTime\n+        form = self.portal.restrictedTraverse(\'@@login\')\n+        form._post_login()\n+        member = membership.getAuthenticatedMember()\n+        self.assertIsInstance(member.getProperty(\'login_time\'), DateTime)\n+        self.assertTrue(member.getProperty(\'login_time\') > DateTime(today))\ndiff --git a/Products/CMFPlone/tests/test_login_help.py b/Products/CMFPlone/tests/test_login_help.py\nnew file mode 100644\nindex 000000000..cac3add62\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_help.py\n@@ -0,0 +1,198 @@\n+# -*- coding: utf-8 -*-\n+from plone import api\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.browser.login.login_help import RequestResetPassword\n+from Products.CMFPlone.browser.login.login_help import RequestUsername\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.component import getMultiAdapter\n+\n+import transaction\n+import unittest\n+\n+\n+class TestLoginHelp(unittest.TestCase):\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer[\'request\']\n+        self.portal = self.layer[\'portal\']\n+\n+    def test_view(self):\n+        view = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertTrue(view())\n+\n+    def test_view_form(self):\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertEqual(form.subforms, [])\n+        form.update()\n+        self.assertEqual(len(form.subforms), 2)\n+        reset_password = form.subforms[0]\n+        self.assertTrue(isinstance(reset_password, RequestResetPassword))\n+        self.assertTrue(reset_password())\n+        request_username = form.subforms[1]\n+        self.assertTrue(isinstance(request_username, RequestUsername))\n+        self.assertTrue(request_username())\n+\n+    def test_view_form_with_emaillogin(self):\n+        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        self.assertEqual(form.subforms, [])\n+        form.update()\n+        self.assertEqual(len(form.subforms), 1)\n+        reset_password = form.subforms[0]\n+        self.assertTrue(isinstance(reset_password, RequestResetPassword))\n+        self.assertTrue(reset_password())\n+        self.assertTrue(form())\n+\n+    def test_request_reset_password(self):\n+        form = getMultiAdapter((self.portal, self.request), name=\'login-help\')\n+        form.update()\n+        reset_password = form.subforms[0]\n+        reset_password.handleResetPassword(reset_password, None)\n+        # the field reset_password is required\n+        self.assertEqual(reset_password.status, u\'There were some errors.\')\n+        # reset error message\n+        reset_password.status = \'\'\n+\n+        self.request[\'form.widgets.reset_password\'] = u\'test\'\n+        reset_password.handleResetPassword(reset_password, None)\n+        self.assertEqual(reset_password.status, \'\')\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n+        # no mail was sent since the user does not exist\n+        self.request[\'form.widgets.reset_password\'] = u\'test\'\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        self.request[\'form.widgets.reset_password\'] = u\'test_user_1_\'\n+        reset_password.handleResetPassword(reset_password, None)\n+        self.assertEqual(reset_password.status, \'\')\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+        message = self.portal.MailHost.messages[0]\n+        self.assertIn(\'To: foo@plone.org\', message)\n+        self.assertIn(\'http://nohost/plone/passwordreset/\', message)\n+\n+\n+class TestLoginHelpFunctional(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.browser = Browser(self.layer[\'app\'])\n+\n+    def test_login_help_request_password_reset(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Get help\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        transaction.commit()\n+        # validaton error of empty required field\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        self.browser.getControl(name=\'form.widgets.reset_password\').value = \'nonexistinguser\'  # noqa: E501\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        # message appears even though no email was sent\n+        self.assertIn(\n+            \'An email has been sent with instructions on how to reset your password.\',  # noqa: E501\n+            self.browser.contents\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.reset_password\').value = \'test_user_1_\'\n+        self.browser.getControl(name=\'form.buttons.reset\').click()\n+        self.assertIn(\n+            \'An email has been sent with instructions on how to reset your password.\',   # noqa: E501\n+            self.browser.contents\n+        )\n+        # message was actually sent\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+    def test_login_help_request_username(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Get help\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+\n+        member = api.user.get(\'test_user_1_\')\n+        email = \'foo@plone.org\'\n+        member.setMemberProperties({\'email\': email})\n+        transaction.commit()\n+\n+        # validaton error of empty required field\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        self.assertIn(\'missing\', self.browser.contents)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'foo@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/@@login-help\')\n+        # email was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\', self.browser.contents)\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+        message = self.portal.MailHost.messages[0]\n+        self.assertIn(\'To: foo@plone.org\', message)\n+        self.assertIn(\'Your username is: test_user_1_\', message)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\').value = \'noemail\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        self.assertIn(\'specified email is not valid.\', self.browser.contents)\n+        # no new message was sent\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'bar@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # no new message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        api.user.create(\n+            username=\'another_user_same_email\',\n+            email=\'foo@plone.org\',\n+            password=\'password1\',\n+            roles=(\'Member\',),\n+        )\n+        transaction.commit()\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'foo@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # no new message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n+\n+        api.user.create(\n+            username=\'next_user_new_email\',\n+            email=\'bar@plone.org\',\n+            password=\'password1\',\n+            roles=(\'Member\',),\n+        )\n+        transaction.commit()\n+        self.browser.getControl(\n+            name=\'form.widgets.recover_username\'\n+        ).value = \'bar@plone.org\'\n+        self.browser.getControl(name=\'form.buttons.get_username\').click()\n+        # a message was sent\n+        self.assertIn(\n+            \'email has been sent with your username.\',\n+            self.browser.contents,\n+        )\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\ndiff --git a/Products/CMFPlone/tests/test_login_logout.py b/Products/CMFPlone/tests/test_login_logout.py\nnew file mode 100644\nindex 000000000..127ad3453\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_logout.py\n@@ -0,0 +1,97 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+import transaction\n+import unittest\n+\n+\n+class TestLoginLogout(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer[\'app\'])\n+\n+    def test_login_with_bad_credentials(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = \'wrongpassword\'\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'Login failed\', self.browser.contents)\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+    def test_login_with_correct_credentials(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone\',\n+                         \'Successful login did not redirect to the homepage \'\n+                         \'when came_from was not defined.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+        self.assertEqual(\n+            self.browser.url,\n+            \'http://nohost/plone\',\n+            \'Successful logout did not redirect to the homepage.\'\n+        )\n+\n+        self.assertIn(\n+            \'You are now logged out.\',\n+            self.browser.contents,\n+            \'Logout status message not displayed.\'\n+        )\n+\n+    def test_login_with_user_defined_in_root_user_folder(self):\n+        """ A user defined in the root user folder should be able to log\n+            in into the site\n+        """\n+        self.layer[\'app\'].acl_users.userFolderAddUser(\n+            \'rootuser\',\n+            \'secret\',\n+            [],\n+            []\n+        )\n+        transaction.commit()\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(\'Login Name\').value = \'rootuser\'\n+        self.browser.getControl(\'Password\').value = \'secret\'\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'You are now logged in\', self.browser.contents)\n+\n+    def test_not_logged_in_and_not_authorized_shows_login_form(self):\n+        self.browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n+        self.assertTrue(self.browser.getControl(\'Login Name\'))\n+\n+    def test_insufficient_privileges_returned_when_logged_in_but_not_authorized(self):  # noqa\n+        setRoles(self.layer[\'portal\'], TEST_USER_ID, [])\n+        transaction.commit()\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+        self.assertIn(\'You are now logged in\', self.browser.contents)\n+        mt = self.layer[\'portal\'].portal_membership\n+        member = mt.portal_membership.getAuthenticatedMember()\n+        self.assertNotIn(\n+            \'Manager\',\n+            member.getRolesInContext(self.layer[\'portal\'])\n+        )\n+        self.browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n+        self.assertIn(\'Insufficient Privileges\', self.browser.contents)\ndiff --git a/Products/CMFPlone/tests/test_login_views.py b/Products/CMFPlone/tests/test_login_views.py\nnew file mode 100644\nindex 000000000..d620f47b7\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_login_views.py\n@@ -0,0 +1,24 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.component import getMultiAdapter\n+\n+import unittest\n+\n+\n+class TestViews(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def test_resetpassword_view(self):\n+        view = getMultiAdapter((self.portal, self.request),\n+                               name=\'initial-login-password-change\')\n+        self.assertTrue(view())\n+\n+    def test_loggedout_view(self):\n+        view = getMultiAdapter((self.portal, self.request),\n+                               name=\'logged-out\')\n+        self.assertTrue(view())\ndiff --git a/Products/CMFPlone/tests/test_mails.py b/Products/CMFPlone/tests/test_mails.py\nindex 9ea44710c..e27ac1232 100644\n--- a/Products/CMFPlone/tests/test_mails.py\n+++ b/Products/CMFPlone/tests/test_mails.py\n@@ -45,7 +45,7 @@ def test_suite():\n             package=\'Products.CMFPlone.tests\',\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\n         layered(doctest.DocFileSuite(\n-            \'emaillogin.txt\',\n+            \'emaillogin.rst\',\n             optionflags=OPTIONFLAGS,\n             package=\'Products.CMFPlone.tests\',\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\ndiff --git a/Products/CMFPlone/tests/test_passwordreset.py b/Products/CMFPlone/tests/test_passwordreset.py\nindex b32fde772..c8321218c 100644\n--- a/Products/CMFPlone/tests/test_passwordreset.py\n+++ b/Products/CMFPlone/tests/test_passwordreset.py\n@@ -19,7 +19,7 @@ def test_suite():\n     return unittest.TestSuite((\n         layered(\n             doctest.DocFileSuite(\n-                \'pwreset_browser.txt\',\n+                \'pwreset_browser.rst\',\n                 optionflags=OPTIONFLAGS,\n                 package=\'Products.CMFPlone.tests\',\n             ),\ndiff --git a/Products/CMFPlone/tests/test_redirect_after_login.py b/Products/CMFPlone/tests/test_redirect_after_login.py\nnew file mode 100644\nindex 000000000..1fd3c4a32\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_redirect_after_login.py\n@@ -0,0 +1,189 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.testing.z2 import Browser\n+from Products.CMFPlone.browser.login.login import LoginForm\n+from Products.CMFPlone.interfaces import IInitialLogin\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.publisher.interfaces import IRequest\n+\n+import unittest\n+\n+\n+@implementer(IRedirectAfterLogin)\n+class AfterLoginAdapter(object):\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, came_from=None, is_first_login=False):\n+        return \'http://nohost/plone/sitemap\'\n+\n+\n+@implementer(IInitialLogin)\n+class InitialLoginAdapter(object):\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self):\n+        self.context.foo = \'foo\'\n+\n+\n+class TestCameFromFiltering(unittest.TestCase):\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer[\'request\']\n+        self.portal = self.layer[\'portal\']\n+        self.form = LoginForm(self.portal, self.request)\n+\n+    def test_get_came_from_via_request(self):\n+        self.assertEqual(self.form.get_came_from(), None)\n+        url = \'https://nohost/plone/foo-bar\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), url)\n+\n+    def test_external_urls_are_ignored(self):\n+        url = \'https://example.com/maliciousness\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), None)\n+\n+    def test_login_templates_are_filtered(self):\n+        url = \'https://nohost/plone/logout\'\n+        self.request[\'came_from\'] = url\n+        self.assertEqual(self.form.get_came_from(), None)\n+\n+    def test_referer_is_fallback(self):\n+        url = \'https://nohost/plone/test\'\n+        self.request[\'came_from\'] = None\n+        self.request[\'HTTP_REFERER\'] = url\n+        self.assertEqual(self.form.get_came_from(), url)\n+\n+\n+class TestRedirectAfterLogin(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n+        self.portal = self.layer[\'portal\']\n+\n+    def test_redirect_to_portal_if_no_adapter_nor_came_from(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone\',\n+                         \'Successful login did not redirect to the homepage \'\n+                         \'when came_from was not defined.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_redirect_to_came_from_if_no_adapter_found(self):\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/contact-info\',\n+                         \'Successful login did not redirect to the came_from.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_redirect_to_adapter_result(self):\n+        # Register our redirect adapter\n+        from zope.component import getGlobalSiteManager\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(AfterLoginAdapter,\n+                            (Interface, IRequest))\n+\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        gsm.unregisterAdapter(AfterLoginAdapter,\n+                              (Interface, IRequest))\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/sitemap\',\n+                         \'Successful login did not use the adapter for \'\n+                         \'redirect.\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n+\n+    def test_initiallogin_adapter(self):\n+        # Register our redirect adapter\n+        from zope.component import getGlobalSiteManager\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(InitialLoginAdapter,\n+                            (Interface, IRequest))\n+\n+        self.browser.open(\'http://nohost/plone/login\')\n+        self.browser.getLink(\'Log in\').click()\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/login\')\n+\n+        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n+        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n+        self.browser.getControl(name=\'came_from\').value = \\\n+            \'http://nohost/plone/contact-info\'\n+\n+        self.browser.getControl(\'Log in\').click()\n+\n+        gsm.unregisterAdapter(InitialLoginAdapter,\n+                              (Interface, IRequest))\n+\n+        self.assertIn(\'You are now logged in.\', self.browser.contents)\n+        self.assertEqual(self.browser.url, \'http://nohost/plone/contact-info\')\n+        self.assertEqual(self.portal.foo, \'foo\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n'

