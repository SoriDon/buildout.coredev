Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T19:05:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/e7e101a7d7151d89cec8397c286785ccc7cf6b97

isort

Files changed:
M bootstrap.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M setup.cfg

b'diff --git a/bootstrap.py b/bootstrap.py\nindex 1f59b21..b62354a 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,12 +18,13 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n __version__ = \'2015-07-01\'\n # See zc.buildout\'s changelog if this version is up to date.\n@@ -96,6 +97,7 @@\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n     if hasattr(site, \'getsitepackages\'):\n@@ -115,8 +117,9 @@\n     setup_args[\'to_dir\'] = options.setuptools_to_dir\n \n ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -188,6 +191,8 @@ def _final_version(parsed_version):\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd) != 0:\n     raise Exception(\n         "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n@@ -199,6 +204,7 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n+\n if not [a for a in args if \'=\' not in a]:\n     args.append(\'bootstrap\')\n \ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex d3d2bb6..738f780 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -1,10 +1,12 @@\n-import logging\n-\n from bs4 import BeautifulSoup\n+from plone.namedfile.picture import get_picture_variants\n+from plone.namedfile.picture import Img2PictureTag\n from plone.outputfilters.interfaces import IFilter\n from Products.CMFPlone.utils import safe_nativestring\n from zope.interface import implementer\n-from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n+\n+import logging\n+\n \n logger = logging.getLogger("plone.outputfilter.picture_variants")\n \ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 014cd14..55c1ec1 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -4,8 +4,8 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n-from DocumentTemplate.html_quote import html_quote\n from DocumentTemplate.DT_Var import newline_to_br\n+from DocumentTemplate.html_quote import html_quote\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py\nindex 1582428..eaa6756 100644\n--- a/plone/outputfilters/setuphandlers.py\n+++ b/plone/outputfilters/setuphandlers.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.outputfilters.mimetype import text_plone_outputfilters_html\n-from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html\n-from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html\n+from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+    html_to_plone_outputfilters_html,\n+)\n+from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+    plone_outputfilters_html_to_html,\n+)\n from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool\n from Products.PortalTransforms.interfaces import IPortalTransformsTool\n from zope.component import getUtility\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex 05b945b..4444664 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -4,7 +4,9 @@\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    IImageCaptioningEnabler,\n+)\n from zope.interface import implementer\n \n import zope.component\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex df7327e..cba5c9e 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -7,6 +7,7 @@\n import six\n import unittest\n \n+\n optionflags = (\n     doctest.ELLIPSIS |\n     doctest.NORMALIZE_WHITESPACE |\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex b250951..31f41e2 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -11,7 +11,9 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n-from plone.outputfilters.filters.resolveuid_and_caption import ResolveUIDAndCaptionFilter  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    ResolveUIDAndCaptionFilter,\n+)\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n@@ -314,8 +316,8 @@ def test_uuidToObject(self):\n                         is uuidToObject(self.UID).aq_base)\n \n     def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n+        from plone.outputfilters.browser.resolveuid import uuidToURL\n         self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n         page = self.portal[\'page\']\n         self.logout()\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex 8bdfe77..696663e 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -14,19 +14,21 @@ def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        from zope.component import getUtility\n         from Products.PortalTransforms.interfaces import IPortalTransformsTool\n+        from zope.component import getUtility\n         self.transforms = getUtility(IPortalTransformsTool)\n \n     def test_instantiate_html_to_plone_outputfilters_html_transform(self):\n-        from plone.outputfilters.transforms.html_to_plone_outputfilters_html \\\n-            import html_to_plone_outputfilters_html\n+        from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+            html_to_plone_outputfilters_html,\n+        )\n         transform = html_to_plone_outputfilters_html(name=\'transform\')\n         self.assertEqual(\'transform\', transform.name())\n \n     def test_instantiate_plone_outputfilters_html_to_html_transform(self):\n-        from plone.outputfilters.transforms.plone_outputfilters_html_to_html \\\n-            import plone_outputfilters_html_to_html\n+        from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+            plone_outputfilters_html_to_html,\n+        )\n         transform = plone_outputfilters_html_to_html(name=\'transform\')\n         self.assertEqual(\'transform\', transform.name())\n \n@@ -39,8 +41,7 @@ def test_transform_policy_installed(self):\n         self.assertEqual(1, len(policies))\n \n     def test_uninstallation(self):\n-        from plone.outputfilters.setuphandlers import \\\n-            uninstall_mimetype_and_transforms\n+        from plone.outputfilters.setuphandlers import uninstall_mimetype_and_transforms\n         uninstall_mimetype_and_transforms(self.portal)\n \n         policies = self.transforms.listPolicies()\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..3e076fd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 0\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T19:05:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/894ee62c7a1ed4f2661405ac9ef542f96916f236

black

Files changed:
M bootstrap.py
M plone/__init__.py
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex b62354a..85111f9 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -26,12 +26,12 @@\n import tempfile\n \n \n-__version__ = \'2015-07-01\'\n+__version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n \n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n+tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -41,36 +41,50 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --buildout-version, "\n-                        "the bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n+parser.add_option(\n+    "--version",\n+    action="store_true",\n+    default=False,\n+    help=("Return bootstrap.py version."),\n+)\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --buildout-version, "\n+        "the bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n+parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n+parser.add_option(\n+    "--setuptools-to-dir",\n+    help=("Allow for re-use of existing directory of " "setuptools versions"),\n+)\n \n options, args = parser.parse_args()\n if options.version:\n@@ -87,10 +101,10 @@\n     from urllib2 import urlopen\n \n ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n+if os.path.exists("ez_setup.py"):\n+    exec(open("ez_setup.py").read(), ez)\n else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n@@ -100,23 +114,22 @@\n \n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             # Strip all site-packages directories from sys.path that\n             # are not sys.prefix; this is because on Windows\n             # sys.prefix is a site-package directory.\n             if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n+                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n+    setup_args["to_dir"] = options.setuptools_to_dir\n \n-ez[\'use_setuptools\'](**setup_args)\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n import setuptools\n \n@@ -132,30 +145,37 @@\n \n ws = pkg_resources.working_set\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n # Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n+    + "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.buildout_version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -163,12 +183,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -187,15 +206,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n \n \n if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -205,12 +223,12 @@ def _final_version(parsed_version):\n import zc.buildout.buildout\n \n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py\nindex 2e08478..8f286f2 100644\n--- a/plone/outputfilters/browser/captioned_image.py\n+++ b/plone/outputfilters/browser/captioned_image.py\n@@ -4,8 +4,7 @@\n \n \n class CaptionedImageView(BrowserView):\n-    """Captioned image template.\n-    """\n+    """Captioned image template."""\n \n     @lazy_property\n     def template(self):\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 7883fd1..8ef9eb8 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -16,9 +16,8 @@\n \n @deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n def uuidToURL(uuid):\n-    """Resolves a UUID to a URL via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to a URL via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0].getURL()\n@@ -29,9 +28,8 @@ def uuidToURL(uuid):\n     "But be aware that this does an extra security check."\n )\n def uuidToObject(uuid):\n-    """Resolves a UUID to an object via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to an object via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0]._unrestrictedGetObject()\n@@ -40,31 +38,33 @@ def uuidToObject(uuid):\n try:\n     from plone.uuid.interfaces import IUUID\n except ImportError:\n+\n     def uuidFor(obj):\n         return obj.UID()\n+\n else:\n+\n     def uuidFor(obj):\n         uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), \'UID\'):\n+        if uuid is None and hasattr(aq_base(obj), "UID"):\n             uuid = obj.UID()\n         return uuid\n \n \n @implementer(IPublishTraverse)\n class ResolveUIDView(BrowserView):\n-    """Resolve a URL like /resolveuid/<uuid> to a normalized URL.\n-    """\n+    """Resolve a URL like /resolveuid/<uuid> to a normalized URL."""\n \n     subpath = None\n \n     def publishTraverse(self, request, name):\n         self.uuid = name\n-        traverse_subpath = self.request[\'TraversalRequestNameStack\']\n+        traverse_subpath = self.request["TraversalRequestNameStack"]\n         if traverse_subpath:\n             traverse_subpath = list(traverse_subpath)\n             traverse_subpath.reverse()\n             self.subpath = traverse_subpath\n-            self.request[\'TraversalRequestNameStack\'] = []\n+            self.request["TraversalRequestNameStack"] = []\n         return self\n \n     def __call__(self):\n@@ -74,11 +74,11 @@ def __call__(self):\n             raise NotFound("The link you followed is broken")\n \n         if self.subpath:\n-            url = \'/\'.join([url] + self.subpath)\n+            url = "/".join([url] + self.subpath)\n \n         if self.request.QUERY_STRING:\n-            url += \'?\' + self.request.QUERY_STRING\n+            url += "?" + self.request.QUERY_STRING\n \n         self.request.response.redirect(url, status=301)\n \n-        return \'\'\n+        return ""\ndiff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py\nindex 9a79ff0..9dcb1a1 100644\n--- a/plone/outputfilters/filters/example.py\n+++ b/plone/outputfilters/filters/example.py\n@@ -15,7 +15,7 @@ def __init__(self, context, request):\n     def is_enabled(self):\n         return True\n \n-    pattern = re.compile(r\'--\')\n+    pattern = re.compile(r"--")\n \n     def __call__(self, data):\n-        return self.pattern.sub(u\'\xe2\x80\x94\', data)\n+        return self.pattern.sub("\xe2\x80\x94", data)\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 738f780..45566a1 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -13,8 +13,7 @@\n \n @implementer(IFilter)\n class PictureVariantsFilter(object):\n-    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions.\n-    """\n+    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions."""\n \n     order = 700\n \n@@ -30,7 +29,6 @@ def __init__(self, context=None, request=None):\n         self.request = request\n         self.img2picturetag = Img2PictureTag()\n \n-\n     def __call__(self, data):\n         soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n \n@@ -49,5 +47,7 @@ def __call__(self, data):\n             sourceset = picture_variants_config.get("sourceset")\n             if not sourceset:\n                 continue\n-            elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\n+            elem.replace_with(\n+                self.img2picturetag.create_picture_tag(sourceset, elem.attrs)\n+            )\n         return soup.prettify()\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 55c1ec1..857a8d4 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -30,26 +30,25 @@\n import six\n \n \n-appendix_re = re.compile(\'^(.*)([?#].*)$\')\n-resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n+appendix_re = re.compile("^(.*)([?#].*)$")\n+resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n \n class IImageCaptioningEnabler(Interface):\n     available = Attribute(\n-        "Boolean indicating whether image captioning should be performed.")\n+        "Boolean indicating whether image captioning should be performed."\n+    )\n \n \n class IResolveUidsEnabler(Interface):\n-    available = Attribute(\n-        "Boolean indicating whether UID links should be resolved.")\n+    available = Attribute("Boolean indicating whether UID links should be resolved.")\n \n \n @implementer(IImageCaptioningEnabler)\n class ImageCaptioningEnabler(object):\n-\n     @property\n     def available(self):\n-        name = \'plone.image_captioning\'\n+        name = "plone.image_captioning"\n         registry = getUtility(IRegistry)\n         if name in registry:\n             return registry[name]\n@@ -62,18 +61,37 @@ class ResolveUidsAlwaysEnabled(object):\n \n \n def tag(img, **attributes):\n-    if hasattr(aq_base(img), \'tag\'):\n+    if hasattr(aq_base(img), "tag"):\n         return img.tag(**attributes)\n \n \n @implementer(IFilter)\n class ResolveUIDAndCaptionFilter(object):\n-    """ Parser to convert UUID links and captioned images """\n-\n-    singleton_tags = set([\n-        \'area\', \'base\', \'basefont\', \'br\', \'col\', \'command\', \'embed\', \'frame\',\n-        \'hr\', \'img\', \'input\', \'isindex\', \'keygen\', \'link\', \'meta\', \'param\',\n-        \'source\', \'track\', \'wbr\'])\n+    """Parser to convert UUID links and captioned images"""\n+\n+    singleton_tags = set(\n+        [\n+            "area",\n+            "base",\n+            "basefont",\n+            "br",\n+            "col",\n+            "command",\n+            "embed",\n+            "frame",\n+            "hr",\n+            "img",\n+            "input",\n+            "isindex",\n+            "keygen",\n+            "link",\n+            "meta",\n+            "param",\n+            "source",\n+            "track",\n+            "wbr",\n+        ]\n+    )\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -85,8 +103,7 @@ def __init__(self, context=None, request=None):\n \n     @lazy_property\n     def captioned_image_template(self):\n-        return self.context.restrictedTraverse(\n-            \'plone.outputfilters_captioned_image\')\n+        return self.context.restrictedTraverse("plone.outputfilters_captioned_image")\n \n     @lazy_property\n     def captioned_images(self):\n@@ -111,79 +128,85 @@ def is_enabled(self):\n     def _shorttag_replace(self, match):\n         tag = match.group(1)\n         if tag in self.singleton_tags:\n-            return \'<\' + tag + \' />\'\n+            return "<" + tag + " />"\n         else:\n-            return \'<\' + tag + \'></\' + tag + \'>\'\n+            return "<" + tag + "></" + tag + ">"\n \n     def _render_resolveuid(self, href):\n         url_parts = urlsplit(href)\n         scheme = url_parts[0]\n-        path_parts = urlunsplit([\'\', \'\'] + list(url_parts[2:]))\n+        path_parts = urlunsplit(["", ""] + list(url_parts[2:]))\n         obj, subpath, appendix = self.resolve_link(path_parts)\n         if obj is not None:\n             href = obj.absolute_url()\n             if subpath:\n-                href += \'/\' + subpath\n+                href += "/" + subpath\n             href += appendix\n-        elif resolveuid_re.match(href) is None \\\n-                and not scheme \\\n-                and not href.startswith(\'/\'):\n+        elif (\n+            resolveuid_re.match(href) is None\n+            and not scheme\n+            and not href.startswith("/")\n+        ):\n             # absolutize relative URIs; this text isn\'t necessarily\n             # being rendered in the context where it was stored\n             relative_root = self.context\n-            if not getattr(self.context, \'isPrincipiaFolderish\', False):\n+            if not getattr(self.context, "isPrincipiaFolderish", False):\n                 relative_root = aq_parent(self.context)\n             actual_url = relative_root.absolute_url()\n-            href = urljoin(actual_url + \'/\', subpath) + appendix\n+            href = urljoin(actual_url + "/", subpath) + appendix\n         return href\n \n     def __call__(self, data):\n-        data = re.sub(r\'<([^<>\\s]+?)\\s*/>\', self._shorttag_replace, data)\n-        soup = BeautifulSoup(safe_unicode(data), \'html.parser\')\n-        for elem in soup.find_all([\'a\', \'area\']):\n+        data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n+        soup = BeautifulSoup(safe_unicode(data), "html.parser")\n+        for elem in soup.find_all(["a", "area"]):\n             attributes = elem.attrs\n-            href = attributes.get(\'href\')\n+            href = attributes.get("href")\n             # an \'a\' anchor element has no href\n             if not href:\n                 continue\n-            if not href.startswith(\'mailto<\') \\\n-                    and not href.startswith(\'mailto:\') \\\n-                    and not href.startswith(\'tel:\') \\\n-                    and not href.startswith(\'#\'):\n-                attributes[\'href\'] = self._render_resolveuid(href)\n-        for elem in soup.find_all([\'source\', \'img\']):\n+            if (\n+                not href.startswith("mailto<")\n+                and not href.startswith("mailto:")\n+                and not href.startswith("tel:")\n+                and not href.startswith("#")\n+            ):\n+                attributes["href"] = self._render_resolveuid(href)\n+        for elem in soup.find_all(["source", "img"]):\n             # handles srcset attributes, not src\n             # parent of SOURCE is picture here.\n             # SRCSET on source/img specifies one or more images (see below).\n             attributes = elem.attrs\n-            srcset = attributes.get(\'srcset\')\n+            srcset = attributes.get("srcset")\n             if not srcset:\n                 continue\n             # https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\n             # [(src1, 480w), (src2, 360w)]\n-            srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n+            srcs = [\n+                src.strip().split() for src in srcset.strip().split(",") if src.strip()\n+            ]\n             for idx, elm in enumerate(srcs):\n                 image_url = elm[0]\n                 image, fullimage, src, description = self.resolve_image(image_url)\n                 srcs[idx][0] = src\n-            attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n-        for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n+            attributes["srcset"] = ",".join(" ".join(src) for src in srcs)\n+        for elem in soup.find_all(["source", "iframe", "audio", "video"]):\n             # parent of SOURCE is video or audio here.\n             # AUDIO/VIDEO can also have src attribute.\n             # IFRAME is used to embed PDFs.\n             attributes = elem.attrs\n-            src = attributes.get(\'src\')\n+            src = attributes.get("src")\n             if not src:\n                 continue\n-            attributes[\'src\'] = self._render_resolveuid(src)\n-        for elem in soup.find_all([\'img\', \'picture\']):\n+            attributes["src"] = self._render_resolveuid(src)\n+        for elem in soup.find_all(["img", "picture"]):\n             if elem.name == "picture":\n                 img_elem = elem.find("img")\n             else:\n                 img_elem = elem\n             # handle src attribute\n             attributes = img_elem.attrs\n-            src = attributes.get(\'src\', \'\')\n+            src = attributes.get("src", "")\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n             if image and hasattr(image, "width"):\n@@ -193,36 +216,37 @@ def __call__(self, data):\n                     attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n-                if not attributes.get(\'alt\'):\n+                title = safe_unicode(aq_acquire(fullimage, "Title")())\n+                if not attributes.get("alt"):\n                     # bettr an emty alt tag than none. This avoid\'s screen readers\n                     # to read the file name instead. A better fallback would be\n                     # a fallback alt text comming from the img object.\n-                    attributes[\'alt\'] = ""\n-                if \'title\' not in attributes:\n-                    attributes[\'title\'] = title\n+                    attributes["alt"] = ""\n+                if "title" not in attributes:\n+                    attributes["title"] = title\n \n             # handle captions\n-            if \'captioned\' in elem.attrs.get(\'class\', []):\n+            if "captioned" in elem.attrs.get("class", []):\n                 caption = description\n                 caption_manual_override = attributes.get("data-captiontext", "")\n                 if caption_manual_override:\n                     caption = caption_manual_override\n                 # Check if the image needs to be captioned\n-                if (self.captioned_images and caption):\n+                if self.captioned_images and caption:\n                     options = {}\n                     options["tag"] = elem.prettify()\n                     options["caption"] = newline_to_br(html_quote(caption))\n-                    options["class"] = \' \'.join(attributes[\'class\'])\n-                    del attributes[\'class\']\n+                    options["class"] = " ".join(attributes["class"])\n+                    del attributes["class"]\n                     if elem.name == "picture":\n                         elem.append(img_elem)\n                     captioned = BeautifulSoup(\n-                        self.captioned_image_template(**options), \'html.parser\')\n+                        self.captioned_image_template(**options), "html.parser"\n+                    )\n \n                     # if we are a captioned image within a link, remove and occurrences\n                     # of a tags inside caption template to preserve the outer link\n-                    if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+                    if bool(elem.find_parent("a")) and bool(captioned.find("a")):\n                         captioned.a.unwrap()\n                     if elem.name == "picture":\n                         del captioned.picture.img["class"]\n@@ -232,19 +256,18 @@ def __call__(self, data):\n         return six.text_type(soup)\n \n     def resolve_scale_data(self, url):\n-        """ return scale url, width and height\n-        """\n+        """return scale url, width and height"""\n         url_parts = url.split("/")\n         field_name = url_parts[-2]\n         scale_name = url_parts[-1]\n         obj, subpath, appendix = self.resolve_link(url)\n-        scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+        scale_view = obj.unrestrictedTraverse("@@images", None)\n         return scale_view.scale(field_name, scale_name, pre=True)\n \n     def resolve_link(self, href):\n         obj = None\n         subpath = href\n-        appendix = \'\'\n+        appendix = ""\n \n         # preserve querystring and/or appendix\n         match = appendix_re.match(href)\n@@ -262,26 +285,26 @@ def resolve_link(self, href):\n         return obj, subpath, appendix\n \n     def resolve_image(self, src):\n-        description = \'\'\n+        description = ""\n         if urlsplit(src)[0]:\n             # We have a scheme\n             return None, None, src, description\n         base = self.context\n         subpath = src\n-        appendix = \'\'\n+        appendix = ""\n \n         def traversal_stack(base, path):\n-            if path.startswith(\'/\'):\n+            if path.startswith("/"):\n                 base = getSite()\n                 path = path[1:]\n             obj = base\n             stack = [obj]\n-            components = path.split(\'/\')\n+            components = path.split("/")\n             # print("components: {}".format(components))\n             while components:\n                 child_id = unquote(components.pop(0))\n                 try:\n-                    if hasattr(aq_base(obj), \'scale\'):\n+                    if hasattr(aq_base(obj), "scale"):\n                         if components:\n                             child = obj.scale(child_id, components.pop(), pre=True)\n                         else:\n@@ -318,13 +341,13 @@ def traverse_path(base, path):\n                 image = traverse_path(fullimage, "@@images/image")\n             if image is None:\n                 image = traverse_path(fullimage, subpath)\n-        elif \'/@@\' in subpath:\n+        elif "/@@" in subpath:\n             # split on view\n-            pos = subpath.find(\'/@@\')\n+            pos = subpath.find("/@@")\n             fullimage = traverse_path(base, subpath[:pos])\n             if fullimage is None:\n                 return None, None, src, description\n-            image = traverse_path(fullimage, subpath[pos + 1:])\n+            image = traverse_path(fullimage, subpath[pos + 1 :])\n         else:\n             stack = traversal_stack(base, subpath)\n             if stack is None:\n@@ -335,7 +358,7 @@ def traverse_path(base, path):\n             if not IContentish.providedBy(fullimage):\n                 stack.reverse()\n                 for parent in stack:\n-                    if hasattr(aq_base(parent), \'tag\'):\n+                    if hasattr(aq_base(parent), "tag"):\n                         fullimage = parent\n                         break\n             if not hasattr(image, "width"):\n@@ -350,5 +373,5 @@ def traverse_path(base, path):\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n+        description = safe_unicode(aq_acquire(fullimage, "Description")())\n         return image, fullimage, src, description\ndiff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py\nindex 2b109bc..6fbda54 100644\n--- a/plone/outputfilters/interfaces.py\n+++ b/plone/outputfilters/interfaces.py\n@@ -12,7 +12,7 @@ class IFilter(Interface):\n     To control the order of filters, use the \'order\' attribute. It may be\n     positive or negative."""\n \n-    order = schema.Int(title=u"Order")\n+    order = schema.Int(title="Order")\n \n     def is_enabled():\n         """Returns a boolean indicating whether the filter should be\ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex 8298444..3f715d5 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -5,5 +5,5 @@\n class text_plone_outputfilters_html(MimeTypeItem):\n \n     __name__ = "Plone Output Filters HTML"\n-    mimetypes = (\'text/x-plone-outputfilters-html\',)\n+    mimetypes = ("text/x-plone-outputfilters-html",)\n     binary = 0\ndiff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py\nindex eaa6756..c8e8b16 100644\n--- a/plone/outputfilters/setuphandlers.py\n+++ b/plone/outputfilters/setuphandlers.py\n@@ -43,33 +43,36 @@ def register_transform_policy(context, output_mimetype, required_transform):\n \n def unregister_transform_policy(context, output_mimetype):\n     transform_tool = getUtility(IPortalTransformsTool)\n-    policies = [mimetype for (mimetype, required)\n-                in transform_tool.listPolicies()\n-                if mimetype == output_mimetype]\n+    policies = [\n+        mimetype\n+        for (mimetype, required) in transform_tool.listPolicies()\n+        if mimetype == output_mimetype\n+    ]\n     if policies:\n         # There is a policy, remove it!\n         transform_tool.manage_delPolicies([output_mimetype])\n \n \n def install_mimetype_and_transforms(context):\n-    """ register mimetype and transformations for captioned images """\n+    """register mimetype and transformations for captioned images"""\n     register_mimetype(context, text_plone_outputfilters_html)\n     register_transform(context, plone_outputfilters_html_to_html)\n     register_transform(context, html_to_plone_outputfilters_html)\n-    register_transform_policy(context, "text/x-html-safe",\n-                              "html_to_plone_outputfilters_html")\n+    register_transform_policy(\n+        context, "text/x-html-safe", "html_to_plone_outputfilters_html"\n+    )\n \n \n def uninstall_mimetype_and_transforms(context):\n-    """ unregister mimetype and transformations for captioned images """\n+    """unregister mimetype and transformations for captioned images"""\n     unregister_transform(context, "plone_outputfilters_html_to_html")\n     unregister_transform(context, "html_to_plone_outputfilters_html")\n-    unregister_mimetype(context, \'text/x-plone-outputfilters-html\')\n+    unregister_mimetype(context, "text/x-plone-outputfilters-html")\n     unregister_transform_policy(context, "text/x-html-safe")\n \n \n def importVarious(context):\n-    if context.readDataFile(\'plone.outputfilters.txt\') is None:\n+    if context.readDataFile("plone.outputfilters.txt") is None:\n         return\n     site = context.getSite()\n     install_mimetype_and_transforms(site)\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex 4444664..ef44fbb 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -24,30 +24,28 @@ class PloneOutputfilters(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.outputfilters\n+\n         self.loadZCML(package=plone.outputfilters)\n         gsm = zope.component.getGlobalSiteManager()\n         gsm.registerUtility(\n             DummyImageCaptioningEnabler(),\n             IImageCaptioningEnabler,\n-            \'outputfiltertest\',\n-            event=False\n+            "outputfiltertest",\n+            event=False,\n         )\n \n     def tearDownZope(self, app):\n         gsm = zope.component.getGlobalSiteManager()\n-        gsm.unregisterUtility(\n-            provided=IImageCaptioningEnabler,\n-            name=\'outputfiltertest\'\n-        )\n+        gsm.unregisterUtility(provided=IImageCaptioningEnabler, name="outputfiltertest")\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.outputfilters:default\')\n+        applyProfile(portal, "plone.outputfilters:default")\n \n \n PLONE_OUTPUTFILTERS_FIXTURE = PloneOutputfilters()\n PLONE_OUTPUTFILTERS_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Integration")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Integration"\n+)\n PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Functional")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Functional"\n+)\ndiff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py\nindex f6800a7..150f84c 100644\n--- a/plone/outputfilters/tests/test_apply_filters.py\n+++ b/plone/outputfilters/tests/test_apply_filters.py\n@@ -18,14 +18,13 @@ def __call__(self, data):\n \n \n class FilterTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         DummyFilter.called = []\n \n     def test_apply_filters(self):\n         filters = [DummyFilter()]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[0]], DummyFilter.called)\n \n     def test_apply_filters_ordering(self):\n@@ -34,7 +33,7 @@ def test_apply_filters_ordering(self):\n         filter2.order = 100\n         filters = [filter1, filter2]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[1], filters[0]], DummyFilter.called)\n \n     def test_apply_filters_checks_is_enabled(self):\n@@ -42,18 +41,18 @@ def test_apply_filters_checks_is_enabled(self):\n         filter.is_enabled = lambda: False\n         filters = [filter]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([], DummyFilter.called)\n \n     def test_apply_filters_handles_return_none(self):\n         class DummyFilterReturningNone(DummyFilter):\n-\n             def __call__(self, data):\n                 return None\n+\n         filter = DummyFilterReturningNone()\n \n-        res = apply_filters([filter], \'\')\n-        self.assertEqual(\'\', res)\n+        res = apply_filters([filter], "")\n+        self.assertEqual("", res)\n \n \n def test_suite():\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex cba5c9e..71dc87c 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -9,29 +9,32 @@\n \n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n if six.PY3:\n-    normal_testfiles = [\n-        \'../README.rst\'\n-    ]\n+    normal_testfiles = ["../README.rst"]\n else:\n     normal_testfiles = [\n-        \'./README_py2.rst\',\n+        "./README_py2.rst",\n     ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            },\n-                                     ),\n-                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 2307eef..f4e5035 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -20,9 +20,9 @@\n \n \n def dummy_image():\n-    filename = join(PREFIX, u\'image.jpg\')\n+    filename = join(PREFIX, "image.jpg")\n     data = None\n-    with open(filename, \'rb\') as fd:\n+    with open(filename, "rb") as fd:\n         data = fd.read()\n         fd.close()\n     return NamedBlobImage(data=data, filename=filename)\n@@ -32,7 +32,7 @@ class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n-    image_id = \'image.jpg\'\n+    image_id = "image.jpg"\n \n     def _makeParser(self, **kw):\n         parser = PictureVariantsFilter(context=self.portal)\n@@ -44,32 +44,31 @@ def _makeDummyContent(self):\n         from OFS.SimpleItem import SimpleItem\n \n         class DummyContent(SimpleItem):\n-\n             def __init__(self, id):\n                 self.id = id\n \n             def UID(self):\n-                return \'foo\'\n+                return "foo"\n \n-            allowedRolesAndUsers = (\'Anonymous\',)\n+            allowedRolesAndUsers = ("Anonymous",)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = \'foo2\'\n-            title = u\'Sch\xc3\xb6nes Bild\'\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n \n             def UID(self):\n-                return \'foo2\'\n+                return "foo2"\n \n-        dummy = DummyContent(\'foo\')\n-        self.portal._setObject(\'foo\', dummy)\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n         self.portal.portal_catalog.catalog_object(self.portal.foo)\n \n-        dummy2 = DummyContent2(\'foo2\')\n-        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n             data = fd.read()\n             fd.close()\n-        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n-        self.portal._setObject(\'foo2\', dummy2)\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n     def _assertTransformsTo(self, input, expected):\n@@ -81,35 +80,35 @@ def _assertTransformsTo(self, input, expected):\n         # print("\\n e: {}".format(expected))\n         # print("\\n o: {}".format(out))\n         try:\n-            self.assertTrue(_ellipsis_match(normalized_expected,\n-                                            normalized_out))\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n+\n             class wrapper(object):\n                 want = expected\n-            raise AssertionError(self.outputchecker.output_difference(\n-                wrapper, out, REPORT_NDIFF))\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n \n     def afterSetUp(self):\n         # create an image and record its UID\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         if self.image_id not in self.portal:\n-            self.portal.invokeFactory(\n-                \'Image\', id=self.image_id, title=\'Image\')\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n         image = self.portal[self.image_id]\n-        image.setDescription(\'My caption\')\n+        image.setDescription("My caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.UID = image.UID()\n-        self.parser = self._makeParser(captioned_images=True,\n-                                       resolve_uids=True)\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n         assert self.parser.is_enabled()\n \n         self.outputchecker = OutputChecker()\n \n     def beforeTearDown(self):\n         self.login()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n@@ -159,11 +158,14 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         import time\n+\n         startTime = time.time()\n         res = self.parser(text)\n-        executionTime = (time.time() - startTime)\n+        executionTime = time.time() - startTime\n         print("\\n\\nimage srcset parsing time: {}\\n".format(executionTime))\n         self.assertTrue(res)\n \n@@ -232,17 +234,23 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         self._assertTransformsTo(text, text_out)\n \n     def test_parsing_with_nonexisting_srcset(self):\n         text = """\n <p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         res = self.parser(text)\n         self.assertTrue(res)\n         text_out = """\n <p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         # verify that tag was not converted:\n-        self.assertTrue("data-picturevariant" in res)\n\\ No newline at end of file\n+        self.assertTrue("data-picturevariant" in res)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 31f41e2..70cc306 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -22,9 +22,9 @@\n \n \n def dummy_image():\n-    filename = join(PREFIX, u\'image.jpg\')\n+    filename = join(PREFIX, "image.jpg")\n     data = None\n-    with open(filename, \'rb\') as fd:\n+    with open(filename, "rb") as fd:\n         data = fd.read()\n         fd.close()\n     return NamedBlobImage(data=data, filename=filename)\n@@ -34,7 +34,7 @@ class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n-    image_id = \'image.jpg\'\n+    image_id = "image.jpg"\n \n     def _makeParser(self, **kw):\n         parser = ResolveUIDAndCaptionFilter(context=self.portal)\n@@ -46,32 +46,31 @@ def _makeDummyContent(self):\n         from OFS.SimpleItem import SimpleItem\n \n         class DummyContent(SimpleItem):\n-\n             def __init__(self, id):\n                 self.id = id\n \n             def UID(self):\n-                return \'foo\'\n+                return "foo"\n \n-            allowedRolesAndUsers = (\'Anonymous\',)\n+            allowedRolesAndUsers = ("Anonymous",)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = \'foo2\'\n-            title = u\'Sch\xc3\xb6nes Bild\'\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n \n             def UID(self):\n-                return \'foo2\'\n+                return "foo2"\n \n-        dummy = DummyContent(\'foo\')\n-        self.portal._setObject(\'foo\', dummy)\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n         self.portal.portal_catalog.catalog_object(self.portal.foo)\n \n-        dummy2 = DummyContent2(\'foo2\')\n-        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n             data = fd.read()\n             fd.close()\n-        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n-        self.portal._setObject(\'foo2\', dummy2)\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n     def _assertTransformsTo(self, input, expected, parsing=True):\n@@ -86,39 +85,39 @@ def _assertTransformsTo(self, input, expected, parsing=True):\n         # print("e: {}".format(normalized_expected))\n         # print("o: {}".format(normalized_out))\n         try:\n-            self.assertTrue(_ellipsis_match(normalized_expected,\n-                                            normalized_out))\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n+\n             class wrapper(object):\n                 want = expected\n-            raise AssertionError(self.outputchecker.output_difference(\n-                wrapper, out, REPORT_NDIFF))\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n \n     def afterSetUp(self):\n         # create an image and record its UID\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         if self.image_id not in self.portal:\n-            self.portal.invokeFactory(\n-                \'Image\', id=self.image_id, title=\'Image\')\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n         image = self.portal[self.image_id]\n-        image.setDescription(\'My caption\')\n+        image.setDescription("My caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.UID = image.UID()\n-        self.parser = self._makeParser(captioned_images=True,\n-                                       resolve_uids=True)\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n         assert self.parser.is_enabled()\n \n         self.outputchecker = OutputChecker()\n \n     def beforeTearDown(self):\n         self.login()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n-        text = \'<div>Some simple text.</div>\'\n+        text = "<div>Some simple text.</div>"\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n@@ -179,11 +178,14 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         import time\n+\n         startTime = time.time()\n         res = self.parser(text)\n-        executionTime = (time.time() - startTime)\n+        executionTime = time.time() - startTime\n         print("\\n\\nresolve_uid_and_caption parsing time: {}\\n".format(executionTime))\n         self.assertTrue(res)\n \n@@ -213,7 +215,10 @@ def test_resolve_uids_in_links(self):\n     <a class="internal-link" href="resolveuid/%s">Some link</a>\n     <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>\n   </body>\n-</html>""" % (self.UID, self.UID)\n+</html>""" % (\n+            self.UID,\n+            self.UID,\n+        )\n         res = str(self.parser(text))\n         self.assertIn(\'href="http://nohost/plone/image.jpg"\', res)\n         self.assertIn(\'href="http://nohost/plone/image.jpg#named-anchor"\', res)\n@@ -253,15 +258,17 @@ def test_resolve_uids_non_AT_content(self):\n \n     def test_resolve_uids_fragment(self):\n         self._makeDummyContent()\n-        self.parser = self._makeParser(resolve_uids=True,\n-                                       context=self.portal.foo)\n+        self.parser = self._makeParser(resolve_uids=True, context=self.portal.foo)\n         text_in = """<a href="#a">anchor</a>"""\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolve_uids_in_image_maps(self):\n-        text_in = """<map id="the_map" name="the_map">\n+        text_in = (\n+            """<map id="the_map" name="the_map">\n <area alt="alpha" href="resolveuid/%s" coords="1,2,3,4" shape="rect" />\n-</map>""" % self.UID\n+</map>"""\n+            % self.UID\n+        )\n         text_out = """<map id="the_map" name="the_map">\n <area alt="alpha" coords="1,2,3,4" href="http://nohost/plone/image.jpg" shape="rect"/>\n </map>"""\n@@ -284,56 +291,59 @@ def test_resolve_uids_entities(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolveuid_view(self):\n-        res = self.publish(\'/plone/resolveuid/%s\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg", res.headers["location"])\n \n     def test_resolveuid_view_bad_uuid(self):\n-        res = self.publish(\'/plone/resolveuid/BOGUS\')\n+        res = self.publish("/plone/resolveuid/BOGUS")\n         self.assertEqual(404, res.status)\n \n     def test_resolveuid_view_subpath(self):\n-        res = self.publish(\'/plone/resolveuid/%s/image_thumb\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s/image_thumb" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg/image_thumb\',\n-                         res.headers[\'location\'])\n+        self.assertEqual(\n+            "http://nohost/plone/image.jpg/image_thumb", res.headers["location"]\n+        )\n \n     def test_resolveuid_view_querystring(self):\n-        res = self.publish(\'/plone/resolveuid/%s?qs\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s?qs" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg?qs\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg?qs", res.headers["location"])\n \n     def test_uuidToURL(self):\n         from plone.outputfilters.browser.resolveuid import uuidToURL\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         uuidToURL(self.UID))\n+\n+        self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n \n     def test_uuidToObject(self):\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.assertTrue(self.portal[\'image.jpg\'].aq_base\n-                        is uuidToObject(self.UID).aq_base)\n+\n+        self.assertTrue(\n+            self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n+        )\n \n     def test_uuidToURL_permission(self):\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n         from plone.outputfilters.browser.resolveuid import uuidToURL\n-        self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n-        page = self.portal[\'page\']\n+\n+        self.portal.invokeFactory("Document", id="page", title="Page")\n+        page = self.portal["page"]\n         self.logout()\n-        self.assertEqual(\'http://nohost/plone/page\',\n-                         uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base\n-                        is uuidToObject(page.UID()).aq_base)\n+        self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n+        self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n \n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n-        self.portal.invokeFactory(\'News Item\', id=\'a-news-item\', title=\'Title\')\n-        news_item = self.portal[\'a-news-item\']\n+        self.portal.invokeFactory("News Item", id="a-news-item", title="Title")\n+        news_item = self.portal["a-news-item"]\n         from plone.app.textfield.value import RichTextValue\n+\n         news_item.text = RichTextValue(\n             \'<span><img class="captioned" src="image.jpg"/></span>\',\n-            \'text/html\', \'text/html\')\n+            "text/html",\n+            "text/html",\n+        )\n         news_item.setDescription("Description.")\n         # Test captioning\n         output = news_item.text.output\n@@ -369,12 +379,10 @@ def test_image_captioning_relative_path_private_folder(self):\n         # Images in a private folder may or may not still be renderable, but\n         # traversal to them must not raise an error!\n         self.loginAsPortalOwner()\n-        self.portal.invokeFactory(\'Folder\', id=\'private\',\n-                                  title=\'Private Folder\')\n-        self.portal.private.invokeFactory(\'Image\', id=\'image.jpg\',\n-                                          title=\'Image\')\n-        image = getattr(self.portal.private, \'image.jpg\')\n-        image.setDescription(\'My private image caption\')\n+        self.portal.invokeFactory("Folder", id="private", title="Private Folder")\n+        self.portal.private.invokeFactory("Image", id="image.jpg", title="Image")\n+        image = getattr(self.portal.private, "image.jpg")\n+        image.setDescription("My private image caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.logout()\n@@ -403,7 +411,10 @@ def test_image_captioning_resolveuid_bare(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -411,7 +422,10 @@ def test_image_captioning_resolveuid_scale(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -420,12 +434,16 @@ def test_image_captioning_resolveuid_new_scale(self):\n \n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n-        text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = u"""<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n+        )\n+        text_out = """<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -433,7 +451,10 @@ def test_image_captioning_resolveuid_no_scale(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>"""\n+            % (self.UID, self.UID, self.UID)\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -458,7 +479,7 @@ def test_audio_resolveuid(self):\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = u"""<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n+        text_out = """<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n@@ -486,7 +507,10 @@ def test_image_captioning_preserves_custom_attributes(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n-        text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n+        text_in = (\n+            """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -503,11 +527,10 @@ def test_image_captioning_preserves_existing_links(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_non_ascii(self):\n-        self.portal[\'image.jpg\'].setTitle(u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n-        self.portal[\'image.jpg\'].setDescription(\n-            u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n+        self.portal["image.jpg"].setTitle("Kupu Test Image \\xe5\\xe4\\xf6")\n+        self.portal["image.jpg"].setDescription("Kupu Test Image \\xe5\\xe4\\xf6")\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n-        text_out = u"""<figure class="captioned">\n+        text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n <figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n </figure>"""\n@@ -519,8 +542,7 @@ def test_resolve_uids_with_bigU(self):\n         self.assertTrue(\'href="http://nohost/plone/image.jpg"\' in str(res))\n \n     def test_singleton_elements(self):\n-        self._assertTransformsTo(\n-            \'<hr/>\\r\\n<p>foo</p><br/>\', \'<hr/>\\r\\n<p>foo</p><br/>\')\n+        self._assertTransformsTo("<hr/>\\r\\n<p>foo</p><br/>", "<hr/>\\r\\n<p>foo</p><br/>")\n \n     def test_no_change_when_a_in_script(self):\n         text_in = """<script>a=\'<a href="">test</a>\';</script>"""\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex 696663e..80152e5 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -11,42 +11,48 @@ class TransformsTestCase(unittest.TestCase):\n     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         from Products.PortalTransforms.interfaces import IPortalTransformsTool\n         from zope.component import getUtility\n+\n         self.transforms = getUtility(IPortalTransformsTool)\n \n     def test_instantiate_html_to_plone_outputfilters_html_transform(self):\n         from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n             html_to_plone_outputfilters_html,\n         )\n-        transform = html_to_plone_outputfilters_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+\n+        transform = html_to_plone_outputfilters_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_instantiate_plone_outputfilters_html_to_html_transform(self):\n         from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n             plone_outputfilters_html_to_html,\n         )\n-        transform = plone_outputfilters_html_to_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+\n+        transform = plone_outputfilters_html_to_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_transform_policy_installed(self):\n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(1, len(policies))\n \n     def test_uninstallation(self):\n         from plone.outputfilters.setuphandlers import uninstall_mimetype_and_transforms\n+\n         uninstall_mimetype_and_transforms(self.portal)\n \n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(0, len(policies))\ndiff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\nindex 0cb3426..ba62050 100644\n--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n@@ -9,15 +9,15 @@\n \n @implementer(ITransform)\n class html_to_plone_outputfilters_html:\n-    """ transform which applies output filters"""\n+    """transform which applies output filters"""\n+\n     __name__ = "html_to_plone_outputfilters_html"\n-    inputs = (\'text/html\',)\n+    inputs = ("text/html",)\n     output = "text/x-plone-outputfilters-html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\'list\', \'Inputs\',\n-                       \'Input(s) MIME type. Change with care.\'),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\n@@ -26,8 +26,8 @@ def name(self):\n         return self.__name__\n \n     def convert(self, orig, data, **kwargs):\n-        context = kwargs.get(\'context\')\n-        request = getattr(getSite(), \'REQUEST\', None)\n+        context = kwargs.get("context")\n+        request = getattr(getSite(), "REQUEST", None)\n         filters = [f for _, f in getAdapters((context, request), IFilter)]\n \n         res = apply_filters(filters, orig)\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex b1a10e9..a92c2ea 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -7,16 +7,12 @@\n class plone_outputfilters_html_to_html(object):\n \n     __name__ = "plone_outputfilters_html_to_html"\n-    inputs = (\'text/x-plone-outputfilters-html\',)\n+    inputs = ("text/x-plone-outputfilters-html",)\n     output = "text/html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\n-                \'list\',\n-                \'Inputs\',\n-                \'Input(s) MIME type. Change with care.\'\n-            ),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\ndiff --git a/setup.py b/setup.py\nindex 36bdc30..1ba95f4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'5.0.0b2.dev0\'\n+version = "5.0.0b2.dev0"\n \n \n def read(filename):\n@@ -31,11 +31,10 @@ def read(filename):\n )\n \n setup(\n-    name=\'plone.outputfilters\',\n+    name="plone.outputfilters",\n     version=version,\n     description=(\n-        "Transformations applied to HTML in "\n-        "Plone text fields as they are rendered"\n+        "Transformations applied to HTML in " "Plone text fields as they are rendered"\n     ),\n     long_description=long_description,\n     # Get more strings from https://pypi.org/classifiers/\n@@ -51,35 +50,35 @@ def read(filename):\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone transform filter uid caption\',\n-    author=\'David Glick, Plone Foundation\',\n-    author_email=\'davidglick@groundwire.org\',\n-    url=\'http://github.com/plone/plone.outputfilters\',\n-    license=\'GPL\',\n+    keywords="plone transform filter uid caption",\n+    author="David Glick, Plone Foundation",\n+    author_email="davidglick@groundwire.org",\n+    url="http://github.com/plone/plone.outputfilters",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.MimetypesRegistry\',\n-        \'Products.PortalTransforms>=2.0\',\n-        \'plone.namedfile\',\n-        \'plone.app.uuid\',\n-        \'setuptools\',\n-        \'six\',\n-        \'unidecode\',\n-        \'zope.deprecation\',\n-        \'beautifulsoup4\',\n-        \'lxml\',\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.MimetypesRegistry",\n+        "Products.PortalTransforms>=2.0",\n+        "plone.namedfile",\n+        "plone.app.uuid",\n+        "setuptools",\n+        "six",\n+        "unidecode",\n+        "zope.deprecation",\n+        "beautifulsoup4",\n+        "lxml",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.app.robotframework\',\n-            \'plone.namedfile\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.app.robotframework",\n+            "plone.namedfile",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T19:09:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/2f9c1c52b6862e910de87d005ddb7577afc8005e

pyupgrade

Files changed:
M plone/__init__.py
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py\nindex 5dda827..aa75185 100644\n--- a/plone/outputfilters/__init__.py\n+++ b/plone/outputfilters/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n def apply_filters(filters, data):\n     by_order = lambda x: x.order\n     filters = sorted(filters, key=by_order)\ndiff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py\nindex 8f286f2..72c05c4 100644\n--- a/plone/outputfilters/browser/captioned_image.py\n+++ b/plone/outputfilters/browser/captioned_image.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from zope.cachedescriptors.property import Lazy as lazy_property\n \ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 8ef9eb8..8c1e05b 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\ndiff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py\nindex 9dcb1a1..db105ad 100644\n--- a/plone/outputfilters/filters/example.py\n+++ b/plone/outputfilters/filters/example.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.interfaces import IFilter\n from zope.interface import implementer\n \n@@ -6,7 +5,7 @@\n \n \n @implementer(IFilter)\n-class EmDashAdder(object):\n+class EmDashAdder:\n     order = 1000\n \n     def __init__(self, context, request):\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 45566a1..06784b0 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -12,7 +12,7 @@\n \n \n @implementer(IFilter)\n-class PictureVariantsFilter(object):\n+class PictureVariantsFilter:\n     """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions."""\n \n     order = 700\n@@ -39,7 +39,7 @@ def __call__(self, data):\n             picture_variants_config = get_picture_variants().get(picture_variant_name)\n             if not picture_variants_config:\n                 logger.warn(\n-                    "Could not find the given picture_variant_name {0}, leave tag untouched!".format(\n+                    "Could not find the given picture_variant_name {}, leave tag untouched!".format(\n                         picture_variant_name\n                     )\n                 )\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 857a8d4..fa96197 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -11,10 +10,10 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFPlone.utils import safe_unicode\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n-from six.moves.urllib.parse import urlunsplit\n+from urllib.parse import unquote\n+from urllib.parse import urljoin\n+from urllib.parse import urlsplit\n+from urllib.parse import urlunsplit\n from zExceptions import NotFound\n from ZODB.POSException import ConflictError\n from zope.cachedescriptors.property import Lazy as lazy_property\n@@ -45,7 +44,7 @@ class IResolveUidsEnabler(Interface):\n \n \n @implementer(IImageCaptioningEnabler)\n-class ImageCaptioningEnabler(object):\n+class ImageCaptioningEnabler:\n     @property\n     def available(self):\n         name = "plone.image_captioning"\n@@ -56,7 +55,7 @@ def available(self):\n \n \n @implementer(IResolveUidsEnabler)\n-class ResolveUidsAlwaysEnabled(object):\n+class ResolveUidsAlwaysEnabled:\n     available = True\n \n \n@@ -66,32 +65,30 @@ def tag(img, **attributes):\n \n \n @implementer(IFilter)\n-class ResolveUIDAndCaptionFilter(object):\n+class ResolveUIDAndCaptionFilter:\n     """Parser to convert UUID links and captioned images"""\n \n-    singleton_tags = set(\n-        [\n-            "area",\n-            "base",\n-            "basefont",\n-            "br",\n-            "col",\n-            "command",\n-            "embed",\n-            "frame",\n-            "hr",\n-            "img",\n-            "input",\n-            "isindex",\n-            "keygen",\n-            "link",\n-            "meta",\n-            "param",\n-            "source",\n-            "track",\n-            "wbr",\n-        ]\n-    )\n+    singleton_tags = {\n+        "area",\n+        "base",\n+        "basefont",\n+        "br",\n+        "col",\n+        "command",\n+        "embed",\n+        "frame",\n+        "hr",\n+        "img",\n+        "input",\n+        "isindex",\n+        "keygen",\n+        "link",\n+        "meta",\n+        "param",\n+        "source",\n+        "track",\n+        "wbr",\n+    }\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -253,7 +250,7 @@ def __call__(self, data):\n                     else:\n                         del captioned.img["class"]\n                     elem.replace_with(captioned)\n-        return six.text_type(soup)\n+        return str(soup)\n \n     def resolve_scale_data(self, url):\n         """return scale url, width and height"""\ndiff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py\nindex 6fbda54..69f50f9 100644\n--- a/plone/outputfilters/interfaces.py\n+++ b/plone/outputfilters/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex 3f715d5..e6d7de2 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n \n \ndiff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py\nindex c8e8b16..1d54c03 100644\n--- a/plone/outputfilters/setuphandlers.py\n+++ b/plone/outputfilters/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.mimetype import text_plone_outputfilters_html\n from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n     html_to_plone_outputfilters_html,\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex ef44fbb..d8bc86d 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n@@ -13,7 +12,7 @@\n \n \n @implementer(IImageCaptioningEnabler)\n-class DummyImageCaptioningEnabler(object):\n+class DummyImageCaptioningEnabler:\n \n     available = True\n \ndiff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py\nindex 150f84c..07ea2a0 100644\n--- a/plone/outputfilters/tests/test_apply_filters.py\n+++ b/plone/outputfilters/tests/test_apply_filters.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n \n import unittest\n \n \n-class DummyFilter(object):\n+class DummyFilter:\n     order = 500\n \n     def is_enabled(self):\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex 71dc87c..b5343b0 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -12,12 +11,7 @@\n     doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-if six.PY3:\n-    normal_testfiles = ["../README.rst"]\n-else:\n-    normal_testfiles = [\n-        "./README_py2.rst",\n-    ]\n+normal_testfiles = ["../README.rst"]\n \n \n def test_suite():\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex f4e5035..01515d9 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import _ellipsis_match\n from doctest import OutputChecker\n from doctest import REPORT_NDIFF\n@@ -83,7 +82,7 @@ def _assertTransformsTo(self, input, expected):\n             self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n \n-            class wrapper(object):\n+            class wrapper:\n                 want = expected\n \n             raise AssertionError(\n@@ -166,7 +165,7 @@ def test_parsing_long_doc(self):\n         startTime = time.time()\n         res = self.parser(text)\n         executionTime = time.time() - startTime\n-        print("\\n\\nimage srcset parsing time: {}\\n".format(executionTime))\n+        print(f"\\n\\nimage srcset parsing time: {executionTime}\\n")\n         self.assertTrue(res)\n \n         text_out = """<h1>Welcome!</h1>\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 70cc306..41b227f 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import _ellipsis_match\n from doctest import OutputChecker\n from doctest import REPORT_NDIFF\n@@ -88,7 +87,7 @@ def _assertTransformsTo(self, input, expected, parsing=True):\n             self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n \n-            class wrapper(object):\n+            class wrapper:\n                 want = expected\n \n             raise AssertionError(\n@@ -186,7 +185,7 @@ def test_parsing_long_doc(self):\n         startTime = time.time()\n         res = self.parser(text)\n         executionTime = time.time() - startTime\n-        print("\\n\\nresolve_uid_and_caption parsing time: {}\\n".format(executionTime))\n+        print(f"\\n\\nresolve_uid_and_caption parsing time: {executionTime}\\n")\n         self.assertTrue(res)\n \n     def test_parsing_preserves_newlines(self):\n@@ -212,10 +211,10 @@ def test_resolve_uids_in_links(self):\n         text = """<html>\n   <head></head>\n   <body>\n-    <a class="internal-link" href="resolveuid/%s">Some link</a>\n-    <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>\n+    <a class="internal-link" href="resolveuid/{}">Some link</a>\n+    <a class="internal-link" href="resolveuid/{}#named-anchor">Some anchored link</a>\n   </body>\n-</html>""" % (\n+</html>""".format(\n             self.UID,\n             self.UID,\n         )\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex 80152e5..e148af4 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\ndiff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\nindex ba62050..0936f6b 100644\n--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n from plone.outputfilters.interfaces import IFilter\n from Products.PortalTransforms.interfaces import ITransform\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex a92c2ea..22e98bd 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Products.PortalTransforms.interfaces import ITransform\n from zope.interface import implementer\n \n \n @implementer(ITransform)\n-class plone_outputfilters_html_to_html(object):\n+class plone_outputfilters_html_to_html:\n \n     __name__ = "plone_outputfilters_html_to_html"\n     inputs = ("text/x-plone-outputfilters-html",)\ndiff --git a/setup.py b/setup.py\nindex 1ba95f4..48fa90f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T19:15:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/b11063eb2d9cd34ebe2351c4a72b38c70f0b8681

remove six and use plone.base

Files changed:
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_docs.py
M setup.py

b'diff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 06784b0..552f684 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -1,8 +1,8 @@\n from bs4 import BeautifulSoup\n+from plone.base.utils import safe_text\n from plone.namedfile.picture import get_picture_variants\n from plone.namedfile.picture import Img2PictureTag\n from plone.outputfilters.interfaces import IFilter\n-from Products.CMFPlone.utils import safe_nativestring\n from zope.interface import implementer\n \n import logging\n@@ -18,10 +18,7 @@ class PictureVariantsFilter:\n     order = 700\n \n     def is_enabled(self):\n-        if self.context is None:\n-            return False\n-        else:\n-            return True\n+        return self.context is not None\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -30,7 +27,7 @@ def __init__(self, context=None, request=None):\n         self.img2picturetag = Img2PictureTag()\n \n     def __call__(self, data):\n-        soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n \n         for elem in soup.find_all("img"):\n             picture_variant_name = elem.attrs.get("data-picturevariant", "")\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex fa96197..4bf30af 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -9,7 +9,6 @@\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFPlone.utils import safe_unicode\n from urllib.parse import unquote\n from urllib.parse import urljoin\n from urllib.parse import urlsplit\n@@ -26,7 +25,6 @@\n from zope.publisher.interfaces import NotFound as ztkNotFound\n \n import re\n-import six\n \n \n appendix_re = re.compile("^(.*)([?#].*)$")\n@@ -155,7 +153,7 @@ def _render_resolveuid(self, href):\n \n     def __call__(self, data):\n         data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n-        soup = BeautifulSoup(safe_unicode(data), "html.parser")\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n         for elem in soup.find_all(["a", "area"]):\n             attributes = elem.attrs\n             href = attributes.get("href")\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex b5343b0..e8d6406 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -3,7 +3,6 @@\n \n import doctest\n import pprint\n-import six\n import unittest\n \n \ndiff --git a/setup.py b/setup.py\nindex 48fa90f..2e00618 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,7 +44,6 @@ def read(filename):\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n@@ -66,7 +65,6 @@ def read(filename):\n         "plone.namedfile",\n         "plone.app.uuid",\n         "setuptools",\n-        "six",\n         "unidecode",\n         "zope.deprecation",\n         "beautifulsoup4",\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T19:17:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/ffb4efb4ca670b78e742bb89b085f506baadff62

add changelog

Files changed:
A news/53.bgfix

b'diff --git a/news/53.bgfix b/news/53.bgfix\nnew file mode 100644\nindex 0000000..837334f\n--- /dev/null\n+++ b/news/53.bgfix\n@@ -0,0 +1,2 @@\n+isort, black, pyupgrade, manual six removal. \n+[jensens]\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T21:50:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/9ed5927292dbc07128e76783adae07887efbfc29

missing import added

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 4bf30af..fc2b411 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -5,6 +5,7 @@\n from bs4 import BeautifulSoup\n from DocumentTemplate.DT_Var import newline_to_br\n from DocumentTemplate.html_quote import html_quote\n+from plone.base.utils import safe_text\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n@@ -211,7 +212,7 @@ def __call__(self, data):\n                     attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = safe_unicode(aq_acquire(fullimage, "Title")())\n+                title = safe_text(aq_acquire(fullimage, "Title")())\n                 if not attributes.get("alt"):\n                     # bettr an emty alt tag than none. This avoid\'s screen readers\n                     # to read the file name instead. A better fallback would be\n@@ -368,5 +369,5 @@ def traverse_path(base, path):\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = safe_unicode(aq_acquire(fullimage, "Description")())\n+        description = safe_text(aq_acquire(fullimage, "Description")())\n         return image, fullimage, src, description\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-08-25T23:02:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/1725dd89aa9d904086379e6e7a7d1cf7368240a1

Merge pull request #53 from plone/jensens-py-codestyle

Codestyle, pyupgrade, no six

Files changed:
A news/53.bgfix
M bootstrap.py
M plone/__init__.py
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.cfg
M setup.py

b'diff --git a/bootstrap.py b/bootstrap.py\nindex 1f59b21..85111f9 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -18,19 +18,20 @@\n use the -c option to specify an alternate configuration file.\n """\n \n+from optparse import OptionParser\n+\n import os\n import shutil\n import sys\n import tempfile\n \n-from optparse import OptionParser\n \n-__version__ = \'2015-07-01\'\n+__version__ = "2015-07-01"\n # See zc.buildout\'s changelog if this version is up to date.\n \n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n+tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n \n-usage = \'\'\'\\\n+usage = """\\\n [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n \n Bootstraps a buildout-based project.\n@@ -40,36 +41,50 @@\n \n Note that by using --find-links to point to local resources, you can keep\n this script from going over the network.\n-\'\'\'\n+"""\n \n parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --buildout-version, "\n-                        "the bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n+parser.add_option(\n+    "--version",\n+    action="store_true",\n+    default=False,\n+    help=("Return bootstrap.py version."),\n+)\n+parser.add_option(\n+    "-t",\n+    "--accept-buildout-test-releases",\n+    dest="accept_buildout_test_releases",\n+    action="store_true",\n+    default=False,\n+    help=(\n+        "Normally, if you do not specify a --buildout-version, "\n+        "the bootstrap script and buildout gets the newest "\n+        "*final* versions of zc.buildout and its recipes and "\n+        "extensions for you.  If you use this flag, "\n+        "bootstrap and buildout will get the newest releases "\n+        "even if they are alphas or betas."\n+    ),\n+)\n+parser.add_option(\n+    "-c",\n+    "--config-file",\n+    help=("Specify the path to the buildout configuration " "file to be used."),\n+)\n+parser.add_option(\n+    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n+)\n+parser.add_option(\n+    "--allow-site-packages",\n+    action="store_true",\n+    default=False,\n+    help=("Let bootstrap.py use existing site packages"),\n+)\n+parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n+parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n+parser.add_option(\n+    "--setuptools-to-dir",\n+    help=("Allow for re-use of existing directory of " "setuptools versions"),\n+)\n \n options, args = parser.parse_args()\n if options.version:\n@@ -86,37 +101,38 @@\n     from urllib2 import urlopen\n \n ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n+if os.path.exists("ez_setup.py"):\n+    exec(open("ez_setup.py").read(), ez)\n else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n+    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n \n if not options.allow_site_packages:\n     # ez_setup imports site, which adds site packages\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n+    if hasattr(site, "getsitepackages"):\n         for sitepackage_path in site.getsitepackages():\n             # Strip all site-packages directories from sys.path that\n             # are not sys.prefix; this is because on Windows\n             # sys.prefix is a site-package directory.\n             if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n+                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n \n setup_args = dict(to_dir=tmpeggs, download_delay=0)\n \n if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n+    setup_args["version"] = options.setuptools_version\n if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n+    setup_args["to_dir"] = options.setuptools_to_dir\n \n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n+ez["use_setuptools"](**setup_args)\n import pkg_resources\n+import setuptools\n+\n \n # This does not (always?) update the default working set.  We will\n # do it.\n@@ -129,30 +145,37 @@\n \n ws = pkg_resources.working_set\n \n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n+setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n \n # Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n+cmd = [\n+    sys.executable,\n+    "-c",\n+    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n+    + "from setuptools.command.easy_install import main; main()",\n+    "-mZqNxd",\n+    tmpeggs,\n+]\n \n find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n+    "bootstrap-testing-find-links",\n+    options.find_links\n+    or (\n+        "http://downloads.buildout.org/"\n+        if options.accept_buildout_test_releases\n+        else None\n+    ),\n+)\n if find_links:\n-    cmd.extend([\'-f\', find_links])\n+    cmd.extend(["-f", find_links])\n \n-requirement = \'zc.buildout\'\n+requirement = "zc.buildout"\n version = options.buildout_version\n if version is None and not options.accept_buildout_test_releases:\n     # Figure out the most recent final version of zc.buildout.\n     import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n+\n+    _final_parts = "*final-", "*final"\n \n     def _final_version(parsed_version):\n         try:\n@@ -160,12 +183,11 @@ def _final_version(parsed_version):\n         except AttributeError:\n             # Older setuptools\n             for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n+                if (part[:1] == "*") and (part not in _final_parts):\n                     return False\n             return True\n \n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n+    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n     if find_links:\n         index.add_find_links((find_links,))\n     req = pkg_resources.Requirement.parse(requirement)\n@@ -184,13 +206,14 @@ def _final_version(parsed_version):\n             best.sort()\n             version = best[-1].version\n if version:\n-    requirement = \'==\'.join((requirement, version))\n+    requirement = "==".join((requirement, version))\n cmd.append(requirement)\n \n import subprocess\n+\n+\n if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n+    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n \n ######################################################################\n # Import and run buildout\n@@ -199,12 +222,13 @@ def _final_version(parsed_version):\n ws.require(requirement)\n import zc.buildout.buildout\n \n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n+\n+if not [a for a in args if "=" not in a]:\n+    args.append("bootstrap")\n \n # if -c was provided, we push it back into args for buildout\' main function\n if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n+    args[0:0] = ["-c", options.config_file]\n \n zc.buildout.buildout.main(args)\n shutil.rmtree(tmpeggs)\ndiff --git a/news/53.bgfix b/news/53.bgfix\nnew file mode 100644\nindex 0000000..837334f\n--- /dev/null\n+++ b/news/53.bgfix\n@@ -0,0 +1,2 @@\n+isort, black, pyupgrade, manual six removal. \n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py\nindex 5dda827..aa75185 100644\n--- a/plone/outputfilters/__init__.py\n+++ b/plone/outputfilters/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n def apply_filters(filters, data):\n     by_order = lambda x: x.order\n     filters = sorted(filters, key=by_order)\ndiff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py\nindex 2e08478..72c05c4 100644\n--- a/plone/outputfilters/browser/captioned_image.py\n+++ b/plone/outputfilters/browser/captioned_image.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Products.Five import BrowserView\n from zope.cachedescriptors.property import Lazy as lazy_property\n \n \n class CaptionedImageView(BrowserView):\n-    """Captioned image template.\n-    """\n+    """Captioned image template."""\n \n     @lazy_property\n     def template(self):\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 7883fd1..8c1e05b 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n@@ -16,9 +15,8 @@\n \n @deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n def uuidToURL(uuid):\n-    """Resolves a UUID to a URL via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to a URL via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0].getURL()\n@@ -29,9 +27,8 @@ def uuidToURL(uuid):\n     "But be aware that this does an extra security check."\n )\n def uuidToObject(uuid):\n-    """Resolves a UUID to an object via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    """Resolves a UUID to an object via the UID index of portal_catalog."""\n+    catalog = getToolByName(getSite(), "portal_catalog")\n     res = catalog.unrestrictedSearchResults(UID=uuid)\n     if res:\n         return res[0]._unrestrictedGetObject()\n@@ -40,31 +37,33 @@ def uuidToObject(uuid):\n try:\n     from plone.uuid.interfaces import IUUID\n except ImportError:\n+\n     def uuidFor(obj):\n         return obj.UID()\n+\n else:\n+\n     def uuidFor(obj):\n         uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), \'UID\'):\n+        if uuid is None and hasattr(aq_base(obj), "UID"):\n             uuid = obj.UID()\n         return uuid\n \n \n @implementer(IPublishTraverse)\n class ResolveUIDView(BrowserView):\n-    """Resolve a URL like /resolveuid/<uuid> to a normalized URL.\n-    """\n+    """Resolve a URL like /resolveuid/<uuid> to a normalized URL."""\n \n     subpath = None\n \n     def publishTraverse(self, request, name):\n         self.uuid = name\n-        traverse_subpath = self.request[\'TraversalRequestNameStack\']\n+        traverse_subpath = self.request["TraversalRequestNameStack"]\n         if traverse_subpath:\n             traverse_subpath = list(traverse_subpath)\n             traverse_subpath.reverse()\n             self.subpath = traverse_subpath\n-            self.request[\'TraversalRequestNameStack\'] = []\n+            self.request["TraversalRequestNameStack"] = []\n         return self\n \n     def __call__(self):\n@@ -74,11 +73,11 @@ def __call__(self):\n             raise NotFound("The link you followed is broken")\n \n         if self.subpath:\n-            url = \'/\'.join([url] + self.subpath)\n+            url = "/".join([url] + self.subpath)\n \n         if self.request.QUERY_STRING:\n-            url += \'?\' + self.request.QUERY_STRING\n+            url += "?" + self.request.QUERY_STRING\n \n         self.request.response.redirect(url, status=301)\n \n-        return \'\'\n+        return ""\ndiff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py\nindex 9a79ff0..db105ad 100644\n--- a/plone/outputfilters/filters/example.py\n+++ b/plone/outputfilters/filters/example.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.interfaces import IFilter\n from zope.interface import implementer\n \n@@ -6,7 +5,7 @@\n \n \n @implementer(IFilter)\n-class EmDashAdder(object):\n+class EmDashAdder:\n     order = 1000\n \n     def __init__(self, context, request):\n@@ -15,7 +14,7 @@ def __init__(self, context, request):\n     def is_enabled(self):\n         return True\n \n-    pattern = re.compile(r\'--\')\n+    pattern = re.compile(r"--")\n \n     def __call__(self, data):\n-        return self.pattern.sub(u\'\xe2\x80\x94\', data)\n+        return self.pattern.sub("\xe2\x80\x94", data)\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex d3d2bb6..552f684 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -1,26 +1,24 @@\n-import logging\n-\n from bs4 import BeautifulSoup\n+from plone.base.utils import safe_text\n+from plone.namedfile.picture import get_picture_variants\n+from plone.namedfile.picture import Img2PictureTag\n from plone.outputfilters.interfaces import IFilter\n-from Products.CMFPlone.utils import safe_nativestring\n from zope.interface import implementer\n-from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n+\n+import logging\n+\n \n logger = logging.getLogger("plone.outputfilter.picture_variants")\n \n \n @implementer(IFilter)\n-class PictureVariantsFilter(object):\n-    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions.\n-    """\n+class PictureVariantsFilter:\n+    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions."""\n \n     order = 700\n \n     def is_enabled(self):\n-        if self.context is None:\n-            return False\n-        else:\n-            return True\n+        return self.context is not None\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -28,9 +26,8 @@ def __init__(self, context=None, request=None):\n         self.request = request\n         self.img2picturetag = Img2PictureTag()\n \n-\n     def __call__(self, data):\n-        soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n \n         for elem in soup.find_all("img"):\n             picture_variant_name = elem.attrs.get("data-picturevariant", "")\n@@ -39,7 +36,7 @@ def __call__(self, data):\n             picture_variants_config = get_picture_variants().get(picture_variant_name)\n             if not picture_variants_config:\n                 logger.warn(\n-                    "Could not find the given picture_variant_name {0}, leave tag untouched!".format(\n+                    "Could not find the given picture_variant_name {}, leave tag untouched!".format(\n                         picture_variant_name\n                     )\n                 )\n@@ -47,5 +44,7 @@ def __call__(self, data):\n             sourceset = picture_variants_config.get("sourceset")\n             if not sourceset:\n                 continue\n-            elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\n+            elem.replace_with(\n+                self.img2picturetag.create_picture_tag(sourceset, elem.attrs)\n+            )\n         return soup.prettify()\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 014cd14..fc2b411 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,20 +1,19 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n-from DocumentTemplate.html_quote import html_quote\n from DocumentTemplate.DT_Var import newline_to_br\n+from DocumentTemplate.html_quote import html_quote\n+from plone.base.utils import safe_text\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFPlone.utils import safe_unicode\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n-from six.moves.urllib.parse import urlunsplit\n+from urllib.parse import unquote\n+from urllib.parse import urljoin\n+from urllib.parse import urlsplit\n+from urllib.parse import urlunsplit\n from zExceptions import NotFound\n from ZODB.POSException import ConflictError\n from zope.cachedescriptors.property import Lazy as lazy_property\n@@ -27,29 +26,27 @@\n from zope.publisher.interfaces import NotFound as ztkNotFound\n \n import re\n-import six\n \n \n-appendix_re = re.compile(\'^(.*)([?#].*)$\')\n-resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n+appendix_re = re.compile("^(.*)([?#].*)$")\n+resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n \n class IImageCaptioningEnabler(Interface):\n     available = Attribute(\n-        "Boolean indicating whether image captioning should be performed.")\n+        "Boolean indicating whether image captioning should be performed."\n+    )\n \n \n class IResolveUidsEnabler(Interface):\n-    available = Attribute(\n-        "Boolean indicating whether UID links should be resolved.")\n+    available = Attribute("Boolean indicating whether UID links should be resolved.")\n \n \n @implementer(IImageCaptioningEnabler)\n-class ImageCaptioningEnabler(object):\n-\n+class ImageCaptioningEnabler:\n     @property\n     def available(self):\n-        name = \'plone.image_captioning\'\n+        name = "plone.image_captioning"\n         registry = getUtility(IRegistry)\n         if name in registry:\n             return registry[name]\n@@ -57,23 +54,40 @@ def available(self):\n \n \n @implementer(IResolveUidsEnabler)\n-class ResolveUidsAlwaysEnabled(object):\n+class ResolveUidsAlwaysEnabled:\n     available = True\n \n \n def tag(img, **attributes):\n-    if hasattr(aq_base(img), \'tag\'):\n+    if hasattr(aq_base(img), "tag"):\n         return img.tag(**attributes)\n \n \n @implementer(IFilter)\n-class ResolveUIDAndCaptionFilter(object):\n-    """ Parser to convert UUID links and captioned images """\n-\n-    singleton_tags = set([\n-        \'area\', \'base\', \'basefont\', \'br\', \'col\', \'command\', \'embed\', \'frame\',\n-        \'hr\', \'img\', \'input\', \'isindex\', \'keygen\', \'link\', \'meta\', \'param\',\n-        \'source\', \'track\', \'wbr\'])\n+class ResolveUIDAndCaptionFilter:\n+    """Parser to convert UUID links and captioned images"""\n+\n+    singleton_tags = {\n+        "area",\n+        "base",\n+        "basefont",\n+        "br",\n+        "col",\n+        "command",\n+        "embed",\n+        "frame",\n+        "hr",\n+        "img",\n+        "input",\n+        "isindex",\n+        "keygen",\n+        "link",\n+        "meta",\n+        "param",\n+        "source",\n+        "track",\n+        "wbr",\n+    }\n \n     def __init__(self, context=None, request=None):\n         self.current_status = None\n@@ -85,8 +99,7 @@ def __init__(self, context=None, request=None):\n \n     @lazy_property\n     def captioned_image_template(self):\n-        return self.context.restrictedTraverse(\n-            \'plone.outputfilters_captioned_image\')\n+        return self.context.restrictedTraverse("plone.outputfilters_captioned_image")\n \n     @lazy_property\n     def captioned_images(self):\n@@ -111,79 +124,85 @@ def is_enabled(self):\n     def _shorttag_replace(self, match):\n         tag = match.group(1)\n         if tag in self.singleton_tags:\n-            return \'<\' + tag + \' />\'\n+            return "<" + tag + " />"\n         else:\n-            return \'<\' + tag + \'></\' + tag + \'>\'\n+            return "<" + tag + "></" + tag + ">"\n \n     def _render_resolveuid(self, href):\n         url_parts = urlsplit(href)\n         scheme = url_parts[0]\n-        path_parts = urlunsplit([\'\', \'\'] + list(url_parts[2:]))\n+        path_parts = urlunsplit(["", ""] + list(url_parts[2:]))\n         obj, subpath, appendix = self.resolve_link(path_parts)\n         if obj is not None:\n             href = obj.absolute_url()\n             if subpath:\n-                href += \'/\' + subpath\n+                href += "/" + subpath\n             href += appendix\n-        elif resolveuid_re.match(href) is None \\\n-                and not scheme \\\n-                and not href.startswith(\'/\'):\n+        elif (\n+            resolveuid_re.match(href) is None\n+            and not scheme\n+            and not href.startswith("/")\n+        ):\n             # absolutize relative URIs; this text isn\'t necessarily\n             # being rendered in the context where it was stored\n             relative_root = self.context\n-            if not getattr(self.context, \'isPrincipiaFolderish\', False):\n+            if not getattr(self.context, "isPrincipiaFolderish", False):\n                 relative_root = aq_parent(self.context)\n             actual_url = relative_root.absolute_url()\n-            href = urljoin(actual_url + \'/\', subpath) + appendix\n+            href = urljoin(actual_url + "/", subpath) + appendix\n         return href\n \n     def __call__(self, data):\n-        data = re.sub(r\'<([^<>\\s]+?)\\s*/>\', self._shorttag_replace, data)\n-        soup = BeautifulSoup(safe_unicode(data), \'html.parser\')\n-        for elem in soup.find_all([\'a\', \'area\']):\n+        data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n+        soup = BeautifulSoup(safe_text(data), "html.parser")\n+        for elem in soup.find_all(["a", "area"]):\n             attributes = elem.attrs\n-            href = attributes.get(\'href\')\n+            href = attributes.get("href")\n             # an \'a\' anchor element has no href\n             if not href:\n                 continue\n-            if not href.startswith(\'mailto<\') \\\n-                    and not href.startswith(\'mailto:\') \\\n-                    and not href.startswith(\'tel:\') \\\n-                    and not href.startswith(\'#\'):\n-                attributes[\'href\'] = self._render_resolveuid(href)\n-        for elem in soup.find_all([\'source\', \'img\']):\n+            if (\n+                not href.startswith("mailto<")\n+                and not href.startswith("mailto:")\n+                and not href.startswith("tel:")\n+                and not href.startswith("#")\n+            ):\n+                attributes["href"] = self._render_resolveuid(href)\n+        for elem in soup.find_all(["source", "img"]):\n             # handles srcset attributes, not src\n             # parent of SOURCE is picture here.\n             # SRCSET on source/img specifies one or more images (see below).\n             attributes = elem.attrs\n-            srcset = attributes.get(\'srcset\')\n+            srcset = attributes.get("srcset")\n             if not srcset:\n                 continue\n             # https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\n             # [(src1, 480w), (src2, 360w)]\n-            srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n+            srcs = [\n+                src.strip().split() for src in srcset.strip().split(",") if src.strip()\n+            ]\n             for idx, elm in enumerate(srcs):\n                 image_url = elm[0]\n                 image, fullimage, src, description = self.resolve_image(image_url)\n                 srcs[idx][0] = src\n-            attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n-        for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n+            attributes["srcset"] = ",".join(" ".join(src) for src in srcs)\n+        for elem in soup.find_all(["source", "iframe", "audio", "video"]):\n             # parent of SOURCE is video or audio here.\n             # AUDIO/VIDEO can also have src attribute.\n             # IFRAME is used to embed PDFs.\n             attributes = elem.attrs\n-            src = attributes.get(\'src\')\n+            src = attributes.get("src")\n             if not src:\n                 continue\n-            attributes[\'src\'] = self._render_resolveuid(src)\n-        for elem in soup.find_all([\'img\', \'picture\']):\n+            attributes["src"] = self._render_resolveuid(src)\n+        for elem in soup.find_all(["img", "picture"]):\n             if elem.name == "picture":\n                 img_elem = elem.find("img")\n             else:\n                 img_elem = elem\n             # handle src attribute\n             attributes = img_elem.attrs\n-            src = attributes.get(\'src\', \'\')\n+            src = attributes.get("src", "")\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n             if image and hasattr(image, "width"):\n@@ -193,58 +212,58 @@ def __call__(self, data):\n                     attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n-                title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n-                if not attributes.get(\'alt\'):\n+                title = safe_text(aq_acquire(fullimage, "Title")())\n+                if not attributes.get("alt"):\n                     # bettr an emty alt tag than none. This avoid\'s screen readers\n                     # to read the file name instead. A better fallback would be\n                     # a fallback alt text comming from the img object.\n-                    attributes[\'alt\'] = ""\n-                if \'title\' not in attributes:\n-                    attributes[\'title\'] = title\n+                    attributes["alt"] = ""\n+                if "title" not in attributes:\n+                    attributes["title"] = title\n \n             # handle captions\n-            if \'captioned\' in elem.attrs.get(\'class\', []):\n+            if "captioned" in elem.attrs.get("class", []):\n                 caption = description\n                 caption_manual_override = attributes.get("data-captiontext", "")\n                 if caption_manual_override:\n                     caption = caption_manual_override\n                 # Check if the image needs to be captioned\n-                if (self.captioned_images and caption):\n+                if self.captioned_images and caption:\n                     options = {}\n                     options["tag"] = elem.prettify()\n                     options["caption"] = newline_to_br(html_quote(caption))\n-                    options["class"] = \' \'.join(attributes[\'class\'])\n-                    del attributes[\'class\']\n+                    options["class"] = " ".join(attributes["class"])\n+                    del attributes["class"]\n                     if elem.name == "picture":\n                         elem.append(img_elem)\n                     captioned = BeautifulSoup(\n-                        self.captioned_image_template(**options), \'html.parser\')\n+                        self.captioned_image_template(**options), "html.parser"\n+                    )\n \n                     # if we are a captioned image within a link, remove and occurrences\n                     # of a tags inside caption template to preserve the outer link\n-                    if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+                    if bool(elem.find_parent("a")) and bool(captioned.find("a")):\n                         captioned.a.unwrap()\n                     if elem.name == "picture":\n                         del captioned.picture.img["class"]\n                     else:\n                         del captioned.img["class"]\n                     elem.replace_with(captioned)\n-        return six.text_type(soup)\n+        return str(soup)\n \n     def resolve_scale_data(self, url):\n-        """ return scale url, width and height\n-        """\n+        """return scale url, width and height"""\n         url_parts = url.split("/")\n         field_name = url_parts[-2]\n         scale_name = url_parts[-1]\n         obj, subpath, appendix = self.resolve_link(url)\n-        scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+        scale_view = obj.unrestrictedTraverse("@@images", None)\n         return scale_view.scale(field_name, scale_name, pre=True)\n \n     def resolve_link(self, href):\n         obj = None\n         subpath = href\n-        appendix = \'\'\n+        appendix = ""\n \n         # preserve querystring and/or appendix\n         match = appendix_re.match(href)\n@@ -262,26 +281,26 @@ def resolve_link(self, href):\n         return obj, subpath, appendix\n \n     def resolve_image(self, src):\n-        description = \'\'\n+        description = ""\n         if urlsplit(src)[0]:\n             # We have a scheme\n             return None, None, src, description\n         base = self.context\n         subpath = src\n-        appendix = \'\'\n+        appendix = ""\n \n         def traversal_stack(base, path):\n-            if path.startswith(\'/\'):\n+            if path.startswith("/"):\n                 base = getSite()\n                 path = path[1:]\n             obj = base\n             stack = [obj]\n-            components = path.split(\'/\')\n+            components = path.split("/")\n             # print("components: {}".format(components))\n             while components:\n                 child_id = unquote(components.pop(0))\n                 try:\n-                    if hasattr(aq_base(obj), \'scale\'):\n+                    if hasattr(aq_base(obj), "scale"):\n                         if components:\n                             child = obj.scale(child_id, components.pop(), pre=True)\n                         else:\n@@ -318,13 +337,13 @@ def traverse_path(base, path):\n                 image = traverse_path(fullimage, "@@images/image")\n             if image is None:\n                 image = traverse_path(fullimage, subpath)\n-        elif \'/@@\' in subpath:\n+        elif "/@@" in subpath:\n             # split on view\n-            pos = subpath.find(\'/@@\')\n+            pos = subpath.find("/@@")\n             fullimage = traverse_path(base, subpath[:pos])\n             if fullimage is None:\n                 return None, None, src, description\n-            image = traverse_path(fullimage, subpath[pos + 1:])\n+            image = traverse_path(fullimage, subpath[pos + 1 :])\n         else:\n             stack = traversal_stack(base, subpath)\n             if stack is None:\n@@ -335,7 +354,7 @@ def traverse_path(base, path):\n             if not IContentish.providedBy(fullimage):\n                 stack.reverse()\n                 for parent in stack:\n-                    if hasattr(aq_base(parent), \'tag\'):\n+                    if hasattr(aq_base(parent), "tag"):\n                         fullimage = parent\n                         break\n             if not hasattr(image, "width"):\n@@ -350,5 +369,5 @@ def traverse_path(base, path):\n         except AttributeError:\n             return None, None, src, description\n         src = url + appendix\n-        description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n+        description = safe_text(aq_acquire(fullimage, "Description")())\n         return image, fullimage, src, description\ndiff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py\nindex 2b109bc..69f50f9 100644\n--- a/plone/outputfilters/interfaces.py\n+++ b/plone/outputfilters/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n@@ -12,7 +11,7 @@ class IFilter(Interface):\n     To control the order of filters, use the \'order\' attribute. It may be\n     positive or negative."""\n \n-    order = schema.Int(title=u"Order")\n+    order = schema.Int(title="Order")\n \n     def is_enabled():\n         """Returns a boolean indicating whether the filter should be\ndiff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py\nindex 8298444..e6d7de2 100644\n--- a/plone/outputfilters/mimetype.py\n+++ b/plone/outputfilters/mimetype.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n \n \n class text_plone_outputfilters_html(MimeTypeItem):\n \n     __name__ = "Plone Output Filters HTML"\n-    mimetypes = (\'text/x-plone-outputfilters-html\',)\n+    mimetypes = ("text/x-plone-outputfilters-html",)\n     binary = 0\ndiff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py\nindex 1582428..1d54c03 100644\n--- a/plone/outputfilters/setuphandlers.py\n+++ b/plone/outputfilters/setuphandlers.py\n@@ -1,7 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.mimetype import text_plone_outputfilters_html\n-from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html\n-from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html\n+from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+    html_to_plone_outputfilters_html,\n+)\n+from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+    plone_outputfilters_html_to_html,\n+)\n from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool\n from Products.PortalTransforms.interfaces import IPortalTransformsTool\n from zope.component import getUtility\n@@ -39,33 +42,36 @@ def register_transform_policy(context, output_mimetype, required_transform):\n \n def unregister_transform_policy(context, output_mimetype):\n     transform_tool = getUtility(IPortalTransformsTool)\n-    policies = [mimetype for (mimetype, required)\n-                in transform_tool.listPolicies()\n-                if mimetype == output_mimetype]\n+    policies = [\n+        mimetype\n+        for (mimetype, required) in transform_tool.listPolicies()\n+        if mimetype == output_mimetype\n+    ]\n     if policies:\n         # There is a policy, remove it!\n         transform_tool.manage_delPolicies([output_mimetype])\n \n \n def install_mimetype_and_transforms(context):\n-    """ register mimetype and transformations for captioned images """\n+    """register mimetype and transformations for captioned images"""\n     register_mimetype(context, text_plone_outputfilters_html)\n     register_transform(context, plone_outputfilters_html_to_html)\n     register_transform(context, html_to_plone_outputfilters_html)\n-    register_transform_policy(context, "text/x-html-safe",\n-                              "html_to_plone_outputfilters_html")\n+    register_transform_policy(\n+        context, "text/x-html-safe", "html_to_plone_outputfilters_html"\n+    )\n \n \n def uninstall_mimetype_and_transforms(context):\n-    """ unregister mimetype and transformations for captioned images """\n+    """unregister mimetype and transformations for captioned images"""\n     unregister_transform(context, "plone_outputfilters_html_to_html")\n     unregister_transform(context, "html_to_plone_outputfilters_html")\n-    unregister_mimetype(context, \'text/x-plone-outputfilters-html\')\n+    unregister_mimetype(context, "text/x-plone-outputfilters-html")\n     unregister_transform_policy(context, "text/x-html-safe")\n \n \n def importVarious(context):\n-    if context.readDataFile(\'plone.outputfilters.txt\') is None:\n+    if context.readDataFile("plone.outputfilters.txt") is None:\n         return\n     site = context.getSite()\n     install_mimetype_and_transforms(site)\ndiff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py\nindex 05b945b..d8bc86d 100644\n--- a/plone/outputfilters/testing.py\n+++ b/plone/outputfilters/testing.py\n@@ -1,17 +1,18 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    IImageCaptioningEnabler,\n+)\n from zope.interface import implementer\n \n import zope.component\n \n \n @implementer(IImageCaptioningEnabler)\n-class DummyImageCaptioningEnabler(object):\n+class DummyImageCaptioningEnabler:\n \n     available = True\n \n@@ -22,30 +23,28 @@ class PloneOutputfilters(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.outputfilters\n+\n         self.loadZCML(package=plone.outputfilters)\n         gsm = zope.component.getGlobalSiteManager()\n         gsm.registerUtility(\n             DummyImageCaptioningEnabler(),\n             IImageCaptioningEnabler,\n-            \'outputfiltertest\',\n-            event=False\n+            "outputfiltertest",\n+            event=False,\n         )\n \n     def tearDownZope(self, app):\n         gsm = zope.component.getGlobalSiteManager()\n-        gsm.unregisterUtility(\n-            provided=IImageCaptioningEnabler,\n-            name=\'outputfiltertest\'\n-        )\n+        gsm.unregisterUtility(provided=IImageCaptioningEnabler, name="outputfiltertest")\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.outputfilters:default\')\n+        applyProfile(portal, "plone.outputfilters:default")\n \n \n PLONE_OUTPUTFILTERS_FIXTURE = PloneOutputfilters()\n PLONE_OUTPUTFILTERS_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Integration")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Integration"\n+)\n PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_OUTPUTFILTERS_FIXTURE,),\n-    name="PloneOutputfilters:Functional")\n+    bases=(PLONE_OUTPUTFILTERS_FIXTURE,), name="PloneOutputfilters:Functional"\n+)\ndiff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py\nindex f6800a7..07ea2a0 100644\n--- a/plone/outputfilters/tests/test_apply_filters.py\n+++ b/plone/outputfilters/tests/test_apply_filters.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n \n import unittest\n \n \n-class DummyFilter(object):\n+class DummyFilter:\n     order = 500\n \n     def is_enabled(self):\n@@ -18,14 +17,13 @@ def __call__(self, data):\n \n \n class FilterTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         DummyFilter.called = []\n \n     def test_apply_filters(self):\n         filters = [DummyFilter()]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[0]], DummyFilter.called)\n \n     def test_apply_filters_ordering(self):\n@@ -34,7 +32,7 @@ def test_apply_filters_ordering(self):\n         filter2.order = 100\n         filters = [filter1, filter2]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([filters[1], filters[0]], DummyFilter.called)\n \n     def test_apply_filters_checks_is_enabled(self):\n@@ -42,18 +40,18 @@ def test_apply_filters_checks_is_enabled(self):\n         filter.is_enabled = lambda: False\n         filters = [filter]\n \n-        apply_filters(filters, \'\')\n+        apply_filters(filters, "")\n         self.assertEqual([], DummyFilter.called)\n \n     def test_apply_filters_handles_return_none(self):\n         class DummyFilterReturningNone(DummyFilter):\n-\n             def __call__(self, data):\n                 return None\n+\n         filter = DummyFilterReturningNone()\n \n-        res = apply_filters([filter], \'\')\n-        self.assertEqual(\'\', res)\n+        res = apply_filters([filter], "")\n+        self.assertEqual("", res)\n \n \n def test_suite():\ndiff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py\nindex df7327e..e8d6406 100644\n--- a/plone/outputfilters/tests/test_docs.py\n+++ b/plone/outputfilters/tests/test_docs.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n import pprint\n-import six\n import unittest\n \n+\n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-if six.PY3:\n-    normal_testfiles = [\n-        \'../README.rst\'\n-    ]\n-else:\n-    normal_testfiles = [\n-        \'./README_py2.rst\',\n-    ]\n+normal_testfiles = ["../README.rst"]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            },\n-                                     ),\n-                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 2307eef..01515d9 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import _ellipsis_match\n from doctest import OutputChecker\n from doctest import REPORT_NDIFF\n@@ -20,9 +19,9 @@\n \n \n def dummy_image():\n-    filename = join(PREFIX, u\'image.jpg\')\n+    filename = join(PREFIX, "image.jpg")\n     data = None\n-    with open(filename, \'rb\') as fd:\n+    with open(filename, "rb") as fd:\n         data = fd.read()\n         fd.close()\n     return NamedBlobImage(data=data, filename=filename)\n@@ -32,7 +31,7 @@ class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n-    image_id = \'image.jpg\'\n+    image_id = "image.jpg"\n \n     def _makeParser(self, **kw):\n         parser = PictureVariantsFilter(context=self.portal)\n@@ -44,32 +43,31 @@ def _makeDummyContent(self):\n         from OFS.SimpleItem import SimpleItem\n \n         class DummyContent(SimpleItem):\n-\n             def __init__(self, id):\n                 self.id = id\n \n             def UID(self):\n-                return \'foo\'\n+                return "foo"\n \n-            allowedRolesAndUsers = (\'Anonymous\',)\n+            allowedRolesAndUsers = ("Anonymous",)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = \'foo2\'\n-            title = u\'Sch\xc3\xb6nes Bild\'\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n \n             def UID(self):\n-                return \'foo2\'\n+                return "foo2"\n \n-        dummy = DummyContent(\'foo\')\n-        self.portal._setObject(\'foo\', dummy)\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n         self.portal.portal_catalog.catalog_object(self.portal.foo)\n \n-        dummy2 = DummyContent2(\'foo2\')\n-        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n             data = fd.read()\n             fd.close()\n-        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n-        self.portal._setObject(\'foo2\', dummy2)\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n     def _assertTransformsTo(self, input, expected):\n@@ -81,35 +79,35 @@ def _assertTransformsTo(self, input, expected):\n         # print("\\n e: {}".format(expected))\n         # print("\\n o: {}".format(out))\n         try:\n-            self.assertTrue(_ellipsis_match(normalized_expected,\n-                                            normalized_out))\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n-            class wrapper(object):\n+\n+            class wrapper:\n                 want = expected\n-            raise AssertionError(self.outputchecker.output_difference(\n-                wrapper, out, REPORT_NDIFF))\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n \n     def afterSetUp(self):\n         # create an image and record its UID\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         if self.image_id not in self.portal:\n-            self.portal.invokeFactory(\n-                \'Image\', id=self.image_id, title=\'Image\')\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n         image = self.portal[self.image_id]\n-        image.setDescription(\'My caption\')\n+        image.setDescription("My caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.UID = image.UID()\n-        self.parser = self._makeParser(captioned_images=True,\n-                                       resolve_uids=True)\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n         assert self.parser.is_enabled()\n \n         self.outputchecker = OutputChecker()\n \n     def beforeTearDown(self):\n         self.login()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n@@ -159,12 +157,15 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         import time\n+\n         startTime = time.time()\n         res = self.parser(text)\n-        executionTime = (time.time() - startTime)\n-        print("\\n\\nimage srcset parsing time: {}\\n".format(executionTime))\n+        executionTime = time.time() - startTime\n+        print(f"\\n\\nimage srcset parsing time: {executionTime}\\n")\n         self.assertTrue(res)\n \n         text_out = """<h1>Welcome!</h1>\n@@ -232,17 +233,23 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         self._assertTransformsTo(text, text_out)\n \n     def test_parsing_with_nonexisting_srcset(self):\n         text = """\n <p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         res = self.parser(text)\n         self.assertTrue(res)\n         text_out = """\n <p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         # verify that tag was not converted:\n-        self.assertTrue("data-picturevariant" in res)\n\\ No newline at end of file\n+        self.assertTrue("data-picturevariant" in res)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex b250951..41b227f 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import _ellipsis_match\n from doctest import OutputChecker\n from doctest import REPORT_NDIFF\n@@ -11,7 +10,9 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n-from plone.outputfilters.filters.resolveuid_and_caption import ResolveUIDAndCaptionFilter  # noqa\n+from plone.outputfilters.filters.resolveuid_and_caption import (  # noqa\n+    ResolveUIDAndCaptionFilter,\n+)\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n@@ -20,9 +21,9 @@\n \n \n def dummy_image():\n-    filename = join(PREFIX, u\'image.jpg\')\n+    filename = join(PREFIX, "image.jpg")\n     data = None\n-    with open(filename, \'rb\') as fd:\n+    with open(filename, "rb") as fd:\n         data = fd.read()\n         fd.close()\n     return NamedBlobImage(data=data, filename=filename)\n@@ -32,7 +33,7 @@ class ResolveUIDAndCaptionFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n-    image_id = \'image.jpg\'\n+    image_id = "image.jpg"\n \n     def _makeParser(self, **kw):\n         parser = ResolveUIDAndCaptionFilter(context=self.portal)\n@@ -44,32 +45,31 @@ def _makeDummyContent(self):\n         from OFS.SimpleItem import SimpleItem\n \n         class DummyContent(SimpleItem):\n-\n             def __init__(self, id):\n                 self.id = id\n \n             def UID(self):\n-                return \'foo\'\n+                return "foo"\n \n-            allowedRolesAndUsers = (\'Anonymous\',)\n+            allowedRolesAndUsers = ("Anonymous",)\n \n         class DummyContent2(NFDummyContent):\n-            id = __name__ = \'foo2\'\n-            title = u\'Sch\xc3\xb6nes Bild\'\n+            id = __name__ = "foo2"\n+            title = "Sch\xc3\xb6nes Bild"\n \n             def UID(self):\n-                return \'foo2\'\n+                return "foo2"\n \n-        dummy = DummyContent(\'foo\')\n-        self.portal._setObject(\'foo\', dummy)\n+        dummy = DummyContent("foo")\n+        self.portal._setObject("foo", dummy)\n         self.portal.portal_catalog.catalog_object(self.portal.foo)\n \n-        dummy2 = DummyContent2(\'foo2\')\n-        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+        dummy2 = DummyContent2("foo2")\n+        with open(join(PREFIX, self.image_id), "rb") as fd:\n             data = fd.read()\n             fd.close()\n-        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n-        self.portal._setObject(\'foo2\', dummy2)\n+        dummy2.image = NamedImage(data, "image/jpeg", "image.jpeg")\n+        self.portal._setObject("foo2", dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n     def _assertTransformsTo(self, input, expected, parsing=True):\n@@ -84,39 +84,39 @@ def _assertTransformsTo(self, input, expected, parsing=True):\n         # print("e: {}".format(normalized_expected))\n         # print("o: {}".format(normalized_out))\n         try:\n-            self.assertTrue(_ellipsis_match(normalized_expected,\n-                                            normalized_out))\n+            self.assertTrue(_ellipsis_match(normalized_expected, normalized_out))\n         except AssertionError:\n-            class wrapper(object):\n+\n+            class wrapper:\n                 want = expected\n-            raise AssertionError(self.outputchecker.output_difference(\n-                wrapper, out, REPORT_NDIFF))\n+\n+            raise AssertionError(\n+                self.outputchecker.output_difference(wrapper, out, REPORT_NDIFF)\n+            )\n \n     def afterSetUp(self):\n         # create an image and record its UID\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         if self.image_id not in self.portal:\n-            self.portal.invokeFactory(\n-                \'Image\', id=self.image_id, title=\'Image\')\n+            self.portal.invokeFactory("Image", id=self.image_id, title="Image")\n         image = self.portal[self.image_id]\n-        image.setDescription(\'My caption\')\n+        image.setDescription("My caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.UID = image.UID()\n-        self.parser = self._makeParser(captioned_images=True,\n-                                       resolve_uids=True)\n+        self.parser = self._makeParser(captioned_images=True, resolve_uids=True)\n         assert self.parser.is_enabled()\n \n         self.outputchecker = OutputChecker()\n \n     def beforeTearDown(self):\n         self.login()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n-        text = \'<div>Some simple text.</div>\'\n+        text = "<div>Some simple text.</div>"\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n@@ -177,12 +177,15 @@ def test_parsing_long_doc(self):\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n-        """.format(uid=self.UID)\n+        """.format(\n+            uid=self.UID\n+        )\n         import time\n+\n         startTime = time.time()\n         res = self.parser(text)\n-        executionTime = (time.time() - startTime)\n-        print("\\n\\nresolve_uid_and_caption parsing time: {}\\n".format(executionTime))\n+        executionTime = time.time() - startTime\n+        print(f"\\n\\nresolve_uid_and_caption parsing time: {executionTime}\\n")\n         self.assertTrue(res)\n \n     def test_parsing_preserves_newlines(self):\n@@ -208,10 +211,13 @@ def test_resolve_uids_in_links(self):\n         text = """<html>\n   <head></head>\n   <body>\n-    <a class="internal-link" href="resolveuid/%s">Some link</a>\n-    <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>\n+    <a class="internal-link" href="resolveuid/{}">Some link</a>\n+    <a class="internal-link" href="resolveuid/{}#named-anchor">Some anchored link</a>\n   </body>\n-</html>""" % (self.UID, self.UID)\n+</html>""".format(\n+            self.UID,\n+            self.UID,\n+        )\n         res = str(self.parser(text))\n         self.assertIn(\'href="http://nohost/plone/image.jpg"\', res)\n         self.assertIn(\'href="http://nohost/plone/image.jpg#named-anchor"\', res)\n@@ -251,15 +257,17 @@ def test_resolve_uids_non_AT_content(self):\n \n     def test_resolve_uids_fragment(self):\n         self._makeDummyContent()\n-        self.parser = self._makeParser(resolve_uids=True,\n-                                       context=self.portal.foo)\n+        self.parser = self._makeParser(resolve_uids=True, context=self.portal.foo)\n         text_in = """<a href="#a">anchor</a>"""\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolve_uids_in_image_maps(self):\n-        text_in = """<map id="the_map" name="the_map">\n+        text_in = (\n+            """<map id="the_map" name="the_map">\n <area alt="alpha" href="resolveuid/%s" coords="1,2,3,4" shape="rect" />\n-</map>""" % self.UID\n+</map>"""\n+            % self.UID\n+        )\n         text_out = """<map id="the_map" name="the_map">\n <area alt="alpha" coords="1,2,3,4" href="http://nohost/plone/image.jpg" shape="rect"/>\n </map>"""\n@@ -282,56 +290,59 @@ def test_resolve_uids_entities(self):\n         self._assertTransformsTo(text_in, text_in)\n \n     def test_resolveuid_view(self):\n-        res = self.publish(\'/plone/resolveuid/%s\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg", res.headers["location"])\n \n     def test_resolveuid_view_bad_uuid(self):\n-        res = self.publish(\'/plone/resolveuid/BOGUS\')\n+        res = self.publish("/plone/resolveuid/BOGUS")\n         self.assertEqual(404, res.status)\n \n     def test_resolveuid_view_subpath(self):\n-        res = self.publish(\'/plone/resolveuid/%s/image_thumb\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s/image_thumb" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg/image_thumb\',\n-                         res.headers[\'location\'])\n+        self.assertEqual(\n+            "http://nohost/plone/image.jpg/image_thumb", res.headers["location"]\n+        )\n \n     def test_resolveuid_view_querystring(self):\n-        res = self.publish(\'/plone/resolveuid/%s?qs\' % self.UID)\n+        res = self.publish("/plone/resolveuid/%s?qs" % self.UID)\n         self.assertEqual(301, res.status)\n-        self.assertEqual(\'http://nohost/plone/image.jpg?qs\',\n-                         res.headers[\'location\'])\n+        self.assertEqual("http://nohost/plone/image.jpg?qs", res.headers["location"])\n \n     def test_uuidToURL(self):\n         from plone.outputfilters.browser.resolveuid import uuidToURL\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         uuidToURL(self.UID))\n+\n+        self.assertEqual("http://nohost/plone/image.jpg", uuidToURL(self.UID))\n \n     def test_uuidToObject(self):\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.assertTrue(self.portal[\'image.jpg\'].aq_base\n-                        is uuidToObject(self.UID).aq_base)\n+\n+        self.assertTrue(\n+            self.portal["image.jpg"].aq_base is uuidToObject(self.UID).aq_base\n+        )\n \n     def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n         from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n-        page = self.portal[\'page\']\n+        from plone.outputfilters.browser.resolveuid import uuidToURL\n+\n+        self.portal.invokeFactory("Document", id="page", title="Page")\n+        page = self.portal["page"]\n         self.logout()\n-        self.assertEqual(\'http://nohost/plone/page\',\n-                         uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base\n-                        is uuidToObject(page.UID()).aq_base)\n+        self.assertEqual("http://nohost/plone/page", uuidToURL(page.UID()))\n+        self.assertTrue(page.aq_base is uuidToObject(page.UID()).aq_base)\n \n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n-        self.portal.invokeFactory(\'News Item\', id=\'a-news-item\', title=\'Title\')\n-        news_item = self.portal[\'a-news-item\']\n+        self.portal.invokeFactory("News Item", id="a-news-item", title="Title")\n+        news_item = self.portal["a-news-item"]\n         from plone.app.textfield.value import RichTextValue\n+\n         news_item.text = RichTextValue(\n             \'<span><img class="captioned" src="image.jpg"/></span>\',\n-            \'text/html\', \'text/html\')\n+            "text/html",\n+            "text/html",\n+        )\n         news_item.setDescription("Description.")\n         # Test captioning\n         output = news_item.text.output\n@@ -367,12 +378,10 @@ def test_image_captioning_relative_path_private_folder(self):\n         # Images in a private folder may or may not still be renderable, but\n         # traversal to them must not raise an error!\n         self.loginAsPortalOwner()\n-        self.portal.invokeFactory(\'Folder\', id=\'private\',\n-                                  title=\'Private Folder\')\n-        self.portal.private.invokeFactory(\'Image\', id=\'image.jpg\',\n-                                          title=\'Image\')\n-        image = getattr(self.portal.private, \'image.jpg\')\n-        image.setDescription(\'My private image caption\')\n+        self.portal.invokeFactory("Folder", id="private", title="Private Folder")\n+        self.portal.private.invokeFactory("Image", id="image.jpg", title="Image")\n+        image = getattr(self.portal.private, "image.jpg")\n+        image.setDescription("My private image caption")\n         image.image = dummy_image()\n         image.reindexObject()\n         self.logout()\n@@ -401,7 +410,10 @@ def test_image_captioning_resolveuid_bare(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -409,7 +421,10 @@ def test_image_captioning_resolveuid_scale(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_new_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -418,12 +433,16 @@ def test_image_captioning_resolveuid_new_scale(self):\n \n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n-        text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = u"""<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n+        )\n+        text_out = """<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -431,7 +450,10 @@ def test_image_captioning_resolveuid_no_scale(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n-        text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n+        text_in = (\n+            """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>"""\n+            % (self.UID, self.UID, self.UID)\n+        )\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -456,7 +478,7 @@ def test_audio_resolveuid(self):\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = u"""<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n+        text_out = """<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n@@ -484,7 +506,10 @@ def test_image_captioning_preserves_custom_attributes(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_unquoted_attributes(self):\n-        text_in = """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />""" % self.UID\n+        text_in = (\n+            """<img class=captioned height=144 alt="picture alt text" src="resolveuid/%s" width=120 />"""\n+            % self.UID\n+        )\n         text_out = """<figure class="captioned">\n <img alt="picture alt text" height="144" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="120"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -501,11 +526,10 @@ def test_image_captioning_preserves_existing_links(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_handles_non_ascii(self):\n-        self.portal[\'image.jpg\'].setTitle(u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n-        self.portal[\'image.jpg\'].setDescription(\n-            u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n+        self.portal["image.jpg"].setTitle("Kupu Test Image \\xe5\\xe4\\xf6")\n+        self.portal["image.jpg"].setDescription("Kupu Test Image \\xe5\\xe4\\xf6")\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n-        text_out = u"""<figure class="captioned">\n+        text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n <figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n </figure>"""\n@@ -517,8 +541,7 @@ def test_resolve_uids_with_bigU(self):\n         self.assertTrue(\'href="http://nohost/plone/image.jpg"\' in str(res))\n \n     def test_singleton_elements(self):\n-        self._assertTransformsTo(\n-            \'<hr/>\\r\\n<p>foo</p><br/>\', \'<hr/>\\r\\n<p>foo</p><br/>\')\n+        self._assertTransformsTo("<hr/>\\r\\n<p>foo</p><br/>", "<hr/>\\r\\n<p>foo</p><br/>")\n \n     def test_no_change_when_a_in_script(self):\n         text_in = """<script>a=\'<a href="">test</a>\';</script>"""\ndiff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py\nindex 8bdfe77..e148af4 100644\n--- a/plone/outputfilters/tests/test_transforms.py\n+++ b/plone/outputfilters/tests/test_transforms.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n@@ -11,41 +10,48 @@ class TransformsTestCase(unittest.TestCase):\n     layer = PLONE_OUTPUTFILTERS_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        from zope.component import getUtility\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         from Products.PortalTransforms.interfaces import IPortalTransformsTool\n+        from zope.component import getUtility\n+\n         self.transforms = getUtility(IPortalTransformsTool)\n \n     def test_instantiate_html_to_plone_outputfilters_html_transform(self):\n-        from plone.outputfilters.transforms.html_to_plone_outputfilters_html \\\n-            import html_to_plone_outputfilters_html\n-        transform = html_to_plone_outputfilters_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+        from plone.outputfilters.transforms.html_to_plone_outputfilters_html import (\n+            html_to_plone_outputfilters_html,\n+        )\n+\n+        transform = html_to_plone_outputfilters_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_instantiate_plone_outputfilters_html_to_html_transform(self):\n-        from plone.outputfilters.transforms.plone_outputfilters_html_to_html \\\n-            import plone_outputfilters_html_to_html\n-        transform = plone_outputfilters_html_to_html(name=\'transform\')\n-        self.assertEqual(\'transform\', transform.name())\n+        from plone.outputfilters.transforms.plone_outputfilters_html_to_html import (\n+            plone_outputfilters_html_to_html,\n+        )\n+\n+        transform = plone_outputfilters_html_to_html(name="transform")\n+        self.assertEqual("transform", transform.name())\n \n     def test_transform_policy_installed(self):\n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(1, len(policies))\n \n     def test_uninstallation(self):\n-        from plone.outputfilters.setuphandlers import \\\n-            uninstall_mimetype_and_transforms\n+        from plone.outputfilters.setuphandlers import uninstall_mimetype_and_transforms\n+\n         uninstall_mimetype_and_transforms(self.portal)\n \n         policies = self.transforms.listPolicies()\n         policies = [\n-            mimetype for (mimetype, required) in policies\n+            mimetype\n+            for (mimetype, required) in policies\n             if mimetype == "text/x-html-safe"\n         ]\n         self.assertEqual(0, len(policies))\ndiff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\nindex 0cb3426..0936f6b 100644\n--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.outputfilters import apply_filters\n from plone.outputfilters.interfaces import IFilter\n from Products.PortalTransforms.interfaces import ITransform\n@@ -9,15 +8,15 @@\n \n @implementer(ITransform)\n class html_to_plone_outputfilters_html:\n-    """ transform which applies output filters"""\n+    """transform which applies output filters"""\n+\n     __name__ = "html_to_plone_outputfilters_html"\n-    inputs = (\'text/html\',)\n+    inputs = ("text/html",)\n     output = "text/x-plone-outputfilters-html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\'list\', \'Inputs\',\n-                       \'Input(s) MIME type. Change with care.\'),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\n@@ -26,8 +25,8 @@ def name(self):\n         return self.__name__\n \n     def convert(self, orig, data, **kwargs):\n-        context = kwargs.get(\'context\')\n-        request = getattr(getSite(), \'REQUEST\', None)\n+        context = kwargs.get("context")\n+        request = getattr(getSite(), "REQUEST", None)\n         filters = [f for _, f in getAdapters((context, request), IFilter)]\n \n         res = apply_filters(filters, orig)\ndiff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\nindex b1a10e9..22e98bd 100644\n--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py\n@@ -1,22 +1,17 @@\n-# -*- coding: utf-8 -*-\n from Products.PortalTransforms.interfaces import ITransform\n from zope.interface import implementer\n \n \n @implementer(ITransform)\n-class plone_outputfilters_html_to_html(object):\n+class plone_outputfilters_html_to_html:\n \n     __name__ = "plone_outputfilters_html_to_html"\n-    inputs = (\'text/x-plone-outputfilters-html\',)\n+    inputs = ("text/x-plone-outputfilters-html",)\n     output = "text/html"\n \n     def __init__(self, name=None):\n         self.config_metadata = {\n-            \'inputs\': (\n-                \'list\',\n-                \'Inputs\',\n-                \'Input(s) MIME type. Change with care.\'\n-            ),\n+            "inputs": ("list", "Inputs", "Input(s) MIME type. Change with care."),\n         }\n         if name:\n             self.__name__ = name\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..3e076fd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 0\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 36bdc30..2e00618 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'5.0.0b2.dev0\'\n+version = "5.0.0b2.dev0"\n \n \n def read(filename):\n@@ -31,11 +30,10 @@ def read(filename):\n )\n \n setup(\n-    name=\'plone.outputfilters\',\n+    name="plone.outputfilters",\n     version=version,\n     description=(\n-        "Transformations applied to HTML in "\n-        "Plone text fields as they are rendered"\n+        "Transformations applied to HTML in " "Plone text fields as they are rendered"\n     ),\n     long_description=long_description,\n     # Get more strings from https://pypi.org/classifiers/\n@@ -46,40 +44,38 @@ def read(filename):\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'plone transform filter uid caption\',\n-    author=\'David Glick, Plone Foundation\',\n-    author_email=\'davidglick@groundwire.org\',\n-    url=\'http://github.com/plone/plone.outputfilters\',\n-    license=\'GPL\',\n+    keywords="plone transform filter uid caption",\n+    author="David Glick, Plone Foundation",\n+    author_email="davidglick@groundwire.org",\n+    url="http://github.com/plone/plone.outputfilters",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Products.MimetypesRegistry\',\n-        \'Products.PortalTransforms>=2.0\',\n-        \'plone.namedfile\',\n-        \'plone.app.uuid\',\n-        \'setuptools\',\n-        \'six\',\n-        \'unidecode\',\n-        \'zope.deprecation\',\n-        \'beautifulsoup4\',\n-        \'lxml\',\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Products.MimetypesRegistry",\n+        "Products.PortalTransforms>=2.0",\n+        "plone.namedfile",\n+        "plone.app.uuid",\n+        "setuptools",\n+        "unidecode",\n+        "zope.deprecation",\n+        "beautifulsoup4",\n+        "lxml",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.app.robotframework\',\n-            \'plone.namedfile\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.app.robotframework",\n+            "plone.namedfile",\n         ]\n     },\n     entry_points="""\n'

