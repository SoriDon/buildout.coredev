Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-15T20:59:25+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/67c3c5e0ef0615d8add55bda586e65e5c6560889

Improve Plone Site Root object API

Files changed:
A news/671.feature
A src/plone/restapi/tests/test_deserialize_siteroot.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/services/workflow/configure.zcml
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_workflow.py

b'diff --git a/news/671.feature b/news/671.feature\nnew file mode 100644\nindex 00000000..7bf5f67d\n--- /dev/null\n+++ b/news/671.feature\n@@ -0,0 +1,7 @@\n+Improved serialization/deserialization of the Plone Site root to make\n+possible an opt-in to support Tiles attributes on it. The @workflow endpoint\n+now answers an empty object instead of a 404 for the Plone Site Root object,\n+hiding the implementation details (the Plone Site Root has no workflow for\n+historical reasons) and equalizing it to the other content types, making the\n+API more consistent.\n+[sneridagh]\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 7b749383..949fd630 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -8,6 +8,8 @@\n from plone.restapi.deserializer.mixins import OrderingMixin\n from zope.publisher.interfaces import IRequest\n \n+import json\n+\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n@@ -33,4 +35,23 @@ def __call__(self, validate_all=False):\n             data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n         self.handle_ordering(data)\n \n+        # Volto Tiles on the Plone Site root faker\n+        if \'tiles\' in data:\n+            if not getattr(self.context, \'tiles\', False):\n+                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+\n+        if \'tiles_layout\' in data:\n+            if not getattr(self.context, \'tiles_layout\', False):\n+                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+\n+        if \'title\' in data:\n+            self.context.setTitle(data[\'title\'])\n+\n+        if \'description\' in data:\n+            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+\n         return self.context\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 9330ad27..41445a5c 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -10,6 +10,8 @@\n from zope.interface import Interface\n from zope.interface import implementer\n \n+import json\n+\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n@@ -44,7 +46,10 @@ def __call__(self, version=None):\n             \'@type\': \'Plone Site\',\n             \'title\': self.context.Title(),\n             \'parent\': {},\n-            \'is_folderish\': True\n+            \'is_folderish\': True,\n+            \'description\': self.context.description,\n+            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n+            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n         }\n \n         # Insert expandable elements\ndiff --git a/src/plone/restapi/services/workflow/configure.zcml b/src/plone/restapi/services/workflow/configure.zcml\nindex e26831d0..6f77abef 100644\n--- a/src/plone/restapi/services/workflow/configure.zcml\n+++ b/src/plone/restapi/services/workflow/configure.zcml\n@@ -3,6 +3,14 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <plone:service\n+    method="GET"\n+    name="@workflow"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".info.WorkflowInfoService"\n+    permission="zope2.View"\n+    />\n+\n   <plone:service\n     method="GET"\n     name="@workflow"\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex 25a2aa94..dc1a3087 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -2,6 +2,7 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.interfaces._content import IWorkflowAware\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n@@ -28,6 +29,13 @@ def __call__(self, expand=False):\n         if not expand:\n             return result\n \n+        # Prevent 404 on site root on workflow request\n+        # Although 404 will be more semantic, for the sake of uniformity of the\n+        # API we fake the response to the endpoint by providing an empty\n+        # response instead of a 404.\n+        if IPloneSiteRoot.providedBy(self.context):\n+            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+\n         wftool = getToolByName(self.context, \'portal_workflow\')\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 8ce3cff3..3dabbdc5 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone/", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 0b2f0231..66922a5e 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_deserialize_siteroot.py b/src/plone/restapi/tests/test_deserialize_siteroot.py\nnew file mode 100644\nindex 00000000..9a2cc1e9\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_deserialize_siteroot.py\n@@ -0,0 +1,46 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from zope.component import getMultiAdapter\n+\n+import json\n+import unittest\n+\n+\n+class TestDXContentDeserializer(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+        context = context or self.portal\n+        self.request[\'BODY\'] = body\n+        deserializer = getMultiAdapter((context, self.request),\n+                                       IDeserializeFromJson)\n+        return deserializer(validate_all=validate_all)\n+\n+    def test_opt_in_tiles_deserializer(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n+                json.dumps(tiles), json.dumps(tiles_layout)))\n+\n+        self.assertEqual(tiles, json.loads(self.portal.tiles))\n+        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex e4c60772..6d1748e1 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -12,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n \n+import json\n import os\n import unittest\n \n@@ -370,3 +371,52 @@ def test_serialize_to_json_collection(self):\n             ],\n             self.serialize(self.portal.collection1).get(\'items\')\n         )\n+\n+    def test_serialize_returns_site_root_common(self):\n+        self.assertIn(\n+            \'title\',\n+            self.serialize(self.portal),\n+        )\n+        self.assertIn(\n+            \'description\',\n+            self.serialize(self.portal)\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            {}\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            {}\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_present(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+        self.portal.manage_addProperty(\n+            \'tiles\', json.dumps(tiles), \'string\')\n+        self.portal.manage_addProperty(\n+            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n+\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            tiles\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            tiles_layout\n+        )\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex ba957e24..0f4d0558 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -79,6 +79,14 @@ def test_expanded_workflow_info_in_content_serialization(self):\n         self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n         self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n \n+    def test_workflow_info_empty_on_siteroot(self):\n+        wfinfo = getMultiAdapter((self.portal, self.request),\n+                                 name=u\'GET_application_json_@workflow\')\n+        obj = wfinfo.reply()\n+\n+        self.assertEquals(obj[\'transitions\'], [])\n+        self.assertEquals(obj[\'history\'], [])\n+\n \n class TestWorkflowTransition(TestCase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-16T18:46:41+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/9667a26a898cdd884eac0bc27ae905d5e0249d09

Immediately return result on portal root @workflow fake response.

Files changed:
M src/plone/restapi/services/workflow/info.py

b'diff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex dc1a3087..a4cb0e54 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -35,6 +35,7 @@ def __call__(self, expand=False):\n         # response instead of a 404.\n         if IPloneSiteRoot.providedBy(self.context):\n             result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            return result\n \n         wftool = getToolByName(self.context, \'portal_workflow\')\n         try:\n@@ -77,6 +78,7 @@ def __call__(self, expand=False):\n class WorkflowInfoService(Service):\n     """Get workflow information\n     """\n+\n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n         return info(expand=True)[\'workflow\']\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-16T19:00:25+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/3545bcbb1d5a3faacbc5027ed545b018c05ac7b0

Move tests from test_deserialize_siteroot.py to test_site_deserializer.py.

Files changed:
M src/plone/restapi/tests/test_site_deserializer.py
D src/plone/restapi/tests/test_deserialize_siteroot.py

b'diff --git a/src/plone/restapi/tests/test_deserialize_siteroot.py b/src/plone/restapi/tests/test_deserialize_siteroot.py\ndeleted file mode 100644\nindex 9a2cc1e9..00000000\n--- a/src/plone/restapi/tests/test_deserialize_siteroot.py\n+++ /dev/null\n@@ -1,46 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.restapi.interfaces import IDeserializeFromJson\n-from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from zope.component import getMultiAdapter\n-\n-import json\n-import unittest\n-\n-\n-class TestDXContentDeserializer(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n-        context = context or self.portal\n-        self.request[\'BODY\'] = body\n-        deserializer = getMultiAdapter((context, self.request),\n-                                       IDeserializeFromJson)\n-        return deserializer(validate_all=validate_all)\n-\n-    def test_opt_in_tiles_deserializer(self):\n-        tiles = {\n-            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n-                "@type": "description"\n-            },\n-            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n-                "@type": "title"\n-            }\n-        }\n-        tiles_layout = {\n-            "items": [\n-                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n-                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n-            ]\n-        }\n-\n-        self.deserialize(\n-            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n-                json.dumps(tiles), json.dumps(tiles_layout)))\n-\n-        self.assertEqual(tiles, json.loads(self.portal.tiles))\n-        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 46f38550..4b7a81f0 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -2,10 +2,11 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n+from six.moves import range\n from zope.component import getMultiAdapter\n \n+import json\n import unittest\n-from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -38,3 +39,42 @@ def test_set_layout(self):\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+\n+\n+class TestSiteRootDeserializer(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+        context = context or self.portal\n+        self.request[\'BODY\'] = body\n+        deserializer = getMultiAdapter((context, self.request),\n+                                       IDeserializeFromJson)\n+        return deserializer(validate_all=validate_all)\n+\n+    def test_opt_in_tiles_deserializer(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n+                json.dumps(tiles), json.dumps(tiles_layout)))\n+\n+        self.assertEqual(tiles, json.loads(self.portal.tiles))\n+        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-16T19:03:45+01:00
Author: Timo Stollenwerk (tisto) <tisto@plone.org>
Commit: https://github.com/plone/plone.restapi/commit/18009027b9c8d3d43fd09005af7f081a48061dc9

Improve wording for #671 changelog.

Files changed:
M news/671.feature

b"diff --git a/news/671.feature b/news/671.feature\nindex 7bf5f67d..c7ded575 100644\n--- a/news/671.feature\n+++ b/news/671.feature\n@@ -1,7 +1,5 @@\n-Improved serialization/deserialization of the Plone Site root to make\n-possible an opt-in to support Tiles attributes on it. The @workflow endpoint\n-now answers an empty object instead of a 404 for the Plone Site Root object,\n-hiding the implementation details (the Plone Site Root has no workflow for\n-historical reasons) and equalizing it to the other content types, making the\n-API more consistent.\n+Enhance site root to serialize and deserialize 'tiles' and 'tiles_layout' attributes.\n+[sneridagh]\n+\n+Fix @workflow endpoint on site root to return an empty object instead of a 404.\n [sneridagh]\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-02-16T21:08:12+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/1723564758e48616b2de37c1f5aea25f74ef1dd5

Merge pull request #672 from plone/improveplonesiteapi

Improve Plone Site Root object API

Files changed:
A news/671.feature
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/services/workflow/configure.zcml
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_workflow.py

b'diff --git a/news/671.feature b/news/671.feature\nnew file mode 100644\nindex 00000000..c7ded575\n--- /dev/null\n+++ b/news/671.feature\n@@ -0,0 +1,5 @@\n+Enhance site root to serialize and deserialize \'tiles\' and \'tiles_layout\' attributes.\n+[sneridagh]\n+\n+Fix @workflow endpoint on site root to return an empty object instead of a 404.\n+[sneridagh]\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 7b749383..949fd630 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -8,6 +8,8 @@\n from plone.restapi.deserializer.mixins import OrderingMixin\n from zope.publisher.interfaces import IRequest\n \n+import json\n+\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n@@ -33,4 +35,23 @@ def __call__(self, validate_all=False):\n             data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n         self.handle_ordering(data)\n \n+        # Volto Tiles on the Plone Site root faker\n+        if \'tiles\' in data:\n+            if not getattr(self.context, \'tiles\', False):\n+                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+\n+        if \'tiles_layout\' in data:\n+            if not getattr(self.context, \'tiles_layout\', False):\n+                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+\n+        if \'title\' in data:\n+            self.context.setTitle(data[\'title\'])\n+\n+        if \'description\' in data:\n+            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+\n         return self.context\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 9330ad27..41445a5c 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -10,6 +10,8 @@\n from zope.interface import Interface\n from zope.interface import implementer\n \n+import json\n+\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n@@ -44,7 +46,10 @@ def __call__(self, version=None):\n             \'@type\': \'Plone Site\',\n             \'title\': self.context.Title(),\n             \'parent\': {},\n-            \'is_folderish\': True\n+            \'is_folderish\': True,\n+            \'description\': self.context.description,\n+            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n+            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n         }\n \n         # Insert expandable elements\ndiff --git a/src/plone/restapi/services/workflow/configure.zcml b/src/plone/restapi/services/workflow/configure.zcml\nindex e26831d0..6f77abef 100644\n--- a/src/plone/restapi/services/workflow/configure.zcml\n+++ b/src/plone/restapi/services/workflow/configure.zcml\n@@ -3,6 +3,14 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <plone:service\n+    method="GET"\n+    name="@workflow"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".info.WorkflowInfoService"\n+    permission="zope2.View"\n+    />\n+\n   <plone:service\n     method="GET"\n     name="@workflow"\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex 25a2aa94..a4cb0e54 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -2,6 +2,7 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.interfaces._content import IWorkflowAware\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n@@ -28,6 +29,14 @@ def __call__(self, expand=False):\n         if not expand:\n             return result\n \n+        # Prevent 404 on site root on workflow request\n+        # Although 404 will be more semantic, for the sake of uniformity of the\n+        # API we fake the response to the endpoint by providing an empty\n+        # response instead of a 404.\n+        if IPloneSiteRoot.providedBy(self.context):\n+            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            return result\n+\n         wftool = getToolByName(self.context, \'portal_workflow\')\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\n@@ -69,6 +78,7 @@ def __call__(self, expand=False):\n class WorkflowInfoService(Service):\n     """Get workflow information\n     """\n+\n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n         return info(expand=True)[\'workflow\']\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 8ce3cff3..3dabbdc5 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone/", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 0b2f0231..66922a5e 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex e4c60772..6d1748e1 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -12,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n \n+import json\n import os\n import unittest\n \n@@ -370,3 +371,52 @@ def test_serialize_to_json_collection(self):\n             ],\n             self.serialize(self.portal.collection1).get(\'items\')\n         )\n+\n+    def test_serialize_returns_site_root_common(self):\n+        self.assertIn(\n+            \'title\',\n+            self.serialize(self.portal),\n+        )\n+        self.assertIn(\n+            \'description\',\n+            self.serialize(self.portal)\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            {}\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            {}\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_present(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+        self.portal.manage_addProperty(\n+            \'tiles\', json.dumps(tiles), \'string\')\n+        self.portal.manage_addProperty(\n+            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n+\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            tiles\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            tiles_layout\n+        )\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 46f38550..4b7a81f0 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -2,10 +2,11 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n+from six.moves import range\n from zope.component import getMultiAdapter\n \n+import json\n import unittest\n-from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -38,3 +39,42 @@ def test_set_layout(self):\n         self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+\n+\n+class TestSiteRootDeserializer(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+        context = context or self.portal\n+        self.request[\'BODY\'] = body\n+        deserializer = getMultiAdapter((context, self.request),\n+                                       IDeserializeFromJson)\n+        return deserializer(validate_all=validate_all)\n+\n+    def test_opt_in_tiles_deserializer(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n+                json.dumps(tiles), json.dumps(tiles_layout)))\n+\n+        self.assertEqual(tiles, json.loads(self.portal.tiles))\n+        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex ba957e24..0f4d0558 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -79,6 +79,14 @@ def test_expanded_workflow_info_in_content_serialization(self):\n         self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n         self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n \n+    def test_workflow_info_empty_on_siteroot(self):\n+        wfinfo = getMultiAdapter((self.portal, self.request),\n+                                 name=u\'GET_application_json_@workflow\')\n+        obj = wfinfo.reply()\n+\n+        self.assertEquals(obj[\'transitions\'], [])\n+        self.assertEquals(obj[\'history\'], [])\n+\n \n class TestWorkflowTransition(TestCase):\n \n'

