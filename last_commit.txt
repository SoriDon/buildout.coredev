Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T11:59:28+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/291e6b3f11b8d5c58607c026fb9c51cecff2f0ba

Initial alias push

Files changed:
A src/plone/restapi/services/aliases/__init__.py
A src/plone/restapi/services/aliases/add.py
A src/plone/restapi/services/aliases/configure.zcml
A src/plone/restapi/services/aliases/delete.py
A src/plone/restapi/services/aliases/get.py
M src/plone/restapi/services/configure.zcml

b'diff --git a/src/plone/restapi/services/aliases/__init__.py b/src/plone/restapi/services/aliases/__init__.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nnew file mode 100644\nindex 000000000..7005d2c23\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -0,0 +1,52 @@\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesPost(Service):\n+    """Creates a new alias"""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+\n+        data = json_body(self.request)\n+        import pdb\n+        pdb.set_trace()\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        # name = self.params.pop()\n+        # context = queryMultiAdapter(\n+        #     (self.context, self.request), name="dexterity-types"\n+        # )\n+        # context = context.publishTraverse(self.request, name)\n+        #\n+        # factory = data.get("factory", None)\n+        # if not factory:\n+        #     raise BadRequest("Missing parameter: \'factory\'")\n+\n+        self.request.response.setStatus(201)\n+        return {}\ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nnew file mode 100644\nindex 000000000..0dea9a01b\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -0,0 +1,31 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n+\n+  <plone:service\n+      method="GET"\n+      accept="application/json,application/schema+json"\n+      factory=".get.AliasesGet"\n+      for="*"\n+      permission="zope2.View"\n+      name="@aliases"\n+    />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".add.AliasesPost"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="plone.app.controlpanel.Overview"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.AliasesDelete"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="plone.app.controlpanel.Overview"\n+      name="@aliases"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nnew file mode 100644\nindex 000000000..ff64f3548\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -0,0 +1,60 @@\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import delete_field\n+from plone.restapi.types.utils import delete_fieldset\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesDelete(Service):\n+    """Deletes an alias from object"""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+        # if len(self.params) < 2:\n+        #     raise BadRequest("Missing parameter fieldname")\n+        # if len(self.params) > 2:\n+        #     raise BadRequest("Too many parameters")\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we don\'t get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+        import pdb\n+        pdb.set_trace()\n+        # context = queryMultiAdapter(\n+        #     (self.context, self.request), name="dexterity-types"\n+        # )\n+\n+        # Get content type SchemaContext\n+        # name = self.params.pop(0)\n+        # context = context.publishTraverse(self.request, name)\n+        #\n+        # name = self.params.pop(0)\n+        # try:\n+        #     context.publishTraverse(self.request, name)\n+        # except AttributeError:\n+        #     delete_fieldset(context, self.request, name)\n+        # else:\n+        #     delete_field(context, self.request, name)\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nnew file mode 100644\nindex 000000000..feb529379\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -0,0 +1,19 @@\n+from plone.restapi.services import Service\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+import json\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesGet(Service):\n+    def reply(self):\n+        # import pdb\n+        # pdb.set_trace()\n+        storage = getUtility(IRedirectionStorage)\n+        # portal = getSite()\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        redirects = storage.redirects(context_path)\n+        return {"aliases": json.dumps(redirects)}\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 7c9287335..443be79a8 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -12,6 +12,7 @@\n   <include package=".auth" />\n   <include package=".actions" />\n   <include package=".addons" />\n+  <include package=".aliases" />\n   <include package=".breadcrumbs" />\n   <include package=".content" />\n   <include package=".controlpanels" />\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T13:26:45+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/b9448d146da01f384b048f8b784250d0bcb323e5

Added @aliases object POST

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 7005d2c23..9347fb424 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -1,13 +1,15 @@\n from plone.restapi.deserializer import json_body\n from plone.restapi.interfaces import IPloneRestapiLayer\n from plone.restapi.services import Service\n-from zExceptions import BadRequest\n-from zope.component import queryMultiAdapter\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface import noLongerProvides\n from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+from plone.app.redirector.interfaces import IRedirectionStorage\n import plone.protect.interfaces\n+from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n+from zope.component import getMultiAdapter\n \n \n @implementer(IPublishTraverse)\n@@ -16,20 +18,15 @@ class AliasesPost(Service):\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n-        self.params = []\n-\n-    def publishTraverse(self, request, name):\n-        # Treat any path segments after /@types as parameters\n-        self.params.append(name)\n-        return self\n \n     def reply(self):\n-        if not self.params:\n-            raise BadRequest("Missing parameter typename")\n-\n         data = json_body(self.request)\n-        import pdb\n-        pdb.set_trace()\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("aliases", [])\n+\n+        if isinstance(aliases, str):\n+            aliases = [aliases, ]\n+\n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n@@ -38,15 +35,43 @@ def reply(self):\n         if IPloneRestapiLayer.providedBy(self.request):\n             noLongerProvides(self.request, IPloneRestapiLayer)\n \n-        # name = self.params.pop()\n-        # context = queryMultiAdapter(\n-        #     (self.context, self.request), name="dexterity-types"\n-        # )\n-        # context = context.publishTraverse(self.request, name)\n-        #\n-        # factory = data.get("factory", None)\n-        # if not factory:\n-        #     raise BadRequest("Missing parameter: \'factory\'")\n+        failed_aliases = []\n+        for alias in aliases:\n+            if alias.startswith(\'/\'):\n+                # Check navigation root\n+                alias = self.edit_for_navigation_root(alias)\n+            else:\n+                failed_aliases.append(alias)\n+                continue\n \n+            alias, err = absolutize_path(alias, is_source=True)\n+\n+            storage.add(\n+                alias,\n+                "/".join(self.context.getPhysicalPath()),\n+                manual=True,\n+            )\n+\n+        if len(failed_aliases) > 0:\n+            return {\n+                "type": "Error",\n+                "message": "Aliases must start with a / %s " % failed_aliases,\n+            }\n         self.request.response.setStatus(201)\n-        return {}\n+        return self.reply_no_content()\n+\n+    def edit_for_navigation_root(self, alias):\n+        # Check navigation root\n+        pps = getMultiAdapter(\n+            (self.context, self.request), name=\'plone_portal_state\'\n+        )\n+        nav_url = pps.navigation_root_url()\n+        portal_url = pps.portal_url()\n+        if nav_url != portal_url:\n+            # We are in a navigation root different from the portal root.\n+            # Update the path accordingly, unless the user already did this.\n+            extra = nav_url[len(portal_url):]\n+            if not alias.startswith(extra):\n+                alias = f\'{extra}{alias}\'\n+        # Finally, return the (possibly edited) redirection\n+        return alias\ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex 0dea9a01b..d21556fff 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -15,7 +15,7 @@\n   <plone:service\n       method="POST"\n       factory=".add.AliasesPost"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="*"\n       permission="plone.app.controlpanel.Overview"\n       name="@aliases"\n       />\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex feb529379..436621dca 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -10,10 +10,7 @@\n @implementer(IPublishTraverse)\n class AliasesGet(Service):\n     def reply(self):\n-        # import pdb\n-        # pdb.set_trace()\n         storage = getUtility(IRedirectionStorage)\n-        # portal = getSite()\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n         return {"aliases": json.dumps(redirects)}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T13:31:30+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/271beb973a697c69d2eecdb0929ffa3a799ac8f6

Remove extra lines

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 9347fb424..f3a013082 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -14,7 +14,7 @@\n \n @implementer(IPublishTraverse)\n class AliasesPost(Service):\n-    """Creates a new alias"""\n+    """Creates new aliases"""\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n@@ -31,10 +31,6 @@ def reply(self):\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        # Make sure we get the right dexterity-types adapter\n-        if IPloneRestapiLayer.providedBy(self.request):\n-            noLongerProvides(self.request, IPloneRestapiLayer)\n-\n         failed_aliases = []\n         for alias in aliases:\n             if alias.startswith(\'/\'):\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 436621dca..c6b2079b8 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -2,7 +2,6 @@\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n-from zope.component.hooks import getSite\n from plone.app.redirector.interfaces import IRedirectionStorage\n import json\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T15:41:58+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ce18904ebb44c9d578d8653f0a0f6f26226f0c84

Added @aliases DELETE.

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex f3a013082..8c1bef9f6 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -1,9 +1,7 @@\n from plone.restapi.deserializer import json_body\n-from plone.restapi.interfaces import IPloneRestapiLayer\n from plone.restapi.services import Service\n from zope.interface import alsoProvides\n from zope.interface import implementer\n-from zope.interface import noLongerProvides\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex d21556fff..f2f942d6e 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -23,7 +23,7 @@\n   <plone:service\n       method="DELETE"\n       factory=".delete.AliasesDelete"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="*"\n       permission="plone.app.controlpanel.Overview"\n       name="@aliases"\n       />\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex ff64f3548..bc9e72cd4 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -1,13 +1,11 @@\n-from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n-from plone.restapi.types.utils import delete_field\n-from plone.restapi.types.utils import delete_fieldset\n-from zExceptions import BadRequest\n-from zope.component import queryMultiAdapter\n from zope.interface import alsoProvides\n from zope.interface import implementer\n-from zope.interface import noLongerProvides\n from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n import plone.protect.interfaces\n \n \n@@ -17,44 +15,34 @@ class AliasesDelete(Service):\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n-        self.params = []\n-\n-    def publishTraverse(self, request, name):\n-        # Treat any path segments after /@types as parameters\n-        self.params.append(name)\n-        return self\n \n     def reply(self):\n-        if not self.params:\n-            raise BadRequest("Missing parameter typename")\n-        # if len(self.params) < 2:\n-        #     raise BadRequest("Missing parameter fieldname")\n-        # if len(self.params) > 2:\n-        #     raise BadRequest("Too many parameters")\n+        data = json_body(self.request)\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("aliases", [])\n+\n+        if isinstance(aliases, str):\n+            aliases = [aliases, ]\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n-        # Make sure we don\'t get the right dexterity-types adapter\n-        if IPloneRestapiLayer.providedBy(self.request):\n-            noLongerProvides(self.request, IPloneRestapiLayer)\n-        import pdb\n-        pdb.set_trace()\n-        # context = queryMultiAdapter(\n-        #     (self.context, self.request), name="dexterity-types"\n-        # )\n-\n-        # Get content type SchemaContext\n-        # name = self.params.pop(0)\n-        # context = context.publishTraverse(self.request, name)\n-        #\n-        # name = self.params.pop(0)\n-        # try:\n-        #     context.publishTraverse(self.request, name)\n-        # except AttributeError:\n-        #     delete_fieldset(context, self.request, name)\n-        # else:\n-        #     delete_field(context, self.request, name)\n+        failed_aliases = []\n+        for alias in aliases:\n+            alias, err = absolutize_path(alias, is_source=True)\n+\n+            try:\n+                storage.remove(alias)\n+            except KeyError:\n+                failed_aliases.append(alias)\n+                continue\n+\n+        if len(failed_aliases) > 0:\n+            return {\n+                "type": "Error",\n+                "message": "The following aliases are already removed %s " % failed_aliases,\n+            }\n \n+        self.request.response.setStatus(201)\n         return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex c6b2079b8..72e093eff 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -3,7 +3,6 @@\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\n-import json\n \n \n @implementer(IPublishTraverse)\n@@ -12,4 +11,4 @@ def reply(self):\n         storage = getUtility(IRedirectionStorage)\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n-        return {"aliases": json.dumps(redirects)}\n+        return {"aliases": redirects}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T16:03:03+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/27253c0ce84f55c6bbcfd57f1a3c940d83c1dd12

More errors.

Files changed:
M src/plone/restapi/services/aliases/add.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 8c1bef9f6..3d048fb11 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -40,6 +40,10 @@ def reply(self):\n \n             alias, err = absolutize_path(alias, is_source=True)\n \n+            if err:\n+                failed_aliases.append(alias)\n+                continue\n+\n             storage.add(\n                 alias,\n                 "/".join(self.context.getPhysicalPath()),\n@@ -49,7 +53,7 @@ def reply(self):\n         if len(failed_aliases) > 0:\n             return {\n                 "type": "Error",\n-                "message": "Aliases must start with a / %s " % failed_aliases,\n+                "message": "Couldn\'t add following aliases %s " % failed_aliases,\n             }\n         self.request.response.setStatus(201)\n         return self.reply_no_content()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T16:05:39+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/c3e1b97ea906eccb15011ce43e9fb30f4593666b

Merge branch 'master' of https://github.com/plone/plone.restapi into alias_controlpanel

Files changed:
A news/1359.bugfix
A news/1391.bugfix
M src/plone/restapi/services/history/get.py
M src/plone/restapi/tests/test_services_contextnavigation.py
M src/plone/restapi/tests/test_services_navigation.py

b'diff --git a/news/1359.bugfix b/news/1359.bugfix\nnew file mode 100644\nindex 000000000..63d46c2aa\n--- /dev/null\n+++ b/news/1359.bugfix\n@@ -0,0 +1,2 @@\n+Fix tests for changes in displayed_types. See https://github.com/plone/Products.CMFPlone/issues/3486\n+[pbauer]\n\\ No newline at end of file\ndiff --git a/news/1391.bugfix b/news/1391.bugfix\nnew file mode 100644\nindex 000000000..75d3e7f44\n--- /dev/null\n+++ b/news/1391.bugfix\n@@ -0,0 +1,2 @@\n+Fixed timestamp calculation in history service on Python 3.10.\n+[maurits]\ndiff --git a/src/plone/restapi/services/history/get.py b/src/plone/restapi/services/history/get.py\nindex 404eec5d2..22095e615 100644\n--- a/src/plone/restapi/services/history/get.py\n+++ b/src/plone/restapi/services/history/get.py\n@@ -71,7 +71,7 @@ def reply(self):\n             # Versioning entries use a timestamp,\n             # workflow ISO formatted string\n             if not isinstance(item["time"], str):\n-                item["time"] = dt.fromtimestamp(item["time"]).isoformat()\n+                item["time"] = dt.fromtimestamp(int(item["time"])).isoformat()\n \n             # The create event has an empty \'action\', but we like it to say\n             # \'Create\', alike the transition_title\ndiff --git a/src/plone/restapi/tests/test_services_contextnavigation.py b/src/plone/restapi/tests/test_services_contextnavigation.py\nindex de7341a21..102c348f0 100644\n--- a/src/plone/restapi/tests/test_services_contextnavigation.py\n+++ b/src/plone/restapi/tests/test_services_contextnavigation.py\n@@ -179,6 +179,20 @@ def test_contextnavigation_with_no_params_gets_only_top_level(self):\n         )\n \n     def test_contextnavigation_with_no_params_gets_only_top_level_mixed_content(self):\n+        # Use default setting of Plone 6\n+        from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n+\n+        registry = getUtility(IRegistry)\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        navigation_settings.displayed_types = (\n+            "Link",\n+            "News Item",\n+            "Folder",\n+            "Document",\n+            "Event",\n+            "Collection",\n+        )\n+        transaction.commit()\n         # With the context set to folder2 it should return a dict with\n         # currentItem set to True\n         response = self.api_session.get("/folder2/@contextnavigation")\n@@ -235,21 +249,6 @@ def test_contextnavigation_with_no_params_gets_only_top_level_mixed_content(self\n                     "title": "doc23",\n                     "type": "document",\n                 },\n-                {\n-                    "@id": "%s/folder2/file21/view" % base,\n-                    "description": "",\n-                    "href": "%s/folder2/file21/view" % base,\n-                    "icon": None,\n-                    "is_current": False,\n-                    "is_folderish": False,\n-                    "is_in_path": False,\n-                    "items": [],\n-                    "normalized_id": "file21",\n-                    "review_state": "",\n-                    "thumb": "",\n-                    "title": "file21",\n-                    "type": "file",\n-                },\n                 {\n                     "@id": "%s/folder2/folder21" % base,\n                     "description": "",\n@@ -524,14 +523,24 @@ def testNonStructuralFolderHidesChildren(self):\n         self.assertEqual(len(tree["items"][3]["items"][3]["items"]), 0)\n \n     def testTopLevel(self):\n+        # Use default setting of Plone 6\n+        registry = getUtility(IRegistry)\n+        registry["plone.displayed_types"] = (\n+            "Link",\n+            "News Item",\n+            "Folder",\n+            "Document",\n+            "Event",\n+            "Collection",\n+        )\n         base = self.portal.absolute_url()\n         view = self.renderer(self.portal.folder2.file21, opts(topLevel=1))\n         tree = view.getNavTree()\n         self.assertTrue(tree)\n-\n+        # before Plone 6.0.0a4 files and images were displayed in navigation.\n         self.assertEqual(\n             tree["items"][-1]["href"],\n-            "%s/folder2/folder21" % base,\n+            "%s/folder2/file21/view" % base,\n         )\n \n     def testTopLevelWithContextAboveLevel(self):\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 3a3c0bfad..bf23a49dc 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -98,6 +98,10 @@ def test_navigation_service(self):\n         )\n \n     def test_dont_broke_with_contents_without_review_state(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        displayed_types = settings.displayed_types\n+        settings.displayed_types = tuple(list(displayed_types) + ["File"])\n         createContentInContainer(\n             self.portal,\n             "File",\n@@ -121,6 +125,16 @@ def test_dont_broke_with_contents_without_review_state(self):\n         self.assertIsNone(response.json()["items"][1]["items"][3]["review_state"])\n \n     def test_navigation_sorting(self):\n+        registry = getUtility(IRegistry)\n+        registry["plone.displayed_types"] = (\n+            "Link",\n+            "News Item",\n+            "Folder",\n+            "Document",\n+            "Event",\n+            "Collection",\n+            "File",\n+        )\n         createContentInContainer(\n             self.portal,\n             "File",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:00:42+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ff606b6a42781a2bb29e98ed0c0d222b7eff5e0c

Added documentation tests.

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex fe6d391de..4c3541dc1 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1782,6 +1782,25 @@ def test_documentation_expansion(self):\n         response = self.api_session.get("/front-page?expand=breadcrumbs,workflow")\n         save_request_and_response_for_docs("expansion", response)\n \n+    def test_aliases_add(self):\n+        # Add a reply\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {"aliases": ["/new-alias", "new-alias-2"]}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs("aliases_add", response)\n+\n+    def test_aliases_get(self):\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {"text": "My NEW comment"}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("aliases_get", response)\n+\n+    def test_aliases_delete(self):\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {"aliases": ["/new-alias"]}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("aliases_delete", response)\n+\n \n class TestControlPanelDocumentation(TestDocumentationBase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:05:18+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/785c0fb8a2a8243b5097d26ab0dad19ab9ea5c99

Add http-examples.

Files changed:
A src/plone/restapi/tests/http-examples/aliases_add.req
A src/plone/restapi/tests/http-examples/aliases_add.resp
A src/plone/restapi/tests/http-examples/aliases_delete.req
A src/plone/restapi/tests/http-examples/aliases_delete.resp
A src/plone/restapi/tests/http-examples/aliases_get.req
A src/plone/restapi/tests/http-examples/aliases_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nnew file mode 100644\nindex 000000000..8251f5ada\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -0,0 +1,11 @@\n+POST /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "aliases": [\n+        "/new-alias",\n+        "new-alias-2"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nnew file mode 100644\nindex 000000000..d1562ee84\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Couldn\'t add following aliases [\'new-alias-2\'] ",\n+    "type": "Error"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nnew file mode 100644\nindex 000000000..5b27de1ff\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -0,0 +1,10 @@\n+PATCH /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "aliases": [\n+        "/new-alias"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nnew file mode 100644\nindex 000000000..a915b07f3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 404 Not Found\n+Content-Type: application/json\n+\n+{\n+    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n+    "type": "NotFound"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.req b/src/plone/restapi/tests/http-examples/aliases_get.req\nnew file mode 100644\nindex 000000000..88148ce2d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.req\n@@ -0,0 +1,8 @@\n+PATCH /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "text": "My NEW comment"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nnew file mode 100644\nindex 000000000..a915b07f3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 404 Not Found\n+Content-Type: application/json\n+\n+{\n+    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n+    "type": "NotFound"\n+}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:08:11+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/79fad7acbf526bbf09e880ea8058e165bdf1b5ad

Fix doc tests.

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 4c3541dc1..5d6ba6e6c 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1783,19 +1783,20 @@ def test_documentation_expansion(self):\n         save_request_and_response_for_docs("expansion", response)\n \n     def test_aliases_add(self):\n-        # Add a reply\n+        # Add 2 aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"aliases": ["/new-alias", "new-alias-2"]}\n+        payload = {"aliases": ["/new-alias", "/new-alias-2"]}\n         response = self.api_session.post(url, json=payload)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_get(self):\n+        # Get aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"text": "My NEW comment"}\n-        response = self.api_session.patch(url, json=payload)\n+        response = self.api_session.patch(url)\n         save_request_and_response_for_docs("aliases_get", response)\n \n     def test_aliases_delete(self):\n+        # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n         payload = {"aliases": ["/new-alias"]}\n         response = self.api_session.patch(url, json=payload)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:13:10+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/deec06ffa345cfd4decefb6bd5ea3de368234439

update test examples.

Files changed:
M src/plone/restapi/tests/http-examples/aliases_add.req
M src/plone/restapi/tests/http-examples/aliases_add.resp
M src/plone/restapi/tests/http-examples/aliases_get.req

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nindex 8251f5ada..92f20d861 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -6,6 +6,6 @@ Content-Type: application/json\n {\n     "aliases": [\n         "/new-alias",\n-        "new-alias-2"\n+        "/new-alias-2"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nindex d1562ee84..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -1,7 +1,2 @@\n-HTTP/1.1 200 OK\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n \n-{\n-    "message": "Couldn\'t add following aliases [\'new-alias-2\'] ",\n-    "type": "Error"\n-}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.req b/src/plone/restapi/tests/http-examples/aliases_get.req\nindex 88148ce2d..c68de651f 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.req\n@@ -1,8 +1,3 @@\n PATCH /plone/front-page/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n-Content-Type: application/json\n-\n-{\n-    "text": "My NEW comment"\n-}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:39:58+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/25bb980e15ca96383907493d9ece9ec4227173a9

Update doc tests.

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/services/aliases/get.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 3d048fb11..e654a05ef 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -56,7 +56,7 @@ def reply(self):\n                 "message": "Couldn\'t add following aliases %s " % failed_aliases,\n             }\n         self.request.response.setStatus(201)\n-        return self.reply_no_content()\n+        return {"message": "Successfully added the aliases %s" % aliases}\n \n     def edit_for_navigation_root(self, alias):\n         # Check navigation root\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex bc9e72cd4..5d61cc942 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -45,4 +45,4 @@ def reply(self):\n             }\n \n         self.request.response.setStatus(201)\n-        return self.reply_no_content()\n+        return {"message": "Successfully deleted the aliases %s" % aliases}\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 72e093eff..03e8b4987 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -11,4 +11,5 @@ def reply(self):\n         storage = getUtility(IRedirectionStorage)\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n+        self.request.response.setStatus(201)\n         return {"aliases": redirects}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 5d6ba6e6c..61f73d648 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1785,21 +1785,21 @@ def test_documentation_expansion(self):\n     def test_aliases_add(self):\n         # Add 2 aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"aliases": ["/new-alias", "/new-alias-2"]}\n+        payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_get(self):\n         # Get aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        response = self.api_session.patch(url)\n+        response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_get", response)\n \n     def test_aliases_delete(self):\n         # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n         payload = {"aliases": ["/new-alias"]}\n-        response = self.api_session.patch(url, json=payload)\n+        response = self.api_session.delete(url, json=payload)\n         save_request_and_response_for_docs("aliases_delete", response)\n \n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T17:45:24+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/127441846913dca25f111db692214ad3873d88b4

Update alias tests.

Files changed:
M src/plone/restapi/tests/http-examples/aliases_add.req
M src/plone/restapi/tests/http-examples/aliases_add.resp
M src/plone/restapi/tests/http-examples/aliases_delete.req
M src/plone/restapi/tests/http-examples/aliases_delete.resp
M src/plone/restapi/tests/http-examples/aliases_get.req
M src/plone/restapi/tests/http-examples/aliases_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nindex 92f20d861..5c46aba1c 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -6,6 +6,7 @@ Content-Type: application/json\n {\n     "aliases": [\n         "/new-alias",\n-        "/new-alias-2"\n+        "/old-alias",\n+        "/final-alias"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nindex 0074ded3b..42fda5f90 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -1,2 +1,6 @@\n-HTTP/1.1 204 No Content\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n \n+{\n+    "message": "Successfully added the aliases [\'/new-alias\', \'/old-alias\', \'/final-alias\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nindex 5b27de1ff..56315540c 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -1,4 +1,4 @@\n-PATCH /plone/front-page/@aliases HTTP/1.1\n+DELETE /plone/front-page/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nindex a915b07f3..19a739a17 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -1,7 +1,7 @@\n-HTTP/1.1 404 Not Found\n+HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n-    "type": "NotFound"\n+    "message": "The following aliases are already removed [\'/plone/new-alias\'] ",\n+    "type": "Error"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.req b/src/plone/restapi/tests/http-examples/aliases_get.req\nindex c68de651f..23046fa94 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.req\n@@ -1,3 +1,3 @@\n-PATCH /plone/front-page/@aliases HTTP/1.1\n+GET /plone/front-page/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex a915b07f3..fc519137f 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -1,7 +1,6 @@\n-HTTP/1.1 404 Not Found\n+HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n-    "type": "NotFound"\n+    "aliases": []\n }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T18:02:32+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ae1b4f94aa810e74f6f1017b7e4908293520df84

Remove portal root from url

Files changed:
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 03e8b4987..cdb04ad47 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -3,6 +3,7 @@\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\n+from zope.component.hooks import getSite\n \n \n @implementer(IPublishTraverse)\n@@ -11,5 +12,13 @@ def reply(self):\n         storage = getUtility(IRedirectionStorage)\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n+        aliases = [deroot_path(alias) for alias in redirects]\n         self.request.response.setStatus(201)\n-        return {"aliases": redirects}\n+        return {"aliases": aliases}\n+\n+\n+def deroot_path(path):\n+    """ Remove the portal root from alias """\n+    portal = getSite()\n+    root_path = "/".join(portal.getPhysicalPath())\n+    return path.replace(root_path, "", 1)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-04T18:02:46+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/90e97e2f76f85bbdf1342051eeaf14450b3a001d

Merge branch 'alias_controlpanel' of https://github.com/plone/plone.restapi into alias_controlpanel

Files changed:
M src/plone/restapi/tests/http-examples/aliases_add.req
M src/plone/restapi/tests/http-examples/aliases_add.resp
M src/plone/restapi/tests/http-examples/aliases_delete.req
M src/plone/restapi/tests/http-examples/aliases_delete.resp
M src/plone/restapi/tests/http-examples/aliases_get.req
M src/plone/restapi/tests/http-examples/aliases_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nindex 92f20d861..5c46aba1c 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -6,6 +6,7 @@ Content-Type: application/json\n {\n     "aliases": [\n         "/new-alias",\n-        "/new-alias-2"\n+        "/old-alias",\n+        "/final-alias"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nindex 0074ded3b..42fda5f90 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -1,2 +1,6 @@\n-HTTP/1.1 204 No Content\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n \n+{\n+    "message": "Successfully added the aliases [\'/new-alias\', \'/old-alias\', \'/final-alias\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nindex 5b27de1ff..56315540c 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -1,4 +1,4 @@\n-PATCH /plone/front-page/@aliases HTTP/1.1\n+DELETE /plone/front-page/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nindex a915b07f3..19a739a17 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -1,7 +1,7 @@\n-HTTP/1.1 404 Not Found\n+HTTP/1.1 200 OK\n Content-Type: application/json\n \n {\n-    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n-    "type": "NotFound"\n+    "message": "The following aliases are already removed [\'/plone/new-alias\'] ",\n+    "type": "Error"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.req b/src/plone/restapi/tests/http-examples/aliases_get.req\nindex c68de651f..23046fa94 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.req\n@@ -1,3 +1,3 @@\n-PATCH /plone/front-page/@aliases HTTP/1.1\n+GET /plone/front-page/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex a915b07f3..fc519137f 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -1,7 +1,6 @@\n-HTTP/1.1 404 Not Found\n+HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "message": "Resource not found: http://localhost:55001/plone/front-page/@aliases",\n-    "type": "NotFound"\n+    "aliases": []\n }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T11:37:13+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/70b7415fc171c7466a12090c503d1bc12f4b6384

Modified aliases endpoint permissions.

Files changed:
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex f2f942d6e..4b54296cf 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -16,7 +16,7 @@\n       method="POST"\n       factory=".add.AliasesPost"\n       for="*"\n-      permission="plone.app.controlpanel.Overview"\n+      permission="cmf.ModifyPortalContent"\n       name="@aliases"\n       />\n \n@@ -24,7 +24,7 @@\n       method="DELETE"\n       factory=".delete.AliasesDelete"\n       for="*"\n-      permission="plone.app.controlpanel.Overview"\n+      permission="cmf.ModifyPortalContent"\n       name="@aliases"\n       />\n \ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex 5d61cc942..e1ee82e5b 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -6,6 +6,7 @@\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\n from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n+from plone.restapi.services.aliases.get import deroot_path\n import plone.protect.interfaces\n \n \n@@ -35,6 +36,7 @@ def reply(self):\n             try:\n                 storage.remove(alias)\n             except KeyError:\n+                alias = deroot_path(alias)\n                 failed_aliases.append(alias)\n                 continue\n \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 61f73d648..36a91c0eb 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1783,25 +1783,25 @@ def test_documentation_expansion(self):\n         save_request_and_response_for_docs("expansion", response)\n \n     def test_aliases_add(self):\n-        # Add 2 aliases\n+        # Add 3 aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n         payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n         save_request_and_response_for_docs("aliases_add", response)\n \n-    def test_aliases_get(self):\n-        # Get aliases\n-        url = f"{self.document.absolute_url()}/@aliases"\n-        response = self.api_session.get(url)\n-        save_request_and_response_for_docs("aliases_get", response)\n-\n     def test_aliases_delete(self):\n         # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"aliases": ["/new-alias"]}\n+        payload = {"aliases": ["/old-alias"]}\n         response = self.api_session.delete(url, json=payload)\n         save_request_and_response_for_docs("aliases_delete", response)\n \n+    def test_aliases_get(self):\n+        # Get aliases\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs("aliases_get", response)\n+\n \n class TestControlPanelDocumentation(TestDocumentationBase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T12:49:36+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/253c365f956f03f6a60a8069e35f4be901256d71

Fix aliases test.

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 36a91c0eb..b031285b5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1787,18 +1787,28 @@ def test_aliases_add(self):\n         url = f"{self.document.absolute_url()}/@aliases"\n         payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n+        response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_delete(self):\n         # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n+        response = self.api_session.post(url, json=payload)\n+\n         payload = {"aliases": ["/old-alias"]}\n         response = self.api_session.delete(url, json=payload)\n+\n+        response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_delete", response)\n \n     def test_aliases_get(self):\n         # Get aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n+\n+        payload = {"aliases": "/simple-alias"}\n+        response = self.api_session.post(url, json=payload)\n+\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_get", response)\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T13:00:11+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/796c0172d102f758aefddd213bb1ec9cd8786a2d

Fix tests

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex b031285b5..2e8784c5a 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1787,7 +1787,6 @@ def test_aliases_add(self):\n         url = f"{self.document.absolute_url()}/@aliases"\n         payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n-        response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_delete(self):\n@@ -1799,7 +1798,6 @@ def test_aliases_delete(self):\n         payload = {"aliases": ["/old-alias"]}\n         response = self.api_session.delete(url, json=payload)\n \n-        response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_delete", response)\n \n     def test_aliases_get(self):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T13:27:01+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/cd3acb2c1d481585380ac306b1cbac872a19039e

Update http examples.

Files changed:
M src/plone/restapi/tests/http-examples/aliases_delete.req
M src/plone/restapi/tests/http-examples/aliases_delete.resp
M src/plone/restapi/tests/http-examples/aliases_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nindex 56315540c..cbde7dfd4 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -5,6 +5,6 @@ Content-Type: application/json\n \n {\n     "aliases": [\n-        "/new-alias"\n+        "/old-alias"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nindex 19a739a17..25a92fdb2 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -1,7 +1,6 @@\n-HTTP/1.1 200 OK\n+HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "message": "The following aliases are already removed [\'/plone/new-alias\'] ",\n-    "type": "Error"\n+    "message": "Successfully deleted the aliases [\'/old-alias\']"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex fc519137f..f5b1fba85 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -2,5 +2,7 @@ HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "aliases": []\n+    "aliases": [\n+        "/simple-alias"\n+    ]\n }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T14:54:21+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/e7255bc9cab3ca70f285f23f419d485ba557393f

Ran black.

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex e654a05ef..6307f2dcc 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -23,7 +23,9 @@ def reply(self):\n         aliases = data.get("aliases", [])\n \n         if isinstance(aliases, str):\n-            aliases = [aliases, ]\n+            aliases = [\n+                aliases,\n+            ]\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -31,7 +33,7 @@ def reply(self):\n \n         failed_aliases = []\n         for alias in aliases:\n-            if alias.startswith(\'/\'):\n+            if alias.startswith("/"):\n                 # Check navigation root\n                 alias = self.edit_for_navigation_root(alias)\n             else:\n@@ -60,16 +62,14 @@ def reply(self):\n \n     def edit_for_navigation_root(self, alias):\n         # Check navigation root\n-        pps = getMultiAdapter(\n-            (self.context, self.request), name=\'plone_portal_state\'\n-        )\n+        pps = getMultiAdapter((self.context, self.request), name="plone_portal_state")\n         nav_url = pps.navigation_root_url()\n         portal_url = pps.portal_url()\n         if nav_url != portal_url:\n             # We are in a navigation root different from the portal root.\n             # Update the path accordingly, unless the user already did this.\n-            extra = nav_url[len(portal_url):]\n+            extra = nav_url[len(portal_url) :]\n             if not alias.startswith(extra):\n-                alias = f\'{extra}{alias}\'\n+                alias = f"{extra}{alias}"\n         # Finally, return the (possibly edited) redirection\n         return alias\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex e1ee82e5b..ef2a34742 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -23,7 +23,9 @@ def reply(self):\n         aliases = data.get("aliases", [])\n \n         if isinstance(aliases, str):\n-            aliases = [aliases, ]\n+            aliases = [\n+                aliases,\n+            ]\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -43,7 +45,8 @@ def reply(self):\n         if len(failed_aliases) > 0:\n             return {\n                 "type": "Error",\n-                "message": "The following aliases are already removed %s " % failed_aliases,\n+                "message": "The following aliases are already removed %s "\n+                % failed_aliases,\n             }\n \n         self.request.response.setStatus(201)\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex cdb04ad47..483d95f91 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -18,7 +18,7 @@ def reply(self):\n \n \n def deroot_path(path):\n-    """ Remove the portal root from alias """\n+    """Remove the portal root from alias"""\n     portal = getSite()\n     root_path = "/".join(portal.getPhysicalPath())\n     return path.replace(root_path, "", 1)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T15:00:05+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/a282cd38f5631e90a17fc6c93a34ae7a52c4130e

Added news feature.

Files changed:
A news/1393.feature

b'diff --git a/news/1393.feature b/news/1393.feature\nnew file mode 100644\nindex 000000000..eb37562e1\n--- /dev/null\n+++ b/news/1393.feature\n@@ -0,0 +1,2 @@\n+Added @aliases endpoint with GET/POST/DELETE\n+[iulianpetchesi]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-05T16:04:08+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/bb60536997319e31f348cb73f99660348bc6e273

ZPretty.

Files changed:
M src/plone/restapi/services/aliases/configure.zcml

b'diff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex 4b54296cf..bdfd1d658 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -10,7 +10,7 @@\n       for="*"\n       permission="zope2.View"\n       name="@aliases"\n-    />\n+      />\n \n   <plone:service\n       method="POST"\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T13:30:40+03:00
Author: Petchesi Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/4023828e1d308a864b45039599a2efab6ebd3fd6

@aliases Root endpoints (#1406)

* Initial commit.

* Added GET root endpoint.

* Added @aliases root POST

* Refs #1393 - Add @aliases endpoint docs

* Flake8 &amp; delete endpoint

* Black

Co-authored-by: Alin Voinea &lt;contact@avoinea.com&gt;

Files changed:
A docs/source/aliases.md
M docs/source/index.md
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/get.py

b'diff --git a/docs/source/aliases.md b/docs/source/aliases.md\nnew file mode 100644\nindex 000000000..bd9b10416\n--- /dev/null\n+++ b/docs/source/aliases.md\n@@ -0,0 +1,70 @@\n+---\n+html_meta:\n+  "description": "Aliases is a mechanism to redirect old URLs to new ones."\n+  "property=og:description": "Aliases is a mechanism to redirect old URLs to new ones."\n+  "property=og:title": "Aliases"\n+  "keywords": "Plone, plone.app.redirector, redirector, REST, API, Aliases"\n+---\n+\n+# Aliases\n+\n+Aliases is a mechanism to redirect old URLs to new ones.\n+\n+When an object is moved (renamed or cut/pasted into a different location), the redirection storage will remember the old path. It is smart enough to deal with transitive references (if we have a -> b and then add b -> c, it is replaced by a reference a -> c) and circular references (attempting to add a -> a does nothing).\n+\n+The API consumer can create, read, and delete aliases.\n+\n+\n+| Verb     | URL         | Action                                 |\n+| -------- | ----------- | -------------------------------------- |\n+| `POST`   | `/@aliases` | Add one or more aliases                |\n+| `GET`    | `/@aliases` | List all aliases                       |\n+| `DELETE` | `/@aliases` | Remove one or more aliases             |\n+\n+## Adding new aliases on a Content Object\n+\n+By default, Plone automatically creates a new alias when an object is renamed or moved. Still, you can also create aliases manually.\n+\n+To create a new alias, send a POST request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_add.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_add.resp\n+:language: http\n+```\n+\n+## Listing aliases of a Content Object\n+\n+Listing aliases of a resource you can send a `GET` request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_get.resp\n+:language: http\n+```\n+\n+\n+## Removing aliases of a Content Object\n+\n+To remove aliases of an object, send a `DELETE` request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_delete.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_delete.resp\n+:language: http\n+```\ndiff --git a/docs/source/index.md b/docs/source/index.md\nindex a2ba0cd3b..2bc47321d 100644\n--- a/docs/source/index.md\n+++ b/docs/source/index.md\n@@ -33,6 +33,7 @@ expansion\n actions\n workflow\n workingcopy\n+aliases\n locking\n sharing\n registry\ndiff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 6307f2dcc..8069c41c2 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -5,9 +5,11 @@\n from zope.publisher.interfaces import IPublishTraverse\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\n-import plone.protect.interfaces\n from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n from zope.component import getMultiAdapter\n+from zExceptions import BadRequest\n+from plone.restapi import _\n+import plone.protect.interfaces\n \n \n @implementer(IPublishTraverse)\n@@ -73,3 +75,44 @@ def edit_for_navigation_root(self, alias):\n                 alias = f"{extra}{alias}"\n         # Finally, return the (possibly edited) redirection\n         return alias\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesRootPost(Service):\n+    """Creates new aliases via controlpanel"""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+\n+    def reply(self):\n+        data = json_body(self.request)\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("aliases", [])\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        for alias in aliases:\n+            redirection = alias["path"]\n+            target = alias["redirect-to"]\n+            abs_redirection, err = absolutize_path(redirection, is_source=True)\n+            abs_target, target_err = absolutize_path(target, is_source=False)\n+\n+            if err and target_err:\n+                err = f"{err} {target_err}"\n+            elif target_err:\n+                err = target_err\n+            else:\n+                if abs_redirection == abs_target:\n+                    err = _(\n+                        "Alternative urls that point to themselves will cause"\n+                        " an endless cycle of redirects."\n+                    )\n+            if err:\n+                raise BadRequest(err)\n+\n+            storage.add(abs_redirection, abs_target, manual=True)\n+\n+        self.request.response.setStatus(201)\n+        return {"message": "Successfully added the aliases %s" % aliases}\ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex bdfd1d658..62b8e5aba 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -12,6 +12,15 @@\n       name="@aliases"\n       />\n \n+  <plone:service\n+      method="GET"\n+      accept="application/json,application/schema+json"\n+      factory=".get.AliasesRootGet"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="zope2.View"\n+      name="@aliases"\n+      />\n+\n   <plone:service\n       method="POST"\n       factory=".add.AliasesPost"\n@@ -20,6 +29,14 @@\n       name="@aliases"\n       />\n \n+  <plone:service\n+      method="POST"\n+      factory=".add.AliasesRootPost"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n   <plone:service\n       method="DELETE"\n       factory=".delete.AliasesDelete"\n@@ -28,4 +45,12 @@\n       name="@aliases"\n       />\n \n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.AliasesDelete"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 483d95f91..503252a43 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -4,6 +4,8 @@\n from zope.component import getUtility\n from plone.app.redirector.interfaces import IRedirectionStorage\n from zope.component.hooks import getSite\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectsControlPanel\n+from plone.restapi.serializer.converters import datetimelike_to_iso\n \n \n @implementer(IPublishTraverse)\n@@ -17,6 +19,24 @@ def reply(self):\n         return {"aliases": aliases}\n \n \n+@implementer(IPublishTraverse)\n+class AliasesRootGet(Service):\n+    def reply(self):\n+        """\n+        redirect-to - target\n+        path        - path\n+        redirect    - full path with root\n+        """\n+        batch = RedirectsControlPanel(self.context, self.request).redirects()\n+        redirects = [entry for entry in batch]\n+\n+        for redirect in redirects:\n+            redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n+        self.request.response.setStatus(201)\n+\n+        return {"aliases": redirects}\n+\n+\n def deroot_path(path):\n     """Remove the portal root from alias"""\n     portal = getSite()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T13:56:09+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/013df0b78d36a4949dba1aaf01b288ee57471314

Added root docs tests.

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 2e8784c5a..acbabbff3 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1810,6 +1810,51 @@ def test_aliases_get(self):\n         response = self.api_session.get(url)\n         save_request_and_response_for_docs("aliases_get", response)\n \n+    def test_aliases_root_add(self):\n+        # Add 2 aliases\n+        url = f"{self.absolute_url()}/@aliases"\n+        payload = {\n+            "aliases": [\n+                {"path": "/blabla", "redirect-to": "/front-page"},\n+                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+            ]\n+        }\n+\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs("aliases_root_add", response)\n+\n+    def test_aliases_root_delete(self):\n+        # Delete 1 alias\n+        url = f"{self.absolute_url()}/@aliases"\n+        payload = {\n+            "aliases": [\n+                {"path": "/blabla", "redirect-to": "/front-page"},\n+                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        payload = {"aliases": ["/blabla"]}\n+        response = self.api_session.delete(url, json=payload)\n+\n+        save_request_and_response_for_docs("aliases_root_delete", response)\n+\n+    def test_aliases_root_get(self):\n+        # Get aliases\n+        url = f"{self.absolute_url()}/@aliases"\n+        query = "?q=/fizzbuzz"\n+\n+        payload = {\n+            "aliases": [\n+                {"path": "/blabla", "redirect-to": "/front-page"},\n+                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        response = self.api_session.get(url + query)\n+        save_request_and_response_for_docs("aliases_root_get", response)\n+\n \n class TestControlPanelDocumentation(TestDocumentationBase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T14:04:25+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ab3f00be398723a2960d47f824ba4a6f593ba294

Added alias root docs

Files changed:
A src/plone/restapi/tests/http-examples/aliases_root_add.req
A src/plone/restapi/tests/http-examples/aliases_root_add.resp
A src/plone/restapi/tests/http-examples/aliases_root_delete.req
A src/plone/restapi/tests/http-examples/aliases_root_delete.resp
A src/plone/restapi/tests/http-examples/aliases_root_get.req
A src/plone/restapi/tests/http-examples/aliases_root_get.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nnew file mode 100644\nindex 000000000..d1efdcfa3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -0,0 +1,17 @@\n+POST /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "aliases": [\n+        {\n+            "path": "/blabla",\n+            "redirect-to": "/front-page"\n+        },\n+        {\n+            "path": "/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.resp b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\nnew file mode 100644\nindex 000000000..fcfbdd7a7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully added the aliases [{\'path\': \'/blabla\', \'redirect-to\': \'/front-page\'}, {\'path\': \'/fizzbuzz\', \'redirect-to\': \'/front-page\'}]"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.req b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\nnew file mode 100644\nindex 000000000..d1bdbf8c9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n@@ -0,0 +1,10 @@\n+DELETE /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "aliases": [\n+        "/blabla"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.resp b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\nnew file mode 100644\nindex 000000000..451c3712a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully deleted the aliases [\'/blabla\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.req b/src/plone/restapi/tests/http-examples/aliases_root_get.req\nnew file mode 100644\nindex 000000000..8d806ede1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/@aliases?q=/fizzbuzz HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nnew file mode 100644\nindex 000000000..8ecb53c24\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -0,0 +1,14 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "aliases": [\n+        {\n+            "datetime": "2022-05-06T11:01:57+00:00",\n+            "manual": true,\n+            "path": "/fizzbuzz",\n+            "redirect": "/plone/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex acbabbff3..0e1b15127 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1812,7 +1812,7 @@ def test_aliases_get(self):\n \n     def test_aliases_root_add(self):\n         # Add 2 aliases\n-        url = f"{self.absolute_url()}/@aliases"\n+        url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n                 {"path": "/blabla", "redirect-to": "/front-page"},\n@@ -1825,7 +1825,7 @@ def test_aliases_root_add(self):\n \n     def test_aliases_root_delete(self):\n         # Delete 1 alias\n-        url = f"{self.absolute_url()}/@aliases"\n+        url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n                 {"path": "/blabla", "redirect-to": "/front-page"},\n@@ -1841,7 +1841,7 @@ def test_aliases_root_delete(self):\n \n     def test_aliases_root_get(self):\n         # Get aliases\n-        url = f"{self.absolute_url()}/@aliases"\n+        url = f"{self.portal.absolute_url()}/@aliases"\n         query = "?q=/fizzbuzz"\n \n         payload = {\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T15:21:11+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/41db7d5d2daa0a4d3a3635ea3de471518990e333

Added date option to aliases POST root endpoint.

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 8069c41c2..cf8c3d902 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -8,6 +8,7 @@\n from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n from zope.component import getMultiAdapter\n from zExceptions import BadRequest\n+from DateTime import DateTime\n from plone.restapi import _\n import plone.protect.interfaces\n \n@@ -112,7 +113,11 @@ def reply(self):\n             if err:\n                 raise BadRequest(err)\n \n-            storage.add(abs_redirection, abs_target, manual=True)\n+            date = alias.get("date", None)\n+            if date:\n+                date = DateTime(date)\n+\n+            storage.add(abs_redirection, abs_target, now=date, manual=True)\n \n         self.request.response.setStatus(201)\n         return {"message": "Successfully added the aliases %s" % aliases}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 0e1b15127..5ff25a881 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1815,8 +1815,16 @@ def test_aliases_root_add(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n-                {"path": "/blabla", "redirect-to": "/front-page"},\n-                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+                {\n+                    "path": "/blabla",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05"\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n             ]\n         }\n \n@@ -1828,8 +1836,16 @@ def test_aliases_root_delete(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n-                {"path": "/blabla", "redirect-to": "/front-page"},\n-                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+                {\n+                    "path": "/blabla",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05"\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n             ]\n         }\n         response = self.api_session.post(url, json=payload)\n@@ -1846,8 +1862,16 @@ def test_aliases_root_get(self):\n \n         payload = {\n             "aliases": [\n-                {"path": "/blabla", "redirect-to": "/front-page"},\n-                {"path": "/fizzbuzz", "redirect-to": "/front-page"},\n+                {\n+                    "path": "/blabla",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05"\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n             ]\n         }\n         response = self.api_session.post(url, json=payload)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T15:25:39+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/afd7136d63eb7dbd5fd01997f053bc2221e34d0f

Update test docs.

Files changed:
M src/plone/restapi/tests/http-examples/aliases_root_add.req
M src/plone/restapi/tests/http-examples/aliases_root_add.resp
M src/plone/restapi/tests/http-examples/aliases_root_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nindex d1efdcfa3..09d3d6576 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -6,10 +6,12 @@ Content-Type: application/json\n {\n     "aliases": [\n         {\n+            "date": "2022-05-05",\n             "path": "/blabla",\n             "redirect-to": "/front-page"\n         },\n         {\n+            "date": "2022-05-05",\n             "path": "/fizzbuzz",\n             "redirect-to": "/front-page"\n         }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.resp b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\nindex fcfbdd7a7..380eef45f 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n@@ -2,5 +2,5 @@ HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "message": "Successfully added the aliases [{\'path\': \'/blabla\', \'redirect-to\': \'/front-page\'}, {\'path\': \'/fizzbuzz\', \'redirect-to\': \'/front-page\'}]"\n+    "message": "Successfully added the aliases [{\'path\': \'/blabla\', \'redirect-to\': \'/front-page\', \'date\': \'2022-05-05\'}, {\'path\': \'/fizzbuzz\', \'redirect-to\': \'/front-page\', \'date\': \'2022-05-05\'}]"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nindex 8ecb53c24..413e6bfe1 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -4,7 +4,7 @@ Content-Type: application/json\n {\n     "aliases": [\n         {\n-            "datetime": "2022-05-06T11:01:57+00:00",\n+            "datetime": "2022-05-05T00:00:00",\n             "manual": true,\n             "path": "/fizzbuzz",\n             "redirect": "/plone/fizzbuzz",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T15:27:47+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/4f53328c5e70dc2bc4a9f7de7902bfad637db3a0

Ran black.

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 5ff25a881..21887ef40 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1815,11 +1815,7 @@ def test_aliases_root_add(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n-                {\n-                    "path": "/blabla",\n-                    "redirect-to": "/front-page",\n-                    "date": "2022-05-05"\n-                },\n+                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n@@ -1836,11 +1832,7 @@ def test_aliases_root_delete(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "aliases": [\n-                {\n-                    "path": "/blabla",\n-                    "redirect-to": "/front-page",\n-                    "date": "2022-05-05"\n-                },\n+                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n@@ -1862,11 +1854,7 @@ def test_aliases_root_get(self):\n \n         payload = {\n             "aliases": [\n-                {\n-                    "path": "/blabla",\n-                    "redirect-to": "/front-page",\n-                    "date": "2022-05-05"\n-                },\n+                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T16:39:08+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/8b6a89d6d727f02e6814cbcd6582752b5ac94a21

Unify endpoint

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex cf8c3d902..ffae27317 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -23,7 +23,7 @@ def __init__(self, context, request):\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n-        aliases = data.get("aliases", [])\n+        aliases = data.get("items", [])\n \n         if isinstance(aliases, str):\n             aliases = [\n@@ -88,7 +88,7 @@ def __init__(self, context, request):\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n-        aliases = data.get("aliases", [])\n+        aliases = data.get("items", [])\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex ef2a34742..bbf9da0e2 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -20,7 +20,7 @@ def __init__(self, context, request):\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n-        aliases = data.get("aliases", [])\n+        aliases = data.get("items", [])\n \n         if isinstance(aliases, str):\n             aliases = [\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 503252a43..ba6713707 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -16,7 +16,11 @@ def reply(self):\n         redirects = storage.redirects(context_path)\n         aliases = [deroot_path(alias) for alias in redirects]\n         self.request.response.setStatus(201)\n-        return {"aliases": aliases}\n+        response = {\n+            "@id": self.request.URL,\n+            "items": [{"path": alias} for alias in aliases],\n+        }\n+        return response\n \n \n @implementer(IPublishTraverse)\n@@ -31,10 +35,12 @@ def reply(self):\n         redirects = [entry for entry in batch]\n \n         for redirect in redirects:\n+            del redirect["redirect"]\n             redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n         self.request.response.setStatus(201)\n \n-        return {"aliases": redirects}\n+        response = {"@id": self.request.URL, "items": redirects}\n+        return response\n \n \n def deroot_path(path):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T16:44:53+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/23f27809301bb4ce1e998e8bd3076837e38718e5

Update doc tests

Files changed:
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 21887ef40..f557a4119 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1785,17 +1785,17 @@ def test_documentation_expansion(self):\n     def test_aliases_add(self):\n         # Add 3 aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n+        payload = {"items": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_delete(self):\n         # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"aliases": ["/new-alias", "/old-alias", "/final-alias"]}\n+        payload = {"items": ["/new-alias", "/old-alias", "/final-alias"]}\n         response = self.api_session.post(url, json=payload)\n \n-        payload = {"aliases": ["/old-alias"]}\n+        payload = {"items": ["/old-alias"]}\n         response = self.api_session.delete(url, json=payload)\n \n         save_request_and_response_for_docs("aliases_delete", response)\n@@ -1804,7 +1804,7 @@ def test_aliases_get(self):\n         # Get aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n \n-        payload = {"aliases": "/simple-alias"}\n+        payload = {"items": "/simple-alias"}\n         response = self.api_session.post(url, json=payload)\n \n         response = self.api_session.get(url)\n@@ -1814,7 +1814,7 @@ def test_aliases_root_add(self):\n         # Add 2 aliases\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n-            "aliases": [\n+            "items": [\n                 {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n@@ -1831,7 +1831,7 @@ def test_aliases_root_delete(self):\n         # Delete 1 alias\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n-            "aliases": [\n+            "items": [\n                 {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n@@ -1842,7 +1842,7 @@ def test_aliases_root_delete(self):\n         }\n         response = self.api_session.post(url, json=payload)\n \n-        payload = {"aliases": ["/blabla"]}\n+        payload = {"items": ["/blabla"]}\n         response = self.api_session.delete(url, json=payload)\n \n         save_request_and_response_for_docs("aliases_root_delete", response)\n@@ -1853,7 +1853,7 @@ def test_aliases_root_get(self):\n         query = "?q=/fizzbuzz"\n \n         payload = {\n-            "aliases": [\n+            "items": [\n                 {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n                 {\n                     "path": "/fizzbuzz",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T16:48:17+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/97325e62362f0e1bdbfff3092de1fd66e266cf4f

Update http examples

Files changed:
M src/plone/restapi/tests/http-examples/aliases_add.req
M src/plone/restapi/tests/http-examples/aliases_delete.req
M src/plone/restapi/tests/http-examples/aliases_get.resp
M src/plone/restapi/tests/http-examples/aliases_root_add.req
M src/plone/restapi/tests/http-examples/aliases_root_delete.req
M src/plone/restapi/tests/http-examples/aliases_root_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nindex 5c46aba1c..410a86f9e 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -4,7 +4,7 @@ Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\n \n {\n-    "aliases": [\n+    "items": [\n         "/new-alias",\n         "/old-alias",\n         "/final-alias"\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nindex cbde7dfd4..65bc599ce 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -4,7 +4,7 @@ Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\n \n {\n-    "aliases": [\n+    "items": [\n         "/old-alias"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex f5b1fba85..5afe82908 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -2,7 +2,10 @@ HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "aliases": [\n-        "/simple-alias"\n+    "@id": "http://localhost:55001/plone/front-page/@aliases",\n+    "items": [\n+        {\n+            "path": "/simple-alias"\n+        }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nindex 09d3d6576..b26698718 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -4,7 +4,7 @@ Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\n \n {\n-    "aliases": [\n+    "items": [\n         {\n             "date": "2022-05-05",\n             "path": "/blabla",\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.req b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\nindex d1bdbf8c9..43cf97ade 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n@@ -4,7 +4,7 @@ Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\n \n {\n-    "aliases": [\n+    "items": [\n         "/blabla"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nindex 413e6bfe1..e3199ccc3 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -2,12 +2,12 @@ HTTP/1.1 201 Created\n Content-Type: application/json\n \n {\n-    "aliases": [\n+    "@id": "http://localhost:55001/plone/@aliases",\n+    "items": [\n         {\n             "datetime": "2022-05-05T00:00:00",\n             "manual": true,\n             "path": "/fizzbuzz",\n-            "redirect": "/plone/fizzbuzz",\n             "redirect-to": "/front-page"\n         }\n     ]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T17:09:40+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/e6dd33aff4081d227305f37e0bc116de8551a1b9

Unify POST / DELETE response

Files changed:
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/delete.py

b'diff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex ffae27317..dc901449d 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -17,9 +17,6 @@\n class AliasesPost(Service):\n     """Creates new aliases"""\n \n-    def __init__(self, context, request):\n-        super().__init__(context, request)\n-\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n@@ -57,11 +54,11 @@ def reply(self):\n \n         if len(failed_aliases) > 0:\n             return {\n-                "type": "Error",\n-                "message": "Couldn\'t add following aliases %s " % failed_aliases,\n+                "type": "error",\n+                "failed": failed_aliases,\n             }\n-        self.request.response.setStatus(201)\n-        return {"message": "Successfully added the aliases %s" % aliases}\n+\n+        return self.reply_no_content()\n \n     def edit_for_navigation_root(self, alias):\n         # Check navigation root\n@@ -119,5 +116,4 @@ def reply(self):\n \n             storage.add(abs_redirection, abs_target, now=date, manual=True)\n \n-        self.request.response.setStatus(201)\n-        return {"message": "Successfully added the aliases %s" % aliases}\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex bbf9da0e2..f4b373801 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -14,9 +14,6 @@\n class AliasesDelete(Service):\n     """Deletes an alias from object"""\n \n-    def __init__(self, context, request):\n-        super().__init__(context, request)\n-\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n@@ -33,7 +30,7 @@ def reply(self):\n \n         failed_aliases = []\n         for alias in aliases:\n-            alias, err = absolutize_path(alias, is_source=True)\n+            alias, _err = absolutize_path(alias, is_source=True)\n \n             try:\n                 storage.remove(alias)\n@@ -44,10 +41,8 @@ def reply(self):\n \n         if len(failed_aliases) > 0:\n             return {\n-                "type": "Error",\n-                "message": "The following aliases are already removed %s "\n-                % failed_aliases,\n+                "type": "error",\n+                "failed": failed_aliases,\n             }\n \n-        self.request.response.setStatus(201)\n-        return {"message": "Successfully deleted the aliases %s" % aliases}\n+        return self.reply_no_content()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T17:21:32+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/0aac0a57af2280166d25e4031be0c30ef8e552a9

Update http examples.

Files changed:
M src/plone/restapi/tests/http-examples/aliases_add.resp
M src/plone/restapi/tests/http-examples/aliases_delete.resp
M src/plone/restapi/tests/http-examples/aliases_root_add.resp
M src/plone/restapi/tests/http-examples/aliases_root_delete.resp

b'diff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nindex 42fda5f90..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -1,6 +1,2 @@\n-HTTP/1.1 201 Created\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n \n-{\n-    "message": "Successfully added the aliases [\'/new-alias\', \'/old-alias\', \'/final-alias\']"\n-}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nindex 25a92fdb2..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -1,6 +1,2 @@\n-HTTP/1.1 201 Created\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n \n-{\n-    "message": "Successfully deleted the aliases [\'/old-alias\']"\n-}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.resp b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\nindex 380eef45f..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n@@ -1,6 +1,2 @@\n-HTTP/1.1 201 Created\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n \n-{\n-    "message": "Successfully added the aliases [{\'path\': \'/blabla\', \'redirect-to\': \'/front-page\', \'date\': \'2022-05-05\'}, {\'path\': \'/fizzbuzz\', \'redirect-to\': \'/front-page\', \'date\': \'2022-05-05\'}]"\n-}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.resp b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\nindex 451c3712a..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n@@ -1,6 +1,2 @@\n-HTTP/1.1 201 Created\n-Content-Type: application/json\n+HTTP/1.1 204 No Content\n \n-{\n-    "message": "Successfully deleted the aliases [\'/blabla\']"\n-}\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-06T17:34:38+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/ce303bb6be0bb60604f34980e78eb762c3bc3964

@aliases - Update docs

Files changed:
M docs/source/aliases.md

b'diff --git a/docs/source/aliases.md b/docs/source/aliases.md\nindex bd9b10416..dcbe299d7 100644\n--- a/docs/source/aliases.md\n+++ b/docs/source/aliases.md\n@@ -21,11 +21,11 @@ The API consumer can create, read, and delete aliases.\n | `GET`    | `/@aliases` | List all aliases                       |\n | `DELETE` | `/@aliases` | Remove one or more aliases             |\n \n-## Adding new aliases on a Content Object\n+## Adding new URL aliases for a Page\n \n By default, Plone automatically creates a new alias when an object is renamed or moved. Still, you can also create aliases manually.\n \n-To create a new alias, send a POST request to the `/@aliases` endpoint:\n+To create a new alias, send a `POST` request to the `/@aliases` endpoint:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -38,9 +38,9 @@ Response:\n :language: http\n ```\n \n-## Listing aliases of a Content Object\n+## Listing URL aliases of a Page\n \n-Listing aliases of a resource you can send a `GET` request to the `/@aliases` endpoint:\n+To list aliases, you can send a `GET` request to the `/@aliases` endpoint:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -54,9 +54,9 @@ Response:\n ```\n \n \n-## Removing aliases of a Content Object\n+## Removing URL aliases of a Page\n \n-To remove aliases of an object, send a `DELETE` request to the `/@aliases` endpoint:\n+To remove aliases, send a `DELETE` request to the `/@aliases` endpoint:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -68,3 +68,49 @@ Response:\n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_delete.resp\n :language: http\n ```\n+\n+## Adding URL aliases in bulk\n+\n+You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_add.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_add.resp\n+:language: http\n+```\n+\n+## Listing all available aliases\n+\n+To list all aliases, send a `GET` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+:language: http\n+```\n+\n+\n+## Bulk removing aliases\n+\n+To bulk remove aliases send a `DELETE` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_delete.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n+:language: http\n+```\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T12:40:42+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/8d385bc7885e9609adceb60b149c522a822f6e58

Make aliases component expandable (#1416)

* Make aliases component expandable

* Update test documentation resp to include @aliases component

* Fix black and zpretty

* Revert workingcopy_baseline_get.resp lock created

Files changed:
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/get.py
M src/plone/restapi/tests/http-examples/aliases_get.resp
M src/plone/restapi/tests/http-examples/aliases_root_add.req
M src/plone/restapi/tests/http-examples/aliases_root_delete.req
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/collection_fullobjects.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_get_folder.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/search_fullobjects.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/translations_link_on_post.resp
M src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp
M src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex 62b8e5aba..e3291cf16 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -7,7 +7,7 @@\n       method="GET"\n       accept="application/json,application/schema+json"\n       factory=".get.AliasesGet"\n-      for="*"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n       permission="zope2.View"\n       name="@aliases"\n       />\n@@ -15,8 +15,8 @@\n   <plone:service\n       method="GET"\n       accept="application/json,application/schema+json"\n-      factory=".get.AliasesRootGet"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      factory=".get.AliasesGet"\n+      for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       name="@aliases"\n       />\n@@ -53,4 +53,9 @@\n       name="@aliases"\n       />\n \n+  <adapter\n+      factory=".get.Aliases"\n+      name="aliases"\n+      />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex ba6713707..800202eb4 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -1,31 +1,35 @@\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.restapi.interfaces import IExpandableElement\n+from plone.restapi.serializer.converters import datetimelike_to_iso\n from plone.restapi.services import Service\n-from zope.interface import implementer\n-from zope.publisher.interfaces import IPublishTraverse\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectsControlPanel\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from zope.component import adapter\n from zope.component import getUtility\n-from plone.app.redirector.interfaces import IRedirectionStorage\n from zope.component.hooks import getSite\n-from Products.CMFPlone.controlpanel.browser.redirects import RedirectsControlPanel\n-from plone.restapi.serializer.converters import datetimelike_to_iso\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n-@implementer(IPublishTraverse)\n-class AliasesGet(Service):\n-    def reply(self):\n+@implementer(IExpandableElement)\n+@adapter(Interface, Interface)\n+class Aliases:\n+    """@aliases"""\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def reply_item(self):\n         storage = getUtility(IRedirectionStorage)\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n         aliases = [deroot_path(alias) for alias in redirects]\n+        redirect_to = deroot_path(self.context.absolute_url(1))\n         self.request.response.setStatus(201)\n-        response = {\n-            "@id": self.request.URL,\n-            "items": [{"path": alias} for alias in aliases],\n-        }\n-        return response\n-\n+        return [{"path": alias, "redirect-to": redirect_to} for alias in aliases]\n \n-@implementer(IPublishTraverse)\n-class AliasesRootGet(Service):\n-    def reply(self):\n+    def reply_root(self):\n         """\n         redirect-to - target\n         path        - path\n@@ -39,12 +43,32 @@ def reply(self):\n             redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n         self.request.response.setStatus(201)\n \n-        response = {"@id": self.request.URL, "items": redirects}\n-        return response\n+        return redirects\n+\n+    def __call__(self, expand=False):\n+        result = {"aliases": {"@id": f"{self.context.absolute_url()}/@aliases"}}\n+        if not expand:\n+            return result\n+\n+        if IPloneSiteRoot.providedBy(self.context):\n+            result["aliases"]["items"] = self.reply_root()\n+        else:\n+            result["aliases"]["items"] = self.reply_item()\n+        return result\n+\n+\n+class AliasesGet(Service):\n+    """Get aliases"""\n+\n+    def reply(self):\n+        aliases = Aliases(self.context, self.request)\n+        return aliases(expand=True)["aliases"]\n \n \n def deroot_path(path):\n     """Remove the portal root from alias"""\n     portal = getSite()\n     root_path = "/".join(portal.getPhysicalPath())\n+    if not path.startswith("/"):\n+        path = "/%s" % path\n     return path.replace(root_path, "", 1)\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex 5afe82908..095d177a9 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -5,7 +5,8 @@ Content-Type: application/json\n     "@id": "http://localhost:55001/plone/front-page/@aliases",\n     "items": [\n         {\n-            "path": "/simple-alias"\n+            "path": "/simple-alias",\n+            "redirect-to": "/front-page"\n         }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nindex b26698718..54439204a 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -7,7 +7,7 @@ Content-Type: application/json\n     "items": [\n         {\n             "date": "2022-05-05",\n-            "path": "/blabla",\n+            "path": "/old-page",\n             "redirect-to": "/front-page"\n         },\n         {\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.req b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\nindex 43cf97ade..a26ad9548 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n@@ -5,6 +5,6 @@ Content-Type: application/json\n \n {\n     "items": [\n-        "/blabla"\n+        "/old-page"\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 592b4af00..4f7986917 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/collection/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/collection/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\nindex ee18de503..6c70e834e 100644\n--- a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/collection/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/collection/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n         },\n@@ -62,6 +65,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/front-page/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/front-page/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n                 },\n@@ -135,6 +141,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc1/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc1/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n                 },\n@@ -209,6 +218,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc2/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc2/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc2/@breadcrumbs"\n                 },\ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex dbc59a7bb..d9d7fb979 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nindex 267e83eda..2321f58e8 100644\n--- a/src/plone/restapi/tests/http-examples/content_get_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex 2d7b23448..7d67c1256 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 474fea130..f00f59793 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -7,6 +7,9 @@ Location: http://localhost:55001/plone/folder/my-document\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 563eced1f..3051680f5 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex 80c974936..fca4fc729 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/event/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/event/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/event/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 563eced1f..3051680f5 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex a6aad58fc..3ccd2e625 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n             "items": [\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 2b9b6a821..06e69d113 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -106,6 +106,9 @@ Content-Type: application/json\n                 }\n             ]\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n             "items": [\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex 424b2c560..21e67ec86 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/file/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/file/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/file/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 8eceeb909..88eaf20c0 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex c6d5ddb2c..a0ded1891 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/image/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/image/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/image/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 4c0047709..8aa56b21d 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 773d421c7..651a7ff9e 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/link/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/link/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/link/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex 28b6e286b..a82f7e875 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/newsitem/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/newsitem/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/newsitem/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nindex 1c1dfc79b..b2a1dad10 100644\n--- a/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc1/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc1/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n                 },\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 4c0047709..8aa56b21d 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\nindex 6c7bafaf3..e41a6d915 100644\n--- a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n@@ -7,6 +7,9 @@ Location: http://localhost:55001/plone/de/mydocument\n         "actions": {\n             "@id": "http://localhost:55001/plone/de/mydocument/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/de/mydocument/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/de/mydocument/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\nindex 683549cf9..a4622d83c 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\nindex b32673860..bb4423d98 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/copy_of_document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/copy_of_document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/copy_of_document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex f557a4119..1de83ae40 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1815,7 +1815,11 @@ def test_aliases_root_add(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "items": [\n-                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n@@ -1832,7 +1836,11 @@ def test_aliases_root_delete(self):\n         url = f"{self.portal.absolute_url()}/@aliases"\n         payload = {\n             "items": [\n-                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n@@ -1842,7 +1850,7 @@ def test_aliases_root_delete(self):\n         }\n         response = self.api_session.post(url, json=payload)\n \n-        payload = {"items": ["/blabla"]}\n+        payload = {"items": ["/old-page"]}\n         response = self.api_session.delete(url, json=payload)\n \n         save_request_and_response_for_docs("aliases_root_delete", response)\n@@ -1854,7 +1862,11 @@ def test_aliases_root_get(self):\n \n         payload = {\n             "items": [\n-                {"path": "/blabla", "redirect-to": "/front-page", "date": "2022-05-05"},\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T14:28:43+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/085d4a7a000b65a262693a83d2a7470b8c05440c

Update docs about aliases filtering

Files changed:
A src/plone/restapi/tests/http-examples/aliases_root_filter.req
A src/plone/restapi/tests/http-examples/aliases_root_filter.resp
M docs/source/aliases.md
M src/plone/restapi/tests/http-examples/aliases_root_get.req
M src/plone/restapi/tests/http-examples/aliases_root_get.resp
M src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/aliases.md b/docs/source/aliases.md\nindex dcbe299d7..09c48830f 100644\n--- a/docs/source/aliases.md\n+++ b/docs/source/aliases.md\n@@ -1,14 +1,14 @@\n ---\n html_meta:\n-  "description": "Aliases is a mechanism to redirect old URLs to new ones."\n-  "property=og:description": "Aliases is a mechanism to redirect old URLs to new ones."\n+  "description": "Aliases - a mechanism to redirect old URLs to new ones."\n+  "property=og:description": "Aliases - a mechanism to redirect old URLs to new ones."\n   "property=og:title": "Aliases"\n   "keywords": "Plone, plone.app.redirector, redirector, REST, API, Aliases"\n ---\n \n # Aliases\n \n-Aliases is a mechanism to redirect old URLs to new ones.\n+A mechanism to redirect old URLs to new ones.\n \n When an object is moved (renamed or cut/pasted into a different location), the redirection storage will remember the old path. It is smart enough to deal with transitive references (if we have a -> b and then add b -> c, it is replaced by a reference a -> c) and circular references (attempting to add a -> a does nothing).\n \n@@ -99,6 +99,21 @@ Response:\n :language: http\n ```\n \n+## Filter aliases\n+\n+To search for specific aliases, send a `GET` request to the `/@aliases` endpoint on site `root` with a `q` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_filter.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n+:language: http\n+```\n+\n \n ## Bulk removing aliases\n \ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_filter.req b/src/plone/restapi/tests/http-examples/aliases_root_filter.req\nnew file mode 100644\nindex 000000000..8d806ede1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_filter.req\n@@ -0,0 +1,3 @@\n+GET /plone/@aliases?q=/fizzbuzz HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_filter.resp b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\nnew file mode 100644\nindex 000000000..e3199ccc3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n@@ -0,0 +1,14 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@aliases",\n+    "items": [\n+        {\n+            "datetime": "2022-05-05T00:00:00",\n+            "manual": true,\n+            "path": "/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.req b/src/plone/restapi/tests/http-examples/aliases_root_get.req\nindex 8d806ede1..a5591aed0 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_get.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.req\n@@ -1,3 +1,3 @@\n-GET /plone/@aliases?q=/fizzbuzz HTTP/1.1\n+GET /plone/@aliases HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nindex e3199ccc3..60ec1ee7a 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -9,6 +9,12 @@ Content-Type: application/json\n             "manual": true,\n             "path": "/fizzbuzz",\n             "redirect-to": "/front-page"\n+        },\n+        {\n+            "datetime": "2022-05-05T00:00:00",\n+            "manual": true,\n+            "path": "/old-page",\n+            "redirect-to": "/front-page"\n         }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\nindex a4622d83c..953ef7063 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n@@ -43,7 +43,7 @@ Content-Type: application/json\n     "language": "",\n     "layout": "document_view",\n     "lock": {\n-        "created": "1995-07-31T17:30:00",\n+        "created": "1995-07-31T20:30:00",\n         "creator": "admin",\n         "creator_name": "admin",\n         "creator_url": "http://localhost:55001/plone/author/admin",\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 1de83ae40..94c6e2d4e 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1858,7 +1858,7 @@ def test_aliases_root_delete(self):\n     def test_aliases_root_get(self):\n         # Get aliases\n         url = f"{self.portal.absolute_url()}/@aliases"\n-        query = "?q=/fizzbuzz"\n+        query = ""\n \n         payload = {\n             "items": [\n@@ -1879,6 +1879,30 @@ def test_aliases_root_get(self):\n         response = self.api_session.get(url + query)\n         save_request_and_response_for_docs("aliases_root_get", response)\n \n+    def test_aliases_root_filter(self):\n+        # Get aliases\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        query = "?q=/fizzbuzz"\n+\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "date": "2022-05-05",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        response = self.api_session.get(url + query)\n+        save_request_and_response_for_docs("aliases_root_filter", response)\n+\n \n class TestControlPanelDocumentation(TestDocumentationBase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T16:12:55+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/784f41ff2afe07022da28fa3d4f4fa21f8531ffa

Unify @aliases GET, POST, DELETE call params

Files changed:
M docs/source/aliases.md
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/delete.py
M src/plone/restapi/services/aliases/get.py
M src/plone/restapi/tests/http-examples/aliases_add.req
M src/plone/restapi/tests/http-examples/aliases_delete.req
M src/plone/restapi/tests/http-examples/aliases_get.resp
M src/plone/restapi/tests/http-examples/aliases_root_add.req
M src/plone/restapi/tests/http-examples/aliases_root_delete.req
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/aliases.md b/docs/source/aliases.md\nindex 09c48830f..afa68efda 100644\n--- a/docs/source/aliases.md\n+++ b/docs/source/aliases.md\n@@ -71,7 +71,7 @@ Response:\n \n ## Adding URL aliases in bulk\n \n-You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root`:\n+You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root`. **datetime** parameter is optional:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -84,6 +84,7 @@ Response:\n :language: http\n ```\n \n+\n ## Listing all available aliases\n \n To list all aliases, send a `GET` request to the `/@aliases` endpoint on site `root`:\ndiff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex dc901449d..5ab2cf41e 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -33,6 +33,9 @@ def reply(self):\n \n         failed_aliases = []\n         for alias in aliases:\n+            if isinstance(alias, dict):\n+                alias = alias.get("path")\n+\n             if alias.startswith("/"):\n                 # Check navigation root\n                 alias = self.edit_for_navigation_root(alias)\n@@ -79,9 +82,6 @@ def edit_for_navigation_root(self, alias):\n class AliasesRootPost(Service):\n     """Creates new aliases via controlpanel"""\n \n-    def __init__(self, context, request):\n-        super().__init__(context, request)\n-\n     def reply(self):\n         data = json_body(self.request)\n         storage = getUtility(IRedirectionStorage)\n@@ -92,8 +92,8 @@ def reply(self):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         for alias in aliases:\n-            redirection = alias["path"]\n-            target = alias["redirect-to"]\n+            redirection = alias.get("path")\n+            target = alias.get("redirect-to")\n             abs_redirection, err = absolutize_path(redirection, is_source=True)\n             abs_target, target_err = absolutize_path(target, is_source=False)\n \n@@ -110,7 +110,7 @@ def reply(self):\n             if err:\n                 raise BadRequest(err)\n \n-            date = alias.get("date", None)\n+            date = alias.get("datetime", None)\n             if date:\n                 date = DateTime(date)\n \ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nindex f4b373801..a0b8d79a6 100644\n--- a/src/plone/restapi/services/aliases/delete.py\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -30,6 +30,9 @@ def reply(self):\n \n         failed_aliases = []\n         for alias in aliases:\n+            if isinstance(alias, dict):\n+                alias = alias.get("path")\n+\n             alias, _err = absolutize_path(alias, is_source=True)\n \n             try:\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 800202eb4..efca395f7 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -25,9 +25,8 @@ def reply_item(self):\n         context_path = "/".join(self.context.getPhysicalPath())\n         redirects = storage.redirects(context_path)\n         aliases = [deroot_path(alias) for alias in redirects]\n-        redirect_to = deroot_path(self.context.absolute_url(1))\n         self.request.response.setStatus(201)\n-        return [{"path": alias, "redirect-to": redirect_to} for alias in aliases]\n+        return [{"path": alias} for alias in aliases]\n \n     def reply_root(self):\n         """\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nindex 410a86f9e..9897a5a2a 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -5,8 +5,14 @@ Content-Type: application/json\n \n {\n     "items": [\n-        "/new-alias",\n-        "/old-alias",\n-        "/final-alias"\n+        {\n+            "path": "/new-alias"\n+        },\n+        {\n+            "path": "/old-alias"\n+        },\n+        {\n+            "path": "/final-alias"\n+        }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nindex 65bc599ce..2c106ec64 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -5,6 +5,8 @@ Content-Type: application/json\n \n {\n     "items": [\n-        "/old-alias"\n+        {\n+            "path": "/old-alias"\n+        }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex 095d177a9..5afe82908 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -5,8 +5,7 @@ Content-Type: application/json\n     "@id": "http://localhost:55001/plone/front-page/@aliases",\n     "items": [\n         {\n-            "path": "/simple-alias",\n-            "redirect-to": "/front-page"\n+            "path": "/simple-alias"\n         }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nindex 54439204a..09a58b057 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_add.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -6,12 +6,12 @@ Content-Type: application/json\n {\n     "items": [\n         {\n-            "date": "2022-05-05",\n+            "datetime": "2022-05-05",\n             "path": "/old-page",\n             "redirect-to": "/front-page"\n         },\n         {\n-            "date": "2022-05-05",\n+            "datetime": "2022-05-05",\n             "path": "/fizzbuzz",\n             "redirect-to": "/front-page"\n         }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.req b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\nindex a26ad9548..dd9b5c89a 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n@@ -5,6 +5,8 @@ Content-Type: application/json\n \n {\n     "items": [\n-        "/old-page"\n+        {\n+            "path": "/old-page"\n+        }\n     ]\n }\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 94c6e2d4e..f0d718dfb 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1785,17 +1785,29 @@ def test_documentation_expansion(self):\n     def test_aliases_add(self):\n         # Add 3 aliases\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"items": ["/new-alias", "/old-alias", "/final-alias"]}\n+        payload = {\n+            "items": [\n+                {"path": "/new-alias"},\n+                {"path": "/old-alias"},\n+                {"path": "/final-alias"},\n+            ]\n+        }\n         response = self.api_session.post(url, json=payload)\n         save_request_and_response_for_docs("aliases_add", response)\n \n     def test_aliases_delete(self):\n         # Delete 1 alias\n         url = f"{self.document.absolute_url()}/@aliases"\n-        payload = {"items": ["/new-alias", "/old-alias", "/final-alias"]}\n+        payload = {\n+            "items": [\n+                {"path": "/new-alias"},\n+                {"path": "/old-alias"},\n+                {"path": "/final-alias"},\n+            ]\n+        }\n         response = self.api_session.post(url, json=payload)\n \n-        payload = {"items": ["/old-alias"]}\n+        payload = {"items": [{"path": "/old-alias"}]}\n         response = self.api_session.delete(url, json=payload)\n \n         save_request_and_response_for_docs("aliases_delete", response)\n@@ -1818,12 +1830,12 @@ def test_aliases_root_add(self):\n                 {\n                     "path": "/old-page",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n             ]\n         }\n@@ -1839,18 +1851,16 @@ def test_aliases_root_delete(self):\n                 {\n                     "path": "/old-page",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n                 },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n                 },\n             ]\n         }\n         response = self.api_session.post(url, json=payload)\n \n-        payload = {"items": ["/old-page"]}\n+        payload = {"items": [{"path": "/old-page"}]}\n         response = self.api_session.delete(url, json=payload)\n \n         save_request_and_response_for_docs("aliases_root_delete", response)\n@@ -1865,12 +1875,12 @@ def test_aliases_root_get(self):\n                 {\n                     "path": "/old-page",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n             ]\n         }\n@@ -1889,12 +1899,12 @@ def test_aliases_root_filter(self):\n                 {\n                     "path": "/old-page",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n                 {\n                     "path": "/fizzbuzz",\n                     "redirect-to": "/front-page",\n-                    "date": "2022-05-05",\n+                    "datetime": "2022-05-05",\n                 },\n             ]\n         }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-09T16:25:49+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/a7876c3f498ffa694e69434740df133e64df7521

Revert workingcopy_baseline_get.resp

Files changed:
M src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp

b'diff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\nindex 953ef7063..a4622d83c 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n@@ -43,7 +43,7 @@ Content-Type: application/json\n     "language": "",\n     "layout": "document_view",\n     "lock": {\n-        "created": "1995-07-31T20:30:00",\n+        "created": "1995-07-31T17:30:00",\n         "creator": "admin",\n         "creator_name": "admin",\n         "creator_url": "http://localhost:55001/plone/author/admin",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-24T16:53:43+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/59cb21dd6a2b26767dcbd0fe5ab524978238a0d4

Add total_items to result. (#1437)

* Add total_items to result.

* Update docs.

* Add total_items to all results.

* Update docs.

Co-authored-by: Petchesi-Iulian &lt;iamnotacat12@gmail.com&gt;

Files changed:
M src/plone/restapi/services/aliases/get.py
M src/plone/restapi/tests/http-examples/aliases_get.resp
M src/plone/restapi/tests/http-examples/aliases_root_filter.resp
M src/plone/restapi/tests/http-examples/aliases_root_get.resp

b'diff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex efca395f7..7fe88e8a4 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -53,6 +53,8 @@ def __call__(self, expand=False):\n             result["aliases"]["items"] = self.reply_root()\n         else:\n             result["aliases"]["items"] = self.reply_item()\n+        result["aliases"]["items_total"] = len(result["aliases"]["items"])\n+\n         return result\n \n \ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nindex 5afe82908..6e0541929 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -7,5 +7,6 @@ Content-Type: application/json\n         {\n             "path": "/simple-alias"\n         }\n-    ]\n+    ],\n+    "items_total": 1\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_filter.resp b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\nindex e3199ccc3..fa823e30f 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n@@ -10,5 +10,6 @@ Content-Type: application/json\n             "path": "/fizzbuzz",\n             "redirect-to": "/front-page"\n         }\n-    ]\n+    ],\n+    "items_total": 1\n }\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nindex 60ec1ee7a..a0ea7e002 100644\n--- a/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -16,5 +16,6 @@ Content-Type: application/json\n             "path": "/old-page",\n             "redirect-to": "/front-page"\n         }\n-    ]\n+    ],\n+    "items_total": 2\n }\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-25T16:56:05+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6ec688402394c35f01357e87d5900f5d27c2a272

Get total aliases count.

Files changed:
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 7fe88e8a4..deae88f24 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -42,7 +42,12 @@ def reply_root(self):\n             redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n         self.request.response.setStatus(201)\n \n-        return redirects\n+        self.request.form[\'b_size\'] = \'1000000\'\n+        self.request.__annotations__.pop(\'plone.memoize\')\n+\n+        newbatch = RedirectsControlPanel(self.context, self.request).redirects()\n+        items_total = len([item for item in newbatch])\n+        return redirects, items_total\n \n     def __call__(self, expand=False):\n         result = {"aliases": {"@id": f"{self.context.absolute_url()}/@aliases"}}\n@@ -50,10 +55,12 @@ def __call__(self, expand=False):\n             return result\n \n         if IPloneSiteRoot.providedBy(self.context):\n-            result["aliases"]["items"] = self.reply_root()\n+            items, items_total = self.reply_root()\n+            result["aliases"]["items"] = items\n+            result["aliases"]["items_total"] = items_total\n         else:\n             result["aliases"]["items"] = self.reply_item()\n-        result["aliases"]["items_total"] = len(result["aliases"]["items"])\n+            result["aliases"]["items_total"] = len(result["aliases"]["items"])\n \n         return result\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-25T16:58:54+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/897375febcf70f9eedff27ff65df0aac952ca606

Black.

Files changed:
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex deae88f24..7c6c74c73 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -42,8 +42,8 @@ def reply_root(self):\n             redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n         self.request.response.setStatus(201)\n \n-        self.request.form[\'b_size\'] = \'1000000\'\n-        self.request.__annotations__.pop(\'plone.memoize\')\n+        self.request.form["b_size"] = "1000000"\n+        self.request.__annotations__.pop("plone.memoize")\n \n         newbatch = RedirectsControlPanel(self.context, self.request).redirects()\n         items_total = len([item for item in newbatch])\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-25T17:30:07+03:00
Author: Petchesi-Iulian (Petchesi-Iulian) <iamnotacat12@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/0b4e729539d334eb2273395ecf3a40f8a0db5238

Set b_start to 0

Files changed:
M src/plone/restapi/services/aliases/get.py

b'diff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex 7c6c74c73..04c949068 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -42,6 +42,7 @@ def reply_root(self):\n             redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n         self.request.response.setStatus(201)\n \n+        self.request.form["b_start"] = "0"\n         self.request.form["b_size"] = "1000000"\n         self.request.__annotations__.pop("plone.memoize")\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-06-15T13:34:26+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/89d3ed923f2ff9c10a906836aa28be0ffff8f501

Merge branch 'master' into alias_controlpanel

Files changed:
A news/1295.internal
A news/1325.feature
A news/1327.feature
A news/1396.bugfix
A news/1404.internal
A news/1412.bugfix
A news/1414.feature
A news/1419.feature
A news/1421.internal
A news/1424.feature
A news/1428.bugfix
A news/1436.feature
A news/1438.internal
A news/1452.bugfix
A news/49.bugfix
A news/57.bugfix
A requirements-5.2.txt
A requirements-6.0.txt
A src/plone/restapi/tests/http-examples/translated_messages_addons.req
A src/plone/restapi/tests/http-examples/translated_messages_addons.resp
A src/plone/restapi/tests/http-examples/users_filtered_by_groups.req
A src/plone/restapi/tests/http-examples/users_filtered_by_groups.resp
A src/plone/restapi/tests/test_caching.py
A test-no-sphinx-warnings
A test-no-uncommitted-doc-changes
M .github/workflows/flake8.yml
M .github/workflows/tests.yml
M Makefile
M base.cfg
M docs/source/conf.py
M docs/source/controlpanels.md
M docs/source/conventions.md
M docs/source/i18n.md
M docs/source/users.md
M performance/convert.py
M performance/querystring-search.py
M plone-6.0.x.cfg
M setup.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/controlpanels/registry.py
M src/plone/restapi/deserializer/utils.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/actions/configure.zcml
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/breadcrumbs/configure.zcml
M src/plone/restapi/services/content/configure.zcml
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/services/discussion/configure.zcml
M src/plone/restapi/services/discussion/utils.py
M src/plone/restapi/services/groups/get.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/navigation/configure.zcml
M src/plone/restapi/services/querystring/configure.zcml
M src/plone/restapi/services/search/configure.zcml
M src/plone/restapi/services/users/get.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/http-examples/comments_get.resp
M src/plone/restapi/tests/http-examples/controlpanels_patch.resp
M src/plone/restapi/tests/http-examples/groups.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/groups_get.resp
M src/plone/restapi/tests/http-examples/groups_update.req
M src/plone/restapi/tests/http-examples/users.resp
M src/plone/restapi/tests/http-examples/users_add.resp
M src/plone/restapi/tests/http-examples/users_created.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_group.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_users.py
M versions.cfg
D requirements.txt
D test-no-sphinx-warnings.in
D test-no-uncommitted-doc-changes.in

b'diff --git a/.github/workflows/flake8.yml b/.github/workflows/flake8.yml\nindex 73f73f091..45dbfae7b 100644\n--- a/.github/workflows/flake8.yml\n+++ b/.github/workflows/flake8.yml\n@@ -28,7 +28,7 @@ jobs:\n \n       # install flake8\n       - name: install flake8\n-        run: pip install flake8\n+        run: pip install flake8==$(awk \'/^flake8 =/{print $NF}\' versions.cfg)\n \n       # run black\n       - name: run flake8\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 5e7a4dff2..9bf1c5daf 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -42,7 +42,7 @@ jobs:\n       - run: pip install virtualenv\n       - run: pip install wheel\n       - name: pip install\n-        run: pip install -r requirements.txt -r requirements-docs.txt\n+        run: pip install -r requirements-${{ matrix.plone-version }}.txt -r requirements-docs.txt\n \n       # buildout\n       - name: buildout\n@@ -56,8 +56,7 @@ jobs:\n \n       # build sphinx\n       - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then bin/sphinxbuilder; fi\n-        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then make docs-html; fi\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-html; fi\n \n       # test\n       - name: test\n@@ -65,11 +64,11 @@ jobs:\n \n       # test no uncommited changes\n       - name: test no uncommited changes\n-        run: bin/test-no-uncommitted-doc-changes\n+        run: ./test-no-uncommitted-doc-changes\n         env:\n           PYTHON_VERSION: ${{ matrix.python-version }}\n           PLONE_VERSION: ${{ matrix.plone-version }}\n \n-      # test sphinx warnings\n-#      - name: sphinx\n-#        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then bin/test-no-sphinx-warnings; fi\n+      # test for broken links\n+      - name: linkcheck\n+        run: if [ "${{ matrix.plone-version }}" == "6.0" ] && [ ${{ matrix.python-version }} == \'3.9\' ]; then make docs-linkcheckbroken; fi\n\\ No newline at end of file\ndiff --git a/Makefile b/Makefile\nindex 0c40a7b17..a5f8faf3c 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -43,7 +43,7 @@ update: ## Update Make and Buildout\n \n bin/buildout: bin/pip\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n+\tbin/pip install -r requirements-5.2.txt\n \tbin/pip install black || true\n \t@touch -c $@\n \n@@ -55,25 +55,25 @@ bin/python bin/pip:\n .PHONY: Build Plone 5.2\n build-plone-5.2: .installed.cfg  ## Build Plone 5.2\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n+\tbin/pip install -r requirements-5.2.txt\n \tbin/buildout -c plone-5.2.x.cfg\n \n .PHONY: Build Plone 5.2 Performance\n build-plone-5.2-performance: .installed.cfg  ## Build Plone 5.2\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n+\tbin/pip install -r requirements-5.2.txt\n \tbin/buildout -c plone-5.2.x-performance.cfg\n \n .PHONY: Build Plone 6.0\n build-plone-6.0: .installed.cfg  ## Build Plone 6.0\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n+\tbin/pip install -r requirements-6.0.txt\n \tbin/buildout -c plone-6.0.x.cfg\n \n .PHONY: Build Plone 6.0 Performance\n build-plone-6.0-performance: .installed.cfg  ## Build Plone 6.0\n \tbin/pip install --upgrade pip\n-\tbin/pip install -r requirements.txt\n+\tbin/pip install -r requirements-6.0.txt\n \tbin/buildout -c plone-6.0.x-performance.cfg\n \n .PHONY: Test\n@@ -137,7 +137,7 @@ docs-linkcheck: bin/python  ## Run linkcheck\n \n .PHONY: docs-linkcheckbroken\n docs-linkcheckbroken: bin/python  ## Run linkcheck and show only broken links\n-\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto\n+\tcd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck | GREP_COLORS=\'0;31\' egrep -wi broken --color=auto || test $$? = 1\n \t@echo\n \t@echo "Link check complete; look for any errors in the above output " \\\n \t\t"or in $(BUILDDIR)/linkcheck/ ."\ndiff --git a/base.cfg b/base.cfg\nindex 8f22ca372..33f786f8e 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -5,8 +5,6 @@ parts =\n     instance\n     test\n     test-coverage\n-    test-no-uncommitted-doc-changes\n-    test-no-sphinx-warnings\n     code-analysis\n     dependencychecker\n     dependencies\n@@ -87,18 +85,6 @@ input = inline:\n output = ${buildout:directory}/bin/test-coverage\n mode = 755\n \n-[test-no-uncommitted-doc-changes]\n-recipe = collective.recipe.template\n-input = test-no-uncommitted-doc-changes.in\n-output = bin/test-no-uncommitted-doc-changes\n-mode = 755\n-\n-[test-no-sphinx-warnings]\n-recipe = collective.recipe.template\n-input = test-no-sphinx-warnings.in\n-output = bin/test-no-sphinx-warnings\n-mode = 755\n-\n [code-analysis]\n recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 6f0de38d2..c7261d9fe 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -166,15 +166,13 @@ def patch_pygments_to_highlight_jsonschema():\n html_logo = "_static/logo.svg"\n html_favicon = "_static/favicon.ico"\n \n-html_css_files = ["custom.css",\n-                  ("print.css", {"media": "print"})]\n+html_css_files = ["custom.css", ("print.css", {"media": "print"})]\n \n # See http://sphinx-doc.org/ext/todo.html#confval-todo_include_todos\n todo_include_todos = True\n \n html_theme_options = {\n-    # TODO: Either get a separate GA ID or enable this one once it is in production.\n-    # "google_analytics_id": "UA-1907133-6",\n+    "google_analytics_id": "G-P8NCTB796E",\n     "path_to_docs": "docs",\n     "repository_url": "https://github.com/plone/plone.restapi",\n     "repository_branch": "master",\n@@ -288,10 +286,10 @@ def patch_pygments_to_highlight_jsonschema():\n # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html\n myst_enable_extensions = [\n     "deflist",  # You will be able to utilise definition lists\n-                # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#definition-lists\n+    # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#definition-lists\n     "linkify",  # Identify \xe2\x80\x9cbare\xe2\x80\x9d web URLs and add hyperlinks.\n     "colon_fence",  # You can also use ::: delimiters to denote code fences,\\\n-                    #  instead of ```.\n+    #  instead of ```.\n     "substitution",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#substitutions-with-jinja2\n ]\n \n@@ -308,11 +306,11 @@ def patch_pygments_to_highlight_jsonschema():\n \n latex_elements = {\n     # The paper size ("letterpaper" or "a4paper").\n-    #"papersize": "letterpaper",\n+    # "papersize": "letterpaper",\n     # The font size ("10pt", "11pt" or "12pt").\n-    #"pointsize": "10pt",\n+    # "pointsize": "10pt",\n     # Additional stuff for the LaTeX preamble.\n-    #"preamble": "",\n+    # "preamble": "",\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\ndiff --git a/docs/source/controlpanels.md b/docs/source/controlpanels.md\nindex 8b2c64e71..09ef114ad 100644\n--- a/docs/source/controlpanels.md\n+++ b/docs/source/controlpanels.md\n@@ -78,9 +78,6 @@ To update the settings on a control panel, send a `PATCH` request to control pan\n \n A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n \n-```http\n-HTTP/1.1 204 No Content\n-```\n \n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n :language: http\ndiff --git a/docs/source/conventions.md b/docs/source/conventions.md\nindex bf7e3d552..0c670ab29 100644\n--- a/docs/source/conventions.md\n+++ b/docs/source/conventions.md\n@@ -73,6 +73,42 @@ Mixing singular and plural is confusing.\n For example, using `/users` for retrieving users, and `/user/21` to retrieve a single user.\n \n \n+### URL Parameters (singular vs plural)\n+\n+**Rule:** Use plural for URL parameters that can contain one or multiple items. Use singular for parameters that can contain only one single item.\n+\n+**Do:**\n+\n+If the parameter allows passing multiple values:\n+\n+```text\n+/tokens\n+```\n+\n+If the parameter allows passing a single value only:\n+\n+```text\n+/token\n+```\n+\n+**Don\'t:**\n+\n+If the parameter allows passing multiple values, do not use the singular form, and do not append a type to the variable name. The following are examples of what _not_ to do:\n+\n+```text\n+/token\n+/token_list\n+/token_array\n+/token_set\n+```\n+\n+**Reason:**\n+\n+The naming should clearly indicate if an attribute expects a single (singular) item or multiple items (plural).\n+We decided to use the plural form, instead of appending a possible type\xe2\x80\x94such as `_list`, `_array`, or `_set`\xe2\x80\x94to the variable name.\n+\n+See https://github.com/plone/plone.restapi/pull/1295#issuecomment-997281715 for the discussion that led to this decision.\n+\n ### Uppercase versus Lowercase\n \n **Rule:** Use lowercase letters in URIs.\ndiff --git a/docs/source/i18n.md b/docs/source/i18n.md\nindex 46642e50b..e4b498430 100644\n--- a/docs/source/i18n.md\n+++ b/docs/source/i18n.md\n@@ -83,3 +83,17 @@ All the relevant messages will be shown translated:\n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n :language: http\n ```\n+\n+The same happens in the `@addons` endpoint.\n+All addon names and descriptions will be shown translated:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_addons.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+:language: http\n+```\ndiff --git a/docs/source/users.md b/docs/source/users.md\nindex c6319662f..ace4ba2b8 100644\n--- a/docs/source/users.md\n+++ b/docs/source/users.md\n@@ -55,19 +55,36 @@ The server will return a {term}`401 Unauthorized` status code.\n :language: http\n ```\n \n-The endpoint supports some basic filtering:\n+### Filtering the list of users\n+\n+The endpoint supports some basic filtering.\n+\n+Filtering by `id`:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n ```\n \n-The server will respond with a list of the filtered users in the portal where the username starts with the `query` parameter\'s value:\n+The server will respond with a list of the filtered users in the portal where the `username` starts with the `query` parameter\'s value:\n \n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n :language: http\n ```\n \n+Filtering by `groups`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_groups.req\n+```\n+\n+The server will respond with a list of users where the users are member of one of the groups of the `groups-filter` parameter value.\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_groups.resp\n+:language: http\n+```\n+\n The endpoint also takes a `limit` parameter.\n Its default is a maximum of 25 users at a time for performance reasons.\n \ndiff --git a/news/1295.internal b/news/1295.internal\nnew file mode 100644\nindex 000000000..bbd00e061\n--- /dev/null\n+++ b/news/1295.internal\n@@ -0,0 +1,2 @@\n+Add naming best practices for URL Attributes (singular vs plural) to the docs\n+[tisto]\n\\ No newline at end of file\ndiff --git a/news/1325.feature b/news/1325.feature\nnew file mode 100644\nindex 000000000..446b01b34\n--- /dev/null\n+++ b/news/1325.feature\n@@ -0,0 +1,2 @@\n+Include users data in groups while retrieving @groups\n+[@nileshgulia1]\n\\ No newline at end of file\ndiff --git a/news/1327.feature b/news/1327.feature\nnew file mode 100644\nindex 000000000..38f27fa6e\n--- /dev/null\n+++ b/news/1327.feature\n@@ -0,0 +1 @@\n+Added \'View comments\' and \'Reply to item\' permission to discussion [@razvanMiu]\ndiff --git a/news/1396.bugfix b/news/1396.bugfix\nnew file mode 100644\nindex 000000000..08e87ddaa\n--- /dev/null\n+++ b/news/1396.bugfix\n@@ -0,0 +1 @@\n+Fix empty .resp in docs of PATCH controlpanel\ndiff --git a/news/1404.internal b/news/1404.internal\nnew file mode 100644\nindex 000000000..a2d88fa58\n--- /dev/null\n+++ b/news/1404.internal\n@@ -0,0 +1 @@\n+Enable Google Analytics 4 [stevepiercy]\ndiff --git a/news/1412.bugfix b/news/1412.bugfix\nnew file mode 100644\nindex 000000000..9fed2e25e\n--- /dev/null\n+++ b/news/1412.bugfix\n@@ -0,0 +1,2 @@\n+Translate addon titles on @addon controlpanel\n+[erral]\ndiff --git a/news/1414.feature b/news/1414.feature\nnew file mode 100644\nindex 000000000..e3c8ee64a\n--- /dev/null\n+++ b/news/1414.feature\n@@ -0,0 +1,2 @@\n+Move caching rulesets to the ZCML where the endpoints are defined.\n+[jensens]\ndiff --git a/news/1419.feature b/news/1419.feature\nnew file mode 100644\nindex 000000000..960d2d308\n--- /dev/null\n+++ b/news/1419.feature\n@@ -0,0 +1,2 @@\n+List Users (@users): Add groups [ksuess]\n+List Users (@users): Support filtering by groups [ksuess]\n\\ No newline at end of file\ndiff --git a/news/1421.internal b/news/1421.internal\nnew file mode 100644\nindex 000000000..ea3118df3\n--- /dev/null\n+++ b/news/1421.internal\n@@ -0,0 +1 @@\n+fixed broken make task docs-linkcheckbroken\ndiff --git a/news/1424.feature b/news/1424.feature\nnew file mode 100644\nindex 000000000..791dd6ec7\n--- /dev/null\n+++ b/news/1424.feature\n@@ -0,0 +1 @@\n+Fix: Update group: Preserve title and description. [ksuess]\n\\ No newline at end of file\ndiff --git a/news/1428.bugfix b/news/1428.bugfix\nnew file mode 100644\nindex 000000000..45186b098\n--- /dev/null\n+++ b/news/1428.bugfix\n@@ -0,0 +1,2 @@\n+Do not break path2uid with some edge-cases.\n+[cekk]\ndiff --git a/news/1436.feature b/news/1436.feature\nnew file mode 100644\nindex 000000000..51a8ee0be\n--- /dev/null\n+++ b/news/1436.feature\n@@ -0,0 +1,2 @@\n+Add UsersGroupsSettings to set of control panels. [ksuess]\n+Move configlet UsersGroupsSettings to correct group (Volto control panel group "Users and Groups") [ksuess]\ndiff --git a/news/1438.internal b/news/1438.internal\nnew file mode 100644\nindex 000000000..f3dba09f8\n--- /dev/null\n+++ b/news/1438.internal\n@@ -0,0 +1 @@\n+Fix broken link to Python requests library docs. [stevepiercy]\n\\ No newline at end of file\ndiff --git a/news/1452.bugfix b/news/1452.bugfix\nnew file mode 100644\nindex 000000000..a90c2d7d4\n--- /dev/null\n+++ b/news/1452.bugfix\n@@ -0,0 +1,2 @@\n+Sort the roles in the user serializer.\n+[maurits]\ndiff --git a/news/49.bugfix b/news/49.bugfix\nnew file mode 100644\nindex 000000000..cd6000244\n--- /dev/null\n+++ b/news/49.bugfix\n@@ -0,0 +1,3 @@\n+Test-only fix: normalize white space in html in some tests.\n+Needed to not fail with newer plone.outputfilters.\n+[maurits]\ndiff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 000000000..b11fd2500\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,3 @@\n+Tests: patch unique url for scale in old or new way.\n+This is only in serializer tests for images.\n+[maurits]\ndiff --git a/performance/convert.py b/performance/convert.py\nindex 651a6cdd7..7e17bf0e9 100644\n--- a/performance/convert.py\n+++ b/performance/convert.py\n@@ -9,22 +9,22 @@\n \n \n def main(argv):\n-    prefix = \'\'\n+    prefix = ""\n \n     try:\n-        opts, _ = getopt.getopt(sys.argv[1:], \'hp:\', [\'prefix=\'])\n+        opts, _ = getopt.getopt(sys.argv[1:], "hp:", ["prefix="])\n     except getopt.GetoptError:\n-        print(\'main.py -p <prefix>\')\n+        print("main.py -p <prefix>")\n         sys.exit(2)\n     for opt, arg in opts:\n-        if opt == \'-h\':\n-            print(\'main.py -p <prefix>\')\n+        if opt == "-h":\n+            print("main.py -p <prefix>")\n             sys.exit()\n         elif opt in ("-p", "--prefix"):\n             prefix = arg\n \n-    if prefix == \'\':\n-        raise Exception(\'Prefix was not assigned\')\n+    if prefix == "":\n+        raise Exception("Prefix was not assigned")\n \n     testsuites, testsuite = create_testsuites()\n     append_testcases(prefix, testsuite)\n@@ -34,16 +34,13 @@ def main(argv):\n \n \n def create_testsuites():\n-    testsuites = ET.Element(\'testsuites\')\n+    testsuites = ET.Element("testsuites")\n \n-    testsuite = ET.SubElement(testsuites, \'testsuite\')\n-    testsuite.set(\'name\', \'Locust Tests\')\n+    testsuite = ET.SubElement(testsuites, "testsuite")\n+    testsuite.set("name", "Locust Tests")\n \n-    timestamp = str(datetime.datetime.now()).replace(\n-        \' \',\n-        \'T\'\n-    )\n-    testsuite.set(\'timestamp\', timestamp)\n+    timestamp = str(datetime.datetime.now()).replace(" ", "T")\n+    testsuite.set("timestamp", timestamp)\n \n     return (testsuites, testsuite)\n \n@@ -52,32 +49,32 @@ def append_testcases(prefix, testsuite):\n     test_count = 0\n     failure_count = 0\n \n-    with open(prefix + \'_requests.csv\', mode=\'r\') as csv_file:\n+    with open(prefix + "_requests.csv", mode="r") as csv_file:\n         csv_reader = csv.DictReader(csv_file)\n \n         line_count = 0\n         for row in csv_reader:\n \n             if line_count > 0:\n-                row_method = row[\'Method\']\n-                row_name = row[\'Name\']\n+                row_method = row["Method"]\n+                row_name = row["Name"]\n \n-                if row_method != \'None\' and row_name != \'Total\':\n-                    testcase = ET.SubElement(testsuite, \'testcase\')\n+                if row_method != "None" and row_name != "Total":\n+                    testcase = ET.SubElement(testsuite, "testcase")\n \n-                    name = f\'{row_method}\\t{row_name} Average response time\'\n-                    testcase.set(\'name\', name)\n+                    name = f"{row_method}\\t{row_name} Average response time"\n+                    testcase.set("name", name)\n \n-                    test_count += int(row[\'# requests\'])\n-                    failure_count += int(row[\'# failures\'])\n-                    avg_response_s = float(row[\'Average response time\']) / 1000\n-                    testcase.set(\'time\', str(avg_response_s))\n+                    test_count += int(row["# requests"])\n+                    failure_count += int(row["# failures"])\n+                    avg_response_s = float(row["Average response time"]) / 1000\n+                    testcase.set("time", str(avg_response_s))\n \n             line_count += 1\n \n-        testsuite.set(\'tests\', str(test_count))\n-        testsuite.set(\'failures\', str(failure_count))\n+        testsuite.set("tests", str(test_count))\n+        testsuite.set("failures", str(failure_count))\n \n \n-if __name__ == \'__main__\':\n-    main(sys.argv[1:])\n\\ No newline at end of file\n+if __name__ == "__main__":\n+    main(sys.argv[1:])\ndiff --git a/performance/querystring-search.py b/performance/querystring-search.py\nindex acadac7b7..00c7e3b32 100644\n--- a/performance/querystring-search.py\n+++ b/performance/querystring-search.py\n@@ -1,7 +1,7 @@\n from locust import HttpUser, task\n \n-class QuerystringSearchAnonymousUser(HttpUser):\n \n+class QuerystringSearchAnonymousUser(HttpUser):\n     @task\n     def querystring_search_root(self):\n         headers = {\n@@ -17,14 +17,13 @@ def querystring_search_root(self):\n                     {\n                         "i": "portal_type",\n                         "o": "plone.app.querystring.operation.selection.any",\n-                        "v": ["Document"]\n+                        "v": ["Document"],\n                     }\n                 ]\n             },\n             name="Querystring Search (Root)",\n         )\n \n-\n     @task\n     def querystring_search_root_fullobjects_true(self):\n         headers = {\n@@ -40,15 +39,14 @@ def querystring_search_root_fullobjects_true(self):\n                     {\n                         "i": "portal_type",\n                         "o": "plone.app.querystring.operation.selection.any",\n-                        "v": ["Document"]\n+                        "v": ["Document"],\n                     }\n                 ],\n-                "fullobjects": 1\n+                "fullobjects": 1,\n             },\n             name="Querystring Search (Root, Fullobjects=1)",\n         )\n \n-\n     @task\n     def querystring_search_content(self):\n         headers = {\n@@ -64,14 +62,13 @@ def querystring_search_content(self):\n                     {\n                         "i": "portal_type",\n                         "o": "plone.app.querystring.operation.selection.any",\n-                        "v": ["Document"]\n+                        "v": ["Document"],\n                     }\n                 ]\n             },\n             name="Querystring Search (Content)",\n         )\n \n-\n     @task\n     def querystring_search_content_fullobjects_true(self):\n         headers = {\n@@ -87,10 +84,10 @@ def querystring_search_content_fullobjects_true(self):\n                     {\n                         "i": "portal_type",\n                         "o": "plone.app.querystring.operation.selection.any",\n-                        "v": ["Document"]\n+                        "v": ["Document"],\n                     }\n                 ],\n-                "fullobjects": 1\n+                "fullobjects": 1,\n             },\n             name="Querystring Search (Content, Fullobjects=1)",\n         )\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 6ab61a6ad..5642cf608 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,40 +1,27 @@\n [buildout]\n-extensions = mr.developer\n extends =\n-    https://dist.plone.org/release/6.0.0a3/versions.cfg\n+    https://dist.plone.org/release/6.0.0a4/versions.cfg\n     base.cfg\n-find-links = https://dist.plone.org/release/6.0.0a3/\n+find-links = https://dist.plone.org/release/6.0.0a4/\n versions=versions\n-auto-checkout =\n-    Products.CMFPlone\n-always-checkout = true\n \n-[sources]\n-Products.CMFPlone = git https://github.com/plone/Products.CMFPlone.git rev=1103e16165ede181eec0b1a27b9c5a64e0046172\n+[buildout:python37]\n+parts =\n+    test\n+    code-analysis\n \n [instance]\n recipe = plone.recipe.zope2instance\n zodb-temporary-storage = off\n-# On March 24 2022, all ES6 stuff was merged.\n-# Since then, mockup is no longer a Python package and is not pulled in by CMFPlone\n-# The plone.app.widgets pinned in 6.0.0a3 still tries to import it.\n-# So temporarily include the egg explicitly, until Plone 6.0.0a4 is out.\n-# Alternative would be to add plone.app.widgets to the checkouts.\n-eggs += mockup\n \n [versions]\n-# we need the new traversal\n-plone.rest = 2.0.0a3\n-\n-# We need newer plone.app.testing to fix test setup errors like this:\n-# ZODB.POSException.POSKeyError: \'RequestContainer\' object has no attribute \'adapters\'\n-plone.app.testing = 7.0.0a2\n-\n black = 21.7b0\n \n # cffi 1.14.3 fails on apple m1\n # cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n cffi = 1.14.6\n \n-# Error: The requirement (\'importlib-metadata<4.3\') is not allowed by your [versions] constraint (4.5.0)\n+[versions:python37]\n+# Requirement of flake8>=2.4.0: importlib-metadata<4.3\n+# Error: The requirement (\'importlib-metadata<4.3\') is not allowed by your [versions] constraint (4.11.2)\n importlib-metadata = 4.2.0\ndiff --git a/requirements.txt b/requirements-5.2.txt\nsimilarity index 100%\nrename from requirements.txt\nrename to requirements-5.2.txt\ndiff --git a/requirements-6.0.txt b/requirements-6.0.txt\nnew file mode 100644\nindex 000000000..62c99aa74\n--- /dev/null\n+++ b/requirements-6.0.txt\n@@ -0,0 +1,12 @@\n+# from https://dist.plone.org/release/6.0.0a4/requirements.txt\n+setuptools==62.0.0\n+zc.buildout==3.0.0rc3\n+pip==22.0.4\n+wheel==0.37.1\n+\n+# Windows specific down here (has to be installed here, fails in buildout)\n+# Dependency of zope.sendmail:\n+pywin32 ; platform_system == \'Windows\'\n+\n+# SSL Certs on windows, because Python is missing them otherwise:\n+certifi ; platform_system == \'Windows\'\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 34fdb2d61..742c7d35f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,11 @@\n \n version = "8.22.1.dev0"\n \n-assert sys.version_info >= (3, 6, 0), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n+assert sys.version_info >= (\n+    3,\n+    6,\n+    0,\n+), "plone.restapi 8 requires Python 3.6.0+. Please downgrade to plone.restapi 7 for Python 2 and Plone 4.3/5.1."\n \n \n def read(filename):\n@@ -34,6 +38,7 @@ def read(filename):\n \n TEST_REQUIRES = [\n     "collective.MockMailHost",\n+    "plone.app.caching",\n     "plone.app.contenttypes",\n     "plone.app.robotframework",\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n@@ -82,9 +87,9 @@ def read(filename):\n         "setuptools",\n         "importlib-metadata; python_version<\'3.8\'",\n         "python-dateutil",\n-        "plone.behavior>=1.1",  # adds name to behavior directive\n-        "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.1",  # new/fixed json field\n+        "plone.rest",  # json renderer moved to plone.restapi\n+        "plone.schema>=1.2.1",  # new/fixed json field\n+        "Products.CMFPlone>=5.2",\n         "PyJWT>=1.7.0",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 5fcfb0e47..a18da9013 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -22,6 +22,12 @@\n   <include package="plone.behavior" />\n   <include package="plone.rest" />\n   <include package="plone.schema" />\n+\n+  <include\n+      package="plone.app.caching"\n+      zcml:condition="installed plone.app.caching"\n+      />\n+\n   <include file="indexers.zcml" />\n \n   <five:registerPackage\ndiff --git a/src/plone/restapi/controlpanels/registry.py b/src/plone/restapi/controlpanels/registry.py\nindex e7adaffa2..d3948a818 100644\n--- a/src/plone/restapi/controlpanels/registry.py\n+++ b/src/plone/restapi/controlpanels/registry.py\n@@ -10,6 +10,7 @@\n from Products.CMFPlone.interfaces.controlpanel import ISecuritySchema\n from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n+from Products.CMFPlone.interfaces.controlpanel import IUserGroupsSettingsSchema\n from plone.restapi.controlpanels import RegistryConfigletPanel\n \n try:\n@@ -100,3 +101,15 @@ class SecurityControlpanel(RegistryConfigletPanel):\n     schema = ISecuritySchema\n     configlet_id = "SecuritySettings"\n     configlet_category_id = "plone-security"\n+\n+\n+# Users and groups\n+\n+\n+@adapter(Interface, Interface)\n+class UserGroupControlpanel(RegistryConfigletPanel):\n+    schema = IUserGroupsSettingsSchema\n+    configlet_id = "UsersGroupsSettings"\n+    configlet_category_id = "plone-users-and-groups"\n+    group = "Users and Groups"\n+    title = "User and Group Settings"\ndiff --git a/src/plone/restapi/deserializer/utils.py b/src/plone/restapi/deserializer/utils.py\nindex 1c9190cb1..7b9c206cc 100644\n--- a/src/plone/restapi/deserializer/utils.py\n+++ b/src/plone/restapi/deserializer/utils.py\n@@ -30,9 +30,11 @@ def path2uid(context, link):\n     suffix = ""\n     while not IUUIDAware.providedBy(obj):\n         obj = aq_parent(obj)\n+        if obj is None:\n+            break\n         suffix += "/" + segments.pop()\n     # check if obj is wrong because of acquisition\n-    if "/".join(obj.getPhysicalPath()) != "/".join(segments):\n+    if not obj or "/".join(obj.getPhysicalPath()) != "/".join(segments):\n         return link\n     href = relative_up * "../" + "resolveuid/" + IUUID(obj)\n     if suffix:\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex c4fc8ff5a..f66898f2a 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -5,7 +5,9 @@\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services.discussion.utils import can_delete\n from plone.restapi.services.discussion.utils import can_delete_own\n+from plone.restapi.services.discussion.utils import can_view\n from plone.restapi.services.discussion.utils import can_edit\n+from plone.restapi.services.discussion.utils import can_reply\n from plone.restapi.services.discussion.utils import delete_own_comment_allowed\n from plone.restapi.services.discussion.utils import edit_comment_allowed\n from Products.CMFCore.utils import getToolByName\n@@ -24,6 +26,7 @@ def __init__(self, context, request):\n \n     def __call__(self):\n         # We\'ll batch the threads\n+        view_comments = can_view(self.context)\n         results = list(self.context.getThreads())\n         batch = HypermediaBatch(self.request, results)\n \n@@ -31,13 +34,21 @@ def __call__(self):\n         results["@id"] = batch.canonical_url\n \n         results["items_total"] = batch.items_total\n+        results["permissions"] = {\n+            "view_comments": view_comments,\n+            "can_reply": can_reply(self.context),\n+        }\n         if batch.links:\n             results["batching"] = batch.links\n \n-        results["items"] = [\n-            getMultiAdapter((thread["comment"], self.request), ISerializeToJson)()\n-            for thread in batch\n-        ]\n+        results["items"] = (\n+            [\n+                getMultiAdapter((thread["comment"], self.request), ISerializeToJson)()\n+                for thread in batch\n+            ]\n+            if view_comments\n+            else []\n+        )\n \n         return results\n \n@@ -87,6 +98,7 @@ def __call__(self, include_items=True):\n             ),  # noqa\n             "is_editable": edit_comment_allowed() and can_edit(self.context),\n             "is_deletable": can_delete(self.context) or delete_own,\n+            "can_reply": can_reply(self.context),\n         }\n \n     def get_author_image(self, username=None):\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex c9656f155..d9c227946 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -42,13 +42,13 @@ def __call__(self):\n         group = self.context\n         members = group.getGroupMemberIds()\n         batch = HypermediaBatch(self.request, members)\n-        users_data = {\n+        members_data = {\n             "@id": batch.canonical_url,\n             "items_total": batch.items_total,\n             "items": sorted(batch),\n         }\n         if batch.links:\n-            users_data["batching"] = batch.links\n+            members_data["batching"] = batch.links\n \n-        data["users"] = users_data\n+        data["members"] = members_data\n         return data\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex 1dbae7cc6..e651f3167 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -1,5 +1,6 @@\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.batching import HypermediaBatch\n from Products.CMFCore.interfaces._tools import IMemberData\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_unicode\n@@ -24,7 +25,7 @@ def __call__(self):\n         roles = user.getRoles()\n         # Anonymous and Authenticated are pseudo roles assign automatically\n         # to logged-in or logged-out users. They should not be exposed here\n-        roles = list(set(roles) - {"Anonymous", "Authenticated"})\n+        roles = sorted(list(set(roles) - {"Anonymous", "Authenticated"}))\n \n         data = {\n             "@id": f"{portal.absolute_url()}/@users/{user.id}",\n@@ -57,13 +58,32 @@ def __call__(self):\n         return data\n \n \n-@implementer(ISerializeToJson)\n+@implementer(ISerializeToJsonSummary)\n @adapter(IMemberData, IRequest)\n-class SerializeUserToJson(BaseSerializer):\n-    pass\n+class SerializeUserToJsonSummary(BaseSerializer):\n+    def __call__(self):\n+        data = super().__call__()\n+        return data\n \n \n-@implementer(ISerializeToJsonSummary)\n+@implementer(ISerializeToJson)\n @adapter(IMemberData, IRequest)\n-class SerializeUserToJsonSummary(BaseSerializer):\n-    pass\n+class SerializeUserToJson(BaseSerializer):\n+    def __call__(self):\n+        data = super().__call__()\n+        user = self.context\n+        gtool = getToolByName(self.context, "portal_groups")\n+        groupIds = user.getGroups()\n+        groups = [gtool.getGroupById(grp) for grp in groupIds]\n+        groups = [{"id": grp.id, "title": grp.title or grp.id} for grp in groups]\n+        batch = HypermediaBatch(self.request, groups)\n+        groups_data = {\n+            "@id": batch.canonical_url,\n+            "items_total": batch.items_total,\n+            "items": sorted(batch, key=lambda x: x["title"]),\n+        }\n+        if batch.links:\n+            groups_data["batching"] = batch.links\n+\n+        data["groups"] = groups_data\n+        return data\ndiff --git a/src/plone/restapi/services/actions/configure.zcml b/src/plone/restapi/services/actions/configure.zcml\nindex b716a1a99..042e1e316 100644\n--- a/src/plone/restapi/services/actions/configure.zcml\n+++ b/src/plone/restapi/services/actions/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@actions"\n       />\n+  <cache:ruleset\n+      for=".get.ActionsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 8f6a50846..64e70d85a 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -5,6 +5,7 @@\n from Products.GenericSetup import EXTENSION\n from Products.GenericSetup.tool import UNKNOWN\n from zope.component import getAllUtilitiesRegisteredFor\n+from zope.i18n import translate\n \n import logging\n import pkg_resources\n@@ -31,8 +32,8 @@ def serializeAddon(self, addon):\n         return {\n             "@id": "{}/@addons/{}".format(self.context.absolute_url(), addon["id"]),\n             "id": addon["id"],\n-            "title": addon["title"],\n-            "description": addon["description"],\n+            "title": translate(addon["title"], context=self.request),\n+            "description": translate(addon["description"], context=self.request),\n             "install_profile_id": addon["install_profile_id"],\n             "is_installed": addon["is_installed"],\n             "profile_type": addon["profile_type"],\ndiff --git a/src/plone/restapi/services/breadcrumbs/configure.zcml b/src/plone/restapi/services/breadcrumbs/configure.zcml\nindex 6dde6de78..d8a169b03 100644\n--- a/src/plone/restapi/services/breadcrumbs/configure.zcml\n+++ b/src/plone/restapi/services/breadcrumbs/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@breadcrumbs"\n       />\n+  <cache:ruleset\n+      for=".get.BreadcrumbsGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/content/configure.zcml b/src/plone/restapi/services/content/configure.zcml\nindex c18e6a0fb..72073faaf 100644\n--- a/src/plone/restapi/services/content/configure.zcml\n+++ b/src/plone/restapi/services/content/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -17,6 +18,11 @@\n       for="Products.CMFCore.interfaces.IContentish"\n       permission="zope2.View"\n       />\n+  <cache:ruleset\n+      for=".get.ContentGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="PATCH"\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex fa746bcd8..be384f87f 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -116,6 +116,13 @@\n         name="security"\n         />\n \n+\n+    <!-- Users and Groups -->\n+    <adapter\n+        factory="plone.restapi.controlpanels.registry.UserGroupControlpanel"\n+        name="usergroup"\n+        />\n+\n   </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/services/discussion/configure.zcml b/src/plone/restapi/services/discussion/configure.zcml\nindex 9b2b446a6..635872d23 100644\n--- a/src/plone/restapi/services/discussion/configure.zcml\n+++ b/src/plone/restapi/services/discussion/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -16,6 +17,11 @@\n       permission="zope2.View"\n       name="@comments"\n       />\n+  <cache:ruleset\n+      for=".conversation.CommentsGet"\n+      ruleset="plone.content.itemView"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\n@@ -29,7 +35,7 @@\n       method="PATCH"\n       factory=".conversation.CommentsUpdate"\n       for="*"\n-      permission="zope2.View"\n+      permission="plone.app.discussion.EditComments"\n       name="@comments"\n       />\n \n@@ -37,7 +43,7 @@\n       method="DELETE"\n       factory=".conversation.CommentsDelete"\n       for="*"\n-      permission="zope2.View"\n+      permission="plone.app.discussion.DeleteComments"\n       name="@comments"\n       />\n \ndiff --git a/src/plone/restapi/services/discussion/utils.py b/src/plone/restapi/services/discussion/utils.py\nindex 92d4dce87..2bae3aa8b 100644\n--- a/src/plone/restapi/services/discussion/utils.py\n+++ b/src/plone/restapi/services/discussion/utils.py\n@@ -28,6 +28,13 @@ def permission_exists(permission_id):\n     return permission is not None\n \n \n+def can_view(context):\n+    """Returns true if current user has the \'View comments\' permission."""\n+    if not permission_exists("plone.app.discussion.ViewComments"):\n+        return bool(getSecurityManager().checkPermission("View", context))\n+    return bool(getSecurityManager().checkPermission("View comments", context))\n+\n+\n def can_review(comment):\n     """Returns true if current user has the \'Review comments\' permission."""\n     return bool(\n@@ -35,6 +42,13 @@ def can_review(comment):\n     )\n \n \n+def can_reply(comment):\n+    """Returns true if current user has the \'Reply to item\' permission."""\n+    return bool(\n+        getSecurityManager().checkPermission("Reply to item", aq_inner(comment))\n+    )\n+\n+\n def can_delete(comment):\n     """Returns true if current user has the \'Delete comments\'\n     permission.\ndiff --git a/src/plone/restapi/services/groups/get.py b/src/plone/restapi/services/groups/get.py\nindex e15ce54dd..0906f5603 100644\n--- a/src/plone/restapi/services/groups/get.py\n+++ b/src/plone/restapi/services/groups/get.py\n@@ -65,9 +65,7 @@ def reply(self):\n         if len(self.params) == 0:\n             result = []\n             for group in self._get_groups():\n-                serializer = queryMultiAdapter(\n-                    (group, self.request), ISerializeToJsonSummary\n-                )\n+                serializer = queryMultiAdapter((group, self.request), ISerializeToJson)\n                 result.append(serializer())\n             return result\n         # we retrieve the user on the user id not the username\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 1940cf14e..9d17ebc77 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -12,7 +12,23 @@\n \n @implementer(IPublishTraverse)\n class GroupsPatch(Service):\n-    """Updates an existing group."""\n+    """Update an existing group with users, roles, groups, title and description.\n+\n+    Args:\n+        data (dict): dictionary of\n+        id: str\n+        users: dict: The users object is a mapping of a user_id and a boolean indicating adding or removing from the group.\n+        roles: list of str\n+        groups: list of str\n+        title: str\n+        description: str\n+\n+    Raises:\n+        BadRequest: No group with this id exists.\n+\n+    Response:\n+        HTTP/1.1 204 No Content\n+    """\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\n@@ -41,8 +57,6 @@ def reply(self):\n         if not group:\n             raise BadRequest("Trying to update a non-existing group.")\n \n-        title = data.get("title", None)\n-        description = data.get("description", None)\n         roles = data.get("roles", None)\n         groups = data.get("groups", None)\n         users = data.get("users", {})\n@@ -52,20 +66,18 @@ def reply(self):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n \n         portal_groups = getToolByName(self.context, "portal_groups")\n-\n+        properties = dict((k, data[k]) for k in ["title", "description"] if k in data)\n         portal_groups.editGroup(\n             self._get_group_id,\n             roles=roles,\n             groups=groups,\n-            title=title,\n-            description=description,\n+            **properties,\n         )\n \n         properties = {}\n         for id, property in group.propertyItems():\n             if data.get(id, False):\n                 properties[id] = data[id]\n-\n         group.setGroupProperties(properties)\n \n         # Add/remove members\n@@ -77,5 +89,4 @@ def reply(self):\n             else:\n                 if userid in memberids:\n                     group.removeMember(userid)\n-\n         return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex b304117f6..58d65c74d 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n@@ -21,6 +22,11 @@\n       permission="zope2.View"\n       name="@translations"\n       />\n+  <cache:ruleset\n+      for=".pam.TranslationInfo"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/services/navigation/configure.zcml b/src/plone/restapi/services/navigation/configure.zcml\nindex f1de8f2d6..4d38b80bf 100644\n--- a/src/plone/restapi/services/navigation/configure.zcml\n+++ b/src/plone/restapi/services/navigation/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <adapter\n@@ -15,5 +17,10 @@\n       permission="zope2.View"\n       name="@navigation"\n       />\n+  <cache:ruleset\n+      for=".get.NavigationGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/querystring/configure.zcml b/src/plone/restapi/services/querystring/configure.zcml\nindex 7088090b0..0cc223e65 100644\n--- a/src/plone/restapi/services/querystring/configure.zcml\n+++ b/src/plone/restapi/services/querystring/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@querystring"\n       />\n+  <cache:ruleset\n+      for=".get.QuerystringGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/search/configure.zcml b/src/plone/restapi/services/search/configure.zcml\nindex e436c00a2..a48c7fc36 100644\n--- a/src/plone/restapi/services/search/configure.zcml\n+++ b/src/plone/restapi/services/search/configure.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:cache="http://namespaces.zope.org/cache"\n     xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     >\n \n   <plone:service\n@@ -10,5 +12,10 @@\n       permission="zope2.View"\n       name="@search"\n       />\n+  <cache:ruleset\n+      for=".get.SearchGet"\n+      ruleset="plone.content.dynamic"\n+      zcml:condition="have plone-app-caching-3"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 72d690731..eebacbc8f 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -1,8 +1,9 @@\n from AccessControl import getSecurityManager\n-from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import ISerializeToJson, ISerializeToJsonSummary\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n+from urllib.parse import parse_qs\n from zExceptions import BadRequest\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n@@ -21,7 +22,7 @@ def __init__(self, context, request):\n         portal = getSite()\n         self.portal_membership = getToolByName(portal, "portal_membership")\n         self.acl_users = getToolByName(portal, "acl_users")\n-        self.query = self.request.form.copy()\n+        self.query = parse_qs(self.request["QUERY_STRING"])\n \n     def publishTraverse(self, request, name):\n         # Consume any path segments after /@users as parameters\n@@ -50,11 +51,16 @@ def _get_users(self):\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n-    def _get_filtered_users(self, query, limit):\n+    def _get_filtered_users(self, query, groups_filter, limit):\n         results = self.acl_users.searchUsers(id=query, max_results=limit)\n         users = [\n             self.portal_membership.getMemberById(user["userid"]) for user in results\n         ]\n+        if groups_filter:\n+            users = [\n+                user for user in users if set(user.getGroups()) & set(groups_filter)\n+            ]\n+\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -74,11 +80,14 @@ def has_permission_to_access_user_info(self):\n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n+            groups_filter = self.query.get(\n+                "groups-filter:list", self.query.get("groups-filter%3Alist", [])\n+            )\n             limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n-            if query:\n+            if query or groups_filter:\n                 # Someone is searching users, check if they are authorized\n                 if self.has_permission_to_query():\n-                    users = self._get_filtered_users(query, limit)\n+                    users = self._get_filtered_users(query, groups_filter, limit)\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n@@ -119,7 +128,9 @@ def reply(self):\n             if not user:\n                 self.request.response.setStatus(404)\n                 return\n-            serializer = queryMultiAdapter((user, self.request), ISerializeToJson)\n+            serializer = queryMultiAdapter(\n+                (user, self.request), ISerializeToJsonSummary\n+            )\n             return serializer()\n         else:\n             self.request.response.setStatus(401)\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 303eed97c..0fdaf011f 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -18,7 +18,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.tests.dxtypes import INDEXES as DX_TYPES_INDEXES\n from plone.restapi.tests.helpers import add_catalog_indexes\n-from plone.testing import z2\n+from plone.testing import zope\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n@@ -37,6 +37,12 @@\n import time\n \n \n+try:\n+    from plone.app.caching.testing import PloneAppCachingBase\n+except ImportError:\n+    # we get an import error in Plone 5.2 and in 6.0a4 an earlier\n+    PloneAppCachingBase = None\n+\n ENABLED_LANGUAGES = ["de", "en", "es", "fr"]\n \n \n@@ -118,7 +124,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n         self.loadZCML(package=collective.MockMailHost)\n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -142,10 +148,11 @@ def setUpPloneSite(self, portal):\n \n PLONE_RESTAPI_DX_FIXTURE = PloneRestApiDXLayer()\n PLONE_RESTAPI_DX_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE,), name="PloneRestApiDXLayer:Integration"\n+    bases=(PLONE_RESTAPI_DX_FIXTURE,),\n+    name="PloneRestApiDXLayer:Integration",\n )\n PLONE_RESTAPI_DX_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXLayer:Functional",\n )\n \n@@ -175,7 +182,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n@@ -201,10 +208,34 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_DX_PAM_FIXTURE,), name="PloneRestApiDXPAMLayer:Integration"\n )\n PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_DX_PAM_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXPAMLayer:Functional",\n )\n \n+if PloneAppCachingBase is not None:\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+    class PloneRestApiCachingLayer(PloneAppCachingBase):\n+\n+        defaultBases = [\n+            PLONE_RESTAPI_DX_PAM_FIXTURE,\n+        ]\n+\n+    PLONE_RESTAPI_CACHING_FIXTURE = PloneRestApiCachingLayer()\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_RESTAPI_CACHING_FIXTURE,),\n+        name="PloneRestApICachingLayer:Integration",\n+    )\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(\n+            PLONE_RESTAPI_CACHING_FIXTURE,\n+            zope.WSGI_SERVER_FIXTURE,\n+        ),\n+        name="PloneRestApICachingLayer:Functional",\n+    )\n+else:\n+    PLONE_RESTAPI_CACHING_INTEGRATION_TESTING = None\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING = None\n+\n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n \n@@ -216,7 +247,7 @@ def setUpZope(self, app, configurationContext):\n         xmlconfig.file("configure.zcml", plone.restapi, context=configurationContext)\n         xmlconfig.file("testing.zcml", plone.restapi, context=configurationContext)\n \n-        z2.installProduct(app, "plone.restapi")\n+        zope.installProduct(app, "plone.restapi")\n \n \n PLONE_RESTAPI_ITERATE_FIXTURE = PloneRestApiDXIterateLayer()\n@@ -225,7 +256,7 @@ def setUpZope(self, app, configurationContext):\n     name="PloneRestApiDXIterateLayer:Integration",\n )\n PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_ITERATE_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApiDXIterateLayer:Functional",\n )\n \n@@ -243,7 +274,7 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, zope.WSGI_SERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \n@@ -259,7 +290,7 @@ def __init__(self, base_url, test=None):\n \n         Apparently, network sockets created by the `requests` library can remain open\n         even after the full body of the response has been read, despite [the\n-        docs](https://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow). In\n+        docs](https://requests.readthedocs.io/en/latest/user/advanced/#body-content-workflow). In\n         particular, this results in `ResourceWarning: unclosed <socket.socket ...>` leak\n         warnings when running the tests.  If the `test` kwarg is passed, it will be used\n         to register future cleanup calls to close this session and thus also the\n@@ -311,3 +342,19 @@ def register_static_uuid_utility(prefix):\n     prefix = re.sub(r"[^a-zA-Z0-9\\-_]", "", prefix)\n     generator = StaticUUIDGenerator(prefix)\n     getGlobalSiteManager().registerUtility(component=generator)\n+\n+\n+def normalize_html(value):\n+    # Strip all white spaces of every line, then join on one line.\n+    # But try to avoid getting \'Go to<a href\' instead of \'Go to <a href\'.\n+    lines = []\n+    for line in value.splitlines():\n+        line = line.strip()\n+        if (\n+            line.startswith("<")\n+            and not line.startswith("</")\n+            and not line.startswith("<br")\n+        ):\n+            line = " " + line\n+        lines.append(line)\n+    return "".join(lines).strip()\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 5e6e64f92..dd01a6d51 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,4 +1,7 @@\n+from contextlib import contextmanager\n+from plone.scale import storage\n from Products.CMFCore.utils import getToolByName\n+from unittest.mock import patch\n from urllib.parse import urlparse\n \n import quopri\n@@ -43,3 +46,30 @@ def ascii_token(text):\n     bytestring that is safe to use in term tokens.\n     """\n     return quopri.encodestring(text.encode("utf-8"))\n+\n+\n+@contextmanager\n+def patch_scale_uuid(value):\n+    """Patch plone.scale to use a hard coded value as unique id.\n+\n+    Until plone.scale 4.0.0a3 (2022-05-09) this goes via the uuid4 function.\n+    For later versions we need to patch the new hash_key method.\n+\n+    We also patch the _modified_since method to always return True.\n+    Otherwise you may get info from a different scale back,\n+    precisely because we give all scales the same "unique" id,\n+    which then is of course no longer unique, making the logic unstable.\n+    This is needed for the newer plone.scale versions,\n+    but should be perfectly fine for the older ones.\n+    """\n+    if hasattr(storage.AnnotationStorage, "hash_key"):\n+        to_patch = storage.AnnotationStorage\n+        name = "hash_key"\n+    else:\n+        to_patch = storage\n+        name = "uuid4"\n+    with patch.object(to_patch, name, return_value=value):\n+        with patch.object(\n+            storage.AnnotationStorage, "_modified_since", return_value=True\n+        ):\n+            yield\ndiff --git a/src/plone/restapi/tests/http-examples/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nindex 851331ea1..29b41b487 100644\n--- a/src/plone/restapi/tests/http-examples/comments_get.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_get.resp\n@@ -11,6 +11,7 @@ Content-Type: application/json\n             "author_image": null,\n             "author_name": null,\n             "author_username": null,\n+            "can_reply": true,\n             "comment_id": "1400000000000000",\n             "creation_date": "1995-07-31T13:45:00",\n             "in_reply_to": null,\n@@ -30,6 +31,7 @@ Content-Type: application/json\n             "author_image": null,\n             "author_name": null,\n             "author_username": null,\n+            "can_reply": true,\n             "comment_id": "1400000000000001",\n             "creation_date": "1995-07-31T13:45:00",\n             "in_reply_to": "1400000000000000",\n@@ -43,5 +45,9 @@ Content-Type: application/json\n             "user_notification": null\n         }\n     ],\n-    "items_total": 2\n+    "items_total": 2,\n+    "permissions": {\n+        "can_reply": true,\n+        "view_comments": true\n+    }\n }\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch.resp\nindex e69de29bb..0074ded3b 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nindex 07bd22185..a69eaef55 100644\n--- a/src/plone/restapi/tests/http-examples/groups.resp\n+++ b/src/plone/restapi/tests/http-examples/groups.resp\n@@ -8,6 +8,11 @@ Content-Type: application/json\n         "email": "",\n         "groupname": "Administrators",\n         "id": "Administrators",\n+        "members": {\n+            "@id": "http://localhost:55001/plone/@groups",\n+            "items": [],\n+            "items_total": 0\n+        },\n         "roles": [\n             "Manager",\n             "Authenticated"\n@@ -20,6 +25,11 @@ Content-Type: application/json\n         "email": "",\n         "groupname": "Reviewers",\n         "id": "Reviewers",\n+        "members": {\n+            "@id": "http://localhost:55001/plone/@groups",\n+            "items": [],\n+            "items_total": 0\n+        },\n         "roles": [\n             "Reviewer",\n             "Authenticated"\n@@ -32,6 +42,11 @@ Content-Type: application/json\n         "email": "",\n         "groupname": "Site Administrators",\n         "id": "Site Administrators",\n+        "members": {\n+            "@id": "http://localhost:55001/plone/@groups",\n+            "items": [],\n+            "items_total": 0\n+        },\n         "roles": [\n             "Site Administrator",\n             "Authenticated"\n@@ -44,6 +59,13 @@ Content-Type: application/json\n         "email": "ploneteam@plone.org",\n         "groupname": "ploneteam",\n         "id": "ploneteam",\n+        "members": {\n+            "@id": "http://localhost:55001/plone/@groups",\n+            "items": [\n+                "noam"\n+            ],\n+            "items_total": 1\n+        },\n         "roles": [\n             "Authenticated"\n         ],\n@@ -55,6 +77,11 @@ Content-Type: application/json\n         "email": "",\n         "groupname": "AuthenticatedUsers",\n         "id": "AuthenticatedUsers",\n+        "members": {\n+            "@id": "http://localhost:55001/plone/@groups",\n+            "items": [],\n+            "items_total": 0\n+        },\n         "roles": [],\n         "title": "Authenticated Users (Virtual Group)"\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex 66fb026f3..99793212f 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -8,12 +8,7 @@ Location: http://localhost:55001/plone/@groups/fwt\n     "email": "fwt@plone.org",\n     "groupname": "fwt",\n     "id": "fwt",\n-    "roles": [\n-        "Manager",\n-        "Authenticated"\n-    ],\n-    "title": "Framework Team",\n-    "users": {\n+    "members": {\n         "@id": "http://localhost:55001/plone/@groups",\n         "items": [\n             "Administrators",\n@@ -21,5 +16,10 @@ Location: http://localhost:55001/plone/@groups/fwt\n             "test_user_1_"\n         ],\n         "items_total": 3\n-    }\n+    },\n+    "roles": [\n+        "Manager",\n+        "Authenticated"\n+    ],\n+    "title": "Framework Team"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nindex e54bb1555..d4b132c67 100644\n--- a/src/plone/restapi/tests/http-examples/groups_get.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_get.resp\n@@ -7,13 +7,15 @@ Content-Type: application/json\n     "email": "ploneteam@plone.org",\n     "groupname": "ploneteam",\n     "id": "ploneteam",\n+    "members": {\n+        "@id": "http://localhost:55001/plone/@groups/ploneteam",\n+        "items": [\n+            "noam"\n+        ],\n+        "items_total": 1\n+    },\n     "roles": [\n         "Authenticated"\n     ],\n-    "title": "Plone Team",\n-    "users": {\n-        "@id": "http://localhost:55001/plone/@groups/ploneteam",\n-        "items": [],\n-        "items_total": 0\n-    }\n+    "title": "Plone Team"\n }\ndiff --git a/src/plone/restapi/tests/http-examples/groups_update.req b/src/plone/restapi/tests/http-examples/groups_update.req\nindex 70fe75607..f33a5d789 100644\n--- a/src/plone/restapi/tests/http-examples/groups_update.req\n+++ b/src/plone/restapi/tests/http-examples/groups_update.req\n@@ -4,7 +4,16 @@ Authorization: Basic YWRtaW46c2VjcmV0\n Content-Type: application/json\n \n {\n+    "description": "Plone team members",\n     "email": "ploneteam2@plone.org",\n+    "groups": [\n+        "Site Administrators"\n+    ],\n+    "roles": [\n+        "Authenticated",\n+        "Reviewer"\n+    ],\n+    "title": "The Plone team",\n     "users": {\n         "test_user_1_": false\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.req b/src/plone/restapi/tests/http-examples/translated_messages_addons.req\nnew file mode 100644\nindex 000000000..d4ee5f8f9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.req\n@@ -0,0 +1,4 @@\n+GET /plone/@addons HTTP/1.1\n+Accept: application/json\n+Accept-Language: es\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nnew file mode 100644\nindex 000000000..005f86376\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -0,0 +1,91 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/Products.CMFPlacefulWorkflow",\n+            "description": "Agrega a Plone la capacidad de cambiar las cadenas de flujo de trabajo para los tipos en cada objeto. Tiene dependencias de los tipos b\\u00e1sicos de Plone.",\n+            "id": "Products.CMFPlacefulWorkflow",\n+            "install_profile_id": "Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow",\n+            "is_installed": false,\n+            "profile_type": "default",\n+            "title": "Soporte de Pol\\u00edtica de Flujo de trabajo (CMFPlacefulWorkflow)",\n+            "uninstall_profile_id": "Products.CMFPlacefulWorkflow:uninstall",\n+            "upgrade_info": {},\n+            "version": "2.0.4"\n+        },\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/collective.MockMailHost",\n+            "description": "Installs the collective.MockMailHost package",\n+            "id": "collective.MockMailHost",\n+            "install_profile_id": "collective.MockMailHost:default",\n+            "is_installed": true,\n+            "profile_type": "default",\n+            "title": "collective.MockMailHost",\n+            "uninstall_profile_id": "",\n+            "upgrade_info": {\n+                "available": false,\n+                "hasProfile": true,\n+                "installedVersion": "2.0.0",\n+                "newVersion": "2.0.0",\n+                "required": false\n+            },\n+            "version": "2.0.0"\n+        },\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/plone.app.iterate",\n+            "description": "A\\u00f1ade soporte de copia de trabajo (modificaciones in situ) a Plone.",\n+            "id": "plone.app.iterate",\n+            "install_profile_id": "plone.app.iterate:default",\n+            "is_installed": false,\n+            "profile_type": "default",\n+            "title": "Soporte de Copia de Trabajo (Repetir)",\n+            "uninstall_profile_id": "plone.app.iterate:uninstall",\n+            "upgrade_info": {},\n+            "version": "4.0.2"\n+        },\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/plone.app.multilingual",\n+            "description": "Instalar para activar el soporte de contenido multiling\\u00fce con plone.app.multilingual",\n+            "id": "plone.app.multilingual",\n+            "install_profile_id": "plone.app.multilingual:default",\n+            "is_installed": false,\n+            "profile_type": "default",\n+            "title": "Soporte Multiidioma",\n+            "uninstall_profile_id": "plone.app.multilingual:uninstall",\n+            "upgrade_info": {},\n+            "version": "5.6.4"\n+        },\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/plone.restapi",\n+            "description": "RESTful hypermedia API for Plone.",\n+            "id": "plone.restapi",\n+            "install_profile_id": "plone.restapi:default",\n+            "is_installed": true,\n+            "profile_type": "default",\n+            "title": "plone.restapi",\n+            "uninstall_profile_id": "plone.restapi:uninstall",\n+            "upgrade_info": {\n+                "available": false,\n+                "hasProfile": true,\n+                "installedVersion": "0006",\n+                "newVersion": "0006",\n+                "required": false\n+            },\n+            "version": "8.22.1.dev0"\n+        },\n+        {\n+            "@id": "http://localhost:55001/plone/@addons/plone.session",\n+            "description": "Soporte opcional de refresco de plone.session.",\n+            "id": "plone.session",\n+            "install_profile_id": "plone.session:default",\n+            "is_installed": false,\n+            "profile_type": "default",\n+            "title": "Soporte de actualizaci\\u00f3n de sesi\\u00f3n",\n+            "uninstall_profile_id": "plone.session:uninstall",\n+            "upgrade_info": {},\n+            "version": "3.7.5"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/users.resp b/src/plone/restapi/tests/http-examples/users.resp\nindex d78aa5009..a8e179eaf 100644\n--- a/src/plone/restapi/tests/http-examples/users.resp\n+++ b/src/plone/restapi/tests/http-examples/users.resp\n@@ -7,6 +7,16 @@ Content-Type: application/json\n         "description": "This is an admin user",\n         "email": "admin@example.com",\n         "fullname": "Administrator",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                }\n+            ],\n+            "items_total": 1\n+        },\n         "home_page": "http://www.example.com",\n         "id": "admin",\n         "location": "Berlin",\n@@ -21,6 +31,16 @@ Content-Type: application/json\n         "description": "This is a test user",\n         "email": "test@example.com",\n         "fullname": "Test User",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                }\n+            ],\n+            "items_total": 1\n+        },\n         "home_page": "http://www.example.com",\n         "id": "test_user_1_",\n         "location": "Bonn",\ndiff --git a/src/plone/restapi/tests/http-examples/users_add.resp b/src/plone/restapi/tests/http-examples/users_add.resp\nindex 493f79d0a..0c13e44b9 100644\n--- a/src/plone/restapi/tests/http-examples/users_add.resp\n+++ b/src/plone/restapi/tests/http-examples/users_add.resp\n@@ -7,6 +7,16 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n     "description": "Professor of Linguistics",\n     "email": "noam.chomsky@example.com",\n     "fullname": "Noam Avram Chomsky",\n+    "groups": {\n+        "@id": "http://localhost:55001/plone/@users",\n+        "items": [\n+            {\n+                "id": "AuthenticatedUsers",\n+                "title": "AuthenticatedUsers"\n+            }\n+        ],\n+        "items_total": 1\n+    },\n     "home_page": "web.mit.edu/chomsky",\n     "id": "noamchomsky",\n     "location": "Cambridge, MA",\ndiff --git a/src/plone/restapi/tests/http-examples/users_created.resp b/src/plone/restapi/tests/http-examples/users_created.resp\nindex c5e39792c..578dbc68f 100644\n--- a/src/plone/restapi/tests/http-examples/users_created.resp\n+++ b/src/plone/restapi/tests/http-examples/users_created.resp\n@@ -7,6 +7,16 @@ Location: http://localhost:55001/plone/@users/noamchomsky\n     "description": "Professor of Linguistics",\n     "email": "noam.chomsky@example.com",\n     "fullname": "Noam Avram Chomsky",\n+    "groups": {\n+        "@id": "http://localhost:55001/plone/@users",\n+        "items": [\n+            {\n+                "id": "AuthenticatedUsers",\n+                "title": "AuthenticatedUsers"\n+            }\n+        ],\n+        "items_total": 1\n+    },\n     "home_page": "web.mit.edu/chomsky",\n     "id": "noamchomsky",\n     "location": "Cambridge, MA",\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_groups.req b/src/plone/restapi/tests/http-examples/users_filtered_by_groups.req\nnew file mode 100644\nindex 000000000..fd9a15341\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_groups.req\n@@ -0,0 +1,3 @@\n+GET /plone/@users?groups-filter%3Alist=Reviewers&groups-filter%3Alist=Site+Administrators HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_groups.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_groups.resp\nnew file mode 100644\nindex 000000000..7ea2e78da\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_groups.resp\n@@ -0,0 +1,34 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+    {\n+        "@id": "http://localhost:55001/plone/@users/noam",\n+        "description": "Professor of Linguistics",\n+        "email": "noam.chomsky@example.com",\n+        "fullname": "Noam Avram Chomsky",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users?groups-filter%3Alist=Reviewers&groups-filter%3Alist=Site+Administrators",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                },\n+                {\n+                    "id": "Reviewers",\n+                    "title": "Reviewers"\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "home_page": "web.mit.edu/chomsky",\n+        "id": "noam",\n+        "location": "Cambridge, MA",\n+        "portrait": null,\n+        "roles": [\n+            "Member",\n+            "Reviewer"\n+        ],\n+        "username": "noam"\n+    }\n+]\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 50bdf1e38..2c940f0a4 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -7,12 +7,27 @@ Content-Type: application/json\n         "description": "Professor of Linguistics",\n         "email": "noam.chomsky@example.com",\n         "fullname": "Noam Avram Chomsky",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users?query=noa",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                },\n+                {\n+                    "id": "Reviewers",\n+                    "title": "Reviewers"\n+                }\n+            ],\n+            "items_total": 2\n+        },\n         "home_page": "web.mit.edu/chomsky",\n         "id": "noam",\n         "location": "Cambridge, MA",\n         "portrait": null,\n         "roles": [\n-            "Member"\n+            "Member",\n+            "Reviewer"\n         ],\n         "username": "noam"\n     }\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 9264b04c9..b926c90e0 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -417,3 +417,23 @@ def test_aquisition_messing_with_link_deserializer(self):\n             self.portal.doc1.blocks["123"]["href"][0]["@id"],\n             f"../resolveuid/{wrong_uid}",\n         )\n+\n+        # another use-case: pass "../.." as link. Do not change the link.\n+        self.deserialize(\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "href": [\n+                        {\n+                            # Pointing to a not created yet object, but matches because acquisition\n+                            # with another existing parent content with alike-ish path structure\n+                            "@id": "../.."\n+                        }\n+                    ],\n+                }\n+            }\n+        )\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["href"][0]["@id"],\n+            "../..",\n+        )\ndiff --git a/src/plone/restapi/tests/test_caching.py b/src/plone/restapi/tests/test_caching.py\nnew file mode 100644\nindex 000000000..060ae3566\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_caching.py\n@@ -0,0 +1,232 @@\n+from ..testing import PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+from ..testing import RelativeSession\n+from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.caching.interfaces import ICacheSettings\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.globalrequest import setRequest\n+\n+import transaction\n+import unittest\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `with-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+\n+@unittest.skipIf(\n+    PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is None,\n+    "Test needs plone.app.caching>3.0.0a13",\n+    # condition and fallback can be removed in a Plone 6.0 only scenario\n+)\n+class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n+    """This test aims to exercise the caching operations expected from the\n+    `without-caching-proxy` profile for supported restapi calls.\n+    """\n+\n+    if PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING is not None:\n+        layer = PLONE_RESTAPI_CACHING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRequest(self.portal.REQUEST)\n+\n+        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n+\n+        self.registry = getUtility(IRegistry)\n+        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n+        self.cacheSettings.enabled = True\n+\n+        # some test content\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+\n+        self.portal.invokeFactory("Folder", "f1")\n+        self.portal["f1"].title = "Folder one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n+\n+        self.portal["f1"].invokeFactory("Folder", "f2")\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n+        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n+\n+        self.portal.invokeFactory("Collection", "c")\n+        self.portal["c"].title = "A Collection"\n+        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n+\n+        transaction.commit()\n+\n+        # restapi test session\n+        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n+        self.api_session.headers.update({"Accept": "application/json"})\n+\n+    def test_restapi_actions(self):\n+        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n+        response = self.api_session.get("/f1/f2/@actions")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_breadcrumbs(self):\n+        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n+        response = self.api_session.get("/f1/f2/@breadcrumbs")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_comments(self):\n+        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n+        response = self.api_session.get("/f1/f2/@comments")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n+        )\n+\n+    def test_restapi_content(self):\n+        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n+        response = self.api_session.get("/f1/f2")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_navigation(self):\n+        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n+        response = self.api_session.get("/f1/f2/@navigation")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_querystring(self):\n+        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n+        response = self.api_session.get("/@querystring")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\n+\n+    def test_restapi_search(self):\n+        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n+        response = self.api_session.get("/@search")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n+        self.assertEqual(\n+            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n+        )\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 90507f108..5ea9c5866 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import normalize_html\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n from Products.PlonePAS.tests import dummy\n@@ -57,7 +58,7 @@ def test_conversation(self):\n         )\n \n         output = serializer()\n-        self.assertEqual(set(output), {"@id", "items_total", "items"})\n+        self.assertEqual(set(output), {"@id", "permissions", "items_total", "items"})\n \n     def test_conversation_batched(self):\n         self.request.form["b_size"] = 1\n@@ -88,6 +89,7 @@ def test_comment(self):\n             "modification_date",\n             "is_editable",\n             "is_deletable",\n+            "can_reply",\n         ]\n         self.assertEqual(set(output), set(expected))\n \n@@ -165,7 +167,7 @@ def test_comment_with_mimetype_intelligent_text(self):\n         self.assertEqual(\n             \'Go to <a href="https://www.plone.org" \'\n             + \'rel="nofollow">https://www.plone.org</a>\',\n-            serializer()["text"]["data"],\n+            normalize_html(serializer()["text"]["data"]),\n         )\n         # serializer should return mimetype = text/html\n         self.assertEqual("text/html", serializer()["text"]["mime-type"])\n@@ -188,7 +190,7 @@ def test_comment_with_mimetype_html(self):\n         # serializer should return HTML\n         self.assertEqual(\n             \'Go to <a href="https://www.plone.org">Plone</a>\',\n-            serializer()["text"]["data"],\n+            normalize_html(serializer()["text"]["data"]),\n         )\n         # serializer should return mimetype = text/html\n         self.assertEqual("text/html", serializer()["text"]["mime-type"])\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 586c0799f..7958821c8 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from plone.restapi.testing import normalize_html\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n from zope.component import getGlobalSiteManager\n@@ -231,7 +232,10 @@ def test_post_to_folder_with_apostrophe_dont_return_500(self):\n         self.assertEqual(\n             "<p>example with \'</p>", self.portal.folder1.mydocument2.text.raw\n         )\n-        self.assertEqual("<p>example with \'</p>", response.json()["text"]["data"])\n+        self.assertEqual(\n+            "<p>example with \'</p>",\n+            normalize_html(response.json()["text"]["data"]),\n+        )\n \n     def test_post_with_uid_with_manage_portal_permission(self):\n         response = requests.post(\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex f0d718dfb..ee28b4734 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,5 @@\n from base64 import b64encode\n from datetime import datetime\n-from unittest.mock import patch\n from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n@@ -25,8 +24,8 @@\n from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.restapi.tests.statictime import StaticTime\n-from plone.scale import storage\n from plone.testing.z2 import Browser\n from zope.component import createObject\n from zope.component import getUtility\n@@ -301,7 +300,8 @@ def test_documentation_news_item(self):\n         self.portal.newsitem.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.newsitem.absolute_url())\n             save_request_and_response_for_docs("newsitem", response)\n \n@@ -349,7 +349,8 @@ def test_documentation_image(self):\n             data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.image.absolute_url())\n             save_request_and_response_for_docs("image", response)\n \n@@ -924,8 +925,6 @@ def test_documentation_users_authorized_get(self):\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n-            "email": "noam.chomsky@example.com",\n-            "username": "noamchomsky",\n             "fullname": "Noam Avram Chomsky",\n             "home_page": "web.mit.edu/chomsky",\n             "description": "Professor of Linguistics",\n@@ -934,11 +933,17 @@ def test_documentation_users_filtered_get(self):\n         api.user.create(\n             email="noam.chomsky@example.com", username="noam", properties=properties\n         )\n+        api.group.add_user(groupname="Reviewers", username="noam")\n         transaction.commit()\n+        # filter by username\n         response = self.api_session.get("@users", params={"query": "noa"})\n-        save_request_and_response_for_docs(\n-            "users_filtered_by_username", response\n-        )  # noqa\n+        save_request_and_response_for_docs("users_filtered_by_username", response)\n+        # filter by groups\n+        response = self.api_session.get(\n+            "@users",\n+            params={"groups-filter:list": ["Reviewers", "Site Administrators"]},\n+        )\n+        save_request_and_response_for_docs("users_filtered_by_groups", response)\n \n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n@@ -1061,6 +1066,16 @@ def test_documentation_groups(self):\n             title=properties["title"],\n             description=properties["description"],\n         )\n+        properties = {\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n+        )\n+        api.group.add_user(groupname="ploneteam", username="noam")\n         transaction.commit()\n         response = self.api_session.get("/@groups")\n         save_request_and_response_for_docs("groups", response)\n@@ -1080,6 +1095,16 @@ def test_documentation_groups_get(self):\n             title=properties["title"],\n             description=properties["description"],\n         )\n+        properties = {\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n+        )\n+        api.group.add_user(groupname="ploneteam", username="noam")\n         transaction.commit()\n         response = self.api_session.get("@groups/ploneteam")\n         save_request_and_response_for_docs("groups_get", response)\n@@ -1139,7 +1164,14 @@ def test_documentation_groups_update(self):\n \n         response = self.api_session.patch(\n             "/@groups/ploneteam",\n-            json={"email": "ploneteam2@plone.org", "users": {TEST_USER_ID: False}},\n+            json={\n+                "description": "Plone team members",\n+                "email": "ploneteam2@plone.org",\n+                "groups": ["Site Administrators"],\n+                "users": {TEST_USER_ID: False},\n+                "roles": ["Authenticated", "Reviewer"],\n+                "title": "The Plone team",\n+            },\n         )\n         save_request_and_response_for_docs("groups_update", response)\n \n@@ -1644,6 +1676,10 @@ def test_translate_messages_object_history(self):\n             "translated_messages_object_history", response\n         )\n \n+    def test_translate_messages_addons(self):\n+        response = self.api_session.get("/@addons")\n+        save_request_and_response_for_docs("translated_messages_addons", response)\n+\n \n class TestCommenting(TestDocumentationBase):\n \ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 61c335e57..3fcfcd125 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -13,10 +13,9 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.uuid.interfaces import IUUID\n from unittest import TestCase\n-from unittest.mock import patch\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.interface.verify import verifyClass\n@@ -387,7 +386,8 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -396,7 +396,6 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -483,7 +482,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -492,7 +492,6 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\n@@ -514,7 +513,8 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -523,7 +523,6 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -610,7 +609,8 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -619,7 +619,6 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 00718e519..ff9af6633 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -7,9 +7,8 @@\n from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from Products.CMFCore.utils import getToolByName\n-from unittest.mock import patch\n from zope.component import getMultiAdapter\n \n import json\n@@ -261,9 +260,9 @@ def test_serialize_image(self):\n \n         self.maxDiff = 99999\n \n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             obj_url = self.portal.image1.absolute_url()\n-            scale_url_uuid = "uuid_1"\n             download_url = f"{obj_url}/@@images/{scale_url_uuid}.png"\n             scales = {\n                 "listing": {"download": download_url, "width": 16, "height": 4},\ndiff --git a/src/plone/restapi/tests/test_serializer_group.py b/src/plone/restapi/tests/test_serializer_group.py\nindex c0ac04e98..4be5e90ef 100644\n--- a/src/plone/restapi/tests/test_serializer_group.py\n+++ b/src/plone/restapi/tests/test_serializer_group.py\n@@ -48,7 +48,7 @@ def test_serialize_returns_id(self):\n         self.assertEqual("ploneteam@plone.org", group.get("email"))\n         self.assertEqual("Plone Team", group.get("title"))\n         self.assertEqual("We are Plone", group.get("description"))\n-        self.assertEqual(set(group["users"]), {"@id", "items_total", "items"})\n+        self.assertEqual(set(group["members"]), {"@id", "items_total", "items"})\n \n     def test_summary(self):\n         group = self.serialize_summary(self.group)\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 8e009f035..dac51df7c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,4 +1,3 @@\n-from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -8,7 +7,7 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n@@ -87,7 +86,8 @@ def test_get_news_item(self):\n         self.portal.news1.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.news1.absolute_url())\n \n             self.assertEqual(response.status_code, 200)\n@@ -112,7 +112,7 @@ def test_get_news_item(self):\n                 "This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {"download": self.portal_url + "/news1/@@images/uuid1.png"},  # noqa\n+                {"download": self.portal_url + f"/news1/@@images/{scale_url_uuid}.png"},\n                 response.json()["image"],\n             )\n \ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 9422b4dbd..e7eac9171 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -62,7 +62,7 @@ def test_list_datastructure(self):\n \n         self.assertEqual(200, response.status_code)\n         data = response.json()\n-        self.assertEqual({"items_total", "items", "@id"}, set(data))\n+        self.assertEqual({"items_total", "items", "permissions", "@id"}, set(data))\n \n     def test_list_batching(self):\n         url = f"{self.doc.absolute_url()}/@comments"\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex 21e278b9a..848df9351 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -65,11 +65,10 @@ def test_list_groups(self):\n \n         self.assertEqual(ptgroup.get("roles"), ["Authenticated"])\n \n-        # We don\'t want the group members listed in the overview as there\n-        # might be loads.\n+        # # Assert batched list of group members\n         self.assertTrue(\n-            not any(["users" in group for group in response.json()]),\n-            "Users key found in groups listing",\n+            all(["members" in group for group in response.json()]),\n+            "Members key found in groups listing",\n         )\n \n     def test_add_group(self):\n@@ -115,7 +114,7 @@ def test_get_group(self):\n         self.assertEqual("ploneteam@plone.org", response.json().get("email"))\n         self.assertEqual("Plone Team", response.json().get("title"))\n         self.assertEqual("We are Plone", response.json().get("description"))\n-        self.assertIn("users", response.json())\n+        self.assertIn("members", response.json())\n \n     def test_get_search_group_with_filter(self):\n         response = self.api_session.get("/@groups", params={"query": "plo"})\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 48461d678..079e84629 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -59,6 +59,7 @@ def setUp(self):\n             properties=properties,\n             password="otherpassword",\n         )\n+        api.group.add_user(groupname="Reviewers", username="otheruser")\n         transaction.commit()\n \n     def tearDown(self):\n@@ -97,6 +98,20 @@ def test_list_users_as_anonymous(self):\n         response = self.anon_api_session.get("/@users")\n         self.assertEqual(response.status_code, 401)\n \n+    def test_list_users_filtered(self):\n+        response = self.api_session.get(\n+            "/@users?groups-filter:list=Reviewers&groups-filter:list=Administrators"\n+        )\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(1, len(response.json()))\n+        user_ids = [user["id"] for user in response.json()]\n+        self.assertIn("otheruser", user_ids)\n+\n+        response = self.api_session.get("/@users?groups-filter:list=Administrators")\n+        self.assertEqual(200, response.status_code)\n+        user_ids = [user["id"] for user in response.json()]\n+        self.assertNotIn("otheruser", user_ids)\n+\n     def test_add_user(self):\n         response = self.api_session.post(\n             "/@users",\ndiff --git a/test-no-sphinx-warnings.in b/test-no-sphinx-warnings\nold mode 100644\nnew mode 100755\nsimilarity index 100%\nrename from test-no-sphinx-warnings.in\nrename to test-no-sphinx-warnings\ndiff --git a/test-no-uncommitted-doc-changes.in b/test-no-uncommitted-doc-changes\nold mode 100644\nnew mode 100755\nsimilarity index 100%\nrename from test-no-uncommitted-doc-changes.in\nrename to test-no-uncommitted-doc-changes\ndiff --git a/versions.cfg b/versions.cfg\nindex 3841232b5..f14e01e91 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -5,8 +5,9 @@ zc.buildout =\n plone.restapi =\n \n # code analysis\n-black = 20.8b1\n+black = 22.3.0\n click = 8.0.4\n+flake8 = 4.0.1\n \n # Error: The requirement (\'virtualenv>=20.0.35\') is not allowed by your [versions] constraint (20.0.26)\n virtualenv = 20.0.35\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-07-19T16:21:53+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/11f78c021e0066b3cbfa3689e5cb3a50c74a3d2e

Merge branch 'master' into alias_controlpanel

Files changed:
A src/plone/restapi/tests/http-examples/users_searched.req
A src/plone/restapi/tests/http-examples/users_searched.resp
M CHANGES.rst
M MANIFEST.in
M docs/source/users.md
M setup.cfg
M setup.py
M src/plone/restapi/profiles/testing/types/DXTestDocument.xml
M src/plone/restapi/services/users/get.py
M src/plone/restapi/testing.zcml
M src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp
M src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp
M src/plone/restapi/tests/http-examples/users_filtered_by_username.req
M src/plone/restapi/tests/http-examples/users_filtered_by_username.resp
M src/plone/restapi/tests/test_documentation.py
D news/1193.bugfix
D news/1295.internal
D news/1325.feature
D news/1327.feature
D news/1359.bugfix
D news/1365.feature
D news/1375.feature
D news/1379.bugfix
D news/1380.bugfix
D news/1382.bugfix
D news/1383.bugfix
D news/1391.bugfix
D news/1396.bugfix
D news/1404.internal
D news/1412.bugfix
D news/1414.feature
D news/1419.feature
D news/1421.internal
D news/1424.feature
D news/1428.bugfix
D news/1436.feature
D news/1438.internal
D news/1452.bugfix
D news/49.bugfix
D news/57.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 36d8aedff..394ae98e2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,80 @@ Changelog\n \n .. towncrier release notes start\n \n+8.24.0 (2022-07-15)\n+-------------------\n+\n+New features:\n+\n+\n+- Add support to search for fullname, email, id on the @users endpoint with "?search=" [ksuess] (#1443)\n+\n+\n+Bug fixes:\n+\n+\n+- Tests: add names to behaviors.  [maurits] (#169)\n+\n+\n+8.23.0 (2022-06-23)\n+-------------------\n+\n+New features:\n+\n+\n+- Include users data in groups while retrieving @groups\n+  [@nileshgulia1] (#1325)\n+- Added \'View comments\' and \'Reply to item\' permission to discussion [@razvanMiu] (#1327)\n+- better error logging for term lookup errors\n+  [ajung] (#1365)\n+- Documentation was converted to MyST from reStructuredText. [stevepiercy] (#1375)\n+- Move caching rulesets to the ZCML where the endpoints are defined.\n+  [jensens] (#1414)\n+- List Users (@users): Add groups [ksuess]\n+  List Users (@users): Support filtering by groups [ksuess] (#1419)\n+- Fix: Update group: Preserve title and description. [ksuess] (#1424)\n+- Add UsersGroupsSettings to set of control panels. [ksuess]\n+  Move configlet UsersGroupsSettings to correct group (Volto control panel group "Users and Groups") [ksuess] (#1436)\n+\n+\n+Bug fixes:\n+\n+\n+- Test-only fix: normalize white space in html in some tests.\n+  Needed to not fail with newer plone.outputfilters.\n+  [maurits] (#49)\n+- Tests: patch unique url for scale in old or new way.\n+  This is only in serializer tests for images.\n+  [maurits] (#57)\n+- Make the PAS plugin compatible with ``PyJWT`` 1 and 2.\n+  [jensens, maurits] (#1193)\n+- Fix tests for changes in displayed_types. See https://github.com/plone/Products.CMFPlone/issues/3486\n+  [pbauer] (#1359)\n+- Use JSON instead of JSON Schema for code samples. [stevepiercy] (#1379)\n+- Control panels and translations are supported in Plone 5 or greater. [stevepiercy] (#1380)\n+- Add html_meta tags and values for better SEO. [stevepiercy] (#1382)\n+- Update demo site to 6.demo.plone.org in README.rst. [stevepiercy] (#1383)\n+- Fixed timestamp calculation in history service on Python 3.10.\n+  [maurits] (#1391)\n+- Fix empty .resp in docs of PATCH controlpanel (#1396)\n+- Translate addon titles on @addon controlpanel\n+  [erral] (#1412)\n+- Do not break path2uid with some edge-cases.\n+  [cekk] (#1428)\n+- Sort the roles in the user serializer.\n+  [maurits] (#1452)\n+\n+\n+Internal:\n+\n+\n+- Add naming best practices for URL Attributes (singular vs plural) to the docs\n+  [tisto] (#1295)\n+- Enable Google Analytics 4 [stevepiercy] (#1404)\n+- fixed broken make task docs-linkcheckbroken (#1421)\n+- Fix broken link to Python requests library docs. [stevepiercy] (#1438)\n+\n+\n 8.22.0 (2022-04-08)\n -------------------\n \ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 1de85a9e9..430239e00 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -25,3 +25,6 @@ prune news\n global-exclude *.pyc\n include pyproject.toml\n include netlify.toml\n+prune ideas\n+exclude test-no-sphinx-warnings\n+exclude test-no-uncommitted-doc-changes\ndiff --git a/docs/source/users.md b/docs/source/users.md\nindex ace4ba2b8..d68cf3189 100644\n--- a/docs/source/users.md\n+++ b/docs/source/users.md\n@@ -66,7 +66,7 @@ Filtering by `id`:\n     :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n ```\n \n-The server will respond with a list of the filtered users in the portal where the `username` starts with the `query` parameter\'s value:\n+The server will respond with a list of the filtered users in the portal where the `username` contains the `query` parameter\'s value:\n \n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n :language: http\n@@ -88,6 +88,21 @@ The server will respond with a list of users where the users are member of one o\n The endpoint also takes a `limit` parameter.\n Its default is a maximum of 25 users at a time for performance reasons.\n \n+### Search users\n+\n+Search by `id`, `fullname` and `email`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_searched.req\n+```\n+\n+The server will respond with a list of users where the `fullname`, `email` or `id` contains the `query` parameter\'s value:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_searched.resp\n+:language: http\n+```\n+\n \n ## Create User\n \ndiff --git a/news/1193.bugfix b/news/1193.bugfix\ndeleted file mode 100644\nindex c617dde84..000000000\n--- a/news/1193.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Make the PAS plugin compatible with ``PyJWT`` 1 and 2.\n-[jensens, maurits]\n\\ No newline at end of file\ndiff --git a/news/1295.internal b/news/1295.internal\ndeleted file mode 100644\nindex bbd00e061..000000000\n--- a/news/1295.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Add naming best practices for URL Attributes (singular vs plural) to the docs\n-[tisto]\n\\ No newline at end of file\ndiff --git a/news/1325.feature b/news/1325.feature\ndeleted file mode 100644\nindex 446b01b34..000000000\n--- a/news/1325.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Include users data in groups while retrieving @groups\n-[@nileshgulia1]\n\\ No newline at end of file\ndiff --git a/news/1327.feature b/news/1327.feature\ndeleted file mode 100644\nindex 38f27fa6e..000000000\n--- a/news/1327.feature\n+++ /dev/null\n@@ -1 +0,0 @@\n-Added \'View comments\' and \'Reply to item\' permission to discussion [@razvanMiu]\ndiff --git a/news/1359.bugfix b/news/1359.bugfix\ndeleted file mode 100644\nindex 63d46c2aa..000000000\n--- a/news/1359.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix tests for changes in displayed_types. See https://github.com/plone/Products.CMFPlone/issues/3486\n-[pbauer]\n\\ No newline at end of file\ndiff --git a/news/1365.feature b/news/1365.feature\ndeleted file mode 100644\nindex 9724e0544..000000000\n--- a/news/1365.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-better error logging for term lookup errors\n-[ajung]\ndiff --git a/news/1375.feature b/news/1375.feature\ndeleted file mode 100644\nindex 634321d15..000000000\n--- a/news/1375.feature\n+++ /dev/null\n@@ -1 +0,0 @@\n-Documentation was converted to MyST from reStructuredText. [stevepiercy]\ndiff --git a/news/1379.bugfix b/news/1379.bugfix\ndeleted file mode 100644\nindex 90e36d175..000000000\n--- a/news/1379.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Use JSON instead of JSON Schema for code samples. [stevepiercy]\n\\ No newline at end of file\ndiff --git a/news/1380.bugfix b/news/1380.bugfix\ndeleted file mode 100644\nindex 20ed057e8..000000000\n--- a/news/1380.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Control panels and translations are supported in Plone 5 or greater. [stevepiercy]\ndiff --git a/news/1382.bugfix b/news/1382.bugfix\ndeleted file mode 100644\nindex 9619323b3..000000000\n--- a/news/1382.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Add html_meta tags and values for better SEO. [stevepiercy]\ndiff --git a/news/1383.bugfix b/news/1383.bugfix\ndeleted file mode 100644\nindex 5d32abcd4..000000000\n--- a/news/1383.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Update demo site to 6.demo.plone.org in README.rst. [stevepiercy]\ndiff --git a/news/1391.bugfix b/news/1391.bugfix\ndeleted file mode 100644\nindex 75d3e7f44..000000000\n--- a/news/1391.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fixed timestamp calculation in history service on Python 3.10.\n-[maurits]\ndiff --git a/news/1396.bugfix b/news/1396.bugfix\ndeleted file mode 100644\nindex 08e87ddaa..000000000\n--- a/news/1396.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix empty .resp in docs of PATCH controlpanel\ndiff --git a/news/1404.internal b/news/1404.internal\ndeleted file mode 100644\nindex a2d88fa58..000000000\n--- a/news/1404.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-Enable Google Analytics 4 [stevepiercy]\ndiff --git a/news/1412.bugfix b/news/1412.bugfix\ndeleted file mode 100644\nindex 9fed2e25e..000000000\n--- a/news/1412.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Translate addon titles on @addon controlpanel\n-[erral]\ndiff --git a/news/1414.feature b/news/1414.feature\ndeleted file mode 100644\nindex e3c8ee64a..000000000\n--- a/news/1414.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Move caching rulesets to the ZCML where the endpoints are defined.\n-[jensens]\ndiff --git a/news/1419.feature b/news/1419.feature\ndeleted file mode 100644\nindex 960d2d308..000000000\n--- a/news/1419.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-List Users (@users): Add groups [ksuess]\n-List Users (@users): Support filtering by groups [ksuess]\n\\ No newline at end of file\ndiff --git a/news/1421.internal b/news/1421.internal\ndeleted file mode 100644\nindex ea3118df3..000000000\n--- a/news/1421.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-fixed broken make task docs-linkcheckbroken\ndiff --git a/news/1424.feature b/news/1424.feature\ndeleted file mode 100644\nindex 791dd6ec7..000000000\n--- a/news/1424.feature\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix: Update group: Preserve title and description. [ksuess]\n\\ No newline at end of file\ndiff --git a/news/1428.bugfix b/news/1428.bugfix\ndeleted file mode 100644\nindex 45186b098..000000000\n--- a/news/1428.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Do not break path2uid with some edge-cases.\n-[cekk]\ndiff --git a/news/1436.feature b/news/1436.feature\ndeleted file mode 100644\nindex 51a8ee0be..000000000\n--- a/news/1436.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Add UsersGroupsSettings to set of control panels. [ksuess]\n-Move configlet UsersGroupsSettings to correct group (Volto control panel group "Users and Groups") [ksuess]\ndiff --git a/news/1438.internal b/news/1438.internal\ndeleted file mode 100644\nindex f3dba09f8..000000000\n--- a/news/1438.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix broken link to Python requests library docs. [stevepiercy]\n\\ No newline at end of file\ndiff --git a/news/1452.bugfix b/news/1452.bugfix\ndeleted file mode 100644\nindex a90c2d7d4..000000000\n--- a/news/1452.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Sort the roles in the user serializer.\n-[maurits]\ndiff --git a/news/49.bugfix b/news/49.bugfix\ndeleted file mode 100644\nindex cd6000244..000000000\n--- a/news/49.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Test-only fix: normalize white space in html in some tests.\n-Needed to not fail with newer plone.outputfilters.\n-[maurits]\ndiff --git a/news/57.bugfix b/news/57.bugfix\ndeleted file mode 100644\nindex b11fd2500..000000000\n--- a/news/57.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Tests: patch unique url for scale in old or new way.\n-This is only in serializer tests for images.\n-[maurits]\ndiff --git a/setup.cfg b/setup.cfg\nindex 1689ef3ea..4cf23ce54 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,4 +1,4 @@\n [bdist_wheel]\n-# Do not make the generated wheels have `py3` tag\n+# Do not make the generated wheels have `py2` tag\n # See https://packaging.python.org/guides/dropping-older-python-versions/#dealing-with-the-universal-wheels\n universal = 0 \n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 742c7d35f..6071a5089 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n import sys\n \n-version = "8.22.1.dev0"\n+version = "8.24.1.dev0"\n \n assert sys.version_info >= (\n     3,\ndiff --git a/src/plone/restapi/profiles/testing/types/DXTestDocument.xml b/src/plone/restapi/profiles/testing/types/DXTestDocument.xml\nindex 07813f7be..23ff971d3 100644\n--- a/src/plone/restapi/profiles/testing/types/DXTestDocument.xml\n+++ b/src/plone/restapi/profiles/testing/types/DXTestDocument.xml\n@@ -20,9 +20,9 @@\n   <property name="klass">plone.restapi.tests.dxtypes.DXTestDocument</property>\n \n   <property name="behaviors">\n-    <element value="plone.restapi.tests.dxtypes.ITestBehavior"/>\n-    <element value="plone.restapi.tests.dxtypes.ITestAnnotationsBehavior"/>\n     <element value="plone.app.dexterity.behaviors.metadata.IBasic"/>\n+    <element value="tests.restapi.test_annotations_behavior"/>\n+    <element value="tests.restapi.test_behavior"/>\n   </property>\n \n   <!-- View information -->\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex eebacbc8f..4bc5271f4 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -1,10 +1,13 @@\n from AccessControl import getSecurityManager\n+from itertools import chain\n+from plone.app.workflow.browser.sharing import merge_search_results\n from plone.restapi.interfaces import ISerializeToJson, ISerializeToJsonSummary\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n from urllib.parse import parse_qs\n from zExceptions import BadRequest\n+from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component.hooks import getSite\n from zope.interface import implementer\n@@ -23,6 +26,7 @@ def __init__(self, context, request):\n         self.portal_membership = getToolByName(portal, "portal_membership")\n         self.acl_users = getToolByName(portal, "acl_users")\n         self.query = parse_qs(self.request["QUERY_STRING"])\n+        self.search_term = self.query.get("search", [""])[0]\n \n     def publishTraverse(self, request, name):\n         # Consume any path segments after /@users as parameters\n@@ -46,21 +50,67 @@ def _sort_users(users):\n         )\n         return users\n \n+    def _principal_search_results(\n+        self, search_for_principal, get_principal_by_id, principal_type, id_key\n+    ):\n+\n+        hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n+\n+        principals = []\n+        for principal_info in search_for_principal(hunter, self.search_term):\n+            principal_id = principal_info[id_key]\n+            principals.append(get_principal_by_id(principal_id))\n+\n+        return principals\n+\n     def _get_users(self):\n         results = {user["userid"] for user in self.acl_users.searchUsers()}\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n-    def _get_filtered_users(self, query, groups_filter, limit):\n-        results = self.acl_users.searchUsers(id=query, max_results=limit)\n-        users = [\n-            self.portal_membership.getMemberById(user["userid"]) for user in results\n-        ]\n+    def _user_search_results(self):\n+        def search_for_principal(hunter, search_term):\n+            return merge_search_results(\n+                chain(\n+                    *(\n+                        hunter.searchUsers(**{field: search_term})\n+                        for field in ["name", "fullname", "email"]\n+                    )\n+                ),\n+                "userid",\n+            )\n+\n+        def get_principal_by_id(user_id):\n+            mtool = getToolByName(self.context, "portal_membership")\n+            return mtool.getMemberById(user_id)\n+\n+        return self._principal_search_results(\n+            search_for_principal, get_principal_by_id, "user", "userid"\n+        )\n+\n+    def _get_filtered_users(self, query, groups_filter, search_term, limit):\n+        """Filter or search users by id, fullname, email and/or groups.\n+\n+        Args:\n+            query (str): filter by query\n+            groups_filter (list of str): list of groups\n+            search_term (str): search by id, fullname, email\n+            limit (integer): limit result\n+\n+        Returns:\n+            list: list of users sorted by fullname\n+        """\n+        if search_term:\n+            users = self._user_search_results()\n+        else:\n+            results = self.acl_users.searchUsers(id=query, max_results=limit)\n+            users = [\n+                self.portal_membership.getMemberById(user["userid"]) for user in results\n+            ]\n         if groups_filter:\n             users = [\n                 user for user in users if set(user.getGroups()) & set(groups_filter)\n             ]\n-\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -80,14 +130,13 @@ def has_permission_to_access_user_info(self):\n     def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n-            groups_filter = self.query.get(\n-                "groups-filter:list", self.query.get("groups-filter%3Alist", [])\n-            )\n-            limit = self.query.get("limit", DEFAULT_SEARCH_RESULTS_LIMIT)\n-            if query or groups_filter:\n-                # Someone is searching users, check if they are authorized\n+            groups_filter = self.query.get("groups-filter:list", [])\n+            limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n+            if query or groups_filter or self.search_term or limit:\n                 if self.has_permission_to_query():\n-                    users = self._get_filtered_users(query, groups_filter, limit)\n+                    users = self._get_filtered_users(\n+                        query, groups_filter, self.search_term, limit\n+                    )\n                     result = []\n                     for user in users:\n                         serializer = queryMultiAdapter(\n@@ -99,7 +148,7 @@ def reply(self):\n                     self.request.response.setStatus(401)\n                     return\n             else:\n-                raise BadRequest("Query string supplied is not valid")\n+                raise BadRequest("Parameters supplied are not valid")\n \n         if len(self.params) == 0:\n             # Someone is asking for all users, check if they are authorized\ndiff --git a/src/plone/restapi/testing.zcml b/src/plone/restapi/testing.zcml\nindex ca719afcd..d1cd9a2db 100644\n--- a/src/plone/restapi/testing.zcml\n+++ b/src/plone/restapi/testing.zcml\n@@ -18,6 +18,7 @@\n       />\n   <include package="plone.rfc822" />\n   <plone:behavior\n+      name="tests.restapi.test_behavior"\n       title="Test Behavior"\n       description="Schema-only behavior using attributes"\n       provides=".tests.dxtypes.ITestBehavior"\n@@ -25,6 +26,7 @@\n       />\n \n   <plone:behavior\n+      name="tests.restapi.test_annotations_behavior"\n       title="Test Annotations Behavior"\n       description="Schema-only behavior using annotations"\n       factory="plone.behavior.AnnotationStorage"\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\nindex a7a986395..4b5c5ecfd 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n@@ -29,14 +29,14 @@ Content-Type: application/json\n         "plone.ownership": false,\n         "plone.publication": false,\n         "plone.relateditems": false,\n-        "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": false,\n-        "plone.restapi.tests.dxtypes.ITestBehavior": false,\n         "plone.richtext": false,\n         "plone.shortname": false,\n         "plone.tableofcontents": false,\n         "plone.thumb_icon": false,\n         "plone.translatable": false,\n         "plone.versioning": false,\n+        "tests.restapi.test_annotations_behavior": false,\n+        "tests.restapi.test_behavior": false,\n         "title": "My Custom Content Type",\n         "volto.blocks": false\n     },\n@@ -86,8 +86,8 @@ Content-Type: application/json\n                     "plone.richtext",\n                     "plone.shortname",\n                     "plone.tableofcontents",\n-                    "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior",\n-                    "plone.restapi.tests.dxtypes.ITestBehavior",\n+                    "tests.restapi.test_annotations_behavior",\n+                    "tests.restapi.test_behavior",\n                     "plone.thumb_icon",\n                     "plone.versioning"\n                 ],\n@@ -286,18 +286,6 @@ Content-Type: application/json\n                 "title": "Related items",\n                 "type": "boolean"\n             },\n-            "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n-                "description": "Schema-only behavior using annotations",\n-                "factory": "Yes/No",\n-                "title": "Test Annotations Behavior",\n-                "type": "boolean"\n-            },\n-            "plone.restapi.tests.dxtypes.ITestBehavior": {\n-                "description": "Schema-only behavior using attributes",\n-                "factory": "Yes/No",\n-                "title": "Test Behavior",\n-                "type": "boolean"\n-            },\n             "plone.richtext": {\n                 "description": "Adds richtext behavior",\n                 "factory": "Yes/No",\n@@ -334,6 +322,18 @@ Content-Type: application/json\n                 "title": "Versioning",\n                 "type": "boolean"\n             },\n+            "tests.restapi.test_annotations_behavior": {\n+                "description": "Schema-only behavior using annotations",\n+                "factory": "Yes/No",\n+                "title": "Test Annotations Behavior",\n+                "type": "boolean"\n+            },\n+            "tests.restapi.test_behavior": {\n+                "description": "Schema-only behavior using attributes",\n+                "factory": "Yes/No",\n+                "title": "Test Behavior",\n+                "type": "boolean"\n+            },\n             "title": {\n                 "description": "",\n                 "factory": "Text line (String)",\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\nindex 17d6e31d9..0fc5945ee 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n@@ -30,14 +30,14 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n         "plone.ownership": false,\n         "plone.publication": false,\n         "plone.relateditems": false,\n-        "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": false,\n-        "plone.restapi.tests.dxtypes.ITestBehavior": false,\n         "plone.richtext": false,\n         "plone.shortname": false,\n         "plone.tableofcontents": false,\n         "plone.thumb_icon": false,\n         "plone.translatable": false,\n         "plone.versioning": false,\n+        "tests.restapi.test_annotations_behavior": false,\n+        "tests.restapi.test_behavior": false,\n         "title": "My Custom Content Type",\n         "volto.blocks": false\n     },\n@@ -87,8 +87,8 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n                     "plone.richtext",\n                     "plone.shortname",\n                     "plone.tableofcontents",\n-                    "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior",\n-                    "plone.restapi.tests.dxtypes.ITestBehavior",\n+                    "tests.restapi.test_annotations_behavior",\n+                    "tests.restapi.test_behavior",\n                     "plone.thumb_icon",\n                     "plone.versioning"\n                 ],\n@@ -287,18 +287,6 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n                 "title": "Related items",\n                 "type": "boolean"\n             },\n-            "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n-                "description": "Schema-only behavior using annotations",\n-                "factory": "Yes/No",\n-                "title": "Test Annotations Behavior",\n-                "type": "boolean"\n-            },\n-            "plone.restapi.tests.dxtypes.ITestBehavior": {\n-                "description": "Schema-only behavior using attributes",\n-                "factory": "Yes/No",\n-                "title": "Test Behavior",\n-                "type": "boolean"\n-            },\n             "plone.richtext": {\n                 "description": "Adds richtext behavior",\n                 "factory": "Yes/No",\n@@ -335,6 +323,18 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n                 "title": "Versioning",\n                 "type": "boolean"\n             },\n+            "tests.restapi.test_annotations_behavior": {\n+                "description": "Schema-only behavior using annotations",\n+                "factory": "Yes/No",\n+                "title": "Test Annotations Behavior",\n+                "type": "boolean"\n+            },\n+            "tests.restapi.test_behavior": {\n+                "description": "Schema-only behavior using attributes",\n+                "factory": "Yes/No",\n+                "title": "Test Behavior",\n+                "type": "boolean"\n+            },\n             "title": {\n                 "description": "",\n                 "factory": "Text line (String)",\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex 005f86376..a9de8d8b2 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.22.1.dev0"\n+            "version": "8.23.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\nindex d87613371..80bbed34b 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n@@ -1,3 +1,3 @@\n-GET /plone/@users?query=noa HTTP/1.1\n+GET /plone/@users?query=oam HTTP/1.1\n Accept: application/json\n Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\nindex 2c940f0a4..d69cc2364 100644\n--- a/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+++ b/src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n@@ -8,7 +8,7 @@ Content-Type: application/json\n         "email": "noam.chomsky@example.com",\n         "fullname": "Noam Avram Chomsky",\n         "groups": {\n-            "@id": "http://localhost:55001/plone/@users?query=noa",\n+            "@id": "http://localhost:55001/plone/@users?query=oam",\n             "items": [\n                 {\n                     "id": "AuthenticatedUsers",\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.req b/src/plone/restapi/tests/http-examples/users_searched.req\nnew file mode 100644\nindex 000000000..87cdda1d9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.req\n@@ -0,0 +1,3 @@\n+GET /plone/@users?search=avram HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/users_searched.resp b/src/plone/restapi/tests/http-examples/users_searched.resp\nnew file mode 100644\nindex 000000000..a7d26d834\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_searched.resp\n@@ -0,0 +1,34 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+[\n+    {\n+        "@id": "http://localhost:55001/plone/@users/noam",\n+        "description": "Professor of Linguistics",\n+        "email": "noam.chomsky@example.com",\n+        "fullname": "Noam Avram Chomsky",\n+        "groups": {\n+            "@id": "http://localhost:55001/plone/@users?search=avram",\n+            "items": [\n+                {\n+                    "id": "AuthenticatedUsers",\n+                    "title": "AuthenticatedUsers"\n+                },\n+                {\n+                    "id": "Reviewers",\n+                    "title": "Reviewers"\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "home_page": "web.mit.edu/chomsky",\n+        "id": "noam",\n+        "location": "Cambridge, MA",\n+        "portrait": null,\n+        "roles": [\n+            "Member",\n+            "Reviewer"\n+        ],\n+        "username": "noam"\n+    }\n+]\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex ee28b4734..11a580282 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -936,7 +936,7 @@ def test_documentation_users_filtered_get(self):\n         api.group.add_user(groupname="Reviewers", username="noam")\n         transaction.commit()\n         # filter by username\n-        response = self.api_session.get("@users", params={"query": "noa"})\n+        response = self.api_session.get("@users", params={"query": "oam"})\n         save_request_and_response_for_docs("users_filtered_by_username", response)\n         # filter by groups\n         response = self.api_session.get(\n@@ -945,6 +945,22 @@ def test_documentation_users_filtered_get(self):\n         )\n         save_request_and_response_for_docs("users_filtered_by_groups", response)\n \n+    def test_documentation_users_searched_get(self):\n+        properties = {\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com", username="noam", properties=properties\n+        )\n+        api.group.add_user(groupname="Reviewers", username="noam")\n+        transaction.commit()\n+        # search by fullname\n+        response = self.api_session.get("@users", params={"search": "avram"})\n+        save_request_and_response_for_docs("users_searched", response)\n+\n     def test_documentation_users_created(self):\n         response = self.api_session.post(\n             "/@users",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-16T08:17:42+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/47fe714f4d0e8a29632ad69d8508fc53d9cbab68

Merge branch 'master' into alias_controlpanel

Files changed:
A news/1461.bugfix
A news/1466.bugfix
M CHANGES.rst
M CONTRIBUTORS.rst
M docs/source/conf.py
M setup.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 394ae98e2..4e4f97f88 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,15 @@ Changelog\n \n .. towncrier release notes start\n \n+8.24.1 (2022-08-04)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix of users endpoint for Membrane users. [ksuess] (#1459)\n+\n+\n 8.24.0 (2022-07-15)\n -------------------\n \ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex 1adeb8348..35fb75b10 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -37,4 +37,5 @@\n - Elio Schmutz\n - Gauthier Bastien\n - Katja S\xc3\xbcss\n+- Jon Pentland\n   \n\\ No newline at end of file\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex c7261d9fe..9062a9e38 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -32,7 +32,7 @@\n # built documents.\n # TODO: There must be a way to import this from `setup.py` so we don\'t have to\n # update it manually for each release.\n-version = "8.21.3.dev0"\n+version = "8.24.2.dev0"\n release = version\n \n # -- General configuration ----------------------------------------------------\ndiff --git a/news/1461.bugfix b/news/1461.bugfix\nnew file mode 100644\nindex 000000000..2246d8193\n--- /dev/null\n+++ b/news/1461.bugfix\n@@ -0,0 +1,2 @@\n+Do not hard depend on `plone.app.iterate`. It is not an direct core package and might not be available.\n+[jensens]\ndiff --git a/news/1466.bugfix b/news/1466.bugfix\nnew file mode 100644\nindex 000000000..c4f03dac9\n--- /dev/null\n+++ b/news/1466.bugfix\n@@ -0,0 +1 @@\n+Sanitise user id when checking for portrait [instification]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 6071a5089..5ea43aa18 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n import sys\n \n-version = "8.24.1.dev0"\n+version = "8.24.2.dev0"\n \n assert sys.version_info >= (\n     3,\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 90295ca3a..4f1331b32 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -15,7 +15,6 @@\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.serializer.nextprev import NextPrevious\n-from plone.restapi.serializer.working_copy import WorkingCopyInfo\n from plone.restapi.services.locking import lock_info\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -30,6 +29,13 @@\n from zope.schema import getFields\n from zope.security.interfaces import IPermission\n \n+try:\n+    # plone.app.iterate is by intend not part of Products.CMFPlone dependencies\n+    # so we can not rely on having it\n+    from plone.restapi.serializer.working_copy import WorkingCopyInfo\n+except ImportError:\n+    WorkingCopyInfo = None\n+\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n@@ -77,8 +83,11 @@ def __call__(self, version=None, include_items=True):\n         )\n \n         # Insert working copy information\n-        baseline, working_copy = WorkingCopyInfo(self.context).get_working_copy_info()\n-        result.update({"working_copy": working_copy, "working_copy_of": baseline})\n+        if WorkingCopyInfo is not None:\n+            baseline, working_copy = WorkingCopyInfo(\n+                self.context\n+            ).get_working_copy_info()\n+            result.update({"working_copy": working_copy, "working_copy_of": baseline})\n \n         # Insert locking information\n         result.update({"lock": lock_info(obj)})\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex e651f3167..bbd6e9518 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -38,10 +38,12 @@ def __call__(self):\n \n         for name in getFieldNames(schema):\n             if name == "portrait":\n+                membership = getToolByName(portal, "portal_membership")\n                 memberdata = getToolByName(portal, "portal_memberdata")\n-                if user.id in memberdata.portraits:\n+                safe_id = membership._getSafeMemberId(user.id)\n+                if safe_id in memberdata.portraits:\n                     value = "{}/portal_memberdata/portraits/{}".format(\n-                        portal.absolute_url(), user.id\n+                        portal.absolute_url(), safe_id\n                     )\n                 else:\n                     value = None\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 443be79a8..a90c8093b 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -39,7 +39,7 @@\n   <include package=".workflow" />\n   <include\n       package=".workingcopy"\n-      zcml:condition="have plone-5"\n+      zcml:condition="installed plone.app.iterate"\n       />\n   <include\n       package=".multilingual"\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 4bc5271f4..4bdda66c5 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -63,8 +63,8 @@ def _principal_search_results(\n \n         return principals\n \n-    def _get_users(self):\n-        results = {user["userid"] for user in self.acl_users.searchUsers()}\n+    def _get_users(self, **kw):\n+        results = {user["userid"] for user in self.acl_users.searchUsers(**kw)}\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n@@ -103,14 +103,19 @@ def _get_filtered_users(self, query, groups_filter, search_term, limit):\n         if search_term:\n             users = self._user_search_results()\n         else:\n-            results = self.acl_users.searchUsers(id=query, max_results=limit)\n-            users = [\n-                self.portal_membership.getMemberById(user["userid"]) for user in results\n-            ]\n+            kw = {}\n+            if query:\n+                kw["id"] = query\n+                # No max_results if groups_filter\n+                if limit:\n+                    kw["max_results"] = limit\n+            users = self._get_users(**kw)\n+\n         if groups_filter:\n             users = [\n                 user for user in users if set(user.getGroups()) & set(groups_filter)\n             ]\n+        users = limit and users[:limit] or users\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -131,7 +136,7 @@ def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n             groups_filter = self.query.get("groups-filter:list", [])\n-            limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n+            limit = int(self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0])\n             if query or groups_filter or self.search_term or limit:\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex a9de8d8b2..67cc7e5ef 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.23.1.dev0"\n+            "version": "8.24.2.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-30T11:06:40+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/7cf15f37e23b7901d9f6a5b281fb6606c90df459

Merge branch 'master' into alias_controlpanel

Files changed:
A news/1189.bugfix
A news/1430.bugfix
A news/1449.bugfix
A requirements.txt
M docs/source/content.md
M plone-5.2.x.cfg
M plone-6.0.x.cfg
M requirements-5.2.txt
M requirements-6.0.txt
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/serializer/utils.py
M src/plone/restapi/services/registry/get.py
M src/plone/restapi/tests/http-examples/querystring_get.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp

b'diff --git a/docs/source/content.md b/docs/source/content.md\nindex 6d5a3458f..eba964b60 100644\n--- a/docs/source/content.md\n+++ b/docs/source/content.md\n@@ -170,7 +170,8 @@ HTTP/1.1 404 Not Found\n Content-Type: application/json\n \n {\n-  \'error\': \'NotFound\'\n+  "message": "Resource not found: https://<resource url>",\n+  "type": "NotFound"\n }\n ```\n \ndiff --git a/news/1189.bugfix b/news/1189.bugfix\nnew file mode 100644\nindex 000000000..08ee97e73\n--- /dev/null\n+++ b/news/1189.bugfix\n@@ -0,0 +1,2 @@\n+Fix @registry endpoint Object of type datetime is not JSON serializable\n+[iulianpetchesi]\ndiff --git a/news/1430.bugfix b/news/1430.bugfix\nnew file mode 100644\nindex 000000000..e10107a31\n--- /dev/null\n+++ b/news/1430.bugfix\n@@ -0,0 +1,2 @@\n+Fixed small documentation for error code 404\n+[rohnsha]\ndiff --git a/news/1449.bugfix b/news/1449.bugfix\nnew file mode 100644\nindex 000000000..3dea3b483\n--- /dev/null\n+++ b/news/1449.bugfix\n@@ -0,0 +1,2 @@\n+Handle subblocks in site root serializer for Plone 5.x\n+[erral]\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 9d7df02ed..48fcd042d 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,22 +1,22 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/5.2.6/versions.cfg\n+    https://dist.plone.org/release/5.2-latest/versions.cfg\n     base.cfg\n-find-links += https://dist.plone.org/thirdparty/\n-versions=versions\n \n [versions]\n black = 21.7b0\n \n-# Error: The requirement (\'virtualenv>=20.0.35\') is not allowed by your [versions] constraint (20.0.26)\n-virtualenv = 20.0.35\n-\n-# Error: The requirement (\'importlib-metadata>=1\') is not allowed by your [versions] constraint (0.23)\n-importlib-metadata = 2.0.0\n-\n # cffi 1.14.3 fails on apple m1\n # cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n cffi = 1.14.6\n \n # Use the new plone.rest alpha\n plone.rest = 2.0.0a3\n+\n+[versions:python36]\n+# Error: The requirement (\'importlib-metadata<4.3,>=1.1.0\') is not allowed by your [versions] constraint (0.23)\n+importlib-metadata = 2.0.0\n+\n+[versions:python37]\n+# Error: The requirement (\'importlib-metadata<4.3,>=1.1.0\') is not allowed by your [versions] constraint (0.23)\n+importlib-metadata = 2.0.0\ndiff --git a/plone-6.0.x.cfg b/plone-6.0.x.cfg\nindex 5642cf608..662a9a42a 100644\n--- a/plone-6.0.x.cfg\n+++ b/plone-6.0.x.cfg\n@@ -1,9 +1,7 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/6.0.0a4/versions.cfg\n+    https://dist.plone.org/release/6.0-latest/versions.cfg\n     base.cfg\n-find-links = https://dist.plone.org/release/6.0.0a4/\n-versions=versions\n \n [buildout:python37]\n parts =\n@@ -25,3 +23,7 @@ cffi = 1.14.6\n # Requirement of flake8>=2.4.0: importlib-metadata<4.3\n # Error: The requirement (\'importlib-metadata<4.3\') is not allowed by your [versions] constraint (4.11.2)\n importlib-metadata = 4.2.0\n+\n+# Requirement of Markdown 3.4.1+: importlib-metadata>=4.4\n+# Error: The requirement (\'importlib-metadata>=4.4\') is not allowed by your [versions] constraint (4.2.0)\n+Markdown = 3.3.4\ndiff --git a/requirements-5.2.txt b/requirements-5.2.txt\nindex a17c18c38..9a297411a 100644\n--- a/requirements-5.2.txt\n+++ b/requirements-5.2.txt\n@@ -1,5 +1,2 @@\n-# Keep this file in sync with: https://github.com/kitconcept/buildout/edit/master/requirements.txt\n-setuptools==42.0.2\n-zc.buildout==2.13.4\n-wheel\n+-r https://dist.plone.org/release/5.2-latest/requirements.txt\n zpretty\ndiff --git a/requirements-6.0.txt b/requirements-6.0.txt\nindex 62c99aa74..3ae6c36a6 100644\n--- a/requirements-6.0.txt\n+++ b/requirements-6.0.txt\n@@ -1,12 +1 @@\n-# from https://dist.plone.org/release/6.0.0a4/requirements.txt\n-setuptools==62.0.0\n-zc.buildout==3.0.0rc3\n-pip==22.0.4\n-wheel==0.37.1\n-\n-# Windows specific down here (has to be installed here, fails in buildout)\n-# Dependency of zope.sendmail:\n-pywin32 ; platform_system == \'Windows\'\n-\n-# SSL Certs on windows, because Python is missing them otherwise:\n-certifi ; platform_system == \'Windows\'\n\\ No newline at end of file\n+-r https://dist.plone.org/release/6.0-latest/requirements.txt\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 000000000..2c583f217\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+-r requirements-5.2.txt\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex c85750d46..8add46fda 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -11,6 +11,7 @@\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import subscribers\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -19,59 +20,68 @@\n import os\n \n \n+def _transform(blocks, context):\n+    for id, block_value in blocks.items():\n+        handle_subblocks(block_value, context)\n+        block_type = block_value.get("@type", "")\n+        handlers = []\n+        for h in subscribers(\n+            (context, getRequest()),\n+            IBlockFieldSerializationTransformer,\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                h.blockid = id\n+                handlers.append(h)\n+\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            block_value = handler(block_value)\n+\n+        blocks[id] = block_value\n+\n+    return blocks\n+\n+\n+def handle_subblocks(block_value, context):\n+    if "data" in block_value:\n+        if isinstance(block_value["data"], dict):\n+            if "blocks" in block_value["data"]:\n+                block_value["data"]["blocks"] = _transform(\n+                    block_value["data"]["blocks"], context\n+                )\n+\n+    if "blocks" in block_value:\n+        block_value["blocks"] = _transform(block_value["blocks"], context)\n+\n+    return block_value\n+\n+\n+def apply_block_serialization_transforms(block_value, context):\n+    block_value = handle_subblocks(block_value, context)\n+    block_type = block_value.get("@type", "")\n+    handlers = []\n+    for h in subscribers((context, getRequest()), IBlockFieldSerializationTransformer):\n+        if h.block_type == block_type or h.block_type is None:\n+            h.blockid = id\n+            handlers.append(h)\n+\n+    for handler in sorted(handlers, key=lambda h: h.order):\n+        if not getattr(handler, "disabled", False):\n+            block_value = handler(block_value)\n+\n+    return block_value\n+\n+\n @adapter(IJSONField, IBlocks, Interface)\n @implementer(IFieldSerializer)\n class BlocksJSONFieldSerializer(DefaultFieldSerializer):\n-    def _transform(self, blocks):\n-        for id, block_value in blocks.items():\n-            self.handle_subblocks(block_value)\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    h.blockid = id\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n-\n-        return blocks\n-\n-    def handle_subblocks(self, block_value):\n-        if "data" in block_value:\n-            if isinstance(block_value["data"], dict):\n-                if "blocks" in block_value["data"]:\n-                    block_value["data"]["blocks"] = self._transform(\n-                        block_value["data"]["blocks"]\n-                    )\n-\n-        if "blocks" in block_value:\n-            block_value["blocks"] = self._transform(block_value["blocks"])\n-\n     def __call__(self):\n         value = copy.deepcopy(self.get_value())\n \n         if self.field.getName() == "blocks":\n             for id, block_value in value.items():\n-                self.handle_subblocks(block_value)\n-                block_type = block_value.get("@type", "")\n-                handlers = []\n-                for h in subscribers(\n-                    (self.context, self.request), IBlockFieldSerializationTransformer\n-                ):\n-                    if h.block_type == block_type or h.block_type is None:\n-                        h.blockid = id\n-                        handlers.append(h)\n-\n-                for handler in sorted(handlers, key=lambda h: h.order):\n-                    if not getattr(handler, "disabled", False):\n-                        block_value = handler(block_value)\n-\n-                value[id] = block_value\n+                value[id] = apply_block_serialization_transforms(\n+                    block_value, self.context\n+                )\n \n         return json_compatible(value)\n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 7ba280e4d..a0239bab5 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -3,10 +3,10 @@\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.utils import iterSchemata\n from plone.restapi.batching import HypermediaBatch\n-from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.blocks import apply_block_serialization_transforms\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.services.locking import lock_info\n@@ -17,7 +17,6 @@\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n-from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema import getFields\n@@ -135,17 +134,5 @@ def serialize_blocks(self):\n         if not blocks:\n             return blocks\n         for id, block_value in blocks.items():\n-            block_type = block_value.get("@type", "")\n-            handlers = []\n-            for h in subscribers(\n-                (self.context, self.request), IBlockFieldSerializationTransformer\n-            ):\n-                if h.block_type == block_type or h.block_type is None:\n-                    handlers.append(h)\n-\n-            for handler in sorted(handlers, key=lambda h: h.order):\n-                if not getattr(handler, "disabled", False):\n-                    block_value = handler(block_value)\n-\n-            blocks[id] = block_value\n+            blocks[id] = apply_block_serialization_transforms(block_value, self.context)\n         return blocks\ndiff --git a/src/plone/restapi/serializer/utils.py b/src/plone/restapi/serializer/utils.py\nindex 15b37a41a..f9506c9ce 100644\n--- a/src/plone/restapi/serializer/utils.py\n+++ b/src/plone/restapi/serializer/utils.py\n@@ -26,7 +26,8 @@ def uid_to_url(path):\n         target_object = uuidToObject(uid)\n         if target_object:\n             adapter = queryMultiAdapter(\n-                (target_object, target_object.REQUEST), IObjectPrimaryFieldTarget\n+                (target_object, target_object.REQUEST),\n+                IObjectPrimaryFieldTarget,\n             )\n             if adapter and adapter():\n                 href = adapter()\ndiff --git a/src/plone/restapi/services/registry/get.py b/src/plone/restapi/services/registry/get.py\nindex 8ba0ac2cd..b75ecc07a 100644\n--- a/src/plone/restapi/services/registry/get.py\n+++ b/src/plone/restapi/services/registry/get.py\n@@ -1,5 +1,6 @@\n from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -32,7 +33,7 @@ def reply(self):\n         registry = getUtility(IRegistry)\n         if self.params:\n             value = registry[self._get_record_name]\n-            return value\n+            return json_compatible(value)\n         else:  # batched listing\n             serializer = getMultiAdapter((registry, self.request), ISerializeToJson)\n             return serializer()\ndiff --git a/src/plone/restapi/tests/http-examples/querystring_get.resp b/src/plone/restapi/tests/http-examples/querystring_get.resp\nindex 00af14c6c..6048db141 100644\n--- a/src/plone/restapi/tests/http-examples/querystring_get.resp\n+++ b/src/plone/restapi/tests/http-examples/querystring_get.resp\n@@ -7,10 +7,12 @@ Content-Type: application/json\n         "Creator": {\n             "description": "The person that created an item",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.string.currentUser",\n-                "plone.app.querystring.operation.selection.any"\n+                "plone.app.querystring.operation.selection.any",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.any": {\n@@ -19,6 +21,12 @@ Content-Type: application/json\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n                 },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n+                },\n                 "plone.app.querystring.operation.string.currentUser": {\n                     "description": "The user viewing the querystring results",\n                     "operation": "plone.app.querystring.queryparser._currentUser",\n@@ -34,6 +42,7 @@ Content-Type: application/json\n         "Description": {\n             "description": "An item\'s description",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.string.contains"\n@@ -54,6 +63,7 @@ Content-Type: application/json\n         "SearchableText": {\n             "description": "Text search of an item\'s contents",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.string.contains"\n@@ -74,10 +84,12 @@ Content-Type: application/json\n         "Subject": {\n             "description": "Tags are used for organization of content",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.selection.any",\n-                "plone.app.querystring.operation.selection.all"\n+                "plone.app.querystring.operation.selection.all",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.all": {\n@@ -91,6 +103,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._contains",\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n+                },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n                 }\n             },\n             "sortable": false,\n@@ -101,6 +119,7 @@ Content-Type: application/json\n         "Title": {\n             "description": "Text search of an item\'s title",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.string.contains"\n@@ -121,6 +140,7 @@ Content-Type: application/json\n         "created": {\n             "description": "The date an item was created",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -204,6 +224,7 @@ Content-Type: application/json\n         "effective": {\n             "description": "The time and date an item was first published",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -287,6 +308,7 @@ Content-Type: application/json\n         "effectiveRange": {\n             "description": "Querying this is undefined",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [],\n             "operators": {},\n@@ -298,6 +320,7 @@ Content-Type: application/json\n         "end": {\n             "description": "The end date and time of an event",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -381,6 +404,7 @@ Content-Type: application/json\n         "expires": {\n             "description": "The time and date an item was expired",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -464,9 +488,11 @@ Content-Type: application/json\n         "getId": {\n             "description": "The short name of an item (used in the url)",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n-                "plone.app.querystring.operation.string.is"\n+                "plone.app.querystring.operation.string.is",\n+                "plone.app.querystring.operation.string.isNot"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.string.is": {\n@@ -474,6 +500,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._equal",\n                     "title": "Is",\n                     "widget": "StringWidget"\n+                },\n+                "plone.app.querystring.operation.string.isNot": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Is not",\n+                    "widget": "StringWidget"\n                 }\n             },\n             "sortable": true,\n@@ -484,6 +516,7 @@ Content-Type: application/json\n         "getObjPositionInParent": {\n             "description": "The order of an item in its parent folder",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.int.is",\n@@ -518,6 +551,7 @@ Content-Type: application/json\n         "getRawRelatedItems": {\n             "description": "Find items related to the selected items",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.reference.is"\n@@ -538,6 +572,7 @@ Content-Type: application/json\n         "isDefaultPage": {\n             "description": "Find items that are the default view for their containing folder.",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.boolean.isTrue",\n@@ -565,6 +600,7 @@ Content-Type: application/json\n         "isFolderish": {\n             "description": "Find items that can contain other objects",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.boolean.isTrue",\n@@ -592,6 +628,7 @@ Content-Type: application/json\n         "modified": {\n             "description": "The time and date an item was last modified",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -675,6 +712,7 @@ Content-Type: application/json\n         "path": {\n             "description": "The location of an item ",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.string.absolutePath",\n@@ -709,9 +747,11 @@ Content-Type: application/json\n         "portal_type": {\n             "description": "An item\'s type (e.g. Event)",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n-                "plone.app.querystring.operation.selection.any"\n+                "plone.app.querystring.operation.selection.any",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.any": {\n@@ -719,6 +759,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._contains",\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n+                },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n                 }\n             },\n             "sortable": false,\n@@ -766,9 +812,11 @@ Content-Type: application/json\n         "review_state": {\n             "description": "An item\'s workflow state (e.g.published)",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n-                "plone.app.querystring.operation.selection.any"\n+                "plone.app.querystring.operation.selection.any",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.any": {\n@@ -776,6 +824,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._contains",\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n+                },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n                 }\n             },\n             "sortable": true,\n@@ -814,6 +868,7 @@ Content-Type: application/json\n         "show_inactive": {\n             "description": "Select which roles have the permission to view inactive objects",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.string.showInactive"\n@@ -865,10 +920,12 @@ Content-Type: application/json\n         "sortable_title": {\n             "description": "The item\'s title, transformed for sorting",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.string.contains",\n-                "plone.app.querystring.operation.string.is"\n+                "plone.app.querystring.operation.string.is",\n+                "plone.app.querystring.operation.string.isNot"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.string.contains": {\n@@ -882,6 +939,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._equal",\n                     "title": "Is",\n                     "widget": "StringWidget"\n+                },\n+                "plone.app.querystring.operation.string.isNot": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Is not",\n+                    "widget": "StringWidget"\n                 }\n             },\n             "sortable": true,\n@@ -892,6 +955,7 @@ Content-Type: application/json\n         "start": {\n             "description": "The start date and time of an event",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -977,10 +1041,12 @@ Content-Type: application/json\n         "Creator": {\n             "description": "The person that created an item",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.string.currentUser",\n-                "plone.app.querystring.operation.selection.any"\n+                "plone.app.querystring.operation.selection.any",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.any": {\n@@ -989,6 +1055,12 @@ Content-Type: application/json\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n                 },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n+                },\n                 "plone.app.querystring.operation.string.currentUser": {\n                     "description": "The user viewing the querystring results",\n                     "operation": "plone.app.querystring.queryparser._currentUser",\n@@ -1004,6 +1076,7 @@ Content-Type: application/json\n         "created": {\n             "description": "The date an item was created",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -1087,6 +1160,7 @@ Content-Type: application/json\n         "effective": {\n             "description": "The time and date an item was first published",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -1170,6 +1244,7 @@ Content-Type: application/json\n         "end": {\n             "description": "The end date and time of an event",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -1253,6 +1328,7 @@ Content-Type: application/json\n         "expires": {\n             "description": "The time and date an item was expired",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -1336,9 +1412,11 @@ Content-Type: application/json\n         "getId": {\n             "description": "The short name of an item (used in the url)",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n-                "plone.app.querystring.operation.string.is"\n+                "plone.app.querystring.operation.string.is",\n+                "plone.app.querystring.operation.string.isNot"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.string.is": {\n@@ -1346,6 +1424,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._equal",\n                     "title": "Is",\n                     "widget": "StringWidget"\n+                },\n+                "plone.app.querystring.operation.string.isNot": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Is not",\n+                    "widget": "StringWidget"\n                 }\n             },\n             "sortable": true,\n@@ -1356,6 +1440,7 @@ Content-Type: application/json\n         "getObjPositionInParent": {\n             "description": "The order of an item in its parent folder",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n                 "plone.app.querystring.operation.int.is",\n@@ -1390,6 +1475,7 @@ Content-Type: application/json\n         "modified": {\n             "description": "The time and date an item was last modified",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\n@@ -1473,9 +1559,11 @@ Content-Type: application/json\n         "review_state": {\n             "description": "An item\'s workflow state (e.g.published)",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Metadata",\n             "operations": [\n-                "plone.app.querystring.operation.selection.any"\n+                "plone.app.querystring.operation.selection.any",\n+                "plone.app.querystring.operation.selection.none"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.selection.any": {\n@@ -1483,6 +1571,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._contains",\n                     "title": "Matches any of",\n                     "widget": "MultipleSelectionWidget"\n+                },\n+                "plone.app.querystring.operation.selection.none": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Matches none of",\n+                    "widget": "MultipleSelectionWidget"\n                 }\n             },\n             "sortable": true,\n@@ -1521,10 +1615,12 @@ Content-Type: application/json\n         "sortable_title": {\n             "description": "The item\'s title, transformed for sorting",\n             "enabled": false,\n+            "fetch_vocabulary": true,\n             "group": "Text",\n             "operations": [\n                 "plone.app.querystring.operation.string.contains",\n-                "plone.app.querystring.operation.string.is"\n+                "plone.app.querystring.operation.string.is",\n+                "plone.app.querystring.operation.string.isNot"\n             ],\n             "operators": {\n                 "plone.app.querystring.operation.string.contains": {\n@@ -1538,6 +1634,12 @@ Content-Type: application/json\n                     "operation": "plone.app.querystring.queryparser._equal",\n                     "title": "Is",\n                     "widget": "StringWidget"\n+                },\n+                "plone.app.querystring.operation.string.isNot": {\n+                    "description": "Tip: you can use * to autocomplete.",\n+                    "operation": "plone.app.querystring.queryparser._excludes",\n+                    "title": "Is not",\n+                    "widget": "StringWidget"\n                 }\n             },\n             "sortable": true,\n@@ -1548,6 +1650,7 @@ Content-Type: application/json\n         "start": {\n             "description": "The start date and time of an event",\n             "enabled": true,\n+            "fetch_vocabulary": true,\n             "group": "Dates",\n             "operations": [\n                 "plone.app.querystring.operation.date.lessThan",\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 017334171..c9228dbbb 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n     "batching": {\n         "@id": "http://localhost:55001/plone/@registry",\n         "first": "http://localhost:55001/plone/@registry?b_start=0",\n-        "last": "http://localhost:55001/plone/@registry?b_start=1800",\n+        "last": "http://localhost:55001/plone/@registry?b_start=1850",\n         "next": "http://localhost:55001/plone/@registry?b_start=25"\n     },\n     "items": [\n@@ -434,5 +434,5 @@ Content-Type: application/json\n             "value": false\n         }\n     ],\n-    "items_total": 1823\n+    "items_total": 1853\n }\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex 67cc7e5ef..eb5f1a1b5 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -43,7 +43,7 @@ Content-Type: application/json\n             "title": "Soporte de Copia de Trabajo (Repetir)",\n             "uninstall_profile_id": "plone.app.iterate:uninstall",\n             "upgrade_info": {},\n-            "version": "4.0.2"\n+            "version": "4.0.3"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.app.multilingual",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-01T14:06:32+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/845f9da9a62f9a48150e87406d5ab4e5d91b5d87

Merge branch 'master' into alias_controlpanel

Files changed:
A src/plone/restapi/tests/http-examples/addons_install_profile.req
A src/plone/restapi/tests/http-examples/addons_install_profile.resp
M CHANGES.rst
M docs/source/addons.md
M setup.py
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/addons/post.py
M src/plone/restapi/tests/test_addons.py
M src/plone/restapi/tests/test_documentation.py
D news/1189.bugfix
D news/1430.bugfix
D news/1449.bugfix
D news/1461.bugfix
D news/1466.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4e4f97f88..594ad227f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,30 @@ Changelog\n \n .. towncrier release notes start\n \n+8.25.0 (2022-08-31)\n+-------------------\n+\n+New features:\n+\n+\n+- Add support for importing profiles in @addons endpoint\n+  [sneridagh] (#1479)\n+\n+\n+Bug fixes:\n+\n+\n+- Fix @registry endpoint Object of type datetime is not JSON serializable\n+  [iulianpetchesi] (#1189)\n+- Fixed small documentation for error code 404\n+  [rohnsha] (#1430)\n+- Handle subblocks in site root serializer for Plone 5.x\n+  [erral] (#1449)\n+- Do not hard depend on `plone.app.iterate`. It is not an direct core package and might not be available.\n+  [jensens] (#1461)\n+- Sanitise user id when checking for portrait [instification] (#1466)\n+\n+\n 8.24.1 (2022-08-04)\n -------------------\n \ndiff --git a/docs/source/addons.md b/docs/source/addons.md\nindex 2ba3b7dde..92be1ba13 100644\n--- a/docs/source/addons.md\n+++ b/docs/source/addons.md\n@@ -93,3 +93,16 @@ An individual add-on can be upgraded by issuing a `POST` to the given URL:\n ```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n :language: http\n ```\n+\n+## Install a profile of an add-on\n+\n+You can install a profile of a given add-on by issuing a `POST` to the given URL and providing the name of the profile like:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_install_profile.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_install_profile.resp\n+:language: http\n+```\ndiff --git a/news/1189.bugfix b/news/1189.bugfix\ndeleted file mode 100644\nindex 08ee97e73..000000000\n--- a/news/1189.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix @registry endpoint Object of type datetime is not JSON serializable\n-[iulianpetchesi]\ndiff --git a/news/1430.bugfix b/news/1430.bugfix\ndeleted file mode 100644\nindex e10107a31..000000000\n--- a/news/1430.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fixed small documentation for error code 404\n-[rohnsha]\ndiff --git a/news/1449.bugfix b/news/1449.bugfix\ndeleted file mode 100644\nindex 3dea3b483..000000000\n--- a/news/1449.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Handle subblocks in site root serializer for Plone 5.x\n-[erral]\ndiff --git a/news/1461.bugfix b/news/1461.bugfix\ndeleted file mode 100644\nindex 2246d8193..000000000\n--- a/news/1461.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Do not hard depend on `plone.app.iterate`. It is not an direct core package and might not be available.\n-[jensens]\ndiff --git a/news/1466.bugfix b/news/1466.bugfix\ndeleted file mode 100644\nindex c4f03dac9..000000000\n--- a/news/1466.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Sanitise user id when checking for portrait [instification]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 5ea43aa18..3e2d4e0b1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n import sys\n \n-version = "8.24.2.dev0"\n+version = "8.25.1.dev0"\n \n assert sys.version_info >= (\n     3,\ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 64e70d85a..a849dcc7b 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -358,6 +358,17 @@ def uninstall_product(self, product_id):\n             self.ps.unsetLastVersionForProfile(install_profile["id"])\n         return True\n \n+    def import_profile(self, product_id, profile_id):\n+        profile = self._get_profile(\n+            product_id, profile_id, strict=True, allow_hidden=True\n+        )\n+        if not profile:\n+            logger.error("Could not find %s: profile", product_id)\n+            return False\n+        else:\n+            self.ps.runAllImportStepsFromProfile("profile-%s" % profile["id"])\n+            return True\n+\n     @view.memoize\n     def marshall_addons(self):\n         addons = {}\ndiff --git a/src/plone/restapi/services/addons/post.py b/src/plone/restapi/services/addons/post.py\nindex 4ab6fc63b..d9fe87dde 100644\n--- a/src/plone/restapi/services/addons/post.py\n+++ b/src/plone/restapi/services/addons/post.py\n@@ -28,7 +28,8 @@ def publishTraverse(self, request, name):\n         return self\n \n     def reply(self):\n-        addon, action = self.params\n+        # Unpack taking into account that third argument might not be present\n+        addon, action, profile = (self.params + [None] * 3)[:3]\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -40,6 +41,8 @@ def reply(self):\n             result = self.addons.uninstall_product(addon)\n         elif action == "upgrade":\n             result = self.addons.upgrade_product(addon)\n+        elif action == "import":\n+            result = self.addons.import_profile(addon, profile)\n         else:\n             raise Exception(f"Unknown action {action}")\n \ndiff --git a/src/plone/restapi/tests/http-examples/addons_install_profile.req b/src/plone/restapi/tests/http-examples/addons_install_profile.req\nnew file mode 100644\nindex 000000000..83cc20b10\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/addons_install_profile.req\n@@ -0,0 +1,3 @@\n+POST /plone/@addons/plone.restapi/import/testing-workflows HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/addons_install_profile.resp b/src/plone/restapi/tests/http-examples/addons_install_profile.resp\nnew file mode 100644\nindex 000000000..58e46abbc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/addons_install_profile.resp\n@@ -0,0 +1 @@\n+HTTP/1.1 204 No Content\ndiff --git a/src/plone/restapi/tests/test_addons.py b/src/plone/restapi/tests/test_addons.py\nindex 78ab4fa2e..44f2aef64 100644\n--- a/src/plone/restapi/tests/test_addons.py\n+++ b/src/plone/restapi/tests/test_addons.py\n@@ -1,3 +1,4 @@\n+from plone import api\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -200,3 +201,16 @@ def _get_upgrade_info(self):\n \n         self.assertEqual(1, len(response.json()["items"]))\n         self.assertEqual("plone.restapi", response.json()["items"][0]["id"])\n+\n+    def test_install_specific_profile(self):\n+        response = self.api_session.post(\n+            "/@addons/plone.restapi/import/testing-workflows"\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        transaction.commit()\n+\n+        # This test installs the profile \'testing-workflows\', which installs\n+        # a workflow named "restriction_workflow", we check for it to be present\n+        pw = api.portal.get_tool("portal_workflow")\n+        self.assertIn("restriction_workflow", pw.listWorkflows())\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 11a580282..6ba477e63 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1640,6 +1640,12 @@ def test_database_get(self):\n         response = self.api_session.get("/@database")\n         save_request_for_docs("database_get", response)\n \n+    def test_addons_install_specific_profile(self):\n+        response = self.api_session.post(\n+            "/@addons/plone.restapi/import/testing-workflows"\n+        )\n+        save_request_for_docs("addons_install_profile", response)\n+\n \n class TestDocumentationMessageTranslations(TestDocumentationBase):\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-05T21:00:06+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/485184d02a58730ef4c829416a85438a126b30a3

Merge branch 'master' into alias_controlpanel

Files changed:
A docs/source/portrait.md
A news/1480.feature
A src/plone/restapi/tests/http-examples/portrait_self_404_get.resp
A src/plone/restapi/tests/http-examples/portrait_self_get.req
A src/plone/restapi/tests/http-examples/portrait_self_get.resp
A src/plone/restapi/tests/http-examples/portrait_username_get.req
A src/plone/restapi/tests/http-examples/portrait_username_get.resp
M CHANGES.rst
M docs/source/actions.md
M docs/source/addons.md
M docs/source/authentication.md
M docs/source/batching.md
M docs/source/blocks.md
M docs/source/breadcrumbs.md
M docs/source/comments.md
M docs/source/content-negotiation.md
M docs/source/content.md
M docs/source/contextnavigation.md
M docs/source/contributing.md
M docs/source/controlpanels.md
M docs/source/conventions.md
M docs/source/copymove.md
M docs/source/customization.md
M docs/source/database.md
M docs/source/email-notification.md
M docs/source/email-send.md
M docs/source/expansion.md
M docs/source/exploring.md
M docs/source/glossary.md
M docs/source/groups.md
M docs/source/history.md
M docs/source/http-status-codes.md
M docs/source/i18n.md
M docs/source/index.md
M docs/source/introduction.md
M docs/source/locking.md
M docs/source/navigation.md
M docs/source/plone-content.md
M docs/source/principals.md
M docs/source/querystring.md
M docs/source/querystringsearch.md
M docs/source/registry.md
M docs/source/roles.md
M docs/source/searching.md
M docs/source/serialization.md
M docs/source/sharing.md
M docs/source/system.md
M docs/source/tiles.md
M docs/source/translations.md
M docs/source/tusupload.md
M docs/source/types-schema.md
M docs/source/types.md
M docs/source/upgrade-guide.md
M docs/source/users.md
M docs/source/vocabularies.md
M docs/source/workflow.md
M docs/source/workingcopy.md
M setup.py
M src/plone/restapi/controlpanels/registry.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/users/configure.zcml
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp
M src/plone/restapi/tests/http-examples/users_update_portrait_get.resp
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 594ad227f..b4de777e3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+8.25.1 (2022-09-02)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix the category of the \'Users and groups settings\' controlpanel adapter\n+  [sneridagh] (#1482)\n+\n+\n 8.25.0 (2022-08-31)\n -------------------\n \ndiff --git a/docs/source/actions.md b/docs/source/actions.md\nindex f3a38986d..8b25c5396 100644\n--- a/docs/source/actions.md\n+++ b/docs/source/actions.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Portal actions can be used to build UI elements that adapt to the available actions, such as displaying only certain tabs for an authenticated user."\n-  "property=og:description": "Portal actions can be used to build UI elements that adapt to the available actions, such as displaying only certain tabs for an authenticated user."\n-  "property=og:title": "Portal Actions"\n-  "keywords": "Plone, plone.restapi, REST, API, Portal Actions"\n+myst:\n+  html_meta:\n+    "description": "Portal actions can be used to build UI elements that adapt to the available actions, such as displaying only certain tabs for an authenticated user."\n+    "property=og:description": "Portal actions can be used to build UI elements that adapt to the available actions, such as displaying only certain tabs for an authenticated user."\n+    "property=og:title": "Portal Actions"\n+    "keywords": "Plone, plone.restapi, REST, API, Portal Actions"\n ---\n \n # Portal Actions\ndiff --git a/docs/source/addons.md b/docs/source/addons.md\nindex 92be1ba13..c1fd3e359 100644\n--- a/docs/source/addons.md\n+++ b/docs/source/addons.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Add-on product records can be addressed through the @addons endpoint in a Plone site."\n-  "property=og:description": "Add-on product records can be addressed through the @addons endpoint in a Plone site."\n-  "property=og:title": "Add-ons"\n-  "keywords": "Plone, plone.restapi, REST, API, Add-ons"\n+myst:\n+  html_meta:\n+    "description": "Add-on product records can be addressed through the @addons endpoint in a Plone site."\n+    "property=og:description": "Add-on product records can be addressed through the @addons endpoint in a Plone site."\n+    "property=og:title": "Add-ons"\n+    "keywords": "Plone, plone.restapi, REST, API, Add-ons"\n ---\n \n # Add-ons\ndiff --git a/docs/source/authentication.md b/docs/source/authentication.md\nindex 69d2b540b..599044650 100644\n--- a/docs/source/authentication.md\n+++ b/docs/source/authentication.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi uses PlonePAS for authentication."\n-  "property=og:description": "`plone.restapi uses PlonePAS for authentication."\n-  "property=og:title": "Authentication"\n-  "keywords": "Plone, plone.restapi, REST, API, Authentication, "\n+myst:\n+  html_meta:\n+    "description": "plone.restapi uses PlonePAS for authentication."\n+    "property=og:description": "`plone.restapi uses PlonePAS for authentication."\n+    "property=og:title": "Authentication"\n+    "keywords": "Plone, plone.restapi, REST, API, Authentication, "\n ---\n \n # Authentication\ndiff --git a/docs/source/batching.md b/docs/source/batching.md\nindex 536c0d07b..f801cebaa 100644\n--- a/docs/source/batching.md\n+++ b/docs/source/batching.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Representations of collection-like resources are batched or paginated if the size of the resultset exceeds the batching size."\n-  "property=og:description": "Representations of collection-like resources are batched or paginated if the size of the resultset exceeds the batching size"\n-  "property=og:title": "Batching"\n-  "keywords": "Plone, plone.restapi, REST, API, Batching"\n+myst:\n+  html_meta:\n+    "description": "Representations of collection-like resources are batched or paginated if the size of the resultset exceeds the batching size."\n+    "property=og:description": "Representations of collection-like resources are batched or paginated if the size of the resultset exceeds the batching size"\n+    "property=og:title": "Batching"\n+    "keywords": "Plone, plone.restapi, REST, API, Batching"\n ---\n \n # Batching\ndiff --git a/docs/source/blocks.md b/docs/source/blocks.md\nindex b652175bc..5751b737e 100644\n--- a/docs/source/blocks.md\n+++ b/docs/source/blocks.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The plone.restapi package gives support for Volto blocks providing a Dexterity behavior plone.restapi.behaviors.IBlocks."\n-  "property=og:description": "The plone.restapi package gives support for Volto blocks providing a Dexterity behavior plone.restapi.behaviors.IBlocks."\n-  "property=og:title": "Volto Blocks support"\n-  "keywords": "Plone, plone.restapi, REST, API, Volto, Blocks, support"\n+myst:\n+  html_meta:\n+    "description": "The plone.restapi package gives support for Volto blocks providing a Dexterity behavior plone.restapi.behaviors.IBlocks."\n+    "property=og:description": "The plone.restapi package gives support for Volto blocks providing a Dexterity behavior plone.restapi.behaviors.IBlocks."\n+    "property=og:title": "Volto Blocks support"\n+    "keywords": "Plone, plone.restapi, REST, API, Volto, Blocks, support"\n ---\n \n # Volto Blocks support\ndiff --git a/docs/source/breadcrumbs.md b/docs/source/breadcrumbs.md\nindex 82f8dc30e..fbdcb182e 100644\n--- a/docs/source/breadcrumbs.md\n+++ b/docs/source/breadcrumbs.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Get the breadcrumbs for the current page with plone.restapi."\n-  "property=og:description": "Get the breadcrumbs for the current page with plone.restapi."\n-  "property=og:title": "Breadcrumbs"\n-  "keywords": "Plone, plone.restapi, REST, API, Breadcrumbs"\n+myst:\n+  html_meta:\n+    "description": "Get the breadcrumbs for the current page with plone.restapi."\n+    "property=og:description": "Get the breadcrumbs for the current page with plone.restapi."\n+    "property=og:title": "Breadcrumbs"\n+    "keywords": "Plone, plone.restapi, REST, API, Breadcrumbs"\n ---\n \n (breadcrumbs)=\ndiff --git a/docs/source/comments.md b/docs/source/comments.md\nindex a1f32157d..629886b2f 100644\n--- a/docs/source/comments.md\n+++ b/docs/source/comments.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Plone offers to users a feature to post comments on any content object with plone.app.discussion."\n-  "property=og:description": "Plone offers to users a feature to post comments on any content object with plone.app.discussion."\n-  "property=og:title": "Comments"\n-  "keywords": "Plone, plone.restapi, REST, API, Comments, plone.app.discussion"\n+myst:\n+  html_meta:\n+    "description": "Plone offers to users a feature to post comments on any content object with plone.app.discussion."\n+    "property=og:description": "Plone offers to users a feature to post comments on any content object with plone.app.discussion."\n+    "property=og:title": "Comments"\n+    "keywords": "Plone, plone.restapi, REST, API, Comments, plone.app.discussion"\n ---\n \n # Comments\ndiff --git a/docs/source/content-negotiation.md b/docs/source/content-negotiation.md\nindex 3c9c50691..cffb834ea 100644\n--- a/docs/source/content-negotiation.md\n+++ b/docs/source/content-negotiation.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best."\n-  "property=og:description": "Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best."\n-  "property=og:title": "Content Negotiation"\n-  "keywords": "Plone, plone.restapi, REST, API, Content, Negotiation"\n+myst:\n+  html_meta:\n+    "description": "Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best."\n+    "property=og:description": "Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best."\n+    "property=og:title": "Content Negotiation"\n+    "keywords": "Plone, plone.restapi, REST, API, Content, Negotiation"\n ---\n \n # Content Negotiation\ndiff --git a/docs/source/content.md b/docs/source/content.md\nindex eba964b60..3ec184ddc 100644\n--- a/docs/source/content.md\n+++ b/docs/source/content.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi not only exposes content objects via a RESTful API, but the API consumer can create, read, update, and delete a content object."\n-  "property=og:description": "plone.restapi not only exposes content objects via a RESTful API, but the API consumer can create, read, update, and delete a content object."\n-  "property=og:title": "Content Manipulation"\n-  "keywords": "Plone, plone.restapi, REST, API, Content, Manipulation"\n+myst:\n+  html_meta:\n+    "description": "plone.restapi not only exposes content objects via a RESTful API, but the API consumer can create, read, update, and delete a content object."\n+    "property=og:description": "plone.restapi not only exposes content objects via a RESTful API, but the API consumer can create, read, update, and delete a content object."\n+    "property=og:title": "Content Manipulation"\n+    "keywords": "Plone, plone.restapi, REST, API, Content, Manipulation"\n ---\n \n # Content Manipulation\ndiff --git a/docs/source/contextnavigation.md b/docs/source/contextnavigation.md\nindex 88406c2d8..da8f37fb4 100644\n--- a/docs/source/contextnavigation.md\n+++ b/docs/source/contextnavigation.md\n@@ -1,11 +1,12 @@\n ---\n-html_meta:\n-  "description": "The @contextnavigation endpoint uses the same semantics as the classic Plone navigation portlet. Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n+myst:\n+  html_meta:\n+    "description": "The @contextnavigation endpoint uses the same semantics as the classic Plone navigation portlet. Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n parameters to the service or expand the component."\n-  "property=og:description": "The @contextnavigation endpoint uses the same semantics as the classic Plone navigation portlet. Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n+    "property=og:description": "The @contextnavigation endpoint uses the same semantics as the classic Plone navigation portlet. Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n parameters to the service or expand the component."\n-  "property=og:title": "Context Navigation"\n-  "keywords": "Plone, plone.restapi, REST, API, Context, Navigation"\n+    "property=og:title": "Context Navigation"\n+    "keywords": "Plone, plone.restapi, REST, API, Context, Navigation"\n ---\n \n (contextnavigation)=\ndiff --git a/docs/source/contributing.md b/docs/source/contributing.md\nindex 6ff32575b..6eb08cbce 100644\n--- a/docs/source/contributing.md\n+++ b/docs/source/contributing.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Contributing to plone.restapi"\n-  "property=og:description": "Contributing to plone.restapi"\n-  "property=og:title": "Contributing to plone.restapi"\n-  "keywords": "Plone, plone.restapi, REST, API, Contributing, documentation"\n+myst:\n+  html_meta:\n+    "description": "Contributing to plone.restapi"\n+    "property=og:description": "Contributing to plone.restapi"\n+    "property=og:title": "Contributing to plone.restapi"\n+    "keywords": "Plone, plone.restapi, REST, API, Contributing, documentation"\n ---\n \n # Contributing to plone.restapi\ndiff --git a/docs/source/controlpanels.md b/docs/source/controlpanels.md\nindex 09ef114ad..1c54f7be1 100644\n--- a/docs/source/controlpanels.md\n+++ b/docs/source/controlpanels.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Control panels in Plone allow you to configure the global site setup of a Plone site. The @controlpanels endpoint in plone.restapi allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel."\n-  "property=og:description": "Control panels in Plone allow you to configure the global site setup of a Plone site. The @controlpanels endpoint in plone.restapi allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel."\n-  "property=og:title": "Control Panels"\n-  "keywords": "Plone, plone.restapi, REST, API, Control, Panels"\n+myst:\n+  html_meta:\n+    "description": "Control panels in Plone allow you to configure the global site setup of a Plone site. The @controlpanels endpoint in plone.restapi allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel."\n+    "property=og:description": "Control panels in Plone allow you to configure the global site setup of a Plone site. The @controlpanels endpoint in plone.restapi allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel."\n+    "property=og:title": "Control Panels"\n+    "keywords": "Plone, plone.restapi, REST, API, Control, Panels"\n ---\n \n # Control Panels\ndiff --git a/docs/source/conventions.md b/docs/source/conventions.md\nindex 0c670ab29..8c10eb56f 100644\n--- a/docs/source/conventions.md\n+++ b/docs/source/conventions.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Naming convention for REST API resources and endpoints."\n-  "property=og:description": "Naming convention for REST API resources and endpoints."\n-  "property=og:title": "Conventions"\n-  "keywords": "Plone, plone.restapi, REST, API, Conventions"\n+myst:\n+  html_meta:\n+    "description": "Naming convention for REST API resources and endpoints."\n+    "property=og:description": "Naming convention for REST API resources and endpoints."\n+    "property=og:title": "Conventions"\n+    "keywords": "Plone, plone.restapi, REST, API, Conventions"\n ---\n \n # Conventions\ndiff --git a/docs/source/copymove.md b/docs/source/copymove.md\nindex 63a1ae3b6..ec846904b 100644\n--- a/docs/source/copymove.md\n+++ b/docs/source/copymove.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "To copy a content object, use the /@copy endpoint at the destination\'s URL with the source object specified in the request body. Similarly use the /@move endpoint to move an object."\n-  "property=og:description": "To copy a content object, use the /@copy endpoint at the destination\'s URL with the source object specified in the request body. Similarly use the /@move endpoint to move an object."\n-  "property=og:title": "Copy and Move"\n-  "keywords": "Plone, plone.restapi, REST, API, Copy, Move"\n+myst:\n+  html_meta:\n+    "description": "To copy a content object, use the /@copy endpoint at the destination\'s URL with the source object specified in the request body. Similarly use the /@move endpoint to move an object."\n+    "property=og:description": "To copy a content object, use the /@copy endpoint at the destination\'s URL with the source object specified in the request body. Similarly use the /@move endpoint to move an object."\n+    "property=og:title": "Copy and Move"\n+    "keywords": "Plone, plone.restapi, REST, API, Copy, Move"\n ---\n \n # Copy and Move\ndiff --git a/docs/source/customization.md b/docs/source/customization.md\nindex e3028ca8d..0125b9367 100644\n--- a/docs/source/customization.md\n+++ b/docs/source/customization.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Customizing the API with the IFieldSerializer adapter."\n-  "property=og:description": "Customizing the API with the IFieldSerializer adapter."\n-  "property=og:title": "Customizing the API"\n-  "keywords": "Plone, plone.restapi, REST, API, Customizing, IFieldSerializer, adapter"\n+myst:\n+  html_meta:\n+    "description": "Customizing the API with the IFieldSerializer adapter."\n+    "property=og:description": "Customizing the API with the IFieldSerializer adapter."\n+    "property=og:title": "Customizing the API"\n+    "keywords": "Plone, plone.restapi, REST, API, Customizing, IFieldSerializer, adapter"\n ---\n \n # Customizing the API\ndiff --git a/docs/source/database.md b/docs/source/database.md\nindex 47d72dbe4..f32a02357 100644\n--- a/docs/source/database.md\n+++ b/docs/source/database.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The @database endpoint exposes system information about the Plone database (ZODB)."\n-  "property=og:description": "The @database endpoint exposes system information about the Plone database (ZODB)."\n-  "property=og:title": "Database"\n-  "keywords": "Plone, plone.restapi, REST, API, Database"\n+myst:\n+  html_meta:\n+    "description": "The @database endpoint exposes system information about the Plone database (ZODB)."\n+    "property=og:description": "The @database endpoint exposes system information about the Plone database (ZODB)."\n+    "property=og:title": "Database"\n+    "keywords": "Plone, plone.restapi, REST, API, Database"\n ---\n \n (database)=\ndiff --git a/docs/source/email-notification.md b/docs/source/email-notification.md\nindex 95f2e321b..efc58dbb1 100644\n--- a/docs/source/email-notification.md\n+++ b/docs/source/email-notification.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Plone allows the user to contact the site owner via a form on the website which sends an email notification."\n-  "property=og:description": "Plone allows the user to contact the site owner via a form on the website which sends an email notification."\n-  "property=og:title": "Email Notification"\n-  "keywords": "Plone, plone.restapi, REST, API, Email, Notification"\n+myst:\n+  html_meta:\n+    "description": "Plone allows the user to contact the site owner via a form on the website which sends an email notification."\n+    "property=og:description": "Plone allows the user to contact the site owner via a form on the website which sends an email notification."\n+    "property=og:title": "Email Notification"\n+    "keywords": "Plone, plone.restapi, REST, API, Email, Notification"\n ---\n \n # Email Notification\ndiff --git a/docs/source/email-send.md b/docs/source/email-send.md\nindex 810b181dd..eb551c584 100644\n--- a/docs/source/email-send.md\n+++ b/docs/source/email-send.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "To send an email to an arbitrary email address use the /@email-send endpoint."\n-  "property=og:description": "To send an email to an arbitrary email address use the /@email-send endpoint."\n-  "property=og:title": "Email Send"\n-  "keywords": "Plone, plone.restapi, REST, API, Email, Send"\n+myst:\n+  html_meta:\n+    "description": "To send an email to an arbitrary email address use the /@email-send endpoint."\n+    "property=og:description": "To send an email to an arbitrary email address use the /@email-send endpoint."\n+    "property=og:title": "Email Send"\n+    "keywords": "Plone, plone.restapi, REST, API, Email, Send"\n ---\n \n # Email Send\ndiff --git a/docs/source/expansion.md b/docs/source/expansion.md\nindex 36f69b003..6a0a286b1 100644\n--- a/docs/source/expansion.md\n+++ b/docs/source/expansion.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Expansion is a mechanism in plone.restapi to embed additional components\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response. This helps the API consumers avoid unnecessary requests."\n-  "property=og:description": "Expansion is a mechanism in plone.restapi to embed additional components\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response. This helps the API consumers avoid unnecessary requests."\n-  "property=og:title": "Expansion"\n-  "keywords": "Plone, plone.restapi, REST, API, Expansion"\n+myst:\n+  html_meta:\n+    "description": "Expansion is a mechanism in plone.restapi to embed additional components\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response. This helps the API consumers avoid unnecessary requests."\n+    "property=og:description": "Expansion is a mechanism in plone.restapi to embed additional components\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response. This helps the API consumers avoid unnecessary requests."\n+    "property=og:title": "Expansion"\n+    "keywords": "Plone, plone.restapi, REST, API, Expansion"\n ---\n \n (expansion-label)=\ndiff --git a/docs/source/exploring.md b/docs/source/exploring.md\nindex 000d97aa7..fdabba7ec 100644\n--- a/docs/source/exploring.md\n+++ b/docs/source/exploring.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "To discover the API interactively, using Postman is recommended."\n-  "property=og:description": "To discover the API interactively, using Postman is recommended."\n-  "property=og:title": "Explore the API using Postman"\n-  "keywords": "Plone, plone.restapi, REST, API, Explore, Postman"\n+myst:\n+  html_meta:\n+    "description": "To discover the API interactively, using Postman is recommended."\n+    "property=og:description": "To discover the API interactively, using Postman is recommended."\n+    "property=og:title": "Explore the API using Postman"\n+    "keywords": "Plone, plone.restapi, REST, API, Explore, Postman"\n ---\n \n (exploring-api-postman-onboarding)=\ndiff --git a/docs/source/glossary.md b/docs/source/glossary.md\nindex 53354430c..f9d482340 100644\n--- a/docs/source/glossary.md\n+++ b/docs/source/glossary.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi Glossary"\n-  "property=og:description": "plone.restapi Glossary"\n-  "property=og:title": "Glossary"\n-  "keywords": "Plone, plone.restapi, REST, API, Glossary"\n+myst:\n+  html_meta:\n+    "description": "plone.restapi Glossary"\n+    "property=og:description": "plone.restapi Glossary"\n+    "property=og:title": "Glossary"\n+    "keywords": "Plone, plone.restapi, REST, API, Glossary"\n ---\n \n # Glossary\ndiff --git a/docs/source/groups.md b/docs/source/groups.md\nindex ed229cbe2..bf3cc7a53 100644\n--- a/docs/source/groups.md\n+++ b/docs/source/groups.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the /@groups endpoint on the portal root."\n-  "property=og:description": "Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the /@groups endpoint on the portal root."\n-  "property=og:title": "Groups"\n-  "keywords": "Plone, plone.restapi, REST, API, Groups"\n+myst:\n+  html_meta:\n+    "description": "Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the /@groups endpoint on the portal root."\n+    "property=og:description": "Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the /@groups endpoint on the portal root."\n+    "property=og:title": "Groups"\n+    "keywords": "Plone, plone.restapi, REST, API, Groups"\n ---\n \n # Groups\ndiff --git a/docs/source/history.md b/docs/source/history.md\nindex 4ed5aa795..98d9ec8c6 100644\n--- a/docs/source/history.md\n+++ b/docs/source/history.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The @history endpoint exposes history and versioning information on previous versions of the content."\n-  "property=og:description": "The @history endpoint exposes history and versioning information on previous versions of the content."\n-  "property=og:title": "History"\n-  "keywords": "Plone, plone.restapi, REST, API, History"\n+myst:\n+  html_meta:\n+    "description": "The @history endpoint exposes history and versioning information on previous versions of the content."\n+    "property=og:description": "The @history endpoint exposes history and versioning information on previous versions of the content."\n+    "property=og:title": "History"\n+    "keywords": "Plone, plone.restapi, REST, API, History"\n ---\n \n # History\ndiff --git a/docs/source/http-status-codes.md b/docs/source/http-status-codes.md\nindex 3655d54d4..66eb3a6c4 100644\n--- a/docs/source/http-status-codes.md\n+++ b/docs/source/http-status-codes.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A list of HTTP status codes that are used in plone.restapi."\n-  "property=og:description": "A list of HTTP status codes that are used in plone.restapi."\n-  "property=og:title": "HTTP Status Codes"\n-  "keywords": "Plone, plone.restapi, REST, API, HTTP, Status, Codes"\n+myst:\n+  html_meta:\n+    "description": "A list of HTTP status codes that are used in plone.restapi."\n+    "property=og:description": "A list of HTTP status codes that are used in plone.restapi."\n+    "property=og:title": "HTTP Status Codes"\n+    "keywords": "Plone, plone.restapi, REST, API, HTTP, Status, Codes"\n ---\n \n # HTTP Status Codes\ndiff --git a/docs/source/i18n.md b/docs/source/i18n.md\nindex e4b498430..64e3b2d5b 100644\n--- a/docs/source/i18n.md\n+++ b/docs/source/i18n.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Plone provides user-interface translations, or internationalization, using the plone.app.locales package."\n-  "property=og:description": "Plone provides user-interface translations, or internationalization, using the plone.app.locales package."\n-  "property=og:title": "i18n: internationalization of screen messages"\n-  "keywords": "Plone, plone.restapi, REST, API, i18n, internationalization, screen, messages"\n+myst:\n+  html_meta:\n+    "description": "Plone provides user-interface translations, or internationalization, using the plone.app.locales package."\n+    "property=og:description": "Plone provides user-interface translations, or internationalization, using the plone.app.locales package."\n+    "property=og:title": "i18n: internationalization of screen messages"\n+    "keywords": "Plone, plone.restapi, REST, API, i18n, internationalization, screen, messages"\n ---\n \n # i18n: internationalization of screen messages\ndiff --git a/docs/source/index.md b/docs/source/index.md\nindex 2bc47321d..d482cdc6b 100644\n--- a/docs/source/index.md\n+++ b/docs/source/index.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A RESTful API for Plone."\n-  "property=og:description": "A RESTful API for Plone."\n-  "property=og:title": "REST API"\n-  "keywords": "Plone, plone.restapi, REST, API"\n+myst:\n+  html_meta:\n+    "description": "A RESTful API for Plone."\n+    "property=og:description": "A RESTful API for Plone."\n+    "property=og:title": "REST API"\n+    "keywords": "Plone, plone.restapi, REST, API"\n ---\n \n % plone.restapi documentation master file, created by\ndiff --git a/docs/source/introduction.md b/docs/source/introduction.md\nindex 42fe268a1..c08e441b5 100644\n--- a/docs/source/introduction.md\n+++ b/docs/source/introduction.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow."\n-  "property=og:description": "A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow."\n-  "property=og:title": "Introduction"\n-  "keywords": "Plone, plone.restapi, REST, API, Introduction"\n+myst:\n+  html_meta:\n+    "description": "A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow."\n+    "property=og:description": "A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow."\n+    "property=og:title": "Introduction"\n+    "keywords": "Plone, plone.restapi, REST, API, Introduction"\n ---\n \n # Introduction\ndiff --git a/docs/source/locking.md b/docs/source/locking.md\nindex 120bd64c0..9a5beb330 100644\n--- a/docs/source/locking.md\n+++ b/docs/source/locking.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Locking is a mechanism to prevent users from accidentally overriding each other\'s changes."\n-  "property=og:description": "Locking is a mechanism to prevent users from accidentally overriding each other\'s changes."\n-  "property=og:title": "Locking"\n-  "keywords": "Plone, plone.restapi, REST, API, Locking"\n+myst:\n+  html_meta:\n+    "description": "Locking is a mechanism to prevent users from accidentally overriding each other\'s changes."\n+    "property=og:description": "Locking is a mechanism to prevent users from accidentally overriding each other\'s changes."\n+    "property=og:title": "Locking"\n+    "keywords": "Plone, plone.restapi, REST, API, Locking"\n ---\n \n # Locking\ndiff --git a/docs/source/navigation.md b/docs/source/navigation.md\nindex f82b5e2e4..7e840344f 100644\n--- a/docs/source/navigation.md\n+++ b/docs/source/navigation.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Get the top-level navigation items or navigation item tree with the navigation endpoint."\n-  "property=og:description": "Get the top-level navigation items or navigation item tree with the navigation endpoint."\n-  "property=og:title": "Navigation"\n-  "keywords": "Plone, plone.restapi, REST, API, Navigation"\n+myst:\n+  html_meta:\n+    "description": "Get the top-level navigation items or navigation item tree with the navigation endpoint."\n+    "property=og:description": "Get the top-level navigation items or navigation item tree with the navigation endpoint."\n+    "property=og:title": "Navigation"\n+    "keywords": "Plone, plone.restapi, REST, API, Navigation"\n ---\n \n (navigation)=\ndiff --git a/docs/source/plone-content.md b/docs/source/plone-content.md\nindex f25b74627..717dc9ad6 100644\n--- a/docs/source/plone-content.md\n+++ b/docs/source/plone-content.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A list of all standard Plone content representations with sample requests and responses."\n-  "property=og:description": "A list of all standard Plone content representations with sample requests and responses."\n-  "property=og:title": "Plone Content"\n-  "keywords": "Plone, plone.restapi, REST, API, Plone, Content"\n+myst:\n+  html_meta:\n+    "description": "A list of all standard Plone content representations with sample requests and responses."\n+    "property=og:description": "A list of all standard Plone content representations with sample requests and responses."\n+    "property=og:title": "Plone Content"\n+    "keywords": "Plone, plone.restapi, REST, API, Plone, Content"\n ---\n \n # Plone Content\ndiff --git a/docs/source/portrait.md b/docs/source/portrait.md\nnew file mode 100644\nindex 000000000..759c2cd3d\n--- /dev/null\n+++ b/docs/source/portrait.md\n@@ -0,0 +1,53 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Returns user\'s portrait in a Plone site using the @portrait endpoint"\n+    "property=og:description": "Returns user\'s portrait in a Plone site using the @portrait endpoint"\n+    "property=og:title": "Portraits"\n+    "keywords": "Plone, plone.restapi, REST, API, Users, portrait, profile"\n+---\n+\n+# Portraits\n+\n+Plone users have the option to upload a portrait to their profile. This profile is used in several places in Plone\'s user interface, like in the comments view.\n+\n+## Get self portrait\n+\n+You can request your own user portrait by issuing a `GET` request to the root URL appending `/@portrait`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/portrait_self_get.req\n+```\n+\n+The server will respond with a `Status 200` and the image requested (not JSON). The content type is set accordingly. One can use it directly in HTML `src` properties:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/portrait_self_get.resp\n+:language: http\n+```\n+\n+The server will respond with a `Status 404` in case that the portrait is not set.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/portrait_self_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/portrait_self_404_get.resp\n+:language: http\n+```\n+\n+## Get specific user portrait\n+\n+You can request the portrait for a specific user `username` by issuing a `GET` request to the root URL appending `/@portrait/username`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/portrait_username_get.req\n+```\n+\n+The server will respond with a `Status 200` and the image requested (not JSON). The content type is set accordingly. One can use it directly in HTML `src` properties:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/portrait_username_get.resp\n+:language: http\n+```\ndiff --git a/docs/source/principals.md b/docs/source/principals.md\nindex 85d2d4557..046780c01 100644\n--- a/docs/source/principals.md\n+++ b/docs/source/principals.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The principal endpoint will search for all the available principals in the local PAS plugins when given a query string. We define a principal as any user or group in the system."\n-  "property=og:description": "The principal endpoint will search for all the available principals in the local PAS plugins when given a query string. We define a principal as any user or group in the system."\n-  "property=og:title": "Principals"\n-  "keywords": "Plone, plone.restapi, REST, API, Principals"\n+myst:\n+  html_meta:\n+    "description": "The principal endpoint will search for all the available principals in the local PAS plugins when given a query string. We define a principal as any user or group in the system."\n+    "property=og:description": "The principal endpoint will search for all the available principals in the local PAS plugins when given a query string. We define a principal as any user or group in the system."\n+    "property=og:title": "Principals"\n+    "keywords": "Plone, plone.restapi, REST, API, Principals"\n ---\n \n # Principals\ndiff --git a/docs/source/querystring.md b/docs/source/querystring.md\nindex 02bba55c0..5eb208289 100644\n--- a/docs/source/querystring.md\n+++ b/docs/source/querystring.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The @querystring endpoint returns the querystring configuration of plone.app.querystring."\n-  "property=og:description": "The @querystring endpoint returns the querystring configuration of plone.app.querystring."\n-  "property=og:title": "Querystring"\n-  "keywords": "Plone, plone.restapi, REST, API, Querystring"\n+myst:\n+  html_meta:\n+    "description": "The @querystring endpoint returns the querystring configuration of plone.app.querystring."\n+    "property=og:description": "The @querystring endpoint returns the querystring configuration of plone.app.querystring."\n+    "property=og:title": "Querystring"\n+    "keywords": "Plone, plone.restapi, REST, API, Querystring"\n ---\n \n # Querystring\ndiff --git a/docs/source/querystringsearch.md b/docs/source/querystringsearch.md\nindex 74e26f7bf..20c9f3d1c 100644\n--- a/docs/source/querystringsearch.md\n+++ b/docs/source/querystringsearch.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The @querystring-search endpoint returns search results that can be filtered on search criteria."\n-  "property=og:description": "The @querystring-search endpoint returns search results that can be filtered on search criteria."\n-  "property=og:title": "Querystring Search"\n-  "keywords": "Plone, plone.restapi, REST, API, Querystring, Search"\n+myst:\n+  html_meta:\n+    "description": "The @querystring-search endpoint returns search results that can be filtered on search criteria."\n+    "property=og:description": "The @querystring-search endpoint returns search results that can be filtered on search criteria."\n+    "property=og:title": "Querystring Search"\n+    "keywords": "Plone, plone.restapi, REST, API, Querystring, Search"\n ---\n \n # Querystring Search\ndiff --git a/docs/source/registry.md b/docs/source/registry.md\nindex b02e5a8e0..b012ac37f 100644\n--- a/docs/source/registry.md\n+++ b/docs/source/registry.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Registry records can be addressed through the @registry endpoint on the Plone site."\n-  "property=og:description": "Registry records can be addressed through the @registry endpoint on the Plone site."\n-  "property=og:title": "Registry"\n-  "keywords": "Plone, plone.restapi, REST, API, Registry"\n+myst:\n+  html_meta:\n+    "description": "Registry records can be addressed through the @registry endpoint on the Plone site."\n+    "property=og:description": "Registry records can be addressed through the @registry endpoint on the Plone site."\n+    "property=og:title": "Registry"\n+    "keywords": "Plone, plone.restapi, REST, API, Registry"\n ---\n \n # Registry\ndiff --git a/docs/source/roles.md b/docs/source/roles.md\nindex e079f624f..5636a2ac2 100644\n--- a/docs/source/roles.md\n+++ b/docs/source/roles.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Available roles in a Plone site can be queried by interacting with the /@roles endpoint on the portal root. This action requires an authenticated user."\n-  "property=og:description": "Available roles in a Plone site can be queried by interacting with the /@roles endpoint on the portal root. This action requires an authenticated user."\n-  "property=og:title": "Roles"\n-  "keywords": "Plone, plone.restapi, REST, API, Roles"\n+myst:\n+  html_meta:\n+    "description": "Available roles in a Plone site can be queried by interacting with the /@roles endpoint on the portal root. This action requires an authenticated user."\n+    "property=og:description": "Available roles in a Plone site can be queried by interacting with the /@roles endpoint on the portal root. This action requires an authenticated user."\n+    "property=og:title": "Roles"\n+    "keywords": "Plone, plone.restapi, REST, API, Roles"\n ---\n \n # Roles\ndiff --git a/docs/source/searching.md b/docs/source/searching.md\nindex c0bee2a13..c4f6c0667 100644\n--- a/docs/source/searching.md\n+++ b/docs/source/searching.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Content in a Plone site can be searched for by invoking the /@search endpoint in any context."\n-  "property=og:description": "Content in a Plone site can be searched for by invoking the /@search endpoint in any context."\n-  "property=og:title": "Search"\n-  "keywords": "Plone, plone.restapi, REST, API, Search"\n+myst:\n+  html_meta:\n+    "description": "Content in a Plone site can be searched for by invoking the /@search endpoint in any context."\n+    "property=og:description": "Content in a Plone site can be searched for by invoking the /@search endpoint in any context."\n+    "property=og:title": "Search"\n+    "keywords": "Plone, plone.restapi, REST, API, Search"\n ---\n \n # Search\ndiff --git a/docs/source/serialization.md b/docs/source/serialization.md\nindex 59cb135d5..aebe2b0a3 100644\n--- a/docs/source/serialization.md\n+++ b/docs/source/serialization.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations."\n-  "property=og:description": "Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations."\n-  "property=og:title": "Serialization"\n-  "keywords": "Plone, plone.restapi, REST, API, Serialization"\n+myst:\n+  html_meta:\n+    "description": "Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations."\n+    "property=og:description": "Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations."\n+    "property=og:title": "Serialization"\n+    "keywords": "Plone, plone.restapi, REST, API, Serialization"\n ---\n \n # Serialization\ndiff --git a/docs/source/sharing.md b/docs/source/sharing.md\nindex 567dc994f..ef288ebba 100644\n--- a/docs/source/sharing.md\n+++ b/docs/source/sharing.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions. Sharing give users the permission to access or edit a specific part of your website or a specific content object."\n-  "property=og:description": "Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions. Sharing give users the permission to access or edit a specific part of your website or a specific content object."\n-  "property=og:title": "Sharing"\n-  "keywords": "Plone, plone.restapi, REST, API, Sharing"\n+myst:\n+  html_meta:\n+    "description": "Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions. Sharing give users the permission to access or edit a specific part of your website or a specific content object."\n+    "property=og:description": "Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions. Sharing give users the permission to access or edit a specific part of your website or a specific content object."\n+    "property=og:title": "Sharing"\n+    "keywords": "Plone, plone.restapi, REST, API, Sharing"\n ---\n \n (sharing)=\ndiff --git a/docs/source/system.md b/docs/source/system.md\nindex 157a4aac9..ae1fce415 100644\n--- a/docs/source/system.md\n+++ b/docs/source/system.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "The @system endpoint exposes system information about the Plone backend."\n-  "property=og:description": "The @system endpoint exposes system information about the Plone backend."\n-  "property=og:title": "System"\n-  "keywords": "Plone, plone.restapi, REST, API, System"\n+myst:\n+  html_meta:\n+    "description": "The @system endpoint exposes system information about the Plone backend."\n+    "property=og:description": "The @system endpoint exposes system information about the Plone backend."\n+    "property=og:title": "System"\n+    "keywords": "Plone, plone.restapi, REST, API, System"\n ---\n \n (system)=\ndiff --git a/docs/source/tiles.md b/docs/source/tiles.md\nindex c8c4fc79d..3e7d42280 100644\n--- a/docs/source/tiles.md\n+++ b/docs/source/tiles.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n-  "property=og:description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n-  "property=og:title": "Tiles"\n-  "keywords": "Plone, plone.restapi, REST, API, Tiles"\n+myst:\n+  html_meta:\n+    "description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n+    "property=og:description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n+    "property=og:title": "Tiles"\n+    "keywords": "Plone, plone.restapi, REST, API, Tiles"\n ---\n \n # Tiles\ndiff --git a/docs/source/translations.md b/docs/source/translations.md\nindex e3cd10c8b..ee9e18502 100644\n--- a/docs/source/translations.md\n+++ b/docs/source/translations.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi provides a @translations endpoint to handle the translation information of the content objects."\n-  "property=og:description": "plone.restapi provides a @translations endpoint to handle the translation information of the content objects."\n-  "property=og:title": "Translations"\n-  "keywords": "Plone, plone.restapi, REST, API, Translations, plone.app.multilingual, multilingual"\n+myst:\n+  html_meta:\n+    "description": "plone.restapi provides a @translations endpoint to handle the translation information of the content objects."\n+    "property=og:description": "plone.restapi provides a @translations endpoint to handle the translation information of the content objects."\n+    "property=og:title": "Translations"\n+    "keywords": "Plone, plone.restapi, REST, API, Translations, plone.app.multilingual, multilingual"\n ---\n \n (translations)=\ndiff --git a/docs/source/tusupload.md b/docs/source/tusupload.md\nindex c5887f978..106ece050 100644\n--- a/docs/source/tusupload.md\n+++ b/docs/source/tusupload.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi supports the TUS Open Protocol for resumable file uploads. There is a @tus-upload endpoint to upload a file, and a @tus-replace endpoint to replace an existing file."\n-  "property=og:description": "plone.restapi supports the TUS Open Protocol for resumable file uploads. There is a @tus-upload endpoint to upload a file, and a @tus-replace endpoint to replace an existing file."\n-  "property=og:title": "TUS resumable upload"\n-  "keywords": "Plone, plone.restapi, REST, API, TUS, resumable, upload"\n+myst:\n+  html_meta:\n+    "description": "plone.restapi supports the TUS Open Protocol for resumable file uploads. There is a @tus-upload endpoint to upload a file, and a @tus-replace endpoint to replace an existing file."\n+    "property=og:description": "plone.restapi supports the TUS Open Protocol for resumable file uploads. There is a @tus-upload endpoint to upload a file, and a @tus-replace endpoint to replace an existing file."\n+    "property=og:title": "TUS resumable upload"\n+    "keywords": "Plone, plone.restapi, REST, API, TUS, resumable, upload"\n ---\n \n # TUS resumable upload\ndiff --git a/docs/source/types-schema.md b/docs/source/types-schema.md\nindex 7b37eb706..18f293f5f 100644\n--- a/docs/source/types-schema.md\n+++ b/docs/source/types-schema.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "A detailed list of all available Zope Schema field types and their corresponding representation as JSON objects."\n-  "property=og:description": "A detailed list of all available Zope Schema field types and their corresponding representation as JSON objects."\n-  "property=og:title": "Types Schema"\n-  "keywords": "Plone, plone.restapi, REST, API, Types, Schema"\n+myst:\n+  html_meta:\n+    "description": "A detailed list of all available Zope Schema field types and their corresponding representation as JSON objects."\n+    "property=og:description": "A detailed list of all available Zope Schema field types and their corresponding representation as JSON objects."\n+    "property=og:title": "Types Schema"\n+    "keywords": "Plone, plone.restapi, REST, API, Types, Schema"\n ---\n \n (types-schema)=\ndiff --git a/docs/source/types.md b/docs/source/types.md\nindex c20415142..0b2fff4a4 100644\n--- a/docs/source/types.md\n+++ b/docs/source/types.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Available content types in a Plone site can be listed and queried by accessing the /@types endpoint on any context. Access requires an authenticated user."\n-  "property=og:description": "Available content types in a Plone site can be listed and queried by accessing the /@types endpoint on any context. Access requires an authenticated user."\n-  "property=og:title": "Types"\n-  "keywords": "Plone, plone.restapi, REST, API, Types"\n+myst:\n+  html_meta:\n+    "description": "Available content types in a Plone site can be listed and queried by accessing the /@types endpoint on any context. Access requires an authenticated user."\n+    "property=og:description": "Available content types in a Plone site can be listed and queried by accessing the /@types endpoint on any context. Access requires an authenticated user."\n+    "property=og:title": "Types"\n+    "keywords": "Plone, plone.restapi, REST, API, Types"\n ---\n \n (types)=\ndiff --git a/docs/source/upgrade-guide.md b/docs/source/upgrade-guide.md\nindex 10708834c..c83935514 100644\n--- a/docs/source/upgrade-guide.md\n+++ b/docs/source/upgrade-guide.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "plone.restapi Upgrade Guide"\n-  "property=og:description": "plone.restapi Upgrade Guide"\n-  "property=og:title": "Upgrade Guide"\n-  "keywords": "Plone, plone.restapi, REST, API, Upgrade, Guide"\n+myst:\n+  html_meta:\n+    "description": "plone.restapi Upgrade Guide"\n+    "property=og:description": "plone.restapi Upgrade Guide"\n+    "property=og:title": "Upgrade Guide"\n+    "keywords": "Plone, plone.restapi, REST, API, Upgrade, Guide"\n ---\n \n # Upgrade Guide\ndiff --git a/docs/source/users.md b/docs/source/users.md\nindex d68cf3189..51ad73810 100644\n--- a/docs/source/users.md\n+++ b/docs/source/users.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Available users in a Plone site can be created, queried, updated, and deleted by interacting with the /@users endpoint on portal root."\n-  "property=og:description": "Available users in a Plone site can be created, queried, updated, and deleted by interacting with the /@users endpoint on portal root."\n-  "property=og:title": "Users"\n-  "keywords": "Plone, plone.restapi, REST, API, Users"\n+myst:\n+  html_meta:\n+    "description": "Available users in a Plone site can be created, queried, updated, and deleted by interacting with the /@users endpoint on portal root."\n+    "property=og:description": "Available users in a Plone site can be created, queried, updated, and deleted by interacting with the /@users endpoint on portal root."\n+    "property=og:title": "Users"\n+    "keywords": "Plone, plone.restapi, REST, API, Users"\n ---\n \n # Users\ndiff --git a/docs/source/vocabularies.md b/docs/source/vocabularies.md\nindex 131987804..72100f3cc 100644\n--- a/docs/source/vocabularies.md\n+++ b/docs/source/vocabularies.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Vocabularies are a set of allowed choices that back a particular field, whereas sources are similar but usually too large to be enumerated and should be queried such as through an autocomplete."\n-  "property=og:description": "Vocabularies are a set of allowed choices that back a particular field, whereas sources are similar but usually too large to be enumerated and should be queried such as through an autocomplete."\n-  "property=og:title": "Vocabularies and Sources"\n-  "keywords": "Plone, plone.restapi, REST, API, Vocabularies, Sources"\n+myst:\n+  html_meta:\n+    "description": "Vocabularies are a set of allowed choices that back a particular field, whereas sources are similar but usually too large to be enumerated and should be queried such as through an autocomplete."\n+    "property=og:description": "Vocabularies are a set of allowed choices that back a particular field, whereas sources are similar but usually too large to be enumerated and should be queried such as through an autocomplete."\n+    "property=og:title": "Vocabularies and Sources"\n+    "keywords": "Plone, plone.restapi, REST, API, Vocabularies, Sources"\n ---\n \n (vocabularies)=\ndiff --git a/docs/source/workflow.md b/docs/source/workflow.md\nindex 004e1b4d0..77556ce4c 100644\n--- a/docs/source/workflow.md\n+++ b/docs/source/workflow.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Get the current state and history of an object, or workflow, by issuing a GET request for any context."\n-  "property=og:description": "Get the current state and history of an object, or workflow, by issuing a GET request for any context."\n-  "property=og:title": "Workflow"\n-  "keywords": "Plone, plone.restapi, REST, API, Workflow"\n+myst:\n+  html_meta:\n+    "description": "Get the current state and history of an object, or workflow, by issuing a GET request for any context."\n+    "property=og:description": "Get the current state and history of an object, or workflow, by issuing a GET request for any context."\n+    "property=og:title": "Workflow"\n+    "keywords": "Plone, plone.restapi, REST, API, Workflow"\n ---\n \n # Workflow\ndiff --git a/docs/source/workingcopy.md b/docs/source/workingcopy.md\nindex b5023eaa2..ab9a7a2ee 100644\n--- a/docs/source/workingcopy.md\n+++ b/docs/source/workingcopy.md\n@@ -1,9 +1,10 @@\n ---\n-html_meta:\n-  "description": "Plone has a working copy feature that allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object."\n-  "property=og:description": "Plone has a working copy feature that allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object."\n-  "property=og:title": "Working Copy"\n-  "keywords": "Plone, plone.restapi, REST, API, Working, Copy"\n+myst:\n+  html_meta:\n+    "description": "Plone has a working copy feature that allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object."\n+    "property=og:description": "Plone has a working copy feature that allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object."\n+    "property=og:title": "Working Copy"\n+    "keywords": "Plone, plone.restapi, REST, API, Working, Copy"\n ---\n \n # Working Copy\ndiff --git a/news/1480.feature b/news/1480.feature\nnew file mode 100644\nindex 000000000..67a756635\n--- /dev/null\n+++ b/news/1480.feature\n@@ -0,0 +1,2 @@\n+Add @portrait endpoint\n+[sneridagh]\ndiff --git a/setup.py b/setup.py\nindex 3e2d4e0b1..94587f37d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n from setuptools import setup, find_packages\n import sys\n \n-version = "8.25.1.dev0"\n+version = "8.25.2.dev0"\n \n assert sys.version_info >= (\n     3,\ndiff --git a/src/plone/restapi/controlpanels/registry.py b/src/plone/restapi/controlpanels/registry.py\nindex d3948a818..56d9b5e61 100644\n--- a/src/plone/restapi/controlpanels/registry.py\n+++ b/src/plone/restapi/controlpanels/registry.py\n@@ -110,6 +110,4 @@ class SecurityControlpanel(RegistryConfigletPanel):\n class UserGroupControlpanel(RegistryConfigletPanel):\n     schema = IUserGroupsSettingsSchema\n     configlet_id = "UsersGroupsSettings"\n-    configlet_category_id = "plone-users-and-groups"\n-    group = "Users and Groups"\n-    title = "User and Group Settings"\n+    configlet_category_id = "plone-users"\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex bbd6e9518..bb37113f9 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -42,9 +42,7 @@ def __call__(self):\n                 memberdata = getToolByName(portal, "portal_memberdata")\n                 safe_id = membership._getSafeMemberId(user.id)\n                 if safe_id in memberdata.portraits:\n-                    value = "{}/portal_memberdata/portraits/{}".format(\n-                        portal.absolute_url(), safe_id\n-                    )\n+                    value = f"{portal.absolute_url()}/@portrait/{safe_id}"\n                 else:\n                     value = None\n             elif name == "pdelete":\ndiff --git a/src/plone/restapi/services/users/configure.zcml b/src/plone/restapi/services/users/configure.zcml\nindex e215828a5..e7d3505de 100644\n--- a/src/plone/restapi/services/users/configure.zcml\n+++ b/src/plone/restapi/services/users/configure.zcml\n@@ -36,4 +36,12 @@\n       name="@users"\n       />\n \n+  <plone:service\n+      method="GET"\n+      factory=".get.PortraitGet"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      permission="zope2.View"\n+      name="@portrait"\n+      />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 4bdda66c5..462c54536 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -1,10 +1,14 @@\n from AccessControl import getSecurityManager\n+from Acquisition import aq_inner\n from itertools import chain\n from plone.app.workflow.browser.sharing import merge_search_results\n-from plone.restapi.interfaces import ISerializeToJson, ISerializeToJsonSummary\n+from plone.namedfile.utils import stream_data\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.services import Service\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n+from Products.PlonePAS.tools.membership import default_portrait\n from urllib.parse import parse_qs\n from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n@@ -17,6 +21,11 @@\n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n+def isDefaultPortrait(value, portal):\n+    default_portrait_value = getattr(portal, default_portrait, None)\n+    return aq_inner(value) == aq_inner(default_portrait_value)\n+\n+\n @implementer(IPublishTraverse)\n class UsersGet(Service):\n     def __init__(self, context, request):\n@@ -189,3 +198,44 @@ def reply(self):\n         else:\n             self.request.response.setStatus(401)\n             return\n+\n+\n+@implementer(IPublishTraverse)\n+class PortraitGet(Service):\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+        self.portal = getSite()\n+        self.portal_membership = getToolByName(self.portal, "portal_membership")\n+\n+    def publishTraverse(self, request, name):\n+        # Consume any path segments after /@users as parameters\n+        self.params.append(name)\n+        return self\n+\n+    @property\n+    def _get_user_id(self):\n+        if len(self.params) != 1:\n+            raise Exception("Must supply exactly one parameter (user id)")\n+        return self.params[0]\n+\n+    def render(self):\n+        if len(self.params) == 1:\n+            # Retrieve the user portrait\n+            portrait = self.portal_membership.getPersonalPortrait(self.params[0])\n+        elif len(self.params) == 0:\n+            current_user_id = self.portal_membership.getAuthenticatedMember().getId()\n+            portrait = self.portal_membership.getPersonalPortrait(current_user_id)\n+        else:\n+            raise Exception(\n+                "Must supply exactly zero (own portrait) or one parameter (user id)"\n+            )\n+\n+        if isDefaultPortrait(portrait, self.portal):\n+            self.request.response.setStatus(404)\n+            return None\n+\n+        self.request.response.setStatus(200)\n+        self.request.response.setHeader("Content-Type", portrait.content_type)\n+\n+        return stream_data(portrait)\ndiff --git a/src/plone/restapi/tests/http-examples/portrait_self_404_get.resp b/src/plone/restapi/tests/http-examples/portrait_self_404_get.resp\nnew file mode 100644\nindex 000000000..aed272fed\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/portrait_self_404_get.resp\n@@ -0,0 +1 @@\n+HTTP/1.1 404 Not Found\ndiff --git a/src/plone/restapi/tests/http-examples/portrait_self_get.req b/src/plone/restapi/tests/http-examples/portrait_self_get.req\nnew file mode 100644\nindex 000000000..6fd4ec7d4\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/portrait_self_get.req\n@@ -0,0 +1 @@\n+GET /plone/@portrait HTTP/1.1\ndiff --git a/src/plone/restapi/tests/http-examples/portrait_self_get.resp b/src/plone/restapi/tests/http-examples/portrait_self_get.resp\nnew file mode 100644\nindex 000000000..f08a359bd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/portrait_self_get.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 200 OK\n+Content-Type: image/png\ndiff --git a/src/plone/restapi/tests/http-examples/portrait_username_get.req b/src/plone/restapi/tests/http-examples/portrait_username_get.req\nnew file mode 100644\nindex 000000000..f9bed483e\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/portrait_username_get.req\n@@ -0,0 +1 @@\n+GET /plone/@portrait/username HTTP/1.1\ndiff --git a/src/plone/restapi/tests/http-examples/portrait_username_get.resp b/src/plone/restapi/tests/http-examples/portrait_username_get.resp\nnew file mode 100644\nindex 000000000..f08a359bd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/portrait_username_get.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 200 OK\n+Content-Type: image/png\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex eb5f1a1b5..f17eb684f 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.24.2.dev0"\n+            "version": "8.25.2.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\nindex fde27e260..1280886eb 100644\n--- a/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n@@ -9,7 +9,7 @@ Content-Type: application/json\n     "home_page": null,\n     "id": "noam",\n     "location": null,\n-    "portrait": "http://localhost:55001/plone/portal_memberdata/portraits/noam",\n+    "portrait": "http://localhost:55001/plone/@portrait/noam",\n     "roles": [\n         "Member"\n     ],\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 079e84629..cb818bdfc 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -12,6 +12,7 @@\n from zope.component import getAdapter\n from zope.component import getUtility\n \n+import os\n import transaction\n import unittest\n \n@@ -66,6 +67,16 @@ def tearDown(self):\n         self.api_session.close()\n         self.anon_api_session.close()\n \n+    def makeRealImage(self):\n+        import Products.PlonePAS as ppas\n+        from Products.PlonePAS.tests import dummy\n+\n+        pas_path = os.path.dirname(ppas.__file__)\n+        path = os.path.join(pas_path, "tool.gif")\n+        image = open(path, "rb")\n+        image_upload = dummy.FileUpload(dummy.FieldStorage(image))\n+        return image_upload\n+\n     def test_list_users(self):\n         response = self.api_session.get("/@users")\n \n@@ -330,6 +341,17 @@ def test_get_other_user_info_when_logged_in(self):\n         self.assertEqual(response.status_code, 401)\n         noam_api_session.close()\n \n+    def test_get_user_with_portrait_set(self):\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "noam")\n+        transaction.commit()\n+\n+        response = self.api_session.get("/@users/noam")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertTrue(response.json()["portrait"].endswith("/@portrait/noam"))\n+\n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n             "/@users",\n@@ -482,9 +504,7 @@ def test_update_portrait(self):\n         transaction.commit()\n \n         user = self.api_session.get("/@users/noam").json()\n-        self.assertTrue(\n-            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n-        )\n+        self.assertTrue(user.get("portrait").endswith("/@portrait/noam"))\n \n     def test_update_portrait_with_default_plone_scaling(self):\n         payload = {\n@@ -503,9 +523,7 @@ def test_update_portrait_with_default_plone_scaling(self):\n         transaction.commit()\n \n         user = self.api_session.get("/@users/noam").json()\n-        self.assertTrue(\n-            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n-        )\n+        self.assertTrue(user.get("portrait").endswith("/@portrait/noam"))\n \n     def test_update_portrait_by_manager(self):\n         payload = {\n@@ -522,9 +540,7 @@ def test_update_portrait_by_manager(self):\n         transaction.commit()\n \n         user = self.api_session.get("/@users/noam").json()\n-        self.assertTrue(\n-            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n-        )\n+        self.assertTrue(user.get("portrait").endswith("/@portrait/noam"))\n \n     def test_delete_portrait(self):\n         payload = {\n@@ -572,7 +588,7 @@ def test_update_user_with_portrait_set_without_updating_portrait(self):\n             "fullname": "Noam A. Chomsky",\n             "username": "noam",\n             "email": "avram.chomsky@plone.org",\n-            "portrait": "http://localhost:55001/plone/portal_memberdata/portraits/noam",\n+            "portrait": "http://localhost:55001/plone/@portrait/noam",\n         }\n         self.api_session.auth = ("noam", "password")\n         response = self.api_session.patch("/@users/noam", json=payload)\n@@ -581,9 +597,7 @@ def test_update_user_with_portrait_set_without_updating_portrait(self):\n         transaction.commit()\n \n         user = self.api_session.get("/@users/noam").json()\n-        self.assertTrue(\n-            user.get("portrait").endswith("plone/portal_memberdata/portraits/noam")\n-        )\n+        self.assertTrue(user.get("portrait").endswith("/@portrait/noam"))\n \n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n@@ -929,3 +943,61 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n \n         self.assertIn("Member", response["roles"])\n         self.assertEqual(1, len(response["roles"]))\n+\n+    def test_get_own_user_portrait(self):\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "admin")\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "/@portrait",\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(response.headers["Content-Type"], "image/gif")\n+\n+    def test_get_own_user_portrait_logged_out(self):\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "admin")\n+        transaction.commit()\n+\n+        response = self.anon_api_session.get(\n+            "/@portrait",\n+        )\n+\n+        self.assertEqual(404, response.status_code)\n+\n+    def test_get_user_portrait_not_set(self):\n+        response = self.anon_api_session.get(\n+            "/@portrait/admin",\n+        )\n+\n+        self.assertEqual(404, response.status_code)\n+\n+    def test_get_user_portrait(self):\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "admin")\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "/@portrait/admin",\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(response.headers["Content-Type"], "image/gif")\n+\n+    def test_get_user_portrait_anonymous(self):\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "admin")\n+        transaction.commit()\n+\n+        response = self.anon_api_session.get(\n+            "/@portrait/admin",\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(response.headers["Content-Type"], "image/gif")\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-09-13T18:02:42+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/cb1dde1044a91744161cb0ce63d28f7b42e902aa

Merge pull request #1398 from plone/alias_controlpanel

@aliases Endpoint

Files changed:
A docs/source/aliases.md
A news/1393.feature
A src/plone/restapi/services/aliases/__init__.py
A src/plone/restapi/services/aliases/add.py
A src/plone/restapi/services/aliases/configure.zcml
A src/plone/restapi/services/aliases/delete.py
A src/plone/restapi/services/aliases/get.py
A src/plone/restapi/tests/http-examples/aliases_add.req
A src/plone/restapi/tests/http-examples/aliases_add.resp
A src/plone/restapi/tests/http-examples/aliases_delete.req
A src/plone/restapi/tests/http-examples/aliases_delete.resp
A src/plone/restapi/tests/http-examples/aliases_get.req
A src/plone/restapi/tests/http-examples/aliases_get.resp
A src/plone/restapi/tests/http-examples/aliases_root_add.req
A src/plone/restapi/tests/http-examples/aliases_root_add.resp
A src/plone/restapi/tests/http-examples/aliases_root_delete.req
A src/plone/restapi/tests/http-examples/aliases_root_delete.resp
A src/plone/restapi/tests/http-examples/aliases_root_filter.req
A src/plone/restapi/tests/http-examples/aliases_root_filter.resp
A src/plone/restapi/tests/http-examples/aliases_root_get.req
A src/plone/restapi/tests/http-examples/aliases_root_get.resp
M docs/source/index.md
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/collection_fullobjects.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_get_folder.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/search_fullobjects.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/translations_link_on_post.resp
M src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp
M src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/aliases.md b/docs/source/aliases.md\nnew file mode 100644\nindex 000000000..afa68efda\n--- /dev/null\n+++ b/docs/source/aliases.md\n@@ -0,0 +1,132 @@\n+---\n+html_meta:\n+  "description": "Aliases - a mechanism to redirect old URLs to new ones."\n+  "property=og:description": "Aliases - a mechanism to redirect old URLs to new ones."\n+  "property=og:title": "Aliases"\n+  "keywords": "Plone, plone.app.redirector, redirector, REST, API, Aliases"\n+---\n+\n+# Aliases\n+\n+A mechanism to redirect old URLs to new ones.\n+\n+When an object is moved (renamed or cut/pasted into a different location), the redirection storage will remember the old path. It is smart enough to deal with transitive references (if we have a -> b and then add b -> c, it is replaced by a reference a -> c) and circular references (attempting to add a -> a does nothing).\n+\n+The API consumer can create, read, and delete aliases.\n+\n+\n+| Verb     | URL         | Action                                 |\n+| -------- | ----------- | -------------------------------------- |\n+| `POST`   | `/@aliases` | Add one or more aliases                |\n+| `GET`    | `/@aliases` | List all aliases                       |\n+| `DELETE` | `/@aliases` | Remove one or more aliases             |\n+\n+## Adding new URL aliases for a Page\n+\n+By default, Plone automatically creates a new alias when an object is renamed or moved. Still, you can also create aliases manually.\n+\n+To create a new alias, send a `POST` request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_add.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_add.resp\n+:language: http\n+```\n+\n+## Listing URL aliases of a Page\n+\n+To list aliases, you can send a `GET` request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_get.resp\n+:language: http\n+```\n+\n+\n+## Removing URL aliases of a Page\n+\n+To remove aliases, send a `DELETE` request to the `/@aliases` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_delete.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_delete.resp\n+:language: http\n+```\n+\n+## Adding URL aliases in bulk\n+\n+You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root`. **datetime** parameter is optional:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_add.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_add.resp\n+:language: http\n+```\n+\n+\n+## Listing all available aliases\n+\n+To list all aliases, send a `GET` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_get.resp\n+:language: http\n+```\n+\n+## Filter aliases\n+\n+To search for specific aliases, send a `GET` request to the `/@aliases` endpoint on site `root` with a `q` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_filter.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n+:language: http\n+```\n+\n+\n+## Bulk removing aliases\n+\n+To bulk remove aliases send a `DELETE` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/aliases_root_delete.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n+:language: http\n+```\ndiff --git a/docs/source/index.md b/docs/source/index.md\nindex 2f2fcc7d8..2b0733228 100644\n--- a/docs/source/index.md\n+++ b/docs/source/index.md\n@@ -34,6 +34,7 @@ expansion\n actions\n workflow\n workingcopy\n+aliases\n locking\n sharing\n registry\ndiff --git a/news/1393.feature b/news/1393.feature\nnew file mode 100644\nindex 000000000..eb37562e1\n--- /dev/null\n+++ b/news/1393.feature\n@@ -0,0 +1,2 @@\n+Added @aliases endpoint with GET/POST/DELETE\n+[iulianpetchesi]\ndiff --git a/src/plone/restapi/services/aliases/__init__.py b/src/plone/restapi/services/aliases/__init__.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nnew file mode 100644\nindex 000000000..5ab2cf41e\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -0,0 +1,119 @@\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.services import Service\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n+from zope.component import getMultiAdapter\n+from zExceptions import BadRequest\n+from DateTime import DateTime\n+from plone.restapi import _\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesPost(Service):\n+    """Creates new aliases"""\n+\n+    def reply(self):\n+        data = json_body(self.request)\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("items", [])\n+\n+        if isinstance(aliases, str):\n+            aliases = [\n+                aliases,\n+            ]\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        failed_aliases = []\n+        for alias in aliases:\n+            if isinstance(alias, dict):\n+                alias = alias.get("path")\n+\n+            if alias.startswith("/"):\n+                # Check navigation root\n+                alias = self.edit_for_navigation_root(alias)\n+            else:\n+                failed_aliases.append(alias)\n+                continue\n+\n+            alias, err = absolutize_path(alias, is_source=True)\n+\n+            if err:\n+                failed_aliases.append(alias)\n+                continue\n+\n+            storage.add(\n+                alias,\n+                "/".join(self.context.getPhysicalPath()),\n+                manual=True,\n+            )\n+\n+        if len(failed_aliases) > 0:\n+            return {\n+                "type": "error",\n+                "failed": failed_aliases,\n+            }\n+\n+        return self.reply_no_content()\n+\n+    def edit_for_navigation_root(self, alias):\n+        # Check navigation root\n+        pps = getMultiAdapter((self.context, self.request), name="plone_portal_state")\n+        nav_url = pps.navigation_root_url()\n+        portal_url = pps.portal_url()\n+        if nav_url != portal_url:\n+            # We are in a navigation root different from the portal root.\n+            # Update the path accordingly, unless the user already did this.\n+            extra = nav_url[len(portal_url) :]\n+            if not alias.startswith(extra):\n+                alias = f"{extra}{alias}"\n+        # Finally, return the (possibly edited) redirection\n+        return alias\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesRootPost(Service):\n+    """Creates new aliases via controlpanel"""\n+\n+    def reply(self):\n+        data = json_body(self.request)\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("items", [])\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        for alias in aliases:\n+            redirection = alias.get("path")\n+            target = alias.get("redirect-to")\n+            abs_redirection, err = absolutize_path(redirection, is_source=True)\n+            abs_target, target_err = absolutize_path(target, is_source=False)\n+\n+            if err and target_err:\n+                err = f"{err} {target_err}"\n+            elif target_err:\n+                err = target_err\n+            else:\n+                if abs_redirection == abs_target:\n+                    err = _(\n+                        "Alternative urls that point to themselves will cause"\n+                        " an endless cycle of redirects."\n+                    )\n+            if err:\n+                raise BadRequest(err)\n+\n+            date = alias.get("datetime", None)\n+            if date:\n+                date = DateTime(date)\n+\n+            storage.add(abs_redirection, abs_target, now=date, manual=True)\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nnew file mode 100644\nindex 000000000..e3291cf16\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -0,0 +1,61 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n+\n+  <plone:service\n+      method="GET"\n+      accept="application/json,application/schema+json"\n+      factory=".get.AliasesGet"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="zope2.View"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="GET"\n+      accept="application/json,application/schema+json"\n+      factory=".get.AliasesGet"\n+      for="Products.CMFCore.interfaces.IContentish"\n+      permission="zope2.View"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".add.AliasesPost"\n+      for="*"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".add.AliasesRootPost"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.AliasesDelete"\n+      for="*"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.AliasesDelete"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@aliases"\n+      />\n+\n+  <adapter\n+      factory=".get.Aliases"\n+      name="aliases"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/aliases/delete.py b/src/plone/restapi/services/aliases/delete.py\nnew file mode 100644\nindex 000000000..a0b8d79a6\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/delete.py\n@@ -0,0 +1,51 @@\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.services import Service\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+from zope.component import getUtility\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n+from plone.restapi.services.aliases.get import deroot_path\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class AliasesDelete(Service):\n+    """Deletes an alias from object"""\n+\n+    def reply(self):\n+        data = json_body(self.request)\n+        storage = getUtility(IRedirectionStorage)\n+        aliases = data.get("items", [])\n+\n+        if isinstance(aliases, str):\n+            aliases = [\n+                aliases,\n+            ]\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        failed_aliases = []\n+        for alias in aliases:\n+            if isinstance(alias, dict):\n+                alias = alias.get("path")\n+\n+            alias, _err = absolutize_path(alias, is_source=True)\n+\n+            try:\n+                storage.remove(alias)\n+            except KeyError:\n+                alias = deroot_path(alias)\n+                failed_aliases.append(alias)\n+                continue\n+\n+        if len(failed_aliases) > 0:\n+            return {\n+                "type": "error",\n+                "failed": failed_aliases,\n+            }\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nnew file mode 100644\nindex 000000000..04c949068\n--- /dev/null\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -0,0 +1,83 @@\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.restapi.interfaces import IExpandableElement\n+from plone.restapi.serializer.converters import datetimelike_to_iso\n+from plone.restapi.services import Service\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectsControlPanel\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from zope.component import adapter\n+from zope.component import getUtility\n+from zope.component.hooks import getSite\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+@implementer(IExpandableElement)\n+@adapter(Interface, Interface)\n+class Aliases:\n+    """@aliases"""\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def reply_item(self):\n+        storage = getUtility(IRedirectionStorage)\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        redirects = storage.redirects(context_path)\n+        aliases = [deroot_path(alias) for alias in redirects]\n+        self.request.response.setStatus(201)\n+        return [{"path": alias} for alias in aliases]\n+\n+    def reply_root(self):\n+        """\n+        redirect-to - target\n+        path        - path\n+        redirect    - full path with root\n+        """\n+        batch = RedirectsControlPanel(self.context, self.request).redirects()\n+        redirects = [entry for entry in batch]\n+\n+        for redirect in redirects:\n+            del redirect["redirect"]\n+            redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n+        self.request.response.setStatus(201)\n+\n+        self.request.form["b_start"] = "0"\n+        self.request.form["b_size"] = "1000000"\n+        self.request.__annotations__.pop("plone.memoize")\n+\n+        newbatch = RedirectsControlPanel(self.context, self.request).redirects()\n+        items_total = len([item for item in newbatch])\n+        return redirects, items_total\n+\n+    def __call__(self, expand=False):\n+        result = {"aliases": {"@id": f"{self.context.absolute_url()}/@aliases"}}\n+        if not expand:\n+            return result\n+\n+        if IPloneSiteRoot.providedBy(self.context):\n+            items, items_total = self.reply_root()\n+            result["aliases"]["items"] = items\n+            result["aliases"]["items_total"] = items_total\n+        else:\n+            result["aliases"]["items"] = self.reply_item()\n+            result["aliases"]["items_total"] = len(result["aliases"]["items"])\n+\n+        return result\n+\n+\n+class AliasesGet(Service):\n+    """Get aliases"""\n+\n+    def reply(self):\n+        aliases = Aliases(self.context, self.request)\n+        return aliases(expand=True)["aliases"]\n+\n+\n+def deroot_path(path):\n+    """Remove the portal root from alias"""\n+    portal = getSite()\n+    root_path = "/".join(portal.getPhysicalPath())\n+    if not path.startswith("/"):\n+        path = "/%s" % path\n+    return path.replace(root_path, "", 1)\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex bf5b31be9..a90c8093b 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -12,6 +12,7 @@\n   <include package=".auth" />\n   <include package=".actions" />\n   <include package=".addons" />\n+  <include package=".aliases" />\n   <include package=".breadcrumbs" />\n   <include package=".content" />\n   <include package=".controlpanels" />\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.req b/src/plone/restapi/tests/http-examples/aliases_add.req\nnew file mode 100644\nindex 000000000..9897a5a2a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.req\n@@ -0,0 +1,18 @@\n+POST /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "path": "/new-alias"\n+        },\n+        {\n+            "path": "/old-alias"\n+        },\n+        {\n+            "path": "/final-alias"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_add.resp b/src/plone/restapi/tests/http-examples/aliases_add.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_add.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.req b/src/plone/restapi/tests/http-examples/aliases_delete.req\nnew file mode 100644\nindex 000000000..2c106ec64\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.req\n@@ -0,0 +1,12 @@\n+DELETE /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "path": "/old-alias"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_delete.resp b/src/plone/restapi/tests/http-examples/aliases_delete.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_delete.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.req b/src/plone/restapi/tests/http-examples/aliases_get.req\nnew file mode 100644\nindex 000000000..23046fa94\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/front-page/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_get.resp b/src/plone/restapi/tests/http-examples/aliases_get.resp\nnew file mode 100644\nindex 000000000..6e0541929\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_get.resp\n@@ -0,0 +1,12 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/front-page/@aliases",\n+    "items": [\n+        {\n+            "path": "/simple-alias"\n+        }\n+    ],\n+    "items_total": 1\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.req b/src/plone/restapi/tests/http-examples/aliases_root_add.req\nnew file mode 100644\nindex 000000000..09a58b057\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.req\n@@ -0,0 +1,19 @@\n+POST /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "datetime": "2022-05-05",\n+            "path": "/old-page",\n+            "redirect-to": "/front-page"\n+        },\n+        {\n+            "datetime": "2022-05-05",\n+            "path": "/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add.resp b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.req b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\nnew file mode 100644\nindex 000000000..dd9b5c89a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.req\n@@ -0,0 +1,12 @@\n+DELETE /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "path": "/old-page"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_delete.resp b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_delete.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_filter.req b/src/plone/restapi/tests/http-examples/aliases_root_filter.req\nnew file mode 100644\nindex 000000000..8d806ede1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_filter.req\n@@ -0,0 +1,3 @@\n+GET /plone/@aliases?q=/fizzbuzz HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_filter.resp b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\nnew file mode 100644\nindex 000000000..fa823e30f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_filter.resp\n@@ -0,0 +1,15 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@aliases",\n+    "items": [\n+        {\n+            "datetime": "2022-05-05T00:00:00",\n+            "manual": true,\n+            "path": "/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        }\n+    ],\n+    "items_total": 1\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.req b/src/plone/restapi/tests/http-examples/aliases_root_get.req\nnew file mode 100644\nindex 000000000..a5591aed0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get.resp b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\nnew file mode 100644\nindex 000000000..a0ea7e002\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get.resp\n@@ -0,0 +1,21 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@aliases",\n+    "items": [\n+        {\n+            "datetime": "2022-05-05T00:00:00",\n+            "manual": true,\n+            "path": "/fizzbuzz",\n+            "redirect-to": "/front-page"\n+        },\n+        {\n+            "datetime": "2022-05-05T00:00:00",\n+            "manual": true,\n+            "path": "/old-page",\n+            "redirect-to": "/front-page"\n+        }\n+    ],\n+    "items_total": 2\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 592b4af00..4f7986917 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/collection/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/collection/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\nindex ee18de503..6c70e834e 100644\n--- a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/collection/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/collection/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n         },\n@@ -62,6 +65,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/front-page/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/front-page/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n                 },\n@@ -135,6 +141,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc1/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc1/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n                 },\n@@ -209,6 +218,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc2/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc2/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc2/@breadcrumbs"\n                 },\ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex dbc59a7bb..d9d7fb979 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nindex 267e83eda..2321f58e8 100644\n--- a/src/plone/restapi/tests/http-examples/content_get_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex 2d7b23448..7d67c1256 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 474fea130..f00f59793 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -7,6 +7,9 @@ Location: http://localhost:55001/plone/folder/my-document\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/my-document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 563eced1f..3051680f5 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex 80c974936..fca4fc729 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/event/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/event/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/event/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 563eced1f..3051680f5 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex a6aad58fc..3ccd2e625 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/front-page/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n             "items": [\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 2b9b6a821..06e69d113 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -106,6 +106,9 @@ Content-Type: application/json\n                 }\n             ]\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/front-page/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n             "items": [\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex 424b2c560..21e67ec86 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/file/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/file/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/file/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 8eceeb909..88eaf20c0 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/folder/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/folder/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex c6d5ddb2c..a0ded1891 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/image/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/image/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/image/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 4c0047709..8aa56b21d 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 773d421c7..651a7ff9e 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/link/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/link/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/link/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex 28b6e286b..a82f7e875 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/newsitem/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/newsitem/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/newsitem/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nindex 1c1dfc79b..b2a1dad10 100644\n--- a/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n                 "actions": {\n                     "@id": "http://localhost:55001/plone/doc1/@actions"\n                 },\n+                "aliases": {\n+                    "@id": "http://localhost:55001/plone/doc1/@aliases"\n+                },\n                 "breadcrumbs": {\n                     "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n                 },\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 4c0047709..8aa56b21d 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\nindex 6c7bafaf3..e41a6d915 100644\n--- a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n@@ -7,6 +7,9 @@ Location: http://localhost:55001/plone/de/mydocument\n         "actions": {\n             "@id": "http://localhost:55001/plone/de/mydocument/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/de/mydocument/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/de/mydocument/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\nindex 683549cf9..a4622d83c 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\nindex b32673860..bb4423d98 100644\n--- a/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n+++ b/src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n@@ -6,6 +6,9 @@ Content-Type: application/json\n         "actions": {\n             "@id": "http://localhost:55001/plone/copy_of_document/@actions"\n         },\n+        "aliases": {\n+            "@id": "http://localhost:55001/plone/copy_of_document/@aliases"\n+        },\n         "breadcrumbs": {\n             "@id": "http://localhost:55001/plone/copy_of_document/@breadcrumbs"\n         },\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 81ab01c05..6ba477e63 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1840,6 +1840,137 @@ def test_documentation_expansion(self):\n         response = self.api_session.get("/front-page?expand=breadcrumbs,workflow")\n         save_request_and_response_for_docs("expansion", response)\n \n+    def test_aliases_add(self):\n+        # Add 3 aliases\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {\n+            "items": [\n+                {"path": "/new-alias"},\n+                {"path": "/old-alias"},\n+                {"path": "/final-alias"},\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs("aliases_add", response)\n+\n+    def test_aliases_delete(self):\n+        # Delete 1 alias\n+        url = f"{self.document.absolute_url()}/@aliases"\n+        payload = {\n+            "items": [\n+                {"path": "/new-alias"},\n+                {"path": "/old-alias"},\n+                {"path": "/final-alias"},\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        payload = {"items": [{"path": "/old-alias"}]}\n+        response = self.api_session.delete(url, json=payload)\n+\n+        save_request_and_response_for_docs("aliases_delete", response)\n+\n+    def test_aliases_get(self):\n+        # Get aliases\n+        url = f"{self.document.absolute_url()}/@aliases"\n+\n+        payload = {"items": "/simple-alias"}\n+        response = self.api_session.post(url, json=payload)\n+\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs("aliases_get", response)\n+\n+    def test_aliases_root_add(self):\n+        # Add 2 aliases\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+            ]\n+        }\n+\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs("aliases_root_add", response)\n+\n+    def test_aliases_root_delete(self):\n+        # Delete 1 alias\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        payload = {"items": [{"path": "/old-page"}]}\n+        response = self.api_session.delete(url, json=payload)\n+\n+        save_request_and_response_for_docs("aliases_root_delete", response)\n+\n+    def test_aliases_root_get(self):\n+        # Get aliases\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        query = ""\n+\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        response = self.api_session.get(url + query)\n+        save_request_and_response_for_docs("aliases_root_get", response)\n+\n+    def test_aliases_root_filter(self):\n+        # Get aliases\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        query = "?q=/fizzbuzz"\n+\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+\n+        response = self.api_session.get(url + query)\n+        save_request_and_response_for_docs("aliases_root_filter", response)\n+\n \n class TestControlPanelDocumentation(TestDocumentationBase):\n \n'

