Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T19:43:31+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/47b3bca9a72baa6e660df462765c45012c64a2e9

pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/querystring/__init__.py
M plone/app/querystring/hiddenprofiles.py
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/interfaces.py
M plone/app/querystring/querybuilder.py
M plone/app/querystring/querymodifiers.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/registryreader.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/index_testmodifier.py
M plone/app/querystring/tests/registry_testdata.py
M plone/app/querystring/tests/testIndexmodifiers.py
M plone/app/querystring/tests/testQueryBuilder.py
M plone/app/querystring/tests/testQueryBuilderModifiers.py
M plone/app/querystring/tests/testQueryParser.py
M plone/app/querystring/tests/testRegistryIntegration.py
M plone/app/querystring/tests/testRegistryReader.py
M plone/app/querystring/upgrades.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/querystring/__init__.py b/plone/app/querystring/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/querystring/__init__.py\n+++ b/plone/app/querystring/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/querystring/hiddenprofiles.py b/plone/app/querystring/hiddenprofiles.py\nindex 7b6c066..6f6f0fc 100644\n--- a/plone/app/querystring/hiddenprofiles.py\n+++ b/plone/app/querystring/hiddenprofiles.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFPlone.interfaces import INonInstallable as \\\n     INonInstallableProfiles\n from zope.interface import implementer\n \n \n @implementer(INonInstallableProfiles)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n \n     def getNonInstallableProfiles(self):\n         """Returns a list of profiles that should not be available for\ndiff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 050caef..96ce9e2 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf8 -*-\n from dateutil.parser import parse\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from zope.interface import implementer\n@@ -8,7 +7,7 @@\n \n \n @implementer(IParsedQueryIndexModifier)\n-class Subject(object):\n+class Subject:\n \n     """\n     The Subject field in Plone currently uses a utf-8 encoded string.\n@@ -22,8 +21,7 @@ class Subject(object):\n     """\n \n     def __call__(self, value):\n-        if not six.PY2:\n-            return (\'Subject\', value)\n+        return (\'Subject\', value)\n \n         # Get the query operator\n         op = None\n@@ -34,7 +32,7 @@ def __call__(self, value):\n \n         query = value[op]\n         # query can be a unicode string or a list of unicode strings.\n-        if isinstance(query, six.text_type):\n+        if isinstance(query, str):\n             query = query.encode("utf-8")\n         elif isinstance(query, list):\n             # We do not want to change the collections\' own query string,\n@@ -44,7 +42,7 @@ def __call__(self, value):\n             # unicode strings\n             i = 0\n             for item in copy_of_query:\n-                if isinstance(item, six.text_type):\n+                if isinstance(item, str):\n                     copy_of_query[i] = item.encode("utf-8")\n                 i += 1\n             query = copy_of_query\n@@ -55,7 +53,7 @@ def __call__(self, value):\n \n \n @implementer(IParsedQueryIndexModifier)\n-class base(object):\n+class base:\n     """DateIndex query modifier\n     see Products.PluginIndexes.DateIndex.DateIndex.DateIndex._convert function\n     """\n@@ -65,10 +63,10 @@ def __call__(self, value):\n         def _normalize(val):\n             """Encode value, parse dates.\n             """\n-            if six.PY2 and isinstance(val, six.text_type):\n+            if six.PY2 and isinstance(val, str):\n                 val = val.encode("utf-8")\n \n-            if isinstance(val, six.string_types):\n+            if isinstance(val, str):\n                 try:\n                     val = parse(val)\n                 except (ValueError, AttributeError):\ndiff --git a/plone/app/querystring/interfaces.py b/plone/app/querystring/interfaces.py\nindex 394e8dc..6dc1efc 100644\n--- a/plone/app/querystring/interfaces.py\n+++ b/plone/app/querystring/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.schema import Bool\n from zope.schema import DottedName\n@@ -17,22 +16,22 @@ def __call__():\n \n \n class IQueryOperation(Interface):\n-    title = TextLine(title=u"Title")\n-    description = Text(title=u"Description")\n-    operation = TextLine(title=u"Operation")\n-    widget = TextLine(title=u"Widget")\n+    title = TextLine(title="Title")\n+    description = Text(title="Description")\n+    operation = TextLine(title="Operation")\n+    widget = TextLine(title="Widget")\n \n \n class IQueryField(Interface):\n-    title = TextLine(title=u"Title")\n-    description = Text(title=u"Description")\n-    enabled = Bool(title=u"Enabled")\n-    sortable = Bool(title=u"Sortable")\n-    fetch_vocabulary = Bool(title=u"Fetch vocabulary", default=True)\n-    operations = List(title=u"Operations",\n-                      value_type=DottedName(title=u"Operation ID"))\n-    vocabulary = TextLine(title=u"Vocabulary")\n-    group = TextLine(title=u"Group")\n+    title = TextLine(title="Title")\n+    description = Text(title="Description")\n+    enabled = Bool(title="Enabled")\n+    sortable = Bool(title="Sortable")\n+    fetch_vocabulary = Bool(title="Fetch vocabulary", default=True)\n+    operations = List(title="Operations",\n+                      value_type=DottedName(title="Operation ID"))\n+    vocabulary = TextLine(title="Vocabulary")\n+    group = TextLine(title="Group")\n \n \n class IParsedQueryIndexModifier(Interface):\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 8fe3fdd..3efa21b 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from operator import itemgetter\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.querystring import queryparser\n@@ -35,7 +34,7 @@ class QueryBuilder(BrowserView):\n     fetching configuration or results"""\n \n     def __init__(self, context, request):\n-        super(QueryBuilder, self).__init__(context, request)\n+        super().__init__(context, request)\n         self._results = None\n \n     def __call__(\n@@ -208,8 +207,8 @@ def number_of_results(self, query):\n         results = self(query, sort_on=None, sort_order=None, limit=1)\n         return translate(\n             _(\n-                u"batch_x_items_matching_your_criteria",\n-                default=u"${number} items matching your search terms.",\n+                "batch_x_items_matching_your_criteria",\n+                default="${number} items matching your search terms.",\n                 mapping={"number": results.actual_result_count},\n             ),\n             context=self.request,\ndiff --git a/plone/app/querystring/querymodifiers.py b/plone/app/querystring/querymodifiers.py\nindex f8adbc4..443a15c 100644\n--- a/plone/app/querystring/querymodifiers.py\n+++ b/plone/app/querystring/querymodifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.querystring.interfaces import IQueryModifier\n from zope.interface import provider\n \ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 97bd757..7217ca3 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from collections import namedtuple\n from DateTime.interfaces import DateTimeError\ndiff --git a/plone/app/querystring/registryreader.py b/plone/app/querystring/registryreader.py\nindex fa5a783..898f1f1 100644\n--- a/plone/app/querystring/registryreader.py\n+++ b/plone/app/querystring/registryreader.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from collections import OrderedDict\n from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from Products.CMFCore.utils import getToolByName\n@@ -25,7 +24,7 @@ class DottedDict(dict):\n \n     def get(self, k, default=None):\n         if \'.\' not in k:\n-            return super(DottedDict, self).get(k, default)\n+            return super().get(k, default)\n         val = self\n         for x in k.split(\'.\'):\n             val = val[x]\n@@ -33,7 +32,7 @@ def get(self, k, default=None):\n \n \n @implementer(IQuerystringRegistryReader)\n-class QuerystringRegistryReader(object):\n+class QuerystringRegistryReader:\n     """Adapts a registry object to parse the querystring data."""\n \n     prefix = "plone.app.querystring"\n@@ -123,13 +122,13 @@ def mapSortableIndexes(self, values):\n         """Map sortable indexes"""\n         catalog = getToolByName(getSite(), \'portal_catalog\')._catalog\n         sortables = {}\n-        for key, field in six.iteritems(values.get(\'%s.field\' % self.prefix)):\n+        for key, field in values.get(\'%s.field\' % self.prefix).items():\n             if (\n                 field[\'sortable\']\n                 and key in catalog.indexes\n                 and not IZCTextIndex.providedBy(catalog.getIndex(key))\n             ):\n-                sortables[key] = values.get(\'%s.field.%s\' % (self.prefix, key))\n+                sortables[key] = values.get(\'{}.field.{}\'.format(self.prefix, key))\n         values[\'sortable\'] = sortables\n         return values\n \ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex ee6929f..d9de045 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n@@ -39,7 +38,7 @@ def setUpPloneSite(self, portal):\n class PloneAppQuerystringLayer(PloneAppQuerystringTestProfileLayer):\n \n     def setUpZope(self, app, configurationContext):\n-        super(PloneAppQuerystringLayer, self).setUpZope(\n+        super().setUpZope(\n             app, configurationContext)\n         import plone.app.querystring\n         xmlconfig.file(\n@@ -49,7 +48,7 @@ def setUpZope(self, app, configurationContext):\n         )\n \n     def setUpPloneSite(self, portal):\n-        super(PloneAppQuerystringLayer, self).setUpPloneSite(portal)\n+        super().setUpPloneSite(portal)\n         applyProfile(portal, \'plone.app.querystring:default\')\n \n PLONEAPPQUERYSTRING_FIXTURE = PloneAppQuerystringLayer()\ndiff --git a/plone/app/querystring/tests/index_testmodifier.py b/plone/app/querystring/tests/index_testmodifier.py\nindex a36c267..7a885da 100644\n--- a/plone/app/querystring/tests/index_testmodifier.py\n+++ b/plone/app/querystring/tests/index_testmodifier.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf8 -*-\n-\n from zope.interface import implementer\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n \n \n @implementer(IParsedQueryIndexModifier)\n-class SimpleFooIndexModifier(object):\n+class SimpleFooIndexModifier:\n     """Test simple index modifier that do nothing"""\n \n     def __call__(self, value):\n@@ -13,7 +11,7 @@ def __call__(self, value):\n \n \n @implementer(IParsedQueryIndexModifier)\n-class TitleFooIndexModifier(object):\n+class TitleFooIndexModifier:\n     """Test index modifier that check always Foo"""\n \n     def __call__(self, value):\n@@ -21,7 +19,7 @@ def __call__(self, value):\n \n \n @implementer(IParsedQueryIndexModifier)\n-class AbstractToDescriptionIndexModifier(object):\n+class AbstractToDescriptionIndexModifier:\n     """\n     Test index modifier that translate "Abstract" to Description index\n     but where value do not count letter "e"\ndiff --git a/plone/app/querystring/tests/registry_testdata.py b/plone/app/querystring/tests/registry_testdata.py\nindex b03b082..8a4ef2e 100644\n--- a/plone/app/querystring/tests/registry_testdata.py\n+++ b/plone/app/querystring/tests/registry_testdata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import os\n \n parsed_correct = {\n@@ -9,11 +8,11 @@\n                     \'getId\': {\n                         \'operations\': [\n                             \'plone.app.querystring.operation.string.is\'],\n-                        \'group\': u\'Metadata\',\n-                        \'description\': u\'The short name of an item \'\n-                                       u\'(used in the url)\',\n+                        \'group\': \'Metadata\',\n+                        \'description\': \'The short name of an item \'\n+                                       \'(used in the url)\',\n                         \'vocabulary\': None,\n-                        \'title\': u\'Short Name\',\n+                        \'title\': \'Short Name\',\n                         \'enabled\': True,\n                         \'sortable\': True,\n                         \'fetch_vocabulary\': True\n@@ -23,11 +22,11 @@\n                             \'plone.app.querystring.operation.date.lessThan\',\n                             \'plone.app.querystring.operation.date.largerThan\'\n                         ],\n-                        \'group\': u\'Dates\',\n-                        \'description\': u\'The time and date an item was \'\n-                                       u\'created\',\n+                        \'group\': \'Dates\',\n+                        \'description\': \'The time and date an item was \'\n+                                       \'created\',\n                         \'vocabulary\': None,\n-                        \'title\': u\'Creation Date\',\n+                        \'title\': \'Creation Date\',\n                         \'enabled\': True,\n                         \'sortable\': False,\n                         \'fetch_vocabulary\': True\n@@ -37,27 +36,27 @@\n                     \'date\': {\n                         \'largerThan\': {\n                             \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser\'\n-                                         u\'._largerThan\',\n-                            \'description\': u\'Please use YYYY/MM/DD.\',\n-                            \'title\': u\'after\'\n+                            \'operation\': \'plone.app.querystring.queryparser\'\n+                                         \'._largerThan\',\n+                            \'description\': \'Please use YYYY/MM/DD.\',\n+                            \'title\': \'after\'\n                         },\n                         \'lessThan\': {\n                             \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser.\'\n-                                         u\'_lessThan\',\n-                            \'description\': u\'Please use YYYY/MM/DD.\',\n-                            \'title\': u\'before\'\n+                            \'operation\': \'plone.app.querystring.queryparser.\'\n+                                         \'_lessThan\',\n+                            \'description\': \'Please use YYYY/MM/DD.\',\n+                            \'title\': \'before\'\n                         }\n                     },\n                     \'string\': {\n                         \'is\': {\n                             \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser.\'\n-                                         u\'_equal\',\n-                            \'description\': u\'Tip: you can use * to \'\n-                                           u\'autocomplete.\',\n-                            \'title\': u\'equals\'\n+                            \'operation\': \'plone.app.querystring.queryparser.\'\n+                                         \'_equal\',\n+                            \'description\': \'Tip: you can use * to \'\n+                                           \'autocomplete.\',\n+                            \'title\': \'equals\'\n                         }\n                     }\n                 }\ndiff --git a/plone/app/querystring/tests/testIndexmodifiers.py b/plone/app/querystring/tests/testIndexmodifiers.py\nindex 6a93f90..1480d0c 100644\n--- a/plone/app/querystring/tests/testIndexmodifiers.py\n+++ b/plone/app/querystring/tests/testIndexmodifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from DateTime import DateTime\n from plone.app.querystring.indexmodifiers import query_index_modifiers\n@@ -10,17 +9,17 @@ class TestIndexModifiers(unittest.TestCase):\n \n     def test_subject_encoded(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': u\'foobar\'}),\n-            (\'Subject\', {\'query\': u\'foobar\'}))\n+            query_index_modifiers.Subject()({\'query\': \'foobar\'}),\n+            (\'Subject\', {\'query\': \'foobar\'}))\n \n     def test_subject_encoded__list(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': [u\'foobar\']}),\n-            (\'Subject\', {\'query\': [u\'foobar\']}))\n+            query_index_modifiers.Subject()({\'query\': [\'foobar\']}),\n+            (\'Subject\', {\'query\': [\'foobar\']}))\n \n     def test_subject_encoded__list_not(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'not\': [u\'foobar\']}),\n+            query_index_modifiers.Subject()({\'not\': [\'foobar\']}),\n             (\'Subject\', {\'not\': [\'foobar\']}))\n \n     def test_date_modifier(self):\n@@ -71,6 +70,6 @@ def test_date_modifier_list_DateTime(self):\n     def test_invalid_date(self):\n         modifier = query_index_modifiers.start()\n         query = {\'query\': \'foobar\'}\n-        self.assertEquals(\n+        self.assertEqual(\n             modifier(query)[1][\'query\'], \'foobar\'\n         )\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex 6c4042b..1cd9483 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.querystring.testing import (\n     TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n )\n@@ -190,7 +188,7 @@ def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n             {\n                 "i": "Subject",\n                 "o": "plone.app.querystring.operation.selection.any",\n-                "v": u"\xc3\x84\xc3\xbc\xc3\xb6",\n+                "v": "\xc3\x84\xc3\xbc\xc3\xb6",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n@@ -207,7 +205,7 @@ def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n             {\n                 "i": "Subject",\n                 "o": "plone.app.querystring.operation.selection.any",\n-                "v": [u"\xc3\x84\xc3\xbc\xc3\xb6", u"\xc3\x9c\xc3\xb6\xc3\x9f"],\n+                "v": ["\xc3\x84\xc3\xbc\xc3\xb6", "\xc3\x9c\xc3\xb6\xc3\x9f"],\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n@@ -222,7 +220,7 @@ def testMakeQueryWithSearchableText(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"Test",\n+                "v": "Test",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n@@ -236,7 +234,7 @@ def testMakeQueryWithSearchableTextSpecialWordsAnd(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This and that",\n+                "v": "This and that",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n@@ -252,7 +250,7 @@ def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This or that",\n+                "v": "This or that",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\ndiff --git a/plone/app/querystring/tests/testQueryBuilderModifiers.py b/plone/app/querystring/tests/testQueryBuilderModifiers.py\nindex 71478a4..aab9f31 100644\n--- a/plone/app/querystring/tests/testQueryBuilderModifiers.py\n+++ b/plone/app/querystring/tests/testQueryBuilderModifiers.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from plone.app.querystring.testing import \\\n     PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n@@ -48,7 +46,7 @@ def testModifierNotCalled(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n             index_testmodifier.SimpleFooIndexModifier(),\n-            name=u\'Foo\'\n+            name=\'Foo\'\n         )\n         query = [{\n             \'i\': \'Title\',\n@@ -62,13 +60,13 @@ def testModifierNotCalled(self):\n             self.fail("Unexpected: index modifier has been called")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Collectionstestpage")\n-        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name=u\'Foo\')\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name=\'Foo\')\n \n     def testModifierChangeQuery(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n             index_testmodifier.TitleFooIndexModifier(),\n-            name=u\'Title\'\n+            name=\'Title\'\n         )\n         query = [{\n             \'i\': \'Title\',\n@@ -81,14 +79,14 @@ def testModifierChangeQuery(self):\n         self.assertEqual(results[0].Title(), "Foo")\n         gsm.unregisterUtility(\n             provided=IParsedQueryIndexModifier,\n-            name=u\'Title\'\n+            name=\'Title\'\n         )\n \n     def testModifierChangeQueryAndIndex(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n             index_testmodifier.AbstractToDescriptionIndexModifier(),\n-            name=u\'Abstract\'\n+            name=\'Abstract\'\n         )\n         query = [{\n             \'i\': \'Abstract\',\n@@ -101,5 +99,5 @@ def testModifierChangeQueryAndIndex(self):\n         self.assertEqual(results[0].Title(), "Bar")\n         gsm.unregisterUtility(\n             provided=IParsedQueryIndexModifier,\n-            name=u\'Abstract\'\n+            name=\'Abstract\'\n         )\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex 767a87c..6ef6d6c 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n@@ -24,7 +23,7 @@\n MOCK_SITE_ID = "site"\n \n \n-class MockObject(object):\n+class MockObject:\n \n     def __init__(self, uid, path):\n         self.uid = uid\n@@ -40,7 +39,7 @@ def absolute_url(self):\n         return self.path\n \n \n-class MockCatalog(object):\n+class MockCatalog:\n \n     def unrestrictedSearchResults(self, query):\n         uid = query.get(\'UID\')\n@@ -60,7 +59,7 @@ def indexes(self):\n                 \'getRawRelatedItems\', \'Subject\']\n \n \n-class MockPortalUrl(object):\n+class MockPortalUrl:\n \n     def getPortalPath(self):\n         return "/%s" % MOCK_SITE_ID\n@@ -69,18 +68,18 @@ def getPortalObject(self):\n         return MockObject(uid=\'00000000000000000\', path="/%s" % MOCK_SITE_ID)\n \n \n-class MockNavtreeProperties(object):\n+class MockNavtreeProperties:\n \n     def getProperty(self, name, default=""):\n         return ""\n \n \n-class MockSiteProperties(object):\n+class MockSiteProperties:\n     navtree_properties = MockNavtreeProperties()\n \n \n @implementer(INavigationRoot, IPloneSiteRoot)\n-class MockSite(object):\n+class MockSite:\n \n     def __init__(self, portal_membership=None):\n         sm = getSiteManager()\n@@ -102,7 +101,7 @@ class MockNavRoot(MockObject):\n     pass\n \n \n-class MockUser(object):\n+class MockUser:\n \n     def __init__(self, username=None, roles=None):\n         self.username = \'Anonymous User\'\n@@ -117,7 +116,7 @@ def getRoles(self):\n         return self.roles\n \n \n-class MockPortal_membership(object):\n+class MockPortal_membership:\n \n     def __init__(self, user):\n         self.user = user\n@@ -142,7 +141,7 @@ def setUp(self):\n             \'plone.app.querystring.queryparser._absolutePath\')\n \n     def setFunctionForOperation(self, operation, function):\n-        function_field = field.ASCIILine(title=u"Operator")\n+        function_field = field.ASCIILine(title="Operator")\n         function_record = Record(function_field)\n         function_record.value = function\n         self.registry.records[operation] = function_record\n@@ -338,7 +337,7 @@ def test__intEqual(self):\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=u\'20\'\n+            values=\'20\'\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20}}\n@@ -348,7 +347,7 @@ def test__intEqual(self):\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=[u\'20\', u\'21\']\n+            values=[\'20\', \'21\']\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': [20, 21]}}\n@@ -368,7 +367,7 @@ def test__intEqual(self):\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=[b\'bad\', \'text\', u\'values\']\n+            values=[b\'bad\', \'text\', \'values\']\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': None}}\n@@ -399,7 +398,7 @@ def test__intLessThan(self):\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLessThan\',\n-            values=u\'20\'\n+            values=\'20\'\n         )\n         parsed = queryparser._intLessThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n@@ -440,7 +439,7 @@ def test__intLargerThan(self):\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLargerThan\',\n-            values=u\'20\'\n+            values=\'20\'\n         )\n         parsed = queryparser._intLargerThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n@@ -699,9 +698,9 @@ def test_objStartsWithSiteId(self):\n         data = Row(\n             index=\'path\',\n             operator=\'_path\',\n-            values=\'/{0}-news/\'.format(MOCK_SITE_ID)\n+            values=f\'/{MOCK_SITE_ID}-news/\'\n         )\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/{0}/{1}-news/\'.format(MOCK_SITE_ID, MOCK_SITE_ID)]}}\n+        expected = {\'path\': {\'query\': [f\'/{MOCK_SITE_ID}/{MOCK_SITE_ID}-news/\']}}\n         self.assertEqual(parsed, expected)\n         \ndiff --git a/plone/app/querystring/tests/testRegistryIntegration.py b/plone/app/querystring/tests/testRegistryIntegration.py\nindex 1fda4c5..d8cd085 100644\n--- a/plone/app/querystring/tests/testRegistryIntegration.py\n+++ b/plone/app/querystring/tests/testRegistryIntegration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.querystring.testing import \\\n     PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n@@ -22,7 +21,7 @@ def test_string_equality(self):\n         self.assertEqual(registry[prefix + ".description"],\n                          \'Tip: you can use * to autocomplete.\')\n         self.assertEqual(registry[prefix + ".operation"],\n-                         u\'plone.app.querystring.queryparser._equal\')\n+                         \'plone.app.querystring.queryparser._equal\')\n \n     def test_date_lessthan(self):\n         registry = self.portal.portal_registry\n@@ -34,7 +33,7 @@ def test_date_lessthan(self):\n         self.assertEqual(registry[prefix + ".description"],\n                          \'Please use YYYY/MM/DD.\')\n         self.assertEqual(registry[prefix + ".operation"],\n-                         u\'plone.app.querystring.queryparser._lessThan\')\n+                         \'plone.app.querystring.queryparser._lessThan\')\n \n \n class TestFieldDefinitions(unittest.TestCase):\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex 4f8ea15..d0191da 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n from plone.registry import Registry\n from zope.component import getGlobalSiteManager\n@@ -16,11 +15,11 @@\n \n \n @implementer(IVocabularyFactory)\n-class TestVocabulary(object):\n+class TestVocabulary:\n \n     def __call__(self, context):\n         return SimpleVocabulary([\n-            SimpleVocabulary.createTerm(\'foo\', \'foo\', u\'bar\')])\n+            SimpleVocabulary.createTerm(\'foo\', \'foo\', \'bar\')])\n \n \n class TestRegistryReader(unittest.TestCase):\n@@ -77,7 +76,7 @@ def test_get_vocabularies(self):\n         result = reader.getVocabularyValues(result)\n         vocabulary_result = result.get(\n             \'plone.app.querystring.field.reviewState.values\')\n-        self.assertEqual(vocabulary_result, {\'foo\': {\'title\': u\'bar\'}})\n+        self.assertEqual(vocabulary_result, {\'foo\': {\'title\': \'bar\'}})\n \n     def test_map_operations_clean(self):\n         """tests if mapOperations is getting all operators correctly"""\ndiff --git a/plone/app/querystring/upgrades.py b/plone/app/querystring/upgrades.py\nindex cc8a085..c6e0d19 100644\n--- a/plone/app/querystring/upgrades.py\n+++ b/plone/app/querystring/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getUtility\n from plone.registry.interfaces import IRegistry\n \n@@ -24,17 +23,17 @@ def fix_select_all_existing_collections(context, query=None):\n         query = {"portal_type": "Collection"}\n \n     indexes_to_fix = [\n-        u\'portal_type\',\n-        u\'review_state\',\n-        u\'Creator\',\n-        u\'Subject\'\n+        \'portal_type\',\n+        \'review_state\',\n+        \'Creator\',\n+        \'Subject\'\n     ]\n     operator_mapping = {\n         # old -> new\n-        u"plone.app.querystring.operation.selection.is":\n-            u"plone.app.querystring.operation.selection.any",\n-        u"plone.app.querystring.operation.string.is":\n-            u"plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.selection.is":\n+            "plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.string.is":\n+            "plone.app.querystring.operation.selection.any",\n     }\n     catalog = context.portal_catalog\n     brains = catalog.unrestrictedSearchResults(**query)\ndiff --git a/setup.py b/setup.py\nindex 65d9a71..1153078 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n version = \'2.0.2.dev0\'\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T19:45:48+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/3329a8953c8216f40903726ef2fb13d33559f379

black &amp; isort

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/querystring/hiddenprofiles.py
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/interfaces.py
M plone/app/querystring/querybuilder.py
M plone/app/querystring/querymodifiers.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/registryreader.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/index_testmodifier.py
M plone/app/querystring/tests/registry_testdata.py
M plone/app/querystring/tests/testIndexmodifiers.py
M plone/app/querystring/tests/testQueryBuilder.py
M plone/app/querystring/tests/testQueryBuilderModifiers.py
M plone/app/querystring/tests/testQueryParser.py
M plone/app/querystring/tests/testRegistryIntegration.py
M plone/app/querystring/tests/testRegistryReader.py
M plone/app/querystring/upgrades.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/querystring/hiddenprofiles.py b/plone/app/querystring/hiddenprofiles.py\nindex 6f6f0fc..56e0351 100644\n--- a/plone/app/querystring/hiddenprofiles.py\n+++ b/plone/app/querystring/hiddenprofiles.py\n@@ -1,27 +1,26 @@\n-from Products.CMFPlone.interfaces import INonInstallable as \\\n-    INonInstallableProfiles\n+from Products.CMFPlone.interfaces import \\\n+    INonInstallable as INonInstallableProfiles\n from zope.interface import implementer\n \n \n @implementer(INonInstallableProfiles)\n class HiddenProfiles:\n-\n     def getNonInstallableProfiles(self):\n         """Returns a list of profiles that should not be available for\n-           installation at portal creation time.\n+        installation at portal creation time.\n \n-           The usual use-case is to prevent extension profiles from showing up,\n-           that will be installed as part of the site creation anyways.\n+        The usual use-case is to prevent extension profiles from showing up,\n+        that will be installed as part of the site creation anyways.\n         """\n         return [\n-            \'plone.app.querystring:default\',\n-            \'plone.app.querystring:upgrade_to_3\',\n-            \'plone.app.querystring:upgrade_to_5\',\n-            \'plone.app.querystring:upgrade_to_6\',\n-            \'plone.app.querystring:upgrade_to_7\',\n-            \'plone.app.querystring:upgrade_to_8\',\n-            \'plone.app.querystring:upgrade_to_9\',\n-            \'plone.app.querystring:upgrade_to_10\',\n-            \'plone.app.querystring:upgrade_to_11\',\n-            \'plone.app.querystring:upgrade_to_14\',\n+            "plone.app.querystring:default",\n+            "plone.app.querystring:upgrade_to_3",\n+            "plone.app.querystring:upgrade_to_5",\n+            "plone.app.querystring:upgrade_to_6",\n+            "plone.app.querystring:upgrade_to_7",\n+            "plone.app.querystring:upgrade_to_8",\n+            "plone.app.querystring:upgrade_to_9",\n+            "plone.app.querystring:upgrade_to_10",\n+            "plone.app.querystring:upgrade_to_11",\n+            "plone.app.querystring:upgrade_to_14",\n         ]\ndiff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 96ce9e2..be1e5da 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -1,9 +1,8 @@\n+import six\n from dateutil.parser import parse\n-from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from zope.interface import implementer\n \n-\n-import six\n+from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n \n \n @implementer(IParsedQueryIndexModifier)\n@@ -21,14 +20,14 @@ class Subject:\n     """\n \n     def __call__(self, value):\n-        return (\'Subject\', value)\n+        return ("Subject", value)\n \n         # Get the query operator\n         op = None\n-        if \'query\' in value:\n-            op = \'query\'\n-        elif \'not\' in value:\n-            op = \'not\'\n+        if "query" in value:\n+            op = "query"\n+        elif "not" in value:\n+            op = "not"\n \n         query = value[op]\n         # query can be a unicode string or a list of unicode strings.\n@@ -49,7 +48,7 @@ def __call__(self, value):\n         else:\n             pass\n         value[op] = query\n-        return (\'Subject\', value)\n+        return ("Subject", value)\n \n \n @implementer(IParsedQueryIndexModifier)\n@@ -59,10 +58,8 @@ class base:\n     """\n \n     def __call__(self, value):\n-\n         def _normalize(val):\n-            """Encode value, parse dates.\n-            """\n+            """Encode value, parse dates."""\n             if six.PY2 and isinstance(val, str):\n                 val = val.encode("utf-8")\n \n@@ -74,7 +71,7 @@ def _normalize(val):\n \n             return val\n \n-        query = value[\'query\']\n+        query = value["query"]\n         query = _normalize(query)\n \n         if isinstance(query, list):\n@@ -83,7 +80,7 @@ def _normalize(val):\n                 aux.append(_normalize(item))\n             query = aux\n \n-        value[\'query\'] = query\n+        value["query"] = query\n         return (self.__class__.__name__, value)\n \n \ndiff --git a/plone/app/querystring/interfaces.py b/plone/app/querystring/interfaces.py\nindex 6dc1efc..88328a9 100644\n--- a/plone/app/querystring/interfaces.py\n+++ b/plone/app/querystring/interfaces.py\n@@ -1,18 +1,12 @@\n from zope.interface import Interface\n-from zope.schema import Bool\n-from zope.schema import DottedName\n-from zope.schema import List\n-from zope.schema import Text\n-from zope.schema import TextLine\n+from zope.schema import Bool, DottedName, List, Text, TextLine\n \n \n class IQuerystringRegistryReader(Interface):\n-    """Adapts a registry object to parse the querystring data\n-    """\n+    """Adapts a registry object to parse the querystring data"""\n \n     def __call__():\n-        """Return query string in dict-format.\n-        """\n+        """Return query string in dict-format."""\n \n \n class IQueryOperation(Interface):\n@@ -28,15 +22,13 @@ class IQueryField(Interface):\n     enabled = Bool(title="Enabled")\n     sortable = Bool(title="Sortable")\n     fetch_vocabulary = Bool(title="Fetch vocabulary", default=True)\n-    operations = List(title="Operations",\n-                      value_type=DottedName(title="Operation ID"))\n+    operations = List(title="Operations", value_type=DottedName(title="Operation ID"))\n     vocabulary = TextLine(title="Vocabulary")\n     group = TextLine(title="Group")\n \n \n class IParsedQueryIndexModifier(Interface):\n-    """Transform a parsed query index in something different\n-    """\n+    """Transform a parsed query index in something different"""\n \n     def __call__(value):\n         """\n@@ -47,8 +39,7 @@ def __call__(value):\n \n \n class IQueryModifier(Interface):\n-    """Modifies a query in order to inject specific or change given criteria.\n-    """\n+    """Modifies a query in order to inject specific or change given criteria."""\n \n     def __call__(query):\n         """\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 3efa21b..224730a 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -1,22 +1,21 @@\n+import json\n+import logging\n from operator import itemgetter\n+\n from plone.app.contentlisting.interfaces import IContentListing\n-from plone.app.querystring import queryparser\n-from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n-from plone.app.querystring.interfaces import IQueryModifier\n-from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from plone.batching import Batch\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.search import munge_search_term\n-from zope.component import getMultiAdapter\n-from zope.component import getUtilitiesFor\n-from zope.component import getUtility\n+from zope.component import getMultiAdapter, getUtilitiesFor, getUtility\n from zope.i18n import translate\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n \n-import json\n-import logging\n+from plone.app.querystring import queryparser\n+from plone.app.querystring.interfaces import (IParsedQueryIndexModifier,\n+                                              IQueryModifier,\n+                                              IQuerystringRegistryReader)\n \n logger = logging.getLogger("plone.app.querystring")\n _ = MessageFactory("plone")\n@@ -110,9 +109,9 @@ def html_results(self, query):\n             limit=10,\n         )\n \n-        return getMultiAdapter(\n-            (results, self.request), name="display_query_results"\n-        )(**options)\n+        return getMultiAdapter((results, self.request), name="display_query_results")(\n+            **options\n+        )\n \n     def _makequery(\n         self,\n@@ -148,16 +147,12 @@ def _makequery(\n \n         # Check for valid indexes\n         catalog = getToolByName(self.context, "portal_catalog")\n-        valid_indexes = [\n-            index for index in parsedquery if index in catalog.indexes()\n-        ]\n+        valid_indexes = [index for index in parsedquery if index in catalog.indexes()]\n \n         # We\'ll ignore any invalid index, but will return an empty set if none\n         # of the indexes are valid.\n         if not valid_indexes:\n-            logger.warning(\n-                "Using empty query because there are no valid indexes used."\n-            )\n+            logger.warning("Using empty query because there are no valid indexes used.")\n             parsedquery = {}\n \n         empty_query = not parsedquery  # store emptiness\n@@ -229,8 +224,6 @@ def munge_search_term(self, q):\n class RegistryConfiguration(BrowserView):\n     def __call__(self):\n         registry = getUtility(IRegistry)\n-        reader = getMultiAdapter(\n-            (registry, self.request), IQuerystringRegistryReader\n-        )\n+        reader = getMultiAdapter((registry, self.request), IQuerystringRegistryReader)\n         data = reader()\n         return json.dumps(data)\ndiff --git a/plone/app/querystring/querymodifiers.py b/plone/app/querystring/querymodifiers.py\nindex 443a15c..f373757 100644\n--- a/plone/app/querystring/querymodifiers.py\n+++ b/plone/app/querystring/querymodifiers.py\n@@ -1,6 +1,7 @@\n-from plone.app.querystring.interfaces import IQueryModifier\n from zope.interface import provider\n \n+from plone.app.querystring.interfaces import IQueryModifier\n+\n \n @provider(IQueryModifier)\n def modify_query_to_enforce_navigation_root(query):\n@@ -12,15 +13,14 @@ def modify_query_to_enforce_navigation_root(query):\n     if not query:\n         return query\n \n-    has_path_criteria = any(\n-        (criteria[\'i\'] == \'path\')\n-        for criteria in query\n-    )\n+    has_path_criteria = any((criteria["i"] == "path") for criteria in query)\n     if not has_path_criteria:\n         query = list(query)\n-        query.append({\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/\',\n-        })\n+        query.append(\n+            {\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/",\n+            }\n+        )\n     return query\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 7217ca3..f27a124 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,7 +1,8 @@\n-from Acquisition import aq_parent\n from collections import namedtuple\n-from DateTime.interfaces import DateTimeError\n+\n+from Acquisition import aq_parent\n from DateTime import DateTime\n+from DateTime.interfaces import DateTimeError\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n@@ -11,13 +12,11 @@\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \n-\n-Row = namedtuple(\'Row\', [\'index\', \'operator\', \'values\'])\n-PATH_INDICES = {\'path\'}\n+Row = namedtuple("Row", ["index", "operator", "values"])\n+PATH_INDICES = {"path"}\n \n \n def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n-\n     if not formquery:\n         return {}\n     reg = getUtility(IRegistry)\n@@ -27,14 +26,14 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n \n     query = {}\n     for row in formquery:\n-        operator = row.get(\'o\', None)\n+        operator = row.get("o", None)\n         function_path = reg["%s.operation" % operator]\n \n         # The functions expect this pattern of object, so lets give it to\n         # them in a named tuple instead of jamming things onto the request\n-        row = Row(index=row.get(\'i\', None),\n-                  operator=function_path,\n-                  values=row.get(\'v\', None))\n+        row = Row(\n+            index=row.get("i", None), operator=function_path, values=row.get("v", None)\n+        )\n \n         kwargs = {}\n         parser = resolve(row.operator)\n@@ -45,7 +44,7 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n         if len(path_index) == 1:\n             path_index = list(path_index)[0]\n             if path_index in query:\n-                query[path_index][\'query\'].extend(kwargs[path_index][\'query\'])\n+                query[path_index]["query"].extend(kwargs[path_index]["query"])\n             else:\n                 query.update(kwargs)\n         elif len(path_index) > 1:\n@@ -59,31 +58,36 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n \n     # Add sorting (sort_on and sort_order) to the query\n     if sort_on:\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         # I get crazy sort_ons like \'194\' or \'null\'.\n         if sort_on in catalog.indexes():\n-            query[\'sort_on\'] = sort_on\n+            query["sort_on"] = sort_on\n             if sort_order:\n-                query[\'sort_order\'] = sort_order\n+                query["sort_order"] = sort_order\n     return query\n \n \n # Query operators\n \n+\n def _contains(context, row):\n     return _equal(context, row)\n \n \n def _excludes(context, row):\n-    return {row.index: {\'not\': row.values}}\n+    return {row.index: {"not": row.values}}\n \n \n def _equal(context, row):\n-    return {row.index: {\'query\': row.values, }}\n+    return {\n+        row.index: {\n+            "query": row.values,\n+        }\n+    }\n \n \n def _all(context, row):\n-    return {row.index: {\'query\': row.values, \'operator\': \'and\'}}\n+    return {row.index: {"query": row.values, "operator": "and"}}\n \n \n def _intEqual(context, row):\n@@ -98,39 +102,51 @@ def _intEqual(context, row):\n             values = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    return {row.index: {\'query\': values, }}\n+    return {\n+        row.index: {\n+            "query": values,\n+        }\n+    }\n \n \n def _isTrue(context, row):\n-    return {row.index: {\'query\': True, }}\n+    return {\n+        row.index: {\n+            "query": True,\n+        }\n+    }\n \n \n def _isFalse(context, row):\n-    return {row.index: {\'query\': False, }}\n+    return {\n+        row.index: {\n+            "query": False,\n+        }\n+    }\n \n \n def _between(context, row):\n     if not row.values:\n-        val = [\'\', \'\']\n+        val = ["", ""]\n     else:\n         val = row.values\n \n-    tmp = {row.index:\n-           {\n-               \'query\': sorted(val),\n-               \'range\': \'minmax\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": sorted(val),\n+            "range": "minmax",\n+        },\n+    }\n     return tmp\n \n \n def _largerThan(context, row):\n-    tmp = {row.index:\n-           {\n-               \'query\': row.values,\n-               \'range\': \'min\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": row.values,\n+            "range": "min",\n+        },\n+    }\n     return tmp\n \n \n@@ -141,22 +157,22 @@ def _intLargerThan(context, row):\n             value = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    tmp = {row.index:\n-           {\n-               \'query\': value,\n-               \'range\': \'min\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": value,\n+            "range": "min",\n+        },\n+    }\n     return tmp\n \n \n def _lessThan(context, row):\n-    tmp = {row.index:\n-           {\n-               \'query\': row.values,\n-               \'range\': \'max\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": row.values,\n+            "range": "max",\n+        },\n+    }\n     return tmp\n \n \n@@ -168,27 +184,27 @@ def _intLessThan(context, row):\n         except (ValueError, TypeError, AttributeError):\n             # value = 0\n             pass\n-    tmp = {row.index:\n-           {\n-               \'query\': value,\n-               \'range\': \'max\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": value,\n+            "range": "max",\n+        },\n+    }\n     return tmp\n \n \n def _currentUser(context, row):\n     """Current user lookup"""\n-    mt = getToolByName(context, \'portal_membership\')\n+    mt = getToolByName(context, "portal_membership")\n     user = mt.getAuthenticatedMember()\n-    return {row.index: {\'query\': user.getUserName()}}\n+    return {row.index: {"query": user.getUserName()}}\n \n \n def _showInactive(context, row):\n-    """ Current user roles lookup in order to determine whether user should\n-        be allowed to view inactive content\n+    """Current user roles lookup in order to determine whether user should\n+    be allowed to view inactive content\n     """\n-    mt = getToolByName(context, \'portal_membership\')\n+    mt = getToolByName(context, "portal_membership")\n     user = mt.getAuthenticatedMember()\n     value = False\n     user_roles = user.getRoles()\n@@ -212,9 +228,7 @@ def _lessThanRelativeDate(context, row):\n     start_date = now.earliestTime()\n     end_date = now + values\n     end_date = end_date.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n@@ -229,9 +243,7 @@ def _moreThanRelativeDate(context, row):\n     start_date = now - values\n     start_date = start_date.earliestTime()\n     end_date = now.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n@@ -243,14 +255,10 @@ def _betweenDates(context, row):\n     try:\n         end_date = DateTime(row.values[1])\n     except DateTimeError:\n-        row = Row(index=row.index,\n-                  operator=row.operator,\n-                  values=start_date)\n+        row = Row(index=row.index, operator=row.operator, values=start_date)\n         return _largerThan(context, row)\n     else:\n-        row = Row(index=row.index,\n-                  operator=row.operator,\n-                  values=(start_date, end_date))\n+        row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n \n         return _between(context, row)\n \n@@ -259,23 +267,17 @@ def _today(context, row):\n     now = DateTime()\n     start_date = now.earliestTime()\n     end_date = now.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n def _afterToday(context, row):\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime())\n+    row = Row(index=row.index, operator=row.operator, values=DateTime())\n     return _largerThan(context, row)\n \n \n def _beforeToday(context, row):\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime())\n+    row = Row(index=row.index, operator=row.operator, values=DateTime())\n     return _lessThan(context, row)\n \n \n@@ -284,9 +286,11 @@ def _beforeRelativeDate(context, row):\n         values = int(row.values)\n     except ValueError:\n         values = 0\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime().earliestTime() - values)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values=DateTime().earliestTime() - values,\n+    )\n     return _lessThan(context, row)\n \n \n@@ -295,41 +299,43 @@ def _afterRelativeDate(context, row):\n         values = int(row.values)\n     except ValueError:\n         values = 0\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime().earliestTime() + values)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values=DateTime().earliestTime() + values,\n+    )\n     return _largerThan(context, row)\n \n \n def _pathByRoot(root, context, row):\n     values = row.values\n     depth = None\n-    if \'::\' in values:\n-        values, _depth = values.split(\'::\', 1)\n+    if "::" in values:\n+        values, _depth = values.split("::", 1)\n         try:\n             depth = int(_depth)\n         except ValueError:\n             pass\n-    if \'/\' not in values:\n+    if "/" not in values:\n         # It must be a UID\n         values = getPathByUID(context, values)\n     # take care of absolute paths without root\n-    if not values.startswith(root + \'/\') and values != root:\n+    if not values.startswith(root + "/") and values != root:\n         values = root + values\n     query = {}\n     if depth is not None:\n-        query[\'depth\'] = depth\n+        query["depth"] = depth\n         # when a depth value is specified, a trailing slash matters on the\n         # query\n-        values = values.rstrip(\'/\')\n-    query[\'query\'] = [values]\n+        values = values.rstrip("/")\n+    query["query"] = [values]\n     return {row.index: query}\n \n \n def _absolutePath(context, row):\n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n-    root = \'/\'.join(portal.getPhysicalPath())\n+    root = "/".join(portal.getPhysicalPath())\n     return _pathByRoot(root, context, row)\n \n \n@@ -342,10 +348,10 @@ def _relativePath(context, row):\n     obj = context\n     values = row.values\n     depthstr = ""\n-    if \'::\' in values:\n-        values, _depth = values.split(\'::\', 1)\n+    if "::" in values:\n+        values, _depth = values.split("::", 1)\n         depthstr = "::%s" % _depth\n-    for x in [r for r in values.split(\'/\') if r]:\n+    for x in [r for r in values.split("/") if r]:\n         if x == "..":\n             if IPloneSiteRoot.providedBy(obj):\n                 break\n@@ -358,9 +364,11 @@ def _relativePath(context, row):\n                 if child and base_hasattr(child, "getPhysicalPath"):\n                     obj = child\n \n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=\'/\'.join(obj.getPhysicalPath()) + depthstr)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values="/".join(obj.getPhysicalPath()) + depthstr,\n+    )\n \n     return _absolutePath(context, row)\n \n@@ -374,18 +382,18 @@ def _referenceIs(context, row):\n         return {}\n \n     # clear possible depth string\n-    values = values.split(\'::\')[0]\n+    values = values.split("::")[0]\n \n-    if \'/\' not in values:\n+    if "/" not in values:\n         return {row.index: values}\n \n     pquery = _absolutePath(context, row)\n     if not pquery:\n         return {}\n     # use resolved path here...\n-    path = pquery[row.index][\'query\']\n+    path = pquery[row.index]["query"]\n \n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n \n     if type(path) == list:\n@@ -400,10 +408,11 @@ def _referenceIs(context, row):\n \n # Helper functions\n \n+\n def getPathByUID(context, uid):\n     """Returns the path of an object specified by UID"""\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n     brains = catalog.unrestrictedSearchResults(dict(UID=uid))\n     if brains:\n         return brains[0].getPath()\n-    return \'\'\n+    return ""\ndiff --git a/plone/app/querystring/registryreader.py b/plone/app/querystring/registryreader.py\nindex 898f1f1..a704d29 100644\n--- a/plone/app/querystring/registryreader.py\n+++ b/plone/app/querystring/registryreader.py\n@@ -1,8 +1,9 @@\n+import logging\n from collections import OrderedDict\n-from plone.app.querystring.interfaces import IQuerystringRegistryReader\n+\n+import six\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import normalizeString\n-from Products.CMFPlone.utils import safe_unicode\n+from Products.CMFPlone.utils import normalizeString, safe_unicode\n from Products.ZCTextIndex.interfaces import IZCTextIndex\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n@@ -12,9 +13,7 @@\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n-import logging\n-import six\n-\n+from plone.app.querystring.interfaces import IQuerystringRegistryReader\n \n logger = logging.getLogger("plone.app.querystring")\n \n@@ -23,10 +22,10 @@ class DottedDict(dict):\n     """A dictionary where you can access nested dicts with dotted names"""\n \n     def get(self, k, default=None):\n-        if \'.\' not in k:\n+        if "." not in k:\n             return super().get(k, default)\n         val = self\n-        for x in k.split(\'.\'):\n+        for x in k.split("."):\n             val = val[x]\n         return val\n \n@@ -53,7 +52,7 @@ def parseRegistry(self):\n             if not record.startswith(self.prefix):\n                 continue\n \n-            splitted = record.split(\'.\')\n+            splitted = record.split(".")\n             current = result\n             for x in splitted[:-1]:\n                 # create the key if it\'s not there\n@@ -73,9 +72,9 @@ def parseRegistry(self):\n     def getVocabularyValues(self, values):\n         """Get all vocabulary values if a vocabulary is defined"""\n \n-        for field in values.get(self.prefix + \'.field\').values():\n-            field[\'values\'] = OrderedDict()\n-            vocabulary = field.get(\'vocabulary\', [])\n+        for field in values.get(self.prefix + ".field").values():\n+            field["values"] = OrderedDict()\n+            vocabulary = field.get("vocabulary", [])\n             if not vocabulary:\n                 continue\n             utility = queryUtility(IVocabularyFactory, vocabulary)\n@@ -83,7 +82,7 @@ def getVocabularyValues(self, values):\n                 logger.info("%s is missing, ignored." % vocabulary)\n                 continue\n             translated = []\n-            if not field.get(\'fetch_vocabulary\', True):\n+            if not field.get("fetch_vocabulary", True):\n                 # Bail out if the annotation is marked not to fetch the vocabulary\n                 # to allow the widget to query the vocabulary as needed\n                 continue\n@@ -94,25 +93,23 @@ def getVocabularyValues(self, values):\n                     title = item.title\n                 translated.append((title, item.value))\n             translated = sorted(\n-                translated,\n-                key=lambda x: normalizeString(safe_unicode(x[0]))\n+                translated, key=lambda x: normalizeString(safe_unicode(x[0]))\n             )\n-            for (title, value) in translated:\n-                field[\'values\'][value] = {\'title\': title}\n+            for title, value in translated:\n+                field["values"][value] = {"title": title}\n \n         return values\n \n     def mapOperations(self, values):\n         """Get the operations from the registry and put them in the key\n-           \'operators\' with the short name as key\n+        \'operators\' with the short name as key\n         """\n-        for field in values.get(self.prefix + \'.field\').values():\n-            fieldoperations = field.get(\'operations\', [])\n-            field[\'operators\'] = {}\n+        for field in values.get(self.prefix + ".field").values():\n+            fieldoperations = field.get("operations", [])\n+            field["operators"] = {}\n             for operation_key in fieldoperations:\n                 try:\n-                    field[\'operators\'][operation_key] = \\\n-                        values.get(operation_key)\n+                    field["operators"][operation_key] = values.get(operation_key)\n                 except KeyError:\n                     # invalid operation, probably doesn\'t exist, pass for now\n                     pass\n@@ -120,16 +117,16 @@ def mapOperations(self, values):\n \n     def mapSortableIndexes(self, values):\n         """Map sortable indexes"""\n-        catalog = getToolByName(getSite(), \'portal_catalog\')._catalog\n+        catalog = getToolByName(getSite(), "portal_catalog")._catalog\n         sortables = {}\n-        for key, field in values.get(\'%s.field\' % self.prefix).items():\n+        for key, field in values.get("%s.field" % self.prefix).items():\n             if (\n-                field[\'sortable\']\n+                field["sortable"]\n                 and key in catalog.indexes\n                 and not IZCTextIndex.providedBy(catalog.getIndex(key))\n             ):\n-                sortables[key] = values.get(\'{}.field.{}\'.format(self.prefix, key))\n-        values[\'sortable\'] = sortables\n+                sortables[key] = values.get("{}.field.{}".format(self.prefix, key))\n+        values["sortable"] = sortables\n         return values\n \n     def __call__(self):\n@@ -140,6 +137,6 @@ def __call__(self):\n         indexes = self.mapOperations(indexes)\n         indexes = self.mapSortableIndexes(indexes)\n         return {\n-            \'indexes\': indexes.get(\'%s.field\' % self.prefix),\n-            \'sortable_indexes\': indexes.get(\'sortable\'),\n+            "indexes": indexes.get("%s.field" % self.prefix),\n+            "sortable_indexes": indexes.get("sortable"),\n         }\ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex d9de045..d789cca 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,67 +1,56 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import applyProfile\n-from plone.app.testing import login\n-from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import (TEST_USER_ID, TEST_USER_NAME, PloneSandboxLayer,\n+                               applyProfile, login, setRoles)\n from plone.app.testing.layers import IntegrationTesting\n from plone.testing import z2\n from zope.configuration import xmlconfig\n \n \n class PloneAppQuerystringTestProfileLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.querystring.tests\n-        self.loadZCML(\'configure.zcml\', package=plone.app.querystring.tests)\n+\n+        self.loadZCML("configure.zcml", package=plone.app.querystring.tests)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.querystring.tests:registry\')\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        applyProfile(portal, "plone.app.querystring.tests:registry")\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n-        portal.acl_users.userFolderAddUser(\'admin\',\n-                                           \'secret\',\n-                                           [\'Manager\'],\n-                                           [])\n-        portal.portal_workflow.setChainForPortalTypes(\n-            (\'Document\',), \'plone_workflow\'\n-        )\n+        portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n+        portal.portal_workflow.setChainForPortalTypes(("Document",), "plone_workflow")\n \n \n-TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE = \\\n-    PloneAppQuerystringTestProfileLayer()\n+TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE = PloneAppQuerystringTestProfileLayer()\n \n \n class PloneAppQuerystringLayer(PloneAppQuerystringTestProfileLayer):\n-\n     def setUpZope(self, app, configurationContext):\n-        super().setUpZope(\n-            app, configurationContext)\n+        super().setUpZope(app, configurationContext)\n         import plone.app.querystring\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.querystring,\n-            context=configurationContext\n+            "configure.zcml", plone.app.querystring, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n         super().setUpPloneSite(portal)\n-        applyProfile(portal, \'plone.app.querystring:default\')\n+        applyProfile(portal, "plone.app.querystring:default")\n+\n \n PLONEAPPQUERYSTRING_FIXTURE = PloneAppQuerystringLayer()\n \n \n PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEAPPQUERYSTRING_FIXTURE,),\n-    name="PloneAppQuerystringLayer:Integration")\n+    bases=(PLONEAPPQUERYSTRING_FIXTURE,), name="PloneAppQuerystringLayer:Integration"\n+)\n \n TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE,),\n-    name="PloneAppQuerystringTestProfileLayer:Integration")\n+    name="PloneAppQuerystringTestProfileLayer:Integration",\n+)\n \n NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PloneSandboxLayer(),),\n-    name="UninstalledPloneAppQuerystringLayer:Integration")\n+    bases=(PloneSandboxLayer(),), name="UninstalledPloneAppQuerystringLayer:Integration"\n+)\ndiff --git a/plone/app/querystring/tests/index_testmodifier.py b/plone/app/querystring/tests/index_testmodifier.py\nindex 7a885da..6d9eb3e 100644\n--- a/plone/app/querystring/tests/index_testmodifier.py\n+++ b/plone/app/querystring/tests/index_testmodifier.py\n@@ -1,4 +1,5 @@\n from zope.interface import implementer\n+\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n \n \n@@ -15,7 +16,7 @@ class TitleFooIndexModifier:\n     """Test index modifier that check always Foo"""\n \n     def __call__(self, value):\n-        return (\'Title\', \'Foo\')\n+        return ("Title", "Foo")\n \n \n @implementer(IParsedQueryIndexModifier)\n@@ -26,5 +27,5 @@ class AbstractToDescriptionIndexModifier:\n     """\n \n     def __call__(self, value):\n-        value[\'query\'] = value[\'query\'].replace(\'e\', \'\')\n-        return (\'Description\', value)\n+        value["query"] = value["query"].replace("e", "")\n+        return ("Description", value)\ndiff --git a/plone/app/querystring/tests/registry_testdata.py b/plone/app/querystring/tests/registry_testdata.py\nindex 8a4ef2e..e1a3407 100644\n--- a/plone/app/querystring/tests/registry_testdata.py\n+++ b/plone/app/querystring/tests/registry_testdata.py\n@@ -1,65 +1,60 @@\n import os\n \n parsed_correct = {\n-    \'plone\': {\n-        \'app\': {\n-            \'querystring\': {\n-                \'field\': {\n-                    \'getId\': {\n-                        \'operations\': [\n-                            \'plone.app.querystring.operation.string.is\'],\n-                        \'group\': \'Metadata\',\n-                        \'description\': \'The short name of an item \'\n-                                       \'(used in the url)\',\n-                        \'vocabulary\': None,\n-                        \'title\': \'Short Name\',\n-                        \'enabled\': True,\n-                        \'sortable\': True,\n-                        \'fetch_vocabulary\': True\n+    "plone": {\n+        "app": {\n+            "querystring": {\n+                "field": {\n+                    "getId": {\n+                        "operations": ["plone.app.querystring.operation.string.is"],\n+                        "group": "Metadata",\n+                        "description": "The short name of an item " "(used in the url)",\n+                        "vocabulary": None,\n+                        "title": "Short Name",\n+                        "enabled": True,\n+                        "sortable": True,\n+                        "fetch_vocabulary": True,\n                     },\n-                    \'created\': {\n-                        \'operations\': [\n-                            \'plone.app.querystring.operation.date.lessThan\',\n-                            \'plone.app.querystring.operation.date.largerThan\'\n+                    "created": {\n+                        "operations": [\n+                            "plone.app.querystring.operation.date.lessThan",\n+                            "plone.app.querystring.operation.date.largerThan",\n                         ],\n-                        \'group\': \'Dates\',\n-                        \'description\': \'The time and date an item was \'\n-                                       \'created\',\n-                        \'vocabulary\': None,\n-                        \'title\': \'Creation Date\',\n-                        \'enabled\': True,\n-                        \'sortable\': False,\n-                        \'fetch_vocabulary\': True\n-                    }\n+                        "group": "Dates",\n+                        "description": "The time and date an item was " "created",\n+                        "vocabulary": None,\n+                        "title": "Creation Date",\n+                        "enabled": True,\n+                        "sortable": False,\n+                        "fetch_vocabulary": True,\n+                    },\n                 },\n-                \'operation\': {\n-                    \'date\': {\n-                        \'largerThan\': {\n-                            \'widget\': None,\n-                            \'operation\': \'plone.app.querystring.queryparser\'\n-                                         \'._largerThan\',\n-                            \'description\': \'Please use YYYY/MM/DD.\',\n-                            \'title\': \'after\'\n+                "operation": {\n+                    "date": {\n+                        "largerThan": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser"\n+                            "._largerThan",\n+                            "description": "Please use YYYY/MM/DD.",\n+                            "title": "after",\n+                        },\n+                        "lessThan": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser."\n+                            "_lessThan",\n+                            "description": "Please use YYYY/MM/DD.",\n+                            "title": "before",\n                         },\n-                        \'lessThan\': {\n-                            \'widget\': None,\n-                            \'operation\': \'plone.app.querystring.queryparser.\'\n-                                         \'_lessThan\',\n-                            \'description\': \'Please use YYYY/MM/DD.\',\n-                            \'title\': \'before\'\n-                        }\n                     },\n-                    \'string\': {\n-                        \'is\': {\n-                            \'widget\': None,\n-                            \'operation\': \'plone.app.querystring.queryparser.\'\n-                                         \'_equal\',\n-                            \'description\': \'Tip: you can use * to \'\n-                                           \'autocomplete.\',\n-                            \'title\': \'equals\'\n+                    "string": {\n+                        "is": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser." "_equal",\n+                            "description": "Tip: you can use * to " "autocomplete.",\n+                            "title": "equals",\n                         }\n-                    }\n-                }\n+                    },\n+                },\n             }\n         }\n     }\n@@ -70,6 +65,7 @@ def reg_load_xml(filename):\n     with open(os.path.join(os.path.dirname(__file__), filename)) as rx:\n         return rx.read()\n \n-minimal_correct_xml = reg_load_xml(\'registry_minimal_correct.xml\')\n-test_missing_operator_xml = reg_load_xml(\'registry_test_missing_operator.xml\')\n-test_vocabulary_xml = reg_load_xml(\'registry_test_vocabulary.xml\')\n+\n+minimal_correct_xml = reg_load_xml("registry_minimal_correct.xml")\n+test_missing_operator_xml = reg_load_xml("registry_test_missing_operator.xml")\n+test_vocabulary_xml = reg_load_xml("registry_test_vocabulary.xml")\ndiff --git a/plone/app/querystring/tests/testIndexmodifiers.py b/plone/app/querystring/tests/testIndexmodifiers.py\nindex 1480d0c..9fab2ca 100644\n--- a/plone/app/querystring/tests/testIndexmodifiers.py\n+++ b/plone/app/querystring/tests/testIndexmodifiers.py\n@@ -1,42 +1,43 @@\n+import unittest\n from datetime import datetime\n+\n from DateTime import DateTime\n-from plone.app.querystring.indexmodifiers import query_index_modifiers\n \n-import unittest\n+from plone.app.querystring.indexmodifiers import query_index_modifiers\n \n \n class TestIndexModifiers(unittest.TestCase):\n-\n     def test_subject_encoded(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': \'foobar\'}),\n-            (\'Subject\', {\'query\': \'foobar\'}))\n+            query_index_modifiers.Subject()({"query": "foobar"}),\n+            ("Subject", {"query": "foobar"}),\n+        )\n \n     def test_subject_encoded__list(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': [\'foobar\']}),\n-            (\'Subject\', {\'query\': [\'foobar\']}))\n+            query_index_modifiers.Subject()({"query": ["foobar"]}),\n+            ("Subject", {"query": ["foobar"]}),\n+        )\n \n     def test_subject_encoded__list_not(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'not\': [\'foobar\']}),\n-            (\'Subject\', {\'not\': [\'foobar\']}))\n+            query_index_modifiers.Subject()({"not": ["foobar"]}),\n+            ("Subject", {"not": ["foobar"]}),\n+        )\n \n     def test_date_modifier(self):\n         modifier = query_index_modifiers.start()\n         self.assertTrue(\n-            isinstance(modifier({\'query\': \'2010-01-01\'})[1][\'query\'], datetime)\n+            isinstance(modifier({"query": "2010-01-01"})[1]["query"], datetime)\n         )\n         self.assertTrue(\n-            isinstance(modifier({\'query\': \'01/01/2010\'})[1][\'query\'], datetime)\n+            isinstance(modifier({"query": "01/01/2010"})[1]["query"], datetime)\n         )\n \n     def test_date_modifier_list(self):\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': [\'01/01/2010\', \'01/01/2010\']}\n-        self.assertTrue(\n-            isinstance(modifier(query)[1][\'query\'][0], datetime)\n-        )\n+        query = {"query": ["01/01/2010", "01/01/2010"]}\n+        self.assertTrue(isinstance(modifier(query)[1]["query"][0], datetime))\n \n     def test_date_modifier_list_DateTime(self):\n         """Test a case with largerThanRelativeDate operatiors, where\n@@ -62,14 +63,10 @@ def test_date_modifier_list_DateTime(self):\n         }\n         """\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': [DateTime(\'01/01/2010\'), DateTime(\'01/01/2010\')]}\n-        self.assertTrue(\n-            isinstance(modifier(query)[1][\'query\'][0], DateTime)\n-        )\n+        query = {"query": [DateTime("01/01/2010"), DateTime("01/01/2010")]}\n+        self.assertTrue(isinstance(modifier(query)[1]["query"][0], DateTime))\n \n     def test_invalid_date(self):\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': \'foobar\'}\n-        self.assertEqual(\n-            modifier(query)[1][\'query\'], \'foobar\'\n-        )\n+        query = {"query": "foobar"}\n+        self.assertEqual(modifier(query)[1]["query"], "foobar")\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex 1cd9483..43b0bb0 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,15 +1,13 @@\n-from plone.app.querystring.testing import (\n-    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n-)\n+import unittest\n \n from zope.component import getMultiAdapter\n from zope.publisher.browser import TestRequest\n \n-import unittest\n+from plone.app.querystring.testing import \\\n+    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n \n class TestQuerybuilder(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -63,9 +61,7 @@ def testQueryBuilderNumberOfResultsView(self):\n     def testMakeQuery(self):\n         results = self.querybuilder._makequery(query=self.query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testQueryStringIs(self):\n         query = [\n@@ -112,9 +108,7 @@ def testMakeQueryWithSubject(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithSubjectNot(self):\n         self.folder.setSubject(["Ipsum"])\n@@ -144,9 +138,7 @@ def testMakeQueryWithMultipleSubject(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithMultipleSubjectNot(self):\n         self.folder.setSubject(["Ipsum"])\n@@ -176,9 +168,7 @@ def testMakeQueryWithSubjectWithSpecialCharacters(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n@@ -193,9 +183,7 @@ def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n@@ -210,9 +198,7 @@ def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithSearchableText(self):\n@@ -239,9 +225,7 @@ def testMakeQueryWithSearchableTextSpecialWordsAnd(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n         self.testpage.description = "This or that is the description"\n@@ -255,9 +239,7 @@ def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testQueryBuilderCustomQuery(self):\n         """Test, if custom queries are respected when getting the results."""\n@@ -345,7 +327,6 @@ def testQueryBuilderCustomQueryDoNotOverrideValues(self):\n \n \n class TestQuerybuilderResultTypes(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -401,7 +382,6 @@ def testQueryBuilderNonEmptyContentListingCustomQuery(self):\n \n \n class TestConfigurationFetcher(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/querystring/tests/testQueryBuilderModifiers.py b/plone/app/querystring/tests/testQueryBuilderModifiers.py\nindex aab9f31..1cec8f2 100644\n--- a/plone/app/querystring/tests/testQueryBuilderModifiers.py\n+++ b/plone/app/querystring/tests/testQueryBuilderModifiers.py\n@@ -1,15 +1,14 @@\n+import unittest\n+\n+from zope.component import getGlobalSiteManager, getMultiAdapter\n+from zope.publisher.browser import TestRequest\n+\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from plone.app.querystring.testing import \\\n     PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n-from zope.publisher.browser import TestRequest\n-from zope.component import getGlobalSiteManager\n-from zope.component import getMultiAdapter\n-\n from . import index_testmodifier\n \n-import unittest\n-\n \n class TestQuerybuilderExtended(unittest.TestCase):\n     """Testing the IParsedQueryIndexModifier registration feature"""\n@@ -17,42 +16,44 @@ class TestQuerybuilderExtended(unittest.TestCase):\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage1",\n-                                  title="Collectionstestpage")\n-        testpage1 = self.portal[\'collectionstestpage1\']\n-        self.portal.portal_workflow.doActionFor(testpage1, \'publish\')\n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage2",\n-                                  title="Foo",\n-                                  description="Collectionstestpage")\n-        testpage2 = self.portal[\'collectionstestpage2\']\n-        self.portal.portal_workflow.doActionFor(testpage2, \'publish\')\n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage3",\n-                                  title="Bar",\n-                                  description="Collctionststpag")\n-        testpage3 = self.portal[\'collectionstestpage3\']\n-        self.portal.portal_workflow.doActionFor(testpage3, \'publish\')\n+        self.portal.invokeFactory(\n+            "Document", "collectionstestpage1", title="Collectionstestpage"\n+        )\n+        testpage1 = self.portal["collectionstestpage1"]\n+        self.portal.portal_workflow.doActionFor(testpage1, "publish")\n+        self.portal.invokeFactory(\n+            "Document",\n+            "collectionstestpage2",\n+            title="Foo",\n+            description="Collectionstestpage",\n+        )\n+        testpage2 = self.portal["collectionstestpage2"]\n+        self.portal.portal_workflow.doActionFor(testpage2, "publish")\n+        self.portal.invokeFactory(\n+            "Document",\n+            "collectionstestpage3",\n+            title="Bar",\n+            description="Collctionststpag",\n+        )\n+        testpage3 = self.portal["collectionstestpage3"]\n+        self.portal.portal_workflow.doActionFor(testpage3, "publish")\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request),\n-            name=\'querybuilderresults\'\n+            (self.portal, self.request), name="querybuilderresults"\n         )\n \n     def testModifierNotCalled(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(\n-            index_testmodifier.SimpleFooIndexModifier(),\n-            name=\'Foo\'\n-        )\n-        query = [{\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        gsm.registerUtility(index_testmodifier.SimpleFooIndexModifier(), name="Foo")\n+        query = [\n+            {\n+                "i": "Title",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         try:\n             results = self.querybuilder(query=query)\n@@ -60,44 +61,38 @@ def testModifierNotCalled(self):\n             self.fail("Unexpected: index modifier has been called")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Collectionstestpage")\n-        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name=\'Foo\')\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Foo")\n \n     def testModifierChangeQuery(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(\n-            index_testmodifier.TitleFooIndexModifier(),\n-            name=\'Title\'\n-        )\n-        query = [{\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        gsm.registerUtility(index_testmodifier.TitleFooIndexModifier(), name="Title")\n+        query = [\n+            {\n+                "i": "Title",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         results = self.querybuilder(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Foo")\n-        gsm.unregisterUtility(\n-            provided=IParsedQueryIndexModifier,\n-            name=\'Title\'\n-        )\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Title")\n \n     def testModifierChangeQueryAndIndex(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n-            index_testmodifier.AbstractToDescriptionIndexModifier(),\n-            name=\'Abstract\'\n+            index_testmodifier.AbstractToDescriptionIndexModifier(), name="Abstract"\n         )\n-        query = [{\n-            \'i\': \'Abstract\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        query = [\n+            {\n+                "i": "Abstract",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         results = self.querybuilder(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Bar")\n-        gsm.unregisterUtility(\n-            provided=IParsedQueryIndexModifier,\n-            name=\'Abstract\'\n-        )\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Abstract")\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex 6ef6d6c..851d23d 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,30 +1,23 @@\n+import unittest\n+\n from DateTime import DateTime\n-from Products.CMFCore.interfaces import ICatalogTool\n-from Products.CMFCore.interfaces import IMembershipTool\n-from Products.CMFCore.interfaces import IURLTool\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.querystring import queryparser\n-from plone.registry import field\n-from plone.registry import Record\n-from plone.registry import Registry\n+from plone.registry import Record, Registry, field\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.interfaces import ICatalogTool, IMembershipTool, IURLTool\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n+from zope.component import getGlobalSiteManager, getSiteManager\n+from zope.interface import implementer\n \n+from plone.app.querystring import queryparser\n from plone.app.querystring.queryparser import Row\n from plone.app.querystring.testing import \\\n     NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n-from zope.component import getGlobalSiteManager\n-from zope.component import getSiteManager\n-from zope.interface import implementer\n-\n-import unittest\n-\n MOCK_SITE_ID = "site"\n \n \n class MockObject:\n-\n     def __init__(self, uid, path):\n         self.uid = uid\n         self.path = path\n@@ -40,36 +33,52 @@ def absolute_url(self):\n \n \n class MockCatalog:\n-\n     def unrestrictedSearchResults(self, query):\n-        uid = query.get(\'UID\')\n-        if uid == \'00000000000000001\':\n-            return [MockObject(uid=\'00000000000000001\',\n-                               path="/%s/foo" % MOCK_SITE_ID)]\n+        uid = query.get("UID")\n+        if uid == "00000000000000001":\n+            return [MockObject(uid="00000000000000001", path="/%s/foo" % MOCK_SITE_ID)]\n         raise NotImplementedError\n \n     def indexes(self):\n-        return [\'Title\', \'effectiveRange\', \'object_provides\',\n-                \'end\', \'Description\', \'is_folderish\', \'getId\',\n-                \'start\', \'meta_type\', \'is_default_page\', \'Date\',\n-                \'review_state\', \'portal_type\', \'expires\',\n-                \'allowedRolesAndUsers\', \'getObjPositionInParent\', \'path\',\n-                \'UID\', \'effective\', \'created\', \'Creator\',\n-                \'modified\', \'SearchableText\', \'sortable_title\',\n-                \'getRawRelatedItems\', \'Subject\']\n+        return [\n+            "Title",\n+            "effectiveRange",\n+            "object_provides",\n+            "end",\n+            "Description",\n+            "is_folderish",\n+            "getId",\n+            "start",\n+            "meta_type",\n+            "is_default_page",\n+            "Date",\n+            "review_state",\n+            "portal_type",\n+            "expires",\n+            "allowedRolesAndUsers",\n+            "getObjPositionInParent",\n+            "path",\n+            "UID",\n+            "effective",\n+            "created",\n+            "Creator",\n+            "modified",\n+            "SearchableText",\n+            "sortable_title",\n+            "getRawRelatedItems",\n+            "Subject",\n+        ]\n \n \n class MockPortalUrl:\n-\n     def getPortalPath(self):\n         return "/%s" % MOCK_SITE_ID\n \n     def getPortalObject(self):\n-        return MockObject(uid=\'00000000000000000\', path="/%s" % MOCK_SITE_ID)\n+        return MockObject(uid="00000000000000000", path="/%s" % MOCK_SITE_ID)\n \n \n class MockNavtreeProperties:\n-\n     def getProperty(self, name, default=""):\n         return ""\n \n@@ -80,7 +89,6 @@ class MockSiteProperties:\n \n @implementer(INavigationRoot, IPloneSiteRoot)\n class MockSite:\n-\n     def __init__(self, portal_membership=None):\n         sm = getSiteManager()\n         self.reference_catalog = MockCatalog()\n@@ -102,9 +110,8 @@ class MockNavRoot(MockObject):\n \n \n class MockUser:\n-\n     def __init__(self, username=None, roles=None):\n-        self.username = \'Anonymous User\'\n+        self.username = "Anonymous User"\n         if username:\n             self.username = username\n         self.roles = roles or "Anonymous"\n@@ -117,7 +124,6 @@ def getRoles(self):\n \n \n class MockPortal_membership:\n-\n     def __init__(self, user):\n         self.user = user\n \n@@ -126,7 +132,6 @@ def getAuthenticatedMember(self):\n \n \n class TestQueryParserBase(unittest.TestCase):\n-\n     layer = NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -134,11 +139,13 @@ def setUp(self):\n         self.registry = Registry()\n         gsm.registerUtility(self.registry, IRegistry)\n         self.setFunctionForOperation(\n-            \'plone.app.querystring.operation.string.is.operation\',\n-            \'plone.app.querystring.queryparser._equal\')\n+            "plone.app.querystring.operation.string.is.operation",\n+            "plone.app.querystring.queryparser._equal",\n+        )\n         self.setFunctionForOperation(\n-            \'plone.app.querystring.operation.string.path.operation\',\n-            \'plone.app.querystring.queryparser._absolutePath\')\n+            "plone.app.querystring.operation.string.path.operation",\n+            "plone.app.querystring.queryparser._absolutePath",\n+        )\n \n     def setFunctionForOperation(self, operation, function):\n         function_field = field.ASCIILine(title="Operator")\n@@ -148,311 +155,273 @@ def setFunctionForOperation(self, operation, function):\n \n \n class TestQueryParser(TestQueryParserBase):\n-\n     def test_exact_title(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(parsed, {\'Title\': {\'query\': \'Welcome to Plone\'}})\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+        )\n+        self.assertEqual(parsed, {"Title": {"query": "Welcome to Plone"}})\n \n     def test_sort_on_known(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n         parsed = queryparser.parseFormquery(\n-            MockSite(), [data, ],\n-            sort_on=\'sortable_title\',\n-            sort_order=\'reverse\')\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+            sort_on="sortable_title",\n+            sort_order="reverse",\n+        )\n         self.assertEqual(\n-            parsed, {\'Title\': {\'query\': \'Welcome to Plone\'},\n-                     \'sort_on\': \'sortable_title\',\n-                     \'sort_order\': \'reverse\'})\n+            parsed,\n+            {\n+                "Title": {"query": "Welcome to Plone"},\n+                "sort_on": "sortable_title",\n+                "sort_order": "reverse",\n+            },\n+        )\n \n     def test_sort_on_unknown(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n         parsed = queryparser.parseFormquery(\n-            MockSite(), [data, ],\n-            sort_on=\'unknown\',\n-            sort_order=\'reverse\')\n-        self.assertEqual(\n-            parsed, {\'Title\': {\'query\': \'Welcome to Plone\'}})\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+            sort_on="unknown",\n+            sort_order="reverse",\n+        )\n+        self.assertEqual(parsed, {"Title": {"query": "Welcome to Plone"}})\n \n     def test_path_explicit(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}})\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+        )\n+        self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n     def test_path_computed(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'00000000000000001\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "00000000000000001",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}})\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+        )\n+        self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n     def test_path_with_depth_computed(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo::2\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo::2",\n         }\n \n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(parsed, {\n-            \'path\': {\n-                \'query\': [\'/%s/foo\' % MOCK_SITE_ID],\n-                \'depth\': 2\n-            }\n-        })\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [\n+                data,\n+            ],\n+        )\n+        self.assertEqual(\n+            parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID], "depth": 2}}\n+        )\n \n     def test_multi_path(self):\n         data_1 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo",\n         }\n         data_2 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/bar\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/bar",\n         }\n \n         parsed = queryparser.parseFormquery(MockSite(), [data_1, data_2])\n         self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\n-                \'/%s/foo\' % MOCK_SITE_ID,\n-                \'/%s/bar\' % MOCK_SITE_ID]}})\n+            parsed,\n+            {"path": {"query": ["/%s/foo" % MOCK_SITE_ID, "/%s/bar" % MOCK_SITE_ID]}},\n+        )\n \n     def test_multi_path_with_depth_computet(self):\n         data_1 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo::2\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo::2",\n         }\n         data_2 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/bar::5\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/bar::5",\n         }\n \n         parsed = queryparser.parseFormquery(MockSite(), [data_1, data_2])\n         self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\n-                \'/%s/foo\' % MOCK_SITE_ID,\n-                \'/%s/bar\' % MOCK_SITE_ID], \'depth\': 2}})\n+            parsed,\n+            {\n+                "path": {\n+                    "query": ["/%s/foo" % MOCK_SITE_ID, "/%s/bar" % MOCK_SITE_ID],\n+                    "depth": 2,\n+                }\n+            },\n+        )\n \n \n class TestQueryGenerators(TestQueryParserBase):\n-\n     def test__between(self):\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=[\'2009/08/12\', \'2009/08/14\']\n+            index="modified", operator="_between", values=["2009/08/12", "2009/08/14"]\n         )\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2009/08/12\', \'2009/08/14\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {\n+            "modified": {"query": ["2009/08/12", "2009/08/14"], "range": "minmax"}\n+        }\n         self.assertEqual(parsed, expected)\n \n     def test__between_reversed_dates(self):\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=[\'2009/08/14\', \'2009/08/12\']\n+            index="modified", operator="_between", values=["2009/08/14", "2009/08/12"]\n         )\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2009/08/12\', \'2009/08/14\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {\n+            "modified": {"query": ["2009/08/12", "2009/08/14"], "range": "minmax"}\n+        }\n         self.assertEqual(parsed, expected)\n \n     def test__between_empty_input(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=\'\'\n-        )\n+        data = Row(index="modified", operator="_between", values="")\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'\', \'\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {"modified": {"query": ["", ""], "range": "minmax"}}\n         self.assertEqual(parsed, expected)\n \n     def test__equal(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_equal\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_equal", values="2010/03/18")\n         parsed = queryparser._equal(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\'}}\n+        expected = {"modified": {"query": "2010/03/18"}}\n         self.assertEqual(parsed, expected)\n \n         data = Row(\n-            index=\'modified\',\n-            operator=\'_equal\',\n-            values=[\'2010/03/18\', \'2010/03/19\']\n+            index="modified", operator="_equal", values=["2010/03/18", "2010/03/19"]\n         )\n         parsed = queryparser._equal(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2010/03/18\', \'2010/03/19\']}}\n+        expected = {"modified": {"query": ["2010/03/18", "2010/03/19"]}}\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=b"20")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20}}\n+        expected = {"modified": {"query": 20}}\n         self.assertEqual(parsed, expected)\n \n         # list of bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[b\'20\', b\'21\']\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=[b"20", b"21"])\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [20, 21]}}\n+        expected = {"modified": {"query": [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=\'20\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values="20")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20}}\n+        expected = {"modified": {"query": 20}}\n         self.assertEqual(parsed, expected)\n \n         # list of texts\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[\'20\', \'21\']\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=["20", "21"])\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [20, 21]}}\n+        expected = {"modified": {"query": [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n         # bad text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values="bad")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None}}\n+        expected = {"modified": {"query": None}}\n         self.assertEqual(parsed, expected)\n \n         # list of bad text\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[b\'bad\', \'text\', \'values\']\n+            index="modified", operator="_intEqual", values=[b"bad", "text", "values"]\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None}}\n+        expected = {"modified": {"query": None}}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThan(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_lessThan\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_lessThan", values="2010/03/18")\n         parsed = queryparser._lessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\', \'range\': \'max\'}}\n+        expected = {"modified": {"query": "2010/03/18", "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values=b"20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        expected = {"modified": {"query": 20, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values="20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        expected = {"modified": {"query": 20, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n         # bad value\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values="bad")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None, \'range\': \'max\'}}\n+        expected = {"modified": {"query": None, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n     def test__largerThan(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_largerThan\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_largerThan", values="2010/03/18")\n         parsed = queryparser._largerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\', \'range\': \'min\'}}\n+        expected = {"modified": {"query": "2010/03/18", "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values=b"20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        expected = {"modified": {"query": 20, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values="20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        expected = {"modified": {"query": 20, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n         # bad value\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values="bad")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None, \'range\': \'min\'}}\n+        expected = {"modified": {"query": None, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n     def test__currentUser(self):\n@@ -460,26 +429,18 @@ def test__currentUser(self):\n         u = MockUser()\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(\n-            index=\'Creator\',\n-            operator=\'_currentUser\',\n-            values=None\n-        )\n+        data = Row(index="Creator", operator="_currentUser", values=None)\n         parsed = queryparser._currentUser(context, data)\n-        expected = {\'Creator\': {\'query\': \'Anonymous User\'}}\n+        expected = {"Creator": {"query": "Anonymous User"}}\n         self.assertEqual(parsed, expected)\n \n         # Logged in user \'admin\'\n-        u = MockUser(username=\'admin\')\n+        u = MockUser(username="admin")\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(\n-            index=\'Creator\',\n-            operator=\'_currentUser\',\n-            values=None\n-        )\n+        data = Row(index="Creator", operator="_currentUser", values=None)\n         parsed = queryparser._currentUser(context, data)\n-        expected = {\'Creator\': {\'query\': \'admin\'}}\n+        expected = {"Creator": {"query": "admin"}}\n         self.assertEqual(parsed, expected)\n \n     def test__showInactive(self):\n@@ -487,24 +448,20 @@ def test__showInactive(self):\n         u = MockUser()\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(index=\'show_inactive\',\n-                   operator=\'_showInactive\',\n-                   values=["Manager"])\n+        data = Row(index="show_inactive", operator="_showInactive", values=["Manager"])\n         parsed = queryparser._showInactive(context, data)\n         # False is expected since Anonymous doesn\'t have Manager role\n-        expected = {\'show_inactive\': False}\n+        expected = {"show_inactive": False}\n         self.assertEqual(parsed, expected)\n \n         # Logged in user \'admin\'\n-        u = MockUser(username=\'admin\', roles=("Manager",))\n+        u = MockUser(username="admin", roles=("Manager",))\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(index=\'show_inactive\',\n-                   operator=\'_showInactive\',\n-                   values=["Manager"])\n+        data = Row(index="show_inactive", operator="_showInactive", values=["Manager"])\n         parsed = queryparser._showInactive(context, data)\n         # True is expected since Admin should have Manager role\n-        expected = {\'show_inactive\': True}\n+        expected = {"show_inactive": True}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThanRelativeDate(self):\n@@ -512,12 +469,8 @@ def test__lessThanRelativeDate(self):\n         now = DateTime()\n         mydate = now + days\n         expected_dates = [now.earliestTime(), mydate.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_lessThanRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_lessThanRelativeDate", values=days)\n         parsed = queryparser._lessThanRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -526,12 +479,8 @@ def test__moreThanRelativeDate(self):\n         now = DateTime()\n         mydate = now - days\n         expected_dates = [mydate.earliestTime(), now.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_moreThanRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_moreThanRelativeDate", values=days)\n         parsed = queryparser._moreThanRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -539,12 +488,8 @@ def test__beforeRelativeDate(self):\n         days = 365\n         now = DateTime()\n         mydate = now.earliestTime() - days\n-        expected = {\'modified\': {\'query\': mydate, \'range\': \'max\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_beforeRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": mydate, "range": "max"}}\n+        data = Row(index="modified", operator="_beforeRelativeDate", values=days)\n         parsed = queryparser._beforeRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -552,155 +497,117 @@ def test__afterRelativeDate(self):\n         days = 2\n         now = DateTime()\n         mydate = now.earliestTime() + days\n-        expected = {\'effective\': {\'query\': mydate, \'range\': \'min\'}}\n-        data = Row(\n-            index=\'effective\',\n-            operator=\'_afterRelativeDate\',\n-            values=days\n-        )\n+        expected = {"effective": {"query": mydate, "range": "min"}}\n+        data = Row(index="effective", operator="_afterRelativeDate", values=days)\n         parsed = queryparser._afterRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n     def test__today(self):\n         now = DateTime()\n         expected_dates = [now.earliestTime(), now.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_today\',\n-            values=expected_dates\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_today", values=expected_dates)\n         parsed = queryparser._today(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n     def test__path(self):\n         # absoute path from plone site root\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=\'/news/\'\n-        )\n+        data = Row(index="path", operator="_path", values="/news/")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/%s/news/\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/news/" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # by uid\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=\'00000000000000001\'\n-        )\n+        data = Row(index="path", operator="_path", values="00000000000000001")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n     def test__navigationPath(self):\n         # absoute path from plone site root\n         # Search base\n-        context = MockObject(uid=\'00000000000000001\',\n-                             path="/%s/foo/bar" % MOCK_SITE_ID)\n+        context = MockObject(uid="00000000000000001", path="/%s/foo/bar" % MOCK_SITE_ID)\n         # Nav root\n-        context.__parent__ = MockNavRoot(uid=\'00000000000000002\',\n-                                         path="/%s/foo" % MOCK_SITE_ID)\n+        context.__parent__ = MockNavRoot(\n+            uid="00000000000000002", path="/%s/foo" % MOCK_SITE_ID\n+        )\n         # Plone root\n         context.__parent__.__parent__ = MockSite()\n         # Zope root\n-        context.__parent__.__parent__.__parent__ = \\\n-            MockObject(uid=\'00000000000000004\', path="/")\n-\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_navigationPath\',\n-            values=\'/bar/\'\n+        context.__parent__.__parent__.__parent__ = MockObject(\n+            uid="00000000000000004", path="/"\n         )\n+\n+        data = Row(index="path", operator="_navigationPath", values="/bar/")\n         parsed = queryparser._navigationPath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/foo/bar/\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/foo/bar/" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n     def test__relativePath(self):\n         # build test navtree\n-        context = MockObject(uid=\'00000000000000001\',\n-                             path="/%s/bar/fizz" % MOCK_SITE_ID)\n-        context.__parent__ = MockObject(uid=\'00000000000000002\',\n-                                        path="/%s/bar" % MOCK_SITE_ID)\n+        context = MockObject(\n+            uid="00000000000000001", path="/%s/bar/fizz" % MOCK_SITE_ID\n+        )\n+        context.__parent__ = MockObject(\n+            uid="00000000000000002", path="/%s/bar" % MOCK_SITE_ID\n+        )\n         # Plone root\n         context.__parent__.__parent__ = MockSite()\n         # Zope root\n-        context.__parent__.__parent__.__parent__ = \\\n-            MockObject(uid=\'00000000000000004\', path="/")\n+        context.__parent__.__parent__.__parent__ = MockObject(\n+            uid="00000000000000004", path="/"\n+        )\n         # ploneroot sub folder\n-        context.__parent__.__parent__.ham = \\\n-            MockObject(uid=\'00000000000000005\',\n-                       path="/%s/ham" % MOCK_SITE_ID)\n+        context.__parent__.__parent__.ham = MockObject(\n+            uid="00000000000000005", path="/%s/ham" % MOCK_SITE_ID\n+        )\n         # collection subfolder\n-        context.__parent__.egg = MockObject(uid=\'00000000000000006\',\n-                                            path="/%s/bar/egg" % MOCK_SITE_ID)\n+        context.__parent__.egg = MockObject(\n+            uid="00000000000000006", path="/%s/bar/egg" % MOCK_SITE_ID\n+        )\n \n         # show my siblings\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'..\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="..")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/bar" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # walk upwards\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'../../\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="../../")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # if you walk beyond INavigatinRoot it should stop and return\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../../../\')\n+        data = Row(index="path", operator="_relativePath", values="../../../")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # reach a subfolder on Plone root\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../../ham\')\n+        data = Row(index="path", operator="_relativePath", values="../../ham")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/ham\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/ham" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # reach a subfolder on parent of collection\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../egg\')\n+        data = Row(index="path", operator="_relativePath", values="../egg")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar/egg\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/bar/egg" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # relative path with depth\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'..::2\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="..::2")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar\' % MOCK_SITE_ID], \'depth\': 2}}\n+        expected = {"path": {"query": ["/%s/bar" % MOCK_SITE_ID], "depth": 2}}\n         self.assertEqual(parsed, expected)\n \n     def test_getPathByUID(self):\n-        actual = queryparser.getPathByUID(MockSite(), \'00000000000000001\')\n-        self.assertEqual(actual, \'/site/foo\')\n-        \n+        actual = queryparser.getPathByUID(MockSite(), "00000000000000001")\n+        self.assertEqual(actual, "/site/foo")\n+\n     def test_objStartsWithSiteId(self):\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=f\'/{MOCK_SITE_ID}-news/\'\n-        )\n+        data = Row(index="path", operator="_path", values=f"/{MOCK_SITE_ID}-news/")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [f\'/{MOCK_SITE_ID}/{MOCK_SITE_ID}-news/\']}}\n+        expected = {"path": {"query": [f"/{MOCK_SITE_ID}/{MOCK_SITE_ID}-news/"]}}\n         self.assertEqual(parsed, expected)\n-        \ndiff --git a/plone/app/querystring/tests/testRegistryIntegration.py b/plone/app/querystring/tests/testRegistryIntegration.py\nindex d8cd085..da3cec7 100644\n--- a/plone/app/querystring/tests/testRegistryIntegration.py\n+++ b/plone/app/querystring/tests/testRegistryIntegration.py\n@@ -1,51 +1,52 @@\n+import unittest\n+\n from plone.app.querystring.testing import \\\n     PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n-import unittest\n-\n \n class TestOperationDefinitions(unittest.TestCase):\n-\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_string_equality(self):\n         registry = self.portal.portal_registry\n \n         prefix = "plone.app.querystring.operation.string.is"\n-        self.assertTrue(prefix + \'.title\' in registry)\n+        self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Is")\n-        self.assertEqual(registry[prefix + ".description"],\n-                         \'Tip: you can use * to autocomplete.\')\n-        self.assertEqual(registry[prefix + ".operation"],\n-                         \'plone.app.querystring.queryparser._equal\')\n+        self.assertEqual(\n+            registry[prefix + ".description"], "Tip: you can use * to autocomplete."\n+        )\n+        self.assertEqual(\n+            registry[prefix + ".operation"], "plone.app.querystring.queryparser._equal"\n+        )\n \n     def test_date_lessthan(self):\n         registry = self.portal.portal_registry\n-        prefix = \'plone.app.querystring.operation.date.lessThan\'\n+        prefix = "plone.app.querystring.operation.date.lessThan"\n \n         self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Before date")\n-        self.assertEqual(registry[prefix + ".description"],\n-                         \'Please use YYYY/MM/DD.\')\n-        self.assertEqual(registry[prefix + ".operation"],\n-                         \'plone.app.querystring.queryparser._lessThan\')\n+        self.assertEqual(registry[prefix + ".description"], "Please use YYYY/MM/DD.")\n+        self.assertEqual(\n+            registry[prefix + ".operation"],\n+            "plone.app.querystring.queryparser._lessThan",\n+        )\n \n \n class TestFieldDefinitions(unittest.TestCase):\n-\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_getId(self):\n         registry = self.portal.portal_registry\n-        prefix = \'plone.app.querystring.field.getId\'\n+        prefix = "plone.app.querystring.field.getId"\n         self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Short name (id)")\n@@ -53,14 +54,16 @@ def test_getId(self):\n         operations = registry[prefix + ".operations"]\n         self.assertEqual(len(operations), 2)\n \n-        equal = \'plone.app.querystring.operation.string.is\'\n+        equal = "plone.app.querystring.operation.string.is"\n         self.assertTrue(equal in operations)\n \n-        exclude = \'plone.app.querystring.operation.string.isNot\'\n+        exclude = "plone.app.querystring.operation.string.isNot"\n         self.assertTrue(exclude in operations)\n \n-        self.assertEqual(registry[prefix + ".description"],\n-                         "The short name of an item (used in the url)")\n+        self.assertEqual(\n+            registry[prefix + ".description"],\n+            "The short name of an item (used in the url)",\n+        )\n         self.assertEqual(registry[prefix + ".enabled"], True)\n         self.assertEqual(registry[prefix + ".sortable"], True)\n         self.assertEqual(registry[prefix + ".group"], "Metadata")\n@@ -71,8 +74,8 @@ def test_getobjpositioninparent_largerthan(self):\n         Names not matching for operations getObjPositionInParent\n         see also https://github.com/plone/plone.app.querystring/issues/22\n         """\n-        key = \'plone.app.querystring.field.getObjPositionInParent.operations\'\n-        operation = \'plone.app.querystring.operation.int.largerThan\'\n+        key = "plone.app.querystring.field.getObjPositionInParent.operations"\n+        operation = "plone.app.querystring.operation.int.largerThan"\n         registry = self.portal.portal_registry\n \n         # check if operation is used for getObjPositionInParent\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex d0191da..6a7b85c 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -1,5 +1,7 @@\n-from plone.registry.interfaces import IRegistry\n+import unittest\n+\n from plone.registry import Registry\n+from plone.registry.interfaces import IRegistry\n from zope.component import getGlobalSiteManager\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n@@ -11,15 +13,11 @@\n     PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n from plone.app.querystring.tests import registry_testdata as td\n \n-import unittest\n-\n \n @implementer(IVocabularyFactory)\n class TestVocabulary:\n-\n     def __call__(self, context):\n-        return SimpleVocabulary([\n-            SimpleVocabulary.createTerm(\'foo\', \'foo\', \'bar\')])\n+        return SimpleVocabulary([SimpleVocabulary.createTerm("foo", "foo", "bar")])\n \n \n class TestRegistryReader(unittest.TestCase):\n@@ -27,11 +25,14 @@ class TestRegistryReader(unittest.TestCase):\n \n     def setUp(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(TestVocabulary(), IVocabularyFactory,\n-                            \'plone.app.querystring.tests.testvocabulary\')\n+        gsm.registerUtility(\n+            TestVocabulary(),\n+            IVocabularyFactory,\n+            "plone.app.querystring.tests.testvocabulary",\n+        )\n \n     def getLogger(self, value):\n-        return \'plone.app.querystring\'\n+        return "plone.app.querystring"\n \n     def shouldPurge(self):\n         return False\n@@ -39,6 +40,7 @@ def shouldPurge(self):\n     def createRegistry(self, xml):\n         """Create a registry from a minimal set of fields and operators"""\n         from plone.app.registry.exportimport.handler import RegistryImporter\n+\n         gsm = getGlobalSiteManager()\n         self.registry = Registry()\n         gsm.registerUtility(self.registry, IRegistry)\n@@ -49,15 +51,15 @@ def createRegistry(self, xml):\n \n     def test_dotted_dict(self):\n         """test the dotted dict type which is used by the registry reader to\n-           access dicts in dicts by dotted names. (eg field.created.operations)\n-           it should raise a keyerror when an invalid key is used\n-           TODO : DottedDict should be in a separate package\n+        access dicts in dicts by dotted names. (eg field.created.operations)\n+        it should raise a keyerror when an invalid key is used\n+        TODO : DottedDict should be in a separate package\n         """\n-        dd = DottedDict({\'my\': {\'dotted\': {\'name\': \'value\'}}})\n-        self.assertEqual(dd.get(\'my.dotted.name\'), \'value\')\n-        self.assertRaises(KeyError, dd.get, \'my.dotted.wrongname\')\n-        dd = DottedDict({\'my\': \'value\'})\n-        self.assertEqual(dd.get(\'my\'), \'value\')\n+        dd = DottedDict({"my": {"dotted": {"name": "value"}}})\n+        self.assertEqual(dd.get("my.dotted.name"), "value")\n+        self.assertRaises(KeyError, dd.get, "my.dotted.wrongname")\n+        dd = DottedDict({"my": "value"})\n+        self.assertEqual(dd.get("my"), "value")\n \n     def test_parse_registry(self):\n         """tests if the parsed registry data is correct"""\n@@ -68,15 +70,14 @@ def test_parse_registry(self):\n \n     def test_get_vocabularies(self):\n         """tests if getVocabularyValues is returning the correct vocabulary\n-           values in the correct format\n+        values in the correct format\n         """\n         registry = self.createRegistry(td.test_vocabulary_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.getVocabularyValues(result)\n-        vocabulary_result = result.get(\n-            \'plone.app.querystring.field.reviewState.values\')\n-        self.assertEqual(vocabulary_result, {\'foo\': {\'title\': \'bar\'}})\n+        vocabulary_result = result.get("plone.app.querystring.field.reviewState.values")\n+        self.assertEqual(vocabulary_result, {"foo": {"title": "bar"}})\n \n     def test_map_operations_clean(self):\n         """tests if mapOperations is getting all operators correctly"""\n@@ -84,10 +85,8 @@ def test_map_operations_clean(self):\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n-        operations = result.get(\n-            \'plone.app.querystring.field.created.operations\')\n-        operators = result.get(\n-            \'plone.app.querystring.field.created.operators\')\n+        operations = result.get("plone.app.querystring.field.created.operations")\n+        operators = result.get("plone.app.querystring.field.created.operators")\n         for operation in operations:\n             self.assertTrue(operation in operators)\n \n@@ -97,43 +96,36 @@ def test_map_operations_missing(self):\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n-        operators = result.get(\n-            \'plone.app.querystring.field.created.operators\').keys()\n-        self.assertTrue(\n-            \'plone.app.querystring.operation.date.lessThan\'\n-            in operators\n-        )\n-        self.assertFalse(\n-            \'plone.app.querystring.operation.date.largerThan\'\n-            in operators\n-        )\n+        operators = result.get("plone.app.querystring.field.created.operators").keys()\n+        self.assertTrue("plone.app.querystring.operation.date.lessThan" in operators)\n+        self.assertFalse("plone.app.querystring.operation.date.largerThan" in operators)\n \n     def test_sortable_indexes(self):\n         """tests if sortable indexes from the registry will be available in\n-           the parsed registry\n+        the parsed registry\n         """\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n         result = reader.mapSortableIndexes(result)\n-        sortables = result[\'sortable\']\n+        sortables = result["sortable"]\n \n         # there should be one sortable index\n         self.assertEqual(len(sortables), 1)\n \n         # confirm that every sortable really is sortable\n         for field in sortables.values():\n-            self.assertEqual(field[\'sortable\'], True)\n+            self.assertEqual(field["sortable"], True)\n \n     def test_registry_adapter(self):\n         """tests the __call__ method of the IQuerystringRegistryReader\n-           adapter\n+        adapter\n         """\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader()\n         self.assertEqual(\n             sorted(list(result.keys())),\n-            [\'indexes\', \'sortable_indexes\'],\n+            ["indexes", "sortable_indexes"],\n         )\ndiff --git a/plone/app/querystring/upgrades.py b/plone/app/querystring/upgrades.py\nindex c6e0d19..88797e8 100644\n--- a/plone/app/querystring/upgrades.py\n+++ b/plone/app/querystring/upgrades.py\n@@ -1,12 +1,12 @@\n-from Products.CMFCore.utils import getUtility\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getUtility\n \n \n def upgrade_1_to_2_typo_in_registry(context):\n     registry = getUtility(IRegistry)\n-    name = \'plone.app.querystring.field.getObjPositionInParent.operations\'\n-    wrong_value = \'plone.app.querystring.operation.int.greaterThan\'\n-    right_value = \'plone.app.querystring.operation.int.largerThan\'\n+    name = "plone.app.querystring.field.getObjPositionInParent.operations"\n+    wrong_value = "plone.app.querystring.operation.int.greaterThan"\n+    right_value = "plone.app.querystring.operation.int.largerThan"\n     values = registry.get(name)\n     if not values:\n         return\n@@ -18,22 +18,14 @@ def upgrade_1_to_2_typo_in_registry(context):\n \n \n def fix_select_all_existing_collections(context, query=None):\n-\n     if query is None:\n         query = {"portal_type": "Collection"}\n \n-    indexes_to_fix = [\n-        \'portal_type\',\n-        \'review_state\',\n-        \'Creator\',\n-        \'Subject\'\n-    ]\n+    indexes_to_fix = ["portal_type", "review_state", "Creator", "Subject"]\n     operator_mapping = {\n         # old -> new\n-        "plone.app.querystring.operation.selection.is":\n-            "plone.app.querystring.operation.selection.any",\n-        "plone.app.querystring.operation.string.is":\n-            "plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.selection.is": "plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.string.is": "plone.app.querystring.operation.selection.any",\n     }\n     catalog = context.portal_catalog\n     brains = catalog.unrestrictedSearchResults(**query)\n@@ -42,14 +34,14 @@ def fix_select_all_existing_collections(context, query=None):\n         changed = False\n         obj = brain.getObject()\n         fixed_querystring = list()\n-        for querystring in (obj.query or []):\n+        for querystring in obj.query or []:\n             # transform querystring to dict\n             if not isinstance(querystring, dict):\n                 querystring = dict(querystring)\n-            if querystring[\'i\'] in indexes_to_fix:\n+            if querystring["i"] in indexes_to_fix:\n                 for old_operator, new_operator in operator_mapping.items():\n-                    if querystring[\'o\'] == old_operator:\n-                        querystring[\'o\'] = new_operator\n+                    if querystring["o"] == old_operator:\n+                        querystring["o"] = new_operator\n                         changed = True\n             fixed_querystring.append(querystring)\n \n@@ -59,8 +51,9 @@ def fix_select_all_existing_collections(context, query=None):\n \n \n def fix_select_all_syndicatable_collections(context):\n-\n     return fix_select_all_existing_collections(\n         context,\n-        query={"object_provides": "plone.app.contenttypes.behaviors.collection.ISyndicatableCollection"}  # noqa\n+        query={\n+            "object_provides": "plone.app.contenttypes.behaviors.collection.ISyndicatableCollection"\n+        },  # noqa\n     )\ndiff --git a/setup.py b/setup.py\nindex 1153078..1b20e0b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,20 +1,21 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages, setup\n \n-version = \'2.0.2.dev0\'\n+version = "2.0.2.dev0"\n \n long_description = open("README.rst").read() + "\\n"\n long_description += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.querystring\',\n+    name="plone.app.querystring",\n     version=version,\n     description=(\n         "A queryparser, querybuilder and extra helper tools, to "\n         "parse stored queries to actual results, used in "\n-        "new style Plone collections"),\n+        "new style Plone collections"\n+    ),\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n+        "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n@@ -25,40 +26,40 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'collection queries\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.app.querystring\',\n-    license=\'GPL version 2\',\n+    keywords="collection queries",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.app.querystring",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'DateTime\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'plone.app.contentlisting\',\n-        \'plone.app.layout\',\n-        \'plone.app.registry>=1.1\',\n-        \'plone.batching\',\n-        \'plone.registry\',\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.globalrequest\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n+        "DateTime",\n+        "Products.CMFCore",\n+        "Products.CMFPlone",\n+        "plone.app.contentlisting",\n+        "plone.app.layout",\n+        "plone.app.registry>=1.1",\n+        "plone.batching",\n+        "plone.registry",\n+        "python-dateutil",\n+        "setuptools",\n+        "six",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.globalrequest",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.testing",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T19:48:51+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/64ce03e83902b97207383171ad0b5cf53380776a

do not import from CMFPlone

Files changed:
M plone/app/querystring/hiddenprofiles.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/tests/testQueryParser.py
M setup.py

b'diff --git a/plone/app/querystring/hiddenprofiles.py b/plone/app/querystring/hiddenprofiles.py\nindex 56e0351..9100790 100644\n--- a/plone/app/querystring/hiddenprofiles.py\n+++ b/plone/app/querystring/hiddenprofiles.py\n@@ -1,5 +1,4 @@\n-from Products.CMFPlone.interfaces import \\\n-    INonInstallable as INonInstallableProfiles\n+from plone.base.interfaces import INonInstallable as INonInstallableProfiles\n from zope.interface import implementer\n \n \ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex f27a124..98e60b5 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -4,11 +4,11 @@\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.utils import base_hasattr\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.utils import base_hasattr\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex 851d23d..f5e589b 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -2,10 +2,10 @@\n \n from DateTime import DateTime\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.registry import Record, Registry, field\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ICatalogTool, IMembershipTool, IURLTool\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import getGlobalSiteManager, getSiteManager\n from zope.interface import implementer\n \ndiff --git a/setup.py b/setup.py\nindex 1b20e0b..84fa29f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,16 +38,15 @@\n     python_requires=">=3.8",\n     install_requires=[\n         "DateTime",\n-        "Products.CMFCore",\n-        "Products.CMFPlone",\n         "plone.app.contentlisting",\n         "plone.app.layout",\n         "plone.app.registry>=1.1",\n+        "plone.base",\n         "plone.batching",\n         "plone.registry",\n+        "Products.CMFCore",\n         "python-dateutil",\n         "setuptools",\n-        "six",\n         "zope.component",\n         "zope.dottedname",\n         "zope.globalrequest",\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T19:50:58+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/84e6ee110d3c6d012b326e85823e66f9335ee6b6

fix isort

Files changed:
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/interfaces.py
M plone/app/querystring/querybuilder.py
M plone/app/querystring/querymodifiers.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/registryreader.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/index_testmodifier.py
M plone/app/querystring/tests/registry_testdata.py
M plone/app/querystring/tests/testIndexmodifiers.py
M plone/app/querystring/tests/testQueryBuilder.py
M plone/app/querystring/tests/testQueryBuilderModifiers.py
M plone/app/querystring/tests/testQueryParser.py
M plone/app/querystring/tests/testRegistryIntegration.py
M plone/app/querystring/tests/testRegistryReader.py
M pyproject.toml
M setup.py

b'diff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex be1e5da..5a3e39e 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -1,8 +1,8 @@\n-import six\n from dateutil.parser import parse\n+from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from zope.interface import implementer\n \n-from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n+import six\n \n \n @implementer(IParsedQueryIndexModifier)\ndiff --git a/plone/app/querystring/interfaces.py b/plone/app/querystring/interfaces.py\nindex 88328a9..897d494 100644\n--- a/plone/app/querystring/interfaces.py\n+++ b/plone/app/querystring/interfaces.py\n@@ -1,5 +1,9 @@\n from zope.interface import Interface\n-from zope.schema import Bool, DottedName, List, Text, TextLine\n+from zope.schema import Bool\n+from zope.schema import DottedName\n+from zope.schema import List\n+from zope.schema import Text\n+from zope.schema import TextLine\n \n \n class IQuerystringRegistryReader(Interface):\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 224730a..355e8ce 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -1,21 +1,23 @@\n-import json\n-import logging\n from operator import itemgetter\n-\n from plone.app.contentlisting.interfaces import IContentListing\n+from plone.app.querystring import queryparser\n+from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n+from plone.app.querystring.interfaces import IQueryModifier\n+from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from plone.batching import Batch\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.search import munge_search_term\n-from zope.component import getMultiAdapter, getUtilitiesFor, getUtility\n+from zope.component import getMultiAdapter\n+from zope.component import getUtilitiesFor\n+from zope.component import getUtility\n from zope.i18n import translate\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n \n-from plone.app.querystring import queryparser\n-from plone.app.querystring.interfaces import (IParsedQueryIndexModifier,\n-                                              IQueryModifier,\n-                                              IQuerystringRegistryReader)\n+import json\n+import logging\n+\n \n logger = logging.getLogger("plone.app.querystring")\n _ = MessageFactory("plone")\ndiff --git a/plone/app/querystring/querymodifiers.py b/plone/app/querystring/querymodifiers.py\nindex f373757..f0b6e52 100644\n--- a/plone/app/querystring/querymodifiers.py\n+++ b/plone/app/querystring/querymodifiers.py\n@@ -1,6 +1,5 @@\n-from zope.interface import provider\n-\n from plone.app.querystring.interfaces import IQueryModifier\n+from zope.interface import provider\n \n \n @provider(IQueryModifier)\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 98e60b5..7bbe7d3 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,6 +1,5 @@\n-from collections import namedtuple\n-\n from Acquisition import aq_parent\n+from collections import namedtuple\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from plone.app.layout.navigation.root import getNavigationRoot\n@@ -12,6 +11,7 @@\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \n+\n Row = namedtuple("Row", ["index", "operator", "values"])\n PATH_INDICES = {"path"}\n \ndiff --git a/plone/app/querystring/registryreader.py b/plone/app/querystring/registryreader.py\nindex a704d29..68d343f 100644\n--- a/plone/app/querystring/registryreader.py\n+++ b/plone/app/querystring/registryreader.py\n@@ -1,9 +1,8 @@\n-import logging\n from collections import OrderedDict\n-\n-import six\n+from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import normalizeString, safe_unicode\n+from Products.CMFPlone.utils import normalizeString\n+from Products.CMFPlone.utils import safe_unicode\n from Products.ZCTextIndex.interfaces import IZCTextIndex\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n@@ -13,7 +12,8 @@\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n-from plone.app.querystring.interfaces import IQuerystringRegistryReader\n+import logging\n+\n \n logger = logging.getLogger("plone.app.querystring")\n \ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex d789cca..d3ff66d 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,6 +1,10 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import (TEST_USER_ID, TEST_USER_NAME, PloneSandboxLayer,\n-                               applyProfile, login, setRoles)\n+from plone.app.testing import applyProfile\n+from plone.app.testing import login\n+from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.app.testing.layers import IntegrationTesting\n from plone.testing import z2\n from zope.configuration import xmlconfig\ndiff --git a/plone/app/querystring/tests/index_testmodifier.py b/plone/app/querystring/tests/index_testmodifier.py\nindex 6d9eb3e..f8326d3 100644\n--- a/plone/app/querystring/tests/index_testmodifier.py\n+++ b/plone/app/querystring/tests/index_testmodifier.py\n@@ -1,6 +1,5 @@\n-from zope.interface import implementer\n-\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n+from zope.interface import implementer\n \n \n @implementer(IParsedQueryIndexModifier)\ndiff --git a/plone/app/querystring/tests/registry_testdata.py b/plone/app/querystring/tests/registry_testdata.py\nindex e1a3407..d17be76 100644\n--- a/plone/app/querystring/tests/registry_testdata.py\n+++ b/plone/app/querystring/tests/registry_testdata.py\n@@ -1,5 +1,6 @@\n import os\n \n+\n parsed_correct = {\n     "plone": {\n         "app": {\ndiff --git a/plone/app/querystring/tests/testIndexmodifiers.py b/plone/app/querystring/tests/testIndexmodifiers.py\nindex 9fab2ca..76bdddc 100644\n--- a/plone/app/querystring/tests/testIndexmodifiers.py\n+++ b/plone/app/querystring/tests/testIndexmodifiers.py\n@@ -1,10 +1,9 @@\n-import unittest\n from datetime import datetime\n-\n from DateTime import DateTime\n-\n from plone.app.querystring.indexmodifiers import query_index_modifiers\n \n+import unittest\n+\n \n class TestIndexModifiers(unittest.TestCase):\n     def test_subject_encoded(self):\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex 43b0bb0..050e189 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,10 +1,10 @@\n-import unittest\n-\n+from plone.app.querystring.testing import (\n+    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n+)\n from zope.component import getMultiAdapter\n from zope.publisher.browser import TestRequest\n \n-from plone.app.querystring.testing import \\\n-    TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+import unittest\n \n \n class TestQuerybuilder(unittest.TestCase):\ndiff --git a/plone/app/querystring/tests/testQueryBuilderModifiers.py b/plone/app/querystring/tests/testQueryBuilderModifiers.py\nindex 1cec8f2..75a2ea2 100644\n--- a/plone/app/querystring/tests/testQueryBuilderModifiers.py\n+++ b/plone/app/querystring/tests/testQueryBuilderModifiers.py\n@@ -1,13 +1,11 @@\n-import unittest\n-\n-from zope.component import getGlobalSiteManager, getMultiAdapter\n-from zope.publisher.browser import TestRequest\n-\n+from . import index_testmodifier\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+from zope.component import getGlobalSiteManager\n+from zope.component import getMultiAdapter\n+from zope.publisher.browser import TestRequest\n \n-from . import index_testmodifier\n+import unittest\n \n \n class TestQuerybuilderExtended(unittest.TestCase):\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex f5e589b..d6f03a1 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,18 +1,24 @@\n-import unittest\n-\n from DateTime import DateTime\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.querystring import queryparser\n+from plone.app.querystring.queryparser import Row\n+from plone.app.querystring.testing import (\n+    NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n+)\n from plone.base.interfaces import IPloneSiteRoot\n-from plone.registry import Record, Registry, field\n+from plone.registry import field\n+from plone.registry import Record\n+from plone.registry import Registry\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.interfaces import ICatalogTool, IMembershipTool, IURLTool\n-from zope.component import getGlobalSiteManager, getSiteManager\n+from Products.CMFCore.interfaces import ICatalogTool\n+from Products.CMFCore.interfaces import IMembershipTool\n+from Products.CMFCore.interfaces import IURLTool\n+from zope.component import getGlobalSiteManager\n+from zope.component import getSiteManager\n from zope.interface import implementer\n \n-from plone.app.querystring import queryparser\n-from plone.app.querystring.queryparser import Row\n-from plone.app.querystring.testing import \\\n-    NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+import unittest\n+\n \n MOCK_SITE_ID = "site"\n \ndiff --git a/plone/app/querystring/tests/testRegistryIntegration.py b/plone/app/querystring/tests/testRegistryIntegration.py\nindex da3cec7..4a965e2 100644\n--- a/plone/app/querystring/tests/testRegistryIntegration.py\n+++ b/plone/app/querystring/tests/testRegistryIntegration.py\n@@ -1,7 +1,6 @@\n-import unittest\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+import unittest\n \n \n class TestOperationDefinitions(unittest.TestCase):\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex 6a7b85c..bb8a1cc 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -1,5 +1,7 @@\n-import unittest\n-\n+from plone.app.querystring.interfaces import IQuerystringRegistryReader\n+from plone.app.querystring.registryreader import DottedDict\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+from plone.app.querystring.tests import registry_testdata as td\n from plone.registry import Registry\n from plone.registry.interfaces import IRegistry\n from zope.component import getGlobalSiteManager\n@@ -7,11 +9,7 @@\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n \n-from plone.app.querystring.interfaces import IQuerystringRegistryReader\n-from plone.app.querystring.registryreader import DottedDict\n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n-from plone.app.querystring.tests import registry_testdata as td\n+import unittest\n \n \n @implementer(IVocabularyFactory)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..1bfbd57 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,9 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "black"\n+force_alphabetical_sort = true\n+force_single_line = true\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 84fa29f..e0f5b5f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import find_packages, setup\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = "2.0.2.dev0"\n \n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T20:07:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/64236404e43ceb12c52ab1c8064a6567a01e5931

noi more six

Files changed:
M plone/app/querystring/indexmodifiers/query_index_modifiers.py

b'diff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 5a3e39e..86e1f59 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -2,8 +2,6 @@\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IParsedQueryIndexModifier)\n class Subject:\n@@ -60,8 +58,6 @@ class base:\n     def __call__(self, value):\n         def _normalize(val):\n             """Encode value, parse dates."""\n-            if six.PY2 and isinstance(val, str):\n-                val = val.encode("utf-8")\n \n             if isinstance(val, str):\n                 try:\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T20:08:32+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/49a7b8de32259ff7222d768f8db5d62c94c28d7a

interfaces from plone.base

Files changed:
M plone/app/querystring/profiles.zcml
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/plone/app/querystring/profiles.zcml b/plone/app/querystring/profiles.zcml\nindex c80de26..7a559ee 100644\n--- a/plone/app/querystring/profiles.zcml\n+++ b/plone/app/querystring/profiles.zcml\n@@ -6,7 +6,7 @@\n     <utility\n         factory=".hiddenprofiles.HiddenProfiles"\n         name="plone.app.querystring"\n-        provides="Products.CMFPlone.interfaces.INonInstallable"\n+        provides="plone.base.interfaces.INonInstallable"\n         />\n \n     <genericsetup:registerProfile\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex d6f03a1..4e449af 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,5 +1,5 @@\n from DateTime import DateTime\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.base.interfaces import INavigationRoot\n from plone.app.querystring import queryparser\n from plone.app.querystring.queryparser import Row\n from plone.app.querystring.testing import (\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T20:09:01+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/5bfb90677d50679925c2c331699dc099479b00a6

copy over munge_search_terms to avoid circular dependency

Files changed:
M plone/app/querystring/querybuilder.py
M pyproject.toml

b'diff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 355e8ce..273d759 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -7,7 +7,6 @@\n from plone.batching import Batch\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.search import munge_search_term\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n@@ -17,11 +16,56 @@\n \n import json\n import logging\n+import re\n \n \n logger = logging.getLogger("plone.app.querystring")\n _ = MessageFactory("plone")\n \n+# We should accept both a simple space, unicode u\'\\u0020 but also a\n+# multi-space, so called \'waji-kankaku\', unicode u\'\\u3000\'\n+_MULTISPACE = \'\\u3000\'\n+_BAD_CHARS = (\'?\', \'-\', \'+\', \'*\', _MULTISPACE)\n+\n+def _quote_chars(s):\n+    # We need to quote parentheses when searching text indices\n+    if \'(\' in s:\n+        s = s.replace(\'(\', \'"("\')\n+    if \')\' in s:\n+        s = s.replace(\')\', \'")"\')\n+    if _MULTISPACE in s:\n+        s = s.replace(_MULTISPACE, \' \')\n+    return s\n+\n+\n+def _quote(term):\n+    # The terms and, or and not must be wrapped in quotes to avoid\n+    # being parsed as logical query atoms.\n+    if term.lower() in (\'and\', \'or\', \'not\'):\n+        term = \'"%s"\' % term\n+    return term\n+\n+def munge_search_term(query):\n+    for char in _BAD_CHARS:\n+        query = query.replace(char, \' \')\n+\n+    # extract quoted phrases first\n+    quoted_phrases = re.findall(r\'"([^"]*)"\', query)\n+    r = []\n+    for qp in quoted_phrases:\n+        # remove from original query\n+        query = query.replace(f\'"{qp}"\', "")\n+        # replace with cleaned leading/trailing whitespaces\n+        # and skip empty phrases\n+        clean_qp = qp.strip()\n+        if not clean_qp:\n+            continue\n+        r.append(f\'"{clean_qp}"\')\n+\n+    r += map(_quote, query.strip().split())\n+    r = " AND ".join(r)\n+    r = _quote_chars(r) + (\'*\' if r and not r.endswith(\'"\') else \'\')\n+    return r\n \n class ContentListingView(BrowserView):\n     """BrowserView for displaying query results"""\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 1bfbd57..53d6112 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -24,3 +24,4 @@ profile = "black"\n force_alphabetical_sort = true\n force_single_line = true\n lines_after_imports = 2\n+\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-10T20:24:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/894b3f95a4ae28fd44d30068785ca90023e3d32c

document changes

Files changed:
A news/119.bugfix

b'diff --git a/news/119.bugfix b/news/119.bugfix\nnew file mode 100644\nindex 0000000..c72196a\n--- /dev/null\n+++ b/news/119.bugfix\n@@ -0,0 +1,3 @@\n+Housecleaning: pyupgrade, isort, black, remove six, move imports from CMFPlone to plone.base, copy munge_search_terms from CMFPlone to here to avoid dependency on CMFPlone.\n+[jensens]\n+\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-12T04:30:58+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/46d99ede381711e613efef754f3de3fb4b013b06

improve style

Co-authored-by: Gil Forcada Codinachs &lt;gil.gnome@gmail.com&gt;

Files changed:
M plone/app/querystring/querybuilder.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/registryreader.py
M plone/app/querystring/tests/registry_testdata.py
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 273d759..f72226e 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -24,30 +24,32 @@\n \n # We should accept both a simple space, unicode u\'\\u0020 but also a\n # multi-space, so called \'waji-kankaku\', unicode u\'\\u3000\'\n-_MULTISPACE = \'\\u3000\'\n-_BAD_CHARS = (\'?\', \'-\', \'+\', \'*\', _MULTISPACE)\n+_MULTISPACE = "\\u3000"\n+_BAD_CHARS = ("?", "-", "+", "*", _MULTISPACE)\n+\n \n def _quote_chars(s):\n     # We need to quote parentheses when searching text indices\n-    if \'(\' in s:\n-        s = s.replace(\'(\', \'"("\')\n-    if \')\' in s:\n-        s = s.replace(\')\', \'")"\')\n+    if "(" in s:\n+        s = s.replace("(", \'"("\')\n+    if ")" in s:\n+        s = s.replace(")", \'")"\')\n     if _MULTISPACE in s:\n-        s = s.replace(_MULTISPACE, \' \')\n+        s = s.replace(_MULTISPACE, " ")\n     return s\n \n \n def _quote(term):\n     # The terms and, or and not must be wrapped in quotes to avoid\n     # being parsed as logical query atoms.\n-    if term.lower() in (\'and\', \'or\', \'not\'):\n+    if term.lower() in ("and", "or", "not"):\n         term = \'"%s"\' % term\n     return term\n \n+\n def munge_search_term(query):\n     for char in _BAD_CHARS:\n-        query = query.replace(char, \' \')\n+        query = query.replace(char, " ")\n \n     # extract quoted phrases first\n     quoted_phrases = re.findall(r\'"([^"]*)"\', query)\n@@ -64,9 +66,10 @@ def munge_search_term(query):\n \n     r += map(_quote, query.strip().split())\n     r = " AND ".join(r)\n-    r = _quote_chars(r) + (\'*\' if r and not r.endswith(\'"\') else \'\')\n+    r = _quote_chars(r) + ("*" if r and not r.endswith(\'"\') else "")\n     return r\n \n+\n class ContentListingView(BrowserView):\n     """BrowserView for displaying query results"""\n \ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 7bbe7d3..40fbad8 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -79,11 +79,7 @@ def _excludes(context, row):\n \n \n def _equal(context, row):\n-    return {\n-        row.index: {\n-            "query": row.values,\n-        }\n-    }\n+    return {row.index: {"query": row.values}}\n \n \n def _all(context, row):\n@@ -102,27 +98,15 @@ def _intEqual(context, row):\n             values = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    return {\n-        row.index: {\n-            "query": values,\n-        }\n-    }\n+    return {row.index: {"query": values}}\n \n \n def _isTrue(context, row):\n-    return {\n-        row.index: {\n-            "query": True,\n-        }\n-    }\n+    return {row.index: {"query": True}}\n \n \n def _isFalse(context, row):\n-    return {\n-        row.index: {\n-            "query": False,\n-        }\n-    }\n+    return {row.index: {"query": False}}\n \n \n def _between(context, row):\ndiff --git a/plone/app/querystring/registryreader.py b/plone/app/querystring/registryreader.py\nindex 68d343f..ef245f7 100644\n--- a/plone/app/querystring/registryreader.py\n+++ b/plone/app/querystring/registryreader.py\n@@ -125,7 +125,7 @@ def mapSortableIndexes(self, values):\n                 and key in catalog.indexes\n                 and not IZCTextIndex.providedBy(catalog.getIndex(key))\n             ):\n-                sortables[key] = values.get("{}.field.{}".format(self.prefix, key))\n+                sortables[key] = values.get(f"{self.prefix}.field.{key}")\n         values["sortable"] = sortables\n         return values\n \ndiff --git a/plone/app/querystring/tests/registry_testdata.py b/plone/app/querystring/tests/registry_testdata.py\nindex d17be76..68964b3 100644\n--- a/plone/app/querystring/tests/registry_testdata.py\n+++ b/plone/app/querystring/tests/registry_testdata.py\n@@ -50,8 +50,8 @@\n                     "string": {\n                         "is": {\n                             "widget": None,\n-                            "operation": "plone.app.querystring.queryparser." "_equal",\n-                            "description": "Tip: you can use * to " "autocomplete.",\n+                            "operation": "plone.app.querystring.queryparser._equal",\n+                            "description": "Tip: you can use * to autocomplete.",\n                             "title": "equals",\n                         }\n                     },\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex 4e449af..a68239d 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,10 +1,10 @@\n from DateTime import DateTime\n-from plone.base.interfaces import INavigationRoot\n from plone.app.querystring import queryparser\n from plone.app.querystring.queryparser import Row\n from plone.app.querystring.testing import (\n     NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n )\n+from plone.base.interfaces import INavigationRoot\n from plone.base.interfaces import IPloneSiteRoot\n from plone.registry import field\n from plone.registry import Record\n@@ -167,12 +167,7 @@ def test_exact_title(self):\n             "o": "plone.app.querystring.operation.string.is",\n             "v": "Welcome to Plone",\n         }\n-        parsed = queryparser.parseFormquery(\n-            MockSite(),\n-            [\n-                data,\n-            ],\n-        )\n+        parsed = queryparser.parseFormquery(MockSite(), [data])\n         self.assertEqual(parsed, {"Title": {"query": "Welcome to Plone"}})\n \n     def test_sort_on_known(self):\n@@ -183,9 +178,7 @@ def test_sort_on_known(self):\n         }\n         parsed = queryparser.parseFormquery(\n             MockSite(),\n-            [\n-                data,\n-            ],\n+            [data],\n             sort_on="sortable_title",\n             sort_order="reverse",\n         )\n@@ -206,9 +199,7 @@ def test_sort_on_unknown(self):\n         }\n         parsed = queryparser.parseFormquery(\n             MockSite(),\n-            [\n-                data,\n-            ],\n+            [data],\n             sort_on="unknown",\n             sort_order="reverse",\n         )\n@@ -222,9 +213,7 @@ def test_path_explicit(self):\n         }\n         parsed = queryparser.parseFormquery(\n             MockSite(),\n-            [\n-                data,\n-            ],\n+            [data],\n         )\n         self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n@@ -236,9 +225,7 @@ def test_path_computed(self):\n         }\n         parsed = queryparser.parseFormquery(\n             MockSite(),\n-            [\n-                data,\n-            ],\n+            [data],\n         )\n         self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n@@ -251,9 +238,7 @@ def test_path_with_depth_computed(self):\n \n         parsed = queryparser.parseFormquery(\n             MockSite(),\n-            [\n-                data,\n-            ],\n+            [data],\n         )\n         self.assertEqual(\n             parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID], "depth": 2}}\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-12T04:35:00+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/860472309ed24ed744af93253909afbfcd7ab295

plone isort profile

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 53d6112..8f2dfd2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -20,8 +20,4 @@ name = "Bug fixes:"\n showcontent = true\n \n [tool.isort]\n-profile = "black"\n-force_alphabetical_sort = true\n-force_single_line = true\n-lines_after_imports = 2\n-\n+profile = "plone"\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-03-12T22:56:00+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/8856512d7ed52da71a73f1f54072c7c66e73d02c

Merge pull request #119 from plone/housecleaning

Housecleaning

Files changed:
A news/119.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/querystring/__init__.py
M plone/app/querystring/hiddenprofiles.py
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/interfaces.py
M plone/app/querystring/profiles.zcml
M plone/app/querystring/querybuilder.py
M plone/app/querystring/querymodifiers.py
M plone/app/querystring/queryparser.py
M plone/app/querystring/registryreader.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/index_testmodifier.py
M plone/app/querystring/tests/registry_testdata.py
M plone/app/querystring/tests/testIndexmodifiers.py
M plone/app/querystring/tests/testQueryBuilder.py
M plone/app/querystring/tests/testQueryBuilderModifiers.py
M plone/app/querystring/tests/testQueryParser.py
M plone/app/querystring/tests/testRegistryIntegration.py
M plone/app/querystring/tests/testRegistryReader.py
M plone/app/querystring/upgrades.py
M pyproject.toml
M setup.py

b'diff --git a/news/119.bugfix b/news/119.bugfix\nnew file mode 100644\nindex 0000000..c72196a\n--- /dev/null\n+++ b/news/119.bugfix\n@@ -0,0 +1,3 @@\n+Housecleaning: pyupgrade, isort, black, remove six, move imports from CMFPlone to plone.base, copy munge_search_terms from CMFPlone to here to avoid dependency on CMFPlone.\n+[jensens]\n+\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/querystring/__init__.py b/plone/app/querystring/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/app/querystring/__init__.py\n+++ b/plone/app/querystring/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/querystring/hiddenprofiles.py b/plone/app/querystring/hiddenprofiles.py\nindex 7b6c066..9100790 100644\n--- a/plone/app/querystring/hiddenprofiles.py\n+++ b/plone/app/querystring/hiddenprofiles.py\n@@ -1,28 +1,25 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.interfaces import INonInstallable as \\\n-    INonInstallableProfiles\n+from plone.base.interfaces import INonInstallable as INonInstallableProfiles\n from zope.interface import implementer\n \n \n @implementer(INonInstallableProfiles)\n-class HiddenProfiles(object):\n-\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """Returns a list of profiles that should not be available for\n-           installation at portal creation time.\n+        installation at portal creation time.\n \n-           The usual use-case is to prevent extension profiles from showing up,\n-           that will be installed as part of the site creation anyways.\n+        The usual use-case is to prevent extension profiles from showing up,\n+        that will be installed as part of the site creation anyways.\n         """\n         return [\n-            \'plone.app.querystring:default\',\n-            \'plone.app.querystring:upgrade_to_3\',\n-            \'plone.app.querystring:upgrade_to_5\',\n-            \'plone.app.querystring:upgrade_to_6\',\n-            \'plone.app.querystring:upgrade_to_7\',\n-            \'plone.app.querystring:upgrade_to_8\',\n-            \'plone.app.querystring:upgrade_to_9\',\n-            \'plone.app.querystring:upgrade_to_10\',\n-            \'plone.app.querystring:upgrade_to_11\',\n-            \'plone.app.querystring:upgrade_to_14\',\n+            "plone.app.querystring:default",\n+            "plone.app.querystring:upgrade_to_3",\n+            "plone.app.querystring:upgrade_to_5",\n+            "plone.app.querystring:upgrade_to_6",\n+            "plone.app.querystring:upgrade_to_7",\n+            "plone.app.querystring:upgrade_to_8",\n+            "plone.app.querystring:upgrade_to_9",\n+            "plone.app.querystring:upgrade_to_10",\n+            "plone.app.querystring:upgrade_to_11",\n+            "plone.app.querystring:upgrade_to_14",\n         ]\ndiff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 050caef..86e1f59 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -1,14 +1,10 @@\n-# -*- coding: utf8 -*-\n from dateutil.parser import parse\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n from zope.interface import implementer\n \n \n-import six\n-\n-\n @implementer(IParsedQueryIndexModifier)\n-class Subject(object):\n+class Subject:\n \n     """\n     The Subject field in Plone currently uses a utf-8 encoded string.\n@@ -22,19 +18,18 @@ class Subject(object):\n     """\n \n     def __call__(self, value):\n-        if not six.PY2:\n-            return (\'Subject\', value)\n+        return ("Subject", value)\n \n         # Get the query operator\n         op = None\n-        if \'query\' in value:\n-            op = \'query\'\n-        elif \'not\' in value:\n-            op = \'not\'\n+        if "query" in value:\n+            op = "query"\n+        elif "not" in value:\n+            op = "not"\n \n         query = value[op]\n         # query can be a unicode string or a list of unicode strings.\n-        if isinstance(query, six.text_type):\n+        if isinstance(query, str):\n             query = query.encode("utf-8")\n         elif isinstance(query, list):\n             # We do not want to change the collections\' own query string,\n@@ -44,31 +39,27 @@ def __call__(self, value):\n             # unicode strings\n             i = 0\n             for item in copy_of_query:\n-                if isinstance(item, six.text_type):\n+                if isinstance(item, str):\n                     copy_of_query[i] = item.encode("utf-8")\n                 i += 1\n             query = copy_of_query\n         else:\n             pass\n         value[op] = query\n-        return (\'Subject\', value)\n+        return ("Subject", value)\n \n \n @implementer(IParsedQueryIndexModifier)\n-class base(object):\n+class base:\n     """DateIndex query modifier\n     see Products.PluginIndexes.DateIndex.DateIndex.DateIndex._convert function\n     """\n \n     def __call__(self, value):\n-\n         def _normalize(val):\n-            """Encode value, parse dates.\n-            """\n-            if six.PY2 and isinstance(val, six.text_type):\n-                val = val.encode("utf-8")\n+            """Encode value, parse dates."""\n \n-            if isinstance(val, six.string_types):\n+            if isinstance(val, str):\n                 try:\n                     val = parse(val)\n                 except (ValueError, AttributeError):\n@@ -76,7 +67,7 @@ def _normalize(val):\n \n             return val\n \n-        query = value[\'query\']\n+        query = value["query"]\n         query = _normalize(query)\n \n         if isinstance(query, list):\n@@ -85,7 +76,7 @@ def _normalize(val):\n                 aux.append(_normalize(item))\n             query = aux\n \n-        value[\'query\'] = query\n+        value["query"] = query\n         return (self.__class__.__name__, value)\n \n \ndiff --git a/plone/app/querystring/interfaces.py b/plone/app/querystring/interfaces.py\nindex 394e8dc..897d494 100644\n--- a/plone/app/querystring/interfaces.py\n+++ b/plone/app/querystring/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.schema import Bool\n from zope.schema import DottedName\n@@ -8,36 +7,32 @@\n \n \n class IQuerystringRegistryReader(Interface):\n-    """Adapts a registry object to parse the querystring data\n-    """\n+    """Adapts a registry object to parse the querystring data"""\n \n     def __call__():\n-        """Return query string in dict-format.\n-        """\n+        """Return query string in dict-format."""\n \n \n class IQueryOperation(Interface):\n-    title = TextLine(title=u"Title")\n-    description = Text(title=u"Description")\n-    operation = TextLine(title=u"Operation")\n-    widget = TextLine(title=u"Widget")\n+    title = TextLine(title="Title")\n+    description = Text(title="Description")\n+    operation = TextLine(title="Operation")\n+    widget = TextLine(title="Widget")\n \n \n class IQueryField(Interface):\n-    title = TextLine(title=u"Title")\n-    description = Text(title=u"Description")\n-    enabled = Bool(title=u"Enabled")\n-    sortable = Bool(title=u"Sortable")\n-    fetch_vocabulary = Bool(title=u"Fetch vocabulary", default=True)\n-    operations = List(title=u"Operations",\n-                      value_type=DottedName(title=u"Operation ID"))\n-    vocabulary = TextLine(title=u"Vocabulary")\n-    group = TextLine(title=u"Group")\n+    title = TextLine(title="Title")\n+    description = Text(title="Description")\n+    enabled = Bool(title="Enabled")\n+    sortable = Bool(title="Sortable")\n+    fetch_vocabulary = Bool(title="Fetch vocabulary", default=True)\n+    operations = List(title="Operations", value_type=DottedName(title="Operation ID"))\n+    vocabulary = TextLine(title="Vocabulary")\n+    group = TextLine(title="Group")\n \n \n class IParsedQueryIndexModifier(Interface):\n-    """Transform a parsed query index in something different\n-    """\n+    """Transform a parsed query index in something different"""\n \n     def __call__(value):\n         """\n@@ -48,8 +43,7 @@ def __call__(value):\n \n \n class IQueryModifier(Interface):\n-    """Modifies a query in order to inject specific or change given criteria.\n-    """\n+    """Modifies a query in order to inject specific or change given criteria."""\n \n     def __call__(query):\n         """\ndiff --git a/plone/app/querystring/profiles.zcml b/plone/app/querystring/profiles.zcml\nindex c80de26..7a559ee 100644\n--- a/plone/app/querystring/profiles.zcml\n+++ b/plone/app/querystring/profiles.zcml\n@@ -6,7 +6,7 @@\n     <utility\n         factory=".hiddenprofiles.HiddenProfiles"\n         name="plone.app.querystring"\n-        provides="Products.CMFPlone.interfaces.INonInstallable"\n+        provides="plone.base.interfaces.INonInstallable"\n         />\n \n     <genericsetup:registerProfile\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 8fe3fdd..f72226e 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from operator import itemgetter\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.querystring import queryparser\n@@ -8,7 +7,6 @@\n from plone.batching import Batch\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.search import munge_search_term\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n from zope.component import getUtility\n@@ -18,10 +16,59 @@\n \n import json\n import logging\n+import re\n+\n \n logger = logging.getLogger("plone.app.querystring")\n _ = MessageFactory("plone")\n \n+# We should accept both a simple space, unicode u\'\\u0020 but also a\n+# multi-space, so called \'waji-kankaku\', unicode u\'\\u3000\'\n+_MULTISPACE = "\\u3000"\n+_BAD_CHARS = ("?", "-", "+", "*", _MULTISPACE)\n+\n+\n+def _quote_chars(s):\n+    # We need to quote parentheses when searching text indices\n+    if "(" in s:\n+        s = s.replace("(", \'"("\')\n+    if ")" in s:\n+        s = s.replace(")", \'")"\')\n+    if _MULTISPACE in s:\n+        s = s.replace(_MULTISPACE, " ")\n+    return s\n+\n+\n+def _quote(term):\n+    # The terms and, or and not must be wrapped in quotes to avoid\n+    # being parsed as logical query atoms.\n+    if term.lower() in ("and", "or", "not"):\n+        term = \'"%s"\' % term\n+    return term\n+\n+\n+def munge_search_term(query):\n+    for char in _BAD_CHARS:\n+        query = query.replace(char, " ")\n+\n+    # extract quoted phrases first\n+    quoted_phrases = re.findall(r\'"([^"]*)"\', query)\n+    r = []\n+    for qp in quoted_phrases:\n+        # remove from original query\n+        query = query.replace(f\'"{qp}"\', "")\n+        # replace with cleaned leading/trailing whitespaces\n+        # and skip empty phrases\n+        clean_qp = qp.strip()\n+        if not clean_qp:\n+            continue\n+        r.append(f\'"{clean_qp}"\')\n+\n+    r += map(_quote, query.strip().split())\n+    r = " AND ".join(r)\n+    r = _quote_chars(r) + ("*" if r and not r.endswith(\'"\') else "")\n+    return r\n+\n \n class ContentListingView(BrowserView):\n     """BrowserView for displaying query results"""\n@@ -35,7 +82,7 @@ class QueryBuilder(BrowserView):\n     fetching configuration or results"""\n \n     def __init__(self, context, request):\n-        super(QueryBuilder, self).__init__(context, request)\n+        super().__init__(context, request)\n         self._results = None\n \n     def __call__(\n@@ -111,9 +158,9 @@ def html_results(self, query):\n             limit=10,\n         )\n \n-        return getMultiAdapter(\n-            (results, self.request), name="display_query_results"\n-        )(**options)\n+        return getMultiAdapter((results, self.request), name="display_query_results")(\n+            **options\n+        )\n \n     def _makequery(\n         self,\n@@ -149,16 +196,12 @@ def _makequery(\n \n         # Check for valid indexes\n         catalog = getToolByName(self.context, "portal_catalog")\n-        valid_indexes = [\n-            index for index in parsedquery if index in catalog.indexes()\n-        ]\n+        valid_indexes = [index for index in parsedquery if index in catalog.indexes()]\n \n         # We\'ll ignore any invalid index, but will return an empty set if none\n         # of the indexes are valid.\n         if not valid_indexes:\n-            logger.warning(\n-                "Using empty query because there are no valid indexes used."\n-            )\n+            logger.warning("Using empty query because there are no valid indexes used.")\n             parsedquery = {}\n \n         empty_query = not parsedquery  # store emptiness\n@@ -208,8 +251,8 @@ def number_of_results(self, query):\n         results = self(query, sort_on=None, sort_order=None, limit=1)\n         return translate(\n             _(\n-                u"batch_x_items_matching_your_criteria",\n-                default=u"${number} items matching your search terms.",\n+                "batch_x_items_matching_your_criteria",\n+                default="${number} items matching your search terms.",\n                 mapping={"number": results.actual_result_count},\n             ),\n             context=self.request,\n@@ -230,8 +273,6 @@ def munge_search_term(self, q):\n class RegistryConfiguration(BrowserView):\n     def __call__(self):\n         registry = getUtility(IRegistry)\n-        reader = getMultiAdapter(\n-            (registry, self.request), IQuerystringRegistryReader\n-        )\n+        reader = getMultiAdapter((registry, self.request), IQuerystringRegistryReader)\n         data = reader()\n         return json.dumps(data)\ndiff --git a/plone/app/querystring/querymodifiers.py b/plone/app/querystring/querymodifiers.py\nindex f8adbc4..f0b6e52 100644\n--- a/plone/app/querystring/querymodifiers.py\n+++ b/plone/app/querystring/querymodifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.querystring.interfaces import IQueryModifier\n from zope.interface import provider\n \n@@ -13,15 +12,14 @@ def modify_query_to_enforce_navigation_root(query):\n     if not query:\n         return query\n \n-    has_path_criteria = any(\n-        (criteria[\'i\'] == \'path\')\n-        for criteria in query\n-    )\n+    has_path_criteria = any((criteria["i"] == "path") for criteria in query)\n     if not has_path_criteria:\n         query = list(query)\n-        query.append({\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/\',\n-        })\n+        query.append(\n+            {\n+                "i": "path",\n+                "o": "plone.app.querystring.operation.string.path",\n+                "v": "/",\n+            }\n+        )\n     return query\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex 97bd757..40fbad8 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -1,24 +1,22 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from collections import namedtuple\n-from DateTime.interfaces import DateTimeError\n from DateTime import DateTime\n+from DateTime.interfaces import DateTimeError\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.utils import base_hasattr\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.utils import base_hasattr\n from zope.component import getUtility\n from zope.dottedname.resolve import resolve\n \n \n-Row = namedtuple(\'Row\', [\'index\', \'operator\', \'values\'])\n-PATH_INDICES = {\'path\'}\n+Row = namedtuple("Row", ["index", "operator", "values"])\n+PATH_INDICES = {"path"}\n \n \n def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n-\n     if not formquery:\n         return {}\n     reg = getUtility(IRegistry)\n@@ -28,14 +26,14 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n \n     query = {}\n     for row in formquery:\n-        operator = row.get(\'o\', None)\n+        operator = row.get("o", None)\n         function_path = reg["%s.operation" % operator]\n \n         # The functions expect this pattern of object, so lets give it to\n         # them in a named tuple instead of jamming things onto the request\n-        row = Row(index=row.get(\'i\', None),\n-                  operator=function_path,\n-                  values=row.get(\'v\', None))\n+        row = Row(\n+            index=row.get("i", None), operator=function_path, values=row.get("v", None)\n+        )\n \n         kwargs = {}\n         parser = resolve(row.operator)\n@@ -46,7 +44,7 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n         if len(path_index) == 1:\n             path_index = list(path_index)[0]\n             if path_index in query:\n-                query[path_index][\'query\'].extend(kwargs[path_index][\'query\'])\n+                query[path_index]["query"].extend(kwargs[path_index]["query"])\n             else:\n                 query.update(kwargs)\n         elif len(path_index) > 1:\n@@ -60,31 +58,32 @@ def parseFormquery(context, formquery, sort_on=None, sort_order=None):\n \n     # Add sorting (sort_on and sort_order) to the query\n     if sort_on:\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         # I get crazy sort_ons like \'194\' or \'null\'.\n         if sort_on in catalog.indexes():\n-            query[\'sort_on\'] = sort_on\n+            query["sort_on"] = sort_on\n             if sort_order:\n-                query[\'sort_order\'] = sort_order\n+                query["sort_order"] = sort_order\n     return query\n \n \n # Query operators\n \n+\n def _contains(context, row):\n     return _equal(context, row)\n \n \n def _excludes(context, row):\n-    return {row.index: {\'not\': row.values}}\n+    return {row.index: {"not": row.values}}\n \n \n def _equal(context, row):\n-    return {row.index: {\'query\': row.values, }}\n+    return {row.index: {"query": row.values}}\n \n \n def _all(context, row):\n-    return {row.index: {\'query\': row.values, \'operator\': \'and\'}}\n+    return {row.index: {"query": row.values, "operator": "and"}}\n \n \n def _intEqual(context, row):\n@@ -99,39 +98,39 @@ def _intEqual(context, row):\n             values = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    return {row.index: {\'query\': values, }}\n+    return {row.index: {"query": values}}\n \n \n def _isTrue(context, row):\n-    return {row.index: {\'query\': True, }}\n+    return {row.index: {"query": True}}\n \n \n def _isFalse(context, row):\n-    return {row.index: {\'query\': False, }}\n+    return {row.index: {"query": False}}\n \n \n def _between(context, row):\n     if not row.values:\n-        val = [\'\', \'\']\n+        val = ["", ""]\n     else:\n         val = row.values\n \n-    tmp = {row.index:\n-           {\n-               \'query\': sorted(val),\n-               \'range\': \'minmax\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": sorted(val),\n+            "range": "minmax",\n+        },\n+    }\n     return tmp\n \n \n def _largerThan(context, row):\n-    tmp = {row.index:\n-           {\n-               \'query\': row.values,\n-               \'range\': \'min\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": row.values,\n+            "range": "min",\n+        },\n+    }\n     return tmp\n \n \n@@ -142,22 +141,22 @@ def _intLargerThan(context, row):\n             value = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    tmp = {row.index:\n-           {\n-               \'query\': value,\n-               \'range\': \'min\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": value,\n+            "range": "min",\n+        },\n+    }\n     return tmp\n \n \n def _lessThan(context, row):\n-    tmp = {row.index:\n-           {\n-               \'query\': row.values,\n-               \'range\': \'max\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": row.values,\n+            "range": "max",\n+        },\n+    }\n     return tmp\n \n \n@@ -169,27 +168,27 @@ def _intLessThan(context, row):\n         except (ValueError, TypeError, AttributeError):\n             # value = 0\n             pass\n-    tmp = {row.index:\n-           {\n-               \'query\': value,\n-               \'range\': \'max\',\n-           },\n-           }\n+    tmp = {\n+        row.index: {\n+            "query": value,\n+            "range": "max",\n+        },\n+    }\n     return tmp\n \n \n def _currentUser(context, row):\n     """Current user lookup"""\n-    mt = getToolByName(context, \'portal_membership\')\n+    mt = getToolByName(context, "portal_membership")\n     user = mt.getAuthenticatedMember()\n-    return {row.index: {\'query\': user.getUserName()}}\n+    return {row.index: {"query": user.getUserName()}}\n \n \n def _showInactive(context, row):\n-    """ Current user roles lookup in order to determine whether user should\n-        be allowed to view inactive content\n+    """Current user roles lookup in order to determine whether user should\n+    be allowed to view inactive content\n     """\n-    mt = getToolByName(context, \'portal_membership\')\n+    mt = getToolByName(context, "portal_membership")\n     user = mt.getAuthenticatedMember()\n     value = False\n     user_roles = user.getRoles()\n@@ -213,9 +212,7 @@ def _lessThanRelativeDate(context, row):\n     start_date = now.earliestTime()\n     end_date = now + values\n     end_date = end_date.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n@@ -230,9 +227,7 @@ def _moreThanRelativeDate(context, row):\n     start_date = now - values\n     start_date = start_date.earliestTime()\n     end_date = now.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n@@ -244,14 +239,10 @@ def _betweenDates(context, row):\n     try:\n         end_date = DateTime(row.values[1])\n     except DateTimeError:\n-        row = Row(index=row.index,\n-                  operator=row.operator,\n-                  values=start_date)\n+        row = Row(index=row.index, operator=row.operator, values=start_date)\n         return _largerThan(context, row)\n     else:\n-        row = Row(index=row.index,\n-                  operator=row.operator,\n-                  values=(start_date, end_date))\n+        row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n \n         return _between(context, row)\n \n@@ -260,23 +251,17 @@ def _today(context, row):\n     now = DateTime()\n     start_date = now.earliestTime()\n     end_date = now.latestTime()\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=(start_date, end_date))\n+    row = Row(index=row.index, operator=row.operator, values=(start_date, end_date))\n     return _between(context, row)\n \n \n def _afterToday(context, row):\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime())\n+    row = Row(index=row.index, operator=row.operator, values=DateTime())\n     return _largerThan(context, row)\n \n \n def _beforeToday(context, row):\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime())\n+    row = Row(index=row.index, operator=row.operator, values=DateTime())\n     return _lessThan(context, row)\n \n \n@@ -285,9 +270,11 @@ def _beforeRelativeDate(context, row):\n         values = int(row.values)\n     except ValueError:\n         values = 0\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime().earliestTime() - values)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values=DateTime().earliestTime() - values,\n+    )\n     return _lessThan(context, row)\n \n \n@@ -296,41 +283,43 @@ def _afterRelativeDate(context, row):\n         values = int(row.values)\n     except ValueError:\n         values = 0\n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=DateTime().earliestTime() + values)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values=DateTime().earliestTime() + values,\n+    )\n     return _largerThan(context, row)\n \n \n def _pathByRoot(root, context, row):\n     values = row.values\n     depth = None\n-    if \'::\' in values:\n-        values, _depth = values.split(\'::\', 1)\n+    if "::" in values:\n+        values, _depth = values.split("::", 1)\n         try:\n             depth = int(_depth)\n         except ValueError:\n             pass\n-    if \'/\' not in values:\n+    if "/" not in values:\n         # It must be a UID\n         values = getPathByUID(context, values)\n     # take care of absolute paths without root\n-    if not values.startswith(root + \'/\') and values != root:\n+    if not values.startswith(root + "/") and values != root:\n         values = root + values\n     query = {}\n     if depth is not None:\n-        query[\'depth\'] = depth\n+        query["depth"] = depth\n         # when a depth value is specified, a trailing slash matters on the\n         # query\n-        values = values.rstrip(\'/\')\n-    query[\'query\'] = [values]\n+        values = values.rstrip("/")\n+    query["query"] = [values]\n     return {row.index: query}\n \n \n def _absolutePath(context, row):\n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n-    root = \'/\'.join(portal.getPhysicalPath())\n+    root = "/".join(portal.getPhysicalPath())\n     return _pathByRoot(root, context, row)\n \n \n@@ -343,10 +332,10 @@ def _relativePath(context, row):\n     obj = context\n     values = row.values\n     depthstr = ""\n-    if \'::\' in values:\n-        values, _depth = values.split(\'::\', 1)\n+    if "::" in values:\n+        values, _depth = values.split("::", 1)\n         depthstr = "::%s" % _depth\n-    for x in [r for r in values.split(\'/\') if r]:\n+    for x in [r for r in values.split("/") if r]:\n         if x == "..":\n             if IPloneSiteRoot.providedBy(obj):\n                 break\n@@ -359,9 +348,11 @@ def _relativePath(context, row):\n                 if child and base_hasattr(child, "getPhysicalPath"):\n                     obj = child\n \n-    row = Row(index=row.index,\n-              operator=row.operator,\n-              values=\'/\'.join(obj.getPhysicalPath()) + depthstr)\n+    row = Row(\n+        index=row.index,\n+        operator=row.operator,\n+        values="/".join(obj.getPhysicalPath()) + depthstr,\n+    )\n \n     return _absolutePath(context, row)\n \n@@ -375,18 +366,18 @@ def _referenceIs(context, row):\n         return {}\n \n     # clear possible depth string\n-    values = values.split(\'::\')[0]\n+    values = values.split("::")[0]\n \n-    if \'/\' not in values:\n+    if "/" not in values:\n         return {row.index: values}\n \n     pquery = _absolutePath(context, row)\n     if not pquery:\n         return {}\n     # use resolved path here...\n-    path = pquery[row.index][\'query\']\n+    path = pquery[row.index]["query"]\n \n-    portal_url = getToolByName(context, \'portal_url\')\n+    portal_url = getToolByName(context, "portal_url")\n     portal = portal_url.getPortalObject()\n \n     if type(path) == list:\n@@ -401,10 +392,11 @@ def _referenceIs(context, row):\n \n # Helper functions\n \n+\n def getPathByUID(context, uid):\n     """Returns the path of an object specified by UID"""\n-    catalog = getToolByName(context, \'portal_catalog\')\n+    catalog = getToolByName(context, "portal_catalog")\n     brains = catalog.unrestrictedSearchResults(dict(UID=uid))\n     if brains:\n         return brains[0].getPath()\n-    return \'\'\n+    return ""\ndiff --git a/plone/app/querystring/registryreader.py b/plone/app/querystring/registryreader.py\nindex fa5a783..ef245f7 100644\n--- a/plone/app/querystring/registryreader.py\n+++ b/plone/app/querystring/registryreader.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from collections import OrderedDict\n from plone.app.querystring.interfaces import IQuerystringRegistryReader\n from Products.CMFCore.utils import getToolByName\n@@ -14,7 +13,6 @@\n from zope.schema.interfaces import IVocabularyFactory\n \n import logging\n-import six\n \n \n logger = logging.getLogger("plone.app.querystring")\n@@ -24,16 +22,16 @@ class DottedDict(dict):\n     """A dictionary where you can access nested dicts with dotted names"""\n \n     def get(self, k, default=None):\n-        if \'.\' not in k:\n-            return super(DottedDict, self).get(k, default)\n+        if "." not in k:\n+            return super().get(k, default)\n         val = self\n-        for x in k.split(\'.\'):\n+        for x in k.split("."):\n             val = val[x]\n         return val\n \n \n @implementer(IQuerystringRegistryReader)\n-class QuerystringRegistryReader(object):\n+class QuerystringRegistryReader:\n     """Adapts a registry object to parse the querystring data."""\n \n     prefix = "plone.app.querystring"\n@@ -54,7 +52,7 @@ def parseRegistry(self):\n             if not record.startswith(self.prefix):\n                 continue\n \n-            splitted = record.split(\'.\')\n+            splitted = record.split(".")\n             current = result\n             for x in splitted[:-1]:\n                 # create the key if it\'s not there\n@@ -74,9 +72,9 @@ def parseRegistry(self):\n     def getVocabularyValues(self, values):\n         """Get all vocabulary values if a vocabulary is defined"""\n \n-        for field in values.get(self.prefix + \'.field\').values():\n-            field[\'values\'] = OrderedDict()\n-            vocabulary = field.get(\'vocabulary\', [])\n+        for field in values.get(self.prefix + ".field").values():\n+            field["values"] = OrderedDict()\n+            vocabulary = field.get("vocabulary", [])\n             if not vocabulary:\n                 continue\n             utility = queryUtility(IVocabularyFactory, vocabulary)\n@@ -84,7 +82,7 @@ def getVocabularyValues(self, values):\n                 logger.info("%s is missing, ignored." % vocabulary)\n                 continue\n             translated = []\n-            if not field.get(\'fetch_vocabulary\', True):\n+            if not field.get("fetch_vocabulary", True):\n                 # Bail out if the annotation is marked not to fetch the vocabulary\n                 # to allow the widget to query the vocabulary as needed\n                 continue\n@@ -95,25 +93,23 @@ def getVocabularyValues(self, values):\n                     title = item.title\n                 translated.append((title, item.value))\n             translated = sorted(\n-                translated,\n-                key=lambda x: normalizeString(safe_unicode(x[0]))\n+                translated, key=lambda x: normalizeString(safe_unicode(x[0]))\n             )\n-            for (title, value) in translated:\n-                field[\'values\'][value] = {\'title\': title}\n+            for title, value in translated:\n+                field["values"][value] = {"title": title}\n \n         return values\n \n     def mapOperations(self, values):\n         """Get the operations from the registry and put them in the key\n-           \'operators\' with the short name as key\n+        \'operators\' with the short name as key\n         """\n-        for field in values.get(self.prefix + \'.field\').values():\n-            fieldoperations = field.get(\'operations\', [])\n-            field[\'operators\'] = {}\n+        for field in values.get(self.prefix + ".field").values():\n+            fieldoperations = field.get("operations", [])\n+            field["operators"] = {}\n             for operation_key in fieldoperations:\n                 try:\n-                    field[\'operators\'][operation_key] = \\\n-                        values.get(operation_key)\n+                    field["operators"][operation_key] = values.get(operation_key)\n                 except KeyError:\n                     # invalid operation, probably doesn\'t exist, pass for now\n                     pass\n@@ -121,16 +117,16 @@ def mapOperations(self, values):\n \n     def mapSortableIndexes(self, values):\n         """Map sortable indexes"""\n-        catalog = getToolByName(getSite(), \'portal_catalog\')._catalog\n+        catalog = getToolByName(getSite(), "portal_catalog")._catalog\n         sortables = {}\n-        for key, field in six.iteritems(values.get(\'%s.field\' % self.prefix)):\n+        for key, field in values.get("%s.field" % self.prefix).items():\n             if (\n-                field[\'sortable\']\n+                field["sortable"]\n                 and key in catalog.indexes\n                 and not IZCTextIndex.providedBy(catalog.getIndex(key))\n             ):\n-                sortables[key] = values.get(\'%s.field.%s\' % (self.prefix, key))\n-        values[\'sortable\'] = sortables\n+                sortables[key] = values.get(f"{self.prefix}.field.{key}")\n+        values["sortable"] = sortables\n         return values\n \n     def __call__(self):\n@@ -141,6 +137,6 @@ def __call__(self):\n         indexes = self.mapOperations(indexes)\n         indexes = self.mapSortableIndexes(indexes)\n         return {\n-            \'indexes\': indexes.get(\'%s.field\' % self.prefix),\n-            \'sortable_indexes\': indexes.get(\'sortable\'),\n+            "indexes": indexes.get("%s.field" % self.prefix),\n+            "sortable_indexes": indexes.get("sortable"),\n         }\ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex ee6929f..d3ff66d 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n@@ -12,57 +11,50 @@\n \n \n class PloneAppQuerystringTestProfileLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.querystring.tests\n-        self.loadZCML(\'configure.zcml\', package=plone.app.querystring.tests)\n+\n+        self.loadZCML("configure.zcml", package=plone.app.querystring.tests)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.querystring.tests:registry\')\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        applyProfile(portal, "plone.app.querystring.tests:registry")\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n-        portal.acl_users.userFolderAddUser(\'admin\',\n-                                           \'secret\',\n-                                           [\'Manager\'],\n-                                           [])\n-        portal.portal_workflow.setChainForPortalTypes(\n-            (\'Document\',), \'plone_workflow\'\n-        )\n+        portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n+        portal.portal_workflow.setChainForPortalTypes(("Document",), "plone_workflow")\n \n \n-TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE = \\\n-    PloneAppQuerystringTestProfileLayer()\n+TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE = PloneAppQuerystringTestProfileLayer()\n \n \n class PloneAppQuerystringLayer(PloneAppQuerystringTestProfileLayer):\n-\n     def setUpZope(self, app, configurationContext):\n-        super(PloneAppQuerystringLayer, self).setUpZope(\n-            app, configurationContext)\n+        super().setUpZope(app, configurationContext)\n         import plone.app.querystring\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.querystring,\n-            context=configurationContext\n+            "configure.zcml", plone.app.querystring, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n-        super(PloneAppQuerystringLayer, self).setUpPloneSite(portal)\n-        applyProfile(portal, \'plone.app.querystring:default\')\n+        super().setUpPloneSite(portal)\n+        applyProfile(portal, "plone.app.querystring:default")\n+\n \n PLONEAPPQUERYSTRING_FIXTURE = PloneAppQuerystringLayer()\n \n \n PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONEAPPQUERYSTRING_FIXTURE,),\n-    name="PloneAppQuerystringLayer:Integration")\n+    bases=(PLONEAPPQUERYSTRING_FIXTURE,), name="PloneAppQuerystringLayer:Integration"\n+)\n \n TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(TEST_PROFILE_PLONEAPPQUERYSTRING_FIXTURE,),\n-    name="PloneAppQuerystringTestProfileLayer:Integration")\n+    name="PloneAppQuerystringTestProfileLayer:Integration",\n+)\n \n NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PloneSandboxLayer(),),\n-    name="UninstalledPloneAppQuerystringLayer:Integration")\n+    bases=(PloneSandboxLayer(),), name="UninstalledPloneAppQuerystringLayer:Integration"\n+)\ndiff --git a/plone/app/querystring/tests/index_testmodifier.py b/plone/app/querystring/tests/index_testmodifier.py\nindex a36c267..f8326d3 100644\n--- a/plone/app/querystring/tests/index_testmodifier.py\n+++ b/plone/app/querystring/tests/index_testmodifier.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf8 -*-\n-\n-from zope.interface import implementer\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n+from zope.interface import implementer\n \n \n @implementer(IParsedQueryIndexModifier)\n-class SimpleFooIndexModifier(object):\n+class SimpleFooIndexModifier:\n     """Test simple index modifier that do nothing"""\n \n     def __call__(self, value):\n@@ -13,20 +11,20 @@ def __call__(self, value):\n \n \n @implementer(IParsedQueryIndexModifier)\n-class TitleFooIndexModifier(object):\n+class TitleFooIndexModifier:\n     """Test index modifier that check always Foo"""\n \n     def __call__(self, value):\n-        return (\'Title\', \'Foo\')\n+        return ("Title", "Foo")\n \n \n @implementer(IParsedQueryIndexModifier)\n-class AbstractToDescriptionIndexModifier(object):\n+class AbstractToDescriptionIndexModifier:\n     """\n     Test index modifier that translate "Abstract" to Description index\n     but where value do not count letter "e"\n     """\n \n     def __call__(self, value):\n-        value[\'query\'] = value[\'query\'].replace(\'e\', \'\')\n-        return (\'Description\', value)\n+        value["query"] = value["query"].replace("e", "")\n+        return ("Description", value)\ndiff --git a/plone/app/querystring/tests/registry_testdata.py b/plone/app/querystring/tests/registry_testdata.py\nindex b03b082..68964b3 100644\n--- a/plone/app/querystring/tests/registry_testdata.py\n+++ b/plone/app/querystring/tests/registry_testdata.py\n@@ -1,66 +1,61 @@\n-# -*- coding: utf-8 -*-\n import os\n \n+\n parsed_correct = {\n-    \'plone\': {\n-        \'app\': {\n-            \'querystring\': {\n-                \'field\': {\n-                    \'getId\': {\n-                        \'operations\': [\n-                            \'plone.app.querystring.operation.string.is\'],\n-                        \'group\': u\'Metadata\',\n-                        \'description\': u\'The short name of an item \'\n-                                       u\'(used in the url)\',\n-                        \'vocabulary\': None,\n-                        \'title\': u\'Short Name\',\n-                        \'enabled\': True,\n-                        \'sortable\': True,\n-                        \'fetch_vocabulary\': True\n+    "plone": {\n+        "app": {\n+            "querystring": {\n+                "field": {\n+                    "getId": {\n+                        "operations": ["plone.app.querystring.operation.string.is"],\n+                        "group": "Metadata",\n+                        "description": "The short name of an item " "(used in the url)",\n+                        "vocabulary": None,\n+                        "title": "Short Name",\n+                        "enabled": True,\n+                        "sortable": True,\n+                        "fetch_vocabulary": True,\n                     },\n-                    \'created\': {\n-                        \'operations\': [\n-                            \'plone.app.querystring.operation.date.lessThan\',\n-                            \'plone.app.querystring.operation.date.largerThan\'\n+                    "created": {\n+                        "operations": [\n+                            "plone.app.querystring.operation.date.lessThan",\n+                            "plone.app.querystring.operation.date.largerThan",\n                         ],\n-                        \'group\': u\'Dates\',\n-                        \'description\': u\'The time and date an item was \'\n-                                       u\'created\',\n-                        \'vocabulary\': None,\n-                        \'title\': u\'Creation Date\',\n-                        \'enabled\': True,\n-                        \'sortable\': False,\n-                        \'fetch_vocabulary\': True\n-                    }\n+                        "group": "Dates",\n+                        "description": "The time and date an item was " "created",\n+                        "vocabulary": None,\n+                        "title": "Creation Date",\n+                        "enabled": True,\n+                        "sortable": False,\n+                        "fetch_vocabulary": True,\n+                    },\n                 },\n-                \'operation\': {\n-                    \'date\': {\n-                        \'largerThan\': {\n-                            \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser\'\n-                                         u\'._largerThan\',\n-                            \'description\': u\'Please use YYYY/MM/DD.\',\n-                            \'title\': u\'after\'\n+                "operation": {\n+                    "date": {\n+                        "largerThan": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser"\n+                            "._largerThan",\n+                            "description": "Please use YYYY/MM/DD.",\n+                            "title": "after",\n+                        },\n+                        "lessThan": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser."\n+                            "_lessThan",\n+                            "description": "Please use YYYY/MM/DD.",\n+                            "title": "before",\n                         },\n-                        \'lessThan\': {\n-                            \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser.\'\n-                                         u\'_lessThan\',\n-                            \'description\': u\'Please use YYYY/MM/DD.\',\n-                            \'title\': u\'before\'\n-                        }\n                     },\n-                    \'string\': {\n-                        \'is\': {\n-                            \'widget\': None,\n-                            \'operation\': u\'plone.app.querystring.queryparser.\'\n-                                         u\'_equal\',\n-                            \'description\': u\'Tip: you can use * to \'\n-                                           u\'autocomplete.\',\n-                            \'title\': u\'equals\'\n+                    "string": {\n+                        "is": {\n+                            "widget": None,\n+                            "operation": "plone.app.querystring.queryparser._equal",\n+                            "description": "Tip: you can use * to autocomplete.",\n+                            "title": "equals",\n                         }\n-                    }\n-                }\n+                    },\n+                },\n             }\n         }\n     }\n@@ -71,6 +66,7 @@ def reg_load_xml(filename):\n     with open(os.path.join(os.path.dirname(__file__), filename)) as rx:\n         return rx.read()\n \n-minimal_correct_xml = reg_load_xml(\'registry_minimal_correct.xml\')\n-test_missing_operator_xml = reg_load_xml(\'registry_test_missing_operator.xml\')\n-test_vocabulary_xml = reg_load_xml(\'registry_test_vocabulary.xml\')\n+\n+minimal_correct_xml = reg_load_xml("registry_minimal_correct.xml")\n+test_missing_operator_xml = reg_load_xml("registry_test_missing_operator.xml")\n+test_vocabulary_xml = reg_load_xml("registry_test_vocabulary.xml")\ndiff --git a/plone/app/querystring/tests/testIndexmodifiers.py b/plone/app/querystring/tests/testIndexmodifiers.py\nindex 6a93f90..76bdddc 100644\n--- a/plone/app/querystring/tests/testIndexmodifiers.py\n+++ b/plone/app/querystring/tests/testIndexmodifiers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from DateTime import DateTime\n from plone.app.querystring.indexmodifiers import query_index_modifiers\n@@ -7,37 +6,37 @@\n \n \n class TestIndexModifiers(unittest.TestCase):\n-\n     def test_subject_encoded(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': u\'foobar\'}),\n-            (\'Subject\', {\'query\': u\'foobar\'}))\n+            query_index_modifiers.Subject()({"query": "foobar"}),\n+            ("Subject", {"query": "foobar"}),\n+        )\n \n     def test_subject_encoded__list(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'query\': [u\'foobar\']}),\n-            (\'Subject\', {\'query\': [u\'foobar\']}))\n+            query_index_modifiers.Subject()({"query": ["foobar"]}),\n+            ("Subject", {"query": ["foobar"]}),\n+        )\n \n     def test_subject_encoded__list_not(self):\n         self.assertEqual(\n-            query_index_modifiers.Subject()({\'not\': [u\'foobar\']}),\n-            (\'Subject\', {\'not\': [\'foobar\']}))\n+            query_index_modifiers.Subject()({"not": ["foobar"]}),\n+            ("Subject", {"not": ["foobar"]}),\n+        )\n \n     def test_date_modifier(self):\n         modifier = query_index_modifiers.start()\n         self.assertTrue(\n-            isinstance(modifier({\'query\': \'2010-01-01\'})[1][\'query\'], datetime)\n+            isinstance(modifier({"query": "2010-01-01"})[1]["query"], datetime)\n         )\n         self.assertTrue(\n-            isinstance(modifier({\'query\': \'01/01/2010\'})[1][\'query\'], datetime)\n+            isinstance(modifier({"query": "01/01/2010"})[1]["query"], datetime)\n         )\n \n     def test_date_modifier_list(self):\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': [\'01/01/2010\', \'01/01/2010\']}\n-        self.assertTrue(\n-            isinstance(modifier(query)[1][\'query\'][0], datetime)\n-        )\n+        query = {"query": ["01/01/2010", "01/01/2010"]}\n+        self.assertTrue(isinstance(modifier(query)[1]["query"][0], datetime))\n \n     def test_date_modifier_list_DateTime(self):\n         """Test a case with largerThanRelativeDate operatiors, where\n@@ -63,14 +62,10 @@ def test_date_modifier_list_DateTime(self):\n         }\n         """\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': [DateTime(\'01/01/2010\'), DateTime(\'01/01/2010\')]}\n-        self.assertTrue(\n-            isinstance(modifier(query)[1][\'query\'][0], DateTime)\n-        )\n+        query = {"query": [DateTime("01/01/2010"), DateTime("01/01/2010")]}\n+        self.assertTrue(isinstance(modifier(query)[1]["query"][0], DateTime))\n \n     def test_invalid_date(self):\n         modifier = query_index_modifiers.start()\n-        query = {\'query\': \'foobar\'}\n-        self.assertEquals(\n-            modifier(query)[1][\'query\'], \'foobar\'\n-        )\n+        query = {"query": "foobar"}\n+        self.assertEqual(modifier(query)[1]["query"], "foobar")\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex 6c4042b..050e189 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -1,9 +1,6 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.querystring.testing import (\n     TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n )\n-\n from zope.component import getMultiAdapter\n from zope.publisher.browser import TestRequest\n \n@@ -11,7 +8,6 @@\n \n \n class TestQuerybuilder(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -65,9 +61,7 @@ def testQueryBuilderNumberOfResultsView(self):\n     def testMakeQuery(self):\n         results = self.querybuilder._makequery(query=self.query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testQueryStringIs(self):\n         query = [\n@@ -114,9 +108,7 @@ def testMakeQueryWithSubject(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithSubjectNot(self):\n         self.folder.setSubject(["Ipsum"])\n@@ -146,9 +138,7 @@ def testMakeQueryWithMultipleSubject(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithMultipleSubjectNot(self):\n         self.folder.setSubject(["Ipsum"])\n@@ -178,9 +168,7 @@ def testMakeQueryWithSubjectWithSpecialCharacters(self):\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n@@ -190,14 +178,12 @@ def testMakeQueryWithUnicodeSubjectWithSpecialCharacters(self):\n             {\n                 "i": "Subject",\n                 "o": "plone.app.querystring.operation.selection.any",\n-                "v": u"\xc3\x84\xc3\xbc\xc3\xb6",\n+                "v": "\xc3\x84\xc3\xbc\xc3\xb6",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n@@ -207,14 +193,12 @@ def testMakeQueryWithUnicodeSubjectWithMultipleSubjects(self):\n             {\n                 "i": "Subject",\n                 "o": "plone.app.querystring.operation.selection.any",\n-                "v": [u"\xc3\x84\xc3\xbc\xc3\xb6", u"\xc3\x9c\xc3\xb6\xc3\x9f"],\n+                "v": ["\xc3\x84\xc3\xbc\xc3\xb6", "\xc3\x9c\xc3\xb6\xc3\x9f"],\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n         self.assertEqual(results[0].getObject().Subject(), ("\xc3\x84\xc3\xbc\xc3\xb6",))\n \n     def testMakeQueryWithSearchableText(self):\n@@ -222,7 +206,7 @@ def testMakeQueryWithSearchableText(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"Test",\n+                "v": "Test",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n@@ -236,14 +220,12 @@ def testMakeQueryWithSearchableTextSpecialWordsAnd(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This and that",\n+                "v": "This and that",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n         self.testpage.description = "This or that is the description"\n@@ -252,14 +234,12 @@ def testMakeQueryWithSearchableTextSpecialWordsOr(self):\n             {\n                 "i": "SearchableText",\n                 "o": "plone.app.querystring.operation.string.contains",\n-                "v": u"This or that",\n+                "v": "This or that",\n             }\n         ]\n         results = self.querybuilder._makequery(query=query)\n         self.assertEqual(len(results), 1)\n-        self.assertEqual(\n-            results[0].getURL(), "http://nohost/plone/collectionstestpage"\n-        )\n+        self.assertEqual(results[0].getURL(), "http://nohost/plone/collectionstestpage")\n \n     def testQueryBuilderCustomQuery(self):\n         """Test, if custom queries are respected when getting the results."""\n@@ -347,7 +327,6 @@ def testQueryBuilderCustomQueryDoNotOverrideValues(self):\n \n \n class TestQuerybuilderResultTypes(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -403,7 +382,6 @@ def testQueryBuilderNonEmptyContentListingCustomQuery(self):\n \n \n class TestConfigurationFetcher(unittest.TestCase):\n-\n     layer = TEST_PROFILE_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/plone/app/querystring/tests/testQueryBuilderModifiers.py b/plone/app/querystring/tests/testQueryBuilderModifiers.py\nindex 71478a4..75a2ea2 100644\n--- a/plone/app/querystring/tests/testQueryBuilderModifiers.py\n+++ b/plone/app/querystring/tests/testQueryBuilderModifiers.py\n@@ -1,14 +1,9 @@\n-# -*- coding: utf-8 -*-\n-\n+from . import index_testmodifier\n from plone.app.querystring.interfaces import IParsedQueryIndexModifier\n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n-\n-from zope.publisher.browser import TestRequest\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n from zope.component import getGlobalSiteManager\n from zope.component import getMultiAdapter\n-\n-from . import index_testmodifier\n+from zope.publisher.browser import TestRequest\n \n import unittest\n \n@@ -19,42 +14,44 @@ class TestQuerybuilderExtended(unittest.TestCase):\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage1",\n-                                  title="Collectionstestpage")\n-        testpage1 = self.portal[\'collectionstestpage1\']\n-        self.portal.portal_workflow.doActionFor(testpage1, \'publish\')\n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage2",\n-                                  title="Foo",\n-                                  description="Collectionstestpage")\n-        testpage2 = self.portal[\'collectionstestpage2\']\n-        self.portal.portal_workflow.doActionFor(testpage2, \'publish\')\n-        self.portal.invokeFactory("Document",\n-                                  "collectionstestpage3",\n-                                  title="Bar",\n-                                  description="Collctionststpag")\n-        testpage3 = self.portal[\'collectionstestpage3\']\n-        self.portal.portal_workflow.doActionFor(testpage3, \'publish\')\n+        self.portal.invokeFactory(\n+            "Document", "collectionstestpage1", title="Collectionstestpage"\n+        )\n+        testpage1 = self.portal["collectionstestpage1"]\n+        self.portal.portal_workflow.doActionFor(testpage1, "publish")\n+        self.portal.invokeFactory(\n+            "Document",\n+            "collectionstestpage2",\n+            title="Foo",\n+            description="Collectionstestpage",\n+        )\n+        testpage2 = self.portal["collectionstestpage2"]\n+        self.portal.portal_workflow.doActionFor(testpage2, "publish")\n+        self.portal.invokeFactory(\n+            "Document",\n+            "collectionstestpage3",\n+            title="Bar",\n+            description="Collctionststpag",\n+        )\n+        testpage3 = self.portal["collectionstestpage3"]\n+        self.portal.portal_workflow.doActionFor(testpage3, "publish")\n         self.request = TestRequest()\n         self.querybuilder = getMultiAdapter(\n-            (self.portal, self.request),\n-            name=\'querybuilderresults\'\n+            (self.portal, self.request), name="querybuilderresults"\n         )\n \n     def testModifierNotCalled(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(\n-            index_testmodifier.SimpleFooIndexModifier(),\n-            name=u\'Foo\'\n-        )\n-        query = [{\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        gsm.registerUtility(index_testmodifier.SimpleFooIndexModifier(), name="Foo")\n+        query = [\n+            {\n+                "i": "Title",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         try:\n             results = self.querybuilder(query=query)\n@@ -62,44 +59,38 @@ def testModifierNotCalled(self):\n             self.fail("Unexpected: index modifier has been called")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Collectionstestpage")\n-        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name=u\'Foo\')\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Foo")\n \n     def testModifierChangeQuery(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(\n-            index_testmodifier.TitleFooIndexModifier(),\n-            name=u\'Title\'\n-        )\n-        query = [{\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        gsm.registerUtility(index_testmodifier.TitleFooIndexModifier(), name="Title")\n+        query = [\n+            {\n+                "i": "Title",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         results = self.querybuilder(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Foo")\n-        gsm.unregisterUtility(\n-            provided=IParsedQueryIndexModifier,\n-            name=u\'Title\'\n-        )\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Title")\n \n     def testModifierChangeQueryAndIndex(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n-            index_testmodifier.AbstractToDescriptionIndexModifier(),\n-            name=u\'Abstract\'\n+            index_testmodifier.AbstractToDescriptionIndexModifier(), name="Abstract"\n         )\n-        query = [{\n-            \'i\': \'Abstract\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Collectionstestpage\',\n-        }]\n+        query = [\n+            {\n+                "i": "Abstract",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Collectionstestpage",\n+            }\n+        ]\n \n         results = self.querybuilder(query=query)\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), "Bar")\n-        gsm.unregisterUtility(\n-            provided=IParsedQueryIndexModifier,\n-            name=u\'Abstract\'\n-        )\n+        gsm.unregisterUtility(provided=IParsedQueryIndexModifier, name="Abstract")\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex 767a87c..a68239d 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -1,31 +1,29 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from Products.CMFCore.interfaces import ICatalogTool\n-from Products.CMFCore.interfaces import IMembershipTool\n-from Products.CMFCore.interfaces import IURLTool\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.querystring import queryparser\n+from plone.app.querystring.queryparser import Row\n+from plone.app.querystring.testing import (\n+    NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING,\n+)\n+from plone.base.interfaces import INavigationRoot\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.registry import field\n from plone.registry import Record\n from plone.registry import Registry\n from plone.registry.interfaces import IRegistry\n-\n-from plone.app.querystring.queryparser import Row\n-from plone.app.querystring.testing import \\\n-    NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n-\n+from Products.CMFCore.interfaces import ICatalogTool\n+from Products.CMFCore.interfaces import IMembershipTool\n+from Products.CMFCore.interfaces import IURLTool\n from zope.component import getGlobalSiteManager\n from zope.component import getSiteManager\n from zope.interface import implementer\n \n import unittest\n \n-MOCK_SITE_ID = "site"\n \n+MOCK_SITE_ID = "site"\n \n-class MockObject(object):\n \n+class MockObject:\n     def __init__(self, uid, path):\n         self.uid = uid\n         self.path = path\n@@ -40,48 +38,63 @@ def absolute_url(self):\n         return self.path\n \n \n-class MockCatalog(object):\n-\n+class MockCatalog:\n     def unrestrictedSearchResults(self, query):\n-        uid = query.get(\'UID\')\n-        if uid == \'00000000000000001\':\n-            return [MockObject(uid=\'00000000000000001\',\n-                               path="/%s/foo" % MOCK_SITE_ID)]\n+        uid = query.get("UID")\n+        if uid == "00000000000000001":\n+            return [MockObject(uid="00000000000000001", path="/%s/foo" % MOCK_SITE_ID)]\n         raise NotImplementedError\n \n     def indexes(self):\n-        return [\'Title\', \'effectiveRange\', \'object_provides\',\n-                \'end\', \'Description\', \'is_folderish\', \'getId\',\n-                \'start\', \'meta_type\', \'is_default_page\', \'Date\',\n-                \'review_state\', \'portal_type\', \'expires\',\n-                \'allowedRolesAndUsers\', \'getObjPositionInParent\', \'path\',\n-                \'UID\', \'effective\', \'created\', \'Creator\',\n-                \'modified\', \'SearchableText\', \'sortable_title\',\n-                \'getRawRelatedItems\', \'Subject\']\n-\n-\n-class MockPortalUrl(object):\n-\n+        return [\n+            "Title",\n+            "effectiveRange",\n+            "object_provides",\n+            "end",\n+            "Description",\n+            "is_folderish",\n+            "getId",\n+            "start",\n+            "meta_type",\n+            "is_default_page",\n+            "Date",\n+            "review_state",\n+            "portal_type",\n+            "expires",\n+            "allowedRolesAndUsers",\n+            "getObjPositionInParent",\n+            "path",\n+            "UID",\n+            "effective",\n+            "created",\n+            "Creator",\n+            "modified",\n+            "SearchableText",\n+            "sortable_title",\n+            "getRawRelatedItems",\n+            "Subject",\n+        ]\n+\n+\n+class MockPortalUrl:\n     def getPortalPath(self):\n         return "/%s" % MOCK_SITE_ID\n \n     def getPortalObject(self):\n-        return MockObject(uid=\'00000000000000000\', path="/%s" % MOCK_SITE_ID)\n+        return MockObject(uid="00000000000000000", path="/%s" % MOCK_SITE_ID)\n \n \n-class MockNavtreeProperties(object):\n-\n+class MockNavtreeProperties:\n     def getProperty(self, name, default=""):\n         return ""\n \n \n-class MockSiteProperties(object):\n+class MockSiteProperties:\n     navtree_properties = MockNavtreeProperties()\n \n \n @implementer(INavigationRoot, IPloneSiteRoot)\n-class MockSite(object):\n-\n+class MockSite:\n     def __init__(self, portal_membership=None):\n         sm = getSiteManager()\n         self.reference_catalog = MockCatalog()\n@@ -102,10 +115,9 @@ class MockNavRoot(MockObject):\n     pass\n \n \n-class MockUser(object):\n-\n+class MockUser:\n     def __init__(self, username=None, roles=None):\n-        self.username = \'Anonymous User\'\n+        self.username = "Anonymous User"\n         if username:\n             self.username = username\n         self.roles = roles or "Anonymous"\n@@ -117,8 +129,7 @@ def getRoles(self):\n         return self.roles\n \n \n-class MockPortal_membership(object):\n-\n+class MockPortal_membership:\n     def __init__(self, user):\n         self.user = user\n \n@@ -127,7 +138,6 @@ def getAuthenticatedMember(self):\n \n \n class TestQueryParserBase(unittest.TestCase):\n-\n     layer = NOT_INSTALLED_PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -135,325 +145,274 @@ def setUp(self):\n         self.registry = Registry()\n         gsm.registerUtility(self.registry, IRegistry)\n         self.setFunctionForOperation(\n-            \'plone.app.querystring.operation.string.is.operation\',\n-            \'plone.app.querystring.queryparser._equal\')\n+            "plone.app.querystring.operation.string.is.operation",\n+            "plone.app.querystring.queryparser._equal",\n+        )\n         self.setFunctionForOperation(\n-            \'plone.app.querystring.operation.string.path.operation\',\n-            \'plone.app.querystring.queryparser._absolutePath\')\n+            "plone.app.querystring.operation.string.path.operation",\n+            "plone.app.querystring.queryparser._absolutePath",\n+        )\n \n     def setFunctionForOperation(self, operation, function):\n-        function_field = field.ASCIILine(title=u"Operator")\n+        function_field = field.ASCIILine(title="Operator")\n         function_record = Record(function_field)\n         function_record.value = function\n         self.registry.records[operation] = function_record\n \n \n class TestQueryParser(TestQueryParserBase):\n-\n     def test_exact_title(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(parsed, {\'Title\': {\'query\': \'Welcome to Plone\'}})\n+        parsed = queryparser.parseFormquery(MockSite(), [data])\n+        self.assertEqual(parsed, {"Title": {"query": "Welcome to Plone"}})\n \n     def test_sort_on_known(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n         parsed = queryparser.parseFormquery(\n-            MockSite(), [data, ],\n-            sort_on=\'sortable_title\',\n-            sort_order=\'reverse\')\n+            MockSite(),\n+            [data],\n+            sort_on="sortable_title",\n+            sort_order="reverse",\n+        )\n         self.assertEqual(\n-            parsed, {\'Title\': {\'query\': \'Welcome to Plone\'},\n-                     \'sort_on\': \'sortable_title\',\n-                     \'sort_order\': \'reverse\'})\n+            parsed,\n+            {\n+                "Title": {"query": "Welcome to Plone"},\n+                "sort_on": "sortable_title",\n+                "sort_order": "reverse",\n+            },\n+        )\n \n     def test_sort_on_unknown(self):\n         data = {\n-            \'i\': \'Title\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Welcome to Plone\',\n+            "i": "Title",\n+            "o": "plone.app.querystring.operation.string.is",\n+            "v": "Welcome to Plone",\n         }\n         parsed = queryparser.parseFormquery(\n-            MockSite(), [data, ],\n-            sort_on=\'unknown\',\n-            sort_order=\'reverse\')\n-        self.assertEqual(\n-            parsed, {\'Title\': {\'query\': \'Welcome to Plone\'}})\n+            MockSite(),\n+            [data],\n+            sort_on="unknown",\n+            sort_order="reverse",\n+        )\n+        self.assertEqual(parsed, {"Title": {"query": "Welcome to Plone"}})\n \n     def test_path_explicit(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}})\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [data],\n+        )\n+        self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n     def test_path_computed(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'00000000000000001\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "00000000000000001",\n         }\n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}})\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [data],\n+        )\n+        self.assertEqual(parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}})\n \n     def test_path_with_depth_computed(self):\n         data = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo::2\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo::2",\n         }\n \n-        parsed = queryparser.parseFormquery(MockSite(), [data, ])\n-        self.assertEqual(parsed, {\n-            \'path\': {\n-                \'query\': [\'/%s/foo\' % MOCK_SITE_ID],\n-                \'depth\': 2\n-            }\n-        })\n+        parsed = queryparser.parseFormquery(\n+            MockSite(),\n+            [data],\n+        )\n+        self.assertEqual(\n+            parsed, {"path": {"query": ["/%s/foo" % MOCK_SITE_ID], "depth": 2}}\n+        )\n \n     def test_multi_path(self):\n         data_1 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo",\n         }\n         data_2 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/bar\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/bar",\n         }\n \n         parsed = queryparser.parseFormquery(MockSite(), [data_1, data_2])\n         self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\n-                \'/%s/foo\' % MOCK_SITE_ID,\n-                \'/%s/bar\' % MOCK_SITE_ID]}})\n+            parsed,\n+            {"path": {"query": ["/%s/foo" % MOCK_SITE_ID, "/%s/bar" % MOCK_SITE_ID]}},\n+        )\n \n     def test_multi_path_with_depth_computet(self):\n         data_1 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/foo::2\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/foo::2",\n         }\n         data_2 = {\n-            \'i\': \'path\',\n-            \'o\': \'plone.app.querystring.operation.string.path\',\n-            \'v\': \'/bar::5\',\n+            "i": "path",\n+            "o": "plone.app.querystring.operation.string.path",\n+            "v": "/bar::5",\n         }\n \n         parsed = queryparser.parseFormquery(MockSite(), [data_1, data_2])\n         self.assertEqual(\n-            parsed, {\'path\': {\'query\': [\n-                \'/%s/foo\' % MOCK_SITE_ID,\n-                \'/%s/bar\' % MOCK_SITE_ID], \'depth\': 2}})\n+            parsed,\n+            {\n+                "path": {\n+                    "query": ["/%s/foo" % MOCK_SITE_ID, "/%s/bar" % MOCK_SITE_ID],\n+                    "depth": 2,\n+                }\n+            },\n+        )\n \n \n class TestQueryGenerators(TestQueryParserBase):\n-\n     def test__between(self):\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=[\'2009/08/12\', \'2009/08/14\']\n+            index="modified", operator="_between", values=["2009/08/12", "2009/08/14"]\n         )\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2009/08/12\', \'2009/08/14\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {\n+            "modified": {"query": ["2009/08/12", "2009/08/14"], "range": "minmax"}\n+        }\n         self.assertEqual(parsed, expected)\n \n     def test__between_reversed_dates(self):\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=[\'2009/08/14\', \'2009/08/12\']\n+            index="modified", operator="_between", values=["2009/08/14", "2009/08/12"]\n         )\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2009/08/12\', \'2009/08/14\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {\n+            "modified": {"query": ["2009/08/12", "2009/08/14"], "range": "minmax"}\n+        }\n         self.assertEqual(parsed, expected)\n \n     def test__between_empty_input(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_between\',\n-            values=\'\'\n-        )\n+        data = Row(index="modified", operator="_between", values="")\n         parsed = queryparser._between(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'\', \'\'],\n-                    \'range\': \'minmax\'}}\n+        expected = {"modified": {"query": ["", ""], "range": "minmax"}}\n         self.assertEqual(parsed, expected)\n \n     def test__equal(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_equal\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_equal", values="2010/03/18")\n         parsed = queryparser._equal(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\'}}\n+        expected = {"modified": {"query": "2010/03/18"}}\n         self.assertEqual(parsed, expected)\n \n         data = Row(\n-            index=\'modified\',\n-            operator=\'_equal\',\n-            values=[\'2010/03/18\', \'2010/03/19\']\n+            index="modified", operator="_equal", values=["2010/03/18", "2010/03/19"]\n         )\n         parsed = queryparser._equal(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [\'2010/03/18\', \'2010/03/19\']}}\n+        expected = {"modified": {"query": ["2010/03/18", "2010/03/19"]}}\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=b"20")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20}}\n+        expected = {"modified": {"query": 20}}\n         self.assertEqual(parsed, expected)\n \n         # list of bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[b\'20\', b\'21\']\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=[b"20", b"21"])\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [20, 21]}}\n+        expected = {"modified": {"query": [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=u\'20\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values="20")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20}}\n+        expected = {"modified": {"query": 20}}\n         self.assertEqual(parsed, expected)\n \n         # list of texts\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[u\'20\', u\'21\']\n-        )\n+        data = Row(index="modified", operator="_intEqual", values=["20", "21"])\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': [20, 21]}}\n+        expected = {"modified": {"query": [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n         # bad text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intEqual", values="bad")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None}}\n+        expected = {"modified": {"query": None}}\n         self.assertEqual(parsed, expected)\n \n         # list of bad text\n         data = Row(\n-            index=\'modified\',\n-            operator=\'_intEqual\',\n-            values=[b\'bad\', \'text\', u\'values\']\n+            index="modified", operator="_intEqual", values=[b"bad", "text", "values"]\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None}}\n+        expected = {"modified": {"query": None}}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThan(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_lessThan\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_lessThan", values="2010/03/18")\n         parsed = queryparser._lessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\', \'range\': \'max\'}}\n+        expected = {"modified": {"query": "2010/03/18", "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values=b"20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        expected = {"modified": {"query": 20, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=u\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values="20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        expected = {"modified": {"query": 20, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n         # bad value\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLessThan\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intLessThan", values="bad")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None, \'range\': \'max\'}}\n+        expected = {"modified": {"query": None, "range": "max"}}\n         self.assertEqual(parsed, expected)\n \n     def test__largerThan(self):\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_largerThan\',\n-            values=\'2010/03/18\'\n-        )\n+        data = Row(index="modified", operator="_largerThan", values="2010/03/18")\n         parsed = queryparser._largerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': \'2010/03/18\', \'range\': \'min\'}}\n+        expected = {"modified": {"query": "2010/03/18", "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n         # bytes\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=b\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values=b"20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        expected = {"modified": {"query": 20, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n         # text\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=u\'20\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values="20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        expected = {"modified": {"query": 20, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n         # bad value\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_intLargerThan\',\n-            values=\'bad\'\n-        )\n+        data = Row(index="modified", operator="_intLargerThan", values="bad")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {\'modified\': {\'query\': None, \'range\': \'min\'}}\n+        expected = {"modified": {"query": None, "range": "min"}}\n         self.assertEqual(parsed, expected)\n \n     def test__currentUser(self):\n@@ -461,26 +420,18 @@ def test__currentUser(self):\n         u = MockUser()\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(\n-            index=\'Creator\',\n-            operator=\'_currentUser\',\n-            values=None\n-        )\n+        data = Row(index="Creator", operator="_currentUser", values=None)\n         parsed = queryparser._currentUser(context, data)\n-        expected = {\'Creator\': {\'query\': \'Anonymous User\'}}\n+        expected = {"Creator": {"query": "Anonymous User"}}\n         self.assertEqual(parsed, expected)\n \n         # Logged in user \'admin\'\n-        u = MockUser(username=\'admin\')\n+        u = MockUser(username="admin")\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(\n-            index=\'Creator\',\n-            operator=\'_currentUser\',\n-            values=None\n-        )\n+        data = Row(index="Creator", operator="_currentUser", values=None)\n         parsed = queryparser._currentUser(context, data)\n-        expected = {\'Creator\': {\'query\': \'admin\'}}\n+        expected = {"Creator": {"query": "admin"}}\n         self.assertEqual(parsed, expected)\n \n     def test__showInactive(self):\n@@ -488,24 +439,20 @@ def test__showInactive(self):\n         u = MockUser()\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(index=\'show_inactive\',\n-                   operator=\'_showInactive\',\n-                   values=["Manager"])\n+        data = Row(index="show_inactive", operator="_showInactive", values=["Manager"])\n         parsed = queryparser._showInactive(context, data)\n         # False is expected since Anonymous doesn\'t have Manager role\n-        expected = {\'show_inactive\': False}\n+        expected = {"show_inactive": False}\n         self.assertEqual(parsed, expected)\n \n         # Logged in user \'admin\'\n-        u = MockUser(username=\'admin\', roles=("Manager",))\n+        u = MockUser(username="admin", roles=("Manager",))\n         pm = MockPortal_membership(user=u)\n         context = MockSite(portal_membership=pm)\n-        data = Row(index=\'show_inactive\',\n-                   operator=\'_showInactive\',\n-                   values=["Manager"])\n+        data = Row(index="show_inactive", operator="_showInactive", values=["Manager"])\n         parsed = queryparser._showInactive(context, data)\n         # True is expected since Admin should have Manager role\n-        expected = {\'show_inactive\': True}\n+        expected = {"show_inactive": True}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThanRelativeDate(self):\n@@ -513,12 +460,8 @@ def test__lessThanRelativeDate(self):\n         now = DateTime()\n         mydate = now + days\n         expected_dates = [now.earliestTime(), mydate.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_lessThanRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_lessThanRelativeDate", values=days)\n         parsed = queryparser._lessThanRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -527,12 +470,8 @@ def test__moreThanRelativeDate(self):\n         now = DateTime()\n         mydate = now - days\n         expected_dates = [mydate.earliestTime(), now.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_moreThanRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_moreThanRelativeDate", values=days)\n         parsed = queryparser._moreThanRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -540,12 +479,8 @@ def test__beforeRelativeDate(self):\n         days = 365\n         now = DateTime()\n         mydate = now.earliestTime() - days\n-        expected = {\'modified\': {\'query\': mydate, \'range\': \'max\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_beforeRelativeDate\',\n-            values=days\n-        )\n+        expected = {"modified": {"query": mydate, "range": "max"}}\n+        data = Row(index="modified", operator="_beforeRelativeDate", values=days)\n         parsed = queryparser._beforeRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n@@ -553,155 +488,117 @@ def test__afterRelativeDate(self):\n         days = 2\n         now = DateTime()\n         mydate = now.earliestTime() + days\n-        expected = {\'effective\': {\'query\': mydate, \'range\': \'min\'}}\n-        data = Row(\n-            index=\'effective\',\n-            operator=\'_afterRelativeDate\',\n-            values=days\n-        )\n+        expected = {"effective": {"query": mydate, "range": "min"}}\n+        data = Row(index="effective", operator="_afterRelativeDate", values=days)\n         parsed = queryparser._afterRelativeDate(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n     def test__today(self):\n         now = DateTime()\n         expected_dates = [now.earliestTime(), now.latestTime()]\n-        expected = {\'modified\': {\'query\': expected_dates, \'range\': \'minmax\'}}\n-        data = Row(\n-            index=\'modified\',\n-            operator=\'_today\',\n-            values=expected_dates\n-        )\n+        expected = {"modified": {"query": expected_dates, "range": "minmax"}}\n+        data = Row(index="modified", operator="_today", values=expected_dates)\n         parsed = queryparser._today(MockSite(), data)\n         self.assertEqual(parsed, expected)\n \n     def test__path(self):\n         # absoute path from plone site root\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=\'/news/\'\n-        )\n+        data = Row(index="path", operator="_path", values="/news/")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/%s/news/\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/news/" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # by uid\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=\'00000000000000001\'\n-        )\n+        data = Row(index="path", operator="_path", values="00000000000000001")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/%s/foo\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/foo" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n     def test__navigationPath(self):\n         # absoute path from plone site root\n         # Search base\n-        context = MockObject(uid=\'00000000000000001\',\n-                             path="/%s/foo/bar" % MOCK_SITE_ID)\n+        context = MockObject(uid="00000000000000001", path="/%s/foo/bar" % MOCK_SITE_ID)\n         # Nav root\n-        context.__parent__ = MockNavRoot(uid=\'00000000000000002\',\n-                                         path="/%s/foo" % MOCK_SITE_ID)\n+        context.__parent__ = MockNavRoot(\n+            uid="00000000000000002", path="/%s/foo" % MOCK_SITE_ID\n+        )\n         # Plone root\n         context.__parent__.__parent__ = MockSite()\n         # Zope root\n-        context.__parent__.__parent__.__parent__ = \\\n-            MockObject(uid=\'00000000000000004\', path="/")\n-\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_navigationPath\',\n-            values=\'/bar/\'\n+        context.__parent__.__parent__.__parent__ = MockObject(\n+            uid="00000000000000004", path="/"\n         )\n+\n+        data = Row(index="path", operator="_navigationPath", values="/bar/")\n         parsed = queryparser._navigationPath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/foo/bar/\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/foo/bar/" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n     def test__relativePath(self):\n         # build test navtree\n-        context = MockObject(uid=\'00000000000000001\',\n-                             path="/%s/bar/fizz" % MOCK_SITE_ID)\n-        context.__parent__ = MockObject(uid=\'00000000000000002\',\n-                                        path="/%s/bar" % MOCK_SITE_ID)\n+        context = MockObject(\n+            uid="00000000000000001", path="/%s/bar/fizz" % MOCK_SITE_ID\n+        )\n+        context.__parent__ = MockObject(\n+            uid="00000000000000002", path="/%s/bar" % MOCK_SITE_ID\n+        )\n         # Plone root\n         context.__parent__.__parent__ = MockSite()\n         # Zope root\n-        context.__parent__.__parent__.__parent__ = \\\n-            MockObject(uid=\'00000000000000004\', path="/")\n+        context.__parent__.__parent__.__parent__ = MockObject(\n+            uid="00000000000000004", path="/"\n+        )\n         # ploneroot sub folder\n-        context.__parent__.__parent__.ham = \\\n-            MockObject(uid=\'00000000000000005\',\n-                       path="/%s/ham" % MOCK_SITE_ID)\n+        context.__parent__.__parent__.ham = MockObject(\n+            uid="00000000000000005", path="/%s/ham" % MOCK_SITE_ID\n+        )\n         # collection subfolder\n-        context.__parent__.egg = MockObject(uid=\'00000000000000006\',\n-                                            path="/%s/bar/egg" % MOCK_SITE_ID)\n+        context.__parent__.egg = MockObject(\n+            uid="00000000000000006", path="/%s/bar/egg" % MOCK_SITE_ID\n+        )\n \n         # show my siblings\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'..\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="..")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/bar" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # walk upwards\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'../../\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="../../")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # if you walk beyond INavigatinRoot it should stop and return\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../../../\')\n+        data = Row(index="path", operator="_relativePath", values="../../../")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # reach a subfolder on Plone root\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../../ham\')\n+        data = Row(index="path", operator="_relativePath", values="../../ham")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/ham\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/ham" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # reach a subfolder on parent of collection\n-        data = Row(index=\'path\',\n-                   operator=\'_relativePath\',\n-                   values=\'../egg\')\n+        data = Row(index="path", operator="_relativePath", values="../egg")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar/egg\' % MOCK_SITE_ID]}}\n+        expected = {"path": {"query": ["/%s/bar/egg" % MOCK_SITE_ID]}}\n         self.assertEqual(parsed, expected)\n \n         # relative path with depth\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_relativePath\',\n-            values=\'..::2\'\n-        )\n+        data = Row(index="path", operator="_relativePath", values="..::2")\n         parsed = queryparser._relativePath(context, data)\n-        expected = {\'path\': {\'query\': [\'/%s/bar\' % MOCK_SITE_ID], \'depth\': 2}}\n+        expected = {"path": {"query": ["/%s/bar" % MOCK_SITE_ID], "depth": 2}}\n         self.assertEqual(parsed, expected)\n \n     def test_getPathByUID(self):\n-        actual = queryparser.getPathByUID(MockSite(), \'00000000000000001\')\n-        self.assertEqual(actual, \'/site/foo\')\n-        \n+        actual = queryparser.getPathByUID(MockSite(), "00000000000000001")\n+        self.assertEqual(actual, "/site/foo")\n+\n     def test_objStartsWithSiteId(self):\n-        data = Row(\n-            index=\'path\',\n-            operator=\'_path\',\n-            values=\'/{0}-news/\'.format(MOCK_SITE_ID)\n-        )\n+        data = Row(index="path", operator="_path", values=f"/{MOCK_SITE_ID}-news/")\n         parsed = queryparser._absolutePath(MockSite(), data)\n-        expected = {\'path\': {\'query\': [\'/{0}/{1}-news/\'.format(MOCK_SITE_ID, MOCK_SITE_ID)]}}\n+        expected = {"path": {"query": [f"/{MOCK_SITE_ID}/{MOCK_SITE_ID}-news/"]}}\n         self.assertEqual(parsed, expected)\n-        \ndiff --git a/plone/app/querystring/tests/testRegistryIntegration.py b/plone/app/querystring/tests/testRegistryIntegration.py\nindex 1fda4c5..4a965e2 100644\n--- a/plone/app/querystring/tests/testRegistryIntegration.py\n+++ b/plone/app/querystring/tests/testRegistryIntegration.py\n@@ -1,52 +1,51 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n import unittest\n \n \n class TestOperationDefinitions(unittest.TestCase):\n-\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_string_equality(self):\n         registry = self.portal.portal_registry\n \n         prefix = "plone.app.querystring.operation.string.is"\n-        self.assertTrue(prefix + \'.title\' in registry)\n+        self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Is")\n-        self.assertEqual(registry[prefix + ".description"],\n-                         \'Tip: you can use * to autocomplete.\')\n-        self.assertEqual(registry[prefix + ".operation"],\n-                         u\'plone.app.querystring.queryparser._equal\')\n+        self.assertEqual(\n+            registry[prefix + ".description"], "Tip: you can use * to autocomplete."\n+        )\n+        self.assertEqual(\n+            registry[prefix + ".operation"], "plone.app.querystring.queryparser._equal"\n+        )\n \n     def test_date_lessthan(self):\n         registry = self.portal.portal_registry\n-        prefix = \'plone.app.querystring.operation.date.lessThan\'\n+        prefix = "plone.app.querystring.operation.date.lessThan"\n \n         self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Before date")\n-        self.assertEqual(registry[prefix + ".description"],\n-                         \'Please use YYYY/MM/DD.\')\n-        self.assertEqual(registry[prefix + ".operation"],\n-                         u\'plone.app.querystring.queryparser._lessThan\')\n+        self.assertEqual(registry[prefix + ".description"], "Please use YYYY/MM/DD.")\n+        self.assertEqual(\n+            registry[prefix + ".operation"],\n+            "plone.app.querystring.queryparser._lessThan",\n+        )\n \n \n class TestFieldDefinitions(unittest.TestCase):\n-\n     layer = PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_getId(self):\n         registry = self.portal.portal_registry\n-        prefix = \'plone.app.querystring.field.getId\'\n+        prefix = "plone.app.querystring.field.getId"\n         self.assertTrue(prefix + ".title" in registry)\n \n         self.assertEqual(registry[prefix + ".title"], "Short name (id)")\n@@ -54,14 +53,16 @@ def test_getId(self):\n         operations = registry[prefix + ".operations"]\n         self.assertEqual(len(operations), 2)\n \n-        equal = \'plone.app.querystring.operation.string.is\'\n+        equal = "plone.app.querystring.operation.string.is"\n         self.assertTrue(equal in operations)\n \n-        exclude = \'plone.app.querystring.operation.string.isNot\'\n+        exclude = "plone.app.querystring.operation.string.isNot"\n         self.assertTrue(exclude in operations)\n \n-        self.assertEqual(registry[prefix + ".description"],\n-                         "The short name of an item (used in the url)")\n+        self.assertEqual(\n+            registry[prefix + ".description"],\n+            "The short name of an item (used in the url)",\n+        )\n         self.assertEqual(registry[prefix + ".enabled"], True)\n         self.assertEqual(registry[prefix + ".sortable"], True)\n         self.assertEqual(registry[prefix + ".group"], "Metadata")\n@@ -72,8 +73,8 @@ def test_getobjpositioninparent_largerthan(self):\n         Names not matching for operations getObjPositionInParent\n         see also https://github.com/plone/plone.app.querystring/issues/22\n         """\n-        key = \'plone.app.querystring.field.getObjPositionInParent.operations\'\n-        operation = \'plone.app.querystring.operation.int.largerThan\'\n+        key = "plone.app.querystring.field.getObjPositionInParent.operations"\n+        operation = "plone.app.querystring.operation.int.largerThan"\n         registry = self.portal.portal_registry\n \n         # check if operation is used for getObjPositionInParent\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex 4f8ea15..bb8a1cc 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -1,26 +1,21 @@\n-# -*- coding: utf-8 -*-\n-from plone.registry.interfaces import IRegistry\n+from plone.app.querystring.interfaces import IQuerystringRegistryReader\n+from plone.app.querystring.registryreader import DottedDict\n+from plone.app.querystring.testing import PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n+from plone.app.querystring.tests import registry_testdata as td\n from plone.registry import Registry\n+from plone.registry.interfaces import IRegistry\n from zope.component import getGlobalSiteManager\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleVocabulary\n \n-from plone.app.querystring.interfaces import IQuerystringRegistryReader\n-from plone.app.querystring.registryreader import DottedDict\n-from plone.app.querystring.testing import \\\n-    PLONEAPPQUERYSTRING_INTEGRATION_TESTING\n-from plone.app.querystring.tests import registry_testdata as td\n-\n import unittest\n \n \n @implementer(IVocabularyFactory)\n-class TestVocabulary(object):\n-\n+class TestVocabulary:\n     def __call__(self, context):\n-        return SimpleVocabulary([\n-            SimpleVocabulary.createTerm(\'foo\', \'foo\', u\'bar\')])\n+        return SimpleVocabulary([SimpleVocabulary.createTerm("foo", "foo", "bar")])\n \n \n class TestRegistryReader(unittest.TestCase):\n@@ -28,11 +23,14 @@ class TestRegistryReader(unittest.TestCase):\n \n     def setUp(self):\n         gsm = getGlobalSiteManager()\n-        gsm.registerUtility(TestVocabulary(), IVocabularyFactory,\n-                            \'plone.app.querystring.tests.testvocabulary\')\n+        gsm.registerUtility(\n+            TestVocabulary(),\n+            IVocabularyFactory,\n+            "plone.app.querystring.tests.testvocabulary",\n+        )\n \n     def getLogger(self, value):\n-        return \'plone.app.querystring\'\n+        return "plone.app.querystring"\n \n     def shouldPurge(self):\n         return False\n@@ -40,6 +38,7 @@ def shouldPurge(self):\n     def createRegistry(self, xml):\n         """Create a registry from a minimal set of fields and operators"""\n         from plone.app.registry.exportimport.handler import RegistryImporter\n+\n         gsm = getGlobalSiteManager()\n         self.registry = Registry()\n         gsm.registerUtility(self.registry, IRegistry)\n@@ -50,15 +49,15 @@ def createRegistry(self, xml):\n \n     def test_dotted_dict(self):\n         """test the dotted dict type which is used by the registry reader to\n-           access dicts in dicts by dotted names. (eg field.created.operations)\n-           it should raise a keyerror when an invalid key is used\n-           TODO : DottedDict should be in a separate package\n+        access dicts in dicts by dotted names. (eg field.created.operations)\n+        it should raise a keyerror when an invalid key is used\n+        TODO : DottedDict should be in a separate package\n         """\n-        dd = DottedDict({\'my\': {\'dotted\': {\'name\': \'value\'}}})\n-        self.assertEqual(dd.get(\'my.dotted.name\'), \'value\')\n-        self.assertRaises(KeyError, dd.get, \'my.dotted.wrongname\')\n-        dd = DottedDict({\'my\': \'value\'})\n-        self.assertEqual(dd.get(\'my\'), \'value\')\n+        dd = DottedDict({"my": {"dotted": {"name": "value"}}})\n+        self.assertEqual(dd.get("my.dotted.name"), "value")\n+        self.assertRaises(KeyError, dd.get, "my.dotted.wrongname")\n+        dd = DottedDict({"my": "value"})\n+        self.assertEqual(dd.get("my"), "value")\n \n     def test_parse_registry(self):\n         """tests if the parsed registry data is correct"""\n@@ -69,15 +68,14 @@ def test_parse_registry(self):\n \n     def test_get_vocabularies(self):\n         """tests if getVocabularyValues is returning the correct vocabulary\n-           values in the correct format\n+        values in the correct format\n         """\n         registry = self.createRegistry(td.test_vocabulary_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.getVocabularyValues(result)\n-        vocabulary_result = result.get(\n-            \'plone.app.querystring.field.reviewState.values\')\n-        self.assertEqual(vocabulary_result, {\'foo\': {\'title\': u\'bar\'}})\n+        vocabulary_result = result.get("plone.app.querystring.field.reviewState.values")\n+        self.assertEqual(vocabulary_result, {"foo": {"title": "bar"}})\n \n     def test_map_operations_clean(self):\n         """tests if mapOperations is getting all operators correctly"""\n@@ -85,10 +83,8 @@ def test_map_operations_clean(self):\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n-        operations = result.get(\n-            \'plone.app.querystring.field.created.operations\')\n-        operators = result.get(\n-            \'plone.app.querystring.field.created.operators\')\n+        operations = result.get("plone.app.querystring.field.created.operations")\n+        operators = result.get("plone.app.querystring.field.created.operators")\n         for operation in operations:\n             self.assertTrue(operation in operators)\n \n@@ -98,43 +94,36 @@ def test_map_operations_missing(self):\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n-        operators = result.get(\n-            \'plone.app.querystring.field.created.operators\').keys()\n-        self.assertTrue(\n-            \'plone.app.querystring.operation.date.lessThan\'\n-            in operators\n-        )\n-        self.assertFalse(\n-            \'plone.app.querystring.operation.date.largerThan\'\n-            in operators\n-        )\n+        operators = result.get("plone.app.querystring.field.created.operators").keys()\n+        self.assertTrue("plone.app.querystring.operation.date.lessThan" in operators)\n+        self.assertFalse("plone.app.querystring.operation.date.largerThan" in operators)\n \n     def test_sortable_indexes(self):\n         """tests if sortable indexes from the registry will be available in\n-           the parsed registry\n+        the parsed registry\n         """\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader.parseRegistry()\n         result = reader.mapOperations(result)\n         result = reader.mapSortableIndexes(result)\n-        sortables = result[\'sortable\']\n+        sortables = result["sortable"]\n \n         # there should be one sortable index\n         self.assertEqual(len(sortables), 1)\n \n         # confirm that every sortable really is sortable\n         for field in sortables.values():\n-            self.assertEqual(field[\'sortable\'], True)\n+            self.assertEqual(field["sortable"], True)\n \n     def test_registry_adapter(self):\n         """tests the __call__ method of the IQuerystringRegistryReader\n-           adapter\n+        adapter\n         """\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader()\n         self.assertEqual(\n             sorted(list(result.keys())),\n-            [\'indexes\', \'sortable_indexes\'],\n+            ["indexes", "sortable_indexes"],\n         )\ndiff --git a/plone/app/querystring/upgrades.py b/plone/app/querystring/upgrades.py\nindex cc8a085..88797e8 100644\n--- a/plone/app/querystring/upgrades.py\n+++ b/plone/app/querystring/upgrades.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getUtility\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getUtility\n \n \n def upgrade_1_to_2_typo_in_registry(context):\n     registry = getUtility(IRegistry)\n-    name = \'plone.app.querystring.field.getObjPositionInParent.operations\'\n-    wrong_value = \'plone.app.querystring.operation.int.greaterThan\'\n-    right_value = \'plone.app.querystring.operation.int.largerThan\'\n+    name = "plone.app.querystring.field.getObjPositionInParent.operations"\n+    wrong_value = "plone.app.querystring.operation.int.greaterThan"\n+    right_value = "plone.app.querystring.operation.int.largerThan"\n     values = registry.get(name)\n     if not values:\n         return\n@@ -19,22 +18,14 @@ def upgrade_1_to_2_typo_in_registry(context):\n \n \n def fix_select_all_existing_collections(context, query=None):\n-\n     if query is None:\n         query = {"portal_type": "Collection"}\n \n-    indexes_to_fix = [\n-        u\'portal_type\',\n-        u\'review_state\',\n-        u\'Creator\',\n-        u\'Subject\'\n-    ]\n+    indexes_to_fix = ["portal_type", "review_state", "Creator", "Subject"]\n     operator_mapping = {\n         # old -> new\n-        u"plone.app.querystring.operation.selection.is":\n-            u"plone.app.querystring.operation.selection.any",\n-        u"plone.app.querystring.operation.string.is":\n-            u"plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.selection.is": "plone.app.querystring.operation.selection.any",\n+        "plone.app.querystring.operation.string.is": "plone.app.querystring.operation.selection.any",\n     }\n     catalog = context.portal_catalog\n     brains = catalog.unrestrictedSearchResults(**query)\n@@ -43,14 +34,14 @@ def fix_select_all_existing_collections(context, query=None):\n         changed = False\n         obj = brain.getObject()\n         fixed_querystring = list()\n-        for querystring in (obj.query or []):\n+        for querystring in obj.query or []:\n             # transform querystring to dict\n             if not isinstance(querystring, dict):\n                 querystring = dict(querystring)\n-            if querystring[\'i\'] in indexes_to_fix:\n+            if querystring["i"] in indexes_to_fix:\n                 for old_operator, new_operator in operator_mapping.items():\n-                    if querystring[\'o\'] == old_operator:\n-                        querystring[\'o\'] = new_operator\n+                    if querystring["o"] == old_operator:\n+                        querystring["o"] = new_operator\n                         changed = True\n             fixed_querystring.append(querystring)\n \n@@ -60,8 +51,9 @@ def fix_select_all_existing_collections(context, query=None):\n \n \n def fix_select_all_syndicatable_collections(context):\n-\n     return fix_select_all_existing_collections(\n         context,\n-        query={"object_provides": "plone.app.contenttypes.behaviors.collection.ISyndicatableCollection"}  # noqa\n+        query={\n+            "object_provides": "plone.app.contenttypes.behaviors.collection.ISyndicatableCollection"\n+        },  # noqa\n     )\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..8f2dfd2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,6 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\ndiff --git a/setup.py b/setup.py\nindex 65d9a71..e0f5b5f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,21 +1,23 @@\n-# -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'2.0.2.dev0\'\n+\n+version = "2.0.2.dev0"\n \n long_description = open("README.rst").read() + "\\n"\n long_description += open("CHANGES.rst").read()\n \n setup(\n-    name=\'plone.app.querystring\',\n+    name="plone.app.querystring",\n     version=version,\n     description=(\n         "A queryparser, querybuilder and extra helper tools, to "\n         "parse stored queries to actual results, used in "\n-        "new style Plone collections"),\n+        "new style Plone collections"\n+    ),\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n+        "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n@@ -26,40 +28,39 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'collection queries\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.app.querystring\',\n-    license=\'GPL version 2\',\n+    keywords="collection queries",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.app.querystring",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        \'DateTime\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'plone.app.contentlisting\',\n-        \'plone.app.layout\',\n-        \'plone.app.registry>=1.1\',\n-        \'plone.batching\',\n-        \'plone.registry\',\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.dottedname\',\n-        \'zope.globalrequest\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n+        "DateTime",\n+        "plone.app.contentlisting",\n+        "plone.app.layout",\n+        "plone.app.registry>=1.1",\n+        "plone.base",\n+        "plone.batching",\n+        "plone.registry",\n+        "Products.CMFCore",\n+        "python-dateutil",\n+        "setuptools",\n+        "zope.component",\n+        "zope.dottedname",\n+        "zope.globalrequest",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.testing",\n         ]\n     },\n     entry_points="""\n'

