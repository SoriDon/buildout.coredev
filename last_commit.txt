Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T17:30:27+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/2f1fd8f2d1cbe276054be7dc17236f76eeddebea

Add buildout

Files changed:
A buildout.cfg
A plone-4.3.x.cfg
A requirements.txt
M .gitignore

diff --git a/.gitignore b/.gitignore
index 0c760fd..6f0c371 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,8 @@
 build
 dist
 *.mo
+.installed.cfg
+bin/
+develop-eggs/
+eggs/
+parts/
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..11c6e34
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,40 @@
+[buildout]
+extends =
+    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+    plone-4.3.x.cfg
+package-name = Products.CMFDiffTool
+package-extras = [test]
+test-eggs = Pillow
+develop = .
+parts +=
+    omelette
+    code-analysis
+
+# network speedup
+socket-timeout = 5
+allow-hosts =
+    *.python.org
+    docutils.sourceforge.net
+    prdownloads.sourceforge.net
+    effbot.org
+    dist.plone.org
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs = ${test:eggs}
+
+[code-analysis]
+recipe = plone.recipe.codeanalysis
+directory = ${buildout:directory}/Products
+flake8-max-complexity = 20
+utf8-header = True
+clean-lines = True
+imports = True
+pep3101 = False
+debug-statements = True
+return-status-codes = True
+
+[versions]
+zc.buildout=
+setuptools=
+Products.CMFDiffTool=
diff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg
new file mode 100644
index 0000000..e69de29
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..ff404cc
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1 @@
+zc.buildout==2.5.0


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T17:30:32+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/bbff199a739e9ff3761ad1cb8b2e934219ccfb12

Remove ZopeTestCase

Files changed:
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py

diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index 5f9ac23..b583206 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -3,9 +3,10 @@
 # CMFDiffTool tests
 #
 from os import linesep
-from Testing import ZopeTestCase
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.FieldDiff import dump
+from unittest import TestCase
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 
 _marker = []
 
@@ -30,9 +31,11 @@ def method(self):
         return u"different method val\xfce"
 
 
-class TestFieldDiff(ZopeTestCase.ZopeTestCase):
+class TestFieldDiff(TestCase):
     """Test the FieldDiff class"""
 
+    layer = PLONE_INTEGRATION_TESTING
+
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
diff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py
index ef488fe..ffbed84 100644
--- a/Products/CMFDiffTool/tests/testListDiff.py
+++ b/Products/CMFDiffTool/tests/testListDiff.py
@@ -3,8 +3,9 @@
 # CMFDiffTool tests
 #
 from os import linesep
-from Testing import ZopeTestCase
 from Products.CMFDiffTool.ListDiff import ListDiff
+from unittest import TestCase
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 
 _marker = []
 
@@ -17,9 +18,11 @@ class B:
     attribute = [1, 2, 3, 4]
 
 
-class TestListDiff(ZopeTestCase.ZopeTestCase):
+class TestListDiff(TestCase):
     """Test the ListDiff class"""
 
+    layer = PLONE_INTEGRATION_TESTING
+
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
diff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py
index 109cd1f..edd427a 100644
--- a/Products/CMFDiffTool/tests/testTextDiff.py
+++ b/Products/CMFDiffTool/tests/testTextDiff.py
@@ -3,8 +3,9 @@
 from os import linesep
 import sys
 
-from Testing import ZopeTestCase
 from Products.CMFDiffTool.TextDiff import TextDiff
+from unittest import TestCase
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 
 _marker = []
 
@@ -23,8 +24,9 @@ def method(self):
         return "method 過労死"
 
 
-class TestTextDiff(ZopeTestCase.ZopeTestCase):
+class TestTextDiff(TestCase):
     """Test the TextDiff class"""
+    layer = PLONE_INTEGRATION_TESTING
 
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
@@ -100,9 +102,9 @@ def testUnifiedDiff(self):
 -कामसूत्र
 +過労死"""
         else:
-            expected = """--- None 
+            expected = """--- None
 
-+++ None 
++++ None
 
 @@ -1,1 +1,1 @@
 


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T17:30:32+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/57e7787b0633d9671d4f3a3739f43d35b80e54a5

PEP8 1

Files changed:
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/interfaces/IChangeSet.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/__init__.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py

diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py
index 0b5e1aa..d488575 100644
--- a/Products/CMFDiffTool/ATCompoundDiff.py
+++ b/Products/CMFDiffTool/ATCompoundDiff.py
@@ -77,52 +77,52 @@ def getFields(self, obj1, obj2):
         for schemata_name in schemata_names:
             schema = schematas[schemata_name]
             for field in schema.viewableFields(obj1):
-                if (AT_FIELD_MAPPING.has_key(field.type) and
+                if (field.type in AT_FIELD_MAPPING and
                         field.getName() not in AT_EXCLUDED_FIELDS):
                     is_primary = getattr(field, 'primary', False)
                     label = field.widget.Label(obj1)
                     diff_type = AT_FIELD_MAPPING[field.type]
                     if IDifference.implementedBy(diff_type):
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif 'raw' in diff_type:
-                        #Handle Fields which diff against the edit accessor
+                        #  Handle Fields which diff against the edit accessor
                         diff_name = diff_type.split(':')[1]
                         diff_type = globals()[diff_name]
                         fields.append({'name': field.getName(),
-                                    'accessor': field.edit_accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.edit_accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif diff_type == 'variable_binary':
                         diff_type = BinaryDiff
-                        if 'text/' in field.getContentType(obj1) and \
-                        'text/' in \
-                            obj2.getField(field.getName()).getContentType(obj2):
+                        if ('text/' in field.getContentType(obj1) and
+                                'text/' in (obj2.getField(field.getName())
+                                            .getContentType(obj2))):
                             diff_type = TextDiff
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif diff_type == 'variable_text':
                         diff_type = TextDiff
-                        if 'html' in field.getContentType(obj1) and \
-                        'html' in \
-                            obj2.getField(field.getName()).getContentType(obj2):
+                        if ('html' in field.getContentType(obj1) and
+                                'html' in (obj2.getField(field.getName())
+                                           .getContentType(obj2))):
                             diff_type = CMFDTHtmlDiff
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
         return fields
 
 InitializeClass(ATCompoundDiff)
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index 4fa93e5..ab36c12 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -80,10 +80,10 @@ def _getValue(ob, field, field_name, convert_to_str=True):
         # Archetypes with an adapter extended schema needs special handling
         field = ob.getField(field_name)
         if field is None:
-            raise AttributeError, field
+            raise AttributeError(field)
         value = field.getAccessor(ob)
     else:
-        raise AttributeError, field
+        raise AttributeError(field)
 
     # Handle case where the field is a method
     try:
diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py
index 476ebd6..219375e 100644
--- a/Products/CMFDiffTool/BinaryDiff.py
+++ b/Products/CMFDiffTool/BinaryDiff.py
@@ -26,10 +26,14 @@ def _parseField(self, value, filename=None):
             return [self.filenameTitle(filename)]
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set will
+        apply without errors
+        """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError, ("Conflict Error during merge", self.field, value, self.oldValue)
+            raise ValueError("Conflict Error during merge",
+                             self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
         """Update the specified object with the difference"""
diff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py
index e4875f5..6ae17d5 100644
--- a/Products/CMFDiffTool/CMFDiffTool.py
+++ b/Products/CMFDiffTool/CMFDiffTool.py
@@ -30,12 +30,12 @@ class CMFDiffTool(UniqueObject, SimpleItem):
 
     manage_options = (({'label': 'Configure', 'action': 'manage_difftypes'},
                       {'label': 'Overview', 'action': 'manage_overview'},
-                      ) + SimpleItem.manage_options
-                    )
+                       ) + SimpleItem.manage_options
+                      )
 
     implements(IDiffTool)
 
-    ## Internal attributes
+    #  Internal attributes
     _difftypes = {}
 
     def __init__(self):
@@ -58,7 +58,8 @@ def manage_editDiffFields(self, updates, REQUEST=None):
         self._p_changed = 1
 
         if REQUEST:
-            return self.manage_difftypes(manage_tabs_message="Diff mappings updated")
+            return self.manage_difftypes(
+                manage_tabs_message="Diff mappings updated")
 
     security.declareProtected(ManagePortal, 'listDiffTypes')
 
@@ -67,9 +68,11 @@ def manage_addDiffField(self, pt_name, field, diff, REQUEST=None):
         self.setDiffField(pt_name, field, diff)
         if REQUEST:
             return self.manage_difftypes(manage_tabs_message="Field added")
-        
+
     def setDiffField(self, pt_name, field, diff):
-        """Set the diff type for 'field' on the portal type 'pt_name' to 'diff'"""
+        """
+        Set the diff type for 'field' on the portal type 'pt_name' to 'diff'
+        """
         if pt_name not in self.portal_types.listContentTypes():
             raise BadRequest("Error: invalid portal type")
 
@@ -83,7 +86,7 @@ def setDiffField(self, pt_name, field, diff):
             self._pt_diffs.setdefault(pt_name, {})[field] = diff
             self._p_changed = 1
 
-    ## Interface fulfillment ##
+    #  Interface fulfillment
     security.declareProtected(ManagePortal, 'listDiffTypes')
 
     def listDiffTypes(self):
diff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py
index fedac50..6ffb551 100644
--- a/Products/CMFDiffTool/ChangeSet.py
+++ b/Products/CMFDiffTool/ChangeSet.py
@@ -59,7 +59,8 @@ def _isSame(self):
 
     security.declarePublic('computeDiff')
 
-    def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):
+    def computeDiff(self, ob1, ob2, recursive=1, exclude=None,
+                    id1=None, id2=None):
         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).
 
         The results can be accessed through getDiffs()"""
@@ -85,8 +86,9 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):
         diff_tool = getToolByName(self, "portal_diff")
         self._diffs = diff_tool.computeDiff(ob1, ob2, id1=id1, id2=id2)
 
-        if recursive and ob1.isPrincipiaFolderish and \
-                                                     ob2.isPrincipiaFolderish:
+        if (recursive and
+                ob1.isPrincipiaFolderish and
+                ob2.isPrincipiaFolderish):
             self.recursive = 1
             ids1 = set(ob1.objectIds())
             ids2 = set(ob2.objectIds())
@@ -125,7 +127,10 @@ def _addSubSet(self, id, ob1, ob2, exclude, id1, id2):
     security.declarePublic('testChanges')
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set
+        will apply without errors
+        """
         for d in self._diffs:
             d.testChanges(ob)
 
@@ -156,9 +161,12 @@ def applyChanges(self, ob):
     security.declarePublic('getDiffs')
 
     def getDiffs(self):
-        """Returns the list differences between the two objects.
+        """
+        Returns the list differences between the two objects.
 
-        Each difference is a single object implementing the IDifference interface"""
+        Each difference is a single object implementing
+        the IDifference interface
+        """
         return self._diffs
 
     security.declarePublic('getSubDiffs')
diff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py
index 345454a..7517563 100644
--- a/Products/CMFDiffTool/FieldDiff.py
+++ b/Products/CMFDiffTool/FieldDiff.py
@@ -27,10 +27,14 @@ def getLineDiffs(self):
         return difflib.SequenceMatcher(None, a, b).get_opcodes()
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set
+        will apply without errors
+        """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError, ("Conflict Error during merge", self.field, value, self.oldValue)
+            raise ValueError("Conflict Error during merge",
+                             self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
         """Update the specified object with the difference"""
@@ -54,7 +58,7 @@ def ndiff(self):
             elif tag == 'equal':
                 dump(' ', a, alo, ahi, r)
             else:
-                raise ValueError, 'unknown tag ' + `tag`
+                raise ValueError('unknown tag %r', tag)
         return '\n'.join(r)
 
 InitializeClass(FieldDiff)
diff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py
index aa0ecac..5c4e64b 100644
--- a/Products/CMFDiffTool/__init__.py
+++ b/Products/CMFDiffTool/__init__.py
@@ -1,11 +1,6 @@
 # -*- coding: utf-8 -*-
 """Initialize CMFDiffTool Product"""
-# Set up a MessageFactory for the cmfdifftool domain
-from zope.i18nmessageid import MessageFactory
-CMFDiffToolMessageFactory = MessageFactory('cmfdifftool')
-
 from Products.CMFCore.utils import ToolInit
-
 from Products.CMFDiffTool import CMFDiffTool
 from Products.CMFDiffTool import FieldDiff
 from Products.CMFDiffTool import TextDiff
@@ -13,6 +8,10 @@
 from Products.CMFDiffTool import BinaryDiff
 from Products.CMFDiffTool import CMFDTHtmlDiff
 from Products.CMFDiffTool import ATCompoundDiff
+# Set up a MessageFactory for the cmfdifftool domain
+from zope.i18nmessageid import MessageFactory
+CMFDiffToolMessageFactory = MessageFactory('cmfdifftool')
+
 
 CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)
 CMFDiffTool.registerDiffType(FieldDiff.FieldDiff)
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index b65fe63..4e9d97f 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -1,10 +1,8 @@
 from zope.schema import (Bytes, Iterable, Container, Text, Date, Datetime,
                          Time, Choice, Bool)
 from zope.globalrequest import getRequest
-from z3c.form.interfaces import INPUT_MODE
 
 from plone.app.textfield import RichText
-from plone.autoform.base import AutoFields
 from plone.dexterity.browser.edit import DefaultEditForm
 
 from Products.CMFDiffTool.TextDiff import AsTextDiff
@@ -12,7 +10,6 @@
 from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
 from Products.CMFDiffTool.namedfile import NamedFileListDiff
 from Products.CMFDiffTool.choicediff import ChoiceDiff
-from Products.CMFDiffTool.choicediff import get_schemas
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
@@ -129,8 +126,8 @@ def _get_diff_type(self, field):
         if diff_type is ListDiff:
             return (
                 self._compute_diff_type(
-                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION)
-                or diff_type
+                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION) or
+                diff_type
             )
 
         return diff_type or FALL_BACK_DIFF_TYPE
diff --git a/Products/CMFDiffTool/interfaces/IChangeSet.py b/Products/CMFDiffTool/interfaces/IChangeSet.py
index 90be670..21a9201 100644
--- a/Products/CMFDiffTool/interfaces/IChangeSet.py
+++ b/Products/CMFDiffTool/interfaces/IChangeSet.py
@@ -2,4 +2,4 @@
 # Copyright (c) 2003 The Connexions Project, All Rights Reserved
 # Written by Brent Hendricks
 
-from Products.CMFDiffTool.interfaces import IChangeSet
+from Products.CMFDiffTool.interfaces import IChangeSet  # NOQA
diff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py
index ad4f7a6..d1058e6 100644
--- a/Products/CMFDiffTool/interfaces/__init__.py
+++ b/Products/CMFDiffTool/interfaces/__init__.py
@@ -42,11 +42,15 @@ class IDifference(Interface):
 
     meta_type = Attribute('title', 'A human readable name for the diff type')
     field = Attribute('field', 'The name of the field being compared')
-    same = Attribute('same', 'True if the fields are the "same" (whatever that means for this difference)')
+    same = Attribute('same',
+                     'True if the fields are the "same" '
+                     '(whatever that means for this difference)')
     oldValue = Attribute('oldValue', 'The old field value being compared')
     newValue = Attribute('newValue', 'The new field value being compared')
-    oldFilename = Attribute('oldFilename', 'The old filename for the field being compared')
-    newFilename = Attribute('newFilename', 'The new filename for the field being compared')
+    oldFilename = Attribute('oldFilename',
+                            'The old filename for the field being compared')
+    newFilename = Attribute('newFilename',
+                            'The new filename for the field being compared')
 
     def testChanges(ob):
         """Test the specified object to determine if the change set will apply cleanly.
@@ -75,11 +79,6 @@ def getLineDiffs():
 
         The interpretation of these tuples depends on the difference class"""
 
-##     def getCharDiffs():
-##         """Return a list of character differences on a line-by-line basis.
-
-##         For every line in the field being compared, return a list of
-##         character differences """
 
 class IChangeSet(Interface):
     """And interface representing all of the differences between two objects"""
@@ -107,7 +106,8 @@ def applyChanges(ob):
     def getDiffs():
         """Returns the list of differences between the two objects.
 
-        Each difference is a single object implementing the IDifference interface"""
+        Each difference is a single object implementing the
+        IDifference interface"""
 
     def getSubDiffs():
         """If the ChangeSet was computed recursively, returns a list
diff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py
index 9b3e964..99c2115 100644
--- a/Products/CMFDiffTool/interfaces/portal_diff.py
+++ b/Products/CMFDiffTool/interfaces/portal_diff.py
@@ -2,5 +2,5 @@
 # Copyright (c) 2003 The Connexions Project, All Rights Reserved
 # Written by Brent Hendricks
 
-from Products.CMFDiffTool.interfaces import IDifference
-from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff
+from Products.CMFDiffTool.interfaces import IDifference  # NOQA
+from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA
diff --git a/Products/CMFDiffTool/libs/__init__.py b/Products/CMFDiffTool/libs/__init__.py
index 4aa11c7..40a96af 100644
--- a/Products/CMFDiffTool/libs/__init__.py
+++ b/Products/CMFDiffTool/libs/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
\ No newline at end of file
diff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py
index e6f414d..d0939f6 100644
--- a/Products/CMFDiffTool/libs/htmldiff.py
+++ b/Products/CMFDiffTool/libs/htmldiff.py
@@ -69,7 +69,7 @@ def htmlDiff(self, addStylesheet=False):
         a = self.a
         b = self.b
         out = StringIO()
-        #print [o[0] for o in opcodes]
+        #  print [o[0] for o in opcodes]
         for tag, i1, i2, j1, j2 in opcodes:
             if tag == 'equal':
                 for item in a[i1:i2]:
@@ -151,10 +151,12 @@ def endDeleteText(self):
         return '</span> '
 
     def formatInsertTag(self, tag):
-        return '<span class="tagInsert">insert: <tt>%s</tt></span> ' % htmlEncode(tag)
+        return ('<span class="tagInsert">insert: <tt>%s</tt></span> ' %
+                htmlEncode(tag))
 
     def formatDeleteTag(self, tag):
-        return '<span class="tagDelete">delete: <tt>%s</tt></span> ' % htmlEncode(tag)
+        return ('<span class="tagDelete">delete: <tt>%s</tt></span> ' %
+                htmlEncode(tag))
 
 
 class NoTagHTMLMatcher(HTMLMatcher):
@@ -170,7 +172,7 @@ def htmldiff(source1, source2, addStylesheet=False):
     Return the difference between two pieces of HTML
 
         >>> htmldiff('test1', 'test2')
-        '<span class="delete">test1 </span> <span class="insert">test2 </span> '
+        '<span class="delete">test1 </span> <span class="insert">test2 </span> '  # NOQA
         >>> htmldiff('test1', 'test1')
         'test1 '
         >>> htmldiff('<b>test1</b>', '<i>test1</i>')
diff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py
index 0a86e1f..65cd53c 100644
--- a/Products/CMFDiffTool/namedfile.py
+++ b/Products/CMFDiffTool/namedfile.py
@@ -129,9 +129,10 @@ def inline_diff(self):
         dummy_dict = {'repr': '', 'data': None, 'filename': None}
         make_lists_same_length(old_data, new_data, dummy_dict)
 
-        is_same_dict = lambda d1, d2: is_same(
-            d1['data'], d1['filename'], d2['data'], d2['filename']
-        )
+        def is_same_dict(d1, d2):
+            return is_same(
+                d1['data'], d1['filename'], d2['data'], d2['filename']
+            )
 
         return '\n'.join([
             ((self.same_fmt % (css_class, d_old['repr']))
diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 7ca230a..335830d 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -1,4 +1,4 @@
-#coding=utf8
+# -*- coding: utf-8 -*-
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
 from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
diff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py
index 1c85d45..b2112d3 100644
--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py
+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py
@@ -44,7 +44,8 @@ def testAdaptedObjects(self):
         # Add a schema extended field to an ATDocument and test that
         # the compound diff can read it
         from archetypes.schemaextender.field import ExtensionField
-        from archetypes.schemaextender.tests.mocks import IHighlighted, Extender
+        from archetypes.schemaextender.tests.mocks import Extender
+        from archetypes.schemaextender.tests.mocks import IHighlighted
 
         # custom field class which does not set attributes directly on the
         # content
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 2e8ef5e..5dd31f4 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -10,7 +10,7 @@
 
 from unittest import TestCase
 
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA
 
 
 class TestChangeSet(TestCase):
@@ -38,9 +38,12 @@ def setupTestObjects(self):
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
-        self.folder.folder1.invokeFactory('Document', 'doc1', title='My Title1')
-        self.folder.folder1.invokeFactory('Document', 'doc2', title='My Title2')
-        self.folder.folder1.invokeFactory('Document', 'doc3', title='My Title3')
+        self.folder.folder1.invokeFactory('Document', 'doc1',
+                                          title='My Title1')
+        self.folder.folder1.invokeFactory('Document', 'doc2',
+                                          title='My Title2')
+        self.folder.folder1.invokeFactory('Document', 'doc3',
+                                          title='My Title3')
         self.folder.manage_pasteObjects(
                                   self.folder.manage_copyObjects(['folder1']))
 
@@ -144,7 +147,7 @@ def testChangeSetFolderDocRemoved(self):
     def testChangeSetFolderDocAdded(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.invokeFactory('Document', 'doc4',
-                                                         title='My Doc Title')
+                                                  title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
@@ -166,7 +169,7 @@ def testChangeSetFolderReordered(self):
         if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
         elif hasattr(aq_base(self.folder.copy_of_folder1),
-                                                        'moveObjectsByDelta'):
+                     'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
@@ -188,10 +191,10 @@ def testChangeSetFolderReordered(self):
         # XXX we need an explicit way of noting reorders
 
     def testChangeSetFolderComplex(self):
-        self.setupTestFolders()\
+        self.setupTestFolders()
         # Add a new sub object
         self.folder.copy_of_folder1.invokeFactory('Document', 'doc4',
-                                                         title='My Doc Title')
+                                                  title='My Doc Title')
         # Delete a sub object
         self.folder.copy_of_folder1.manage_delObjects('doc2')
         # Change one object
@@ -202,7 +205,7 @@ def testChangeSetFolderComplex(self):
         if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
         elif hasattr(aq_base(self.folder.copy_of_folder1),
-                                                        'moveObjectsByDelta'):
+                     'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
diff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py
index 19b0f0d..1d2c3bd 100644
--- a/Products/CMFDiffTool/tests/testDiffTool.py
+++ b/Products/CMFDiffTool/tests/testDiffTool.py
@@ -8,6 +8,8 @@
 
 from Products.CMFDiffTool.CMFDiffTool import registerDiffType
 from Products.CMFDiffTool.CMFDiffTool import unregisterDiffType
+from unittest import TestCase
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 
 
 class DummyDiff:
@@ -17,9 +19,6 @@ class DummyDiff:
 class DummyDiff2:
     meta_type = "Second Dummy Diff Type"
 
-from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
-
 
 class TestDiffTool(TestCase):
     """Test the portal_diff tool"""
@@ -76,7 +75,9 @@ def testSingleSetDiffField(self):
                          {'title': 'Dummy Diff Type'})
 
     def testMultipleSetDiffField(self):
-        """Test setDiffField method adding a second field to one content type"""
+        """
+        Test setDiffField method adding a second field to one content type
+        """
         self.p_diff.setDiffField('Document', 'title', 'Dummy Diff Type')
         self.p_diff.setDiffField('Document', 'description', 'Dummy Diff Type')
         d = {'title': 'Dummy Diff Type', 'description': 'Dummy Diff Type'}
@@ -92,13 +93,16 @@ def testReplaceSetDiffField(self):
         unregisterDiffType(DummyDiff2)
 
     def testSetDiffFieldNameFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Bob', 'title', 'Dummy Diff Type')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Bob', 'title', 'Dummy Diff Type')
 
     def testSetDiffFieldBlankFieldFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Document', '', 'Dummy Diff Type')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Document', '', 'Dummy Diff Type')
 
     def testSetDiffFieldInvalidDiffFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Document', 'title', 'NoDiff')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Document', 'title', 'NoDiff')
 
     def beforeTearDown(self):
         # Undo changes that don't get rolled back (i.e. module level changes)
diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index b583206..1c26e76 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -27,6 +27,7 @@ def method(self):
 
 class U:
     attribute = u"\xfcnicode value"
+
     def method(self):
         return u"different method val\xfce"
 
diff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py
index edd427a..ee1b86f 100644
--- a/Products/CMFDiffTool/tests/testTextDiff.py
+++ b/Products/CMFDiffTool/tests/testTextDiff.py
@@ -126,6 +126,6 @@ def testHTMLDiff(self):
         <tbody>
             <tr><td class="diff_next" id="difflib_chg_to0__0"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="from0_1">1</td><td nowrap="nowrap"><span class="diff_sub">कामसूत्र</span></td><td class="diff_next"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="to0_1">1</td><td nowrap="nowrap"><span class="diff_add">過労死</span></td></tr>
         </tbody>
-    </table>"""
+    </table>"""  # NOQA
         fd = TextDiff(a, b, 'attribute')
         self.assertEqual(fd.html_diff(), expected)
diff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py
index bf6cc44..c2d3ab3 100644
--- a/Products/CMFDiffTool/tests/test_astextdiff.py
+++ b/Products/CMFDiffTool/tests/test_astextdiff.py
@@ -37,7 +37,7 @@ def _test_diff_date(self, d1, d2, same):
                 self.assertTrue(str(d1) in inline_diff)
             if d2 is not None:
                 self.assertTrue(str(d2) in inline_diff)
-            #self.assertFalse('None' in inline_diff)
+            # self.assertFalse('None' in inline_diff)
 
     def test_should_diff_boolean_fields(self):
         self._test_diff_bool(False, False, True)
@@ -62,4 +62,4 @@ def _test_diff_bool(self, b1, b2, same):
         else:
             self.assertTrue(
                 ('True' in inline_diff) or ('False' in inline_diff))
-            #self.assertFalse('None' in inline_diff)
+            # self.assertFalse('None' in inline_diff)


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T17:30:32+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/dab822d9a7c2d098dbf4a64429ddddfb0e0a03f6

Fix tests

Files changed:
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M setup.py

diff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py
index 5c4e64b..60d1edf 100644
--- a/Products/CMFDiffTool/__init__.py
+++ b/Products/CMFDiffTool/__init__.py
@@ -1,17 +1,18 @@
 # -*- coding: utf-8 -*-
 """Initialize CMFDiffTool Product"""
-from Products.CMFCore.utils import ToolInit
-from Products.CMFDiffTool import CMFDiffTool
-from Products.CMFDiffTool import FieldDiff
-from Products.CMFDiffTool import TextDiff
-from Products.CMFDiffTool import ListDiff
-from Products.CMFDiffTool import BinaryDiff
-from Products.CMFDiffTool import CMFDTHtmlDiff
-from Products.CMFDiffTool import ATCompoundDiff
 # Set up a MessageFactory for the cmfdifftool domain
 from zope.i18nmessageid import MessageFactory
 CMFDiffToolMessageFactory = MessageFactory('cmfdifftool')
 
+from Products.CMFCore.utils import ToolInit  # NOQA
+from Products.CMFDiffTool import CMFDiffTool  # NOQA
+from Products.CMFDiffTool import FieldDiff  # NOQA
+from Products.CMFDiffTool import TextDiff  # NOQA
+from Products.CMFDiffTool import ListDiff  # NOQA
+from Products.CMFDiffTool import BinaryDiff  # NOQA
+from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA
+from Products.CMFDiffTool import ATCompoundDiff  # NOQA
+
 
 CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)
 CMFDiffTool.registerDiffType(FieldDiff.FieldDiff)
diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 335830d..1a3870d 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -4,6 +4,7 @@
 from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
 from zope.component import getSiteManager
 from zope.schema.interfaces import IVocabularyFactory
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
 
 from plone.app.testing.bbb import PTC_FIXTURE
 from plone.app.testing import PloneSandboxLayer
@@ -26,7 +27,7 @@ def vocabulary_factory(context):
 
 class DXLayer(PloneSandboxLayer):
 
-    defaultBases = (PTC_FIXTURE, )
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )
 
     def setUpPloneSite(self, portal):
         """Set up additional products and ZCML required to test
diff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py
index c2d3ab3..780ffa7 100644
--- a/Products/CMFDiffTool/tests/test_astextdiff.py
+++ b/Products/CMFDiffTool/tests/test_astextdiff.py
@@ -2,7 +2,7 @@
 from datetime import date
 from Products.CMFDiffTool.interfaces import IDifference
 
-import unittest2 as unittest
+import unittest
 
 
 class DateDummyType(object):
diff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py
index 06ea786..354d13c 100644
--- a/Products/CMFDiffTool/tests/test_filelistdiff.py
+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py
@@ -3,7 +3,7 @@
 from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFDiffTool import namedfile
 
-import unittest2 as unittest
+import unittest
 
 
 class DummyType(object):
diff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py
index 5277291..3a4f5d8 100644
--- a/Products/CMFDiffTool/tests/test_richtextdiff.py
+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py
@@ -2,7 +2,7 @@
 from plone.app.textfield.value import RichTextValue
 from Products.CMFDiffTool.interfaces import IDifference
 
-import unittest2 as unittest
+import unittest
 
 
 class DummyType(object):
diff --git a/setup.py b/setup.py
index 922f530..1231eea 100644
--- a/setup.py
+++ b/setup.py
@@ -6,8 +6,8 @@
 setup(name='Products.CMFDiffTool',
       version=version,
       description="Diff tool for Plone",
-      long_description=open("README.txt").read() + "\n" +
-                       open("CHANGES.txt").read(),
+      long_description=(open("README.txt").read() + "\n" +
+                        open("CHANGES.txt").read()),
       classifiers=[
         "Development Status :: 5 - Production/Stable",
         "Programming Language :: Python :: 2.7",
@@ -31,6 +31,7 @@
             'plone.namedfile',
             'plone.app.dexterity',
             'plone.app.contenttypes',
+            'plone.app.robotframework',  # Only because plone.app.event fails
         ]
       ),
       install_requires=[


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T17:30:32+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/70161192a274ad095052f2753be9a7aa2fc55207

Now we are getting more serious with Code analysis

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 11c6e34..2de7db1 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -24,7 +24,7 @@ recipe = collective.recipe.omelette
 eggs = ${test:eggs}
 
 [code-analysis]
-recipe = plone.recipe.codeanalysis
+recipe = plone.recipe.codeanalysis [recommended]
 directory = ${buildout:directory}/Products
 flake8-max-complexity = 20
 utf8-header = True


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-01-27T18:54:22+01:00
Author: Patrick Gerken (do3cc) <patrick.gerken@zumtobelgroup.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/a363136dfb204d795c1c7dbc159c41943ae17347

PEP8 2

Files changed:
A .isort.cfg
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/exportimport/difftool.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_install.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M buildout.cfg

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..fb79921
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,5 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py
index d488575..b3a6973 100644
--- a/Products/CMFDiffTool/ATCompoundDiff.py
+++ b/Products/CMFDiffTool/ATCompoundDiff.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-from Products.CMFDiffTool.TextDiff import TextDiff
-from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.BinaryDiff import BinaryDiff
-from Products.CMFDiffTool.ListDiff import ListDiff
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
+from Products.CMFDiffTool.FieldDiff import FieldDiff
+from Products.CMFDiffTool.interfaces.portal_diff import IDifference
+from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.TextDiff import TextDiff
+
 
 AT_FIELD_MAPPING = {'text': 'variable_text',
                     'string': 'variable_text',
@@ -24,9 +25,9 @@
 
 
 class ATCompoundDiff:
-    """Text difference"""
+    '''Text difference'''
 
-    meta_type = "Compound Diff for AT types"
+    meta_type = 'Compound Diff for AT types'
 
     def __init__(self, obj1, obj2, field, id1=None, id2=None):
         if not id1:
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index ab36c12..2dd5f09 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -4,16 +4,16 @@
    Calculate differences between content objects
 """
 
-from zope.i18n import translate
-from zope.interface import implements
-
-import Acquisition
 from Acquisition import aq_base
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.interfaces import IDifference
+from plone.dexterity.interfaces import IDexterityContent
 from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+from Products.CMFDiffTool.interfaces import IDifference
+from Products.CMFPlone.utils import safe_hasattr
+from zope.i18n import translate
+from zope.interface import implements
 
-from plone.dexterity.interfaces import IDexterityContent
+import Acquisition
 
 
 class BaseDiff:
@@ -21,7 +21,7 @@ class BaseDiff:
 
     implements(IDifference)
     __allow_access_to_unprotected_subobjects__ = 1
-    meta_type = "Base Diff"
+    meta_type = 'Base Diff'
 
     def __init__(self, obj1, obj2, field, id1=None, id2=None,
                  field_name=None, field_label=None, schemata=None):
@@ -29,9 +29,9 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None,
         self.oldValue = _getValue(obj1, field, field_name)
         self.newValue = _getValue(obj2, field, field_name)
         self.same = (self.oldValue == self.newValue)
-        if not id1 and hasattr(obj1, 'getId'):
+        if not id1 and safe_hasattr(obj1, 'getId'):
             id1 = obj1.getId()
-        if not id2 and hasattr(obj2, 'getId'):
+        if not id2 and safe_hasattr(obj2, 'getId'):
             id2 = obj2.getId()
         self.id1 = id1
         self.id2 = id2
@@ -39,11 +39,11 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None,
         self.schemata = schemata or 'default'
         fld1 = _getValue(obj1, field, field_name, convert_to_str=False)
         fld2 = _getValue(obj2, field, field_name, convert_to_str=False)
-        if hasattr(fld1, 'getFilename'):
+        if safe_hasattr(fld1, 'getFilename'):
             self.oldFilename = fld1.getFilename()
         else:
             self.oldFilename = None
-        if hasattr(fld2, 'getFilename'):
+        if safe_hasattr(fld2, 'getFilename'):
             self.newFilename = fld2.getFilename()
         else:
             self.newFilename = None
@@ -74,9 +74,9 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     # will work
     if IDexterityContent.providedBy(ob) and field:
         value = getattr(ob, field, None)
-    elif field and hasattr(aq_base(ob), field):
+    elif field and safe_hasattr(aq_base(ob), field):
         value = getattr(ob, field)
-    elif hasattr(aq_base(ob), 'getField'):
+    elif safe_hasattr(aq_base(ob), 'getField'):
         # Archetypes with an adapter extended schema needs special handling
         field = ob.getField(field_name)
         if field is None:
diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py
index 219375e..535f72e 100644
--- a/Products/CMFDiffTool/BinaryDiff.py
+++ b/Products/CMFDiffTool/BinaryDiff.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from os import linesep
 from App.class_init import InitializeClass
+from os import linesep
 from Products.CMFDiffTool.BaseDiff import _getValue
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 
@@ -8,7 +8,7 @@
 class BinaryDiff(FieldDiff):
     """Simple binary difference"""
 
-    meta_type = "Binary Diff"
+    meta_type = 'Binary Diff'
     inlinediff_fmt = """
 <div class="%s">
     <del>%s</del>
@@ -32,7 +32,7 @@ def testChanges(self, ob):
         """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError("Conflict Error during merge",
+            raise ValueError('Conflict Error during merge',
                              self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
diff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py
index ebed98f..4db02d3 100644
--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py
+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.TextDiff import TextDiff
 from Products.CMFDiffTool.libs import htmldiff
+from Products.CMFDiffTool.TextDiff import TextDiff
 
 
 # Give it a dumb name so it doesn't conflict with all the other html diffs
@@ -10,7 +10,7 @@
 class CMFDTHtmlDiff(TextDiff):
     """Text difference"""
 
-    meta_type = "HTML Diff"
+    meta_type = 'HTML Diff'
 
     def inline_diff(self):
         """Return a specialized diff for HTML"""
diff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py
index 6ae17d5..a0ca81d 100644
--- a/Products/CMFDiffTool/CMFDiffTool.py
+++ b/Products/CMFDiffTool/CMFDiffTool.py
@@ -3,21 +3,19 @@
 
    Calculate differences between content objects
 """
-
-from zope.interface import implements
-
-from Acquisition import aq_base
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
-from zExceptions import BadRequest
-
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import registerToolInterface
 from Products.CMFCore.utils import UniqueObject
-from Products.CMFDiffTool.interfaces import IDiffTool
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
+from Products.CMFDiffTool.interfaces import IDiffTool
+from Products.CMFPlone.utils import safe_hasattr
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zExceptions import BadRequest
+from zope.interface import implements
 
 
 class CMFDiffTool(UniqueObject, SimpleItem):
@@ -41,7 +39,7 @@ class CMFDiffTool(UniqueObject, SimpleItem):
     def __init__(self):
         self._pt_diffs = {}
 
-    security.declareProtected(ManagePortal, 'manage_difftypes')
+    security.declareProtected(ManagePortal, 'manage_difftypes')  # NOQA
     manage_difftypes = PageTemplateFile('zpt/editCMFDiffTool', globals())
 
     def manage_editDiffFields(self, updates, REQUEST=None):
@@ -59,41 +57,41 @@ def manage_editDiffFields(self, updates, REQUEST=None):
 
         if REQUEST:
             return self.manage_difftypes(
-                manage_tabs_message="Diff mappings updated")
+                manage_tabs_message='Diff mappings updated')
 
-    security.declareProtected(ManagePortal, 'listDiffTypes')
+    security.declareProtected(ManagePortal, 'listDiffTypes')  # NOQA
 
     def manage_addDiffField(self, pt_name, field, diff, REQUEST=None):
         """Add a new diff field from the ZMI"""
         self.setDiffField(pt_name, field, diff)
         if REQUEST:
-            return self.manage_difftypes(manage_tabs_message="Field added")
+            return self.manage_difftypes(manage_tabs_message='Field added')
 
     def setDiffField(self, pt_name, field, diff):
         """
         Set the diff type for 'field' on the portal type 'pt_name' to 'diff'
         """
         if pt_name not in self.portal_types.listContentTypes():
-            raise BadRequest("Error: invalid portal type")
+            raise BadRequest('Error: invalid portal type')
 
         elif not field:
-            raise BadRequest("Error: no field specified")
+            raise BadRequest('Error: no field specified')
 
         elif diff not in self.listDiffTypes():
-            raise BadRequest("Error: invalid diff type")
+            raise BadRequest('Error: invalid diff type')
 
         else:
             self._pt_diffs.setdefault(pt_name, {})[field] = diff
             self._p_changed = 1
 
     #  Interface fulfillment
-    security.declareProtected(ManagePortal, 'listDiffTypes')
+    security.declareProtected(ManagePortal, 'listDiffTypes')  # NOQA
 
     def listDiffTypes(self):
         """List the names of the registered difference types"""
         return self._difftypes.keys()
 
-    security.declareProtected(ManagePortal, 'getDiffType')
+    security.declareProtected(ManagePortal, 'getDiffType')  # NOQA
 
     def getDiffType(self, diff):
         """Return a class corresponding to the specified diff type.
@@ -101,7 +99,7 @@ def getDiffType(self, diff):
         interface"""
         return self._difftypes.get(diff, None)
 
-    security.declareProtected(ManagePortal, 'setDiffForPortalType')
+    security.declareProtected(ManagePortal, 'setDiffForPortalType')  # NOQA
 
     def setDiffForPortalType(self, pt_name, mapping):
         """Set the difference type(self, s) for the specific portal type
@@ -113,7 +111,7 @@ def setDiffForPortalType(self, pt_name, mapping):
         self._pt_diffs[pt_name] = mapping.copy()
         self._p_changed = 1
 
-    security.declareProtected(ManagePortal, 'getDiffForPortalType')
+    security.declareProtected(ManagePortal, 'getDiffForPortalType')  # NOQA
 
     def getDiffForPortalType(self, pt_name):
         """Returns a dictionary where each key is an attribute or
@@ -122,7 +120,7 @@ def getDiffForPortalType(self, pt_name):
         # Return a copy so we don't have to worry about the user changing it
         return self._pt_diffs.get(pt_name, {}).copy()
 
-    security.declarePublic('computeDiff')
+    security.declarePublic('computeDiff')  # NOQA
 
     def computeDiff(self, ob1, ob2, id1=None, id2=None):
         """Compute the differences between two objects and return the
@@ -146,13 +144,13 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):
             klass = self._difftypes[klass_name]
             f_diff = klass(ob1, ob2, field, id1=id1, id2=id2)
             # handle compound diff types
-            if hasattr(f_diff, '__getitem__'):
+            if safe_hasattr(f_diff, '__getitem__'):
                 diffs.extend(f_diff)
             else:
                 diffs.append(f_diff)
         return diffs
 
-    security.declarePublic('createChangeSet')
+    security.declarePublic('createChangeSet')  # NOQA
 
     def createChangeSet(self, ob1, ob2, id1=None, id2=None):
         """Returns a ChangeSet object that represents the differences
diff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py
index 6ffb551..d66c94e 100644
--- a/Products/CMFDiffTool/ChangeSet.py
+++ b/Products/CMFDiffTool/ChangeSet.py
@@ -8,15 +8,16 @@
 # (C) 2003 Brent Hendricks - licensed under the terms of the
 # GNU General Public License (GPL).  See LICENSE.txt for details
 
-import logging
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-from Acquisition import Implicit
 from Acquisition import aq_base
+from Acquisition import Implicit
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.interfaces import IChangeSet
+from zope.interface import implements
+
+import logging
+
 
 logger = logging.getLogger('CMFDiffTool')
 
@@ -41,7 +42,7 @@ def __init__(self, id, title=''):
         self._changesets = {}
         self.recursive = 0
 
-    security.declarePublic('getId')
+    security.declarePublic('getId')  # NOQA
 
     def getId(self):
         """ChangeSet id"""
@@ -54,10 +55,10 @@ def _isSame(self):
         """Returns true if there are no differences between the two objects"""
         return reduce(lambda x, y: x and y, [d.same for d in self._diffs], 1)
 
-    security.declarePublic('same')
+    security.declarePublic('same')  # NOQA
     same = ComputedAttribute(_isSame)
 
-    security.declarePublic('computeDiff')
+    security.declarePublic('computeDiff')  # NOQA
 
     def computeDiff(self, ob1, ob2, recursive=1, exclude=None,
                     id1=None, id2=None):
@@ -83,7 +84,7 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None,
             except AttributeError:
                 # one or both of the objects may not have a path
                 return
-        diff_tool = getToolByName(self, "portal_diff")
+        diff_tool = getToolByName(self, 'portal_diff')
         self._diffs = diff_tool.computeDiff(ob1, ob2, id1=id1, id2=id2)
 
         if (recursive and
@@ -124,7 +125,7 @@ def _addSubSet(self, id, ob1, ob2, exclude, id1, id2):
         cs.computeDiff(ob1[id], ob2[id], exclude=exclude, id1=id1, id2=id2)
         self._changesets[id] = aq_base(cs)
 
-    security.declarePublic('testChanges')
+    security.declarePublic('testChanges')  # NOQA
 
     def testChanges(self, ob):
         """
@@ -139,7 +140,7 @@ def testChanges(self, ob):
             child = ob[id]
             cs.testChanges(child)
 
-    security.declarePublic('applyChanges')
+    security.declarePublic('applyChanges')  # NOQA
 
     def applyChanges(self, ob):
         """Apply the change set to the specified object"""
@@ -158,7 +159,7 @@ def applyChanges(self, ob):
             child = ob[id]
             cs.applyChanges(child)
 
-    security.declarePublic('getDiffs')
+    security.declarePublic('getDiffs')  # NOQA
 
     def getDiffs(self):
         """
@@ -169,7 +170,7 @@ def getDiffs(self):
         """
         return self._diffs
 
-    security.declarePublic('getSubDiffs')
+    security.declarePublic('getSubDiffs')  # NOQA
 
     def getSubDiffs(self):
         """If the ChangeSet was computed recursively, returns a list
@@ -180,7 +181,7 @@ def getSubDiffs(self):
            """
         return [self[id] for id in self._changed]
 
-    security.declarePublic('getAddedItems')
+    security.declarePublic('getAddedItems')  # NOQA
 
     def getAddedItems(self):
         """If the ChangeSet was computed recursively, returns the list
@@ -190,7 +191,7 @@ def getAddedItems(self):
         """
         return list(self._added)
 
-    security.declarePublic('getRemovedItems')
+    security.declarePublic('getRemovedItems')  # NOQA
 
     def getRemovedItems(self):
         """If the ChangeSet was computed recursively, returns the list
diff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py
index 7517563..a66e04b 100644
--- a/Products/CMFDiffTool/FieldDiff.py
+++ b/Products/CMFDiffTool/FieldDiff.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
-import difflib
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.BaseDiff import BaseDiff, _getValue
+from Products.CMFDiffTool.BaseDiff import _getValue
+from Products.CMFDiffTool.BaseDiff import BaseDiff
+
+import difflib
 
 
 class FieldDiff(BaseDiff):
     """Text difference"""
 
-    meta_type = "Field Diff"
+    meta_type = 'Field Diff'
 
     def _parseField(self, value, filename=None):
         """Parse a field value in preparation for diffing"""
@@ -33,7 +35,7 @@ def testChanges(self, ob):
         """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError("Conflict Error during merge",
+            raise ValueError('Conflict Error during merge',
                              self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
diff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py
index bc39337..9d54854 100644
--- a/Products/CMFDiffTool/ListDiff.py
+++ b/Products/CMFDiffTool/ListDiff.py
@@ -6,7 +6,7 @@
 class ListDiff(FieldDiff):
     """Text difference"""
 
-    meta_type = "List Diff"
+    meta_type = 'List Diff'
 
     def _parseField(self, value, filename=None):
         """Parse a field value in preparation for diffing"""
diff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py
index 0be6ab7..73ad310 100644
--- a/Products/CMFDiffTool/TextDiff.py
+++ b/Products/CMFDiffTool/TextDiff.py
@@ -1,19 +1,19 @@
 # -*- coding: utf-8 -*-
-import difflib
-from os import linesep
-
 from App.class_init import InitializeClass
+from os import linesep
+from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+from Products.CMFDiffTool.FieldDiff import FieldDiff
+from Products.CMFDiffTool.utils import safe_unicode
+from Products.CMFDiffTool.utils import safe_utf8
 from zope.component.hooks import getSite
 
-from Products.CMFDiffTool.FieldDiff import FieldDiff
-from Products.CMFDiffTool.utils import safe_unicode, safe_utf8
-from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+import difflib
 
 
 class TextDiff(FieldDiff):
     """Text difference"""
 
-    meta_type = "Lines Diff"
+    meta_type = 'Lines Diff'
     inlinediff_fmt = """
 <div class="%s">
     <del>%s</del>
diff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py
index 716ae23..cf8a852 100644
--- a/Products/CMFDiffTool/choicediff.py
+++ b/Products/CMFDiffTool/choicediff.py
@@ -1,10 +1,9 @@
-from zope.component import getUtility
+# -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-
-from Products.CMFDiffTool.TextDiff import AsTextDiff
-
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import getAdditionalSchemata
+from Products.CMFDiffTool.TextDiff import AsTextDiff
+from zope.component import getUtility
 
 
 def title_or_value(vocabulary, value):
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 4e9d97f..4e40004 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -1,19 +1,26 @@
-from zope.schema import (Bytes, Iterable, Container, Text, Date, Datetime,
-                         Time, Choice, Bool)
-from zope.globalrequest import getRequest
-
+# -*- coding: utf-8 -*-
 from plone.app.textfield import RichText
 from plone.dexterity.browser.edit import DefaultEditForm
-
-from Products.CMFDiffTool.TextDiff import AsTextDiff
-from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
-from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
-from Products.CMFDiffTool.namedfile import NamedFileListDiff
 from Products.CMFDiffTool.choicediff import ChoiceDiff
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
+from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
+from Products.CMFDiffTool.namedfile import NamedFileListDiff
+from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
+from zope.globalrequest import getRequest
+from zope.schema import Bool
+from zope.schema import Bytes
+from zope.schema import Choice
+from zope.schema import Container
+from zope.schema import Date
+from zope.schema import Datetime
+from zope.schema import Iterable
+from zope.schema import Text
+from zope.schema import Time
+
 
 # TODO: Perhaps this can be replaced with some kind of Zope 3 style
 # adaptation, in order to provide better extensibility.
diff --git a/Products/CMFDiffTool/exportimport/difftool.py b/Products/CMFDiffTool/exportimport/difftool.py
index 5df32ac..ea24fa5 100644
--- a/Products/CMFDiffTool/exportimport/difftool.py
+++ b/Products/CMFDiffTool/exportimport/difftool.py
@@ -1,27 +1,26 @@
 # -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import importObjects
 from Products.GenericSetup.utils import exportObjects
-from Products.CMFCore.utils import getToolByName
-
+from Products.GenericSetup.utils import importObjects
+from Products.GenericSetup.utils import XMLAdapterBase
 from zope.interface import implements
 
 
 class DiffToolXMLAdapter(XMLAdapterBase):
-    """In- and exporter for DiffTool.
-    """
+    '''In- and exporter for DiffTool.
+    '''
     implements(IDiffTool)
 
     name = 'diff_tool'
 
     def _exportNode(self):
-        """Export the object as a DOM node.
-        """
-        node = self._doc.createElement("object")
+        '''Export the object as a DOM node.
+        '''
+        node = self._doc.createElement('object')
         node.appendChild(self._extractDiffToolSettings())
 
-        self._logger.info("DiffTool settings exported.")
+        self._logger.info('DiffTool settings exported.')
         return node
 
     def _importNode(self, node):
@@ -29,43 +28,43 @@ def _importNode(self, node):
             self._purgeDiffToolSettings()
 
         self._initDiffToolSettings(node)
-        self._logger.info("DiffTool settings imported.")
+        self._logger.info('DiffTool settings imported.')
 
     def _purgeDiffToolSettings(self):
         self.context.manage_editDiffFields({})
 
     def _initDiffToolSettings(self, node):
         for child in node.childNodes:
-            if child.nodeName == "difftypes":
-                for type_entry in child.getElementsByTagName("type"):
-                    ptype = type_entry.getAttribute("portal_type")
+            if child.nodeName == 'difftypes':
+                for type_entry in child.getElementsByTagName('type'):
+                    ptype = type_entry.getAttribute('portal_type')
                     fields = {}
-                    for field in type_entry.getElementsByTagName("field"):
-                        name = field.getAttribute("name")
-                        diff = field.getAttribute("difftype")
+                    for field in type_entry.getElementsByTagName('field'):
+                        name = field.getAttribute('name')
+                        diff = field.getAttribute('difftype')
                         fields[name] = diff
                         self.context.setDiffForPortalType(ptype, fields)
 
     def _extractDiffToolSettings(self):
-        node = self._doc.createElement("difftypes")
-        ttool = getToolByName(self.context, "portal_types")
+        node = self._doc.createElement('difftypes')
+        ttool = getToolByName(self.context, 'portal_types')
         for ptype in ttool.listContentTypes():
             diffs = self.context.getDiffForPortalType(ptype)
             if diffs:
-                child = self._doc.createElement("type")
-                child.setAttribute("portal_type", ptype)
+                child = self._doc.createElement('type')
+                child.setAttribute('portal_type', ptype)
                 node.appendChild(child)
             for field_name, diff in diffs.items():
-                field = self._doc.createElement("field")
-                field.setAttribute("name", field_name)
-                field.setAttribute("difftype", diff)
+                field = self._doc.createElement('field')
+                field.setAttribute('name', field_name)
+                field.setAttribute('difftype', diff)
                 child.appendChild(field)
         return node
 
 
 def importDiffTool(context):
-    """Import Factory Tool configuration.
-    """
+    '''Import Factory Tool configuration.
+    '''
     site = context.getSite()
     tool = getToolByName(site, 'portal_diff', None)
 
@@ -74,13 +73,13 @@ def importDiffTool(context):
 
 
 def exportDiffTool(context):
-    """Export Factory Tool configuration.
-    """
+    '''Export Factory Tool configuration.
+    '''
     site = context.getSite()
     tool = getToolByName(site, 'portal_diff', None)
     if tool is None:
-        logger = context.getLogger("difftool")
-        logger.info("Nothing to export.")
+        logger = context.getLogger('difftool')
+        logger.info('Nothing to export.')
         return
 
     exportObjects(tool, '', context)
diff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py
index d0939f6..2051352 100644
--- a/Products/CMFDiffTool/libs/htmldiff.py
+++ b/Products/CMFDiffTool/libs/htmldiff.py
@@ -13,9 +13,10 @@
 """
 
 from difflib import SequenceMatcher
-import re
 from StringIO import StringIO
+
 import cgi
+import re
 
 
 def htmlEncode(s, esc=cgi.escape):
@@ -135,8 +136,8 @@ def addStylesheet(self, html, ss):
             pos = match.end()
         else:
             pos = 0
-        return ('%s<style type="text/css"><!--\n%s\n--></style>%s'
-                % (html[:pos], ss, html[pos:]))
+        return ('{0}<style type="text/css"><!--\n{1}\n--></style>{2}'.format(
+            html[:pos], ss, html[pos:]))
 
     def startInsertText(self):
         return '<span class="insert">'
@@ -267,10 +268,10 @@ def writeLines(self, lines, out):
 if __name__ == '__main__':
     import sys
     if not sys.argv[1:]:
-        print "Usage: %s file1 file2" % sys.argv[0]
-        print "or to test: %s test" % sys.argv[0]
+        print('Usage: %s file1 file2' % sys.argv[0])  # NOQA
+        print('or to test: %s test' % sys.argv[0])  # NOQA
     elif sys.argv[1] == 'test' and not sys.argv[2:]:
         import doctest
         doctest.testmod()
     else:
-        print diffFiles(sys.argv[1], sys.argv[2])
+        print(diffFiles(sys.argv[1], sys.argv[2]))  # NOQA
diff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py
index 65cd53c..fec38dd 100644
--- a/Products/CMFDiffTool/namedfile.py
+++ b/Products/CMFDiffTool/namedfile.py
@@ -1,11 +1,11 @@
+# -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-
 from plone.namedfile import NamedFile
-
 from Products.CMFDiffTool.BinaryDiff import BinaryDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
 
+
 FILE_FIELD_TYPES = []
 
 try:
diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 1a3870d..16d0143 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -1,14 +1,15 @@
 # -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.bbb import PTC_FIXTURE
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
 from zope.component import getSiteManager
 from zope.schema.interfaces import IVocabularyFactory
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
-from plone.app.testing.bbb import PTC_FIXTURE
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import FunctionalTesting
 
 TEST_CONTENT_TYPE_ID = 'TestContentType'
 
@@ -30,9 +31,9 @@ class DXLayer(PloneSandboxLayer):
     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )
 
     def setUpPloneSite(self, portal):
-        """Set up additional products and ZCML required to test
+        '''Set up additional products and ZCML required to test
         this product.
-        """
+        '''
         # setup dexterity
         types_tool = getToolByName(portal, 'portal_types')
 
@@ -54,28 +55,28 @@ def setUpPloneSite(self, portal):
                 'plone.app.contenttypes.behaviors.collection.ICollection',
             ),
             model_source='''
-            <model xmlns="http://namespaces.plone.org/supermodel/schema">
+            <model xmlns='http://namespaces.plone.org/supermodel/schema'>
                 <schema>
-                    <field name="text" type="zope.schema.Text">
+                    <field name='text' type='zope.schema.Text'>
                         <title>Text</title>
                         <required>False</required>
                     </field>
-                    <field name="file" type="plone.namedfile.field.NamedFile">
+                    <field name='file' type='plone.namedfile.field.NamedFile'>
                         <title>File</title>
                         <required>False</required>
                     </field>
-                    <field name="date" type="zope.schema.Date">
+                    <field name='date' type='zope.schema.Date'>
                         <title>Date</title>
                         <required>False</required>
                     </field>
-                    <field name="files" type="zope.schema.List">
+                    <field name='files' type='zope.schema.List'>
                         <title>Date</title>
                         <required>False</required>
-                        <value_type type="plone.namedfile.field.NamedFile">
+                        <value_type type='plone.namedfile.field.NamedFile'>
                             <title>Val</title>
                         </value_type>
                     </field>
-                    <field name="choice" type="zope.schema.Choice">
+                    <field name='choice' type='zope.schema.Choice'>
                         <title>Choice</title>
                         <required>False</required>
                         <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>
@@ -104,8 +105,8 @@ def setUpZope(self, app, configurationContext):
 PACKAGE_AT_FIXTURE = ATLayer()
 
 CMFDiffToolLayer = FunctionalTesting(
-    bases=(PTC_FIXTURE, ), name="Products.CMFDiffTool:functional")
+    bases=(PTC_FIXTURE, ), name='Products.CMFDiffTool:functional')
 CMFDiffToolDXLayer = FunctionalTesting(
-    bases=(PACKAGE_DX_FIXTURE, ), name="Products.CMFDiffTool.DX:functional")
+    bases=(PACKAGE_DX_FIXTURE, ), name='Products.CMFDiffTool.DX:functional')
 CMFDiffToolATLayer = FunctionalTesting(
-    bases=(PACKAGE_AT_FIXTURE, ), name="Products.CMFDiffTool.AT:functional")
+    bases=(PACKAGE_AT_FIXTURE, ), name='Products.CMFDiffTool.AT:functional')
diff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py
index bbfbd40..0691b63 100644
--- a/Products/CMFDiffTool/tests/BaseTestCase.py
+++ b/Products/CMFDiffTool/tests/BaseTestCase.py
@@ -2,9 +2,9 @@
 # BaseTestCase
 
 from plone.app.testing.bbb import PloneTestCase
-from Products.CMFDiffTool.testing import CMFDiffToolLayer
 from Products.CMFDiffTool.testing import CMFDiffToolATLayer
 from Products.CMFDiffTool.testing import CMFDiffToolDXLayer
+from Products.CMFDiffTool.testing import CMFDiffToolLayer
 
 
 class BaseTestCase(PloneTestCase):
diff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py
index b2112d3..6827501 100644
--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py
+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py
@@ -1,10 +1,12 @@
-from zope.interface import alsoProvides, noLongerProvides
-from Products.ATContentTypes.content.document import ATDocument
-from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff
-
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseATTestCase
-from zope.component import adapts, provideAdapter
 from Products.Archetypes import atapi
+from Products.ATContentTypes.content.document import ATDocument
+from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff
+from zope.component import adapts
+from zope.component import provideAdapter
+from zope.interface import alsoProvides
+from zope.interface import noLongerProvides
 
 
 class TestATCompoundDiff(BaseATTestCase):
@@ -20,7 +22,7 @@ def testCompoundDiff(self):
         second.setText('<p>Body2</p>', mimetype='text/html')
         fd = ATCompoundDiff(first, second, None)
         # There should be some fields
-        self.failUnless(len(fd))
+        self.assertTrue(len(fd))
         for field in fd:
             # We've changed the body
             if field.label == 'label_body_text':
@@ -68,10 +70,10 @@ class TestSchemaExtender(Extender):
                 HighlightedField('schemaextender_test',
                                  schemata='settings',
                                  widget=atapi.BooleanWidget(
-                                                    label="Extended",
-                                                    description=""),
+                                     label='Extended',
+                                     description=''),
                                  ),
-                      ]
+            ]
 
         """Ensure that tool instances implement the portal_diff interface"""
         provideAdapter(TestSchemaExtender,
@@ -87,4 +89,4 @@ class TestSchemaExtender(Extender):
         field = fd[-1]
         self.assertEqual(field.oldValue, False)
         self.assertEqual(field.newValue, True)
-        self.assertEqual(field.label, "Extended")
+        self.assertEqual(field.label, 'Extended')
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 5dd31f4..76edad3 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -2,16 +2,14 @@
 #
 # CMFDiffTool tests
 #
+from Acquisition import aq_base
 from os import linesep
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
-from Acquisition import aq_base
-
+from Products.CMFPlone.utils import safe_hasattr
 from unittest import TestCase
 
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA
-
 
 class TestChangeSet(TestCase):
     """Tests for ChangeSet objects"""
@@ -34,7 +32,7 @@ def testInterface(self):
     def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
-                                     self.folder.manage_copyObjects(['doc1']))
+            self.folder.manage_copyObjects(['doc1']))
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
@@ -45,7 +43,7 @@ def setupTestFolders(self):
         self.folder.folder1.invokeFactory('Document', 'doc3',
                                           title='My Title3')
         self.folder.manage_pasteObjects(
-                                  self.folder.manage_copyObjects(['folder1']))
+            self.folder.manage_copyObjects(['folder1']))
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
@@ -60,7 +58,7 @@ def testChangeSetChanged(self):
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 3)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
 
@@ -86,11 +84,11 @@ def testChangeSetFolderChanged(self):
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
@@ -108,8 +106,8 @@ def testChangeSetFolderDocChanged(self):
         self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
@@ -118,7 +116,7 @@ def testChangeSetFolderDocChanged(self):
             self.assertEqual(len(sub_diffs), 3)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
-                self.failIf(sub_diffs[0].same)
+                self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title1%s+ My New Title' % linesep)
             else:
@@ -141,7 +139,7 @@ def testChangeSetFolderDocRemoved(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_diffs[0].same)
-        self.failIf(self.cs._added)
+        self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
 
     def testChangeSetFolderDocAdded(self):
@@ -161,15 +159,16 @@ def testChangeSetFolderDocAdded(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_diffs[0].same)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
 
     def testChangeSetFolderReordered(self):
         self.setupTestFolders()
-        if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
+        if safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                        'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
-        elif hasattr(aq_base(self.folder.copy_of_folder1),
-                     'moveObjectsByDelta'):
+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                          'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
@@ -178,8 +177,8 @@ def testChangeSetFolderReordered(self):
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
@@ -202,10 +201,11 @@ def testChangeSetFolderComplex(self):
         # Change the folder itself
         self.folder.copy_of_folder1.setTitle('My New Title')
         # Move the changed object
-        if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
+        if safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                        'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
-        elif hasattr(aq_base(self.folder.copy_of_folder1),
-                     'moveObjectsByDelta'):
+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                          'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
@@ -214,7 +214,7 @@ def testChangeSetFolderComplex(self):
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -228,7 +228,7 @@ def testChangeSetFolderComplex(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             if sub_cs[i].getId() == 'doc3':
-                self.failIf(sub_diffs[0].same)
+                self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title3%s+ My New Title' % linesep)
             else:
diff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py
index 1d2c3bd..3d42c5d 100644
--- a/Products/CMFDiffTool/tests/testDiffTool.py
+++ b/Products/CMFDiffTool/tests/testDiffTool.py
@@ -3,21 +3,20 @@
 # CMFDiffTool tests
 #
 
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFCore.utils import getToolByName
-from zExceptions import BadRequest
-
 from Products.CMFDiffTool.CMFDiffTool import registerDiffType
 from Products.CMFDiffTool.CMFDiffTool import unregisterDiffType
 from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
+from zExceptions import BadRequest
 
 
 class DummyDiff:
-    meta_type = "Dummy Diff Type"
+    meta_type = 'Dummy Diff Type'
 
 
 class DummyDiff2:
-    meta_type = "Second Dummy Diff Type"
+    meta_type = 'Second Dummy Diff Type'
 
 
 class TestDiffTool(TestCase):
diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index 1c26e76..8400cab 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -3,26 +3,27 @@
 # CMFDiffTool tests
 #
 from os import linesep
-from Products.CMFDiffTool.FieldDiff import FieldDiff
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFDiffTool.FieldDiff import dump
+from Products.CMFDiffTool.FieldDiff import FieldDiff
 from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
+
 
 _marker = []
 
 
 class A:
-    attribute = "value"
+    attribute = 'value'
 
     def method(self):
-        return "method value"
+        return 'method value'
 
 
 class B:
-    attribute = "different value"
+    attribute = 'different value'
 
     def method(self):
-        return "different method value"
+        return 'different method value'
 
 
 class U:
@@ -40,25 +41,25 @@ class TestFieldDiff(TestCase):
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-        self.failUnless(IDifference.implementedBy(FieldDiff))
+        self.assertTrue(IDifference.implementedBy(FieldDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         fd = FieldDiff(a, a, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
         uu = U()
         fd = FieldDiff(uu, uu, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testMethodSame(self):
         """Test method with same value"""
         a = A()
         fd = FieldDiff(a, a, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
         uu = U()
         fd = FieldDiff(uu, uu, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
@@ -66,9 +67,9 @@ def testAttributeDiff(self):
         b = B()
         uu = U()
         fd = FieldDiff(a, b, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
         fd = FieldDiff(a, uu, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testMethodDiff(self):
         """Test method with different value"""
@@ -76,9 +77,9 @@ def testMethodDiff(self):
         b = B()
         uu = U()
         fd = FieldDiff(a, b, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
         fd = FieldDiff(a, uu, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -117,7 +118,7 @@ def testDiffText(self):
         a = A()
         b = B()
         uu = U()
-        expected = "- value%s+ different value" % linesep
+        expected = '- value%s+ different value' % linesep
         fd = FieldDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
         expected = u"- value%s+ \xfcnicode value" % linesep
diff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py
index ffbed84..1119f8d 100644
--- a/Products/CMFDiffTool/tests/testListDiff.py
+++ b/Products/CMFDiffTool/tests/testListDiff.py
@@ -3,9 +3,10 @@
 # CMFDiffTool tests
 #
 from os import linesep
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFDiffTool.ListDiff import ListDiff
 from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
+
 
 _marker = []
 
@@ -26,20 +27,20 @@ class TestListDiff(TestCase):
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-        self.failUnless(IDifference.implementedBy(ListDiff))
+        self.assertTrue(IDifference.implementedBy(ListDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         diff = ListDiff(a, a, 'attribute')
-        self.failUnless(diff.same)
+        self.assertTrue(diff.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
         a = A()
         b = B()
         diff = ListDiff(a, b, 'attribute')
-        self.failIf(diff.same)
+        self.assertFalse(diff.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -60,14 +61,14 @@ def testSameText(self):
         """Test text diff output with no diff"""
         a = A()
         diff = ListDiff(a, a, 'attribute')
-        expected = "  1%(linesep)s  2%(linesep)s  3" % {'linesep': linesep}
+        expected = '  1%(linesep)s  2%(linesep)s  3' % {'linesep': linesep}
         self.assertEqual(diff.ndiff(), expected)
 
     def testDiffText(self):
         """Test text diff output with no diff"""
         a = A()
         b = B()
-        expected = "  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4" % \
+        expected = '  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4' % \
                    {'linesep': linesep}
         diff = ListDiff(a, b, 'attribute')
         self.assertEqual(diff.ndiff(), expected)
diff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py
index ee1b86f..a8c72a6 100644
--- a/Products/CMFDiffTool/tests/testTextDiff.py
+++ b/Products/CMFDiffTool/tests/testTextDiff.py
@@ -1,27 +1,28 @@
 # -*- coding: utf-8 -*-
 
 from os import linesep
-import sys
-
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFDiffTool.TextDiff import TextDiff
 from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
+
+import sys
+
 
 _marker = []
 
 
 class A:
-    attribute = "कामसूत्र"
+    attribute = 'कामसूत्र'
 
     def method(self):
-        return "method कामसूत्र"
+        return 'method कामसूत्र'
 
 
 class B:
-    attribute = "過労死"
+    attribute = '過労死'
 
     def method(self):
-        return "method 過労死"
+        return 'method 過労死'
 
 
 class TestTextDiff(TestCase):
@@ -31,33 +32,33 @@ class TestTextDiff(TestCase):
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces import IDifference
-        self.failUnless(IDifference.implementedBy(TextDiff))
+        self.assertTrue(IDifference.implementedBy(TextDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         fd = TextDiff(a, a, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testMethodSame(self):
         """Test method with same value"""
         a = A()
         fd = TextDiff(a, a, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
         a = A()
         b = B()
         fd = TextDiff(a, b, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testMethodDiff(self):
         """Test method with different value"""
         a = A()
         b = B()
         fd = TextDiff(a, b, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -84,7 +85,7 @@ def testDiffText(self):
         """Test text diff output with different value"""
         a = A()
         b = B()
-        expected = "- कामसूत्र%s+ 過労死" % linesep
+        expected = '- कामसूत्र%s+ 過労死' % linesep
         fd = TextDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
 
diff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py
index 780ffa7..9217f6e 100644
--- a/Products/CMFDiffTool/tests/test_astextdiff.py
+++ b/Products/CMFDiffTool/tests/test_astextdiff.py
@@ -1,6 +1,7 @@
-from Products.CMFDiffTool.TextDiff import AsTextDiff
+# -*- coding: utf-8 -*-
 from datetime import date
 from Products.CMFDiffTool.interfaces import IDifference
+from Products.CMFDiffTool.TextDiff import AsTextDiff
 
 import unittest
 
diff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py
index 691547a..06e01d7 100644
--- a/Products/CMFDiffTool/tests/test_binarydiff.py
+++ b/Products/CMFDiffTool/tests/test_binarydiff.py
@@ -1,10 +1,9 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseDXTestCase
 from plone.namedfile.file import NamedFile
-
-from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFDiffTool import namedfile
-
 from Products.CMFDiffTool import testing
+from Products.CMFDiffTool.interfaces import IDifference
 
 
 class BinaryDiffTestCase(BaseDXTestCase):
diff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py
index 3ff8585..d6f7ae0 100644
--- a/Products/CMFDiffTool/tests/test_choicediff.py
+++ b/Products/CMFDiffTool/tests/test_choicediff.py
@@ -1,10 +1,10 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseDXTestCase
+from Products.CMFDiffTool import testing
 from Products.CMFDiffTool.choicediff import ChoiceDiff
 from Products.CMFDiffTool.choicediff import title_or_value
 from Products.CMFDiffTool.interfaces import IDifference
 
-from Products.CMFDiffTool import testing
-
 
 class ChoiceDiffTestCase(BaseDXTestCase):
 
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index b4949f4..ac8f540 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -1,14 +1,11 @@
+# -*- coding: utf-8 -*-
+from .BaseTestCase import BaseDXTestCase
 from datetime import date
-
 from plone.namedfile import NamedFile
-from Products.CMFDiffTool.interfaces import IDifference
-
-from .BaseTestCase import BaseDXTestCase
-
+from Products.CMFDiffTool import testing
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS
-
-from Products.CMFDiffTool import testing
+from Products.CMFDiffTool.interfaces import IDifference
 
 
 class DexterityDiffTestCase(BaseDXTestCase):
diff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py
index 354d13c..f123a6d 100644
--- a/Products/CMFDiffTool/tests/test_filelistdiff.py
+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py
@@ -1,7 +1,7 @@
+# -*- coding: utf-8 -*-
 from plone.namedfile import NamedFile
-
-from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFDiffTool import namedfile
+from Products.CMFDiffTool.interfaces import IDifference
 
 import unittest
 
diff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py
index 530b55b..909b9d0 100644
--- a/Products/CMFDiffTool/tests/test_install.py
+++ b/Products/CMFDiffTool/tests/test_install.py
@@ -1,6 +1,6 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseTestCase
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 
 
diff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py
index 3a4f5d8..be047bb 100644
--- a/Products/CMFDiffTool/tests/test_richtextdiff.py
+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py
@@ -1,5 +1,6 @@
-from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
+# -*- coding: utf-8 -*-
 from plone.app.textfield.value import RichTextValue
+from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.interfaces import IDifference
 
 import unittest
diff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py
index c00f72b..da7921b 100644
--- a/Products/CMFDiffTool/utils.py
+++ b/Products/CMFDiffTool/utils.py
@@ -1,5 +1,3 @@
-
-
 # -*- coding: utf-8 -*-
 def safe_unicode(value):
     if isinstance(value, unicode):
diff --git a/buildout.cfg b/buildout.cfg
index 2de7db1..d30eab7 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -27,6 +27,10 @@ eggs = ${test:eggs}
 recipe = plone.recipe.codeanalysis [recommended]
 directory = ${buildout:directory}/Products
 flake8-max-complexity = 20
+# If todo markers are marked as problems, no todomarkers will be written
+# Don't show plone.api advertisement
+# Don't checko for % formatter
+flake8-ignore = T000,P001,S001
 utf8-header = True
 clean-lines = True
 imports = True


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-02-01T13:02:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/93b071becf276f4acf28a4f3e8c0a2e4d5228e90

Merge pull request #13 from plone/do3cc/ZTC_removal

Remove ZopeTestCase tests

Files changed:
A .isort.cfg
A buildout.cfg
A plone-4.3.x.cfg
A requirements.txt
M .gitignore
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/exportimport/difftool.py
M Products/CMFDiffTool/interfaces/IChangeSet.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/__init__.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testDiffTool.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_astextdiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_install.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M setup.py

diff --git a/.gitignore b/.gitignore
index 0c760fd..6f0c371 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,8 @@
 build
 dist
 *.mo
+.installed.cfg
+bin/
+develop-eggs/
+eggs/
+parts/
diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..fb79921
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,5 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py
index 0b5e1aa..b3a6973 100644
--- a/Products/CMFDiffTool/ATCompoundDiff.py
+++ b/Products/CMFDiffTool/ATCompoundDiff.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-from Products.CMFDiffTool.TextDiff import TextDiff
-from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.BinaryDiff import BinaryDiff
-from Products.CMFDiffTool.ListDiff import ListDiff
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
+from Products.CMFDiffTool.FieldDiff import FieldDiff
+from Products.CMFDiffTool.interfaces.portal_diff import IDifference
+from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.TextDiff import TextDiff
+
 
 AT_FIELD_MAPPING = {'text': 'variable_text',
                     'string': 'variable_text',
@@ -24,9 +25,9 @@
 
 
 class ATCompoundDiff:
-    """Text difference"""
+    '''Text difference'''
 
-    meta_type = "Compound Diff for AT types"
+    meta_type = 'Compound Diff for AT types'
 
     def __init__(self, obj1, obj2, field, id1=None, id2=None):
         if not id1:
@@ -77,52 +78,52 @@ def getFields(self, obj1, obj2):
         for schemata_name in schemata_names:
             schema = schematas[schemata_name]
             for field in schema.viewableFields(obj1):
-                if (AT_FIELD_MAPPING.has_key(field.type) and
+                if (field.type in AT_FIELD_MAPPING and
                         field.getName() not in AT_EXCLUDED_FIELDS):
                     is_primary = getattr(field, 'primary', False)
                     label = field.widget.Label(obj1)
                     diff_type = AT_FIELD_MAPPING[field.type]
                     if IDifference.implementedBy(diff_type):
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif 'raw' in diff_type:
-                        #Handle Fields which diff against the edit accessor
+                        #  Handle Fields which diff against the edit accessor
                         diff_name = diff_type.split(':')[1]
                         diff_type = globals()[diff_name]
                         fields.append({'name': field.getName(),
-                                    'accessor': field.edit_accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.edit_accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif diff_type == 'variable_binary':
                         diff_type = BinaryDiff
-                        if 'text/' in field.getContentType(obj1) and \
-                        'text/' in \
-                            obj2.getField(field.getName()).getContentType(obj2):
+                        if ('text/' in field.getContentType(obj1) and
+                                'text/' in (obj2.getField(field.getName())
+                                            .getContentType(obj2))):
                             diff_type = TextDiff
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
                     elif diff_type == 'variable_text':
                         diff_type = TextDiff
-                        if 'html' in field.getContentType(obj1) and \
-                        'html' in \
-                            obj2.getField(field.getName()).getContentType(obj2):
+                        if ('html' in field.getContentType(obj1) and
+                                'html' in (obj2.getField(field.getName())
+                                           .getContentType(obj2))):
                             diff_type = CMFDTHtmlDiff
                         fields.append({'name': field.getName(),
-                                    'accessor': field.accessor,
-                                    'klass': diff_type,
-                                    'primary': is_primary,
-                                    'label': label,
-                                    'schemata': schemata_name})
+                                       'accessor': field.accessor,
+                                       'klass': diff_type,
+                                       'primary': is_primary,
+                                       'label': label,
+                                       'schemata': schemata_name})
         return fields
 
 InitializeClass(ATCompoundDiff)
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index 4fa93e5..2dd5f09 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -4,16 +4,16 @@
    Calculate differences between content objects
 """
 
-from zope.i18n import translate
-from zope.interface import implements
-
-import Acquisition
 from Acquisition import aq_base
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.interfaces import IDifference
+from plone.dexterity.interfaces import IDexterityContent
 from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+from Products.CMFDiffTool.interfaces import IDifference
+from Products.CMFPlone.utils import safe_hasattr
+from zope.i18n import translate
+from zope.interface import implements
 
-from plone.dexterity.interfaces import IDexterityContent
+import Acquisition
 
 
 class BaseDiff:
@@ -21,7 +21,7 @@ class BaseDiff:
 
     implements(IDifference)
     __allow_access_to_unprotected_subobjects__ = 1
-    meta_type = "Base Diff"
+    meta_type = 'Base Diff'
 
     def __init__(self, obj1, obj2, field, id1=None, id2=None,
                  field_name=None, field_label=None, schemata=None):
@@ -29,9 +29,9 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None,
         self.oldValue = _getValue(obj1, field, field_name)
         self.newValue = _getValue(obj2, field, field_name)
         self.same = (self.oldValue == self.newValue)
-        if not id1 and hasattr(obj1, 'getId'):
+        if not id1 and safe_hasattr(obj1, 'getId'):
             id1 = obj1.getId()
-        if not id2 and hasattr(obj2, 'getId'):
+        if not id2 and safe_hasattr(obj2, 'getId'):
             id2 = obj2.getId()
         self.id1 = id1
         self.id2 = id2
@@ -39,11 +39,11 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None,
         self.schemata = schemata or 'default'
         fld1 = _getValue(obj1, field, field_name, convert_to_str=False)
         fld2 = _getValue(obj2, field, field_name, convert_to_str=False)
-        if hasattr(fld1, 'getFilename'):
+        if safe_hasattr(fld1, 'getFilename'):
             self.oldFilename = fld1.getFilename()
         else:
             self.oldFilename = None
-        if hasattr(fld2, 'getFilename'):
+        if safe_hasattr(fld2, 'getFilename'):
             self.newFilename = fld2.getFilename()
         else:
             self.newFilename = None
@@ -74,16 +74,16 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     # will work
     if IDexterityContent.providedBy(ob) and field:
         value = getattr(ob, field, None)
-    elif field and hasattr(aq_base(ob), field):
+    elif field and safe_hasattr(aq_base(ob), field):
         value = getattr(ob, field)
-    elif hasattr(aq_base(ob), 'getField'):
+    elif safe_hasattr(aq_base(ob), 'getField'):
         # Archetypes with an adapter extended schema needs special handling
         field = ob.getField(field_name)
         if field is None:
-            raise AttributeError, field
+            raise AttributeError(field)
         value = field.getAccessor(ob)
     else:
-        raise AttributeError, field
+        raise AttributeError(field)
 
     # Handle case where the field is a method
     try:
diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py
index 476ebd6..535f72e 100644
--- a/Products/CMFDiffTool/BinaryDiff.py
+++ b/Products/CMFDiffTool/BinaryDiff.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from os import linesep
 from App.class_init import InitializeClass
+from os import linesep
 from Products.CMFDiffTool.BaseDiff import _getValue
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 
@@ -8,7 +8,7 @@
 class BinaryDiff(FieldDiff):
     """Simple binary difference"""
 
-    meta_type = "Binary Diff"
+    meta_type = 'Binary Diff'
     inlinediff_fmt = """
 <div class="%s">
     <del>%s</del>
@@ -26,10 +26,14 @@ def _parseField(self, value, filename=None):
             return [self.filenameTitle(filename)]
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set will
+        apply without errors
+        """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError, ("Conflict Error during merge", self.field, value, self.oldValue)
+            raise ValueError('Conflict Error during merge',
+                             self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
         """Update the specified object with the difference"""
diff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py
index ebed98f..4db02d3 100644
--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py
+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.TextDiff import TextDiff
 from Products.CMFDiffTool.libs import htmldiff
+from Products.CMFDiffTool.TextDiff import TextDiff
 
 
 # Give it a dumb name so it doesn't conflict with all the other html diffs
@@ -10,7 +10,7 @@
 class CMFDTHtmlDiff(TextDiff):
     """Text difference"""
 
-    meta_type = "HTML Diff"
+    meta_type = 'HTML Diff'
 
     def inline_diff(self):
         """Return a specialized diff for HTML"""
diff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py
index e4875f5..a0ca81d 100644
--- a/Products/CMFDiffTool/CMFDiffTool.py
+++ b/Products/CMFDiffTool/CMFDiffTool.py
@@ -3,21 +3,19 @@
 
    Calculate differences between content objects
 """
-
-from zope.interface import implements
-
-from Acquisition import aq_base
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_base
 from App.class_init import InitializeClass
 from OFS.SimpleItem import SimpleItem
-from zExceptions import BadRequest
-
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import registerToolInterface
 from Products.CMFCore.utils import UniqueObject
-from Products.CMFDiffTool.interfaces import IDiffTool
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
+from Products.CMFDiffTool.interfaces import IDiffTool
+from Products.CMFPlone.utils import safe_hasattr
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from zExceptions import BadRequest
+from zope.interface import implements
 
 
 class CMFDiffTool(UniqueObject, SimpleItem):
@@ -30,18 +28,18 @@ class CMFDiffTool(UniqueObject, SimpleItem):
 
     manage_options = (({'label': 'Configure', 'action': 'manage_difftypes'},
                       {'label': 'Overview', 'action': 'manage_overview'},
-                      ) + SimpleItem.manage_options
-                    )
+                       ) + SimpleItem.manage_options
+                      )
 
     implements(IDiffTool)
 
-    ## Internal attributes
+    #  Internal attributes
     _difftypes = {}
 
     def __init__(self):
         self._pt_diffs = {}
 
-    security.declareProtected(ManagePortal, 'manage_difftypes')
+    security.declareProtected(ManagePortal, 'manage_difftypes')  # NOQA
     manage_difftypes = PageTemplateFile('zpt/editCMFDiffTool', globals())
 
     def manage_editDiffFields(self, updates, REQUEST=None):
@@ -58,39 +56,42 @@ def manage_editDiffFields(self, updates, REQUEST=None):
         self._p_changed = 1
 
         if REQUEST:
-            return self.manage_difftypes(manage_tabs_message="Diff mappings updated")
+            return self.manage_difftypes(
+                manage_tabs_message='Diff mappings updated')
 
-    security.declareProtected(ManagePortal, 'listDiffTypes')
+    security.declareProtected(ManagePortal, 'listDiffTypes')  # NOQA
 
     def manage_addDiffField(self, pt_name, field, diff, REQUEST=None):
         """Add a new diff field from the ZMI"""
         self.setDiffField(pt_name, field, diff)
         if REQUEST:
-            return self.manage_difftypes(manage_tabs_message="Field added")
-        
+            return self.manage_difftypes(manage_tabs_message='Field added')
+
     def setDiffField(self, pt_name, field, diff):
-        """Set the diff type for 'field' on the portal type 'pt_name' to 'diff'"""
+        """
+        Set the diff type for 'field' on the portal type 'pt_name' to 'diff'
+        """
         if pt_name not in self.portal_types.listContentTypes():
-            raise BadRequest("Error: invalid portal type")
+            raise BadRequest('Error: invalid portal type')
 
         elif not field:
-            raise BadRequest("Error: no field specified")
+            raise BadRequest('Error: no field specified')
 
         elif diff not in self.listDiffTypes():
-            raise BadRequest("Error: invalid diff type")
+            raise BadRequest('Error: invalid diff type')
 
         else:
             self._pt_diffs.setdefault(pt_name, {})[field] = diff
             self._p_changed = 1
 
-    ## Interface fulfillment ##
-    security.declareProtected(ManagePortal, 'listDiffTypes')
+    #  Interface fulfillment
+    security.declareProtected(ManagePortal, 'listDiffTypes')  # NOQA
 
     def listDiffTypes(self):
         """List the names of the registered difference types"""
         return self._difftypes.keys()
 
-    security.declareProtected(ManagePortal, 'getDiffType')
+    security.declareProtected(ManagePortal, 'getDiffType')  # NOQA
 
     def getDiffType(self, diff):
         """Return a class corresponding to the specified diff type.
@@ -98,7 +99,7 @@ def getDiffType(self, diff):
         interface"""
         return self._difftypes.get(diff, None)
 
-    security.declareProtected(ManagePortal, 'setDiffForPortalType')
+    security.declareProtected(ManagePortal, 'setDiffForPortalType')  # NOQA
 
     def setDiffForPortalType(self, pt_name, mapping):
         """Set the difference type(self, s) for the specific portal type
@@ -110,7 +111,7 @@ def setDiffForPortalType(self, pt_name, mapping):
         self._pt_diffs[pt_name] = mapping.copy()
         self._p_changed = 1
 
-    security.declareProtected(ManagePortal, 'getDiffForPortalType')
+    security.declareProtected(ManagePortal, 'getDiffForPortalType')  # NOQA
 
     def getDiffForPortalType(self, pt_name):
         """Returns a dictionary where each key is an attribute or
@@ -119,7 +120,7 @@ def getDiffForPortalType(self, pt_name):
         # Return a copy so we don't have to worry about the user changing it
         return self._pt_diffs.get(pt_name, {}).copy()
 
-    security.declarePublic('computeDiff')
+    security.declarePublic('computeDiff')  # NOQA
 
     def computeDiff(self, ob1, ob2, id1=None, id2=None):
         """Compute the differences between two objects and return the
@@ -143,13 +144,13 @@ def computeDiff(self, ob1, ob2, id1=None, id2=None):
             klass = self._difftypes[klass_name]
             f_diff = klass(ob1, ob2, field, id1=id1, id2=id2)
             # handle compound diff types
-            if hasattr(f_diff, '__getitem__'):
+            if safe_hasattr(f_diff, '__getitem__'):
                 diffs.extend(f_diff)
             else:
                 diffs.append(f_diff)
         return diffs
 
-    security.declarePublic('createChangeSet')
+    security.declarePublic('createChangeSet')  # NOQA
 
     def createChangeSet(self, ob1, ob2, id1=None, id2=None):
         """Returns a ChangeSet object that represents the differences
diff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py
index fedac50..d66c94e 100644
--- a/Products/CMFDiffTool/ChangeSet.py
+++ b/Products/CMFDiffTool/ChangeSet.py
@@ -8,15 +8,16 @@
 # (C) 2003 Brent Hendricks - licensed under the terms of the
 # GNU General Public License (GPL).  See LICENSE.txt for details
 
-import logging
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
-from Acquisition import Implicit
 from Acquisition import aq_base
+from Acquisition import Implicit
 from ComputedAttribute import ComputedAttribute
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.interfaces import IChangeSet
+from zope.interface import implements
+
+import logging
+
 
 logger = logging.getLogger('CMFDiffTool')
 
@@ -41,7 +42,7 @@ def __init__(self, id, title=''):
         self._changesets = {}
         self.recursive = 0
 
-    security.declarePublic('getId')
+    security.declarePublic('getId')  # NOQA
 
     def getId(self):
         """ChangeSet id"""
@@ -54,12 +55,13 @@ def _isSame(self):
         """Returns true if there are no differences between the two objects"""
         return reduce(lambda x, y: x and y, [d.same for d in self._diffs], 1)
 
-    security.declarePublic('same')
+    security.declarePublic('same')  # NOQA
     same = ComputedAttribute(_isSame)
 
-    security.declarePublic('computeDiff')
+    security.declarePublic('computeDiff')  # NOQA
 
-    def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):
+    def computeDiff(self, ob1, ob2, recursive=1, exclude=None,
+                    id1=None, id2=None):
         """Compute the differences from ob1 to ob2 (ie. ob2 - ob1).
 
         The results can be accessed through getDiffs()"""
@@ -82,11 +84,12 @@ def computeDiff(self, ob1, ob2, recursive=1, exclude=None, id1=None, id2=None):
             except AttributeError:
                 # one or both of the objects may not have a path
                 return
-        diff_tool = getToolByName(self, "portal_diff")
+        diff_tool = getToolByName(self, 'portal_diff')
         self._diffs = diff_tool.computeDiff(ob1, ob2, id1=id1, id2=id2)
 
-        if recursive and ob1.isPrincipiaFolderish and \
-                                                     ob2.isPrincipiaFolderish:
+        if (recursive and
+                ob1.isPrincipiaFolderish and
+                ob2.isPrincipiaFolderish):
             self.recursive = 1
             ids1 = set(ob1.objectIds())
             ids2 = set(ob2.objectIds())
@@ -122,10 +125,13 @@ def _addSubSet(self, id, ob1, ob2, exclude, id1, id2):
         cs.computeDiff(ob1[id], ob2[id], exclude=exclude, id1=id1, id2=id2)
         self._changesets[id] = aq_base(cs)
 
-    security.declarePublic('testChanges')
+    security.declarePublic('testChanges')  # NOQA
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set
+        will apply without errors
+        """
         for d in self._diffs:
             d.testChanges(ob)
 
@@ -134,7 +140,7 @@ def testChanges(self, ob):
             child = ob[id]
             cs.testChanges(child)
 
-    security.declarePublic('applyChanges')
+    security.declarePublic('applyChanges')  # NOQA
 
     def applyChanges(self, ob):
         """Apply the change set to the specified object"""
@@ -153,15 +159,18 @@ def applyChanges(self, ob):
             child = ob[id]
             cs.applyChanges(child)
 
-    security.declarePublic('getDiffs')
+    security.declarePublic('getDiffs')  # NOQA
 
     def getDiffs(self):
-        """Returns the list differences between the two objects.
+        """
+        Returns the list differences between the two objects.
 
-        Each difference is a single object implementing the IDifference interface"""
+        Each difference is a single object implementing
+        the IDifference interface
+        """
         return self._diffs
 
-    security.declarePublic('getSubDiffs')
+    security.declarePublic('getSubDiffs')  # NOQA
 
     def getSubDiffs(self):
         """If the ChangeSet was computed recursively, returns a list
@@ -172,7 +181,7 @@ def getSubDiffs(self):
            """
         return [self[id] for id in self._changed]
 
-    security.declarePublic('getAddedItems')
+    security.declarePublic('getAddedItems')  # NOQA
 
     def getAddedItems(self):
         """If the ChangeSet was computed recursively, returns the list
@@ -182,7 +191,7 @@ def getAddedItems(self):
         """
         return list(self._added)
 
-    security.declarePublic('getRemovedItems')
+    security.declarePublic('getRemovedItems')  # NOQA
 
     def getRemovedItems(self):
         """If the ChangeSet was computed recursively, returns the list
diff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py
index 345454a..a66e04b 100644
--- a/Products/CMFDiffTool/FieldDiff.py
+++ b/Products/CMFDiffTool/FieldDiff.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
-import difflib
 from App.class_init import InitializeClass
-from Products.CMFDiffTool.BaseDiff import BaseDiff, _getValue
+from Products.CMFDiffTool.BaseDiff import _getValue
+from Products.CMFDiffTool.BaseDiff import BaseDiff
+
+import difflib
 
 
 class FieldDiff(BaseDiff):
     """Text difference"""
 
-    meta_type = "Field Diff"
+    meta_type = 'Field Diff'
 
     def _parseField(self, value, filename=None):
         """Parse a field value in preparation for diffing"""
@@ -27,10 +29,14 @@ def getLineDiffs(self):
         return difflib.SequenceMatcher(None, a, b).get_opcodes()
 
     def testChanges(self, ob):
-        """Test the specified object to determine if the change set will apply without errors"""
+        """
+        Test the specified object to determine if the change set
+        will apply without errors
+        """
         value = _getValue(ob, self.field)
         if not self.same and value != self.oldValue:
-            raise ValueError, ("Conflict Error during merge", self.field, value, self.oldValue)
+            raise ValueError('Conflict Error during merge',
+                             self.field, value, self.oldValue)
 
     def applyChanges(self, ob):
         """Update the specified object with the difference"""
@@ -54,7 +60,7 @@ def ndiff(self):
             elif tag == 'equal':
                 dump(' ', a, alo, ahi, r)
             else:
-                raise ValueError, 'unknown tag ' + `tag`
+                raise ValueError('unknown tag %r', tag)
         return '\n'.join(r)
 
 InitializeClass(FieldDiff)
diff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py
index bc39337..9d54854 100644
--- a/Products/CMFDiffTool/ListDiff.py
+++ b/Products/CMFDiffTool/ListDiff.py
@@ -6,7 +6,7 @@
 class ListDiff(FieldDiff):
     """Text difference"""
 
-    meta_type = "List Diff"
+    meta_type = 'List Diff'
 
     def _parseField(self, value, filename=None):
         """Parse a field value in preparation for diffing"""
diff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py
index 0be6ab7..73ad310 100644
--- a/Products/CMFDiffTool/TextDiff.py
+++ b/Products/CMFDiffTool/TextDiff.py
@@ -1,19 +1,19 @@
 # -*- coding: utf-8 -*-
-import difflib
-from os import linesep
-
 from App.class_init import InitializeClass
+from os import linesep
+from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+from Products.CMFDiffTool.FieldDiff import FieldDiff
+from Products.CMFDiffTool.utils import safe_unicode
+from Products.CMFDiffTool.utils import safe_utf8
 from zope.component.hooks import getSite
 
-from Products.CMFDiffTool.FieldDiff import FieldDiff
-from Products.CMFDiffTool.utils import safe_unicode, safe_utf8
-from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
+import difflib
 
 
 class TextDiff(FieldDiff):
     """Text difference"""
 
-    meta_type = "Lines Diff"
+    meta_type = 'Lines Diff'
     inlinediff_fmt = """
 <div class="%s">
     <del>%s</del>
diff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py
index aa0ecac..60d1edf 100644
--- a/Products/CMFDiffTool/__init__.py
+++ b/Products/CMFDiffTool/__init__.py
@@ -4,15 +4,15 @@
 from zope.i18nmessageid import MessageFactory
 CMFDiffToolMessageFactory = MessageFactory('cmfdifftool')
 
-from Products.CMFCore.utils import ToolInit
-
-from Products.CMFDiffTool import CMFDiffTool
-from Products.CMFDiffTool import FieldDiff
-from Products.CMFDiffTool import TextDiff
-from Products.CMFDiffTool import ListDiff
-from Products.CMFDiffTool import BinaryDiff
-from Products.CMFDiffTool import CMFDTHtmlDiff
-from Products.CMFDiffTool import ATCompoundDiff
+from Products.CMFCore.utils import ToolInit  # NOQA
+from Products.CMFDiffTool import CMFDiffTool  # NOQA
+from Products.CMFDiffTool import FieldDiff  # NOQA
+from Products.CMFDiffTool import TextDiff  # NOQA
+from Products.CMFDiffTool import ListDiff  # NOQA
+from Products.CMFDiffTool import BinaryDiff  # NOQA
+from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA
+from Products.CMFDiffTool import ATCompoundDiff  # NOQA
+
 
 CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)
 CMFDiffTool.registerDiffType(FieldDiff.FieldDiff)
diff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py
index 716ae23..cf8a852 100644
--- a/Products/CMFDiffTool/choicediff.py
+++ b/Products/CMFDiffTool/choicediff.py
@@ -1,10 +1,9 @@
-from zope.component import getUtility
+# -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-
-from Products.CMFDiffTool.TextDiff import AsTextDiff
-
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import getAdditionalSchemata
+from Products.CMFDiffTool.TextDiff import AsTextDiff
+from zope.component import getUtility
 
 
 def title_or_value(vocabulary, value):
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index b65fe63..4e40004 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -1,22 +1,26 @@
-from zope.schema import (Bytes, Iterable, Container, Text, Date, Datetime,
-                         Time, Choice, Bool)
-from zope.globalrequest import getRequest
-from z3c.form.interfaces import INPUT_MODE
-
+# -*- coding: utf-8 -*-
 from plone.app.textfield import RichText
-from plone.autoform.base import AutoFields
 from plone.dexterity.browser.edit import DefaultEditForm
-
-from Products.CMFDiffTool.TextDiff import AsTextDiff
-from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
-from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
-from Products.CMFDiffTool.namedfile import NamedFileListDiff
 from Products.CMFDiffTool.choicediff import ChoiceDiff
-from Products.CMFDiffTool.choicediff import get_schemas
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
+from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
+from Products.CMFDiffTool.namedfile import NamedFileListDiff
+from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
+from zope.globalrequest import getRequest
+from zope.schema import Bool
+from zope.schema import Bytes
+from zope.schema import Choice
+from zope.schema import Container
+from zope.schema import Date
+from zope.schema import Datetime
+from zope.schema import Iterable
+from zope.schema import Text
+from zope.schema import Time
+
 
 # TODO: Perhaps this can be replaced with some kind of Zope 3 style
 # adaptation, in order to provide better extensibility.
@@ -129,8 +133,8 @@ def _get_diff_type(self, field):
         if diff_type is ListDiff:
             return (
                 self._compute_diff_type(
-                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION)
-                or diff_type
+                    field.value_type, VALUE_TYPES_AND_DIFF_TYPES_RELATION) or
+                diff_type
             )
 
         return diff_type or FALL_BACK_DIFF_TYPE
diff --git a/Products/CMFDiffTool/exportimport/difftool.py b/Products/CMFDiffTool/exportimport/difftool.py
index 5df32ac..ea24fa5 100644
--- a/Products/CMFDiffTool/exportimport/difftool.py
+++ b/Products/CMFDiffTool/exportimport/difftool.py
@@ -1,27 +1,26 @@
 # -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import importObjects
 from Products.GenericSetup.utils import exportObjects
-from Products.CMFCore.utils import getToolByName
-
+from Products.GenericSetup.utils import importObjects
+from Products.GenericSetup.utils import XMLAdapterBase
 from zope.interface import implements
 
 
 class DiffToolXMLAdapter(XMLAdapterBase):
-    """In- and exporter for DiffTool.
-    """
+    '''In- and exporter for DiffTool.
+    '''
     implements(IDiffTool)
 
     name = 'diff_tool'
 
     def _exportNode(self):
-        """Export the object as a DOM node.
-        """
-        node = self._doc.createElement("object")
+        '''Export the object as a DOM node.
+        '''
+        node = self._doc.createElement('object')
         node.appendChild(self._extractDiffToolSettings())
 
-        self._logger.info("DiffTool settings exported.")
+        self._logger.info('DiffTool settings exported.')
         return node
 
     def _importNode(self, node):
@@ -29,43 +28,43 @@ def _importNode(self, node):
             self._purgeDiffToolSettings()
 
         self._initDiffToolSettings(node)
-        self._logger.info("DiffTool settings imported.")
+        self._logger.info('DiffTool settings imported.')
 
     def _purgeDiffToolSettings(self):
         self.context.manage_editDiffFields({})
 
     def _initDiffToolSettings(self, node):
         for child in node.childNodes:
-            if child.nodeName == "difftypes":
-                for type_entry in child.getElementsByTagName("type"):
-                    ptype = type_entry.getAttribute("portal_type")
+            if child.nodeName == 'difftypes':
+                for type_entry in child.getElementsByTagName('type'):
+                    ptype = type_entry.getAttribute('portal_type')
                     fields = {}
-                    for field in type_entry.getElementsByTagName("field"):
-                        name = field.getAttribute("name")
-                        diff = field.getAttribute("difftype")
+                    for field in type_entry.getElementsByTagName('field'):
+                        name = field.getAttribute('name')
+                        diff = field.getAttribute('difftype')
                         fields[name] = diff
                         self.context.setDiffForPortalType(ptype, fields)
 
     def _extractDiffToolSettings(self):
-        node = self._doc.createElement("difftypes")
-        ttool = getToolByName(self.context, "portal_types")
+        node = self._doc.createElement('difftypes')
+        ttool = getToolByName(self.context, 'portal_types')
         for ptype in ttool.listContentTypes():
             diffs = self.context.getDiffForPortalType(ptype)
             if diffs:
-                child = self._doc.createElement("type")
-                child.setAttribute("portal_type", ptype)
+                child = self._doc.createElement('type')
+                child.setAttribute('portal_type', ptype)
                 node.appendChild(child)
             for field_name, diff in diffs.items():
-                field = self._doc.createElement("field")
-                field.setAttribute("name", field_name)
-                field.setAttribute("difftype", diff)
+                field = self._doc.createElement('field')
+                field.setAttribute('name', field_name)
+                field.setAttribute('difftype', diff)
                 child.appendChild(field)
         return node
 
 
 def importDiffTool(context):
-    """Import Factory Tool configuration.
-    """
+    '''Import Factory Tool configuration.
+    '''
     site = context.getSite()
     tool = getToolByName(site, 'portal_diff', None)
 
@@ -74,13 +73,13 @@ def importDiffTool(context):
 
 
 def exportDiffTool(context):
-    """Export Factory Tool configuration.
-    """
+    '''Export Factory Tool configuration.
+    '''
     site = context.getSite()
     tool = getToolByName(site, 'portal_diff', None)
     if tool is None:
-        logger = context.getLogger("difftool")
-        logger.info("Nothing to export.")
+        logger = context.getLogger('difftool')
+        logger.info('Nothing to export.')
         return
 
     exportObjects(tool, '', context)
diff --git a/Products/CMFDiffTool/interfaces/IChangeSet.py b/Products/CMFDiffTool/interfaces/IChangeSet.py
index 90be670..21a9201 100644
--- a/Products/CMFDiffTool/interfaces/IChangeSet.py
+++ b/Products/CMFDiffTool/interfaces/IChangeSet.py
@@ -2,4 +2,4 @@
 # Copyright (c) 2003 The Connexions Project, All Rights Reserved
 # Written by Brent Hendricks
 
-from Products.CMFDiffTool.interfaces import IChangeSet
+from Products.CMFDiffTool.interfaces import IChangeSet  # NOQA
diff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py
index ad4f7a6..d1058e6 100644
--- a/Products/CMFDiffTool/interfaces/__init__.py
+++ b/Products/CMFDiffTool/interfaces/__init__.py
@@ -42,11 +42,15 @@ class IDifference(Interface):
 
     meta_type = Attribute('title', 'A human readable name for the diff type')
     field = Attribute('field', 'The name of the field being compared')
-    same = Attribute('same', 'True if the fields are the "same" (whatever that means for this difference)')
+    same = Attribute('same',
+                     'True if the fields are the "same" '
+                     '(whatever that means for this difference)')
     oldValue = Attribute('oldValue', 'The old field value being compared')
     newValue = Attribute('newValue', 'The new field value being compared')
-    oldFilename = Attribute('oldFilename', 'The old filename for the field being compared')
-    newFilename = Attribute('newFilename', 'The new filename for the field being compared')
+    oldFilename = Attribute('oldFilename',
+                            'The old filename for the field being compared')
+    newFilename = Attribute('newFilename',
+                            'The new filename for the field being compared')
 
     def testChanges(ob):
         """Test the specified object to determine if the change set will apply cleanly.
@@ -75,11 +79,6 @@ def getLineDiffs():
 
         The interpretation of these tuples depends on the difference class"""
 
-##     def getCharDiffs():
-##         """Return a list of character differences on a line-by-line basis.
-
-##         For every line in the field being compared, return a list of
-##         character differences """
 
 class IChangeSet(Interface):
     """And interface representing all of the differences between two objects"""
@@ -107,7 +106,8 @@ def applyChanges(ob):
     def getDiffs():
         """Returns the list of differences between the two objects.
 
-        Each difference is a single object implementing the IDifference interface"""
+        Each difference is a single object implementing the
+        IDifference interface"""
 
     def getSubDiffs():
         """If the ChangeSet was computed recursively, returns a list
diff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py
index 9b3e964..99c2115 100644
--- a/Products/CMFDiffTool/interfaces/portal_diff.py
+++ b/Products/CMFDiffTool/interfaces/portal_diff.py
@@ -2,5 +2,5 @@
 # Copyright (c) 2003 The Connexions Project, All Rights Reserved
 # Written by Brent Hendricks
 
-from Products.CMFDiffTool.interfaces import IDifference
-from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff
+from Products.CMFDiffTool.interfaces import IDifference  # NOQA
+from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA
diff --git a/Products/CMFDiffTool/libs/__init__.py b/Products/CMFDiffTool/libs/__init__.py
index 4aa11c7..40a96af 100644
--- a/Products/CMFDiffTool/libs/__init__.py
+++ b/Products/CMFDiffTool/libs/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
\ No newline at end of file
diff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py
index e6f414d..2051352 100644
--- a/Products/CMFDiffTool/libs/htmldiff.py
+++ b/Products/CMFDiffTool/libs/htmldiff.py
@@ -13,9 +13,10 @@
 """
 
 from difflib import SequenceMatcher
-import re
 from StringIO import StringIO
+
 import cgi
+import re
 
 
 def htmlEncode(s, esc=cgi.escape):
@@ -69,7 +70,7 @@ def htmlDiff(self, addStylesheet=False):
         a = self.a
         b = self.b
         out = StringIO()
-        #print [o[0] for o in opcodes]
+        #  print [o[0] for o in opcodes]
         for tag, i1, i2, j1, j2 in opcodes:
             if tag == 'equal':
                 for item in a[i1:i2]:
@@ -135,8 +136,8 @@ def addStylesheet(self, html, ss):
             pos = match.end()
         else:
             pos = 0
-        return ('%s<style type="text/css"><!--\n%s\n--></style>%s'
-                % (html[:pos], ss, html[pos:]))
+        return ('{0}<style type="text/css"><!--\n{1}\n--></style>{2}'.format(
+            html[:pos], ss, html[pos:]))
 
     def startInsertText(self):
         return '<span class="insert">'
@@ -151,10 +152,12 @@ def endDeleteText(self):
         return '</span> '
 
     def formatInsertTag(self, tag):
-        return '<span class="tagInsert">insert: <tt>%s</tt></span> ' % htmlEncode(tag)
+        return ('<span class="tagInsert">insert: <tt>%s</tt></span> ' %
+                htmlEncode(tag))
 
     def formatDeleteTag(self, tag):
-        return '<span class="tagDelete">delete: <tt>%s</tt></span> ' % htmlEncode(tag)
+        return ('<span class="tagDelete">delete: <tt>%s</tt></span> ' %
+                htmlEncode(tag))
 
 
 class NoTagHTMLMatcher(HTMLMatcher):
@@ -170,7 +173,7 @@ def htmldiff(source1, source2, addStylesheet=False):
     Return the difference between two pieces of HTML
 
         >>> htmldiff('test1', 'test2')
-        '<span class="delete">test1 </span> <span class="insert">test2 </span> '
+        '<span class="delete">test1 </span> <span class="insert">test2 </span> '  # NOQA
         >>> htmldiff('test1', 'test1')
         'test1 '
         >>> htmldiff('<b>test1</b>', '<i>test1</i>')
@@ -265,10 +268,10 @@ def writeLines(self, lines, out):
 if __name__ == '__main__':
     import sys
     if not sys.argv[1:]:
-        print "Usage: %s file1 file2" % sys.argv[0]
-        print "or to test: %s test" % sys.argv[0]
+        print('Usage: %s file1 file2' % sys.argv[0])  # NOQA
+        print('or to test: %s test' % sys.argv[0])  # NOQA
     elif sys.argv[1] == 'test' and not sys.argv[2:]:
         import doctest
         doctest.testmod()
     else:
-        print diffFiles(sys.argv[1], sys.argv[2])
+        print(diffFiles(sys.argv[1], sys.argv[2]))  # NOQA
diff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py
index 0a86e1f..fec38dd 100644
--- a/Products/CMFDiffTool/namedfile.py
+++ b/Products/CMFDiffTool/namedfile.py
@@ -1,11 +1,11 @@
+# -*- coding: utf-8 -*-
 from App.class_init import InitializeClass
-
 from plone.namedfile import NamedFile
-
 from Products.CMFDiffTool.BinaryDiff import BinaryDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
 
+
 FILE_FIELD_TYPES = []
 
 try:
@@ -129,9 +129,10 @@ def inline_diff(self):
         dummy_dict = {'repr': '', 'data': None, 'filename': None}
         make_lists_same_length(old_data, new_data, dummy_dict)
 
-        is_same_dict = lambda d1, d2: is_same(
-            d1['data'], d1['filename'], d2['data'], d2['filename']
-        )
+        def is_same_dict(d1, d2):
+            return is_same(
+                d1['data'], d1['filename'], d2['data'], d2['filename']
+            )
 
         return '\n'.join([
             ((self.same_fmt % (css_class, d_old['repr']))
diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 7ca230a..16d0143 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -1,13 +1,15 @@
-#coding=utf8
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.bbb import PTC_FIXTURE
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
 from zope.component import getSiteManager
 from zope.schema.interfaces import IVocabularyFactory
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
-from plone.app.testing.bbb import PTC_FIXTURE
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import FunctionalTesting
 
 TEST_CONTENT_TYPE_ID = 'TestContentType'
 
@@ -26,12 +28,12 @@ def vocabulary_factory(context):
 
 class DXLayer(PloneSandboxLayer):
 
-    defaultBases = (PTC_FIXTURE, )
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )
 
     def setUpPloneSite(self, portal):
-        """Set up additional products and ZCML required to test
+        '''Set up additional products and ZCML required to test
         this product.
-        """
+        '''
         # setup dexterity
         types_tool = getToolByName(portal, 'portal_types')
 
@@ -53,28 +55,28 @@ def setUpPloneSite(self, portal):
                 'plone.app.contenttypes.behaviors.collection.ICollection',
             ),
             model_source='''
-            <model xmlns="http://namespaces.plone.org/supermodel/schema">
+            <model xmlns='http://namespaces.plone.org/supermodel/schema'>
                 <schema>
-                    <field name="text" type="zope.schema.Text">
+                    <field name='text' type='zope.schema.Text'>
                         <title>Text</title>
                         <required>False</required>
                     </field>
-                    <field name="file" type="plone.namedfile.field.NamedFile">
+                    <field name='file' type='plone.namedfile.field.NamedFile'>
                         <title>File</title>
                         <required>False</required>
                     </field>
-                    <field name="date" type="zope.schema.Date">
+                    <field name='date' type='zope.schema.Date'>
                         <title>Date</title>
                         <required>False</required>
                     </field>
-                    <field name="files" type="zope.schema.List">
+                    <field name='files' type='zope.schema.List'>
                         <title>Date</title>
                         <required>False</required>
-                        <value_type type="plone.namedfile.field.NamedFile">
+                        <value_type type='plone.namedfile.field.NamedFile'>
                             <title>Val</title>
                         </value_type>
                     </field>
-                    <field name="choice" type="zope.schema.Choice">
+                    <field name='choice' type='zope.schema.Choice'>
                         <title>Choice</title>
                         <required>False</required>
                         <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>
@@ -103,8 +105,8 @@ def setUpZope(self, app, configurationContext):
 PACKAGE_AT_FIXTURE = ATLayer()
 
 CMFDiffToolLayer = FunctionalTesting(
-    bases=(PTC_FIXTURE, ), name="Products.CMFDiffTool:functional")
+    bases=(PTC_FIXTURE, ), name='Products.CMFDiffTool:functional')
 CMFDiffToolDXLayer = FunctionalTesting(
-    bases=(PACKAGE_DX_FIXTURE, ), name="Products.CMFDiffTool.DX:functional")
+    bases=(PACKAGE_DX_FIXTURE, ), name='Products.CMFDiffTool.DX:functional')
 CMFDiffToolATLayer = FunctionalTesting(
-    bases=(PACKAGE_AT_FIXTURE, ), name="Products.CMFDiffTool.AT:functional")
+    bases=(PACKAGE_AT_FIXTURE, ), name='Products.CMFDiffTool.AT:functional')
diff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py
index bbfbd40..0691b63 100644
--- a/Products/CMFDiffTool/tests/BaseTestCase.py
+++ b/Products/CMFDiffTool/tests/BaseTestCase.py
@@ -2,9 +2,9 @@
 # BaseTestCase
 
 from plone.app.testing.bbb import PloneTestCase
-from Products.CMFDiffTool.testing import CMFDiffToolLayer
 from Products.CMFDiffTool.testing import CMFDiffToolATLayer
 from Products.CMFDiffTool.testing import CMFDiffToolDXLayer
+from Products.CMFDiffTool.testing import CMFDiffToolLayer
 
 
 class BaseTestCase(PloneTestCase):
diff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py
index 1c85d45..6827501 100644
--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py
+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py
@@ -1,10 +1,12 @@
-from zope.interface import alsoProvides, noLongerProvides
-from Products.ATContentTypes.content.document import ATDocument
-from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff
-
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseATTestCase
-from zope.component import adapts, provideAdapter
 from Products.Archetypes import atapi
+from Products.ATContentTypes.content.document import ATDocument
+from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff
+from zope.component import adapts
+from zope.component import provideAdapter
+from zope.interface import alsoProvides
+from zope.interface import noLongerProvides
 
 
 class TestATCompoundDiff(BaseATTestCase):
@@ -20,7 +22,7 @@ def testCompoundDiff(self):
         second.setText('<p>Body2</p>', mimetype='text/html')
         fd = ATCompoundDiff(first, second, None)
         # There should be some fields
-        self.failUnless(len(fd))
+        self.assertTrue(len(fd))
         for field in fd:
             # We've changed the body
             if field.label == 'label_body_text':
@@ -44,7 +46,8 @@ def testAdaptedObjects(self):
         # Add a schema extended field to an ATDocument and test that
         # the compound diff can read it
         from archetypes.schemaextender.field import ExtensionField
-        from archetypes.schemaextender.tests.mocks import IHighlighted, Extender
+        from archetypes.schemaextender.tests.mocks import Extender
+        from archetypes.schemaextender.tests.mocks import IHighlighted
 
         # custom field class which does not set attributes directly on the
         # content
@@ -67,10 +70,10 @@ class TestSchemaExtender(Extender):
                 HighlightedField('schemaextender_test',
                                  schemata='settings',
                                  widget=atapi.BooleanWidget(
-                                                    label="Extended",
-                                                    description=""),
+                                     label='Extended',
+                                     description=''),
                                  ),
-                      ]
+            ]
 
         """Ensure that tool instances implement the portal_diff interface"""
         provideAdapter(TestSchemaExtender,
@@ -86,4 +89,4 @@ class TestSchemaExtender(Extender):
         field = fd[-1]
         self.assertEqual(field.oldValue, False)
         self.assertEqual(field.newValue, True)
-        self.assertEqual(field.label, "Extended")
+        self.assertEqual(field.label, 'Extended')
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 2e8ef5e..76edad3 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -2,16 +2,14 @@
 #
 # CMFDiffTool tests
 #
+from Acquisition import aq_base
 from os import linesep
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
-from Acquisition import aq_base
-
+from Products.CMFPlone.utils import safe_hasattr
 from unittest import TestCase
 
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING
-
 
 class TestChangeSet(TestCase):
     """Tests for ChangeSet objects"""
@@ -34,15 +32,18 @@ def testInterface(self):
     def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
-                                     self.folder.manage_copyObjects(['doc1']))
+            self.folder.manage_copyObjects(['doc1']))
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
-        self.folder.folder1.invokeFactory('Document', 'doc1', title='My Title1')
-        self.folder.folder1.invokeFactory('Document', 'doc2', title='My Title2')
-        self.folder.folder1.invokeFactory('Document', 'doc3', title='My Title3')
+        self.folder.folder1.invokeFactory('Document', 'doc1',
+                                          title='My Title1')
+        self.folder.folder1.invokeFactory('Document', 'doc2',
+                                          title='My Title2')
+        self.folder.folder1.invokeFactory('Document', 'doc3',
+                                          title='My Title3')
         self.folder.manage_pasteObjects(
-                                  self.folder.manage_copyObjects(['folder1']))
+            self.folder.manage_copyObjects(['folder1']))
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
@@ -57,7 +58,7 @@ def testChangeSetChanged(self):
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 3)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
 
@@ -83,11 +84,11 @@ def testChangeSetFolderChanged(self):
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
@@ -105,8 +106,8 @@ def testChangeSetFolderDocChanged(self):
         self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
@@ -115,7 +116,7 @@ def testChangeSetFolderDocChanged(self):
             self.assertEqual(len(sub_diffs), 3)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
-                self.failIf(sub_diffs[0].same)
+                self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title1%s+ My New Title' % linesep)
             else:
@@ -138,13 +139,13 @@ def testChangeSetFolderDocRemoved(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_diffs[0].same)
-        self.failIf(self.cs._added)
+        self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
 
     def testChangeSetFolderDocAdded(self):
         self.setupTestFolders()
         self.folder.copy_of_folder1.invokeFactory('Document', 'doc4',
-                                                         title='My Doc Title')
+                                                  title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
@@ -158,15 +159,16 @@ def testChangeSetFolderDocAdded(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             self.assertTrue(sub_diffs[0].same)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
 
     def testChangeSetFolderReordered(self):
         self.setupTestFolders()
-        if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
+        if safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                        'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
-        elif hasattr(aq_base(self.folder.copy_of_folder1),
-                                                        'moveObjectsByDelta'):
+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                          'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
@@ -175,8 +177,8 @@ def testChangeSetFolderReordered(self):
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
         self.assertTrue(diffs[0].same)
-        self.failIf(self.cs._added)
-        self.failIf(self.cs._removed)
+        self.assertFalse(self.cs._added)
+        self.assertFalse(self.cs._removed)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         # The sub diffs should show no changes
@@ -188,10 +190,10 @@ def testChangeSetFolderReordered(self):
         # XXX we need an explicit way of noting reorders
 
     def testChangeSetFolderComplex(self):
-        self.setupTestFolders()\
+        self.setupTestFolders()
         # Add a new sub object
         self.folder.copy_of_folder1.invokeFactory('Document', 'doc4',
-                                                         title='My Doc Title')
+                                                  title='My Doc Title')
         # Delete a sub object
         self.folder.copy_of_folder1.manage_delObjects('doc2')
         # Change one object
@@ -199,10 +201,11 @@ def testChangeSetFolderComplex(self):
         # Change the folder itself
         self.folder.copy_of_folder1.setTitle('My New Title')
         # Move the changed object
-        if hasattr(aq_base(self.folder.copy_of_folder1), 'moveObjectsToTop'):
+        if safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                        'moveObjectsToTop'):
             self.folder.copy_of_folder1.moveObjectsToTop(['doc3'])
-        elif hasattr(aq_base(self.folder.copy_of_folder1),
-                                                        'moveObjectsByDelta'):
+        elif safe_hasattr(aq_base(self.folder.copy_of_folder1),
+                          'moveObjectsByDelta'):
             self.folder.copy_of_folder1.moveObjectsByDelta(['doc3'], -3)
         else:
             # We don't have an orderable folder give up
@@ -211,7 +214,7 @@ def testChangeSetFolderComplex(self):
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 2)
-        self.failIf(diffs[0].same)
+        self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -225,7 +228,7 @@ def testChangeSetFolderComplex(self):
             sub_diffs = sub_cs[i].getDiffs()
             self.assertEqual(len(sub_diffs), 3)
             if sub_cs[i].getId() == 'doc3':
-                self.failIf(sub_diffs[0].same)
+                self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),
                                  '- My Title3%s+ My New Title' % linesep)
             else:
diff --git a/Products/CMFDiffTool/tests/testDiffTool.py b/Products/CMFDiffTool/tests/testDiffTool.py
index 19b0f0d..3d42c5d 100644
--- a/Products/CMFDiffTool/tests/testDiffTool.py
+++ b/Products/CMFDiffTool/tests/testDiffTool.py
@@ -3,22 +3,20 @@
 # CMFDiffTool tests
 #
 
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFCore.utils import getToolByName
-from zExceptions import BadRequest
-
 from Products.CMFDiffTool.CMFDiffTool import registerDiffType
 from Products.CMFDiffTool.CMFDiffTool import unregisterDiffType
+from unittest import TestCase
+from zExceptions import BadRequest
 
 
 class DummyDiff:
-    meta_type = "Dummy Diff Type"
+    meta_type = 'Dummy Diff Type'
 
 
 class DummyDiff2:
-    meta_type = "Second Dummy Diff Type"
-
-from unittest import TestCase
-from plone.app.testing import PLONE_INTEGRATION_TESTING
+    meta_type = 'Second Dummy Diff Type'
 
 
 class TestDiffTool(TestCase):
@@ -76,7 +74,9 @@ def testSingleSetDiffField(self):
                          {'title': 'Dummy Diff Type'})
 
     def testMultipleSetDiffField(self):
-        """Test setDiffField method adding a second field to one content type"""
+        """
+        Test setDiffField method adding a second field to one content type
+        """
         self.p_diff.setDiffField('Document', 'title', 'Dummy Diff Type')
         self.p_diff.setDiffField('Document', 'description', 'Dummy Diff Type')
         d = {'title': 'Dummy Diff Type', 'description': 'Dummy Diff Type'}
@@ -92,13 +92,16 @@ def testReplaceSetDiffField(self):
         unregisterDiffType(DummyDiff2)
 
     def testSetDiffFieldNameFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Bob', 'title', 'Dummy Diff Type')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Bob', 'title', 'Dummy Diff Type')
 
     def testSetDiffFieldBlankFieldFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Document', '', 'Dummy Diff Type')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Document', '', 'Dummy Diff Type')
 
     def testSetDiffFieldInvalidDiffFailure(self):
-        self.assertRaises(BadRequest, self.p_diff.setDiffField, 'Document', 'title', 'NoDiff')
+        self.assertRaises(BadRequest, self.p_diff.setDiffField,
+                          'Document', 'title', 'NoDiff')
 
     def beforeTearDown(self):
         # Undo changes that don't get rolled back (i.e. module level changes)
diff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py
index 5f9ac23..8400cab 100644
--- a/Products/CMFDiffTool/tests/testFieldDiff.py
+++ b/Products/CMFDiffTool/tests/testFieldDiff.py
@@ -3,58 +3,63 @@
 # CMFDiffTool tests
 #
 from os import linesep
-from Testing import ZopeTestCase
-from Products.CMFDiffTool.FieldDiff import FieldDiff
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFDiffTool.FieldDiff import dump
+from Products.CMFDiffTool.FieldDiff import FieldDiff
+from unittest import TestCase
+
 
 _marker = []
 
 
 class A:
-    attribute = "value"
+    attribute = 'value'
 
     def method(self):
-        return "method value"
+        return 'method value'
 
 
 class B:
-    attribute = "different value"
+    attribute = 'different value'
 
     def method(self):
-        return "different method value"
+        return 'different method value'
 
 
 class U:
     attribute = u"\xfcnicode value"
+
     def method(self):
         return u"different method val\xfce"
 
 
-class TestFieldDiff(ZopeTestCase.ZopeTestCase):
+class TestFieldDiff(TestCase):
     """Test the FieldDiff class"""
 
+    layer = PLONE_INTEGRATION_TESTING
+
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-        self.failUnless(IDifference.implementedBy(FieldDiff))
+        self.assertTrue(IDifference.implementedBy(FieldDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         fd = FieldDiff(a, a, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
         uu = U()
         fd = FieldDiff(uu, uu, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testMethodSame(self):
         """Test method with same value"""
         a = A()
         fd = FieldDiff(a, a, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
         uu = U()
         fd = FieldDiff(uu, uu, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
@@ -62,9 +67,9 @@ def testAttributeDiff(self):
         b = B()
         uu = U()
         fd = FieldDiff(a, b, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
         fd = FieldDiff(a, uu, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testMethodDiff(self):
         """Test method with different value"""
@@ -72,9 +77,9 @@ def testMethodDiff(self):
         b = B()
         uu = U()
         fd = FieldDiff(a, b, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
         fd = FieldDiff(a, uu, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -113,7 +118,7 @@ def testDiffText(self):
         a = A()
         b = B()
         uu = U()
-        expected = "- value%s+ different value" % linesep
+        expected = '- value%s+ different value' % linesep
         fd = FieldDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
         expected = u"- value%s+ \xfcnicode value" % linesep
diff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py
index ef488fe..1119f8d 100644
--- a/Products/CMFDiffTool/tests/testListDiff.py
+++ b/Products/CMFDiffTool/tests/testListDiff.py
@@ -3,8 +3,10 @@
 # CMFDiffTool tests
 #
 from os import linesep
-from Testing import ZopeTestCase
+from plone.app.testing import PLONE_INTEGRATION_TESTING
 from Products.CMFDiffTool.ListDiff import ListDiff
+from unittest import TestCase
+
 
 _marker = []
 
@@ -17,26 +19,28 @@ class B:
     attribute = [1, 2, 3, 4]
 
 
-class TestListDiff(ZopeTestCase.ZopeTestCase):
+class TestListDiff(TestCase):
     """Test the ListDiff class"""
 
+    layer = PLONE_INTEGRATION_TESTING
+
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces.portal_diff import IDifference
-        self.failUnless(IDifference.implementedBy(ListDiff))
+        self.assertTrue(IDifference.implementedBy(ListDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         diff = ListDiff(a, a, 'attribute')
-        self.failUnless(diff.same)
+        self.assertTrue(diff.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
         a = A()
         b = B()
         diff = ListDiff(a, b, 'attribute')
-        self.failIf(diff.same)
+        self.assertFalse(diff.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -57,14 +61,14 @@ def testSameText(self):
         """Test text diff output with no diff"""
         a = A()
         diff = ListDiff(a, a, 'attribute')
-        expected = "  1%(linesep)s  2%(linesep)s  3" % {'linesep': linesep}
+        expected = '  1%(linesep)s  2%(linesep)s  3' % {'linesep': linesep}
         self.assertEqual(diff.ndiff(), expected)
 
     def testDiffText(self):
         """Test text diff output with no diff"""
         a = A()
         b = B()
-        expected = "  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4" % \
+        expected = '  1%(linesep)s  2%(linesep)s  3%(linesep)s+ 4' % \
                    {'linesep': linesep}
         diff = ListDiff(a, b, 'attribute')
         self.assertEqual(diff.ndiff(), expected)
diff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py
index 109cd1f..a8c72a6 100644
--- a/Products/CMFDiffTool/tests/testTextDiff.py
+++ b/Products/CMFDiffTool/tests/testTextDiff.py
@@ -1,61 +1,64 @@
 # -*- coding: utf-8 -*-
 
 from os import linesep
+from plone.app.testing import PLONE_INTEGRATION_TESTING
+from Products.CMFDiffTool.TextDiff import TextDiff
+from unittest import TestCase
+
 import sys
 
-from Testing import ZopeTestCase
-from Products.CMFDiffTool.TextDiff import TextDiff
 
 _marker = []
 
 
 class A:
-    attribute = "कामसूत्र"
+    attribute = 'कामसूत्र'
 
     def method(self):
-        return "method कामसूत्र"
+        return 'method कामसूत्र'
 
 
 class B:
-    attribute = "過労死"
+    attribute = '過労死'
 
     def method(self):
-        return "method 過労死"
+        return 'method 過労死'
 
 
-class TestTextDiff(ZopeTestCase.ZopeTestCase):
+class TestTextDiff(TestCase):
     """Test the TextDiff class"""
+    layer = PLONE_INTEGRATION_TESTING
 
     def testInterface(self):
         """Ensure that tool instances implement the portal_diff interface"""
         from Products.CMFDiffTool.interfaces import IDifference
-        self.failUnless(IDifference.implementedBy(TextDiff))
+        self.assertTrue(IDifference.implementedBy(TextDiff))
 
     def testAttributeSame(self):
         """Test attribute with same value"""
         a = A()
         fd = TextDiff(a, a, 'attribute')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testMethodSame(self):
         """Test method with same value"""
         a = A()
         fd = TextDiff(a, a, 'method')
-        self.failUnless(fd.same)
+        self.assertTrue(fd.same)
 
     def testAttributeDiff(self):
         """Test attribute with different value"""
         a = A()
         b = B()
         fd = TextDiff(a, b, 'attribute')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testMethodDiff(self):
         """Test method with different value"""
         a = A()
         b = B()
         fd = TextDiff(a, b, 'method')
-        self.failIf(fd.same)
+        self.assertFalse(fd.same)
 
     def testGetLineDiffsSame(self):
         """test getLineDiffs() method with same value"""
@@ -82,7 +85,7 @@ def testDiffText(self):
         """Test text diff output with different value"""
         a = A()
         b = B()
-        expected = "- कामसूत्र%s+ 過労死" % linesep
+        expected = '- कामसूत्र%s+ 過労死' % linesep
         fd = TextDiff(a, b, 'attribute')
         self.assertEqual(fd.ndiff(), expected)
 
@@ -100,9 +103,9 @@ def testUnifiedDiff(self):
 -कामसूत्र
 +過労死"""
         else:
-            expected = """--- None 
+            expected = """--- None
 
-+++ None 
++++ None
 
 @@ -1,1 +1,1 @@
 
@@ -124,6 +127,6 @@ def testHTMLDiff(self):
         <tbody>
             <tr><td class="diff_next" id="difflib_chg_to0__0"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="from0_1">1</td><td nowrap="nowrap"><span class="diff_sub">कामसूत्र</span></td><td class="diff_next"><a href="#difflib_chg_to0__top">t</a></td><td class="diff_header" id="to0_1">1</td><td nowrap="nowrap"><span class="diff_add">過労死</span></td></tr>
         </tbody>
-    </table>"""
+    </table>"""  # NOQA
         fd = TextDiff(a, b, 'attribute')
         self.assertEqual(fd.html_diff(), expected)
diff --git a/Products/CMFDiffTool/tests/test_astextdiff.py b/Products/CMFDiffTool/tests/test_astextdiff.py
index bf6cc44..9217f6e 100644
--- a/Products/CMFDiffTool/tests/test_astextdiff.py
+++ b/Products/CMFDiffTool/tests/test_astextdiff.py
@@ -1,8 +1,9 @@
-from Products.CMFDiffTool.TextDiff import AsTextDiff
+# -*- coding: utf-8 -*-
 from datetime import date
 from Products.CMFDiffTool.interfaces import IDifference
+from Products.CMFDiffTool.TextDiff import AsTextDiff
 
-import unittest2 as unittest
+import unittest
 
 
 class DateDummyType(object):
@@ -37,7 +38,7 @@ def _test_diff_date(self, d1, d2, same):
                 self.assertTrue(str(d1) in inline_diff)
             if d2 is not None:
                 self.assertTrue(str(d2) in inline_diff)
-            #self.assertFalse('None' in inline_diff)
+            # self.assertFalse('None' in inline_diff)
 
     def test_should_diff_boolean_fields(self):
         self._test_diff_bool(False, False, True)
@@ -62,4 +63,4 @@ def _test_diff_bool(self, b1, b2, same):
         else:
             self.assertTrue(
                 ('True' in inline_diff) or ('False' in inline_diff))
-            #self.assertFalse('None' in inline_diff)
+            # self.assertFalse('None' in inline_diff)
diff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py
index 691547a..06e01d7 100644
--- a/Products/CMFDiffTool/tests/test_binarydiff.py
+++ b/Products/CMFDiffTool/tests/test_binarydiff.py
@@ -1,10 +1,9 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseDXTestCase
 from plone.namedfile.file import NamedFile
-
-from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFDiffTool import namedfile
-
 from Products.CMFDiffTool import testing
+from Products.CMFDiffTool.interfaces import IDifference
 
 
 class BinaryDiffTestCase(BaseDXTestCase):
diff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py
index 3ff8585..d6f7ae0 100644
--- a/Products/CMFDiffTool/tests/test_choicediff.py
+++ b/Products/CMFDiffTool/tests/test_choicediff.py
@@ -1,10 +1,10 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseDXTestCase
+from Products.CMFDiffTool import testing
 from Products.CMFDiffTool.choicediff import ChoiceDiff
 from Products.CMFDiffTool.choicediff import title_or_value
 from Products.CMFDiffTool.interfaces import IDifference
 
-from Products.CMFDiffTool import testing
-
 
 class ChoiceDiffTestCase(BaseDXTestCase):
 
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index b4949f4..ac8f540 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -1,14 +1,11 @@
+# -*- coding: utf-8 -*-
+from .BaseTestCase import BaseDXTestCase
 from datetime import date
-
 from plone.namedfile import NamedFile
-from Products.CMFDiffTool.interfaces import IDifference
-
-from .BaseTestCase import BaseDXTestCase
-
+from Products.CMFDiffTool import testing
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS
-
-from Products.CMFDiffTool import testing
+from Products.CMFDiffTool.interfaces import IDifference
 
 
 class DexterityDiffTestCase(BaseDXTestCase):
diff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py
index 06ea786..f123a6d 100644
--- a/Products/CMFDiffTool/tests/test_filelistdiff.py
+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py
@@ -1,9 +1,9 @@
+# -*- coding: utf-8 -*-
 from plone.namedfile import NamedFile
-
-from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFDiffTool import namedfile
+from Products.CMFDiffTool.interfaces import IDifference
 
-import unittest2 as unittest
+import unittest
 
 
 class DummyType(object):
diff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py
index 530b55b..909b9d0 100644
--- a/Products/CMFDiffTool/tests/test_install.py
+++ b/Products/CMFDiffTool/tests/test_install.py
@@ -1,6 +1,6 @@
+# -*- coding: utf-8 -*-
 from .BaseTestCase import BaseTestCase
 from Products.CMFCore.utils import getToolByName
-
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 
 
diff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py
index 5277291..be047bb 100644
--- a/Products/CMFDiffTool/tests/test_richtextdiff.py
+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py
@@ -1,8 +1,9 @@
-from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
+# -*- coding: utf-8 -*-
 from plone.app.textfield.value import RichTextValue
+from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.interfaces import IDifference
 
-import unittest2 as unittest
+import unittest
 
 
 class DummyType(object):
diff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py
index c00f72b..da7921b 100644
--- a/Products/CMFDiffTool/utils.py
+++ b/Products/CMFDiffTool/utils.py
@@ -1,5 +1,3 @@
-
-
 # -*- coding: utf-8 -*-
 def safe_unicode(value):
     if isinstance(value, unicode):
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..d30eab7
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,44 @@
+[buildout]
+extends =
+    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+    plone-4.3.x.cfg
+package-name = Products.CMFDiffTool
+package-extras = [test]
+test-eggs = Pillow
+develop = .
+parts +=
+    omelette
+    code-analysis
+
+# network speedup
+socket-timeout = 5
+allow-hosts =
+    *.python.org
+    docutils.sourceforge.net
+    prdownloads.sourceforge.net
+    effbot.org
+    dist.plone.org
+
+[omelette]
+recipe = collective.recipe.omelette
+eggs = ${test:eggs}
+
+[code-analysis]
+recipe = plone.recipe.codeanalysis [recommended]
+directory = ${buildout:directory}/Products
+flake8-max-complexity = 20
+# If todo markers are marked as problems, no todomarkers will be written
+# Don't show plone.api advertisement
+# Don't checko for % formatter
+flake8-ignore = T000,P001,S001
+utf8-header = True
+clean-lines = True
+imports = True
+pep3101 = False
+debug-statements = True
+return-status-codes = True
+
+[versions]
+zc.buildout=
+setuptools=
+Products.CMFDiffTool=
diff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg
new file mode 100644
index 0000000..e69de29
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..ff404cc
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1 @@
+zc.buildout==2.5.0
diff --git a/setup.py b/setup.py
index 922f530..1231eea 100644
--- a/setup.py
+++ b/setup.py
@@ -6,8 +6,8 @@
 setup(name='Products.CMFDiffTool',
       version=version,
       description="Diff tool for Plone",
-      long_description=open("README.txt").read() + "\n" +
-                       open("CHANGES.txt").read(),
+      long_description=(open("README.txt").read() + "\n" +
+                        open("CHANGES.txt").read()),
       classifiers=[
         "Development Status :: 5 - Production/Stable",
         "Programming Language :: Python :: 2.7",
@@ -31,6 +31,7 @@
             'plone.namedfile',
             'plone.app.dexterity',
             'plone.app.contenttypes',
+            'plone.app.robotframework',  # Only because plone.app.event fails
         ]
       ),
       install_requires=[


