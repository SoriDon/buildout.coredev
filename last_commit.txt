Repository: plone.rest


Branch: refs/heads/master
Date: 2018-06-23T14:54:23+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rest/commit/d2c75ebcc79d8adfaa1927fca6db54a3eae707ba

use decorators

Files changed:
M src/plone/rest/cors.py
M src/plone/rest/service.py
M src/plone/rest/testing.py
M src/plone/rest/traverse.py

b'diff --git a/src/plone/rest/cors.py b/src/plone/rest/cors.py\nindex df7d784..7694cb9 100644\n--- a/src/plone/rest/cors.py\n+++ b/src/plone/rest/cors.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.rest.interfaces import ICORSPolicy\n-from zope.interface import implements\n+from zope.interface import implementer\n \n # CORS preflight service registry\n # A mapping of method -> service_id\n@@ -18,8 +18,8 @@ def lookup_preflight_service_id(method):\n         return _services[method]\n \n \n+@implementer(ICORSPolicy)\n class CORSPolicy(object):\n-    implements(ICORSPolicy)\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/rest/service.py b/src/plone/rest/service.py\nindex 799d52a..2b8f939 100644\n--- a/src/plone/rest/service.py\n+++ b/src/plone/rest/service.py\n@@ -2,11 +2,11 @@\n from plone.rest.interfaces import ICORSPolicy\n from plone.rest.interfaces import IService\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n \n \n+@implementer(IService)\n class Service(object):\n-    implements(IService)\n \n     def __call__(self):\n         policy = queryMultiAdapter((self.context, self.request), ICORSPolicy)\ndiff --git a/src/plone/rest/testing.py b/src/plone/rest/testing.py\nindex 63b3114..0fb5292 100644\n--- a/src/plone/rest/testing.py\n+++ b/src/plone/rest/testing.py\n@@ -41,7 +41,7 @@ def setUpZope(self, app, configurationContext):\n class InternalServerErrorService(Service):\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/500-internal-server-error\',\n             500,\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 6f88546..b94f324 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -4,15 +4,15 @@\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n from plone.rest.interfaces import IAPIRequest\n from plone.rest.interfaces import IService\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from Products.CMFCore.interfaces import IContentish\n \n \n+@adapter(IPloneSiteRoot, IAPIRequest)\n class RESTTraverse(DefaultPublishTraverse):\n-    adapts(IPloneSiteRoot, IAPIRequest)\n \n     def publishTraverse(self, request, name):\n         try:\n@@ -51,10 +51,10 @@ def browserDefault(self, request):\n         return self.context, (request._rest_service_id,)\n \n \n+@implementer(IBrowserPublisher)\n class RESTWrapper(object):\n     """A wrapper for objects traversed during a REST request.\n     """\n-    implements(IBrowserPublisher)\n \n     def __init__(self, context, request):\n         self.context = context\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-06-23T14:55:49+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rest/commit/a549adcbfbc61133eac2903f36c7b4bfb25a3fb6

fix render_exceptions for py3

Files changed:
M setup.py
M src/plone/rest/errors.py

b'diff --git a/setup.py b/setup.py\nindex 5da81e4..f45f24c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,6 +59,7 @@ def read(*rnames):\n           \'zope.traversing\',\n           \'Products.CMFCore\',\n           \'Zope2\',\n+          \'six\',\n       ],\n       entry_points="""\n       # -*- Entry points: -*-\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex fa8e3f5..6839d15 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -7,6 +7,7 @@\n from zope.component.hooks import getSite\n \n import json\n+import six\n import sys\n import traceback\n \n@@ -33,8 +34,12 @@ def __call__(self):\n         return\n \n     def render_exception(self, exception):\n-        result = {u\'type\': type(exception).__name__.decode(\'utf-8\'),\n-                  u\'message\': str(exception).decode(\'utf-8\')}\n+        name = type(exception).__name__\n+        message = str(exception)\n+        if six.PY2:\n+            name = name.decode(\'utf-8\')\n+            message = message.decode(\'utf-8\')\n+        result = {u\'type\': name, u\'message\': message}\n \n         if isinstance(exception, NotFound):\n             # NotFound exceptions need special handling because their\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-06-23T14:56:01+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rest/commit/bbfa49d29d649b7ae50831283fd89558aabbb5bc

start porting tests to py3

Files changed:
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_permissions.py
M src/plone/rest/tests/test_traversal.py

b"diff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex 8f49d1e..bb8e8b8 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -117,7 +117,7 @@ def test_dexterity_news_item_get(self):\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u'image.png')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, 'r').read(),\n+            data=open(image_file, 'rb').read(),\n             contentType='image/png',\n             filename=u'image.png'\n         )\n@@ -177,7 +177,7 @@ def test_dexterity_file_get(self):\n             os.path.dirname(__file__), u'file.pdf'\n         )\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, 'r').read(),\n+            data=open(pdf_file, 'rb').read(),\n             contentType='application/pdf',\n             filename=u'file.pdf'\n         )\n@@ -203,7 +203,7 @@ def test_dexterity_image_get(self):\n         self.portal.image.description = u'This is an image'\n         image_file = os.path.join(os.path.dirname(__file__), u'image.png')\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, 'r').read(),\n+            data=open(image_file, 'rb').read(),\n             contentType='image/png',\n             filename=u'image.png'\n         )\ndiff --git a/src/plone/rest/tests/test_permissions.py b/src/plone/rest/tests/test_permissions.py\nindex f8d972e..673d592 100644\n--- a/src/plone/rest/tests/test_permissions.py\n+++ b/src/plone/rest/tests/test_permissions.py\n@@ -41,8 +41,9 @@ def traverse(self, path='/plone', accept='application/json', method='GET'):\n         request.environ['PATH_TRANSLATED'] = path\n         request.environ['HTTP_ACCEPT'] = accept\n         request.environ['REQUEST_METHOD'] = method\n-        request._auth = 'Basic %s' % b64encode(\n-            '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n+        auth = '%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        b64auth = b64encode(auth.encode('utf8'))\n+        request._auth = 'Basic %s' % b64auth.decode('utf8')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 0741816..80a97db 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -32,8 +32,9 @@ def traverse(self, path='/plone', accept='application/json', method='GET'):\n         request.environ['PATH_TRANSLATED'] = path\n         request.environ['HTTP_ACCEPT'] = accept\n         request.environ['REQUEST_METHOD'] = method\n-        request._auth = 'Basic %s' % b64encode(\n-            '%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+        auth = '%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        b64auth = b64encode(auth.encode('utf8'))\n+        request._auth = 'Basic %s' % b64auth.decode('utf8')\n         notify(PubStart(request))\n         return request.traverse(path)\n \n"

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-07-20T13:01:16+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.rest/commit/ab463084fe10ac63ca6069b19951a2e1c453332b

add python 3.6

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex 6af8fea..57e0f56 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,5 +1,7 @@\n language: python\n-python: 2.7\n+python:\n+  - 2.7\n+  - 3.6\n cache:\n   pip: true\n   directories:\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-07-20T13:10:49+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.rest/commit/8f5c6c9abe33dc2abb28bb97322d96663434c2f9

exclude python3.6, Plone &lt; 5.1

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex 57e0f56..50691d6 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -10,6 +10,12 @@ env:\n   - PLONE_VERSION=4.3.x\n   - PLONE_VERSION=5.0.x\n   - PLONE_VERSION=5.1.x\n+matrix:\n+  exclude:\n+    - python: 3.6\n+      env: PLONE_VERSION=4.3.x\n+    - python: 3.6\n+      env: PLONE_VERSION=5.0.x\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - virtualenv .\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T02:44:41Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/da1ce263bc2e616a1d66bcc087724729fd02c46f

Update classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex f45f24c..9f6a893 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,11 +26,14 @@ def read(*rnames):\n           "Framework :: Plone :: 4.3",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "Framework :: Zope2",\n           "License :: OSI Approved :: GNU General Public License (GPL)",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n       ],\n       keywords=\'\',\n       author=\'Plone Foundation\',\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T02:44:41Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/e7d0a90d555a96687381f4e973c777efa4fe7641

Update CHANGES.rst

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cdb76b6..44395d7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 1.1.2 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+- Prepare for Python 2 / 3 compatibility\n+  [tschorr,pbauer,frapell]\n \n \n 1.1.1 (2018-06-22)\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T02:44:41Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5

If request is a WSGIRequest, do not check the exception when rendering

Files changed:
M src/plone/rest/errors.py

b"diff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 6839d15..846b90f 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -3,6 +3,7 @@\n from Products.CMFCore.permissions import ManagePortal\n from Products.Five.browser import BrowserView\n from zExceptions import NotFound\n+from ZPublisher.HTTPRequest import WSGIRequest\n from zope.component import adapter\n from zope.component.hooks import getSite\n \n@@ -55,8 +56,12 @@ def render_exception(self, exception):\n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            return (u'ERROR: Another exception happened before we could '\n-                    u'render the traceback.')\n+            if not isinstance(self.request, WSGIRequest):\n+                # XXX: Only check if exceptions are the same, when this is not a WSGIRequest\n+                # since WSGIPublisher normalizes the exceptions.\n+                # https://github.com/plone/Products.CMFPlone/issues/2474\n+                return (u'ERROR: Another exception happened before we could '\n+                        u'render the traceback.')\n \n         raw = '\\n'.join(traceback.format_tb(exc_traceback))\n         return raw.strip().split('\\n')\n"

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T02:44:41Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/7788ba2ad8c7001c018f73cf205f6384ba9a60e9

Fix test

Files changed:
M src/plone/rest/tests/test_error_handling.py

b'diff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex 67088b5..ed3dc8d 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -118,4 +118,4 @@ def test_500_traceback_only_for_manager_users(self):\n         self.assertIsInstance(traceback, list)\n         self.assertRegexpMatches(\n             traceback[0],\n-            r\'^File "[^"]*", line \\d*, in publish\')\n+            r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-02T23:53:29-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/6861367f0e65d06c45b8ff724913281166625a60

Merge branch 'master' into python3

Files changed:
A src/plone/rest/tests/test_redirects.py
M CHANGES.rst
M Makefile
M README.rst
M buildout.cfg
M plone-4.3.x.cfg
M plone-5.1.x.cfg
M requirements.txt
M setup.py
M src/plone/rest/errors.py
M src/plone/rest/patches.py
M src/plone/rest/patches.zcml
M src/plone/rest/tests/test_dispatching.py
M src/plone/rest/traverse.py
M versions.cfg

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 44395d7..0630bac 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,22 +1,46 @@\n Changelog\n =========\n \n-1.1.2 (unreleased)\n+1.3.1 (unreleased)\n ------------------\n \n - Prepare for Python 2 / 3 compatibility\n   [tschorr,pbauer,frapell]\n \n \n+1.3.0 (2018-09-11)\n+------------------\n+\n+New features:\n+\n+- Remove unnecessary dependency on Products.CMFPlone.\n+  Import ISiteRoot from Products.CMFCore.interfaces instead of\n+  IPloneSiteRoot from Products.CMFPlone.interfaces.siteroot.\n+  [jordic]\n+\n+\n+1.2.0 (2018-06-29)\n+------------------\n+\n+New features:\n+\n+- Add support for redirects from plone.app.redirector.\n+  [lgraf]\n+\n+\n 1.1.1 (2018-06-22)\n ------------------\n \n+Bugfixes:\n+\n - Re-release 1.1.0.\n \n \n 1.1.0 (2018-06-22)\n ------------------\n \n+New features:\n+\n - Get rid of Products.Five.metaclass dependency for Zope 4 compatibility.\n   [timo]\n \n@@ -24,6 +48,8 @@ Changelog\n 1.0.0 (2018-01-17)\n ------------------\n \n+New features:\n+\n - Add support for Plone 5.1.\n   [timo]\n \ndiff --git a/Makefile b/Makefile\nindex bc23304..d178a09 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -9,7 +9,8 @@ all: .installed.cfg\n \tbin/buildout\n \n bin/buildout: bin/pip\n-\tbin/pip install --upgrade pip setuptools zc.buildout\n+\tbin/pip install --upgrade pip\n+\tbin/pip install -r requirements.txt\n \t@touch -c $@\n \n bin/python bin/pip:\ndiff --git a/README.rst b/README.rst\nindex 3af2a40..31a79a6 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,21 +1,22 @@\n .. image:: https://secure.travis-ci.org/plone/plone.rest.png?branch=master\n   :target: http://travis-ci.org/plone/plone.rest\n \n-.. image:: https://coveralls.io/repos/plone/plone.rest/badge.png?branch=master\n-  :target: https://coveralls.io/r/plone/plone.rest\n+.. image:: https://img.shields.io/coveralls/github/plone/plone.rest.svg\n+   :alt: Coveralls github\n+   :target: https://coveralls.io/github/plone/plone.restapi\n \n-.. image:: https://landscape.io/github/plone/plone.rest/master/landscape.svg?style=plastic\n+.. image:: https://landscape.io/github/plone/plone.rest/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/plone/plone.rest/master\n   :alt: Code Health\n \n-.. image:: https://img.shields.io/pypi/v/plone.rest.svg\n-    :target: https://pypi.python.org/pypi/plone.rest/\n-    :alt: Latest Version\n-\n .. image:: https://img.shields.io/pypi/status/plone.rest.svg\n     :target: https://pypi.python.org/pypi/plone.rest/\n     :alt: Egg Status\n \n+.. image:: https://img.shields.io/pypi/v/plone.rest.svg\n+    :target: https://pypi.python.org/pypi/plone.rest/\n+    :alt: Latest Version\n+\n .. image:: https://img.shields.io/pypi/l/plone.rest.svg\n     :target: https://pypi.python.org/pypi/plone.rest/\n     :alt: License\n@@ -287,6 +288,30 @@ Install plone.rest by adding it to your buildout::\n and then running "bin/buildout"\n \n \n+Redirects\n+---------\n+\n+plone.rest will handle redirects created by ``plone.app.redirector`` pretty\n+much the same way as regular Plone.\n+\n+If a redirect exists for a given URL, a ``GET`` request will be answered with\n+``301``, and the new location for the resource is indicated in the ``Location``\n+header::\n+\n+  HTTP/1.1 301 Moved Permanently\n+\n+  Content-Type: application/json\n+  Location: http://localhost:8080/Plone/my-folder-new-location\n+\n+Any other request method than GET (``POST``, ``PATCH``, ...) will be answered\n+with ``308 Permanent Redirect``. This status code instructs the client that\n+it should NOT switch the method, but retry (if desired) the request with the\n+*same* method at the new location.\n+\n+In practice, both the Python ``requests`` library a well as Postman seem to\n+honour this behavior by default.\n+\n+\n Contribute\n ----------\n \ndiff --git a/buildout.cfg b/buildout.cfg\nindex dcdf17f..77f0908 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,3 +1,3 @@\n [buildout]\n-extends = plone-4.3.x.cfg\n+extends = plone-5.1.x.cfg\n \ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex c7dbf8e..8520d1f 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/4.3.15/versions.cfg\n+    http://dist.plone.org/release/4.3.18/versions.cfg\n     versions.cfg\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 5f22849..9d7b63d 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,9 +1,9 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1rc2/versions.cfg\n+    http://dist.plone.org/release/5.1.2/versions.cfg\n     versions.cfg\n \n [versions]\n plone.namedfile = 4.2.3\n-plone.app.event = 3.0.6\n\\ No newline at end of file\n+plone.app.event = 3.0.6\ndiff --git a/requirements.txt b/requirements.txt\nindex 8da6ac9..ffa9008 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,3 +1,3 @@\n # https://github.com/plone/buildout.coredev/blob/5.1/requirements.txt\n-setuptools==38.5.1\n-zc.buildout==2.11.4\n+setuptools==39.1.0\n+zc.buildout==2.11.5\ndiff --git a/setup.py b/setup.py\nindex 9f6a893..dbaa379 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n-version = \'1.1.2.dev0\'\n+version = \'1.3.1-dev.0\'\n \n long_description = (\n     read(\'README.rst\') + \'\\n\\n\' +\n@@ -18,7 +18,7 @@ def read(*rnames):\n       description="Plone support for HTTP verbs.",\n       long_description=long_description,\n       # Get more strings from\n-      # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n+      # https://pypi.org/classifiers/\n       classifiers=[\n           "Development Status :: 5 - Production/Stable",\n           "Environment :: Web Environment",\n@@ -38,7 +38,7 @@ def read(*rnames):\n       keywords=\'\',\n       author=\'Plone Foundation\',\n       author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'http://pypi.python.org/pypi/plone.rest\',\n+      url=\'https://pypi.org/project/plone.rest\',\n       license=\'GPL version 2\',\n       packages=find_packages(\'src\'),\n       package_dir={\'\': \'src\'},\n@@ -50,6 +50,7 @@ def read(*rnames):\n               \'plone.app.testing[robot]>=4.2.2\',\n               \'plone.app.robotframework\',\n               \'plone.dexterity\',\n+              \'Products.CMFPlone\',\n               \'requests\',\n           ]\n       ),\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 846b90f..98efdc0 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -1,10 +1,16 @@\n from AccessControl import getSecurityManager\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.memoize.instance import memoize\n from plone.rest.interfaces import IAPIRequest\n from Products.CMFCore.permissions import ManagePortal\n from Products.Five.browser import BrowserView\n+from six.moves import urllib\n+from six.moves.urllib.parse import quote\n+from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n from ZPublisher.HTTPRequest import WSGIRequest\n from zope.component import adapter\n+from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n import json\n@@ -15,6 +21,9 @@\n \n @adapter(Exception, IAPIRequest)\n class ErrorHandling(BrowserView):\n+    """This view is responsible for serializing unhandled exceptions, as well\n+    as handling 404 Not Found errors and redirects.\n+    """\n \n     def __call__(self):\n         exception = self.context\n@@ -43,6 +52,12 @@ def render_exception(self, exception):\n         result = {u\'type\': name, u\'message\': message}\n \n         if isinstance(exception, NotFound):\n+            # First check if a redirect from p.a.redirector exists\n+            redirect_performed = self.attempt_redirect()\n+            if redirect_performed:\n+                self.request.response.setBody(\'\', lock=1)\n+                return\n+\n             # NotFound exceptions need special handling because their\n             # exception message gets turned into HTML by ZPublisher\n             url = self.request.getURL()\n@@ -65,3 +80,135 @@ def render_traceback(self, exception):\n \n         raw = \'\\n\'.join(traceback.format_tb(exc_traceback))\n         return raw.strip().split(\'\\n\')\n+\n+    def find_redirect_if_view_or_service(self, old_path_elements, storage):\n+        """Find redirect for URLs like:\n+        - http://example.com/object/namedservice/param\n+        - http://example.com/object/@@view/param\n+        - http://example.com/object/template\n+\n+        This combines the functionality of the find_redirect_if_view() and\n+        find_redirect_if_template() methods of the original FourOhFourView into\n+        one, and also makes it support named services.\n+\n+        For this to also work for named services we use a different strategy\n+        here: Based on old_path_elements, try to find the longest stored\n+        redirect (if any), and consider the remaining path parts the remainder\n+        (view, template, named services plus possible params) that will need\n+        to be appended to the new object path.\n+        """\n+        if len(old_path_elements) <= 1:\n+            return None\n+\n+        # Parts to the left of the split point are considered a potential\n+        # object path, while the right part is the remainder. Starting from\n+        # the right (longest potential obj path), we keep moving the split\n+        # point to the left and look for shorter matches.\n+        #\n+        # Once we reach the point where the obj path is separated from the\n+        # remainder, we should get a match if there\'s a stored redirect.\n+        #\n+        # [\'\', \'Plone\', \'folder\', \'item\', \'@@view\', \'param\']\n+        #                                ^\n+        splitpoint = len(old_path_elements)\n+\n+        while splitpoint > 1:\n+            possible_obj_path = \'/\'.join(old_path_elements[:splitpoint])\n+            remainder = old_path_elements[splitpoint:]\n+            new_path = storage.get(possible_obj_path)\n+\n+            if new_path:\n+                if new_path == possible_obj_path:\n+                    # New URL would match originally requested URL.\n+                    # Lets not cause a redirect loop.\n+                    return None\n+                return new_path + \'/\' + \'/\'.join(remainder)\n+\n+            splitpoint -= 1\n+\n+        return None\n+\n+    def attempt_redirect(self):\n+        """Check if a redirect is needed, and perform it if necessary.\n+\n+        Returns True if a redirect has been performed, False otherwise.\n+\n+        This method is based on FourOhFourView.attempt_redirect() from\n+        p.a.redirector. It\'s copied here because we want to answer redirects\n+        to non-GET methods with status 308, but since this method locks the\n+        response status, we wouldn\'t be able to change it afterwards.\n+        """\n+        url = self._url()\n+        if not url:\n+            return False\n+\n+        try:\n+            old_path_elements = self.request.physicalPathFromURL(url)\n+        except ValueError:  # pragma: no cover\n+            return False    # pragma: no cover\n+\n+        storage = queryUtility(IRedirectionStorage)\n+        if storage is None:\n+            return False\n+\n+        old_path = \'/\'.join(old_path_elements)\n+\n+        # First lets try with query string in cases or content migration\n+\n+        new_path = None\n+\n+        query_string = self.request.QUERY_STRING\n+        if query_string:\n+            new_path = storage.get("%s?%s" % (old_path, query_string))\n+            # if we matched on the query_string we don\'t want to include it\n+            # in redirect\n+            if new_path:\n+                query_string = \'\'\n+\n+        if not new_path:\n+            new_path = storage.get(old_path)\n+\n+        # Attempt our own strategy at finding redirects for named REST\n+        # services, views or templates.\n+        if not new_path:\n+            new_path = self.find_redirect_if_view_or_service(\n+                old_path_elements, storage)\n+\n+        if not new_path:\n+            return False\n+\n+        url = urllib.parse.urlsplit(new_path)\n+        if url.netloc:\n+            # External URL\n+            # avoid double quoting\n+            url_path = unquote(url.path)\n+            url_path = quote(url_path)\n+            url = urllib.parse.SplitResult(\n+                *(url[:2] + (url_path, ) + url[3:])).geturl()\n+        else:\n+            url = self.request.physicalPathToURL(new_path)\n+\n+        # some analytics programs might use this info to track\n+        if query_string:\n+            url += "?" + query_string\n+\n+        # Answer GET requests with 301. Every other method will be answered\n+        # with 308 Permanent Redirect, which instructs the client to NOT\n+        # switch the method (if the original request was a POST, it should\n+        # re-POST to the new URL from the Location header).\n+        if self.request.method.upper() == \'GET\':\n+            status = 301\n+        else:\n+            status = 308\n+\n+        self.request.response.redirect(url, status=status, lock=1)\n+        return True\n+\n+    @memoize\n+    def _url(self):\n+        """Get the current, canonical URL\n+        """\n+        return self.request.get(\'ACTUAL_URL\',\n+            self.request.get(\'VIRTUAL_URL\',  # noqa\n+                   self.request.get(\'URL\',   # noqa\n+                     None)))                 # noqa\ndiff --git a/src/plone/rest/patches.py b/src/plone/rest/patches.py\nindex c5aedeb..f4cb2e9 100644\n--- a/src/plone/rest/patches.py\n+++ b/src/plone/rest/patches.py\n@@ -13,3 +13,30 @@ def __before_publishing_traverse__(self, arg1, arg2=None):\n         return\n \n     return self._old___before_publishing_traverse__(arg1, arg2)\n+\n+\n+PERMANENT_REDIRECT = {308: \'Permanent Redirect\'}\n+\n+\n+def patch_zpublisher_status_codes(scope, unused_original, unused_replacement):\n+    """Add \'308 Permanent Redirect\' to the list of status codes the ZPublisher\n+    knows about. Otherwise setStatus() will turn it into a 500.\n+\n+    This is needed for up to and including Plone 5.1.\n+    """\n+    status_reasons = getattr(scope, \'status_reasons\', {})\n+    if 308 in status_reasons:\n+        # Already present in zExceptions >= 3.2 / Zope >= 4.0a1 / Plone 5.2\n+        return\n+\n+    # Patch the forward mapping (code -> reason)\n+    status_reasons.update(PERMANENT_REDIRECT)\n+\n+    # Update the reverse mapping\n+    status_codes = getattr(scope, \'status_codes\', {})\n+    key, val = PERMANENT_REDIRECT.items()[0]\n+\n+    status_codes[\'\'.join(val.split(\' \')).lower()] = key\n+    status_codes[val.lower()] = key\n+    status_codes[key] = key\n+    status_codes[str(key)] = key\ndiff --git a/src/plone/rest/patches.zcml b/src/plone/rest/patches.zcml\nindex 54aa24c..a0245bf 100644\n--- a/src/plone/rest/patches.zcml\n+++ b/src/plone/rest/patches.zcml\n@@ -13,4 +13,14 @@\n     preserveOriginal="true"\n     />\n \n+  <monkey:patch\n+    description="Teach ZPublisher about status 308"\n+    module="ZPublisher.HTTPResponse"\n+    original="status_codes"\n+    replacement=".patches.PERMANENT_REDIRECT"\n+    handler=".patches.patch_zpublisher_status_codes"\n+    preconditions="Zope2-=4.0a1"\n+    ignoreOriginal="True"\n+    />\n+\n </configure>\ndiff --git a/src/plone/rest/tests/test_dispatching.py b/src/plone/rest/tests/test_dispatching.py\nindex ca83c65..171ed72 100644\n--- a/src/plone/rest/tests/test_dispatching.py\n+++ b/src/plone/rest/tests/test_dispatching.py\n@@ -27,7 +27,7 @@ def setUp(self):\n         self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n-    def validate(self, expectations):\n+    def validate(self, expectations, follow_redirects=False):\n         failures = []\n         for expectation in expectations:\n             path, method, creds, expected_status = expectation\n@@ -37,10 +37,12 @@ def validate(self, expectations):\n                 method, url,\n                 headers={\'Accept\': \'application/json\'},\n                 auth=creds,\n+                allow_redirects=follow_redirects,\n             )\n \n             if response.status_code != expected_status:\n-                request_args = (path, method, creds)\n+                request_args = (path, method, creds,\n+                                \'(follow_redirects=%s)\' % follow_redirects)\n                 actual_status = response.status_code\n                 failure = (request_args, expected_status, actual_status)\n                 failures.append(failure)\n@@ -207,3 +209,152 @@ def test_public_dx_folder_invalid_creds(self):\n             (\'/public\', \'OPTIONS\', INVALID_CREDS, 200),\n         ]\n         self.validate(expectations)\n+\n+\n+class TestDispatchingRedirects(DispatchingTestCase):\n+\n+    def setUp(self):\n+        super(TestDispatchingRedirects, self).setUp()\n+\n+        self.portal.invokeFactory(\'Folder\', id=\'private-old\')\n+        self.portal.manage_renameObject(\'private-old\', \'private-new\')\n+\n+        self.portal.invokeFactory(\'Folder\', id=\'public-old\')\n+        public_folder = self.portal[\'public-old\']\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(public_folder, "publish")\n+        self.portal.manage_renameObject(\'public-old\', \'public-new\')\n+\n+        transaction.commit()\n+\n+    def test_moved_private_dx_folder_with_creds(self):\n+        expectations = [\n+            (\'/private-old\', \'GET\', CREDS, 301),\n+            (\'/private-old\', \'POST\', CREDS, 308),\n+            (\'/private-old\', \'PUT\', CREDS, 308),\n+            (\'/private-old\', \'PATCH\', CREDS, 308),\n+            (\'/private-old\', \'DELETE\', CREDS, 308),\n+            (\'/private-old\', \'OPTIONS\', CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/private-old\', \'GET\', CREDS, 200),\n+            (\'/private-old\', \'POST\', CREDS, 200),\n+            (\'/private-old\', \'PUT\', CREDS, 200),\n+            (\'/private-old\', \'PATCH\', CREDS, 200),\n+            (\'/private-old\', \'DELETE\', CREDS, 200),\n+            (\'/private-old\', \'OPTIONS\', CREDS, 200),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\n+\n+    def test_moved_private_dx_folder_without_creds(self):\n+        expectations = [\n+            (\'/private-old\', \'GET\', NO_CREDS, 301),\n+            (\'/private-old\', \'POST\', NO_CREDS, 308),\n+            (\'/private-old\', \'PUT\', NO_CREDS, 308),\n+            (\'/private-old\', \'PATCH\', NO_CREDS, 308),\n+            (\'/private-old\', \'DELETE\', NO_CREDS, 308),\n+            (\'/private-old\', \'OPTIONS\', NO_CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/private-old\', \'GET\', NO_CREDS, 401),\n+            (\'/private-old\', \'POST\', NO_CREDS, 401),\n+            (\'/private-old\', \'PUT\', NO_CREDS, 401),\n+            (\'/private-old\', \'PATCH\', NO_CREDS, 401),\n+            (\'/private-old\', \'DELETE\', NO_CREDS, 401),\n+            (\'/private-old\', \'OPTIONS\', NO_CREDS, 401),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\n+\n+    def test_moved_private_dx_folder_invalid_creds(self):\n+        expectations = [\n+            (\'/private-old\', \'GET\', INVALID_CREDS, 301),\n+            (\'/private-old\', \'POST\', INVALID_CREDS, 308),\n+            (\'/private-old\', \'PUT\', INVALID_CREDS, 308),\n+            (\'/private-old\', \'PATCH\', INVALID_CREDS, 308),\n+            (\'/private-old\', \'DELETE\', INVALID_CREDS, 308),\n+            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/private-old\', \'GET\', INVALID_CREDS, 401),\n+            (\'/private-old\', \'POST\', INVALID_CREDS, 401),\n+            (\'/private-old\', \'PUT\', INVALID_CREDS, 401),\n+            (\'/private-old\', \'PATCH\', INVALID_CREDS, 401),\n+            (\'/private-old\', \'DELETE\', INVALID_CREDS, 401),\n+            (\'/private-old\', \'OPTIONS\', INVALID_CREDS, 401),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\n+\n+    def test_moved_public_dx_folder_with_creds(self):\n+        expectations = [\n+            (\'/public-old\', \'GET\', CREDS, 301),\n+            (\'/public-old\', \'POST\', CREDS, 308),\n+            (\'/public-old\', \'PUT\', CREDS, 308),\n+            (\'/public-old\', \'PATCH\', CREDS, 308),\n+            (\'/public-old\', \'DELETE\', CREDS, 308),\n+            (\'/public-old\', \'OPTIONS\', CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/public-old\', \'GET\', CREDS, 200),\n+            (\'/public-old\', \'POST\', CREDS, 200),\n+            (\'/public-old\', \'PUT\', CREDS, 200),\n+            (\'/public-old\', \'PATCH\', CREDS, 200),\n+            (\'/public-old\', \'DELETE\', CREDS, 200),\n+            (\'/public-old\', \'OPTIONS\', CREDS, 200),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\n+\n+    def test_moved_public_dx_folder_without_creds(self):\n+        expectations = [\n+            (\'/public-old\', \'GET\', NO_CREDS, 301),\n+            (\'/public-old\', \'POST\', NO_CREDS, 308),\n+            (\'/public-old\', \'PUT\', NO_CREDS, 308),\n+            (\'/public-old\', \'PATCH\', NO_CREDS, 308),\n+            (\'/public-old\', \'DELETE\', NO_CREDS, 308),\n+            (\'/public-old\', \'OPTIONS\', NO_CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/public-old\', \'GET\', NO_CREDS, 200),\n+            (\'/public-old\', \'POST\', NO_CREDS, 401),\n+            (\'/public-old\', \'PUT\', NO_CREDS, 401),\n+            (\'/public-old\', \'PATCH\', NO_CREDS, 401),\n+            (\'/public-old\', \'DELETE\', NO_CREDS, 401),\n+            (\'/public-old\', \'OPTIONS\', NO_CREDS, 200),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\n+\n+    def test_moved_public_dx_folder_invalid_creds(self):\n+        expectations = [\n+            (\'/public-old\', \'GET\', INVALID_CREDS, 301),\n+            (\'/public-old\', \'POST\', INVALID_CREDS, 308),\n+            (\'/public-old\', \'PUT\', INVALID_CREDS, 308),\n+            (\'/public-old\', \'PATCH\', INVALID_CREDS, 308),\n+            (\'/public-old\', \'DELETE\', INVALID_CREDS, 308),\n+            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 308),\n+        ]\n+        self.validate(expectations)\n+\n+        # Same, but with following redirects, asserting on the final status\n+        expectations = [\n+            (\'/public-old\', \'GET\', INVALID_CREDS, 200),\n+            (\'/public-old\', \'POST\', INVALID_CREDS, 401),\n+            (\'/public-old\', \'PUT\', INVALID_CREDS, 401),\n+            (\'/public-old\', \'PATCH\', INVALID_CREDS, 401),\n+            (\'/public-old\', \'DELETE\', INVALID_CREDS, 401),\n+            (\'/public-old\', \'OPTIONS\', INVALID_CREDS, 200),\n+        ]\n+        self.validate(expectations, follow_redirects=True)\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nnew file mode 100644\nindex 0000000..ca5daa3\n--- /dev/null\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -0,0 +1,177 @@\n+# -*- coding: utf-8 -*-\n+from BTrees.OOBTree import OOSet\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.rest.errors import ErrorHandling\n+from plone.rest.testing import PLONE_REST_FUNCTIONAL_TESTING\n+from zope.component import queryUtility\n+\n+import requests\n+import transaction\n+import unittest\n+\n+\n+class TestRedirects(unittest.TestCase):\n+\n+    layer = PLONE_REST_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+        self.portal.invokeFactory(\'Folder\', id=\'folder-old\')\n+        self.portal.manage_renameObject(\'folder-old\', \'folder-new\')\n+        transaction.commit()\n+\n+    def test_get_to_moved_item_causes_301_redirect(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_post_to_moved_item_causes_308_redirect(self):\n+        response = requests.post(\n+            self.portal_url + \'/folder-old\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(308, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_unauthorized_request_to_item_still_redirects_first(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old\',\n+            headers={\'Accept\': \'application/json\'},\n+            # No auth\n+            allow_redirects=False,\n+        )\n+\n+        # A request to the old URL of an item where the user doesn\'t have\n+        # necessary permissions will still result in a redirect\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+        # Following the redirect then leads to an item that will produce a 401\n+        response = requests.get(\n+            response.headers[\'Location\'],\n+            headers={\'Accept\': \'application/json\'},\n+            # No auth\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(401, response.status_code)\n+\n+    def test_query_string_gets_preserved(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old?key=value\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new?key=value\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_named_service_on_moved_item_causes_301_redirect(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old/namedservice\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new/namedservice\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_named_service_plus_path_parameter_works(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old/namedservice/param\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new/namedservice/param\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_redirects_for_regular_views_still_work(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old/@@some-view\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new/@@some-view\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_redirects_for_views_plus_params_plus_querystring_works(self):\n+        response = requests.get(\n+            self.portal_url + \'/folder-old/@@some-view/param?k=v\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/folder-new/@@some-view/param?k=v\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n+        storage = queryUtility(IRedirectionStorage)\n+        storage._paths[\'/plone/same\'] = \'/plone/same\'\n+        storage._rpaths[\'/plone/same\'] = OOSet([\'/plone/same\'])\n+        transaction.commit()\n+\n+        response = requests.get(\n+            self.portal_url + \'/same/@@view\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(404, response.status_code)\n+\n+    def test_handles_redirects_that_include_querystring_in_old_path(self):\n+        storage = queryUtility(IRedirectionStorage)\n+        storage.add(\'/plone/some-item?key=value\', \'/plone/new-item\')\n+        transaction.commit()\n+\n+        response = requests.get(\n+            self.portal_url + \'/some-item?key=value\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            allow_redirects=False,\n+        )\n+        self.assertEqual(301, response.status_code)\n+        self.assertEqual(self.portal_url + \'/new-item\',\n+                         response.headers[\'Location\'])\n+        self.assertEqual(u\'\', response.text)\n+\n+    def test_aborts_redirect_checks_early_for_app_root(self):\n+        error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n+        self.assertIsNone(\n+            error_view.find_redirect_if_view_or_service([\'\'], None))\n+\n+    def test_gracefully_deals_with_missing_request_url(self):\n+        error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n+        self.portal.REQUEST[\'ACTUAL_URL\'] = None\n+        self.assertEquals(False, error_view.attempt_redirect())\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex b94f324..74334ee 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n from plone.rest.interfaces import IAPIRequest\n@@ -9,6 +8,7 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from Products.CMFCore.interfaces import IContentish\n+from Products.CMFCore.interfaces import ISiteRoot\n \n \n @adapter(IPloneSiteRoot, IAPIRequest)\ndiff --git a/versions.cfg b/versions.cfg\nindex 6999d86..ab68f4c 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -1,10 +1,13 @@\n [versions]\n+# setuptools / buildout\n setuptools =\n zc.buildout =\n-zc.recipe.egg =\n+zc.recipe.egg = 2.0.3\n+\n six = 1.10.0\n httpie = 0.9.4\n-# https://github.com/plone/plone.recipe.zope2instance/issues/37\n+\n+# Fix https://github.com/plone/plone.recipe.zope2instance/issues/37\n plone.recipe.zope2instance = 4.4.0\n \n # Release\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T03:40:44Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/3376cc855e3be4ffab9c44746a1982cbc079ff0a

Do not print error if on Python 3

Files changed:
M src/plone/rest/errors.py

b'diff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 98efdc0..820690e 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -8,7 +8,6 @@\n from six.moves.urllib.parse import quote\n from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n-from ZPublisher.HTTPRequest import WSGIRequest\n from zope.component import adapter\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n@@ -19,6 +18,9 @@\n import traceback\n \n \n+PY3 = sys.version_info[0] == 3\n+\n+\n @adapter(Exception, IAPIRequest)\n class ErrorHandling(BrowserView):\n     """This view is responsible for serializing unhandled exceptions, as well\n@@ -71,10 +73,10 @@ def render_exception(self, exception):\n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            if not isinstance(self.request, WSGIRequest):\n-                # XXX: Only check if exceptions are the same, when this is not a WSGIRequest\n-                # since WSGIPublisher normalizes the exceptions.\n+            if not PY3:\n+                # XXX: Only display this warning if not in Python 3.\n                 # https://github.com/plone/Products.CMFPlone/issues/2474\n+                # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n                 return (u\'ERROR: Another exception happened before we could \'\n                         u\'render the traceback.\')\n \n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T03:41:03Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/3636448134b52eb90e0ec9963d5785170cca31b1

Bad merge

Files changed:
M src/plone/rest/traverse.py

b'diff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 74334ee..b94f324 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n from plone.rest.interfaces import IAPIRequest\n@@ -8,7 +9,6 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFCore.interfaces import ISiteRoot\n \n \n @adapter(IPloneSiteRoot, IAPIRequest)\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T03:41:29Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/396d16a01a388b26f26bc505f4807d22c9956c30

Fix tests

Files changed:
M src/plone/rest/tests/test_redirects.py

b"diff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex ca5daa3..16f049d 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -38,7 +38,7 @@ def test_get_to_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n@@ -50,7 +50,7 @@ def test_post_to_moved_item_causes_308_redirect(self):\n         self.assertEqual(308, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n@@ -65,7 +65,7 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n         # Following the redirect then leads to an item that will produce a 401\n         response = requests.get(\n@@ -86,7 +86,7 @@ def test_query_string_gets_preserved(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new?key=value',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_named_service_on_moved_item_causes_301_redirect(self):\n         response = requests.get(\n@@ -98,7 +98,7 @@ def test_named_service_on_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/namedservice',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_named_service_plus_path_parameter_works(self):\n         response = requests.get(\n@@ -110,7 +110,7 @@ def test_named_service_plus_path_parameter_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/namedservice/param',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_redirects_for_regular_views_still_work(self):\n         response = requests.get(\n@@ -122,7 +122,7 @@ def test_redirects_for_regular_views_still_work(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/@@some-view',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         response = requests.get(\n@@ -134,7 +134,7 @@ def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/@@some-view/param?k=v',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n         storage = queryUtility(IRedirectionStorage)\n@@ -164,7 +164,7 @@ def test_handles_redirects_that_include_querystring_in_old_path(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/new-item',\n                          response.headers['Location'])\n-        self.assertEqual(u'', response.text)\n+        self.assertEqual('null', response.text)\n \n     def test_aborts_redirect_checks_early_for_app_root(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n"

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T03:46:10Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/587b3a640b96f7e453c174a179fe1ebc9b7d84d1

Fix deprecation warnings and good practices

Files changed:
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_error_handling.py
M src/plone/rest/tests/test_redirects.py
M src/plone/rest/tests/test_traversal.py

b'diff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex bb8e8b8..a31a730 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -116,11 +116,13 @@ def test_dexterity_news_item_get(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        fd = open(image_file, \'rb\')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'rb\').read(),\n+            data=fd.read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n+        fd.close()\n         self.portal.newsitem.image_caption = u\'This is an image caption.\'\n         import transaction\n         transaction.commit()\n@@ -176,11 +178,13 @@ def test_dexterity_file_get(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        fd = open(pdf_file, \'rb\')\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'rb\').read(),\n+            data=fd.read(),\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n+        fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n@@ -202,11 +206,13 @@ def test_dexterity_image_get(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        fd = open(image_file, \'rb\')\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'rb\').read(),\n+            data=fd.read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n+        fd.close()\n         import transaction\n         transaction.commit()\n \ndiff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex ed3dc8d..2389dc7 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -116,6 +116,6 @@ def test_500_traceback_only_for_manager_users(self):\n \n         traceback = response.json()[u\'traceback\']\n         self.assertIsInstance(traceback, list)\n-        self.assertRegexpMatches(\n+        self.assertRegex(\n             traceback[0],\n             r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex 16f049d..ab9793c 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -174,4 +174,4 @@ def test_aborts_redirect_checks_early_for_app_root(self):\n     def test_gracefully_deals_with_missing_request_url(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n         self.portal.REQUEST[\'ACTUAL_URL\'] = None\n-        self.assertEquals(False, error_view.attempt_redirect())\n+        self.assertEqual(False, error_view.attempt_redirect())\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 80a97db..8f75971 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -61,18 +61,18 @@ def test_json_request_on_content_object_returns_service(self):\n \n     def test_html_request_on_portal_root_returns_default_view(self):\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'listing_view\', obj.__name__)\n+        self.assertEqual(\'listing_view\', obj.__name__)\n \n     def test_html_request_on_portal_root_returns_dynamic_view(self):\n         self.portal.setLayout(\'summary_view\')\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'summary_view\', obj.__name__)\n+        self.assertEqual(\'summary_view\', obj.__name__)\n \n     def test_html_request_on_portal_root_returns_default_page(self):\n         self.portal.invokeFactory(\'Document\', id=\'doc1\')\n         self.portal.setDefaultPage(\'doc1\')\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEquals(\'document_view\', obj.__name__)\n+        self.assertEqual(\'document_view\', obj.__name__)\n \n     def test_json_request_on_object_with_multihook(self):\n         doc1 = self.portal[self.portal.invokeFactory(\'Document\', id=\'doc1\')]\n@@ -86,7 +86,7 @@ def btr_test(container, request):\n \n         obj = self.traverse(path=\'/plone/doc1\')\n         self.assertTrue(isinstance(obj, Service), \'Not a service\')\n-        self.assertEquals(1, self.request._btr_test_called)\n+        self.assertEqual(1, self.request._btr_test_called)\n \n     def test_json_request_on_existing_view_returns_named_service(self):\n         obj = self.traverse(\'/plone/search\')\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T15:34:24Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/9f898701dd7dfcbd98245550d56cccd213c84d9b

Do not return an error when exceptions differ, if on a WSGIRequest

Files changed:
M src/plone/rest/errors.py

b'diff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 820690e..916da7d 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -8,6 +8,11 @@\n from six.moves.urllib.parse import quote\n from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n+try:\n+    from ZPublisher.HTTPRequest import WSGIRequest\n+    HAS_WSGI = True\n+except:\n+    HAS_WSGI = False\n from zope.component import adapter\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n@@ -18,9 +23,6 @@\n import traceback\n \n \n-PY3 = sys.version_info[0] == 3\n-\n-\n @adapter(Exception, IAPIRequest)\n class ErrorHandling(BrowserView):\n     """This view is responsible for serializing unhandled exceptions, as well\n@@ -73,10 +75,13 @@ def render_exception(self, exception):\n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            if not PY3:\n-                # XXX: Only display this warning if not in Python 3.\n+            if HAS_WSGI and isinstance(self.request, WSGIRequest) and str(exception) == str(exc_obj):\n+                # WSGIRequest may "upgrade" the exception, resulting in a new exception\n+                # which has the same string representation as the original exception.\n                 # https://github.com/plone/Products.CMFPlone/issues/2474\n                 # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n+                pass\n+            else:\n                 return (u\'ERROR: Another exception happened before we could \'\n                         u\'render the traceback.\')\n \n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T16:11:41Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/28aeeebe1cc742da6b30ce1588c983f9cc8b3ff3

Revert "Fix deprecation warnings and good practices"

This reverts commit 587b3a640b96f7e453c174a179fe1ebc9b7d84d1.

Files changed:
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_error_handling.py
M src/plone/rest/tests/test_redirects.py
M src/plone/rest/tests/test_traversal.py

b'diff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex a31a730..bb8e8b8 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -116,13 +116,11 @@ def test_dexterity_news_item_get(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=fd.read(),\n+            data=open(image_file, \'rb\').read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n-        fd.close()\n         self.portal.newsitem.image_caption = u\'This is an image caption.\'\n         import transaction\n         transaction.commit()\n@@ -178,13 +176,11 @@ def test_dexterity_file_get(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n-        fd = open(pdf_file, \'rb\')\n         self.portal.file.file = NamedBlobFile(\n-            data=fd.read(),\n+            data=open(pdf_file, \'rb\').read(),\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n-        fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n@@ -206,13 +202,11 @@ def test_dexterity_image_get(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n-        fd = open(image_file, \'rb\')\n         self.portal.image.image = NamedBlobImage(\n-            data=fd.read(),\n+            data=open(image_file, \'rb\').read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n-        fd.close()\n         import transaction\n         transaction.commit()\n \ndiff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex 2389dc7..ed3dc8d 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -116,6 +116,6 @@ def test_500_traceback_only_for_manager_users(self):\n \n         traceback = response.json()[u\'traceback\']\n         self.assertIsInstance(traceback, list)\n-        self.assertRegex(\n+        self.assertRegexpMatches(\n             traceback[0],\n             r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex ab9793c..16f049d 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -174,4 +174,4 @@ def test_aborts_redirect_checks_early_for_app_root(self):\n     def test_gracefully_deals_with_missing_request_url(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n         self.portal.REQUEST[\'ACTUAL_URL\'] = None\n-        self.assertEqual(False, error_view.attempt_redirect())\n+        self.assertEquals(False, error_view.attempt_redirect())\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 8f75971..80a97db 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -61,18 +61,18 @@ def test_json_request_on_content_object_returns_service(self):\n \n     def test_html_request_on_portal_root_returns_default_view(self):\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEqual(\'listing_view\', obj.__name__)\n+        self.assertEquals(\'listing_view\', obj.__name__)\n \n     def test_html_request_on_portal_root_returns_dynamic_view(self):\n         self.portal.setLayout(\'summary_view\')\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEqual(\'summary_view\', obj.__name__)\n+        self.assertEquals(\'summary_view\', obj.__name__)\n \n     def test_html_request_on_portal_root_returns_default_page(self):\n         self.portal.invokeFactory(\'Document\', id=\'doc1\')\n         self.portal.setDefaultPage(\'doc1\')\n         obj = self.traverse(accept=\'text/html\')\n-        self.assertEqual(\'document_view\', obj.__name__)\n+        self.assertEquals(\'document_view\', obj.__name__)\n \n     def test_json_request_on_object_with_multihook(self):\n         doc1 = self.portal[self.portal.invokeFactory(\'Document\', id=\'doc1\')]\n@@ -86,7 +86,7 @@ def btr_test(container, request):\n \n         obj = self.traverse(path=\'/plone/doc1\')\n         self.assertTrue(isinstance(obj, Service), \'Not a service\')\n-        self.assertEqual(1, self.request._btr_test_called)\n+        self.assertEquals(1, self.request._btr_test_called)\n \n     def test_json_request_on_existing_view_returns_named_service(self):\n         obj = self.traverse(\'/plone/search\')\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T16:20:10Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/ebaa24f40a9fffc9152e1bd5ebd6f1e1200a5d46

Good practices when handling files

Files changed:
M src/plone/rest/tests/test_dexterity.py

b"diff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex bb8e8b8..a31a730 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -116,11 +116,13 @@ def test_dexterity_news_item_get(self):\n             'text/html'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u'image.png')\n+        fd = open(image_file, 'rb')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, 'rb').read(),\n+            data=fd.read(),\n             contentType='image/png',\n             filename=u'image.png'\n         )\n+        fd.close()\n         self.portal.newsitem.image_caption = u'This is an image caption.'\n         import transaction\n         transaction.commit()\n@@ -176,11 +178,13 @@ def test_dexterity_file_get(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u'file.pdf'\n         )\n+        fd = open(pdf_file, 'rb')\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, 'rb').read(),\n+            data=fd.read(),\n             contentType='application/pdf',\n             filename=u'file.pdf'\n         )\n+        fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n@@ -202,11 +206,13 @@ def test_dexterity_image_get(self):\n         self.portal.image.title = 'My Image'\n         self.portal.image.description = u'This is an image'\n         image_file = os.path.join(os.path.dirname(__file__), u'image.png')\n+        fd = open(image_file, 'rb')\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, 'rb').read(),\n+            data=fd.read(),\n             contentType='image/png',\n             filename=u'image.png'\n         )\n+        fd.close()\n         import transaction\n         transaction.commit()\n \n"

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T16:20:32Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/6e0f7af6f2f8b3004c89840a360bb6a0e72dd596

Specify exception

Files changed:
M src/plone/rest/errors.py

b'diff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 916da7d..5d6cf9f 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -11,7 +11,7 @@\n try:\n     from ZPublisher.HTTPRequest import WSGIRequest\n     HAS_WSGI = True\n-except:\n+except ImportError:\n     HAS_WSGI = False\n from zope.component import adapter\n from zope.component import queryUtility\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T17:43:35Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/4a8158267e1dee6f92f43a6979fb7d6cf793ea82

response.text is 'null' in py3 and u'' in py2, so compare using the raw response

Files changed:
M src/plone/rest/tests/test_redirects.py

b"diff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex 16f049d..3d42d03 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -38,7 +38,7 @@ def test_get_to_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n@@ -50,7 +50,7 @@ def test_post_to_moved_item_causes_308_redirect(self):\n         self.assertEqual(308, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n@@ -65,7 +65,7 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n         # Following the redirect then leads to an item that will produce a 401\n         response = requests.get(\n@@ -86,7 +86,7 @@ def test_query_string_gets_preserved(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new?key=value',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_named_service_on_moved_item_causes_301_redirect(self):\n         response = requests.get(\n@@ -98,7 +98,7 @@ def test_named_service_on_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/namedservice',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_named_service_plus_path_parameter_works(self):\n         response = requests.get(\n@@ -110,7 +110,7 @@ def test_named_service_plus_path_parameter_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/namedservice/param',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_redirects_for_regular_views_still_work(self):\n         response = requests.get(\n@@ -122,7 +122,7 @@ def test_redirects_for_regular_views_still_work(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/@@some-view',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         response = requests.get(\n@@ -134,7 +134,7 @@ def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/folder-new/@@some-view/param?k=v',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n         storage = queryUtility(IRedirectionStorage)\n@@ -164,7 +164,7 @@ def test_handles_redirects_that_include_querystring_in_old_path(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + '/new-item',\n                          response.headers['Location'])\n-        self.assertEqual('null', response.text)\n+        self.assertEqual(b'', response.raw.read())\n \n     def test_aborts_redirect_checks_early_for_app_root(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\n"

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T17:50:57Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/684de9e356a22b5b3caec223cd84c8b9b0bd46a6

flake8

Files changed:
M setup.py
M src/plone/rest/errors.py

b'diff --git a/setup.py b/setup.py\nindex dbaa379..f6bb57c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,6 +5,7 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n+\n version = \'1.3.1-dev.0\'\n \n long_description = (\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 5d6cf9f..ab4f516 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -75,9 +75,13 @@ def render_exception(self, exception):\n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            if HAS_WSGI and isinstance(self.request, WSGIRequest) and str(exception) == str(exc_obj):\n-                # WSGIRequest may "upgrade" the exception, resulting in a new exception\n-                # which has the same string representation as the original exception.\n+            if HAS_WSGI and \\\n+               isinstance(self.request, WSGIRequest) and \\\n+               str(exception) == str(exc_obj):\n+                # WSGIRequest may "upgrade" the exception,\n+                # resulting in a new exception which has\n+                # the same string representation as the\n+                # original exception.\n                 # https://github.com/plone/Products.CMFPlone/issues/2474\n                 # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n                 pass\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-03T15:10:32-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.rest/commit/e20c0008a202da88b2a222761cfae6131300a0b2

Use plone.protect 4.0.1 for travis

Files changed:
M plone-5.1.x.cfg

b'diff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 9d7b63d..c2894f4 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -7,3 +7,4 @@ extends =\n [versions]\n plone.namedfile = 4.2.3\n plone.app.event = 3.0.6\n+plone.protect   = 4.0.1\n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2018-10-17T11:44:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rest/commit/c30de1eb785c96380d2b8f9ee8968088dd56e6d3

Merge pull request #75 from plone/python3

Python 3 support

Files changed:
M .travis.yml
M CHANGES.rst
M plone-5.1.x.cfg
M setup.py
M src/plone/rest/cors.py
M src/plone/rest/errors.py
M src/plone/rest/service.py
M src/plone/rest/testing.py
M src/plone/rest/tests/test_dexterity.py
M src/plone/rest/tests/test_error_handling.py
M src/plone/rest/tests/test_permissions.py
M src/plone/rest/tests/test_redirects.py
M src/plone/rest/tests/test_traversal.py
M src/plone/rest/traverse.py

b'diff --git a/.travis.yml b/.travis.yml\nindex 970f652..50691d6 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,5 +1,7 @@\n language: python\n-python: 2.7.15\n+python:\n+  - 2.7\n+  - 3.6\n cache:\n   pip: true\n   directories:\n@@ -8,6 +10,12 @@ env:\n   - PLONE_VERSION=4.3.x\n   - PLONE_VERSION=5.0.x\n   - PLONE_VERSION=5.1.x\n+matrix:\n+  exclude:\n+    - python: 3.6\n+      env: PLONE_VERSION=4.3.x\n+    - python: 3.6\n+      env: PLONE_VERSION=5.0.x\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - virtualenv .\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 9c97bfc..0630bac 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,8 @@ Changelog\n 1.3.1 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+- Prepare for Python 2 / 3 compatibility\n+  [tschorr,pbauer,frapell]\n \n \n 1.3.0 (2018-09-11)\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 9d7b63d..c2894f4 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -7,3 +7,4 @@ extends =\n [versions]\n plone.namedfile = 4.2.3\n plone.app.event = 3.0.6\n+plone.protect   = 4.0.1\ndiff --git a/setup.py b/setup.py\nindex ba6e717..f6bb57c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,6 +5,7 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n+\n version = \'1.3.1-dev.0\'\n \n long_description = (\n@@ -32,6 +33,8 @@ def read(*rnames):\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n       ],\n       keywords=\'\',\n       author=\'Plone Foundation\',\n@@ -61,6 +64,7 @@ def read(*rnames):\n           \'zope.traversing\',\n           \'Products.CMFCore\',\n           \'Zope2\',\n+          \'six\',\n       ],\n       entry_points="""\n       # -*- Entry points: -*-\ndiff --git a/src/plone/rest/cors.py b/src/plone/rest/cors.py\nindex df7d784..7694cb9 100644\n--- a/src/plone/rest/cors.py\n+++ b/src/plone/rest/cors.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.rest.interfaces import ICORSPolicy\n-from zope.interface import implements\n+from zope.interface import implementer\n \n # CORS preflight service registry\n # A mapping of method -> service_id\n@@ -18,8 +18,8 @@ def lookup_preflight_service_id(method):\n         return _services[method]\n \n \n+@implementer(ICORSPolicy)\n class CORSPolicy(object):\n-    implements(ICORSPolicy)\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/rest/errors.py b/src/plone/rest/errors.py\nindex 367aae3..ab4f516 100644\n--- a/src/plone/rest/errors.py\n+++ b/src/plone/rest/errors.py\n@@ -8,11 +8,17 @@\n from six.moves.urllib.parse import quote\n from six.moves.urllib.parse import unquote\n from zExceptions import NotFound\n+try:\n+    from ZPublisher.HTTPRequest import WSGIRequest\n+    HAS_WSGI = True\n+except ImportError:\n+    HAS_WSGI = False\n from zope.component import adapter\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n import json\n+import six\n import sys\n import traceback\n \n@@ -42,8 +48,12 @@ def __call__(self):\n         return\n \n     def render_exception(self, exception):\n-        result = {u\'type\': type(exception).__name__.decode(\'utf-8\'),\n-                  u\'message\': str(exception).decode(\'utf-8\')}\n+        name = type(exception).__name__\n+        message = str(exception)\n+        if six.PY2:\n+            name = name.decode(\'utf-8\')\n+            message = message.decode(\'utf-8\')\n+        result = {u\'type\': name, u\'message\': message}\n \n         if isinstance(exception, NotFound):\n             # First check if a redirect from p.a.redirector exists\n@@ -65,8 +75,19 @@ def render_exception(self, exception):\n     def render_traceback(self, exception):\n         _, exc_obj, exc_traceback = sys.exc_info()\n         if exception is not exc_obj:\n-            return (u\'ERROR: Another exception happened before we could \'\n-                    u\'render the traceback.\')\n+            if HAS_WSGI and \\\n+               isinstance(self.request, WSGIRequest) and \\\n+               str(exception) == str(exc_obj):\n+                # WSGIRequest may "upgrade" the exception,\n+                # resulting in a new exception which has\n+                # the same string representation as the\n+                # original exception.\n+                # https://github.com/plone/Products.CMFPlone/issues/2474\n+                # https://github.com/plone/plone.rest/commit/96599cc3bb3ef5a23b10eb585781d88274fbcaf5#comments\n+                pass\n+            else:\n+                return (u\'ERROR: Another exception happened before we could \'\n+                        u\'render the traceback.\')\n \n         raw = \'\\n\'.join(traceback.format_tb(exc_traceback))\n         return raw.strip().split(\'\\n\')\ndiff --git a/src/plone/rest/service.py b/src/plone/rest/service.py\nindex 799d52a..2b8f939 100644\n--- a/src/plone/rest/service.py\n+++ b/src/plone/rest/service.py\n@@ -2,11 +2,11 @@\n from plone.rest.interfaces import ICORSPolicy\n from plone.rest.interfaces import IService\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n \n \n+@implementer(IService)\n class Service(object):\n-    implements(IService)\n \n     def __call__(self):\n         policy = queryMultiAdapter((self.context, self.request), ICORSPolicy)\ndiff --git a/src/plone/rest/testing.py b/src/plone/rest/testing.py\nindex 63b3114..0fb5292 100644\n--- a/src/plone/rest/testing.py\n+++ b/src/plone/rest/testing.py\n@@ -41,7 +41,7 @@ def setUpZope(self, app, configurationContext):\n class InternalServerErrorService(Service):\n \n     def __call__(self):\n-        from urllib2 import HTTPError\n+        from six.moves.urllib.error import HTTPError\n         raise HTTPError(\n             \'http://nohost/plone/500-internal-server-error\',\n             500,\ndiff --git a/src/plone/rest/tests/test_dexterity.py b/src/plone/rest/tests/test_dexterity.py\nindex 8f49d1e..a31a730 100644\n--- a/src/plone/rest/tests/test_dexterity.py\n+++ b/src/plone/rest/tests/test_dexterity.py\n@@ -116,11 +116,13 @@ def test_dexterity_news_item_get(self):\n             \'text/html\'\n         )\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        fd = open(image_file, \'rb\')\n         self.portal.newsitem.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=fd.read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n+        fd.close()\n         self.portal.newsitem.image_caption = u\'This is an image caption.\'\n         import transaction\n         transaction.commit()\n@@ -176,11 +178,13 @@ def test_dexterity_file_get(self):\n         pdf_file = os.path.join(\n             os.path.dirname(__file__), u\'file.pdf\'\n         )\n+        fd = open(pdf_file, \'rb\')\n         self.portal.file.file = NamedBlobFile(\n-            data=open(pdf_file, \'r\').read(),\n+            data=fd.read(),\n             contentType=\'application/pdf\',\n             filename=u\'file.pdf\'\n         )\n+        fd.close()\n         intids = getUtility(IIntIds)\n         file_id = intids.getId(self.portal.file)\n         self.portal.file.file = RelationValue(file_id)\n@@ -202,11 +206,13 @@ def test_dexterity_image_get(self):\n         self.portal.image.title = \'My Image\'\n         self.portal.image.description = u\'This is an image\'\n         image_file = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+        fd = open(image_file, \'rb\')\n         self.portal.image.image = NamedBlobImage(\n-            data=open(image_file, \'r\').read(),\n+            data=fd.read(),\n             contentType=\'image/png\',\n             filename=u\'image.png\'\n         )\n+        fd.close()\n         import transaction\n         transaction.commit()\n \ndiff --git a/src/plone/rest/tests/test_error_handling.py b/src/plone/rest/tests/test_error_handling.py\nindex 67088b5..ed3dc8d 100644\n--- a/src/plone/rest/tests/test_error_handling.py\n+++ b/src/plone/rest/tests/test_error_handling.py\n@@ -118,4 +118,4 @@ def test_500_traceback_only_for_manager_users(self):\n         self.assertIsInstance(traceback, list)\n         self.assertRegexpMatches(\n             traceback[0],\n-            r\'^File "[^"]*", line \\d*, in publish\')\n+            r\'^File "[^"]*", line \\d*, in (publish|transaction_pubevents)\')\ndiff --git a/src/plone/rest/tests/test_permissions.py b/src/plone/rest/tests/test_permissions.py\nindex f8d972e..673d592 100644\n--- a/src/plone/rest/tests/test_permissions.py\n+++ b/src/plone/rest/tests/test_permissions.py\n@@ -41,8 +41,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n-        request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n+        auth = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        b64auth = b64encode(auth.encode(\'utf8\'))\n+        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/rest/tests/test_redirects.py b/src/plone/rest/tests/test_redirects.py\nindex ca5daa3..3d42d03 100644\n--- a/src/plone/rest/tests/test_redirects.py\n+++ b/src/plone/rest/tests/test_redirects.py\n@@ -38,7 +38,7 @@ def test_get_to_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_post_to_moved_item_causes_308_redirect(self):\n         response = requests.post(\n@@ -50,7 +50,7 @@ def test_post_to_moved_item_causes_308_redirect(self):\n         self.assertEqual(308, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_unauthorized_request_to_item_still_redirects_first(self):\n         response = requests.get(\n@@ -65,7 +65,7 @@ def test_unauthorized_request_to_item_still_redirects_first(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n         # Following the redirect then leads to an item that will produce a 401\n         response = requests.get(\n@@ -86,7 +86,7 @@ def test_query_string_gets_preserved(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new?key=value\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_named_service_on_moved_item_causes_301_redirect(self):\n         response = requests.get(\n@@ -98,7 +98,7 @@ def test_named_service_on_moved_item_causes_301_redirect(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new/namedservice\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_named_service_plus_path_parameter_works(self):\n         response = requests.get(\n@@ -110,7 +110,7 @@ def test_named_service_plus_path_parameter_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new/namedservice/param\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_redirects_for_regular_views_still_work(self):\n         response = requests.get(\n@@ -122,7 +122,7 @@ def test_redirects_for_regular_views_still_work(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new/@@some-view\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         response = requests.get(\n@@ -134,7 +134,7 @@ def test_redirects_for_views_plus_params_plus_querystring_works(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/folder-new/@@some-view/param?k=v\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_doesnt_cause_redirect_loop_on_bogus_storage_entries(self):\n         storage = queryUtility(IRedirectionStorage)\n@@ -164,7 +164,7 @@ def test_handles_redirects_that_include_querystring_in_old_path(self):\n         self.assertEqual(301, response.status_code)\n         self.assertEqual(self.portal_url + \'/new-item\',\n                          response.headers[\'Location\'])\n-        self.assertEqual(u\'\', response.text)\n+        self.assertEqual(b\'\', response.raw.read())\n \n     def test_aborts_redirect_checks_early_for_app_root(self):\n         error_view = ErrorHandling(self.portal, self.portal.REQUEST)\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 0741816..80a97db 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -32,8 +32,9 @@ def traverse(self, path=\'/plone\', accept=\'application/json\', method=\'GET\'):\n         request.environ[\'PATH_TRANSLATED\'] = path\n         request.environ[\'HTTP_ACCEPT\'] = accept\n         request.environ[\'REQUEST_METHOD\'] = method\n-        request._auth = \'Basic %s\' % b64encode(\n-            \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+        auth = \'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        b64auth = b64encode(auth.encode(\'utf8\'))\n+        request._auth = \'Basic %s\' % b64auth.decode(\'utf8\')\n         notify(PubStart(request))\n         return request.traverse(path)\n \ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 690a285..b94f324 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -1,18 +1,18 @@\n # -*- coding: utf-8 -*-\n+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n from plone.rest.interfaces import IAPIRequest\n from plone.rest.interfaces import IService\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import queryMultiAdapter\n-from zope.interface import implements\n+from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFCore.interfaces import ISiteRoot\n \n \n+@adapter(IPloneSiteRoot, IAPIRequest)\n class RESTTraverse(DefaultPublishTraverse):\n-    adapts(ISiteRoot, IAPIRequest)\n \n     def publishTraverse(self, request, name):\n         try:\n@@ -51,10 +51,10 @@ def browserDefault(self, request):\n         return self.context, (request._rest_service_id,)\n \n \n+@implementer(IBrowserPublisher)\n class RESTWrapper(object):\n     """A wrapper for objects traversed during a REST request.\n     """\n-    implements(IBrowserPublisher)\n \n     def __init__(self, context, request):\n         self.context = context\n'

