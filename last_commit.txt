Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-04-30T23:58:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/f1ea3bcb7ea35a22fe9717de9d2ed6d8db1bc49c

isort

Files changed:
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py
M setup.cfg

b'diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex 838db03..3fa8ac5 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n \n-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n+from plone.app.contentlisting.tests.base import (\n+    CONTENTLISTING_FUNCTIONAL_TESTING,  # NOQA: E501\n+)\n from plone.testing import layered\n \n import doctest\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex 525ce94..54849f5 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n+from plone.app.contentlisting.tests.base import (\n+    CONTENTLISTING_FUNCTIONAL_TESTING,  # NOQA: E501\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.batching.interfaces import IBatch\n@@ -41,8 +43,7 @@ def test_making_contentlisting(self):\n     def test_making_contentlistingobjects(self):\n         results = self.catalog()\n         listing = IContentListing(results)\n-        from plone.app.contentlisting.catalog import \\\n-            CatalogContentListingObject\n+        from plone.app.contentlisting.catalog import CatalogContentListingObject\n         self.assertTrue(isinstance(listing[0], CatalogContentListingObject))\n \n     def test_listing_interface(self):\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-04-30T23:58:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/82c55fc4633b9ad2a4ad910021ff1706eb227dc9

black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentlisting/browser.py
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/interfaces.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentlisting/browser.py b/plone/app/contentlisting/browser.py\nindex 2116ec4..a83054f 100644\n--- a/plone/app/contentlisting/browser.py\n+++ b/plone/app/contentlisting/browser.py\n@@ -5,40 +5,38 @@\n \n \n class FolderListing(BrowserView):\n-\n     def __call__(self, batch=False, b_size=20, b_start=0, orphan=0, **kw):\n         query = {}\n         query.update(kw)\n \n-        query[\'path\'] = {\n-            \'query\': \'/\'.join(self.context.getPhysicalPath()),\n-            \'depth\': 1,\n+        query["path"] = {\n+            "query": "/".join(self.context.getPhysicalPath()),\n+            "depth": 1,\n         }\n \n         # if we don\'t have asked explicitly for other sorting, we\'ll want\n         # it by position in parent\n-        if \'sort_on\' not in query:\n-            query[\'sort_on\'] = \'getObjPositionInParent\'\n+        if "sort_on" not in query:\n+            query["sort_on"] = "getObjPositionInParent"\n \n         # Provide batching hints to the catalog\n         if batch:\n-            query[\'b_start\'] = b_start\n-            query[\'b_size\'] = b_size + orphan\n+            query["b_start"] = b_start\n+            query["b_size"] = b_size + orphan\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         results = catalog(query)\n         return IContentListing(results)\n \n \n class ContentListingCollection(BrowserView):\n-\n     def __call__(self, batch=False, b_size=20, b_start=0, **kw):\n \n-        if \'orphan\' in kw:\n+        if "orphan" in kw:\n             # At the moment, orphan keyword is not supported by\n             # plone.app.contenttypes Collection behavior, nor by\n             # plone.app.querystring\'s querybuilder.\n-            del kw[\'orphan\']\n+            del kw["orphan"]\n \n         res = self.context.results(\n             batch=batch,\ndiff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex 2380545..c0ce51b 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -28,10 +28,12 @@ def __init__(self, brain):\n         self.request = getRequest()\n \n     def __repr__(self):\n-        return \'<plone.app.contentlisting.catalog.\'\\\n-            \'CatalogContentListingObject instance at {0}>\'.format(\n+        return (\n+            "<plone.app.contentlisting.catalog."\n+            "CatalogContentListingObject instance at {0}>".format(\n                 self.getPath(),\n             )\n+        )\n \n     __str__ = __repr__\n \n@@ -40,7 +42,7 @@ def __getattr__(self, name):\n         underlying objects without knowing the names of all attributes.\n         """\n \n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             raise AttributeError(name)\n         brain_name = getattr(aq_base(self._brain), name, missing)\n         if brain_name is not missing:\n@@ -82,7 +84,7 @@ def getURL(self, relative=False):\n \n     def uuid(self):\n         # content objects might have UID and might not.\n-        brain_uid = getattr(aq_base(self._brain), \'UID\', None)\n+        brain_uid = getattr(aq_base(self._brain), "UID", None)\n         if brain_uid is not None:\n             return self._brain.UID\n         uuid = IUUID(self.getObject(), None)\n@@ -106,8 +108,8 @@ def Description(self):\n \n     def CroppedDescription(self):\n         registry = queryUtility(IRegistry)\n-        length = registry.get(\'plone.search_results_description_length\')\n-        plone_view = getMultiAdapter((self, self.request), name=\'plone\')\n+        length = registry.get("plone.search_results_description_length")\n+        plone_view = getMultiAdapter((self, self.request), name="plone")\n         return plone_view.cropText(self.Description(), length)\n \n     def Type(self):\n@@ -120,22 +122,22 @@ def listCreators(self):\n         return self._brain.listCreators\n \n     def getUserData(self, username):\n-        _usercache = self.request.get(\'usercache\', None)\n+        _usercache = self.request.get("usercache", None)\n         if _usercache is None:\n-            self.request.set(\'usercache\', {})\n+            self.request.set("usercache", {})\n             _usercache = {}\n         userdata = _usercache.get(username, None)\n         if userdata is None:\n-            membershiptool = getToolByName(self._brain, \'portal_membership\')\n+            membershiptool = getToolByName(self._brain, "portal_membership")\n             userdata = membershiptool.getMemberInfo(self._brain.Creator)\n             if not userdata:\n                 userdata = {\n-                    \'username\': username,\n-                    \'description\': \'\',\n-                    \'language\': \'\',\n-                    \'home_page\': \'/HOMEPAGEURL\',\n-                    \'location\': \'\',\n-                    \'fullname\': username,\n+                    "username": username,\n+                    "description": "",\n+                    "language": "",\n+                    "home_page": "/HOMEPAGEURL",\n+                    "location": "",\n+                    "fullname": username,\n                 }\n             self.request.usercache[username] = userdata\n         return userdata\n@@ -182,7 +184,7 @@ def Identifier(self):\n \n     def Language(self):\n         # The language of the content.\n-        brain_language = getattr(aq_base(self._brain), \'Language\', None)\n+        brain_language = getattr(aq_base(self._brain), "Language", None)\n         if brain_language is not None:\n             return self._brain.Language\n         else:\ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 2dc6588..4b701d1 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -24,11 +24,11 @@ def __init__(self, sequence):\n         self._basesequence = sequence\n \n     def __getitem__(self, index):\n-        """`x.__getitem__(index)` <==> `x[index]`\n-        """\n+        """`x.__getitem__(index)` <==> `x[index]`"""\n         if isinstance(index, slice):\n             return IContentListing(\n-                self._basesequence[index.start:index.stop:index.step])\n+                self._basesequence[index.start : index.stop : index.step]\n+            )\n         return IContentListingObject(self._basesequence[index])\n \n     def __len__(self):\n@@ -40,7 +40,7 @@ def __len__(self):\n     @property\n     def actual_result_count(self):\n         bs = self._basesequence\n-        return getattr(bs, \'actual_result_count\', len(bs))\n+        return getattr(bs, "actual_result_count", len(bs))\n \n     def __iter__(self):\n         """Let the sequence be iterable and whenever we look at an object, it\n@@ -123,13 +123,13 @@ def __hash__(self):\n     def ContentTypeClass(self):\n         # A normalised type name that identifies the object in listings.\n         # Used for CSS styling.\n-        return \'contenttype-\' + queryUtility(IIDNormalizer).normalize(\n+        return "contenttype-" + queryUtility(IIDNormalizer).normalize(\n             self.PortalType(),\n         )\n \n     def ReviewStateClass(self):\n         # A normalised review state string for CSS styling use in listings.\n-        return \'state-\' + queryUtility(IIDNormalizer).normalize(\n+        return "state-" + queryUtility(IIDNormalizer).normalize(\n             self.review_state(),\n         )\n \n@@ -137,25 +137,25 @@ def appendViewAction(self):\n         # Decide whether to produce a string /view to append to links in\n         # results listings.\n         registry = getUtility(IRegistry)\n-        types = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        types = registry.get("plone.types_use_view_action_in_listings", [])\n         if self.portal_type in types:\n-            return \'/view\'\n-        return \'\'\n+            return "/view"\n+        return ""\n \n     def isVisibleInNav(self):\n         # True, if this item should be visible in navigation trees.\n-        exclude_from_nav_attr = getattr(self, \'exclude_from_nav\', None)\n+        exclude_from_nav_attr = getattr(self, "exclude_from_nav", None)\n         if exclude_from_nav_attr is not None and (\n-                self.exclude_from_nav()\n-                if callable(self.exclude_from_nav)\n-                else self.exclude_from_nav\n+            self.exclude_from_nav()\n+            if callable(self.exclude_from_nav)\n+            else self.exclude_from_nav\n         ):\n             return False\n \n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n             INavigationSchema,\n-            prefix=\'plone\',\n+            prefix="plone",\n         )\n         if self.portal_type not in navigation_settings.displayed_types:\n             return False\n@@ -166,12 +166,12 @@ def MimeTypeIcon(self):\n         mimeicon = None\n         navroot = getNavigationRoot(self._brain)\n         contenttype = aq_base(\n-            getattr(self._brain, \'mime_type\', None),\n+            getattr(self._brain, "mime_type", None),\n         )\n         if contenttype:\n             mtt = getToolByName(\n                 self._brain,\n-                \'mimetypes_registry\',\n+                "mimetypes_registry",\n             )\n             ctype = mtt.lookup(contenttype)\n             if ctype:\ndiff --git a/plone/app/contentlisting/interfaces.py b/plone/app/contentlisting/interfaces.py\nindex 3f77c29..99404c2 100644\n--- a/plone/app/contentlisting/interfaces.py\n+++ b/plone/app/contentlisting/interfaces.py\n@@ -88,6 +88,6 @@ def ContentTypeClass():\n         """\n \n     def MimeTypeIcon():\n-        """ return mimetype icon from mimetype registry if contenttype is\n+        """return mimetype icon from mimetype registry if contenttype is\n         File else None\n         """\ndiff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py\nindex 2de10a0..2a9e705 100644\n--- a/plone/app/contentlisting/realobject.py\n+++ b/plone/app/contentlisting/realobject.py\n@@ -15,18 +15,19 @@\n \n @implementer(IContentListingObject)\n class RealContentListingObject(BaseContentListingObject):\n-    """A content object representation wrapping a real content object.\n-    """\n+    """A content object representation wrapping a real content object."""\n \n     def __init__(self, obj):\n         self._realobject = obj\n-        self.request = aq_get(obj, \'REQUEST\')\n+        self.request = aq_get(obj, "REQUEST")\n \n     def __repr__(self):\n-        return \'<plone.app.contentlisting.realobject.\'\\\n-            \'RealContentListingObject instance at {0}>\'.format(\n+        return (\n+            "<plone.app.contentlisting.realobject."\n+            "RealContentListingObject instance at {0}>".format(\n                 self.getPath(),\n             )\n+        )\n \n     __str__ = __repr__\n \n@@ -35,7 +36,7 @@ def __getattr__(self, name):\n         the real underlying objects without knowing the names of all\n         attributes.\n         """\n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             raise AttributeError(name)\n         obj = self.getObject()\n         obj_name = getattr(aq_base(obj), name, MARKER)\n@@ -55,7 +56,7 @@ def getDataOrigin(self):\n \n     # a base set of elements that are needed but not defined in dublin core\n     def getPath(self):\n-        return \'/\'.join(self.getObject().getPhysicalPath())\n+        return "/".join(self.getObject().getPhysicalPath())\n \n     def getURL(self):\n         return self.getObject().absolute_url()\n@@ -81,27 +82,27 @@ def getSize(self):\n         if primary_field_info is None or not primary_field_info.value:\n             size = 0\n         else:\n-            size = getattr(primary_field_info.value, \'size\', 0)\n+            size = getattr(primary_field_info.value, "size", 0)\n         return human_readable_size(size)\n \n     def review_state(self):\n         obj = self.getObject()\n-        wftool = getToolByName(obj, \'portal_workflow\')\n-        return wftool.getInfoFor(obj, \'review_state\', default=None)\n+        wftool = getToolByName(obj, "portal_workflow")\n+        return wftool.getInfoFor(obj, "review_state", default=None)\n \n     def Type(self):\n         # Dublin Core element - Object type.\n         obj = self.getObject()\n-        typestool = getToolByName(obj, \'portal_types\')\n+        typestool = getToolByName(obj, "portal_types")\n         ti = typestool.getTypeInfo(obj)\n         if ti is not None:\n             return ti.Title()\n         return obj.meta_type\n \n-# Needed: A method Type() that returns the same as is cataloged as Type.\n-# Currently Type() returns different values depending on the data source being\n-# a brain or a real object. Probably needed. Support for all the attributes\n-# from the indexablemetadata wrappers.\n+    # Needed: A method Type() that returns the same as is cataloged as Type.\n+    # Currently Type() returns different values depending on the data source being\n+    # a brain or a real object. Probably needed. Support for all the attributes\n+    # from the indexablemetadata wrappers.\n \n     def PortalType(self):\n         obj = self.getObject()\ndiff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py\nindex 1dcce31..1a18af0 100644\n--- a/plone/app/contentlisting/tests/base.py\n+++ b/plone/app/contentlisting/tests/base.py\n@@ -10,12 +10,14 @@\n \n class ContentListingLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.layout\n+\n         self.loadZCML(package=plone.app.layout)\n         import plone.app.contentlisting\n+\n         self.loadZCML(package=plone.app.contentlisting)\n \n \n@@ -24,29 +26,30 @@ def setUpZope(self, app, configurationContext):\n \n class ContentListingIntegrationLayer(PloneSandboxLayer):\n \n-    defaultBases = (CONTENTLISTING_FIXTURE, )\n+    defaultBases = (CONTENTLISTING_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        wftool = getToolByName(portal, \'portal_workflow\')\n-        wftool.setDefaultChain(\'simple_publication_workflow\')\n-\n-        portal.invokeFactory(\'Folder\', \'test-folder\')\n-        portal.invokeFactory(\'Document\', \'front-page\')\n-        portal.invokeFactory(\'Folder\', \'news\')\n-        wftool.doActionFor(portal.news, \'publish\')\n-        portal.news.invokeFactory(\'News Item\', \'news1\')\n-        setRoles(portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        wftool = getToolByName(portal, "portal_workflow")\n+        wftool.setDefaultChain("simple_publication_workflow")\n+\n+        portal.invokeFactory("Folder", "test-folder")\n+        portal.invokeFactory("Document", "front-page")\n+        portal.invokeFactory("Folder", "news")\n+        wftool.doActionFor(portal.news, "publish")\n+        portal.news.invokeFactory("News Item", "news1")\n+        setRoles(portal, TEST_USER_ID, ["Member"])\n         from Products.CMFCore.indexing import processQueue\n+\n         processQueue()\n \n \n CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()\n CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),\n-    name=\'ContentListing:Integration\',\n+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE,),\n+    name="ContentListing:Integration",\n )\n CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),\n-    name=\'ContentListing:Functional\',\n+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE,),\n+    name="ContentListing:Functional",\n )\ndiff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex 3fa8ac5..fa2cfa3 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -14,10 +14,12 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    \'tests/integration.rst\',\n-                    package=\'plone.app.contentlisting\',\n-                    optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,  # NOQA: E501\n+                    "tests/integration.rst",\n+                    package="plone.app.contentlisting",\n+                    optionflags=doctest.NORMALIZE_WHITESPACE\n+                    | doctest.ELLIPSIS,  # NOQA: E501\n                 ),\n                 layer=CONTENTLISTING_FUNCTIONAL_TESTING,\n             ),\n-        ])\n+        ]\n+    )\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex 54849f5..e7f3b46 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -18,32 +18,35 @@ class TestSetup(unittest.TestCase):\n \n     def setUp(self):\n         super(TestSetup, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n-        self.workflow = getToolByName(self.portal, \'portal_workflow\')\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n+        self.workflow = getToolByName(self.portal, "portal_workflow")\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n     def test_able_to_add_document(self):\n         # just a dummy test to see that the basics are running\n-        new_id = self.folder.invokeFactory(\'Document\', \'mypage\')\n-        self.assertEqual(\'mypage\', new_id)\n+        new_id = self.folder.invokeFactory("Document", "mypage")\n+        self.assertEqual("mypage", new_id)\n \n     def test_simple_contentlisting(self):\n         results = []\n         listing = IContentListing(results)\n         from plone.app.contentlisting.contentlisting import ContentListing\n+\n         self.assertTrue(isinstance(listing, ContentListing))\n \n     def test_making_contentlisting(self):\n         results = self.catalog()\n         listing = IContentListing(results)\n         from plone.app.contentlisting.contentlisting import ContentListing\n+\n         self.assertTrue(isinstance(listing, ContentListing))\n \n     def test_making_contentlistingobjects(self):\n         results = self.catalog()\n         listing = IContentListing(results)\n         from plone.app.contentlisting.catalog import CatalogContentListingObject\n+\n         self.assertTrue(isinstance(listing[0], CatalogContentListingObject))\n \n     def test_listing_interface(self):\n@@ -68,33 +71,33 @@ class TestIndividualCatalogContentItems(unittest.TestCase):\n \n     def setUp(self):\n         super(TestIndividualCatalogContentItems, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'mypage\',\n-            title=\'My Page\',\n-            description=\'blah\',\n+            "Document",\n+            "mypage",\n+            title="My Page",\n+            description="blah",\n         )\n-        self.item = self.folder.restrictedTraverse(\'@@folderListing\')()[0]\n+        self.item = self.folder.restrictedTraverse("@@folderListing")()[0]\n         self.realitem = self.folder.mypage\n \n     def test_printing_item(self):\n         self.assertEqual(\n             repr(self.item),\n-            \'<plone.app.contentlisting.catalog.CatalogContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.catalog.CatalogContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n         self.assertEqual(\n             str(self.item),\n-            \'<plone.app.contentlisting.catalog.CatalogContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.catalog.CatalogContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n \n     def test_special_getattr_with_underscore(self):\n         # looking up attributes starting with _ should always raise\n         # AttributeError\n-        self.assertRaises(AttributeError, self.item.__getattr__, \'foo\')\n+        self.assertRaises(AttributeError, self.item.__getattr__, "foo")\n \n     def test_special_getattr_from_brain(self):\n         # Asking for an attribute not in the contentlistingobject, should\n@@ -102,63 +105,63 @@ def test_special_getattr_from_brain(self):\n         self.assertEqual(self.item.is_folderish, False)\n         self.assertTrue(\n             repr(self.item.getDataOrigin())[:35],\n-            \'<Products.ZCatalog.Catalog.mybrains\',\n+            "<Products.ZCatalog.Catalog.mybrains",\n         )\n \n     def test_special_getattr_from_object(self):\n         # Asking for an attribute not in the contentlistingobject, should\n         # defer lookup to the brain\n-        self.assertEqual(self.item.absolute_url(), \'\')\n+        self.assertEqual(self.item.absolute_url(), "")\n         self.assertEqual(\n             repr(self.item.getDataOrigin()),\n-            \'<Document at /plone/test-folder/mypage>\',\n+            "<Document at /plone/test-folder/mypage>",\n         )\n \n     def test_item_Title(self):\n-        self.assertEqual(self.item.Title(), \'My Page\')\n+        self.assertEqual(self.item.Title(), "My Page")\n         self.assertEqual(self.item.Title(), self.realitem.Title())\n \n     def test_item_Description(self):\n-        self.assertEqual(self.item.Description(), \'blah\')\n+        self.assertEqual(self.item.Description(), "blah")\n         self.assertEqual(self.item.Description(), self.realitem.Description())\n \n     def test_item_Creator(self):\n-        self.assertEqual(self.item.Creator(), \'test_user_1_\')\n+        self.assertEqual(self.item.Creator(), "test_user_1_")\n \n     def test_item_getURL(self):\n         self.assertEqual(\n             self.item.getURL(),\n-            \'http://nohost/plone/test-folder/mypage\',\n+            "http://nohost/plone/test-folder/mypage",\n         )\n         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())\n \n     def test_item_getSize(self):\n-        self.assertEqual(self.item.getSize().upper(), \'0 KB\')\n+        self.assertEqual(self.item.getSize().upper(), "0 KB")\n \n     def test_item_reviewState(self):\n-        wftool = getToolByName(self.realitem, \'portal_workflow\')\n-        wf = wftool.getInfoFor(self.realitem, \'review_state\')\n+        wftool = getToolByName(self.realitem, "portal_workflow")\n+        wf = wftool.getInfoFor(self.realitem, "review_state")\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u\'Page\')\n-        self.assertEqual(self.item.Type().domain, u\'plone\')\n+        self.assertEqual(self.item.Type(), u"Page")\n+        self.assertEqual(self.item.Type().domain, u"plone")\n \n     def test_appendViewAction(self):\n         # checking that we append the view action to urls when needed\n-        self.assertEqual(self.item.appendViewAction(), \'\')\n+        self.assertEqual(self.item.appendViewAction(), "")\n         self.folder.invokeFactory(\n-            \'Image\',\n-            \'myimage\',\n-            title=\'My Image\',\n-            description=\'blah\',\n+            "Image",\n+            "myimage",\n+            title="My Image",\n+            description="blah",\n         )\n-        self.item = self.folder.restrictedTraverse(\'@@contentlisting\')()[1]\n-        self.assertEqual(self.item.appendViewAction(), \'/view\')\n+        self.item = self.folder.restrictedTraverse("@@contentlisting")()[1]\n+        self.assertEqual(self.item.appendViewAction(), "/view")\n \n     def test_item_ContentTypeClass(self):\n         # checking the that we print nice strings for css class identifiers\n-        self.assertEqual(self.item.ContentTypeClass(), \'contenttype-document\')\n+        self.assertEqual(self.item.ContentTypeClass(), "contenttype-document")\n \n     def test_comparision(self):\n         self.assertEqual(IContentListingObject(self.folder.mypage), self.item)\n@@ -167,8 +170,7 @@ def test_containment(self):\n         # we can test containment for normal content objects against\n         # contentlistings\n         self.assertTrue(\n-            self.folder.mypage in\n-            self.folder.restrictedTraverse(\'@@contentlisting\')(),\n+            self.folder.mypage in self.folder.restrictedTraverse("@@contentlisting")(),\n         )\n \n \n@@ -177,13 +179,13 @@ class TestIndividualRealContentItems(unittest.TestCase):\n \n     def setUp(self):\n         super(TestIndividualRealContentItems, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'mypage\',\n-            title=\'My Page\',\n-            description=\'blah\',\n+            "Document",\n+            "mypage",\n+            title="My Page",\n+            description="blah",\n         )\n         self.item = IContentListingObject(self.folder.mypage)\n         self.realitem = self.folder.mypage\n@@ -191,62 +193,62 @@ def setUp(self):\n     def test_printing_item(self):\n         self.assertEqual(\n             repr(self.item),\n-            \'<plone.app.contentlisting.realobject.RealContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.realobject.RealContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n         self.assertEqual(\n             str(self.item),\n-            \'<plone.app.contentlisting.realobject.RealContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.realobject.RealContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n \n     def test_special_getattr_with_underscore(self):\n         # looking up attributes starting with _ should always raise\n         # AttributeError\n-        self.assertRaises(AttributeError, self.item.__getattr__, \'foo\')\n+        self.assertRaises(AttributeError, self.item.__getattr__, "foo")\n \n     def test_special_getattr_from_object(self):\n         # Asking for an attribute not in the contentlistingobject, should\n         # defer lookup to the brain\n-        self.assertEqual(self.item.absolute_url(), \'\')\n+        self.assertEqual(self.item.absolute_url(), "")\n         self.assertEqual(\n             repr(self.item.getDataOrigin()),\n-            \'<Document at /plone/test-folder/mypage>\',\n+            "<Document at /plone/test-folder/mypage>",\n         )\n \n     def test_item_Title(self):\n-        self.assertEqual(self.item.Title(), \'My Page\')\n+        self.assertEqual(self.item.Title(), "My Page")\n         self.assertEqual(self.item.Title(), self.realitem.Title())\n \n     def test_item_Description(self):\n-        self.assertEqual(self.item.Description(), \'blah\')\n+        self.assertEqual(self.item.Description(), "blah")\n         self.assertEqual(self.item.Description(), self.realitem.Description())\n \n     def test_item_Creator(self):\n-        self.assertEqual(self.item.Creator(), \'test_user_1_\')\n+        self.assertEqual(self.item.Creator(), "test_user_1_")\n \n     def test_item_getURL(self):\n         self.assertEqual(\n             self.item.getURL(),\n-            \'http://nohost/plone/test-folder/mypage\',\n+            "http://nohost/plone/test-folder/mypage",\n         )\n         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())\n \n     def test_item_getSize(self):\n-        self.assertEqual(self.item.getSize().upper(), \'0 KB\')\n+        self.assertEqual(self.item.getSize().upper(), "0 KB")\n \n     def test_item_reviewState(self):\n-        wftool = getToolByName(self.realitem, \'portal_workflow\')\n-        wf = wftool.getInfoFor(self.realitem, \'review_state\')\n+        wftool = getToolByName(self.realitem, "portal_workflow")\n+        wf = wftool.getInfoFor(self.realitem, "review_state")\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u\'Page\')\n-        self.assertEqual(self.item.Type().domain, u\'plone\')\n+        self.assertEqual(self.item.Type(), u"Page")\n+        self.assertEqual(self.item.Type().domain, u"plone")\n \n     def test_item_ContentTypeClass(self):\n         # checking the that we print nice strings for css class identifiers\n-        self.assertEqual(self.item.ContentTypeClass(), \'contenttype-document\')\n+        self.assertEqual(self.item.ContentTypeClass(), "contenttype-document")\n \n     def test_item_uuid(self):\n         uuid = self.item.uuid()\n@@ -268,37 +270,38 @@ class TestFolderContents(unittest.TestCase):\n     """Testing that the folder contents browserview works and behaves\n     as it should.\n     """\n+\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         super(TestFolderContents, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n \n     def test_empty_folder_contents(self):\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertEqual(len(contentlisting), 0)\n         self.assertEqual(contentlisting.actual_result_count, 0)\n \n     def test_item_in_folder_contents(self):\n         # adding a new page, adds to the length of folder contents\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n \n     def test_folder_contents(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertTrue(verifyObject(IContentListing, contentlisting))\n \n     def test_batching_folder_contents(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -308,9 +311,9 @@ def test_batching_folder_contents(self):\n     def test_batching_folder_contents_2(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        new_id = self.folder.invokeFactory(\'Document\', \'mypage\')\n-        new_id2 = self.folder.invokeFactory(\'Document\', \'mypage2\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        new_id = self.folder.invokeFactory("Document", "mypage")\n+        new_id2 = self.folder.invokeFactory("Document", "mypage2")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -318,7 +321,7 @@ def test_batching_folder_contents_2(self):\n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 2)\n \n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n             b_start=1,\n@@ -329,23 +332,23 @@ def test_batching_folder_contents_2(self):\n \n \n class TestCollectionResults(unittest.TestCase):\n-    """Test, if the @@contentlisting view also works for Collections.\n-    """\n+    """Test, if the @@contentlisting view also works for Collections."""\n+\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         super(TestCollectionResults, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Collection\', \'collection\', title=u\'Col\')\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Collection", "collection", title=u"Col")\n         collection = self.portal.collection\n         collection.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.selection.any\',\n-                \'v\': [\'Event\', \'Event\'],\n-             },\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["Event", "Event"],\n+            },\n         ]\n         collection.reindexObject()\n         self.col = collection\n@@ -353,32 +356,32 @@ def setUp(self):\n     def test_collection_results_is_contentlisting(self):\n         # call the generic contentlisting view. Check that it makes results\n         # a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")()\n \n         self.assertTrue(verifyObject(IContentListing, contentlisting))\n \n     def test_filtering_collection_results_to_empty(self):\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n-            portal_type=\'NotExistent\',\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n+            portal_type="NotExistent",\n         )\n \n         self.assertEqual(len(contentlisting), 0)\n         self.assertEqual(contentlisting.actual_result_count, 0)\n \n     def test_filtering_collection_results_to_news_items(self):\n-        self.folder.invokeFactory(\'Link\', \'mylink\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n-            portal_type=\'Link\',\n+        self.folder.invokeFactory("Link", "mylink")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n+            portal_type="Link",\n         )\n \n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n-        self.assertEqual(contentlisting[0].portal_type, \'Link\')\n+        self.assertEqual(contentlisting[0].portal_type, "Link")\n \n     def test_item_in_collection_results(self):\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")()\n \n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n@@ -386,8 +389,8 @@ def test_item_in_collection_results(self):\n     def test_batching_collection_results(self):\n         # call the contentlisting view. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -400,9 +403,9 @@ def test_batching_collection_results(self):\n     def test_batching_collection_results_2(self):\n         # call the contentlisting view. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        new_id = self.folder.invokeFactory(\'Event\', \'myevent\')\n-        new_id2 = self.folder.invokeFactory(\'Event\', \'myevent2\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        new_id = self.folder.invokeFactory("Event", "myevent")\n+        new_id2 = self.folder.invokeFactory("Event", "myevent2")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -412,7 +415,7 @@ def test_batching_collection_results_2(self):\n         self.assertEqual(len(contentlisting), 2)\n         self.assertEqual(contentlisting.has_next, True)\n \n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n             b_start=1,\n@@ -426,6 +429,7 @@ def test_batching_collection_results_2(self):\n \n def test_suite():\n     import unittest\n+\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(TestSetup))\n     suite.addTest(unittest.makeSuite(TestIndividualCatalogContentItems))\ndiff --git a/setup.py b/setup.py\nindex 92e9f03..f956497 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -7,15 +7,13 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n-version = \'2.0.8.dev0\'\n \n-long_description = \'{0}\\n\\n{1}\'.format(\n-    read(\'README.rst\'),\n-    read(\'CHANGES.rst\')\n-)\n+version = "2.0.8.dev0"\n+\n+long_description = "{0}\\n\\n{1}".format(read("README.rst"), read("CHANGES.rst"))\n \n setup(\n-    name=\'plone.app.contentlisting\',\n+    name="plone.app.contentlisting",\n     version=version,\n     description="Listing of content for the Plone CMS",\n     long_description=long_description,\n@@ -33,22 +31,22 @@ def read(*rnames):\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'content list Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentlisting\',\n-    license=\'GPL version 2\',\n+    keywords="content list Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentlisting",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n+        "setuptools",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-04-30T23:59:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/b665b88eb2f7da005043faaf7dfbd4bed2130316

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentlisting/__init__.py
M plone/app/contentlisting/browser.py
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/interfaces.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentlisting/__init__.py b/plone/app/contentlisting/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentlisting/__init__.py\n+++ b/plone/app/contentlisting/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentlisting/browser.py b/plone/app/contentlisting/browser.py\nindex a83054f..02f69f5 100644\n--- a/plone/app/contentlisting/browser.py\n+++ b/plone/app/contentlisting/browser.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentlisting.interfaces import IContentListing\n from Products.CMFCore.utils import getToolByName\n from zope.publisher.browser import BrowserView\ndiff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex c0ce51b..46698e3 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.contentlisting.contentlisting import BaseContentListingObject\n from plone.app.contentlisting.interfaces import IContentListingObject\n@@ -30,7 +29,7 @@ def __init__(self, brain):\n     def __repr__(self):\n         return (\n             "<plone.app.contentlisting.catalog."\n-            "CatalogContentListingObject instance at {0}>".format(\n+            "CatalogContentListingObject instance at {}>".format(\n                 self.getPath(),\n             )\n         )\ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 4b701d1..351a2df 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from Acquisition import aq_base\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n@@ -17,7 +15,7 @@\n \n \n @implementer(IContentListing)\n-class ContentListing(object):\n+class ContentListing:\n     """An IContentListing implementation based on sequences of objects."""\n \n     def __init__(self, sequence):\n@@ -106,7 +104,7 @@ def __getslice__(self, i, j):\n         return IContentListing(self._basesequence[i:j])\n \n \n-class BaseContentListingObject(object):\n+class BaseContentListingObject:\n     """A baseclass for the different types of contentlistingobjects.\n \n     To avoid duplication of the stuff that is not implementation-specific.\ndiff --git a/plone/app/contentlisting/interfaces.py b/plone/app/contentlisting/interfaces.py\nindex 99404c2..78468ca 100644\n--- a/plone/app/contentlisting/interfaces.py\n+++ b/plone/app/contentlisting/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IDublinCore\n from zope.interface.common.sequence import IReadSequence\n \ndiff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py\nindex 2a9e705..0774600 100644\n--- a/plone/app/contentlisting/realobject.py\n+++ b/plone/app/contentlisting/realobject.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_get\n from plone.app.contentlisting.contentlisting import BaseContentListingObject\n@@ -24,7 +23,7 @@ def __init__(self, obj):\n     def __repr__(self):\n         return (\n             "<plone.app.contentlisting.realobject."\n-            "RealContentListingObject instance at {0}>".format(\n+            "RealContentListingObject instance at {}>".format(\n                 self.getPath(),\n             )\n         )\ndiff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py\nindex 1a18af0..191fd13 100644\n--- a/plone/app/contentlisting/tests/base.py\n+++ b/plone/app/contentlisting/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex fa2cfa3..202425c 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.contentlisting.tests.base import (\n     CONTENTLISTING_FUNCTIONAL_TESTING,  # NOQA: E501\n )\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex e7f3b46..e2a3745 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.contentlisting.tests.base import (\n@@ -17,7 +16,7 @@ class TestSetup(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestSetup, self).setUp()\n+        super().setUp()\n         self.portal = self.layer["portal"]\n         self.folder = self.portal["test-folder"]\n         self.workflow = getToolByName(self.portal, "portal_workflow")\n@@ -70,7 +69,7 @@ class TestIndividualCatalogContentItems(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIndividualCatalogContentItems, self).setUp()\n+        super().setUp()\n         self.portal = self.layer["portal"]\n         self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n@@ -144,8 +143,8 @@ def test_item_reviewState(self):\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u"Page")\n-        self.assertEqual(self.item.Type().domain, u"plone")\n+        self.assertEqual(self.item.Type(), "Page")\n+        self.assertEqual(self.item.Type().domain, "plone")\n \n     def test_appendViewAction(self):\n         # checking that we append the view action to urls when needed\n@@ -178,7 +177,7 @@ class TestIndividualRealContentItems(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIndividualRealContentItems, self).setUp()\n+        super().setUp()\n         self.portal = self.layer["portal"]\n         self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n@@ -243,8 +242,8 @@ def test_item_reviewState(self):\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u"Page")\n-        self.assertEqual(self.item.Type().domain, u"plone")\n+        self.assertEqual(self.item.Type(), "Page")\n+        self.assertEqual(self.item.Type().domain, "plone")\n \n     def test_item_ContentTypeClass(self):\n         # checking the that we print nice strings for css class identifiers\n@@ -274,7 +273,7 @@ class TestFolderContents(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestFolderContents, self).setUp()\n+        super().setUp()\n         self.portal = self.layer["portal"]\n         self.folder = self.portal["test-folder"]\n \n@@ -337,11 +336,11 @@ class TestCollectionResults(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestCollectionResults, self).setUp()\n+        super().setUp()\n         self.portal = self.layer["portal"]\n         self.folder = self.portal["test-folder"]\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Collection", "collection", title=u"Col")\n+        self.portal.invokeFactory("Collection", "collection", title="Col")\n         collection = self.portal.collection\n         collection.query = [\n             {\ndiff --git a/setup.py b/setup.py\nindex f956497..3e55cfb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,7 +10,7 @@ def read(*rnames):\n \n version = "2.0.8.dev0"\n \n-long_description = "{0}\\n\\n{1}".format(read("README.rst"), read("CHANGES.rst"))\n+long_description = "{}\\n\\n{}".format(read("README.rst"), read("CHANGES.rst"))\n \n setup(\n     name="plone.app.contentlisting",\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T00:03:45+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/3b6a3902e03cfadadf8c64be26aac11ea40b43fc

use plone.base

Files changed:
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/integration.rst
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

b"diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 351a2df..cab5f87 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -2,10 +2,10 @@\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces import INavigationSchema\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INavigationSchema\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zope.component import getUtility\n from zope.component import queryUtility\ndiff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py\nindex 0774600..d7d6c27 100644\n--- a/plone/app/contentlisting/realobject.py\n+++ b/plone/app/contentlisting/realobject.py\n@@ -2,10 +2,10 @@\n from Acquisition import aq_get\n from plone.app.contentlisting.contentlisting import BaseContentListingObject\n from plone.app.contentlisting.interfaces import IContentListingObject\n+from plone.base.utils import human_readable_size\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import human_readable_size\n from zope.interface import implementer\n \n \ndiff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst\nindex 154e281..604eea6 100644\n--- a/plone/app/contentlisting/tests/integration.rst\n+++ b/plone/app/contentlisting/tests/integration.rst\n@@ -115,9 +115,8 @@ Some types may require '/view' appended to their URLs. Currently these don't\n \n By altering portal_properties, we can make this true for Documents\n \n-    >>> import six\n     >>> registry = portal.portal_registry\n-    >>> registry['plone.types_use_view_action_in_listings'] = [six.text_type(frontpage.portal_type)]\n+    >>> registry['plone.types_use_view_action_in_listings'] = [str(frontpage.portal_type)]\n \n     >>> frontpage.appendViewAction()\n     '/view'\n@@ -216,7 +215,7 @@ We can also exclude anything of a particular type using the displayed type setti\n     >>> from plone.registry.interfaces import IRegistry\n     >>> from zope.component import getUtility\n     >>> registry = getUtility(IRegistry)\n-    >>> from Products.CMFPlone.interfaces import INavigationSchema\n+    >>> from plone.base.interfaces import INavigationSchema\n     >>> navigation_settings = registry.forInterface(\n     ...     INavigationSchema,\n     ...     prefix='plone'\ndiff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex 202425c..0da51e5 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -1,6 +1,4 @@\n-from plone.app.contentlisting.tests.base import (\n-    CONTENTLISTING_FUNCTIONAL_TESTING,  # NOQA: E501\n-)\n+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex e2a3745..0a72fdb 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -1,8 +1,6 @@\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n-from plone.app.contentlisting.tests.base import (\n-    CONTENTLISTING_FUNCTIONAL_TESTING,  # NOQA: E501\n-)\n+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.batching.interfaces import IBatch\n"

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T00:11:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/feafd4ac0140e3d760c51502336a5fdb4ab91665

minimal manual overhaul

Files changed:
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/realobject.py

b'diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex 46698e3..c33f298 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -57,8 +57,7 @@ def getDataOrigin(self):\n         # the real object.\n         if self._cached_realobject is not None:\n             return self._cached_realobject\n-        else:\n-            return self._brain\n+        return self._brain\n \n     def getObject(self):\n         # Get the real, underlying object.\n@@ -85,7 +84,7 @@ def uuid(self):\n         # content objects might have UID and might not.\n         brain_uid = getattr(aq_base(self._brain), "UID", None)\n         if brain_uid is not None:\n-            return self._brain.UID\n+            return brain_uid\n         uuid = IUUID(self.getObject(), None)\n         if uuid is not None:\n             return uuid\n@@ -142,8 +141,7 @@ def getUserData(self, username):\n         return userdata\n \n     def Creator(self):\n-        username = self._brain.Creator\n-        return username\n+        return self._brain.Creator\n \n     def Author(self):\n         return self.getUserData(self.Creator())\n@@ -186,8 +184,7 @@ def Language(self):\n         brain_language = getattr(aq_base(self._brain), "Language", None)\n         if brain_language is not None:\n             return self._brain.Language\n-        else:\n-            return self.getObject().Language()\n+        return self.getObject().Language()\n \n     def Rights(self):\n         raise NotImplementedError\ndiff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py\nindex d7d6c27..0579a5b 100644\n--- a/plone/app/contentlisting/realobject.py\n+++ b/plone/app/contentlisting/realobject.py\n@@ -23,9 +23,7 @@ def __init__(self, obj):\n     def __repr__(self):\n         return (\n             "<plone.app.contentlisting.realobject."\n-            "RealContentListingObject instance at {}>".format(\n-                self.getPath(),\n-            )\n+            f"RealContentListingObject instance at {self.getPath()}>"\n         )\n \n     __str__ = __repr__\n@@ -41,8 +39,7 @@ def __getattr__(self, name):\n         obj_name = getattr(aq_base(obj), name, MARKER)\n         if obj_name is not MARKER:\n             return obj_name\n-        else:\n-            raise AttributeError(name)\n+        raise AttributeError(name)\n \n     def getObject(self):\n         return self._realobject\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T00:14:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/8b6b2e355a8658f74ec089fe619670a28554efbd

document changes

Files changed:
A news/43.breaking

b'diff --git a/news/43.breaking b/news/43.breaking\nnew file mode 100644\nindex 0000000..d550e40\n--- /dev/null\n+++ b/news/43.breaking\n@@ -0,0 +1,2 @@\n+Drop Python 2 and Plone 5.2, use plone.base.\n+[jensens]\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T00:21:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/c5525d31b936658625507f1c494f2c5779bf1f7a

fix ZCML for plone.base

Files changed:
M plone/app/contentlisting/configure.zcml

b'diff --git a/plone/app/contentlisting/configure.zcml b/plone/app/contentlisting/configure.zcml\nindex b22ad60..b2644ca 100644\n--- a/plone/app/contentlisting/configure.zcml\n+++ b/plone/app/contentlisting/configure.zcml\n@@ -24,7 +24,7 @@\n \n   <adapter\n       factory=".contentlisting.ContentListing"\n-      for="Products.CMFPlone.PloneBatch.Batch"\n+      for="plone.base.batch.Batch"\n       />\n \n   <adapter\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T02:23:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/563121b4a79923d7ffa95f1fcb679dfb1fb681e5

depend on plone.base

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 3e55cfb..9e080c3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = "2.0.8.dev0"\n+version = "3.0.0.dev0"\n \n long_description = "{}\\n\\n{}".format(read("README.rst"), read("CHANGES.rst"))\n \n@@ -21,12 +21,9 @@ def read(*rnames):\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: Core",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n@@ -42,6 +39,7 @@ def read(*rnames):\n     zip_safe=False,\n     install_requires=[\n         "setuptools",\n+        "plone.base",\n     ],\n     extras_require={\n         "test": [\n'

Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2022-05-01T10:57:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentlisting/commit/1acc6af4c0784e2bf0d9b16e18aee1636c22b6ae

Merge pull request #43 from plone/plone-base-overhaul

Plone base overhaul

Files changed:
A news/43.breaking
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentlisting/__init__.py
M plone/app/contentlisting/browser.py
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/configure.zcml
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/interfaces.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/integration.rst
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py
M setup.cfg
M setup.py

b'diff --git a/news/43.breaking b/news/43.breaking\nnew file mode 100644\nindex 0000000..d550e40\n--- /dev/null\n+++ b/news/43.breaking\n@@ -0,0 +1,2 @@\n+Drop Python 2 and Plone 5.2, use plone.base.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/contentlisting/__init__.py b/plone/app/contentlisting/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/contentlisting/__init__.py\n+++ b/plone/app/contentlisting/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/contentlisting/browser.py b/plone/app/contentlisting/browser.py\nindex 2116ec4..02f69f5 100644\n--- a/plone/app/contentlisting/browser.py\n+++ b/plone/app/contentlisting/browser.py\n@@ -1,44 +1,41 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentlisting.interfaces import IContentListing\n from Products.CMFCore.utils import getToolByName\n from zope.publisher.browser import BrowserView\n \n \n class FolderListing(BrowserView):\n-\n     def __call__(self, batch=False, b_size=20, b_start=0, orphan=0, **kw):\n         query = {}\n         query.update(kw)\n \n-        query[\'path\'] = {\n-            \'query\': \'/\'.join(self.context.getPhysicalPath()),\n-            \'depth\': 1,\n+        query["path"] = {\n+            "query": "/".join(self.context.getPhysicalPath()),\n+            "depth": 1,\n         }\n \n         # if we don\'t have asked explicitly for other sorting, we\'ll want\n         # it by position in parent\n-        if \'sort_on\' not in query:\n-            query[\'sort_on\'] = \'getObjPositionInParent\'\n+        if "sort_on" not in query:\n+            query["sort_on"] = "getObjPositionInParent"\n \n         # Provide batching hints to the catalog\n         if batch:\n-            query[\'b_start\'] = b_start\n-            query[\'b_size\'] = b_size + orphan\n+            query["b_start"] = b_start\n+            query["b_size"] = b_size + orphan\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         results = catalog(query)\n         return IContentListing(results)\n \n \n class ContentListingCollection(BrowserView):\n-\n     def __call__(self, batch=False, b_size=20, b_start=0, **kw):\n \n-        if \'orphan\' in kw:\n+        if "orphan" in kw:\n             # At the moment, orphan keyword is not supported by\n             # plone.app.contenttypes Collection behavior, nor by\n             # plone.app.querystring\'s querybuilder.\n-            del kw[\'orphan\']\n+            del kw["orphan"]\n \n         res = self.context.results(\n             batch=batch,\ndiff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex 2380545..c33f298 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.contentlisting.contentlisting import BaseContentListingObject\n from plone.app.contentlisting.interfaces import IContentListingObject\n@@ -28,10 +27,12 @@ def __init__(self, brain):\n         self.request = getRequest()\n \n     def __repr__(self):\n-        return \'<plone.app.contentlisting.catalog.\'\\\n-            \'CatalogContentListingObject instance at {0}>\'.format(\n+        return (\n+            "<plone.app.contentlisting.catalog."\n+            "CatalogContentListingObject instance at {}>".format(\n                 self.getPath(),\n             )\n+        )\n \n     __str__ = __repr__\n \n@@ -40,7 +41,7 @@ def __getattr__(self, name):\n         underlying objects without knowing the names of all attributes.\n         """\n \n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             raise AttributeError(name)\n         brain_name = getattr(aq_base(self._brain), name, missing)\n         if brain_name is not missing:\n@@ -56,8 +57,7 @@ def getDataOrigin(self):\n         # the real object.\n         if self._cached_realobject is not None:\n             return self._cached_realobject\n-        else:\n-            return self._brain\n+        return self._brain\n \n     def getObject(self):\n         # Get the real, underlying object.\n@@ -82,9 +82,9 @@ def getURL(self, relative=False):\n \n     def uuid(self):\n         # content objects might have UID and might not.\n-        brain_uid = getattr(aq_base(self._brain), \'UID\', None)\n+        brain_uid = getattr(aq_base(self._brain), "UID", None)\n         if brain_uid is not None:\n-            return self._brain.UID\n+            return brain_uid\n         uuid = IUUID(self.getObject(), None)\n         if uuid is not None:\n             return uuid\n@@ -106,8 +106,8 @@ def Description(self):\n \n     def CroppedDescription(self):\n         registry = queryUtility(IRegistry)\n-        length = registry.get(\'plone.search_results_description_length\')\n-        plone_view = getMultiAdapter((self, self.request), name=\'plone\')\n+        length = registry.get("plone.search_results_description_length")\n+        plone_view = getMultiAdapter((self, self.request), name="plone")\n         return plone_view.cropText(self.Description(), length)\n \n     def Type(self):\n@@ -120,29 +120,28 @@ def listCreators(self):\n         return self._brain.listCreators\n \n     def getUserData(self, username):\n-        _usercache = self.request.get(\'usercache\', None)\n+        _usercache = self.request.get("usercache", None)\n         if _usercache is None:\n-            self.request.set(\'usercache\', {})\n+            self.request.set("usercache", {})\n             _usercache = {}\n         userdata = _usercache.get(username, None)\n         if userdata is None:\n-            membershiptool = getToolByName(self._brain, \'portal_membership\')\n+            membershiptool = getToolByName(self._brain, "portal_membership")\n             userdata = membershiptool.getMemberInfo(self._brain.Creator)\n             if not userdata:\n                 userdata = {\n-                    \'username\': username,\n-                    \'description\': \'\',\n-                    \'language\': \'\',\n-                    \'home_page\': \'/HOMEPAGEURL\',\n-                    \'location\': \'\',\n-                    \'fullname\': username,\n+                    "username": username,\n+                    "description": "",\n+                    "language": "",\n+                    "home_page": "/HOMEPAGEURL",\n+                    "location": "",\n+                    "fullname": username,\n                 }\n             self.request.usercache[username] = userdata\n         return userdata\n \n     def Creator(self):\n-        username = self._brain.Creator\n-        return username\n+        return self._brain.Creator\n \n     def Author(self):\n         return self.getUserData(self.Creator())\n@@ -182,11 +181,10 @@ def Identifier(self):\n \n     def Language(self):\n         # The language of the content.\n-        brain_language = getattr(aq_base(self._brain), \'Language\', None)\n+        brain_language = getattr(aq_base(self._brain), "Language", None)\n         if brain_language is not None:\n             return self._brain.Language\n-        else:\n-            return self.getObject().Language()\n+        return self.getObject().Language()\n \n     def Rights(self):\n         raise NotImplementedError\ndiff --git a/plone/app/contentlisting/configure.zcml b/plone/app/contentlisting/configure.zcml\nindex b22ad60..b2644ca 100644\n--- a/plone/app/contentlisting/configure.zcml\n+++ b/plone/app/contentlisting/configure.zcml\n@@ -24,7 +24,7 @@\n \n   <adapter\n       factory=".contentlisting.ContentListing"\n-      for="Products.CMFPlone.PloneBatch.Batch"\n+      for="plone.base.batch.Batch"\n       />\n \n   <adapter\ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 2dc6588..cab5f87 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -1,13 +1,11 @@\n-# -*- coding: utf-8 -*-\n-\n from Acquisition import aq_base\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces import INavigationSchema\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INavigationSchema\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -17,18 +15,18 @@\n \n \n @implementer(IContentListing)\n-class ContentListing(object):\n+class ContentListing:\n     """An IContentListing implementation based on sequences of objects."""\n \n     def __init__(self, sequence):\n         self._basesequence = sequence\n \n     def __getitem__(self, index):\n-        """`x.__getitem__(index)` <==> `x[index]`\n-        """\n+        """`x.__getitem__(index)` <==> `x[index]`"""\n         if isinstance(index, slice):\n             return IContentListing(\n-                self._basesequence[index.start:index.stop:index.step])\n+                self._basesequence[index.start : index.stop : index.step]\n+            )\n         return IContentListingObject(self._basesequence[index])\n \n     def __len__(self):\n@@ -40,7 +38,7 @@ def __len__(self):\n     @property\n     def actual_result_count(self):\n         bs = self._basesequence\n-        return getattr(bs, \'actual_result_count\', len(bs))\n+        return getattr(bs, "actual_result_count", len(bs))\n \n     def __iter__(self):\n         """Let the sequence be iterable and whenever we look at an object, it\n@@ -106,7 +104,7 @@ def __getslice__(self, i, j):\n         return IContentListing(self._basesequence[i:j])\n \n \n-class BaseContentListingObject(object):\n+class BaseContentListingObject:\n     """A baseclass for the different types of contentlistingobjects.\n \n     To avoid duplication of the stuff that is not implementation-specific.\n@@ -123,13 +121,13 @@ def __hash__(self):\n     def ContentTypeClass(self):\n         # A normalised type name that identifies the object in listings.\n         # Used for CSS styling.\n-        return \'contenttype-\' + queryUtility(IIDNormalizer).normalize(\n+        return "contenttype-" + queryUtility(IIDNormalizer).normalize(\n             self.PortalType(),\n         )\n \n     def ReviewStateClass(self):\n         # A normalised review state string for CSS styling use in listings.\n-        return \'state-\' + queryUtility(IIDNormalizer).normalize(\n+        return "state-" + queryUtility(IIDNormalizer).normalize(\n             self.review_state(),\n         )\n \n@@ -137,25 +135,25 @@ def appendViewAction(self):\n         # Decide whether to produce a string /view to append to links in\n         # results listings.\n         registry = getUtility(IRegistry)\n-        types = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        types = registry.get("plone.types_use_view_action_in_listings", [])\n         if self.portal_type in types:\n-            return \'/view\'\n-        return \'\'\n+            return "/view"\n+        return ""\n \n     def isVisibleInNav(self):\n         # True, if this item should be visible in navigation trees.\n-        exclude_from_nav_attr = getattr(self, \'exclude_from_nav\', None)\n+        exclude_from_nav_attr = getattr(self, "exclude_from_nav", None)\n         if exclude_from_nav_attr is not None and (\n-                self.exclude_from_nav()\n-                if callable(self.exclude_from_nav)\n-                else self.exclude_from_nav\n+            self.exclude_from_nav()\n+            if callable(self.exclude_from_nav)\n+            else self.exclude_from_nav\n         ):\n             return False\n \n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n             INavigationSchema,\n-            prefix=\'plone\',\n+            prefix="plone",\n         )\n         if self.portal_type not in navigation_settings.displayed_types:\n             return False\n@@ -166,12 +164,12 @@ def MimeTypeIcon(self):\n         mimeicon = None\n         navroot = getNavigationRoot(self._brain)\n         contenttype = aq_base(\n-            getattr(self._brain, \'mime_type\', None),\n+            getattr(self._brain, "mime_type", None),\n         )\n         if contenttype:\n             mtt = getToolByName(\n                 self._brain,\n-                \'mimetypes_registry\',\n+                "mimetypes_registry",\n             )\n             ctype = mtt.lookup(contenttype)\n             if ctype:\ndiff --git a/plone/app/contentlisting/interfaces.py b/plone/app/contentlisting/interfaces.py\nindex 3f77c29..78468ca 100644\n--- a/plone/app/contentlisting/interfaces.py\n+++ b/plone/app/contentlisting/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IDublinCore\n from zope.interface.common.sequence import IReadSequence\n \n@@ -88,6 +87,6 @@ def ContentTypeClass():\n         """\n \n     def MimeTypeIcon():\n-        """ return mimetype icon from mimetype registry if contenttype is\n+        """return mimetype icon from mimetype registry if contenttype is\n         File else None\n         """\ndiff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py\nindex 2de10a0..0579a5b 100644\n--- a/plone/app/contentlisting/realobject.py\n+++ b/plone/app/contentlisting/realobject.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_get\n from plone.app.contentlisting.contentlisting import BaseContentListingObject\n from plone.app.contentlisting.interfaces import IContentListingObject\n+from plone.base.utils import human_readable_size\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import human_readable_size\n from zope.interface import implementer\n \n \n@@ -15,18 +14,17 @@\n \n @implementer(IContentListingObject)\n class RealContentListingObject(BaseContentListingObject):\n-    """A content object representation wrapping a real content object.\n-    """\n+    """A content object representation wrapping a real content object."""\n \n     def __init__(self, obj):\n         self._realobject = obj\n-        self.request = aq_get(obj, \'REQUEST\')\n+        self.request = aq_get(obj, "REQUEST")\n \n     def __repr__(self):\n-        return \'<plone.app.contentlisting.realobject.\'\\\n-            \'RealContentListingObject instance at {0}>\'.format(\n-                self.getPath(),\n-            )\n+        return (\n+            "<plone.app.contentlisting.realobject."\n+            f"RealContentListingObject instance at {self.getPath()}>"\n+        )\n \n     __str__ = __repr__\n \n@@ -35,14 +33,13 @@ def __getattr__(self, name):\n         the real underlying objects without knowing the names of all\n         attributes.\n         """\n-        if name.startswith(\'_\'):\n+        if name.startswith("_"):\n             raise AttributeError(name)\n         obj = self.getObject()\n         obj_name = getattr(aq_base(obj), name, MARKER)\n         if obj_name is not MARKER:\n             return obj_name\n-        else:\n-            raise AttributeError(name)\n+        raise AttributeError(name)\n \n     def getObject(self):\n         return self._realobject\n@@ -55,7 +52,7 @@ def getDataOrigin(self):\n \n     # a base set of elements that are needed but not defined in dublin core\n     def getPath(self):\n-        return \'/\'.join(self.getObject().getPhysicalPath())\n+        return "/".join(self.getObject().getPhysicalPath())\n \n     def getURL(self):\n         return self.getObject().absolute_url()\n@@ -81,27 +78,27 @@ def getSize(self):\n         if primary_field_info is None or not primary_field_info.value:\n             size = 0\n         else:\n-            size = getattr(primary_field_info.value, \'size\', 0)\n+            size = getattr(primary_field_info.value, "size", 0)\n         return human_readable_size(size)\n \n     def review_state(self):\n         obj = self.getObject()\n-        wftool = getToolByName(obj, \'portal_workflow\')\n-        return wftool.getInfoFor(obj, \'review_state\', default=None)\n+        wftool = getToolByName(obj, "portal_workflow")\n+        return wftool.getInfoFor(obj, "review_state", default=None)\n \n     def Type(self):\n         # Dublin Core element - Object type.\n         obj = self.getObject()\n-        typestool = getToolByName(obj, \'portal_types\')\n+        typestool = getToolByName(obj, "portal_types")\n         ti = typestool.getTypeInfo(obj)\n         if ti is not None:\n             return ti.Title()\n         return obj.meta_type\n \n-# Needed: A method Type() that returns the same as is cataloged as Type.\n-# Currently Type() returns different values depending on the data source being\n-# a brain or a real object. Probably needed. Support for all the attributes\n-# from the indexablemetadata wrappers.\n+    # Needed: A method Type() that returns the same as is cataloged as Type.\n+    # Currently Type() returns different values depending on the data source being\n+    # a brain or a real object. Probably needed. Support for all the attributes\n+    # from the indexablemetadata wrappers.\n \n     def PortalType(self):\n         obj = self.getObject()\ndiff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py\nindex 1dcce31..191fd13 100644\n--- a/plone/app/contentlisting/tests/base.py\n+++ b/plone/app/contentlisting/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -10,12 +9,14 @@\n \n class ContentListingLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.app.layout\n+\n         self.loadZCML(package=plone.app.layout)\n         import plone.app.contentlisting\n+\n         self.loadZCML(package=plone.app.contentlisting)\n \n \n@@ -24,29 +25,30 @@ def setUpZope(self, app, configurationContext):\n \n class ContentListingIntegrationLayer(PloneSandboxLayer):\n \n-    defaultBases = (CONTENTLISTING_FIXTURE, )\n+    defaultBases = (CONTENTLISTING_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        wftool = getToolByName(portal, \'portal_workflow\')\n-        wftool.setDefaultChain(\'simple_publication_workflow\')\n-\n-        portal.invokeFactory(\'Folder\', \'test-folder\')\n-        portal.invokeFactory(\'Document\', \'front-page\')\n-        portal.invokeFactory(\'Folder\', \'news\')\n-        wftool.doActionFor(portal.news, \'publish\')\n-        portal.news.invokeFactory(\'News Item\', \'news1\')\n-        setRoles(portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        wftool = getToolByName(portal, "portal_workflow")\n+        wftool.setDefaultChain("simple_publication_workflow")\n+\n+        portal.invokeFactory("Folder", "test-folder")\n+        portal.invokeFactory("Document", "front-page")\n+        portal.invokeFactory("Folder", "news")\n+        wftool.doActionFor(portal.news, "publish")\n+        portal.news.invokeFactory("News Item", "news1")\n+        setRoles(portal, TEST_USER_ID, ["Member"])\n         from Products.CMFCore.indexing import processQueue\n+\n         processQueue()\n \n \n CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()\n CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),\n-    name=\'ContentListing:Integration\',\n+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE,),\n+    name="ContentListing:Integration",\n )\n CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),\n-    name=\'ContentListing:Functional\',\n+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE,),\n+    name="ContentListing:Functional",\n )\ndiff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst\nindex 154e281..604eea6 100644\n--- a/plone/app/contentlisting/tests/integration.rst\n+++ b/plone/app/contentlisting/tests/integration.rst\n@@ -115,9 +115,8 @@ Some types may require \'/view\' appended to their URLs. Currently these don\'t\n \n By altering portal_properties, we can make this true for Documents\n \n-    >>> import six\n     >>> registry = portal.portal_registry\n-    >>> registry[\'plone.types_use_view_action_in_listings\'] = [six.text_type(frontpage.portal_type)]\n+    >>> registry[\'plone.types_use_view_action_in_listings\'] = [str(frontpage.portal_type)]\n \n     >>> frontpage.appendViewAction()\n     \'/view\'\n@@ -216,7 +215,7 @@ We can also exclude anything of a particular type using the displayed type setti\n     >>> from plone.registry.interfaces import IRegistry\n     >>> from zope.component import getUtility\n     >>> registry = getUtility(IRegistry)\n-    >>> from Products.CMFPlone.interfaces import INavigationSchema\n+    >>> from plone.base.interfaces import INavigationSchema\n     >>> navigation_settings = registry.forInterface(\n     ...     INavigationSchema,\n     ...     prefix=\'plone\'\ndiff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex 838db03..0da51e5 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -1,6 +1,4 @@\n-# -*- coding: utf-8 -*-\n-\n-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n@@ -12,10 +10,12 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    \'tests/integration.rst\',\n-                    package=\'plone.app.contentlisting\',\n-                    optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,  # NOQA: E501\n+                    "tests/integration.rst",\n+                    package="plone.app.contentlisting",\n+                    optionflags=doctest.NORMALIZE_WHITESPACE\n+                    | doctest.ELLIPSIS,  # NOQA: E501\n                 ),\n                 layer=CONTENTLISTING_FUNCTIONAL_TESTING,\n             ),\n-        ])\n+        ]\n+    )\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex 525ce94..0a72fdb 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n-from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.batching.interfaces import IBatch\n@@ -15,34 +14,36 @@ class TestSetup(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestSetup, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n-        self.workflow = getToolByName(self.portal, \'portal_workflow\')\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        super().setUp()\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n+        self.workflow = getToolByName(self.portal, "portal_workflow")\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n     def test_able_to_add_document(self):\n         # just a dummy test to see that the basics are running\n-        new_id = self.folder.invokeFactory(\'Document\', \'mypage\')\n-        self.assertEqual(\'mypage\', new_id)\n+        new_id = self.folder.invokeFactory("Document", "mypage")\n+        self.assertEqual("mypage", new_id)\n \n     def test_simple_contentlisting(self):\n         results = []\n         listing = IContentListing(results)\n         from plone.app.contentlisting.contentlisting import ContentListing\n+\n         self.assertTrue(isinstance(listing, ContentListing))\n \n     def test_making_contentlisting(self):\n         results = self.catalog()\n         listing = IContentListing(results)\n         from plone.app.contentlisting.contentlisting import ContentListing\n+\n         self.assertTrue(isinstance(listing, ContentListing))\n \n     def test_making_contentlistingobjects(self):\n         results = self.catalog()\n         listing = IContentListing(results)\n-        from plone.app.contentlisting.catalog import \\\n-            CatalogContentListingObject\n+        from plone.app.contentlisting.catalog import CatalogContentListingObject\n+\n         self.assertTrue(isinstance(listing[0], CatalogContentListingObject))\n \n     def test_listing_interface(self):\n@@ -66,34 +67,34 @@ class TestIndividualCatalogContentItems(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIndividualCatalogContentItems, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        super().setUp()\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'mypage\',\n-            title=\'My Page\',\n-            description=\'blah\',\n+            "Document",\n+            "mypage",\n+            title="My Page",\n+            description="blah",\n         )\n-        self.item = self.folder.restrictedTraverse(\'@@folderListing\')()[0]\n+        self.item = self.folder.restrictedTraverse("@@folderListing")()[0]\n         self.realitem = self.folder.mypage\n \n     def test_printing_item(self):\n         self.assertEqual(\n             repr(self.item),\n-            \'<plone.app.contentlisting.catalog.CatalogContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.catalog.CatalogContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n         self.assertEqual(\n             str(self.item),\n-            \'<plone.app.contentlisting.catalog.CatalogContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.catalog.CatalogContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n \n     def test_special_getattr_with_underscore(self):\n         # looking up attributes starting with _ should always raise\n         # AttributeError\n-        self.assertRaises(AttributeError, self.item.__getattr__, \'foo\')\n+        self.assertRaises(AttributeError, self.item.__getattr__, "foo")\n \n     def test_special_getattr_from_brain(self):\n         # Asking for an attribute not in the contentlistingobject, should\n@@ -101,63 +102,63 @@ def test_special_getattr_from_brain(self):\n         self.assertEqual(self.item.is_folderish, False)\n         self.assertTrue(\n             repr(self.item.getDataOrigin())[:35],\n-            \'<Products.ZCatalog.Catalog.mybrains\',\n+            "<Products.ZCatalog.Catalog.mybrains",\n         )\n \n     def test_special_getattr_from_object(self):\n         # Asking for an attribute not in the contentlistingobject, should\n         # defer lookup to the brain\n-        self.assertEqual(self.item.absolute_url(), \'\')\n+        self.assertEqual(self.item.absolute_url(), "")\n         self.assertEqual(\n             repr(self.item.getDataOrigin()),\n-            \'<Document at /plone/test-folder/mypage>\',\n+            "<Document at /plone/test-folder/mypage>",\n         )\n \n     def test_item_Title(self):\n-        self.assertEqual(self.item.Title(), \'My Page\')\n+        self.assertEqual(self.item.Title(), "My Page")\n         self.assertEqual(self.item.Title(), self.realitem.Title())\n \n     def test_item_Description(self):\n-        self.assertEqual(self.item.Description(), \'blah\')\n+        self.assertEqual(self.item.Description(), "blah")\n         self.assertEqual(self.item.Description(), self.realitem.Description())\n \n     def test_item_Creator(self):\n-        self.assertEqual(self.item.Creator(), \'test_user_1_\')\n+        self.assertEqual(self.item.Creator(), "test_user_1_")\n \n     def test_item_getURL(self):\n         self.assertEqual(\n             self.item.getURL(),\n-            \'http://nohost/plone/test-folder/mypage\',\n+            "http://nohost/plone/test-folder/mypage",\n         )\n         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())\n \n     def test_item_getSize(self):\n-        self.assertEqual(self.item.getSize().upper(), \'0 KB\')\n+        self.assertEqual(self.item.getSize().upper(), "0 KB")\n \n     def test_item_reviewState(self):\n-        wftool = getToolByName(self.realitem, \'portal_workflow\')\n-        wf = wftool.getInfoFor(self.realitem, \'review_state\')\n+        wftool = getToolByName(self.realitem, "portal_workflow")\n+        wf = wftool.getInfoFor(self.realitem, "review_state")\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u\'Page\')\n-        self.assertEqual(self.item.Type().domain, u\'plone\')\n+        self.assertEqual(self.item.Type(), "Page")\n+        self.assertEqual(self.item.Type().domain, "plone")\n \n     def test_appendViewAction(self):\n         # checking that we append the view action to urls when needed\n-        self.assertEqual(self.item.appendViewAction(), \'\')\n+        self.assertEqual(self.item.appendViewAction(), "")\n         self.folder.invokeFactory(\n-            \'Image\',\n-            \'myimage\',\n-            title=\'My Image\',\n-            description=\'blah\',\n+            "Image",\n+            "myimage",\n+            title="My Image",\n+            description="blah",\n         )\n-        self.item = self.folder.restrictedTraverse(\'@@contentlisting\')()[1]\n-        self.assertEqual(self.item.appendViewAction(), \'/view\')\n+        self.item = self.folder.restrictedTraverse("@@contentlisting")()[1]\n+        self.assertEqual(self.item.appendViewAction(), "/view")\n \n     def test_item_ContentTypeClass(self):\n         # checking the that we print nice strings for css class identifiers\n-        self.assertEqual(self.item.ContentTypeClass(), \'contenttype-document\')\n+        self.assertEqual(self.item.ContentTypeClass(), "contenttype-document")\n \n     def test_comparision(self):\n         self.assertEqual(IContentListingObject(self.folder.mypage), self.item)\n@@ -166,8 +167,7 @@ def test_containment(self):\n         # we can test containment for normal content objects against\n         # contentlistings\n         self.assertTrue(\n-            self.folder.mypage in\n-            self.folder.restrictedTraverse(\'@@contentlisting\')(),\n+            self.folder.mypage in self.folder.restrictedTraverse("@@contentlisting")(),\n         )\n \n \n@@ -175,14 +175,14 @@ class TestIndividualRealContentItems(unittest.TestCase):\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestIndividualRealContentItems, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        super().setUp()\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n         self.folder.invokeFactory(\n-            \'Document\',\n-            \'mypage\',\n-            title=\'My Page\',\n-            description=\'blah\',\n+            "Document",\n+            "mypage",\n+            title="My Page",\n+            description="blah",\n         )\n         self.item = IContentListingObject(self.folder.mypage)\n         self.realitem = self.folder.mypage\n@@ -190,62 +190,62 @@ def setUp(self):\n     def test_printing_item(self):\n         self.assertEqual(\n             repr(self.item),\n-            \'<plone.app.contentlisting.realobject.RealContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.realobject.RealContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n         self.assertEqual(\n             str(self.item),\n-            \'<plone.app.contentlisting.realobject.RealContentListingObject \'\n-            \'instance at /plone/test-folder/mypage>\',\n+            "<plone.app.contentlisting.realobject.RealContentListingObject "\n+            "instance at /plone/test-folder/mypage>",\n         )\n \n     def test_special_getattr_with_underscore(self):\n         # looking up attributes starting with _ should always raise\n         # AttributeError\n-        self.assertRaises(AttributeError, self.item.__getattr__, \'foo\')\n+        self.assertRaises(AttributeError, self.item.__getattr__, "foo")\n \n     def test_special_getattr_from_object(self):\n         # Asking for an attribute not in the contentlistingobject, should\n         # defer lookup to the brain\n-        self.assertEqual(self.item.absolute_url(), \'\')\n+        self.assertEqual(self.item.absolute_url(), "")\n         self.assertEqual(\n             repr(self.item.getDataOrigin()),\n-            \'<Document at /plone/test-folder/mypage>\',\n+            "<Document at /plone/test-folder/mypage>",\n         )\n \n     def test_item_Title(self):\n-        self.assertEqual(self.item.Title(), \'My Page\')\n+        self.assertEqual(self.item.Title(), "My Page")\n         self.assertEqual(self.item.Title(), self.realitem.Title())\n \n     def test_item_Description(self):\n-        self.assertEqual(self.item.Description(), \'blah\')\n+        self.assertEqual(self.item.Description(), "blah")\n         self.assertEqual(self.item.Description(), self.realitem.Description())\n \n     def test_item_Creator(self):\n-        self.assertEqual(self.item.Creator(), \'test_user_1_\')\n+        self.assertEqual(self.item.Creator(), "test_user_1_")\n \n     def test_item_getURL(self):\n         self.assertEqual(\n             self.item.getURL(),\n-            \'http://nohost/plone/test-folder/mypage\',\n+            "http://nohost/plone/test-folder/mypage",\n         )\n         self.assertEqual(self.item.getURL(), self.realitem.absolute_url())\n \n     def test_item_getSize(self):\n-        self.assertEqual(self.item.getSize().upper(), \'0 KB\')\n+        self.assertEqual(self.item.getSize().upper(), "0 KB")\n \n     def test_item_reviewState(self):\n-        wftool = getToolByName(self.realitem, \'portal_workflow\')\n-        wf = wftool.getInfoFor(self.realitem, \'review_state\')\n+        wftool = getToolByName(self.realitem, "portal_workflow")\n+        wf = wftool.getInfoFor(self.realitem, "review_state")\n         self.assertEqual(self.item.review_state(), wf)\n \n     def test_item_Type(self):\n-        self.assertEqual(self.item.Type(), u\'Page\')\n-        self.assertEqual(self.item.Type().domain, u\'plone\')\n+        self.assertEqual(self.item.Type(), "Page")\n+        self.assertEqual(self.item.Type().domain, "plone")\n \n     def test_item_ContentTypeClass(self):\n         # checking the that we print nice strings for css class identifiers\n-        self.assertEqual(self.item.ContentTypeClass(), \'contenttype-document\')\n+        self.assertEqual(self.item.ContentTypeClass(), "contenttype-document")\n \n     def test_item_uuid(self):\n         uuid = self.item.uuid()\n@@ -267,37 +267,38 @@ class TestFolderContents(unittest.TestCase):\n     """Testing that the folder contents browserview works and behaves\n     as it should.\n     """\n+\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestFolderContents, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n+        super().setUp()\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n \n     def test_empty_folder_contents(self):\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertEqual(len(contentlisting), 0)\n         self.assertEqual(contentlisting.actual_result_count, 0)\n \n     def test_item_in_folder_contents(self):\n         # adding a new page, adds to the length of folder contents\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n \n     def test_folder_contents(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")()\n         self.assertTrue(verifyObject(IContentListing, contentlisting))\n \n     def test_batching_folder_contents(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Document\', \'mypage\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        self.folder.invokeFactory("Document", "mypage")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -307,9 +308,9 @@ def test_batching_folder_contents(self):\n     def test_batching_folder_contents_2(self):\n         # call the generic folder contents browserview. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        new_id = self.folder.invokeFactory(\'Document\', \'mypage\')\n-        new_id2 = self.folder.invokeFactory(\'Document\', \'mypage2\')\n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        new_id = self.folder.invokeFactory("Document", "mypage")\n+        new_id2 = self.folder.invokeFactory("Document", "mypage2")\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -317,7 +318,7 @@ def test_batching_folder_contents_2(self):\n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 2)\n \n-        contentlisting = self.folder.restrictedTraverse(\'@@contentlisting\')(\n+        contentlisting = self.folder.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n             b_start=1,\n@@ -328,23 +329,23 @@ def test_batching_folder_contents_2(self):\n \n \n class TestCollectionResults(unittest.TestCase):\n-    """Test, if the @@contentlisting view also works for Collections.\n-    """\n+    """Test, if the @@contentlisting view also works for Collections."""\n+\n     layer = CONTENTLISTING_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        super(TestCollectionResults, self).setUp()\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'test-folder\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Collection\', \'collection\', title=u\'Col\')\n+        super().setUp()\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["test-folder"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Collection", "collection", title="Col")\n         collection = self.portal.collection\n         collection.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.selection.any\',\n-                \'v\': [\'Event\', \'Event\'],\n-             },\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.selection.any",\n+                "v": ["Event", "Event"],\n+            },\n         ]\n         collection.reindexObject()\n         self.col = collection\n@@ -352,32 +353,32 @@ def setUp(self):\n     def test_collection_results_is_contentlisting(self):\n         # call the generic contentlisting view. Check that it makes results\n         # a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")()\n \n         self.assertTrue(verifyObject(IContentListing, contentlisting))\n \n     def test_filtering_collection_results_to_empty(self):\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n-            portal_type=\'NotExistent\',\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n+            portal_type="NotExistent",\n         )\n \n         self.assertEqual(len(contentlisting), 0)\n         self.assertEqual(contentlisting.actual_result_count, 0)\n \n     def test_filtering_collection_results_to_news_items(self):\n-        self.folder.invokeFactory(\'Link\', \'mylink\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n-            portal_type=\'Link\',\n+        self.folder.invokeFactory("Link", "mylink")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n+            portal_type="Link",\n         )\n \n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n-        self.assertEqual(contentlisting[0].portal_type, \'Link\')\n+        self.assertEqual(contentlisting[0].portal_type, "Link")\n \n     def test_item_in_collection_results(self):\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')()\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")()\n \n         self.assertEqual(len(contentlisting), 1)\n         self.assertEqual(contentlisting.actual_result_count, 1)\n@@ -385,8 +386,8 @@ def test_item_in_collection_results(self):\n     def test_batching_collection_results(self):\n         # call the contentlisting view. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        self.folder.invokeFactory(\'Event\', \'myevent\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        self.folder.invokeFactory("Event", "myevent")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -399,9 +400,9 @@ def test_batching_collection_results(self):\n     def test_batching_collection_results_2(self):\n         # call the contentlisting view. Check that it makes\n         # the results a contentlisting, regardless of batching\n-        new_id = self.folder.invokeFactory(\'Event\', \'myevent\')\n-        new_id2 = self.folder.invokeFactory(\'Event\', \'myevent2\')\n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        new_id = self.folder.invokeFactory("Event", "myevent")\n+        new_id2 = self.folder.invokeFactory("Event", "myevent2")\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n         )\n@@ -411,7 +412,7 @@ def test_batching_collection_results_2(self):\n         self.assertEqual(len(contentlisting), 2)\n         self.assertEqual(contentlisting.has_next, True)\n \n-        contentlisting = self.col.restrictedTraverse(\'@@contentlisting\')(\n+        contentlisting = self.col.restrictedTraverse("@@contentlisting")(\n             batch=True,\n             b_size=1,\n             b_start=1,\n@@ -425,6 +426,7 @@ def test_batching_collection_results_2(self):\n \n def test_suite():\n     import unittest\n+\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(TestSetup))\n     suite.addTest(unittest.makeSuite(TestIndividualCatalogContentItems))\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..b616d8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,9 @@\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 92e9f03..9e080c3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -7,15 +7,13 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n-version = \'2.0.8.dev0\'\n \n-long_description = \'{0}\\n\\n{1}\'.format(\n-    read(\'README.rst\'),\n-    read(\'CHANGES.rst\')\n-)\n+version = "3.0.0.dev0"\n+\n+long_description = "{}\\n\\n{}".format(read("README.rst"), read("CHANGES.rst"))\n \n setup(\n-    name=\'plone.app.contentlisting\',\n+    name="plone.app.contentlisting",\n     version=version,\n     description="Listing of content for the Plone CMS",\n     long_description=long_description,\n@@ -23,32 +21,30 @@ def read(*rnames):\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: Core",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'content list Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.contentlisting\',\n-    license=\'GPL version 2\',\n+    keywords="content list Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.contentlisting",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n+        "setuptools",\n+        "plone.base",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n+        "test": [\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n         ],\n     },\n     entry_points="""\n'

