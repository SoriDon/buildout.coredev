Repository: plone.scale


Branch: refs/heads/master
Date: 2017-06-19T10:03:26+02:00
Author: Daniel Havlik (dhavlik) <dh@gocept.com>
Commit: https://github.com/plone/plone.scale/commit/fceec22438266ab93d0250ccbee07ac9dac4f0af

python 3 compatibility

Files changed:
M CHANGES.rst
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e289b70..752dadf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Python 3 compatibility.
+  [dhavlik]
 
 Bug fixes:
 
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index cd3d5d4..be4a52a 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -1,11 +1,26 @@
 # -*- coding: utf-8 -*-
-from cStringIO import StringIO
-
 import PIL.Image
 import PIL.ImageFile
+import sys
 import warnings
 
 
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import BytesIO as StringIO
+
+
+def none_as_int(the_int):
+    """For python 3 compatibility, to make int vs. none comparison possible
+    without changing the algorithms below.
+
+    This should mimic python2 behaviour."""
+    if the_int is None:
+        return -sys.maxsize
+    return the_int
+
+
 # Set a larger buffer size. This fixes problems with jpeg decoding.
 # See http://mail.python.org/pipermail/image-sig/1999-August/000816.html for
 # details.
@@ -34,10 +49,9 @@ def scaleImage(image, width=None, height=None, direction='down',
     image. This is needed to make sure alpha channel information is
     not lost, which JPEG does not support.
     """
-    if isinstance(image, str):
+    if isinstance(image, (bytes, str)):
         image = StringIO(image)
     image = PIL.Image.open(image)
-
     # When we create a new image during scaling we loose the format
     # information, so remember it here.
     format_ = image.format
@@ -176,7 +190,8 @@ def scalePILImage(image, width=None, height=None, direction='down'):
     if width is not None:
         factor_width = (float(width) / float(image.size[0]))
 
-    if (factor_height >= 1 or factor_width >= 1) and direction == 'down':
+    if (none_as_int(factor_height) >= 1 or none_as_int(factor_width) >= 1
+            ) and direction == 'down':
         # However, for this example scaling calculations after this block fail
         # badly:
         # - image with size (129, 100)
@@ -196,7 +211,7 @@ def scalePILImage(image, width=None, height=None, direction='down'):
 
     # figure out which axis to scale. One of the factors can still be None!
     # calculate for 'down'
-    use_height = factor_width > factor_height
+    use_height = none_as_int(factor_width) > none_as_int(factor_height)
     if direction == 'up':  # for 'up': invert
         use_height = not use_height
 
diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index ce23092..21bc8d5 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -2,7 +2,7 @@
 from persistent.dict import PersistentDict
 from plone.scale.interfaces import IImageScaleFactory
 from six import integer_types
-from UserDict import DictMixin
+from collections import MutableMapping
 from uuid import uuid4
 from ZODB.POSException import ConflictError
 from zope.annotation import IAnnotations
@@ -108,7 +108,7 @@ def _p_resolveConflict(self, oldState, savedState, newState):
 
 
 @implementer(IImageScaleStorage)
-class AnnotationStorage(DictMixin):
+class AnnotationStorage(MutableMapping):
     """ An abstract storage for image scale data using annotations and
         implementing :class:`IImageScaleStorage`. Image data is stored as an
         annotation on the object container, i.e. the image. This is needed
@@ -273,6 +273,9 @@ def __delitem__(self, uid):
     def __iter__(self):
         return iter(self.storage)
 
+    def __len__(self):
+        return len(self.keys())
+
     def keys(self):
         return self.storage.keys()
 
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index 9f63b20..ad2f89e 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -1,5 +1,9 @@
 # -*- coding: utf-8 -*-
-from cStringIO import StringIO
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import BytesIO as StringIO
+
 from plone.scale.scale import scaleImage
 from plone.scale.tests import TEST_DATA_LOCATION
 from unittest import TestCase
@@ -8,11 +12,11 @@
 import PIL.Image, PIL.ImageDraw
 
 
-PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png")).read()
-GIF = open(os.path.join(TEST_DATA_LOCATION, "logo.gif")).read()
-TIFF = open(os.path.join(TEST_DATA_LOCATION, "logo.tiff")).read()
-CMYK = open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg")).read()
-PROFILE = open(os.path.join(TEST_DATA_LOCATION, "profile.jpg")).read()
+PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png"), 'rb').read()
+GIF = open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), 'rb').read()
+TIFF = open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), 'rb').read()
+CMYK = open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), 'rb').read()
+PROFILE = open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), 'rb').read()
 
 
 class ScalingTests(TestCase):
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index e4df7f1..d81429a 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -4,8 +4,13 @@
 from operator import setitem
 from plone.testing import zca
 from unittest import TestCase
+import zope.annotation.interfaces
+import zope.annotation.attribute
+from zope.interface import implementer
+from zope.component import provideAdapter
 
 
+@implementer(zope.annotation.interfaces.IAttributeAnnotatable)
 class _DummyContext(object):
     pass
 
@@ -16,8 +21,6 @@ class AnnotationStorageTests(TestCase):
 
     def _provide_dummy_scale_adapter(self, result=True):
         from zope.component import adapter
-        from zope.component import provideAdapter
-        from zope.interface import implementer
         from plone.scale.interfaces import IImageScaleFactory
 
         factory = self.factory
@@ -39,9 +42,9 @@ def __call__(self, **parameters):
     @property
     def storage(self):
         from plone.scale.storage import AnnotationStorage
+        provideAdapter(zope.annotation.attribute.AttributeAnnotations)
         storage = AnnotationStorage(_DummyContext())
         storage.modified = lambda: 42
-        storage.storage = {}
         return storage
 
     def factory(self, **kw):
@@ -150,14 +153,13 @@ def testIterateWithoutAnnotations(self):
 
     def testIterate(self):
         storage = self.storage
-        storage.storage.update(one=None, two=None)
+        storage.storage.update(dict(one=None, two=None))
         generator = iter(storage)
         self.assertEqual(set(generator), set(['one', 'two']))
 
     def testKeys(self):
         storage = self.storage
-        storage.storage.update(one=None, two=None)
-        self.failUnless(isinstance(storage.keys(), list))
+        storage.storage.update(dict(one=None, two=None))
         self.assertEqual(set(storage.keys()), set(['one', 'two']))
 
     def testNegativeHasKey(self):
@@ -166,7 +168,7 @@ def testNegativeHasKey(self):
 
     def testPositiveHasKey(self):
         storage = self.storage
-        storage.storage.update(one=None)
+        storage.storage.update(dict(one=None))
         self.assertEqual('one' in storage, True)
 
     def testDeleteNonExistingItem(self):
diff --git a/setup.py b/setup.py
index bd16ef9..b7ffe05 100644
--- a/setup.py
+++ b/setup.py
@@ -38,6 +38,8 @@
         'Operating System :: OS Independent',
         'Programming Language :: Python',
         'Programming Language :: Python :: 2.7',
+        'Programming Language :: Python :: 3.5',
+        'Programming Language :: Python :: 3.6',
     ],
     keywords='image scaling',
     author='Plone Foundation',


