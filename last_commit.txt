Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/0523dc12781c023facae6c4516324ae107ecb780

fix py3 startup issues

Files changed:
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/utils.py

b'diff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex aa14313f..94b151b7 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n-from types import StringTypes\n-\n from zope.interface import implementer, Interface\n from zope.component import adapts\n \n@@ -14,6 +12,8 @@\n from plone.portlets.constants import GROUP_CATEGORY\n from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n \n+import six\n+\n \n @implementer(IPortletContext)\n class ContentContext(object):\n@@ -86,7 +86,7 @@ def _getGroupIds(self):\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if type(group) not in StringTypes:\n+            if not isinstance(group, six.text_type):\n                 return ()\n \n         return sorted(groups)\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex 3169e34e..12e5afe3 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -91,7 +91,7 @@ class DeferredRenderer(Renderer):\n     render_preload = ViewPageTemplateFile(\'deferred_portlet.pt\')\n \n     def render_full(self):\n-        raise NotImplemented, "You must implement \'render_full\' as a method or page template file attribute"\n+        raise NotImplemented("You must implement \'render_full\' as a method or page template file attribute")\n \n     def render(self):\n         """render the portlet\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex f4e56c6a..7a92edf7 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -53,7 +53,7 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n             path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n-            raise KeyError, "Cannot find object at path %s" % path\n+            raise KeyError("Cannot find object at path %s" % path)\n         return getMultiAdapter((obj, manager), IPortletAssignmentMapping)\n     else:\n         mapping = manager[category]\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/8bf7b9aa64ce4a868b72510e5425b13f4a5e4716

fix portlet-assignment in py3

Files changed:
M plone/app/portlets/exportimport/portlets.py

b'diff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 71ebaf69..5e4f05e0 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -172,7 +172,7 @@ def import_node(self, interface, child):\n         """Import a single <property /> node\n         """\n         property_name = child.getAttribute(\'name\')\n-        \n+\n         __traceback_info__ = "Property name: " + property_name\n \n         field = interface.get(property_name, None)\n@@ -467,7 +467,8 @@ def _initAssignmentNode(self, node):\n         key = node.getAttribute(\'key\')\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n-        key = key.encode()\n+        if six.PY2:\n+            key = key.encode()\n \n         purge = False\n         if node.hasAttribute(\'purge\'):\n@@ -482,7 +483,7 @@ def _initAssignmentNode(self, node):\n         if name:\n             name = str(name)\n             assignment = mapping.get(name, None)\n-            \n+\n         __traceback_info__ = "Assignment name: " + name\n \n         if node.hasAttribute(\'remove\'):\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/74f9c16314c214249cc96fe3509881dc02c1ef61

fix cachekey in py3

Files changed:
M plone/app/portlets/cache.py

b'diff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex 1f6b369d..ad85d86e 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -3,6 +3,8 @@\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n \n+import six\n+\n \n def get_language(context, request):\n     portal_state = component.getMultiAdapter(\n@@ -25,7 +27,9 @@ def render_cachekey(fun, self):\n     context = aq_inner(self.context)\n \n     def add(brain):\n-        path = brain.getPath().decode(\'ascii\', \'replace\')\n+        path = brain.getPath()\n+        if six.PY2:\n+            path = path.encode(\'ascii\', \'replace\')\n         return "%s\\n%s\\n\\n" % (path, brain.modified)\n     fingerprint = "".join(map(add, self._data()))\n \n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/f5504f891fe0de7fc012e3b7b6d1fdbc9db56052

allow text and bytes

Files changed:
M plone/app/portlets/portletcontext.py

b'diff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex 94b151b7..f45ebe46 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -86,7 +86,7 @@ def _getGroupIds(self):\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if not isinstance(group, six.text_type):\n+            if not isinstance(group, (six.text_type, six.binary_type)):\n                 return ()\n \n         return sorted(groups)\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/9aa4195544cecf903364c053403ab72b2b423592

fix tests for py3 (except for random ordering of properties)

Files changed:
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/utils.py

b'diff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 5e4f05e0..70fe8206 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -667,7 +667,7 @@ def _extractPortletManagerNode(self, portletManagerRegistration):\n             child.setAttribute(\'class\', _getDottedName(r.component.__class__))\n         child.setAttribute(\'name\', r.name)\n \n-        specificInterface = providedBy(r.component).flattened().next()\n+        specificInterface = next(providedBy(r.component).flattened())\n         if specificInterface != IPortletManager:\n             child.setAttribute(\'type\', _getDottedName(specificInterface))\n \ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex ff47185b..50c48ce0 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -420,6 +420,7 @@ def testManagerPurge(self):\n         self.assertEqual(0, len(mapping))\n \n     def testExport(self):\n+        self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n         handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n@@ -510,7 +511,7 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip(), body)\n+        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'), body.decode(\'utf8\'))\n \n \n def test_suite():\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex d980d605..f8798eea 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -1,18 +1,16 @@\n # -*- coding: utf-8 -*-\n-from zExceptions import Unauthorized\n-from zope.component import getUtility, getMultiAdapter\n-from zope.event import notify\n-\n+from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRetriever\n from plone.portlets.interfaces import IPortletType\n-\n-from plone.portlets.constants import USER_CATEGORY\n-\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from zExceptions import Unauthorized\n+from zope.component import getUtility, getMultiAdapter\n+from zope.event import notify\n \n-from plone.app.portlets.tests.base import PortletsTestCase\n+import six\n \n \n class TestDashboard(PortletsTestCase):\n@@ -33,7 +31,10 @@ def test_default_dashboard_created_for_new_user(self):\n         self.assertTrue(len(user_portlets[\'fakeuser\']) > 0)\n \n     def test_non_ascii_usernames_created(self):\n-        user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n+        if six.PY2:\n+            user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n+        else:\n+            user1, pass1 = \'user1\\xa9\', \'pass1\'\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex 7a92edf7..bd19a4b5 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -27,6 +27,8 @@\n     from plone.app.event.portlets import portlet_calendar as calendar\n     from plone.app.event.portlets import portlet_events as events\n \n+import six\n+\n \n def assignment_mapping_from_key(context, manager_name, category, key, create=False):\n     """Given the name of a portlet manager, the name of a category, and a\n@@ -50,7 +52,8 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n                 path = path[len(portal_path)+1:]\n             while path.startswith(\'/\'):\n                 path = path[1:]\n-            path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n+            if six.PY2 and isinstance(path, six.text_type):\n+                path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n             raise KeyError("Cannot find object at path %s" % path)\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/f27107107a26ace07009125c2644d96b16b61305

Sort interface field names to have consistent exports

Files changed:
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/tests/test_configuration.py

b'diff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 70fe8206..40975cac 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -157,7 +157,7 @@ def import_assignment(self, interface, node):\n                 self.import_node(interface, child)\n \n     def export_assignment(self, interface, doc, node):\n-        for field_name in interface:\n+        for field_name in sorted(interface):\n             field = interface[field_name]\n \n             if not IField.providedBy(field):\ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex 50c48ce0..bfdbd8ea 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -431,7 +431,7 @@ def testExport(self):\n         portal_setup = self.portal.portal_setup\n         portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n \n-        expected = """\\\n+        expected = u"""\\\n <?xml version="1.0" encoding="utf-8"?>\n <portlets>\n  <portletmanager name="test.testcolumn"\n@@ -443,53 +443,53 @@ def testExport(self):\n  <assignment name="test.portlet6" category="group" key="Reviewers"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet4" category="content_type" key="Folder"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet5" category="content_type" key="Folder"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet3" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet2" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="False">\n   <property name="test_bool">True</property>\n-  <property name="test_tuple"/>\n   <property name="test_text">Test prop 2</property>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet1" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool">False</property>\n+  <property name="test_text">Test pr\xc3\xb6p 1</property>\n   <property name="test_tuple">\n    <element>published</element>\n    <element>private</element>\n   </property>\n-  <property name="test_text">Test pr\xc3\xb6p 1</property>\n  </assignment>\n  <assignment name="navigation" category="context" key="/"\n     manager="test.testcolumn2" type="portlets.Navigation" visible="True">\n+  <property name="bottomLevel">0</property>\n+  <property name="currentFolderOnly">False</property>\n+  <property name="includeTop">False</property>\n   <property name="name"></property>\n+  <property name="no_icons">False</property>\n+  <property name="no_thumbs">False</property>\n   <property name="root_uid"/>\n   <property name="thumb_scale"></property>\n-  <property name="no_thumbs">False</property>\n   <property name="topLevel">1</property>\n-  <property name="currentFolderOnly">False</property>\n-  <property name="includeTop">False</property>\n-  <property name="no_icons">False</property>\n-  <property name="bottomLevel">0</property>\n  </assignment>\n  <blacklist category="user" location="/" manager="test.testcolumn"\n     status="acquire"/>\n@@ -511,7 +511,7 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'), body.decode(\'utf8\'))\n+        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'))\n \n \n def test_suite():\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/f5634ce1c66fcb08ac11c67c5c93ac90ac4ac37c

Fix test_cache

Files changed:
M plone/app/portlets/cache.py
M plone/app/portlets/tests/test_cache.py

b'diff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex ad85d86e..39f0e82d 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from zope import component\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n+from zope import component\n \n import six\n \n@@ -28,16 +28,15 @@ def render_cachekey(fun, self):\n \n     def add(brain):\n         path = brain.getPath()\n-        if six.PY2:\n-            path = path.encode(\'ascii\', \'replace\')\n         return "%s\\n%s\\n\\n" % (path, brain.modified)\n+\n     fingerprint = "".join(map(add, self._data()))\n \n     anonymous = getToolByName(context, \'portal_membership\').isAnonymousUser()\n \n     return "".join((\n         getToolByName(aq_inner(self.context), \'portal_url\')(),\n-        get_language(aq_inner(self.context), self.request),\n+        str(get_language(aq_inner(self.context), self.request)),\n         str(anonymous),\n         self.manager.__name__,\n         self.data.__name__,\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex 5ede4ac4..8e1de84f 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n-from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.cache import render_cachekey\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n \n class MockBrain(object):\n \n-    def __init__(self, path=u"some/path", modified=u"2002-01-01"):\n+    def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n \n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T08:52:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/5e5ae245ce77f11cd4347ff5659fdf5c07c49946

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 578db5a7..dcb470b8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,9 @@ New features:\n   version.\n   [icemac]\n \n+- Add python 3 compatability\n+  [pbauer, ale-rt]\n+\n Bug fixes:\n \n - Fix browser tests to work with merged plone.login.\ndiff --git a/setup.py b/setup.py\nindex 0bab7b5b..b46281b2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,6 +20,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'portlets viewlets plone\',\n     author=\'Plone Foundation\',\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2018-09-18T10:59:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.portlets/commit/88c4f61283701109504037281b99b227f67e9bdb

Merge pull request #107 from plone/python3

fix python 3 support

Files changed:
M CHANGES.rst
M plone/app/portlets/cache.py
M plone/app/portlets/exportimport/portlets.py
M plone/app/portlets/portletcontext.py
M plone/app/portlets/portlets/base.py
M plone/app/portlets/tests/test_cache.py
M plone/app/portlets/tests/test_configuration.py
M plone/app/portlets/tests/test_dashboard.py
M plone/app/portlets/utils.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 578db5a7..dcb470b8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,9 @@ New features:\n   version.\n   [icemac]\n \n+- Add python 3 compatability\n+  [pbauer, ale-rt]\n+\n Bug fixes:\n \n - Fix browser tests to work with merged plone.login.\ndiff --git a/plone/app/portlets/cache.py b/plone/app/portlets/cache.py\nindex 1f6b369d..39f0e82d 100644\n--- a/plone/app/portlets/cache.py\n+++ b/plone/app/portlets/cache.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n-from zope import component\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n+from zope import component\n+\n+import six\n \n \n def get_language(context, request):\n@@ -25,15 +27,16 @@ def render_cachekey(fun, self):\n     context = aq_inner(self.context)\n \n     def add(brain):\n-        path = brain.getPath().decode(\'ascii\', \'replace\')\n+        path = brain.getPath()\n         return "%s\\n%s\\n\\n" % (path, brain.modified)\n+\n     fingerprint = "".join(map(add, self._data()))\n \n     anonymous = getToolByName(context, \'portal_membership\').isAnonymousUser()\n \n     return "".join((\n         getToolByName(aq_inner(self.context), \'portal_url\')(),\n-        get_language(aq_inner(self.context), self.request),\n+        str(get_language(aq_inner(self.context), self.request)),\n         str(anonymous),\n         self.manager.__name__,\n         self.data.__name__,\ndiff --git a/plone/app/portlets/exportimport/portlets.py b/plone/app/portlets/exportimport/portlets.py\nindex 71ebaf69..40975cac 100644\n--- a/plone/app/portlets/exportimport/portlets.py\n+++ b/plone/app/portlets/exportimport/portlets.py\n@@ -157,7 +157,7 @@ def import_assignment(self, interface, node):\n                 self.import_node(interface, child)\n \n     def export_assignment(self, interface, doc, node):\n-        for field_name in interface:\n+        for field_name in sorted(interface):\n             field = interface[field_name]\n \n             if not IField.providedBy(field):\n@@ -172,7 +172,7 @@ def import_node(self, interface, child):\n         """Import a single <property /> node\n         """\n         property_name = child.getAttribute(\'name\')\n-        \n+\n         __traceback_info__ = "Property name: " + property_name\n \n         field = interface.get(property_name, None)\n@@ -467,7 +467,8 @@ def _initAssignmentNode(self, node):\n         key = node.getAttribute(\'key\')\n         # convert unicode to str as unicode paths are not allowed in\n         # restrictedTraverse called in assignment_mapping_from_key\n-        key = key.encode()\n+        if six.PY2:\n+            key = key.encode()\n \n         purge = False\n         if node.hasAttribute(\'purge\'):\n@@ -482,7 +483,7 @@ def _initAssignmentNode(self, node):\n         if name:\n             name = str(name)\n             assignment = mapping.get(name, None)\n-            \n+\n         __traceback_info__ = "Assignment name: " + name\n \n         if node.hasAttribute(\'remove\'):\n@@ -666,7 +667,7 @@ def _extractPortletManagerNode(self, portletManagerRegistration):\n             child.setAttribute(\'class\', _getDottedName(r.component.__class__))\n         child.setAttribute(\'name\', r.name)\n \n-        specificInterface = providedBy(r.component).flattened().next()\n+        specificInterface = next(providedBy(r.component).flattened())\n         if specificInterface != IPortletManager:\n             child.setAttribute(\'type\', _getDottedName(specificInterface))\n \ndiff --git a/plone/app/portlets/portletcontext.py b/plone/app/portlets/portletcontext.py\nindex aa14313f..f45ebe46 100644\n--- a/plone/app/portlets/portletcontext.py\n+++ b/plone/app/portlets/portletcontext.py\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n-from types import StringTypes\n-\n from zope.interface import implementer, Interface\n from zope.component import adapts\n \n@@ -14,6 +12,8 @@\n from plone.portlets.constants import GROUP_CATEGORY\n from plone.portlets.constants import CONTENT_TYPE_CATEGORY\n \n+import six\n+\n \n @implementer(IPortletContext)\n class ContentContext(object):\n@@ -86,7 +86,7 @@ def _getGroupIds(self):\n         # ambiguity - the Plone member-data version returns ids.\n \n         for group in groups:\n-            if type(group) not in StringTypes:\n+            if not isinstance(group, (six.text_type, six.binary_type)):\n                 return ()\n \n         return sorted(groups)\ndiff --git a/plone/app/portlets/portlets/base.py b/plone/app/portlets/portlets/base.py\nindex 3169e34e..12e5afe3 100644\n--- a/plone/app/portlets/portlets/base.py\n+++ b/plone/app/portlets/portlets/base.py\n@@ -91,7 +91,7 @@ class DeferredRenderer(Renderer):\n     render_preload = ViewPageTemplateFile(\'deferred_portlet.pt\')\n \n     def render_full(self):\n-        raise NotImplemented, "You must implement \'render_full\' as a method or page template file attribute"\n+        raise NotImplemented("You must implement \'render_full\' as a method or page template file attribute")\n \n     def render(self):\n         """render the portlet\ndiff --git a/plone/app/portlets/tests/test_cache.py b/plone/app/portlets/tests/test_cache.py\nindex 5ede4ac4..8e1de84f 100644\n--- a/plone/app/portlets/tests/test_cache.py\n+++ b/plone/app/portlets/tests/test_cache.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n-from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.portlets.cache import render_cachekey\n+from plone.app.portlets.tests.base import PortletsTestCase\n from plone.app.testing import logout\n \n \n class MockBrain(object):\n \n-    def __init__(self, path=u"some/path", modified=u"2002-01-01"):\n+    def __init__(self, path="some/path", modified="2002-01-01"):\n         self.path = path\n         self.modified = modified\n \ndiff --git a/plone/app/portlets/tests/test_configuration.py b/plone/app/portlets/tests/test_configuration.py\nindex ff47185b..bfdbd8ea 100644\n--- a/plone/app/portlets/tests/test_configuration.py\n+++ b/plone/app/portlets/tests/test_configuration.py\n@@ -420,6 +420,7 @@ def testManagerPurge(self):\n         self.assertEqual(0, len(mapping))\n \n     def testExport(self):\n+        self.maxDiff = None\n         sm = getSiteManager()\n         context = TarballExportContext(self.portal.portal_setup)\n         handler = getMultiAdapter((sm, context), IBody, name=u\'plone.portlets\')\n@@ -430,7 +431,7 @@ def testExport(self):\n         portal_setup = self.portal.portal_setup\n         portal_setup.runAllImportStepsFromProfile(\'profile-plone.app.portlets:testing\')\n \n-        expected = """\\\n+        expected = u"""\\\n <?xml version="1.0" encoding="utf-8"?>\n <portlets>\n  <portletmanager name="test.testcolumn"\n@@ -442,53 +443,53 @@ def testExport(self):\n  <assignment name="test.portlet6" category="group" key="Reviewers"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet4" category="content_type" key="Folder"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet5" category="content_type" key="Folder"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet3" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool"/>\n-  <property name="test_tuple"/>\n   <property name="test_text"/>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet2" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="False">\n   <property name="test_bool">True</property>\n-  <property name="test_tuple"/>\n   <property name="test_text">Test prop 2</property>\n+  <property name="test_tuple"/>\n  </assignment>\n  <assignment name="test.portlet1" category="context" key="/"\n     manager="test.testcolumn" type="portlets.test.Test" visible="True">\n   <property name="test_bool">False</property>\n+  <property name="test_text">Test pr\xc3\xb6p 1</property>\n   <property name="test_tuple">\n    <element>published</element>\n    <element>private</element>\n   </property>\n-  <property name="test_text">Test pr\xc3\xb6p 1</property>\n  </assignment>\n  <assignment name="navigation" category="context" key="/"\n     manager="test.testcolumn2" type="portlets.Navigation" visible="True">\n+  <property name="bottomLevel">0</property>\n+  <property name="currentFolderOnly">False</property>\n+  <property name="includeTop">False</property>\n   <property name="name"></property>\n+  <property name="no_icons">False</property>\n+  <property name="no_thumbs">False</property>\n   <property name="root_uid"/>\n   <property name="thumb_scale"></property>\n-  <property name="no_thumbs">False</property>\n   <property name="topLevel">1</property>\n-  <property name="currentFolderOnly">False</property>\n-  <property name="includeTop">False</property>\n-  <property name="no_icons">False</property>\n-  <property name="bottomLevel">0</property>\n  </assignment>\n  <blacklist category="user" location="/" manager="test.testcolumn"\n     status="acquire"/>\n@@ -510,7 +511,7 @@ def testExport(self):\n """\n \n         body = handler.body\n-        self.assertEqual(expected.strip(), body.strip(), body)\n+        self.assertEqual(expected.strip(), body.strip().decode(\'utf8\'))\n \n \n def test_suite():\ndiff --git a/plone/app/portlets/tests/test_dashboard.py b/plone/app/portlets/tests/test_dashboard.py\nindex d980d605..f8798eea 100644\n--- a/plone/app/portlets/tests/test_dashboard.py\n+++ b/plone/app/portlets/tests/test_dashboard.py\n@@ -1,18 +1,16 @@\n # -*- coding: utf-8 -*-\n-from zExceptions import Unauthorized\n-from zope.component import getUtility, getMultiAdapter\n-from zope.event import notify\n-\n+from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.portlets.constants import USER_CATEGORY\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRetriever\n from plone.portlets.interfaces import IPortletType\n-\n-from plone.portlets.constants import USER_CATEGORY\n-\n from Products.PluggableAuthService.events import PrincipalCreated\n from Products.PluggableAuthService.PropertiedUser import PropertiedUser\n+from zExceptions import Unauthorized\n+from zope.component import getUtility, getMultiAdapter\n+from zope.event import notify\n \n-from plone.app.portlets.tests.base import PortletsTestCase\n+import six\n \n \n class TestDashboard(PortletsTestCase):\n@@ -33,7 +31,10 @@ def test_default_dashboard_created_for_new_user(self):\n         self.assertTrue(len(user_portlets[\'fakeuser\']) > 0)\n \n     def test_non_ascii_usernames_created(self):\n-        user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n+        if six.PY2:\n+            user1, pass1 = u\'user1\\xa9\'.encode(\'utf-8\'), \'pass1\'\n+        else:\n+            user1, pass1 = \'user1\\xa9\', \'pass1\'\n         uf = self.portal.acl_users\n \n         # Bug #6100 - Would throw a unicode decode error in event handler\ndiff --git a/plone/app/portlets/utils.py b/plone/app/portlets/utils.py\nindex f4e56c6a..bd19a4b5 100644\n--- a/plone/app/portlets/utils.py\n+++ b/plone/app/portlets/utils.py\n@@ -27,6 +27,8 @@\n     from plone.app.event.portlets import portlet_calendar as calendar\n     from plone.app.event.portlets import portlet_events as events\n \n+import six\n+\n \n def assignment_mapping_from_key(context, manager_name, category, key, create=False):\n     """Given the name of a portlet manager, the name of a category, and a\n@@ -50,10 +52,11 @@ def assignment_mapping_from_key(context, manager_name, category, key, create=Fal\n                 path = path[len(portal_path)+1:]\n             while path.startswith(\'/\'):\n                 path = path[1:]\n-            path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n+            if six.PY2 and isinstance(path, six.text_type):\n+                path = path.encode(\'utf-8\')  # OFS.traversable cannot do unicode\n             obj = portal.restrictedTraverse(path, None)\n         if obj is None:\n-            raise KeyError, "Cannot find object at path %s" % path\n+            raise KeyError("Cannot find object at path %s" % path)\n         return getMultiAdapter((obj, manager), IPortletAssignmentMapping)\n     else:\n         mapping = manager[category]\ndiff --git a/setup.py b/setup.py\nindex 0bab7b5b..b46281b2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,6 +20,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'portlets viewlets plone\',\n     author=\'Plone Foundation\',\n'

