Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-01-08T14:11:43-08:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/9af10ddb6a9277be23949766a628759bb2b7867e

Improve blocks linkintegrity retrieval of internal links (#1566)

* Make linkintegrity retrieval handle the same href structures as the resolveuid transform

* changelog

Files changed:
A news/1565.bugfix
M src/plone/restapi/blocks_linkintegrity.py
M src/plone/restapi/tests/test_blocks_linkintegrity.py

b'diff --git a/news/1565.bugfix b/news/1565.bugfix\nnew file mode 100644\nindex 000000000..bcd9526ed\n--- /dev/null\n+++ b/news/1565.bugfix\n@@ -0,0 +1 @@\n+Fix blocks linkintegrity to find some links in `url` and `href` fields that were previously ignored. [davisagli]\ndiff --git a/src/plone/restapi/blocks_linkintegrity.py b/src/plone/restapi/blocks_linkintegrity.py\nindex cafe02690..2b80eb39b 100644\n--- a/src/plone/restapi/blocks_linkintegrity.py\n+++ b/src/plone/restapi/blocks_linkintegrity.py\n@@ -109,6 +109,8 @@ def handle_link(self, child):\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldLinkIntegrityRetriever)\n class GenericBlockLinksRetriever(object):\n+    """Retrieves links from the url and href fields of any block"""\n+\n     order = 1\n     block_type = None\n \n@@ -123,6 +125,23 @@ def __call__(self, block):\n         links = []\n         for field in ["url", "href"]:\n             value = block.get(field, "")\n-            if value and "resolveuid" in value:\n-                links.append(value)\n+            for url in get_urls_from_value(value):\n+                links.append(url)\n         return links\n+\n+\n+def get_urls_from_value(value):\n+    """Generator of urls from a block field value\n+\n+    Recognizes:\n+    - strings containing "resolveuid"\n+    - objects with an @id property containing "resolveuid"\n+    - lists of either of the above\n+    """\n+    if isinstance(value, str) and "resolveuid" in value:\n+        yield value\n+    elif isinstance(value, list):\n+        for item in value:\n+            yield from get_urls_from_value(item)\n+    elif isinstance(value, dict):\n+        yield from get_urls_from_value(value.get("@id"))\ndiff --git a/src/plone/restapi/tests/test_blocks_linkintegrity.py b/src/plone/restapi/tests/test_blocks_linkintegrity.py\nindex f36cd4e1b..51fa67942 100644\n--- a/src/plone/restapi/tests/test_blocks_linkintegrity.py\n+++ b/src/plone/restapi/tests/test_blocks_linkintegrity.py\n@@ -156,6 +156,26 @@ def test_links_retriever_return_internal_links_in_generic_block(self):\n         self.assertEqual(len(value), 1)\n         self.assertIn("../resolveuid/{}".format(uid), value)\n \n+    def test_links_retriever_return_internal_links_in_generic_block_href_list(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {"111": {"@type": "foo", "href": ["../resolveuid/{}".format(uid)]}}\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn("../resolveuid/{}".format(uid), value)\n+\n+    def test_links_retriever_return_internal_links_in_generic_block_href_id(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "111": {"@type": "foo", "href": [{"@id": "../resolveuid/{}".format(uid)}]}\n+        }\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn("../resolveuid/{}".format(uid), value)\n+\n     def test_links_retriever_return_internal_links_in_text_block_once(self):\n         uid = IUUID(self.doc2)\n         blocks = {\n'

