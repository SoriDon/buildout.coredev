Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2021-12-09T10:58:50+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/afc571e6a84553ef78c5a5e1de622d4ee5edaaf9

Optional hook to customize breadcrumbs like navigation

Files changed:
A news/3377.feature
M Products/CMFPlone/browser/navigation.py

b'diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex 186b63eccd..b905e6bc3b 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -219,7 +219,6 @@ def breadcrumbs(self):\n             result.append(data)\n         return result\n \n-\n @implementer(INavigationBreadcrumbs)\n class PhysicalNavigationBreadcrumbs(BrowserView):\n \n@@ -250,12 +249,17 @@ def breadcrumbs(self):\n         # root\n         if not check_default_page_via_view(context, request) \\\n            and not rootPath.startswith(itemPath):\n-            base += ({\n+            entry = {\n                 \'absolute_url\': item_url,\n                 \'Title\': utils.pretty_title_or_id(context, context),\n-            },)\n+            }\n+            self.customize_entry(entry, context)\n+            base += (entry,)\n         return base\n \n+    def customize_entry(self, entry, context=None):\n+        """a little helper to enlarge customizability."""\n+        pass\n \n @implementer(INavigationBreadcrumbs)\n class RootPhysicalNavigationBreadcrumbs(BrowserView):\ndiff --git a/news/3377.feature b/news/3377.feature\nnew file mode 100644\nindex 0000000000..2e5c4ce5fe\n--- /dev/null\n+++ b/news/3377.feature\n@@ -0,0 +1,2 @@\n+Customize breadcrumbs hook ``customize_entry`` for subclasses (like already in global navigation).\n+[jensens]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2021-12-09T11:01:38+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/6c47b819fe7be7da0365d1f68342d158e50e5aac

code style black

Files changed:
M Products/CMFPlone/browser/navigation.py

b'diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex b905e6bc3b..e90e29d651 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -22,7 +22,7 @@\n def get_url(item):\n     if not item:\n         return None\n-    if hasattr(aq_base(item), \'getURL\'):\n+    if hasattr(aq_base(item), "getURL"):\n         # Looks like a brain\n         return item.getURL()\n     return item.absolute_url()\n@@ -31,7 +31,7 @@ def get_url(item):\n def get_id(item):\n     if not item:\n         return None\n-    getId = getattr(item, \'getId\')\n+    getId = getattr(item, "getId")\n     if not utils.safe_callable(getId):\n         # Looks like a brain\n         return getId\n@@ -40,21 +40,19 @@ def get_id(item):\n \n def get_view_url(context):\n     registry = getUtility(IRegistry)\n-    view_action_types = registry.get(\n-        \'plone.types_use_view_action_in_listings\', [])\n+    view_action_types = registry.get("plone.types_use_view_action_in_listings", [])\n     item_url = get_url(context)\n     name = get_id(context)\n \n-    if item_url and getattr(context, \'portal_type\', {}) in view_action_types:\n-        item_url += \'/view\'\n-        name += \'/view\'\n+    if item_url and getattr(context, "portal_type", {}) in view_action_types:\n+        item_url += "/view"\n+        name += "/view"\n \n     return name, item_url\n \n \n @implementer(ISiteMap)\n class CatalogSiteMap(BrowserView):\n-\n     def siteMap(self):\n         context = aq_inner(self.context)\n \n@@ -62,72 +60,60 @@ def siteMap(self):\n         query = queryBuilder()\n         strategy = getMultiAdapter((context, self), INavtreeStrategy)\n \n-        return buildFolderTree(\n-            context, obj=context,\n-            query=query, strategy=strategy\n-        )\n+        return buildFolderTree(context, obj=context, query=query, strategy=strategy)\n \n \n @implementer(INavigationTabs)\n class CatalogNavigationTabs(BrowserView):\n-\n     def _getNavQuery(self):\n         # check whether we only want actions\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone",\n-            check=False\n+            INavigationSchema, prefix="plone", check=False\n         )\n-        customQuery = getattr(self.context, \'getCustomNavQuery\', False)\n+        customQuery = getattr(self.context, "getCustomNavQuery", False)\n         if customQuery is not None and utils.safe_callable(customQuery):\n             query = customQuery()\n         else:\n             query = {}\n \n-        query[\'path\'] = {\n-            \'query\': getNavigationRoot(self.context),\n-            \'depth\': 1\n-        }\n-        query[\'portal_type\'] = [t for t in navigation_settings.displayed_types]\n-        query[\'sort_on\'] = navigation_settings.sort_tabs_on\n+        query["path"] = {"query": getNavigationRoot(self.context), "depth": 1}\n+        query["portal_type"] = [t for t in navigation_settings.displayed_types]\n+        query["sort_on"] = navigation_settings.sort_tabs_on\n         if navigation_settings.sort_tabs_reversed:\n-            query[\'sort_order\'] = \'reverse\'\n+            query["sort_order"] = "reverse"\n         else:\n-            query[\'sort_order\'] = \'ascending\'\n+            query["sort_order"] = "ascending"\n \n         if navigation_settings.filter_on_workflow:\n-            query[\'review_state\'] = navigation_settings.workflow_states_to_show\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n-        query[\'is_default_page\'] = False\n+        query["is_default_page"] = False\n \n         if not navigation_settings.show_excluded_items:\n             # Note:\n             # Careful with that axe, Eugene!\n             # This introduces a performance decrease.\n-            query[\'exclude_from_nav\'] = False\n+            query["exclude_from_nav"] = False\n \n         if not navigation_settings.nonfolderish_tabs:\n-            query[\'is_folderish\'] = True\n+            query["is_folderish"] = True\n \n         return query\n \n-    def topLevelTabs(self, actions=None, category=\'portal_tabs\'):\n+    def topLevelTabs(self, actions=None, category="portal_tabs"):\n         context = aq_inner(self.context)\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone",\n-            check=False\n+            INavigationSchema, prefix="plone", check=False\n         )\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n         member = mtool.getAuthenticatedMember().id\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n \n         if actions is None:\n             context_state = getMultiAdapter(\n-                (context, self.request),\n-                name=\'plone_context_state\'\n+                (context, self.request), name="plone_context_state"\n             )\n             actions = context_state.actions(category)\n \n@@ -136,7 +122,7 @@ def topLevelTabs(self, actions=None, category=\'portal_tabs\'):\n         # first the actions\n         for actionInfo in actions:\n             data = actionInfo.copy()\n-            data[\'name\'] = data[\'title\']\n+            data["name"] = data["title"]\n             self.customize_entry(data)\n             result.append(data)\n \n@@ -153,20 +139,22 @@ def _get_url(item):\n                 return (get_id(item), item.getRemoteUrl)\n             return get_view_url(item)\n \n-        context_path = \'/\'.join(context.getPhysicalPath())\n+        context_path = "/".join(context.getPhysicalPath())\n \n         # now add the content to results\n         for item in rawresult:\n-            if item.exclude_from_nav and not context_path.startswith(item.getPath()):  # noqa: E501\n+            if item.exclude_from_nav and not context_path.startswith(\n+                item.getPath()\n+            ):  # noqa: E501\n                 # skip excluded items if they\'re not in our context path\n                 continue\n             cid, item_url = _get_url(item)\n             data = {\n-                \'name\': utils.pretty_title_or_id(context, item),\n-                \'id\': item.getId,\n-                \'url\': item_url,\n-                \'description\': item.Description,\n-                \'review_state\': item.review_state\n+                "name": utils.pretty_title_or_id(context, item),\n+                "id": item.getId,\n+                "url": item_url,\n+                "description": item.Description,\n+                "review_state": item.review_state,\n             }\n             self.customize_entry(data, item)\n             result.append(data)\n@@ -177,21 +165,21 @@ def customize_entry(self, entry, brain=None):\n         """a little helper to enlarge customizability."""\n         pass\n \n+\n @implementer(INavigationBreadcrumbs)\n class CatalogNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         query = {}\n \n         # Check to see if the current page is a folder default view, if so\n         # get breadcrumbs from the parent folder\n         if check_default_page_via_view(context, self.request):\n-            currentPath = \'/\'.join(utils.parent(context).getPhysicalPath())\n+            currentPath = "/".join(utils.parent(context).getPhysicalPath())\n         else:\n-            currentPath = \'/\'.join(context.getPhysicalPath())\n-        query[\'path\'] = {\'query\': currentPath, \'navtree\': 1, \'depth\': 0}\n+            currentPath = "/".join(context.getPhysicalPath())\n+        query["path"] = {"query": currentPath, "navtree": 1, "depth": 0}\n \n         rawresult = catalog(**query)\n \n@@ -213,15 +201,15 @@ def breadcrumbs(self):\n \n             cid, item_url = get_view_url(item)\n             data = {\n-                \'Title\': utils.pretty_title_or_id(context, item),\n-                \'absolute_url\': item_url\n+                "Title": utils.pretty_title_or_id(context, item),\n+                "absolute_url": item_url,\n             }\n             result.append(data)\n         return result\n \n+\n @implementer(INavigationBreadcrumbs)\n class PhysicalNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         context = aq_inner(self.context)\n         request = self.request\n@@ -230,12 +218,14 @@ def breadcrumbs(self):\n         name, item_url = get_view_url(context)\n \n         if container is None:\n-            return ({\n-                \'absolute_url\': item_url,\n-                \'Title\': utils.pretty_title_or_id(context, context),\n-            },)\n+            return (\n+                {\n+                    "absolute_url": item_url,\n+                    "Title": utils.pretty_title_or_id(context, context),\n+                },\n+            )\n \n-        view = getMultiAdapter((container, request), name=\'breadcrumbs_view\')\n+        view = getMultiAdapter((container, request), name="breadcrumbs_view")\n         base = tuple(view.breadcrumbs())\n \n         # Some things want to be hidden from the breadcrumbs\n@@ -243,15 +233,16 @@ def breadcrumbs(self):\n             return base\n \n         rootPath = getNavigationRoot(context)\n-        itemPath = \'/\'.join(context.getPhysicalPath())\n+        itemPath = "/".join(context.getPhysicalPath())\n \n         # don\'t show default pages in breadcrumbs or pages above the navigation\n         # root\n-        if not check_default_page_via_view(context, request) \\\n-           and not rootPath.startswith(itemPath):\n+        if not check_default_page_via_view(\n+            context, request\n+        ) and not rootPath.startswith(itemPath):\n             entry = {\n-                \'absolute_url\': item_url,\n-                \'Title\': utils.pretty_title_or_id(context, context),\n+                "absolute_url": item_url,\n+                "Title": utils.pretty_title_or_id(context, context),\n             }\n             self.customize_entry(entry, context)\n             base += (entry,)\n@@ -261,9 +252,9 @@ def customize_entry(self, entry, context=None):\n         """a little helper to enlarge customizability."""\n         pass\n \n+\n @implementer(INavigationBreadcrumbs)\n class RootPhysicalNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         # XXX Root never gets included, it\'s hardcoded as \'Home\' in\n         # the template. We will fix and remove the hardcoding and fix\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2021-12-09T17:04:50+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/fd646743235d012d8e3acfde7abfabad8aa62daa

Merge branch 'master' into customize-breadcrumb

Files changed:
A news/3241.bugfix
M Products/CMFPlone/controlpanel/browser/configure.zcml
M Products/CMFPlone/controlpanel/browser/prefs_error_log_form.pt
M Products/CMFPlone/controlpanel/browser/prefs_error_log_form.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/configure.zcml b/Products/CMFPlone/controlpanel/browser/configure.zcml\nindex f3aaffd702..fa419f3c44 100644\n--- a/Products/CMFPlone/controlpanel/browser/configure.zcml\n+++ b/Products/CMFPlone/controlpanel/browser/configure.zcml\n@@ -115,14 +115,14 @@\n   <browser:page\n       name="prefs_error_log_form"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-      class=".prefs_error_log_form.PrefsErrorLogForm"\n+      template="prefs_error_log_form.pt"\n       permission="cmf.ManagePortal"\n       />\n \n   <browser:page\n       name="prefs_error_log_showEntry"\n       for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-      class=".prefs_error_log_form.PrefsErrorLogShowEntry"\n+      template="prefs_error_log_showEntry.pt"\n       permission="cmf.ManagePortal"\n       />\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.pt b/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.pt\nindex 471fb43195..4a6f2cc652 100644\n--- a/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.pt\n+++ b/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.pt\n@@ -157,6 +157,7 @@\n                     <label for="ignored_exceptions"\n                            i18n:translate="label_ignored_exception">Ignored exception types</label>\n \n+                    <br>\n                     <textarea name="ignored_exceptions:lines"\n                               id="ignored_exceptions"\n                               cols="40"\ndiff --git a/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.py b/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.py\nindex 15b41174e9..d73f68cbd5 100644\n--- a/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.py\n+++ b/Products/CMFPlone/controlpanel/browser/prefs_error_log_form.py\n@@ -6,22 +6,6 @@\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \n \n-class PrefsErrorLogForm(BrowserView):\n-\n-    template = ViewPageTemplateFile(\'prefs_error_log_form.pt\')\n-\n-    def __call__(self):\n-        return self.template(self)\n-\n-\n-class PrefsErrorLogShowEntry(BrowserView):\n-\n-    template = ViewPageTemplateFile(\'prefs_error_log_showEntry.pt\')\n-\n-    def __call__(self):\n-        return self.template(self)\n-\n-\n class PrefsErrorLogUpdate(BrowserView):\n \n     def __call__(self):\ndiff --git a/news/3241.bugfix b/news/3241.bugfix\nnew file mode 100644\nindex 0000000000..16523e6a3e\n--- /dev/null\n+++ b/news/3241.bugfix\n@@ -0,0 +1,2 @@\n+Cleanup Error Log Form after Review\n+[jmevissen]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2021-12-09T17:04:57+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d2bb5b78d8a923ed2f35a29c4c8f656083113b85

Merge pull request #3377 from plone/customize-breadcrumb

Optional hook to customize breadcrumbs like navigation

Files changed:
A news/3377.feature
M Products/CMFPlone/browser/navigation.py

b'diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex 186b63eccd..e90e29d651 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -22,7 +22,7 @@\n def get_url(item):\n     if not item:\n         return None\n-    if hasattr(aq_base(item), \'getURL\'):\n+    if hasattr(aq_base(item), "getURL"):\n         # Looks like a brain\n         return item.getURL()\n     return item.absolute_url()\n@@ -31,7 +31,7 @@ def get_url(item):\n def get_id(item):\n     if not item:\n         return None\n-    getId = getattr(item, \'getId\')\n+    getId = getattr(item, "getId")\n     if not utils.safe_callable(getId):\n         # Looks like a brain\n         return getId\n@@ -40,21 +40,19 @@ def get_id(item):\n \n def get_view_url(context):\n     registry = getUtility(IRegistry)\n-    view_action_types = registry.get(\n-        \'plone.types_use_view_action_in_listings\', [])\n+    view_action_types = registry.get("plone.types_use_view_action_in_listings", [])\n     item_url = get_url(context)\n     name = get_id(context)\n \n-    if item_url and getattr(context, \'portal_type\', {}) in view_action_types:\n-        item_url += \'/view\'\n-        name += \'/view\'\n+    if item_url and getattr(context, "portal_type", {}) in view_action_types:\n+        item_url += "/view"\n+        name += "/view"\n \n     return name, item_url\n \n \n @implementer(ISiteMap)\n class CatalogSiteMap(BrowserView):\n-\n     def siteMap(self):\n         context = aq_inner(self.context)\n \n@@ -62,72 +60,60 @@ def siteMap(self):\n         query = queryBuilder()\n         strategy = getMultiAdapter((context, self), INavtreeStrategy)\n \n-        return buildFolderTree(\n-            context, obj=context,\n-            query=query, strategy=strategy\n-        )\n+        return buildFolderTree(context, obj=context, query=query, strategy=strategy)\n \n \n @implementer(INavigationTabs)\n class CatalogNavigationTabs(BrowserView):\n-\n     def _getNavQuery(self):\n         # check whether we only want actions\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone",\n-            check=False\n+            INavigationSchema, prefix="plone", check=False\n         )\n-        customQuery = getattr(self.context, \'getCustomNavQuery\', False)\n+        customQuery = getattr(self.context, "getCustomNavQuery", False)\n         if customQuery is not None and utils.safe_callable(customQuery):\n             query = customQuery()\n         else:\n             query = {}\n \n-        query[\'path\'] = {\n-            \'query\': getNavigationRoot(self.context),\n-            \'depth\': 1\n-        }\n-        query[\'portal_type\'] = [t for t in navigation_settings.displayed_types]\n-        query[\'sort_on\'] = navigation_settings.sort_tabs_on\n+        query["path"] = {"query": getNavigationRoot(self.context), "depth": 1}\n+        query["portal_type"] = [t for t in navigation_settings.displayed_types]\n+        query["sort_on"] = navigation_settings.sort_tabs_on\n         if navigation_settings.sort_tabs_reversed:\n-            query[\'sort_order\'] = \'reverse\'\n+            query["sort_order"] = "reverse"\n         else:\n-            query[\'sort_order\'] = \'ascending\'\n+            query["sort_order"] = "ascending"\n \n         if navigation_settings.filter_on_workflow:\n-            query[\'review_state\'] = navigation_settings.workflow_states_to_show\n+            query["review_state"] = navigation_settings.workflow_states_to_show\n \n-        query[\'is_default_page\'] = False\n+        query["is_default_page"] = False\n \n         if not navigation_settings.show_excluded_items:\n             # Note:\n             # Careful with that axe, Eugene!\n             # This introduces a performance decrease.\n-            query[\'exclude_from_nav\'] = False\n+            query["exclude_from_nav"] = False\n \n         if not navigation_settings.nonfolderish_tabs:\n-            query[\'is_folderish\'] = True\n+            query["is_folderish"] = True\n \n         return query\n \n-    def topLevelTabs(self, actions=None, category=\'portal_tabs\'):\n+    def topLevelTabs(self, actions=None, category="portal_tabs"):\n         context = aq_inner(self.context)\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone",\n-            check=False\n+            INavigationSchema, prefix="plone", check=False\n         )\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n         member = mtool.getAuthenticatedMember().id\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n \n         if actions is None:\n             context_state = getMultiAdapter(\n-                (context, self.request),\n-                name=\'plone_context_state\'\n+                (context, self.request), name="plone_context_state"\n             )\n             actions = context_state.actions(category)\n \n@@ -136,7 +122,7 @@ def topLevelTabs(self, actions=None, category=\'portal_tabs\'):\n         # first the actions\n         for actionInfo in actions:\n             data = actionInfo.copy()\n-            data[\'name\'] = data[\'title\']\n+            data["name"] = data["title"]\n             self.customize_entry(data)\n             result.append(data)\n \n@@ -153,20 +139,22 @@ def _get_url(item):\n                 return (get_id(item), item.getRemoteUrl)\n             return get_view_url(item)\n \n-        context_path = \'/\'.join(context.getPhysicalPath())\n+        context_path = "/".join(context.getPhysicalPath())\n \n         # now add the content to results\n         for item in rawresult:\n-            if item.exclude_from_nav and not context_path.startswith(item.getPath()):  # noqa: E501\n+            if item.exclude_from_nav and not context_path.startswith(\n+                item.getPath()\n+            ):  # noqa: E501\n                 # skip excluded items if they\'re not in our context path\n                 continue\n             cid, item_url = _get_url(item)\n             data = {\n-                \'name\': utils.pretty_title_or_id(context, item),\n-                \'id\': item.getId,\n-                \'url\': item_url,\n-                \'description\': item.Description,\n-                \'review_state\': item.review_state\n+                "name": utils.pretty_title_or_id(context, item),\n+                "id": item.getId,\n+                "url": item_url,\n+                "description": item.Description,\n+                "review_state": item.review_state,\n             }\n             self.customize_entry(data, item)\n             result.append(data)\n@@ -177,21 +165,21 @@ def customize_entry(self, entry, brain=None):\n         """a little helper to enlarge customizability."""\n         pass\n \n+\n @implementer(INavigationBreadcrumbs)\n class CatalogNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n+        catalog = getToolByName(context, "portal_catalog")\n         query = {}\n \n         # Check to see if the current page is a folder default view, if so\n         # get breadcrumbs from the parent folder\n         if check_default_page_via_view(context, self.request):\n-            currentPath = \'/\'.join(utils.parent(context).getPhysicalPath())\n+            currentPath = "/".join(utils.parent(context).getPhysicalPath())\n         else:\n-            currentPath = \'/\'.join(context.getPhysicalPath())\n-        query[\'path\'] = {\'query\': currentPath, \'navtree\': 1, \'depth\': 0}\n+            currentPath = "/".join(context.getPhysicalPath())\n+        query["path"] = {"query": currentPath, "navtree": 1, "depth": 0}\n \n         rawresult = catalog(**query)\n \n@@ -213,8 +201,8 @@ def breadcrumbs(self):\n \n             cid, item_url = get_view_url(item)\n             data = {\n-                \'Title\': utils.pretty_title_or_id(context, item),\n-                \'absolute_url\': item_url\n+                "Title": utils.pretty_title_or_id(context, item),\n+                "absolute_url": item_url,\n             }\n             result.append(data)\n         return result\n@@ -222,7 +210,6 @@ def breadcrumbs(self):\n \n @implementer(INavigationBreadcrumbs)\n class PhysicalNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         context = aq_inner(self.context)\n         request = self.request\n@@ -231,12 +218,14 @@ def breadcrumbs(self):\n         name, item_url = get_view_url(context)\n \n         if container is None:\n-            return ({\n-                \'absolute_url\': item_url,\n-                \'Title\': utils.pretty_title_or_id(context, context),\n-            },)\n+            return (\n+                {\n+                    "absolute_url": item_url,\n+                    "Title": utils.pretty_title_or_id(context, context),\n+                },\n+            )\n \n-        view = getMultiAdapter((container, request), name=\'breadcrumbs_view\')\n+        view = getMultiAdapter((container, request), name="breadcrumbs_view")\n         base = tuple(view.breadcrumbs())\n \n         # Some things want to be hidden from the breadcrumbs\n@@ -244,22 +233,28 @@ def breadcrumbs(self):\n             return base\n \n         rootPath = getNavigationRoot(context)\n-        itemPath = \'/\'.join(context.getPhysicalPath())\n+        itemPath = "/".join(context.getPhysicalPath())\n \n         # don\'t show default pages in breadcrumbs or pages above the navigation\n         # root\n-        if not check_default_page_via_view(context, request) \\\n-           and not rootPath.startswith(itemPath):\n-            base += ({\n-                \'absolute_url\': item_url,\n-                \'Title\': utils.pretty_title_or_id(context, context),\n-            },)\n+        if not check_default_page_via_view(\n+            context, request\n+        ) and not rootPath.startswith(itemPath):\n+            entry = {\n+                "absolute_url": item_url,\n+                "Title": utils.pretty_title_or_id(context, context),\n+            }\n+            self.customize_entry(entry, context)\n+            base += (entry,)\n         return base\n \n+    def customize_entry(self, entry, context=None):\n+        """a little helper to enlarge customizability."""\n+        pass\n+\n \n @implementer(INavigationBreadcrumbs)\n class RootPhysicalNavigationBreadcrumbs(BrowserView):\n-\n     def breadcrumbs(self):\n         # XXX Root never gets included, it\'s hardcoded as \'Home\' in\n         # the template. We will fix and remove the hardcoding and fix\ndiff --git a/news/3377.feature b/news/3377.feature\nnew file mode 100644\nindex 0000000000..2e5c4ce5fe\n--- /dev/null\n+++ b/news/3377.feature\n@@ -0,0 +1,2 @@\n+Customize breadcrumbs hook ``customize_entry`` for subclasses (like already in global navigation).\n+[jensens]\n\\ No newline at end of file\n'

