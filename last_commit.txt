Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-18T15:13:38+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.discussion/commit/a8f2db58ff6bacff4362e00689aefd3352acc8e3

fix commenting in py3

Files changed:
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/conversation.py

b'diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 6bbc760a..73c5ab2d 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -13,6 +13,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.interfaces import IZCatalog\n \n+import six\n \n MAX_DESCRIPTION = 25\n \n@@ -70,7 +71,12 @@ def title(object):\n \n @indexer(IComment)\n def creator(object):\n-    return object.creator and safe_unicode(object.creator).encode(\'utf-8\')\n+    if not object.creator:\n+        return\n+    value = safe_unicode(object.creator)\n+    if six.PY2:\n+        return value.encode(\'utf8\')\n+    return value\n \n \n @indexer(IComment)\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 7b960071..788d54d8 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -148,7 +148,7 @@ def getText(self, targetMimetype=None):\n         text = self.text\n         if text is None:\n             return \'\'\n-        if isinstance(text, six.text_type):\n+        if six.PY2 and isinstance(text, six.text_type):\n             text = text.encode(\'utf8\')\n         transform = transforms.convertTo(\n             targetMimetype,\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex e616a79e..5a6ed71b 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -161,7 +161,7 @@ def addComment(self, comment):\n \n         comment = aq_base(comment)\n \n-        id = long(time.time() * 1e6)\n+        id = int(time.time() * 1e6)\n         while id in self._comments:\n             id += 1\n \n@@ -206,22 +206,22 @@ def __len__(self):\n         return len(self._comments)\n \n     def __contains__(self, key):\n-        return long(key) in self._comments\n+        return int(key) in self._comments\n \n     def __getitem__(self, key):\n-        """Get an item by its long key\n+        """Get an item by its int key\n         """\n         try:\n-            comment_id = long(key)\n+            comment_id = int(key)\n         except ValueError:\n             return\n         return self._comments[comment_id].__of__(self)\n \n     def __delitem__(self, key, suppress_container_modified=False):\n-        """Delete an item by its long key\n+        """Delete an item by its int key\n         """\n \n-        key = long(key)\n+        key = int(key)\n \n         comment = self[key].__of__(self)\n         commentator = comment.author_username\n@@ -260,7 +260,7 @@ def __iter__(self):\n         return iter(self._comments)\n \n     def get(self, key, default=None):\n-        comment = self._comments.get(long(key), default)\n+        comment = self._comments.get(int(key), default)\n         if comment is default:\n             return default\n         return comment.__of__(self)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-18T15:13:38+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.discussion/commit/95861b28d5a903138ad2c951773c78eb901fe76f

fix tests with py3

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/conversation.py
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex b0cfb399..4521a6d7 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -17,6 +17,7 @@\n from plone.z3cform.fieldsets import extensible\n from plone.z3cform.interfaces import IWrappedForm\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from six.moves.urllib.parse import quote\n@@ -152,13 +153,9 @@ def get_author(self, data):\n \n         # Make sure author_name/ author_email is properly encoded\n         if \'author_name\' in data:\n-            author_name = data[\'author_name\']\n-            if isinstance(author_name, str):\n-                author_name = six.text_type(author_name, \'utf-8\')\n+            author_name = safe_unicode(data[\'author_name\'])\n         if \'author_email\' in data:\n-            author_email = data[\'author_email\']\n-            if isinstance(author_email, str):\n-                author_email = six.text_type(author_email, \'utf-8\')\n+            author_email = safe_unicode(data[\'author_email\'])\n \n         # Set comment author properties for anonymous users or members\n         portal_membership = getToolByName(context, \'portal_membership\')\n@@ -167,8 +164,7 @@ def get_author(self, data):\n                 \'Reply to item\', context):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n-            # memberdata is stored as utf-8 encoded strings\n-            email = member.getProperty(\'email\')\n+            email = safe_unicode(member.getProperty(\'email\'))\n             fullname = member.getProperty(\'fullname\')\n             if not fullname or fullname == \'\':\n                 fullname = member.getUserName()\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex 5a6ed71b..ae133018 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -347,20 +347,20 @@ def __len__(self):\n         return len(self.children)\n \n     def __contains__(self, key):\n-        return long(key) in self.children\n+        return int(key) in self.children\n \n     def __getitem__(self, key):\n-        """Get an item by its long key\n+        """Get an item by its int key\n         """\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         return self.conversation[key]\n \n     def __delitem__(self, key):\n-        """Delete an item by its long key\n+        """Delete an item by its int key\n         """\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         del self.conversation[key]\n@@ -369,7 +369,7 @@ def __iter__(self):\n         return iter(self.children)\n \n     def get(self, key, default=None):\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             return default\n         return self.conversation.get(key)\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex d78a7eb2..36ad8a17 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -470,7 +470,7 @@ Edit the content object.\n     >>> from hashlib import sha1 as sha\n     >>> ring = _getKeyring(\'foo\')\n     >>> secret = ring.random()\n-    >>> token = hmac.new(secret, \'admin\', sha).hexdigest()\n+    >>> token = hmac.new(secret.encode(\'utf8\'), b\'admin\', sha).hexdigest()\n     >>> browser.open("http://nohost/plone/doc1/edit?_authenticator=" + token)\n     >>> browser.getControl(name=\'form.widgets.IRichTextBehavior.text\').value = "Lorem ipsum"\n     >>> browser.getControl(\'Save\').click()\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex 8ac4d933..06009860 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -171,9 +171,10 @@ def test_getText_escapes_HTML(self):\n     def test_getText_with_non_ascii_characters(self):\n         comment1 = createObject(\'plone.Comment\')\n         comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n+        out = b\'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\',\n+            out.decode(\'utf8\')\n         )\n \n     def test_getText_doesnt_link(self):\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 5a34cb62..942f0d26 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -567,7 +567,8 @@ def test_get_replies(self):\n         replies = self.viewlet.get_replies()\n         next(replies)\n         next(replies)\n-        self.assertRaises(StopIteration, replies.next)\n+        with self.assertRaises(StopIteration):\n+            next(replies)\n \n     def test_get_replies_on_non_annotatable_object(self):\n         context = self.portal.MailHost      # the mail host is not annotatable\n@@ -575,7 +576,8 @@ def test_get_replies_on_non_annotatable_object(self):\n         replies = viewlet.get_replies()\n         self.assertEqual(len(tuple(replies)), 0)\n         replies = viewlet.get_replies()\n-        self.assertRaises(StopIteration, replies.next)\n+        with self.assertRaises(StopIteration):\n+            next(replies)\n \n     def test_get_replies_with_workflow_actions(self):\n         self.assertFalse(self.viewlet.get_replies(workflow_actions=True))\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex 6b9610ef..c05aeded 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -54,7 +54,7 @@ def testEventTypesMarked(self):\n     def testCommentIdStringSubstitution(self):\n         comment_id = getAdapter(self.document, IStringSubstitution,\n                                 name=u\'comment_id\')\n-        self.assertIsInstance(comment_id(), long)\n+        self.assertIsInstance(comment_id(), int)\n \n     def testCommentTextStringSubstitution(self):\n         comment_text = getAdapter(self.document, IStringSubstitution,\n@@ -114,7 +114,7 @@ def testReplyIdStringSubstitution(self):\n             IStringSubstitution,\n             name=u\'comment_id\',\n         )\n-        self.assertIsInstance(reply_id(), long)\n+        self.assertIsInstance(reply_id(), int)\n \n     def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 6f948949..fcf528c1 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -68,7 +68,7 @@ def test_add_comment(self):\n         new_id = conversation.addComment(comment)\n \n         # Check that the conversation methods return the correct data\n-        self.assertTrue(isinstance(comment.comment_id, long))\n+        self.assertTrue(isinstance(comment.comment_id, int))\n         self.assertTrue(IComment.providedBy(conversation[new_id]))\n         self.assertEqual(\n             aq_base(conversation[new_id].__parent__),\n@@ -641,7 +641,7 @@ def test_traversal(self):\n \n     def test_unconvertible_id(self):\n         # make sure the conversation view doesn\'t break when given comment id\n-        # can\'t be converted to long\n+        # can\'t be converted to int\n \n         conversation = self.portal.doc1.restrictedTraverse(\n             \'++conversation++default/ThisCantBeRight\',\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-18T15:13:38+02:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.discussion/commit/c6d1f832da32841c7a48d319bc3327970e6c28e7

Fix old-division

Files changed:
M CHANGES.rst
M plone/app/discussion/tests/test_comment.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex be4873e8..0f3895af 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -41,7 +41,7 @@ Bug fixes:\n   [jensens]\n \n - More Python 2 / 3 compatibility.\n-  [pbauer]\n+  [pbauer, hvelarde]\n \n \n 3.0.5 (2018-02-04)\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex 06009860..c757db09 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -54,7 +54,7 @@ def test_UTCDates(self):\n             difference = difference.seconds\n             # We hope that between comment1 and local_utc happen less than\n             # 10 seconds\n-            self.assertFalse(difference / 10)\n+            self.assertFalse(difference // 10)\n \n     def test_id(self):\n         comment1 = createObject('plone.Comment')\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-18T15:19:40+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.discussion/commit/7396abf6cf9c257233a6a4c281ab6172537e38a8

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0f3895af..74f80da0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,6 @@\n Changelog\n =========\n \n-3.0.6 (unreleased)\n 3.0.7 (unreleased)\n ------------------\n \n@@ -23,18 +22,12 @@ Bug fixes:\n   This is a follow up to `issue 476 <https://github.com/plone/plone.app.contenttypes/issues/476>`_.\n   [iham]\n \n+- Fix commenting and tests in python 3.\n+  [pbauer]\n \n 3.0.6 (2018-06-18)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n - Fix tests to work with merges plone.login.\ndiff --git a/setup.py b/setup.py\nindex 29d217cd..4544405b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,9 +37,12 @@\n           'Framework :: Plone',\n           'Framework :: Plone :: 5.0',\n           'Framework :: Plone :: 5.1',\n+          'Framework :: Plone :: 5.2',\n           'License :: OSI Approved :: GNU General Public License (GPL)',\n           'Programming Language :: Python',\n           'Programming Language :: Python :: 2.7',\n+          'Programming Language :: Python :: 3.6',\n+          'Programming Language :: Python :: 3.7',\n       ],\n       keywords='plone discussion',\n       author='Timo Stollenwerk - Plone Foundation',\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-20T18:31:23+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.discussion/commit/08b6db8b676705bc441ff4db508688bf9debd783

fix test in py3

Files changed:
M plone/app/discussion/browser/comments.py

b"diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 4521a6d7..68592d38 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -33,8 +33,6 @@\n from zope.i18nmessageid import Message\n from zope.interface import alsoProvides\n \n-import six\n-\n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n     u'comment_description_plain_text',\n@@ -168,11 +166,9 @@ def get_author(self, data):\n             fullname = member.getProperty('fullname')\n             if not fullname or fullname == '':\n                 fullname = member.getUserName()\n-            elif isinstance(fullname, str):\n-                fullname = six.text_type(fullname, 'utf-8')\n+            fullname = safe_unicode(fullname)\n             author_name = fullname\n-            if email and isinstance(email, str):\n-                email = six.text_type(email, 'utf-8')\n+            email = safe_unicode(email)\n             # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # 'for anonymous comments only, set to None for logged in comments'\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2018-09-21T10:03:37+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.discussion/commit/3e2446c6b0c1fa2b6e1e9f5657ee606a1153c208

Merge pull request #133 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/app/discussion/browser/comments.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/conversation.py
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_conversation.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex be4873e8..74f80da0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,6 @@\n Changelog\n =========\n \n-3.0.6 (unreleased)\n 3.0.7 (unreleased)\n ------------------\n \n@@ -23,25 +22,19 @@ Bug fixes:\n   This is a follow up to `issue 476 <https://github.com/plone/plone.app.contenttypes/issues/476>`_.\n   [iham]\n \n+- Fix commenting and tests in python 3.\n+  [pbauer]\n \n 3.0.6 (2018-06-18)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n - Fix tests to work with merges plone.login.\n   [jensens]\n \n - More Python 2 / 3 compatibility.\n-  [pbauer]\n+  [pbauer, hvelarde]\n \n \n 3.0.5 (2018-02-04)\ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex b0cfb399..68592d38 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -17,6 +17,7 @@\n from plone.z3cform.fieldsets import extensible\n from plone.z3cform.interfaces import IWrappedForm\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from six.moves.urllib.parse import quote\n@@ -32,8 +33,6 @@\n from zope.i18nmessageid import Message\n from zope.interface import alsoProvides\n \n-import six\n-\n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n     u\'comment_description_plain_text\',\n@@ -152,13 +151,9 @@ def get_author(self, data):\n \n         # Make sure author_name/ author_email is properly encoded\n         if \'author_name\' in data:\n-            author_name = data[\'author_name\']\n-            if isinstance(author_name, str):\n-                author_name = six.text_type(author_name, \'utf-8\')\n+            author_name = safe_unicode(data[\'author_name\'])\n         if \'author_email\' in data:\n-            author_email = data[\'author_email\']\n-            if isinstance(author_email, str):\n-                author_email = six.text_type(author_email, \'utf-8\')\n+            author_email = safe_unicode(data[\'author_email\'])\n \n         # Set comment author properties for anonymous users or members\n         portal_membership = getToolByName(context, \'portal_membership\')\n@@ -167,16 +162,13 @@ def get_author(self, data):\n                 \'Reply to item\', context):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n-            # memberdata is stored as utf-8 encoded strings\n-            email = member.getProperty(\'email\')\n+            email = safe_unicode(member.getProperty(\'email\'))\n             fullname = member.getProperty(\'fullname\')\n             if not fullname or fullname == \'\':\n                 fullname = member.getUserName()\n-            elif isinstance(fullname, str):\n-                fullname = six.text_type(fullname, \'utf-8\')\n+            fullname = safe_unicode(fullname)\n             author_name = fullname\n-            if email and isinstance(email, str):\n-                email = six.text_type(email, \'utf-8\')\n+            email = safe_unicode(email)\n             # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # \'for anonymous comments only, set to None for logged in comments\'\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 6bbc760a..73c5ab2d 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -13,6 +13,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.interfaces import IZCatalog\n \n+import six\n \n MAX_DESCRIPTION = 25\n \n@@ -70,7 +71,12 @@ def title(object):\n \n @indexer(IComment)\n def creator(object):\n-    return object.creator and safe_unicode(object.creator).encode(\'utf-8\')\n+    if not object.creator:\n+        return\n+    value = safe_unicode(object.creator)\n+    if six.PY2:\n+        return value.encode(\'utf8\')\n+    return value\n \n \n @indexer(IComment)\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 7b960071..788d54d8 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -148,7 +148,7 @@ def getText(self, targetMimetype=None):\n         text = self.text\n         if text is None:\n             return \'\'\n-        if isinstance(text, six.text_type):\n+        if six.PY2 and isinstance(text, six.text_type):\n             text = text.encode(\'utf8\')\n         transform = transforms.convertTo(\n             targetMimetype,\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex e616a79e..ae133018 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -161,7 +161,7 @@ def addComment(self, comment):\n \n         comment = aq_base(comment)\n \n-        id = long(time.time() * 1e6)\n+        id = int(time.time() * 1e6)\n         while id in self._comments:\n             id += 1\n \n@@ -206,22 +206,22 @@ def __len__(self):\n         return len(self._comments)\n \n     def __contains__(self, key):\n-        return long(key) in self._comments\n+        return int(key) in self._comments\n \n     def __getitem__(self, key):\n-        """Get an item by its long key\n+        """Get an item by its int key\n         """\n         try:\n-            comment_id = long(key)\n+            comment_id = int(key)\n         except ValueError:\n             return\n         return self._comments[comment_id].__of__(self)\n \n     def __delitem__(self, key, suppress_container_modified=False):\n-        """Delete an item by its long key\n+        """Delete an item by its int key\n         """\n \n-        key = long(key)\n+        key = int(key)\n \n         comment = self[key].__of__(self)\n         commentator = comment.author_username\n@@ -260,7 +260,7 @@ def __iter__(self):\n         return iter(self._comments)\n \n     def get(self, key, default=None):\n-        comment = self._comments.get(long(key), default)\n+        comment = self._comments.get(int(key), default)\n         if comment is default:\n             return default\n         return comment.__of__(self)\n@@ -347,20 +347,20 @@ def __len__(self):\n         return len(self.children)\n \n     def __contains__(self, key):\n-        return long(key) in self.children\n+        return int(key) in self.children\n \n     def __getitem__(self, key):\n-        """Get an item by its long key\n+        """Get an item by its int key\n         """\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         return self.conversation[key]\n \n     def __delitem__(self, key):\n-        """Delete an item by its long key\n+        """Delete an item by its int key\n         """\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         del self.conversation[key]\n@@ -369,7 +369,7 @@ def __iter__(self):\n         return iter(self.children)\n \n     def get(self, key, default=None):\n-        key = long(key)\n+        key = int(key)\n         if key not in self.children:\n             return default\n         return self.conversation.get(key)\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex d78a7eb2..36ad8a17 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -470,7 +470,7 @@ Edit the content object.\n     >>> from hashlib import sha1 as sha\n     >>> ring = _getKeyring(\'foo\')\n     >>> secret = ring.random()\n-    >>> token = hmac.new(secret, \'admin\', sha).hexdigest()\n+    >>> token = hmac.new(secret.encode(\'utf8\'), b\'admin\', sha).hexdigest()\n     >>> browser.open("http://nohost/plone/doc1/edit?_authenticator=" + token)\n     >>> browser.getControl(name=\'form.widgets.IRichTextBehavior.text\').value = "Lorem ipsum"\n     >>> browser.getControl(\'Save\').click()\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex 8ac4d933..c757db09 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -54,7 +54,7 @@ def test_UTCDates(self):\n             difference = difference.seconds\n             # We hope that between comment1 and local_utc happen less than\n             # 10 seconds\n-            self.assertFalse(difference / 10)\n+            self.assertFalse(difference // 10)\n \n     def test_id(self):\n         comment1 = createObject(\'plone.Comment\')\n@@ -171,9 +171,10 @@ def test_getText_escapes_HTML(self):\n     def test_getText_with_non_ascii_characters(self):\n         comment1 = createObject(\'plone.Comment\')\n         comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n+        out = b\'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\',\n+            out.decode(\'utf8\')\n         )\n \n     def test_getText_doesnt_link(self):\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 5a34cb62..942f0d26 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -567,7 +567,8 @@ def test_get_replies(self):\n         replies = self.viewlet.get_replies()\n         next(replies)\n         next(replies)\n-        self.assertRaises(StopIteration, replies.next)\n+        with self.assertRaises(StopIteration):\n+            next(replies)\n \n     def test_get_replies_on_non_annotatable_object(self):\n         context = self.portal.MailHost      # the mail host is not annotatable\n@@ -575,7 +576,8 @@ def test_get_replies_on_non_annotatable_object(self):\n         replies = viewlet.get_replies()\n         self.assertEqual(len(tuple(replies)), 0)\n         replies = viewlet.get_replies()\n-        self.assertRaises(StopIteration, replies.next)\n+        with self.assertRaises(StopIteration):\n+            next(replies)\n \n     def test_get_replies_with_workflow_actions(self):\n         self.assertFalse(self.viewlet.get_replies(workflow_actions=True))\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex 6b9610ef..c05aeded 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -54,7 +54,7 @@ def testEventTypesMarked(self):\n     def testCommentIdStringSubstitution(self):\n         comment_id = getAdapter(self.document, IStringSubstitution,\n                                 name=u\'comment_id\')\n-        self.assertIsInstance(comment_id(), long)\n+        self.assertIsInstance(comment_id(), int)\n \n     def testCommentTextStringSubstitution(self):\n         comment_text = getAdapter(self.document, IStringSubstitution,\n@@ -114,7 +114,7 @@ def testReplyIdStringSubstitution(self):\n             IStringSubstitution,\n             name=u\'comment_id\',\n         )\n-        self.assertIsInstance(reply_id(), long)\n+        self.assertIsInstance(reply_id(), int)\n \n     def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 6f948949..fcf528c1 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -68,7 +68,7 @@ def test_add_comment(self):\n         new_id = conversation.addComment(comment)\n \n         # Check that the conversation methods return the correct data\n-        self.assertTrue(isinstance(comment.comment_id, long))\n+        self.assertTrue(isinstance(comment.comment_id, int))\n         self.assertTrue(IComment.providedBy(conversation[new_id]))\n         self.assertEqual(\n             aq_base(conversation[new_id].__parent__),\n@@ -641,7 +641,7 @@ def test_traversal(self):\n \n     def test_unconvertible_id(self):\n         # make sure the conversation view doesn\'t break when given comment id\n-        # can\'t be converted to long\n+        # can\'t be converted to int\n \n         conversation = self.portal.doc1.restrictedTraverse(\n             \'++conversation++default/ThisCantBeRight\',\ndiff --git a/setup.py b/setup.py\nindex 29d217cd..4544405b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,9 +37,12 @@\n           \'Framework :: Plone\',\n           \'Framework :: Plone :: 5.0\',\n           \'Framework :: Plone :: 5.1\',\n+          \'Framework :: Plone :: 5.2\',\n           \'License :: OSI Approved :: GNU General Public License (GPL)\',\n           \'Programming Language :: Python\',\n           \'Programming Language :: Python :: 2.7\',\n+          \'Programming Language :: Python :: 3.6\',\n+          \'Programming Language :: Python :: 3.7\',\n       ],\n       keywords=\'plone discussion\',\n       author=\'Timo Stollenwerk - Plone Foundation\',\n'

