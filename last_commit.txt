Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T10:37:37-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/5a599a8e4b2b936b0ff9835ad31bbd4d8707070a

Convert documentation to markdown

Files changed:
A .github/workflows/docs.yml
A CHANGES.md
A Makefile
A README.md
A docs/caching-control-panel.md
A docs/caching-profiles.md
A docs/caching-proxies.md
A docs/changelog_template.jinja
A docs/composite-views.md
A docs/etags.md
A docs/index.md
A docs/ram-cache.md
A docs/restapi.md
A docs/rulesets-and-caching-operations.md
A instance.yaml
A mx.ini
A news/114.documentation
A requirements-docs.txt
A requirements.txt
M .gitignore
M docs/conf.py
M pyproject.toml
M setup.py
D CHANGES.rst
D CONTRIBUTING.rst
D README.rst
D docs/README.rst
D docs/caching-control-panel.rst
D docs/caching-profiles.rst
D docs/caching-proxies.rst
D docs/composite-views.rst
D docs/etags.rst
D docs/index.rst
D docs/ram-cache.rst
D docs/restapi.rst
D docs/rulesets-and-caching-operations.rst

b'diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nnew file mode 100644\nindex 0000000..9ada0eb\n--- /dev/null\n+++ b/.github/workflows/docs.yml\n@@ -0,0 +1,30 @@\n+name: Build docs\n+on: [push]\n+\n+env:\n+  python-version: "3.11"\n+  plone-version: "6.0-latest"\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v3\n+\n+      # python setup\n+      - name: Setup Plone ${{ env.plone-version }} with Python ${{ env.python-version }}\n+        id: setup\n+        uses: plone/setup-plone@v2.0.0\n+        with:\n+          python-version: ${{ env.python-version }}\n+          plone-version: ${{ env.plone-version }}\n+\n+      - name: Install dependencies\n+        run: |\n+          pip install -r requirements.txt\n+          pip install -r requirements-docs.txt\n+\n+      - name: Build Documentation\n+        run: |\n+          sphinx-build -b html docs docs/_build/html\ndiff --git a/.gitignore b/.gitignore\nindex aafcd8e..86faa99 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -8,11 +8,14 @@ develop-eggs/\n downloads/\n eggs/\n include/\n+instance/\n lib/\n parts/\n var/\n docs/Makefile\n docs/make.bat\n docs/doctrees\n-docs/html\n-\n+docs/_build\n+# mxdev\n+constraints-mxdev.txt\n+requirements-mxdev.txt\ndiff --git a/CHANGES.rst b/CHANGES.md\nsimilarity index 77%\nrename from CHANGES.rst\nrename to CHANGES.md\nindex 32ac7bf..454c90a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.md\n@@ -1,18 +1,17 @@\n-Changelog\n----------\n+# Changelog\n \n-.. You should *NOT* be adding new change log entries to this file.\n+<!--\n+   You should *NOT* be adding new change log entries to this file.\n    You should create a file in the news directory instead.\n    For helpful instructions, please see:\n    https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+-->\n \n-.. towncrier release notes start\n+<!-- towncrier release notes start -->\n \n-3.0.2 (2023-01-26)\n-------------------\n-\n-Bug fixes:\n+## 3.0.2 (2023-01-26)\n \n+### Bug fixes:\n \n - Correct Bootstrap classes for `<select />` in controlpanel.\n   [petschki] (#112)\n@@ -21,212 +20,150 @@ Bug fixes:\n   See `Zope issue 1089 <https://github.com/zopefoundation/Zope/issues/1089>`_.\n   [maurits] (#1089)\n \n+## 3.0.1 (2022-12-21)\n \n-3.0.1 (2022-12-21)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix tests to work with the Zope security fix.\n   [maurits] (#106)\n \n+## 3.0.0 (2022-11-14)\n \n-3.0.0 (2022-11-14)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add missing quotation mark in Etag 304 Response [sverbois] (#104)\n \n+## 3.0.0b2 (2022-07-20)\n \n-3.0.0b2 (2022-07-20)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Remove trailing comma to avoid different default messages for the same msgid\n   [erral] (#102)\n \n+## 3.0.0b1 (2022-06-23)\n \n-3.0.0b1 (2022-06-23)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add missing i18n tags\n   [erral] (#101)\n \n+## 3.0.0a14 (2022-05-15)\n \n-3.0.0a14 (2022-05-15)\n----------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Remove unmaintained Split-View profile.\n   [jensens] (#99)\n \n-\n-New features:\n-\n+### New features:\n \n - Move caching ruleset assignments from here to plone.restapi and add ZCML feature here.\n   [jensens] (#100)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Minor overhaul, use plone.base, remove some Plone 5.2 imports, ...\n   [jensens] (#98)\n - Minor code cleanup and review/overhaul docs.\n   [jensens] (#99)\n \n+## 3.0.0a13 (2022-04-05)\n \n-3.0.0a13 (2022-04-05)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Apply black to the codebase, format it to be Python 3 only (#94)\n \n+## 3.0.0a12 (2022-04-04)\n \n-3.0.0a12 (2022-04-04)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Test-only fix: caching checks for ``timestamp.txt`` in ``portal_resources`` which is no longer there.\n   Update ETAG Headers accordingly.\n   [pbauer] (#92)\n \n+## 3.0.0a11 (2022-02-24)\n \n-3.0.0a11 (2022-02-24)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Updated control panel icon. Use iconresolver to get the proper svg icon.\n   [yurj] (#91)\n \n+## 3.0.0a10 (2021-12-01)\n \n-3.0.0a10 (2021-12-01)\n----------------------\n-\n-New features:\n-\n+### New features:\n \n - When purging images also purge the field WITHOUT a size parameter (e.g. ``[...]/@@images/image``).\n   [wolbernd] (#89)\n \n+## 3.0.0a9 (2021-11-23)\n \n-3.0.0a9 (2021-11-23)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Remove translations endpoint test because it does not have the correct fixture\n   [sneridagh] (#87)\n \n+## 3.0.0a8 (2021-10-22)\n \n-3.0.0a8 (2021-10-22)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - fix deprecated imports\n   [petschki] (#86)\n \n+## 3.0.0a7 (2021-10-13)\n \n-3.0.0a7 (2021-10-13)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix label in controlpanel.pt.  [brian.duncan] (#84)\n \n+## 3.0.0a6 (2021-09-15)\n \n-3.0.0a6 (2021-09-15)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add upgrade step to define the new base terse cache setting.\n   [maurits] (#82)\n \n+## 3.0.0a5 (2021-09-01)\n \n-3.0.0a5 (2021-09-01)\n---------------------\n-\n-New features:\n-\n+### New features:\n \n - Add etag for layout property.\n   This is not yet added to a caching profile, but this can be done later.\n   Fixes `issue 80 <https://github.com/plone/plone.app.caching/issues/80>`_.\n   [maurits] (#80)\n \n+## 3.0.0a4 (2021-05-14)\n \n-3.0.0a4 (2021-05-14)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix ram-caching of binary files.\n   [agitator] (#79)\n \n+## 3.0.0a3 (2021-02-25)\n \n-3.0.0a3 (2021-02-25)\n---------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Update for Plone 6 with Bootstrap markup\n   [ale-rt, jensens] (#63)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Links with pat-modal:  Remove unused redirectOnResponse from data-pat-modal actionOptions.  (Products.CMFPlone#3197)\n   [fulv] (#3197)\n \n+## 3.0.0a2 (2021-02-02)\n \n-3.0.0a2 (2021-02-02)\n---------------------\n-\n-New features:\n-\n+### New features:\n \n - Restored ``resourceRegistries`` ETag, but now for Plone 5 resource registries.\n   Fixes warning "Could not find value adapter for ETag component resourceRegistries".\n   [maurits] (#61)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add more purge paths for images and downloads [jensens] (#71)\n \n+## 3.0.0a1 (2020-12-03)\n \n-3.0.0a1 (2020-12-03)\n---------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Remove traces of Archetypes\n   [pbauer] (#68)\n@@ -234,9 +171,7 @@ Breaking changes:\n   Black code style and isort.\n   [jensens] (#69)\n \n-\n-New features:\n-\n+### New features:\n \n - Introduce *terseCaching* operation and `plone.content.dynamic` ruleset.\n   *terseCaching* is a rule with by default 10s in browser cache and 60s in edge cache.\n@@ -249,104 +184,75 @@ New features:\n   Latter may conflict with edge side cache not supporting the Vary header.\n   [jensens] (66-2)\n \n+## 2.0.8 (2020-10-30)\n \n-2.0.8 (2020-10-30)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Do not assume request or request.URL is a string. It might be None. [jensens, iham] (#59)\n - Remove hopelessly outdated proxy config examples.\n   Look at plone.recipe.varnish for excellent examples!\n   [jensens] (#64)\n \n+## 2.0.7 (2020-09-28)\n \n-2.0.7 (2020-09-28)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fixed invalid escape sequences.\n   [maurits] (#3130)\n \n+## 2.0.6 (2020-06-24)\n \n-2.0.6 (2020-06-24)\n-------------------\n-\n-New features:\n-\n+### New features:\n \n - Remove Range from request if the If-Range condition is not fulfilled\n   [mamico] (#58)\n \n+## 2.0.5 (2020-04-20)\n \n-2.0.5 (2020-04-20)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Minor packaging updates. (#1)\n \n+## 2.0.4 (2020-02-20)\n \n-2.0.4 (2020-02-20)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Purging image scales of behavior fields, e.g. lead image\n   [ksuess] (#55)\n \n+## 2.0.3 (2019-09-13)\n \n-2.0.3 (2019-09-13)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix python3 related encoding error on manual purge page.\n   [agitator] (#51)\n \n+## 2.0.2 (2019-04-10)\n \n-2.0.2 (2019-04-10)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - fix typo [vincentfretin] (#47)\n - Fix controlpanel for Python 3\n   [petschki] (#48)\n \n+## 2.0.1 (2019-03-03)\n \n-2.0.1 (2019-03-03)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Only fire 1 Purge() when deleting content, instead of 3 [skurfer]\n   Detect and ignore content creation more reliably [skurfer]\n   Also purge the parent object when something changes (since the parent probably displays a list that includes the item being changed)\n   [skurfer] (#37)\n \n+## 2.0.0 (2019-02-08)\n \n-2.0.0 (2019-02-08)\n-------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Removed legacy resource registries [ksuess] (#45)\n \n+## 1.2.23 (2018-12-28)\n \n-1.2.23 (2018-12-28)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Warn after save if caching was disabled while purging is still enabled.\n   [jensens]\n@@ -357,20 +263,16 @@ Clean-up\n   Handling of legacy resource registries Products.ResourceRegistries removed\n   [ksuess]\n \n+## 1.2.22 (2018-09-23)\n \n-1.2.22 (2018-09-23)\n--------------------\n-\n-New features:\n+### New features:\n \n - Python 3 support\n   [pbauer, MatthewWilkes, ale-rt]\n \n+## 1.2.21 (2018-04-03)\n \n-1.2.21 (2018-04-03)\n--------------------\n-\n-New features:\n+### New features:\n \n - Use plone as i18n domain in ZCML files too\n   [erral]\n@@ -378,63 +280,51 @@ New features:\n - Use plone as i18n domain\n   [erral]\n \n-Bug fixes:\n+### Bug fixes:\n \n - Fix backslash escapes in i18nstring (poedit complains).\n   [jensens]\n \n+## 1.2.20 (2018-02-05)\n \n-1.2.20 (2018-02-05)\n--------------------\n-\n-New features:\n+### New features:\n \n - Prepare for Python 2 / 3 compatibility\n   [b4oshany, davilima6]\n \n+## 1.2.19 (2017-11-24)\n \n-1.2.19 (2017-11-24)\n--------------------\n-\n-New features:\n+### New features:\n \n - Purging all image scale paths and file paths in custom dexterity content types. [karalics]\n \n+## 1.2.18 (2017-04-08)\n \n-1.2.18 (2017-04-08)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fixed blank edit forms of the per ruleset parameters.\n   `Issue 1993 <https://github.com/plone/Products.CMFPlone/issues/1993>`_.\n   [maurits]\n \n+## 1.2.17 (2017-04-02)\n \n-1.2.17 (2017-04-02)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fixed title and description of max age in strong caching rule for resources.\n   They wrongly were the same as for shared max age.\n   Fixes `issue 1989 <https://github.com/plone/Products.CMFPlone/issues/1989>`_.\n   [maurits]\n \n+## 1.2.16 (2017-03-23)\n \n-1.2.16 (2017-03-23)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fix: Do not break Plone if there is no Archetypes available.\n   [jensens]\n \n+## 1.2.15 (2017-01-12)\n \n-1.2.15 (2017-01-12)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Remove dependency on unittest2; fix tests assertions.\n   [hvelarde]\n@@ -442,36 +332,28 @@ Bug fixes:\n - Fixed tests when using ZODB 4.\n   [davisagli]\n \n+## 1.2.14 (2016-11-18)\n \n-1.2.14 (2016-11-18)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Update code to follow Plone styleguide.\n   [gforcada]\n \n+## 1.2.13 (2016-10-05)\n \n-1.2.13 (2016-10-05)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Code-Style: isort, utf8-headers, zca-decorators, manual cleanup.\n   [jensens]\n \n+## 1.2.12 (2016-09-16)\n \n-1.2.12 (2016-09-16)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Enable unload protection by using pattern class ``pat-formunloadalert`` instead ``enableUnloadProtection``.\n   [thet]\n \n-\n-1.2.11 (2016-08-17)\n--------------------\n+## 1.2.11 (2016-08-17)\n \n Fixes:\n \n@@ -481,26 +363,20 @@ Fixes:\n - Use zope.interface decorator.\n   [gforcada]\n \n-\n-1.2.10 (2016-03-29)\n--------------------\n+## 1.2.10 (2016-03-29)\n \n New:\n \n - Show status after synchronous purge if it is an error status.\n   [maurits]\n \n-\n-1.2.9 (2016-02-19)\n-------------------\n+## 1.2.9 (2016-02-19)\n \n Fixes:\n \n - Fixed deprecated imports in tests.  [thet]\n \n-\n-1.2.8 (2015-11-28)\n-------------------\n+## 1.2.8 (2015-11-28)\n \n Fixes:\n \n@@ -508,17 +384,13 @@ Fixes:\n   Fixes https://github.com/plone/Products.CMFPlone/issues/1255\n   [davilima6]\n \n-\n-1.2.7 (2015-09-09)\n-------------------\n+## 1.2.7 (2015-09-09)\n \n - fix cache settings modal settings so they do not show content\n   inline on save.\n   [vangheem]\n \n-\n-1.2.6 (2015-07-18)\n-------------------\n+## 1.2.6 (2015-07-18)\n \n - Remove gzip option, silly to be done at this layer.\n   [vangheem]\n@@ -526,18 +398,14 @@ Fixes:\n - Change the category of the configlet to \'plone-advanced\'\n   [sneridagh]\n \n-\n-1.2.5 (2015-06-09)\n-------------------\n+## 1.2.5 (2015-06-09)\n \n - correctly create purge paths for root of site, prevent double slashes\n   and the empty root of site(no trailing slash) not getting a purge\n   path generated\n   [vangheem]\n \n-\n-1.2.4 (2015-06-05)\n-------------------\n+## 1.2.4 (2015-06-05)\n \n - update first time here warning\n   [vangheem]\n@@ -545,9 +413,7 @@ Fixes:\n - make control panel work for both plone 4 and plone 5 with tabs\n   [vangheem]\n \n-\n-1.2.3 (2015-05-04)\n-------------------\n+## 1.2.3 (2015-05-04)\n \n - Fixed getObjectDefaultView method to strip off leading / and/or @@.\n   [alecghica]\n@@ -556,9 +422,7 @@ Fixes:\n   This bug resulted in rarely doing all the purging required.\n   [puittenbroek]\n \n-\n-1.2.2 (2014-10-23)\n-------------------\n+## 1.2.2 (2014-10-23)\n \n - Remove DL\'s from portal message templates.\n   https://github.com/plone/Products.CMFPlone/issues/153\n@@ -567,23 +431,17 @@ Fixes:\n - Fix ruleset registry test isolation so that is no longer order dependent.\n   [jone]\n \n-\n-1.2.1 (2014-04-01)\n-------------------\n+## 1.2.1 (2014-04-01)\n \n - Fix tests that fail on the day before the switch to daylight saving time.\n   [pbauer]\n \n-\n-1.2.0 (2014-02-26)\n-------------------\n+## 1.2.0 (2014-02-26)\n \n - Use the PLONE_APP_CONTENTTYPES_FIXTURE test layer for Plone 5 compatibility.\n   [timo]\n \n-\n-1.1.7 (unreleased)\n-------------------\n+## 1.1.7 (unreleased)\n \n - Make it possible to set a maxage of zero in strong caching. This is\n   an edge case since this would ordinarily be handled by moderate caching.\n@@ -596,40 +454,30 @@ Fixes:\n   was effectively ignored. Added operation test for strong caching.\n   [smcmahon]\n \n-\n-1.1.6 (2013-08-14)\n-------------------\n+## 1.1.6 (2013-08-14)\n \n - Fix double purge of paths for items whose default view is the same as /view\n   [eleddy]\n \n-\n-1.1.5 (2013-08-13)\n-------------------\n+## 1.1.5 (2013-08-13)\n \n - Register the plone.atobjectfields adapter not only when Products.Archetypes\n   but also plone.app.blob is installed.\n   [thet]\n \n-\n-1.1.4 (2013-06-13)\n-------------------\n+## 1.1.4 (2013-06-13)\n \n - Fixed purge paths for virtual hosting scenarios using virtual path components.\n   [dokai]\n \n-\n-1.1.3 (2013-03-05)\n-------------------\n+## 1.1.3 (2013-03-05)\n \n - Provide message for newbies to suggest importing\n   pre-defined caching rule set.\n   [vangheem]\n \n \n-\n-1.1.2 (2012-12-27)\n-------------------\n+## 1.1.2 (2012-12-27)\n \n - Add other feed types to plone.content.feed purge policy\n   [vangheem]\n@@ -642,15 +490,11 @@ Fixes:\n   iterates on the \'result\' iterable, it must return a new one.\n   [ebrehault]\n \n-\n-1.1.1 (2012-08-30)\n-------------------\n+## 1.1.1 (2012-08-30)\n \n - Nothing changed yet.\n \n-\n-1.1 (2012-05-25)\n-~~~~~~~~~~~~~~~~\n+## 1.1 (2012-05-25)\n \n - Use zope.browserresource instead of zope.app.publisher.\n   [hannosch]\n@@ -658,31 +502,25 @@ Fixes:\n - Deprecated methods aliases were replaced on tests.\n   [hvelarde]\n \n-\n-1.0.4 (unreleased)\n-------------------\n+## 1.0.4 (unreleased)\n \n - Fix possible test failures by logging in with the user name.\n   Note that user id and user name (login name) can differ.\n   [maurits]\n \n-\n-1.0.3 (2012-04-15)\n-------------------\n+## 1.0.3 (2012-04-15)\n \n - Fix packaging issue.\n   [esteele]\n \n+## 1.0.2 (2012-04-15)\n \n-1.0.2 (2012-04-15)\n-------------------\n - Handle caching of resource registries in RAM cache by not storing empty\n   bodies in the RAMCache\n   [eleddy with major tseaver support]\n \n+## 1.0.1 (2012-01-26)\n \n-1.0.1 (2012-01-26)\n-------------------\n - Properly handle a changed configuration from with etags to no etags by\n   forcing a page refresh\n   [eleddy]\n@@ -708,8 +546,7 @@ Fixes:\n - Changed wrong i18n domain in the messagefactory. plone.caching -> plone.app.caching.\n   [giacomos]\n \n-1.0 - 2011-05-12\n-~~~~~~~~~~~~~~~~\n+## 1.0 (2011-05-12)\n \n - Use the `userLanguage` ETag component in place of the language ETag component\n   in the default configs to allow ETags to be used for anonymous users with\n@@ -733,9 +570,7 @@ Fixes:\n   would otherwise take precedence.\n   [stefan]\n \n-\n-1.0b2 - 2011-02-10\n-------------------\n+## 1.0b2 (2011-02-10)\n \n - Added `News Item` to the list of `purgedContentTypes`, so the image field\n   and its scales gets purged.\n@@ -767,9 +602,7 @@ Fixes:\n - Fixed various i18n issues.\n   [vincentfretin]\n \n-\n-1.0b1 - 2010-08-04\n-------------------\n+## 1.0b1 (2010-08-04)\n \n - Add an option for "anonymous only" caching to the default operations.\n   This is a simple way to switch off caching for logged-in users. See\n@@ -786,9 +619,7 @@ Fixes:\n - template fixes for cmf.pt compatibility\n   [pilz]\n \n-\n-1.0a1 - 2010-04-24\n-------------------\n+## 1.0a1 (2010-04-24)\n \n - Initial release.\n   [optilude, newbery, smcmahon]\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\ndeleted file mode 100644\nindex fc637ac..0000000\n--- a/CONTRIBUTING.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-Please see http://docs.plone.org/develop/coredev/docs/guidelines.html\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..aac24b8\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,92 @@\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+PLONE6=6.0-latest\n+\n+BACKEND_FOLDER=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\n+DOCS_DIR=${BACKEND_FOLDER}/docs\n+\n+# Python checks\n+PYTHON?=python3\n+\n+# installed?\n+ifeq (, $(shell which $(PYTHON) ))\n+  $(error "PYTHON=$(PYTHON) not found in $(PATH)")\n+endif\n+\n+# version ok?\n+PYTHON_VERSION_MIN=3.11\n+PYTHON_VERSION_OK=$(shell $(PYTHON) -c \'import sys; print((int(sys.version_info[0]), int(sys.version_info[1])) > tuple(map(int, "$(PYTHON_VERSION_MIN)".split("."))))\')\n+ifeq ($(PYTHON_VERSION_OK),0)\n+  $(error "Need python $(PYTHON_VERSION) >= $(PYTHON_VERSION_MIN)")\n+endif\n+\n+all: build\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+bin/pip:\n+\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n+\t$(PYTHON) -m venv .\n+\tbin/pip install -U "pip" "wheel" "cookiecutter" "mxdev"\n+\n+.PHONY: config\n+config: bin/pip  ## Create instance configuration\n+\t@echo "$(GREEN)==> Create instance configuration$(RESET)"\n+\tbin/cookiecutter -f --no-input --config-file instance.yaml gh:plone/cookiecutter-zope-instance\n+\n+.PHONY: build-dev\n+build-dev: config ## pip install Plone packages\n+\t@echo "$(GREEN)==> Setup Build$(RESET)"\n+\tbin/mxdev -c mx.ini\n+\tbin/pip install -r requirements-mxdev.txt\n+\n+.PHONY: build\n+build: build-dev ## pip install Plone packages\n+\n+.PHONY: clean\n+clean: ## Remove old virtualenv and creates a new one\n+\t@echo "$(RED)==> Cleaning environment and build$(RESET)"\n+\trm -rf bin lib lib64 include share etc var instance pyvenv.cfg\n+\n+.PHONY: start\n+start: ## Start a Plone instance on localhost:8080\n+\tPYTHONWARNINGS=ignore ./bin/runwsgi instance/etc/zope.ini\n+\n+# Tests\n+.PHONY: test\n+test: ## run tests\n+\tbin/pytest --disable-warnings\n+\n+# Docs\n+bin/sphinx-build: bin/pip\n+\tbin/pip install -r requirements-docs.txt\n+\n+.PHONY: build-docs\n+build-docs: bin/sphinx-build  ## Build the documentation\n+\t./bin/sphinx-build \\\n+\t\t-b html $(DOCS_DIR) "$(DOCS_DIR)/_build/html"\n+\n+.PHONY: livehtml\n+livehtml: bin/sphinx-build  ## Rebuild Sphinx documentation on changes, with live-reload in the browser\n+\t./bin/sphinx-autobuild \\\n+\t\t--ignore "*.swp" \\\n+\t\t-b html $(DOCS_DIR) "$(DOCS_DIR)/_build/html"\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 0000000..3d6267e\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,74 @@\n+<p align="center">\n+    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-logo.png">\n+</p>\n+\n+<h1 align="center">\n+  plone.app.caching\n+</h1>\n+\n+<div align="center">\n+\n+[![PyPI - Wheel](https://img.shields.io/pypi/wheel/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - License](https://img.shields.io/pypi/l/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - Status](https://img.shields.io/pypi/status/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+\n+[![GitHub contributors](https://img.shields.io/github/contributors/plone/plone.app.caching)](https://github.com/plone/plone.app.caching)\n+![GitHub Repo stars](https://img.shields.io/github/stars/plone/plone.app.caching?style=flat-square)\n+\n+</div>\n+\n+## Introduction\n+\n+This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n+It builds on [z3c.caching](https://github.com/zopefoundation/z3c.caching), [plone.caching](https://github.com/plone/plone.caching) and [plone.cachepurging](https://github.com/plone/plone.cachepurging).\n+\n+\n+### Compatibility\n+\n+| Version | Plone |\n+|------|-----|\n+| 3.x | 6.0 or above |\n+| 2.x | 5.2 |\n+| 1.x | 5.1, 5.0, 4.3, 4.2, 4.1 |\n+\n+\n+## Installation\n+\n+`plone.app.caching` is shipped as a dependency of the *Plone* package, and it should be available on all Plone installations, but\n+Caching is **not enabled by default**, although it is highly recommended to configure caching for every new Plone site.\n+\n+After creating a new Plone site, go to `Site Setup`, then `Addons` and install `HTTP caching support`.\n+\n+Under the Advanced header, look for the Caching control panel -- currently only supported on the Classic UI.\n+\n+### Troubleshooting\n+\n+When the Caching control panel is not there, there can be various reasons for this:\n+\n+- If your installation does not load the `Plone` package, but only `Products.CMFPlone`, then `plone.app.caching` is not included.\n+- If the package *is* included, but you add a Plone Site using the advanced form and disable caching, then the control panel is not there.\n+\n+If you want to install it in an existing Plone Site:\n+\n+1. Make sure the package is available in the Plone instance, by adding `plone.app.caching` or `Plone` to your installation.\n+2. From the Plone Site Setup go to the ZMI (Zope Management Interface).\n+3. Go to ``portal_setup``, and then to the Import tab.\n+4. Select the HTTP caching support profile, perhaps easiest by id: `profile-plone.app.caching:default`.\n+5. Click \'Import all steps\'.\n+\n+\n+## Source Code\n+\n+Contributors, please read the document [Process for Plone core\'s development](https://docs.plone.org/develop/coredev/docs/index.html)\n+\n+Sources are at the [Plone code repository hosted at Github <https://github.com/plone/plone.app.caching>`_.\n+\n+## This project is supported by\n+\n+<a href="https://plone.org/foundation/">\n+    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-foundation.png">\n+</a>\n+\n+## License\n+\n+The project is licensed under GPLv2.\ndiff --git a/README.rst b/README.rst\ndeleted file mode 100644\nindex 273cebc..0000000\n--- a/README.rst\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-=================\n-plone.app.caching\n-=================\n-\n-Introduction\n-============\n-\n-This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n-It builds on `z3c.caching <https://github.com/zopefoundation/z3c.caching>`_, `plone.caching <https://github.com/plone/plone.caching>`_ and `plone.cachepurging <https://github.com/plone/plone.cachepurging>`_.\n-\n-\n-Version information:\n-\n-- Version 3.x requires Plone 6.0 or later.\n-- Plone 5.2 release uses the version 2.x series.\n-- Earlier Plone versions: use a release from 1.x series.\n-\n-\n-Installation\n-============\n-\n-*plone.app.caching* is shipped as a dependency of the *Plone* package.\n-Caching is **not enabled by default**.\n-It is highly recommended to configure caching.\n-\n-When you create a default Plone site, it is available in the Site Setup.\n-Under the Advanced header, look for the Caching control panel.\n-There you can enable caching.\n-\n-When the Caching control panel is not there, there can be various reasons for this:\n-\n-- If your buildout does not load the ``Plone`` egg, but only ``Products.CMFPlone``, then ``plone.app.caching`` is not included.\n-- If the package *is* included, but you add a Plone Site using the advanced form and disable caching, then the control panel is not there.\n-\n-If you want to install it in an existing Plone Site:\n-\n-1. Make sure the package is available in the Plone instance, by adding ``plone.app.caching`` or ``Plone`` to the eggs and running buildout.\n-2. From the Plone Site Setup go to the ZMI (Zope Management Interface).\n-3. Go to ``portal_setup``, and then to the Import tab.\n-4. Select the HTTP caching support profile, perhaps easiest by id: ``profile-plone.app.caching:default``.\n-5. Click \'Import all steps\'.\n-\n-\n-Source Code\n-===========\n-\n-Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n-\n-Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.caching>`_.\ndiff --git a/docs/README.rst b/docs/README.rst\ndeleted file mode 100644\nindex cec3091..0000000\n--- a/docs/README.rst\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-=================\n-plone.app.caching\n-=================\n-\n-\n-Introduction\n-============\n-\n-``plone.app.caching`` provides a Plone UI and default rules for managing HTTP response caching in Plone. It builds on ``z3c.caching``, ``plone.caching`` and ``plone.cachepurging``.\n-\n-``plone.app.caching`` requires Plone 4 or later.\n-\n-\n-Installation\n-============\n-\n-From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependency of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n-\n-Installation on Plone 4.0\n-=========================\n-\n-To install ``plone.app.caching``, add it to the ``eggs`` list in your ``buildout.cfg``, or as a dependency of one of your own packages in ``setup.py``. ZCML configuration will be automatically loaded via a ``z3c.autoinclude`` entry point. You will also need to install the package in Plone\'s Add-ons control panel as normal.\n-\n-This package depends on a number of other packages, including ``z3c.form`` and ``plone.app.registry``, that do not ship with Plone.\n-You will probably want to lock down the versions for those packages using a known good set. Add this to the the ``extends`` line in your ``buildout.cfg``, *after* the line that includes the Plone KGS::\n-\n-    extends =\n-        ...\n-        http://good-py.appspot.com/release/plone.app.caching/1.0a1\n-\n-Update the version number at the end of the URL as appropriate. You can find an overview of the versions\n-`here <http://good-py.appspot.com/release/plone.app.caching>`_\ndiff --git a/docs/caching-control-panel.md b/docs/caching-control-panel.md\nnew file mode 100644\nindex 0000000..06feb3b\n--- /dev/null\n+++ b/docs/caching-control-panel.md\n@@ -0,0 +1,49 @@\n+# Control panel\n+\n+After installation, you will find a Caching control panel in Plone\'s site setup (Currently this panel is only available in the Classic UI).\n+\n+## Main Tabs\n+\n+This consists of four main tabs:\n+\n+### Change settings\n+\n+Where you can control caching behaviour\n+\n+### Import settings\n+\n+Where you can import pre-defined profiles of cache settings\n+\n+### Purge caching proxy\n+\n+Where you can manually purge content from a caching proxy.\n+\n+This tab only appears if you have purging enabled under *Change settings*.\n+\n+### RAM cache\n+\n+Where you can view statistics about and purge the RAM cache.\n+\n+## Settings Tab\n+\n+Under the settings tab, you will find four fieldsets:\n+\n+### General settings\n+\n+For global options such as turning caching on or off.\n+\n+### Caching proxies\n+\n+Where you can control Plone\'s use of a caching proxy such or Varnish or a CDN.\n+\n+### Caching operation mappings\n+\n+Where caching rulesets (hints about views and resources used for caching purposes) can be associated with caching operations.\n+\n+Those either intercept a request to return a cached response, or modifies a response to add cache control headers.\n+\n+This is also where rulesets for legacy page templates (created through the web or the  portal_skins tool) are configured.\n+\n+### Detailed settings\n+\n+Where you can configure parameters for individual caching operations.\ndiff --git a/docs/caching-control-panel.rst b/docs/caching-control-panel.rst\ndeleted file mode 100644\nindex 5eb1234..0000000\n--- a/docs/caching-control-panel.rst\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-The caching control panel\n--------------------------\n-\n-After installation, you will find a Caching control panel in Plone\'s site setup.\n-\n-This consists of four main tabs:\n-\n-Change settings\n-    where you can control caching behaviour\n-\n-Import settings\n-    where you can import pre-defined profiles of cache settings\n-\n-Purge caching proxy\n-    where you can manually purge content from a caching proxy.\n-    This tab only appears if you have purging enabled under *Change settings*.\n-\n-RAM cache\n-    where you can view statistics about and purge the RAM cache.\n-\n-Under the settings tab, you will find four fieldsets:\n-\n-General settings\n-    for global options such as turning caching on or off.\n-\n-Caching proxies\n-    where you can control Plone\'s use of a caching proxy such or Varnish or a CDN.\n-\n-Caching operation mappings\n-    where caching rulesets (hints about views and resources used for caching purposes) can be associated with caching operations.\n-    Those either intercept a request to return a cached response, or modifies a response to add cache control headers.\n-    This is also where rulesets for legacy page templates (created through the web or the  portal_skins tool) are configured.\n-\n-Detailed settings\n-    where you can configure parameters for individual caching operations.\ndiff --git a/docs/caching-profiles.rst b/docs/caching-profiles.md\nsimilarity index 62%\nrename from docs/caching-profiles.rst\nrename to docs/caching-profiles.md\nindex 6ff8803..3d0a9fe 100644\n--- a/docs/caching-profiles.rst\n+++ b/docs/caching-profiles.md\n@@ -1,30 +1,27 @@\n-Caching profiles\n-----------------\n+# Caching profiles\n+\n+All persistent configuration for the caching machinery is stored in the configuration registry, as managed by `plone.app.registry`.\n+This can be modified using the `registry.xml` GenericSetup import step.\n \n-All persistent configuration for the caching machinery is stored in the configuration registry, as managed by ``plone.app.registry``.\n-This can be modified using the ``registry.xml`` GenericSetup import step.\n The *Import settings* tab of the control panel allows you to import these caching profiles.\n \n \n-Default caching profiles\n-~~~~~~~~~~~~~~~~~~~~~~~~\n+## Default caching profiles\n+\n+`plone.app.caching` includes three default caching profiles.\n+\n+Two of these  profiles encapsulate the cache settings that are known to work well with a typical default Plone installation:\n \n-``plone.app.caching`` includes three default caching profiles.\n-Two of these  profiles encapsulate the cache settings that are known to work well with a typical default Plone installation.\n+### Without caching proxy\n \n-The three default caching profiles:\n+Settings useful for setups without a caching proxy.\n \n-* **Without caching proxy**\n-      Settings useful for setups without a caching proxy.\n+### With caching proxy\n \n-* **With caching proxy**\n-      Settings useful for setups with a caching proxy such as Squid or\n-      Varnish.  The only difference from the "without caching proxy"\n-      profile are some settings to enable proxy caching of files/images\n-      in content space and content feeds.\n+Settings useful for setups with a caching proxy such as Squid or Varnish.\n+The only difference from the "without caching proxy" profile are some settings to enable proxy caching of files/images in content space and content feeds.\n \n-Custom caching profiles\n-~~~~~~~~~~~~~~~~~~~~~~~\n+## Custom caching profiles\n \n Caching policies are often a compromise between speed and freshness.\n More aggressive caching often comes at the cost of increased risk of stale responses.\n@@ -35,11 +32,12 @@ Examine the HTTP response headers to determine whether the third-party product r\n Most simple cases probably can be solved by adding the content type or template to the appropriate mapping.\n More complicated cases, may require custom caching operations.\n \n-A GenericSetup profile used for caching should be registered for the ``ICacheProfiles`` marker interface to distinguish it from more general profiles used to install a product.\n+A GenericSetup profile used for caching should be registered for the `ICacheProfiles` marker interface to distinguish it from more general profiles used to install a product.\n This also hides the profile from Plone\'s Add-ons control panel.\n \n-Here is an example from this package::\n+Here is an example from this package:\n \n+```xml\n     <genericsetup:registerProfile\n         name="with-caching-proxy"\n         title="With caching proxy"\n@@ -48,12 +46,15 @@ Here is an example from this package::\n         provides="Products.GenericSetup.interfaces.EXTENSION"\n         for="plone.app.caching.interfaces.ICacheProfiles"\n         />\n+```\n \n-The directory ``profiles/with-caching-proxy`` contains a single import step, ``registry.xml``,\n+The directory `profiles/with-caching-proxy` contains a single import step, `registry.xml`,\n containing settings to configure the ruleset to operation mapping,\n and setting options for various operations.\n-At the time of writing, this includes::\n \n+At the time of writing, this includes:\n+\n+```xml\n     <record name="plone.caching.interfaces.ICacheSettings.operationMapping">\n         <value purge="False">\n             <element key="plone.resource">plone.app.caching.strongCaching</element>\n@@ -65,19 +66,25 @@ At the time of writing, this includes::\n             <element key="plone.content.dynamic">plone.app.caching.terseCaching</element>\n         </value>\n     </record>\n+```\n+\n+Default options for the various standard operations are found in the `registry.xml` file that is part of the standard installation profile for this product, in the directory `profiles/default`.\n \n-Default options for the various standard operations are found in the ``registry.xml`` file that is part of the standard installation profile for this product, in the directory ``profiles/default``.\n The custom profile overrides a number of operation settings for specific rulesets (see below).\n-For example::\n \n+For example:\n+\n+```xml\n     <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n         <field ref="plone.app.caching.weakCaching.ramCache" />\n         <value>True</value>\n     </record>\n+```\n \n-This enables RAM caching for the "weak caching" operation for resources using the ruleset ``plone.content.itemView``.\n-The default is defined in the main ``registry.xml`` as::\n+This enables RAM caching for the "weak caching" operation for resources using the ruleset `plone.content.itemView`.\n+The default is defined in the main `registry.xml` as::\n \n+```xml\n     <record name="plone.app.caching.weakCaching.ramCache">\n         <field type="plone.registry.field.Bool">\n             <title>RAM cache</title>\n@@ -86,11 +93,12 @@ The default is defined in the main ``registry.xml`` as::\n         </field>\n         <value>False</value>\n     </record>\n+```\n \n Notice how we use a *field reference* to avoid having to re-define the field.\n \n-It may be useful looking at these bundled ``registry.xml`` for inspiration if you are building your own caching profile.\n-Alternatively, you can export the registry from the ``portal_setup`` tool and pull out the records under the prefixes ``plone.caching`` and ``plone.app.caching``.\n+It may be useful looking at these bundled `registry.xml` for inspiration if you are building your own caching profile.\n+Alternatively, you can export the registry from the `portal_setup` tool and pull out the records under the prefixes `plone.caching` and `plone.app.caching`.\n \n-Typically, ``registry.xml`` is all that is required, but you are free to add additional import steps if required.\n-You can also add a ``metadata.xml`` and use the GenericSetup dependency mechanism to install other profiles on the fly.\n+Typically, `registry.xml` is all that is required, but you are free to add additional import steps if required.\n+You can also add a `metadata.xml` and use the GenericSetup dependency mechanism to install other profiles on the fly.\ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.md\nsimilarity index 56%\nrename from docs/caching-proxies.rst\nrename to docs/caching-proxies.md\nindex 46b974e..d6186fd 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.md\n@@ -1,46 +1,60 @@\n-Caching proxies\n----------------\n+# Caching proxies\n \n It is common to place a so-called caching reverse proxy in front of Zope when hosting large Plone sites.\n-If hosted by yourself, a popular option is `Varnish`_.\n+If hosted by yourself, a popular option is [Varnish](https://varnish-cache.org).\n On the other hand there are commercial hosted CDN services like Cloudflare, CloudFront, Fastly and more.\n \n-It is important to realise that whilst ``plone.app.caching`` provides some functionality for controlling how Plone interacts with a caching proxy.\n+It is important to realise that whilst `plone.app.caching` provides some functionality for controlling how Plone interacts with a caching proxy.\n The proxy itself must be configured separately.\n \n-Some operations in ``plone.app.caching`` can set response headers that instruct the caching proxy how best to cache content.\n+Some operations in `plone.app.caching` can set response headers that instruct the caching proxy how best to cache content.\n For example, it is normally a good idea to cache static resources (such as images and stylesheets) and "downloadables"  in the proxy.\n-This are i.e. Plone content of the types ``File`` or ``Image``.\n+This are i.e. Plone content of the types `File` or `Image`.\n This content will then be served to most users straight from the proxy, which is much faster than Zope.\n \n The downside of this approach is that an old version of a content item may returned to a user, because the cache has not been updated since the item was modified.\n-There are three general strategies for dealing with this:\n \n-* Since resources are cached in the proxy based on their URL, you can "invalidate" the cached copy by changing an item\'s URL when it is updated.\n-  This is the approach taken by Plone\'s resource management:\n-  in production mode, the links that are inserted into Plone\'s content pages for resource managed by Plone  contain a hash-based token, which changes when the main bundle file changes.\n-  This approach has the benefit of also being able to "invalidate" content stored in a user\'s browser cache.\n+## Strategies\n \n-* All caching proxies support setting timeouts.\n-  This means that content may be stale, but typically only up to a few minutes.\n-  This is sometimes an acceptable policy for high-volume sites where most users do not log in.\n+There are four general strategies for dealing with this:\n \n-* Most caching proxies support receiving PURGE requests for paths that should be purged.\n-  Given the proxy has cached a resource at ``/logo.jpg``, and that object is modified.\n-  Then a PURGE request could be sent to the proxy (originating from Zope, not the client) with the same path to force the proxy to fetch a new version the next time the item is requested.\n+### Change the URL\n+\n+Since resources are cached in the proxy based on their URL, you can "invalidate" the cached copy by changing an item\'s URL when it is updated.\n+\n+This is the approach taken by Plone\'s resource management: In production mode, the links that are inserted into Plone\'s content pages for resource managed by Plone  contain a hash-based token, which changes when the main bundle file changes.\n+\n+This approach has the benefit of also being able to "invalidate" content stored in a user\'s browser cache.\n+\n+### All caching proxies support setting timeouts.\n+\n+This means that content may be stale, but typically only up to a few minutes.\n+\n+This is sometimes an acceptable policy for high-volume sites where most users do not log in.\n+\n+### Most caching proxies support receiving PURGE requests for paths that should be purged.\n+\n+Given the proxy has cached a resource at `/logo.jpg`, and that object is modified.\n+\n+Then a PURGE request could be sent to the proxy (originating from Zope, not the client) with the same path to force the proxy to fetch a new version the next time the item is requested.\n+\n+### Avoid caching\n \n The final option, of course is to avoid caching content in the proxy altogether.\n+\n The default policies will not allow standard listing pages to be cached in the proxy, because it is too difficult to invalidate cached instances.\n-For example, if you change a content item\'s title, that may require invalidation of a number of pages where that title appears in the navigation tree, folder listings, ``Collections``, portlets, and so on.\n+\n+For example, if you change a content item\'s title, that may require invalidation of a number of pages where that title appears in the navigation tree, folder listings, `Collections`, portlets, and so on.\n+\n Tracking all these dependencies and purging in an efficient manner is impossible unless the caching proxy configuration is highly customised for the site.\n \n Nevertheless a "terse" policy allows caching for just a few seconds of all pages to reduce the load on the backend on high traffic situations.\n \n \n-Purging a caching proxy\n-~~~~~~~~~~~~~~~~~~~~~~~\n+## Purging a caching proxy\n+\n+Synchronous and asynchronous purging is enabled via [plone.cachepurging](https://pypi.org/project/plone.cachepurging).\n \n-Synchronous and asynchronous purging is enabled via `plone.cachepurging`_.\n In the control panel, you can configure the use of a proxy via various options, such as:\n \n * Whether or not to enable purging globally.\n@@ -53,8 +67,10 @@ In the control panel, you can configure the use of a proxy via various options,\n * Any domain aliases for your site, to enable correct purging of content served via e.g. http://example.com and http://www.example.com.\n \n The default purging policy is geared mainly towards purging file and image resources, not content pages, although basic purging of content pages is included.\n-The actual paths to purge are constructed from a number of components providing the ``IPurgePaths`` interface.\n-See ``plone.cachepurging`` for details on how this works, especially if you need to write your own.\n+\n+The actual paths to purge are constructed from a number of components providing the `IPurgePaths` interface.\n+\n+See `plone.cachepurging` for details on how this works, especially if you need to write your own.\n \n The default purge paths include:\n \n@@ -62,17 +78,17 @@ The default purge paths include:\n \n * ${object_path}/ -- in case the object is a folder\n \n-* ${object_path}/view -- the ``view`` method alias\n+* ${object_path}/view -- the `view` method alias\n \n * ${object_path}/${default-view} -- in case a default view template is used\n \n * The download URLs for any content object fields, given the type contains blobs.\n-This includes support for the standard ``File`` and  ``Image`` types.\n+This includes support for the standard `File` and  `Image` types.\n \n Files and images created (or customised) in the ZMI are purged automatically when modified.\n Bundles managed through the resource registration do not need purging, since they have "stable" URLs.\n To purge Plone content when modified (or removed), you must select the content types in the control panel.\n-By default, only the ``File`` and ``Image`` types are purged.\n+By default, only the `File` and `Image` types are purged.\n \n You should not enable purging for types that are not likely to be cached in the proxy.\n Although purging happens asynchronously at the end of the request, it may still place unnecessary load on your server.\n@@ -80,13 +96,3 @@ Although purging happens asynchronously at the end of the request, it may still\n Finally, you can use the *Purge* tab in the control panel to manually purge one or more URLs.\n This is a useful way to debug cache purging.\n It offers as well as a quick solution for the awkward situation where your boss walks in and wonders why the "about us" page is still showing that old picture of him, before he had a new haircut.\n-\n-\n-Installing and configuring a caching proxy\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-There is a buildout recipes for building and configuring proxy configs: `plone.recipe.varnish`_.\n-\n-.. _Varnish: http://varnish-cache.org\n-.. _plone.recipe.varnish: http://pypi.python.org/pypi/plone.recipe.varnish\n-.. _plone.cachepurging: http://pypi.python.org/pypi/plone.cachepurging\ndiff --git a/docs/changelog_template.jinja b/docs/changelog_template.jinja\nnew file mode 100644\nindex 0000000..b35bff3\n--- /dev/null\n+++ b/docs/changelog_template.jinja\n@@ -0,0 +1,15 @@\n+{% if sections[""] %}\n+{% for category, val in definitions.items() if category in sections[""] %}\n+\n+### {{ definitions[category][\'name\'] }}\n+\n+{% for text, values in sections[""][category].items() %}\n+- {{ text }} {{ values|join(\', \') }}\n+{% endfor %}\n+\n+{% endfor %}\n+{% else %}\n+No significant changes.\n+\n+\n+{% endif %}\n\\ No newline at end of file\ndiff --git a/docs/composite-views.rst b/docs/composite-views.md\nsimilarity index 72%\nrename from docs/composite-views.rst\nrename to docs/composite-views.md\nindex e72a537..849dd5e 100644\n--- a/docs/composite-views.rst\n+++ b/docs/composite-views.md\n@@ -1,19 +1,19 @@\n-Composite views\n----------------\n+# Composite views\n+\n+A `composite view` is just a general term for most page views you see when you visit a Plone site.\n \n-A ``composite view`` is just a general term for most page views you see when you visit a Plone site.\n It includes all content item views, content folder views, and many template views.\n+\n For our purposes, the distinguishing characteristic of composite views is the difficulty inherent in keeping track of all changes that might affect the final composited view.\n+\n Because of the difficulty of dependency tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n \n However, most of the inline resources linked to from the composite view (css, javascript, images, etc.) can be cached very well in proxy so the overall speed of most composite views will always be better with a caching proxy in front despite the page itself not being cached.\n \n-For relatively stable composite views or for those views for which you can\n-tolerate some potential staleness, you might be tempted to try switching from\n-*weak caching* to *moderate caching* with the ``s-maxage`` expiration\n-value set to some tolerable value but first make sure you understand the\n-issues regarding "split view" caching (see below).\n+For relatively stable composite views or for those views for which you can tolerate some potential staleness, you might be tempted to try switching from *weak caching* to *moderate caching* with the `s-maxage` expiration value set to some tolerable value but first make sure you understand the issues regarding "split view" caching (see below).\n \n A way to speedup a site with lots of composite view is to use "Terse" caching.\n+\n It caches a page for just a small time (be default 10s in browser and 60s in the caching proxy).\n+\n Thus the content is almost up to date, but on high load visitors are getting pages served from the cache.\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 9a199de..31714ba 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,253 +1,80 @@\n-#\n-# plone.app.caching documentation build configuration file, created by\n-# sphinx-quickstart on Tue May 20 16:53:52 2014.\n-#\n-# This file is execfile()d with the current directory set to its containing dir.\n-#\n-# Note that not all possible configuration values are present in this\n-# autogenerated file.\n-#\n-# All configuration values have a default; values that are commented out\n-# serve to show the default.\n+from pkg_resources import get_distribution\n \n-# If extensions (or modules to document with autodoc) are in another directory,\n-# add these directories to sys.path here. If the directory is relative to the\n-# documentation root, use os.path.abspath to make it absolute, like shown here.\n-# sys.path.insert(0, os.path.abspath(\'.\'))\n+import sys\n \n-# -- General configuration -----------------------------------------------------\n+project = \'plone.app.caching\'\n+copyright = \'2023, Plone Foundation\'\n \n-# If your documentation needs a minimal Sphinx version, state it here.\n-# needs_sphinx = \'1.0\'\n+version = release = get_distribution(project).version\n \n-# Add any Sphinx extension module names here, as strings. They can be extensions\n-# coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = []\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = ".rst"\n-\n-# The encoding of source files.\n-# source_encoding = \'utf-8-sig\'\n-\n-# The master toctree document.\n-master_doc = "index"\n-\n-# General information about the project.\n-project = "plone.app.caching"\n-copyright = "2014, Plone Foundation"\n-\n-# The version info for the project you\'re documenting, acts as replacement for\n-# |version| and |release|, also used in various other places throughout the\n-# built documents.\n-#\n-# The short X.Y version.\n-version = "1.2"\n-# The full version, including alpha/beta/rc tags.\n-release = "1.2.1"\n-\n-# The language for content autogenerated by Sphinx. Refer to documentation\n-# for a list of supported languages.\n-# language = None\n-\n-# There are two options for replacing |today|: either, you set today to some\n-# non-false value, then it is used:\n-# today = \'\'\n-# Else, today_fmt is used as the format for a strftime call.\n-# today_fmt = \'%B %d, %Y\'\n-\n-# List of patterns, relative to source directory, that match files and\n-# directories to ignore when looking for source files.\n-exclude_patterns = ["_build"]\n-\n-# The reST default role (used for this markup: `text`) to use for all documents.\n-# default_role = None\n-\n-# If true, \'()\' will be appended to :func: etc. cross-reference text.\n-# add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-# add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-# show_authors = False\n-\n-# The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = "sphinx"\n-\n-# A list of ignored prefixes for module index sorting.\n-# modindex_common_prefix = []\n-\n-\n-# -- Options for HTML output ---------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  See the documentation for\n-# a list of builtin themes.\n-html_theme = "default"\n-\n-# Theme options are theme-specific and customize the look and feel of a theme\n-# further.  For a list of options available for each theme, see the\n-# documentation.\n-# html_theme_options = {}\n-\n-# Add any paths that contain custom themes here, relative to this directory.\n-# html_theme_path = []\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# "<project> v<release> documentation".\n-# html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as html_title.\n-# html_short_title = None\n-\n-# The name of an image file (relative to this directory) to place at the top\n-# of the sidebar.\n-# html_logo = None\n-\n-# The name of an image file (within the static path) to use as favicon of the\n-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n-# pixels large.\n-# html_favicon = None\n-\n-# Add any paths that contain custom static files (such as style sheets) here,\n-# relative to this directory. They are copied after the builtin static files,\n-# so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = ["_static"]\n-\n-# If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n-# using the given strftime format.\n-# html_last_updated_fmt = \'%b %d, %Y\'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-# html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-# html_sidebars = {}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-# html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-# html_domain_indices = True\n-\n-# If false, no index is generated.\n-# html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-# html_split_index = False\n-\n-# If true, links to the reST sources are added to the pages.\n-# html_show_sourcelink = True\n-\n-# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-# html_show_sphinx = True\n-\n-# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-# html_show_copyright = True\n-\n-# If true, an OpenSearch description file will be output, and all pages will\n-# contain a <link> tag referring to it.  The value of this option must be the\n-# base URL from which the finished HTML is served.\n-# html_use_opensearch = \'\'\n-\n-# This is the file name suffix for HTML files (e.g. ".xhtml").\n-# html_file_suffix = None\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = "ploneappcachingdoc"\n-\n-\n-# -- Options for LaTeX output --------------------------------------------------\n-\n-latex_elements = {\n-    # The paper size (\'letterpaper\' or \'a4paper\').\n-    # \'papersize\': \'letterpaper\',\n-    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-    # \'pointsize\': \'10pt\',\n-    # Additional stuff for the LaTeX preamble.\n-    # \'preamble\': \'\',\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "restructuredtext",\n }\n \n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title, author, documentclass [howto/manual]).\n-latex_documents = [\n-    (\n-        "index",\n-        "ploneappcaching.tex",\n-        "plone.app.caching Documentation",\n-        "Plone Foundation",\n-        "manual",\n-    ),\n+extensions = [\n+    \'sphinx.ext.doctest\',\n+    \'sphinx.ext.coverage\',\n+    \'sphinx.ext.autodoc\',\n+    \'sphinx.ext.viewcode\',\n+    \'sphinx.ext.autosummary\',\n+    "myst_parser",\n+    "sphinx.ext.todo",\n ]\n+master_doc = \'index\'\n \n-# The name of an image file (relative to this directory) to place at the top of\n-# the title page.\n-# latex_logo = None\n-\n-# For "manual" documents, if this is true, then toplevel headings are parts,\n-# not chapters.\n-# latex_use_parts = False\n-\n-# If true, show page references after internal links.\n-# latex_show_pagerefs = False\n-\n-# If true, show URL addresses after external links.\n-# latex_show_urls = False\n-\n-# Documents to append as an appendix to all manuals.\n-# latex_appendices = []\n-\n-# If false, no module index is generated.\n-# latex_domain_indices = True\n-\n+# locale_dirs = [\'translated/\']\n+language = \'en\'\n \n-# -- Options for manual page output --------------------------------------------\n-\n-# One entry per manual page. List of tuples\n-# (source start file, name, description, authors, manual section).\n-man_pages = [\n-    (\n-        "index",\n-        "ploneappcaching",\n-        "plone.app.caching Documentation",\n-        ["Plone Foundation"],\n-        1,\n-    )\n-]\n-\n-# If true, show URL addresses after external links.\n-# man_show_urls = False\n-\n-\n-# -- Options for Texinfo output ------------------------------------------------\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-texinfo_documents = [\n-    (\n-        "index",\n-        "ploneappcaching",\n-        "plone.app.caching Documentation",\n-        "Plone Foundation",\n-        "ploneappcaching",\n-        "One line description of project.",\n-        "Miscellaneous",\n-    ),\n+# Grouping the document tree into LaTeX files. List of tuples\n+# (source start file, target name, title, author, documentclass [howto/manual])\n+# This enables PDF generation.\n+latex_documents = [(\n+    \'index\',\n+    \'ploneapi.tex\',\n+    \'plone.distribution Documentation\',\n+    \'\',\n+    \'manual\',\n+)]\n+\n+\n+class Mock:\n+    def __init__(self, *args, **kwargs):\n+        pass\n+\n+    def __call__(self, *args, **kwargs):\n+        return Mock()\n+\n+    @classmethod\n+    def __getattr__(cls, name):\n+        if name in (\'__file__\', \'__path__\'):\n+            return \'/dev/null\'\n+        elif name[0] == name[0].upper():\n+            mockType = type(name, (), {})\n+            mockType.__module__ = __name__\n+            return mockType\n+        else:\n+            return Mock()\n+\n+\n+MOCK_MODULES = [\'lxml\']\n+for mod_name in MOCK_MODULES:\n+    sys.modules[mod_name] = Mock()\n+\n+\n+# -- Options for myST markdown conversion to html -----------------------------\n+\n+myst_enable_extensions = [\n+    "colon_fence",\n+    "deflist",\n ]\n \n-# Documents to append as an appendix to all manuals.\n-# texinfo_appendices = []\n \n-# If false, no module index is generated.\n-# texinfo_domain_indices = True\n+# -- Options for HTML output -------------------------------------------------\n \n-# How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-# texinfo_show_urls = \'footnote\'\n+# The theme to use for HTML and HTML Help pages.  See the documentation for\n+# a list of builtin themes.\n+#\n+html_theme = "sphinx_book_theme"\ndiff --git a/docs/etags.rst b/docs/etags.md\nsimilarity index 52%\nrename from docs/etags.rst\nrename to docs/etags.md\nindex dac1b29..9928164 100644\n--- a/docs/etags.rst\n+++ b/docs/etags.md\n@@ -1,52 +1,61 @@\n-ETags\n------\n+# ETags\n \n ETags are used in to check whether pages need to be re-calculated or can be served from cache.\n-An ETag is simply a string. Under ``plone.app.caching``, it is a string of tokens separated by pipe characters.\n+An ETag is simply a string. Under `plone.app.caching`, it is a string of tokens separated by pipe characters.\n The tokens hold values such as a user id, the current skin name, or a counter indicating how many objects have been added to the site.\n-The idea is that the browser sends a request with the ETag included in an ``If-None-Match`` header.\n+The idea is that the browser sends a request with the ETag included in an `If-None-Match` header.\n Plone can then quickly calculate the current ETag for the requested resource.\n-If the ETag is the same, Plone can reply with ``304 NOT MODIFIED`` response, telling the browser to use its cached copy.\n+If the ETag is the same, Plone can reply with `304 NOT MODIFIED` response, telling the browser to use its cached copy.\n Otherwise, Plone renders the page and returns it as normal.\n \n-Many caching operations use ETags. The tokens to include are typically listed in an ``etags`` tuple in the operation\'s options.\n+Many caching operations use ETags. The tokens to include are typically listed in an `etags` tuple in the operation\'s options.\n \n The ETag names tokens supported by default are:\n \n userid\n-    The current user\'s id\n+: The current user\'s id\n \n-roles\n-    A list of the current user\'s roles in the given context\n+## roles\n \n-language\n-    The language(s) accepted by the browser, in the ``ACCEPT_LANGUAGE`` header\n+A list of the current user\'s roles in the given context\n \n-userLanguage\n-    The current user\'s preferred language\n+## language\n \n-lastModified\n-    A timestamp indicating the last-modified date of the given context\n+The language(s) accepted by the browser, in the `ACCEPT_LANGUAGE` header\n \n-catalogCounter\n-    A counter that is incremented each time the catalog is updated.\n-    I.e. each time content in the site is changed.\n+## userLanguage\n \n-locked\n-    Whether or not the given context is locked for editing.\n+The current user\'s preferred language\n \n-skin\n-    The name of the current skin (theme)\n+## lastModified\n \n-resourceRegistries\n-    A timestamp indicating the last-modified timestamp for the Resource Registries.\n-    This is useful for avoiding requests for expired resources from cached pages.\n+A timestamp indicating the last-modified date of the given context\n+\n+## catalogCounter\n+\n+A counter that is incremented each time the catalog is updated. I.e. each time content in the site is changed.\n+\n+## locked\n+\n+Whether or not the given context is locked for editing.\n+\n+## skin\n+\n+The name of the current skin (theme)\n+\n+## resourceRegistries\n+\n+A timestamp indicating the last-modified timestamp for the Resource Registries. This is useful for avoiding requests for expired resources from cached pages.\n+\n+It is possible to provide additional tokens by registering an `IETagValue` adapter.\n \n-It is possible to provide additional tokens by registering an ``IETagValue`` adapter.\n This should be a named adapter on the published object (typically a view, file resource or Zope page template object) and request, with a unique name.\n+\n The name is used to look up the component. Thus, you can also override one of the tokens above for a particular type of context or request (e.g. via a browser layer), by registering a more specific adapter with the same name.\n \n-As an example, here is the ``language`` adapter::\n+As an example, here is the `language` adapter:\n+\n+```python\n \n     from plone.app.caching.interfaces import IETagValue\n     from zope.component import adapter\n@@ -55,8 +64,8 @@ As an example, here is the ``language`` adapter::\n \n     @implementer(IETagValue)\n     @adapter(Interface, Interface)\n-    class Language(object):\n-        """The ``language`` etag component, returning the value of the\n+    class Language:\n+        """The `language` etag component, returning the value of the\n         HTTP_ACCEPT_LANGUAGE request key.\n         """\n \n@@ -66,7 +75,10 @@ As an example, here is the ``language`` adapter::\n \n         def __call__(self):\n             return self.request.get(\'HTTP_ACCEPT_LANGUAGE\', \'\')\n+```\n \n-This is registered in ZCML like so::\n+This is registered in ZCML like so:\n \n+```xml\n     <adapter factory=".etags.Language" name="language" />\n+```\ndiff --git a/docs/index.md b/docs/index.md\nnew file mode 100644\nindex 0000000..bc4ea9f\n--- /dev/null\n+++ b/docs/index.md\n@@ -0,0 +1,47 @@\n+<p align="center">\n+    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-logo.png">\n+</p>\n+\n+<h1 align="center">\n+  plone.app.caching\n+</h1>\n+\n+<div align="center">\n+\n+[![PyPI - Wheel](https://img.shields.io/pypi/wheel/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - License](https://img.shields.io/pypi/l/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - Status](https://img.shields.io/pypi/status/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+\n+[![GitHub contributors](https://img.shields.io/github/contributors/plone/plone.app.caching)](https://github.com/plone/plone.app.caching)\n+![GitHub Repo stars](https://img.shields.io/github/stars/plone/plone.app.caching?style=flat-square)\n+\n+</div>\n+\n+## Introduction\n+\n+This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n+It builds on [z3c.caching](https://github.com/zopefoundation/z3c.caching), [plone.caching](https://github.com/plone/plone.caching) and [plone.cachepurging](https://github.com/plone/plone.cachepurging).\n+\n+\n+### Compatibility\n+\n+| Version | Plone |\n+|------|-----|\n+| 3.x | 6.0 or above |\n+| 2.x | 5.2 |\n+| 1.x | 5.1, 5.0, 4.3, 4.2, 4.1 |\n+\n+```{toctree}\n+:maxdepth: 2\n+:hidden: true\n+\n+caching-control-panel\n+caching-profiles\n+rulesets-and-caching-operations\n+caching-proxies\n+ram-cache\n+etags\n+composite-views\n+split-views\n+restapi\n+```\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex 2da491a..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-===============================\n-plone.app.caching documentation\n-===============================\n-\n-.. plone.app.caching documentation master file, created by\n-   sphinx-quickstart on Tue May 20 16:53:52 2014.\n-   You can adapt this file completely to your liking, but it should at least\n-   contain the root `toctree` directive.\n-\n-.. include:: README.rst\n-\n-Documentation\n-=============\n-\n-Contents:\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   caching-control-panel\n-   caching-profiles\n-   rulesets-and-caching-operations\n-   caching-proxies\n-   ram-cache\n-   etags\n-   composite-views\n-   split-views\n-   restapi\n-\n-\n-Indices and tables\n-==================\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\n-\ndiff --git a/docs/ram-cache.rst b/docs/ram-cache.md\nsimilarity index 76%\nrename from docs/ram-cache.rst\nrename to docs/ram-cache.md\nindex d9282a1..1f2a470 100644\n--- a/docs/ram-cache.rst\n+++ b/docs/ram-cache.md\n@@ -1,10 +1,9 @@\n-The RAM cache\n--------------\n+# The RAM cache\n \n In addition to caching content in users\' browsers (through setting appropriate response headers) and a caching proxy, Plone can cache certain information in memory.\n This is done in two main ways:\n \n-* Developers may use the ``plone.memoize`` package\'s ``ram`` module to cache the results of certain functions in RAM.\n+* Developers may use the `plone.memoize` package\'s `ram` module to cache the results of certain functions in RAM.\n   For example, some viewlets and portlets cache their rendered output in RAM for a time, alleviating the need to calculate them every time.\n \n * Some caching operations may cache an entire response in memory, so that  they can later intercept the request to return a cached response.\n@@ -24,18 +23,18 @@ You can use the *RAM cache* tab in the caching control panel to view statistics\n On the *Change settings* tab, you can also control the size of the cache, and the frequency with which it is purged of old items.\n \n \n-Alternative RAM cache implementations\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+## Alternative RAM cache implementations\n \n-The RAM cache exposed through ``plone.memoize.ram`` is looked up via an ``ICacheChoser`` utility.\n-The default implementation looks up a ``zope.ramcache.interfaces.ram.IRAMCache`` utility.\n+The RAM cache exposed through `plone.memoize.ram` is looked up via an `ICacheChoser` utility.\n+The default implementation looks up a `zope.ramcache.interfaces.ram.IRAMCache` utility.\n Plone installs a local such utility (to allows its settings to be persisted - the cache itself is not persistent), which is shared by all users of the cache.\n \n-You can provide your own ``ICacheChooser`` utility to change this policy, by installing this as a local utility or overriding it in ``overrides.zcml``.\n-One reason to do this may be to back the cache with a `memcached`_ server, which would allow a single cache to be shared among multiple Zope clients.\n+You can provide your own `ICacheChooser` utility to change this policy, by installing this as a local utility or overriding it in `overrides.zcml`.\n+One reason to do this may be to back the cache with a [memcached](https://memcached.org/) server, which would allow a single cache to be shared among multiple Zope clients.\n \n-Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota::\n+Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota:\n \n+```python\n     from plone.memoize.interfaces import ICacheChooser\n     from plone.memoize.ram import MemcacheAdapter\n     from pylibmc import Client\n@@ -43,7 +42,7 @@ Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota::\n     from zope.interface import implementer\n \n     @implementer(ICacheChooser)\n-    class MemcachedCacheChooser(object):\n+    class MemcachedCacheChooser():\n         _v_thread_local = local()\n \n         def getClient(self):\n@@ -62,9 +61,10 @@ Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota::\n             Create new adapter for plone.memoize.ram.\n             """\n             return MemcacheAdapter(client=self.getClient(), globalkey=fun_name)\n+```\n \n-You could install this with the following lines in an overrides.zcml::\n+You could install this with the following lines in an overrides.zcml:\n \n+```xml\n     <utility factory=".memcached.MemcachedCacheChooser" />\n-\n-.. _memcached: http://memcached.org\n+```\ndiff --git a/docs/restapi.rst b/docs/restapi.md\nsimilarity index 81%\nrename from docs/restapi.rst\nrename to docs/restapi.md\nindex 9c0b211..cf00176 100644\n--- a/docs/restapi.rst\n+++ b/docs/restapi.md\n@@ -1,8 +1,6 @@\n-Caching of plone.restapi\n-------------------------\n+# plone.restapi support\n \n-Strategy\n-~~~~~~~~\n+## Strategy\n \n Caching for anonymous users for all GET requests.\n \n@@ -20,116 +18,115 @@ Its goal is primary to reduce the load/peak-load on the server.\n Also, it reduces the impact of loading the same endpoint more than one time in one page.\n \n \n-plone.restapi GET endpoints\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+## plone.restapi GET endpoints\n \n And its environment and assignments:\n \n-- ``@actions``\n+- `@actions`\n \n   - Anonymous\n   - rule plone.content.dynamic (might be influenced by other content)\n   - purge\n \n-- ``@addons``\n+- `@addons`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@breadcrumbs``\n+- `@breadcrumbs`\n \n   - Anonymous\n   - rule plone.content.dynamic (parent may change)\n   - purge\n \n-- ``@comments``\n+- `@comments`\n \n   - Anonymous\n   - rule plone.content.itemView\n   - purge\n \n-- ``/`` (content)\n+- `/` (content)\n \n   - Anonymous\n   - expander!\n   - rule plone.content.dynamic\n \n-- ``@history``\n+- `@history`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@lock``\n+- `@lock`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@translations``\n+- `@translations`\n \n   - Anonymous\n   - with parameters\n   - rule plone.content.dynamic\n \n-- ``@translations-locator``\n+- `@translations-locator`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@navigation``\n+- `@navigation`\n \n   - Anonymous\n   - with parameters\n   - rule plone.content.dynamic\n \n-- ``@querysources``\n+- `@querysources`\n \n   - Authenticated\n   - with parameters\n   - can not be cached\n \n-- ``@querystring``\n+- `@querystring`\n \n   - Anonymous\n   - (values on IPloneSiteRoot from registry)\n   - rule plone.content.dynamic\n \n-- ``@querystring-search``\n+- `@querystring-search`\n \n   - is in `get.py` BUT configured as POST\n   - Anonymous\n   - with json body\n   - can not be cached\n \n-- ``@registry``\n+- `@registry`\n \n   - Authenticated\n   - with subpath\n   - no rule assignment\n \n-- ``@roles``\n+- `@roles`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@search``\n+- `@search`\n \n   - Anonymous\n   - with parameters\n   - rule plone.content.dynamic\n \n-- ``@sources``\n+- `@sources`\n \n   - Authenticated\n   - no rule assignment\n \n-- ``@tiles``\n+- `@tiles`\n \n   - pre-deprecation\n   - Anonymous\n   - with subpath\n   - no rule assignment\n \n-- ``@types``\n+- `@types`\n \n   - Authenticated\n   - no rule assignment\ndiff --git a/docs/rulesets-and-caching-operations.md b/docs/rulesets-and-caching-operations.md\nnew file mode 100644\nindex 0000000..801cb46\n--- /dev/null\n+++ b/docs/rulesets-and-caching-operations.md\n@@ -0,0 +1,288 @@\n+# Rulesets and caching operations\n+\n+The caching infrastructure works on the principle of *rulesets* mapped to *caching operations*. A ruleset is basically just a name, and is normally applied in ZCML by the author of a particular view.\n+There are also some default rulesets applied to general resources - see below.\n+\n+Please note that `plone.app.caching` places the caching ruleset registry into "explicit" mode. This means that you *must* declare a caching ruleset (with the `<cache:rulesetType />` directive) before you can use it.\n+\n+Caching operations are components written in Python which either interrupt rendering to provide a cached response (such as a `304 NOT MODIFIED` response), or add caching information to a response (such as setting the `Cache-Control` HTTP response header).\n+\n+For more details on how to use these components, see the documentation for [plone.caching](https://pypi.org/project/plone.caching).\n+\n+Once rulesets and caching operations have been registered, they will appear in the caching control panel.\n+\n+\n+## Default rulesets\n+\n+`plone.app.caching` declares a few default rulesets.  They are listed with descriptions in the control panel.\n+\n+### Content feed (`plone.content.feed`)\n+\n+A dynamic feed, e.g. using RSS or ATOM.\n+\n+### Content files and images (`plone.content.file`)\n+\n+Includes files and images in content space usually either downloaded or included as an inline element in one of the other public-facing views.\n+\n+### Content folder view (`plone.content.folderView`)\n+\n+A public-facing view for a content item that is a folder or container for other items.\n+\n+### Content item view (`plone.content.itemView`)\n+\n+A public-facing view for a content item that is not a folder or container for other items.\n+\n+### File and image resources (`plone.resource`)\n+\n+Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem.\n+\n+### Stable file and image resources (`plone.stableResource`)\n+\n+Stable resources like the css, javascript, and kss files registered with the Resource Registries.  These are resources which can be cached\n+ \'forever\'.  Normally this means that if the object does change, its URL changes too.\n+\n+\n+## Default cache operations\n+\n+`plone.app.caching` also declares a number of default operation types.\n+These are listed in the control panel as available operations for the various rulesets. Hover your mouse over an operation in the drop-down\n+list to view its description.\n+\n+### Strong caching (`plone.app.caching.strongCaching`)\n+\n+Cache in browser and proxy (default: 24 hours).  Caution: Only use for stable resources that never change without changing their URL, or resources for which temporary staleness is not critical.\n+\n+In the caching profiles `without-caching-proxy` and `with-caching-proxy`, this operation is mapped to the rulesets `plone.resource` and `plone.stableResource`, which causes the following headers to be added to the response:\n+\n+```\n+Last-Modified: <last-modified-date>\n+Cache-Control: max-age=<seconds>, proxy-revalidate, public\n+```\n+\n+\n+### Moderate caching (`plone.app.caching.moderateCaching`),\n+\n+Cache in browser but expire immediately (same as `weak caching`), and cache in proxy (default: 24 hours).  Use a purgable caching\n+reverse proxy for best results.\n+Caution: If proxy cannot be purged reliably (for example, in the case of composite pages where it may be difficult to track when a dependency has changed) then stale responses might be seen until the cached entry expires.\n+A similar caution applies even if in the purgeable case, if the proxy cannot be configured to disallow caching in other intermediate proxies\n+that may exist between the local proxies and the browser (see the example proxy configs included with this package for some solutions\n+to this problem).\n+\n+In the caching profile `with-caching-proxy`, this operation is mapped to the rulesets `plone.content.feed` and `plone.content.file`,\n+which causes the following headers to be added to the response:\n+\n+#### plone.content.feed\n+\n+```\n+ETag: <etag-value>\n+Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n+```\n+\n+#### plone.content.file\n+\n+```\n+Last-Modified: <last-modified-date>\n+Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n+```\n+\n+### Weak caching (`plone.app.caching.weakCaching`)\n+Cache in browser but expire immediately and enable 304 responses on subsequent requests. 304\'s require configuration of the\n+`Last-Modified` and/or `ETags` settings.\n+If Last-Modified header is insufficient to ensure freshness, turn on ETag checking by listing each ETag component that should be used to to construct the ETag header.\n+To also cache public responses in Zope memory, set the `RAM cache` parameter to True.\n+\n+In the caching profile `without-caching-proxy`, this operation is mapped to the rulesets `plone.content.itemView`, `plone.content.folderView`, `plone.content.feed`, and `plone.content.file`, which causes the following headers to be added to the response:\n+\n+#### plone.content.itemView, plone.content.folderView, plone.content.feed\n+\n+```\n+ETag: <etag-value>\n+Cache-Control: max-age=0, must-revalidate, private\n+```\n+\n+### plone.content.file\n+\n+```\n+Last-Modified: <last-modified-date>\n+Cache-Control: max-age=0, must-revalidate, private\n+```\n+\n+In the caching profile `with-caching-proxy`, this operation is mapped only to the rulesets `plone.content.itemView` and `plone.content.folderView`.\n+\n+### No caching (`plone.app.caching.noCaching`)\n+Use this operation to keep the response out of all caches.\n+The default settings generate an IE-safe no-cache operation.\n+Under certain conditions, IE chokes on `no-cache` and `no-store` Cache-Control tokens, so instead we just exclude caching in shared caching proxies with the `private` token, expire immediately in the browser, and disable validation.\n+This emulates the usual behavior expected from the `no-cache` token.\n+\n+If the nominally more secure, but occasionally troublesome, `no-store` token is also desired, set the `No store` parameter to True.\n+\n+**\'no store\' option not done yet**\n+\n+### Chain (`plone.caching.operations.chain`)\n+Allows multiple operations to be chained together. When intercepting the response, the first chained operation to return a value will\n+be used. Subsequent operations are ignored.\n+When modifying the response, all operations will be called, in order.\n+\n+These operation descriptions are a bit simplified as several of these operations also include tests to downgrade caching depending on various\n+parameter settings, workflow state, and access privileges. For more detail, it\'s best to review the operation code itself.\n+\n+\n+## Default ruleset/operation mappings\n+\n+To recap, `plone.app.caching` defines three default cache policies containing the cache operation mappings for each of the six rulesets.\n+The default mappings are as follows:\n+\n+| ..  | without-caching-proxy  | with-caching-proxy  | with-caching-proxy-splitviews |\n+| --- | ---  | --- | --- |\n+| itemView | weakCaching | weakCaching | moderateCaching |\n+| folderView | weakCaching | weakCaching | moderateCaching |\n+| feed | weakCaching | moderateCaching | moderateCaching |\n+| file | weakCaching | moderateCaching | moderateCaching |\n+| resource | strongCaching | strongCaching       strongCaching |\n+| stableResource | strongCaching | strongCaching | strongCaching |\n+\n+\n+## Cache operation parameters\n+\n+Much of the cache operation behavior is controlled via user-adjustable parameters.\n+In fact, three of the default caching operations (strong caching, moderate caching, and weak caching) are essentially all the same operation but with different default parameter settings and with some parameters hidden from the UI.\n+\n+### Maximum age (`maxage`)\n+\n+Time (in seconds) to cache the response in the browser or caching proxy.\n+\n+Adds a "Cache-Control: max-age=<value>" header and a matching "Expires" header to the response.\n+\n+### Shared maximum age (`smaxage`)\n+\n+Time (in seconds) to cache the response in the caching proxy.\n+\n+Adds a "Cache-Control: s-maxage=<value>" header to the response.\n+\n+### ETags (`etags`)\n+\n+A list of the names of the ETag components to include in the ETag header.\n+Also turns on "304 Not Modified" responses for "If-None-Match" conditional requests.\n+\n+### Last-modified validation (`lastModified`)\n+\n+Adds a "Last-Modified" header to the response and turns on "304 Not\n+\n+Modified" responses for "If-Modified-Since" conditional requests.\n+\n+### RAM cache (`ramCache`)\n+Turn on caching in Zope memory.\n+\n+If the URL is not specific enough to ensure uniqueness then either ETags or Last-Modified should also be added to the list of parameters in order to generate a unique cache key.\n+\n+### Vary (`vary`)\n+\n+Name(s) of HTTP headers in the request that must match (in addition to the URL) for a caching proxy to return a cached response.\n+\n+### Anonymous only (`anonOnly`)\n+\n+Set this to True if you want to force logged-in users to always get a fresh copy.\n+\n+This works best with the "moderate caching" operation, and will not work well with a "Max age" (to cache content in the browser) greater than zero.\n+\n+By setting this option, you can focus the other cache settings on the anonymous use case.\n+\n+Note that if you are using a caching proxy, you will need to set a Vary header of "X-Anonymous" or similar, and ensure that such a header is set in the proxy for logged in users (a blunter alternative is to use "Cookie" as the header, although this can have false positives).\n+See the example Varnish and Squid configurations that come with this package for more details.\n+\n+### Request variables that prevent caching (`cacheStopRequestVariables`)\n+\n+A list of variables in the request (including Cookies) that prevent caching if present.\n+\n+Note, unlike the others above, this global parameter is not directly visible in the plone.app.caching UI.\n+\n+There should unlikely be any need to change this list but, if needed, it can be edited via the Configuration Registry control panel.\n+\n+\n+## Caching operation helper functions\n+\n+If you will find the implementations of the default caching operations in the package `plone.app.caching.operations`.\n+\n+If you are writing a custom caching operation, the `utils` module contains helper functions which you may find useful.\n+\n+\n+### Debug headers and logging\n+\n+It can sometimes be useful to see which rulesets and operations (if any) are being applied to published resources.\n+There are two ways to see this: via debug response headers and via debug logging.\n+\n+Several debug response headers are added automatically by plone.app.caching and plone.caching.\n+\n+These headers include:\n+\n+* `X-Cache-Rule: <matching rule id>`\n+\n+* `X-Cache-Operation: <matching operation id>`\n+\n+* `X-Cache-Chain-Operations: <list of chain operation ids>`\n+\n+* `X-RAMCache: <ram cache id>`\n+\n+Viewing these headers is relatively easy with `Web Developer Tools` (Firefox) or `Developer Tools` (Chrome) .\n+\n+If you enable the DEBUG logging level for the `plone.caching` logger, you will get additional debug output in your event log.\n+One way to do that is to set the global Zope logging level to DEBUG in `zope.conf`:\n+\n+```\n+<eventlog>\n+      level DEBUG\n+      <logfile>\n+      path <file path here>\n+      level DEBUG\n+      </logfile>\n+</eventlog>\n+```\n+\n+You should see output in the log like:\n+\n+```\n+2010-01-11 16:44:10 DEBUG plone.caching Published: <Image at /test/i> Ruleset: plone.download Operation: None\n+2010-01-11 16:44:10 DEBUG plone.caching Published: <Image at /test/i> Ruleset: plone.download Operation: plone.caching.operations.chain\n+```\n+\n+The `None` indicates that no ruleset or operation was mapped.\n+\n+It is probably not a good idea to leave debug logging on for production use, as it can produce a lot of output, filling up log files and adding unnecessary load to your disks.\n+\n+## Content-type based rulesets\n+\n+Normally, you declare caching rulesets for a view, e.g. with:\n+\n+```xml\n+<cache:ruleset\n+      ruleset="plone.content.itemView"\n+      for=".browser.MyItemView"\n+      />\n+```\n+\n+See [plone.caching](https://pypi.org/project/plone.caching) for details.\n+\n+plone.app.caching installs a special ruleset lookup adapter that is invoked for skin layer page templates and browser views not assigned a more specific rule set. This adapter allows you to declare a ruleset for the *default view* of a given content type by supplying a content type class or interface to the `<cache:ruleset />` directive:\n+\n+```xml\n+<cache:ruleset\n+      ruleset="plone.content.itemView"\n+      for=".interfaces.IMyContentType"\n+      />\n+```\n+or for a class:\n+\n+```xml\n+    <cache:ruleset\n+        ruleset="plone.content.itemView"\n+        for=".content.MyContentType"\n+        />\n+```\n+\n+There are two reasons to want to do this:\n+\n+* Your type uses a skin layer page template for its default view, instead of a browser view. In this case, you can either declare the ruleset on the type as shown above (in ZCML), or map the type name in the registry, using the GUI or GenericSetup. The former is more robust and certainly more natural if you are declaring other, more conventional rulesets in ZCML already.\n+\n+* You want to set the ruleset for a number of content types. In fact, plone.app.caching already does this for you: The Archetypes base classes `BaseContent` and `BaseFolder` are assigned the rulesets `plone.content.itemView` and `plone.content.folderview`, respectively. Ditto for Dexterity\'s `IDexterityItem` and `IDexterityContainer` interfaces.\ndiff --git a/docs/rulesets-and-caching-operations.rst b/docs/rulesets-and-caching-operations.rst\ndeleted file mode 100644\nindex 83f78cd..0000000\n--- a/docs/rulesets-and-caching-operations.rst\n+++ /dev/null\n@@ -1,338 +0,0 @@\n-Rulesets and caching operations\n--------------------------------\n-\n-The caching infrastructure works on the principle of *rulesets* mapped to\n-*caching operations*. A ruleset is basically just a name, and is normally\n-applied in ZCML by the author of a particular view. There are also some\n-default rulesets applied to general resources - see below.\n-\n-Please note that ``plone.app.caching`` places the caching ruleset registry\n-into "explicit" mode. This means that you *must* declare a caching ruleset\n-(with the ``<cache:rulesetType />`` directive) before you can use it.\n-\n-Caching operations are components written in Python which either interrupt\n-rendering to provide a cached response (such as a ``304 NOT MODIFIED``\n-response), or add caching information to a response (such as setting the\n-``Cache-Control`` HTTP response header).\n-\n-For more details on how to use these components, see the documentation for\n-`plone.caching`_.\n-\n-Once rulesets and caching operations have been registered, they will\n-appear in the caching control panel.\n-\n-\n-Default rulesets\n-~~~~~~~~~~~~~~~~\n-\n-``plone.app.caching`` declares a few default rulesets.  They are listed\n-with descriptions in the control panel.\n-\n-* **Content feed** (``plone.content.feed``)\n-      A dynamic feed, e.g. using RSS or ATOM.\n-\n-* **Content files and images** (``plone.content.file``)\n-      Includes files and images in content space usually either downloaded\n-      or included as an inline element in one of the other public-facing\n-      views.\n-\n-* **Content folder view** (``plone.content.folderView``)\n-      A public-facing view for a content item that is a folder or container\n-      for other items.\n-\n-* **Content item view** (``plone.content.itemView``)\n-      A public-facing view for a content item that is not a folder or\n-      container for other items.\n-\n-* **File and image resources** (``plone.resource``)\n-      Includes images and files created or customised through the ZMI,\n-      those exposed in the portal_skins tool, and images registered in\n-      resource directories on the filesystem.\n-\n-* **Stable file and image resources** (``plone.stableResource``)\n-      Stable resources like the css, javascript, and kss files registered\n-      with the Resource Registries.  These are resources which can be cached\n-      \'forever\'.  Normally this means that if the object does change, its\n-      URL changes too.\n-\n-\n-Default cache operations\n-~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-``plone.app.caching`` also declares a number of default operation types.\n-These are listed in the control panel as available operations for the\n-various rulesets. Hover your mouse over an operation in the drop-down\n-list to view its description.\n-\n-* **Strong caching** (``plone.app.caching.strongCaching``)\n-      Cache in browser and proxy (default: 24 hours).  Caution: Only use\n-      for stable resources that never change without changing their URL,\n-      or resources for which temporary staleness is not critical.\n-\n-      In the caching profiles ``without-caching-proxy`` and\n-      ``with-caching-proxy``, this operation is mapped to the rulesets\n-      ``plone.resource`` and ``plone.stableResource``, which causes the\n-      following headers to be added to the response::\n-\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=<seconds>, proxy-revalidate, public\n-\n-..\n-\n-* **Moderate caching** (``plone.app.caching.moderateCaching``),\n-      Cache in browser but expire immediately (same as ``weak caching``),\n-      and cache in proxy (default: 24 hours).  Use a purgable caching\n-      reverse proxy for best results.  Caution: If proxy cannot be purged\n-      reliably (for example, in the case of composite pages where it may\n-      be difficult to track when a dependency has changed) then stale\n-      responses might be seen until the cached entry expires.  A similar\n-      caution applies even if in the purgeable case, if the proxy cannot\n-      be configured to disallow caching in other intermediate proxies\n-      that may exist between the local proxies and the browser (see the\n-      example proxy configs included with this package for some solutions\n-      to this problem).\n-\n-      In the caching profile ``with-caching-proxy``, this operation is mapped\n-      to the rulesets ``plone.content.feed`` and ``plone.content.file``,\n-      which causes the following headers to be added to the response::\n-\n-        [plone.content.feed]\n-        ETag: <etag-value>\n-        Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-\n-        [plone.content.file]\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-\n-..\n-\n-* **Weak caching** (``plone.app.caching.weakCaching``)\n-      Cache in browser but expire immediately and enable 304 responses on\n-      subsequent requests. 304\'s require configuration of the\n-      ``Last-Modified`` and/or ``ETags`` settings. If Last-Modified header is\n-      insufficient to ensure freshness, turn on ETag checking by listing each\n-      ETag component that should be used to to construct the ETag header. To\n-      also cache public responses in Zope memory, set the ``RAM cache``\n-      parameter to True.\n-\n-      In the caching profile ``without-caching-proxy``, this operation is\n-      mapped to the rulesets ``plone.content.itemView``,\n-      ``plone.content.folderView``, ``plone.content.feed``, and\n-      ``plone.content.file``, which causes the following headers to be added\n-      to the response::\n-\n-        [plone.content.itemView, plone.content.folderView, plone.content.feed]\n-        ETag: <etag-value>\n-        Cache-Control: max-age=0, must-revalidate, private\n-\n-        [plone.content.file]\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=0, must-revalidate, private\n-\n-      In the caching profile ``with-caching-proxy``, this operation is mapped\n-      only to the rulesets ``plone.content.itemView`` and\n-      ``plone.content.folderView``.\n-\n-* **No caching** (``plone.app.caching.noCaching``)\n-      Use this operation to keep the response out of all caches. The\n-      default settings generate an IE-safe no-cache operation. Under\n-      certain conditions, IE chokes on ``no-cache`` and ``no-store``\n-      Cache-Control tokens, so instead we just exclude caching in\n-      shared caching proxies with the ``private`` token, expire immediately\n-      in the browser, and disable validation. This emulates the usual\n-      behavior expected from the ``no-cache`` token.  If the nominally\n-      more secure, but occasionally troublesome, ``no-store`` token\n-      is also desired, set the ``No store`` parameter to True.\n-      [XXX - \'no store\' option not done yet]\n-\n-* **Chain** (``plone.caching.operations.chain``)\n-      Allows multiple operations to be chained together. When intercepting\n-      the response, the first chained operation to return a value will\n-      be used. Subsequent operations are ignored. When modifying the\n-      response, all operations will be called, in order.\n-\n-These operation descriptions are a bit simplified as several of these\n-operations also include tests to downgrade caching depending on various\n-parameter settings, workflow state, and access privileges. For more detail,\n-it\'s best to review the operation code itself.\n-\n-\n-Default ruleset/operation mappings\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To recap, ``plone.app.caching`` defines three default cache policies\n-containing the cache operation mappings for each of the six rulesets. The\n-default mappings are as follows:\n-\n-===============  =====================  ==================  =============================\n-..               without-caching-proxy  with-caching-proxy  with-caching-proxy-splitviews\n-===============  =====================  ==================  =============================\n-itemView         weakCaching            weakCaching         moderateCaching\n-folderView       weakCaching            weakCaching         moderateCaching\n-feed             weakCaching            moderateCaching     moderateCaching\n-file             weakCaching            moderateCaching     moderateCaching\n-resource         strongCaching          strongCaching       strongCaching\n-stableResource   strongCaching          strongCaching       strongCaching\n-===============  =====================  ==================  =============================\n-\n-\n-Cache operation parameters\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Much of the cache operation behavior is controlled via user-adjustable\n-parameters. In fact, three of the default caching operations (strong caching,\n-moderate caching, and weak caching) are essentially all the same operation but\n-with different default parameter settings and with some parameters hidden from\n-the UI.\n-\n-* *Maximum age* (``maxage``)\n-      Time (in seconds) to cache the response in the browser or caching proxy.\n-      Adds a "Cache-Control: max-age=<value>" header and a matching "Expires"\n-      header to the response.\n-\n-* *Shared maximum age* (``smaxage``)\n-      Time (in seconds) to cache the response in the caching proxy.\n-      Adds a "Cache-Control: s-maxage=<value>" header to the response.\n-\n-* *ETags* (``etags``)\n-      A list of the names of the ETag components to include in the ETag\n-      header. Also turns on "304 Not Modified" responses for "If-None-Match"\n-      conditional requests.\n-\n-* *Last-modified validation* (``lastModified``)\n-      Adds a "Last-Modified" header to the response and turns on "304 Not\n-      Modified" responses for "If-Modified-Since" conditional requests.\n-\n-* *RAM cache* (``ramCache``)\n-      Turn on caching in Zope memory. If the URL is not specific enough to\n-      ensure uniqueness then either ETags or Last-Modified should also be\n-      added to the list of parameters in order to generate a unique cache key.\n-\n-* *Vary* (``vary``)\n-      Name(s) of HTTP headers in the request that must match (in addition to\n-      the URL) for a caching proxy to return a cached response.\n-\n-* *Anonymous only* (``anonOnly``)\n-      Set this to True if you want to force logged-in users to always get a\n-      fresh copy. This works best with the "moderate caching" operation, and\n-      will not work well with a "Max age" (to cache content in the browser)\n-      greater than zero. By setting this option, you can focus the other cache\n-      settings on the anonymous use case. Note that if you are using a caching\n-      proxy, you will need to set a Vary header of "X-Anonymous" or similar,\n-      and ensure that such a header is set in the proxy for logged in users (a\n-      blunter alternative is to use "Cookie" as the header, although this can\n-      have false positives). See the example Varnish and Squid configurations\n-      that come with this package for more details.\n-\n-* *Request variables that prevent caching* (``cacheStopRequestVariables``)\n-      A list of variables in the request (including Cookies) that prevent\n-      caching if present. Note, unlike the others above, this global parameter\n-      is not directly visible in the plone.app.caching UI. There should\n-      unlikely be any need to change this list but, if needed, it can be\n-      edited via the Configuration Registry control panel.\n-\n-\n-Caching operation helper functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-If you will find the implementations of the default caching operations\n-in the package ``plone.app.caching.operations``. If you are writing a\n-custom caching operation, the ``utils`` module contains helper functions\n-which you may find useful.\n-\n-\n-Debug headers and logging\n-~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-It can sometimes be useful to see which rulesets and operations (if any)\n-are being applied to published resources. There are two ways to see\n-this: via debug response headers and via debug logging.\n-\n-Several debug response headers are added automatically by plone.app.caching\n-and plone.caching. These headers include:\n-\n-* ``X-Cache-Rule: <matching rule id>``\n-\n-* ``X-Cache-Operation: <matching operation id>``\n-\n-* ``X-Cache-Chain-Operations: <list of chain operation ids>``\n-\n-* ``X-RAMCache: <ram cache id>``\n-\n-Viewing these headers is relatively easy with tools like the Firebug\n-and LiveHTTPHeaders add-on for the Firefox browser.  Similar tools\n-for inspecting response headers exist for Safari and IE.\n-\n-If you enable the DEBUG logging level for the ``plone.caching`` logger,\n-you will get additional debug output in your event log. One way to do that\n-is to set the global Zope logging level to DEBUG in ``zope.conf``::\n-\n-    <eventlog>\n-        level DEBUG\n-        <logfile>\n-            path <file path here>\n-            level DEBUG\n-        </logfile>\n-    </eventlog>\n-\n-If you are using `plone.recipe.zope2instance`_ to create your Zope instances,\n-you can set the logging level with the ``event-log-level`` option.\n-\n-You should see output in the log like::\n-\n-    2010-01-11 16:44:10 DEBUG plone.caching Published: <ATImage at /test/i> Ruleset: plone.download Operation: None\n-    2010-01-11 16:44:10 DEBUG plone.caching Published: <ATImage at /test/i> Ruleset: plone.download Operation: plone.caching.operations.chain\n-\n-The ``None`` indicates that no ruleset or operation was mapped.\n-\n-It is probably not a good idea to leave debug logging on for production use,\n-as it can produce a lot of output, filling up log files and adding unnecessary\n-load to your disks.\n-\n-Content-type based rulesets\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Normally, you declare caching rulesets for a view, e.g. with::\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".browser.MyItemView"\n-        />\n-\n-See `plone.caching`_ for details.\n-\n-plone.app.caching installs a special ruleset lookup adapter that is invoked\n-for skin layer page templates and browser views not assigned a more specific\n-rule set. This adapter allows you to declare a ruleset for the *default view*\n-of a given content type by supplying a content type class or interface to the\n-``<cache:ruleset />`` directive::\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".interfaces.IMyContentType"\n-        />\n-\n-or for a class:\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".content.MyContentType"\n-        />\n-\n-There are two reasons to want to do this:\n-\n-* Your type uses a skin layer page template for its default view, instead of a\n-  browser view. In this case, you can either declare the ruleset on the\n-  type as shown above (in ZCML), or map the type name in the registry,\n-  using the GUI or GenericSetup. The former is more robust and certainly more\n-  natural if you are declaring other, more conventional rulesets in ZCML\n-  already.\n-* You want to set the ruleset for a number of content types. In fact,\n-  plone.app.caching already does this for you: The Archetypes base classes\n-  ``BaseContent`` and ``BaseFolder`` are assigned the rulesets\n-  ``plone.content.itemView`` and ``plone.content.folderview``, respectively.\n-  Ditto for Dexterity\'s ``IDexterityItem`` and ``IDexterityContainer``\n-  interfaces.\n-\n-.. _plone.caching: http://pypi.python.org/pypi/plone.caching\n-.. _plone.recipe.zope2instance: http://pypi.python.org/pypi/plone.recipe.zope2instance\ndiff --git a/instance.yaml b/instance.yaml\nnew file mode 100644\nindex 0000000..8c6c46e\n--- /dev/null\n+++ b/instance.yaml\n@@ -0,0 +1,8 @@\n+default_context:\n+    initial_user_name: \'admin\'\n+    initial_user_password: \'admin\'\n+\n+    load_zcml:\n+        package_includes: [\'plone.app.caching\']\n+\n+    db_storage: direct\ndiff --git a/mx.ini b/mx.ini\nnew file mode 100644\nindex 0000000..b575b20\n--- /dev/null\n+++ b/mx.ini\n@@ -0,0 +1,9 @@\n+; This is a mxdev configuration file\n+; it can be used to override versions of packages already defined in the\n+; constraints files and to add new packages from VCS like git.\n+; to learn more about mxdev visit https://pypi.org/project/mxdev/\n+\n+[settings]\n+; example how to override a package version\n+; version-overrides =\n+;     example.package==2.1.0a2\ndiff --git a/news/114.documentation b/news/114.documentation\nnew file mode 100644\nindex 0000000..1729b7d\n--- /dev/null\n+++ b/news/114.documentation\n@@ -0,0 +1 @@\n+Convert documentation to markdown [ericof]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 9a3db87..0c7b34b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,10 +1,12 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n-filename = "CHANGES.rst"\n+filename = "CHANGES.md"\n directory = "news/"\n-title_format = "{version} ({project_date})"\n-underlines = ["-", ""]\n+start_string = "<!-- towncrier release notes start -->\\n"\n+title_format = "## {version} ({project_date})"\n+template = "docs/changelog_template.jinja"\n+underlines = ["", "", ""]\n \n [[tool.towncrier.type]]\n directory = "breaking"\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nnew file mode 100644\nindex 0000000..9923bd9\n--- /dev/null\n+++ b/requirements-docs.txt\n@@ -0,0 +1,4 @@\n+Sphinx<5,>=3  # sphinx-book-theme 0.3.3 has requirement sphinx<5,>=3\n+sphinx-book-theme<=0.3.99\n+myst-parser\n+sphinx-autobuild\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..8e4007a\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+-e ".[test]"\ndiff --git a/setup.py b/setup.py\nindex 262d39a..9663da8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,14 +1,21 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n \n version = "3.0.3.dev0"\n \n+long_description = f"""\n+{Path("README.md").read_text()}\\n\n+{Path("CHANGES.md").read_text()}\\n\n+"""\n+\n setup(\n     name="plone.app.caching",\n     version=version,\n     description="Plone UI and default rules for plone.caching/z3c.caching",\n-    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n+    long_description=long_description,\n+    long_description_content_type="text/markdown",\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T10:45:15-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/c5f027f24315a3c9cd96920a798890bc93aa91f9

Lint code

Files changed:
M .gitignore
M MANIFEST.in
M Makefile

b'diff --git a/.gitignore b/.gitignore\nindex 86faa99..7b574f1 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -12,10 +12,13 @@ instance/\n lib/\n parts/\n var/\n+# Docs\n docs/Makefile\n docs/make.bat\n docs/doctrees\n docs/_build\n+# Tox\n+.tox\n # mxdev\n constraints-mxdev.txt\n requirements-mxdev.txt\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 1eaa548..8620b73 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,6 +1,9 @@\n include *.txt\n-include *.rst\n+include *.md\n+include *.yaml\n include pyproject.toml\n+include Makefile\n+include mx.ini\n \n recursive-include docs *\n recursive-include plone *\n@@ -8,4 +11,7 @@ recursive-include plone *\n global-exclude *pyc\n \n recursive-exclude news *\n+recursive-exclude docs/_build *\n exclude news\n+exclude constraints-mxdev.txt\n+exclude requirements-mxdev.txt\ndiff --git a/Makefile b/Makefile\nindex aac24b8..88e3379 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -46,7 +46,7 @@ help: ## This help message\n bin/pip:\n \t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n \t$(PYTHON) -m venv .\n-\tbin/pip install -U "pip" "wheel" "cookiecutter" "mxdev"\n+\tbin/pip install -U "pip" "wheel" "cookiecutter" "mxdev" "tox"\n \n .PHONY: config\n config: bin/pip  ## Create instance configuration\n@@ -71,10 +71,10 @@ clean: ## Remove old virtualenv and creates a new one\n start: ## Start a Plone instance on localhost:8080\n \tPYTHONWARNINGS=ignore ./bin/runwsgi instance/etc/zope.ini\n \n-# Tests\n-.PHONY: test\n-test: ## run tests\n-\tbin/pytest --disable-warnings\n+# Lint\n+.PHONY: lint\n+lint: bin/pip  ## Lint codebase\n+\tbin/tox -e lint\n \n # Docs\n bin/sphinx-build: bin/pip\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T12:20:54-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/b1a59125745680435656400f57517510d5fa8410

Remove documentation from this package -- Moved to plone/documentation

Files changed:
M MANIFEST.in
M Makefile
M news/114.documentation
M setup.cfg
D .github/workflows/docs.yml
D docs/caching-control-panel.md
D docs/caching-profiles.md
D docs/caching-proxies.md
D docs/composite-views.md
D docs/conf.py
D docs/etags.md
D docs/index.md
D docs/ram-cache.md
D docs/restapi.md
D docs/rulesets-and-caching-operations.md
D requirements-docs.txt

b'diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\ndeleted file mode 100644\nindex 9ada0eb..0000000\n--- a/.github/workflows/docs.yml\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-name: Build docs\n-on: [push]\n-\n-env:\n-  python-version: "3.11"\n-  plone-version: "6.0-latest"\n-\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v3\n-\n-      # python setup\n-      - name: Setup Plone ${{ env.plone-version }} with Python ${{ env.python-version }}\n-        id: setup\n-        uses: plone/setup-plone@v2.0.0\n-        with:\n-          python-version: ${{ env.python-version }}\n-          plone-version: ${{ env.plone-version }}\n-\n-      - name: Install dependencies\n-        run: |\n-          pip install -r requirements.txt\n-          pip install -r requirements-docs.txt\n-\n-      - name: Build Documentation\n-        run: |\n-          sphinx-build -b html docs docs/_build/html\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 8620b73..df0a9da 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,9 +1,6 @@\n include *.txt\n include *.md\n-include *.yaml\n include pyproject.toml\n-include Makefile\n-include mx.ini\n \n recursive-include docs *\n recursive-include plone *\n@@ -11,7 +8,4 @@ recursive-include plone *\n global-exclude *pyc\n \n recursive-exclude news *\n-recursive-exclude docs/_build *\n exclude news\n-exclude constraints-mxdev.txt\n-exclude requirements-mxdev.txt\ndiff --git a/Makefile b/Makefile\nindex 88e3379..e6aed91 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -75,18 +75,3 @@ start: ## Start a Plone instance on localhost:8080\n .PHONY: lint\n lint: bin/pip  ## Lint codebase\n \tbin/tox -e lint\n-\n-# Docs\n-bin/sphinx-build: bin/pip\n-\tbin/pip install -r requirements-docs.txt\n-\n-.PHONY: build-docs\n-build-docs: bin/sphinx-build  ## Build the documentation\n-\t./bin/sphinx-build \\\n-\t\t-b html $(DOCS_DIR) "$(DOCS_DIR)/_build/html"\n-\n-.PHONY: livehtml\n-livehtml: bin/sphinx-build  ## Rebuild Sphinx documentation on changes, with live-reload in the browser\n-\t./bin/sphinx-autobuild \\\n-\t\t--ignore "*.swp" \\\n-\t\t-b html $(DOCS_DIR) "$(DOCS_DIR)/_build/html"\ndiff --git a/docs/caching-control-panel.md b/docs/caching-control-panel.md\ndeleted file mode 100644\nindex 06feb3b..0000000\n--- a/docs/caching-control-panel.md\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-# Control panel\n-\n-After installation, you will find a Caching control panel in Plone\'s site setup (Currently this panel is only available in the Classic UI).\n-\n-## Main Tabs\n-\n-This consists of four main tabs:\n-\n-### Change settings\n-\n-Where you can control caching behaviour\n-\n-### Import settings\n-\n-Where you can import pre-defined profiles of cache settings\n-\n-### Purge caching proxy\n-\n-Where you can manually purge content from a caching proxy.\n-\n-This tab only appears if you have purging enabled under *Change settings*.\n-\n-### RAM cache\n-\n-Where you can view statistics about and purge the RAM cache.\n-\n-## Settings Tab\n-\n-Under the settings tab, you will find four fieldsets:\n-\n-### General settings\n-\n-For global options such as turning caching on or off.\n-\n-### Caching proxies\n-\n-Where you can control Plone\'s use of a caching proxy such or Varnish or a CDN.\n-\n-### Caching operation mappings\n-\n-Where caching rulesets (hints about views and resources used for caching purposes) can be associated with caching operations.\n-\n-Those either intercept a request to return a cached response, or modifies a response to add cache control headers.\n-\n-This is also where rulesets for legacy page templates (created through the web or the  portal_skins tool) are configured.\n-\n-### Detailed settings\n-\n-Where you can configure parameters for individual caching operations.\ndiff --git a/docs/caching-profiles.md b/docs/caching-profiles.md\ndeleted file mode 100644\nindex 3d0a9fe..0000000\n--- a/docs/caching-profiles.md\n+++ /dev/null\n@@ -1,104 +0,0 @@\n-# Caching profiles\n-\n-All persistent configuration for the caching machinery is stored in the configuration registry, as managed by `plone.app.registry`.\n-This can be modified using the `registry.xml` GenericSetup import step.\n-\n-The *Import settings* tab of the control panel allows you to import these caching profiles.\n-\n-\n-## Default caching profiles\n-\n-`plone.app.caching` includes three default caching profiles.\n-\n-Two of these  profiles encapsulate the cache settings that are known to work well with a typical default Plone installation:\n-\n-### Without caching proxy\n-\n-Settings useful for setups without a caching proxy.\n-\n-### With caching proxy\n-\n-Settings useful for setups with a caching proxy such as Squid or Varnish.\n-The only difference from the "without caching proxy" profile are some settings to enable proxy caching of files/images in content space and content feeds.\n-\n-## Custom caching profiles\n-\n-Caching policies are often a compromise between speed and freshness.\n-More aggressive caching often comes at the cost of increased risk of stale responses.\n-The default profiles provided tend to err on the side of freshness over speed so there is some room for tweaking if greater speed is desired.\n-\n-Customization may also be needed if third-party products are installed which require special treatment.\n-Examine the HTTP response headers to determine whether the third-party product requires special treatment.\n-Most simple cases probably can be solved by adding the content type or template to the appropriate mapping.\n-More complicated cases, may require custom caching operations.\n-\n-A GenericSetup profile used for caching should be registered for the `ICacheProfiles` marker interface to distinguish it from more general profiles used to install a product.\n-This also hides the profile from Plone\'s Add-ons control panel.\n-\n-Here is an example from this package:\n-\n-```xml\n-    <genericsetup:registerProfile\n-        name="with-caching-proxy"\n-        title="With caching proxy"\n-        description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n-        directory="profiles/with-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n-```\n-\n-The directory `profiles/with-caching-proxy` contains a single import step, `registry.xml`,\n-containing settings to configure the ruleset to operation mapping,\n-and setting options for various operations.\n-\n-At the time of writing, this includes:\n-\n-```xml\n-    <record name="plone.caching.interfaces.ICacheSettings.operationMapping">\n-        <value purge="False">\n-            <element key="plone.resource">plone.app.caching.strongCaching</element>\n-            <element key="plone.stableResource">plone.app.caching.strongCaching</element>\n-            <element key="plone.content.itemView">plone.app.caching.weakCaching</element>\n-            <element key="plone.content.feed">plone.app.caching.moderateCaching</element>\n-            <element key="plone.content.folderView">plone.app.caching.weakCaching</element>\n-            <element key="plone.content.file">plone.app.caching.moderateCaching</element>\n-            <element key="plone.content.dynamic">plone.app.caching.terseCaching</element>\n-        </value>\n-    </record>\n-```\n-\n-Default options for the various standard operations are found in the `registry.xml` file that is part of the standard installation profile for this product, in the directory `profiles/default`.\n-\n-The custom profile overrides a number of operation settings for specific rulesets (see below).\n-\n-For example:\n-\n-```xml\n-    <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-        <field ref="plone.app.caching.weakCaching.ramCache" />\n-        <value>True</value>\n-    </record>\n-```\n-\n-This enables RAM caching for the "weak caching" operation for resources using the ruleset `plone.content.itemView`.\n-The default is defined in the main `registry.xml` as::\n-\n-```xml\n-    <record name="plone.app.caching.weakCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-```\n-\n-Notice how we use a *field reference* to avoid having to re-define the field.\n-\n-It may be useful looking at these bundled `registry.xml` for inspiration if you are building your own caching profile.\n-Alternatively, you can export the registry from the `portal_setup` tool and pull out the records under the prefixes `plone.caching` and `plone.app.caching`.\n-\n-Typically, `registry.xml` is all that is required, but you are free to add additional import steps if required.\n-You can also add a `metadata.xml` and use the GenericSetup dependency mechanism to install other profiles on the fly.\ndiff --git a/docs/caching-proxies.md b/docs/caching-proxies.md\ndeleted file mode 100644\nindex d6186fd..0000000\n--- a/docs/caching-proxies.md\n+++ /dev/null\n@@ -1,98 +0,0 @@\n-# Caching proxies\n-\n-It is common to place a so-called caching reverse proxy in front of Zope when hosting large Plone sites.\n-If hosted by yourself, a popular option is [Varnish](https://varnish-cache.org).\n-On the other hand there are commercial hosted CDN services like Cloudflare, CloudFront, Fastly and more.\n-\n-It is important to realise that whilst `plone.app.caching` provides some functionality for controlling how Plone interacts with a caching proxy.\n-The proxy itself must be configured separately.\n-\n-Some operations in `plone.app.caching` can set response headers that instruct the caching proxy how best to cache content.\n-For example, it is normally a good idea to cache static resources (such as images and stylesheets) and "downloadables"  in the proxy.\n-This are i.e. Plone content of the types `File` or `Image`.\n-This content will then be served to most users straight from the proxy, which is much faster than Zope.\n-\n-The downside of this approach is that an old version of a content item may returned to a user, because the cache has not been updated since the item was modified.\n-\n-## Strategies\n-\n-There are four general strategies for dealing with this:\n-\n-### Change the URL\n-\n-Since resources are cached in the proxy based on their URL, you can "invalidate" the cached copy by changing an item\'s URL when it is updated.\n-\n-This is the approach taken by Plone\'s resource management: In production mode, the links that are inserted into Plone\'s content pages for resource managed by Plone  contain a hash-based token, which changes when the main bundle file changes.\n-\n-This approach has the benefit of also being able to "invalidate" content stored in a user\'s browser cache.\n-\n-### All caching proxies support setting timeouts.\n-\n-This means that content may be stale, but typically only up to a few minutes.\n-\n-This is sometimes an acceptable policy for high-volume sites where most users do not log in.\n-\n-### Most caching proxies support receiving PURGE requests for paths that should be purged.\n-\n-Given the proxy has cached a resource at `/logo.jpg`, and that object is modified.\n-\n-Then a PURGE request could be sent to the proxy (originating from Zope, not the client) with the same path to force the proxy to fetch a new version the next time the item is requested.\n-\n-### Avoid caching\n-\n-The final option, of course is to avoid caching content in the proxy altogether.\n-\n-The default policies will not allow standard listing pages to be cached in the proxy, because it is too difficult to invalidate cached instances.\n-\n-For example, if you change a content item\'s title, that may require invalidation of a number of pages where that title appears in the navigation tree, folder listings, `Collections`, portlets, and so on.\n-\n-Tracking all these dependencies and purging in an efficient manner is impossible unless the caching proxy configuration is highly customised for the site.\n-\n-Nevertheless a "terse" policy allows caching for just a few seconds of all pages to reduce the load on the backend on high traffic situations.\n-\n-\n-## Purging a caching proxy\n-\n-Synchronous and asynchronous purging is enabled via [plone.cachepurging](https://pypi.org/project/plone.cachepurging).\n-\n-In the control panel, you can configure the use of a proxy via various options, such as:\n-\n-* Whether or not to enable purging globally.\n-\n-* The address of the caching server to which PURGE requests should be sent.\n-\n-* Whether or not virtual host rewriting takes place before the caching proxy receives a URL or not.\n-  This has implications for how the PURGE path is constructed.\n-\n-* Any domain aliases for your site, to enable correct purging of content served via e.g. http://example.com and http://www.example.com.\n-\n-The default purging policy is geared mainly towards purging file and image resources, not content pages, although basic purging of content pages is included.\n-\n-The actual paths to purge are constructed from a number of components providing the `IPurgePaths` interface.\n-\n-See `plone.cachepurging` for details on how this works, especially if you need to write your own.\n-\n-The default purge paths include:\n-\n-* ${object_path}, -- the object\'s canonical path\n-\n-* ${object_path}/ -- in case the object is a folder\n-\n-* ${object_path}/view -- the `view` method alias\n-\n-* ${object_path}/${default-view} -- in case a default view template is used\n-\n-* The download URLs for any content object fields, given the type contains blobs.\n-This includes support for the standard `File` and  `Image` types.\n-\n-Files and images created (or customised) in the ZMI are purged automatically when modified.\n-Bundles managed through the resource registration do not need purging, since they have "stable" URLs.\n-To purge Plone content when modified (or removed), you must select the content types in the control panel.\n-By default, only the `File` and `Image` types are purged.\n-\n-You should not enable purging for types that are not likely to be cached in the proxy.\n-Although purging happens asynchronously at the end of the request, it may still place unnecessary load on your server.\n-\n-Finally, you can use the *Purge* tab in the control panel to manually purge one or more URLs.\n-This is a useful way to debug cache purging.\n-It offers as well as a quick solution for the awkward situation where your boss walks in and wonders why the "about us" page is still showing that old picture of him, before he had a new haircut.\ndiff --git a/docs/composite-views.md b/docs/composite-views.md\ndeleted file mode 100644\nindex 849dd5e..0000000\n--- a/docs/composite-views.md\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-# Composite views\n-\n-A `composite view` is just a general term for most page views you see when you visit a Plone site.\n-\n-It includes all content item views, content folder views, and many template views.\n-\n-For our purposes, the distinguishing characteristic of composite views is the difficulty inherent in keeping track of all changes that might affect the final composited view.\n-\n-Because of the difficulty of dependency tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n-\n-However, most of the inline resources linked to from the composite view (css, javascript, images, etc.) can be cached very well in proxy so the overall speed of most composite views will always be better with a caching proxy in front despite the page itself not being cached.\n-\n-For relatively stable composite views or for those views for which you can tolerate some potential staleness, you might be tempted to try switching from *weak caching* to *moderate caching* with the `s-maxage` expiration value set to some tolerable value but first make sure you understand the issues regarding "split view" caching (see below).\n-\n-A way to speedup a site with lots of composite view is to use "Terse" caching.\n-\n-It caches a page for just a small time (be default 10s in browser and 60s in the caching proxy).\n-\n-Thus the content is almost up to date, but on high load visitors are getting pages served from the cache.\ndiff --git a/docs/conf.py b/docs/conf.py\ndeleted file mode 100644\nindex 31714ba..0000000\n--- a/docs/conf.py\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-from pkg_resources import get_distribution\n-\n-import sys\n-\n-project = \'plone.app.caching\'\n-copyright = \'2023, Plone Foundation\'\n-\n-version = release = get_distribution(project).version\n-\n-\n-# The suffix of source filenames.\n-source_suffix = {\n-    ".md": "markdown",\n-    ".rst": "restructuredtext",\n-}\n-\n-extensions = [\n-    \'sphinx.ext.doctest\',\n-    \'sphinx.ext.coverage\',\n-    \'sphinx.ext.autodoc\',\n-    \'sphinx.ext.viewcode\',\n-    \'sphinx.ext.autosummary\',\n-    "myst_parser",\n-    "sphinx.ext.todo",\n-]\n-master_doc = \'index\'\n-\n-# locale_dirs = [\'translated/\']\n-language = \'en\'\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title, author, documentclass [howto/manual])\n-# This enables PDF generation.\n-latex_documents = [(\n-    \'index\',\n-    \'ploneapi.tex\',\n-    \'plone.distribution Documentation\',\n-    \'\',\n-    \'manual\',\n-)]\n-\n-\n-class Mock:\n-    def __init__(self, *args, **kwargs):\n-        pass\n-\n-    def __call__(self, *args, **kwargs):\n-        return Mock()\n-\n-    @classmethod\n-    def __getattr__(cls, name):\n-        if name in (\'__file__\', \'__path__\'):\n-            return \'/dev/null\'\n-        elif name[0] == name[0].upper():\n-            mockType = type(name, (), {})\n-            mockType.__module__ = __name__\n-            return mockType\n-        else:\n-            return Mock()\n-\n-\n-MOCK_MODULES = [\'lxml\']\n-for mod_name in MOCK_MODULES:\n-    sys.modules[mod_name] = Mock()\n-\n-\n-# -- Options for myST markdown conversion to html -----------------------------\n-\n-myst_enable_extensions = [\n-    "colon_fence",\n-    "deflist",\n-]\n-\n-\n-# -- Options for HTML output -------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  See the documentation for\n-# a list of builtin themes.\n-#\n-html_theme = "sphinx_book_theme"\ndiff --git a/docs/etags.md b/docs/etags.md\ndeleted file mode 100644\nindex 9928164..0000000\n--- a/docs/etags.md\n+++ /dev/null\n@@ -1,84 +0,0 @@\n-# ETags\n-\n-ETags are used in to check whether pages need to be re-calculated or can be served from cache.\n-An ETag is simply a string. Under `plone.app.caching`, it is a string of tokens separated by pipe characters.\n-The tokens hold values such as a user id, the current skin name, or a counter indicating how many objects have been added to the site.\n-The idea is that the browser sends a request with the ETag included in an `If-None-Match` header.\n-Plone can then quickly calculate the current ETag for the requested resource.\n-If the ETag is the same, Plone can reply with `304 NOT MODIFIED` response, telling the browser to use its cached copy.\n-Otherwise, Plone renders the page and returns it as normal.\n-\n-Many caching operations use ETags. The tokens to include are typically listed in an `etags` tuple in the operation\'s options.\n-\n-The ETag names tokens supported by default are:\n-\n-userid\n-: The current user\'s id\n-\n-## roles\n-\n-A list of the current user\'s roles in the given context\n-\n-## language\n-\n-The language(s) accepted by the browser, in the `ACCEPT_LANGUAGE` header\n-\n-## userLanguage\n-\n-The current user\'s preferred language\n-\n-## lastModified\n-\n-A timestamp indicating the last-modified date of the given context\n-\n-## catalogCounter\n-\n-A counter that is incremented each time the catalog is updated. I.e. each time content in the site is changed.\n-\n-## locked\n-\n-Whether or not the given context is locked for editing.\n-\n-## skin\n-\n-The name of the current skin (theme)\n-\n-## resourceRegistries\n-\n-A timestamp indicating the last-modified timestamp for the Resource Registries. This is useful for avoiding requests for expired resources from cached pages.\n-\n-It is possible to provide additional tokens by registering an `IETagValue` adapter.\n-\n-This should be a named adapter on the published object (typically a view, file resource or Zope page template object) and request, with a unique name.\n-\n-The name is used to look up the component. Thus, you can also override one of the tokens above for a particular type of context or request (e.g. via a browser layer), by registering a more specific adapter with the same name.\n-\n-As an example, here is the `language` adapter:\n-\n-```python\n-\n-    from plone.app.caching.interfaces import IETagValue\n-    from zope.component import adapter\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n-\n-    @implementer(IETagValue)\n-    @adapter(Interface, Interface)\n-    class Language:\n-        """The `language` etag component, returning the value of the\n-        HTTP_ACCEPT_LANGUAGE request key.\n-        """\n-\n-        def __init__(self, published, request):\n-            self.published = published\n-            self.request = request\n-\n-        def __call__(self):\n-            return self.request.get(\'HTTP_ACCEPT_LANGUAGE\', \'\')\n-```\n-\n-This is registered in ZCML like so:\n-\n-```xml\n-    <adapter factory=".etags.Language" name="language" />\n-```\ndiff --git a/docs/index.md b/docs/index.md\ndeleted file mode 100644\nindex bc4ea9f..0000000\n--- a/docs/index.md\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-<p align="center">\n-    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-logo.png">\n-</p>\n-\n-<h1 align="center">\n-  plone.app.caching\n-</h1>\n-\n-<div align="center">\n-\n-[![PyPI - Wheel](https://img.shields.io/pypi/wheel/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n-[![PyPI - License](https://img.shields.io/pypi/l/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n-[![PyPI - Status](https://img.shields.io/pypi/status/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n-\n-[![GitHub contributors](https://img.shields.io/github/contributors/plone/plone.app.caching)](https://github.com/plone/plone.app.caching)\n-![GitHub Repo stars](https://img.shields.io/github/stars/plone/plone.app.caching?style=flat-square)\n-\n-</div>\n-\n-## Introduction\n-\n-This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n-It builds on [z3c.caching](https://github.com/zopefoundation/z3c.caching), [plone.caching](https://github.com/plone/plone.caching) and [plone.cachepurging](https://github.com/plone/plone.cachepurging).\n-\n-\n-### Compatibility\n-\n-| Version | Plone |\n-|------|-----|\n-| 3.x | 6.0 or above |\n-| 2.x | 5.2 |\n-| 1.x | 5.1, 5.0, 4.3, 4.2, 4.1 |\n-\n-```{toctree}\n-:maxdepth: 2\n-:hidden: true\n-\n-caching-control-panel\n-caching-profiles\n-rulesets-and-caching-operations\n-caching-proxies\n-ram-cache\n-etags\n-composite-views\n-split-views\n-restapi\n-```\ndiff --git a/docs/ram-cache.md b/docs/ram-cache.md\ndeleted file mode 100644\nindex 1f2a470..0000000\n--- a/docs/ram-cache.md\n+++ /dev/null\n@@ -1,70 +0,0 @@\n-# The RAM cache\n-\n-In addition to caching content in users\' browsers (through setting appropriate response headers) and a caching proxy, Plone can cache certain information in memory.\n-This is done in two main ways:\n-\n-* Developers may use the `plone.memoize` package\'s `ram` module to cache the results of certain functions in RAM.\n-  For example, some viewlets and portlets cache their rendered output in RAM for a time, alleviating the need to calculate them every time.\n-\n-* Some caching operations may cache an entire response in memory, so that  they can later intercept the request to return a cached response.\n-\n-Caching in RAM in Zope is not as efficient as caching in a proxy, for a number of reasons:\n-\n-* Zope still has to perform traversal, security, transaction management and so on before serving a request with a RAM-cached response.\n-\n-* Zope\'s use of memory is not as efficient as that of a finely optimised caching proxy.\n-\n-* Storing lots of content in RAM may compete with the standard ZODB object cache and other memory pools used by Zope, thus slowing down Zope overall.\n-\n-* In multi-client ZEO setups, the RAM cache is (by default at least) not shared among instances (though it is shared among threads in that instance).\n-  Thus, each Plone client process will maintain its own cache.\n-\n-You can use the *RAM cache* tab in the caching control panel to view statistics about the use of the RAM cache.\n-On the *Change settings* tab, you can also control the size of the cache, and the frequency with which it is purged of old items.\n-\n-\n-## Alternative RAM cache implementations\n-\n-The RAM cache exposed through `plone.memoize.ram` is looked up via an `ICacheChoser` utility.\n-The default implementation looks up a `zope.ramcache.interfaces.ram.IRAMCache` utility.\n-Plone installs a local such utility (to allows its settings to be persisted - the cache itself is not persistent), which is shared by all users of the cache.\n-\n-You can provide your own `ICacheChooser` utility to change this policy, by installing this as a local utility or overriding it in `overrides.zcml`.\n-One reason to do this may be to back the cache with a [memcached](https://memcached.org/) server, which would allow a single cache to be shared among multiple Zope clients.\n-\n-Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota:\n-\n-```python\n-    from plone.memoize.interfaces import ICacheChooser\n-    from plone.memoize.ram import MemcacheAdapter\n-    from pylibmc import Client\n-    from threading import local\n-    from zope.interface import implementer\n-\n-    @implementer(ICacheChooser)\n-    class MemcachedCacheChooser():\n-        _v_thread_local = local()\n-\n-        def getClient(self):\n-            """\n-            Return thread local connection to memcached.\n-            """\n-            connection = getattr(self._v_thread_local, \'connection\', None)\n-            if connection is None:\n-                connection = Client([\'127.0.0.1:11211\'])\n-                self._v_thread_local.connection = connection\n-\n-            return connection\n-\n-        def __call__(self, fun_name):\n-            """\n-            Create new adapter for plone.memoize.ram.\n-            """\n-            return MemcacheAdapter(client=self.getClient(), globalkey=fun_name)\n-```\n-\n-You could install this with the following lines in an overrides.zcml:\n-\n-```xml\n-    <utility factory=".memcached.MemcachedCacheChooser" />\n-```\ndiff --git a/docs/restapi.md b/docs/restapi.md\ndeleted file mode 100644\nindex cf00176..0000000\n--- a/docs/restapi.md\n+++ /dev/null\n@@ -1,132 +0,0 @@\n-# plone.restapi support\n-\n-## Strategy\n-\n-Caching for anonymous users for all GET requests.\n-\n-Remark: Some POST requests, like `@querystring`, should be turned into GET in order to better cache.\n-\n-We have endpoints following classic `plone.content.itemView` content and do not accept parameters.\n-Those can be handled with the default rules, including purge.\n-\n-There are others delivering dynamic content, like search, impossible to purge.\n-Those shall be cached using a shorttime cache (like some seconds to some minutes).\n-\n-This get covered by the rulesetType `plone.content.dynamic`.\n-It is configured to cache by default in browser 10sec, in caching-proxy 60 seconds.\n-Its goal is primary to reduce the load/peak-load on the server.\n-Also, it reduces the impact of loading the same endpoint more than one time in one page.\n-\n-\n-## plone.restapi GET endpoints\n-\n-And its environment and assignments:\n-\n-- `@actions`\n-\n-  - Anonymous\n-  - rule plone.content.dynamic (might be influenced by other content)\n-  - purge\n-\n-- `@addons`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@breadcrumbs`\n-\n-  - Anonymous\n-  - rule plone.content.dynamic (parent may change)\n-  - purge\n-\n-- `@comments`\n-\n-  - Anonymous\n-  - rule plone.content.itemView\n-  - purge\n-\n-- `/` (content)\n-\n-  - Anonymous\n-  - expander!\n-  - rule plone.content.dynamic\n-\n-- `@history`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@lock`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@translations`\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- `@translations-locator`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@navigation`\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- `@querysources`\n-\n-  - Authenticated\n-  - with parameters\n-  - can not be cached\n-\n-- `@querystring`\n-\n-  - Anonymous\n-  - (values on IPloneSiteRoot from registry)\n-  - rule plone.content.dynamic\n-\n-- `@querystring-search`\n-\n-  - is in `get.py` BUT configured as POST\n-  - Anonymous\n-  - with json body\n-  - can not be cached\n-\n-- `@registry`\n-\n-  - Authenticated\n-  - with subpath\n-  - no rule assignment\n-\n-- `@roles`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@search`\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- `@sources`\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- `@tiles`\n-\n-  - pre-deprecation\n-  - Anonymous\n-  - with subpath\n-  - no rule assignment\n-\n-- `@types`\n-\n-  - Authenticated\n-  - no rule assignment\ndiff --git a/docs/rulesets-and-caching-operations.md b/docs/rulesets-and-caching-operations.md\ndeleted file mode 100644\nindex 801cb46..0000000\n--- a/docs/rulesets-and-caching-operations.md\n+++ /dev/null\n@@ -1,288 +0,0 @@\n-# Rulesets and caching operations\n-\n-The caching infrastructure works on the principle of *rulesets* mapped to *caching operations*. A ruleset is basically just a name, and is normally applied in ZCML by the author of a particular view.\n-There are also some default rulesets applied to general resources - see below.\n-\n-Please note that `plone.app.caching` places the caching ruleset registry into "explicit" mode. This means that you *must* declare a caching ruleset (with the `<cache:rulesetType />` directive) before you can use it.\n-\n-Caching operations are components written in Python which either interrupt rendering to provide a cached response (such as a `304 NOT MODIFIED` response), or add caching information to a response (such as setting the `Cache-Control` HTTP response header).\n-\n-For more details on how to use these components, see the documentation for [plone.caching](https://pypi.org/project/plone.caching).\n-\n-Once rulesets and caching operations have been registered, they will appear in the caching control panel.\n-\n-\n-## Default rulesets\n-\n-`plone.app.caching` declares a few default rulesets.  They are listed with descriptions in the control panel.\n-\n-### Content feed (`plone.content.feed`)\n-\n-A dynamic feed, e.g. using RSS or ATOM.\n-\n-### Content files and images (`plone.content.file`)\n-\n-Includes files and images in content space usually either downloaded or included as an inline element in one of the other public-facing views.\n-\n-### Content folder view (`plone.content.folderView`)\n-\n-A public-facing view for a content item that is a folder or container for other items.\n-\n-### Content item view (`plone.content.itemView`)\n-\n-A public-facing view for a content item that is not a folder or container for other items.\n-\n-### File and image resources (`plone.resource`)\n-\n-Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem.\n-\n-### Stable file and image resources (`plone.stableResource`)\n-\n-Stable resources like the css, javascript, and kss files registered with the Resource Registries.  These are resources which can be cached\n- \'forever\'.  Normally this means that if the object does change, its URL changes too.\n-\n-\n-## Default cache operations\n-\n-`plone.app.caching` also declares a number of default operation types.\n-These are listed in the control panel as available operations for the various rulesets. Hover your mouse over an operation in the drop-down\n-list to view its description.\n-\n-### Strong caching (`plone.app.caching.strongCaching`)\n-\n-Cache in browser and proxy (default: 24 hours).  Caution: Only use for stable resources that never change without changing their URL, or resources for which temporary staleness is not critical.\n-\n-In the caching profiles `without-caching-proxy` and `with-caching-proxy`, this operation is mapped to the rulesets `plone.resource` and `plone.stableResource`, which causes the following headers to be added to the response:\n-\n-```\n-Last-Modified: <last-modified-date>\n-Cache-Control: max-age=<seconds>, proxy-revalidate, public\n-```\n-\n-\n-### Moderate caching (`plone.app.caching.moderateCaching`),\n-\n-Cache in browser but expire immediately (same as `weak caching`), and cache in proxy (default: 24 hours).  Use a purgable caching\n-reverse proxy for best results.\n-Caution: If proxy cannot be purged reliably (for example, in the case of composite pages where it may be difficult to track when a dependency has changed) then stale responses might be seen until the cached entry expires.\n-A similar caution applies even if in the purgeable case, if the proxy cannot be configured to disallow caching in other intermediate proxies\n-that may exist between the local proxies and the browser (see the example proxy configs included with this package for some solutions\n-to this problem).\n-\n-In the caching profile `with-caching-proxy`, this operation is mapped to the rulesets `plone.content.feed` and `plone.content.file`,\n-which causes the following headers to be added to the response:\n-\n-#### plone.content.feed\n-\n-```\n-ETag: <etag-value>\n-Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-```\n-\n-#### plone.content.file\n-\n-```\n-Last-Modified: <last-modified-date>\n-Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-```\n-\n-### Weak caching (`plone.app.caching.weakCaching`)\n-Cache in browser but expire immediately and enable 304 responses on subsequent requests. 304\'s require configuration of the\n-`Last-Modified` and/or `ETags` settings.\n-If Last-Modified header is insufficient to ensure freshness, turn on ETag checking by listing each ETag component that should be used to to construct the ETag header.\n-To also cache public responses in Zope memory, set the `RAM cache` parameter to True.\n-\n-In the caching profile `without-caching-proxy`, this operation is mapped to the rulesets `plone.content.itemView`, `plone.content.folderView`, `plone.content.feed`, and `plone.content.file`, which causes the following headers to be added to the response:\n-\n-#### plone.content.itemView, plone.content.folderView, plone.content.feed\n-\n-```\n-ETag: <etag-value>\n-Cache-Control: max-age=0, must-revalidate, private\n-```\n-\n-### plone.content.file\n-\n-```\n-Last-Modified: <last-modified-date>\n-Cache-Control: max-age=0, must-revalidate, private\n-```\n-\n-In the caching profile `with-caching-proxy`, this operation is mapped only to the rulesets `plone.content.itemView` and `plone.content.folderView`.\n-\n-### No caching (`plone.app.caching.noCaching`)\n-Use this operation to keep the response out of all caches.\n-The default settings generate an IE-safe no-cache operation.\n-Under certain conditions, IE chokes on `no-cache` and `no-store` Cache-Control tokens, so instead we just exclude caching in shared caching proxies with the `private` token, expire immediately in the browser, and disable validation.\n-This emulates the usual behavior expected from the `no-cache` token.\n-\n-If the nominally more secure, but occasionally troublesome, `no-store` token is also desired, set the `No store` parameter to True.\n-\n-**\'no store\' option not done yet**\n-\n-### Chain (`plone.caching.operations.chain`)\n-Allows multiple operations to be chained together. When intercepting the response, the first chained operation to return a value will\n-be used. Subsequent operations are ignored.\n-When modifying the response, all operations will be called, in order.\n-\n-These operation descriptions are a bit simplified as several of these operations also include tests to downgrade caching depending on various\n-parameter settings, workflow state, and access privileges. For more detail, it\'s best to review the operation code itself.\n-\n-\n-## Default ruleset/operation mappings\n-\n-To recap, `plone.app.caching` defines three default cache policies containing the cache operation mappings for each of the six rulesets.\n-The default mappings are as follows:\n-\n-| ..  | without-caching-proxy  | with-caching-proxy  | with-caching-proxy-splitviews |\n-| --- | ---  | --- | --- |\n-| itemView | weakCaching | weakCaching | moderateCaching |\n-| folderView | weakCaching | weakCaching | moderateCaching |\n-| feed | weakCaching | moderateCaching | moderateCaching |\n-| file | weakCaching | moderateCaching | moderateCaching |\n-| resource | strongCaching | strongCaching       strongCaching |\n-| stableResource | strongCaching | strongCaching | strongCaching |\n-\n-\n-## Cache operation parameters\n-\n-Much of the cache operation behavior is controlled via user-adjustable parameters.\n-In fact, three of the default caching operations (strong caching, moderate caching, and weak caching) are essentially all the same operation but with different default parameter settings and with some parameters hidden from the UI.\n-\n-### Maximum age (`maxage`)\n-\n-Time (in seconds) to cache the response in the browser or caching proxy.\n-\n-Adds a "Cache-Control: max-age=<value>" header and a matching "Expires" header to the response.\n-\n-### Shared maximum age (`smaxage`)\n-\n-Time (in seconds) to cache the response in the caching proxy.\n-\n-Adds a "Cache-Control: s-maxage=<value>" header to the response.\n-\n-### ETags (`etags`)\n-\n-A list of the names of the ETag components to include in the ETag header.\n-Also turns on "304 Not Modified" responses for "If-None-Match" conditional requests.\n-\n-### Last-modified validation (`lastModified`)\n-\n-Adds a "Last-Modified" header to the response and turns on "304 Not\n-\n-Modified" responses for "If-Modified-Since" conditional requests.\n-\n-### RAM cache (`ramCache`)\n-Turn on caching in Zope memory.\n-\n-If the URL is not specific enough to ensure uniqueness then either ETags or Last-Modified should also be added to the list of parameters in order to generate a unique cache key.\n-\n-### Vary (`vary`)\n-\n-Name(s) of HTTP headers in the request that must match (in addition to the URL) for a caching proxy to return a cached response.\n-\n-### Anonymous only (`anonOnly`)\n-\n-Set this to True if you want to force logged-in users to always get a fresh copy.\n-\n-This works best with the "moderate caching" operation, and will not work well with a "Max age" (to cache content in the browser) greater than zero.\n-\n-By setting this option, you can focus the other cache settings on the anonymous use case.\n-\n-Note that if you are using a caching proxy, you will need to set a Vary header of "X-Anonymous" or similar, and ensure that such a header is set in the proxy for logged in users (a blunter alternative is to use "Cookie" as the header, although this can have false positives).\n-See the example Varnish and Squid configurations that come with this package for more details.\n-\n-### Request variables that prevent caching (`cacheStopRequestVariables`)\n-\n-A list of variables in the request (including Cookies) that prevent caching if present.\n-\n-Note, unlike the others above, this global parameter is not directly visible in the plone.app.caching UI.\n-\n-There should unlikely be any need to change this list but, if needed, it can be edited via the Configuration Registry control panel.\n-\n-\n-## Caching operation helper functions\n-\n-If you will find the implementations of the default caching operations in the package `plone.app.caching.operations`.\n-\n-If you are writing a custom caching operation, the `utils` module contains helper functions which you may find useful.\n-\n-\n-### Debug headers and logging\n-\n-It can sometimes be useful to see which rulesets and operations (if any) are being applied to published resources.\n-There are two ways to see this: via debug response headers and via debug logging.\n-\n-Several debug response headers are added automatically by plone.app.caching and plone.caching.\n-\n-These headers include:\n-\n-* `X-Cache-Rule: <matching rule id>`\n-\n-* `X-Cache-Operation: <matching operation id>`\n-\n-* `X-Cache-Chain-Operations: <list of chain operation ids>`\n-\n-* `X-RAMCache: <ram cache id>`\n-\n-Viewing these headers is relatively easy with `Web Developer Tools` (Firefox) or `Developer Tools` (Chrome) .\n-\n-If you enable the DEBUG logging level for the `plone.caching` logger, you will get additional debug output in your event log.\n-One way to do that is to set the global Zope logging level to DEBUG in `zope.conf`:\n-\n-```\n-<eventlog>\n-      level DEBUG\n-      <logfile>\n-      path <file path here>\n-      level DEBUG\n-      </logfile>\n-</eventlog>\n-```\n-\n-You should see output in the log like:\n-\n-```\n-2010-01-11 16:44:10 DEBUG plone.caching Published: <Image at /test/i> Ruleset: plone.download Operation: None\n-2010-01-11 16:44:10 DEBUG plone.caching Published: <Image at /test/i> Ruleset: plone.download Operation: plone.caching.operations.chain\n-```\n-\n-The `None` indicates that no ruleset or operation was mapped.\n-\n-It is probably not a good idea to leave debug logging on for production use, as it can produce a lot of output, filling up log files and adding unnecessary load to your disks.\n-\n-## Content-type based rulesets\n-\n-Normally, you declare caching rulesets for a view, e.g. with:\n-\n-```xml\n-<cache:ruleset\n-      ruleset="plone.content.itemView"\n-      for=".browser.MyItemView"\n-      />\n-```\n-\n-See [plone.caching](https://pypi.org/project/plone.caching) for details.\n-\n-plone.app.caching installs a special ruleset lookup adapter that is invoked for skin layer page templates and browser views not assigned a more specific rule set. This adapter allows you to declare a ruleset for the *default view* of a given content type by supplying a content type class or interface to the `<cache:ruleset />` directive:\n-\n-```xml\n-<cache:ruleset\n-      ruleset="plone.content.itemView"\n-      for=".interfaces.IMyContentType"\n-      />\n-```\n-or for a class:\n-\n-```xml\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".content.MyContentType"\n-        />\n-```\n-\n-There are two reasons to want to do this:\n-\n-* Your type uses a skin layer page template for its default view, instead of a browser view. In this case, you can either declare the ruleset on the type as shown above (in ZCML), or map the type name in the registry, using the GUI or GenericSetup. The former is more robust and certainly more natural if you are declaring other, more conventional rulesets in ZCML already.\n-\n-* You want to set the ruleset for a number of content types. In fact, plone.app.caching already does this for you: The Archetypes base classes `BaseContent` and `BaseFolder` are assigned the rulesets `plone.content.itemView` and `plone.content.folderview`, respectively. Ditto for Dexterity\'s `IDexterityItem` and `IDexterityContainer` interfaces.\ndiff --git a/news/114.documentation b/news/114.documentation\nindex 1729b7d..31dbc62 100644\n--- a/news/114.documentation\n+++ b/news/114.documentation\n@@ -1 +1 @@\n-Convert documentation to markdown [ericof]\n+Convert README and CHANGES to markdown[ericof]\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\ndeleted file mode 100644\nindex 9923bd9..0000000\n--- a/requirements-docs.txt\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-Sphinx<5,>=3  # sphinx-book-theme 0.3.3 has requirement sphinx<5,>=3\n-sphinx-book-theme<=0.3.99\n-myst-parser\n-sphinx-autobuild\ndiff --git a/setup.cfg b/setup.cfg\nindex 28522d5..28a6823 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,3 @@\n-[build_sphinx]\n-source-dir = docs/source\n-build-dir  = docs\n-all_files  = 1\n-\n-[upload_sphinx]\n-upload-dir = docs/html\n-\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n@@ -29,3 +21,8 @@ ignore =\n     .meta.toml\n     tox.ini\n     lint-requirements.txt\n+    constraints-mxdev.txt\n+    requirements-mxdev.txt\n+    Makefile\n+    instance.yaml\n+    mx.ini\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T12:44:44-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/87b728b4df50a4557a8434a4ea6228b0dd6de3a2

Update news/114.documentation

Co-authored-by: Maurits van Rees &lt;maurits@vanrees.org&gt;

Files changed:
M news/114.documentation

b'diff --git a/news/114.documentation b/news/114.documentation\nindex 31dbc62..d5fb402 100644\n--- a/news/114.documentation\n+++ b/news/114.documentation\n@@ -1 +1 @@\n-Convert README and CHANGES to markdown[ericof]\n+Convert README and CHANGES to markdown.  [ericof]\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T12:46:14-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/5c2721876b94ff37348eff13dc04481805e2e60c

Remove docs/ from .gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex 7b574f1..e1a30dc 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -12,11 +12,6 @@ instance/\n lib/\n parts/\n var/\n-# Docs\n-docs/Makefile\n-docs/make.bat\n-docs/doctrees\n-docs/_build\n # Tox\n .tox\n # mxdev\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-02-17T12:46:30-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/60c61ddef74c2254f9dafdc8f71e755a93093599

Merge pull request #115 from plone/issue-114-documentation-md

Convert README/CHANGES to markdown

Files changed:
A CHANGES.md
A Makefile
A README.md
A docs/changelog_template.jinja
A instance.yaml
A mx.ini
A news/114.documentation
A requirements.txt
M .gitignore
M MANIFEST.in
M pyproject.toml
M setup.cfg
M setup.py
D CHANGES.rst
D CONTRIBUTING.rst
D README.rst
D docs/README.rst
D docs/caching-control-panel.rst
D docs/caching-profiles.rst
D docs/caching-proxies.rst
D docs/composite-views.rst
D docs/conf.py
D docs/etags.rst
D docs/index.rst
D docs/ram-cache.rst
D docs/restapi.rst
D docs/rulesets-and-caching-operations.rst

b'diff --git a/.gitignore b/.gitignore\nindex aafcd8e..e1a30dc 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -8,11 +8,12 @@ develop-eggs/\n downloads/\n eggs/\n include/\n+instance/\n lib/\n parts/\n var/\n-docs/Makefile\n-docs/make.bat\n-docs/doctrees\n-docs/html\n-\n+# Tox\n+.tox\n+# mxdev\n+constraints-mxdev.txt\n+requirements-mxdev.txt\ndiff --git a/CHANGES.rst b/CHANGES.md\nsimilarity index 77%\nrename from CHANGES.rst\nrename to CHANGES.md\nindex 32ac7bf..454c90a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.md\n@@ -1,18 +1,17 @@\n-Changelog\n----------\n+# Changelog\n \n-.. You should *NOT* be adding new change log entries to this file.\n+<!--\n+   You should *NOT* be adding new change log entries to this file.\n    You should create a file in the news directory instead.\n    For helpful instructions, please see:\n    https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+-->\n \n-.. towncrier release notes start\n+<!-- towncrier release notes start -->\n \n-3.0.2 (2023-01-26)\n-------------------\n-\n-Bug fixes:\n+## 3.0.2 (2023-01-26)\n \n+### Bug fixes:\n \n - Correct Bootstrap classes for `<select />` in controlpanel.\n   [petschki] (#112)\n@@ -21,212 +20,150 @@ Bug fixes:\n   See `Zope issue 1089 <https://github.com/zopefoundation/Zope/issues/1089>`_.\n   [maurits] (#1089)\n \n+## 3.0.1 (2022-12-21)\n \n-3.0.1 (2022-12-21)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix tests to work with the Zope security fix.\n   [maurits] (#106)\n \n+## 3.0.0 (2022-11-14)\n \n-3.0.0 (2022-11-14)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add missing quotation mark in Etag 304 Response [sverbois] (#104)\n \n+## 3.0.0b2 (2022-07-20)\n \n-3.0.0b2 (2022-07-20)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Remove trailing comma to avoid different default messages for the same msgid\n   [erral] (#102)\n \n+## 3.0.0b1 (2022-06-23)\n \n-3.0.0b1 (2022-06-23)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add missing i18n tags\n   [erral] (#101)\n \n+## 3.0.0a14 (2022-05-15)\n \n-3.0.0a14 (2022-05-15)\n----------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Remove unmaintained Split-View profile.\n   [jensens] (#99)\n \n-\n-New features:\n-\n+### New features:\n \n - Move caching ruleset assignments from here to plone.restapi and add ZCML feature here.\n   [jensens] (#100)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Minor overhaul, use plone.base, remove some Plone 5.2 imports, ...\n   [jensens] (#98)\n - Minor code cleanup and review/overhaul docs.\n   [jensens] (#99)\n \n+## 3.0.0a13 (2022-04-05)\n \n-3.0.0a13 (2022-04-05)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Apply black to the codebase, format it to be Python 3 only (#94)\n \n+## 3.0.0a12 (2022-04-04)\n \n-3.0.0a12 (2022-04-04)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Test-only fix: caching checks for ``timestamp.txt`` in ``portal_resources`` which is no longer there.\n   Update ETAG Headers accordingly.\n   [pbauer] (#92)\n \n+## 3.0.0a11 (2022-02-24)\n \n-3.0.0a11 (2022-02-24)\n----------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Updated control panel icon. Use iconresolver to get the proper svg icon.\n   [yurj] (#91)\n \n+## 3.0.0a10 (2021-12-01)\n \n-3.0.0a10 (2021-12-01)\n----------------------\n-\n-New features:\n-\n+### New features:\n \n - When purging images also purge the field WITHOUT a size parameter (e.g. ``[...]/@@images/image``).\n   [wolbernd] (#89)\n \n+## 3.0.0a9 (2021-11-23)\n \n-3.0.0a9 (2021-11-23)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Remove translations endpoint test because it does not have the correct fixture\n   [sneridagh] (#87)\n \n+## 3.0.0a8 (2021-10-22)\n \n-3.0.0a8 (2021-10-22)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - fix deprecated imports\n   [petschki] (#86)\n \n+## 3.0.0a7 (2021-10-13)\n \n-3.0.0a7 (2021-10-13)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix label in controlpanel.pt.  [brian.duncan] (#84)\n \n+## 3.0.0a6 (2021-09-15)\n \n-3.0.0a6 (2021-09-15)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add upgrade step to define the new base terse cache setting.\n   [maurits] (#82)\n \n+## 3.0.0a5 (2021-09-01)\n \n-3.0.0a5 (2021-09-01)\n---------------------\n-\n-New features:\n-\n+### New features:\n \n - Add etag for layout property.\n   This is not yet added to a caching profile, but this can be done later.\n   Fixes `issue 80 <https://github.com/plone/plone.app.caching/issues/80>`_.\n   [maurits] (#80)\n \n+## 3.0.0a4 (2021-05-14)\n \n-3.0.0a4 (2021-05-14)\n---------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix ram-caching of binary files.\n   [agitator] (#79)\n \n+## 3.0.0a3 (2021-02-25)\n \n-3.0.0a3 (2021-02-25)\n---------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Update for Plone 6 with Bootstrap markup\n   [ale-rt, jensens] (#63)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Links with pat-modal:  Remove unused redirectOnResponse from data-pat-modal actionOptions.  (Products.CMFPlone#3197)\n   [fulv] (#3197)\n \n+## 3.0.0a2 (2021-02-02)\n \n-3.0.0a2 (2021-02-02)\n---------------------\n-\n-New features:\n-\n+### New features:\n \n - Restored ``resourceRegistries`` ETag, but now for Plone 5 resource registries.\n   Fixes warning "Could not find value adapter for ETag component resourceRegistries".\n   [maurits] (#61)\n \n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Add more purge paths for images and downloads [jensens] (#71)\n \n+## 3.0.0a1 (2020-12-03)\n \n-3.0.0a1 (2020-12-03)\n---------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Remove traces of Archetypes\n   [pbauer] (#68)\n@@ -234,9 +171,7 @@ Breaking changes:\n   Black code style and isort.\n   [jensens] (#69)\n \n-\n-New features:\n-\n+### New features:\n \n - Introduce *terseCaching* operation and `plone.content.dynamic` ruleset.\n   *terseCaching* is a rule with by default 10s in browser cache and 60s in edge cache.\n@@ -249,104 +184,75 @@ New features:\n   Latter may conflict with edge side cache not supporting the Vary header.\n   [jensens] (66-2)\n \n+## 2.0.8 (2020-10-30)\n \n-2.0.8 (2020-10-30)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Do not assume request or request.URL is a string. It might be None. [jensens, iham] (#59)\n - Remove hopelessly outdated proxy config examples.\n   Look at plone.recipe.varnish for excellent examples!\n   [jensens] (#64)\n \n+## 2.0.7 (2020-09-28)\n \n-2.0.7 (2020-09-28)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fixed invalid escape sequences.\n   [maurits] (#3130)\n \n+## 2.0.6 (2020-06-24)\n \n-2.0.6 (2020-06-24)\n-------------------\n-\n-New features:\n-\n+### New features:\n \n - Remove Range from request if the If-Range condition is not fulfilled\n   [mamico] (#58)\n \n+## 2.0.5 (2020-04-20)\n \n-2.0.5 (2020-04-20)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Minor packaging updates. (#1)\n \n+## 2.0.4 (2020-02-20)\n \n-2.0.4 (2020-02-20)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Purging image scales of behavior fields, e.g. lead image\n   [ksuess] (#55)\n \n+## 2.0.3 (2019-09-13)\n \n-2.0.3 (2019-09-13)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Fix python3 related encoding error on manual purge page.\n   [agitator] (#51)\n \n+## 2.0.2 (2019-04-10)\n \n-2.0.2 (2019-04-10)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - fix typo [vincentfretin] (#47)\n - Fix controlpanel for Python 3\n   [petschki] (#48)\n \n+## 2.0.1 (2019-03-03)\n \n-2.0.1 (2019-03-03)\n-------------------\n-\n-Bug fixes:\n-\n+### Bug fixes:\n \n - Only fire 1 Purge() when deleting content, instead of 3 [skurfer]\n   Detect and ignore content creation more reliably [skurfer]\n   Also purge the parent object when something changes (since the parent probably displays a list that includes the item being changed)\n   [skurfer] (#37)\n \n+## 2.0.0 (2019-02-08)\n \n-2.0.0 (2019-02-08)\n-------------------\n-\n-Breaking changes:\n-\n+### Breaking changes:\n \n - Removed legacy resource registries [ksuess] (#45)\n \n+## 1.2.23 (2018-12-28)\n \n-1.2.23 (2018-12-28)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Warn after save if caching was disabled while purging is still enabled.\n   [jensens]\n@@ -357,20 +263,16 @@ Clean-up\n   Handling of legacy resource registries Products.ResourceRegistries removed\n   [ksuess]\n \n+## 1.2.22 (2018-09-23)\n \n-1.2.22 (2018-09-23)\n--------------------\n-\n-New features:\n+### New features:\n \n - Python 3 support\n   [pbauer, MatthewWilkes, ale-rt]\n \n+## 1.2.21 (2018-04-03)\n \n-1.2.21 (2018-04-03)\n--------------------\n-\n-New features:\n+### New features:\n \n - Use plone as i18n domain in ZCML files too\n   [erral]\n@@ -378,63 +280,51 @@ New features:\n - Use plone as i18n domain\n   [erral]\n \n-Bug fixes:\n+### Bug fixes:\n \n - Fix backslash escapes in i18nstring (poedit complains).\n   [jensens]\n \n+## 1.2.20 (2018-02-05)\n \n-1.2.20 (2018-02-05)\n--------------------\n-\n-New features:\n+### New features:\n \n - Prepare for Python 2 / 3 compatibility\n   [b4oshany, davilima6]\n \n+## 1.2.19 (2017-11-24)\n \n-1.2.19 (2017-11-24)\n--------------------\n-\n-New features:\n+### New features:\n \n - Purging all image scale paths and file paths in custom dexterity content types. [karalics]\n \n+## 1.2.18 (2017-04-08)\n \n-1.2.18 (2017-04-08)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fixed blank edit forms of the per ruleset parameters.\n   `Issue 1993 <https://github.com/plone/Products.CMFPlone/issues/1993>`_.\n   [maurits]\n \n+## 1.2.17 (2017-04-02)\n \n-1.2.17 (2017-04-02)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fixed title and description of max age in strong caching rule for resources.\n   They wrongly were the same as for shared max age.\n   Fixes `issue 1989 <https://github.com/plone/Products.CMFPlone/issues/1989>`_.\n   [maurits]\n \n+## 1.2.16 (2017-03-23)\n \n-1.2.16 (2017-03-23)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Fix: Do not break Plone if there is no Archetypes available.\n   [jensens]\n \n+## 1.2.15 (2017-01-12)\n \n-1.2.15 (2017-01-12)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Remove dependency on unittest2; fix tests assertions.\n   [hvelarde]\n@@ -442,36 +332,28 @@ Bug fixes:\n - Fixed tests when using ZODB 4.\n   [davisagli]\n \n+## 1.2.14 (2016-11-18)\n \n-1.2.14 (2016-11-18)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Update code to follow Plone styleguide.\n   [gforcada]\n \n+## 1.2.13 (2016-10-05)\n \n-1.2.13 (2016-10-05)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Code-Style: isort, utf8-headers, zca-decorators, manual cleanup.\n   [jensens]\n \n+## 1.2.12 (2016-09-16)\n \n-1.2.12 (2016-09-16)\n--------------------\n-\n-Bug fixes:\n+### Bug fixes:\n \n - Enable unload protection by using pattern class ``pat-formunloadalert`` instead ``enableUnloadProtection``.\n   [thet]\n \n-\n-1.2.11 (2016-08-17)\n--------------------\n+## 1.2.11 (2016-08-17)\n \n Fixes:\n \n@@ -481,26 +363,20 @@ Fixes:\n - Use zope.interface decorator.\n   [gforcada]\n \n-\n-1.2.10 (2016-03-29)\n--------------------\n+## 1.2.10 (2016-03-29)\n \n New:\n \n - Show status after synchronous purge if it is an error status.\n   [maurits]\n \n-\n-1.2.9 (2016-02-19)\n-------------------\n+## 1.2.9 (2016-02-19)\n \n Fixes:\n \n - Fixed deprecated imports in tests.  [thet]\n \n-\n-1.2.8 (2015-11-28)\n-------------------\n+## 1.2.8 (2015-11-28)\n \n Fixes:\n \n@@ -508,17 +384,13 @@ Fixes:\n   Fixes https://github.com/plone/Products.CMFPlone/issues/1255\n   [davilima6]\n \n-\n-1.2.7 (2015-09-09)\n-------------------\n+## 1.2.7 (2015-09-09)\n \n - fix cache settings modal settings so they do not show content\n   inline on save.\n   [vangheem]\n \n-\n-1.2.6 (2015-07-18)\n-------------------\n+## 1.2.6 (2015-07-18)\n \n - Remove gzip option, silly to be done at this layer.\n   [vangheem]\n@@ -526,18 +398,14 @@ Fixes:\n - Change the category of the configlet to \'plone-advanced\'\n   [sneridagh]\n \n-\n-1.2.5 (2015-06-09)\n-------------------\n+## 1.2.5 (2015-06-09)\n \n - correctly create purge paths for root of site, prevent double slashes\n   and the empty root of site(no trailing slash) not getting a purge\n   path generated\n   [vangheem]\n \n-\n-1.2.4 (2015-06-05)\n-------------------\n+## 1.2.4 (2015-06-05)\n \n - update first time here warning\n   [vangheem]\n@@ -545,9 +413,7 @@ Fixes:\n - make control panel work for both plone 4 and plone 5 with tabs\n   [vangheem]\n \n-\n-1.2.3 (2015-05-04)\n-------------------\n+## 1.2.3 (2015-05-04)\n \n - Fixed getObjectDefaultView method to strip off leading / and/or @@.\n   [alecghica]\n@@ -556,9 +422,7 @@ Fixes:\n   This bug resulted in rarely doing all the purging required.\n   [puittenbroek]\n \n-\n-1.2.2 (2014-10-23)\n-------------------\n+## 1.2.2 (2014-10-23)\n \n - Remove DL\'s from portal message templates.\n   https://github.com/plone/Products.CMFPlone/issues/153\n@@ -567,23 +431,17 @@ Fixes:\n - Fix ruleset registry test isolation so that is no longer order dependent.\n   [jone]\n \n-\n-1.2.1 (2014-04-01)\n-------------------\n+## 1.2.1 (2014-04-01)\n \n - Fix tests that fail on the day before the switch to daylight saving time.\n   [pbauer]\n \n-\n-1.2.0 (2014-02-26)\n-------------------\n+## 1.2.0 (2014-02-26)\n \n - Use the PLONE_APP_CONTENTTYPES_FIXTURE test layer for Plone 5 compatibility.\n   [timo]\n \n-\n-1.1.7 (unreleased)\n-------------------\n+## 1.1.7 (unreleased)\n \n - Make it possible to set a maxage of zero in strong caching. This is\n   an edge case since this would ordinarily be handled by moderate caching.\n@@ -596,40 +454,30 @@ Fixes:\n   was effectively ignored. Added operation test for strong caching.\n   [smcmahon]\n \n-\n-1.1.6 (2013-08-14)\n-------------------\n+## 1.1.6 (2013-08-14)\n \n - Fix double purge of paths for items whose default view is the same as /view\n   [eleddy]\n \n-\n-1.1.5 (2013-08-13)\n-------------------\n+## 1.1.5 (2013-08-13)\n \n - Register the plone.atobjectfields adapter not only when Products.Archetypes\n   but also plone.app.blob is installed.\n   [thet]\n \n-\n-1.1.4 (2013-06-13)\n-------------------\n+## 1.1.4 (2013-06-13)\n \n - Fixed purge paths for virtual hosting scenarios using virtual path components.\n   [dokai]\n \n-\n-1.1.3 (2013-03-05)\n-------------------\n+## 1.1.3 (2013-03-05)\n \n - Provide message for newbies to suggest importing\n   pre-defined caching rule set.\n   [vangheem]\n \n \n-\n-1.1.2 (2012-12-27)\n-------------------\n+## 1.1.2 (2012-12-27)\n \n - Add other feed types to plone.content.feed purge policy\n   [vangheem]\n@@ -642,15 +490,11 @@ Fixes:\n   iterates on the \'result\' iterable, it must return a new one.\n   [ebrehault]\n \n-\n-1.1.1 (2012-08-30)\n-------------------\n+## 1.1.1 (2012-08-30)\n \n - Nothing changed yet.\n \n-\n-1.1 (2012-05-25)\n-~~~~~~~~~~~~~~~~\n+## 1.1 (2012-05-25)\n \n - Use zope.browserresource instead of zope.app.publisher.\n   [hannosch]\n@@ -658,31 +502,25 @@ Fixes:\n - Deprecated methods aliases were replaced on tests.\n   [hvelarde]\n \n-\n-1.0.4 (unreleased)\n-------------------\n+## 1.0.4 (unreleased)\n \n - Fix possible test failures by logging in with the user name.\n   Note that user id and user name (login name) can differ.\n   [maurits]\n \n-\n-1.0.3 (2012-04-15)\n-------------------\n+## 1.0.3 (2012-04-15)\n \n - Fix packaging issue.\n   [esteele]\n \n+## 1.0.2 (2012-04-15)\n \n-1.0.2 (2012-04-15)\n-------------------\n - Handle caching of resource registries in RAM cache by not storing empty\n   bodies in the RAMCache\n   [eleddy with major tseaver support]\n \n+## 1.0.1 (2012-01-26)\n \n-1.0.1 (2012-01-26)\n-------------------\n - Properly handle a changed configuration from with etags to no etags by\n   forcing a page refresh\n   [eleddy]\n@@ -708,8 +546,7 @@ Fixes:\n - Changed wrong i18n domain in the messagefactory. plone.caching -> plone.app.caching.\n   [giacomos]\n \n-1.0 - 2011-05-12\n-~~~~~~~~~~~~~~~~\n+## 1.0 (2011-05-12)\n \n - Use the `userLanguage` ETag component in place of the language ETag component\n   in the default configs to allow ETags to be used for anonymous users with\n@@ -733,9 +570,7 @@ Fixes:\n   would otherwise take precedence.\n   [stefan]\n \n-\n-1.0b2 - 2011-02-10\n-------------------\n+## 1.0b2 (2011-02-10)\n \n - Added `News Item` to the list of `purgedContentTypes`, so the image field\n   and its scales gets purged.\n@@ -767,9 +602,7 @@ Fixes:\n - Fixed various i18n issues.\n   [vincentfretin]\n \n-\n-1.0b1 - 2010-08-04\n-------------------\n+## 1.0b1 (2010-08-04)\n \n - Add an option for "anonymous only" caching to the default operations.\n   This is a simple way to switch off caching for logged-in users. See\n@@ -786,9 +619,7 @@ Fixes:\n - template fixes for cmf.pt compatibility\n   [pilz]\n \n-\n-1.0a1 - 2010-04-24\n-------------------\n+## 1.0a1 (2010-04-24)\n \n - Initial release.\n   [optilude, newbery, smcmahon]\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\ndeleted file mode 100644\nindex fc637ac..0000000\n--- a/CONTRIBUTING.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-Please see http://docs.plone.org/develop/coredev/docs/guidelines.html\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 1eaa548..df0a9da 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,5 +1,5 @@\n include *.txt\n-include *.rst\n+include *.md\n include pyproject.toml\n \n recursive-include docs *\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..e6aed91\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,77 @@\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+PLONE6=6.0-latest\n+\n+BACKEND_FOLDER=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\n+DOCS_DIR=${BACKEND_FOLDER}/docs\n+\n+# Python checks\n+PYTHON?=python3\n+\n+# installed?\n+ifeq (, $(shell which $(PYTHON) ))\n+  $(error "PYTHON=$(PYTHON) not found in $(PATH)")\n+endif\n+\n+# version ok?\n+PYTHON_VERSION_MIN=3.11\n+PYTHON_VERSION_OK=$(shell $(PYTHON) -c \'import sys; print((int(sys.version_info[0]), int(sys.version_info[1])) > tuple(map(int, "$(PYTHON_VERSION_MIN)".split("."))))\')\n+ifeq ($(PYTHON_VERSION_OK),0)\n+  $(error "Need python $(PYTHON_VERSION) >= $(PYTHON_VERSION_MIN)")\n+endif\n+\n+all: build\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+bin/pip:\n+\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n+\t$(PYTHON) -m venv .\n+\tbin/pip install -U "pip" "wheel" "cookiecutter" "mxdev" "tox"\n+\n+.PHONY: config\n+config: bin/pip  ## Create instance configuration\n+\t@echo "$(GREEN)==> Create instance configuration$(RESET)"\n+\tbin/cookiecutter -f --no-input --config-file instance.yaml gh:plone/cookiecutter-zope-instance\n+\n+.PHONY: build-dev\n+build-dev: config ## pip install Plone packages\n+\t@echo "$(GREEN)==> Setup Build$(RESET)"\n+\tbin/mxdev -c mx.ini\n+\tbin/pip install -r requirements-mxdev.txt\n+\n+.PHONY: build\n+build: build-dev ## pip install Plone packages\n+\n+.PHONY: clean\n+clean: ## Remove old virtualenv and creates a new one\n+\t@echo "$(RED)==> Cleaning environment and build$(RESET)"\n+\trm -rf bin lib lib64 include share etc var instance pyvenv.cfg\n+\n+.PHONY: start\n+start: ## Start a Plone instance on localhost:8080\n+\tPYTHONWARNINGS=ignore ./bin/runwsgi instance/etc/zope.ini\n+\n+# Lint\n+.PHONY: lint\n+lint: bin/pip  ## Lint codebase\n+\tbin/tox -e lint\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 0000000..3d6267e\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,74 @@\n+<p align="center">\n+    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-logo.png">\n+</p>\n+\n+<h1 align="center">\n+  plone.app.caching\n+</h1>\n+\n+<div align="center">\n+\n+[![PyPI - Wheel](https://img.shields.io/pypi/wheel/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - License](https://img.shields.io/pypi/l/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+[![PyPI - Status](https://img.shields.io/pypi/status/plone.app.caching)](https://pypi.org/project/plone.app.caching/)\n+\n+[![GitHub contributors](https://img.shields.io/github/contributors/plone/plone.app.caching)](https://github.com/plone/plone.app.caching)\n+![GitHub Repo stars](https://img.shields.io/github/stars/plone/plone.app.caching?style=flat-square)\n+\n+</div>\n+\n+## Introduction\n+\n+This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n+It builds on [z3c.caching](https://github.com/zopefoundation/z3c.caching), [plone.caching](https://github.com/plone/plone.caching) and [plone.cachepurging](https://github.com/plone/plone.cachepurging).\n+\n+\n+### Compatibility\n+\n+| Version | Plone |\n+|------|-----|\n+| 3.x | 6.0 or above |\n+| 2.x | 5.2 |\n+| 1.x | 5.1, 5.0, 4.3, 4.2, 4.1 |\n+\n+\n+## Installation\n+\n+`plone.app.caching` is shipped as a dependency of the *Plone* package, and it should be available on all Plone installations, but\n+Caching is **not enabled by default**, although it is highly recommended to configure caching for every new Plone site.\n+\n+After creating a new Plone site, go to `Site Setup`, then `Addons` and install `HTTP caching support`.\n+\n+Under the Advanced header, look for the Caching control panel -- currently only supported on the Classic UI.\n+\n+### Troubleshooting\n+\n+When the Caching control panel is not there, there can be various reasons for this:\n+\n+- If your installation does not load the `Plone` package, but only `Products.CMFPlone`, then `plone.app.caching` is not included.\n+- If the package *is* included, but you add a Plone Site using the advanced form and disable caching, then the control panel is not there.\n+\n+If you want to install it in an existing Plone Site:\n+\n+1. Make sure the package is available in the Plone instance, by adding `plone.app.caching` or `Plone` to your installation.\n+2. From the Plone Site Setup go to the ZMI (Zope Management Interface).\n+3. Go to ``portal_setup``, and then to the Import tab.\n+4. Select the HTTP caching support profile, perhaps easiest by id: `profile-plone.app.caching:default`.\n+5. Click \'Import all steps\'.\n+\n+\n+## Source Code\n+\n+Contributors, please read the document [Process for Plone core\'s development](https://docs.plone.org/develop/coredev/docs/index.html)\n+\n+Sources are at the [Plone code repository hosted at Github <https://github.com/plone/plone.app.caching>`_.\n+\n+## This project is supported by\n+\n+<a href="https://plone.org/foundation/">\n+    <img alt="Plone Logo" width="200px" src="https://raw.githubusercontent.com/plone/.github/main/plone-foundation.png">\n+</a>\n+\n+## License\n+\n+The project is licensed under GPLv2.\ndiff --git a/README.rst b/README.rst\ndeleted file mode 100644\nindex 273cebc..0000000\n--- a/README.rst\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-=================\n-plone.app.caching\n-=================\n-\n-Introduction\n-============\n-\n-This package provides a Plone UI and default rules for managing HTTP response caching in Plone.\n-It builds on `z3c.caching <https://github.com/zopefoundation/z3c.caching>`_, `plone.caching <https://github.com/plone/plone.caching>`_ and `plone.cachepurging <https://github.com/plone/plone.cachepurging>`_.\n-\n-\n-Version information:\n-\n-- Version 3.x requires Plone 6.0 or later.\n-- Plone 5.2 release uses the version 2.x series.\n-- Earlier Plone versions: use a release from 1.x series.\n-\n-\n-Installation\n-============\n-\n-*plone.app.caching* is shipped as a dependency of the *Plone* package.\n-Caching is **not enabled by default**.\n-It is highly recommended to configure caching.\n-\n-When you create a default Plone site, it is available in the Site Setup.\n-Under the Advanced header, look for the Caching control panel.\n-There you can enable caching.\n-\n-When the Caching control panel is not there, there can be various reasons for this:\n-\n-- If your buildout does not load the ``Plone`` egg, but only ``Products.CMFPlone``, then ``plone.app.caching`` is not included.\n-- If the package *is* included, but you add a Plone Site using the advanced form and disable caching, then the control panel is not there.\n-\n-If you want to install it in an existing Plone Site:\n-\n-1. Make sure the package is available in the Plone instance, by adding ``plone.app.caching`` or ``Plone`` to the eggs and running buildout.\n-2. From the Plone Site Setup go to the ZMI (Zope Management Interface).\n-3. Go to ``portal_setup``, and then to the Import tab.\n-4. Select the HTTP caching support profile, perhaps easiest by id: ``profile-plone.app.caching:default``.\n-5. Click \'Import all steps\'.\n-\n-\n-Source Code\n-===========\n-\n-Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n-\n-Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.caching>`_.\ndiff --git a/docs/README.rst b/docs/README.rst\ndeleted file mode 100644\nindex cec3091..0000000\n--- a/docs/README.rst\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-=================\n-plone.app.caching\n-=================\n-\n-\n-Introduction\n-============\n-\n-``plone.app.caching`` provides a Plone UI and default rules for managing HTTP response caching in Plone. It builds on ``z3c.caching``, ``plone.caching`` and ``plone.cachepurging``.\n-\n-``plone.app.caching`` requires Plone 4 or later.\n-\n-\n-Installation\n-============\n-\n-From Plone 4.1 onwards, ``plone.app.caching`` is shipped as a dependency of Plone. It is available from the Control Panel, but not enabled by default. You can enable it from the "add-ons" menu option.\n-\n-Installation on Plone 4.0\n-=========================\n-\n-To install ``plone.app.caching``, add it to the ``eggs`` list in your ``buildout.cfg``, or as a dependency of one of your own packages in ``setup.py``. ZCML configuration will be automatically loaded via a ``z3c.autoinclude`` entry point. You will also need to install the package in Plone\'s Add-ons control panel as normal.\n-\n-This package depends on a number of other packages, including ``z3c.form`` and ``plone.app.registry``, that do not ship with Plone.\n-You will probably want to lock down the versions for those packages using a known good set. Add this to the the ``extends`` line in your ``buildout.cfg``, *after* the line that includes the Plone KGS::\n-\n-    extends =\n-        ...\n-        http://good-py.appspot.com/release/plone.app.caching/1.0a1\n-\n-Update the version number at the end of the URL as appropriate. You can find an overview of the versions\n-`here <http://good-py.appspot.com/release/plone.app.caching>`_\ndiff --git a/docs/caching-control-panel.rst b/docs/caching-control-panel.rst\ndeleted file mode 100644\nindex 5eb1234..0000000\n--- a/docs/caching-control-panel.rst\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-The caching control panel\n--------------------------\n-\n-After installation, you will find a Caching control panel in Plone\'s site setup.\n-\n-This consists of four main tabs:\n-\n-Change settings\n-    where you can control caching behaviour\n-\n-Import settings\n-    where you can import pre-defined profiles of cache settings\n-\n-Purge caching proxy\n-    where you can manually purge content from a caching proxy.\n-    This tab only appears if you have purging enabled under *Change settings*.\n-\n-RAM cache\n-    where you can view statistics about and purge the RAM cache.\n-\n-Under the settings tab, you will find four fieldsets:\n-\n-General settings\n-    for global options such as turning caching on or off.\n-\n-Caching proxies\n-    where you can control Plone\'s use of a caching proxy such or Varnish or a CDN.\n-\n-Caching operation mappings\n-    where caching rulesets (hints about views and resources used for caching purposes) can be associated with caching operations.\n-    Those either intercept a request to return a cached response, or modifies a response to add cache control headers.\n-    This is also where rulesets for legacy page templates (created through the web or the  portal_skins tool) are configured.\n-\n-Detailed settings\n-    where you can configure parameters for individual caching operations.\ndiff --git a/docs/caching-profiles.rst b/docs/caching-profiles.rst\ndeleted file mode 100644\nindex 6ff8803..0000000\n--- a/docs/caching-profiles.rst\n+++ /dev/null\n@@ -1,96 +0,0 @@\n-Caching profiles\n-----------------\n-\n-All persistent configuration for the caching machinery is stored in the configuration registry, as managed by ``plone.app.registry``.\n-This can be modified using the ``registry.xml`` GenericSetup import step.\n-The *Import settings* tab of the control panel allows you to import these caching profiles.\n-\n-\n-Default caching profiles\n-~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-``plone.app.caching`` includes three default caching profiles.\n-Two of these  profiles encapsulate the cache settings that are known to work well with a typical default Plone installation.\n-\n-The three default caching profiles:\n-\n-* **Without caching proxy**\n-      Settings useful for setups without a caching proxy.\n-\n-* **With caching proxy**\n-      Settings useful for setups with a caching proxy such as Squid or\n-      Varnish.  The only difference from the "without caching proxy"\n-      profile are some settings to enable proxy caching of files/images\n-      in content space and content feeds.\n-\n-Custom caching profiles\n-~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Caching policies are often a compromise between speed and freshness.\n-More aggressive caching often comes at the cost of increased risk of stale responses.\n-The default profiles provided tend to err on the side of freshness over speed so there is some room for tweaking if greater speed is desired.\n-\n-Customization may also be needed if third-party products are installed which require special treatment.\n-Examine the HTTP response headers to determine whether the third-party product requires special treatment.\n-Most simple cases probably can be solved by adding the content type or template to the appropriate mapping.\n-More complicated cases, may require custom caching operations.\n-\n-A GenericSetup profile used for caching should be registered for the ``ICacheProfiles`` marker interface to distinguish it from more general profiles used to install a product.\n-This also hides the profile from Plone\'s Add-ons control panel.\n-\n-Here is an example from this package::\n-\n-    <genericsetup:registerProfile\n-        name="with-caching-proxy"\n-        title="With caching proxy"\n-        description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n-        directory="profiles/with-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n-\n-The directory ``profiles/with-caching-proxy`` contains a single import step, ``registry.xml``,\n-containing settings to configure the ruleset to operation mapping,\n-and setting options for various operations.\n-At the time of writing, this includes::\n-\n-    <record name="plone.caching.interfaces.ICacheSettings.operationMapping">\n-        <value purge="False">\n-            <element key="plone.resource">plone.app.caching.strongCaching</element>\n-            <element key="plone.stableResource">plone.app.caching.strongCaching</element>\n-            <element key="plone.content.itemView">plone.app.caching.weakCaching</element>\n-            <element key="plone.content.feed">plone.app.caching.moderateCaching</element>\n-            <element key="plone.content.folderView">plone.app.caching.weakCaching</element>\n-            <element key="plone.content.file">plone.app.caching.moderateCaching</element>\n-            <element key="plone.content.dynamic">plone.app.caching.terseCaching</element>\n-        </value>\n-    </record>\n-\n-Default options for the various standard operations are found in the ``registry.xml`` file that is part of the standard installation profile for this product, in the directory ``profiles/default``.\n-The custom profile overrides a number of operation settings for specific rulesets (see below).\n-For example::\n-\n-    <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-        <field ref="plone.app.caching.weakCaching.ramCache" />\n-        <value>True</value>\n-    </record>\n-\n-This enables RAM caching for the "weak caching" operation for resources using the ruleset ``plone.content.itemView``.\n-The default is defined in the main ``registry.xml`` as::\n-\n-    <record name="plone.app.caching.weakCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-\n-Notice how we use a *field reference* to avoid having to re-define the field.\n-\n-It may be useful looking at these bundled ``registry.xml`` for inspiration if you are building your own caching profile.\n-Alternatively, you can export the registry from the ``portal_setup`` tool and pull out the records under the prefixes ``plone.caching`` and ``plone.app.caching``.\n-\n-Typically, ``registry.xml`` is all that is required, but you are free to add additional import steps if required.\n-You can also add a ``metadata.xml`` and use the GenericSetup dependency mechanism to install other profiles on the fly.\ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\ndeleted file mode 100644\nindex 46b974e..0000000\n--- a/docs/caching-proxies.rst\n+++ /dev/null\n@@ -1,92 +0,0 @@\n-Caching proxies\n----------------\n-\n-It is common to place a so-called caching reverse proxy in front of Zope when hosting large Plone sites.\n-If hosted by yourself, a popular option is `Varnish`_.\n-On the other hand there are commercial hosted CDN services like Cloudflare, CloudFront, Fastly and more.\n-\n-It is important to realise that whilst ``plone.app.caching`` provides some functionality for controlling how Plone interacts with a caching proxy.\n-The proxy itself must be configured separately.\n-\n-Some operations in ``plone.app.caching`` can set response headers that instruct the caching proxy how best to cache content.\n-For example, it is normally a good idea to cache static resources (such as images and stylesheets) and "downloadables"  in the proxy.\n-This are i.e. Plone content of the types ``File`` or ``Image``.\n-This content will then be served to most users straight from the proxy, which is much faster than Zope.\n-\n-The downside of this approach is that an old version of a content item may returned to a user, because the cache has not been updated since the item was modified.\n-There are three general strategies for dealing with this:\n-\n-* Since resources are cached in the proxy based on their URL, you can "invalidate" the cached copy by changing an item\'s URL when it is updated.\n-  This is the approach taken by Plone\'s resource management:\n-  in production mode, the links that are inserted into Plone\'s content pages for resource managed by Plone  contain a hash-based token, which changes when the main bundle file changes.\n-  This approach has the benefit of also being able to "invalidate" content stored in a user\'s browser cache.\n-\n-* All caching proxies support setting timeouts.\n-  This means that content may be stale, but typically only up to a few minutes.\n-  This is sometimes an acceptable policy for high-volume sites where most users do not log in.\n-\n-* Most caching proxies support receiving PURGE requests for paths that should be purged.\n-  Given the proxy has cached a resource at ``/logo.jpg``, and that object is modified.\n-  Then a PURGE request could be sent to the proxy (originating from Zope, not the client) with the same path to force the proxy to fetch a new version the next time the item is requested.\n-\n-The final option, of course is to avoid caching content in the proxy altogether.\n-The default policies will not allow standard listing pages to be cached in the proxy, because it is too difficult to invalidate cached instances.\n-For example, if you change a content item\'s title, that may require invalidation of a number of pages where that title appears in the navigation tree, folder listings, ``Collections``, portlets, and so on.\n-Tracking all these dependencies and purging in an efficient manner is impossible unless the caching proxy configuration is highly customised for the site.\n-\n-Nevertheless a "terse" policy allows caching for just a few seconds of all pages to reduce the load on the backend on high traffic situations.\n-\n-\n-Purging a caching proxy\n-~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Synchronous and asynchronous purging is enabled via `plone.cachepurging`_.\n-In the control panel, you can configure the use of a proxy via various options, such as:\n-\n-* Whether or not to enable purging globally.\n-\n-* The address of the caching server to which PURGE requests should be sent.\n-\n-* Whether or not virtual host rewriting takes place before the caching proxy receives a URL or not.\n-  This has implications for how the PURGE path is constructed.\n-\n-* Any domain aliases for your site, to enable correct purging of content served via e.g. http://example.com and http://www.example.com.\n-\n-The default purging policy is geared mainly towards purging file and image resources, not content pages, although basic purging of content pages is included.\n-The actual paths to purge are constructed from a number of components providing the ``IPurgePaths`` interface.\n-See ``plone.cachepurging`` for details on how this works, especially if you need to write your own.\n-\n-The default purge paths include:\n-\n-* ${object_path}, -- the object\'s canonical path\n-\n-* ${object_path}/ -- in case the object is a folder\n-\n-* ${object_path}/view -- the ``view`` method alias\n-\n-* ${object_path}/${default-view} -- in case a default view template is used\n-\n-* The download URLs for any content object fields, given the type contains blobs.\n-This includes support for the standard ``File`` and  ``Image`` types.\n-\n-Files and images created (or customised) in the ZMI are purged automatically when modified.\n-Bundles managed through the resource registration do not need purging, since they have "stable" URLs.\n-To purge Plone content when modified (or removed), you must select the content types in the control panel.\n-By default, only the ``File`` and ``Image`` types are purged.\n-\n-You should not enable purging for types that are not likely to be cached in the proxy.\n-Although purging happens asynchronously at the end of the request, it may still place unnecessary load on your server.\n-\n-Finally, you can use the *Purge* tab in the control panel to manually purge one or more URLs.\n-This is a useful way to debug cache purging.\n-It offers as well as a quick solution for the awkward situation where your boss walks in and wonders why the "about us" page is still showing that old picture of him, before he had a new haircut.\n-\n-\n-Installing and configuring a caching proxy\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-There is a buildout recipes for building and configuring proxy configs: `plone.recipe.varnish`_.\n-\n-.. _Varnish: http://varnish-cache.org\n-.. _plone.recipe.varnish: http://pypi.python.org/pypi/plone.recipe.varnish\n-.. _plone.cachepurging: http://pypi.python.org/pypi/plone.cachepurging\ndiff --git a/docs/changelog_template.jinja b/docs/changelog_template.jinja\nnew file mode 100644\nindex 0000000..b35bff3\n--- /dev/null\n+++ b/docs/changelog_template.jinja\n@@ -0,0 +1,15 @@\n+{% if sections[""] %}\n+{% for category, val in definitions.items() if category in sections[""] %}\n+\n+### {{ definitions[category][\'name\'] }}\n+\n+{% for text, values in sections[""][category].items() %}\n+- {{ text }} {{ values|join(\', \') }}\n+{% endfor %}\n+\n+{% endfor %}\n+{% else %}\n+No significant changes.\n+\n+\n+{% endif %}\n\\ No newline at end of file\ndiff --git a/docs/composite-views.rst b/docs/composite-views.rst\ndeleted file mode 100644\nindex e72a537..0000000\n--- a/docs/composite-views.rst\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-Composite views\n----------------\n-\n-A ``composite view`` is just a general term for most page views you see when you visit a Plone site.\n-It includes all content item views, content folder views, and many template views.\n-For our purposes, the distinguishing characteristic of composite views is the difficulty inherent in keeping track of all changes that might affect the final composited view.\n-Because of the difficulty of dependency tracking, composite views are often notoriously difficult to purge reliably from caching proxies so the default caching profiles set headers which expire the cache immediately (i.e. *weak caching*).\n-\n-However, most of the inline resources linked to from the composite view (css, javascript, images, etc.) can be cached very well in proxy so the overall speed of most composite views will always be better with a caching proxy in front despite the page itself not being cached.\n-\n-For relatively stable composite views or for those views for which you can\n-tolerate some potential staleness, you might be tempted to try switching from\n-*weak caching* to *moderate caching* with the ``s-maxage`` expiration\n-value set to some tolerable value but first make sure you understand the\n-issues regarding "split view" caching (see below).\n-\n-A way to speedup a site with lots of composite view is to use "Terse" caching.\n-It caches a page for just a small time (be default 10s in browser and 60s in the caching proxy).\n-Thus the content is almost up to date, but on high load visitors are getting pages served from the cache.\ndiff --git a/docs/conf.py b/docs/conf.py\ndeleted file mode 100644\nindex 9a199de..0000000\n--- a/docs/conf.py\n+++ /dev/null\n@@ -1,253 +0,0 @@\n-#\n-# plone.app.caching documentation build configuration file, created by\n-# sphinx-quickstart on Tue May 20 16:53:52 2014.\n-#\n-# This file is execfile()d with the current directory set to its containing dir.\n-#\n-# Note that not all possible configuration values are present in this\n-# autogenerated file.\n-#\n-# All configuration values have a default; values that are commented out\n-# serve to show the default.\n-\n-# If extensions (or modules to document with autodoc) are in another directory,\n-# add these directories to sys.path here. If the directory is relative to the\n-# documentation root, use os.path.abspath to make it absolute, like shown here.\n-# sys.path.insert(0, os.path.abspath(\'.\'))\n-\n-# -- General configuration -----------------------------------------------------\n-\n-# If your documentation needs a minimal Sphinx version, state it here.\n-# needs_sphinx = \'1.0\'\n-\n-# Add any Sphinx extension module names here, as strings. They can be extensions\n-# coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = []\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = ["_templates"]\n-\n-# The suffix of source filenames.\n-source_suffix = ".rst"\n-\n-# The encoding of source files.\n-# source_encoding = \'utf-8-sig\'\n-\n-# The master toctree document.\n-master_doc = "index"\n-\n-# General information about the project.\n-project = "plone.app.caching"\n-copyright = "2014, Plone Foundation"\n-\n-# The version info for the project you\'re documenting, acts as replacement for\n-# |version| and |release|, also used in various other places throughout the\n-# built documents.\n-#\n-# The short X.Y version.\n-version = "1.2"\n-# The full version, including alpha/beta/rc tags.\n-release = "1.2.1"\n-\n-# The language for content autogenerated by Sphinx. Refer to documentation\n-# for a list of supported languages.\n-# language = None\n-\n-# There are two options for replacing |today|: either, you set today to some\n-# non-false value, then it is used:\n-# today = \'\'\n-# Else, today_fmt is used as the format for a strftime call.\n-# today_fmt = \'%B %d, %Y\'\n-\n-# List of patterns, relative to source directory, that match files and\n-# directories to ignore when looking for source files.\n-exclude_patterns = ["_build"]\n-\n-# The reST default role (used for this markup: `text`) to use for all documents.\n-# default_role = None\n-\n-# If true, \'()\' will be appended to :func: etc. cross-reference text.\n-# add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-# add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-# show_authors = False\n-\n-# The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = "sphinx"\n-\n-# A list of ignored prefixes for module index sorting.\n-# modindex_common_prefix = []\n-\n-\n-# -- Options for HTML output ---------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  See the documentation for\n-# a list of builtin themes.\n-html_theme = "default"\n-\n-# Theme options are theme-specific and customize the look and feel of a theme\n-# further.  For a list of options available for each theme, see the\n-# documentation.\n-# html_theme_options = {}\n-\n-# Add any paths that contain custom themes here, relative to this directory.\n-# html_theme_path = []\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# "<project> v<release> documentation".\n-# html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as html_title.\n-# html_short_title = None\n-\n-# The name of an image file (relative to this directory) to place at the top\n-# of the sidebar.\n-# html_logo = None\n-\n-# The name of an image file (within the static path) to use as favicon of the\n-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n-# pixels large.\n-# html_favicon = None\n-\n-# Add any paths that contain custom static files (such as style sheets) here,\n-# relative to this directory. They are copied after the builtin static files,\n-# so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = ["_static"]\n-\n-# If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n-# using the given strftime format.\n-# html_last_updated_fmt = \'%b %d, %Y\'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-# html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-# html_sidebars = {}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-# html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-# html_domain_indices = True\n-\n-# If false, no index is generated.\n-# html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-# html_split_index = False\n-\n-# If true, links to the reST sources are added to the pages.\n-# html_show_sourcelink = True\n-\n-# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-# html_show_sphinx = True\n-\n-# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-# html_show_copyright = True\n-\n-# If true, an OpenSearch description file will be output, and all pages will\n-# contain a <link> tag referring to it.  The value of this option must be the\n-# base URL from which the finished HTML is served.\n-# html_use_opensearch = \'\'\n-\n-# This is the file name suffix for HTML files (e.g. ".xhtml").\n-# html_file_suffix = None\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = "ploneappcachingdoc"\n-\n-\n-# -- Options for LaTeX output --------------------------------------------------\n-\n-latex_elements = {\n-    # The paper size (\'letterpaper\' or \'a4paper\').\n-    # \'papersize\': \'letterpaper\',\n-    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-    # \'pointsize\': \'10pt\',\n-    # Additional stuff for the LaTeX preamble.\n-    # \'preamble\': \'\',\n-}\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title, author, documentclass [howto/manual]).\n-latex_documents = [\n-    (\n-        "index",\n-        "ploneappcaching.tex",\n-        "plone.app.caching Documentation",\n-        "Plone Foundation",\n-        "manual",\n-    ),\n-]\n-\n-# The name of an image file (relative to this directory) to place at the top of\n-# the title page.\n-# latex_logo = None\n-\n-# For "manual" documents, if this is true, then toplevel headings are parts,\n-# not chapters.\n-# latex_use_parts = False\n-\n-# If true, show page references after internal links.\n-# latex_show_pagerefs = False\n-\n-# If true, show URL addresses after external links.\n-# latex_show_urls = False\n-\n-# Documents to append as an appendix to all manuals.\n-# latex_appendices = []\n-\n-# If false, no module index is generated.\n-# latex_domain_indices = True\n-\n-\n-# -- Options for manual page output --------------------------------------------\n-\n-# One entry per manual page. List of tuples\n-# (source start file, name, description, authors, manual section).\n-man_pages = [\n-    (\n-        "index",\n-        "ploneappcaching",\n-        "plone.app.caching Documentation",\n-        ["Plone Foundation"],\n-        1,\n-    )\n-]\n-\n-# If true, show URL addresses after external links.\n-# man_show_urls = False\n-\n-\n-# -- Options for Texinfo output ------------------------------------------------\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-texinfo_documents = [\n-    (\n-        "index",\n-        "ploneappcaching",\n-        "plone.app.caching Documentation",\n-        "Plone Foundation",\n-        "ploneappcaching",\n-        "One line description of project.",\n-        "Miscellaneous",\n-    ),\n-]\n-\n-# Documents to append as an appendix to all manuals.\n-# texinfo_appendices = []\n-\n-# If false, no module index is generated.\n-# texinfo_domain_indices = True\n-\n-# How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-# texinfo_show_urls = \'footnote\'\ndiff --git a/docs/etags.rst b/docs/etags.rst\ndeleted file mode 100644\nindex dac1b29..0000000\n--- a/docs/etags.rst\n+++ /dev/null\n@@ -1,72 +0,0 @@\n-ETags\n------\n-\n-ETags are used in to check whether pages need to be re-calculated or can be served from cache.\n-An ETag is simply a string. Under ``plone.app.caching``, it is a string of tokens separated by pipe characters.\n-The tokens hold values such as a user id, the current skin name, or a counter indicating how many objects have been added to the site.\n-The idea is that the browser sends a request with the ETag included in an ``If-None-Match`` header.\n-Plone can then quickly calculate the current ETag for the requested resource.\n-If the ETag is the same, Plone can reply with ``304 NOT MODIFIED`` response, telling the browser to use its cached copy.\n-Otherwise, Plone renders the page and returns it as normal.\n-\n-Many caching operations use ETags. The tokens to include are typically listed in an ``etags`` tuple in the operation\'s options.\n-\n-The ETag names tokens supported by default are:\n-\n-userid\n-    The current user\'s id\n-\n-roles\n-    A list of the current user\'s roles in the given context\n-\n-language\n-    The language(s) accepted by the browser, in the ``ACCEPT_LANGUAGE`` header\n-\n-userLanguage\n-    The current user\'s preferred language\n-\n-lastModified\n-    A timestamp indicating the last-modified date of the given context\n-\n-catalogCounter\n-    A counter that is incremented each time the catalog is updated.\n-    I.e. each time content in the site is changed.\n-\n-locked\n-    Whether or not the given context is locked for editing.\n-\n-skin\n-    The name of the current skin (theme)\n-\n-resourceRegistries\n-    A timestamp indicating the last-modified timestamp for the Resource Registries.\n-    This is useful for avoiding requests for expired resources from cached pages.\n-\n-It is possible to provide additional tokens by registering an ``IETagValue`` adapter.\n-This should be a named adapter on the published object (typically a view, file resource or Zope page template object) and request, with a unique name.\n-The name is used to look up the component. Thus, you can also override one of the tokens above for a particular type of context or request (e.g. via a browser layer), by registering a more specific adapter with the same name.\n-\n-As an example, here is the ``language`` adapter::\n-\n-    from plone.app.caching.interfaces import IETagValue\n-    from zope.component import adapter\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n-\n-    @implementer(IETagValue)\n-    @adapter(Interface, Interface)\n-    class Language(object):\n-        """The ``language`` etag component, returning the value of the\n-        HTTP_ACCEPT_LANGUAGE request key.\n-        """\n-\n-        def __init__(self, published, request):\n-            self.published = published\n-            self.request = request\n-\n-        def __call__(self):\n-            return self.request.get(\'HTTP_ACCEPT_LANGUAGE\', \'\')\n-\n-This is registered in ZCML like so::\n-\n-    <adapter factory=".etags.Language" name="language" />\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex 2da491a..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-===============================\n-plone.app.caching documentation\n-===============================\n-\n-.. plone.app.caching documentation master file, created by\n-   sphinx-quickstart on Tue May 20 16:53:52 2014.\n-   You can adapt this file completely to your liking, but it should at least\n-   contain the root `toctree` directive.\n-\n-.. include:: README.rst\n-\n-Documentation\n-=============\n-\n-Contents:\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   caching-control-panel\n-   caching-profiles\n-   rulesets-and-caching-operations\n-   caching-proxies\n-   ram-cache\n-   etags\n-   composite-views\n-   split-views\n-   restapi\n-\n-\n-Indices and tables\n-==================\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\n-\ndiff --git a/docs/ram-cache.rst b/docs/ram-cache.rst\ndeleted file mode 100644\nindex d9282a1..0000000\n--- a/docs/ram-cache.rst\n+++ /dev/null\n@@ -1,70 +0,0 @@\n-The RAM cache\n--------------\n-\n-In addition to caching content in users\' browsers (through setting appropriate response headers) and a caching proxy, Plone can cache certain information in memory.\n-This is done in two main ways:\n-\n-* Developers may use the ``plone.memoize`` package\'s ``ram`` module to cache the results of certain functions in RAM.\n-  For example, some viewlets and portlets cache their rendered output in RAM for a time, alleviating the need to calculate them every time.\n-\n-* Some caching operations may cache an entire response in memory, so that  they can later intercept the request to return a cached response.\n-\n-Caching in RAM in Zope is not as efficient as caching in a proxy, for a number of reasons:\n-\n-* Zope still has to perform traversal, security, transaction management and so on before serving a request with a RAM-cached response.\n-\n-* Zope\'s use of memory is not as efficient as that of a finely optimised caching proxy.\n-\n-* Storing lots of content in RAM may compete with the standard ZODB object cache and other memory pools used by Zope, thus slowing down Zope overall.\n-\n-* In multi-client ZEO setups, the RAM cache is (by default at least) not shared among instances (though it is shared among threads in that instance).\n-  Thus, each Plone client process will maintain its own cache.\n-\n-You can use the *RAM cache* tab in the caching control panel to view statistics about the use of the RAM cache.\n-On the *Change settings* tab, you can also control the size of the cache, and the frequency with which it is purged of old items.\n-\n-\n-Alternative RAM cache implementations\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-The RAM cache exposed through ``plone.memoize.ram`` is looked up via an ``ICacheChoser`` utility.\n-The default implementation looks up a ``zope.ramcache.interfaces.ram.IRAMCache`` utility.\n-Plone installs a local such utility (to allows its settings to be persisted - the cache itself is not persistent), which is shared by all users of the cache.\n-\n-You can provide your own ``ICacheChooser`` utility to change this policy, by installing this as a local utility or overriding it in ``overrides.zcml``.\n-One reason to do this may be to back the cache with a `memcached`_ server, which would allow a single cache to be shared among multiple Zope clients.\n-\n-Below is a sketch of such a cache chooser, courtesy of Wojciech Lichota::\n-\n-    from plone.memoize.interfaces import ICacheChooser\n-    from plone.memoize.ram import MemcacheAdapter\n-    from pylibmc import Client\n-    from threading import local\n-    from zope.interface import implementer\n-\n-    @implementer(ICacheChooser)\n-    class MemcachedCacheChooser(object):\n-        _v_thread_local = local()\n-\n-        def getClient(self):\n-            """\n-            Return thread local connection to memcached.\n-            """\n-            connection = getattr(self._v_thread_local, \'connection\', None)\n-            if connection is None:\n-                connection = Client([\'127.0.0.1:11211\'])\n-                self._v_thread_local.connection = connection\n-\n-            return connection\n-\n-        def __call__(self, fun_name):\n-            """\n-            Create new adapter for plone.memoize.ram.\n-            """\n-            return MemcacheAdapter(client=self.getClient(), globalkey=fun_name)\n-\n-You could install this with the following lines in an overrides.zcml::\n-\n-    <utility factory=".memcached.MemcachedCacheChooser" />\n-\n-.. _memcached: http://memcached.org\ndiff --git a/docs/restapi.rst b/docs/restapi.rst\ndeleted file mode 100644\nindex 9c0b211..0000000\n--- a/docs/restapi.rst\n+++ /dev/null\n@@ -1,135 +0,0 @@\n-Caching of plone.restapi\n-------------------------\n-\n-Strategy\n-~~~~~~~~\n-\n-Caching for anonymous users for all GET requests.\n-\n-Remark: Some POST requests, like `@querystring`, should be turned into GET in order to better cache.\n-\n-We have endpoints following classic `plone.content.itemView` content and do not accept parameters.\n-Those can be handled with the default rules, including purge.\n-\n-There are others delivering dynamic content, like search, impossible to purge.\n-Those shall be cached using a shorttime cache (like some seconds to some minutes).\n-\n-This get covered by the rulesetType `plone.content.dynamic`.\n-It is configured to cache by default in browser 10sec, in caching-proxy 60 seconds.\n-Its goal is primary to reduce the load/peak-load on the server.\n-Also, it reduces the impact of loading the same endpoint more than one time in one page.\n-\n-\n-plone.restapi GET endpoints\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-And its environment and assignments:\n-\n-- ``@actions``\n-\n-  - Anonymous\n-  - rule plone.content.dynamic (might be influenced by other content)\n-  - purge\n-\n-- ``@addons``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@breadcrumbs``\n-\n-  - Anonymous\n-  - rule plone.content.dynamic (parent may change)\n-  - purge\n-\n-- ``@comments``\n-\n-  - Anonymous\n-  - rule plone.content.itemView\n-  - purge\n-\n-- ``/`` (content)\n-\n-  - Anonymous\n-  - expander!\n-  - rule plone.content.dynamic\n-\n-- ``@history``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@lock``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@translations``\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- ``@translations-locator``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@navigation``\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- ``@querysources``\n-\n-  - Authenticated\n-  - with parameters\n-  - can not be cached\n-\n-- ``@querystring``\n-\n-  - Anonymous\n-  - (values on IPloneSiteRoot from registry)\n-  - rule plone.content.dynamic\n-\n-- ``@querystring-search``\n-\n-  - is in `get.py` BUT configured as POST\n-  - Anonymous\n-  - with json body\n-  - can not be cached\n-\n-- ``@registry``\n-\n-  - Authenticated\n-  - with subpath\n-  - no rule assignment\n-\n-- ``@roles``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@search``\n-\n-  - Anonymous\n-  - with parameters\n-  - rule plone.content.dynamic\n-\n-- ``@sources``\n-\n-  - Authenticated\n-  - no rule assignment\n-\n-- ``@tiles``\n-\n-  - pre-deprecation\n-  - Anonymous\n-  - with subpath\n-  - no rule assignment\n-\n-- ``@types``\n-\n-  - Authenticated\n-  - no rule assignment\ndiff --git a/docs/rulesets-and-caching-operations.rst b/docs/rulesets-and-caching-operations.rst\ndeleted file mode 100644\nindex 83f78cd..0000000\n--- a/docs/rulesets-and-caching-operations.rst\n+++ /dev/null\n@@ -1,338 +0,0 @@\n-Rulesets and caching operations\n--------------------------------\n-\n-The caching infrastructure works on the principle of *rulesets* mapped to\n-*caching operations*. A ruleset is basically just a name, and is normally\n-applied in ZCML by the author of a particular view. There are also some\n-default rulesets applied to general resources - see below.\n-\n-Please note that ``plone.app.caching`` places the caching ruleset registry\n-into "explicit" mode. This means that you *must* declare a caching ruleset\n-(with the ``<cache:rulesetType />`` directive) before you can use it.\n-\n-Caching operations are components written in Python which either interrupt\n-rendering to provide a cached response (such as a ``304 NOT MODIFIED``\n-response), or add caching information to a response (such as setting the\n-``Cache-Control`` HTTP response header).\n-\n-For more details on how to use these components, see the documentation for\n-`plone.caching`_.\n-\n-Once rulesets and caching operations have been registered, they will\n-appear in the caching control panel.\n-\n-\n-Default rulesets\n-~~~~~~~~~~~~~~~~\n-\n-``plone.app.caching`` declares a few default rulesets.  They are listed\n-with descriptions in the control panel.\n-\n-* **Content feed** (``plone.content.feed``)\n-      A dynamic feed, e.g. using RSS or ATOM.\n-\n-* **Content files and images** (``plone.content.file``)\n-      Includes files and images in content space usually either downloaded\n-      or included as an inline element in one of the other public-facing\n-      views.\n-\n-* **Content folder view** (``plone.content.folderView``)\n-      A public-facing view for a content item that is a folder or container\n-      for other items.\n-\n-* **Content item view** (``plone.content.itemView``)\n-      A public-facing view for a content item that is not a folder or\n-      container for other items.\n-\n-* **File and image resources** (``plone.resource``)\n-      Includes images and files created or customised through the ZMI,\n-      those exposed in the portal_skins tool, and images registered in\n-      resource directories on the filesystem.\n-\n-* **Stable file and image resources** (``plone.stableResource``)\n-      Stable resources like the css, javascript, and kss files registered\n-      with the Resource Registries.  These are resources which can be cached\n-      \'forever\'.  Normally this means that if the object does change, its\n-      URL changes too.\n-\n-\n-Default cache operations\n-~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-``plone.app.caching`` also declares a number of default operation types.\n-These are listed in the control panel as available operations for the\n-various rulesets. Hover your mouse over an operation in the drop-down\n-list to view its description.\n-\n-* **Strong caching** (``plone.app.caching.strongCaching``)\n-      Cache in browser and proxy (default: 24 hours).  Caution: Only use\n-      for stable resources that never change without changing their URL,\n-      or resources for which temporary staleness is not critical.\n-\n-      In the caching profiles ``without-caching-proxy`` and\n-      ``with-caching-proxy``, this operation is mapped to the rulesets\n-      ``plone.resource`` and ``plone.stableResource``, which causes the\n-      following headers to be added to the response::\n-\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=<seconds>, proxy-revalidate, public\n-\n-..\n-\n-* **Moderate caching** (``plone.app.caching.moderateCaching``),\n-      Cache in browser but expire immediately (same as ``weak caching``),\n-      and cache in proxy (default: 24 hours).  Use a purgable caching\n-      reverse proxy for best results.  Caution: If proxy cannot be purged\n-      reliably (for example, in the case of composite pages where it may\n-      be difficult to track when a dependency has changed) then stale\n-      responses might be seen until the cached entry expires.  A similar\n-      caution applies even if in the purgeable case, if the proxy cannot\n-      be configured to disallow caching in other intermediate proxies\n-      that may exist between the local proxies and the browser (see the\n-      example proxy configs included with this package for some solutions\n-      to this problem).\n-\n-      In the caching profile ``with-caching-proxy``, this operation is mapped\n-      to the rulesets ``plone.content.feed`` and ``plone.content.file``,\n-      which causes the following headers to be added to the response::\n-\n-        [plone.content.feed]\n-        ETag: <etag-value>\n-        Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-\n-        [plone.content.file]\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=0, s-maxage=<seconds>, must-revalidate\n-\n-..\n-\n-* **Weak caching** (``plone.app.caching.weakCaching``)\n-      Cache in browser but expire immediately and enable 304 responses on\n-      subsequent requests. 304\'s require configuration of the\n-      ``Last-Modified`` and/or ``ETags`` settings. If Last-Modified header is\n-      insufficient to ensure freshness, turn on ETag checking by listing each\n-      ETag component that should be used to to construct the ETag header. To\n-      also cache public responses in Zope memory, set the ``RAM cache``\n-      parameter to True.\n-\n-      In the caching profile ``without-caching-proxy``, this operation is\n-      mapped to the rulesets ``plone.content.itemView``,\n-      ``plone.content.folderView``, ``plone.content.feed``, and\n-      ``plone.content.file``, which causes the following headers to be added\n-      to the response::\n-\n-        [plone.content.itemView, plone.content.folderView, plone.content.feed]\n-        ETag: <etag-value>\n-        Cache-Control: max-age=0, must-revalidate, private\n-\n-        [plone.content.file]\n-        Last-Modified: <last-modified-date>\n-        Cache-Control: max-age=0, must-revalidate, private\n-\n-      In the caching profile ``with-caching-proxy``, this operation is mapped\n-      only to the rulesets ``plone.content.itemView`` and\n-      ``plone.content.folderView``.\n-\n-* **No caching** (``plone.app.caching.noCaching``)\n-      Use this operation to keep the response out of all caches. The\n-      default settings generate an IE-safe no-cache operation. Under\n-      certain conditions, IE chokes on ``no-cache`` and ``no-store``\n-      Cache-Control tokens, so instead we just exclude caching in\n-      shared caching proxies with the ``private`` token, expire immediately\n-      in the browser, and disable validation. This emulates the usual\n-      behavior expected from the ``no-cache`` token.  If the nominally\n-      more secure, but occasionally troublesome, ``no-store`` token\n-      is also desired, set the ``No store`` parameter to True.\n-      [XXX - \'no store\' option not done yet]\n-\n-* **Chain** (``plone.caching.operations.chain``)\n-      Allows multiple operations to be chained together. When intercepting\n-      the response, the first chained operation to return a value will\n-      be used. Subsequent operations are ignored. When modifying the\n-      response, all operations will be called, in order.\n-\n-These operation descriptions are a bit simplified as several of these\n-operations also include tests to downgrade caching depending on various\n-parameter settings, workflow state, and access privileges. For more detail,\n-it\'s best to review the operation code itself.\n-\n-\n-Default ruleset/operation mappings\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To recap, ``plone.app.caching`` defines three default cache policies\n-containing the cache operation mappings for each of the six rulesets. The\n-default mappings are as follows:\n-\n-===============  =====================  ==================  =============================\n-..               without-caching-proxy  with-caching-proxy  with-caching-proxy-splitviews\n-===============  =====================  ==================  =============================\n-itemView         weakCaching            weakCaching         moderateCaching\n-folderView       weakCaching            weakCaching         moderateCaching\n-feed             weakCaching            moderateCaching     moderateCaching\n-file             weakCaching            moderateCaching     moderateCaching\n-resource         strongCaching          strongCaching       strongCaching\n-stableResource   strongCaching          strongCaching       strongCaching\n-===============  =====================  ==================  =============================\n-\n-\n-Cache operation parameters\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Much of the cache operation behavior is controlled via user-adjustable\n-parameters. In fact, three of the default caching operations (strong caching,\n-moderate caching, and weak caching) are essentially all the same operation but\n-with different default parameter settings and with some parameters hidden from\n-the UI.\n-\n-* *Maximum age* (``maxage``)\n-      Time (in seconds) to cache the response in the browser or caching proxy.\n-      Adds a "Cache-Control: max-age=<value>" header and a matching "Expires"\n-      header to the response.\n-\n-* *Shared maximum age* (``smaxage``)\n-      Time (in seconds) to cache the response in the caching proxy.\n-      Adds a "Cache-Control: s-maxage=<value>" header to the response.\n-\n-* *ETags* (``etags``)\n-      A list of the names of the ETag components to include in the ETag\n-      header. Also turns on "304 Not Modified" responses for "If-None-Match"\n-      conditional requests.\n-\n-* *Last-modified validation* (``lastModified``)\n-      Adds a "Last-Modified" header to the response and turns on "304 Not\n-      Modified" responses for "If-Modified-Since" conditional requests.\n-\n-* *RAM cache* (``ramCache``)\n-      Turn on caching in Zope memory. If the URL is not specific enough to\n-      ensure uniqueness then either ETags or Last-Modified should also be\n-      added to the list of parameters in order to generate a unique cache key.\n-\n-* *Vary* (``vary``)\n-      Name(s) of HTTP headers in the request that must match (in addition to\n-      the URL) for a caching proxy to return a cached response.\n-\n-* *Anonymous only* (``anonOnly``)\n-      Set this to True if you want to force logged-in users to always get a\n-      fresh copy. This works best with the "moderate caching" operation, and\n-      will not work well with a "Max age" (to cache content in the browser)\n-      greater than zero. By setting this option, you can focus the other cache\n-      settings on the anonymous use case. Note that if you are using a caching\n-      proxy, you will need to set a Vary header of "X-Anonymous" or similar,\n-      and ensure that such a header is set in the proxy for logged in users (a\n-      blunter alternative is to use "Cookie" as the header, although this can\n-      have false positives). See the example Varnish and Squid configurations\n-      that come with this package for more details.\n-\n-* *Request variables that prevent caching* (``cacheStopRequestVariables``)\n-      A list of variables in the request (including Cookies) that prevent\n-      caching if present. Note, unlike the others above, this global parameter\n-      is not directly visible in the plone.app.caching UI. There should\n-      unlikely be any need to change this list but, if needed, it can be\n-      edited via the Configuration Registry control panel.\n-\n-\n-Caching operation helper functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-If you will find the implementations of the default caching operations\n-in the package ``plone.app.caching.operations``. If you are writing a\n-custom caching operation, the ``utils`` module contains helper functions\n-which you may find useful.\n-\n-\n-Debug headers and logging\n-~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-It can sometimes be useful to see which rulesets and operations (if any)\n-are being applied to published resources. There are two ways to see\n-this: via debug response headers and via debug logging.\n-\n-Several debug response headers are added automatically by plone.app.caching\n-and plone.caching. These headers include:\n-\n-* ``X-Cache-Rule: <matching rule id>``\n-\n-* ``X-Cache-Operation: <matching operation id>``\n-\n-* ``X-Cache-Chain-Operations: <list of chain operation ids>``\n-\n-* ``X-RAMCache: <ram cache id>``\n-\n-Viewing these headers is relatively easy with tools like the Firebug\n-and LiveHTTPHeaders add-on for the Firefox browser.  Similar tools\n-for inspecting response headers exist for Safari and IE.\n-\n-If you enable the DEBUG logging level for the ``plone.caching`` logger,\n-you will get additional debug output in your event log. One way to do that\n-is to set the global Zope logging level to DEBUG in ``zope.conf``::\n-\n-    <eventlog>\n-        level DEBUG\n-        <logfile>\n-            path <file path here>\n-            level DEBUG\n-        </logfile>\n-    </eventlog>\n-\n-If you are using `plone.recipe.zope2instance`_ to create your Zope instances,\n-you can set the logging level with the ``event-log-level`` option.\n-\n-You should see output in the log like::\n-\n-    2010-01-11 16:44:10 DEBUG plone.caching Published: <ATImage at /test/i> Ruleset: plone.download Operation: None\n-    2010-01-11 16:44:10 DEBUG plone.caching Published: <ATImage at /test/i> Ruleset: plone.download Operation: plone.caching.operations.chain\n-\n-The ``None`` indicates that no ruleset or operation was mapped.\n-\n-It is probably not a good idea to leave debug logging on for production use,\n-as it can produce a lot of output, filling up log files and adding unnecessary\n-load to your disks.\n-\n-Content-type based rulesets\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Normally, you declare caching rulesets for a view, e.g. with::\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".browser.MyItemView"\n-        />\n-\n-See `plone.caching`_ for details.\n-\n-plone.app.caching installs a special ruleset lookup adapter that is invoked\n-for skin layer page templates and browser views not assigned a more specific\n-rule set. This adapter allows you to declare a ruleset for the *default view*\n-of a given content type by supplying a content type class or interface to the\n-``<cache:ruleset />`` directive::\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".interfaces.IMyContentType"\n-        />\n-\n-or for a class:\n-\n-    <cache:ruleset\n-        ruleset="plone.content.itemView"\n-        for=".content.MyContentType"\n-        />\n-\n-There are two reasons to want to do this:\n-\n-* Your type uses a skin layer page template for its default view, instead of a\n-  browser view. In this case, you can either declare the ruleset on the\n-  type as shown above (in ZCML), or map the type name in the registry,\n-  using the GUI or GenericSetup. The former is more robust and certainly more\n-  natural if you are declaring other, more conventional rulesets in ZCML\n-  already.\n-* You want to set the ruleset for a number of content types. In fact,\n-  plone.app.caching already does this for you: The Archetypes base classes\n-  ``BaseContent`` and ``BaseFolder`` are assigned the rulesets\n-  ``plone.content.itemView`` and ``plone.content.folderview``, respectively.\n-  Ditto for Dexterity\'s ``IDexterityItem`` and ``IDexterityContainer``\n-  interfaces.\n-\n-.. _plone.caching: http://pypi.python.org/pypi/plone.caching\n-.. _plone.recipe.zope2instance: http://pypi.python.org/pypi/plone.recipe.zope2instance\ndiff --git a/instance.yaml b/instance.yaml\nnew file mode 100644\nindex 0000000..8c6c46e\n--- /dev/null\n+++ b/instance.yaml\n@@ -0,0 +1,8 @@\n+default_context:\n+    initial_user_name: \'admin\'\n+    initial_user_password: \'admin\'\n+\n+    load_zcml:\n+        package_includes: [\'plone.app.caching\']\n+\n+    db_storage: direct\ndiff --git a/mx.ini b/mx.ini\nnew file mode 100644\nindex 0000000..b575b20\n--- /dev/null\n+++ b/mx.ini\n@@ -0,0 +1,9 @@\n+; This is a mxdev configuration file\n+; it can be used to override versions of packages already defined in the\n+; constraints files and to add new packages from VCS like git.\n+; to learn more about mxdev visit https://pypi.org/project/mxdev/\n+\n+[settings]\n+; example how to override a package version\n+; version-overrides =\n+;     example.package==2.1.0a2\ndiff --git a/news/114.documentation b/news/114.documentation\nnew file mode 100644\nindex 0000000..d5fb402\n--- /dev/null\n+++ b/news/114.documentation\n@@ -0,0 +1 @@\n+Convert README and CHANGES to markdown.  [ericof]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 9a3db87..0c7b34b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,10 +1,12 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n-filename = "CHANGES.rst"\n+filename = "CHANGES.md"\n directory = "news/"\n-title_format = "{version} ({project_date})"\n-underlines = ["-", ""]\n+start_string = "<!-- towncrier release notes start -->\\n"\n+title_format = "## {version} ({project_date})"\n+template = "docs/changelog_template.jinja"\n+underlines = ["", "", ""]\n \n [[tool.towncrier.type]]\n directory = "breaking"\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..8e4007a\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+-e ".[test]"\ndiff --git a/setup.cfg b/setup.cfg\nindex 28522d5..28a6823 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,3 @@\n-[build_sphinx]\n-source-dir = docs/source\n-build-dir  = docs\n-all_files  = 1\n-\n-[upload_sphinx]\n-upload-dir = docs/html\n-\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n@@ -29,3 +21,8 @@ ignore =\n     .meta.toml\n     tox.ini\n     lint-requirements.txt\n+    constraints-mxdev.txt\n+    requirements-mxdev.txt\n+    Makefile\n+    instance.yaml\n+    mx.ini\ndiff --git a/setup.py b/setup.py\nindex 262d39a..9663da8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,14 +1,21 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n \n version = "3.0.3.dev0"\n \n+long_description = f"""\n+{Path("README.md").read_text()}\\n\n+{Path("CHANGES.md").read_text()}\\n\n+"""\n+\n setup(\n     name="plone.app.caching",\n     version=version,\n     description="Plone UI and default rules for plone.caching/z3c.caching",\n-    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n+    long_description=long_description,\n+    long_description_content_type="text/markdown",\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n'

