Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-04-25T23:19:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/57e7947983065af8ce526015defa74def732b53d

Update the resourceRegistries ETag to use the config registry modification time.

This time is set since Plone 6.0.4.
Fixes https://github.com/plone/plone.app.caching/issues/93.

This removes the previous code which read `timestamp.txt` from `/portal_resources/resource_overrides/production`.
This timestamp is no longer set in Plone 6, and does not influence anything.

Files changed:
A news/93.feature
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/news/93.feature b/news/93.feature\nnew file mode 100644\nindex 0000000..fe0847c\n--- /dev/null\n+++ b/news/93.feature\n@@ -0,0 +1,4 @@\n+Update the resourceRegistries ETag to use the config registry modification time.\n+This time is set since Plone 6.0.4.\n+Fixes `issue 93 <https://github.com/plone/plone.app.caching/issues/93>`_.\n+[maurits]\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 8187172..20f1783 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -4,11 +4,10 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from plone.base.utils import safe_hasattr\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.resources.utils import get_override_directory\n-from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -19,6 +18,13 @@\n import time\n \n \n+try:\n+    # available since Plone 6.0.4\n+    from Products.CMFPlone.resources.browser.resource import _RESOURCE_REGISTRY_MTIME\n+except ImportError:\n+    _RESOURCE_REGISTRY_MTIME = None\n+\n+\n @implementer(IETagValue)\n @adapter(Interface, Interface)\n class UserID:\n@@ -239,22 +245,15 @@ def __init__(self, published, request):\n         self.request = request\n \n     def __call__(self):\n-        context = getContext(self.published)\n-        container = get_override_directory(context)\n-        if PRODUCTION_RESOURCE_DIRECTORY not in container:\n+        if _RESOURCE_REGISTRY_MTIME is None:\n             return ""\n-        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-        filename = "timestamp.txt"\n-        if filename not in production_folder:\n+        registry = queryUtility(IRegistry)\n+        if registry is None:\n             return ""\n-        timestamp = production_folder.readFile(filename)\n-        if not timestamp:\n+        mtime = getattr(registry, _RESOURCE_REGISTRY_MTIME, None)\n+        if mtime is None:\n             return ""\n-        # timestamp is in bytes, and we must return a string.\n-        # On Python 2 this is the same, but not on Python 3.\n-        if not isinstance(timestamp, str):\n-            timestamp = timestamp.decode("utf-8")\n-        return timestamp\n+        return str(mtime)\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 8df999a..cdb62c9 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -73,12 +73,12 @@ def test_composite_viewsxx(self):\n         # Can we just call that test from this context?\n \n         catalog = self.portal["portal_catalog"]\n-        skins_tool = self.portal["portal_skins"]\n+        default_skin = self.portal["portal_skins"].default_skin\n \n         # Add folder content\n         setRoles(self.portal, TEST_USER_ID, ("Manager",))\n         self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "one"\n+        self.portal["f1"].title = "Folder one"\n         self.portal["f1"].description = "Folder one description"\n         self.portal["f1"].reindexObject()\n \n@@ -105,9 +105,16 @@ def test_composite_viewsxx(self):\n         # - turn on gzip?\n         # - set skin?  Maybe\n         # - leave status unlocked\n-        #\n+        # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -124,10 +131,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Set the copy/cut cookie and then request the folder view again\n@@ -141,10 +146,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|1|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -163,10 +166,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the authenticated page again -- to test RAM cache.\n@@ -205,7 +206,6 @@ def test_composite_viewsxx(self):\n         # Request the anonymous folder\n         now = stable_now()\n         browser = Browser(self.app)\n-        browser.handleErrors = False\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n         self.assertEqual(\n@@ -215,10 +215,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page\n@@ -234,10 +232,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- to test RAM cache.\n@@ -257,10 +253,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- with an INM header to test 304.\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 07a0585..3d9076a 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -92,6 +92,13 @@ def test_composite_views(self):\n         # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -108,7 +115,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -123,7 +130,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n@@ -143,7 +150,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -192,7 +199,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -209,7 +216,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -230,7 +237,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-04-26T08:25:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/4cdf6fb83bf110f93c8e1736225049695d391e38

Merge pull request #125 from plone/maurits-rr-etag

Update resourceRegistries ETag to use the config registry mtime

Files changed:
A news/93.feature
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/news/93.feature b/news/93.feature\nnew file mode 100644\nindex 0000000..fe0847c\n--- /dev/null\n+++ b/news/93.feature\n@@ -0,0 +1,4 @@\n+Update the resourceRegistries ETag to use the config registry modification time.\n+This time is set since Plone 6.0.4.\n+Fixes `issue 93 <https://github.com/plone/plone.app.caching/issues/93>`_.\n+[maurits]\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 8187172..20f1783 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -4,11 +4,10 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from plone.base.utils import safe_hasattr\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.resources.utils import get_override_directory\n-from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -19,6 +18,13 @@\n import time\n \n \n+try:\n+    # available since Plone 6.0.4\n+    from Products.CMFPlone.resources.browser.resource import _RESOURCE_REGISTRY_MTIME\n+except ImportError:\n+    _RESOURCE_REGISTRY_MTIME = None\n+\n+\n @implementer(IETagValue)\n @adapter(Interface, Interface)\n class UserID:\n@@ -239,22 +245,15 @@ def __init__(self, published, request):\n         self.request = request\n \n     def __call__(self):\n-        context = getContext(self.published)\n-        container = get_override_directory(context)\n-        if PRODUCTION_RESOURCE_DIRECTORY not in container:\n+        if _RESOURCE_REGISTRY_MTIME is None:\n             return ""\n-        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-        filename = "timestamp.txt"\n-        if filename not in production_folder:\n+        registry = queryUtility(IRegistry)\n+        if registry is None:\n             return ""\n-        timestamp = production_folder.readFile(filename)\n-        if not timestamp:\n+        mtime = getattr(registry, _RESOURCE_REGISTRY_MTIME, None)\n+        if mtime is None:\n             return ""\n-        # timestamp is in bytes, and we must return a string.\n-        # On Python 2 this is the same, but not on Python 3.\n-        if not isinstance(timestamp, str):\n-            timestamp = timestamp.decode("utf-8")\n-        return timestamp\n+        return str(mtime)\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 8df999a..cdb62c9 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -73,12 +73,12 @@ def test_composite_viewsxx(self):\n         # Can we just call that test from this context?\n \n         catalog = self.portal["portal_catalog"]\n-        skins_tool = self.portal["portal_skins"]\n+        default_skin = self.portal["portal_skins"].default_skin\n \n         # Add folder content\n         setRoles(self.portal, TEST_USER_ID, ("Manager",))\n         self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "one"\n+        self.portal["f1"].title = "Folder one"\n         self.portal["f1"].description = "Folder one description"\n         self.portal["f1"].reindexObject()\n \n@@ -105,9 +105,16 @@ def test_composite_viewsxx(self):\n         # - turn on gzip?\n         # - set skin?  Maybe\n         # - leave status unlocked\n-        #\n+        # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -124,10 +131,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Set the copy/cut cookie and then request the folder view again\n@@ -141,10 +146,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|1|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -163,10 +166,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the authenticated page again -- to test RAM cache.\n@@ -205,7 +206,6 @@ def test_composite_viewsxx(self):\n         # Request the anonymous folder\n         now = stable_now()\n         browser = Browser(self.app)\n-        browser.handleErrors = False\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n         self.assertEqual(\n@@ -215,10 +215,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page\n@@ -234,10 +232,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- to test RAM cache.\n@@ -257,10 +253,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- with an INM header to test 304.\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 07a0585..3d9076a 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -92,6 +92,13 @@ def test_composite_views(self):\n         # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -108,7 +115,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -123,7 +130,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n@@ -143,7 +150,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -192,7 +199,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -209,7 +216,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -230,7 +237,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n'

