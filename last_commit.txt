Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-10-23T13:51:22-04:00
Author: Alec Mitchell (alecpm) <alecpm@gmail.com>
Commit: https://github.com/plone/plone.app.contentmenu/commit/8fd0a1085241ad4b7fbc621e5807f137002cc245

Put selected display on top, clean up separators for styling.

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/tests/test_menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f134fd8..9f9c546 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -29,6 +29,10 @@ New features:
   manager management.
   [alecm]
 
+- Display menu reorganization. Selected view/item should be on top of section
+  and headings should appear as headings.
+  [alecm]
+
 - Add ability to specify a short title for the collapsed sidebar by setting
   extras['shortTitle'], in the same way as stateTitle.
   [MatthewWilkes]
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 0f28ce0..f8d5fee 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -281,6 +281,7 @@ def getMenuItems(self, obj, request):
                     contextCanSetDefaultPage:
                 useSeparators = True
 
+        folder_index = 0
         # 1. If this is a default-page, first render folder options
         if folder is not None:
             folderUrl = parent.absolute_url()
@@ -298,6 +299,24 @@ def getMenuItems(self, obj, request):
                               'class': ''},
                     'submenu': None,
                 })
+                folder_index = len(results)
+
+            # Display the selected item (i.e. the context)
+            results.insert(folder_index, {
+                'title': _(u'label_item_selected',
+                           default=u'Item: ${contentitem}',
+                           mapping={'contentitem': escape(
+                               utils.safe_unicode(obj.Title()))}),
+                'description': '',
+                'action': None,
+                'selected': True,
+                'icon': None,
+                'extra': {
+                    'id': 'folderDefaultPageDisplay',
+                    'separator': None,
+                    'class': 'actionMenuSelected'},
+                'submenu': None,
+            })
 
             if folderCanSetLayout:
                 for id, title in folderLayouts:
@@ -319,22 +338,6 @@ def getMenuItems(self, obj, request):
                             'class': ''},
                         'submenu': None,
                     })
-            # Display the selected item (i.e. the context)
-            results.append({
-                'title': _(u'label_item_selected',
-                           default=u'Item: ${contentitem}',
-                           mapping={'contentitem': escape(
-                               utils.safe_unicode(obj.Title()))}),
-                'description': '',
-                'action': None,
-                'selected': True,
-                'icon': None,
-                'extra': {
-                    'id': 'folderDefaultPageDisplay',
-                    'separator': 'actionSeparator',
-                    'class': 'actionMenuSelected'},
-                'submenu': None,
-            })
             # Let the user change the selection
             if folderCanSetDefaultPage:
                 results.append({
@@ -349,12 +352,13 @@ def getMenuItems(self, obj, request):
                     'icon': None,
                     'extra': {
                         'id': 'folderChangeDefaultPage',
-                        'separator': 'actionSeparator',
+                        'separator': None,
                         'class': 'pat-plone-modal'},
                     'submenu': None,
                 })
 
         # 2. Render context options
+        item_index = 0
         if context is not None:
             contextUrl = obj.absolute_url()
             selected = context.getLayout()
@@ -375,6 +379,7 @@ def getMenuItems(self, obj, request):
                         'class': ''},
                     'submenu': None,
                 })
+                item_index = len(results)
 
             # If context is a default-page in a folder, that folder's views
             # will be shown. Only show context views if there are any to show.
@@ -384,7 +389,9 @@ def getMenuItems(self, obj, request):
             if showLayouts and contextCanSetLayout:
                 for id, title in contextLayouts:
                     is_selected = (defaultPage is None and id == selected)
-                    results.append({
+                    # Selected item on top
+                    index = item_index if is_selected else len(results)
+                    results.insert(index, {
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
@@ -424,7 +431,7 @@ def getMenuItems(self, obj, request):
                             'icon': None,
                             'extra': {
                                 'id': 'contextSetDefaultPage',
-                                'separator': 'actionSeparator',
+                                'separator': None,
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
                         })
@@ -438,7 +445,8 @@ def getMenuItems(self, obj, request):
                             defaultPageTitle = getattr(aq_base(defaultPageObj),
                                                        'title', u'')
 
-                    results.append({
+                    # Selected item on top
+                    results.insert(item_index, {
                         'title': _(u'label_item_selected',
                                    default=u'Item: ${contentitem}',
                                    mapping={'contentitem': escape(
@@ -449,7 +457,7 @@ def getMenuItems(self, obj, request):
                         'icon': None,
                         'extra': {
                             'id': 'contextDefaultPageDisplay',
-                            'separator': 'actionSeparator',
+                            'separator': None,
                             'class': ''},
                         'submenu': None,
                     })
@@ -469,7 +477,7 @@ def getMenuItems(self, obj, request):
                             'icon': None,
                             'extra': {
                                 'id': 'contextChangeDefaultPage',
-                                'separator': 'actionSeparator',
+                                'separator': None,
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
                         })
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 7090652..3179042 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -773,6 +773,9 @@ def testDisplayMenuAddPrefixFolderForContainerPart(self):
         for extra in extras[1:]:
             if not extra['separator'] is None:
                 break
+            if extra['id'] in ('folderDefaultPageDisplay',
+                               'folderChangeDefaultPage'):
+                break
             else:
                 self.assertEqual(extra['id'][0:len(prefix)], prefix)
 


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-10-23T22:10:13-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/a1a7fdb4a41fdb9815f89b0505597702ac13b2d5

Merge pull request #19 from plone/selected-view-on-top

Put selected display on top, clean up separators for styling.

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/tests/test_menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f134fd8..9f9c546 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -29,6 +29,10 @@ New features:
   manager management.
   [alecm]
 
+- Display menu reorganization. Selected view/item should be on top of section
+  and headings should appear as headings.
+  [alecm]
+
 - Add ability to specify a short title for the collapsed sidebar by setting
   extras['shortTitle'], in the same way as stateTitle.
   [MatthewWilkes]
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 0f28ce0..f8d5fee 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -281,6 +281,7 @@ def getMenuItems(self, obj, request):
                     contextCanSetDefaultPage:
                 useSeparators = True
 
+        folder_index = 0
         # 1. If this is a default-page, first render folder options
         if folder is not None:
             folderUrl = parent.absolute_url()
@@ -298,6 +299,24 @@ def getMenuItems(self, obj, request):
                               'class': ''},
                     'submenu': None,
                 })
+                folder_index = len(results)
+
+            # Display the selected item (i.e. the context)
+            results.insert(folder_index, {
+                'title': _(u'label_item_selected',
+                           default=u'Item: ${contentitem}',
+                           mapping={'contentitem': escape(
+                               utils.safe_unicode(obj.Title()))}),
+                'description': '',
+                'action': None,
+                'selected': True,
+                'icon': None,
+                'extra': {
+                    'id': 'folderDefaultPageDisplay',
+                    'separator': None,
+                    'class': 'actionMenuSelected'},
+                'submenu': None,
+            })
 
             if folderCanSetLayout:
                 for id, title in folderLayouts:
@@ -319,22 +338,6 @@ def getMenuItems(self, obj, request):
                             'class': ''},
                         'submenu': None,
                     })
-            # Display the selected item (i.e. the context)
-            results.append({
-                'title': _(u'label_item_selected',
-                           default=u'Item: ${contentitem}',
-                           mapping={'contentitem': escape(
-                               utils.safe_unicode(obj.Title()))}),
-                'description': '',
-                'action': None,
-                'selected': True,
-                'icon': None,
-                'extra': {
-                    'id': 'folderDefaultPageDisplay',
-                    'separator': 'actionSeparator',
-                    'class': 'actionMenuSelected'},
-                'submenu': None,
-            })
             # Let the user change the selection
             if folderCanSetDefaultPage:
                 results.append({
@@ -349,12 +352,13 @@ def getMenuItems(self, obj, request):
                     'icon': None,
                     'extra': {
                         'id': 'folderChangeDefaultPage',
-                        'separator': 'actionSeparator',
+                        'separator': None,
                         'class': 'pat-plone-modal'},
                     'submenu': None,
                 })
 
         # 2. Render context options
+        item_index = 0
         if context is not None:
             contextUrl = obj.absolute_url()
             selected = context.getLayout()
@@ -375,6 +379,7 @@ def getMenuItems(self, obj, request):
                         'class': ''},
                     'submenu': None,
                 })
+                item_index = len(results)
 
             # If context is a default-page in a folder, that folder's views
             # will be shown. Only show context views if there are any to show.
@@ -384,7 +389,9 @@ def getMenuItems(self, obj, request):
             if showLayouts and contextCanSetLayout:
                 for id, title in contextLayouts:
                     is_selected = (defaultPage is None and id == selected)
-                    results.append({
+                    # Selected item on top
+                    index = item_index if is_selected else len(results)
+                    results.insert(index, {
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
@@ -424,7 +431,7 @@ def getMenuItems(self, obj, request):
                             'icon': None,
                             'extra': {
                                 'id': 'contextSetDefaultPage',
-                                'separator': 'actionSeparator',
+                                'separator': None,
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
                         })
@@ -438,7 +445,8 @@ def getMenuItems(self, obj, request):
                             defaultPageTitle = getattr(aq_base(defaultPageObj),
                                                        'title', u'')
 
-                    results.append({
+                    # Selected item on top
+                    results.insert(item_index, {
                         'title': _(u'label_item_selected',
                                    default=u'Item: ${contentitem}',
                                    mapping={'contentitem': escape(
@@ -449,7 +457,7 @@ def getMenuItems(self, obj, request):
                         'icon': None,
                         'extra': {
                             'id': 'contextDefaultPageDisplay',
-                            'separator': 'actionSeparator',
+                            'separator': None,
                             'class': ''},
                         'submenu': None,
                     })
@@ -469,7 +477,7 @@ def getMenuItems(self, obj, request):
                             'icon': None,
                             'extra': {
                                 'id': 'contextChangeDefaultPage',
-                                'separator': 'actionSeparator',
+                                'separator': None,
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
                         })
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 7090652..3179042 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -773,6 +773,9 @@ def testDisplayMenuAddPrefixFolderForContainerPart(self):
         for extra in extras[1:]:
             if not extra['separator'] is None:
                 break
+            if extra['id'] in ('folderDefaultPageDisplay',
+                               'folderChangeDefaultPage'):
+                break
             else:
                 self.assertEqual(extra['id'][0:len(prefix)], prefix)
 


