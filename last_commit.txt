Repository: mockup


Branch: refs/heads/master
Date: 2016-04-07T10:20:38-05:00
Author: nathan.vangheem () <nathan.vangheem@wildcardcorp.com>
Commit: https://github.com/plone/mockup/commit/a36e3f82b6e160dcbdf959412faff435aca9a44e

be able to customize status messages with structure pattern

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/table.js
M mockup/patterns/structure/templates/table.xml
M mockup/tests/fakeserver.js
M mockup/tests/pattern-structure-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 2efd95d..1702780 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Incompatibilities:
 
 New:
 
+- Be able to set structure status from server with object of { text: '', label: '', type: 'warning'}
+  so you can customize the status message from ajax handlers.
+  [vangheem]
+
 - Add ``test-dev-ff`` as Makefile target and the related grunt/karma setup to run tests in Firefox.
   [thet]
 
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index bb88d29..0e24544 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -54,7 +54,7 @@ define([
           var idx = utils.generateId();
           menuOption.idx = idx;
           menuOption.name = key;  // we want to add the action's key as class name to the output.
-          
+
           var category = menuOption.category || 'dropdown';
           if (menuOptionsCategorized[category] === undefined) {
               menuOptionsCategorized[category] = [];
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index 246ca34..6c9c75e 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -31,9 +31,12 @@ define([
 
   var AppView = BaseView.extend({
     tagName: 'div',
-    status: '',
+    status: {
+      type: 'warning',
+      text: '',
+      label: ''
+    },
     pasteAllowed: !!$.cookie('__cp'),
-    statusType: 'warning',
     sort_on: 'getObjPositionInParent',
     sort_order: 'ascending',
     additionalCriterias: [],
@@ -447,13 +450,30 @@ define([
         }
       });
     },
-    setStatus: function(txt, type) {
-      this.status = txt;
-      if (type === undefined) {
-        type = 'warning';
+    setStatus: function(msg, type) {
+      if(!msg){
+        // clear it
+        this.status.text = '';
+        this.status.label = '';
+        this.status.type = 'warning';
+      } else if(typeof(msg) === 'string'){
+        this.status.text = msg;
+        this.status.label = '';
+        this.status.type = 'warning';
+      }else{
+        // support setting portal status messages here
+        this.status.label = msg.label || '';
+        this.status.text = msg.text;
+        this.status.type = msg.type || 'warning';
       }
-      this.statusType = type;
-      this.$('.status').addClass(type).html(txt);
+      // still need to manually set in case rendering isn't done(especially true for tests)
+      var $status = this.$('.status');
+      $status[0].className = 'alert alert-' + this.status.type + ' status';
+      var $text = $('<span></span>');
+      $text.text(this.status.text);
+      var $label = $('<b></b>');
+      $label.text(this.status.label);
+      $status.empty().append($label).append($text);
     },
     render: function() {
       var self = this;
diff --git a/mockup/patterns/structure/js/views/table.js b/mockup/patterns/structure/js/views/table.js
index eb63a09..47d9946 100644
--- a/mockup/patterns/structure/js/views/table.js
+++ b/mockup/patterns/structure/js/views/table.js
@@ -76,7 +76,6 @@ define([
           }
         ),
         status: self.app.status,
-        statusType: self.app.statusType,
         activeColumns: self.app.activeColumns,
         availableColumns: self.app.availableColumns
       }));
diff --git a/mockup/patterns/structure/templates/table.xml b/mockup/patterns/structure/templates/table.xml
index e36b636..da2f17f 100644
--- a/mockup/patterns/structure/templates/table.xml
+++ b/mockup/patterns/structure/templates/table.xml
@@ -1,4 +1,7 @@
-<div class="alert alert-<%- statusType %> status"><%- status %></div>
+<div class="alert alert-<%- status.type %> status">
+  <b><%- status.label %></b>
+  <%- status.text %>
+</div>
 
 <table class="table table-striped table-bordered">
   <thead>
diff --git a/mockup/tests/fakeserver.js b/mockup/tests/fakeserver.js
index f4233d3..296e575 100644
--- a/mockup/tests/fakeserver.js
+++ b/mockup/tests/fakeserver.js
@@ -230,7 +230,7 @@ define([
       // staff
       {UID: 'asdfasdf9sdf', Title: 'Mike', path: '/about/staff/mike', portal_type: 'Document'},
       {UID: 'cvbcvb82345', Title: 'Joe', path: '/about/staff/joe', portal_type: 'Document'},
-      
+
       // upload file
       {UID: 'sldlfkjsldkjlskdjf', Title: 'blah.png', path: 'blah.png', portal_type: 'Image'}
 
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index fc5e964..61da274 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -253,6 +253,7 @@ define([
     });
 
     it('custom action menu actions missing.', function() {
+      this.app.setStatus(null); // reset
       // Define a custom dummy "module"
       define('dummytestactions', ['backbone'], function(Backbone) {
         var Actions = Backbone.Model.extend({
@@ -301,6 +302,7 @@ define([
 
       // Broken/missing action
       var el = menu.render().el;
+      this.app.setStatus(null); // reset
       $('a.foobar', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('');
@@ -1874,6 +1876,7 @@ define([
       $('.actionmenu a.action2', item).trigger('click');
       this.clock.tick(1000);
       // status will be set as defined.
+
       expect($('.status').text()).to.contain('Status: option2 selected');
     });
 


Repository: mockup


Branch: refs/heads/master
Date: 2016-04-07T22:43:49+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/7657dafa44c5f35e489c9987897227fe78dc982a

use new setStatus signature everywhere and set the status type accordingly to the servers response. + tests

Files changed:
M mockup/patterns/structure/js/actions.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/table.js
M mockup/tests/pattern-structure-test.js

diff --git a/mockup/patterns/structure/js/actions.js b/mockup/patterns/structure/js/actions.js
index c5eb403..e37d957 100644
--- a/mockup/patterns/structure/js/actions.js
+++ b/mockup/patterns/structure/js/actions.js
@@ -72,13 +72,15 @@ define([
         dataType: 'json',
         type: 'POST'
       }).done(function(data) {
+        var msg;
         if (data.status === 'success') {
-          self.app.setStatus(_t(successMsg + ' "' + self.model.attributes.Title + '"'));
+          msg = _t(successMsg + ' "' + self.model.attributes.Title + '"');
           self.app.collection.pager();
           self.app.updateButtons();
         } else {
-          self.app.setStatus(_t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"'));
+          msg = _t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"');
         }
+        self.app.setStatus({text: msg, type: data.status || 'warning'});
       });
     },
 
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index 6c9c75e..4d05ace 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -327,7 +327,7 @@ define([
       }
       if (data.msg) {
         // give status message somewhere...
-        self.setStatus(data.msg);
+        self.setStatus({text: data.msg, type: data.status || 'warning'});
       }
       if (callback !== null && callback !== undefined) {
         callback(data);
@@ -441,26 +441,26 @@ define([
             self.setStatus(data.msg);
           } else if (data.status !== 'success') {
             // XXX handle error here with something?
-            self.setStatus('error moving item');
+            self.setStatus({text: 'error moving item', type: 'error'});
           }
           self.collection.pager(); // reload it all
         },
         error: function() {
-          self.setStatus('error moving item');
+          self.setStatus({text: 'error moving item', type: 'error'});
         }
       });
     },
-    setStatus: function(msg, type) {
-      if(!msg){
+    setStatus: function(msg) {
+      if (!msg) {
         // clear it
         this.status.text = '';
         this.status.label = '';
         this.status.type = 'warning';
-      } else if(typeof(msg) === 'string'){
+      } else if (typeof(msg) === 'string') {
         this.status.text = msg;
         this.status.label = '';
         this.status.type = 'warning';
-      }else{
+      } else {
         // support setting portal status messages here
         this.status.label = msg.label || '';
         this.status.text = msg.text;
diff --git a/mockup/patterns/structure/js/views/table.js b/mockup/patterns/structure/js/views/table.js
index 47d9946..36468d8 100644
--- a/mockup/patterns/structure/js/views/table.js
+++ b/mockup/patterns/structure/js/views/table.js
@@ -148,7 +148,7 @@ define([
       var self = this;
       // if we have a custom query going on, we do not allow sorting.
       if (self.app.inQueryMode()) {
-        self.app.setStatus(_t('Can not order items while querying'));
+        self.app.setStatus({text: _t('Can not order items while querying'), type: 'warning'});
         self.$el.removeClass('order-support');
         return;
       }
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index 61da274..79b8b4d 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -172,6 +172,7 @@ define([
       this.clock.tick(500);
 
       expect(this.app.$('.status').text().trim()).to.equal('Cut "Dummy Object"');
+      expect(this.app.$('.status').hasClass('alert-successss'));
     });
 
     it('custom action menu items', function() {
@@ -202,6 +203,7 @@ define([
       $('a.cutItem', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Cut "Dummy Object"');
+      expect(this.app.$('.status').hasClass('alert-success'));
     });
 
     it('custom action menu items and actions.', function() {
@@ -220,7 +222,7 @@ define([
         return Actions;
       });
       // use it to make it available synchronously.
-      require(['dummytestactions'], function(){});
+      require(['dummytestactions'], function() {});
       this.clock.tick(500);
 
       var model = new Result({
@@ -250,6 +252,7 @@ define([
       $('a.foobar', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Status: foobar clicked');
+      expect(this.app.$('.status').hasClass('alert-warning'));  // default status type
     });
 
     it('custom action menu actions missing.', function() {
@@ -318,7 +321,7 @@ define([
           },
           barbazClicked: function(e) {
             var self = this;
-            self.app.setStatus('Status: barbaz clicked');
+            self.app.setStatus({text: 'Status: barbaz clicked', type: 'success'});
           }
         });
         return Actions;
@@ -360,6 +363,7 @@ define([
       $('a.barbaz', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Status: barbaz clicked');
+      expect(this.app.$('.status').hasClass('alert-success'));
     });
 
     it('custom action menu items in dropdown only', function() {
@@ -976,6 +980,7 @@ define([
       this.clock.tick(1000);
       expect($popover.hasClass('active')).to.equal(false);
       expect(this.$el.find('.order-support .status').html()).to.contain('rearrange');
+      expect(this.app.$('.status').hasClass('alert-successss'));
     });
 
     it('test select all', function() {
@@ -1108,8 +1113,7 @@ define([
         'Set as default page');
       $('a.set-default-page', item).click();
       this.clock.tick(1000);
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'defaulted');
+      expect(this.$el.find('.order-support .status').html()).to.contain('defaulted');
     });
 
     it('test itemRow actionmenu paste click', function() {
@@ -1125,8 +1129,7 @@ define([
       expect($('a.pasteItem', item0).text().trim()).to.equal('Paste');
       $('a.pasteItem', item0).click();
       this.clock.tick(1000);
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'Pasted into "Folder"');
+      expect(this.$el.find('.order-support .status').html()).to.contain('Pasted into "Folder"');
     });
 
     it('test itemRow actionmenu move-top click', function() {
@@ -1142,12 +1145,9 @@ define([
       $('.actionmenu a.move-top', item10).trigger('click');
       this.clock.tick(1000);
 
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'moved');
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'delta=top');
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'id=item9');
+      expect(this.$el.find('.order-support .status').html()).to.contain('moved');
+      expect(this.$el.find('.order-support .status').html()).to.contain('delta=top');
+      expect(this.$el.find('.order-support .status').html()).to.contain('id=item9');
       // No items actually moved, this is to be implemented server-side.
     });
 
@@ -1854,12 +1854,12 @@ define([
           option1: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: option1 selected');
+            self.app.setStatus({text: 'Status: option1 selected', type: 'success'});
           },
           option2: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: option2 selected');
+            self.app.setStatus({text: 'Status: option2 selected', type: 'info'});
           }
         });
         return Actions;
@@ -1872,12 +1872,13 @@ define([
       this.clock.tick(1000);
       // status will be set as defined.
       expect($('.status').text()).to.contain('Status: option1 selected');
+      expect($('.status').hasClass('alert-success'));
 
       $('.actionmenu a.action2', item).trigger('click');
       this.clock.tick(1000);
       // status will be set as defined.
-
       expect($('.status').text()).to.contain('Status: option2 selected');
+      expect($('.status').hasClass('alert-info'));
     });
 
     it('item link triggered', function() {
@@ -1890,7 +1891,7 @@ define([
           handleOther: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: not a folder');
+            self.app.setStatus({text: 'Status: not a folder', type: 'error'});
           }
         });
         return Actions;
@@ -1905,6 +1906,7 @@ define([
       this.clock.tick(1000);
       // status will be set as defined.
       expect($('.status').text()).to.contain('Status: not a folder');
+      expect($('.status').hasClass('alert-error'));
     });
 
   });


Repository: mockup


Branch: refs/heads/master
Date: 2016-04-07T22:53:23+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/8422d425e740d34c81420587473c0ed7fe126506

Merge pull request #658 from plone/customize-status

be able to customize status messages with structure pattern

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/actions.js
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/table.js
M mockup/patterns/structure/templates/table.xml
M mockup/tests/fakeserver.js
M mockup/tests/pattern-structure-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 2efd95d..1702780 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -8,6 +8,10 @@ Incompatibilities:
 
 New:
 
+- Be able to set structure status from server with object of { text: '', label: '', type: 'warning'}
+  so you can customize the status message from ajax handlers.
+  [vangheem]
+
 - Add ``test-dev-ff`` as Makefile target and the related grunt/karma setup to run tests in Firefox.
   [thet]
 
diff --git a/mockup/patterns/structure/js/actions.js b/mockup/patterns/structure/js/actions.js
index c5eb403..e37d957 100644
--- a/mockup/patterns/structure/js/actions.js
+++ b/mockup/patterns/structure/js/actions.js
@@ -72,13 +72,15 @@ define([
         dataType: 'json',
         type: 'POST'
       }).done(function(data) {
+        var msg;
         if (data.status === 'success') {
-          self.app.setStatus(_t(successMsg + ' "' + self.model.attributes.Title + '"'));
+          msg = _t(successMsg + ' "' + self.model.attributes.Title + '"');
           self.app.collection.pager();
           self.app.updateButtons();
         } else {
-          self.app.setStatus(_t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"'));
+          msg = _t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"');
         }
+        self.app.setStatus({text: msg, type: data.status || 'warning'});
       });
     },
 
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index bb88d29..0e24544 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -54,7 +54,7 @@ define([
           var idx = utils.generateId();
           menuOption.idx = idx;
           menuOption.name = key;  // we want to add the action's key as class name to the output.
-          
+
           var category = menuOption.category || 'dropdown';
           if (menuOptionsCategorized[category] === undefined) {
               menuOptionsCategorized[category] = [];
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index 246ca34..4d05ace 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -31,9 +31,12 @@ define([
 
   var AppView = BaseView.extend({
     tagName: 'div',
-    status: '',
+    status: {
+      type: 'warning',
+      text: '',
+      label: ''
+    },
     pasteAllowed: !!$.cookie('__cp'),
-    statusType: 'warning',
     sort_on: 'getObjPositionInParent',
     sort_order: 'ascending',
     additionalCriterias: [],
@@ -324,7 +327,7 @@ define([
       }
       if (data.msg) {
         // give status message somewhere...
-        self.setStatus(data.msg);
+        self.setStatus({text: data.msg, type: data.status || 'warning'});
       }
       if (callback !== null && callback !== undefined) {
         callback(data);
@@ -438,22 +441,39 @@ define([
             self.setStatus(data.msg);
           } else if (data.status !== 'success') {
             // XXX handle error here with something?
-            self.setStatus('error moving item');
+            self.setStatus({text: 'error moving item', type: 'error'});
           }
           self.collection.pager(); // reload it all
         },
         error: function() {
-          self.setStatus('error moving item');
+          self.setStatus({text: 'error moving item', type: 'error'});
         }
       });
     },
-    setStatus: function(txt, type) {
-      this.status = txt;
-      if (type === undefined) {
-        type = 'warning';
+    setStatus: function(msg) {
+      if (!msg) {
+        // clear it
+        this.status.text = '';
+        this.status.label = '';
+        this.status.type = 'warning';
+      } else if (typeof(msg) === 'string') {
+        this.status.text = msg;
+        this.status.label = '';
+        this.status.type = 'warning';
+      } else {
+        // support setting portal status messages here
+        this.status.label = msg.label || '';
+        this.status.text = msg.text;
+        this.status.type = msg.type || 'warning';
       }
-      this.statusType = type;
-      this.$('.status').addClass(type).html(txt);
+      // still need to manually set in case rendering isn't done(especially true for tests)
+      var $status = this.$('.status');
+      $status[0].className = 'alert alert-' + this.status.type + ' status';
+      var $text = $('<span></span>');
+      $text.text(this.status.text);
+      var $label = $('<b></b>');
+      $label.text(this.status.label);
+      $status.empty().append($label).append($text);
     },
     render: function() {
       var self = this;
diff --git a/mockup/patterns/structure/js/views/table.js b/mockup/patterns/structure/js/views/table.js
index eb63a09..36468d8 100644
--- a/mockup/patterns/structure/js/views/table.js
+++ b/mockup/patterns/structure/js/views/table.js
@@ -76,7 +76,6 @@ define([
           }
         ),
         status: self.app.status,
-        statusType: self.app.statusType,
         activeColumns: self.app.activeColumns,
         availableColumns: self.app.availableColumns
       }));
@@ -149,7 +148,7 @@ define([
       var self = this;
       // if we have a custom query going on, we do not allow sorting.
       if (self.app.inQueryMode()) {
-        self.app.setStatus(_t('Can not order items while querying'));
+        self.app.setStatus({text: _t('Can not order items while querying'), type: 'warning'});
         self.$el.removeClass('order-support');
         return;
       }
diff --git a/mockup/patterns/structure/templates/table.xml b/mockup/patterns/structure/templates/table.xml
index e36b636..da2f17f 100644
--- a/mockup/patterns/structure/templates/table.xml
+++ b/mockup/patterns/structure/templates/table.xml
@@ -1,4 +1,7 @@
-<div class="alert alert-<%- statusType %> status"><%- status %></div>
+<div class="alert alert-<%- status.type %> status">
+  <b><%- status.label %></b>
+  <%- status.text %>
+</div>
 
 <table class="table table-striped table-bordered">
   <thead>
diff --git a/mockup/tests/fakeserver.js b/mockup/tests/fakeserver.js
index f4233d3..296e575 100644
--- a/mockup/tests/fakeserver.js
+++ b/mockup/tests/fakeserver.js
@@ -230,7 +230,7 @@ define([
       // staff
       {UID: 'asdfasdf9sdf', Title: 'Mike', path: '/about/staff/mike', portal_type: 'Document'},
       {UID: 'cvbcvb82345', Title: 'Joe', path: '/about/staff/joe', portal_type: 'Document'},
-      
+
       // upload file
       {UID: 'sldlfkjsldkjlskdjf', Title: 'blah.png', path: 'blah.png', portal_type: 'Image'}
 
diff --git a/mockup/tests/pattern-structure-test.js b/mockup/tests/pattern-structure-test.js
index fc5e964..79b8b4d 100644
--- a/mockup/tests/pattern-structure-test.js
+++ b/mockup/tests/pattern-structure-test.js
@@ -172,6 +172,7 @@ define([
       this.clock.tick(500);
 
       expect(this.app.$('.status').text().trim()).to.equal('Cut "Dummy Object"');
+      expect(this.app.$('.status').hasClass('alert-successss'));
     });
 
     it('custom action menu items', function() {
@@ -202,6 +203,7 @@ define([
       $('a.cutItem', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Cut "Dummy Object"');
+      expect(this.app.$('.status').hasClass('alert-success'));
     });
 
     it('custom action menu items and actions.', function() {
@@ -220,7 +222,7 @@ define([
         return Actions;
       });
       // use it to make it available synchronously.
-      require(['dummytestactions'], function(){});
+      require(['dummytestactions'], function() {});
       this.clock.tick(500);
 
       var model = new Result({
@@ -250,9 +252,11 @@ define([
       $('a.foobar', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Status: foobar clicked');
+      expect(this.app.$('.status').hasClass('alert-warning'));  // default status type
     });
 
     it('custom action menu actions missing.', function() {
+      this.app.setStatus(null); // reset
       // Define a custom dummy "module"
       define('dummytestactions', ['backbone'], function(Backbone) {
         var Actions = Backbone.Model.extend({
@@ -301,6 +305,7 @@ define([
 
       // Broken/missing action
       var el = menu.render().el;
+      this.app.setStatus(null); // reset
       $('a.foobar', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('');
@@ -316,7 +321,7 @@ define([
           },
           barbazClicked: function(e) {
             var self = this;
-            self.app.setStatus('Status: barbaz clicked');
+            self.app.setStatus({text: 'Status: barbaz clicked', type: 'success'});
           }
         });
         return Actions;
@@ -358,6 +363,7 @@ define([
       $('a.barbaz', el).click();
       this.clock.tick(500);
       expect(this.app.$('.status').text().trim()).to.equal('Status: barbaz clicked');
+      expect(this.app.$('.status').hasClass('alert-success'));
     });
 
     it('custom action menu items in dropdown only', function() {
@@ -974,6 +980,7 @@ define([
       this.clock.tick(1000);
       expect($popover.hasClass('active')).to.equal(false);
       expect(this.$el.find('.order-support .status').html()).to.contain('rearrange');
+      expect(this.app.$('.status').hasClass('alert-successss'));
     });
 
     it('test select all', function() {
@@ -1106,8 +1113,7 @@ define([
         'Set as default page');
       $('a.set-default-page', item).click();
       this.clock.tick(1000);
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'defaulted');
+      expect(this.$el.find('.order-support .status').html()).to.contain('defaulted');
     });
 
     it('test itemRow actionmenu paste click', function() {
@@ -1123,8 +1129,7 @@ define([
       expect($('a.pasteItem', item0).text().trim()).to.equal('Paste');
       $('a.pasteItem', item0).click();
       this.clock.tick(1000);
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'Pasted into "Folder"');
+      expect(this.$el.find('.order-support .status').html()).to.contain('Pasted into "Folder"');
     });
 
     it('test itemRow actionmenu move-top click', function() {
@@ -1140,12 +1145,9 @@ define([
       $('.actionmenu a.move-top', item10).trigger('click');
       this.clock.tick(1000);
 
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'moved');
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'delta=top');
-      expect(this.$el.find('.order-support .status').html()).to.contain(
-        'id=item9');
+      expect(this.$el.find('.order-support .status').html()).to.contain('moved');
+      expect(this.$el.find('.order-support .status').html()).to.contain('delta=top');
+      expect(this.$el.find('.order-support .status').html()).to.contain('id=item9');
       // No items actually moved, this is to be implemented server-side.
     });
 
@@ -1852,12 +1854,12 @@ define([
           option1: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: option1 selected');
+            self.app.setStatus({text: 'Status: option1 selected', type: 'success'});
           },
           option2: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: option2 selected');
+            self.app.setStatus({text: 'Status: option2 selected', type: 'info'});
           }
         });
         return Actions;
@@ -1870,11 +1872,13 @@ define([
       this.clock.tick(1000);
       // status will be set as defined.
       expect($('.status').text()).to.contain('Status: option1 selected');
+      expect($('.status').hasClass('alert-success'));
 
       $('.actionmenu a.action2', item).trigger('click');
       this.clock.tick(1000);
       // status will be set as defined.
       expect($('.status').text()).to.contain('Status: option2 selected');
+      expect($('.status').hasClass('alert-info'));
     });
 
     it('item link triggered', function() {
@@ -1887,7 +1891,7 @@ define([
           handleOther: function(e) {
             e.preventDefault();
             var self = this;
-            self.app.setStatus('Status: not a folder');
+            self.app.setStatus({text: 'Status: not a folder', type: 'error'});
           }
         });
         return Actions;
@@ -1902,6 +1906,7 @@ define([
       this.clock.tick(1000);
       // status will be set as defined.
       expect($('.status').text()).to.contain('Status: not a folder');
+      expect($('.status').hasClass('alert-error'));
     });
 
   });


