Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2019-02-23T09:01:45+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/67406db7473411d4941f9f669dd7e5de124d87d1

Enable wsgi by default

Files changed:
A news/73.breaking
A src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt
M README.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/wsgi.txt
M src/plone/recipe/zope2instance/tests/zope2instance.txt

b'diff --git a/README.rst b/README.rst\nindex ef94558..0acdc6a 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -77,8 +77,10 @@ initialization\n    whitespace is stripped from the code given. *added in version 4.2.14*\n \n wsgi\n-   Use ``wsgi = on`` in a part to create a Python script that can be used as an\n-   interface for a WSGI server.\n+   By default this recipe creates a Python script that uses ``waitress`` as a\n+   WSGI server.\n+   When running Python 2 you can set ``wsgi = off`` to disable WSGI and enable\n+   ZServer.\n \n Theme resources\n ---------------\ndiff --git a/news/73.breaking b/news/73.breaking\nnew file mode 100644\nindex 0000000..46023bf\n--- /dev/null\n+++ b/news/73.breaking\n@@ -0,0 +1,2 @@\n+Change the default to enable wsgi unless running Python 2 and setting wsgi=off. See https://github.com/plone/Products.CMFPlone/issues/2763\n+[pbauer]\n\\ No newline at end of file\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 0aee689..1ba9d55 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -36,6 +36,7 @@\n import os\n import os.path\n import pkg_resources\n+import six\n import sys\n import xml.sax\n import zdaemon\n@@ -892,20 +893,22 @@ def main(args=None):\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    if options.wsgi:\n-        from Zope2.Startup import serve\n-        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n-        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n-        options.program = [\n-            options.python, options.interpreter, script, wsgi_ini\n-        ]\n-    else:\n+    if six.PY2 and not options.wsgi:\n+        # only use zserver in Python 2 and if wsgi is disabled\n         from ZServer.Zope2.Startup import run\n         script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n         options.program = [\n             options.python, options.interpreter, script, \'-C\',\n             options.configfile\n         ]\n+    else:\n+        # wsgi is the default\n+        from Zope2.Startup import serve\n+        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n+        options.program = [\n+            options.python, options.interpreter, script, wsgi_ini\n+        ]\n \n     c = ZopeCmd(options)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 13fdbf1..b9abe8b 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -22,6 +22,7 @@\n import os.path\n import re\n import shutil\n+import six\n import sys\n import zc.buildout\n import zc.buildout.easy_install\n@@ -108,7 +109,10 @@ def __init__(self, buildout, name, options):\n             buildout[\'buildout\'].get(\'include-site-packages\', \'false\')\n         ) not in (\'off\', \'disable\', \'false\')\n \n-        self.wsgi = options.get(\'wsgi\') in (\'on\', \'waitress\')\n+        self.wsgi = True\n+        if six.PY2 and options.get(\'wsgi\') in (\'off\', \'false\'):\n+            self.wsgi = False\n+\n         # Get Scripts\' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 9fdb6ec..4cabb04 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -8,6 +8,7 @@\n import doctest\n import pkg_resources\n import shutil\n+import six\n import unittest\n \n \n@@ -49,4 +50,11 @@ def test_suite():\n         setUp=setUp,\n         tearDown=tearDown))\n \n+    if six.PY2:\n+        suite.append(doctest.DocFileSuite(\n+            \'zope2instance_zserver.txt\',\n+            optionflags=flags,\n+            setUp=setUp,\n+            tearDown=tearDown))\n+\n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.txt\nindex ec3fdbd..cd38a87 100644\n--- a/src/plone/recipe/zope2instance/tests/wsgi.txt\n+++ b/src/plone/recipe/zope2instance/tests/wsgi.txt\n@@ -24,7 +24,6 @@ plone.recipe.zope2instance::\n     ... recipe = plone.recipe.zope2instance\n     ... eggs =\n     ... user = me:me\n-    ... wsgi = on\n     ... \'\'\' % options)\n \n Let\'s run it::\n@@ -134,7 +133,6 @@ Let\'s create another buildout configuring a custom port and a custom number of w\n     ... user = me:me\n     ... http-address = localhost:6543\n     ... threads = 3\n-    ... wsgi = on\n     ... \'\'\' % options)\n \n Let\'s run it::\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt\nindex fa615d6..c3a71e0 100644\n--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt\n@@ -45,53 +45,14 @@ We should have a zope instance, with a basic zope.conf::\n     instancehome $INSTANCEHOME\n     %define CLIENTHOME .../sample-buildout/var/instance\n     clienthome $CLIENTHOME\n-    <BLANKLINE>\n-    <BLANKLINE>\n     debug-mode off\n     security-policy-implementation C\n     verbose-security off\n     default-zpublisher-encoding utf-8\n-    http-header-max-length 8192\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    zserver-threads 2\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <eventlog>\n-    <BLANKLINE>\n-      level INFO\n-      <logfile>\n-        path .../sample-buildout/var/log/instance.log\n-        level INFO\n-      </logfile>\n-    </eventlog>\n-    <BLANKLINE>\n-    <logger access>\n-      level WARN\n-      <logfile>\n-        path .../sample-buildout/var/log/instance-Z2.log\n-        format %(message)s\n-      </logfile>\n-    </logger>\n-    <BLANKLINE>\n-    <http-server>\n-      address 8080\n-    <BLANKLINE>\n-    </http-server>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n     <zodb_db main>\n         # Main database\n         cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n+        # Blob-enabled FileStorage database\n         <blobstorage>\n           blob-dir .../sample-buildout/var/blobstorage\n           # FileStorage database\n@@ -101,7 +62,6 @@ We should have a zope instance, with a basic zope.conf::\n         </blobstorage>\n         mount-point /\n     </zodb_db>\n-    <BLANKLINE>\n     <zodb_db temporary>\n         # Temporary storage database (for sessions)\n         <temporarystorage>\n@@ -110,14 +70,7 @@ We should have a zope instance, with a basic zope.conf::\n         mount-point /temp_folder\n         container-class Products.TemporaryFolder.TemporaryContainer\n     </zodb_db>\n-    <BLANKLINE>\n-    pid-filename .../sample-buildout/var/instance.pid\n-    lock-filename .../sample-buildout/var/instance.lock\n     python-check-interval 1000\n-    enable-product-installation off\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n \n We should have a blobstorage directory.\n \n@@ -138,117 +91,8 @@ otherwise you get a warning when the zope instance starts up.  The\n FTP and WebDAV\n ==============\n \n-Let\'s start off by adding an FTP address::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... ftp-address = 8021\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our FTP server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <ftp-server>\n-      # valid key is "address"\n-      address 8021\n-    </ftp-server>\n-    ...\n-\n-Next we will add a WebDAV server::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... webdav-address = 1980\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our WebDAV server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <webdav-source-server>\n-      address 1980\n-      force-connection-close off\n-    </webdav-source-server>\n-    ...\n-\n-Next we will add a WebDAV server with force-connection-close on::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... webdav-address = 1980\n-    ... webdav-force-connection-close = on\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n+With wsgi there is no FTP and WebDAV. Use Python 2 and ``wsgi = off`` for that.\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our WebDAV server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <webdav-source-server>\n-      address 1980\n-      force-connection-close on\n-    </webdav-source-server>\n-    ...\n \n DemoStorage\n ===========\n@@ -1346,255 +1190,19 @@ Now zope.conf should include the custom storage wrapper::\n Custom Event log\n ================\n \n-`event-log-custom` is a new option that allows you to create\n-a custom event log section. For example, let\'s say you want\n-to use `rotatezlogs`::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... event-log-custom =\n-    ...     %%import iw.rotatezlogs\n-    ...     <rotatelogfile>\n-    ...         path %(sample_buildout)s/var/log/event.log\n-    ...         max-bytes 1MB\n-    ...         backup-count 5\n-    ...     </rotatelogfile>\n-    ...\n-    ... event-log-level = info\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the custom event log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <eventlog>\n-      level info\n-      %import iw.rotatezlogs\n-      <rotatelogfile>\n-        path .../sample-buildout/var/log/event.log\n-        max-bytes 1MB\n-        backup-count 5\n-      </rotatelogfile>\n-    </eventlog>\n-    ...\n-    <BLANKLINE>\n+`event-log-custom` is only supported for ZServer (Python 2 only).\n \n \n Mailing logger\n ==============\n \n-`mailinglogger` allows you to configure mail actions for the event log::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... mailinglogger =\n-    ...     <mailing-logger>\n-    ...       level error\n-    ...       flood-level 10\n-    ...       smtp-server smtp.mydomain.com\n-    ...       from logger@mydomain.com\n-    ...       to errors@mydomain.com\n-    ...       subject [My domain error]\n-    ...     </mailing-logger>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the mailing logger::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    %import mailinglogger\n-    <eventlog>\n-      <mailing-logger>\n-        level error\n-        flood-level 10\n-        smtp-server smtp.mydomain.com\n-        from logger@mydomain.com\n-        to errors@mydomain.com\n-        subject [My domain error]\n-      </mailing-logger>\n-      level INFO\n-    ...\n-    </eventlog>\n-    ...\n-    <BLANKLINE>\n+`mailinglogger` is only supported for ZServer (Python 2 only).\n \n \n Custom access log\n =================\n \n-`access-log-custom` is a new option that allows you to create\n-a custom event log section. For example, let\'s say you want\n-to use `rotatezlogs`::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... access-log-custom =\n-    ...     %%import iw.rotatezlogs\n-    ...     <rotatelogfile>\n-    ...         path %(sample_buildout)s/var/log/event.log\n-    ...         max-bytes 1MB\n-    ...         backup-count 5\n-    ...     </rotatelogfile>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the custom event log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <logger access>\n-      level WARN\n-      %import iw.rotatezlogs\n-      <rotatelogfile>\n-        path .../sample-buildout/var/log/event.log\n-        max-bytes 1MB\n-        backup-count 5\n-      </rotatelogfile>\n-    </logger>\n-    ...\n-    <BLANKLINE>\n-\n-\n-Disable access log\n-==================\n-\n-If we assign `disable` to `z2-log`, the whole <logger access> section\n-will be omitted::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... z2-log = disable\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with no access log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> "logger access" in zope_conf\n-    False\n-    >>> "eventlog" in zope_conf\n-    True\n-\n-\n-Disable events log\n-==================\n-\n-If we assign `disable` to `event-log`, the whole <eventlog> section\n-will be omitted::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... event-log = disable\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with no access log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> "logger access" in zope_conf\n-    True\n-    >>> "eventlog" in zope_conf\n-    False\n+`access-log-custom`  is only supported for ZServer (Python 2 only).\n \n \n Custom site.zcml file\n@@ -1760,116 +1368,8 @@ Our environment variables should be set now::\n HTTP server\n ===========\n \n-Check additional options to the HTTP server::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... http-force-connection-close = on\n-    ... http-fast-listen = off\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <http-server>\n-      address 8080\n-      force-connection-close on\n-      # Set to off to defer opening of the HTTP socket until the end of the\n-      # startup phase:\n-      fast-listen off\n-    <BLANKLINE>\n-    </http-server>\n-    ...\n-\n-Configuring ZServer workers is also possible using the \'threads\' option:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... threads = 3\n-    ... \'\'\' % options)\n+Http-server options are only supported for ZServer (Python 2 only).\n \n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    zserver-threads 3\n-    ...\n-    <http-server>\n-    ...\n-\n-The \'zserver-threads\' option is deprecated but still working:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zserver-threads = 3\n-    ... \'\'\' % options)\n-\n-Run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\')))\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    zserver-threads 3\n-    ...\n-    <http-server>\n-    ...\n \n Edge Cases\n ==========\n@@ -1964,7 +1464,7 @@ We should have a zope instance script with the custom config file::\n     >>> if WINDOWS:\n     ...     instance_path += \'-script.py\'\n     >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\']..."\n+    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\', \'--wsgi\']..."\n \n Custom Zope Conf Imports\n ========================\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\nnew file mode 100644\nindex 0000000..a8c07cf\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\n@@ -0,0 +1,2170 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance that only runs in Python 2.\n+It ensures the template works fine with ZServer when wsgi is disabled.\n+\n+It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+Let\'s create a minimum buildout that uses the current\n+plone.recipe.zope2instance::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    http-header-max-length 8192\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    zserver-threads 2\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <eventlog>\n+    <BLANKLINE>\n+      level INFO\n+      <logfile>\n+        path .../sample-buildout/var/log/instance.log\n+        level INFO\n+      </logfile>\n+    </eventlog>\n+    <BLANKLINE>\n+    <logger access>\n+      level WARN\n+      <logfile>\n+        path .../sample-buildout/var/log/instance-Z2.log\n+        format %(message)s\n+      </logfile>\n+    </logger>\n+    <BLANKLINE>\n+    <http-server>\n+      address 8080\n+    <BLANKLINE>\n+    </http-server>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    <BLANKLINE>\n+    <zodb_db temporary>\n+        # Temporary storage database (for sessions)\n+        <temporarystorage>\n+          name temporary storage for sessioning\n+        </temporarystorage>\n+        mount-point /temp_folder\n+        container-class Products.TemporaryFolder.TemporaryContainer\n+    </zodb_db>\n+    <BLANKLINE>\n+    pid-filename .../sample-buildout/var/instance.pid\n+    lock-filename .../sample-buildout/var/instance.lock\n+    python-check-interval 1000\n+    enable-product-installation off\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+\n+We should have a blobstorage directory.\n+\n+    >>> ls(\'var\')\n+    d  blobstorage\n+    d  filestorage\n+    d  instance\n+    d  log\n+\n+The blobstorage directory should only be readable by the current user,\n+otherwise you get a warning when the zope instance starts up.  The\n+(POSIX) path mode bits should be 0700.\n+\n+    >>> (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n+    True\n+\n+\n+FTP and WebDAV\n+==============\n+\n+Let\'s start off by adding an FTP address::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... ftp-address = 8021\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our FTP server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <ftp-server>\n+      # valid key is "address"\n+      address 8021\n+    </ftp-server>\n+    ...\n+\n+Next we will add a WebDAV server::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... webdav-address = 1980\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our WebDAV server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <webdav-source-server>\n+      address 1980\n+      force-connection-close off\n+    </webdav-source-server>\n+    ...\n+\n+Next we will add a WebDAV server with force-connection-close on::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... webdav-address = 1980\n+    ... webdav-force-connection-close = on\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our WebDAV server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <webdav-source-server>\n+      address 1980\n+      force-connection-close on\n+    </webdav-source-server>\n+    ...\n+\n+DemoStorage\n+===========\n+\n+To have a DemoStorage configuration, you can use demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demostorage can be disable::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = off\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf without demostorage::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add file storage to the demo-storage to be able to keep\n+changes::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage changes>\n+          path .../sample-buildout/var/demofs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add a blob storage to the demo-storage as well::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+        <blobstorage base>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/demofs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+\n+Finally, you can add only a blob storage. Changes will then not be\n+persisted on disk, but blob support will be available separately (it\'s\n+not supported by the in-memory demostorage)::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # Blob-enabled FileStorage database\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          <demostorage />\n+        </blobstorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+\n+\n+ZlibStorage\n+===========\n+\n+To have a ZlibStorage configuration, you can use zlib-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = active\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress true\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+To have a ZlibStorage configuration with no active compression, you\n+can set the ``zlib-storage`` option to \'passive\'::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = passive\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress false\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+RelStorage\n+==========\n+\n+To have a RelStorage configuration, you can use rel-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type postgresql\n+    ...   dbname zodb\n+    ...   user tarek\n+    ...   host example.com\n+    ...   password secret space\n+    ...   keep-history false\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    %import relstorage\n+        <relstorage>\n+            keep-history false\n+            <postgresql>\n+                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n+            </postgresql>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+ZEO storage\n+===========\n+\n+If you want to connect to a zeo server you specify some additional properties\n+for the plone.recipe.zope2instance recipe.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+If `zeo-client-client` and other relevant ZEO options such as\n+`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n+specified, they should get included in that section as well.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-client-client = persistentcache88\n+    ... min-disconnect-poll = 10\n+    ... max-disconnect-poll = 20\n+    ... zeo-client-blob-cache-size = 5GB\n+    ... zeo-client-blob-cache-size-check = 50\n+    ... zeo-client-read-only-fallback = true\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback true\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+            blob-cache-size 5GB\n+            blob-cache-size-check 50\n+    <BLANKLINE>\n+            client persistentcache88\n+            min-disconnect-poll 10\n+            max-disconnect-poll 20\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        # DemoStorage\n+        <demostorage>\n+        # ZEOStorage database\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        </demostorage>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that blob-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+    # Blob-enabled ZEOStorage database\n+        <zeoclient>\n+          read-only false\n+          read-only-fallback false\n+          blob-dir .../sample-buildout/var/blob\n+          shared-blob-dir no\n+          server 8100\n+          storage 1\n+          name zeostorage\n+          var .../sample-buildout/parts/instance/var\n+          cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied together with\n+before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... before-storage = now\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+        # Blob-enabled ZEOStorage database\n+          <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+          </zeoclient>\n+        </before>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can get specific zeo server address using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can also set multiple zeo server addresses using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            server 127.0.0.1:8102\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Custom storage wrapper\n+======================\n+\n+To add custom configuration around the storage,\n+use the `storage-wrapper` option::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... storage-wrapper =\n+    ...   <foo>\n+    ...   %%s\n+    ...   </foo>\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Now zope.conf should include the custom storage wrapper::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <foo>\n+            # Blob-enabled FileStorage database\n+            ...\n+        </foo>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom Event log\n+================\n+\n+`event-log-custom` is a new option that allows you to create\n+a custom event log section. For example, let\'s say you want\n+to use `rotatezlogs`::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... event-log-custom =\n+    ...     %%import iw.rotatezlogs\n+    ...     <rotatelogfile>\n+    ...         path %(sample_buildout)s/var/log/event.log\n+    ...         max-bytes 1MB\n+    ...         backup-count 5\n+    ...     </rotatelogfile>\n+    ...\n+    ... event-log-level = info\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the custom event log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <eventlog>\n+      level info\n+      %import iw.rotatezlogs\n+      <rotatelogfile>\n+        path .../sample-buildout/var/log/event.log\n+        max-bytes 1MB\n+        backup-count 5\n+      </rotatelogfile>\n+    </eventlog>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Mailing logger\n+==============\n+\n+`mailinglogger` allows you to configure mail actions for the event log::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... mailinglogger =\n+    ...     <mailing-logger>\n+    ...       level error\n+    ...       flood-level 10\n+    ...       smtp-server smtp.mydomain.com\n+    ...       from logger@mydomain.com\n+    ...       to errors@mydomain.com\n+    ...       subject [My domain error]\n+    ...     </mailing-logger>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the mailing logger::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    %import mailinglogger\n+    <eventlog>\n+      <mailing-logger>\n+        level error\n+        flood-level 10\n+        smtp-server smtp.mydomain.com\n+        from logger@mydomain.com\n+        to errors@mydomain.com\n+        subject [My domain error]\n+      </mailing-logger>\n+      level INFO\n+    ...\n+    </eventlog>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom access log\n+=================\n+\n+`access-log-custom` is a new option that allows you to create\n+a custom event log section. For example, let\'s say you want\n+to use `rotatezlogs`::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... access-log-custom =\n+    ...     %%import iw.rotatezlogs\n+    ...     <rotatelogfile>\n+    ...         path %(sample_buildout)s/var/log/event.log\n+    ...         max-bytes 1MB\n+    ...         backup-count 5\n+    ...     </rotatelogfile>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the custom event log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <logger access>\n+      level WARN\n+      %import iw.rotatezlogs\n+      <rotatelogfile>\n+        path .../sample-buildout/var/log/event.log\n+        max-bytes 1MB\n+        backup-count 5\n+      </rotatelogfile>\n+    </logger>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Disable access log\n+==================\n+\n+If we assign `disable` to `z2-log`, the whole <logger access> section\n+will be omitted::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... z2-log = disable\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with no access log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> "logger access" in zope_conf\n+    False\n+    >>> "eventlog" in zope_conf\n+    True\n+\n+\n+Disable events log\n+==================\n+\n+If we assign `disable` to `event-log`, the whole <eventlog> section\n+will be omitted::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... event-log = disable\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with no access log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> "logger access" in zope_conf\n+    True\n+    >>> "eventlog" in zope_conf\n+    False\n+\n+\n+Custom site.zcml file\n+=====================\n+\n+`site-zcml` is a new option that allows you to create a custom site.zcml file.\n+When this option is used the `zcml` option is ignored. Let\'s try it::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... # the zcml option will be ignored when a site-zcml option is given\n+    ... zcml =\n+    ...       test.example\n+    ...\n+    ... site-zcml =\n+    ...       <configure xmlns="http://namespaces.zope.org/zope"\n+    ...                  xmlns:five="http://namespaces.zope.org/five">\n+    ...           <include package="Products.Five" />\n+    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+    ...           <include package="test.example" />\n+    ...       </configure>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run the buildout::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Now let\'s check that we have a zope instance, with the custom site.zcml::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> print(open(os.path.join(instance, \'etc\', \'site.zcml\')).read())\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:five="http://namespaces.zope.org/five">\n+        <include package="Products.Five" />\n+        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+        <include package="test.example" />\n+    </configure>\n+    <BLANKLINE>\n+\n+\n+Environment Variables\n+=====================\n+\n+We can specify environment variables for Zope.  Sometimes it is\n+useful to set the TZ variable if our instance will be moving\n+between several servers::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <environment>\n+      TZ US/Eastern\n+    </environment>\n+    ...\n+\n+Now let\'s add several environment variables::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars =\n+    ...     TZ US/Eastern\n+    ...     TMP /var/tmp\n+    ...     DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> import re\n+    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+Several all on one line::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+\n+HTTP server\n+===========\n+\n+Check additional options to the HTTP server::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... http-force-connection-close = on\n+    ... http-fast-listen = off\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <http-server>\n+      address 8080\n+      force-connection-close on\n+      # Set to off to defer opening of the HTTP socket until the end of the\n+      # startup phase:\n+      fast-listen off\n+    <BLANKLINE>\n+    </http-server>\n+    ...\n+\n+Configuring ZServer workers is also possible using the \'threads\' option:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... threads = 3\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    zserver-threads 3\n+    ...\n+    <http-server>\n+    ...\n+\n+The \'zserver-threads\' option is deprecated but still working:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zserver-threads = 3\n+    ... \'\'\' % options)\n+\n+Run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\')))\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    zserver-threads 3\n+    ...\n+    <http-server>\n+    ...\n+\n+Edge Cases\n+==========\n+\n+Some Linux distributions of Zope2 don\'t have the windows scripts.\n+Let\'s run a minimal buildout without them to make sure\n+we don\'t error::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Relative paths in scripts\n+=========================\n+\n+The recipe supports the generation of scripts with relative paths.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... relative-paths = true\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our generated script now has a reference to the relative path.\n+\n+    >>> import sys\n+    >>>\n+\n+    >>> instance_path = join(\'bin\', \'instance\')\n+    >>> if WINDOWS:\n+    ...     instance_path += \'-script.py\'\n+    >>> open(instance_path).read()\n+    "...base = ...__file__..."\n+\n+Custom Zope Conf\n+=================\n+\n+`zope-conf` is an option that allows you to use a specific Zope config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf = /some/path/my.conf\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance script with the custom config file::\n+\n+    >>> instance_path = join(\'bin\', \'instance\')\n+    >>> if WINDOWS:\n+    ...     instance_path += \'-script.py\'\n+    >>> open(instance_path).read()\n+    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\']..."\n+\n+Custom Zope Conf Imports\n+========================\n+`zope-conf-imports` is an option that allows you to import python packages that\n+define custom zope.conf sections using ZConfig API.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf-imports =\n+    ...   mailinglogger\n+    ...   eea.graylogger\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with custom imports::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %import mailinglogger\n+    %import eea.graylogger\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <BLANKLINE>\n+\n+Resources directory\n+===================\n+\n+`resources` is an option that allows you to register a\n+plone.app.theming resources directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... resources = ${buildout:directory}/myresources\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'myresources\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  998-resources-configure.zcml\n+    >>> cat(includes_path, \'998-resources-configure.zcml\')\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:plone="http://namespaces.plone.org/plone">\n+        <include package="plone.resource" file="meta.zcml"/>\n+        <plone:static directory=".../sample-buildout/myresources"/>\n+    </configure>\n+\n+\n+Locales directory\n+===================\n+\n+`locales` is an option that allows you to register a\n+plone.app.theming locales directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... locales = ${buildout:directory}/mylocales\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'mylocales\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  001-locales-configure.zcml\n+    >>> cat(includes_path, \'001-locales-configure.zcml\')\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:i18n="http://namespaces.zope.org/i18n">\n+        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n+    </configure>\n+\n+\n+Initialization\n+==============\n+\n+`initialization` is an option that allows you to add custom Python\n+code to the initialization process.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... initialization =\n+    ...     print(\'Initialization complete!\')\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should see the given initialization commands included in the instance\n+script::\n+\n+    >>> instance = open(os.path.join(sample_buildout, \'bin\', \'instance\')).read()\n+    >>> "print(\'Initialization complete!\')" in instance\n+    True\n+\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2019-02-23T10:11:40+01:00
Author: Thomas Schorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/f36bc7ee9d3c7ec7d7bc68afdfdc1bed4da9eb7e

Merge pull request #73 from plone/set_wsgi_as_default

Enable wsgi by default

Files changed:
A news/73.breaking
A src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt
M README.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/wsgi.txt
M src/plone/recipe/zope2instance/tests/zope2instance.txt

b'diff --git a/README.rst b/README.rst\nindex ef94558..0acdc6a 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -77,8 +77,10 @@ initialization\n    whitespace is stripped from the code given. *added in version 4.2.14*\n \n wsgi\n-   Use ``wsgi = on`` in a part to create a Python script that can be used as an\n-   interface for a WSGI server.\n+   By default this recipe creates a Python script that uses ``waitress`` as a\n+   WSGI server.\n+   When running Python 2 you can set ``wsgi = off`` to disable WSGI and enable\n+   ZServer.\n \n Theme resources\n ---------------\ndiff --git a/news/73.breaking b/news/73.breaking\nnew file mode 100644\nindex 0000000..46023bf\n--- /dev/null\n+++ b/news/73.breaking\n@@ -0,0 +1,2 @@\n+Change the default to enable wsgi unless running Python 2 and setting wsgi=off. See https://github.com/plone/Products.CMFPlone/issues/2763\n+[pbauer]\n\\ No newline at end of file\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 0aee689..1ba9d55 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -36,6 +36,7 @@\n import os\n import os.path\n import pkg_resources\n+import six\n import sys\n import xml.sax\n import zdaemon\n@@ -892,20 +893,22 @@ def main(args=None):\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    if options.wsgi:\n-        from Zope2.Startup import serve\n-        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n-        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n-        options.program = [\n-            options.python, options.interpreter, script, wsgi_ini\n-        ]\n-    else:\n+    if six.PY2 and not options.wsgi:\n+        # only use zserver in Python 2 and if wsgi is disabled\n         from ZServer.Zope2.Startup import run\n         script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n         options.program = [\n             options.python, options.interpreter, script, \'-C\',\n             options.configfile\n         ]\n+    else:\n+        # wsgi is the default\n+        from Zope2.Startup import serve\n+        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n+        wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n+        options.program = [\n+            options.python, options.interpreter, script, wsgi_ini\n+        ]\n \n     c = ZopeCmd(options)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 13fdbf1..b9abe8b 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -22,6 +22,7 @@\n import os.path\n import re\n import shutil\n+import six\n import sys\n import zc.buildout\n import zc.buildout.easy_install\n@@ -108,7 +109,10 @@ def __init__(self, buildout, name, options):\n             buildout[\'buildout\'].get(\'include-site-packages\', \'false\')\n         ) not in (\'off\', \'disable\', \'false\')\n \n-        self.wsgi = options.get(\'wsgi\') in (\'on\', \'waitress\')\n+        self.wsgi = True\n+        if six.PY2 and options.get(\'wsgi\') in (\'off\', \'false\'):\n+            self.wsgi = False\n+\n         # Get Scripts\' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 9fdb6ec..4cabb04 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -8,6 +8,7 @@\n import doctest\n import pkg_resources\n import shutil\n+import six\n import unittest\n \n \n@@ -49,4 +50,11 @@ def test_suite():\n         setUp=setUp,\n         tearDown=tearDown))\n \n+    if six.PY2:\n+        suite.append(doctest.DocFileSuite(\n+            \'zope2instance_zserver.txt\',\n+            optionflags=flags,\n+            setUp=setUp,\n+            tearDown=tearDown))\n+\n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.txt\nindex ec3fdbd..cd38a87 100644\n--- a/src/plone/recipe/zope2instance/tests/wsgi.txt\n+++ b/src/plone/recipe/zope2instance/tests/wsgi.txt\n@@ -24,7 +24,6 @@ plone.recipe.zope2instance::\n     ... recipe = plone.recipe.zope2instance\n     ... eggs =\n     ... user = me:me\n-    ... wsgi = on\n     ... \'\'\' % options)\n \n Let\'s run it::\n@@ -134,7 +133,6 @@ Let\'s create another buildout configuring a custom port and a custom number of w\n     ... user = me:me\n     ... http-address = localhost:6543\n     ... threads = 3\n-    ... wsgi = on\n     ... \'\'\' % options)\n \n Let\'s run it::\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt\nindex fa615d6..c3a71e0 100644\n--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt\n@@ -45,53 +45,14 @@ We should have a zope instance, with a basic zope.conf::\n     instancehome $INSTANCEHOME\n     %define CLIENTHOME .../sample-buildout/var/instance\n     clienthome $CLIENTHOME\n-    <BLANKLINE>\n-    <BLANKLINE>\n     debug-mode off\n     security-policy-implementation C\n     verbose-security off\n     default-zpublisher-encoding utf-8\n-    http-header-max-length 8192\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    zserver-threads 2\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <eventlog>\n-    <BLANKLINE>\n-      level INFO\n-      <logfile>\n-        path .../sample-buildout/var/log/instance.log\n-        level INFO\n-      </logfile>\n-    </eventlog>\n-    <BLANKLINE>\n-    <logger access>\n-      level WARN\n-      <logfile>\n-        path .../sample-buildout/var/log/instance-Z2.log\n-        format %(message)s\n-      </logfile>\n-    </logger>\n-    <BLANKLINE>\n-    <http-server>\n-      address 8080\n-    <BLANKLINE>\n-    </http-server>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n     <zodb_db main>\n         # Main database\n         cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n+        # Blob-enabled FileStorage database\n         <blobstorage>\n           blob-dir .../sample-buildout/var/blobstorage\n           # FileStorage database\n@@ -101,7 +62,6 @@ We should have a zope instance, with a basic zope.conf::\n         </blobstorage>\n         mount-point /\n     </zodb_db>\n-    <BLANKLINE>\n     <zodb_db temporary>\n         # Temporary storage database (for sessions)\n         <temporarystorage>\n@@ -110,14 +70,7 @@ We should have a zope instance, with a basic zope.conf::\n         mount-point /temp_folder\n         container-class Products.TemporaryFolder.TemporaryContainer\n     </zodb_db>\n-    <BLANKLINE>\n-    pid-filename .../sample-buildout/var/instance.pid\n-    lock-filename .../sample-buildout/var/instance.lock\n     python-check-interval 1000\n-    enable-product-installation off\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n \n We should have a blobstorage directory.\n \n@@ -138,117 +91,8 @@ otherwise you get a warning when the zope instance starts up.  The\n FTP and WebDAV\n ==============\n \n-Let\'s start off by adding an FTP address::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... ftp-address = 8021\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our FTP server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <ftp-server>\n-      # valid key is "address"\n-      address 8021\n-    </ftp-server>\n-    ...\n-\n-Next we will add a WebDAV server::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... webdav-address = 1980\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our WebDAV server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <webdav-source-server>\n-      address 1980\n-      force-connection-close off\n-    </webdav-source-server>\n-    ...\n-\n-Next we will add a WebDAV server with force-connection-close on::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... webdav-address = 1980\n-    ... webdav-force-connection-close = on\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n+With wsgi there is no FTP and WebDAV. Use Python 2 and ``wsgi = off`` for that.\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our WebDAV server should be set up now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <webdav-source-server>\n-      address 1980\n-      force-connection-close on\n-    </webdav-source-server>\n-    ...\n \n DemoStorage\n ===========\n@@ -1346,255 +1190,19 @@ Now zope.conf should include the custom storage wrapper::\n Custom Event log\n ================\n \n-`event-log-custom` is a new option that allows you to create\n-a custom event log section. For example, let\'s say you want\n-to use `rotatezlogs`::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... event-log-custom =\n-    ...     %%import iw.rotatezlogs\n-    ...     <rotatelogfile>\n-    ...         path %(sample_buildout)s/var/log/event.log\n-    ...         max-bytes 1MB\n-    ...         backup-count 5\n-    ...     </rotatelogfile>\n-    ...\n-    ... event-log-level = info\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the custom event log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <eventlog>\n-      level info\n-      %import iw.rotatezlogs\n-      <rotatelogfile>\n-        path .../sample-buildout/var/log/event.log\n-        max-bytes 1MB\n-        backup-count 5\n-      </rotatelogfile>\n-    </eventlog>\n-    ...\n-    <BLANKLINE>\n+`event-log-custom` is only supported for ZServer (Python 2 only).\n \n \n Mailing logger\n ==============\n \n-`mailinglogger` allows you to configure mail actions for the event log::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... mailinglogger =\n-    ...     <mailing-logger>\n-    ...       level error\n-    ...       flood-level 10\n-    ...       smtp-server smtp.mydomain.com\n-    ...       from logger@mydomain.com\n-    ...       to errors@mydomain.com\n-    ...       subject [My domain error]\n-    ...     </mailing-logger>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the mailing logger::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    %import mailinglogger\n-    <eventlog>\n-      <mailing-logger>\n-        level error\n-        flood-level 10\n-        smtp-server smtp.mydomain.com\n-        from logger@mydomain.com\n-        to errors@mydomain.com\n-        subject [My domain error]\n-      </mailing-logger>\n-      level INFO\n-    ...\n-    </eventlog>\n-    ...\n-    <BLANKLINE>\n+`mailinglogger` is only supported for ZServer (Python 2 only).\n \n \n Custom access log\n =================\n \n-`access-log-custom` is a new option that allows you to create\n-a custom event log section. For example, let\'s say you want\n-to use `rotatezlogs`::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... access-log-custom =\n-    ...     %%import iw.rotatezlogs\n-    ...     <rotatelogfile>\n-    ...         path %(sample_buildout)s/var/log/event.log\n-    ...         max-bytes 1MB\n-    ...         backup-count 5\n-    ...     </rotatelogfile>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with the custom event log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <logger access>\n-      level WARN\n-      %import iw.rotatezlogs\n-      <rotatelogfile>\n-        path .../sample-buildout/var/log/event.log\n-        max-bytes 1MB\n-        backup-count 5\n-      </rotatelogfile>\n-    </logger>\n-    ...\n-    <BLANKLINE>\n-\n-\n-Disable access log\n-==================\n-\n-If we assign `disable` to `z2-log`, the whole <logger access> section\n-will be omitted::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... z2-log = disable\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with no access log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> "logger access" in zope_conf\n-    False\n-    >>> "eventlog" in zope_conf\n-    True\n-\n-\n-Disable events log\n-==================\n-\n-If we assign `disable` to `event-log`, the whole <eventlog> section\n-will be omitted::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ...\n-    ... event-log = disable\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with no access log::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> "logger access" in zope_conf\n-    True\n-    >>> "eventlog" in zope_conf\n-    False\n+`access-log-custom`  is only supported for ZServer (Python 2 only).\n \n \n Custom site.zcml file\n@@ -1760,116 +1368,8 @@ Our environment variables should be set now::\n HTTP server\n ===========\n \n-Check additional options to the HTTP server::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... http-force-connection-close = on\n-    ... http-fast-listen = off\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <http-server>\n-      address 8080\n-      force-connection-close on\n-      # Set to off to defer opening of the HTTP socket until the end of the\n-      # startup phase:\n-      fast-listen off\n-    <BLANKLINE>\n-    </http-server>\n-    ...\n-\n-Configuring ZServer workers is also possible using the \'threads\' option:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... threads = 3\n-    ... \'\'\' % options)\n+Http-server options are only supported for ZServer (Python 2 only).\n \n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    zserver-threads 3\n-    ...\n-    <http-server>\n-    ...\n-\n-The \'zserver-threads\' option is deprecated but still working:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zserver-threads = 3\n-    ... \'\'\' % options)\n-\n-Run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\')))\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-And check it::\n-\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    zserver-threads 3\n-    ...\n-    <http-server>\n-    ...\n \n Edge Cases\n ==========\n@@ -1964,7 +1464,7 @@ We should have a zope instance script with the custom config file::\n     >>> if WINDOWS:\n     ...     instance_path += \'-script.py\'\n     >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\']..."\n+    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\', \'--wsgi\']..."\n \n Custom Zope Conf Imports\n ========================\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\nnew file mode 100644\nindex 0000000..a8c07cf\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\n@@ -0,0 +1,2170 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance that only runs in Python 2.\n+It ensures the template works fine with ZServer when wsgi is disabled.\n+\n+It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+Let\'s create a minimum buildout that uses the current\n+plone.recipe.zope2instance::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    http-header-max-length 8192\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    zserver-threads 2\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <eventlog>\n+    <BLANKLINE>\n+      level INFO\n+      <logfile>\n+        path .../sample-buildout/var/log/instance.log\n+        level INFO\n+      </logfile>\n+    </eventlog>\n+    <BLANKLINE>\n+    <logger access>\n+      level WARN\n+      <logfile>\n+        path .../sample-buildout/var/log/instance-Z2.log\n+        format %(message)s\n+      </logfile>\n+    </logger>\n+    <BLANKLINE>\n+    <http-server>\n+      address 8080\n+    <BLANKLINE>\n+    </http-server>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    <BLANKLINE>\n+    <zodb_db temporary>\n+        # Temporary storage database (for sessions)\n+        <temporarystorage>\n+          name temporary storage for sessioning\n+        </temporarystorage>\n+        mount-point /temp_folder\n+        container-class Products.TemporaryFolder.TemporaryContainer\n+    </zodb_db>\n+    <BLANKLINE>\n+    pid-filename .../sample-buildout/var/instance.pid\n+    lock-filename .../sample-buildout/var/instance.lock\n+    python-check-interval 1000\n+    enable-product-installation off\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+\n+We should have a blobstorage directory.\n+\n+    >>> ls(\'var\')\n+    d  blobstorage\n+    d  filestorage\n+    d  instance\n+    d  log\n+\n+The blobstorage directory should only be readable by the current user,\n+otherwise you get a warning when the zope instance starts up.  The\n+(POSIX) path mode bits should be 0700.\n+\n+    >>> (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n+    True\n+\n+\n+FTP and WebDAV\n+==============\n+\n+Let\'s start off by adding an FTP address::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... ftp-address = 8021\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our FTP server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <ftp-server>\n+      # valid key is "address"\n+      address 8021\n+    </ftp-server>\n+    ...\n+\n+Next we will add a WebDAV server::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... webdav-address = 1980\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our WebDAV server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <webdav-source-server>\n+      address 1980\n+      force-connection-close off\n+    </webdav-source-server>\n+    ...\n+\n+Next we will add a WebDAV server with force-connection-close on::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... webdav-address = 1980\n+    ... webdav-force-connection-close = on\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our WebDAV server should be set up now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <webdav-source-server>\n+      address 1980\n+      force-connection-close on\n+    </webdav-source-server>\n+    ...\n+\n+DemoStorage\n+===========\n+\n+To have a DemoStorage configuration, you can use demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demostorage can be disable::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = off\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf without demostorage::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add file storage to the demo-storage to be able to keep\n+changes::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage changes>\n+          path .../sample-buildout/var/demofs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add a blob storage to the demo-storage as well::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+        <blobstorage base>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/demofs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+\n+Finally, you can add only a blob storage. Changes will then not be\n+persisted on disk, but blob support will be available separately (it\'s\n+not supported by the in-memory demostorage)::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # Blob-enabled FileStorage database\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          <demostorage />\n+        </blobstorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+\n+\n+ZlibStorage\n+===========\n+\n+To have a ZlibStorage configuration, you can use zlib-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = active\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress true\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+To have a ZlibStorage configuration with no active compression, you\n+can set the ``zlib-storage`` option to \'passive\'::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = passive\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress false\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+RelStorage\n+==========\n+\n+To have a RelStorage configuration, you can use rel-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type postgresql\n+    ...   dbname zodb\n+    ...   user tarek\n+    ...   host example.com\n+    ...   password secret space\n+    ...   keep-history false\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    %import relstorage\n+        <relstorage>\n+            keep-history false\n+            <postgresql>\n+                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n+            </postgresql>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+ZEO storage\n+===========\n+\n+If you want to connect to a zeo server you specify some additional properties\n+for the plone.recipe.zope2instance recipe.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+If `zeo-client-client` and other relevant ZEO options such as\n+`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n+specified, they should get included in that section as well.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-client-client = persistentcache88\n+    ... min-disconnect-poll = 10\n+    ... max-disconnect-poll = 20\n+    ... zeo-client-blob-cache-size = 5GB\n+    ... zeo-client-blob-cache-size-check = 50\n+    ... zeo-client-read-only-fallback = true\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback true\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+            blob-cache-size 5GB\n+            blob-cache-size-check 50\n+    <BLANKLINE>\n+            client persistentcache88\n+            min-disconnect-poll 10\n+            max-disconnect-poll 20\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        # DemoStorage\n+        <demostorage>\n+        # ZEOStorage database\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        </demostorage>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that blob-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+    # Blob-enabled ZEOStorage database\n+        <zeoclient>\n+          read-only false\n+          read-only-fallback false\n+          blob-dir .../sample-buildout/var/blob\n+          shared-blob-dir no\n+          server 8100\n+          storage 1\n+          name zeostorage\n+          var .../sample-buildout/parts/instance/var\n+          cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied together with\n+before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... before-storage = now\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+        # Blob-enabled ZEOStorage database\n+          <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+          </zeoclient>\n+        </before>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can get specific zeo server address using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can also set multiple zeo server addresses using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            server 127.0.0.1:8102\n+            storage 1\n+            name zeostorage\n+            var .../sample-buildout/parts/instance/var\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Custom storage wrapper\n+======================\n+\n+To add custom configuration around the storage,\n+use the `storage-wrapper` option::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... storage-wrapper =\n+    ...   <foo>\n+    ...   %%s\n+    ...   </foo>\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Now zope.conf should include the custom storage wrapper::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <foo>\n+            # Blob-enabled FileStorage database\n+            ...\n+        </foo>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom Event log\n+================\n+\n+`event-log-custom` is a new option that allows you to create\n+a custom event log section. For example, let\'s say you want\n+to use `rotatezlogs`::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... event-log-custom =\n+    ...     %%import iw.rotatezlogs\n+    ...     <rotatelogfile>\n+    ...         path %(sample_buildout)s/var/log/event.log\n+    ...         max-bytes 1MB\n+    ...         backup-count 5\n+    ...     </rotatelogfile>\n+    ...\n+    ... event-log-level = info\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the custom event log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <eventlog>\n+      level info\n+      %import iw.rotatezlogs\n+      <rotatelogfile>\n+        path .../sample-buildout/var/log/event.log\n+        max-bytes 1MB\n+        backup-count 5\n+      </rotatelogfile>\n+    </eventlog>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Mailing logger\n+==============\n+\n+`mailinglogger` allows you to configure mail actions for the event log::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... mailinglogger =\n+    ...     <mailing-logger>\n+    ...       level error\n+    ...       flood-level 10\n+    ...       smtp-server smtp.mydomain.com\n+    ...       from logger@mydomain.com\n+    ...       to errors@mydomain.com\n+    ...       subject [My domain error]\n+    ...     </mailing-logger>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the mailing logger::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    %import mailinglogger\n+    <eventlog>\n+      <mailing-logger>\n+        level error\n+        flood-level 10\n+        smtp-server smtp.mydomain.com\n+        from logger@mydomain.com\n+        to errors@mydomain.com\n+        subject [My domain error]\n+      </mailing-logger>\n+      level INFO\n+    ...\n+    </eventlog>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom access log\n+=================\n+\n+`access-log-custom` is a new option that allows you to create\n+a custom event log section. For example, let\'s say you want\n+to use `rotatezlogs`::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... access-log-custom =\n+    ...     %%import iw.rotatezlogs\n+    ...     <rotatelogfile>\n+    ...         path %(sample_buildout)s/var/log/event.log\n+    ...         max-bytes 1MB\n+    ...         backup-count 5\n+    ...     </rotatelogfile>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with the custom event log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <logger access>\n+      level WARN\n+      %import iw.rotatezlogs\n+      <rotatelogfile>\n+        path .../sample-buildout/var/log/event.log\n+        max-bytes 1MB\n+        backup-count 5\n+      </rotatelogfile>\n+    </logger>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Disable access log\n+==================\n+\n+If we assign `disable` to `z2-log`, the whole <logger access> section\n+will be omitted::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... z2-log = disable\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with no access log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> "logger access" in zope_conf\n+    False\n+    >>> "eventlog" in zope_conf\n+    True\n+\n+\n+Disable events log\n+==================\n+\n+If we assign `disable` to `event-log`, the whole <eventlog> section\n+will be omitted::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ...\n+    ... event-log = disable\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with no access log::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> "logger access" in zope_conf\n+    True\n+    >>> "eventlog" in zope_conf\n+    False\n+\n+\n+Custom site.zcml file\n+=====================\n+\n+`site-zcml` is a new option that allows you to create a custom site.zcml file.\n+When this option is used the `zcml` option is ignored. Let\'s try it::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... # the zcml option will be ignored when a site-zcml option is given\n+    ... zcml =\n+    ...       test.example\n+    ...\n+    ... site-zcml =\n+    ...       <configure xmlns="http://namespaces.zope.org/zope"\n+    ...                  xmlns:five="http://namespaces.zope.org/five">\n+    ...           <include package="Products.Five" />\n+    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+    ...           <include package="test.example" />\n+    ...       </configure>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run the buildout::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Now let\'s check that we have a zope instance, with the custom site.zcml::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> print(open(os.path.join(instance, \'etc\', \'site.zcml\')).read())\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:five="http://namespaces.zope.org/five">\n+        <include package="Products.Five" />\n+        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+        <include package="test.example" />\n+    </configure>\n+    <BLANKLINE>\n+\n+\n+Environment Variables\n+=====================\n+\n+We can specify environment variables for Zope.  Sometimes it is\n+useful to set the TZ variable if our instance will be moving\n+between several servers::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <environment>\n+      TZ US/Eastern\n+    </environment>\n+    ...\n+\n+Now let\'s add several environment variables::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars =\n+    ...     TZ US/Eastern\n+    ...     TMP /var/tmp\n+    ...     DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> import re\n+    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+Several all on one line::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+\n+HTTP server\n+===========\n+\n+Check additional options to the HTTP server::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... http-force-connection-close = on\n+    ... http-fast-listen = off\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <http-server>\n+      address 8080\n+      force-connection-close on\n+      # Set to off to defer opening of the HTTP socket until the end of the\n+      # startup phase:\n+      fast-listen off\n+    <BLANKLINE>\n+    </http-server>\n+    ...\n+\n+Configuring ZServer workers is also possible using the \'threads\' option:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... threads = 3\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    zserver-threads 3\n+    ...\n+    <http-server>\n+    ...\n+\n+The \'zserver-threads\' option is deprecated but still working:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zserver-threads = 3\n+    ... \'\'\' % options)\n+\n+Run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\')))\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+And check it::\n+\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    zserver-threads 3\n+    ...\n+    <http-server>\n+    ...\n+\n+Edge Cases\n+==========\n+\n+Some Linux distributions of Zope2 don\'t have the windows scripts.\n+Let\'s run a minimal buildout without them to make sure\n+we don\'t error::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Relative paths in scripts\n+=========================\n+\n+The recipe supports the generation of scripts with relative paths.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... relative-paths = true\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+Our generated script now has a reference to the relative path.\n+\n+    >>> import sys\n+    >>>\n+\n+    >>> instance_path = join(\'bin\', \'instance\')\n+    >>> if WINDOWS:\n+    ...     instance_path += \'-script.py\'\n+    >>> open(instance_path).read()\n+    "...base = ...__file__..."\n+\n+Custom Zope Conf\n+=================\n+\n+`zope-conf` is an option that allows you to use a specific Zope config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf = /some/path/my.conf\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance script with the custom config file::\n+\n+    >>> instance_path = join(\'bin\', \'instance\')\n+    >>> if WINDOWS:\n+    ...     instance_path += \'-script.py\'\n+    >>> open(instance_path).read()\n+    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\']..."\n+\n+Custom Zope Conf Imports\n+========================\n+`zope-conf-imports` is an option that allows you to import python packages that\n+define custom zope.conf sections using ZConfig API.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf-imports =\n+    ...   mailinglogger\n+    ...   eea.graylogger\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should have a zope instance, with custom imports::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %import mailinglogger\n+    %import eea.graylogger\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <BLANKLINE>\n+\n+Resources directory\n+===================\n+\n+`resources` is an option that allows you to register a\n+plone.app.theming resources directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... resources = ${buildout:directory}/myresources\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'myresources\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  998-resources-configure.zcml\n+    >>> cat(includes_path, \'998-resources-configure.zcml\')\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:plone="http://namespaces.plone.org/plone">\n+        <include package="plone.resource" file="meta.zcml"/>\n+        <plone:static directory=".../sample-buildout/myresources"/>\n+    </configure>\n+\n+\n+Locales directory\n+===================\n+\n+`locales` is an option that allows you to register a\n+plone.app.theming locales directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... locales = ${buildout:directory}/mylocales\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'mylocales\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  001-locales-configure.zcml\n+    >>> cat(includes_path, \'001-locales-configure.zcml\')\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:i18n="http://namespaces.zope.org/i18n">\n+        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n+    </configure>\n+\n+\n+Initialization\n+==============\n+\n+`initialization` is an option that allows you to add custom Python\n+code to the initialization process.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... initialization =\n+    ...     print(\'Initialization complete!\')\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling instance.\n+    Installing instance.\n+    Generated script \'...instance\'.\n+    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n+\n+We should see the given initialization commands included in the instance\n+script::\n+\n+    >>> instance = open(os.path.join(sample_buildout, \'bin\', \'instance\')).read()\n+    >>> "print(\'Initialization complete!\')" in instance\n+    True\n+\n'

