Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-03-30T10:35:07+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.event/commit/e2b80c895478cd267e94e9ebf3f3ea3712dccac5

Update event.js and remove plone-legacy bundle

Files changed:
A news/350.bugfix
M plone/app/event/browser/resources/event.js
M plone/app/event/profiles/default/metadata.xml
M plone/app/event/profiles/default/registry.xml

b'diff --git a/news/350.bugfix b/news/350.bugfix\nnew file mode 100644\nindex 00000000..663945ae\n--- /dev/null\n+++ b/news/350.bugfix\n@@ -0,0 +1,2 @@\n+remove `plone-legacy` bundle and update eventedit script.\n+[petschki, thet]\ndiff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js\nindex 8abc6f52..da466322 100644\n--- a/plone/app/event/browser/resources/event.js\n+++ b/plone/app/event/browser/resources/event.js\n@@ -1,262 +1,87 @@\n-/* jslint browser: true */\n-/* globals require */\n-\n-(function($) {\n-\n-  var eventedit = {\n-\n-    start_end_delta: 1 / 24, // Delta in days\n-\n-    // DOM ELEMENTS\n-    $start_input: undefined,\n-    $start_container: undefined,\n-    $pickadate_starttime: undefined,\n-    $end_input: undefined,\n-    $end_container: undefined,\n-    $pickadate_endtime: undefined,\n-    $whole_day_input: undefined,\n-    $open_end_input: undefined,\n-\n-    get_dom_element: function (sel, $container) {\n-      /* Try to get the DOM element from a selector and return it or return undefined.\n-       * */\n-      var $el;\n-      if ($container) {\n-        $el = $(sel, $container);\n-      } else {\n-        $el = $(sel);\n-      }\n-      return $el.length ? $el : undefined;\n-    },\n-\n-    getDateTime: function (datetimewidget) {\n-      var date, time, datetime, set_time;\n-      date = $(\'input[name="_submit"]:first\', datetimewidget).prop(\'value\');\n-      if (!date) {\n-        return;\n-      }\n-      date = date.split(\'-\');\n-      time = $(\'input[name="_submit"]:last\', datetimewidget).prop(\'value\');\n-      if (!time) {\n-        // can happen with optional start/end dates without default values.\n-        set_time = true;\n-        time = \'00:00\';\n-      }\n-      time = time.split(\':\');\n-\n-      // We can\'t just parse the ``date + \'T\' + time`` string, because of\n-      // Chromium bug: https://code.google.com/p/chromium/issues/detail?id=145198\n-      // When passing date and time components, the passed date/time is\n-      // interpreted as local time and not UTC.\n-      datetime = new Date(\n-        parseInt(date[0], 10),\n-        parseInt(date[1], 10) - 1, // you know, javascript\'s month index starts with 0\n-        parseInt(date[2], 10),\n-        parseInt(time[0], 10),\n-        parseInt(time[1], 10)\n-      );\n-      if (set_time) {\n-        // we have a date but no time?! set it.\n-        $(\'.pattern-pickadate-time\', datetimewidget)\n-          .pickatime(\'picker\')\n-          .set(\'select\', datetime);\n-      }\n-      return datetime;\n-    },\n-\n-    initStartEndDelta: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      // delta in days\n-      this.start_end_delta = (end_datetime - start_datetime) / 1000 / 60;\n-    },\n-\n-    updateEndDate: function (start_container, end_container) {\n-      var start_date = this.getDateTime(start_container);\n-      if (!start_date) {\n-        return;\n+function is_valid_date(date) {\n+  // https://stackoverflow.com/a/1353711/1337474\n+  return date instanceof Date && !isNaN(date);\n+}\n+\n+function tzaware_date(date) {\n+  tzoffset = -date.getTimezoneOffset() * 60 * 1000;\n+  date.setTime(date.getTime() + tzoffset);\n+  return date;\n+}\n+\n+function add_hours(date, hours) {\n+  // https://stackoverflow.com/a/1050782/1337474\n+  date.setTime(date.getTime() + hours * 60 * 60 * 1000);\n+  return date;\n+}\n+\n+function set_date(el, datevalue) {\n+  var date = new Date(datevalue); // change to Date to enforce datetime isostrings.\n+  if (!is_valid_date(date)) {\n+    return;\n+  }\n+  isostring = tzaware_date(date).toISOString();\n+  if (el.type === "date") {\n+    el.value = isostring.split("T")[0];\n+  } else if (el.type === "datetime-local") {\n+    el.value = isostring.split(".")[0];\n+  }\n+}\n+\n+document.addEventListener("DOMContentLoaded", function() {\n+\n+  var event_edit__open_end = document.querySelector("input[name=\'form.widgets.IEventBasic.open_end:list\'], input[name=\'form.widgets.IEventBasicNonRequired.open_end:list\']"); // prettier-ignore\n+  var event_edit__whole_day = document.querySelector("input[name=\'form.widgets.IEventBasic.whole_day:list\'], input[name=\'form.widgets.IEventBasicNonRequired.whole_day:list\']"); // prettier-ignore\n+  var event_edit__start = document.querySelector("[name=\'form.widgets.IEventBasic.start\'], [name=\'form.widgets.IEventBasicNonRequired.start\']"); // prettier-ignore\n+  var event_edit__end = document.querySelector("[name=\'form.widgets.IEventBasic.end\'], [name=\'form.widgets.IEventBasicNonRequired.end\']"); // prettier-ignore\n+\n+  var start_val;\n+  var end_val;\n+\n+  if (event_edit__start) {\n+    event_edit__start.addEventListener("change", function () {\n+      start_val = event_edit__start.value;\n+      end_val = event_edit__end.value;\n+      var _start = new Date(start_val);\n+      var _end = new Date(end_val);\n+      if (!is_valid_date(_end) || _end < _start) {\n+        _end = _start;\n+        _end = add_hours(_end, 1);\n+        end_val = _end.toISOString();\n+        set_date(event_edit__end, end_val);\n       }\n+    });\n+  }\n \n-      var new_end_date = new Date(start_date);\n-      new_end_date.setMinutes(start_date.getMinutes() + this.start_end_delta);\n-\n-      $(\'.pattern-pickadate-date\', end_container)\n-        .pickadate(\'picker\')\n-        .set(\'select\', new_end_date);\n-      $(\'.pattern-pickadate-time\', end_container)\n-        .pickatime(\'picker\')\n-        .set(\'select\', new_end_date);\n-    },\n-\n-    validateEndDate: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      if (end_datetime < start_datetime) {\n-        start_container.addClass(\'error\');\n+  if (event_edit__open_end) {\n+    event_edit__open_end.addEventListener("input", function () {\n+      if (event_edit__open_end.checked) {\n+        $(event_edit__end.closest(".field")).hide();\n       } else {\n-        end_container.removeClass(\'error\');\n+        $(event_edit__end.closest(".field")).show();\n       }\n-    },\n-\n-    show_hide_widget: function (widget, hide, fade) {\n-      var $widget = $(widget);\n-      if (hide === true) {\n-        if (fade === true) {\n-          $widget.fadeOut();\n-        } else {\n-          $widget.hide();\n-        }\n+    });\n+  }\n+\n+  if (event_edit__whole_day) {\n+    event_edit__whole_day.addEventListener("input", function () {\n+      start_val = event_edit__start.value;\n+      end_val = event_edit__end.value;\n+      if (event_edit__whole_day.checked) {\n+        event_edit__start.type = "date";\n+        event_edit__end.type = "date";\n       } else {\n-        if (fade === true) {\n-          $widget.fadeIn();\n-        } else {\n-          $widget.show();\n-        }\n-      }\n-    },\n-\n-    event_listing_calendar_init: function (cal) {\n-      // Dateinput selector for event_listing view\n-      if ($().dateinput && cal.length > 0) {\n-        var get_req_param, val;\n-        get_req_param = function(name) {\n-          // http://stackoverflow.com/questions/831030/how-to-get-get-request-parameters-in-javascript\n-          if (\n-            name ===\n-            new RegExp(\'[?&]\' + encodeURIComponent(name) + \'=([^&]*)\').exec(\n-              window.location.search\n-            )\n-          ) {\n-            return decodeURIComponent(name[1]);\n-          }\n-        };\n-        // Preselect current date, if exists\n-        val = get_req_param(\'date\');\n-        if (val === undefined) {\n-          val = new Date();\n-        } else {\n-          val = new Date(val);\n-        }\n-        cal\n-          .dateinput({\n-            selectors: true,\n-            trigger: true,\n-            format: \'yyyy-mm-dd\',\n-            yearRange: [-10, 10],\n-            firstDay: 1,\n-            value: val,\n-            change: function() {\n-              var value = this.getValue(\'yyyy-mm-dd\');\n-              window.location.href = \'event_listing?mode=day&date=\' + value;\n-            }\n-          })\n-          .unbind(\'change\')\n-          .bind(\'onShow\', function() {\n-            var trigger_offset = $(this).next().offset();\n-            $(this).data(\'dateinput\').getCalendar().offset({\n-              top: trigger_offset.top + 20,\n-              left: trigger_offset.left\n-            });\n-          });\n-      }\n-    },\n-\n-    initilize_event: function () {\n-\n-      var $start_container = this.$start_container,\n-          $end_container = this.$end_container,\n-          $pickadate_starttime = this.$pickadate_starttime,\n-          $pickadate_endtime = this.$pickadate_endtime,\n-          $open_end_input = this.$open_end_input,\n-          $whole_day_input = this.$whole_day_input;\n-\n-      // WHOLE DAY INIT\n-      if ($whole_day_input.length > 0) {\n-        $whole_day_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($pickadate_starttime, e.target.checked, true);\n-          this.show_hide_widget($pickadate_endtime, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget(\n-          $pickadate_starttime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n-        this.show_hide_widget(\n-          $pickadate_endtime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n+        event_edit__start.type = "datetime-local";\n+        event_edit__end.type = "datetime-local";\n       }\n-\n-      // OPEN END INIT\n-      if ($open_end_input.length > 0) {\n-        $open_end_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($end_container, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget($end_container, $open_end_input.get(0).checked, false);\n+      // set start/end values with current hours when switching back to\n+      // datetime-local\n+      if(start_val.indexOf("T") == -1) {\n+        start_val = `${start_val}T${(new Date()).getHours()}:00`;\n+        end_val = `${end_val}T${(new Date()).getHours() + 1}:00`;\n       }\n-\n-      // START/END SETTING/VALIDATION\n-      $start_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $start_container.on(\'change\', \'.picker__input\', function() {\n-        this.updateEndDate($start_container, $end_container);\n-      }.bind(this));\n-      \n-      $end_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $end_container.on(\'change\', \'.picker__input\', function() {\n-        this.validateEndDate($start_container, $end_container);\n-      }.bind(this));\n-\n-    },\n-  \n-  };\n-\n-  $(document).ready(function() {\n-\n-    eventedit.$start_input = eventedit.get_dom_element(\'form input.event_start\');\n-    if (!eventedit.$start_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-    eventedit.$end_input = eventedit.get_dom_element(\'form input.event_end\');\n-    if (!eventedit.$end_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-\n-    eventedit.$start_container = eventedit.$start_input.closest(\'div\');\n-    eventedit.$end_container   = eventedit.$end_input.closest(\'div\');\n-    eventedit.$whole_day_input = eventedit.get_dom_element(\'form input.event_whole_day\');\n-    eventedit.$open_end_input  = eventedit.get_dom_element(\'form input.event_open_end\');\n-\n-    var interval = setInterval(function() {\n-      eventedit.$pickadate_starttime = !eventedit.$pickadate_starttime && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$start_container);\n-      eventedit.$pickadate_endtime   = !eventedit.$pickadate_endtime   && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$end_container);\n-\n-      if (\n-        eventedit.$pickadate_starttime &&\n-        eventedit.$pickadate_endtime\n-      ) {\n-        clearInterval(interval);\n-        eventedit.initilize_event();\n-      }\n-    }, 100);\n-\n-    // EVENT LISTING CALENDAR POPUP\n-    eventedit.event_listing_calendar_init($(\'#event_listing_calendar\'));\n-\n-  });\n-})(jQuery);\n+      set_date(event_edit__start, start_val);\n+      set_date(event_edit__end, end_val);\n+    });\n+  }\n+});\ndiff --git a/plone/app/event/profiles/default/metadata.xml b/plone/app/event/profiles/default/metadata.xml\nindex d7cd1512..4479ed4c 100644\n--- a/plone/app/event/profiles/default/metadata.xml\n+++ b/plone/app/event/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>15</version>\n+  <version>16</version>\n   <dependencies>\n     <dependency>profile-plone.app.registry:default</dependency>\n     <dependency>profile-plone.app.z3cform:default</dependency>\ndiff --git a/plone/app/event/profiles/default/registry.xml b/plone/app/event/profiles/default/registry.xml\nindex d61b9cdd..85f2a8b1 100644\n--- a/plone/app/event/profiles/default/registry.xml\n+++ b/plone/app/event/profiles/default/registry.xml\n@@ -1,16 +1,13 @@\n <?xml version="1.0"?>\n <registry>\n \n-  <records prefix="plone.resources/plone-app-event"\n-            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n-      <value key="js">++plone++plone.app.event/event.js</value>\n-  </records>\n-  <records prefix="plone.bundles/plone-legacy"\n-            interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n-    <value key="resources" purge="false">\n-      <element>plone-app-event</element>\n-    </value>\n-    <value key="last_compilation"></value>\n+  <records prefix="plone.bundles/eventedit" interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n+    <value key="enabled">True</value>\n+    <!-- <value key="expression">python: member is not None</value> -->\n+    <value key="jscompilation">++plone++plone.app.event/event.js</value>\n+    <value key="csscompilation"></value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n   </records>\n \n </registry>\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-03-30T10:57:55+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.event/commit/3b8c1f8c37b9bf7619f246aef1914c3d3b3b9253

also update "open end" and "whole day" elements on load when editing existing events

Files changed:
M plone/app/event/browser/resources/event.js

b'diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js\nindex da466322..962bb824 100644\n--- a/plone/app/event/browser/resources/event.js\n+++ b/plone/app/event/browser/resources/event.js\n@@ -28,6 +28,34 @@ function set_date(el, datevalue) {\n   }\n }\n \n+function open_end_toggle(event_edit__open_end, event_edit__end) {\n+  if (event_edit__open_end.checked) {\n+    $(event_edit__end.closest(".field")).hide();\n+  } else {\n+    $(event_edit__end.closest(".field")).show();\n+  }\n+}\n+\n+function whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end) {\n+  start_val = event_edit__start.value;\n+  end_val = event_edit__end.value;\n+  if (event_edit__whole_day.checked) {\n+    event_edit__start.type = "date";\n+    event_edit__end.type = "date";\n+  } else {\n+    event_edit__start.type = "datetime-local";\n+    event_edit__end.type = "datetime-local";\n+  }\n+  // set start/end values with current hours when switching back to\n+  // datetime-local\n+  if(start_val.indexOf("T") == -1) {\n+    start_val = `${start_val}T${(new Date()).getHours()}:00`;\n+    end_val = `${end_val}T${(new Date()).getHours() + 1}:00`;\n+  }\n+  set_date(event_edit__start, start_val);\n+  set_date(event_edit__end, end_val);\n+}\n+\n document.addEventListener("DOMContentLoaded", function() {\n \n   var event_edit__open_end = document.querySelector("input[name=\'form.widgets.IEventBasic.open_end:list\'], input[name=\'form.widgets.IEventBasicNonRequired.open_end:list\']"); // prettier-ignore\n@@ -54,34 +82,18 @@ document.addEventListener("DOMContentLoaded", function() {\n   }\n \n   if (event_edit__open_end) {\n-    event_edit__open_end.addEventListener("input", function () {\n-      if (event_edit__open_end.checked) {\n-        $(event_edit__end.closest(".field")).hide();\n-      } else {\n-        $(event_edit__end.closest(".field")).show();\n-      }\n+    open_end_toggle(event_edit__open_end, event_edit__end);\n+    event_edit__open_end.addEventListener("input", function() {\n+      open_end_toggle(event_edit__open_end, event_edit__end);\n     });\n   }\n \n   if (event_edit__whole_day) {\n-    event_edit__whole_day.addEventListener("input", function () {\n-      start_val = event_edit__start.value;\n-      end_val = event_edit__end.value;\n-      if (event_edit__whole_day.checked) {\n-        event_edit__start.type = "date";\n-        event_edit__end.type = "date";\n-      } else {\n-        event_edit__start.type = "datetime-local";\n-        event_edit__end.type = "datetime-local";\n-      }\n-      // set start/end values with current hours when switching back to\n-      // datetime-local\n-      if(start_val.indexOf("T") == -1) {\n-        start_val = `${start_val}T${(new Date()).getHours()}:00`;\n-        end_val = `${end_val}T${(new Date()).getHours() + 1}:00`;\n-      }\n-      set_date(event_edit__start, start_val);\n-      set_date(event_edit__end, end_val);\n+    // on load\n+    whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end);\n+    // on change\n+    event_edit__whole_day.addEventListener("input", function(e) {\n+      whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end);\n     });\n   }\n });\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-03-30T11:16:04+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.event/commit/241970d7bbe97b6debfa2efb8b8e9838b5fd4fe9

add condition to bundle

Files changed:
M plone/app/event/profiles/default/registry.xml

b'diff --git a/plone/app/event/profiles/default/registry.xml b/plone/app/event/profiles/default/registry.xml\nindex 85f2a8b1..3289fb8b 100644\n--- a/plone/app/event/profiles/default/registry.xml\n+++ b/plone/app/event/profiles/default/registry.xml\n@@ -3,7 +3,7 @@\n \n   <records prefix="plone.bundles/eventedit" interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n     <value key="enabled">True</value>\n-    <!-- <value key="expression">python: member is not None</value> -->\n+    <value key="expression">python: member is not None</value>\n     <value key="jscompilation">++plone++plone.app.event/event.js</value>\n     <value key="csscompilation"></value>\n     <value key="load_async">False</value>\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-03-30T11:20:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/b84a370bb980f20558143670aeef9351608ccf96

Merge pull request #353 from plone/petschki-event-script

Update event.js and remove plone-legacy bundle

Files changed:
A news/350.bugfix
M plone/app/event/browser/resources/event.js
M plone/app/event/profiles/default/metadata.xml
M plone/app/event/profiles/default/registry.xml

b'diff --git a/news/350.bugfix b/news/350.bugfix\nnew file mode 100644\nindex 00000000..663945ae\n--- /dev/null\n+++ b/news/350.bugfix\n@@ -0,0 +1,2 @@\n+remove `plone-legacy` bundle and update eventedit script.\n+[petschki, thet]\ndiff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js\nindex 8abc6f52..962bb824 100644\n--- a/plone/app/event/browser/resources/event.js\n+++ b/plone/app/event/browser/resources/event.js\n@@ -1,262 +1,99 @@\n-/* jslint browser: true */\n-/* globals require */\n-\n-(function($) {\n-\n-  var eventedit = {\n-\n-    start_end_delta: 1 / 24, // Delta in days\n-\n-    // DOM ELEMENTS\n-    $start_input: undefined,\n-    $start_container: undefined,\n-    $pickadate_starttime: undefined,\n-    $end_input: undefined,\n-    $end_container: undefined,\n-    $pickadate_endtime: undefined,\n-    $whole_day_input: undefined,\n-    $open_end_input: undefined,\n-\n-    get_dom_element: function (sel, $container) {\n-      /* Try to get the DOM element from a selector and return it or return undefined.\n-       * */\n-      var $el;\n-      if ($container) {\n-        $el = $(sel, $container);\n-      } else {\n-        $el = $(sel);\n-      }\n-      return $el.length ? $el : undefined;\n-    },\n-\n-    getDateTime: function (datetimewidget) {\n-      var date, time, datetime, set_time;\n-      date = $(\'input[name="_submit"]:first\', datetimewidget).prop(\'value\');\n-      if (!date) {\n-        return;\n-      }\n-      date = date.split(\'-\');\n-      time = $(\'input[name="_submit"]:last\', datetimewidget).prop(\'value\');\n-      if (!time) {\n-        // can happen with optional start/end dates without default values.\n-        set_time = true;\n-        time = \'00:00\';\n-      }\n-      time = time.split(\':\');\n-\n-      // We can\'t just parse the ``date + \'T\' + time`` string, because of\n-      // Chromium bug: https://code.google.com/p/chromium/issues/detail?id=145198\n-      // When passing date and time components, the passed date/time is\n-      // interpreted as local time and not UTC.\n-      datetime = new Date(\n-        parseInt(date[0], 10),\n-        parseInt(date[1], 10) - 1, // you know, javascript\'s month index starts with 0\n-        parseInt(date[2], 10),\n-        parseInt(time[0], 10),\n-        parseInt(time[1], 10)\n-      );\n-      if (set_time) {\n-        // we have a date but no time?! set it.\n-        $(\'.pattern-pickadate-time\', datetimewidget)\n-          .pickatime(\'picker\')\n-          .set(\'select\', datetime);\n-      }\n-      return datetime;\n-    },\n-\n-    initStartEndDelta: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      // delta in days\n-      this.start_end_delta = (end_datetime - start_datetime) / 1000 / 60;\n-    },\n-\n-    updateEndDate: function (start_container, end_container) {\n-      var start_date = this.getDateTime(start_container);\n-      if (!start_date) {\n-        return;\n-      }\n-\n-      var new_end_date = new Date(start_date);\n-      new_end_date.setMinutes(start_date.getMinutes() + this.start_end_delta);\n-\n-      $(\'.pattern-pickadate-date\', end_container)\n-        .pickadate(\'picker\')\n-        .set(\'select\', new_end_date);\n-      $(\'.pattern-pickadate-time\', end_container)\n-        .pickatime(\'picker\')\n-        .set(\'select\', new_end_date);\n-    },\n-\n-    validateEndDate: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      if (end_datetime < start_datetime) {\n-        start_container.addClass(\'error\');\n-      } else {\n-        end_container.removeClass(\'error\');\n-      }\n-    },\n-\n-    show_hide_widget: function (widget, hide, fade) {\n-      var $widget = $(widget);\n-      if (hide === true) {\n-        if (fade === true) {\n-          $widget.fadeOut();\n-        } else {\n-          $widget.hide();\n-        }\n-      } else {\n-        if (fade === true) {\n-          $widget.fadeIn();\n-        } else {\n-          $widget.show();\n-        }\n-      }\n-    },\n-\n-    event_listing_calendar_init: function (cal) {\n-      // Dateinput selector for event_listing view\n-      if ($().dateinput && cal.length > 0) {\n-        var get_req_param, val;\n-        get_req_param = function(name) {\n-          // http://stackoverflow.com/questions/831030/how-to-get-get-request-parameters-in-javascript\n-          if (\n-            name ===\n-            new RegExp(\'[?&]\' + encodeURIComponent(name) + \'=([^&]*)\').exec(\n-              window.location.search\n-            )\n-          ) {\n-            return decodeURIComponent(name[1]);\n-          }\n-        };\n-        // Preselect current date, if exists\n-        val = get_req_param(\'date\');\n-        if (val === undefined) {\n-          val = new Date();\n-        } else {\n-          val = new Date(val);\n-        }\n-        cal\n-          .dateinput({\n-            selectors: true,\n-            trigger: true,\n-            format: \'yyyy-mm-dd\',\n-            yearRange: [-10, 10],\n-            firstDay: 1,\n-            value: val,\n-            change: function() {\n-              var value = this.getValue(\'yyyy-mm-dd\');\n-              window.location.href = \'event_listing?mode=day&date=\' + value;\n-            }\n-          })\n-          .unbind(\'change\')\n-          .bind(\'onShow\', function() {\n-            var trigger_offset = $(this).next().offset();\n-            $(this).data(\'dateinput\').getCalendar().offset({\n-              top: trigger_offset.top + 20,\n-              left: trigger_offset.left\n-            });\n-          });\n-      }\n-    },\n-\n-    initilize_event: function () {\n-\n-      var $start_container = this.$start_container,\n-          $end_container = this.$end_container,\n-          $pickadate_starttime = this.$pickadate_starttime,\n-          $pickadate_endtime = this.$pickadate_endtime,\n-          $open_end_input = this.$open_end_input,\n-          $whole_day_input = this.$whole_day_input;\n-\n-      // WHOLE DAY INIT\n-      if ($whole_day_input.length > 0) {\n-        $whole_day_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($pickadate_starttime, e.target.checked, true);\n-          this.show_hide_widget($pickadate_endtime, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget(\n-          $pickadate_starttime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n-        this.show_hide_widget(\n-          $pickadate_endtime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n-      }\n-\n-      // OPEN END INIT\n-      if ($open_end_input.length > 0) {\n-        $open_end_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($end_container, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget($end_container, $open_end_input.get(0).checked, false);\n+function is_valid_date(date) {\n+  // https://stackoverflow.com/a/1353711/1337474\n+  return date instanceof Date && !isNaN(date);\n+}\n+\n+function tzaware_date(date) {\n+  tzoffset = -date.getTimezoneOffset() * 60 * 1000;\n+  date.setTime(date.getTime() + tzoffset);\n+  return date;\n+}\n+\n+function add_hours(date, hours) {\n+  // https://stackoverflow.com/a/1050782/1337474\n+  date.setTime(date.getTime() + hours * 60 * 60 * 1000);\n+  return date;\n+}\n+\n+function set_date(el, datevalue) {\n+  var date = new Date(datevalue); // change to Date to enforce datetime isostrings.\n+  if (!is_valid_date(date)) {\n+    return;\n+  }\n+  isostring = tzaware_date(date).toISOString();\n+  if (el.type === "date") {\n+    el.value = isostring.split("T")[0];\n+  } else if (el.type === "datetime-local") {\n+    el.value = isostring.split(".")[0];\n+  }\n+}\n+\n+function open_end_toggle(event_edit__open_end, event_edit__end) {\n+  if (event_edit__open_end.checked) {\n+    $(event_edit__end.closest(".field")).hide();\n+  } else {\n+    $(event_edit__end.closest(".field")).show();\n+  }\n+}\n+\n+function whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end) {\n+  start_val = event_edit__start.value;\n+  end_val = event_edit__end.value;\n+  if (event_edit__whole_day.checked) {\n+    event_edit__start.type = "date";\n+    event_edit__end.type = "date";\n+  } else {\n+    event_edit__start.type = "datetime-local";\n+    event_edit__end.type = "datetime-local";\n+  }\n+  // set start/end values with current hours when switching back to\n+  // datetime-local\n+  if(start_val.indexOf("T") == -1) {\n+    start_val = `${start_val}T${(new Date()).getHours()}:00`;\n+    end_val = `${end_val}T${(new Date()).getHours() + 1}:00`;\n+  }\n+  set_date(event_edit__start, start_val);\n+  set_date(event_edit__end, end_val);\n+}\n+\n+document.addEventListener("DOMContentLoaded", function() {\n+\n+  var event_edit__open_end = document.querySelector("input[name=\'form.widgets.IEventBasic.open_end:list\'], input[name=\'form.widgets.IEventBasicNonRequired.open_end:list\']"); // prettier-ignore\n+  var event_edit__whole_day = document.querySelector("input[name=\'form.widgets.IEventBasic.whole_day:list\'], input[name=\'form.widgets.IEventBasicNonRequired.whole_day:list\']"); // prettier-ignore\n+  var event_edit__start = document.querySelector("[name=\'form.widgets.IEventBasic.start\'], [name=\'form.widgets.IEventBasicNonRequired.start\']"); // prettier-ignore\n+  var event_edit__end = document.querySelector("[name=\'form.widgets.IEventBasic.end\'], [name=\'form.widgets.IEventBasicNonRequired.end\']"); // prettier-ignore\n+\n+  var start_val;\n+  var end_val;\n+\n+  if (event_edit__start) {\n+    event_edit__start.addEventListener("change", function () {\n+      start_val = event_edit__start.value;\n+      end_val = event_edit__end.value;\n+      var _start = new Date(start_val);\n+      var _end = new Date(end_val);\n+      if (!is_valid_date(_end) || _end < _start) {\n+        _end = _start;\n+        _end = add_hours(_end, 1);\n+        end_val = _end.toISOString();\n+        set_date(event_edit__end, end_val);\n       }\n-\n-      // START/END SETTING/VALIDATION\n-      $start_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $start_container.on(\'change\', \'.picker__input\', function() {\n-        this.updateEndDate($start_container, $end_container);\n-      }.bind(this));\n-      \n-      $end_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $end_container.on(\'change\', \'.picker__input\', function() {\n-        this.validateEndDate($start_container, $end_container);\n-      }.bind(this));\n-\n-    },\n-  \n-  };\n-\n-  $(document).ready(function() {\n-\n-    eventedit.$start_input = eventedit.get_dom_element(\'form input.event_start\');\n-    if (!eventedit.$start_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-    eventedit.$end_input = eventedit.get_dom_element(\'form input.event_end\');\n-    if (!eventedit.$end_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-\n-    eventedit.$start_container = eventedit.$start_input.closest(\'div\');\n-    eventedit.$end_container   = eventedit.$end_input.closest(\'div\');\n-    eventedit.$whole_day_input = eventedit.get_dom_element(\'form input.event_whole_day\');\n-    eventedit.$open_end_input  = eventedit.get_dom_element(\'form input.event_open_end\');\n-\n-    var interval = setInterval(function() {\n-      eventedit.$pickadate_starttime = !eventedit.$pickadate_starttime && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$start_container);\n-      eventedit.$pickadate_endtime   = !eventedit.$pickadate_endtime   && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$end_container);\n-\n-      if (\n-        eventedit.$pickadate_starttime &&\n-        eventedit.$pickadate_endtime\n-      ) {\n-        clearInterval(interval);\n-        eventedit.initilize_event();\n-      }\n-    }, 100);\n-\n-    // EVENT LISTING CALENDAR POPUP\n-    eventedit.event_listing_calendar_init($(\'#event_listing_calendar\'));\n-\n-  });\n-})(jQuery);\n+    });\n+  }\n+\n+  if (event_edit__open_end) {\n+    open_end_toggle(event_edit__open_end, event_edit__end);\n+    event_edit__open_end.addEventListener("input", function() {\n+      open_end_toggle(event_edit__open_end, event_edit__end);\n+    });\n+  }\n+\n+  if (event_edit__whole_day) {\n+    // on load\n+    whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end);\n+    // on change\n+    event_edit__whole_day.addEventListener("input", function(e) {\n+      whole_day_toggle(event_edit__whole_day, event_edit__start, event_edit__end);\n+    });\n+  }\n+});\ndiff --git a/plone/app/event/profiles/default/metadata.xml b/plone/app/event/profiles/default/metadata.xml\nindex d7cd1512..4479ed4c 100644\n--- a/plone/app/event/profiles/default/metadata.xml\n+++ b/plone/app/event/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>15</version>\n+  <version>16</version>\n   <dependencies>\n     <dependency>profile-plone.app.registry:default</dependency>\n     <dependency>profile-plone.app.z3cform:default</dependency>\ndiff --git a/plone/app/event/profiles/default/registry.xml b/plone/app/event/profiles/default/registry.xml\nindex d61b9cdd..3289fb8b 100644\n--- a/plone/app/event/profiles/default/registry.xml\n+++ b/plone/app/event/profiles/default/registry.xml\n@@ -1,16 +1,13 @@\n <?xml version="1.0"?>\n <registry>\n \n-  <records prefix="plone.resources/plone-app-event"\n-            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n-      <value key="js">++plone++plone.app.event/event.js</value>\n-  </records>\n-  <records prefix="plone.bundles/plone-legacy"\n-            interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n-    <value key="resources" purge="false">\n-      <element>plone-app-event</element>\n-    </value>\n-    <value key="last_compilation"></value>\n+  <records prefix="plone.bundles/eventedit" interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n+    <value key="enabled">True</value>\n+    <value key="expression">python: member is not None</value>\n+    <value key="jscompilation">++plone++plone.app.event/event.js</value>\n+    <value key="csscompilation"></value>\n+    <value key="load_async">False</value>\n+    <value key="load_defer">False</value>\n   </records>\n \n </registry>\n'

