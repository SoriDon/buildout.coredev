Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:01:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/9ef92d13631657734fbc24675a3eb1b711c5b118

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3b8337e6.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..eb3c765\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3b8337e6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3b8337e6.internal b/news/3b8337e6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3b8337e6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex d6e3546..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,20 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-    *.cfg\n-    .coveragerc\n     .editorconfig\n-    .gitattributes\n-    bootstrap-buildout.py\n-\n-[isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-not_skip=__init__.py\n-\n-\n-\n-\n-[bdist_wheel]\n-universal = 1\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..d0b9ff5\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.caching {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.caching {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:04:47+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/7082e6057d592c4361cfb9cc324327e1a9775f5e

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/caching/__init__.py
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/caching/__init__.py b/plone/caching/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/caching/__init__.py\n+++ b/plone/caching/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/caching/hooks.py b/plone/caching/hooks.py\nindex 67599e5..ebebf8e 100644\n--- a/plone/caching/hooks.py\n+++ b/plone/caching/hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import X_CACHE_OPERATION_HEADER\n from plone.caching.interfaces import X_CACHE_RULE_HEADER\n from plone.caching.utils import findOperation\n@@ -36,12 +35,12 @@ class Intercepted(Exception):\n     responseBody = None\n     status = None\n \n-    def __init__(self, status=304, responseBody=u""):\n+    def __init__(self, status=304, responseBody=""):\n         self.status = status\n         self.responseBody = responseBody\n \n \n-class InterceptorResponse(object):\n+class InterceptorResponse:\n     """View for the Intercepted exception, serving to return an empty\n     response in the case of an intercepted response.\n     """\n@@ -118,7 +117,7 @@ def intercept(event):\n \n @implementer(ITransform)\n @adapter(Interface, Interface)\n-class MutatorTransform(object):\n+class MutatorTransform:\n     """Transformation using plone.transformchain.\n \n     This is registered at order 12000, i.e. "late". A typical transform\ndiff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py\nindex 6886608..636ce44 100644\n--- a/plone/caching/interfaces.py\n+++ b/plone/caching/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n@@ -16,16 +15,16 @@ class ICacheSettings(Interface):\n     """\n \n     enabled = schema.Bool(\n-        title=_(u\'Globally enabled\'),\n-        description=_(u\'If not set, no caching operations will be attempted\'),\n+        title=_(\'Globally enabled\'),\n+        description=_(\'If not set, no caching operations will be attempted\'),\n         default=False,\n     )\n \n     operationMapping = schema.Dict(\n-        title=_(u\'Rule set/operation mapping\'),\n-        description=_(u\'Maps rule set names to operation names\'),\n-        key_type=schema.DottedName(title=_(u\'Rule set name\')),\n-        value_type=schema.DottedName(title=_(u\'Caching operation name\')),\n+        title=_(\'Rule set/operation mapping\'),\n+        description=_(\'Maps rule set names to operation names\'),\n+        key_type=schema.DottedName(title=_(\'Rule set name\')),\n+        value_type=schema.DottedName(title=_(\'Caching operation name\')),\n     )\n \n #\n@@ -120,33 +119,33 @@ def __call__(self, rulename, response):\n     """\n \n     title = schema.TextLine(\n-        title=_(u\'Title\'),\n-        description=_(u\'A descriptive title for the operation\'),\n+        title=_(\'Title\'),\n+        description=_(\'A descriptive title for the operation\'),\n     )\n \n     description = schema.Text(\n-        title=_(u\'Description\'),\n-        description=_(u\'A longer description for the operaton\'),\n+        title=_(\'Description\'),\n+        description=_(\'A longer description for the operaton\'),\n         required=False,\n     )\n \n     prefix = schema.DottedName(\n-        title=_(u\'Registry prefix\'),\n-        description=_(u\'Prefix for records in the registry pertaining to \'\n-                      u\'this operation. This, alongside the next \'\n-                      u\'parameter, allows the user interface to present \'\n-                      u\'relevant configuration options for this \'\n-                      u\'operation.\'),\n+        title=_(\'Registry prefix\'),\n+        description=_(\'Prefix for records in the registry pertaining to \'\n+                      \'this operation. This, alongside the next \'\n+                      \'parameter, allows the user interface to present \'\n+                      \'relevant configuration options for this \'\n+                      \'operation.\'),\n         required=False,\n     )\n \n     options = schema.Tuple(\n-        title=_(u\'Registry options\'),\n-        description=_(u\'A tuple of options which can be used to \'\n-                      u\'configure this operation. An option is looked \'\n-                      u\'up in the registry by concatenating the prefix \'\n-                      u\'with the option name, optionally preceded by \'\n-                      u\'the rule set name, to allow per-rule overrides.\'),\n+        title=_(\'Registry options\'),\n+        description=_(\'A tuple of options which can be used to \'\n+                      \'configure this operation. An option is looked \'\n+                      \'up in the registry by concatenating the prefix \'\n+                      \'with the option name, optionally preceded by \'\n+                      \'the rule set name, to allow per-rule overrides.\'),\n         value_type=schema.DottedName(),\n         required=False,\n     )\ndiff --git a/plone/caching/lookup.py b/plone/caching/lookup.py\nindex d9f495f..7f4a1c6 100644\n--- a/plone/caching/lookup.py\n+++ b/plone/caching/lookup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import IRulesetLookup\n from z3c.caching.registry import lookup\n from zope.component import adapter\n@@ -8,7 +7,7 @@\n \n @implementer(IRulesetLookup)\n @adapter(Interface, Interface)\n-class DefaultRulesetLookup(object):\n+class DefaultRulesetLookup:\n     """Default ruleset lookup.\n \n     Only override this if you have very special needs. The safest option is\ndiff --git a/plone/caching/operations.py b/plone/caching/operations.py\nindex 1ca1427..34afdd1 100644\n--- a/plone/caching/operations.py\n+++ b/plone/caching/operations.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import _\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.interfaces import ICachingOperationType\n@@ -13,7 +12,7 @@\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, Interface)\n-class Chain(object):\n+class Chain:\n     """Caching operation which chains together several other operations.\n \n     When intercepting the response, the first chained operation to return a\n@@ -27,8 +26,8 @@ class Chain(object):\n \n     The option must be a sequence type (e.g. a ``Tuple``).\n     """\n-    title = _(u"Chain")\n-    description = _(u"Allows multiple operations to be chained together")\n+    title = _("Chain")\n+    description = _("Allows multiple operations to be chained together")\n     prefix = \'plone.caching.operations.chain\'\n     options = (\'operations\',)\n \ndiff --git a/plone/caching/testing.py b/plone/caching/testing.py\nindex 8f1c28a..fe9e293 100644\n--- a/plone/caching/testing.py\n+++ b/plone/caching/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing.zca import UNIT_TESTING\n from z3c.caching.registry import getGlobalRulesetRegistry\ndiff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py\nindex 1d93d42..99fcd9f 100644\n--- a/plone/caching/tests/test_hooks.py\n+++ b/plone/caching/tests/test_hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.hooks import intercept\n from plone.caching.hooks import Intercepted\n from plone.caching.hooks import InterceptorResponse\n@@ -26,11 +25,11 @@\n import z3c.caching.registry\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \n-class DummyResource(object):\n+class DummyResource:\n     def index_html(self):\n         return b\'binary data\'\n \n@@ -61,12 +60,12 @@ def __init__(self, published, response):\n         self.environ = {}\n \n \n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, request):\n         self.request = request\n \n \n-class DummyStreamingEvent(object):\n+class DummyStreamingEvent:\n     def __init__(self, response):\n         self.response = response\n \n@@ -88,7 +87,7 @@ def test_no_published_object(self):\n \n         request = DummyRequest(None, DummyResponse())\n \n-        MutatorTransform(None, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(None, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -98,7 +97,7 @@ def test_no_registry(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -109,7 +108,7 @@ def test_no_records(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -127,7 +126,7 @@ def test_no_mapping(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -145,7 +144,7 @@ def test_no_cache_rule(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -163,7 +162,7 @@ def test_no_lookup_adapter(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -182,7 +181,7 @@ def test_operation_name_not_found(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual(\n@@ -204,7 +203,7 @@ def test_operation_not_found(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual(\n@@ -225,7 +224,7 @@ def test_match_unicode(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -242,7 +241,7 @@ def modifyResponse(self, rulename, response):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n@@ -262,7 +261,7 @@ def test_match_bytes(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -299,7 +298,7 @@ def test_match_iterable(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -336,7 +335,7 @@ def test_match_method(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -353,7 +352,7 @@ def modifyResponse(self, rulename, response):\n         resource = DummyResource()\n         request = DummyRequest(resource.index_html, DummyResponse())\n \n-        MutatorTransform(resource, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(resource, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n         self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n@@ -373,7 +372,7 @@ def test_off_switch(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -390,7 +389,7 @@ def modifyResponse(self, rulename, response):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n@@ -571,7 +570,7 @@ def test_match_unicode(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -610,7 +609,7 @@ def test_match_bytes(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -649,7 +648,7 @@ def test_match_iterable(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -688,7 +687,7 @@ def test_match_method(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -727,7 +726,7 @@ def test_off_switch(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -865,7 +864,7 @@ def test_match_abort(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -901,7 +900,7 @@ def test_match_body(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -913,7 +912,7 @@ def modifyResponse(self, rulename, response):\n             def interceptResponse(self, rulename, response):\n                 response.addHeader(\'X-Cache-Foo\', \'test\')\n                 response.setStatus(304)\n-                return u\'dummy\'\n+                return \'dummy\'\n \n         provideAdapter(DummyOperation, name=\'op1\')\n \n@@ -923,7 +922,7 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual(\'dummy\', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n@@ -955,7 +954,7 @@ def test_match_body_explicitly_enable_transform_chain(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -968,7 +967,7 @@ def interceptResponse(self, rulename, response):\n                 response.addHeader(\'X-Cache-Foo\', \'test\')\n                 response.setStatus(304)\n                 self.request.environ[\'plone.transformchain.disable\'] = False\n-                return u\'dummy\'\n+                return \'dummy\'\n \n         provideAdapter(DummyOperation, name=\'op1\')\n \n@@ -978,7 +977,7 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual(\'dummy\', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n@@ -1010,7 +1009,7 @@ def test_match_body_method(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -1022,7 +1021,7 @@ def modifyResponse(self, rulename, response):\n             def interceptResponse(self, rulename, response):\n                 response.addHeader(\'X-Cache-Foo\', \'test\')\n                 response.setStatus(200)\n-                return u\'dummy\'\n+                return \'dummy\'\n \n         provideAdapter(DummyOperation, name=\'op1\')\n \n@@ -1032,7 +1031,7 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual(\'dummy\', e.responseBody)\n             self.assertEqual(200, e.status)\n             self.assertEqual(200, request.response.status)\n             self.assertEqual(True, request.response.locked)\n@@ -1064,7 +1063,7 @@ def test_off_switch(self):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -1075,7 +1074,7 @@ def modifyResponse(self, rulename, response):\n \n             def interceptResponse(self, rulename, response):\n                 response.addHeader(\'X-Cache-Foo\', \'test\')\n-                return u\'dummy\'\n+                return \'dummy\'\n \n         provideAdapter(DummyOperation, name=\'op1\')\n \n@@ -1089,7 +1088,7 @@ def test_dont_swallow_conflict_error(self):\n \n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n-        class DummyRulesetLookup(object):\n+        class DummyRulesetLookup:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -1115,7 +1114,7 @@ def test_swallow_other_error(self):\n \n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n-        class DummyRulesetLookup(object):\n+        class DummyRulesetLookup:\n \n             def __init__(self, published, request):\n                 self.published = published\n@@ -1144,9 +1143,9 @@ def __call__(self):\n     def test_exception_view(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n-        exc = Intercepted(status=200, responseBody=u\'Test\')\n+        exc = Intercepted(status=200, responseBody=\'Test\')\n         excView = InterceptorResponse(exc, request)\n-        self.assertEqual(u\'Test\', excView())\n+        self.assertEqual(\'Test\', excView())\n \n \n def test_suite():\ndiff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py\nindex a146717..a44200f 100644\n--- a/plone/caching/tests/test_lookup.py\n+++ b/plone/caching/tests/test_lookup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.lookup import DefaultRulesetLookup\n from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n@@ -6,7 +5,7 @@\n import z3c.caching.registry\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \ndiff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py\nindex 3c0ce14..82798e8 100644\n--- a/plone/caching/tests/test_operations.py\n+++ b/plone/caching/tests/test_operations.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.operations import Chain\n from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n@@ -18,7 +17,7 @@\n _marker = object()\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \n@@ -60,7 +59,7 @@ def test_no_option(self):\n     def test_operations_list_not_set(self):\n \n         self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n+            f\'{Chain.prefix}.operations\'\n         ] = Record(field.List(value_type=field.Text()))\n \n         view = DummyView()\n@@ -77,7 +76,7 @@ def test_operations_list_not_set(self):\n     def test_operations_empty(self):\n \n         self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n+            f\'{Chain.prefix}.operations\'\n         ] = Record(field.List(value_type=field.Text()), [])\n \n         view = DummyView()\n@@ -94,8 +93,8 @@ def test_operations_empty(self):\n     def test_chained_operations_not_found(self):\n \n         self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\'])\n+            f\'{Chain.prefix}.operations\'\n+        ] = Record(field.List(value_type=field.Text()), [\'op1\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -108,22 +107,22 @@ def test_chained_operations_not_found(self):\n \n     def test_multiple_operations_one_found(self):\n         self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n+            f\'{Chain.prefix}.operations\'\n+        ] = Record(field.List(value_type=field.Text()), [\'op1\', \'op2\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'foo\'\n+                return \'foo\'\n \n             def modifyResponse(self, rulename, response):\n                 response[\'X-Mutated\'] = rulename\n@@ -133,7 +132,7 @@ def modifyResponse(self, rulename, response):\n         chain = Chain(view, request)\n         ret = chain.interceptResponse(\'testrule\', request.response)\n \n-        self.assertEqual(u\'foo\', ret)\n+        self.assertEqual(\'foo\', ret)\n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual(\n             {\'X-Cache-Chain-Operations\': \'op2\'},\n@@ -153,22 +152,22 @@ def modifyResponse(self, rulename, response):\n \n     def test_multiple_operations_multiple_found(self):\n         self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n+            f\'{Chain.prefix}.operations\'\n+        ] = Record(field.List(value_type=field.Text()), [\'op1\', \'op2\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation1(object):\n+        class DummyOperation1:\n \n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'foo\'\n+                return \'foo\'\n \n             def modifyResponse(self, rulename, response):\n                 response[\'X-Mutated-1\'] = rulename\n@@ -177,14 +176,14 @@ def modifyResponse(self, rulename, response):\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation2(object):\n+        class DummyOperation2:\n \n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'bar\'\n+                return \'bar\'\n \n             def modifyResponse(self, rulename, response):\n                 response[\'X-Mutated-2\'] = rulename\n@@ -194,7 +193,7 @@ def modifyResponse(self, rulename, response):\n         chain = Chain(view, request)\n         ret = chain.interceptResponse(\'testrule\', request.response)\n \n-        self.assertEqual(u\'foo\', ret)\n+        self.assertEqual(\'foo\', ret)\n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n         self.assertEqual(\n             {\'X-Cache-Chain-Operations\': \'op1\'},\ndiff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py\nindex 30e9833..c7c0301 100644\n--- a/plone/caching/tests/test_utils.py\n+++ b/plone/caching/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICachingOperationType\n from plone.caching.utils import lookupOption\n from plone.caching.utils import lookupOptions\n@@ -49,7 +48,7 @@ def test_lookupOption_default(self):\n \n         registry.records[\'plone.caching.tests.test\'] = Record(\n             field.TextLine(),\n-            u\'default\'\n+            \'default\'\n         )\n \n         result = lookupOption(\n@@ -58,7 +57,7 @@ def test_lookupOption_default(self):\n             \'test\',\n             default=_marker\n         )\n-        self.assertEqual(u\'default\', result)\n+        self.assertEqual(\'default\', result)\n \n     def test_lookupOption_override(self):\n         provideUtility(Registry(), IRegistry)\n@@ -66,11 +65,11 @@ def test_lookupOption_override(self):\n \n         registry.records[\'plone.caching.tests.test\'] = r = Record(\n             field.TextLine(),\n-            u\'default\'\n+            \'default\'\n         )\n         registry.records[\'plone.caching.tests.testrule.test\'] = Record(\n             FieldRef(r.__name__, r.field),\n-            u\'override\'\n+            \'override\'\n         )\n \n         result = lookupOption(\n@@ -79,7 +78,7 @@ def test_lookupOption_override(self):\n             \'test\',\n             default=_marker\n         )\n-        self.assertEqual(u\'override\', result)\n+        self.assertEqual(\'override\', result)\n \n \n class TestLookupOptions(unittest.TestCase):\n@@ -90,10 +89,10 @@ def tearDown(self):\n     def test_lookupOptions_no_registry(self):\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n-            title = u\'\'\n-            description = u\'\'\n+            title = \'\'\n+            description = \'\'\n             prefix = \'plone.caching.tests\'\n             options = (\'test1\', \'test2\',)\n \n@@ -104,10 +103,10 @@ def test_lookupOptions_no_records(self):\n         provideUtility(Registry(), IRegistry)\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n-            title = u\'\'\n-            description = u\'\'\n+            title = \'\'\n+            description = \'\'\n             prefix = \'plone.caching.tests\'\n             options = (\'test1\', \'test2\',)\n \n@@ -120,19 +119,19 @@ def test_lookupOptions_default(self):\n \n         registry.records[\'plone.caching.tests.test2\'] = Record(\n             field.TextLine(),\n-            u\'foo\'\n+            \'foo\'\n         )\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n-            title = u\'\'\n-            description = u\'\'\n+            title = \'\'\n+            description = \'\'\n             prefix = \'plone.caching.tests\'\n             options = (\'test1\', \'test2\',)\n \n         result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': u\'foo\'}, result)\n+        self.assertEqual({\'test1\': _marker, \'test2\': \'foo\'}, result)\n \n     def test_lookupOptions_override(self):\n         provideUtility(Registry(), IRegistry)\n@@ -140,27 +139,27 @@ def test_lookupOptions_override(self):\n \n         registry.records[\'plone.caching.tests.test1\'] = Record(\n             field.TextLine(),\n-            u\'foo\'\n+            \'foo\'\n         )\n         registry.records[\'plone.caching.tests.test2\'] = Record(\n             field.TextLine(),\n-            u\'bar\'\n+            \'bar\'\n         )\n         registry.records[\'plone.caching.tests.testrule.test2\'] = Record(\n             field.TextLine(),\n-            u\'baz\'\n+            \'baz\'\n         )\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n-            title = u\'\'\n-            description = u\'\'\n+            title = \'\'\n+            description = \'\'\n             prefix = \'plone.caching.tests\'\n             options = (\'test1\', \'test2\',)\n \n         result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': u\'foo\', \'test2\': u\'baz\'}, result)\n+        self.assertEqual({\'test1\': \'foo\', \'test2\': \'baz\'}, result)\n \n     def test_lookupOptions_named(self):\n         provideUtility(Registry(), IRegistry)\n@@ -168,25 +167,25 @@ def test_lookupOptions_named(self):\n \n         registry.records[\'plone.caching.tests.test2\'] = Record(\n             field.TextLine(),\n-            u\'foo\'\n+            \'foo\'\n         )\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n+        class DummyOperation:\n \n-            title = u\'\'\n-            description = u\'\'\n+            title = \'\'\n+            description = \'\'\n             prefix = \'plone.caching.tests\'\n             options = (\'test1\', \'test2\',)\n \n-        provideUtility(DummyOperation, name=u\'plone.caching.tests\')\n+        provideUtility(DummyOperation, name=\'plone.caching.tests\')\n \n         result = lookupOptions(\n-            u\'plone.caching.tests\',\n+            \'plone.caching.tests\',\n             \'testrule\',\n             default=_marker\n         )\n-        self.assertEqual({\'test1\': _marker, \'test2\': u\'foo\'}, result)\n+        self.assertEqual({\'test1\': _marker, \'test2\': \'foo\'}, result)\n \n \n def test_suite():\ndiff --git a/plone/caching/utils.py b/plone/caching/utils.py\nindex 58a8cc0..4cd7d84 100644\n--- a/plone/caching/utils.py\n+++ b/plone/caching/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICacheSettings\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.interfaces import ICachingOperationType\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:05:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/c83904f38c07b61ab2f0f9e7afbe516278f579b7

chore: isort

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex a4ef841..ba19933 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,7 @@\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n-from setuptools import setup, find_packages\n \n \n def read(*rnames):\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:06:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/bb014271ec5414825e8a855a1bf834ded01579a2

chore: black

Files changed:
M plone/__init__.py
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/caching/hooks.py b/plone/caching/hooks.py\nindex ebebf8e..d8ee106 100644\n--- a/plone/caching/hooks.py\n+++ b/plone/caching/hooks.py\n@@ -15,7 +15,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.caching\')\n+logger = logging.getLogger("plone.caching")\n \n \n class IStreamedResponse(Interface):\n@@ -66,7 +66,7 @@ def intercept(event):\n \n     try:\n         request = event.request\n-        published = request.get(\'PUBLISHED\', None)\n+        published = request.get("PUBLISHED", None)\n         rule, operationName, operation = findOperation(request)\n \n         if rule is None:\n@@ -74,10 +74,7 @@ def intercept(event):\n \n         request.response.setHeader(X_CACHE_RULE_HEADER, rule)\n         logger.debug(\n-            \'Published: %s Ruleset: %s Operation: %s\',\n-            repr(published),\n-            rule,\n-            operation\n+            "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n         )\n \n         if operation is not None:\n@@ -86,10 +83,7 @@ def intercept(event):\n             if responseBody is not None:\n                 # Only put this in the response if the operation actually\n                 # intercepted something\n-                request.response.setHeader(\n-                    X_CACHE_OPERATION_HEADER,\n-                    operationName\n-                )\n+                request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)\n \n                 # Stop any post-processing, including the operation\'s response\n                 # modification\n@@ -110,8 +104,7 @@ def intercept(event):\n         raise\n     except Exception:\n         logging.exception(\n-            \'Swallowed exception in plone.caching IPubAfterTraversal event \'\n-            \'handler\'\n+            "Swallowed exception in plone.caching IPubAfterTraversal event " "handler"\n         )\n \n \n@@ -158,7 +151,7 @@ def mutate(self):\n         if IStreamedResponse.providedBy(request):\n             return\n \n-        published = request.get(\'PUBLISHED\', None)\n+        published = request.get("PUBLISHED", None)\n         rule, operationName, operation = findOperation(request)\n \n         if rule is None:\n@@ -166,16 +159,14 @@ def mutate(self):\n \n         request.response.setHeader(X_CACHE_RULE_HEADER, rule)\n         logger.debug(\n-            \'Published: %s Ruleset: %s Operation: %s\',\n-            repr(published),\n-            rule,\n-            operation\n+            "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n         )\n \n         if operation is not None:\n             request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)\n             operation.modifyResponse(rule, request.response)\n \n+\n # Hook for streaming responses - does not use plone.transformchain, since\n # sequencing is less likely to be an issue here\n \n@@ -198,7 +189,7 @@ def modifyStreamingResponse(event):\n     # again in the normal hook above\n     alsoProvides(request, IStreamedResponse)\n \n-    published = request.get(\'PUBLISHED\', None)\n+    published = request.get("PUBLISHED", None)\n \n     rule, operationName, operation = findOperation(request)\n \n@@ -207,10 +198,7 @@ def modifyStreamingResponse(event):\n \n     response.setHeader(X_CACHE_RULE_HEADER, rule)\n     logger.debug(\n-        \'Published: %s Ruleset: %s Operation: %s\',\n-        repr(published),\n-        rule,\n-        operation\n+        "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n     )\n \n     if operation is not None:\ndiff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py\nindex 636ce44..48aa89b 100644\n--- a/plone/caching/interfaces.py\n+++ b/plone/caching/interfaces.py\n@@ -4,29 +4,29 @@\n import zope.i18nmessageid\n \n \n-_ = zope.i18nmessageid.MessageFactory(\'plone\')\n+_ = zope.i18nmessageid.MessageFactory("plone")\n \n-X_CACHE_RULE_HEADER = \'X-Cache-Rule\'\n-X_CACHE_OPERATION_HEADER = \'X-Cache-Operation\'\n+X_CACHE_RULE_HEADER = "X-Cache-Rule"\n+X_CACHE_OPERATION_HEADER = "X-Cache-Operation"\n \n \n class ICacheSettings(Interface):\n-    """Settings expected to be found in plone.registry\n-    """\n+    """Settings expected to be found in plone.registry"""\n \n     enabled = schema.Bool(\n-        title=_(\'Globally enabled\'),\n-        description=_(\'If not set, no caching operations will be attempted\'),\n+        title=_("Globally enabled"),\n+        description=_("If not set, no caching operations will be attempted"),\n         default=False,\n     )\n \n     operationMapping = schema.Dict(\n-        title=_(\'Rule set/operation mapping\'),\n-        description=_(\'Maps rule set names to operation names\'),\n-        key_type=schema.DottedName(title=_(\'Rule set name\')),\n-        value_type=schema.DottedName(title=_(\'Caching operation name\')),\n+        title=_("Rule set/operation mapping"),\n+        description=_("Maps rule set names to operation names"),\n+        key_type=schema.DottedName(title=_("Rule set name")),\n+        value_type=schema.DottedName(title=_("Caching operation name")),\n     )\n \n+\n #\n #  Cache operations\n #\n@@ -70,6 +70,7 @@ def modifyResponse(ruleset, response):\n # Cache operation *types* (for UI support)\n #\n \n+\n class ICachingOperationType(Interface):\n     """A named utility which is used to provide UI support for caching\n     operations. The name should correspond to the operation adapter name.\n@@ -119,33 +120,37 @@ def __call__(self, rulename, response):\n     """\n \n     title = schema.TextLine(\n-        title=_(\'Title\'),\n-        description=_(\'A descriptive title for the operation\'),\n+        title=_("Title"),\n+        description=_("A descriptive title for the operation"),\n     )\n \n     description = schema.Text(\n-        title=_(\'Description\'),\n-        description=_(\'A longer description for the operaton\'),\n+        title=_("Description"),\n+        description=_("A longer description for the operaton"),\n         required=False,\n     )\n \n     prefix = schema.DottedName(\n-        title=_(\'Registry prefix\'),\n-        description=_(\'Prefix for records in the registry pertaining to \'\n-                      \'this operation. This, alongside the next \'\n-                      \'parameter, allows the user interface to present \'\n-                      \'relevant configuration options for this \'\n-                      \'operation.\'),\n+        title=_("Registry prefix"),\n+        description=_(\n+            "Prefix for records in the registry pertaining to "\n+            "this operation. This, alongside the next "\n+            "parameter, allows the user interface to present "\n+            "relevant configuration options for this "\n+            "operation."\n+        ),\n         required=False,\n     )\n \n     options = schema.Tuple(\n-        title=_(\'Registry options\'),\n-        description=_(\'A tuple of options which can be used to \'\n-                      \'configure this operation. An option is looked \'\n-                      \'up in the registry by concatenating the prefix \'\n-                      \'with the option name, optionally preceded by \'\n-                      \'the rule set name, to allow per-rule overrides.\'),\n+        title=_("Registry options"),\n+        description=_(\n+            "A tuple of options which can be used to "\n+            "configure this operation. An option is looked "\n+            "up in the registry by concatenating the prefix "\n+            "with the option name, optionally preceded by "\n+            "the rule set name, to allow per-rule overrides."\n+        ),\n         value_type=schema.DottedName(),\n         required=False,\n     )\n@@ -155,6 +160,7 @@ def __call__(self, rulename, response):\n # Internal abstractions\n #\n \n+\n class IRulesetLookup(Interface):\n     """Abstraction for the lookup of response rulesets from published objects.\n     This is an unnamed multi- adapter from (published, request).\ndiff --git a/plone/caching/operations.py b/plone/caching/operations.py\nindex 34afdd1..6e6cbb1 100644\n--- a/plone/caching/operations.py\n+++ b/plone/caching/operations.py\n@@ -26,10 +26,11 @@ class Chain:\n \n     The option must be a sequence type (e.g. a ``Tuple``).\n     """\n+\n     title = _("Chain")\n     description = _("Allows multiple operations to be chained together")\n-    prefix = \'plone.caching.operations.chain\'\n-    options = (\'operations\',)\n+    prefix = "plone.caching.operations.chain"\n+    options = ("operations",)\n \n     def __init__(self, published, request):\n         self.published = published\n@@ -40,13 +41,10 @@ def interceptResponse(self, rulename, response):\n \n         chained = []\n \n-        if options[\'operations\']:\n-            for name in options[\'operations\']:\n-\n+        if options["operations"]:\n+            for name in options["operations"]:\n                 operation = queryMultiAdapter(\n-                    (self.published, self.request),\n-                    ICachingOperation,\n-                    name=name\n+                    (self.published, self.request), ICachingOperation, name=name\n                 )\n \n                 if operation is not None:\n@@ -55,8 +53,7 @@ def interceptResponse(self, rulename, response):\n                     value = operation.interceptResponse(rulename, response)\n                     if value is not None:\n                         response.setHeader(\n-                            \'X-Cache-Chain-Operations\',\n-                            \'; \'.join(chained)\n+                            "X-Cache-Chain-Operations", "; ".join(chained)\n                         )\n                         return value\n \n@@ -65,13 +62,10 @@ def modifyResponse(self, rulename, response):\n \n         chained = []\n \n-        if options[\'operations\']:\n-            for name in options[\'operations\']:\n-\n+        if options["operations"]:\n+            for name in options["operations"]:\n                 operation = queryMultiAdapter(\n-                    (self.published, self.request),\n-                    ICachingOperation,\n-                    name=name\n+                    (self.published, self.request), ICachingOperation, name=name\n                 )\n \n                 if operation is not None:\n@@ -79,4 +73,4 @@ def modifyResponse(self, rulename, response):\n                     operation.modifyResponse(rulename, response)\n \n         if chained:\n-            response.setHeader(\'X-Cache-Chain-Operations\', \'; \'.join(chained))\n+            response.setHeader("X-Cache-Chain-Operations", "; ".join(chained))\ndiff --git a/plone/caching/testing.py b/plone/caching/testing.py\nindex fe9e293..c17e449 100644\n--- a/plone/caching/testing.py\n+++ b/plone/caching/testing.py\n@@ -19,7 +19,7 @@ class ImplicitRulesetRegistryUnitTestingLayer(Layer):\n     startup hook.\n     """\n \n-    defaultBases = (UNIT_TESTING, )\n+    defaultBases = (UNIT_TESTING,)\n \n     def testSetUp(self):\n         provideAdapter(RulesetRegistry)\n@@ -40,5 +40,4 @@ def reset_explicit_mode(self):\n             registry.explicit = self._explicit_mode_cache\n \n \n-IMPLICIT_RULESET_REGISTRY_UNIT_TESTING = (\n-    ImplicitRulesetRegistryUnitTestingLayer())\n+IMPLICIT_RULESET_REGISTRY_UNIT_TESTING = ImplicitRulesetRegistryUnitTestingLayer()\ndiff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py\nindex 99fcd9f..77f5a9d 100644\n--- a/plone/caching/tests/test_hooks.py\n+++ b/plone/caching/tests/test_hooks.py\n@@ -31,11 +31,10 @@ class DummyView:\n \n class DummyResource:\n     def index_html(self):\n-        return b\'binary data\'\n+        return b"binary data"\n \n \n class DummyResponse(dict):\n-\n     locked = None\n \n     def addHeader(self, name, value):\n@@ -55,7 +54,7 @@ def getStatus(self):\n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n         self.environ = {}\n \n@@ -71,7 +70,6 @@ def __init__(self, response):\n \n \n class TestMutateResponse(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -87,9 +85,9 @@ def test_no_published_object(self):\n \n         request = DummyRequest(None, DummyResponse())\n \n-        MutatorTransform(None, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(None, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -97,9 +95,9 @@ def test_no_registry(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -108,9 +106,9 @@ def test_no_records(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -121,14 +119,14 @@ def test_no_mapping(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -139,14 +137,14 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_lookup_adapter(self):\n@@ -156,15 +154,15 @@ def test_no_lookup_adapter(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_name_not_found(self):\n@@ -175,19 +173,16 @@ def test_operation_name_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_operation_not_found(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -197,19 +192,16 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_unicode(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -219,13 +211,12 @@ def test_match_unicode(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -234,19 +225,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_bytes(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -256,13 +252,12 @@ def test_match_bytes(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -271,19 +266,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformBytes(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformBytes("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_iterable(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -293,13 +293,12 @@ def test_match_iterable(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -308,19 +307,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformIterable([\'\'], \'utf-8\')\n+        MutatorTransform(view, request).transformIterable([""], "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_method(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -330,13 +334,12 @@ def test_match_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -345,19 +348,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         request = DummyRequest(resource.index_html, DummyResponse())\n \n-        MutatorTransform(resource, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(resource, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_off_switch(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -367,13 +375,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -382,21 +389,20 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n \n class TestMutateResponseStreaming(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -419,7 +425,7 @@ def test_no_published_object(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -432,7 +438,7 @@ def test_no_registry(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -446,7 +452,7 @@ def test_no_records(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -457,7 +463,7 @@ def test_no_mapping(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -466,7 +472,7 @@ def test_no_mapping(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -477,7 +483,7 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -486,7 +492,7 @@ def test_no_cache_rule(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_lookup_adapter(self):\n@@ -496,8 +502,8 @@ def test_no_lookup_adapter(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -506,7 +512,7 @@ def test_no_lookup_adapter(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_name_not_found(self):\n@@ -517,8 +523,8 @@ def test_operation_name_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -527,11 +533,8 @@ def test_operation_name_not_found(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_operation_not_found(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -541,8 +544,8 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -551,11 +554,8 @@ def test_operation_not_found(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_unicode(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -565,13 +565,12 @@ def test_match_unicode(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -580,9 +579,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -591,10 +590,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_bytes(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -604,13 +608,12 @@ def test_match_bytes(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -619,9 +622,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -630,10 +633,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_iterable(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -643,13 +651,12 @@ def test_match_iterable(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -658,9 +665,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -669,10 +676,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_method(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -682,13 +694,12 @@ def test_match_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -697,9 +708,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         response = DummyResponse()\n@@ -708,10 +719,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_off_switch(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -721,13 +737,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -736,9 +751,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -747,12 +762,11 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n \n class TestIntercept(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -769,7 +783,7 @@ def test_no_published_object(self):\n         request = DummyRequest(None, DummyResponse())\n \n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -779,7 +793,7 @@ def test_no_registry(self):\n \n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -791,7 +805,7 @@ def test_no_records(self):\n \n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -802,13 +816,13 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -821,13 +835,13 @@ def test_no_mapping(self):\n \n         settings.operationMapping = None\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_not_found(self):\n@@ -838,18 +852,15 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_abort(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -859,13 +870,12 @@ def test_match_abort(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -874,18 +884,20 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 return None\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {"X-Cache-Rule": ["testrule"], "X-Cache-Foo": ["test"]},\n+            dict(request.response),\n+        )\n \n     def test_match_body(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -895,13 +907,12 @@ def test_match_body(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -910,11 +921,11 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(304)\n-                return \'dummy\'\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -922,23 +933,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'plone.transformchain.disable\': True},\n-            request.environ\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": True}, request.environ)\n         self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_match_body_explicitly_enable_transform_chain(self):\n@@ -949,13 +959,12 @@ def test_match_body_explicitly_enable_transform_chain(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -964,12 +973,12 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(304)\n-                self.request.environ[\'plone.transformchain.disable\'] = False\n-                return \'dummy\'\n+                self.request.environ["plone.transformchain.disable"] = False\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -977,23 +986,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": False}, request.environ)\n         self.assertEqual(\n-            {\'plone.transformchain.disable\': False},\n-            request.environ\n-        )\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_match_body_method(self):\n@@ -1004,13 +1012,12 @@ def test_match_body_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1019,11 +1026,11 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(200)\n-                return \'dummy\'\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         request = DummyRequest(resource.index_html, DummyResponse())\n@@ -1031,23 +1038,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(200, e.status)\n             self.assertEqual(200, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": True}, request.environ)\n         self.assertEqual(\n-            {\'plone.transformchain.disable\': True},\n-            request.environ\n-        )\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_off_switch(self):\n@@ -1058,13 +1064,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1073,23 +1078,21 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n-                return \'dummy\'\n+                response.addHeader("X-Cache-Foo", "test")\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_dont_swallow_conflict_error(self):\n-\n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n         class DummyRulesetLookup:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1104,24 +1107,22 @@ def __call__(self):\n         registry.registerInterface(ICacheSettings)\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         self.assertRaises(ConflictError, intercept, DummyEvent(request))\n \n     def test_swallow_other_error(self):\n-\n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n         class DummyRulesetLookup:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def __call__(self):\n-                raise AttributeError(\'Should be swallowed and logged\')\n+                raise AttributeError("Should be swallowed and logged")\n \n         provideAdapter(DummyRulesetLookup)\n \n@@ -1130,7 +1131,7 @@ def __call__(self):\n         registry.registerInterface(ICacheSettings)\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -1138,14 +1139,14 @@ def __call__(self):\n         try:\n             intercept(DummyEvent(request))\n         except Exception:\n-            self.fail(\'Intercept should not raise\')\n+            self.fail("Intercept should not raise")\n \n     def test_exception_view(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n-        exc = Intercepted(status=200, responseBody=\'Test\')\n+        exc = Intercepted(status=200, responseBody="Test")\n         excView = InterceptorResponse(exc, request)\n-        self.assertEqual(\'Test\', excView())\n+        self.assertEqual("Test", excView())\n \n \n def test_suite():\ndiff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py\nindex a44200f..5107b17 100644\n--- a/plone/caching/tests/test_lookup.py\n+++ b/plone/caching/tests/test_lookup.py\n@@ -10,19 +10,17 @@ class DummyView:\n \n \n class DummyResponse(dict):\n-\n     def addHeader(self, name, value):\n         self.setdefault(name, []).append(value)\n \n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n \n \n class TestLookup(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def test_no_cache_rule(self):\n@@ -31,10 +29,10 @@ def test_no_cache_rule(self):\n         self.assertEqual(None, DefaultRulesetLookup(view, request)())\n \n     def test_match(self):\n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n-        self.assertEqual(\'testrule\', DefaultRulesetLookup(view, request)())\n+        self.assertEqual("testrule", DefaultRulesetLookup(view, request)())\n \n \n def test_suite():\ndiff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py\nindex 82798e8..3dd4c2b 100644\n--- a/plone/caching/tests/test_operations.py\n+++ b/plone/caching/tests/test_operations.py\n@@ -22,7 +22,6 @@ class DummyView:\n \n \n class DummyResponse(dict):\n-\n     def addHeader(self, name, value):\n         self.setdefault(name, []).append(value)\n \n@@ -32,12 +31,11 @@ def setHeader(self, name, value):\n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n \n \n class TestChain(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -49,66 +47,63 @@ def test_no_option(self):\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operations_list_not_set(self):\n-\n-        self.registry.records[\n-            f\'{Chain.prefix}.operations\'\n-        ] = Record(field.List(value_type=field.Text()))\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text())\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operations_empty(self):\n-\n-        self.registry.records[\n-            f\'{Chain.prefix}.operations\'\n-        ] = Record(field.List(value_type=field.Text()), [])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), []\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_chained_operations_not_found(self):\n-\n-        self.registry.records[\n-            f\'{Chain.prefix}.operations\'\n-        ] = Record(field.List(value_type=field.Text()), [\'op1\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_multiple_operations_one_found(self):\n-        self.registry.records[\n-            f\'{Chain.prefix}.operations\'\n-        ] = Record(field.List(value_type=field.Text()), [\'op1\', \'op2\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1", "op2"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -116,44 +111,39 @@ def test_multiple_operations_one_found(self):\n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return \'foo\'\n+                return "foo"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op2\')\n+        provideAdapter(DummyOperation, name="op2")\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n \n-        self.assertEqual(\'foo\', ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Chain-Operations\': \'op2\'},\n-            dict(request.response)\n-        )\n+        self.assertEqual("foo", ret)\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Chain-Operations": "op2"}, dict(request.response))\n \n         request = DummyRequest(view, DummyResponse())\n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual(\n-            {\'X-Mutated\': \'testrule\',\n-             \'X-Cache-Chain-Operations\': \'op2\'},\n-            dict(request.response)\n+            {"X-Mutated": "testrule", "X-Cache-Chain-Operations": "op2"},\n+            dict(request.response),\n         )\n \n     def test_multiple_operations_multiple_found(self):\n-        self.registry.records[\n-            f\'{Chain.prefix}.operations\'\n-        ] = Record(field.List(value_type=field.Text()), [\'op1\', \'op2\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1", "op2"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -161,55 +151,52 @@ def test_multiple_operations_multiple_found(self):\n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation1:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return \'foo\'\n+                return "foo"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated-1\'] = rulename\n+                response["X-Mutated-1"] = rulename\n \n-        provideAdapter(DummyOperation1, name=\'op1\')\n+        provideAdapter(DummyOperation1, name="op1")\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n         class DummyOperation2:\n-\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return \'bar\'\n+                return "bar"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated-2\'] = rulename\n+                response["X-Mutated-2"] = rulename\n \n-        provideAdapter(DummyOperation2, name=\'op2\')\n+        provideAdapter(DummyOperation2, name="op2")\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n \n-        self.assertEqual(\'foo\', ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Chain-Operations\': \'op1\'},\n-            dict(request.response)\n-        )\n+        self.assertEqual("foo", ret)\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Chain-Operations": "op1"}, dict(request.response))\n \n         request = DummyRequest(view, DummyResponse())\n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual(\n-            {\'X-Mutated-1\': \'testrule\',\n-             \'X-Mutated-2\': \'testrule\',\n-             \'X-Cache-Chain-Operations\': \'op1; op2\'},\n-            dict(request.response)\n+            {\n+                "X-Mutated-1": "testrule",\n+                "X-Mutated-2": "testrule",\n+                "X-Cache-Chain-Operations": "op1; op2",\n+            },\n+            dict(request.response),\n         )\n \n \ndiff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py\nindex c7c0301..f5eb3d2 100644\n--- a/plone/caching/tests/test_utils.py\n+++ b/plone/caching/tests/test_utils.py\n@@ -18,16 +18,12 @@\n \n \n class TestLookupOption(unittest.TestCase):\n-\n     def tearDown(self):\n         zope.component.testing.tearDown()\n \n     def test_lookupOption_no_registry(self):\n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n         self.assertTrue(result is _marker)\n \n@@ -35,10 +31,7 @@ def test_lookupOption_no_record(self):\n         provideUtility(Registry(), IRegistry)\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n         self.assertTrue(result is _marker)\n \n@@ -46,146 +39,128 @@ def test_lookupOption_default(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test\'] = Record(\n-            field.TextLine(),\n-            \'default\'\n+        registry.records["plone.caching.tests.test"] = Record(\n+            field.TextLine(), "default"\n         )\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n-        self.assertEqual(\'default\', result)\n+        self.assertEqual("default", result)\n \n     def test_lookupOption_override(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test\'] = r = Record(\n-            field.TextLine(),\n-            \'default\'\n+        registry.records["plone.caching.tests.test"] = r = Record(\n+            field.TextLine(), "default"\n         )\n-        registry.records[\'plone.caching.tests.testrule.test\'] = Record(\n-            FieldRef(r.__name__, r.field),\n-            \'override\'\n+        registry.records["plone.caching.tests.testrule.test"] = Record(\n+            FieldRef(r.__name__, r.field), "override"\n         )\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n-        self.assertEqual(\'override\', result)\n+        self.assertEqual("override", result)\n \n \n class TestLookupOptions(unittest.TestCase):\n-\n     def tearDown(self):\n         zope.component.testing.tearDown()\n \n     def test_lookupOptions_no_registry(self):\n-\n         @provider(ICachingOperationType)\n         class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n \n-            title = \'\'\n-            description = \'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': _marker}, result)\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": _marker}, result)\n \n     def test_lookupOptions_no_records(self):\n         provideUtility(Registry(), IRegistry)\n \n         @provider(ICachingOperationType)\n         class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n \n-            title = \'\'\n-            description = \'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': _marker}, result)\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": _marker}, result)\n \n     def test_lookupOptions_default(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            \'foo\'\n-        )\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "foo")\n \n         @provider(ICachingOperationType)\n         class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n \n-            title = \'\'\n-            description = \'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': \'foo\'}, result)\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": "foo"}, result)\n \n     def test_lookupOptions_override(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test1\'] = Record(\n-            field.TextLine(),\n-            \'foo\'\n-        )\n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            \'bar\'\n-        )\n-        registry.records[\'plone.caching.tests.testrule.test2\'] = Record(\n-            field.TextLine(),\n-            \'baz\'\n+        registry.records["plone.caching.tests.test1"] = Record(field.TextLine(), "foo")\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "bar")\n+        registry.records["plone.caching.tests.testrule.test2"] = Record(\n+            field.TextLine(), "baz"\n         )\n \n         @provider(ICachingOperationType)\n         class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n \n-            title = \'\'\n-            description = \'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': \'foo\', \'test2\': \'baz\'}, result)\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": "foo", "test2": "baz"}, result)\n \n     def test_lookupOptions_named(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            \'foo\'\n-        )\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "foo")\n \n         @provider(ICachingOperationType)\n         class DummyOperation:\n-\n-            title = \'\'\n-            description = \'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        provideUtility(DummyOperation, name=\'plone.caching.tests\')\n-\n-        result = lookupOptions(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            default=_marker\n-        )\n-        self.assertEqual({\'test1\': _marker, \'test2\': \'foo\'}, result)\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        provideUtility(DummyOperation, name="plone.caching.tests")\n+\n+        result = lookupOptions("plone.caching.tests", "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": "foo"}, result)\n \n \n def test_suite():\ndiff --git a/plone/caching/utils.py b/plone/caching/utils.py\nindex 4cd7d84..c8fb605 100644\n--- a/plone/caching/utils.py\n+++ b/plone/caching/utils.py\n@@ -29,13 +29,9 @@ def lookupOptions(type_, rulename, default=None):\n     options = {}\n     registry = queryUtility(IRegistry)\n \n-    for option in getattr(type_, \'options\', ()):\n+    for option in getattr(type_, "options", ()):\n         options[option] = lookupOption(\n-            type_.prefix,\n-            rulename,\n-            option,\n-            default,\n-            registry\n+            type_.prefix, rulename, option, default, registry\n         )\n \n     return options\n@@ -65,11 +61,22 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):\n     if registry is None:\n         return default\n \n-    key = \'.\'.join((prefix, rulename, option,))\n+    key = ".".join(\n+        (\n+            prefix,\n+            rulename,\n+            option,\n+        )\n+    )\n     if key in registry:\n         return registry[key]\n \n-    key = \'.\'.join((prefix, option,))\n+    key = ".".join(\n+        (\n+            prefix,\n+            option,\n+        )\n+    )\n     if key in registry:\n         return registry[key]\n \n@@ -77,14 +84,13 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):\n \n \n def findOperation(request):\n-\n-    published = request.get(\'PUBLISHED\', None)\n+    published = request.get("PUBLISHED", None)\n     if published is None:\n         return None, None, None\n \n     # If we get a method, try to look up its class\n     if isinstance(published, types.MethodType):\n-        published = getattr(published, \'__self__\', published)\n+        published = getattr(published, "__self__", published)\n \n     registry = queryUtility(IRegistry)\n     if registry is None:\n@@ -97,7 +103,13 @@ def findOperation(request):\n     if settings.operationMapping is None:\n         return None, None, None\n \n-    lookup = queryMultiAdapter((published, request,), IRulesetLookup)\n+    lookup = queryMultiAdapter(\n+        (\n+            published,\n+            request,\n+        ),\n+        IRulesetLookup,\n+    )\n     if lookup is None:\n         return None, None, None\n \n@@ -112,8 +124,6 @@ def findOperation(request):\n         return rule, None, None\n \n     operation = queryMultiAdapter(\n-        (published, request),\n-        ICachingOperation,\n-        name=operationName\n+        (published, request), ICachingOperation, name=operationName\n     )\n     return rule, operationName, operation\ndiff --git a/setup.py b/setup.py\nindex ba19933..bc7f8f5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -7,57 +7,54 @@\n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n-version = \'1.2.3.dev0\'\n \n-long_description = (\n-    read(\'README.rst\')\n-    + \'\\n\' +\n-    read(\'CHANGES.rst\')\n-    + \'\\n\'\n-    )\n+version = "1.2.3.dev0"\n \n-setup(name=\'plone.caching\',\n-      version=version,\n-      description="Zope 2 integration for z3c.caching",\n-      long_description=long_description,\n-      # Get more strings from\n-      # https://pypi.org/classifiers/\n-      classifiers=[\n-         "Development Status :: 5 - Production/Stable",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n-          "Framework :: Plone :: 5.2",\n-          "Framework :: Plone :: Core",\n-          "License :: OSI Approved :: GNU General Public License (GPL)",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-          "Topic :: Software Development :: Libraries :: Python Modules",\n-          ],\n-      keywords=\'plone http caching\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.caching\',\n-      license=\'GPL\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'setuptools\',\n-          \'z3c.caching [zcml]\',\n-          \'plone.registry\',\n-          \'zope.interface\',\n-          \'zope.component\',\n-          \'zope.i18nmessageid\',\n-          \'zope.schema\',\n-          \'plone.transformchain\',\n-          \'Zope2 >= 2.12.4\',\n-      ],\n-      entry_points="""\n+long_description = read("README.rst") + "\\n" + read("CHANGES.rst") + "\\n"\n+\n+setup(\n+    name="plone.caching",\n+    version=version,\n+    description="Zope 2 integration for z3c.caching",\n+    long_description=long_description,\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "License :: OSI Approved :: GNU General Public License (GPL)",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n+    ],\n+    keywords="plone http caching",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.caching",\n+    license="GPL",\n+    packages=find_packages(),\n+    namespace_packages=["plone"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        "setuptools",\n+        "z3c.caching [zcml]",\n+        "plone.registry",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.i18nmessageid",\n+        "zope.schema",\n+        "plone.transformchain",\n+        "Zope2 >= 2.12.4",\n+    ],\n+    entry_points="""\n       # -*- Entry points: -*-\n       """,\n-      )\n+)\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:06:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/1c16e5dae3d829f8fc5e96a80516ada95f540184

chore: zpretty

Files changed:
M plone/caching/configure.zcml

b'diff --git a/plone/caching/configure.zcml b/plone/caching/configure.zcml\nindex 9b05d8a..bda844d 100644\n--- a/plone/caching/configure.zcml\n+++ b/plone/caching/configure.zcml\n@@ -1,38 +1,51 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n-\n-    <include package="z3c.caching" file="meta.zcml" />\n-    <include package="z3c.caching" />\n-\n-    <include package="plone.registry" />\n-    <include package="plone.transformchain" />\n-\n-    <!-- Default lookup -->\n-    <adapter factory=".lookup.DefaultRulesetLookup" />\n-\n-    <!-- The \'Chain\' operation -->\n-    <adapter factory=".operations.Chain"   name="plone.caching.operations.chain" />\n-    <utility component=".operations.Chain" name="plone.caching.operations.chain" />\n-\n-    <!-- Intercepts are performed by raising an exception prior to view\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n+\n+  <include\n+      package="z3c.caching"\n+      file="meta.zcml"\n+      />\n+  <include package="z3c.caching" />\n+\n+  <include package="plone.registry" />\n+  <include package="plone.transformchain" />\n+\n+  <!-- Default lookup -->\n+  <adapter factory=".lookup.DefaultRulesetLookup" />\n+\n+  <!-- The \'Chain\' operation -->\n+  <adapter\n+      factory=".operations.Chain"\n+      name="plone.caching.operations.chain"\n+      />\n+  <utility\n+      name="plone.caching.operations.chain"\n+      component=".operations.Chain"\n+      />\n+\n+  <!-- Intercepts are performed by raising an exception prior to view\n          invocation. There is a view on this exception which renders the\n          intercepted response.\n      -->\n-    <subscriber handler=".hooks.intercept" />\n-    <browser:page\n-        name="index.html"\n-        for=".hooks.Intercepted"\n-        class=".hooks.InterceptorResponse"\n-        permission="zope2.Public"\n-        />\n-\n-    <!-- Mutator: plone.transformchain order 12000 -->\n-    <adapter factory=".hooks.MutatorTransform" name="plone.caching.mutator" />\n-\n-    <!-- Mutator for streaming responses -->\n-    <subscriber handler=".hooks.modifyStreamingResponse" />\n+  <subscriber handler=".hooks.intercept" />\n+  <browser:page\n+      name="index.html"\n+      for=".hooks.Intercepted"\n+      class=".hooks.InterceptorResponse"\n+      permission="zope2.Public"\n+      />\n+\n+  <!-- Mutator: plone.transformchain order 12000 -->\n+  <adapter\n+      factory=".hooks.MutatorTransform"\n+      name="plone.caching.mutator"\n+      />\n+\n+  <!-- Mutator for streaming responses -->\n+  <subscriber handler=".hooks.modifyStreamingResponse" />\n \n </configure>\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:07:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/30eb6e85030ea4bf4b61b7caa8b7265f620409d0

feat: codespell

@erral maybe you don't want to bother translations with an original
typo...

Files changed:
M plone/caching/interfaces.py

b'diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py\nindex 48aa89b..b9e9aa0 100644\n--- a/plone/caching/interfaces.py\n+++ b/plone/caching/interfaces.py\n@@ -126,7 +126,7 @@ def __call__(self, rulename, response):\n \n     description = schema.Text(\n         title=_("Description"),\n-        description=_("A longer description for the operaton"),\n+        description=_("A longer description for the operation"),\n         required=False,\n     )\n \n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:08:36+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/6d8f511bf919dceccd464b3ab5052a8d602c2450

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex bc7f8f5..78df7d9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -43,6 +43,7 @@ def read(*rnames):\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "z3c.caching [zcml]",\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:09:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/14438e8e2e8e39fe5ee0c4ae539f8369bb126c3f

chore: update pypi classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 78df7d9..4f9a896 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,16 +22,14 @@ def read(*rnames):\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords="plone http caching",\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-05T00:09:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/685cb632320848fe2a934e918eed3d76068b59bb

chore: major version required

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 4f9a896..fb61220 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = "1.2.3.dev0"\n+version = "2.0.0.dev0"\n \n long_description = read("README.rst") + "\\n" + read("CHANGES.rst") + "\\n"\n \n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-07T12:28:20+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/6bdb61bd94e68c5bf995de826707828fdb60c31f

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex fb61220..b7f95aa 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,8 +51,12 @@ def read(*rnames):\n         "zope.i18nmessageid",\n         "zope.schema",\n         "plone.transformchain",\n-        "Zope2 >= 2.12.4",\n     ],\n+    extras_require={\n+        "test": [\n+            "plone.testing",\n+        ],\n+    },\n     entry_points="""\n       # -*- Entry points: -*-\n       """,\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2023-04-10T02:57:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/cab6ce2c1743381ae0a5505acf36ae022f01c162

Merge pull request #9 from plone/config-with-default-template-4a20aeff

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3b8337e6.internal
A tox.ini
M plone/__init__.py
M plone/caching/__init__.py
M plone/caching/configure.zcml
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..eb3c765\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3b8337e6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3b8337e6.internal b/news/3b8337e6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3b8337e6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/caching/__init__.py b/plone/caching/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/caching/__init__.py\n+++ b/plone/caching/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/caching/configure.zcml b/plone/caching/configure.zcml\nindex 9b05d8a..bda844d 100644\n--- a/plone/caching/configure.zcml\n+++ b/plone/caching/configure.zcml\n@@ -1,38 +1,51 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n-\n-    <include package="z3c.caching" file="meta.zcml" />\n-    <include package="z3c.caching" />\n-\n-    <include package="plone.registry" />\n-    <include package="plone.transformchain" />\n-\n-    <!-- Default lookup -->\n-    <adapter factory=".lookup.DefaultRulesetLookup" />\n-\n-    <!-- The \'Chain\' operation -->\n-    <adapter factory=".operations.Chain"   name="plone.caching.operations.chain" />\n-    <utility component=".operations.Chain" name="plone.caching.operations.chain" />\n-\n-    <!-- Intercepts are performed by raising an exception prior to view\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone"\n+    >\n+\n+  <include\n+      package="z3c.caching"\n+      file="meta.zcml"\n+      />\n+  <include package="z3c.caching" />\n+\n+  <include package="plone.registry" />\n+  <include package="plone.transformchain" />\n+\n+  <!-- Default lookup -->\n+  <adapter factory=".lookup.DefaultRulesetLookup" />\n+\n+  <!-- The \'Chain\' operation -->\n+  <adapter\n+      factory=".operations.Chain"\n+      name="plone.caching.operations.chain"\n+      />\n+  <utility\n+      name="plone.caching.operations.chain"\n+      component=".operations.Chain"\n+      />\n+\n+  <!-- Intercepts are performed by raising an exception prior to view\n          invocation. There is a view on this exception which renders the\n          intercepted response.\n      -->\n-    <subscriber handler=".hooks.intercept" />\n-    <browser:page\n-        name="index.html"\n-        for=".hooks.Intercepted"\n-        class=".hooks.InterceptorResponse"\n-        permission="zope2.Public"\n-        />\n-\n-    <!-- Mutator: plone.transformchain order 12000 -->\n-    <adapter factory=".hooks.MutatorTransform" name="plone.caching.mutator" />\n-\n-    <!-- Mutator for streaming responses -->\n-    <subscriber handler=".hooks.modifyStreamingResponse" />\n+  <subscriber handler=".hooks.intercept" />\n+  <browser:page\n+      name="index.html"\n+      for=".hooks.Intercepted"\n+      class=".hooks.InterceptorResponse"\n+      permission="zope2.Public"\n+      />\n+\n+  <!-- Mutator: plone.transformchain order 12000 -->\n+  <adapter\n+      factory=".hooks.MutatorTransform"\n+      name="plone.caching.mutator"\n+      />\n+\n+  <!-- Mutator for streaming responses -->\n+  <subscriber handler=".hooks.modifyStreamingResponse" />\n \n </configure>\ndiff --git a/plone/caching/hooks.py b/plone/caching/hooks.py\nindex 67599e5..d8ee106 100644\n--- a/plone/caching/hooks.py\n+++ b/plone/caching/hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import X_CACHE_OPERATION_HEADER\n from plone.caching.interfaces import X_CACHE_RULE_HEADER\n from plone.caching.utils import findOperation\n@@ -16,7 +15,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.caching\')\n+logger = logging.getLogger("plone.caching")\n \n \n class IStreamedResponse(Interface):\n@@ -36,12 +35,12 @@ class Intercepted(Exception):\n     responseBody = None\n     status = None\n \n-    def __init__(self, status=304, responseBody=u""):\n+    def __init__(self, status=304, responseBody=""):\n         self.status = status\n         self.responseBody = responseBody\n \n \n-class InterceptorResponse(object):\n+class InterceptorResponse:\n     """View for the Intercepted exception, serving to return an empty\n     response in the case of an intercepted response.\n     """\n@@ -67,7 +66,7 @@ def intercept(event):\n \n     try:\n         request = event.request\n-        published = request.get(\'PUBLISHED\', None)\n+        published = request.get("PUBLISHED", None)\n         rule, operationName, operation = findOperation(request)\n \n         if rule is None:\n@@ -75,10 +74,7 @@ def intercept(event):\n \n         request.response.setHeader(X_CACHE_RULE_HEADER, rule)\n         logger.debug(\n-            \'Published: %s Ruleset: %s Operation: %s\',\n-            repr(published),\n-            rule,\n-            operation\n+            "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n         )\n \n         if operation is not None:\n@@ -87,10 +83,7 @@ def intercept(event):\n             if responseBody is not None:\n                 # Only put this in the response if the operation actually\n                 # intercepted something\n-                request.response.setHeader(\n-                    X_CACHE_OPERATION_HEADER,\n-                    operationName\n-                )\n+                request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)\n \n                 # Stop any post-processing, including the operation\'s response\n                 # modification\n@@ -111,14 +104,13 @@ def intercept(event):\n         raise\n     except Exception:\n         logging.exception(\n-            \'Swallowed exception in plone.caching IPubAfterTraversal event \'\n-            \'handler\'\n+            "Swallowed exception in plone.caching IPubAfterTraversal event " "handler"\n         )\n \n \n @implementer(ITransform)\n @adapter(Interface, Interface)\n-class MutatorTransform(object):\n+class MutatorTransform:\n     """Transformation using plone.transformchain.\n \n     This is registered at order 12000, i.e. "late". A typical transform\n@@ -159,7 +151,7 @@ def mutate(self):\n         if IStreamedResponse.providedBy(request):\n             return\n \n-        published = request.get(\'PUBLISHED\', None)\n+        published = request.get("PUBLISHED", None)\n         rule, operationName, operation = findOperation(request)\n \n         if rule is None:\n@@ -167,16 +159,14 @@ def mutate(self):\n \n         request.response.setHeader(X_CACHE_RULE_HEADER, rule)\n         logger.debug(\n-            \'Published: %s Ruleset: %s Operation: %s\',\n-            repr(published),\n-            rule,\n-            operation\n+            "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n         )\n \n         if operation is not None:\n             request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)\n             operation.modifyResponse(rule, request.response)\n \n+\n # Hook for streaming responses - does not use plone.transformchain, since\n # sequencing is less likely to be an issue here\n \n@@ -199,7 +189,7 @@ def modifyStreamingResponse(event):\n     # again in the normal hook above\n     alsoProvides(request, IStreamedResponse)\n \n-    published = request.get(\'PUBLISHED\', None)\n+    published = request.get("PUBLISHED", None)\n \n     rule, operationName, operation = findOperation(request)\n \n@@ -208,10 +198,7 @@ def modifyStreamingResponse(event):\n \n     response.setHeader(X_CACHE_RULE_HEADER, rule)\n     logger.debug(\n-        \'Published: %s Ruleset: %s Operation: %s\',\n-        repr(published),\n-        rule,\n-        operation\n+        "Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation\n     )\n \n     if operation is not None:\ndiff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py\nindex 6886608..b9e9aa0 100644\n--- a/plone/caching/interfaces.py\n+++ b/plone/caching/interfaces.py\n@@ -1,33 +1,32 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n \n import zope.i18nmessageid\n \n \n-_ = zope.i18nmessageid.MessageFactory(\'plone\')\n+_ = zope.i18nmessageid.MessageFactory("plone")\n \n-X_CACHE_RULE_HEADER = \'X-Cache-Rule\'\n-X_CACHE_OPERATION_HEADER = \'X-Cache-Operation\'\n+X_CACHE_RULE_HEADER = "X-Cache-Rule"\n+X_CACHE_OPERATION_HEADER = "X-Cache-Operation"\n \n \n class ICacheSettings(Interface):\n-    """Settings expected to be found in plone.registry\n-    """\n+    """Settings expected to be found in plone.registry"""\n \n     enabled = schema.Bool(\n-        title=_(u\'Globally enabled\'),\n-        description=_(u\'If not set, no caching operations will be attempted\'),\n+        title=_("Globally enabled"),\n+        description=_("If not set, no caching operations will be attempted"),\n         default=False,\n     )\n \n     operationMapping = schema.Dict(\n-        title=_(u\'Rule set/operation mapping\'),\n-        description=_(u\'Maps rule set names to operation names\'),\n-        key_type=schema.DottedName(title=_(u\'Rule set name\')),\n-        value_type=schema.DottedName(title=_(u\'Caching operation name\')),\n+        title=_("Rule set/operation mapping"),\n+        description=_("Maps rule set names to operation names"),\n+        key_type=schema.DottedName(title=_("Rule set name")),\n+        value_type=schema.DottedName(title=_("Caching operation name")),\n     )\n \n+\n #\n #  Cache operations\n #\n@@ -71,6 +70,7 @@ def modifyResponse(ruleset, response):\n # Cache operation *types* (for UI support)\n #\n \n+\n class ICachingOperationType(Interface):\n     """A named utility which is used to provide UI support for caching\n     operations. The name should correspond to the operation adapter name.\n@@ -120,33 +120,37 @@ def __call__(self, rulename, response):\n     """\n \n     title = schema.TextLine(\n-        title=_(u\'Title\'),\n-        description=_(u\'A descriptive title for the operation\'),\n+        title=_("Title"),\n+        description=_("A descriptive title for the operation"),\n     )\n \n     description = schema.Text(\n-        title=_(u\'Description\'),\n-        description=_(u\'A longer description for the operaton\'),\n+        title=_("Description"),\n+        description=_("A longer description for the operation"),\n         required=False,\n     )\n \n     prefix = schema.DottedName(\n-        title=_(u\'Registry prefix\'),\n-        description=_(u\'Prefix for records in the registry pertaining to \'\n-                      u\'this operation. This, alongside the next \'\n-                      u\'parameter, allows the user interface to present \'\n-                      u\'relevant configuration options for this \'\n-                      u\'operation.\'),\n+        title=_("Registry prefix"),\n+        description=_(\n+            "Prefix for records in the registry pertaining to "\n+            "this operation. This, alongside the next "\n+            "parameter, allows the user interface to present "\n+            "relevant configuration options for this "\n+            "operation."\n+        ),\n         required=False,\n     )\n \n     options = schema.Tuple(\n-        title=_(u\'Registry options\'),\n-        description=_(u\'A tuple of options which can be used to \'\n-                      u\'configure this operation. An option is looked \'\n-                      u\'up in the registry by concatenating the prefix \'\n-                      u\'with the option name, optionally preceded by \'\n-                      u\'the rule set name, to allow per-rule overrides.\'),\n+        title=_("Registry options"),\n+        description=_(\n+            "A tuple of options which can be used to "\n+            "configure this operation. An option is looked "\n+            "up in the registry by concatenating the prefix "\n+            "with the option name, optionally preceded by "\n+            "the rule set name, to allow per-rule overrides."\n+        ),\n         value_type=schema.DottedName(),\n         required=False,\n     )\n@@ -156,6 +160,7 @@ def __call__(self, rulename, response):\n # Internal abstractions\n #\n \n+\n class IRulesetLookup(Interface):\n     """Abstraction for the lookup of response rulesets from published objects.\n     This is an unnamed multi- adapter from (published, request).\ndiff --git a/plone/caching/lookup.py b/plone/caching/lookup.py\nindex d9f495f..7f4a1c6 100644\n--- a/plone/caching/lookup.py\n+++ b/plone/caching/lookup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import IRulesetLookup\n from z3c.caching.registry import lookup\n from zope.component import adapter\n@@ -8,7 +7,7 @@\n \n @implementer(IRulesetLookup)\n @adapter(Interface, Interface)\n-class DefaultRulesetLookup(object):\n+class DefaultRulesetLookup:\n     """Default ruleset lookup.\n \n     Only override this if you have very special needs. The safest option is\ndiff --git a/plone/caching/operations.py b/plone/caching/operations.py\nindex 1ca1427..6e6cbb1 100644\n--- a/plone/caching/operations.py\n+++ b/plone/caching/operations.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import _\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.interfaces import ICachingOperationType\n@@ -13,7 +12,7 @@\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, Interface)\n-class Chain(object):\n+class Chain:\n     """Caching operation which chains together several other operations.\n \n     When intercepting the response, the first chained operation to return a\n@@ -27,10 +26,11 @@ class Chain(object):\n \n     The option must be a sequence type (e.g. a ``Tuple``).\n     """\n-    title = _(u"Chain")\n-    description = _(u"Allows multiple operations to be chained together")\n-    prefix = \'plone.caching.operations.chain\'\n-    options = (\'operations\',)\n+\n+    title = _("Chain")\n+    description = _("Allows multiple operations to be chained together")\n+    prefix = "plone.caching.operations.chain"\n+    options = ("operations",)\n \n     def __init__(self, published, request):\n         self.published = published\n@@ -41,13 +41,10 @@ def interceptResponse(self, rulename, response):\n \n         chained = []\n \n-        if options[\'operations\']:\n-            for name in options[\'operations\']:\n-\n+        if options["operations"]:\n+            for name in options["operations"]:\n                 operation = queryMultiAdapter(\n-                    (self.published, self.request),\n-                    ICachingOperation,\n-                    name=name\n+                    (self.published, self.request), ICachingOperation, name=name\n                 )\n \n                 if operation is not None:\n@@ -56,8 +53,7 @@ def interceptResponse(self, rulename, response):\n                     value = operation.interceptResponse(rulename, response)\n                     if value is not None:\n                         response.setHeader(\n-                            \'X-Cache-Chain-Operations\',\n-                            \'; \'.join(chained)\n+                            "X-Cache-Chain-Operations", "; ".join(chained)\n                         )\n                         return value\n \n@@ -66,13 +62,10 @@ def modifyResponse(self, rulename, response):\n \n         chained = []\n \n-        if options[\'operations\']:\n-            for name in options[\'operations\']:\n-\n+        if options["operations"]:\n+            for name in options["operations"]:\n                 operation = queryMultiAdapter(\n-                    (self.published, self.request),\n-                    ICachingOperation,\n-                    name=name\n+                    (self.published, self.request), ICachingOperation, name=name\n                 )\n \n                 if operation is not None:\n@@ -80,4 +73,4 @@ def modifyResponse(self, rulename, response):\n                     operation.modifyResponse(rulename, response)\n \n         if chained:\n-            response.setHeader(\'X-Cache-Chain-Operations\', \'; \'.join(chained))\n+            response.setHeader("X-Cache-Chain-Operations", "; ".join(chained))\ndiff --git a/plone/caching/testing.py b/plone/caching/testing.py\nindex 8f1c28a..c17e449 100644\n--- a/plone/caching/testing.py\n+++ b/plone/caching/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing import Layer\n from plone.testing.zca import UNIT_TESTING\n from z3c.caching.registry import getGlobalRulesetRegistry\n@@ -20,7 +19,7 @@ class ImplicitRulesetRegistryUnitTestingLayer(Layer):\n     startup hook.\n     """\n \n-    defaultBases = (UNIT_TESTING, )\n+    defaultBases = (UNIT_TESTING,)\n \n     def testSetUp(self):\n         provideAdapter(RulesetRegistry)\n@@ -41,5 +40,4 @@ def reset_explicit_mode(self):\n             registry.explicit = self._explicit_mode_cache\n \n \n-IMPLICIT_RULESET_REGISTRY_UNIT_TESTING = (\n-    ImplicitRulesetRegistryUnitTestingLayer())\n+IMPLICIT_RULESET_REGISTRY_UNIT_TESTING = ImplicitRulesetRegistryUnitTestingLayer()\ndiff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py\nindex 1d93d42..77f5a9d 100644\n--- a/plone/caching/tests/test_hooks.py\n+++ b/plone/caching/tests/test_hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.hooks import intercept\n from plone.caching.hooks import Intercepted\n from plone.caching.hooks import InterceptorResponse\n@@ -26,17 +25,16 @@\n import z3c.caching.registry\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \n-class DummyResource(object):\n+class DummyResource:\n     def index_html(self):\n-        return b\'binary data\'\n+        return b"binary data"\n \n \n class DummyResponse(dict):\n-\n     locked = None\n \n     def addHeader(self, name, value):\n@@ -56,23 +54,22 @@ def getStatus(self):\n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n         self.environ = {}\n \n \n-class DummyEvent(object):\n+class DummyEvent:\n     def __init__(self, request):\n         self.request = request\n \n \n-class DummyStreamingEvent(object):\n+class DummyStreamingEvent:\n     def __init__(self, response):\n         self.response = response\n \n \n class TestMutateResponse(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -88,9 +85,9 @@ def test_no_published_object(self):\n \n         request = DummyRequest(None, DummyResponse())\n \n-        MutatorTransform(None, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(None, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -98,9 +95,9 @@ def test_no_registry(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -109,9 +106,9 @@ def test_no_records(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -122,14 +119,14 @@ def test_no_mapping(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -140,14 +137,14 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_lookup_adapter(self):\n@@ -157,15 +154,15 @@ def test_no_lookup_adapter(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_name_not_found(self):\n@@ -176,19 +173,16 @@ def test_operation_name_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_operation_not_found(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -198,19 +192,16 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_unicode(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -220,13 +211,12 @@ def test_match_unicode(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -235,19 +225,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_bytes(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -257,13 +252,12 @@ def test_match_bytes(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -272,19 +266,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformBytes(\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformBytes("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_iterable(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -294,13 +293,12 @@ def test_match_iterable(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -309,19 +307,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformIterable([\'\'], \'utf-8\')\n+        MutatorTransform(view, request).transformIterable([""], "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_method(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -331,13 +334,12 @@ def test_match_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -346,19 +348,24 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         request = DummyRequest(resource.index_html, DummyResponse())\n \n-        MutatorTransform(resource, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(resource, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_off_switch(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -368,13 +375,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -383,21 +389,20 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n-        MutatorTransform(view, request).transformUnicode(u\'\', \'utf-8\')\n+        MutatorTransform(view, request).transformUnicode("", "utf-8")\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n \n class TestMutateResponseStreaming(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -420,7 +425,7 @@ def test_no_published_object(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -433,7 +438,7 @@ def test_no_registry(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -447,7 +452,7 @@ def test_no_records(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -458,7 +463,7 @@ def test_no_mapping(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -467,7 +472,7 @@ def test_no_mapping(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -478,7 +483,7 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -487,7 +492,7 @@ def test_no_cache_rule(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_lookup_adapter(self):\n@@ -497,8 +502,8 @@ def test_no_lookup_adapter(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -507,7 +512,7 @@ def test_no_lookup_adapter(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_name_not_found(self):\n@@ -518,8 +523,8 @@ def test_operation_name_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -528,11 +533,8 @@ def test_operation_name_not_found(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_operation_not_found(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -542,8 +544,8 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -552,11 +554,8 @@ def test_operation_not_found(self):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_unicode(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -566,13 +565,12 @@ def test_match_unicode(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -581,9 +579,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -592,10 +590,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_bytes(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -605,13 +608,12 @@ def test_match_bytes(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -620,9 +622,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -631,10 +633,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_iterable(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -644,13 +651,12 @@ def test_match_iterable(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -659,9 +665,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -670,10 +676,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_match_method(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -683,13 +694,12 @@ def test_match_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -698,9 +708,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         response = DummyResponse()\n@@ -709,10 +719,15 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Operation\': [\'op1\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual(\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n+        )\n \n     def test_off_switch(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -722,13 +737,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -737,9 +751,9 @@ def interceptResponse(self, rulename, response):\n                 return None\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         response = DummyResponse()\n@@ -748,12 +762,11 @@ def modifyResponse(self, rulename, response):\n \n         modifyStreamingResponse(DummyStreamingEvent(response))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n \n class TestIntercept(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -770,7 +783,7 @@ def test_no_published_object(self):\n         request = DummyRequest(None, DummyResponse())\n \n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': None}, dict(request))\n+        self.assertEqual({"PUBLISHED": None}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_registry(self):\n@@ -780,7 +793,7 @@ def test_no_registry(self):\n \n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_records(self):\n@@ -792,7 +805,7 @@ def test_no_records(self):\n \n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_cache_rule(self):\n@@ -803,13 +816,13 @@ def test_no_cache_rule(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        settings.operationMapping = {\'testrule\': \'dummy\'}\n+        settings.operationMapping = {"testrule": "dummy"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_no_mapping(self):\n@@ -822,13 +835,13 @@ def test_no_mapping(self):\n \n         settings.operationMapping = None\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operation_not_found(self):\n@@ -839,18 +852,15 @@ def test_operation_not_found(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'notfound\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "notfound"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\']},\n-            dict(request.response)\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Rule": ["testrule"]}, dict(request.response))\n \n     def test_match_abort(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -860,13 +870,12 @@ def test_match_abort(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -875,18 +884,20 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 return None\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual({\'X-Cache-Rule\': [\'testrule\'],\n-                          \'X-Cache-Foo\': [\'test\']}, dict(request.response))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual(\n+            {"X-Cache-Rule": ["testrule"], "X-Cache-Foo": ["test"]},\n+            dict(request.response),\n+        )\n \n     def test_match_body(self):\n         provideAdapter(DefaultRulesetLookup)\n@@ -896,13 +907,12 @@ def test_match_body(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -911,11 +921,11 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(304)\n-                return u\'dummy\'\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -923,23 +933,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'plone.transformchain.disable\': True},\n-            request.environ\n-        )\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": True}, request.environ)\n         self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_match_body_explicitly_enable_transform_chain(self):\n@@ -950,13 +959,12 @@ def test_match_body_explicitly_enable_transform_chain(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -965,12 +973,12 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(304)\n-                self.request.environ[\'plone.transformchain.disable\'] = False\n-                return u\'dummy\'\n+                self.request.environ["plone.transformchain.disable"] = False\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -978,23 +986,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": False}, request.environ)\n         self.assertEqual(\n-            {\'plone.transformchain.disable\': False},\n-            request.environ\n-        )\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_match_body_method(self):\n@@ -1005,13 +1012,12 @@ def test_match_body_method(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n \n-        z3c.caching.registry.register(DummyResource, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyResource, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1020,11 +1026,11 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n+                response.addHeader("X-Cache-Foo", "test")\n                 response.setStatus(200)\n-                return u\'dummy\'\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         resource = DummyResource()\n         request = DummyRequest(resource.index_html, DummyResponse())\n@@ -1032,23 +1038,22 @@ def interceptResponse(self, rulename, response):\n             intercept(DummyEvent(request))\n             self.fail()\n         except Intercepted as e:\n-            self.assertEqual(u\'dummy\', e.responseBody)\n+            self.assertEqual("dummy", e.responseBody)\n             self.assertEqual(200, e.status)\n             self.assertEqual(200, request.response.status)\n             self.assertEqual(True, request.response.locked)\n         except Exception as e:\n             self.fail(str(e))\n \n-        self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\n+        self.assertEqual({"PUBLISHED": resource.index_html}, dict(request))\n+        self.assertEqual({"plone.transformchain.disable": True}, request.environ)\n         self.assertEqual(\n-            {\'plone.transformchain.disable\': True},\n-            request.environ\n-        )\n-        self.assertEqual(\n-            {\'X-Cache-Rule\': [\'testrule\'],\n-             \'X-Cache-Operation\': [\'op1\'],\n-             \'X-Cache-Foo\': [\'test\']},\n-            dict(request.response)\n+            {\n+                "X-Cache-Rule": ["testrule"],\n+                "X-Cache-Operation": ["op1"],\n+                "X-Cache-Foo": ["test"],\n+            },\n+            dict(request.response),\n         )\n \n     def test_off_switch(self):\n@@ -1059,13 +1064,12 @@ def test_off_switch(self):\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = False\n \n-        z3c.caching.registry.register(DummyView, \'testrule\')\n-        settings.operationMapping = {\'testrule\': \'op1\'}\n+        z3c.caching.registry.register(DummyView, "testrule")\n+        settings.operationMapping = {"testrule": "op1"}\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1074,23 +1078,21 @@ def modifyResponse(self, rulename, response):\n                 pass\n \n             def interceptResponse(self, rulename, response):\n-                response.addHeader(\'X-Cache-Foo\', \'test\')\n-                return u\'dummy\'\n+                response.addHeader("X-Cache-Foo", "test")\n+                return "dummy"\n \n-        provideAdapter(DummyOperation, name=\'op1\')\n+        provideAdapter(DummyOperation, name="op1")\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         intercept(DummyEvent(request))\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_dont_swallow_conflict_error(self):\n-\n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n-        class DummyRulesetLookup(object):\n-\n+        class DummyRulesetLookup:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n@@ -1105,24 +1107,22 @@ def __call__(self):\n         registry.registerInterface(ICacheSettings)\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n         self.assertRaises(ConflictError, intercept, DummyEvent(request))\n \n     def test_swallow_other_error(self):\n-\n         @implementer(IRulesetLookup)\n         @adapter(Interface, Interface)\n-        class DummyRulesetLookup(object):\n-\n+        class DummyRulesetLookup:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def __call__(self):\n-                raise AttributeError(\'Should be swallowed and logged\')\n+                raise AttributeError("Should be swallowed and logged")\n \n         provideAdapter(DummyRulesetLookup)\n \n@@ -1131,7 +1131,7 @@ def __call__(self):\n         registry.registerInterface(ICacheSettings)\n         settings = registry.forInterface(ICacheSettings)\n         settings.enabled = True\n-        settings.operationMapping = {\'foo\': \'bar\'}\n+        settings.operationMapping = {"foo": "bar"}\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -1139,14 +1139,14 @@ def __call__(self):\n         try:\n             intercept(DummyEvent(request))\n         except Exception:\n-            self.fail(\'Intercept should not raise\')\n+            self.fail("Intercept should not raise")\n \n     def test_exception_view(self):\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n-        exc = Intercepted(status=200, responseBody=u\'Test\')\n+        exc = Intercepted(status=200, responseBody="Test")\n         excView = InterceptorResponse(exc, request)\n-        self.assertEqual(u\'Test\', excView())\n+        self.assertEqual("Test", excView())\n \n \n def test_suite():\ndiff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py\nindex a146717..5107b17 100644\n--- a/plone/caching/tests/test_lookup.py\n+++ b/plone/caching/tests/test_lookup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.lookup import DefaultRulesetLookup\n from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n@@ -6,24 +5,22 @@\n import z3c.caching.registry\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \n class DummyResponse(dict):\n-\n     def addHeader(self, name, value):\n         self.setdefault(name, []).append(value)\n \n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n \n \n class TestLookup(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def test_no_cache_rule(self):\n@@ -32,10 +29,10 @@ def test_no_cache_rule(self):\n         self.assertEqual(None, DefaultRulesetLookup(view, request)())\n \n     def test_match(self):\n-        z3c.caching.registry.register(DummyView, \'testrule\')\n+        z3c.caching.registry.register(DummyView, "testrule")\n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n-        self.assertEqual(\'testrule\', DefaultRulesetLookup(view, request)())\n+        self.assertEqual("testrule", DefaultRulesetLookup(view, request)())\n \n \n def test_suite():\ndiff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py\nindex 3c0ce14..3dd4c2b 100644\n--- a/plone/caching/tests/test_operations.py\n+++ b/plone/caching/tests/test_operations.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.operations import Chain\n from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n@@ -18,12 +17,11 @@\n _marker = object()\n \n \n-class DummyView(object):\n+class DummyView:\n     pass\n \n \n class DummyResponse(dict):\n-\n     def addHeader(self, name, value):\n         self.setdefault(name, []).append(value)\n \n@@ -33,12 +31,11 @@ def setHeader(self, name, value):\n \n class DummyRequest(dict):\n     def __init__(self, published, response):\n-        self[\'PUBLISHED\'] = published\n+        self["PUBLISHED"] = published\n         self.response = response\n \n \n class TestChain(unittest.TestCase):\n-\n     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING\n \n     def setUp(self):\n@@ -50,167 +47,156 @@ def test_no_option(self):\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operations_list_not_set(self):\n-\n-        self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()))\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text())\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_operations_empty(self):\n-\n-        self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), []\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n         self.assertEqual(None, ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_chained_operations_not_found(self):\n-\n-        self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual({}, dict(request.response))\n \n     def test_multiple_operations_one_found(self):\n-        self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1", "op2"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation(object):\n-\n+        class DummyOperation:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'foo\'\n+                return "foo"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated\'] = rulename\n+                response["X-Mutated"] = rulename\n \n-        provideAdapter(DummyOperation, name=\'op2\')\n+        provideAdapter(DummyOperation, name="op2")\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n \n-        self.assertEqual(u\'foo\', ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Chain-Operations\': \'op2\'},\n-            dict(request.response)\n-        )\n+        self.assertEqual("foo", ret)\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Chain-Operations": "op2"}, dict(request.response))\n \n         request = DummyRequest(view, DummyResponse())\n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual(\n-            {\'X-Mutated\': \'testrule\',\n-             \'X-Cache-Chain-Operations\': \'op2\'},\n-            dict(request.response)\n+            {"X-Mutated": "testrule", "X-Cache-Chain-Operations": "op2"},\n+            dict(request.response),\n         )\n \n     def test_multiple_operations_multiple_found(self):\n-        self.registry.records[\n-            \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n+        self.registry.records[f"{Chain.prefix}.operations"] = Record(\n+            field.List(value_type=field.Text()), ["op1", "op2"]\n+        )\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation1(object):\n-\n+        class DummyOperation1:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'foo\'\n+                return "foo"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated-1\'] = rulename\n+                response["X-Mutated-1"] = rulename\n \n-        provideAdapter(DummyOperation1, name=\'op1\')\n+        provideAdapter(DummyOperation1, name="op1")\n \n         @implementer(ICachingOperation)\n         @adapter(Interface, Interface)\n-        class DummyOperation2(object):\n-\n+        class DummyOperation2:\n             def __init__(self, published, request):\n                 self.published = published\n                 self.request = request\n \n             def interceptResponse(self, rulename, response):\n-                return u\'bar\'\n+                return "bar"\n \n             def modifyResponse(self, rulename, response):\n-                response[\'X-Mutated-2\'] = rulename\n+                response["X-Mutated-2"] = rulename\n \n-        provideAdapter(DummyOperation2, name=\'op2\')\n+        provideAdapter(DummyOperation2, name="op2")\n \n         chain = Chain(view, request)\n-        ret = chain.interceptResponse(\'testrule\', request.response)\n+        ret = chain.interceptResponse("testrule", request.response)\n \n-        self.assertEqual(u\'foo\', ret)\n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n-        self.assertEqual(\n-            {\'X-Cache-Chain-Operations\': \'op1\'},\n-            dict(request.response)\n-        )\n+        self.assertEqual("foo", ret)\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n+        self.assertEqual({"X-Cache-Chain-Operations": "op1"}, dict(request.response))\n \n         request = DummyRequest(view, DummyResponse())\n         chain = Chain(view, request)\n-        chain.modifyResponse(\'testrule\', request.response)\n+        chain.modifyResponse("testrule", request.response)\n \n-        self.assertEqual({\'PUBLISHED\': view}, dict(request))\n+        self.assertEqual({"PUBLISHED": view}, dict(request))\n         self.assertEqual(\n-            {\'X-Mutated-1\': \'testrule\',\n-             \'X-Mutated-2\': \'testrule\',\n-             \'X-Cache-Chain-Operations\': \'op1; op2\'},\n-            dict(request.response)\n+            {\n+                "X-Mutated-1": "testrule",\n+                "X-Mutated-2": "testrule",\n+                "X-Cache-Chain-Operations": "op1; op2",\n+            },\n+            dict(request.response),\n         )\n \n \ndiff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py\nindex 30e9833..f5eb3d2 100644\n--- a/plone/caching/tests/test_utils.py\n+++ b/plone/caching/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICachingOperationType\n from plone.caching.utils import lookupOption\n from plone.caching.utils import lookupOptions\n@@ -19,16 +18,12 @@\n \n \n class TestLookupOption(unittest.TestCase):\n-\n     def tearDown(self):\n         zope.component.testing.tearDown()\n \n     def test_lookupOption_no_registry(self):\n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n         self.assertTrue(result is _marker)\n \n@@ -36,10 +31,7 @@ def test_lookupOption_no_record(self):\n         provideUtility(Registry(), IRegistry)\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n         self.assertTrue(result is _marker)\n \n@@ -47,146 +39,128 @@ def test_lookupOption_default(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test\'] = Record(\n-            field.TextLine(),\n-            u\'default\'\n+        registry.records["plone.caching.tests.test"] = Record(\n+            field.TextLine(), "default"\n         )\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n-        self.assertEqual(u\'default\', result)\n+        self.assertEqual("default", result)\n \n     def test_lookupOption_override(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test\'] = r = Record(\n-            field.TextLine(),\n-            u\'default\'\n+        registry.records["plone.caching.tests.test"] = r = Record(\n+            field.TextLine(), "default"\n         )\n-        registry.records[\'plone.caching.tests.testrule.test\'] = Record(\n-            FieldRef(r.__name__, r.field),\n-            u\'override\'\n+        registry.records["plone.caching.tests.testrule.test"] = Record(\n+            FieldRef(r.__name__, r.field), "override"\n         )\n \n         result = lookupOption(\n-            \'plone.caching.tests\',\n-            \'testrule\',\n-            \'test\',\n-            default=_marker\n+            "plone.caching.tests", "testrule", "test", default=_marker\n         )\n-        self.assertEqual(u\'override\', result)\n+        self.assertEqual("override", result)\n \n \n class TestLookupOptions(unittest.TestCase):\n-\n     def tearDown(self):\n         zope.component.testing.tearDown()\n \n     def test_lookupOptions_no_registry(self):\n-\n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n-\n-            title = u\'\'\n-            description = u\'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': _marker}, result)\n+        class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": _marker}, result)\n \n     def test_lookupOptions_no_records(self):\n         provideUtility(Registry(), IRegistry)\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n-\n-            title = u\'\'\n-            description = u\'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': _marker}, result)\n+        class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": _marker}, result)\n \n     def test_lookupOptions_default(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            u\'foo\'\n-        )\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "foo")\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n-\n-            title = u\'\'\n-            description = u\'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': _marker, \'test2\': u\'foo\'}, result)\n+        class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": "foo"}, result)\n \n     def test_lookupOptions_override(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test1\'] = Record(\n-            field.TextLine(),\n-            u\'foo\'\n-        )\n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            u\'bar\'\n-        )\n-        registry.records[\'plone.caching.tests.testrule.test2\'] = Record(\n-            field.TextLine(),\n-            u\'baz\'\n+        registry.records["plone.caching.tests.test1"] = Record(field.TextLine(), "foo")\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "bar")\n+        registry.records["plone.caching.tests.testrule.test2"] = Record(\n+            field.TextLine(), "baz"\n         )\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n-\n-            title = u\'\'\n-            description = u\'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        result = lookupOptions(DummyOperation, \'testrule\', default=_marker)\n-        self.assertEqual({\'test1\': u\'foo\', \'test2\': u\'baz\'}, result)\n+        class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        result = lookupOptions(DummyOperation, "testrule", default=_marker)\n+        self.assertEqual({"test1": "foo", "test2": "baz"}, result)\n \n     def test_lookupOptions_named(self):\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n \n-        registry.records[\'plone.caching.tests.test2\'] = Record(\n-            field.TextLine(),\n-            u\'foo\'\n-        )\n+        registry.records["plone.caching.tests.test2"] = Record(field.TextLine(), "foo")\n \n         @provider(ICachingOperationType)\n-        class DummyOperation(object):\n-\n-            title = u\'\'\n-            description = u\'\'\n-            prefix = \'plone.caching.tests\'\n-            options = (\'test1\', \'test2\',)\n-\n-        provideUtility(DummyOperation, name=u\'plone.caching.tests\')\n-\n-        result = lookupOptions(\n-            u\'plone.caching.tests\',\n-            \'testrule\',\n-            default=_marker\n-        )\n-        self.assertEqual({\'test1\': _marker, \'test2\': u\'foo\'}, result)\n+        class DummyOperation:\n+            title = ""\n+            description = ""\n+            prefix = "plone.caching.tests"\n+            options = (\n+                "test1",\n+                "test2",\n+            )\n+\n+        provideUtility(DummyOperation, name="plone.caching.tests")\n+\n+        result = lookupOptions("plone.caching.tests", "testrule", default=_marker)\n+        self.assertEqual({"test1": _marker, "test2": "foo"}, result)\n \n \n def test_suite():\ndiff --git a/plone/caching/utils.py b/plone/caching/utils.py\nindex 58a8cc0..c8fb605 100644\n--- a/plone/caching/utils.py\n+++ b/plone/caching/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.caching.interfaces import ICacheSettings\n from plone.caching.interfaces import ICachingOperation\n from plone.caching.interfaces import ICachingOperationType\n@@ -30,13 +29,9 @@ def lookupOptions(type_, rulename, default=None):\n     options = {}\n     registry = queryUtility(IRegistry)\n \n-    for option in getattr(type_, \'options\', ()):\n+    for option in getattr(type_, "options", ()):\n         options[option] = lookupOption(\n-            type_.prefix,\n-            rulename,\n-            option,\n-            default,\n-            registry\n+            type_.prefix, rulename, option, default, registry\n         )\n \n     return options\n@@ -66,11 +61,22 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):\n     if registry is None:\n         return default\n \n-    key = \'.\'.join((prefix, rulename, option,))\n+    key = ".".join(\n+        (\n+            prefix,\n+            rulename,\n+            option,\n+        )\n+    )\n     if key in registry:\n         return registry[key]\n \n-    key = \'.\'.join((prefix, option,))\n+    key = ".".join(\n+        (\n+            prefix,\n+            option,\n+        )\n+    )\n     if key in registry:\n         return registry[key]\n \n@@ -78,14 +84,13 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):\n \n \n def findOperation(request):\n-\n-    published = request.get(\'PUBLISHED\', None)\n+    published = request.get("PUBLISHED", None)\n     if published is None:\n         return None, None, None\n \n     # If we get a method, try to look up its class\n     if isinstance(published, types.MethodType):\n-        published = getattr(published, \'__self__\', published)\n+        published = getattr(published, "__self__", published)\n \n     registry = queryUtility(IRegistry)\n     if registry is None:\n@@ -98,7 +103,13 @@ def findOperation(request):\n     if settings.operationMapping is None:\n         return None, None, None\n \n-    lookup = queryMultiAdapter((published, request,), IRulesetLookup)\n+    lookup = queryMultiAdapter(\n+        (\n+            published,\n+            request,\n+        ),\n+        IRulesetLookup,\n+    )\n     if lookup is None:\n         return None, None, None\n \n@@ -113,8 +124,6 @@ def findOperation(request):\n         return rule, None, None\n \n     operation = queryMultiAdapter(\n-        (published, request),\n-        ICachingOperation,\n-        name=operationName\n+        (published, request), ICachingOperation, name=operationName\n     )\n     return rule, operationName, operation\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex d6e3546..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,20 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-    *.cfg\n-    .coveragerc\n     .editorconfig\n-    .gitattributes\n-    bootstrap-buildout.py\n-\n-[isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-not_skip=__init__.py\n-\n-\n-\n-\n-[bdist_wheel]\n-universal = 1\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex a4ef841..b7f95aa 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,61 +1,63 @@\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n-from setuptools import setup, find_packages\n \n \n def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n-version = \'1.2.3.dev0\'\n \n-long_description = (\n-    read(\'README.rst\')\n-    + \'\\n\' +\n-    read(\'CHANGES.rst\')\n-    + \'\\n\'\n-    )\n+version = "2.0.0.dev0"\n+\n+long_description = read("README.rst") + "\\n" + read("CHANGES.rst") + "\\n"\n \n-setup(name=\'plone.caching\',\n-      version=version,\n-      description="Zope 2 integration for z3c.caching",\n-      long_description=long_description,\n-      # Get more strings from\n-      # https://pypi.org/classifiers/\n-      classifiers=[\n-         "Development Status :: 5 - Production/Stable",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n-          "Framework :: Plone :: 5.2",\n-          "Framework :: Plone :: Core",\n-          "License :: OSI Approved :: GNU General Public License (GPL)",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-          "Topic :: Software Development :: Libraries :: Python Modules",\n-          ],\n-      keywords=\'plone http caching\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.caching\',\n-      license=\'GPL\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'setuptools\',\n-          \'z3c.caching [zcml]\',\n-          \'plone.registry\',\n-          \'zope.interface\',\n-          \'zope.component\',\n-          \'zope.i18nmessageid\',\n-          \'zope.schema\',\n-          \'plone.transformchain\',\n-          \'Zope2 >= 2.12.4\',\n-      ],\n-      entry_points="""\n+setup(\n+    name="plone.caching",\n+    version=version,\n+    description="Zope 2 integration for z3c.caching",\n+    long_description=long_description,\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "License :: OSI Approved :: GNU General Public License (GPL)",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Topic :: Software Development :: Libraries :: Python Modules",\n+    ],\n+    keywords="plone http caching",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.caching",\n+    license="GPL",\n+    packages=find_packages(),\n+    namespace_packages=["plone"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    python_requires=">=3.8",\n+    install_requires=[\n+        "setuptools",\n+        "z3c.caching [zcml]",\n+        "plone.registry",\n+        "zope.interface",\n+        "zope.component",\n+        "zope.i18nmessageid",\n+        "zope.schema",\n+        "plone.transformchain",\n+    ],\n+    extras_require={\n+        "test": [\n+            "plone.testing",\n+        ],\n+    },\n+    entry_points="""\n       # -*- Entry points: -*-\n       """,\n-      )\n+)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..d0b9ff5\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.caching {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.caching {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

