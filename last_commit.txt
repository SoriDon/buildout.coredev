Repository: plone.api


Branch: refs/heads/master
Date: 2016-01-19T17:02:57+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/9df38915dfea4ea4213c007aa7e4f2aba9da7467

Remove the Plone APIs conventions.
They are moved to  http://docs.plone.org/develop/styleguide and http://docs.plone.org/develop/coredev/docs/git.html
Reformat linebreaks.
:raises: instead :raise:

Files changed:
M docs/CHANGES.rst
M docs/content.rst
M docs/contribute/conventions.rst
M docs/contribute/develop.rst
M docs/contribute/index.rst
M docs/contribute/release.rst
M docs/index.rst
M setup.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 30ea6bd..d6a2cc4 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -10,7 +10,10 @@ New:
 
 Fixes:
 
-- *add item here*
+- Remove the Plone APIs conventions. They are moved to  
+http://docs.plone.org/develop/styleguide
+and http://docs.plone.org/develop/coredev/docs/git.html
+[thet]
 
 
 1.4.11 (2016-01-08)
diff --git a/docs/content.rst b/docs/content.rst
index 8fb8474..c581e98 100644
--- a/docs/content.rst
+++ b/docs/content.rst
@@ -450,7 +450,8 @@ To transition your content to a new workflow state, use the :meth:`api.content.t
         'published'
     )
 
-If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.  These arguments can be saved to your transition using custom workflow variables inside of the ZMI using an expression.  ie. "python:state_change.kwargs.get('comment', '')"
+If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.
+These arguments can be saved to your transition using custom workflow variables inside of the ZMI using an expression, for example: "python:state_change.kwargs.get('comment', '')"
 
 .. code-block:: python
 
diff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst
index cd009a2..e0a7925 100644
--- a/docs/contribute/conventions.rst
+++ b/docs/contribute/conventions.rst
@@ -1,668 +1,4 @@
-.. admonition:: GitHub-only
-
-    WARNING: If you are reading this on GitHub, DON'T!
-    Read the documentation at `api.plone.org <http://api.plone.org/contribute/conventions.html>`_
-    so you have working references and proper formatting.
-
-.. _conventions:
-
-===========
-Conventions
-===========
-
-.. contents:: :local:
-
-Introduction
-==============
-
-We've modeled the following rules and recommendations based on the following
-documents:
-
- * `PEP8 <http://www.python.org/dev/peps/pep-0008>`__
- * `PEP257 <http://www.python.org/dev/peps/pep-0257>`_
- * `Rope project <http://rope.sourceforge.net/overview.html>`_
- * `Google Style Guide <http://google-styleguide.googlecode.com/svn/trunk/pyguide.html>`_
- * `Pylons Coding Style <http://docs.pylonsproject.org/en/latest/community/codestyle.html>`_
- * `Tim Pope on Git commit messages <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__
-
-Line length
-===========
-
-All Python code in this package should be PEP8 valid. This includes adhering
-to the 80-char line length. If you absolutely need to break this rule, append
-``# noPEP8`` to the offending line to skip it in syntax checks.
-
 .. note::
-    Configuring your editor to display a line at 79th column helps a lot
-    here and saves time.
-
-.. note::
-    The line length rule also applies to non-python source files, such as ``.zcml`` files,
-    but is a bit more relaxed there.
-    It explicitly **does not** aply to documentation ``.rst`` files.
-    For rst files, use *semantic* linebreaks.
-    See `the Plone rst styleguide <http://docs.plone.org/about/rst-styleguide.html#line-length-translations>`_ for the reasoning behind it.
-
-Breaking lines
---------------
-
-Based on code we love to look at (Pyramid, Requests, etc.), we allow the
-following two styles for breaking long lines into blocks:
-
-1. Break into next line with one additional indent block.
-
-   .. sourcecode:: python
-
-       foo = do_something(
-           very_long_argument='foo', another_very_long_argument='bar')
-
-       # For functions the ): needs to be placed on the following line
-       def some_func(
-           very_long_argument='foo', another_very_long_argument='bar'
-       ):
-
-2. If this still doesn't fit the 80-char limit, break into multiple lines.
-
-   .. sourcecode:: python
-
-       foo = dict(
-           very_long_argument='foo',
-           another_very_long_argument='bar',
-       )
-
-       a_long_list = [
-           "a_fairly_long_string",
-           "quite_a_long_string_indeed",
-           "an_exceptionally_long_string_of_characters",
-       ]
-
- * Arguments on first line, directly after the opening parenthesis are
-   forbidden when breaking lines.
- * The last argument line needs to have a trailing comma (to be nice to the
-   next developer coming in to add something as an argument and minimize VCS
-   diffs in these cases).
- * The closing parenthesis or bracket needs to have the same indentation level
-   as the first line.
- * Each line can only contain a single argument.
- * The same style applies to dicts, lists, return calls, etc.
-
-This package follows all rules above, `check out the source
-<https://github.com/plone/plone.api/tree/master/src/plone/api>`_ to see them
-in action.
-
-autopep8
---------
-
-Making old code pep8 compliant can be a lot of work.  There is a tool
-that can automatically do some of this work for you: `autopep8
-<https://pypi.python.org/pypi/autopep8>`_.  This fixes various issues,
-for example fixing indentation to be a multiple of four.  Just install
-it with pip and call it like this::
-
-    pip install autopep8
-    autopep8 -i filename.py
-    autopep8 -i -r directory
-
-It is best to first run autopep8 in the default non aggressive mode,
-which means it only does whitespace changes.  To run this recursively
-on the current directory, changing files in place::
-
-    autopep8 -i -r .
-
-Quickly check the changes and then commit them.
-
-WARNING: be *very* careful when running this in a skins directory, if
-you run it there at all.  It will make changes to the top of the file
-like this, which completely breaks the skin script::
-
-    -##parameters=policy_in=''
-    +# parameters=policy_in=''
-
-With those safe changes out of the way, you can move on to a second,
-more aggresive round::
-
-    autopep8 -i --aggressive -r .
-
-Check these changes more thoroughly.  At the very least check if Plone
-can still start in the foreground and that there are no failures or
-errors in the tests.
-
-Not all changes are always safe.  You can ignore some checks::
-
-    autopep8 -i --ignore W690,E711,E721 --aggressive -r .
-
-This skips the following changes:
-
-- W690: Fix various deprecated code (via lib2to3). (Can be bad for
-  Python 2.4.)
-
-- E721: Use `isinstance()` instead of comparing types directly. (There
-  are uses of this in for example GenericSetup and plone.api that must
-  not be fixed.)
-
-- E711: Fix comparison with None.  (This can break SQLAlchemy code.)
-
-You can check what would be changed by one specific code::
-
-    autopep8 --diff --select E309 -r .
-
-Indentation
-===========
-
-For Python files, we stick with the `PEP 8 recommondation
-<http://www.python.org/dev/peps/pep-0008/#indentation>`_: Use 4 spaces per
-indentation level.
-
-For ZCML and XML (GenericSetup) files, we recommend the `Zope Toolkit's coding
-style on ZCML <http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html>`_
-::
-
-  Indentation of 2 characters to show nesting, 4 characters to list attributes
-  on separate lines. This distinction makes it easier to see the difference
-  between attributes and nested elements.
-
-
-EditorConfig
-------------
-
-`EditorConfig <http://editorconfig.org/>`_
-provides a way to share the same configuration for all major source code editors.
-
-You only need to install the plugin for your editor of choice,
-and add the following configuration on ``~/.editorconfig``.
-
-.. sourcecode:: ini
-
-    [*]
-    indent_style = space
-    end_of_line = lf
-    insert_final_newline = true
-    trim_trailing_whitespace = true
-    charset = utf-8
-
-    [{*.py,*.cfg}]
-    indent_size = 4
-
-    [{*.html,*.dtml,*.pt,*.zpt,*.xml,*.zcml,*.js}]
-    indent_size = 2
-
-    [Makefile]
-    indent_style = tab
-
-Quoting
-=======
-
-For strings and such prefer using single quotes over double quotes. The reason
-is that sometimes you do need to write a bit of HTML in your python code, and
-HTML feels more natural with double quotes so you wrap HTML string into single
-quotes. And if you are using single quotes for this reason, then be consistent
-and use them everywhere.
-
-There are two exceptions to this rule:
-
-* docstrings should always use double quotes (as per PEP-257).
-* if you want to use single quotes in your string, double quotes might make
-  more sense so you don't have to escape those single quotes.
-
-.. sourcecode:: python
-
-    # GOOD
-    print 'short'
-    print 'A longer string, but still using single quotes.'
-
-    # BAD
-    print "short"
-    print "A long string."
-
-    # EXCEPTIONS
-    print "I want to use a 'single quote' in my string."
-    """This is a docstring."""
-
-
-Docstrings style
-================
-
-Read and follow http://www.python.org/dev/peps/pep-0257/. There is one
-exception though: We reject BDFL's recommendation about inserting a blank line
-between the last paragraph in a multi-line docstring and its closing quotes as
-it's Emacs specific and two Emacs users here on the Beer & Wine Sprint both
-support our way.
-
-The content of the docstring must be written in the active first-person form,
-e.g. "Calculate X from Y" or "Determine the exact foo of bar".
-
-.. sourcecode:: python
-
-    def foo():
-        """Single line docstring."""
-
-    def bar():
-        """Multi-line docstring.
-
-        With the additional lines indented with the beginning quote and a
-        newline preceding the ending quote.
-        """
-
-If you wanna be extra nice, you are encouraged to document your method's
-parameters and their return values in a `reST field list syntax
-<http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists>`_.
-
-.. sourcecode:: rest
-
-    :param foo: blah blah
-    :type foo: string
-    :param bar: blah blah
-    :type bar: int
-    :returns: something
-
-Check out the `plone.api source
-<https://github.com/plone/plone.api/tree/master/src/plone/api>`_ for more
-usage examples. Also, see the following for examples on how to write
-good *Sphinxy* docstrings: http://stackoverflow.com/questions/4547849/good-examples-of-python-docstrings-for-sphinx.
-
-
-
-Unit tests style
-================
-
-Read http://www.voidspace.org.uk/python/articles/unittest2.shtml to learn what
-is new in :mod:`unittest2` and use it.
-
-This is not true for in-line documentation tests. Those still use old unittest
-test-cases, so you cannot use ``assertIn`` and similar.
-
-
-String formatting
-=================
-
-As per http://docs.python.org/2/library/stdtypes.html#str.format, we should
-prefer the new style string formatting (``.format()``) over the old one
-(``% ()``).
-
-Also use numbering, like so:
-
-.. sourcecode:: python
-
-    # GOOD
-    print "{0} is not {1}".format(1, 2)
-
-
-and *not* like this:
-
-.. sourcecode:: python
-
-    # BAD
-    print "{} is not {}".format(1, 2)
-    print "%s is not %s" % (1, 2)
-
-
-because Python 2.6 supports only explicitly numbered placeholders.
-
-
-About imports
-=============
-
-1. Don't use ``*`` to import *everything* from a module, because if you do,
-   pyflakes cannot detect undefined names (W404).
-2. Don't use commas to import multiple things on a single line.
-   Some developers use IDEs (like `Eclipse <http://pydev.org/>`_) or tools
-   (such as `mr.igor <http://pypi.python.org/pypi/mr.igor>`_)
-   that expect one import per line.
-   Let's be nice to them.
-3. Don't use relative paths, again to be nice to people using certain IDEs and
-   tools. Also `Google Python Style Guide` recommends against it.
-
-   .. sourcecode:: python
-
-       # GOOD
-       from plone.app.testing import something
-       from zope.component import getMultiAdapter
-       from zope.component import getSiteManager
-
-   instead of
-
-   .. sourcecode:: python
-
-       # BAD
-       from plone.app.testing import *
-       from zope.component import getMultiAdapter, getSiteManager
-
-4. Don't catch ``ImportError`` to detect whether a package is available or not,
-   as it might hide circular import errors. Instead, use
-   ``pkg_resources.get_distribution`` and catch ``DistributionNotFound``. More
-   background at http://do3.cc/blog/2010/08/20/do-not-catch-import-errors,-use-pkg_resources/.
-
-   .. sourcecode:: python
-
-       # GOOD
-       import pkg_resources
-
-       try:
-           pkg_resources.get_distribution('plone.dexterity')
-       except pkg_resources.DistributionNotFound:
-           HAS_DEXTERITY = False
-       else:
-           HAS_DEXTERITY = True
-
-   instead of
-
-   .. sourcecode:: python
-
-       # BAD
-       try:
-           import plone.dexterity
-           HAVE_DEXTERITY = True
-       except ImportError:
-           HAVE_DEXTERITY = False
-
-
-Grouping and sorting
---------------------
-
-Since Plone has such a huge code base, we don't want to lose developer time
-figuring out into which group some import goes (standard lib?, external
-package?, etc.). So we just sort everything alphabetically and insert one blank
-line between ``from foo import bar`` and ``import baz`` blocks. Conditional imports
-come last. Again, we *do not* distinguish between what is standard lib,
-external package or internal package in order to save time and avoid the hassle
-of explaining which is which.
-
-.. sourcecode:: python
-
-    # GOOD
-    from __future__ import division
-    from Acquisition import aq_inner
-    from plone.api import portal
-    from plone.api.exc import MissingParameterError
-    from Products.CMFCore.interfaces import ISiteRoot
-    from Products.CMFCore.WorkflowCore import WorkflowException
-
-    import pkg_resources
-    import random
-
-    try:
-        pkg_resources.get_distribution('plone.dexterity')
-    except pkg_resources.DistributionNotFound:
-        HAS_DEXTERITY = False
-    else:
-        HAS_DEXTERITY = True
-
-
-Declaring dependencies
-======================
-
-All direct dependencies should be declared in ``install_requires`` or
-``extras_require`` sections in ``setup.py``. Dependencies, which are not needed for
-a production environment (like "develop" or "test" dependencies) or are
-optional (like "Archetypes" or "Dexterity" flavors of the same package) should
-go in ``extras_require``. Remember to document how to enable specific features
-(and think of using ``zcml:condition`` statements, if you have such optional
-features).
-
-Generally all direct dependencies (packages directly imported or used in ZCML)
-should be declared, even if they would already be pulled in by other
-dependencies. This explicitness reduces possible runtime errors and gives a
-good overview on the complexity of a package.
-
-For example, if you depend on ``Products.CMFPlone`` and use ``getToolByName``
-from ``Products.CMFCore``, you should also declare the ``CMFCore`` dependency
-explicitly, even though it's pulled in by Plone itself. If you use namespace
-packages from the Zope distribution like ``Products.Five`` you should
-explicitly declare ``Zope`` as dependency.
-
-Inside each group of dependencies, lines should be sorted alphabetically.
-
-
-Versioning scheme
-=================
-
-For software versions, use a sequence-based versioning scheme, which is
-`compatible with setuptools <http://pythonhosted.org/setuptools/setuptools.html#specifying-your-project-s-version>`_::
-
-    MAJOR.MINOR[.MICRO][STATUS]
-
-The way, setuptools interprets versions is intuitive::
-
-    1.0 < 1.1dev < 1.1a1 < 1.1a2 < 1.1b < 1.1rc1 < 1.1 < 1.1.1
-
-You can test it with setuptools::
-
-    >>> from pkg_resources import parse_version
-    >>> parse_version('1.0') < parse_version('1.1.dev')
-    ... < parse_version('1.1.a1') < parse_version('1.1.a2')
-    ... < parse_version('1.1.b') < parse_version('1.1.rc1')
-    ... < parse_version('1.1') < parse_version('1.1.1')
-
-Setuptools recommends to seperate parts with a dot. The website about `semantic
-versioning <http://semver.org/>`_ is also worth a read.
-
-
-Restructured Text versus Plain Text
-===================================
-
-Use the Restructured Text (``.rst`` file extension) format instead of plain text
-files (``.txt`` file extension) for all documentation, including doctest files.
-This way you get nice syntax highlighting and formating in recent text editors,
-on GitHub and with Sphinx.
-
-
-.. _changes:
-
-Tracking changes
-================
-
-Feature-level changes to code are tracked inside ``CHANGES.rst``. The title
-of the ``CHANGES.rst`` file should be ``Changelog``. Example:
-
-.. sourcecode:: rst
-
-    Changelog
-    =========
-
-    1.0.0-dev (Unreleased)
-    ----------------------
-
-    - Added feature Z.
-      [github_userid1]
-
-    - Removed Y.
-      [github_userid2]
-
-
-    1.0.0-alpha.1 (2012-12-12)
-    --------------------------
-
-    - Fixed Bug X.
-      [github_userid1]
-
-
-Add an entry every time you add/remove a feature, fix a bug, etc. on top of the
-current development changes block.
-
-
-.. _sphinx-docs:
-
-Sphinx Documentation
-====================
-
-Un-documented code is broken code.
-
-For every feature you add to the codebase you should also add documentation
-for it to ``docs/``.
-
-After adding/modifying documentation, run ``make`` to re-generate your docs.
-
-Publicly available documentation on http://api.plone.org is automatically
-generated from these source files, periodically. So when you push changes
-to master on GitHub you should soon be able to see them published on
-``api.plone.org``.
-
-Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush
-up on your `reST` skills.
-
-Example:
-
-.. sourcecode:: python
-
-    def add(a, b):
-        """Calculate the sum of the two parameters.
-
-        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method`
-        and :attr:`mod.path.MY_CONSTANT` for more details.
-
-        :param a: The first operand.
-        :type a: :class:`mod.path.A`
-
-        :param b: The second operand.
-        :type b: :class:`mod.path.B`
-
-        :rtype: int
-        :return: The sum of the operands.
-        :raise: `KeyError`, if the operands are not the correct type.
-        """
-
-Attributes are documented using the `#:` marker above the attribute. The
-documentation may span multiple lines.
-
-.. sourcecode:: python
-
-    #: Description of the constant value
-    MY_CONSTANT = 0xc0ffee
-
-    class Foobar(object):
-
-        #: Description of the class variable which spans over
-        #: multiple lines
-        FOO = 1
-
-
-.. _travis_ci:
-
-Travis Continuous Integration
-=============================
-
-On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_
-runs all tests and syntax validation checks and reports build outcome to
-the ``#sprint`` IRC channel and the person who committed the last change.
-
-Travis is configured with the ``.travis.yml`` file located in the root of this
-package.
-
-
-.. _git_workflow:
-
-Git workflow & branching model
-==============================
-
-Our repository on GitHub has the following layout:
-
-* **feature branches**: all development for new features must be done in
-  dedicated branches, normally one branch per feature,
-* **master branch**: when features get completed they are merged into the
-  master branch; bugfixes are commited directly on the master branch,
-* **tags**: whenever we create a new release we tag the repository so we can
-  later re-trace our steps, re-release versions, etc.
-
-
-Release process for Plone packages
-====================================
-
-To keep the Plone software stack maintainable, the Python egg release process
-must be automated to high degree. This happens by enforcing Python packaging
-best practices and then making automated releases using the
-`zest.releaser <https://github.com/zestsoftware/zest.releaser/>`_  tool.
-
-* Anyone with necessary PyPi permissions must be able to make a new release
-  by running the ``fullrelease`` command
-
-... which includes ...
-
-* All releases must be hosted on PyPi
-
-* All versions must be tagged at version control
-
-* Each package must have README.rst with links to the version control
-  repository and issue tracker
-
-* CHANGES.txt (docs/HISTORY.txt in some packages) must be always up-to-date and
-  must contain list of functional changes which may affect package users.
-
-* CHANGES.txt must contain release dates
-
-* README.rst and CHANGES.txt must be visible on PyPi
-
-* Released eggs must contain generated gettext .mo files, but these files must
-  not be committed to the repository (files can be created with
-  *zest.pocompile* addon)
-
-* ``.gitignore`` and ``MANIFEST.in`` must reflect the files going to egg (must
-  include page template, po files)
-
-More information
-
-* `High quality automated package releases for Python with zest.releaser
-  <http://opensourcehacker.com/2012/08/14/high-quality-automated-package-releases-for-python-with-zest-releaser/>`_.
-
-
-.. _setting_up_git:
-
-Setting up Git
-==============
-
-Git is a very useful tool, especially when you configure it to your needs. Here
-are a couple of tips.
-
-Enhanced git prompt
--------------------
-
-Do one (or more) of the following:
-
-* http://clalance.blogspot.com/2011/10/git-bash-prompts-and-tab-completion.html
-* http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/
-* http://gitready.com/advanced/2009/02/05/bash-auto-completion.html
-
-Git dotfiles
-------------
-
-Plone developers have dotfiles similar to these:
-https://github.com/plone/plone.dotfiles.
-
-
-Git Commit Message Style
-------------------------
-
-`Tim Pope's post on Git commit message style
-<http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__
-is widely considered the gold standard:
-
-::
-
-    Capitalized, short (50 chars or less) summary
-
-    More detailed explanatory text, if necessary.  Wrap it to about 72
-    characters or so.  In some contexts, the first line is treated as the
-    subject of an email and the rest of the text as the body.  The blank
-    line separating the summary from the body is critical (unless you omit
-    the body entirely); tools like rebase can get confused if you run the
-    two together.
-
-    Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
-    or "Fixes bug."  This convention matches up with commit messages generated
-    by commands like git merge and git revert.
-
-    Further paragraphs come after blank lines.
-
-    - Bullet points are okay, too
-    - Typically a hyphen or asterisk is used for the bullet, preceded by a
-      single space, with blank lines in between, but conventions vary here
-    - Use a hanging indent
-
-`Github flavored markdown
-<http://github.github.com/github-flavored-markdown/>`_
-is also useful in commit messages.
 
-Squashing commits
------------------
+    This documentation was moved to the `styleguide section on docs.plone.org <http://docs.plone.org/develop/styleguide/>`_, to the `Working with Dit and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_ and to the :doc:`develop` chapter of the plone.api documentation.
 
-In order to keep a clear and concise git history, it is good practice to squash commits before merging.
-Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.
diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst
index 0bd4165..6f4ceb3 100644
--- a/docs/contribute/develop.rst
+++ b/docs/contribute/develop.rst
@@ -77,6 +77,28 @@ Use https://github.com/collective/buildout.python and be happy.
 Also applicable to other OSes, if getting a working Python proves a challenge.
 
 
+.. _git_workflow:
+
+Git workflow & branching model
+==============================
+
+Our repository on GitHub has the following layout:
+
+* **feature branches**: all development for new features must be done in
+  dedicated branches, normally one branch per feature,
+* **master branch**: when features get completed they are merged into the
+  master branch; bugfixes are commited directly on the master branch,
+* **tags**: whenever we create a new release we tag the repository so we can
+  later re-trace our steps, re-release versions, etc.
+
+
+Squashing commits
+-----------------
+
+In order to keep a clear and concise git history, it is good practice to squash commits before merging.
+Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.
+
+
 Creating and using the development environment
 ==============================================
 
@@ -145,8 +167,7 @@ Once we are happy with your implementation, your branch gets merged into *master
     them; in other words, others can comment on your code without your code
     changing their development environments
 
-Read more about Git branching at http://learn.github.com/p/branching.html.
-Also, to make your git nicer, read the :ref:`setting_up_git` chapter.
+Read more about Git branching at http://learn.github.com/p/branching.html and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.
 
 
 Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.
@@ -181,3 +202,61 @@ This command also re-generates your documentation.
     It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file
     (or use `flake8` which combines both).
     This saves you lots of time in the long run.
+
+
+Travis Continuous Integration
+=============================
+
+On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.
+
+Travis is configured with the ``.travis.yml`` file located in the root of this package.
+
+
+Sphinx Documentation
+====================
+
+Un-documented code is broken code.
+
+For every feature you add to the codebase you should also add documentation for it to ``docs/``.
+
+After adding/modifying documentation, run ``make`` to re-generate your docs.
+
+Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically.
+So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.
+
+Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush up on your `reST` skills.
+
+Example:
+
+.. sourcecode:: python
+
+    def add(a, b):
+        """Calculate the sum of the two parameters.
+
+        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.
+
+        :param a: The first operand.
+        :type a: :class:`mod.path.A`
+
+        :param b: The second operand.
+        :type b: :class:`mod.path.B`
+
+        :rtype: int
+        :return: The sum of the operands.
+        :raises: `KeyError`, if the operands are not the correct type.
+        """
+
+Attributes are documented using the `#:` marker above the attribute.
+The documentation may span multiple lines.
+
+.. sourcecode:: python
+
+    #: Description of the constant value
+    MY_CONSTANT = 0xc0ffee
+
+    class Foobar(object):
+
+        #: Description of the class variable which spans over
+        #: multiple lines
+        FOO = 1
+
diff --git a/docs/contribute/index.rst b/docs/contribute/index.rst
index 43f71a6..8c48d64 100644
--- a/docs/contribute/index.rst
+++ b/docs/contribute/index.rst
@@ -12,12 +12,7 @@ How to contribute to this package?
 Conventions
 ===========
 
-Rules and guidelines on syntax style, development process, repository workflow, etc.
-
-.. toctree::
-   :maxdepth: 2
-
-   conventions.rst
+For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <http://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_
 
 
 Local development environment
diff --git a/docs/contribute/release.rst b/docs/contribute/release.rst
index 6ea3a67..49cb2e0 100644
--- a/docs/contribute/release.rst
+++ b/docs/contribute/release.rst
@@ -46,8 +46,7 @@ Folow these step to create a new release of `plone.api`.
 
 #. Modify the version identifier in the ``setup.py`` to reflect the version of the new release.
 
-#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in
-   your favorite browser.
+#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in your favorite browser.
 
 #. Commit all changes to the git repository and push them upstream to GitHub.
 
diff --git a/docs/index.rst b/docs/index.rst
index 957d8a0..440ea53 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -17,7 +17,8 @@ The intention of this package is to provide clear API methods for Plone function
 As the underlying code improves some API methods may be deprecated and the documentation here will be updated to show how to use the improved code
 (even if it means not using ``plone.api``).
 
-Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving a task using Plone's internal API. For example, using the portal catalog (see 'Find content objects').
+Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving a task using Plone's internal API.
+For example, using the portal catalog (see 'Find content objects').
 
 The intention is to cover 20% of the tasks any Plone developer does 80% of the time.
 By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.
diff --git a/setup.py b/setup.py
index a5d5217..301622c 100644
--- a/setup.py
+++ b/setup.py
@@ -29,7 +29,7 @@ def read(*rnames):
     include_package_data=True,
     zip_safe=False,
     url='https://github.com/plone/plone.api',
-    keywords='plone api code conventions',
+    keywords='plone api',
     install_requires=[
         'Products.statusmessages',
         'decorator',


Repository: plone.api


Branch: refs/heads/master
Date: 2016-01-19T14:23:42-02:00
Author: Héctor Velarde (hvelarde) <hvelarde@yahoo.com>
Commit: https://github.com/plone/plone.api/commit/afe3b8719d8eca8cc941bb31d83a9aa0e1df783c

Merge pull request #298 from plone/thet-mv-conventions

Remove the Plone APIs conventions

Files changed:
M docs/CHANGES.rst
M docs/content.rst
M docs/contribute/conventions.rst
M docs/contribute/develop.rst
M docs/contribute/index.rst
M docs/contribute/release.rst
M docs/index.rst
M setup.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 30ea6bd..d6a2cc4 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -10,7 +10,10 @@ New:
 
 Fixes:
 
-- *add item here*
+- Remove the Plone APIs conventions. They are moved to  
+http://docs.plone.org/develop/styleguide
+and http://docs.plone.org/develop/coredev/docs/git.html
+[thet]
 
 
 1.4.11 (2016-01-08)
diff --git a/docs/content.rst b/docs/content.rst
index 8fb8474..c581e98 100644
--- a/docs/content.rst
+++ b/docs/content.rst
@@ -450,7 +450,8 @@ To transition your content to a new workflow state, use the :meth:`api.content.t
         'published'
     )
 
-If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.  These arguments can be saved to your transition using custom workflow variables inside of the ZMI using an expression.  ie. "python:state_change.kwargs.get('comment', '')"
+If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.
+These arguments can be saved to your transition using custom workflow variables inside of the ZMI using an expression, for example: "python:state_change.kwargs.get('comment', '')"
 
 .. code-block:: python
 
diff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst
index cd009a2..e0a7925 100644
--- a/docs/contribute/conventions.rst
+++ b/docs/contribute/conventions.rst
@@ -1,668 +1,4 @@
-.. admonition:: GitHub-only
-
-    WARNING: If you are reading this on GitHub, DON'T!
-    Read the documentation at `api.plone.org <http://api.plone.org/contribute/conventions.html>`_
-    so you have working references and proper formatting.
-
-.. _conventions:
-
-===========
-Conventions
-===========
-
-.. contents:: :local:
-
-Introduction
-==============
-
-We've modeled the following rules and recommendations based on the following
-documents:
-
- * `PEP8 <http://www.python.org/dev/peps/pep-0008>`__
- * `PEP257 <http://www.python.org/dev/peps/pep-0257>`_
- * `Rope project <http://rope.sourceforge.net/overview.html>`_
- * `Google Style Guide <http://google-styleguide.googlecode.com/svn/trunk/pyguide.html>`_
- * `Pylons Coding Style <http://docs.pylonsproject.org/en/latest/community/codestyle.html>`_
- * `Tim Pope on Git commit messages <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__
-
-Line length
-===========
-
-All Python code in this package should be PEP8 valid. This includes adhering
-to the 80-char line length. If you absolutely need to break this rule, append
-``# noPEP8`` to the offending line to skip it in syntax checks.
-
 .. note::
-    Configuring your editor to display a line at 79th column helps a lot
-    here and saves time.
-
-.. note::
-    The line length rule also applies to non-python source files, such as ``.zcml`` files,
-    but is a bit more relaxed there.
-    It explicitly **does not** aply to documentation ``.rst`` files.
-    For rst files, use *semantic* linebreaks.
-    See `the Plone rst styleguide <http://docs.plone.org/about/rst-styleguide.html#line-length-translations>`_ for the reasoning behind it.
-
-Breaking lines
---------------
-
-Based on code we love to look at (Pyramid, Requests, etc.), we allow the
-following two styles for breaking long lines into blocks:
-
-1. Break into next line with one additional indent block.
-
-   .. sourcecode:: python
-
-       foo = do_something(
-           very_long_argument='foo', another_very_long_argument='bar')
-
-       # For functions the ): needs to be placed on the following line
-       def some_func(
-           very_long_argument='foo', another_very_long_argument='bar'
-       ):
-
-2. If this still doesn't fit the 80-char limit, break into multiple lines.
-
-   .. sourcecode:: python
-
-       foo = dict(
-           very_long_argument='foo',
-           another_very_long_argument='bar',
-       )
-
-       a_long_list = [
-           "a_fairly_long_string",
-           "quite_a_long_string_indeed",
-           "an_exceptionally_long_string_of_characters",
-       ]
-
- * Arguments on first line, directly after the opening parenthesis are
-   forbidden when breaking lines.
- * The last argument line needs to have a trailing comma (to be nice to the
-   next developer coming in to add something as an argument and minimize VCS
-   diffs in these cases).
- * The closing parenthesis or bracket needs to have the same indentation level
-   as the first line.
- * Each line can only contain a single argument.
- * The same style applies to dicts, lists, return calls, etc.
-
-This package follows all rules above, `check out the source
-<https://github.com/plone/plone.api/tree/master/src/plone/api>`_ to see them
-in action.
-
-autopep8
---------
-
-Making old code pep8 compliant can be a lot of work.  There is a tool
-that can automatically do some of this work for you: `autopep8
-<https://pypi.python.org/pypi/autopep8>`_.  This fixes various issues,
-for example fixing indentation to be a multiple of four.  Just install
-it with pip and call it like this::
-
-    pip install autopep8
-    autopep8 -i filename.py
-    autopep8 -i -r directory
-
-It is best to first run autopep8 in the default non aggressive mode,
-which means it only does whitespace changes.  To run this recursively
-on the current directory, changing files in place::
-
-    autopep8 -i -r .
-
-Quickly check the changes and then commit them.
-
-WARNING: be *very* careful when running this in a skins directory, if
-you run it there at all.  It will make changes to the top of the file
-like this, which completely breaks the skin script::
-
-    -##parameters=policy_in=''
-    +# parameters=policy_in=''
-
-With those safe changes out of the way, you can move on to a second,
-more aggresive round::
-
-    autopep8 -i --aggressive -r .
-
-Check these changes more thoroughly.  At the very least check if Plone
-can still start in the foreground and that there are no failures or
-errors in the tests.
-
-Not all changes are always safe.  You can ignore some checks::
-
-    autopep8 -i --ignore W690,E711,E721 --aggressive -r .
-
-This skips the following changes:
-
-- W690: Fix various deprecated code (via lib2to3). (Can be bad for
-  Python 2.4.)
-
-- E721: Use `isinstance()` instead of comparing types directly. (There
-  are uses of this in for example GenericSetup and plone.api that must
-  not be fixed.)
-
-- E711: Fix comparison with None.  (This can break SQLAlchemy code.)
-
-You can check what would be changed by one specific code::
-
-    autopep8 --diff --select E309 -r .
-
-Indentation
-===========
-
-For Python files, we stick with the `PEP 8 recommondation
-<http://www.python.org/dev/peps/pep-0008/#indentation>`_: Use 4 spaces per
-indentation level.
-
-For ZCML and XML (GenericSetup) files, we recommend the `Zope Toolkit's coding
-style on ZCML <http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html>`_
-::
-
-  Indentation of 2 characters to show nesting, 4 characters to list attributes
-  on separate lines. This distinction makes it easier to see the difference
-  between attributes and nested elements.
-
-
-EditorConfig
-------------
-
-`EditorConfig <http://editorconfig.org/>`_
-provides a way to share the same configuration for all major source code editors.
-
-You only need to install the plugin for your editor of choice,
-and add the following configuration on ``~/.editorconfig``.
-
-.. sourcecode:: ini
-
-    [*]
-    indent_style = space
-    end_of_line = lf
-    insert_final_newline = true
-    trim_trailing_whitespace = true
-    charset = utf-8
-
-    [{*.py,*.cfg}]
-    indent_size = 4
-
-    [{*.html,*.dtml,*.pt,*.zpt,*.xml,*.zcml,*.js}]
-    indent_size = 2
-
-    [Makefile]
-    indent_style = tab
-
-Quoting
-=======
-
-For strings and such prefer using single quotes over double quotes. The reason
-is that sometimes you do need to write a bit of HTML in your python code, and
-HTML feels more natural with double quotes so you wrap HTML string into single
-quotes. And if you are using single quotes for this reason, then be consistent
-and use them everywhere.
-
-There are two exceptions to this rule:
-
-* docstrings should always use double quotes (as per PEP-257).
-* if you want to use single quotes in your string, double quotes might make
-  more sense so you don't have to escape those single quotes.
-
-.. sourcecode:: python
-
-    # GOOD
-    print 'short'
-    print 'A longer string, but still using single quotes.'
-
-    # BAD
-    print "short"
-    print "A long string."
-
-    # EXCEPTIONS
-    print "I want to use a 'single quote' in my string."
-    """This is a docstring."""
-
-
-Docstrings style
-================
-
-Read and follow http://www.python.org/dev/peps/pep-0257/. There is one
-exception though: We reject BDFL's recommendation about inserting a blank line
-between the last paragraph in a multi-line docstring and its closing quotes as
-it's Emacs specific and two Emacs users here on the Beer & Wine Sprint both
-support our way.
-
-The content of the docstring must be written in the active first-person form,
-e.g. "Calculate X from Y" or "Determine the exact foo of bar".
-
-.. sourcecode:: python
-
-    def foo():
-        """Single line docstring."""
-
-    def bar():
-        """Multi-line docstring.
-
-        With the additional lines indented with the beginning quote and a
-        newline preceding the ending quote.
-        """
-
-If you wanna be extra nice, you are encouraged to document your method's
-parameters and their return values in a `reST field list syntax
-<http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists>`_.
-
-.. sourcecode:: rest
-
-    :param foo: blah blah
-    :type foo: string
-    :param bar: blah blah
-    :type bar: int
-    :returns: something
-
-Check out the `plone.api source
-<https://github.com/plone/plone.api/tree/master/src/plone/api>`_ for more
-usage examples. Also, see the following for examples on how to write
-good *Sphinxy* docstrings: http://stackoverflow.com/questions/4547849/good-examples-of-python-docstrings-for-sphinx.
-
-
-
-Unit tests style
-================
-
-Read http://www.voidspace.org.uk/python/articles/unittest2.shtml to learn what
-is new in :mod:`unittest2` and use it.
-
-This is not true for in-line documentation tests. Those still use old unittest
-test-cases, so you cannot use ``assertIn`` and similar.
-
-
-String formatting
-=================
-
-As per http://docs.python.org/2/library/stdtypes.html#str.format, we should
-prefer the new style string formatting (``.format()``) over the old one
-(``% ()``).
-
-Also use numbering, like so:
-
-.. sourcecode:: python
-
-    # GOOD
-    print "{0} is not {1}".format(1, 2)
-
-
-and *not* like this:
-
-.. sourcecode:: python
-
-    # BAD
-    print "{} is not {}".format(1, 2)
-    print "%s is not %s" % (1, 2)
-
-
-because Python 2.6 supports only explicitly numbered placeholders.
-
-
-About imports
-=============
-
-1. Don't use ``*`` to import *everything* from a module, because if you do,
-   pyflakes cannot detect undefined names (W404).
-2. Don't use commas to import multiple things on a single line.
-   Some developers use IDEs (like `Eclipse <http://pydev.org/>`_) or tools
-   (such as `mr.igor <http://pypi.python.org/pypi/mr.igor>`_)
-   that expect one import per line.
-   Let's be nice to them.
-3. Don't use relative paths, again to be nice to people using certain IDEs and
-   tools. Also `Google Python Style Guide` recommends against it.
-
-   .. sourcecode:: python
-
-       # GOOD
-       from plone.app.testing import something
-       from zope.component import getMultiAdapter
-       from zope.component import getSiteManager
-
-   instead of
-
-   .. sourcecode:: python
-
-       # BAD
-       from plone.app.testing import *
-       from zope.component import getMultiAdapter, getSiteManager
-
-4. Don't catch ``ImportError`` to detect whether a package is available or not,
-   as it might hide circular import errors. Instead, use
-   ``pkg_resources.get_distribution`` and catch ``DistributionNotFound``. More
-   background at http://do3.cc/blog/2010/08/20/do-not-catch-import-errors,-use-pkg_resources/.
-
-   .. sourcecode:: python
-
-       # GOOD
-       import pkg_resources
-
-       try:
-           pkg_resources.get_distribution('plone.dexterity')
-       except pkg_resources.DistributionNotFound:
-           HAS_DEXTERITY = False
-       else:
-           HAS_DEXTERITY = True
-
-   instead of
-
-   .. sourcecode:: python
-
-       # BAD
-       try:
-           import plone.dexterity
-           HAVE_DEXTERITY = True
-       except ImportError:
-           HAVE_DEXTERITY = False
-
-
-Grouping and sorting
---------------------
-
-Since Plone has such a huge code base, we don't want to lose developer time
-figuring out into which group some import goes (standard lib?, external
-package?, etc.). So we just sort everything alphabetically and insert one blank
-line between ``from foo import bar`` and ``import baz`` blocks. Conditional imports
-come last. Again, we *do not* distinguish between what is standard lib,
-external package or internal package in order to save time and avoid the hassle
-of explaining which is which.
-
-.. sourcecode:: python
-
-    # GOOD
-    from __future__ import division
-    from Acquisition import aq_inner
-    from plone.api import portal
-    from plone.api.exc import MissingParameterError
-    from Products.CMFCore.interfaces import ISiteRoot
-    from Products.CMFCore.WorkflowCore import WorkflowException
-
-    import pkg_resources
-    import random
-
-    try:
-        pkg_resources.get_distribution('plone.dexterity')
-    except pkg_resources.DistributionNotFound:
-        HAS_DEXTERITY = False
-    else:
-        HAS_DEXTERITY = True
-
-
-Declaring dependencies
-======================
-
-All direct dependencies should be declared in ``install_requires`` or
-``extras_require`` sections in ``setup.py``. Dependencies, which are not needed for
-a production environment (like "develop" or "test" dependencies) or are
-optional (like "Archetypes" or "Dexterity" flavors of the same package) should
-go in ``extras_require``. Remember to document how to enable specific features
-(and think of using ``zcml:condition`` statements, if you have such optional
-features).
-
-Generally all direct dependencies (packages directly imported or used in ZCML)
-should be declared, even if they would already be pulled in by other
-dependencies. This explicitness reduces possible runtime errors and gives a
-good overview on the complexity of a package.
-
-For example, if you depend on ``Products.CMFPlone`` and use ``getToolByName``
-from ``Products.CMFCore``, you should also declare the ``CMFCore`` dependency
-explicitly, even though it's pulled in by Plone itself. If you use namespace
-packages from the Zope distribution like ``Products.Five`` you should
-explicitly declare ``Zope`` as dependency.
-
-Inside each group of dependencies, lines should be sorted alphabetically.
-
-
-Versioning scheme
-=================
-
-For software versions, use a sequence-based versioning scheme, which is
-`compatible with setuptools <http://pythonhosted.org/setuptools/setuptools.html#specifying-your-project-s-version>`_::
-
-    MAJOR.MINOR[.MICRO][STATUS]
-
-The way, setuptools interprets versions is intuitive::
-
-    1.0 < 1.1dev < 1.1a1 < 1.1a2 < 1.1b < 1.1rc1 < 1.1 < 1.1.1
-
-You can test it with setuptools::
-
-    >>> from pkg_resources import parse_version
-    >>> parse_version('1.0') < parse_version('1.1.dev')
-    ... < parse_version('1.1.a1') < parse_version('1.1.a2')
-    ... < parse_version('1.1.b') < parse_version('1.1.rc1')
-    ... < parse_version('1.1') < parse_version('1.1.1')
-
-Setuptools recommends to seperate parts with a dot. The website about `semantic
-versioning <http://semver.org/>`_ is also worth a read.
-
-
-Restructured Text versus Plain Text
-===================================
-
-Use the Restructured Text (``.rst`` file extension) format instead of plain text
-files (``.txt`` file extension) for all documentation, including doctest files.
-This way you get nice syntax highlighting and formating in recent text editors,
-on GitHub and with Sphinx.
-
-
-.. _changes:
-
-Tracking changes
-================
-
-Feature-level changes to code are tracked inside ``CHANGES.rst``. The title
-of the ``CHANGES.rst`` file should be ``Changelog``. Example:
-
-.. sourcecode:: rst
-
-    Changelog
-    =========
-
-    1.0.0-dev (Unreleased)
-    ----------------------
-
-    - Added feature Z.
-      [github_userid1]
-
-    - Removed Y.
-      [github_userid2]
-
-
-    1.0.0-alpha.1 (2012-12-12)
-    --------------------------
-
-    - Fixed Bug X.
-      [github_userid1]
-
-
-Add an entry every time you add/remove a feature, fix a bug, etc. on top of the
-current development changes block.
-
-
-.. _sphinx-docs:
-
-Sphinx Documentation
-====================
-
-Un-documented code is broken code.
-
-For every feature you add to the codebase you should also add documentation
-for it to ``docs/``.
-
-After adding/modifying documentation, run ``make`` to re-generate your docs.
-
-Publicly available documentation on http://api.plone.org is automatically
-generated from these source files, periodically. So when you push changes
-to master on GitHub you should soon be able to see them published on
-``api.plone.org``.
-
-Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush
-up on your `reST` skills.
-
-Example:
-
-.. sourcecode:: python
-
-    def add(a, b):
-        """Calculate the sum of the two parameters.
-
-        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method`
-        and :attr:`mod.path.MY_CONSTANT` for more details.
-
-        :param a: The first operand.
-        :type a: :class:`mod.path.A`
-
-        :param b: The second operand.
-        :type b: :class:`mod.path.B`
-
-        :rtype: int
-        :return: The sum of the operands.
-        :raise: `KeyError`, if the operands are not the correct type.
-        """
-
-Attributes are documented using the `#:` marker above the attribute. The
-documentation may span multiple lines.
-
-.. sourcecode:: python
-
-    #: Description of the constant value
-    MY_CONSTANT = 0xc0ffee
-
-    class Foobar(object):
-
-        #: Description of the class variable which spans over
-        #: multiple lines
-        FOO = 1
-
-
-.. _travis_ci:
-
-Travis Continuous Integration
-=============================
-
-On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_
-runs all tests and syntax validation checks and reports build outcome to
-the ``#sprint`` IRC channel and the person who committed the last change.
-
-Travis is configured with the ``.travis.yml`` file located in the root of this
-package.
-
-
-.. _git_workflow:
-
-Git workflow & branching model
-==============================
-
-Our repository on GitHub has the following layout:
-
-* **feature branches**: all development for new features must be done in
-  dedicated branches, normally one branch per feature,
-* **master branch**: when features get completed they are merged into the
-  master branch; bugfixes are commited directly on the master branch,
-* **tags**: whenever we create a new release we tag the repository so we can
-  later re-trace our steps, re-release versions, etc.
-
-
-Release process for Plone packages
-====================================
-
-To keep the Plone software stack maintainable, the Python egg release process
-must be automated to high degree. This happens by enforcing Python packaging
-best practices and then making automated releases using the
-`zest.releaser <https://github.com/zestsoftware/zest.releaser/>`_  tool.
-
-* Anyone with necessary PyPi permissions must be able to make a new release
-  by running the ``fullrelease`` command
-
-... which includes ...
-
-* All releases must be hosted on PyPi
-
-* All versions must be tagged at version control
-
-* Each package must have README.rst with links to the version control
-  repository and issue tracker
-
-* CHANGES.txt (docs/HISTORY.txt in some packages) must be always up-to-date and
-  must contain list of functional changes which may affect package users.
-
-* CHANGES.txt must contain release dates
-
-* README.rst and CHANGES.txt must be visible on PyPi
-
-* Released eggs must contain generated gettext .mo files, but these files must
-  not be committed to the repository (files can be created with
-  *zest.pocompile* addon)
-
-* ``.gitignore`` and ``MANIFEST.in`` must reflect the files going to egg (must
-  include page template, po files)
-
-More information
-
-* `High quality automated package releases for Python with zest.releaser
-  <http://opensourcehacker.com/2012/08/14/high-quality-automated-package-releases-for-python-with-zest-releaser/>`_.
-
-
-.. _setting_up_git:
-
-Setting up Git
-==============
-
-Git is a very useful tool, especially when you configure it to your needs. Here
-are a couple of tips.
-
-Enhanced git prompt
--------------------
-
-Do one (or more) of the following:
-
-* http://clalance.blogspot.com/2011/10/git-bash-prompts-and-tab-completion.html
-* http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/
-* http://gitready.com/advanced/2009/02/05/bash-auto-completion.html
-
-Git dotfiles
-------------
-
-Plone developers have dotfiles similar to these:
-https://github.com/plone/plone.dotfiles.
-
-
-Git Commit Message Style
-------------------------
-
-`Tim Pope's post on Git commit message style
-<http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__
-is widely considered the gold standard:
-
-::
-
-    Capitalized, short (50 chars or less) summary
-
-    More detailed explanatory text, if necessary.  Wrap it to about 72
-    characters or so.  In some contexts, the first line is treated as the
-    subject of an email and the rest of the text as the body.  The blank
-    line separating the summary from the body is critical (unless you omit
-    the body entirely); tools like rebase can get confused if you run the
-    two together.
-
-    Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
-    or "Fixes bug."  This convention matches up with commit messages generated
-    by commands like git merge and git revert.
-
-    Further paragraphs come after blank lines.
-
-    - Bullet points are okay, too
-    - Typically a hyphen or asterisk is used for the bullet, preceded by a
-      single space, with blank lines in between, but conventions vary here
-    - Use a hanging indent
-
-`Github flavored markdown
-<http://github.github.com/github-flavored-markdown/>`_
-is also useful in commit messages.
 
-Squashing commits
------------------
+    This documentation was moved to the `styleguide section on docs.plone.org <http://docs.plone.org/develop/styleguide/>`_, to the `Working with Dit and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_ and to the :doc:`develop` chapter of the plone.api documentation.
 
-In order to keep a clear and concise git history, it is good practice to squash commits before merging.
-Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.
diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst
index 0bd4165..6f4ceb3 100644
--- a/docs/contribute/develop.rst
+++ b/docs/contribute/develop.rst
@@ -77,6 +77,28 @@ Use https://github.com/collective/buildout.python and be happy.
 Also applicable to other OSes, if getting a working Python proves a challenge.
 
 
+.. _git_workflow:
+
+Git workflow & branching model
+==============================
+
+Our repository on GitHub has the following layout:
+
+* **feature branches**: all development for new features must be done in
+  dedicated branches, normally one branch per feature,
+* **master branch**: when features get completed they are merged into the
+  master branch; bugfixes are commited directly on the master branch,
+* **tags**: whenever we create a new release we tag the repository so we can
+  later re-trace our steps, re-release versions, etc.
+
+
+Squashing commits
+-----------------
+
+In order to keep a clear and concise git history, it is good practice to squash commits before merging.
+Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.
+
+
 Creating and using the development environment
 ==============================================
 
@@ -145,8 +167,7 @@ Once we are happy with your implementation, your branch gets merged into *master
     them; in other words, others can comment on your code without your code
     changing their development environments
 
-Read more about Git branching at http://learn.github.com/p/branching.html.
-Also, to make your git nicer, read the :ref:`setting_up_git` chapter.
+Read more about Git branching at http://learn.github.com/p/branching.html and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.
 
 
 Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.
@@ -181,3 +202,61 @@ This command also re-generates your documentation.
     It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file
     (or use `flake8` which combines both).
     This saves you lots of time in the long run.
+
+
+Travis Continuous Integration
+=============================
+
+On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.
+
+Travis is configured with the ``.travis.yml`` file located in the root of this package.
+
+
+Sphinx Documentation
+====================
+
+Un-documented code is broken code.
+
+For every feature you add to the codebase you should also add documentation for it to ``docs/``.
+
+After adding/modifying documentation, run ``make`` to re-generate your docs.
+
+Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically.
+So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.
+
+Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush up on your `reST` skills.
+
+Example:
+
+.. sourcecode:: python
+
+    def add(a, b):
+        """Calculate the sum of the two parameters.
+
+        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.
+
+        :param a: The first operand.
+        :type a: :class:`mod.path.A`
+
+        :param b: The second operand.
+        :type b: :class:`mod.path.B`
+
+        :rtype: int
+        :return: The sum of the operands.
+        :raises: `KeyError`, if the operands are not the correct type.
+        """
+
+Attributes are documented using the `#:` marker above the attribute.
+The documentation may span multiple lines.
+
+.. sourcecode:: python
+
+    #: Description of the constant value
+    MY_CONSTANT = 0xc0ffee
+
+    class Foobar(object):
+
+        #: Description of the class variable which spans over
+        #: multiple lines
+        FOO = 1
+
diff --git a/docs/contribute/index.rst b/docs/contribute/index.rst
index 43f71a6..8c48d64 100644
--- a/docs/contribute/index.rst
+++ b/docs/contribute/index.rst
@@ -12,12 +12,7 @@ How to contribute to this package?
 Conventions
 ===========
 
-Rules and guidelines on syntax style, development process, repository workflow, etc.
-
-.. toctree::
-   :maxdepth: 2
-
-   conventions.rst
+For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <http://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_
 
 
 Local development environment
diff --git a/docs/contribute/release.rst b/docs/contribute/release.rst
index 6ea3a67..49cb2e0 100644
--- a/docs/contribute/release.rst
+++ b/docs/contribute/release.rst
@@ -46,8 +46,7 @@ Folow these step to create a new release of `plone.api`.
 
 #. Modify the version identifier in the ``setup.py`` to reflect the version of the new release.
 
-#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in
-   your favorite browser.
+#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in your favorite browser.
 
 #. Commit all changes to the git repository and push them upstream to GitHub.
 
diff --git a/docs/index.rst b/docs/index.rst
index 957d8a0..440ea53 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -17,7 +17,8 @@ The intention of this package is to provide clear API methods for Plone function
 As the underlying code improves some API methods may be deprecated and the documentation here will be updated to show how to use the improved code
 (even if it means not using ``plone.api``).
 
-Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving a task using Plone's internal API. For example, using the portal catalog (see 'Find content objects').
+Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving a task using Plone's internal API.
+For example, using the portal catalog (see 'Find content objects').
 
 The intention is to cover 20% of the tasks any Plone developer does 80% of the time.
 By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.
diff --git a/setup.py b/setup.py
index a5d5217..301622c 100644
--- a/setup.py
+++ b/setup.py
@@ -29,7 +29,7 @@ def read(*rnames):
     include_package_data=True,
     zip_safe=False,
     url='https://github.com/plone/plone.api',
-    keywords='plone api code conventions',
+    keywords='plone api',
     install_requires=[
         'Products.statusmessages',
         'decorator',


