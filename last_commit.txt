Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-10T14:31:45+01:00
Author: Katja SÃ¼ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/df6d7041f02a9d64a1e7034daafede940f7105a8

removed Products.ResourceRegistries

see pull request plone.app.upgrade https://github.com/plone/plone.app.upgrade/pull/183/files

Files changed:
M CHANGES.rst
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/setuphandlers.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_zmi.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 02d1afb6b..10c0db9c8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -79,7 +79,8 @@ Breaking changes:\n - Stop configuring \'View History\' permission which was removed from Zope.\n   [davisagli]\n \n-- Remove legacy resource registries portal_css and portal_javascripts\n+- Removed legacy resource registries portal_css and portal_javascripts;\n+  no conditional handling.\n   [ksuess]\n \n New features:\ndiff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py\nindex b34927f70..e00537577 100644\n--- a/Products/CMFPlone/SkinsTool.py\n+++ b/Products/CMFPlone/SkinsTool.py\n@@ -3,9 +3,6 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.SkinsTool import SkinsTool as BaseTool\n-from Products.ResourceRegistries.tools.BaseRegistry import \\\n-    cookWhenChangingSettings\n-\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n \n \n@@ -24,8 +21,6 @@ def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):\n         # Adds a skin selection.\n         super(SkinsTool, self).addSkinSelection(skinname, skinpath,\n                                                 test=test, make_default=make_default)\n-        # when adding a new skin, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n \n     security.declareProtected(ManagePortal, \'manage_skinLayers\')\n \n@@ -36,8 +31,6 @@ def manage_skinLayers(self, chosen=(), add_skin=0, del_skin=0,\n         response = super(SkinsTool, self).manage_skinLayers(chosen=chosen,\n                                                             add_skin=add_skin, del_skin=del_skin, skinname=skinname,\n                                                             skinpath=skinpath, REQUEST=REQUEST)\n-        # when changing skins, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n         return response\n \n SkinsTool.__doc__ = BaseTool.__doc__\ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex 4837d700e..4ae5e9446 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -16,14 +16,10 @@\n            class="Products.CMFPlone.CatalogTool.CatalogTool"/>\n  <required tool_id="portal_controlpanel"\n            class="Products.CMFPlone.PloneControlPanel.PloneControlPanel"/>\n- <required tool_id="portal_css"\n-           class="Products.ResourceRegistries.tools.CSSRegistry.CSSRegistryTool"/>\n  <required tool_id="portal_groupdata"\n            class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>\n  <required tool_id="portal_groups"\n            class="Products.PlonePAS.tools.groups.GroupsTool"/>\n- <required tool_id="portal_javascripts"\n-           class="Products.ResourceRegistries.tools.JSRegistry.JSRegistryTool"/>\n  <required tool_id="portal_memberdata"\n            class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>\n  <required tool_id="portal_membership"\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 77608ff71..22580afb4 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -34,14 +34,6 @@\n            prefix="plone" />\n   <records interface="Products.CMFPlone.interfaces.ILinkSchema"\n            prefix="plone" />\n-  <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">\n-    <value purge="false">\n-      <element key="(default)">\n-        <element>jquery</element>\n-        <element>default</element>\n-      </element>\n-    </value>\n-  </record>\n   <record name="Products.CMFPlone.i18nl10n.override_dateformat.Enabled">\n     <field type="plone.registry.field.Bool">\n       <title>Enabled</title>\ndiff --git a/Products/CMFPlone/setuphandlers.py b/Products/CMFPlone/setuphandlers.py\nindex 1f3ea5d21..05c8a4c96 100644\n--- a/Products/CMFPlone/setuphandlers.py\n+++ b/Products/CMFPlone/setuphandlers.py\n@@ -36,30 +36,6 @@ def addCacheHandlers(portal):\n                 portal[mgr_id] = mgr_class(mgr_id)\n \n \n-def addCacheForResourceRegistry(portal):\n-    ram_cache_id = \'ResourceRegistryCache\'\n-    if ram_cache_id in portal:\n-        cache = getattr(portal, ram_cache_id)\n-        settings = cache.getSettings()\n-        settings[\'max_age\'] = 24 * 3600  # keep for up to 24 hours\n-        settings[\'request_vars\'] = (\'URL\', )\n-        cache.manage_editProps(\'Cache for saved ResourceRegistry files\',\n-                               settings)\n-    reg = getToolByName(portal, \'portal_css\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-    reg = getToolByName(portal, \'portal_javascripts\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-\n def purgeProfileVersions(portal):\n     """\n     Purge profile dependency versions.\n@@ -93,11 +69,9 @@ def assignTitles(portal):\n         \'portal_calendar\': \'Controls how events are shown\',\n         \'portal_catalog\': \'Indexes all content in the site\',\n         \'portal_controlpanel\': \'Registry of control panel screen\',\n-        \'portal_css\': \'Registry of CSS files\',\n         \'portal_diff\': \'Settings for content version comparisions\',\n         \'portal_groupdata\': \'Handles properties on groups\',\n         \'portal_groups\': \'Handles group related functionality\',\n-        \'portal_javascripts\': \'Registry of JavaScript files\',\n         \'portal_languages\': \'Language specific settings\',\n         \'portal_membership\': \'Handles membership policies\',\n         \'portal_memberdata\': \'Handles the available properties on members\',\n@@ -172,7 +146,6 @@ def importFinalSteps(context):\n     assignTitles(site)\n     replace_local_role_manager(site)\n     addCacheHandlers(site)\n-    addCacheForResourceRegistry(site)\n \n     first_weekday_setup(context)\n     timezone_setup(context)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 5aa1d6b1b..02a1703ec 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -49,7 +49,6 @@ def afterSetUp(self):\n         self.groups = self.portal.portal_groups\n         self.skins = self.portal.portal_skins\n         self.transforms = self.portal.portal_transforms\n-        self.javascripts = self.portal.portal_javascripts\n         self.setup = self.portal.portal_setup\n \n     def testInstanceVersion(self):\n@@ -198,11 +197,6 @@ def testSitemapAction(self):\n         else:\n             self.fail("Actions tool has no \'sitemap\' action")\n \n-    def testResourceRegistries(self):\n-        # We should have portal_css and portal_javascripts tools\n-        self.assertTrue(hasattr(self.portal, \'portal_css\'))\n-        self.assertTrue(hasattr(self.portal, \'portal_javascripts\'))\n-\n     def testUnfriendlyTypesProperty(self):\n         # We should have an types_not_searched property\n         registry = getUtility(IRegistry)\n@@ -665,10 +659,6 @@ def testConfigurableSafeHtmlTransform(self):\n         except (AttributeError, KeyError):\n             self.fail(\'Disabling of safe_html should be possible!\')\n \n-    def testvcXMLRPCRemoved(self):\n-        # vcXMLRPC.js should no longer be registered\n-        self.assertFalse(\'vcXMLRPC.js\' in self.javascripts.getResourceIds())\n-\n     def testCacheManagers(self):\n         # The cache and caching policy managers should exist\n         httpcache = self.portal._getOb(\'HTTPCache\', None)\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 393d24b60..cb0d88580 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -301,153 +301,6 @@ def test_bundle_defer_async_production(self):\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n \n \n-class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n-    """Test features of registry node importer"""\n-    _setup_fixture = 0  # No default fixture\n-\n-    def _get_importer(self, blacklist=set([])):\n-        reg = getToolByName(self.portal, \'portal_javascripts\')\n-        importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())\n-        importer.resource_type = \'javascript\'\n-        importer.registry = getUtility(IRegistry)\n-        importer.resource_blacklist = blacklist\n-        return importer\n-\n-    def _get_resources(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IResourceRegistry, prefix="plone.resources"\n-        )\n-\n-    def _get_legacy_bundle(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IBundleRegistry,\n-            prefix="plone.bundles",\n-            check=False\n-        )[\'plone-legacy\']\n-\n-    def _get_resource_dom(self, name=\'++resource++/resource.js\',\n-                          remove=False, enabled=True):\n-        return parseString("""\n-            <object>\n-                <javascript id="%s" remove="%s" enabled="%s" />\n-            </object>\n-            """ % (name, str(remove), str(enabled).lower()))\n-\n-    def test_resource_blacklist(self):\n-        # Ensure that blacklisted resources aren\'t imported\n-        importer = self._get_importer({\'++resource++/bad_resource.js\'})\n-        dom = self._get_resource_dom("++resource++/bad_resource.js")\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertNotIn("++resource++/bad_resource.js", js_files)\n-        self.assertNotIn(\n-            "resource-bad_resource-js",\n-            self._get_legacy_bundle().resources,\n-        )\n-\n-    def test_resource_no_blacklist(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertTrue("++resource++/resource.js" in js_files)\n-        self.assertTrue(\n-            "resource-resource-js" in self._get_legacy_bundle().resources)\n-\n-    def test_insert_again(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        num_resources = self._get_legacy_bundle().resources[:]\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-\n-    def test_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(remove=True)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files) - 1,\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-    def test_insert_after(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-                <javascript id="foobar.js" insert-after="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') + 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_insert_before(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-              <javascript id="foobar.js" insert-before="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') - 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_be_able_to_disable_but_not_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(enabled=False)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files),\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-\n class TestConfigJs(PloneTestCase.PloneTestCase):\n \n     def test_init_shim_works_with_function(self):\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex b754ad725..622559b7c 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -91,11 +91,6 @@ def test_portal_catalog(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_css(self):\n-        url = \'portal_css/manage_cssForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_diff(self):\n         url = \'portal_diff/manage_difftypes\'\n         view = self.portal.restrictedTraverse(url)\n@@ -116,11 +111,6 @@ def test_portal_historyidhandler(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_javascripts(self):\n-        url = \'portal_javascripts/manage_jsForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_memberdata(self):\n         url = \'portal_memberdata/manage_overview\'\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/setup.py b/setup.py\nindex b3ffc5378..6c3118600 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -105,7 +105,6 @@\n         \'Products.PluggableAuthService\',\n         \'Products.PluginRegistry\',\n         \'Products.PortalTransforms\',\n-        \'Products.ResourceRegistries\',\n         \'Products.Sessions\',\n         \'Products.SiteErrorLog\',\n         \'Products.statusmessages\',\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-02-10T16:39:25+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/8cab7975949b105f7e59dda7b3d7beb4318395d2

Merge pull request #2603 from plone/remove-dependency-on-Products.ResourceRegistries

removed Products.ResourceRegistries

Files changed:
M CHANGES.rst
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/profiles/dependencies/registry.xml
M Products/CMFPlone/setuphandlers.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_zmi.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 02d1afb6b..10c0db9c8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -79,7 +79,8 @@ Breaking changes:\n - Stop configuring \'View History\' permission which was removed from Zope.\n   [davisagli]\n \n-- Remove legacy resource registries portal_css and portal_javascripts\n+- Removed legacy resource registries portal_css and portal_javascripts;\n+  no conditional handling.\n   [ksuess]\n \n New features:\ndiff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py\nindex b34927f70..e00537577 100644\n--- a/Products/CMFPlone/SkinsTool.py\n+++ b/Products/CMFPlone/SkinsTool.py\n@@ -3,9 +3,6 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.SkinsTool import SkinsTool as BaseTool\n-from Products.ResourceRegistries.tools.BaseRegistry import \\\n-    cookWhenChangingSettings\n-\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n \n \n@@ -24,8 +21,6 @@ def addSkinSelection(self, skinname, skinpath, test=0, make_default=0):\n         # Adds a skin selection.\n         super(SkinsTool, self).addSkinSelection(skinname, skinpath,\n                                                 test=test, make_default=make_default)\n-        # when adding a new skin, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n \n     security.declareProtected(ManagePortal, \'manage_skinLayers\')\n \n@@ -36,8 +31,6 @@ def manage_skinLayers(self, chosen=(), add_skin=0, del_skin=0,\n         response = super(SkinsTool, self).manage_skinLayers(chosen=chosen,\n                                                             add_skin=add_skin, del_skin=del_skin, skinname=skinname,\n                                                             skinpath=skinpath, REQUEST=REQUEST)\n-        # when changing skins, we need to tell RR about it\n-        cookWhenChangingSettings(None, None)\n         return response\n \n SkinsTool.__doc__ = BaseTool.__doc__\ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex 4837d700e..4ae5e9446 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -16,14 +16,10 @@\n            class="Products.CMFPlone.CatalogTool.CatalogTool"/>\n  <required tool_id="portal_controlpanel"\n            class="Products.CMFPlone.PloneControlPanel.PloneControlPanel"/>\n- <required tool_id="portal_css"\n-           class="Products.ResourceRegistries.tools.CSSRegistry.CSSRegistryTool"/>\n  <required tool_id="portal_groupdata"\n            class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>\n  <required tool_id="portal_groups"\n            class="Products.PlonePAS.tools.groups.GroupsTool"/>\n- <required tool_id="portal_javascripts"\n-           class="Products.ResourceRegistries.tools.JSRegistry.JSRegistryTool"/>\n  <required tool_id="portal_memberdata"\n            class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>\n  <required tool_id="portal_membership"\ndiff --git a/Products/CMFPlone/profiles/dependencies/registry.xml b/Products/CMFPlone/profiles/dependencies/registry.xml\nindex 77608ff71..22580afb4 100644\n--- a/Products/CMFPlone/profiles/dependencies/registry.xml\n+++ b/Products/CMFPlone/profiles/dependencies/registry.xml\n@@ -34,14 +34,6 @@\n            prefix="plone" />\n   <records interface="Products.CMFPlone.interfaces.ILinkSchema"\n            prefix="plone" />\n-  <record interface="Products.ResourceRegistries.interfaces.settings.IResourceRegistriesSettings" field="resourceBundlesForThemes">\n-    <value purge="false">\n-      <element key="(default)">\n-        <element>jquery</element>\n-        <element>default</element>\n-      </element>\n-    </value>\n-  </record>\n   <record name="Products.CMFPlone.i18nl10n.override_dateformat.Enabled">\n     <field type="plone.registry.field.Bool">\n       <title>Enabled</title>\ndiff --git a/Products/CMFPlone/setuphandlers.py b/Products/CMFPlone/setuphandlers.py\nindex 1f3ea5d21..05c8a4c96 100644\n--- a/Products/CMFPlone/setuphandlers.py\n+++ b/Products/CMFPlone/setuphandlers.py\n@@ -36,30 +36,6 @@ def addCacheHandlers(portal):\n                 portal[mgr_id] = mgr_class(mgr_id)\n \n \n-def addCacheForResourceRegistry(portal):\n-    ram_cache_id = \'ResourceRegistryCache\'\n-    if ram_cache_id in portal:\n-        cache = getattr(portal, ram_cache_id)\n-        settings = cache.getSettings()\n-        settings[\'max_age\'] = 24 * 3600  # keep for up to 24 hours\n-        settings[\'request_vars\'] = (\'URL\', )\n-        cache.manage_editProps(\'Cache for saved ResourceRegistry files\',\n-                               settings)\n-    reg = getToolByName(portal, \'portal_css\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-    reg = getToolByName(portal, \'portal_javascripts\', None)\n-    if reg is not None \\\n-            and getattr(aq_base(reg), \'ZCacheable_setManagerId\', None) \\\n-    is not None:\n-        reg.ZCacheable_setManagerId(ram_cache_id)\n-        reg.ZCacheable_setEnabled(1)\n-\n-\n def purgeProfileVersions(portal):\n     """\n     Purge profile dependency versions.\n@@ -93,11 +69,9 @@ def assignTitles(portal):\n         \'portal_calendar\': \'Controls how events are shown\',\n         \'portal_catalog\': \'Indexes all content in the site\',\n         \'portal_controlpanel\': \'Registry of control panel screen\',\n-        \'portal_css\': \'Registry of CSS files\',\n         \'portal_diff\': \'Settings for content version comparisions\',\n         \'portal_groupdata\': \'Handles properties on groups\',\n         \'portal_groups\': \'Handles group related functionality\',\n-        \'portal_javascripts\': \'Registry of JavaScript files\',\n         \'portal_languages\': \'Language specific settings\',\n         \'portal_membership\': \'Handles membership policies\',\n         \'portal_memberdata\': \'Handles the available properties on members\',\n@@ -172,7 +146,6 @@ def importFinalSteps(context):\n     assignTitles(site)\n     replace_local_role_manager(site)\n     addCacheHandlers(site)\n-    addCacheForResourceRegistry(site)\n \n     first_weekday_setup(context)\n     timezone_setup(context)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 5aa1d6b1b..02a1703ec 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -49,7 +49,6 @@ def afterSetUp(self):\n         self.groups = self.portal.portal_groups\n         self.skins = self.portal.portal_skins\n         self.transforms = self.portal.portal_transforms\n-        self.javascripts = self.portal.portal_javascripts\n         self.setup = self.portal.portal_setup\n \n     def testInstanceVersion(self):\n@@ -198,11 +197,6 @@ def testSitemapAction(self):\n         else:\n             self.fail("Actions tool has no \'sitemap\' action")\n \n-    def testResourceRegistries(self):\n-        # We should have portal_css and portal_javascripts tools\n-        self.assertTrue(hasattr(self.portal, \'portal_css\'))\n-        self.assertTrue(hasattr(self.portal, \'portal_javascripts\'))\n-\n     def testUnfriendlyTypesProperty(self):\n         # We should have an types_not_searched property\n         registry = getUtility(IRegistry)\n@@ -665,10 +659,6 @@ def testConfigurableSafeHtmlTransform(self):\n         except (AttributeError, KeyError):\n             self.fail(\'Disabling of safe_html should be possible!\')\n \n-    def testvcXMLRPCRemoved(self):\n-        # vcXMLRPC.js should no longer be registered\n-        self.assertFalse(\'vcXMLRPC.js\' in self.javascripts.getResourceIds())\n-\n     def testCacheManagers(self):\n         # The cache and caching policy managers should exist\n         httpcache = self.portal._getOb(\'HTTPCache\', None)\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 393d24b60..cb0d88580 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -301,153 +301,6 @@ def test_bundle_defer_async_production(self):\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 2)\n \n \n-class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n-    """Test features of registry node importer"""\n-    _setup_fixture = 0  # No default fixture\n-\n-    def _get_importer(self, blacklist=set([])):\n-        reg = getToolByName(self.portal, \'portal_javascripts\')\n-        importer = ResourceRegistryNodeAdapter(reg, SetupEnviron())\n-        importer.resource_type = \'javascript\'\n-        importer.registry = getUtility(IRegistry)\n-        importer.resource_blacklist = blacklist\n-        return importer\n-\n-    def _get_resources(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IResourceRegistry, prefix="plone.resources"\n-        )\n-\n-    def _get_legacy_bundle(self):\n-        return getUtility(IRegistry).collectionOfInterface(\n-            IBundleRegistry,\n-            prefix="plone.bundles",\n-            check=False\n-        )[\'plone-legacy\']\n-\n-    def _get_resource_dom(self, name=\'++resource++/resource.js\',\n-                          remove=False, enabled=True):\n-        return parseString("""\n-            <object>\n-                <javascript id="%s" remove="%s" enabled="%s" />\n-            </object>\n-            """ % (name, str(remove), str(enabled).lower()))\n-\n-    def test_resource_blacklist(self):\n-        # Ensure that blacklisted resources aren\'t imported\n-        importer = self._get_importer({\'++resource++/bad_resource.js\'})\n-        dom = self._get_resource_dom("++resource++/bad_resource.js")\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertNotIn("++resource++/bad_resource.js", js_files)\n-        self.assertNotIn(\n-            "resource-bad_resource-js",\n-            self._get_legacy_bundle().resources,\n-        )\n-\n-    def test_resource_no_blacklist(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-        js_files = [x.js for x in self._get_resources().values()]\n-        self.assertTrue("++resource++/resource.js" in js_files)\n-        self.assertTrue(\n-            "resource-resource-js" in self._get_legacy_bundle().resources)\n-\n-    def test_insert_again(self):\n-        importer = self._get_importer()\n-        dom = self._get_resource_dom()\n-        num_resources = self._get_legacy_bundle().resources[:]\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-        importer._importNode(dom.documentElement)\n-        self.assertEqual(len(num_resources) + 1,\n-                          len(self._get_legacy_bundle().resources))\n-\n-    def test_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(remove=True)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files) - 1,\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-    def test_insert_after(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-                <javascript id="foobar.js" insert-after="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') + 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_insert_before(self):\n-        importer = self._get_importer()\n-        one = self._get_resource_dom(\'one\')\n-        two = self._get_resource_dom(\'two\')\n-        three = self._get_resource_dom(\'three\')\n-        importer._importNode(one.documentElement)\n-        importer._importNode(two.documentElement)\n-        importer._importNode(three.documentElement)\n-\n-        # now, insert\n-        foobar = parseString("""\n-            <object>\n-              <javascript id="foobar.js" insert-before="one" enabled="true" />\n-            </object>\n-            """)\n-        importer._importNode(foobar.documentElement)\n-        resources = self._get_legacy_bundle().resources\n-        self.assertEqual(\n-            resources.index(\'one\') - 1,\n-            resources.index(\'foobar-js\')\n-        )\n-\n-    def test_be_able_to_disable_but_not_remove(self):\n-        importer = self._get_importer()\n-\n-        # inserter it\n-        dom = self._get_resource_dom()\n-        importer._importNode(dom.documentElement)\n-\n-        resources = self._get_legacy_bundle().resources[:]\n-        js_files = [x.js for x in self._get_resources().values()]\n-\n-        # import again\n-        dom = self._get_resource_dom(enabled=False)\n-        importer._importNode(dom.documentElement)\n-\n-        self.assertEqual(len(resources) - 1,\n-                          len(self._get_legacy_bundle().resources))\n-        self.assertEqual(len(js_files),\n-                          len([x.js for x in self._get_resources().values()]))\n-\n-\n class TestConfigJs(PloneTestCase.PloneTestCase):\n \n     def test_init_shim_works_with_function(self):\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex b754ad725..622559b7c 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -91,11 +91,6 @@ def test_portal_catalog(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_css(self):\n-        url = \'portal_css/manage_cssForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_diff(self):\n         url = \'portal_diff/manage_difftypes\'\n         view = self.portal.restrictedTraverse(url)\n@@ -116,11 +111,6 @@ def test_portal_historyidhandler(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n \n-    def test_portal_javascripts(self):\n-        url = \'portal_javascripts/manage_jsForm\'\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=\'{0} is broken\'.format(url))\n-\n     def test_portal_memberdata(self):\n         url = \'portal_memberdata/manage_overview\'\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/setup.py b/setup.py\nindex b3ffc5378..6c3118600 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -105,7 +105,6 @@\n         \'Products.PluggableAuthService\',\n         \'Products.PluginRegistry\',\n         \'Products.PortalTransforms\',\n-        \'Products.ResourceRegistries\',\n         \'Products.Sessions\',\n         \'Products.SiteErrorLog\',\n         \'Products.statusmessages\',\n'

