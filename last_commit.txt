Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-12T22:54:23+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/03cc489c79d721ac7e75afbdb49992f02b1ff4cd

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a533099d.internal
M pyproject.toml
M setup.cfg
M tox.ini

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..0df002c\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a533099d"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 03fe8fd..9d0c563 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -33,3 +35,28 @@ showcontent = true\n directory = "tests"\n name = "Tests"\n showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 5dc2092..20ce13c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,15 +1,25 @@\n-[check-manifest]\n-ignore =\n-  requirements-*.txt\n-  sources-*.ini\n-  tox.ini\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    requirements-*.txt\n+    sources-*.ini\ndiff --git a/tox.ini b/tox.ini\nindex 24965db..cc3cedc 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n envlist =\n     plone52-py37,\n@@ -6,25 +8,75 @@ envlist =\n     plone60-py39,\n     plone60-py310,\n     plone60-py311,\n+    format\n+    lint\n+    test\n \n skip_missing_interpreters = False\n \n [testenv]\n-usedevelop = False\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n skip_install = true\n+deps =\n+    pre-commit\n commands =\n-    python -V\n-    pip list\n-    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.scale\n+extras =\n+    test\n \n [testenv:plone52-py{37,38}]\n commands_pre =\n     pip install -U --pre mxdev\n     mxdev -c sources-52.ini\n     pip install -rrequirements-52-mxdev.txt\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n \n [testenv:plone60-py{38,39,310,311}]\n commands_pre =\n     pip install -U --pre mxdev\n     mxdev -c sources-60.ini\n     pip install -rrequirements-60-mxdev.txt\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-12T23:08:03+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/a8ec3520939b35e74edb63c3bcea9fbe5787385f

feat: black

Files changed:
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex 41a9b72..fd1678b 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -13,12 +13,7 @@ class IImageScaleFactory(Interface):\n     """Creates a scale"""\n \n     def __call__(\n-        fieldname=None,\n-        mode="scale",\n-        height=None,\n-        width=None,\n-        scale=None,\n-        **parameters\n+        fieldname=None, mode="scale", height=None, width=None, scale=None, **parameters\n     ):\n         """Interface defining an actual scaling operation.\n \ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 891092a..cd9431d 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -103,8 +103,8 @@ def scaleImage(\n             image = append_images.pop(0)\n             if len(append_images) > 0:\n                 # Saving as a multi page image\n-                animated_kwargs[\'save_all\'] = True\n-                animated_kwargs[\'append_images\'] = append_images\n+                animated_kwargs["save_all"] = True\n+                animated_kwargs["append_images"] = append_images\n             else:\n                 # GIF scaled looks better if we have 8-bit alpha and no palette,\n                 # but it only works for single frame, so don\'t do this for animated GIFs.\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 3986d4a..d08a31b 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -240,10 +240,7 @@ def pre_scale(self, **parameters):\n         width = parameters.get("width")\n         height = parameters.get("height")\n         orig_width, orig_height = value.getImageSize()\n-        mode = get_scale_mode(\n-            parameters.get("mode"),\n-            parameters.get("direction")\n-        )\n+        mode = get_scale_mode(parameters.get("mode"), parameters.get("direction"))\n         width, height = calculate_scaled_dimensions(\n             orig_width, orig_height, width, height, mode\n         )\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex e98531b..79c928d 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -27,7 +27,6 @@ class _DummyContext:\n \n \n class AnnotationStorageTests(TestCase):\n-\n     layer = zca.UNIT_TESTING\n \n     def _provide_dummy_scale_adapter(self, result=_marker):\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-12T23:08:03+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/1c27a56cf41267da19b02b45adce7da07ffa2379

feat: isort

Files changed:
M plone/scale/scale.py

b'diff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex cd9431d..1fdf1fe 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -2,8 +2,8 @@\n \n import math\n import PIL.Image\n-import PIL.ImageSequence\n import PIL.ImageFile\n+import PIL.ImageSequence\n import sys\n import warnings\n \n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-12T23:08:03+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/8cb32337e9261e69f49894dfca93ab5bcc10884a

feat: codespell

Files changed:
M CHANGES.rst
M README.rst
M plone/scale/interfaces.py
M plone/scale/scale.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 00be4f1..8d85132 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -336,7 +336,7 @@ New:\n - Use an adapter to lookup the actual factory for scaling.\n   Deprecated passing the factory as named parameter along,\n   because this had not enough flexibility:\n-  If addons want to provide alterative methods to scale (i.e. cropping),\n+  If addons want to provide alternative methods to scale (i.e. cropping),\n   now a specific adapter can perform the work.\n   [jensens]\n \ndiff --git a/README.rst b/README.rst\nindex 9c40342..f05055c 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -68,5 +68,5 @@ Visiting the url will generate the scale if this has not happened yet.\n If you prefer Genshi syntax and have the ``IImageScaleStorage`` interface\n in scope the syntax looks like this::\n \n-  <img py:with="thumbnail=IImageScaleStorage(context).pre_scale(\'logo\', width=64, heigh=64)"\n+  <img py:with="thumbnail=IImageScaleStorage(context).pre_scale(\'logo\', width=64, height=64)"\n        py:attributes="dict(src=thumbnail.url, width=thumbnail.width, height=thumbnail.height" />\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex fd1678b..ff00a9d 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -44,7 +44,7 @@ def __call__(\n         or ``None`` on failure.\n \n         ``value``\n-            is expected to be an storeable value\n+            is expected to be an storable value\n \n         ``format``\n             is the minor part of the ``image`` mimetype\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 1fdf1fe..77f2592 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -431,7 +431,7 @@ def scalePILImage(image, width=None, height=None, mode="scale", direction=None):\n     The return value the scaled image in the form of another instance of\n     `PIL.Image`.\n     """\n-    # convert zero to None, same sematics: calculate this scale\n+    # convert zero to None, same semantics: calculate this scale\n     if width == 0:\n         width = None\n     if height == 0:\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-12T23:08:03+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/d0927b17a3c1b6cb01ba095680a4a6a39d659e51

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 9d0c563..3c095fe 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,5 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+Pillow = ['PIL']\n+ignore-packages = ['plone.protect', 'persistent']\n"

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-13T00:33:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/7c6611611f499297e422cef193c690e4a1d45d25

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 0c01e97..e97ada7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,7 +15,6 @@\n     "persistent",\n ]\n \n-# "zope.configuration",\n TEST_REQUIREMENTS = [\n     "zope.component",\n     "zope.configuration",\n@@ -59,6 +58,7 @@\n     install_requires=[\n         "Pillow",\n         "setuptools",\n+        "zope.annotation",\n     ],\n     extras_require=dict(\n         storage=STORAGE_REQUIREMENTS,\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2023-03-14T00:34:14+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/4eeb09a1b159a81aca8423315ca417ff2278b3b8

Merge pull request #74 from plone/config-with-default-template-2827ab91

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a533099d.internal
M CHANGES.rst
M README.rst
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/test_storage.py
M pyproject.toml
M setup.cfg
M setup.py
M tox.ini

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..0df002c\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a533099d"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 00be4f1..8d85132 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -336,7 +336,7 @@ New:\n - Use an adapter to lookup the actual factory for scaling.\n   Deprecated passing the factory as named parameter along,\n   because this had not enough flexibility:\n-  If addons want to provide alterative methods to scale (i.e. cropping),\n+  If addons want to provide alternative methods to scale (i.e. cropping),\n   now a specific adapter can perform the work.\n   [jensens]\n \ndiff --git a/README.rst b/README.rst\nindex 9c40342..f05055c 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -68,5 +68,5 @@ Visiting the url will generate the scale if this has not happened yet.\n If you prefer Genshi syntax and have the ``IImageScaleStorage`` interface\n in scope the syntax looks like this::\n \n-  <img py:with="thumbnail=IImageScaleStorage(context).pre_scale(\'logo\', width=64, heigh=64)"\n+  <img py:with="thumbnail=IImageScaleStorage(context).pre_scale(\'logo\', width=64, height=64)"\n        py:attributes="dict(src=thumbnail.url, width=thumbnail.width, height=thumbnail.height" />\ndiff --git a/news/a533099d.internal b/news/a533099d.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a533099d.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py\nindex 41a9b72..ff00a9d 100644\n--- a/plone/scale/interfaces.py\n+++ b/plone/scale/interfaces.py\n@@ -13,12 +13,7 @@ class IImageScaleFactory(Interface):\n     """Creates a scale"""\n \n     def __call__(\n-        fieldname=None,\n-        mode="scale",\n-        height=None,\n-        width=None,\n-        scale=None,\n-        **parameters\n+        fieldname=None, mode="scale", height=None, width=None, scale=None, **parameters\n     ):\n         """Interface defining an actual scaling operation.\n \n@@ -49,7 +44,7 @@ def __call__(\n         or ``None`` on failure.\n \n         ``value``\n-            is expected to be an storeable value\n+            is expected to be an storable value\n \n         ``format``\n             is the minor part of the ``image`` mimetype\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 891092a..77f2592 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -2,8 +2,8 @@\n \n import math\n import PIL.Image\n-import PIL.ImageSequence\n import PIL.ImageFile\n+import PIL.ImageSequence\n import sys\n import warnings\n \n@@ -103,8 +103,8 @@ def scaleImage(\n             image = append_images.pop(0)\n             if len(append_images) > 0:\n                 # Saving as a multi page image\n-                animated_kwargs[\'save_all\'] = True\n-                animated_kwargs[\'append_images\'] = append_images\n+                animated_kwargs["save_all"] = True\n+                animated_kwargs["append_images"] = append_images\n             else:\n                 # GIF scaled looks better if we have 8-bit alpha and no palette,\n                 # but it only works for single frame, so don\'t do this for animated GIFs.\n@@ -431,7 +431,7 @@ def scalePILImage(image, width=None, height=None, mode="scale", direction=None):\n     The return value the scaled image in the form of another instance of\n     `PIL.Image`.\n     """\n-    # convert zero to None, same sematics: calculate this scale\n+    # convert zero to None, same semantics: calculate this scale\n     if width == 0:\n         width = None\n     if height == 0:\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 3986d4a..d08a31b 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -240,10 +240,7 @@ def pre_scale(self, **parameters):\n         width = parameters.get("width")\n         height = parameters.get("height")\n         orig_width, orig_height = value.getImageSize()\n-        mode = get_scale_mode(\n-            parameters.get("mode"),\n-            parameters.get("direction")\n-        )\n+        mode = get_scale_mode(parameters.get("mode"), parameters.get("direction"))\n         width, height = calculate_scaled_dimensions(\n             orig_width, orig_height, width, height, mode\n         )\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex e98531b..79c928d 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -27,7 +27,6 @@ class _DummyContext:\n \n \n class AnnotationStorageTests(TestCase):\n-\n     layer = zca.UNIT_TESTING\n \n     def _provide_dummy_scale_adapter(self, result=_marker):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 03fe8fd..3c095fe 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -33,3 +35,30 @@ showcontent = true\n directory = "tests"\n name = "Tests"\n showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'setuptools\', \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+Pillow = [\'PIL\']\n+ignore-packages = [\'plone.protect\', \'persistent\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 5dc2092..20ce13c 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,15 +1,25 @@\n-[check-manifest]\n-ignore =\n-  requirements-*.txt\n-  sources-*.ini\n-  tox.ini\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    requirements-*.txt\n+    sources-*.ini\ndiff --git a/setup.py b/setup.py\nindex 0c01e97..e97ada7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,7 +15,6 @@\n     "persistent",\n ]\n \n-# "zope.configuration",\n TEST_REQUIREMENTS = [\n     "zope.component",\n     "zope.configuration",\n@@ -59,6 +58,7 @@\n     install_requires=[\n         "Pillow",\n         "setuptools",\n+        "zope.annotation",\n     ],\n     extras_require=dict(\n         storage=STORAGE_REQUIREMENTS,\ndiff --git a/tox.ini b/tox.ini\nindex 24965db..cc3cedc 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n envlist =\n     plone52-py37,\n@@ -6,25 +8,75 @@ envlist =\n     plone60-py39,\n     plone60-py310,\n     plone60-py311,\n+    format\n+    lint\n+    test\n \n skip_missing_interpreters = False\n \n [testenv]\n-usedevelop = False\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n skip_install = true\n+deps =\n+    pre-commit\n commands =\n-    python -V\n-    pip list\n-    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.scale\n+extras =\n+    test\n \n [testenv:plone52-py{37,38}]\n commands_pre =\n     pip install -U --pre mxdev\n     mxdev -c sources-52.ini\n     pip install -rrequirements-52-mxdev.txt\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n \n [testenv:plone60-py{38,39,310,311}]\n commands_pre =\n     pip install -U --pre mxdev\n     mxdev -c sources-60.ini\n     pip install -rrequirements-60-mxdev.txt\n+usedevelop = False\n+skip_install = true\n+commands =\n+    python -V\n+    pip list\n+    zope-testrunner --test-path={toxinidir} -s plone.scale {posargs:-vc}\n'

