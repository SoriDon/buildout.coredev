Repository: mockup


Branch: refs/heads/master
Date: 2017-08-16T13:13:53+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/mockup/commit/55fff8ba1e4373b849cb177caae5b788a8198f52

Fix sortable callback

Files changed:
M CHANGES.rst
M mockup/patterns/sortable/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index af8ae443..3c676156 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,9 @@ Incompatibile changes:
 
 Bug fixes:
 
+- Fix callback of sortable pattern
+  [tomgross]
+
 - Related Items: Fix filtering of non-selectable and non-browsable items, so that no empty list elements are contained.
   Filtering behavior is: When browsing, show only folderish or non-selected, selectable items (but non-selectable, folderish items are greyed out).
   When searching, show only selectable items, which were not already selected.
diff --git a/mockup/patterns/sortable/pattern.js b/mockup/patterns/sortable/pattern.js
index f96e8e2a..7d87cb2b 100644
--- a/mockup/patterns/sortable/pattern.js
+++ b/mockup/patterns/sortable/pattern.js
@@ -4,7 +4,7 @@
  *    selector(string): Selector to use to draggable items in pattern ('li')
  *    dragClass(string): Class to apply to original item that is being dragged. ('item-dragging')
  *    cloneClass(string): Class to apply to cloned item that is dragged. ('dragging')
- *    drop(function): callback function for when item is dropped (null)
+ *    drop(string): Name of callback function in global namespace to be called when item is dropped ('')
  *
  * Documentation:
  *    # Default
@@ -65,7 +65,7 @@ define([
           addClass(pattern.options.cloneClass).
           css({opacity: 0.75, position: 'absolute'}).appendTo(document.body);
       },
-      drop: null // function to handle drop event
+      drop: ''  // name of global function to handle drop event.
     },
     init: function() {
       var self = this;
@@ -110,7 +110,7 @@ define([
         $el.removeClass(self.options.dragClass);
         $(dd.proxy).remove();
         if (self.options.drop) {
-          self.options.drop($el, $el.index() - start);
+          window[self.options.drop]($el, $el.index() - start);
         }
       })
       .drop('init', function(e, dd ) {


Repository: mockup


Branch: refs/heads/master
Date: 2017-08-16T13:14:18+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/d8d033be2d5c2641c64adb87f65d65b2d8faef60

Merge pull request #794 from plone/fix_sortable_callback

Fix callback for sortable pattern

Files changed:
M CHANGES.rst
M mockup/patterns/sortable/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index af8ae443..3c676156 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,9 @@ Incompatibile changes:
 
 Bug fixes:
 
+- Fix callback of sortable pattern
+  [tomgross]
+
 - Related Items: Fix filtering of non-selectable and non-browsable items, so that no empty list elements are contained.
   Filtering behavior is: When browsing, show only folderish or non-selected, selectable items (but non-selectable, folderish items are greyed out).
   When searching, show only selectable items, which were not already selected.
diff --git a/mockup/patterns/sortable/pattern.js b/mockup/patterns/sortable/pattern.js
index f96e8e2a..7d87cb2b 100644
--- a/mockup/patterns/sortable/pattern.js
+++ b/mockup/patterns/sortable/pattern.js
@@ -4,7 +4,7 @@
  *    selector(string): Selector to use to draggable items in pattern ('li')
  *    dragClass(string): Class to apply to original item that is being dragged. ('item-dragging')
  *    cloneClass(string): Class to apply to cloned item that is dragged. ('dragging')
- *    drop(function): callback function for when item is dropped (null)
+ *    drop(string): Name of callback function in global namespace to be called when item is dropped ('')
  *
  * Documentation:
  *    # Default
@@ -65,7 +65,7 @@ define([
           addClass(pattern.options.cloneClass).
           css({opacity: 0.75, position: 'absolute'}).appendTo(document.body);
       },
-      drop: null // function to handle drop event
+      drop: ''  // name of global function to handle drop event.
     },
     init: function() {
       var self = this;
@@ -110,7 +110,7 @@ define([
         $el.removeClass(self.options.dragClass);
         $(dd.proxy).remove();
         if (self.options.drop) {
-          self.options.drop($el, $el.index() - start);
+          window[self.options.drop]($el, $el.index() - start);
         }
       })
       .drop('init', function(e, dd ) {


