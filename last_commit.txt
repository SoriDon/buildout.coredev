Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-02-24T21:50:07+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/96e0bc119ecb847112b1310860b43e5c86cd5a54

Return proper error message when trying to create a content object wiâ€¦ (#1334)

* Return proper error message when trying to create a content object with a wrong @type parameter.

* Add another test

Files changed:
A news/1188.bugfix
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/tests/test_content_post.py

b'diff --git a/news/1188.bugfix b/news/1188.bugfix\nnew file mode 100644\nindex 000000000..dd94f2d2e\n--- /dev/null\n+++ b/news/1188.bugfix\n@@ -0,0 +1 @@\n+Return proper error message when trying to create a content object with a wrong @type parameter. [tisto]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex c5147c85e..beb23b98e 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -33,6 +33,12 @@ def create(container, type_, id_=None, title=None):\n     portal_types = getToolByName(container, "portal_types")\n     type_info = portal_types.getTypeInfo(type_)\n \n+    if not type_info:\n+        raise Unauthorized(\n+            "Invalid \'@type\' parameter. No content type with the name \'%s\' found"\n+            % type_\n+        )\n+\n     # Check for add permission\n     if not type_info.isConstructionAllowed(container):\n         raise Unauthorized("Cannot create %s" % type_info.getId())\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 3e2291e34..586c0799f 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -67,7 +67,7 @@ def test_post_to_folder_creates_folder(self):\n         expected_url = self.portal_url + "/folder1/myfolder"\n         self.assertEqual(expected_url, response.json().get("@id"))\n \n-    def test_post_without_type_returns_400(self):\n+    def test_post_without_type_returns_validation_error(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n             headers={"Accept": "application/json"},\n@@ -77,6 +77,37 @@ def test_post_without_type_returns_400(self):\n         self.assertEqual(400, response.status_code)\n         self.assertIn("Property \'@type\' is required", response.text)\n \n+    def test_post_with_invalid_type_returns_validation_error(self):\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "NonExistentType",\n+                "id": "mydocument",\n+                "title": "My Document",\n+            },\n+        )\n+        self.assertEqual(403, response.status_code)\n+        self.assertEqual(\n+            "Invalid \'@type\' parameter. No content type with the name \'NonExistentType\' found",\n+            response.json().get("error").get("message"),\n+        )\n+\n+    def test_post_with_empty_type_returns_validation_error(self):\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "",\n+                "id": "mydocument",\n+                "title": "My Document",\n+            },\n+        )\n+        self.assertEqual(400, response.status_code)\n+        self.assertIn("Property \'@type\' is required", response.text)\n+\n     def test_post_without_id_creates_id_from_title(self):\n         response = requests.post(\n             self.portal.folder1.absolute_url(),\n'

